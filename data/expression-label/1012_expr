[DiagnosticType, ., error, (, "JSC_INTERNAL_ERROR_MODULE_DEPEND", ,, "null deepest common module", )]
[DiagnosticType]
["JSC_INTERNAL_ERROR_MODULE_DEPEND"]
["null deepest common module"]
["JSCompiler_stubMethod"]
["JSCompiler_unstubMethod"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = "]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod("]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply("]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {"]
["var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {"]
["var JSCompiler_stubMap = [];"]
["function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {"]
["  return function() {"]
["    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply("]
["        this, arguments);"]
["  };"]
["}"]
["function JSCompiler_unstubMethod("]
["    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {"]
["  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = "]
["      JSCompiler_unstubMethod_body;"]
["}"]
[this, ., compiler]
[this]
[compiler]
[this, ., idGenerator]
[this]
[idGenerator]
[this, ., moduleGraph]
[this]
[compiler, ., getModuleGraph, (, )]
[compiler]
[this, ., analyzer]
[this]
[new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,, false, )]
[compiler]
[moduleGraph]
[canModifyExterns]
[false]
[moduleGraph, !=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[moduleGraph, ., getModuleCount, (, ), >, 1]
[moduleGraph, ., getModuleCount, (, )]
[moduleGraph]
[1]
[analyzer, ., process, (, externRoot, ,, root, )]
[analyzer]
[externRoot]
[root]
[moveMethods, (, analyzer, ., getAllNameInfo, (, ), )]
[analyzer, ., getAllNameInfo, (, )]
[analyzer]
[idGenerator, ., hasGeneratedAnyIds, (, )]
[idGenerator]
[allNameInfo]
[!, nameInfo, ., isReferenced, (, )]
[nameInfo, ., isReferenced, (, )]
[nameInfo]
[nameInfo, ., readsClosureVariables, (, )]
[nameInfo]
[nameInfo, ., getDeepestCommonModuleRef, (, )]
[nameInfo]
[deepestCommonModuleRef, ==, null]
[deepestCommonModuleRef]
[null]
[compiler, ., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), )]
[compiler]
[JSError, ., make, (, NULL_COMMON_MODULE_ERROR, )]
[JSError]
[NULL_COMMON_MODULE_ERROR]
[nameInfo, ., getDeclarations, (, ), ., descendingIterator, (, )]
[nameInfo, ., getDeclarations, (, )]
[nameInfo]
[declarations, ., hasNext, (, )]
[declarations]
[declarations, ., next, (, )]
[declarations]
[!, (, symbol, instanceof, Property, )]
[(, symbol, instanceof, Property, )]
[symbol, instanceof, Property]
[symbol]
[(, Property, ), symbol]
[symbol]
[prop, ., getRootVar, (, ), ==, null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (, )]
[prop, ., getRootVar, (, ), ==, null]
[prop, ., getRootVar, (, )]
[prop]
[null]
[!, prop, ., getRootVar, (, ), ., isGlobal, (, )]
[prop, ., getRootVar, (, ), ., isGlobal, (, )]
[prop, ., getRootVar, (, )]
[prop]
[prop, ., getValue, (, )]
[prop]
[moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (, )]
[moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), )]
[moduleGraph]
[deepestCommonModuleRef]
[prop, ., getModule, (, )]
[prop]
[value, ., isFunction, (, )]
[value]
[value, ., getParent, (, )]
[value]
[valueParent, ., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, )]
[valueParent, ., isGetterDef, (, )]
[valueParent]
[valueParent, ., isSetterDef, (, )]
[valueParent]
[prop, ., getPrototype, (, )]
[prop]
[idGenerator, ., newId, (, )]
[idGenerator]
[IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, )]
[IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), )]
[IR]
[IR, ., name, (, STUB_METHOD_NAME, )]
[IR]
[STUB_METHOD_NAME]
[IR, ., number, (, stubId, )]
[IR]
[stubId]
[value]
[stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[stubCall]
[Node, ., FREE_CALL]
[Node]
[true]
[valueParent, ., replaceChild, (, value, ,, stubCall, )]
[valueParent]
[value]
[stubCall]
[compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, )]
[compiler]
[deepestCommonModuleRef]
[IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, )]
[IR]
[IR, ., name, (, UNSTUB_METHOD_NAME, )]
[IR]
[UNSTUB_METHOD_NAME]
[IR, ., number, (, stubId, )]
[IR]
[stubId]
[value]
[unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[unstubCall]
[Node, ., FREE_CALL]
[Node]
[true]
[unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), )]
[unstubParent]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, )]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), )]
[IR]
[IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, )]
[IR]
[IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), )]
[IR]
[proto, ., cloneTree, (, )]
[proto]
[IR, ., string, (, nameInfo, ., name, )]
[IR]
[nameInfo, ., name]
[nameInfo]
[unstubCall]
[value]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, )]
[!, hasStubDeclaration]
[hasStubDeclaration]
[idGenerator, ., hasGeneratedAnyIds, (, )]
[idGenerator]
[compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, )]
[compiler]
[STUB_DECLARATIONS]
[compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (, declarations, ., removeChildren, (, ), )]
[compiler, ., getNodeForCodeInsertion, (, null, )]
[compiler]
[null]
[declarations, ., removeChildren, (, )]
[declarations]
[0L]
[0]
[currentId, !=, 0]
[currentId]
[0]
[currentId, ++]
[currentId]
