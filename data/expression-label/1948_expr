[10000000]
[1e-12]
[-, 3349935121172596109L]
[3349935121172596109L]
[p]
[DEFAULT_EPSILON]
[DEFAULT_MAX_ITERATIONS]
[new, Well19937c, (, )]
[p]
[epsilon]
[maxIterations]
[rng]
[p, <=, 0]
[p]
[0]
[new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, p, )]
[LocalizedFormats, ., MEAN]
[LocalizedFormats]
[p]
[mean]
[p]
[this, ., epsilon]
[this]
[epsilon]
[this, ., maxIterations]
[this]
[maxIterations]
[normal]
[new, NormalDistribution, (, rng, ,, p, ,, FastMath, ., sqrt, (, p, ), ,, NormalDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, )]
[rng]
[p]
[FastMath, ., sqrt, (, p, )]
[FastMath]
[p]
[NormalDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
[NormalDistribution]
[exponential]
[new, ExponentialDistribution, (, rng, ,, 1, ,, ExponentialDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, )]
[rng]
[1]
[ExponentialDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
[ExponentialDistribution]
[p]
[epsilon]
[DEFAULT_MAX_ITERATIONS]
[p]
[DEFAULT_EPSILON]
[maxIterations]
[mean]
[x, <, 0, ||, x, ==, Integer, ., MAX_VALUE]
[x, <, 0]
[x]
[0]
[x, ==, Integer, ., MAX_VALUE]
[x]
[Integer, ., MAX_VALUE]
[Integer]
[ret]
[0.0]
[x, ==, 0]
[x]
[0]
[ret]
[FastMath, ., exp, (, -, mean, )]
[FastMath]
[-, mean]
[mean]
[ret]
[FastMath, ., exp, (, -, SaddlePointExpansion, ., getStirlingError, (, x, ), -, SaddlePointExpansion, ., getDeviancePart, (, x, ,, mean, ), ), /, FastMath, ., sqrt, (, MathUtils, ., TWO_PI, *, x, )]
[FastMath, ., exp, (, -, SaddlePointExpansion, ., getStirlingError, (, x, ), -, SaddlePointExpansion, ., getDeviancePart, (, x, ,, mean, ), )]
[FastMath]
[-, SaddlePointExpansion, ., getStirlingError, (, x, ), -, SaddlePointExpansion, ., getDeviancePart, (, x, ,, mean, )]
[-, SaddlePointExpansion, ., getStirlingError, (, x, )]
[SaddlePointExpansion, ., getStirlingError, (, x, )]
[SaddlePointExpansion]
[x]
[SaddlePointExpansion, ., getDeviancePart, (, x, ,, mean, )]
[SaddlePointExpansion]
[x]
[mean]
[FastMath, ., sqrt, (, MathUtils, ., TWO_PI, *, x, )]
[FastMath]
[MathUtils, ., TWO_PI, *, x]
[MathUtils, ., TWO_PI]
[MathUtils]
[x]
[ret]
[x, <, 0]
[x]
[0]
[0]
[x, ==, Integer, ., MAX_VALUE]
[x]
[Integer, ., MAX_VALUE]
[Integer]
[1]
[Gamma, ., regularizedGammaQ, (, (, double, ), x, +, 1, ,, mean, ,, epsilon, ,, maxIterations, )]
[Gamma]
[(, double, ), x, +, 1]
[(, double, ), x]
[x]
[1]
[mean]
[epsilon]
[maxIterations]
[normal, ., cumulativeProbability, (, x, +, 0.5, )]
[normal]
[x, +, 0.5]
[x]
[0.5]
[getMean, (, )]
[getMean, (, )]
[0]
[Integer, ., MAX_VALUE]
[Integer]
[true]
[(, int, ), FastMath, ., min, (, nextPoisson, (, mean, ), ,, Integer, ., MAX_VALUE, )]
[FastMath, ., min, (, nextPoisson, (, mean, ), ,, Integer, ., MAX_VALUE, )]
[FastMath]
[nextPoisson, (, mean, )]
[mean]
[Integer, ., MAX_VALUE]
[Integer]
[40.0d]
[meanPoisson, <, pivot]
[meanPoisson]
[pivot]
[FastMath, ., exp, (, -, meanPoisson, )]
[FastMath]
[-, meanPoisson]
[meanPoisson]
[0]
[1.0d]
[1.0d]
[n, <, 1000, *, meanPoisson]
[n]
[1000, *, meanPoisson]
[1000]
[meanPoisson]
[rnd]
[random, ., nextDouble, (, )]
[random]
[r]
[r, *, rnd]
[r]
[rnd]
[r, >=, p]
[r]
[p]
[n, ++]
[n]
[n]
[n]
[FastMath, ., floor, (, meanPoisson, )]
[FastMath]
[meanPoisson]
[meanPoisson, -, lambda]
[meanPoisson]
[lambda]
[FastMath, ., log, (, lambda, )]
[FastMath]
[lambda]
[CombinatoricsUtils, ., factorialLog, (, (, int, ), lambda, )]
[CombinatoricsUtils]
[(, int, ), lambda]
[lambda]
[lambdaFractional, <, Double, ., MIN_VALUE, ?, 0, :, nextPoisson, (, lambdaFractional, )]
[lambdaFractional, <, Double, ., MIN_VALUE]
[lambdaFractional]
[Double, ., MIN_VALUE]
[Double]
[0]
[nextPoisson, (, lambdaFractional, )]
[lambdaFractional]
[FastMath, ., sqrt, (, lambda, *, FastMath, ., log, (, 32, *, lambda, /, FastMath, ., PI, +, 1, ), )]
[FastMath]
[lambda, *, FastMath, ., log, (, 32, *, lambda, /, FastMath, ., PI, +, 1, )]
[lambda]
[FastMath, ., log, (, 32, *, lambda, /, FastMath, ., PI, +, 1, )]
[FastMath]
[32, *, lambda, /, FastMath, ., PI, +, 1]
[32, *, lambda, /, FastMath, ., PI]
[32, *, lambda]
[32]
[lambda]
[FastMath, ., PI]
[FastMath]
[1]
[delta, /, 2]
[delta]
[2]
[2, *, lambda, +, delta]
[2, *, lambda]
[2]
[lambda]
[delta]
[FastMath, ., sqrt, (, FastMath, ., PI, *, twolpd, ), *, FastMath, ., exp, (, 1, /, 8, *, lambda, )]
[FastMath, ., sqrt, (, FastMath, ., PI, *, twolpd, )]
[FastMath]
[FastMath, ., PI, *, twolpd]
[FastMath, ., PI]
[FastMath]
[twolpd]
[FastMath, ., exp, (, 1, /, 8, *, lambda, )]
[FastMath]
[1, /, 8, *, lambda]
[1, /, 8]
[1]
[8]
[lambda]
[(, twolpd, /, delta, ), *, FastMath, ., exp, (, -, delta, *, (, 1, +, delta, ), /, twolpd, )]
[(, twolpd, /, delta, )]
[twolpd, /, delta]
[twolpd]
[delta]
[FastMath, ., exp, (, -, delta, *, (, 1, +, delta, ), /, twolpd, )]
[FastMath]
[-, delta, *, (, 1, +, delta, ), /, twolpd]
[-, delta, *, (, 1, +, delta, )]
[-, delta]
[delta]
[(, 1, +, delta, )]
[1, +, delta]
[1]
[delta]
[twolpd]
[a1, +, a2, +, 1]
[a1, +, a2]
[a1]
[a2]
[1]
[a1, /, aSum]
[a1]
[aSum]
[a2, /, aSum]
[a2]
[aSum]
[1, /, (, 8, *, lambda, )]
[1]
[(, 8, *, lambda, )]
[8, *, lambda]
[8]
[lambda]
[0]
[0]
[0]
[0]
[0]
[0]
[0]
[random, ., nextDouble, (, )]
[random]
[u, <=, p1]
[u]
[p1]
[random, ., nextGaussian, (, )]
[random]
[x]
[n, *, FastMath, ., sqrt, (, lambda, +, halfDelta, ), -, 0.5d]
[n, *, FastMath, ., sqrt, (, lambda, +, halfDelta, )]
[n]
[FastMath, ., sqrt, (, lambda, +, halfDelta, )]
[FastMath]
[lambda, +, halfDelta]
[lambda]
[halfDelta]
[0.5d]
[x, >, delta, ||, x, <, -, lambda]
[x, >, delta]
[x]
[delta]
[x, <, -, lambda]
[x]
[-, lambda]
[lambda]
[y]
[x, <, 0, ?, FastMath, ., floor, (, x, ), :, FastMath, ., ceil, (, x, )]
[x, <, 0]
[x]
[0]
[FastMath, ., floor, (, x, )]
[FastMath]
[x]
[FastMath, ., ceil, (, x, )]
[FastMath]
[x]
[exponential, ., sample, (, )]
[exponential]
[v]
[-, e, -, (, n, *, n, /, 2, ), +, c1]
[-, e, -, (, n, *, n, /, 2, )]
[-, e]
[e]
[(, n, *, n, /, 2, )]
[n, *, n, /, 2]
[n, *, n]
[n]
[n]
[2]
[c1]
[u, >, p1, +, p2]
[u]
[p1, +, p2]
[p1]
[p2]
[y]
[lambda]
[x]
[delta, +, (, twolpd, /, delta, ), *, exponential, ., sample, (, )]
[delta]
[(, twolpd, /, delta, ), *, exponential, ., sample, (, )]
[(, twolpd, /, delta, )]
[twolpd, /, delta]
[twolpd]
[delta]
[exponential, ., sample, (, )]
[exponential]
[y]
[FastMath, ., ceil, (, x, )]
[FastMath]
[x]
[v]
[-, exponential, ., sample, (, ), -, delta, *, (, x, +, 1, ), /, twolpd]
[-, exponential, ., sample, (, )]
[exponential, ., sample, (, )]
[exponential]
[delta, *, (, x, +, 1, ), /, twolpd]
[delta, *, (, x, +, 1, )]
[delta]
[(, x, +, 1, )]
[x, +, 1]
[x]
[1]
[twolpd]
[a]
[x, <, 0, ?, 1, :, 0]
[x, <, 0]
[x]
[0]
[1]
[0]
[t]
[y, *, (, y, +, 1, ), /, (, 2, *, lambda, )]
[y, *, (, y, +, 1, )]
[y]
[(, y, +, 1, )]
[y, +, 1]
[y]
[1]
[(, 2, *, lambda, )]
[2, *, lambda]
[2]
[lambda]
[v, <, -, t, &&, a, ==, 0]
[v, <, -, t]
[v]
[-, t]
[t]
[a, ==, 0]
[a]
[0]
[y]
[lambda, +, y]
[lambda]
[y]
[qr]
[t, *, (, (, 2, *, y, +, 1, ), /, (, 6, *, lambda, ), -, 1, )]
[t]
[(, (, 2, *, y, +, 1, ), /, (, 6, *, lambda, ), -, 1, )]
[(, 2, *, y, +, 1, ), /, (, 6, *, lambda, ), -, 1]
[(, 2, *, y, +, 1, ), /, (, 6, *, lambda, )]
[(, 2, *, y, +, 1, )]
[2, *, y, +, 1]
[2, *, y]
[2]
[y]
[1]
[(, 6, *, lambda, )]
[6, *, lambda]
[6]
[lambda]
[1]
[qa]
[qr, -, (, t, *, t, ), /, (, 3, *, (, lambda, +, a, *, (, y, +, 1, ), ), )]
[qr]
[(, t, *, t, ), /, (, 3, *, (, lambda, +, a, *, (, y, +, 1, ), ), )]
[(, t, *, t, )]
[t, *, t]
[t]
[t]
[(, 3, *, (, lambda, +, a, *, (, y, +, 1, ), ), )]
[3, *, (, lambda, +, a, *, (, y, +, 1, ), )]
[3]
[(, lambda, +, a, *, (, y, +, 1, ), )]
[lambda, +, a, *, (, y, +, 1, )]
[lambda]
[a, *, (, y, +, 1, )]
[a]
[(, y, +, 1, )]
[y, +, 1]
[y]
[1]
[v, <, qa]
[v]
[qa]
[y]
[lambda, +, y]
[lambda]
[y]
[v, >, qr]
[v]
[qr]
[v, <, y, *, logLambda, -, CombinatoricsUtils, ., factorialLog, (, (, int, ), (, y, +, lambda, ), ), +, logLambdaFactorial]
[v]
[y, *, logLambda, -, CombinatoricsUtils, ., factorialLog, (, (, int, ), (, y, +, lambda, ), ), +, logLambdaFactorial]
[y, *, logLambda, -, CombinatoricsUtils, ., factorialLog, (, (, int, ), (, y, +, lambda, ), )]
[y, *, logLambda]
[y]
[logLambda]
[CombinatoricsUtils, ., factorialLog, (, (, int, ), (, y, +, lambda, ), )]
[CombinatoricsUtils]
[(, int, ), (, y, +, lambda, )]
[(, y, +, lambda, )]
[y, +, lambda]
[y]
[lambda]
[logLambdaFactorial]
[y]
[lambda, +, y]
[lambda]
[y]
[y2, +, (, long, ), y]
[y2]
[(, long, ), y]
[y]
