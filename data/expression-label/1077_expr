[DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", )]
[DiagnosticType]
["JSC_STRIP_TYPE_INHERIT_ERROR"]
["Non-strip type {0} cannot inherit from strip type {1}"]
[DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,, "Unable to strip assignment to {0}", )]
[DiagnosticType]
["JSC_STRIP_ASSIGNMENT_ERROR"]
["Unable to strip assignment to {0}"]
[this, ., compiler]
[this]
[compiler]
[this, ., stripTypes]
[this]
[Sets, ., newHashSet, (, stripTypes, )]
[Sets]
[stripTypes]
[this, ., stripNameSuffixes]
[this]
[Sets, ., newHashSet, (, stripNameSuffixes, )]
[Sets]
[stripNameSuffixes]
[this, ., stripTypePrefixes]
[this]
[Sets, ., newHashSet, (, stripTypePrefixes, )]
[Sets]
[stripTypePrefixes]
[this, ., stripNamePrefixes]
[this]
[Sets, ., newHashSet, (, stripNamePrefixes, )]
[Sets]
[stripNamePrefixes]
[this, ., varsToRemove]
[this]
[Sets, ., newHashSet, (, )]
[Sets]
[stripTypes, ., add, (, "goog.tweak", )]
[stripTypes]
["goog.tweak"]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, Strip, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, Strip, (, )]
[n, ., getType, (, )]
[n]
[Token, ., VAR]
[Token]
[removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., NAME]
[Token]
[maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., CALL]
[Token]
[Token, ., NEW]
[Token]
[maybeRemoveCall, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., OBJECTLIT]
[Token]
[eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, )]
[t]
[n]
[Token, ., EXPR_RESULT]
[Token]
[maybeEliminateExpressionByName, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[n, ., getFirstChild, (, )]
[n]
[nameNode, !=, null]
[nameNode]
[null]
[nameNode]
[nameNode, ., getNext, (, )]
[nameNode]
[nameNode, ., getString, (, )]
[nameNode]
[isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), )]
[isStripName, (, name, )]
[name]
[isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[t, ., getScope, (, )]
[t]
[varsToRemove, ., add, (, scope, ., getVar, (, name, ), )]
[varsToRemove]
[scope, ., getVar, (, name, )]
[scope]
[name]
[n, ., removeChild, (, nameNode, )]
[n]
[nameNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, n, ., hasChildren, (, )]
[n, ., hasChildren, (, )]
[n]
[replaceWithEmpty, (, n, ,, parent, )]
[n]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent, ., getType, (, )]
[parent]
[Token, ., VAR]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, )]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isReferenceToRemovedVar, (, t, ,, n, )]
[t]
[n]
[replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), )]
[parent]
[parent, ., getParent, (, )]
[parent]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[isReferenceToRemovedVar, (, t, ,, n, )]
[t]
[n]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., getParent, (, )]
[parent]
[gramps, ., isExprResult, (, )]
[gramps]
[gramps, ., getParent, (, )]
[gramps]
[replaceWithEmpty, (, gramps, ,, greatGramps, )]
[gramps]
[greatGramps]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getNext, (, )]
[n]
[parent, ., removeChild, (, rvalue, )]
[parent]
[rvalue]
[gramps, ., replaceChild, (, parent, ,, rvalue, )]
[gramps]
[parent]
[rvalue]
[compiler, ., reportCodeChange, (, )]
[compiler]
[replaceWithNull, (, n, ,, parent, )]
[n]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[isReferenceToRemovedVar, (, t, ,, n, )]
[t]
[n]
[replaceWithNull, (, n, ,, parent, )]
[n]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent]
[node]
[true]
[ancestor, ., getFirstChild, (, ), !=, ancestorChild]
[ancestor, ., getFirstChild, (, )]
[ancestor]
[ancestorChild]
[replaceWithNull, (, ancestorChild, ,, ancestor, )]
[ancestorChild]
[ancestor]
[ancestor, ., isExprResult, (, )]
[ancestor]
[ancestor, ., getParent, (, )]
[ancestor]
[replaceWithEmpty, (, ancestor, ,, ancParent, )]
[ancestor]
[ancParent]
[ancestor, ., getType, (, )]
[ancestor]
[type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL]
[type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM]
[type, !=, Token, ., GETPROP]
[type]
[Token, ., GETPROP]
[Token]
[type, !=, Token, ., GETELEM]
[type]
[Token, ., GETELEM]
[Token]
[type, !=, Token, ., CALL]
[type]
[Token, ., CALL]
[Token]
[replaceWithNull, (, ancestorChild, ,, ancestor, )]
[ancestorChild]
[ancestor]
[ancestorChild]
[ancestor]
[ancestor]
[ancestor, ., getParent, (, )]
[ancestor]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getFirstChild, (, )]
[n]
[nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (, lvalue, )]
[nameEndsWithFieldNameToStrip, (, lvalue, )]
[lvalue]
[qualifiedNameBeginsWithStripType, (, lvalue, )]
[lvalue]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[replaceWithEmpty, (, parent, ,, gramps, )]
[parent]
[gramps]
[compiler, ., reportCodeChange, (, )]
[compiler]
[t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,, lvalue, ., getQualifiedName, (, ), )]
[t]
[n]
[STRIP_ASSIGNMENT_ERROR]
[lvalue, ., getQualifiedName, (, )]
[lvalue]
[n, ., getFirstChild, (, )]
[n]
[nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (, expression, )]
[nameEndsWithFieldNameToStrip, (, expression, )]
[expression]
[qualifiedNameBeginsWithStripType, (, expression, )]
[expression]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[replaceWithEmpty, (, parent, ,, gramps, )]
[parent]
[gramps]
[replaceWithEmpty, (, n, ,, parent, )]
[n]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[isMethodOrCtorCallThatTriggersRemoval, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[replaceHighestNestedCallWithNull, (, n, ,, parent, )]
[n]
[parent]
[n, ., getFirstChild, (, )]
[n]
[key, !=, null]
[key]
[null]
[isStripName, (, key, ., getString, (, ), )]
[key, ., getString, (, )]
[key]
[key, ., getFirstChild, (, )]
[key]
[key, ., getNext, (, )]
[key]
[n, ., removeChild, (, key, )]
[n]
[key]
[key]
[next]
[compiler, ., reportCodeChange, (, )]
[compiler]
[key]
[key, ., getNext, (, )]
[key]
[n, !=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), )]
[n, !=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, )]
[n, !=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), )]
[n, !=, null]
[n]
[null]
[(, n, ., isCall, (, ), ||, n, ., isNew, (, ), )]
[n, ., isCall, (, ), ||, n, ., isNew, (, )]
[n, ., isCall, (, )]
[n]
[n, ., isNew, (, )]
[n]
[n, ., hasChildren, (, )]
[n]
[(, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), ), )]
[qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), )]
[qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[nameEndsWithFieldNameToStrip, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getQualifiedName, (, )]
[n]
[qualifiedNameBeginsWithStripType, (, name, )]
[name]
[name, !=, null]
[name]
[null]
[stripTypes]
[name, ., equals, (, type, ), ||, name, ., startsWith, (, type, +, ".", )]
[name, ., equals, (, type, )]
[name]
[type]
[name, ., startsWith, (, type, +, ".", )]
[name]
[type, +, "."]
[type]
["."]
[true]
[stripTypePrefixes]
[name, ., startsWith, (, type, )]
[name]
[type]
[true]
[false]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, name, )]
[scope]
[name]
[varsToRemove, ., contains, (, var, )]
[varsToRemove]
[var]
[n, ., getFirstChild, (, )]
[n]
[function, ==, null, ||, !, function, ., isGetProp, (, )]
[function, ==, null]
[function]
[null]
[!, function, ., isGetProp, (, )]
[function, ., isGetProp, (, )]
[function]
[false]
[parent, !=, null, &&, parent, ., isName, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., isName, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[gramps, !=, null, &&, gramps, ., isVar, (, )]
[gramps, !=, null]
[gramps]
[null]
[gramps, ., isVar, (, )]
[gramps]
[false]
[function, ., getFirstChild, (, )]
[function]
[nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,, n, )]
[nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, )]
[nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, )]
[nameEndsWithFieldNameToStrip, (, callee, )]
[callee]
[nameEndsWithFieldNameToStrip, (, function, )]
[function]
[qualifiedNameBeginsWithStripType, (, function, )]
[function]
[actsOnStripType, (, t, ,, n, )]
[t]
[n]
[n, !=, null, &&, n, ., isGetProp, (, )]
[n, !=, null]
[n]
[null]
[n, ., isGetProp, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[propNode, !=, null, &&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), )]
[propNode, !=, null, &&, propNode, ., isString, (, )]
[propNode, !=, null]
[propNode]
[null]
[propNode, ., isString, (, )]
[propNode]
[isStripName, (, propNode, ., getString, (, ), )]
[propNode, ., getString, (, )]
[propNode]
[false]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[callNode]
[classes, !=, null]
[classes]
[null]
[qualifiedNameBeginsWithStripType, (, classes, ., subclassName, )]
[classes, ., subclassName]
[classes]
[true]
[qualifiedNameBeginsWithStripType, (, classes, ., superclassName, )]
[classes, ., superclassName]
[classes]
[t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, )]
[t]
[callNode]
[STRIP_TYPE_INHERIT_ERROR]
[classes, ., subclassName]
[classes]
[classes, ., superclassName]
[classes]
[false]
[stripNameSuffixes, ., contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, )]
[stripNameSuffixes, ., contains, (, name, )]
[stripNameSuffixes]
[name]
[stripNamePrefixes, ., contains, (, name, )]
[stripNamePrefixes]
[name]
[true]
[(, name, ., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), )]
[(, name, ., length, (, ), ==, 0, )]
[name, ., length, (, ), ==, 0]
[name, ., length, (, )]
[name]
[0]
[Character, ., isUpperCase, (, name, ., charAt, (, 0, ), )]
[Character]
[name, ., charAt, (, 0, )]
[name]
[0]
[false]
[name, ., toLowerCase, (, )]
[name]
[stripNamePrefixes]
[lcName, ., startsWith, (, stripName, ., toLowerCase, (, ), )]
[lcName]
[stripName, ., toLowerCase, (, )]
[stripName]
[true]
[stripNameSuffixes]
[lcName, ., endsWith, (, stripName, ., toLowerCase, (, ), )]
[lcName]
[stripName, ., toLowerCase, (, )]
[stripName]
[true]
[false]
[parent, ., replaceChild, (, n, ,, IR, ., nullNode, (, ), )]
[parent]
[n]
[IR, ., nullNode, (, )]
[IR]
[NodeUtil, ., removeChild, (, parent, ,, n, )]
[NodeUtil]
[parent]
[n]
