[subtree, ., getType, (, )]
[subtree]
[Token, ., ASSIGN]
[Token]
[tryFoldAssignment, (, subtree, )]
[subtree]
[Token, ., COMMA]
[Token]
[tryFoldComma, (, subtree, )]
[subtree]
[Token, ., SCRIPT]
[Token]
[Token, ., BLOCK]
[Token]
[tryOptimizeBlock, (, subtree, )]
[subtree]
[Token, ., EXPR_RESULT]
[Token]
[subtree]
[tryFoldExpr, (, subtree, )]
[subtree]
[subtree]
[Token, ., HOOK]
[Token]
[tryFoldHook, (, subtree, )]
[subtree]
[Token, ., SWITCH]
[Token]
[tryOptimizeSwitch, (, subtree, )]
[subtree]
[Token, ., IF]
[Token]
[tryFoldIf, (, subtree, )]
[subtree]
[Token, ., WHILE]
[Token]
[tryFoldWhile, (, subtree, )]
[subtree]
[Token, ., FOR]
[Token]
[NodeUtil, ., getConditionExpression, (, subtree, )]
[NodeUtil]
[subtree]
[condition, !=, null]
[condition]
[null]
[tryFoldForCondition, (, condition, )]
[condition]
[tryFoldFor, (, subtree, )]
[subtree]
[Token, ., DO]
[Token]
[tryFoldDo, (, subtree, )]
[subtree]
[Token, ., TRY]
[Token]
[tryFoldTry, (, subtree, )]
[subtree]
[subtree]
[Preconditions, ., checkState, (, n, ., isTry, (, ), )]
[Preconditions]
[n, ., isTry, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[body, ., getNext, (, )]
[body]
[catchBlock, ., getNext, (, )]
[catchBlock]
[!, catchBlock, ., hasChildren, (, ), &&, (, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, ), )]
[!, catchBlock, ., hasChildren, (, )]
[catchBlock, ., hasChildren, (, )]
[catchBlock]
[(, finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, ), )]
[finallyBlock, ==, null, ||, !, finallyBlock, ., hasChildren, (, )]
[finallyBlock, ==, null]
[finallyBlock]
[null]
[!, finallyBlock, ., hasChildren, (, )]
[finallyBlock, ., hasChildren, (, )]
[finallyBlock]
[n, ., removeChild, (, body, )]
[n]
[body]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, body, )]
[n, ., getParent, (, )]
[n]
[n]
[body]
[reportCodeChange, (, )]
[body]
[!, body, ., hasChildren, (, )]
[body, ., hasChildren, (, )]
[body]
[NodeUtil, ., redeclareVarsInsideBranch, (, catchBlock, )]
[NodeUtil]
[catchBlock]
[finallyBlock, !=, null]
[finallyBlock]
[null]
[n, ., removeChild, (, finallyBlock, )]
[n]
[finallyBlock]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, finallyBlock, )]
[n, ., getParent, (, )]
[n]
[n]
[finallyBlock]
[n, ., getParent, (, ), ., removeChild, (, n, )]
[n, ., getParent, (, )]
[n]
[n]
[reportCodeChange, (, )]
[finallyBlock]
[n]
[Preconditions, ., checkState, (, subtree, ., isAssign, (, ), )]
[Preconditions]
[subtree, ., isAssign, (, )]
[subtree]
[subtree, ., getFirstChild, (, )]
[subtree]
[subtree, ., getLastChild, (, )]
[subtree]
[left, ., isName, (, ), &&, right, ., isName, (, ), &&, left, ., getString, (, ), ., equals, (, right, ., getString, (, ), )]
[left, ., isName, (, ), &&, right, ., isName, (, )]
[left, ., isName, (, )]
[left]
[right, ., isName, (, )]
[right]
[left, ., getString, (, ), ., equals, (, right, ., getString, (, ), )]
[left, ., getString, (, )]
[left]
[right, ., getString, (, )]
[right]
[subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, right, ., detachFromParent, (, ), )]
[subtree, ., getParent, (, )]
[subtree]
[subtree]
[right, ., detachFromParent, (, )]
[right]
[reportCodeChange, (, )]
[right]
[subtree]
[trySimplifyUnusedResult, (, subtree, ., getFirstChild, (, ), )]
[subtree, ., getFirstChild, (, )]
[subtree]
[result, ==, null]
[result]
[null]
[subtree, ., getParent, (, )]
[subtree]
[parent, ., isLabel, (, )]
[parent]
[IR, ., block, (, ), ., srcref, (, subtree, )]
[IR, ., block, (, )]
[IR]
[subtree]
[parent, ., replaceChild, (, subtree, ,, replacement, )]
[parent]
[subtree]
[replacement]
[subtree]
[replacement]
[subtree, ., detachFromParent, (, )]
[subtree]
[subtree]
[null]
[subtree]
[trySimplifyUnusedResult, (, n, ,, true, )]
[n]
[true]
[n]
[n, ., getType, (, )]
[n]
[Token, ., HOOK]
[Token]
[trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), ., getNext, (, ), )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[trySimplifyUnusedResult, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[trueNode, ==, null, &&, falseNode, !=, null]
[trueNode, ==, null]
[trueNode]
[null]
[falseNode, !=, null]
[falseNode]
[null]
[n, ., setType, (, Token, ., OR, )]
[n]
[Token, ., OR]
[Token]
[Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[Preconditions]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[trueNode, !=, null, &&, falseNode, ==, null]
[trueNode, !=, null]
[trueNode]
[null]
[falseNode, ==, null]
[falseNode]
[null]
[n, ., setType, (, Token, ., AND, )]
[n]
[Token, ., AND]
[Token]
[Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[Preconditions]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[trueNode, ==, null, &&, falseNode, ==, null]
[trueNode, ==, null]
[trueNode]
[null]
[falseNode, ==, null]
[falseNode]
[null]
[result]
[trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[result]
[n]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[trySimplifyUnusedResult, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[conditionalResultNode, ==, null]
[conditionalResultNode]
[null]
[Preconditions, ., checkState, (, n, ., hasOneChild, (, ), )]
[Preconditions]
[n, ., hasOneChild, (, )]
[n]
[result]
[trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[result]
[null]
[Token, ., COMMA]
[Token]
[trySimplifyUnusedResult, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[trySimplifyUnusedResult, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[left, ==, null, &&, right, ==, null]
[left, ==, null]
[left]
[null]
[right, ==, null]
[right]
[null]
[result]
[null]
[left, ==, null]
[left]
[null]
[result]
[right]
[right, ==, null]
[right]
[null]
[result]
[left]
[result]
[n]
[!, nodeTypeMayHaveSideEffects, (, n, )]
[nodeTypeMayHaveSideEffects, (, n, )]
[n]
[null]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[next]
[next]
[c, ., getNext, (, )]
[c]
[c]
[trySimplifyUnusedResult, (, c, )]
[c]
[c, !=, null]
[c]
[null]
[c, ., detachFromParent, (, )]
[c]
[resultList, ==, null]
[resultList]
[null]
[resultList]
[c]
[resultList]
[IR, ., comma, (, resultList, ,, c, ), ., srcref, (, c, )]
[IR, ., comma, (, resultList, ,, c, )]
[IR]
[resultList]
[c]
[c]
[result]
[resultList]
[n, !=, result]
[n]
[result]
[n, ., getParent, (, )]
[n]
[result, ==, null]
[result]
[null]
[removeUnused]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[result]
[IR, ., empty, (, ), ., srcref, (, n, )]
[IR, ., empty, (, )]
[IR]
[n]
[parent, ., replaceChild, (, n, ,, result, )]
[parent]
[n]
[result]
[result, ., getParent, (, ), !=, null]
[result, ., getParent, (, )]
[result]
[null]
[result, ., detachFromParent, (, )]
[result]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, result, )]
[n, ., getParent, (, )]
[n]
[n]
[result]
[reportCodeChange, (, )]
[result]
[Preconditions, ., checkState, (, n, ., isSwitch, (, ), )]
[Preconditions]
[n, ., isSwitch, (, )]
[n]
[tryOptimizeDefaultCase, (, n, )]
[n]
[defaultCase, ==, null]
[defaultCase]
[null]
[n, ., getFirstChild, (, )]
[n]
[null]
[null]
[cur]
[cond, ., getNext, (, )]
[cond]
[cur, !=, null]
[cur]
[null]
[cur]
[next]
[next]
[cur, ., getNext, (, )]
[cur]
[!, mayHaveSideEffects, (, cur, ., getFirstChild, (, ), ), &&, isUselessCase, (, cur, ,, prev, )]
[!, mayHaveSideEffects, (, cur, ., getFirstChild, (, ), )]
[mayHaveSideEffects, (, cur, ., getFirstChild, (, ), )]
[cur, ., getFirstChild, (, )]
[cur]
[isUselessCase, (, cur, ,, prev, )]
[cur]
[prev]
[removeCase, (, n, ,, cur, )]
[n]
[cur]
[prev]
[cur]
[NodeUtil, ., isLiteralValue, (, cond, ,, false, )]
[NodeUtil]
[cond]
[false]
[TernaryValue, ., TRUE]
[TernaryValue]
[cur]
[cond, ., getNext, (, )]
[cond]
[cur, !=, null]
[cur]
[null]
[cur]
[next]
[next]
[cur, ., getNext, (, )]
[cur]
[caseLabel]
[cur, ., getFirstChild, (, )]
[cur]
[caseMatches]
[PeepholeFoldConstants, ., evaluateComparison, (, Token, ., SHEQ, ,, cond, ,, caseLabel, )]
[PeepholeFoldConstants]
[Token, ., SHEQ]
[Token]
[cond]
[caseLabel]
[caseMatches, ==, TernaryValue, ., TRUE]
[caseMatches]
[TernaryValue, ., TRUE]
[TernaryValue]
[caseMatches, ==, TernaryValue, ., UNKNOWN]
[caseMatches]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[removeCase, (, n, ,, cur, )]
[n]
[cur]
[caseMatches, !=, TernaryValue, ., UNKNOWN]
[caseMatches]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[cur, !=, null]
[cur]
[null]
[block]
[cur, ., getLastChild, (, )]
[cur]
[lastStm]
[block, ., getLastChild, (, )]
[block]
[cur]
[cur, ., getNext, (, )]
[cur]
[lastStm, !=, null, &&, lastStm, ., isBreak, (, )]
[lastStm, !=, null]
[lastStm]
[null]
[lastStm, ., isBreak, (, )]
[lastStm]
[block, ., removeChild, (, lastStm, )]
[block]
[lastStm]
[reportCodeChange, (, )]
[cur, !=, null]
[cur]
[null]
[cur]
[next]
[next]
[cur, ., getNext, (, )]
[cur]
[removeCase, (, n, ,, cur, )]
[n]
[cur]
[cur]
[cond, ., getNext, (, )]
[cond]
[cur, !=, null, &&, cur, ., getNext, (, ), ==, null]
[cur, !=, null]
[cur]
[null]
[cur, ., getNext, (, ), ==, null]
[cur, ., getNext, (, )]
[cur]
[null]
[block]
[cur, ., getLastChild, (, )]
[cur]
[!, (, NodeUtil, ., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), )]
[(, NodeUtil, ., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), )]
[NodeUtil, ., containsType, (, block, ,, Token, ., BREAK, ,, NodeUtil, ., MATCH_NOT_FUNCTION, )]
[NodeUtil]
[block]
[Token, ., BREAK]
[Token]
[NodeUtil, ., MATCH_NOT_FUNCTION]
[NodeUtil]
[cur, ., removeChild, (, block, )]
[cur]
[block]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, block, )]
[n, ., getParent, (, )]
[n]
[n]
[block]
[reportCodeChange, (, )]
[block]
[n, ., hasOneChild, (, )]
[n]
[n, ., removeFirstChild, (, )]
[n]
[IR, ., exprResult, (, condition, ), ., srcref, (, n, )]
[IR, ., exprResult, (, condition, )]
[IR]
[condition]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, )]
[n, ., getParent, (, )]
[n]
[n]
[replacement]
[reportCodeChange, (, )]
[replacement]
[null]
[Preconditions, ., checkState, (, n, ., isSwitch, (, ), )]
[Preconditions]
[n, ., isSwitch, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[c, ., isDefaultCase, (, )]
[c]
[lastNonRemovable, ., getNext, (, )]
[lastNonRemovable]
[caseToRemove, !=, c]
[caseToRemove]
[c]
[caseToRemove]
[next]
[next]
[caseToRemove, ., getNext, (, )]
[caseToRemove]
[removeCase, (, n, ,, caseToRemove, )]
[n]
[caseToRemove]
[(, lastNonRemovable, ==, n, ., getFirstChild, (, ), ), ?, null, :, lastNonRemovable]
[(, lastNonRemovable, ==, n, ., getFirstChild, (, ), )]
[lastNonRemovable, ==, n, ., getFirstChild, (, )]
[lastNonRemovable]
[n, ., getFirstChild, (, )]
[n]
[null]
[lastNonRemovable]
[isUselessCase, (, c, ,, prevCase, )]
[c]
[prevCase]
[removeCase, (, n, ,, c, )]
[n]
[c]
[null]
[c]
[Preconditions, ., checkState, (, c, ., isCase, (, ), )]
[Preconditions]
[c, ., isCase, (, )]
[c]
[c, ., getLastChild, (, ), ., hasChildren, (, ), ||, mayHaveSideEffects, (, c, ., getFirstChild, (, ), )]
[c, ., getLastChild, (, ), ., hasChildren, (, )]
[c, ., getLastChild, (, )]
[c]
[mayHaveSideEffects, (, c, ., getFirstChild, (, ), )]
[c, ., getFirstChild, (, )]
[c]
[lastNonRemovable]
[c]
[null]
[NodeUtil, ., redeclareVarsInsideBranch, (, caseNode, )]
[NodeUtil]
[caseNode]
[switchNode, ., removeChild, (, caseNode, )]
[switchNode]
[caseNode]
[reportCodeChange, (, )]
[Preconditions, ., checkState, (, previousCase, ==, null, ||, previousCase, ., getNext, (, ), ==, caseNode, )]
[Preconditions]
[previousCase, ==, null, ||, previousCase, ., getNext, (, ), ==, caseNode]
[previousCase, ==, null]
[previousCase]
[null]
[previousCase, ., getNext, (, ), ==, caseNode]
[previousCase, ., getNext, (, )]
[previousCase]
[caseNode]
[caseNode, ., getParent, (, )]
[caseNode]
[switchNode, ., getLastChild, (, ), !=, caseNode, &&, previousCase, !=, null]
[switchNode, ., getLastChild, (, ), !=, caseNode]
[switchNode, ., getLastChild, (, )]
[switchNode]
[caseNode]
[previousCase, !=, null]
[previousCase]
[null]
[previousCase, ., getLastChild, (, )]
[previousCase]
[!, previousBlock, ., hasChildren, (, ), ||, !, isExit, (, previousBlock, ., getLastChild, (, ), )]
[!, previousBlock, ., hasChildren, (, )]
[previousBlock, ., hasChildren, (, )]
[previousBlock]
[!, isExit, (, previousBlock, ., getLastChild, (, ), )]
[isExit, (, previousBlock, ., getLastChild, (, ), )]
[previousBlock, ., getLastChild, (, )]
[previousBlock]
[false]
[caseNode]
[executingCase, !=, null]
[executingCase]
[null]
[Preconditions, ., checkState, (, executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, ), )]
[Preconditions]
[executingCase, ., isDefaultCase, (, ), ||, executingCase, ., isCase, (, )]
[executingCase, ., isDefaultCase, (, )]
[executingCase]
[executingCase, ., isCase, (, )]
[executingCase]
[Preconditions, ., checkState, (, caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, ), )]
[Preconditions]
[caseNode, ==, executingCase, ||, !, executingCase, ., isDefaultCase, (, )]
[caseNode, ==, executingCase]
[caseNode]
[executingCase]
[!, executingCase, ., isDefaultCase, (, )]
[executingCase, ., isDefaultCase, (, )]
[executingCase]
[executingCase, ., getLastChild, (, )]
[executingCase]
[Preconditions, ., checkState, (, block, ., isBlock, (, ), )]
[Preconditions]
[block, ., isBlock, (, )]
[block]
[block, ., hasChildren, (, )]
[block]
[block, ., children, (, )]
[block]
[blockChild, ., getType, (, )]
[blockChild]
[Token, ., BREAK]
[Token]
[blockChild, ., getFirstChild, (, ), ==, null]
[blockChild, ., getFirstChild, (, )]
[blockChild]
[null]
[Token, ., VAR]
[Token]
[blockChild, ., hasOneChild, (, ), &&, blockChild, ., getFirstChild, (, ), ., getFirstChild, (, ), ==, null]
[blockChild, ., hasOneChild, (, )]
[blockChild]
[blockChild, ., getFirstChild, (, ), ., getFirstChild, (, ), ==, null]
[blockChild, ., getFirstChild, (, ), ., getFirstChild, (, )]
[blockChild, ., getFirstChild, (, )]
[blockChild]
[null]
[false]
[false]
[executingCase]
[executingCase, ., getNext, (, )]
[executingCase]
[true]
[n, ., getType, (, )]
[n]
[Token, ., BREAK]
[Token]
[Token, ., CONTINUE]
[Token]
[Token, ., RETURN]
[Token]
[Token, ., THROW]
[Token]
[true]
[false]
[n, ., getParent, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[left, ., getNext, (, )]
[left]
[left]
[trySimplifyUnusedResult, (, left, )]
[left]
[left, ==, null, ||, !, mayHaveSideEffects, (, left, )]
[left, ==, null]
[left]
[null]
[!, mayHaveSideEffects, (, left, )]
[mayHaveSideEffects, (, left, )]
[left]
[n, ., removeChild, (, right, )]
[n]
[right]
[parent, ., replaceChild, (, n, ,, right, )]
[parent]
[n]
[right]
[reportCodeChange, (, )]
[right]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c, ., getNext, (, )]
[c]
[!, isUnremovableNode, (, c, ), &&, !, mayHaveSideEffects, (, c, )]
[!, isUnremovableNode, (, c, )]
[isUnremovableNode, (, c, )]
[c]
[!, mayHaveSideEffects, (, c, )]
[mayHaveSideEffects, (, c, )]
[c]
[n, ., removeChild, (, c, )]
[n]
[c]
[reportCodeChange, (, )]
[tryOptimizeConditionalAfterAssign, (, c, )]
[c]
[c]
[next]
[n, ., isSyntheticBlock, (, ), ||, n, ., getParent, (, ), ==, null]
[n, ., isSyntheticBlock, (, )]
[n]
[n, ., getParent, (, ), ==, null]
[n, ., getParent, (, )]
[n]
[null]
[n]
[NodeUtil, ., tryMergeBlock, (, n, )]
[NodeUtil]
[n]
[reportCodeChange, (, )]
[null]
[n]
[(, n, ., isBlock, (, ), &&, n, ., isSyntheticBlock, (, ), ), ||, n, ., isScript, (, )]
[(, n, ., isBlock, (, ), &&, n, ., isSyntheticBlock, (, ), )]
[n, ., isBlock, (, ), &&, n, ., isSyntheticBlock, (, )]
[n, ., isBlock, (, )]
[n]
[n, ., isSyntheticBlock, (, )]
[n]
[n, ., isScript, (, )]
[n]
[n, ., getNext, (, )]
[n]
[isSimpleAssignment, (, n, ), &&, isConditionalStatement, (, next, )]
[isSimpleAssignment, (, n, )]
[n]
[isConditionalStatement, (, next, )]
[next]
[getSimpleAssignmentName, (, n, )]
[n]
[getConditionalStatementCondition, (, next, )]
[next]
[lhsAssign, ., isName, (, ), &&, condition, ., isName, (, ), &&, lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, ), )]
[lhsAssign, ., isName, (, ), &&, condition, ., isName, (, )]
[lhsAssign, ., isName, (, )]
[lhsAssign]
[condition, ., isName, (, )]
[condition]
[lhsAssign, ., getString, (, ), ., equals, (, condition, ., getString, (, ), )]
[lhsAssign, ., getString, (, )]
[lhsAssign]
[condition, ., getString, (, )]
[condition]
[getSimpleAssignmentValue, (, n, )]
[n]
[NodeUtil, ., getImpureBooleanValue, (, rhsAssign, )]
[NodeUtil]
[rhsAssign]
[value, !=, TernaryValue, ., UNKNOWN]
[value]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[NodeUtil, ., booleanNode, (, value, ., toBoolean, (, true, ), )]
[NodeUtil]
[value, ., toBoolean, (, true, )]
[value]
[true]
[condition, ., getParent, (, ), ., replaceChild, (, condition, ,, replacementConditionNode, )]
[condition, ., getParent, (, )]
[condition]
[condition]
[replacementConditionNode]
[reportCodeChange, (, )]
[NodeUtil, ., isExprAssign, (, n, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, )]
[NodeUtil, ., isExprAssign, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[true]
[n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[n, ., isVar, (, ), &&, n, ., hasOneChild, (, )]
[n, ., isVar, (, )]
[n]
[n, ., hasOneChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[null]
[true]
[false]
[Preconditions, ., checkState, (, isSimpleAssignment, (, n, ), )]
[Preconditions]
[isSimpleAssignment, (, n, )]
[n]
[NodeUtil, ., isExprAssign, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[Preconditions, ., checkState, (, isSimpleAssignment, (, n, ), )]
[Preconditions]
[isSimpleAssignment, (, n, )]
[n]
[n, ., getFirstChild, (, ), ., getLastChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, !=, null, &&, (, n, ., isIf, (, ), ||, isExprConditional, (, n, ), )]
[n, !=, null]
[n]
[null]
[(, n, ., isIf, (, ), ||, isExprConditional, (, n, ), )]
[n, ., isIf, (, ), ||, isExprConditional, (, n, )]
[n, ., isIf, (, )]
[n]
[isExprConditional, (, n, )]
[n]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, ), ., getType, (, )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., HOOK]
[Token]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[true]
[false]
[n, ., isIf, (, )]
[n]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[Preconditions, ., checkState, (, isExprConditional, (, n, ), )]
[Preconditions]
[isExprConditional, (, n, )]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[Preconditions, ., checkState, (, n, ., isIf, (, ), )]
[Preconditions]
[n, ., isIf, (, )]
[n]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkNotNull, (, parent, )]
[Preconditions]
[parent]
[n, ., getType, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[cond, ., getNext, (, )]
[cond]
[thenBody, ., getNext, (, )]
[thenBody]
[elseBody, !=, null, &&, !, mayHaveSideEffects, (, elseBody, )]
[elseBody, !=, null]
[elseBody]
[null]
[!, mayHaveSideEffects, (, elseBody, )]
[mayHaveSideEffects, (, elseBody, )]
[elseBody]
[n, ., removeChild, (, elseBody, )]
[n]
[elseBody]
[elseBody]
[null]
[reportCodeChange, (, )]
[!, mayHaveSideEffects, (, thenBody, ), &&, elseBody, !=, null]
[!, mayHaveSideEffects, (, thenBody, )]
[mayHaveSideEffects, (, thenBody, )]
[thenBody]
[elseBody, !=, null]
[elseBody]
[null]
[n, ., removeChild, (, elseBody, )]
[n]
[elseBody]
[n, ., replaceChild, (, thenBody, ,, elseBody, )]
[n]
[thenBody]
[elseBody]
[new, Node, (, Token, ., NOT, )]
[Token, ., NOT]
[Token]
[n, ., replaceChild, (, cond, ,, notCond, )]
[n]
[cond]
[notCond]
[notCond, ., addChildToFront, (, cond, )]
[notCond]
[cond]
[cond]
[notCond]
[thenBody]
[cond, ., getNext, (, )]
[cond]
[elseBody]
[null]
[reportCodeChange, (, )]
[!, mayHaveSideEffects, (, thenBody, ), &&, elseBody, ==, null]
[!, mayHaveSideEffects, (, thenBody, )]
[mayHaveSideEffects, (, thenBody, )]
[thenBody]
[elseBody, ==, null]
[elseBody]
[null]
[mayHaveSideEffects, (, cond, )]
[cond]
[n, ., removeChild, (, cond, )]
[n]
[cond]
[NodeUtil, ., newExpr, (, cond, )]
[NodeUtil]
[cond]
[parent, ., replaceChild, (, n, ,, replacement, )]
[parent]
[n]
[replacement]
[reportCodeChange, (, )]
[replacement]
[NodeUtil, ., removeChild, (, parent, ,, n, )]
[NodeUtil]
[parent]
[n]
[reportCodeChange, (, )]
[null]
[NodeUtil, ., getImpureBooleanValue, (, cond, )]
[NodeUtil]
[cond]
[condValue, ==, TernaryValue, ., UNKNOWN]
[condValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[n]
[mayHaveSideEffects, (, cond, )]
[cond]
[condValue, ==, TernaryValue, ., TRUE]
[condValue]
[TernaryValue, ., TRUE]
[TernaryValue]
[!, newConditionValue, &&, elseBody, ==, null]
[!, newConditionValue]
[newConditionValue]
[elseBody, ==, null]
[elseBody]
[null]
[elseBody]
[IR, ., block, (, ), ., srcref, (, n, )]
[IR, ., block, (, )]
[IR]
[n]
[n, ., addChildToBack, (, elseBody, )]
[n]
[elseBody]
[NodeUtil, ., booleanNode, (, newConditionValue, )]
[NodeUtil]
[newConditionValue]
[n, ., replaceChild, (, cond, ,, newCond, )]
[n]
[cond]
[newCond]
[newConditionValue, ?, thenBody, :, elseBody]
[newConditionValue]
[thenBody]
[elseBody]
[branchToKeep, ., addChildToFront, (, IR, ., exprResult, (, cond, ), ., srcref, (, cond, ), )]
[branchToKeep]
[IR, ., exprResult, (, cond, ), ., srcref, (, cond, )]
[IR, ., exprResult, (, cond, )]
[IR]
[cond]
[cond]
[reportCodeChange, (, )]
[cond]
[newCond]
[condValue, ., toBoolean, (, true, )]
[condValue]
[true]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[Preconditions, ., checkState, (, type, ==, Token, ., IF, )]
[Preconditions]
[type, ==, Token, ., IF]
[type]
[Token, ., IF]
[Token]
[condTrue]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., removeChild, (, thenStmt, )]
[n]
[thenStmt]
[parent, ., replaceChild, (, n, ,, thenStmt, )]
[parent]
[n]
[thenStmt]
[reportCodeChange, (, )]
[thenStmt]
[NodeUtil, ., redeclareVarsInsideBranch, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., removeChild, (, parent, ,, n, )]
[NodeUtil]
[parent]
[n]
[reportCodeChange, (, )]
[null]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[trueBranch, ., getNext, (, )]
[trueBranch]
[condTrue, ?, trueBranch, :, falseBranch]
[condTrue]
[trueBranch]
[falseBranch]
[condTrue, ?, falseBranch, :, trueBranch]
[condTrue]
[falseBranch]
[trueBranch]
[NodeUtil, ., redeclareVarsInsideBranch, (, branchToRemove, )]
[NodeUtil]
[branchToRemove]
[n, ., removeChild, (, branchToKeep, )]
[n]
[branchToKeep]
[parent, ., replaceChild, (, n, ,, branchToKeep, )]
[parent]
[n]
[branchToKeep]
[reportCodeChange, (, )]
[branchToKeep]
[Preconditions, ., checkState, (, n, ., isHook, (, ), )]
[Preconditions]
[n, ., isHook, (, )]
[n]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkNotNull, (, parent, )]
[Preconditions]
[parent]
[n, ., getFirstChild, (, )]
[n]
[cond, ., getNext, (, )]
[cond]
[thenBody, ., getNext, (, )]
[thenBody]
[NodeUtil, ., getImpureBooleanValue, (, cond, )]
[NodeUtil]
[cond]
[condValue, ==, TernaryValue, ., UNKNOWN]
[condValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[!, areNodesEqualForInlining, (, thenBody, ,, elseBody, )]
[areNodesEqualForInlining, (, thenBody, ,, elseBody, )]
[thenBody]
[elseBody]
[n]
[n, ., detachChildren, (, )]
[n]
[condValue, ., toBoolean, (, true, ), ?, thenBody, :, elseBody]
[condValue, ., toBoolean, (, true, )]
[condValue]
[true]
[thenBody]
[elseBody]
[mayHaveSideEffects, (, cond, )]
[cond]
[replacement]
[IR, ., comma, (, cond, ,, branchToKeep, ), ., srcref, (, n, )]
[IR, ., comma, (, cond, ,, branchToKeep, )]
[IR]
[cond]
[branchToKeep]
[n]
[replacement]
[branchToKeep]
[parent, ., replaceChild, (, n, ,, replacement, )]
[parent]
[n]
[replacement]
[reportCodeChange, (, )]
[replacement]
[Preconditions, ., checkArgument, (, n, ., isWhile, (, ), )]
[Preconditions]
[n, ., isWhile, (, )]
[n]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getPureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE]
[NodeUtil, ., getPureBooleanValue, (, cond, )]
[NodeUtil]
[cond]
[TernaryValue, ., FALSE]
[TernaryValue]
[n]
[NodeUtil, ., redeclareVarsInsideBranch, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, )]
[NodeUtil]
[n, ., getParent, (, )]
[n]
[n]
[reportCodeChange, (, )]
[null]
[Preconditions, ., checkArgument, (, n, ., isFor, (, ), )]
[Preconditions]
[n, ., isFor, (, )]
[n]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[n]
[n, ., getFirstChild, (, )]
[n]
[init, ., getNext, (, )]
[init]
[cond, ., getNext, (, )]
[cond]
[!, init, ., isEmpty, (, ), &&, !, init, ., isVar, (, )]
[!, init, ., isEmpty, (, )]
[init, ., isEmpty, (, )]
[init]
[!, init, ., isVar, (, )]
[init, ., isVar, (, )]
[init]
[init]
[trySimplifyUnusedResult, (, init, ,, false, )]
[init]
[false]
[!, increment, ., isEmpty, (, )]
[increment, ., isEmpty, (, )]
[increment]
[increment]
[trySimplifyUnusedResult, (, increment, ,, false, )]
[increment]
[false]
[!, n, ., getFirstChild, (, ), ., isEmpty, (, )]
[n, ., getFirstChild, (, ), ., isEmpty, (, )]
[n, ., getFirstChild, (, )]
[n]
[n]
[NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE]
[NodeUtil, ., getImpureBooleanValue, (, cond, )]
[NodeUtil]
[cond]
[TernaryValue, ., FALSE]
[TernaryValue]
[n]
[NodeUtil, ., redeclareVarsInsideBranch, (, n, )]
[NodeUtil]
[n]
[!, mayHaveSideEffects, (, cond, )]
[mayHaveSideEffects, (, cond, )]
[cond]
[NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, )]
[NodeUtil]
[n, ., getParent, (, )]
[n]
[n]
[IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., copyInformationFrom, (, cond, )]
[IR, ., exprResult, (, cond, ., detachFromParent, (, ), )]
[IR]
[cond, ., detachFromParent, (, )]
[cond]
[cond]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, statement, )]
[n, ., getParent, (, )]
[n]
[n]
[statement]
[reportCodeChange, (, )]
[null]
[Preconditions, ., checkArgument, (, n, ., isDo, (, ), )]
[Preconditions]
[n, ., isDo, (, )]
[n]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getImpureBooleanValue, (, cond, ), !=, TernaryValue, ., FALSE]
[NodeUtil, ., getImpureBooleanValue, (, cond, )]
[NodeUtil]
[cond]
[TernaryValue, ., FALSE]
[TernaryValue]
[n]
[hasBreakOrContinue, (, n, )]
[n]
[n]
[Preconditions, ., checkState, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (, ), ), )]
[Preconditions]
[NodeUtil, ., isControlStructureCodeBlock, (, n, ,, n, ., getFirstChild, (, ), )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., removeFirstChild, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, block, )]
[parent]
[n]
[block]
[mayHaveSideEffects, (, cond, )]
[cond]
[IR, ., exprResult, (, cond, ., detachFromParent, (, ), ), ., srcref, (, cond, )]
[IR, ., exprResult, (, cond, ., detachFromParent, (, ), )]
[IR]
[cond, ., detachFromParent, (, )]
[cond]
[cond]
[parent, ., addChildAfter, (, condStatement, ,, block, )]
[parent]
[condStatement]
[block]
[reportCodeChange, (, )]
[n]
[NodeUtil, ., has, (, n, ,, Predicates, ., <, Node, >, or, (, new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK, ), ,, new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, ), ), ,, NodeUtil, ., MATCH_NOT_FUNCTION, )]
[NodeUtil]
[n]
[Predicates, ., <, Node, >, or, (, new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK, ), ,, new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, ), )]
[Predicates]
[new, NodeUtil, ., MatchNodeType, (, Token, ., BREAK, )]
[Token, ., BREAK]
[Token]
[new, NodeUtil, ., MatchNodeType, (, Token, ., CONTINUE, )]
[Token, ., CONTINUE]
[Token]
[NodeUtil, ., MATCH_NOT_FUNCTION]
[NodeUtil]
[NodeUtil, ., getPureBooleanValue, (, forCondition, ), ==, TernaryValue, ., TRUE]
[NodeUtil, ., getPureBooleanValue, (, forCondition, )]
[NodeUtil]
[forCondition]
[TernaryValue, ., TRUE]
[TernaryValue]
[forCondition, ., getParent, (, ), ., replaceChild, (, forCondition, ,, IR, ., empty, (, ), )]
[forCondition, ., getParent, (, )]
[forCondition]
[forCondition]
[IR, ., empty, (, )]
[IR]
[reportCodeChange, (, )]
