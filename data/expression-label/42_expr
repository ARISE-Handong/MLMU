[Character, ., digit, (, hexDigit, ,, 16, )]
[Character]
[hexDigit]
[16]
[digit, <, 0]
[digit]
[0]
[new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit", )]
["Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit"]
["Cannot interpret '", +, hexDigit]
["Cannot interpret '"]
[hexDigit]
["' as a hexadecimal digit"]
[digit]
[hexDigit]
['0']
[0x0]
['1']
[0x8]
['2']
[0x4]
['3']
[0xC]
['4']
[0x2]
['5']
[0xA]
['6']
[0x6]
['7']
[0xE]
['8']
[0x1]
['9']
[0x9]
['a']
['A']
[0x5]
['b']
['B']
[0xD]
['c']
['C']
[0x3]
['d']
['D']
[0xB]
['e']
['E']
[0x7]
['f']
['F']
[0xF]
[new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit", )]
["Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit"]
["Cannot interpret '", +, hexDigit]
["Cannot interpret '"]
[hexDigit]
["' as a hexadecimal digit"]
[hexDigit]
['0']
[new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }]
[{, false, ,, false, ,, false, ,, false, }]
[false]
[false]
[false]
[false]
['1']
[new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }]
[{, true, ,, false, ,, false, ,, false, }]
[true]
[false]
[false]
[false]
['2']
[new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }]
[{, false, ,, true, ,, false, ,, false, }]
[false]
[true]
[false]
[false]
['3']
[new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }]
[{, true, ,, true, ,, false, ,, false, }]
[true]
[true]
[false]
[false]
['4']
[new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }]
[{, false, ,, false, ,, true, ,, false, }]
[false]
[false]
[true]
[false]
['5']
[new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }]
[{, true, ,, false, ,, true, ,, false, }]
[true]
[false]
[true]
[false]
['6']
[new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }]
[{, false, ,, true, ,, true, ,, false, }]
[false]
[true]
[true]
[false]
['7']
[new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }]
[{, true, ,, true, ,, true, ,, false, }]
[true]
[true]
[true]
[false]
['8']
[new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }]
[{, false, ,, false, ,, false, ,, true, }]
[false]
[false]
[false]
[true]
['9']
[new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }]
[{, true, ,, false, ,, false, ,, true, }]
[true]
[false]
[false]
[true]
['a']
['A']
[new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }]
[{, false, ,, true, ,, false, ,, true, }]
[false]
[true]
[false]
[true]
['b']
['B']
[new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }]
[{, true, ,, true, ,, false, ,, true, }]
[true]
[true]
[false]
[true]
['c']
['C']
[new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }]
[{, false, ,, false, ,, true, ,, true, }]
[false]
[false]
[true]
[true]
['d']
['D']
[new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }]
[{, true, ,, false, ,, true, ,, true, }]
[true]
[false]
[true]
[true]
['e']
['E']
[new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }]
[{, false, ,, true, ,, true, ,, true, }]
[false]
[true]
[true]
[true]
['f']
['F']
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }]
[{, true, ,, true, ,, true, ,, true, }]
[true]
[true]
[true]
[true]
[new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit", )]
["Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit"]
["Cannot interpret '", +, hexDigit]
["Cannot interpret '"]
[hexDigit]
["' as a hexadecimal digit"]
[hexDigit]
['0']
[new, boolean, [, ], {, false, ,, false, ,, false, ,, false, }]
[{, false, ,, false, ,, false, ,, false, }]
[false]
[false]
[false]
[false]
['1']
[new, boolean, [, ], {, false, ,, false, ,, false, ,, true, }]
[{, false, ,, false, ,, false, ,, true, }]
[false]
[false]
[false]
[true]
['2']
[new, boolean, [, ], {, false, ,, false, ,, true, ,, false, }]
[{, false, ,, false, ,, true, ,, false, }]
[false]
[false]
[true]
[false]
['3']
[new, boolean, [, ], {, false, ,, false, ,, true, ,, true, }]
[{, false, ,, false, ,, true, ,, true, }]
[false]
[false]
[true]
[true]
['4']
[new, boolean, [, ], {, false, ,, true, ,, false, ,, false, }]
[{, false, ,, true, ,, false, ,, false, }]
[false]
[true]
[false]
[false]
['5']
[new, boolean, [, ], {, false, ,, true, ,, false, ,, true, }]
[{, false, ,, true, ,, false, ,, true, }]
[false]
[true]
[false]
[true]
['6']
[new, boolean, [, ], {, false, ,, true, ,, true, ,, false, }]
[{, false, ,, true, ,, true, ,, false, }]
[false]
[true]
[true]
[false]
['7']
[new, boolean, [, ], {, false, ,, true, ,, true, ,, true, }]
[{, false, ,, true, ,, true, ,, true, }]
[false]
[true]
[true]
[true]
['8']
[new, boolean, [, ], {, true, ,, false, ,, false, ,, false, }]
[{, true, ,, false, ,, false, ,, false, }]
[true]
[false]
[false]
[false]
['9']
[new, boolean, [, ], {, true, ,, false, ,, false, ,, true, }]
[{, true, ,, false, ,, false, ,, true, }]
[true]
[false]
[false]
[true]
['a']
['A']
[new, boolean, [, ], {, true, ,, false, ,, true, ,, false, }]
[{, true, ,, false, ,, true, ,, false, }]
[true]
[false]
[true]
[false]
['b']
['B']
[new, boolean, [, ], {, true, ,, false, ,, true, ,, true, }]
[{, true, ,, false, ,, true, ,, true, }]
[true]
[false]
[true]
[true]
['c']
['C']
[new, boolean, [, ], {, true, ,, true, ,, false, ,, false, }]
[{, true, ,, true, ,, false, ,, false, }]
[true]
[true]
[false]
[false]
['d']
['D']
[new, boolean, [, ], {, true, ,, true, ,, false, ,, true, }]
[{, true, ,, true, ,, false, ,, true, }]
[true]
[true]
[false]
[true]
['e']
['E']
[new, boolean, [, ], {, true, ,, true, ,, true, ,, false, }]
[{, true, ,, true, ,, true, ,, false, }]
[true]
[true]
[true]
[false]
['f']
['F']
[new, boolean, [, ], {, true, ,, true, ,, true, ,, true, }]
[{, true, ,, true, ,, true, ,, true, }]
[true]
[true]
[true]
[true]
[new, IllegalArgumentException, (, "Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit", )]
["Cannot interpret '", +, hexDigit, +, "' as a hexadecimal digit"]
["Cannot interpret '", +, hexDigit]
["Cannot interpret '"]
[hexDigit]
["' as a hexadecimal digit"]
[binaryToHexDigit, (, src, ,, 0, )]
[src]
[0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[new, IllegalArgumentException, (, "Cannot convert an empty array.", )]
["Cannot convert an empty array."]
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['f']
['e']
[src, [, srcPos, ]]
[src]
[srcPos]
['d']
['c']
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['b']
['a']
[src, [, srcPos, ]]
[src]
[srcPos]
['9']
['8']
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['7']
['6']
[src, [, srcPos, ]]
[src]
[srcPos]
['5']
['4']
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['3']
['2']
[src, [, srcPos, ]]
[src]
[srcPos]
['1']
['0']
[binaryToHexDigitMsb0_4bits, (, src, ,, 0, )]
[src]
[0]
[src, ., length, >, 8]
[src, ., length]
[src]
[8]
[new, IllegalArgumentException, (, "src.length>8: src.length=", +, src, ., length, )]
["src.length>8: src.length=", +, src, ., length]
["src.length>8: src.length="]
[src, ., length]
[src]
[src, ., length, -, srcPos, <, 4]
[src, ., length, -, srcPos]
[src, ., length]
[src]
[srcPos]
[4]
[new, IllegalArgumentException, (, "src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos, )]
["src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos=", +, srcPos]
["src.length-srcPos<4: src.length=", +, src, ., length, +, ", srcPos="]
["src.length-srcPos<4: src.length=", +, src, ., length]
["src.length-srcPos<4: src.length="]
[src, ., length]
[src]
[", srcPos="]
[srcPos]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['f']
['7']
[src, [, srcPos, ]]
[src]
[srcPos]
['b']
['3']
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['d']
['5']
[src, [, srcPos, ]]
[src]
[srcPos]
['9']
['1']
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['e']
['6']
[src, [, srcPos, ]]
[src]
[srcPos]
['a']
['2']
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, ]]
[src]
[srcPos]
['c']
['4']
[src, [, srcPos, ]]
[src]
[srcPos]
['8']
['0']
[binaryBeMsb0ToHexDigit, (, src, ,, 0, )]
[src]
[0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[new, IllegalArgumentException, (, "Cannot convert an empty array.", )]
["Cannot convert an empty array."]
[src, ., length, -, 1, -, srcPos]
[src, ., length, -, 1]
[src, ., length]
[src]
[1]
[srcPos]
[Math, ., min, (, 4, ,, beSrcPos, +, 1, )]
[Math]
[4]
[beSrcPos, +, 1]
[beSrcPos]
[1]
[new, boolean, [, 4, ]]
[4]
[System, ., arraycopy, (, src, ,, beSrcPos, +, 1, -, srcLen, ,, paddedSrc, ,, 4, -, srcLen, ,, srcLen, )]
[System]
[src]
[beSrcPos, +, 1, -, srcLen]
[beSrcPos, +, 1]
[beSrcPos]
[1]
[srcLen]
[paddedSrc]
[4, -, srcLen]
[4]
[srcLen]
[srcLen]
[src]
[paddedSrc]
[srcPos]
[0]
[src, [, srcPos, ]]
[src]
[srcPos]
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['f']
['e']
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['d']
['c']
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['b']
['a']
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['9']
['8']
[src, ., length, >, srcPos, +, 1, &&, src, [, srcPos, +, 1, ]]
[src, ., length, >, srcPos, +, 1]
[src, ., length]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, [, srcPos, +, 1, ]]
[src]
[srcPos, +, 1]
[srcPos]
[1]
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['7']
['6']
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['5']
['4']
[src, ., length, >, srcPos, +, 2, &&, src, [, srcPos, +, 2, ]]
[src, ., length, >, srcPos, +, 2]
[src, ., length]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, [, srcPos, +, 2, ]]
[src]
[srcPos, +, 2]
[srcPos]
[2]
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['3']
['2']
[src, ., length, >, srcPos, +, 3, &&, src, [, srcPos, +, 3, ]]
[src, ., length, >, srcPos, +, 3]
[src, ., length]
[src]
[srcPos, +, 3]
[srcPos]
[3]
[src, [, srcPos, +, 3, ]]
[src]
[srcPos, +, 3]
[srcPos]
[3]
['1']
['0']
[Character, ., forDigit, (, nibble, ,, 16, )]
[Character]
[nibble]
[16]
[c, ==, Character, ., MIN_VALUE]
[c]
[Character, ., MIN_VALUE]
[Character]
[new, IllegalArgumentException, (, "nibble value not between 0 and 15: ", +, nibble, )]
["nibble value not between 0 and 15: ", +, nibble]
["nibble value not between 0 and 15: "]
[nibble]
[c]
[nibble]
[0x0]
['0']
[0x1]
['8']
[0x2]
['4']
[0x3]
['c']
[0x4]
['2']
[0x5]
['a']
[0x6]
['6']
[0x7]
['e']
[0x8]
['1']
[0x9]
['9']
[0xA]
['5']
[0xB]
['d']
[0xC]
['3']
[0xD]
['b']
[0xE]
['7']
[0xF]
['f']
[new, IllegalArgumentException, (, "nibble value not between 0 and 15: ", +, nibble, )]
["nibble value not between 0 and 15: ", +, nibble]
["nibble value not between 0 and 15: "]
[nibble]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nInts]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nInts]
[0]
[nInts]
[dstInit]
[(, nInts, -, 1, ), *, 32, +, dstPos, >=, 64]
[(, nInts, -, 1, ), *, 32, +, dstPos]
[(, nInts, -, 1, ), *, 32]
[(, nInts, -, 1, )]
[nInts, -, 1]
[nInts]
[1]
[32]
[dstPos]
[64]
[new, IllegalArgumentException, (, "(nInts-1)*32+dstPos is greather or equal to than 64", )]
["(nInts-1)*32+dstPos is greather or equal to than 64"]
[dstInit]
[0]
[0]
[i, <, nInts]
[i]
[nInts]
[i, ++]
[i]
[shift]
[i, *, 32, +, dstPos]
[i, *, 32]
[i]
[32]
[dstPos]
[(, (, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<, shift, )]
[(, 0xffffffffL, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xffffffffL, &, src, [, i, +, srcPos, ], )]
[0xffffffffL, &, src, [, i, +, srcPos, ]]
[0xffffffffL]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xffffffffL, <<, shift]
[0xffffffffL]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nShorts]
[0]
[nShorts]
[dstInit]
[(, nShorts, -, 1, ), *, 16, +, dstPos, >=, 64]
[(, nShorts, -, 1, ), *, 16, +, dstPos]
[(, nShorts, -, 1, ), *, 16]
[(, nShorts, -, 1, )]
[nShorts, -, 1]
[nShorts]
[1]
[16]
[dstPos]
[64]
[new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 64", )]
["(nShorts-1)*16+dstPos is greather or equal to than 64"]
[dstInit]
[0]
[0]
[i, <, nShorts]
[i]
[nShorts]
[i, ++]
[i]
[shift]
[i, *, 16, +, dstPos]
[i, *, 16]
[i]
[16]
[dstPos]
[(, 0xffffL, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xffffL, &, src, [, i, +, srcPos, ], )]
[0xffffL, &, src, [, i, +, srcPos, ]]
[0xffffL]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xffffL, <<, shift]
[0xffffL]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nShorts]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nShorts]
[0]
[nShorts]
[dstInit]
[(, nShorts, -, 1, ), *, 16, +, dstPos, >=, 32]
[(, nShorts, -, 1, ), *, 16, +, dstPos]
[(, nShorts, -, 1, ), *, 16]
[(, nShorts, -, 1, )]
[nShorts, -, 1]
[nShorts]
[1]
[16]
[dstPos]
[32]
[new, IllegalArgumentException, (, "(nShorts-1)*16+dstPos is greather or equal to than 32", )]
["(nShorts-1)*16+dstPos is greather or equal to than 32"]
[dstInit]
[0]
[0]
[i, <, nShorts]
[i]
[nShorts]
[i, ++]
[i]
[shift]
[i, *, 16, +, dstPos]
[i, *, 16]
[i]
[16]
[dstPos]
[(, 0xffff, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xffff, &, src, [, i, +, srcPos, ], )]
[0xffff, &, src, [, i, +, srcPos, ]]
[0xffff]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xffff, <<, shift]
[0xffff]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBytes]
[0]
[nBytes]
[dstInit]
[(, nBytes, -, 1, ), *, 8, +, dstPos, >=, 64]
[(, nBytes, -, 1, ), *, 8, +, dstPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[dstPos]
[64]
[new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 64", )]
["(nBytes-1)*8+dstPos is greather or equal to than 64"]
[dstInit]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, dstPos]
[i, *, 8]
[i]
[8]
[dstPos]
[(, 0xffL, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xffL, &, src, [, i, +, srcPos, ], )]
[0xffL, &, src, [, i, +, srcPos, ]]
[0xffL]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xffL, <<, shift]
[0xffL]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBytes]
[0]
[nBytes]
[dstInit]
[(, nBytes, -, 1, ), *, 8, +, dstPos, >=, 32]
[(, nBytes, -, 1, ), *, 8, +, dstPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[dstPos]
[32]
[new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 32", )]
["(nBytes-1)*8+dstPos is greather or equal to than 32"]
[dstInit]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, dstPos]
[i, *, 8]
[i]
[8]
[dstPos]
[(, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xff, &, src, [, i, +, srcPos, ], )]
[0xff, &, src, [, i, +, srcPos, ]]
[0xff]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xff, <<, shift]
[0xff]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBytes]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBytes]
[0]
[nBytes]
[dstInit]
[(, nBytes, -, 1, ), *, 8, +, dstPos, >=, 16]
[(, nBytes, -, 1, ), *, 8, +, dstPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[dstPos]
[16]
[new, IllegalArgumentException, (, "(nBytes-1)*8+dstPos is greather or equal to than 16", )]
["(nBytes-1)*8+dstPos is greather or equal to than 16"]
[dstInit]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, dstPos]
[i, *, 8]
[i]
[8]
[dstPos]
[(, 0xff, &, src, [, i, +, srcPos, ], ), <<, shift]
[(, 0xff, &, src, [, i, +, srcPos, ], )]
[0xff, &, src, [, i, +, srcPos, ]]
[0xff]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xff, <<, shift]
[0xff]
[shift]
[out]
[(, short, ), (, (, out, &, ~, mask, ), |, bits, )]
[(, (, out, &, ~, mask, ), |, bits, )]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[0, ==, nHex]
[0]
[nHex]
[dstInit]
[(, nHex, -, 1, ), *, 4, +, dstPos, >=, 64]
[(, nHex, -, 1, ), *, 4, +, dstPos]
[(, nHex, -, 1, ), *, 4]
[(, nHex, -, 1, )]
[nHex, -, 1]
[nHex]
[1]
[4]
[dstPos]
[64]
[new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 64", )]
["(nHexs-1)*4+dstPos is greather or equal to than 64"]
[dstInit]
[0]
[0]
[i, <, nHex]
[i]
[nHex]
[i, ++]
[i]
[shift]
[i, *, 4, +, dstPos]
[i, *, 4]
[i]
[4]
[dstPos]
[(, 0xfL, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift]
[(, 0xfL, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), )]
[0xfL, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[0xfL]
[hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[src, ., charAt, (, i, +, srcPos, )]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xfL, <<, shift]
[0xfL]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[0, ==, nHex]
[0]
[nHex]
[dstInit]
[(, nHex, -, 1, ), *, 4, +, dstPos, >=, 32]
[(, nHex, -, 1, ), *, 4, +, dstPos]
[(, nHex, -, 1, ), *, 4]
[(, nHex, -, 1, )]
[nHex, -, 1]
[nHex]
[1]
[4]
[dstPos]
[32]
[new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 32", )]
["(nHexs-1)*4+dstPos is greather or equal to than 32"]
[dstInit]
[0]
[0]
[i, <, nHex]
[i]
[nHex]
[i, ++]
[i]
[shift]
[i, *, 4, +, dstPos]
[i, *, 4]
[i]
[4]
[dstPos]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), )]
[0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[0xf]
[hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[src, ., charAt, (, i, +, srcPos, )]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xf, <<, shift]
[0xf]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[0, ==, nHex]
[0]
[nHex]
[dstInit]
[(, nHex, -, 1, ), *, 4, +, dstPos, >=, 16]
[(, nHex, -, 1, ), *, 4, +, dstPos]
[(, nHex, -, 1, ), *, 4]
[(, nHex, -, 1, )]
[nHex, -, 1]
[nHex]
[1]
[4]
[dstPos]
[16]
[new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 16", )]
["(nHexs-1)*4+dstPos is greather or equal to than 16"]
[dstInit]
[0]
[0]
[i, <, nHex]
[i]
[nHex]
[i, ++]
[i]
[shift]
[i, *, 4, +, dstPos]
[i, *, 4]
[i]
[4]
[dstPos]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), )]
[0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[0xf]
[hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[src, ., charAt, (, i, +, srcPos, )]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xf, <<, shift]
[0xf]
[shift]
[out]
[(, short, ), (, (, out, &, ~, mask, ), |, bits, )]
[(, (, out, &, ~, mask, ), |, bits, )]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[0, ==, nHex]
[0]
[nHex]
[dstInit]
[(, nHex, -, 1, ), *, 4, +, dstPos, >=, 8]
[(, nHex, -, 1, ), *, 4, +, dstPos]
[(, nHex, -, 1, ), *, 4]
[(, nHex, -, 1, )]
[nHex, -, 1]
[nHex]
[1]
[4]
[dstPos]
[8]
[new, IllegalArgumentException, (, "(nHexs-1)*4+dstPos is greather or equal to than 8", )]
["(nHexs-1)*4+dstPos is greather or equal to than 8"]
[dstInit]
[0]
[0]
[i, <, nHex]
[i]
[nHex]
[i, ++]
[i]
[shift]
[i, *, 4, +, dstPos]
[i, *, 4]
[i]
[4]
[dstPos]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), ), <<, shift]
[(, 0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), ), )]
[0xf, &, hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[0xf]
[hexDigitToInt, (, src, ., charAt, (, i, +, srcPos, ), )]
[src, ., charAt, (, i, +, srcPos, )]
[src]
[i, +, srcPos]
[i]
[srcPos]
[shift]
[0xf, <<, shift]
[0xf]
[shift]
[out]
[(, byte, ), (, (, out, &, ~, mask, ), |, bits, )]
[(, (, out, &, ~, mask, ), |, bits, )]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBools]
[0]
[nBools]
[dstInit]
[nBools, -, 1, +, dstPos, >=, 64]
[nBools, -, 1, +, dstPos]
[nBools, -, 1]
[nBools]
[1]
[dstPos]
[64]
[new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 64", )]
["nBools-1+dstPos is greather or equal to than 64"]
[dstInit]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, dstPos]
[i, *, 1]
[i]
[1]
[dstPos]
[(, src, [, i, +, srcPos, ], ?, 1L, :, 0, ), <<, shift]
[(, src, [, i, +, srcPos, ], ?, 1L, :, 0, )]
[src, [, i, +, srcPos, ], ?, 1L, :, 0]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[1L]
[0]
[shift]
[0x1L, <<, shift]
[0x1L]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBools]
[0]
[nBools]
[dstInit]
[nBools, -, 1, +, dstPos, >=, 32]
[nBools, -, 1, +, dstPos]
[nBools, -, 1]
[nBools]
[1]
[dstPos]
[32]
[new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 32", )]
["nBools-1+dstPos is greather or equal to than 32"]
[dstInit]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, dstPos]
[i, *, 1]
[i]
[1]
[dstPos]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, )]
[src, [, i, +, srcPos, ], ?, 1, :, 0]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[1]
[0]
[shift]
[0x1, <<, shift]
[0x1]
[shift]
[out]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBools]
[0]
[nBools]
[dstInit]
[nBools, -, 1, +, dstPos, >=, 16]
[nBools, -, 1, +, dstPos]
[nBools, -, 1]
[nBools]
[1]
[dstPos]
[16]
[new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 16", )]
["nBools-1+dstPos is greather or equal to than 16"]
[dstInit]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, dstPos]
[i, *, 1]
[i]
[1]
[dstPos]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, )]
[src, [, i, +, srcPos, ], ?, 1, :, 0]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[1]
[0]
[shift]
[0x1, <<, shift]
[0x1]
[shift]
[out]
[(, short, ), (, (, out, &, ~, mask, ), |, bits, )]
[(, (, out, &, ~, mask, ), |, bits, )]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, ), ||, 0, ==, nBools]
[(, src, ., length, ==, 0, &&, srcPos, ==, 0, )]
[src, ., length, ==, 0, &&, srcPos, ==, 0]
[src, ., length, ==, 0]
[src, ., length]
[src]
[0]
[srcPos, ==, 0]
[srcPos]
[0]
[0, ==, nBools]
[0]
[nBools]
[dstInit]
[nBools, -, 1, +, dstPos, >=, 8]
[nBools, -, 1, +, dstPos]
[nBools, -, 1]
[nBools]
[1]
[dstPos]
[8]
[new, IllegalArgumentException, (, "nBools-1+dstPos is greather or equal to than 8", )]
["nBools-1+dstPos is greather or equal to than 8"]
[dstInit]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, dstPos]
[i, *, 1]
[i]
[1]
[dstPos]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, ), <<, shift]
[(, src, [, i, +, srcPos, ], ?, 1, :, 0, )]
[src, [, i, +, srcPos, ], ?, 1, :, 0]
[src, [, i, +, srcPos, ]]
[src]
[i, +, srcPos]
[i]
[srcPos]
[1]
[0]
[shift]
[0x1, <<, shift]
[0x1]
[shift]
[out]
[(, byte, ), (, (, out, &, ~, mask, ), |, bits, )]
[(, (, out, &, ~, mask, ), |, bits, )]
[(, out, &, ~, mask, ), |, bits]
[(, out, &, ~, mask, )]
[out, &, ~, mask]
[out]
[~, mask]
[mask]
[bits]
[out]
[0, ==, nInts]
[0]
[nInts]
[dst]
[(, nInts, -, 1, ), *, 32, +, srcPos, >=, 64]
[(, nInts, -, 1, ), *, 32, +, srcPos]
[(, nInts, -, 1, ), *, 32]
[(, nInts, -, 1, )]
[nInts, -, 1]
[nInts]
[1]
[32]
[srcPos]
[64]
[new, IllegalArgumentException, (, "(nInts-1)*32+srcPos is greather or equal to than 64", )]
["(nInts-1)*32+srcPos is greather or equal to than 64"]
[0]
[0]
[i, <, nInts]
[i]
[nInts]
[i, ++]
[i]
[shift]
[i, *, 32, +, srcPos]
[i, *, 32]
[i]
[32]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, int, ), (, 0xffffffff, &, (, src, >, >, shift, ), )]
[(, 0xffffffff, &, (, src, >, >, shift, ), )]
[0xffffffff, &, (, src, >, >, shift, )]
[0xffffffff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nShorts]
[0]
[nShorts]
[dst]
[(, nShorts, -, 1, ), *, 16, +, srcPos, >=, 64]
[(, nShorts, -, 1, ), *, 16, +, srcPos]
[(, nShorts, -, 1, ), *, 16]
[(, nShorts, -, 1, )]
[nShorts, -, 1]
[nShorts]
[1]
[16]
[srcPos]
[64]
[new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 64", )]
["(nShorts-1)*16+srcPos is greather or equal to than 64"]
[0]
[0]
[i, <, nShorts]
[i]
[nShorts]
[i, ++]
[i]
[shift]
[i, *, 16, +, srcPos]
[i, *, 16]
[i]
[16]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, short, ), (, 0xffff, &, (, src, >, >, shift, ), )]
[(, 0xffff, &, (, src, >, >, shift, ), )]
[0xffff, &, (, src, >, >, shift, )]
[0xffff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nShorts]
[0]
[nShorts]
[dst]
[(, nShorts, -, 1, ), *, 16, +, srcPos, >=, 32]
[(, nShorts, -, 1, ), *, 16, +, srcPos]
[(, nShorts, -, 1, ), *, 16]
[(, nShorts, -, 1, )]
[nShorts, -, 1]
[nShorts]
[1]
[16]
[srcPos]
[32]
[new, IllegalArgumentException, (, "(nShorts-1)*16+srcPos is greather or equal to than 32", )]
["(nShorts-1)*16+srcPos is greather or equal to than 32"]
[0]
[0]
[i, <, nShorts]
[i]
[nShorts]
[i, ++]
[i]
[shift]
[i, *, 16, +, srcPos]
[i, *, 16]
[i]
[16]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, short, ), (, 0xffff, &, (, src, >, >, shift, ), )]
[(, 0xffff, &, (, src, >, >, shift, ), )]
[0xffff, &, (, src, >, >, shift, )]
[0xffff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nBytes]
[0]
[nBytes]
[dst]
[(, nBytes, -, 1, ), *, 8, +, srcPos, >=, 64]
[(, nBytes, -, 1, ), *, 8, +, srcPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[srcPos]
[64]
[new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 64", )]
["(nBytes-1)*8+srcPos is greather or equal to than 64"]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, srcPos]
[i, *, 8]
[i]
[8]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, byte, ), (, 0xff, &, (, src, >, >, shift, ), )]
[(, 0xff, &, (, src, >, >, shift, ), )]
[0xff, &, (, src, >, >, shift, )]
[0xff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nBytes]
[0]
[nBytes]
[dst]
[(, nBytes, -, 1, ), *, 8, +, srcPos, >=, 32]
[(, nBytes, -, 1, ), *, 8, +, srcPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[srcPos]
[32]
[new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 32", )]
["(nBytes-1)*8+srcPos is greather or equal to than 32"]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, srcPos]
[i, *, 8]
[i]
[8]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, byte, ), (, 0xff, &, (, src, >, >, shift, ), )]
[(, 0xff, &, (, src, >, >, shift, ), )]
[0xff, &, (, src, >, >, shift, )]
[0xff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nBytes]
[0]
[nBytes]
[dst]
[(, nBytes, -, 1, ), *, 8, +, srcPos, >=, 16]
[(, nBytes, -, 1, ), *, 8, +, srcPos]
[(, nBytes, -, 1, ), *, 8]
[(, nBytes, -, 1, )]
[nBytes, -, 1]
[nBytes]
[1]
[8]
[srcPos]
[16]
[new, IllegalArgumentException, (, "(nBytes-1)*8+srcPos is greather or equal to than 16", )]
["(nBytes-1)*8+srcPos is greather or equal to than 16"]
[0]
[0]
[i, <, nBytes]
[i]
[nBytes]
[i, ++]
[i]
[shift]
[i, *, 8, +, srcPos]
[i, *, 8]
[i]
[8]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, byte, ), (, 0xff, &, (, src, >, >, shift, ), )]
[(, 0xff, &, (, src, >, >, shift, ), )]
[0xff, &, (, src, >, >, shift, )]
[0xff]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dst]
[0, ==, nHexs]
[0]
[nHexs]
[dstInit]
[(, nHexs, -, 1, ), *, 4, +, srcPos, >=, 64]
[(, nHexs, -, 1, ), *, 4, +, srcPos]
[(, nHexs, -, 1, ), *, 4]
[(, nHexs, -, 1, )]
[nHexs, -, 1]
[nHexs]
[1]
[4]
[srcPos]
[64]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 64", )]
["(nHexs-1)*4+srcPos is greather or equal to than 64"]
[new, StringBuilder, (, dstInit, )]
[dstInit]
[0]
[sb, ., length, (, )]
[sb]
[0]
[i, <, nHexs]
[i]
[nHexs]
[i, ++]
[i]
[shift]
[i, *, 4, +, srcPos]
[i, *, 4]
[i]
[4]
[srcPos]
[(, int, ), (, 0xF, &, (, src, >, >, shift, ), )]
[(, 0xF, &, (, src, >, >, shift, ), )]
[0xF, &, (, src, >, >, shift, )]
[0xF]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dstPos, +, i, ==, append]
[dstPos, +, i]
[dstPos]
[i]
[append]
[++, append]
[append]
[sb, ., append, (, intToHexDigit, (, bits, ), )]
[sb]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), )]
[sb]
[dstPos, +, i]
[dstPos]
[i]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., toString, (, )]
[sb]
[0, ==, nHexs]
[0]
[nHexs]
[dstInit]
[(, nHexs, -, 1, ), *, 4, +, srcPos, >=, 32]
[(, nHexs, -, 1, ), *, 4, +, srcPos]
[(, nHexs, -, 1, ), *, 4]
[(, nHexs, -, 1, )]
[nHexs, -, 1]
[nHexs]
[1]
[4]
[srcPos]
[32]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 32", )]
["(nHexs-1)*4+srcPos is greather or equal to than 32"]
[new, StringBuilder, (, dstInit, )]
[dstInit]
[0]
[sb, ., length, (, )]
[sb]
[0]
[i, <, nHexs]
[i]
[nHexs]
[i, ++]
[i]
[shift]
[i, *, 4, +, srcPos]
[i, *, 4]
[i]
[4]
[srcPos]
[0xF, &, (, src, >, >, shift, )]
[0xF]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dstPos, +, i, ==, append]
[dstPos, +, i]
[dstPos]
[i]
[append]
[++, append]
[append]
[sb, ., append, (, intToHexDigit, (, bits, ), )]
[sb]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), )]
[sb]
[dstPos, +, i]
[dstPos]
[i]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., toString, (, )]
[sb]
[0, ==, nHexs]
[0]
[nHexs]
[dstInit]
[(, nHexs, -, 1, ), *, 4, +, srcPos, >=, 16]
[(, nHexs, -, 1, ), *, 4, +, srcPos]
[(, nHexs, -, 1, ), *, 4]
[(, nHexs, -, 1, )]
[nHexs, -, 1]
[nHexs]
[1]
[4]
[srcPos]
[16]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 16", )]
["(nHexs-1)*4+srcPos is greather or equal to than 16"]
[new, StringBuilder, (, dstInit, )]
[dstInit]
[0]
[sb, ., length, (, )]
[sb]
[0]
[i, <, nHexs]
[i]
[nHexs]
[i, ++]
[i]
[shift]
[i, *, 4, +, srcPos]
[i, *, 4]
[i]
[4]
[srcPos]
[0xF, &, (, src, >, >, shift, )]
[0xF]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dstPos, +, i, ==, append]
[dstPos, +, i]
[dstPos]
[i]
[append]
[++, append]
[append]
[sb, ., append, (, intToHexDigit, (, bits, ), )]
[sb]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), )]
[sb]
[dstPos, +, i]
[dstPos]
[i]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., toString, (, )]
[sb]
[0, ==, nHexs]
[0]
[nHexs]
[dstInit]
[(, nHexs, -, 1, ), *, 4, +, srcPos, >=, 8]
[(, nHexs, -, 1, ), *, 4, +, srcPos]
[(, nHexs, -, 1, ), *, 4]
[(, nHexs, -, 1, )]
[nHexs, -, 1]
[nHexs]
[1]
[4]
[srcPos]
[8]
[new, IllegalArgumentException, (, "(nHexs-1)*4+srcPos is greather or equal to than 8", )]
["(nHexs-1)*4+srcPos is greather or equal to than 8"]
[new, StringBuilder, (, dstInit, )]
[dstInit]
[0]
[sb, ., length, (, )]
[sb]
[0]
[i, <, nHexs]
[i]
[nHexs]
[i, ++]
[i]
[shift]
[i, *, 4, +, srcPos]
[i, *, 4]
[i]
[4]
[srcPos]
[0xF, &, (, src, >, >, shift, )]
[0xF]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[dstPos, +, i, ==, append]
[dstPos, +, i]
[dstPos]
[i]
[append]
[++, append]
[append]
[sb, ., append, (, intToHexDigit, (, bits, ), )]
[sb]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., setCharAt, (, dstPos, +, i, ,, intToHexDigit, (, bits, ), )]
[sb]
[dstPos, +, i]
[dstPos]
[i]
[intToHexDigit, (, bits, )]
[bits]
[sb, ., toString, (, )]
[sb]
[0, ==, nBools]
[0]
[nBools]
[dst]
[nBools, -, 1, +, srcPos, >=, 64]
[nBools, -, 1, +, srcPos]
[nBools, -, 1]
[nBools]
[1]
[srcPos]
[64]
[new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 64", )]
["nBools-1+srcPos is greather or equal to than 64"]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, srcPos]
[i, *, 1]
[i]
[1]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, )]
[(, 0x1, &, (, src, >, >, shift, ), ), !=, 0]
[(, 0x1, &, (, src, >, >, shift, ), )]
[0x1, &, (, src, >, >, shift, )]
[0x1]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[0]
[dst]
[0, ==, nBools]
[0]
[nBools]
[dst]
[nBools, -, 1, +, srcPos, >=, 32]
[nBools, -, 1, +, srcPos]
[nBools, -, 1]
[nBools]
[1]
[srcPos]
[32]
[new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 32", )]
["nBools-1+srcPos is greather or equal to than 32"]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, srcPos]
[i, *, 1]
[i]
[1]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, )]
[(, 0x1, &, (, src, >, >, shift, ), ), !=, 0]
[(, 0x1, &, (, src, >, >, shift, ), )]
[0x1, &, (, src, >, >, shift, )]
[0x1]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[0]
[dst]
[0, ==, nBools]
[0]
[nBools]
[dst]
[nBools, -, 1, +, srcPos, >=, 16]
[nBools, -, 1, +, srcPos]
[nBools, -, 1]
[nBools]
[1]
[srcPos]
[16]
[new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 16", )]
["nBools-1+srcPos is greather or equal to than 16"]
[0]
[(, (, nBools, -, 1, ), *, 1, <, 16, -, srcPos, )]
[(, nBools, -, 1, ), *, 1, <, 16, -, srcPos]
[(, nBools, -, 1, ), *, 1]
[(, nBools, -, 1, )]
[nBools, -, 1]
[nBools]
[1]
[1]
[16, -, srcPos]
[16]
[srcPos]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, srcPos]
[i, *, 1]
[i]
[1]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, )]
[(, 0x1, &, (, src, >, >, shift, ), ), !=, 0]
[(, 0x1, &, (, src, >, >, shift, ), )]
[0x1, &, (, src, >, >, shift, )]
[0x1]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[0]
[dst]
[0, ==, nBools]
[0]
[nBools]
[dst]
[nBools, -, 1, +, srcPos, >=, 8]
[nBools, -, 1, +, srcPos]
[nBools, -, 1]
[nBools]
[1]
[srcPos]
[8]
[new, IllegalArgumentException, (, "nBools-1+srcPos is greather or equal to than 8", )]
["nBools-1+srcPos is greather or equal to than 8"]
[0]
[0]
[i, <, nBools]
[i]
[nBools]
[i, ++]
[i]
[shift]
[i, *, 1, +, srcPos]
[i, *, 1]
[i]
[1]
[srcPos]
[dst, [, dstPos, +, i, ]]
[dst]
[dstPos, +, i]
[dstPos]
[i]
[(, (, 0x1, &, (, src, >, >, shift, ), ), !=, 0, )]
[(, 0x1, &, (, src, >, >, shift, ), ), !=, 0]
[(, 0x1, &, (, src, >, >, shift, ), )]
[0x1, &, (, src, >, >, shift, )]
[0x1]
[(, src, >, >, shift, )]
[src, >, >, shift]
[src]
[shift]
[0]
[dst]
[0, ==, nBytes]
[0]
[nBytes]
[dst]
[nBytes, >, 16]
[nBytes]
[16]
[new, IllegalArgumentException, (, "nBytes is greather than 16", )]
["nBytes is greather than 16"]
[longToByteArray, (, src, ., getMostSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, ,, nBytes, >, 8, ?, 8, :, nBytes, )]
[src, ., getMostSignificantBits, (, )]
[src]
[0]
[dst]
[dstPos]
[nBytes, >, 8, ?, 8, :, nBytes]
[nBytes, >, 8]
[nBytes]
[8]
[8]
[nBytes]
[nBytes, >=, 8]
[nBytes]
[8]
[longToByteArray, (, src, ., getLeastSignificantBits, (, ), ,, 0, ,, dst, ,, dstPos, +, 8, ,, nBytes, -, 8, )]
[src, ., getLeastSignificantBits, (, )]
[src]
[0]
[dst]
[dstPos, +, 8]
[dstPos]
[8]
[nBytes, -, 8]
[nBytes]
[8]
[dst]
[src, ., length, -, srcPos, <, 16]
[src, ., length, -, srcPos]
[src, ., length]
[src]
[srcPos]
[16]
[new, IllegalArgumentException, (, "Need at least 16 bytes for UUID", )]
["Need at least 16 bytes for UUID"]
[new, UUID, (, byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, ), ,, byteArrayToLong, (, src, ,, srcPos, +, 8, ,, 0, ,, 0, ,, 8, ), )]
[byteArrayToLong, (, src, ,, srcPos, ,, 0, ,, 0, ,, 8, )]
[src]
[srcPos]
[0]
[0]
[8]
[byteArrayToLong, (, src, ,, srcPos, +, 8, ,, 0, ,, 0, ,, 8, )]
[src]
[srcPos, +, 8]
[srcPos]
[8]
[0]
[0]
[8]
