[1000]
[1E-5]
[0d]
[data, ., length, <, 1]
[data, ., length]
[data]
[1]
[new, NotStrictlyPositiveException, (, data, ., length, )]
[data, ., length]
[data]
[this, ., data]
[this]
[new, double, [, data, ., length, ], [, data, [, 0, ], ., length, ]]
[data, ., length]
[data]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[0]
[i, <, data, ., length]
[i]
[data, ., length]
[data]
[i, ++]
[i]
[data, [, i, ], ., length, !=, data, [, 0, ], ., length]
[data, [, i, ], ., length]
[data, [, i, ]]
[data]
[i]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[new, DimensionMismatchException, (, data, [, i, ], ., length, ,, data, [, 0, ], ., length, )]
[data, [, i, ], ., length]
[data, [, i, ]]
[data]
[i]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[data, [, i, ], ., length, <, 2]
[data, [, i, ], ., length]
[data, [, i, ]]
[data]
[i]
[2]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., NUMBER_TOO_SMALL, ,, data, [, i, ], ., length, ,, 2, ,, true, )]
[LocalizedFormats, ., NUMBER_TOO_SMALL]
[LocalizedFormats]
[data, [, i, ], ., length]
[data, [, i, ]]
[data]
[i]
[2]
[true]
[this, ., data, [, i, ]]
[this, ., data]
[this]
[i]
[MathArrays, ., copyOf, (, data, [, i, ], ,, data, [, i, ], ., length, )]
[MathArrays]
[data, [, i, ]]
[data]
[i]
[data, [, i, ], ., length]
[data, [, i, ]]
[data]
[i]
[maxIterations, <, 1]
[maxIterations]
[1]
[new, NotStrictlyPositiveException, (, maxIterations, )]
[maxIterations]
[threshold, <, Double, ., MIN_VALUE]
[threshold]
[Double, ., MIN_VALUE]
[Double]
[new, NotStrictlyPositiveException, (, threshold, )]
[threshold]
[data, ., length]
[data]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[initialMixture, ., getComponents, (, ), ., size, (, )]
[initialMixture, ., getComponents, (, )]
[initialMixture]
[initialMixture, ., getComponents, (, ), ., get, (, 0, ), ., getSecond, (, ), ., getMeans, (, ), ., length]
[initialMixture, ., getComponents, (, ), ., get, (, 0, ), ., getSecond, (, ), ., getMeans, (, )]
[initialMixture, ., getComponents, (, ), ., get, (, 0, ), ., getSecond, (, )]
[initialMixture, ., getComponents, (, ), ., get, (, 0, )]
[initialMixture, ., getComponents, (, )]
[initialMixture]
[0]
[numMeanColumns, !=, numCols]
[numMeanColumns]
[numCols]
[new, DimensionMismatchException, (, numMeanColumns, ,, numCols, )]
[numMeanColumns]
[numCols]
[0]
[0d]
[logLikelihood]
[Double, ., NEGATIVE_INFINITY]
[Double]
[fittedModel]
[new, MixtureMultivariateNormalDistribution, (, initialMixture, ., getComponents, (, ), )]
[initialMixture, ., getComponents, (, )]
[initialMixture]
[numIterations, ++, <=, maxIterations, &&, Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold]
[numIterations, ++, <=, maxIterations]
[numIterations, ++]
[numIterations]
[maxIterations]
[Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold]
[Math, ., abs, (, previousLogLikelihood, -, logLikelihood, )]
[Math]
[previousLogLikelihood, -, logLikelihood]
[previousLogLikelihood]
[logLikelihood]
[threshold]
[previousLogLikelihood]
[logLikelihood]
[0d]
[fittedModel, ., getComponents, (, )]
[fittedModel]
[new, double, [, k, ]]
[k]
[new, MultivariateNormalDistribution, [, k, ]]
[k]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[weights, [, j, ]]
[weights]
[j]
[components, ., get, (, j, ), ., getFirst, (, )]
[components, ., get, (, j, )]
[components]
[j]
[mvns, [, j, ]]
[mvns]
[j]
[components, ., get, (, j, ), ., getSecond, (, )]
[components, ., get, (, j, )]
[components]
[j]
[new, double, [, n, ], [, k, ]]
[n]
[k]
[new, double, [, k, ]]
[k]
[new, double, [, k, ], [, numCols, ]]
[k]
[numCols]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[fittedModel, ., density, (, data, [, i, ], )]
[fittedModel]
[data, [, i, ]]
[data]
[i]
[sumLogLikelihood]
[Math, ., log, (, rowDensity, )]
[Math]
[rowDensity]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[gamma, [, i, ], [, j, ]]
[gamma, [, i, ]]
[gamma]
[i]
[j]
[weights, [, j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], ), /, rowDensity]
[weights, [, j, ], *, mvns, [, j, ], ., density, (, data, [, i, ], )]
[weights, [, j, ]]
[weights]
[j]
[mvns, [, j, ], ., density, (, data, [, i, ], )]
[mvns, [, j, ]]
[mvns]
[j]
[data, [, i, ]]
[data]
[i]
[rowDensity]
[gammaSums, [, j, ]]
[gammaSums]
[j]
[gamma, [, i, ], [, j, ]]
[gamma, [, i, ]]
[gamma]
[i]
[j]
[0]
[col, <, numCols]
[col]
[numCols]
[col, ++]
[col]
[gammaDataProdSums, [, j, ], [, col, ]]
[gammaDataProdSums, [, j, ]]
[gammaDataProdSums]
[j]
[col]
[gamma, [, i, ], [, j, ], *, data, [, i, ], [, col, ]]
[gamma, [, i, ], [, j, ]]
[gamma, [, i, ]]
[gamma]
[i]
[j]
[data, [, i, ], [, col, ]]
[data, [, i, ]]
[data]
[i]
[col]
[logLikelihood]
[sumLogLikelihood, /, n]
[sumLogLikelihood]
[n]
[new, double, [, k, ]]
[k]
[new, double, [, k, ], [, numCols, ]]
[k]
[numCols]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[newWeights, [, j, ]]
[newWeights]
[j]
[gammaSums, [, j, ], /, n]
[gammaSums, [, j, ]]
[gammaSums]
[j]
[n]
[0]
[col, <, numCols]
[col]
[numCols]
[col, ++]
[col]
[newMeans, [, j, ], [, col, ]]
[newMeans, [, j, ]]
[newMeans]
[j]
[col]
[gammaDataProdSums, [, j, ], [, col, ], /, gammaSums, [, j, ]]
[gammaDataProdSums, [, j, ], [, col, ]]
[gammaDataProdSums, [, j, ]]
[gammaDataProdSums]
[j]
[col]
[gammaSums, [, j, ]]
[gammaSums]
[j]
[new, RealMatrix, [, k, ]]
[k]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[new, Array2DRowRealMatrix, (, numCols, ,, numCols, )]
[numCols]
[numCols]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[new, Array2DRowRealMatrix, (, MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, [, j, ], ), )]
[MathArrays, ., ebeSubtract, (, data, [, i, ], ,, newMeans, [, j, ], )]
[MathArrays]
[data, [, i, ]]
[data]
[i]
[newMeans, [, j, ]]
[newMeans]
[j]
[vec, ., multiply, (, vec, ., transpose, (, ), ), ., scalarMultiply, (, gamma, [, i, ], [, j, ], )]
[vec, ., multiply, (, vec, ., transpose, (, ), )]
[vec]
[vec, ., transpose, (, )]
[vec]
[gamma, [, i, ], [, j, ]]
[gamma, [, i, ]]
[gamma]
[i]
[j]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[newCovMats, [, j, ], ., add, (, dataCov, )]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[dataCov]
[new, double, [, k, ], [, numCols, ], [, numCols, ]]
[k]
[numCols]
[numCols]
[0]
[j, <, k]
[j]
[k]
[j, ++]
[j]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[newCovMats, [, j, ], ., scalarMultiply, (, 1d, /, gammaSums, [, j, ], )]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[1d, /, gammaSums, [, j, ]]
[1d]
[gammaSums, [, j, ]]
[gammaSums]
[j]
[newCovMatArrays, [, j, ]]
[newCovMatArrays]
[j]
[newCovMats, [, j, ], ., getData, (, )]
[newCovMats, [, j, ]]
[newCovMats]
[j]
[fittedModel]
[new, MixtureMultivariateNormalDistribution, (, newWeights, ,, newMeans, ,, newCovMatArrays, )]
[newWeights]
[newMeans]
[newCovMatArrays]
[Math, ., abs, (, previousLogLikelihood, -, logLikelihood, ), >, threshold]
[Math, ., abs, (, previousLogLikelihood, -, logLikelihood, )]
[Math]
[previousLogLikelihood, -, logLikelihood]
[previousLogLikelihood]
[logLikelihood]
[threshold]
[new, ConvergenceException, (, )]
[fit, (, initialMixture, ,, DEFAULT_MAX_ITERATIONS, ,, DEFAULT_THRESHOLD, )]
[initialMixture]
[DEFAULT_MAX_ITERATIONS]
[DEFAULT_THRESHOLD]
[data, ., length, <, 2]
[data, ., length]
[data]
[2]
[new, NotStrictlyPositiveException, (, data, ., length, )]
[data, ., length]
[data]
[numComponents, <, 2]
[numComponents]
[2]
[new, NumberIsTooSmallException, (, numComponents, ,, 2, ,, true, )]
[numComponents]
[2]
[true]
[numComponents, >, data, ., length]
[numComponents]
[data, ., length]
[data]
[new, NumberIsTooLargeException, (, numComponents, ,, data, ., length, ,, true, )]
[numComponents]
[data, ., length]
[data]
[true]
[data, ., length]
[data]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[new, DataRow, [, numRows, ]]
[numRows]
[0]
[i, <, numRows]
[i]
[numRows]
[i, ++]
[i]
[sortedData, [, i, ]]
[sortedData]
[i]
[new, DataRow, (, data, [, i, ], )]
[data, [, i, ]]
[data]
[i]
[Arrays, ., sort, (, sortedData, )]
[Arrays]
[sortedData]
[1d, /, numComponents]
[1d]
[numComponents]
[new, ArrayList, <, Pair, <, Double, ,, MultivariateNormalDistribution, >, >, (, numComponents, )]
[numComponents]
[0]
[binIndex, <, numComponents]
[binIndex]
[numComponents]
[binIndex, ++]
[binIndex]
[(, binIndex, *, numRows, ), /, numComponents]
[(, binIndex, *, numRows, )]
[binIndex, *, numRows]
[binIndex]
[numRows]
[numComponents]
[(, (, binIndex, +, 1, ), *, numRows, ), /, numComponents]
[(, (, binIndex, +, 1, ), *, numRows, )]
[(, binIndex, +, 1, ), *, numRows]
[(, binIndex, +, 1, )]
[binIndex, +, 1]
[binIndex]
[1]
[numRows]
[numComponents]
[maxIndex, -, minIndex]
[maxIndex]
[minIndex]
[new, double, [, numBinRows, ], [, numCols, ]]
[numBinRows]
[numCols]
[new, double, [, numCols, ]]
[numCols]
[minIndex]
[0]
[i, <, maxIndex]
[i]
[maxIndex]
[i, ++]
[i]
[iBin, ++]
[iBin]
[0]
[j, <, numCols]
[j]
[numCols]
[j, ++]
[j]
[sortedData, [, i, ], ., getRow, (, ), [, j, ]]
[sortedData, [, i, ], ., getRow, (, )]
[sortedData, [, i, ]]
[sortedData]
[i]
[j]
[columnMeans, [, j, ]]
[columnMeans]
[j]
[val]
[binData, [, iBin, ], [, j, ]]
[binData, [, iBin, ]]
[binData]
[iBin]
[j]
[val]
[MathArrays, ., scaleInPlace, (, 1d, /, numBinRows, ,, columnMeans, )]
[MathArrays]
[1d, /, numBinRows]
[1d]
[numBinRows]
[columnMeans]
[new, Covariance, (, binData, ), ., getCovarianceMatrix, (, ), ., getData, (, )]
[new, Covariance, (, binData, ), ., getCovarianceMatrix, (, )]
[new, Covariance, (, binData, )]
[binData]
[new, MultivariateNormalDistribution, (, columnMeans, ,, covMat, )]
[columnMeans]
[covMat]
[components, ., add, (, new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (, weight, ,, mvn, ), )]
[components]
[new, Pair, <, Double, ,, MultivariateNormalDistribution, >, (, weight, ,, mvn, )]
[weight]
[mvn]
[new, MixtureMultivariateNormalDistribution, (, components, )]
[components]
[logLikelihood]
[new, MixtureMultivariateNormalDistribution, (, fittedModel, ., getComponents, (, ), )]
[fittedModel, ., getComponents, (, )]
[fittedModel]
[row]
[data]
[mean]
[0d]
[0]
[i, <, data, ., length]
[i]
[data, ., length]
[data]
[i, ++]
[i]
[mean]
[data, [, i, ]]
[data]
[i]
[mean]
[data, ., length]
[data]
[mean, ., compareTo, (, other, ., mean, )]
[mean]
[other, ., mean]
[other]
[this, ==, other]
[this]
[other]
[true]
[other, instanceof, DataRow]
[other]
[MathArrays, ., equals, (, row, ,, (, (, DataRow, ), other, ), ., row, )]
[MathArrays]
[row]
[(, (, DataRow, ), other, ), ., row]
[(, (, DataRow, ), other, )]
[(, DataRow, ), other]
[other]
[false]
[Arrays, ., hashCode, (, row, )]
[Arrays]
[row]
[row]
