[ObjectType, ., createDelegateSuffix, (, "Proxy", )]
[ObjectType]
["Proxy"]
[DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", )]
[DiagnosticType]
["JSC_MALFORMED_TYPEDEF"]
["Typedef for {0} does not have any type information"]
[DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", )]
[DiagnosticType]
["JSC_ENUM_INITIALIZER_NOT_ENUM"]
["enum initializer must be an object literal or an enum"]
[DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", )]
[DiagnosticType]
["JSC_CTOR_INITIALIZER_NOT_CTOR"]
["Constructor {0} must be initialized at declaration"]
[DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", )]
[DiagnosticType]
["JSC_IFACE_INITIALIZER_NOT_IFACE"]
["Interface {0} must be initialized at declaration"]
[DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", )]
[DiagnosticType]
["JSC_REFLECT_CONSTRUCTOR_EXPECTED"]
["Constructor expected as first argument"]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", )]
[DiagnosticType]
["JSC_UNKNOWN_LENDS"]
["Variable {0} not declared before @lends annotation."]
[DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}.", )]
[DiagnosticType]
["JSC_LENDS_ON_NON_OBJECT"]
["May only lend properties to object types. {0} has type {1}."]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[Preconditions, ., checkNotNull, (, node, )]
[Preconditions]
[node]
[Preconditions, ., checkNotNull, (, type, )]
[Preconditions]
[type]
[this, ., node]
[this]
[node]
[this, ., type]
[this]
[type]
[node, ., setJSType, (, type, )]
[node]
[type]
[node, ., setJSType, (, type, ., resolve, (, typeParsingErrorReporter, ,, scope, ), )]
[node]
[type, ., resolve, (, typeParsingErrorReporter, ,, scope, )]
[type]
[typeParsingErrorReporter]
[scope]
[compiler]
[compiler, ., getCodingConvention, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[this, ., validator]
[this]
[compiler, ., getTypeValidator, (, )]
[compiler]
[this, ., codingConvention]
[this]
[codingConvention]
[this, ., typeRegistry]
[this]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[this, ., typeParsingErrorReporter]
[this]
[typeRegistry, ., getErrorReporter, (, )]
[typeRegistry]
[this, ., unknownType]
[this]
[typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[null]
[null]
[parent, ==, null]
[parent]
[null]
[typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, )]
[typeRegistry]
[JSTypeNative, ., GLOBAL_THIS]
[JSTypeNative]
[root, ., setJSType, (, globalThis, )]
[root]
[globalThis]
[root, ., getFirstChild, (, ), ., setJSType, (, globalThis, )]
[root, ., getFirstChild, (, )]
[root]
[globalThis]
[root, ., getLastChild, (, ), ., setJSType, (, globalThis, )]
[root, ., getLastChild, (, )]
[root]
[globalThis]
[(, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), )]
[(, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), )]
[new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, )]
[compiler]
[functionAnalysisResults]
[root, ., getFirstChild, (, )]
[root]
[root, ., getLastChild, (, )]
[root]
[newScope]
[createInitialScope, (, root, )]
[root]
[new, GlobalScopeBuilder, (, newScope, )]
[newScope]
[scopeBuilder]
[globalScopeBuilder]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, )]
[NodeTraversal]
[compiler]
[root]
[scopeBuilder]
[newScope]
[new, Scope, (, parent, ,, root, )]
[parent]
[root]
[new, LocalScopeBuilder, (, newScope, )]
[newScope]
[scopeBuilder]
[localScopeBuilder]
[localScopeBuilder, ., build, (, )]
[localScopeBuilder]
[scopeBuilder, ., resolveStubDeclarations, (, )]
[scopeBuilder]
[scopeBuilder, ., resolveTypes, (, )]
[scopeBuilder]
[scopeBuilder, ., nonExternFunctions]
[scopeBuilder]
[functionNode, ., getJSType, (, )]
[functionNode]
[type, !=, null, &&, type, ., isFunctionType, (, )]
[type, !=, null]
[type]
[null]
[type, ., isFunctionType, (, )]
[type]
[type, ., toMaybeFunctionType, (, )]
[type]
[fnType, ., getTypeOfThis, (, )]
[fnType]
[!, fnThisType, ., isUnknownType, (, )]
[fnThisType, ., isUnknownType, (, )]
[fnThisType]
[NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), )]
[NodeTraversal]
[compiler]
[functionNode, ., getLastChild, (, )]
[functionNode]
[scopeBuilder, ., new, CollectProperties, (, fnThisType, )]
[scopeBuilder]
[fnThisType]
[parent, ==, null]
[parent]
[null]
[codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, )]
[codingConvention]
[typeRegistry]
[newScope]
[delegateProxyPrototypes]
[delegateCallingConventions]
[newScope]
[Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), )]
[Preconditions]
[scriptRoot, ., isScript, (, )]
[scriptRoot]
[Preconditions, ., checkNotNull, (, globalScope, )]
[Preconditions]
[globalScope]
[Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), )]
[Preconditions]
[globalScope, ., isGlobal, (, )]
[globalScope]
[NodeUtil, ., getSourceName, (, scriptRoot, )]
[NodeUtil]
[scriptRoot]
[Preconditions, ., checkNotNull, (, scriptName, )]
[Preconditions]
[scriptName]
[ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), )]
[ImmutableList]
[functionAnalysisResults, ., keySet, (, )]
[functionAnalysisResults]
[scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), )]
[scriptName]
[NodeUtil, ., getSourceName, (, node, )]
[NodeUtil]
[node]
[functionAnalysisResults, ., remove, (, node, )]
[functionAnalysisResults]
[node]
[(, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, )]
[(, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), )]
[new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, )]
[compiler]
[functionAnalysisResults]
[null]
[scriptRoot]
[globalScope, ., getVars, (, )]
[globalScope]
[Lists, ., newArrayList, (, )]
[Lists]
[varIter, ., hasNext, (, )]
[varIter]
[varIter, ., next, (, )]
[varIter]
[scriptName, ., equals, (, oldVar, ., getInputName, (, ), )]
[scriptName]
[oldVar, ., getInputName, (, )]
[oldVar]
[varsToRemove, ., add, (, oldVar, )]
[varsToRemove]
[oldVar]
[varsToRemove]
[globalScope, ., undeclare, (, var, )]
[globalScope]
[var]
[globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), )]
[globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, )]
[globalScope, ., getTypeOfThis, (, )]
[globalScope]
[var, ., getName, (, )]
[var]
[new, GlobalScopeBuilder, (, globalScope, )]
[globalScope]
[NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, )]
[NodeTraversal]
[compiler]
[scriptRoot]
[scopeBuilder]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), )]
[NodeTraversal]
[compiler]
[root]
[new, DiscoverEnumsAndTypedefs, (, typeRegistry, )]
[typeRegistry]
[Scope, ., createGlobalScope, (, root, )]
[Scope]
[root]
[declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, )]
[s]
[ARRAY_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, )]
[s]
[BOOLEAN_OBJECT_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, )]
[s]
[DATE_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, )]
[s]
[ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, )]
[s]
[EVAL_ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, )]
[s]
[FUNCTION_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, )]
[s]
[NUMBER_OBJECT_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, )]
[s]
[OBJECT_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, )]
[s]
[RANGE_ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, )]
[s]
[REFERENCE_ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, )]
[s]
[REGEXP_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, )]
[s]
[STRING_OBJECT_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, )]
[s]
[SYNTAX_ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, )]
[s]
[TYPE_ERROR_FUNCTION_TYPE]
[declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, )]
[s]
[URI_ERROR_FUNCTION_TYPE]
[declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, )]
[s]
["undefined"]
[VOID_TYPE]
[declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, )]
[s]
["ActiveXObject"]
[FUNCTION_INSTANCE_TYPE]
[s]
[typeRegistry, ., getNativeFunctionType, (, tId, )]
[typeRegistry]
[tId]
[declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, )]
[scope]
[t, ., getInstanceType, (, ), ., getReferenceName, (, )]
[t, ., getInstanceType, (, )]
[t]
[t]
[declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,, t, ., getPrototype, (, ), )]
[scope]
[t, ., getPrototype, (, ), ., getReferenceName, (, )]
[t, ., getPrototype, (, )]
[t]
[t, ., getPrototype, (, )]
[t]
[declareNativeType, (, scope, ,, name, ,, typeRegistry, ., getNativeType, (, tId, ), )]
[scope]
[name]
[typeRegistry, ., getNativeType, (, tId, )]
[typeRegistry]
[tId]
[scope, ., declare, (, name, ,, null, ,, t, ,, null, ,, false, )]
[scope]
[name]
[null]
[t]
[null]
[false]
[this, ., registry]
[this]
[registry]
[null]
[node, ., getType, (, )]
[node]
[Token, ., VAR]
[Token]
[node, ., getFirstChild, (, )]
[node]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), )]
[child]
[child, ., getFirstChild, (, )]
[child]
[NodeUtil, ., getBestJSDocInfo, (, child, )]
[NodeUtil]
[child]
[Token, ., EXPR_RESULT]
[Token]
[node, ., getFirstChild, (, )]
[node]
[firstChild, ., isAssign, (, )]
[firstChild]
[identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), )]
[firstChild, ., getFirstChild, (, )]
[firstChild]
[firstChild, ., getLastChild, (, )]
[firstChild]
[firstChild, ., getJSDocInfo, (, )]
[firstChild]
[identifyNameNode, (, firstChild, ,, null, ,, firstChild, ., getJSDocInfo, (, ), )]
[firstChild]
[null]
[firstChild, ., getJSDocInfo, (, )]
[firstChild]
[nameNode, ., isQualifiedName, (, )]
[nameNode]
[info, !=, null]
[info]
[null]
[info, ., hasEnumParameterType, (, )]
[info]
[registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), )]
[registry]
[nameNode, ., getQualifiedName, (, )]
[nameNode]
[info, ., hasTypedefType, (, )]
[info]
[registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), )]
[registry]
[nameNode, ., getQualifiedName, (, )]
[nameNode]
[typeRegistry, ., getNativeType, (, nativeType, )]
[typeRegistry]
[nativeType]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[null]
[Lists, ., newArrayList, (, )]
[Lists]
[null]
[this, ., scope]
[this]
[scope]
[deferredSetTypes, ., add, (, new, DeferredSetType, (, node, ,, type, ), )]
[deferredSetTypes]
[new, DeferredSetType, (, node, ,, type, )]
[node]
[type]
[deferredSetTypes]
[deferred, ., resolve, (, scope, )]
[deferred]
[scope]
[scope, ., getVars, (, )]
[scope]
[vars, ., hasNext, (, )]
[vars]
[vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, )]
[vars, ., next, (, )]
[vars]
[typeParsingErrorReporter]
[typeRegistry, ., resolveTypesInScope, (, scope, )]
[typeRegistry]
[scope]
[inputId]
[t, ., getInputId, (, )]
[t]
[n, ., isFunction, (, ), ||, n, ., isScript, (, )]
[n, ., isFunction, (, )]
[n]
[n, ., isScript, (, )]
[n]
[Preconditions, ., checkNotNull, (, inputId, )]
[Preconditions]
[inputId]
[sourceName]
[NodeUtil, ., getSourceName, (, n, )]
[NodeUtil]
[n]
[parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, )]
[parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, )]
[parent, ==, null, ||, !, parent, ., isFunction, (, )]
[parent, ==, null]
[parent]
[null]
[!, parent, ., isFunction, (, )]
[parent, ., isFunction, (, )]
[parent]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ==, scope, ., getRootNode, (, )]
[parent]
[scope, ., getRootNode, (, )]
[scope]
[descend]
[NodeUtil, ., isStatementParent, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[NodeUtil, ., isHoistedFunctionDeclaration, (, child, )]
[NodeUtil]
[child]
[defineFunctionLiteral, (, child, )]
[child]
[descend]
[inputId]
[t, ., getInputId, (, )]
[t]
[attachLiteralTypes, (, t, ,, n, )]
[t]
[n]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[checkForClassDefiningCalls, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, )]
[n]
[delegateCallingConventions]
[Token, ., FUNCTION]
[Token]
[t, ., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, ), ==, null]
[t, ., getInput, (, )]
[t]
[null]
[!, t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, )]
[t]
[nonExternFunctions, ., add, (, n, )]
[nonExternFunctions]
[n]
[!, NodeUtil, ., isHoistedFunctionDeclaration, (, n, )]
[NodeUtil, ., isHoistedFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[defineFunctionLiteral, (, n, )]
[n]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, )]
[n]
[firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, )]
[firstChild, ., isGetProp, (, )]
[firstChild]
[firstChild, ., isQualifiedName, (, )]
[firstChild]
[maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), )]
[t]
[n, ., getJSDocInfo, (, )]
[n]
[firstChild]
[n]
[firstChild, ., getNext, (, )]
[firstChild]
[Token, ., CATCH]
[Token]
[defineCatch, (, n, )]
[n]
[Token, ., VAR]
[Token]
[defineVar, (, n, )]
[n]
[Token, ., GETPROP]
[Token]
[parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, )]
[parent, ., isExprResult, (, )]
[parent]
[n, ., isQualifiedName, (, )]
[n]
[maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, )]
[t]
[n, ., getJSDocInfo, (, )]
[n]
[n]
[parent]
[null]
[n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null]
[n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, )]
[n, ., getParent, (, ), !=, null]
[n, ., getParent, (, )]
[n]
[null]
[NodeUtil, ., isStatement, (, n, )]
[NodeUtil]
[n]
[lentObjectLiterals, !=, null]
[lentObjectLiterals]
[null]
[lentObjectLiterals]
[defineObjectLiteral, (, objLit, )]
[objLit]
[lentObjectLiterals, ., clear, (, )]
[lentObjectLiterals]
[n, ., getType, (, )]
[n]
[Token, ., NULL]
[Token]
[n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), )]
[n]
[getNativeType, (, NULL_TYPE, )]
[NULL_TYPE]
[Token, ., VOID]
[Token]
[n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), )]
[n]
[getNativeType, (, VOID_TYPE, )]
[VOID_TYPE]
[Token, ., STRING]
[Token]
[n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), )]
[n]
[getNativeType, (, STRING_TYPE, )]
[STRING_TYPE]
[Token, ., NUMBER]
[Token]
[n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), )]
[n]
[getNativeType, (, NUMBER_TYPE, )]
[NUMBER_TYPE]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), )]
[n]
[getNativeType, (, BOOLEAN_TYPE, )]
[BOOLEAN_TYPE]
[Token, ., REGEXP]
[Token]
[n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), )]
[n]
[getNativeType, (, REGEXP_TYPE, )]
[REGEXP_TYPE]
[Token, ., OBJECTLIT]
[Token]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null, &&, info, ., getLendsName, (, ), !=, null]
[info, !=, null]
[info]
[null]
[info, ., getLendsName, (, ), !=, null]
[info, ., getLendsName, (, )]
[info]
[null]
[lentObjectLiterals, ==, null]
[lentObjectLiterals]
[null]
[lentObjectLiterals]
[Lists, ., newArrayList, (, )]
[Lists]
[lentObjectLiterals, ., add, (, n, )]
[lentObjectLiterals]
[n]
[defineObjectLiteral, (, n, )]
[n]
[null]
[objectLit, ., getJSDocInfo, (, )]
[objectLit]
[info, !=, null, &&, info, ., getLendsName, (, ), !=, null]
[info, !=, null]
[info]
[null]
[info, ., getLendsName, (, ), !=, null]
[info, ., getLendsName, (, )]
[info]
[null]
[info, ., getLendsName, (, )]
[info]
[scope, ., getVar, (, lendsName, )]
[scope]
[lendsName]
[lendsVar, ==, null]
[lendsVar]
[null]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, )]
[JSError]
[sourceName]
[objectLit]
[UNKNOWN_LENDS]
[lendsName]
[type]
[lendsVar, ., getType, (, )]
[lendsVar]
[type, ==, null]
[type]
[null]
[type]
[unknownType]
[!, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), )]
[type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), )]
[type]
[typeRegistry, ., getNativeType, (, OBJECT_TYPE, )]
[typeRegistry]
[OBJECT_TYPE]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), )]
[JSError]
[sourceName]
[objectLit]
[LENDS_ON_NON_OBJECT]
[lendsName]
[type, ., toString, (, )]
[type]
[type]
[null]
[objectLit, ., setJSType, (, type, )]
[objectLit]
[type]
[info]
[NodeUtil, ., getBestJSDocInfo, (, objectLit, )]
[NodeUtil]
[objectLit]
[NodeUtil, ., getBestLValue, (, objectLit, )]
[NodeUtil]
[objectLit]
[NodeUtil, ., getBestLValueName, (, lValue, )]
[NodeUtil]
[lValue]
[false]
[info, !=, null, &&, info, ., hasEnumParameterType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasEnumParameterType, (, )]
[info]
[type]
[createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, )]
[objectLit]
[lValueName]
[info]
[lValue]
[createdEnumType]
[true]
[type, ==, null]
[type]
[null]
[type]
[typeRegistry, ., createAnonymousObjectType, (, info, )]
[typeRegistry]
[info]
[setDeferredType, (, objectLit, ,, type, )]
[objectLit]
[type]
[processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !, createdEnumType, )]
[objectLit]
[ObjectType, ., cast, (, objectLit, ., getJSType, (, ), )]
[ObjectType]
[objectLit, ., getJSType, (, )]
[objectLit]
[!, createdEnumType]
[createdEnumType]
[objLit, ., getFirstChild, (, )]
[objLit]
[keyNode, !=, null]
[keyNode]
[null]
[keyNode]
[keyNode, ., getNext, (, )]
[keyNode]
[keyNode, ., getFirstChild, (, )]
[keyNode]
[NodeUtil, ., getObjectLitKeyName, (, keyNode, )]
[NodeUtil]
[keyNode]
[keyNode, ., getJSDocInfo, (, )]
[keyNode]
[getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, )]
[keyNode, ., getSourceFileName, (, )]
[keyNode]
[info]
[keyNode]
[value]
[objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, )]
[objLitType, ., isEnumType, (, )]
[objLitType]
[objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, )]
[objLitType, ., toMaybeEnumType, (, )]
[objLitType]
[NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, )]
[NodeUtil]
[keyNode]
[valueType]
[NodeUtil, ., getBestLValueName, (, keyNode, )]
[NodeUtil]
[keyNode]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[keyType, ==, null]
[keyType]
[null]
[defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, )]
[keyNode]
[objLit]
[qualifiedName]
[keyType]
[inferred]
[keyType, !=, null]
[keyType]
[null]
[setDeferredType, (, keyNode, ,, keyType, )]
[keyNode]
[keyType]
[keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner]
[keyType, !=, null, &&, objLitType, !=, null]
[keyType, !=, null]
[keyType]
[null]
[objLitType, !=, null]
[objLitType]
[null]
[declareOnOwner]
[keyNode, ., isFromExterns, (, )]
[keyNode]
[objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode, )]
[objLitType]
[memberName]
[keyType]
[keyNode]
[null]
[node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null]
[node, ., isGetProp, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null]
[NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), )]
[NodeUtil]
[node]
[node, ., getParent, (, )]
[node]
[node, ., getParent, (, )]
[node]
[null]
[info, !=, null]
[info]
[null]
[info, ., hasType, (, )]
[info]
[jsType]
[info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getType, (, )]
[info]
[scope]
[typeRegistry]
[FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, )]
[FunctionTypeBuilder]
[info]
[node, ., getQualifiedName, (, )]
[node]
[jsType]
[createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,, node, )]
[null]
[fnName]
[info]
[node]
[jsType]
[Preconditions, ., checkState, (, sourceName, !=, null, )]
[Preconditions]
[sourceName, !=, null]
[sourceName]
[null]
[Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, )]
[Preconditions]
[n, ., getType, (, ), ==, type]
[n, ., getType, (, )]
[n]
[type]
[assertDefinitionNode, (, n, ,, Token, ., CATCH, )]
[n]
[Token, ., CATCH]
[Token]
[n, ., getFirstChild, (, )]
[n]
[defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, ), )]
[catchName]
[n]
[getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, )]
[sourceName]
[catchName, ., getJSDocInfo, (, )]
[catchName]
[catchName]
[null]
[assertDefinitionNode, (, n, ,, Token, ., VAR, )]
[n]
[Token, ., VAR]
[Token]
[n, ., getJSDocInfo, (, )]
[n]
[n, ., hasMoreThanOneChild, (, )]
[n]
[info, !=, null]
[info]
[null]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, )]
[JSError]
[sourceName]
[n]
[MULTIPLE_VAR_DEF]
[n, ., children, (, )]
[n]
[defineName, (, name, ,, n, ,, name, ., getJSDocInfo, (, ), )]
[name]
[n]
[name, ., getJSDocInfo, (, )]
[name]
[n, ., getFirstChild, (, )]
[n]
[defineName, (, name, ,, n, ,, (, info, !=, null, ), ?, info, :, name, ., getJSDocInfo, (, ), )]
[name]
[n]
[(, info, !=, null, ), ?, info, :, name, ., getJSDocInfo, (, )]
[(, info, !=, null, )]
[info, !=, null]
[info]
[null]
[info]
[name, ., getJSDocInfo, (, )]
[name]
[assertDefinitionNode, (, n, ,, Token, ., FUNCTION, )]
[n]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., getBestLValue, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getBestJSDocInfo, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getBestLValueName, (, lValue, )]
[NodeUtil]
[lValue]
[createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, )]
[n]
[functionName]
[info]
[lValue]
[setDeferredType, (, n, ,, functionType, )]
[n]
[functionType]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[defineSlot, (, n, ., getFirstChild, (, ), ,, n, ,, functionType, )]
[n, ., getFirstChild, (, )]
[n]
[n]
[functionType]
[name, ., getFirstChild, (, )]
[name]
[getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, )]
[sourceName]
[info]
[name]
[value]
[type, ==, null]
[type]
[null]
[type]
[name, ., isFromExterns, (, ), ?, unknownType, :, null]
[name, ., isFromExterns, (, )]
[name]
[unknownType]
[null]
[defineSlot, (, name, ,, var, ,, type, )]
[name]
[var]
[type]
[info, !=, null]
[info]
[null]
[true]
[lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[lValue, !=, null]
[lValue]
[null]
[NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[NodeUtil]
[lValue]
[lValue, ., getParent, (, )]
[lValue]
[false]
[scope, ., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, )]
[scope, ., isGlobal, (, )]
[scope]
[!, type, ., isReturnTypeInferred, (, )]
[type, ., isReturnTypeInferred, (, )]
[type]
[null]
[rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, )]
[rValue, !=, null, &&, rValue, ., isQualifiedName, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isQualifiedName, (, )]
[rValue]
[scope, ., isGlobal, (, )]
[scope]
[scope, ., getVar, (, rValue, ., getQualifiedName, (, ), )]
[scope]
[rValue, ., getQualifiedName, (, )]
[rValue]
[var, !=, null, &&, var, ., getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, )]
[var, !=, null, &&, var, ., getType, (, ), !=, null]
[var, !=, null]
[var]
[null]
[var, ., getType, (, ), !=, null]
[var, ., getType, (, )]
[var]
[null]
[var, ., getType, (, ), ., isFunctionType, (, )]
[var, ., getType, (, )]
[var]
[var, ., getType, (, ), ., toMaybeFunctionType, (, )]
[var, ., getType, (, )]
[var]
[(, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, )]
[(, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), )]
[aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, )]
[aliasedType, ., isConstructor, (, )]
[aliasedType]
[aliasedType, ., isInterface, (, )]
[aliasedType]
[!, aliasedType, ., isNativeObjectType, (, )]
[aliasedType, ., isNativeObjectType, (, )]
[aliasedType]
[functionType]
[aliasedType]
[name, !=, null, &&, scope, ., isGlobal, (, )]
[name, !=, null]
[name]
[null]
[scope, ., isGlobal, (, )]
[scope]
[typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), )]
[typeRegistry]
[name]
[functionType, ., getInstanceType, (, )]
[functionType]
[functionType, ==, null]
[functionType]
[null]
[rValue, ==, null, ?, lvalueNode, :, rValue]
[rValue, ==, null]
[rValue]
[null]
[lvalueNode]
[rValue]
[rValue, !=, null, &&, rValue, ., isFunction, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isFunction, (, )]
[rValue]
[isFnLiteral, ?, rValue, :, null]
[isFnLiteral]
[rValue]
[null]
[isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null]
[isFnLiteral]
[rValue, ., getFirstChild, (, ), ., getNext, (, )]
[rValue, ., getFirstChild, (, )]
[rValue]
[null]
[isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null]
[isFnLiteral]
[parametersNode, ., getNext, (, )]
[parametersNode]
[null]
[info, !=, null, &&, info, ., hasType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasType, (, )]
[info]
[info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getType, (, )]
[info]
[scope]
[typeRegistry]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isFunctionType, (, )]
[type]
[functionType]
[type, ., toMaybeFunctionType, (, )]
[type]
[functionType, ., setJSDocInfo, (, info, )]
[functionType]
[info]
[functionType, ==, null]
[functionType]
[null]
[NodeUtil, ., getBestLValueOwner, (, lvalueNode, )]
[NodeUtil]
[lvalueNode]
[NodeUtil, ., getBestLValueName, (, ownerNode, )]
[NodeUtil]
[ownerNode]
[null]
[null]
[null]
[ownerName, !=, null]
[ownerName]
[null]
[ownerVar]
[scope, ., getVar, (, ownerName, )]
[scope]
[ownerName]
[ownerVar, !=, null]
[ownerVar]
[null]
[ownerType]
[ObjectType, ., cast, (, ownerVar, ., getType, (, ), )]
[ObjectType]
[ownerVar, ., getType, (, )]
[ownerVar]
[name, !=, null]
[name]
[null]
[propName]
[name, ., substring, (, ownerName, ., length, (, ), +, 1, )]
[name]
[ownerName, ., length, (, ), +, 1]
[ownerName, ., length, (, )]
[ownerName]
[1]
[null]
[ownerType, !=, null, &&, propName, !=, null]
[ownerType, !=, null]
[ownerType]
[null]
[propName, !=, null]
[propName]
[null]
[overriddenType]
[findOverriddenFunction, (, ownerType, ,, propName, )]
[ownerType]
[propName]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, )]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, )]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, )]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, )]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), )]
[new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, )]
[name]
[compiler]
[errorRoot]
[sourceName]
[scope]
[getFunctionAnalysisResults, (, fnRoot, )]
[fnRoot]
[overriddenType]
[parametersNode]
[info]
[info]
[info]
[false]
[ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, )]
[ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, )]
[ownerType, !=, null]
[ownerType]
[null]
[ownerType, ., isFunctionPrototypeType, (, )]
[ownerType]
[ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, )]
[ownerType, ., getOwnerFunction, (, )]
[ownerType]
[builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), )]
[builder]
[info]
[ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, )]
[ownerType, ., getOwnerFunction, (, )]
[ownerType]
[searchedForThisType]
[true]
[ownerNode, !=, null, &&, ownerNode, ., isThis, (, )]
[ownerNode, !=, null]
[ownerNode]
[null]
[ownerNode, ., isThis, (, )]
[ownerNode]
[ownerNode, ., getJSType, (, )]
[ownerNode]
[builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, )]
[builder]
[info]
[injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType]
[injectedThisType, ==, null]
[injectedThisType]
[null]
[scope, ., getTypeOfThis, (, )]
[scope]
[injectedThisType]
[searchedForThisType]
[true]
[!, searchedForThisType]
[searchedForThisType]
[builder, ., inferThisType, (, info, )]
[builder]
[info]
[functionType]
[builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, )]
[builder, ., inferParameterTypes, (, parametersNode, ,, info, )]
[builder]
[parametersNode]
[info]
[functionType]
[ownerType, ., getPropertyType, (, propName, )]
[ownerType]
[propName]
[propType, !=, null, &&, propType, ., isFunctionType, (, )]
[propType, !=, null]
[propType]
[null]
[propType, ., isFunctionType, (, )]
[propType]
[propType, ., toMaybeFunctionType, (, )]
[propType]
[ownerType, ., getCtorImplementedInterfaces, (, )]
[ownerType]
[propType]
[iface, ., getPropertyType, (, propName, )]
[iface]
[propName]
[propType, !=, null, &&, propType, ., isFunctionType, (, )]
[propType, !=, null]
[propType]
[null]
[propType, ., isFunctionType, (, )]
[propType]
[propType, ., toMaybeFunctionType, (, )]
[propType]
[null]
[Preconditions, ., checkNotNull, (, info, )]
[Preconditions]
[info]
[Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), )]
[Preconditions]
[info, ., hasEnumParameterType, (, )]
[info]
[null]
[rValue, !=, null, &&, rValue, ., isQualifiedName, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isQualifiedName, (, )]
[rValue]
[scope, ., getVar, (, rValue, ., getQualifiedName, (, ), )]
[scope]
[rValue, ., getQualifiedName, (, )]
[rValue]
[var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType]
[var, !=, null]
[var]
[null]
[var, ., getType, (, ), instanceof, EnumType]
[var, ., getType, (, )]
[var]
[enumType]
[(, EnumType, ), var, ., getType, (, )]
[var, ., getType, (, )]
[var]
[enumType, ==, null]
[enumType]
[null]
[info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getEnumParameterType, (, )]
[info]
[scope]
[typeRegistry]
[enumType]
[typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, )]
[typeRegistry]
[name]
[rValue]
[elementsType]
[rValue, !=, null, &&, rValue, ., isObjectLit, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isObjectLit, (, )]
[rValue]
[rValue, ., getFirstChild, (, )]
[rValue]
[key, !=, null]
[key]
[null]
[NodeUtil, ., getStringValue, (, key, )]
[NodeUtil]
[key]
[keyName, ==, null]
[keyName]
[null]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, )]
[JSError]
[sourceName]
[key]
[ENUM_NOT_CONSTANT]
[keyName]
[!, codingConvention, ., isValidEnumKey, (, keyName, )]
[codingConvention, ., isValidEnumKey, (, keyName, )]
[codingConvention]
[keyName]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, )]
[JSError]
[sourceName]
[key]
[ENUM_NOT_CONSTANT]
[keyName]
[enumType, ., defineElement, (, keyName, ,, key, )]
[enumType]
[keyName]
[key]
[key]
[key, ., getNext, (, )]
[key]
[name, !=, null, &&, scope, ., isGlobal, (, )]
[name, !=, null]
[name]
[null]
[scope, ., isGlobal, (, )]
[scope]
[typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), )]
[typeRegistry]
[name]
[enumType, ., getElementsType, (, )]
[enumType]
[enumType]
[defineSlot, (, name, ,, parent, ,, type, ,, type, ==, null, )]
[name]
[parent]
[type]
[type, ==, null]
[type]
[null]
[Preconditions, ., checkArgument, (, inferred, ||, type, !=, null, )]
[Preconditions]
[inferred, ||, type, !=, null]
[inferred]
[type, !=, null]
[type]
[null]
[n, ., isName, (, )]
[n]
[Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), )]
[Preconditions]
[parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, )]
[parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, )]
[parent, ., isFunction, (, ), ||, parent, ., isVar, (, )]
[parent, ., isFunction, (, )]
[parent]
[parent, ., isVar, (, )]
[parent]
[parent, ., isParamList, (, )]
[parent]
[parent, ., isCatch, (, )]
[parent]
[Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), )]
[Preconditions]
[n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), )]
[n, ., isGetProp, (, )]
[n]
[(, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), )]
[parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, )]
[parent, ., isAssign, (, )]
[parent]
[parent, ., isExprResult, (, )]
[parent]
[defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, )]
[n]
[parent]
[n, ., getQualifiedName, (, )]
[n]
[type]
[inferred]
[Preconditions, ., checkArgument, (, !, variableName, ., isEmpty, (, ), )]
[Preconditions]
[!, variableName, ., isEmpty, (, )]
[variableName, ., isEmpty, (, )]
[variableName]
[n, ., isName, (, ), &&, scope, ., isGlobal, (, )]
[n, ., isName, (, )]
[n]
[scope, ., isGlobal, (, )]
[scope]
[isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), )]
[isGlobalVar]
[(, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), )]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, )]
[parent, ., isVar, (, )]
[parent]
[parent, ., isFunction, (, )]
[parent]
[scope]
[n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, )]
[n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, )]
[n, ., isGetProp, (, )]
[n]
[!, scope, ., isGlobal, (, )]
[scope, ., isGlobal, (, )]
[scope]
[isQnameRootedInGlobalScope, (, n, )]
[n]
[scope, ., getGlobalScope, (, )]
[scope]
[!, globalScope, ., isDeclared, (, variableName, ,, false, )]
[globalScope, ., isDeclared, (, variableName, ,, false, )]
[globalScope]
[variableName]
[false]
[scopeToDeclareIn]
[scope, ., getGlobalScope, (, )]
[scope]
[n, ., isFromExterns, (, )]
[n]
[null]
[compiler, ., getInput, (, inputId, )]
[compiler]
[inputId]
[scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, )]
[scopeToDeclareIn]
[variableName]
[false]
[scopeToDeclareIn, ., getVar, (, variableName, )]
[scopeToDeclareIn]
[variableName]
[newVar]
[validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, )]
[validator]
[sourceName]
[input]
[n]
[parent]
[oldVar]
[variableName]
[type]
[type, !=, null]
[type]
[null]
[setDeferredType, (, n, ,, type, )]
[n]
[type]
[newVar]
[scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, )]
[scopeToDeclareIn]
[variableName]
[n]
[type]
[input]
[inferred]
[type, instanceof, EnumType]
[type]
[newVar, ., getInitialValue, (, )]
[newVar]
[initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), )]
[initialValue, !=, null]
[initialValue]
[null]
[(, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), )]
[initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, )]
[initialValue, ., isObjectLit, (, )]
[initialValue]
[initialValue, ., isQualifiedName, (, )]
[initialValue]
[!, isValidValue]
[isValidValue]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, )]
[JSError]
[sourceName]
[n]
[ENUM_INITIALIZER]
[JSType, ., toMaybeFunctionType, (, type, )]
[JSType]
[type]
[fnType, !=, null, &&, !, type, ., isEmptyType, (, )]
[fnType, !=, null]
[fnType]
[null]
[!, type, ., isEmptyType, (, )]
[type, ., isEmptyType, (, )]
[type]
[(, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), )]
[(, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), )]
[fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, )]
[fnType, ., isConstructor, (, )]
[fnType]
[fnType, ., isInterface, (, )]
[fnType]
[variableName, ., equals, (, fnType, ., getReferenceName, (, ), )]
[variableName]
[fnType, ., getReferenceName, (, )]
[fnType]
[finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, )]
[n]
[variableName]
[fnType]
[scopeToDeclareIn]
[input]
[newVar]
[shouldDeclareOnGlobalThis]
[typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, )]
[typeRegistry]
[GLOBAL_THIS]
[inferred]
[globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, )]
[globalThis]
[variableName]
[type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type]
[type, ==, null]
[type]
[null]
[getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[JSTypeNative, ., NO_TYPE]
[JSTypeNative]
[type]
[n]
[globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, )]
[globalThis]
[variableName]
[type]
[n]
[isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, )]
[isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, )]
[isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null]
[isGlobalVar, &&, "Window", ., equals, (, variableName, )]
[isGlobalVar]
["Window", ., equals, (, variableName, )]
["Window"]
[variableName]
[type, !=, null]
[type]
[null]
[type, ., isFunctionType, (, )]
[type]
[type, ., isConstructor, (, )]
[type]
[typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, )]
[typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, )]
[typeRegistry]
[GLOBAL_THIS]
[globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, )]
[globalThisCtor, ., getInstanceType, (, )]
[globalThisCtor]
[globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, )]
[globalThisCtor, ., getPrototype, (, )]
[globalThisCtor]
[globalThisCtor, ., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (, ), ), ., getInstanceType, (, ), )]
[globalThisCtor]
[(, type, ., toMaybeFunctionType, (, ), ), ., getInstanceType, (, )]
[(, type, ., toMaybeFunctionType, (, ), )]
[type, ., toMaybeFunctionType, (, )]
[type]
[fnType, ., getSuperClassConstructor, (, )]
[fnType]
[fnType, ., getSlot, (, "prototype", )]
[fnType]
["prototype"]
[prototypeSlot, ., setNode, (, n, )]
[prototypeSlot]
[n]
[variableName, +, ".prototype"]
[variableName]
[".prototype"]
[scopeToDeclareIn, ., getVar, (, prototypeName, )]
[scopeToDeclareIn]
[prototypeName]
[prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn]
[prototypeVar, !=, null]
[prototypeVar]
[null]
[prototypeVar, ., scope, ==, scopeToDeclareIn]
[prototypeVar, ., scope]
[prototypeVar]
[scopeToDeclareIn]
[scopeToDeclareIn, ., undeclare, (, prototypeVar, )]
[scopeToDeclareIn]
[prototypeVar]
[scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), )]
[scopeToDeclareIn]
[prototypeName]
[n]
[prototypeSlot, ., getType, (, )]
[prototypeSlot]
[input]
[superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), )]
[superClassCtor, ==, null]
[superClassCtor]
[null]
[superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), )]
[superClassCtor, ., getInstanceType, (, )]
[superClassCtor]
[getNativeType, (, OBJECT_TYPE, )]
[OBJECT_TYPE]
[newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, )]
[newVar, ., getInitialValue, (, ), ==, null]
[newVar, ., getInitialValue, (, )]
[newVar]
[null]
[!, n, ., isFromExterns, (, )]
[n, ., isFromExterns, (, )]
[n]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, )]
[JSError]
[sourceName]
[n]
[fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER]
[fnType, ., isConstructor, (, )]
[fnType]
[CTOR_INITIALIZER]
[IFACE_INITIALIZER]
[variableName]
[getQnameRootScope, (, n, )]
[n]
[scope, !=, null, &&, scope, ., isGlobal, (, )]
[scope, !=, null]
[scope]
[null]
[scope, ., isGlobal, (, )]
[scope]
[NodeUtil, ., getRootOfQualifiedName, (, n, )]
[NodeUtil]
[n]
[root, ., isName, (, )]
[root]
[scope, ., getVar, (, root, ., getString, (, ), )]
[scope]
[root, ., getString, (, )]
[root]
[var, !=, null]
[var]
[null]
[var, ., getScope, (, )]
[var]
[null]
[info, !=, null, &&, info, ., hasType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasType, (, )]
[info]
[getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, )]
[sourceName]
[lValue]
[info]
[rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, )]
[rValue, !=, null, &&, rValue, ., isFunction, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isFunction, (, )]
[rValue]
[shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, )]
[JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), )]
[JSType]
[rValue, ., getJSType, (, )]
[rValue]
[info]
[lValue]
[rValue, ., getJSType, (, )]
[rValue]
[info, !=, null]
[info]
[null]
[info, ., hasEnumParameterType, (, )]
[info]
[rValue, !=, null, &&, rValue, ., isObjectLit, (, )]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., isObjectLit, (, )]
[rValue]
[rValue, ., getJSType, (, )]
[rValue]
[createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, )]
[rValue]
[lValue, ., getQualifiedName, (, )]
[lValue]
[info]
[lValue]
[info, ., isConstructor, (, ), ||, info, ., isInterface, (, )]
[info, ., isConstructor, (, )]
[info]
[info, ., isInterface, (, )]
[info]
[createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, )]
[rValue]
[lValue, ., getQualifiedName, (, )]
[lValue]
[info]
[lValue]
[info, ., isConstant, (, )]
[info]
[null]
[rValue, !=, null]
[rValue]
[null]
[rValue, ., getJSDocInfo, (, )]
[rValue]
[rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, )]
[rValueInfo, !=, null]
[rValueInfo]
[null]
[rValueInfo, ., hasType, (, )]
[rValueInfo]
[rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[rValueInfo, ., getType, (, )]
[rValueInfo]
[scope]
[typeRegistry]
[rValue, ., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, )]
[rValue, ., getJSType, (, ), !=, null]
[rValue, ., getJSType, (, )]
[rValue]
[null]
[!, rValue, ., getJSType, (, ), ., isUnknownType, (, )]
[rValue, ., getJSType, (, ), ., isUnknownType, (, )]
[rValue, ., getJSType, (, )]
[rValue]
[rValue, ., getJSType, (, )]
[rValue]
[rValue, ., isOr, (, )]
[rValue]
[rValue, ., getFirstChild, (, )]
[rValue]
[firstClause, ., getNext, (, )]
[firstClause]
[firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), )]
[firstClause, ., isName, (, ), &&, lValue, ., isName, (, )]
[firstClause, ., isName, (, )]
[firstClause]
[lValue, ., isName, (, )]
[lValue]
[firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), )]
[firstClause, ., getString, (, )]
[firstClause]
[lValue, ., getString, (, )]
[lValue]
[namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, )]
[namesMatch, &&, secondClause, ., getJSType, (, ), !=, null]
[namesMatch]
[secondClause, ., getJSType, (, ), !=, null]
[secondClause, ., getJSType, (, )]
[secondClause]
[null]
[!, secondClause, ., getJSType, (, ), ., isUnknownType, (, )]
[secondClause, ., getJSType, (, ), ., isUnknownType, (, )]
[secondClause, ., getJSType, (, )]
[secondClause]
[secondClause, ., getJSType, (, )]
[secondClause]
[getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, )]
[sourceName]
[lValue]
[info]
[v, ==, null, ?, null, :, v, ., getType, (, )]
[v, ==, null]
[v]
[null]
[null]
[v, ., getType, (, )]
[v]
[t, ==, null, ?, null, :, t, ., dereference, (, )]
[t, ==, null]
[t]
[null]
[null]
[t, ., dereference, (, )]
[t]
[JSType, ., toMaybeFunctionType, (, o, )]
[JSType]
[o]
[codingConvention, ., checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, )]
[codingConvention]
[n]
[delegateCallingConventions]
[codingConvention, ., getClassesDefinedByCall, (, n, )]
[codingConvention]
[n]
[relationship, !=, null]
[relationship]
[null]
[getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), )]
[scope, ., getVar, (, relationship, ., superclassName, )]
[scope]
[relationship, ., superclassName]
[relationship]
[getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), )]
[scope, ., getVar, (, relationship, ., subclassName, )]
[scope]
[relationship, ., subclassName]
[relationship]
[superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, )]
[superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null]
[superCtor, !=, null, &&, superCtor, ., isConstructor, (, )]
[superCtor, !=, null]
[superCtor]
[null]
[superCtor, ., isConstructor, (, )]
[superCtor]
[subCtor, !=, null]
[subCtor]
[null]
[subCtor, ., isConstructor, (, )]
[subCtor]
[superCtor, ., getInstanceType, (, )]
[superCtor]
[subCtor, ., getInstanceType, (, )]
[subCtor]
[superCtor]
[superClass, ., getConstructor, (, )]
[superClass]
[subCtor]
[subClass, ., getConstructor, (, )]
[subClass]
[relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, )]
[relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, )]
[relationship, ., type, ==, SubclassType, ., INHERITS]
[relationship, ., type]
[relationship]
[SubclassType, ., INHERITS]
[SubclassType]
[!, superClass, ., isEmptyType, (, )]
[superClass, ., isEmptyType, (, )]
[superClass]
[!, subClass, ., isEmptyType, (, )]
[subClass, ., isEmptyType, (, )]
[subClass]
[validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, )]
[validator]
[t]
[n]
[superClass]
[subClass]
[superCtor, !=, null, &&, subCtor, !=, null]
[superCtor, !=, null]
[superCtor]
[null]
[subCtor, !=, null]
[subCtor]
[null]
[codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, )]
[codingConvention]
[superCtor]
[subCtor]
[relationship, ., type]
[relationship]
[codingConvention, ., getSingletonGetterClassName, (, n, )]
[codingConvention]
[n]
[singletonGetterClassName, !=, null]
[singletonGetterClassName]
[null]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), )]
[ObjectType]
[typeRegistry, ., getType, (, singletonGetterClassName, )]
[typeRegistry]
[singletonGetterClassName]
[objectType, !=, null]
[objectType]
[null]
[objectType, ., getConstructor, (, )]
[objectType]
[functionType, !=, null]
[functionType]
[null]
[typeRegistry, ., createFunctionType, (, objectType, )]
[typeRegistry]
[objectType]
[codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, )]
[codingConvention]
[functionType]
[getterType]
[objectType]
[codingConvention, ., getDelegateRelationship, (, n, )]
[codingConvention]
[n]
[delegateRelationship, !=, null]
[delegateRelationship]
[null]
[applyDelegateRelationship, (, delegateRelationship, )]
[delegateRelationship]
[codingConvention, ., getObjectLiteralCast, (, n, )]
[codingConvention]
[n]
[objectLiteralCast, !=, null]
[objectLiteralCast]
[null]
[objectLiteralCast, ., diagnosticType, ==, null]
[objectLiteralCast, ., diagnosticType]
[objectLiteralCast]
[null]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), )]
[ObjectType]
[typeRegistry, ., getType, (, objectLiteralCast, ., typeName, )]
[typeRegistry]
[objectLiteralCast, ., typeName]
[objectLiteralCast]
[type, !=, null, &&, type, ., getConstructor, (, ), !=, null]
[type, !=, null]
[type]
[null]
[type, ., getConstructor, (, ), !=, null]
[type, ., getConstructor, (, )]
[type]
[null]
[setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, )]
[objectLiteralCast, ., objectNode]
[objectLiteralCast]
[type]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), )]
[compiler]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[n]
[CONSTRUCTOR_EXPECTED]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, objectLiteralCast, ., diagnosticType, ), )]
[compiler]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, objectLiteralCast, ., diagnosticType, )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[n]
[objectLiteralCast, ., diagnosticType]
[objectLiteralCast]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), )]
[ObjectType]
[typeRegistry, ., getType, (, delegateRelationship, ., delegator, )]
[typeRegistry]
[delegateRelationship, ., delegator]
[delegateRelationship]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), )]
[ObjectType]
[typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, )]
[typeRegistry]
[delegateRelationship, ., delegateBase]
[delegateRelationship]
[ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), )]
[ObjectType]
[typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), )]
[typeRegistry]
[codingConvention, ., getDelegateSuperclassName, (, )]
[codingConvention]
[delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null]
[delegatorObject, !=, null, &&, delegateBaseObject, !=, null]
[delegatorObject, !=, null]
[delegatorObject]
[null]
[delegateBaseObject, !=, null]
[delegateBaseObject]
[null]
[delegateSuperObject, !=, null]
[delegateSuperObject]
[null]
[delegatorObject, ., getConstructor, (, )]
[delegatorObject]
[delegateBaseObject, ., getConstructor, (, )]
[delegateBaseObject]
[delegateSuperObject, ., getConstructor, (, )]
[delegateSuperObject]
[delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null]
[delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null]
[delegatorCtor, !=, null]
[delegatorCtor]
[null]
[delegateBaseCtor, !=, null]
[delegateBaseCtor]
[null]
[delegateSuperCtor, !=, null]
[delegateSuperCtor]
[null]
[new, FunctionParamBuilder, (, typeRegistry, )]
[typeRegistry]
[functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), )]
[functionParamBuilder]
[getNativeType, (, U2U_CONSTRUCTOR_TYPE, )]
[U2U_CONSTRUCTOR_TYPE]
[typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), )]
[typeRegistry]
[typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, )]
[typeRegistry]
[delegateBaseObject]
[functionParamBuilder, ., build, (, )]
[functionParamBuilder]
[typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, )]
[typeRegistry]
[delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX]
[delegateBaseObject, ., getReferenceName, (, )]
[delegateBaseObject]
[DELEGATE_PROXY_SUFFIX]
[null]
[null]
[null]
[null]
[delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, )]
[delegateProxy]
[delegateBaseObject]
[codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, )]
[codingConvention]
[delegateSuperObject]
[delegateBaseObject]
[delegatorObject]
[delegateProxy]
[findDelegate]
[delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), )]
[delegateProxyPrototypes]
[delegateProxy, ., getPrototype, (, )]
[delegateProxy]
[n, ., getFirstChild, (, )]
[n]
[ownerNode, ., getQualifiedName, (, )]
[ownerNode]
[n, ., getQualifiedName, (, )]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, )]
[Preconditions]
[qName, !=, null, &&, ownerName, !=, null]
[qName, !=, null]
[qName]
[null]
[ownerName, !=, null]
[ownerName]
[null]
[getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, )]
[t, ., getSourceName, (, )]
[t]
[info]
[n]
[rhsValue]
[valueType, ==, null, &&, rhsValue, !=, null]
[valueType, ==, null]
[valueType]
[null]
[rhsValue, !=, null]
[rhsValue]
[null]
[valueType]
[rhsValue, ., getJSType, (, )]
[rhsValue]
["prototype", ., equals, (, propName, )]
["prototype"]
[propName]
[scope, ., getVar, (, qName, )]
[scope]
[qName]
[qVar, !=, null]
[qVar]
[null]
[ObjectType, ., cast, (, qVar, ., getType, (, ), )]
[ObjectType]
[qVar, ., getType, (, )]
[qVar]
[qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, )]
[qVarType, !=, null, &&, rhsValue, !=, null]
[qVarType, !=, null]
[qVarType]
[null]
[rhsValue, !=, null]
[rhsValue]
[null]
[rhsValue, ., isObjectLit, (, )]
[rhsValue]
[typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), )]
[typeRegistry]
[rhsValue, ., getJSType, (, )]
[rhsValue]
[qVarType, ., getImplicitPrototype, (, )]
[qVarType]
[!, qVar, ., isTypeInferred, (, )]
[qVar, ., isTypeInferred, (, )]
[qVar]
[qVar, ., getScope, (, ), ==, scope]
[qVar, ., getScope, (, )]
[qVar]
[scope]
[scope, ., undeclare, (, qVar, )]
[scope]
[qVar]
[valueType, ==, null]
[valueType]
[null]
[parent, ., isExprResult, (, )]
[parent]
[stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), )]
[stubDeclarations]
[new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, )]
[n]
[t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, ), !=, null]
[t, ., getInput, (, )]
[t]
[null]
[t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, )]
[t]
[ownerName]
[isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,, valueType, )]
[qName]
[n]
[info]
[rhsValue]
[valueType]
[!, inferred]
[inferred]
[getObjectSlot, (, ownerName, )]
[ownerName]
[ownerType, !=, null]
[ownerType]
[null]
[t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, ), !=, null]
[t, ., getInput, (, )]
[t]
[null]
[t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, )]
[t]
[(, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), )]
[(, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), )]
[!, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, )]
[!, ownerType, ., hasOwnProperty, (, propName, )]
[ownerType, ., hasOwnProperty, (, propName, )]
[ownerType]
[propName]
[ownerType, ., isPropertyTypeInferred, (, propName, )]
[ownerType]
[propName]
[(, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), )]
[(, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, )]
[(, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), )]
[isExtern, &&, !, ownerType, ., isNativeObjectType, (, )]
[isExtern]
[!, ownerType, ., isNativeObjectType, (, )]
[ownerType, ., isNativeObjectType, (, )]
[ownerType]
[!, ownerType, ., isInstanceType, (, )]
[ownerType, ., isInstanceType, (, )]
[ownerType]
[ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, )]
[ownerType]
[propName]
[valueType]
[n]
[defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, )]
[n]
[parent]
[valueType]
[inferred]
[rhsValue, !=, null, &&, rhsValue, ., isTrue, (, )]
[rhsValue, !=, null]
[rhsValue]
[null]
[rhsValue, ., isTrue, (, )]
[rhsValue]
[JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), )]
[JSType]
[getObjectSlot, (, ownerName, )]
[ownerName]
[ownerType, !=, null]
[ownerType]
[null]
[ownerType, ., getTypeOfThis, (, )]
[ownerType]
[codingConvention, ., getDelegateSuperclassName, (, )]
[codingConvention]
[delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, )]
[delegateName, ==, null]
[delegateName]
[null]
[null]
[typeRegistry, ., getType, (, delegateName, )]
[typeRegistry]
[delegateName]
[delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, )]
[delegateType, !=, null]
[delegateType]
[null]
[ownerTypeOfThis, ., isSubtype, (, delegateType, )]
[ownerTypeOfThis]
[delegateType]
[defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, )]
[n]
[parent]
[getNativeType, (, BOOLEAN_TYPE, )]
[BOOLEAN_TYPE]
[true]
[valueType, ==, null]
[valueType]
[null]
[true]
[true]
[info, !=, null]
[info]
[null]
[inferred]
[!, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), )]
[(, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), )]
[info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, )]
[info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), )]
[info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, )]
[info, ., hasType, (, )]
[info]
[info, ., hasEnumParameterType, (, )]
[info]
[(, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), )]
[info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, )]
[info, ., isConstant, (, ), &&, valueType, !=, null]
[info, ., isConstant, (, )]
[info]
[valueType, !=, null]
[valueType]
[null]
[!, valueType, ., isUnknownType, (, )]
[valueType, ., isUnknownType, (, )]
[valueType]
[FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, )]
[FunctionTypeBuilder]
[info]
[inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, )]
[inferred, &&, rhsValue, !=, null]
[inferred]
[rhsValue, !=, null]
[rhsValue]
[null]
[rhsValue, ., isFunction, (, )]
[rhsValue]
[info, !=, null]
[info]
[null]
[false]
[!, scope, ., isDeclared, (, qName, ,, false, ), &&, n, ., isUnscopedQualifiedName, (, )]
[!, scope, ., isDeclared, (, qName, ,, false, )]
[scope, ., isDeclared, (, qName, ,, false, )]
[scope]
[qName]
[false]
[n, ., isUnscopedQualifiedName, (, )]
[n]
[n, ., getParent, (, )]
[n]
[!, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), )]
[(, current, ., isScript, (, ), ||, current, ., isFunction, (, ), )]
[current, ., isScript, (, ), ||, current, ., isFunction, (, )]
[current, ., isScript, (, )]
[current]
[current, ., isFunction, (, )]
[current]
[current]
[current, ., getParent, (, )]
[current]
[NodeUtil, ., isControlStructure, (, current, )]
[NodeUtil]
[current]
[true]
[getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), )]
[scope, ., getRootNode, (, )]
[scope]
[contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, )]
[contents, ==, null]
[contents]
[null]
[!, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, )]
[contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, )]
[contents, ., getEscapedQualifiedNames, (, )]
[contents]
[qName]
[false]
[inferred]
[scope, ., getVar, (, slotName, )]
[scope]
[slotName]
[ownerVar, !=, null]
[ownerVar]
[null]
[ownerVar, ., getType, (, )]
[ownerVar]
[ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), )]
[ObjectType]
[ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, )]
[ownerVarType, ==, null]
[ownerVarType]
[null]
[null]
[ownerVarType, ., restrictByNotNullOrUndefined, (, )]
[ownerVarType]
[null]
[stubDeclarations]
[stub, ., node]
[stub]
[n, ., getParent, (, )]
[n]
[n, ., getQualifiedName, (, )]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[stub, ., ownerName]
[stub]
[stub, ., isExtern]
[stub]
[scope, ., isDeclared, (, qName, ,, false, )]
[scope]
[qName]
[false]
[getObjectSlot, (, ownerName, )]
[ownerName]
[defineSlot, (, n, ,, parent, ,, unknownType, ,, true, )]
[n]
[parent]
[unknownType]
[true]
[ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), )]
[ownerType, !=, null]
[ownerType]
[null]
[(, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), )]
[isExtern, ||, ownerType, ., isFunctionPrototypeType, (, )]
[isExtern]
[ownerType, ., isFunctionPrototypeType, (, )]
[ownerType]
[ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, )]
[ownerType]
[propName]
[unknownType]
[n]
[typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :, ownerType, )]
[typeRegistry]
[propName]
[ownerType, ==, null, ?, unknownType, :, ownerType]
[ownerType, ==, null]
[ownerType]
[null]
[unknownType]
[ownerType]
[this, ., thisType]
[this]
[thisType]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, ., getType, (, )]
[child]
[Token, ., ASSIGN]
[Token]
[maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), )]
[t]
[child, ., getFirstChild, (, )]
[child]
[child]
[child, ., getLastChild, (, )]
[child]
[Token, ., GETPROP]
[Token]
[maybeCollectMember, (, t, ,, child, ,, child, ,, null, )]
[t]
[child]
[child]
[null]
[nodeWithJsDocInfo, ., getJSDocInfo, (, )]
[nodeWithJsDocInfo]
[info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, )]
[info, ==, null, ||, !, member, ., isGetProp, (, )]
[info, ==, null]
[info]
[null]
[!, member, ., isGetProp, (, )]
[member, ., isGetProp, (, )]
[member]
[!, member, ., getFirstChild, (, ), ., isThis, (, )]
[member, ., getFirstChild, (, ), ., isThis, (, )]
[member, ., getFirstChild, (, )]
[member]
[member, ., getFirstChild, (, ), ., setJSType, (, thisType, )]
[member, ., getFirstChild, (, )]
[member]
[thisType]
[getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,, value, )]
[t, ., getSourceName, (, )]
[t]
[info]
[member]
[value]
[member, ., getLastChild, (, )]
[member]
[jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null]
[jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), )]
[jsType, !=, null]
[jsType]
[null]
[(, name, ., isName, (, ), ||, name, ., isString, (, ), )]
[name, ., isName, (, ), ||, name, ., isString, (, )]
[name, ., isName, (, )]
[name]
[name, ., isString, (, )]
[name]
[thisType, ., toObjectType, (, ), !=, null]
[thisType, ., toObjectType, (, )]
[thisType]
[null]
[thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, )]
[thisType, ., toObjectType, (, )]
[thisType]
[name, ., getString, (, )]
[name]
[jsType]
[member]
[this, ., node]
[this]
[node]
[this, ., isExtern]
[this]
[isExtern]
[this, ., ownerName]
[this]
[ownerName]
[scope]
[super, ., visit, (, t, ,, n, ,, parent, )]
[super]
[t]
[n]
[parent]
[n, ., getType, (, )]
[n]
[Token, ., VAR]
[Token]
[n, ., hasOneChild, (, )]
[n]
[checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,, n, ., getJSDocInfo, (, ), )]
[t]
[n, ., getFirstChild, (, )]
[n]
[n, ., getJSDocInfo, (, )]
[n]
[checkForTypedef, (, t, ,, n, ,, info, )]
[t]
[n]
[info]
[super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, )]
[super]
[t]
[info]
[n]
[parent]
[rhsValue]
[info, ==, null, ||, !, info, ., hasTypedefType, (, )]
[info, ==, null]
[info]
[null]
[!, info, ., hasTypedefType, (, )]
[info, ., hasTypedefType, (, )]
[info]
[candidate, ., getQualifiedName, (, )]
[candidate]
[typedef, ==, null]
[typedef]
[null]
[typeRegistry, ., declareType, (, typedef, ,, unknownType, )]
[typeRegistry]
[typedef]
[unknownType]
[info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getTypedefType, (, )]
[info]
[scope]
[typeRegistry]
[realType, ==, null]
[realType]
[null]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), )]
[compiler]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[candidate]
[MALFORMED_TYPEDEF]
[typedef]
[typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, )]
[typeRegistry]
[typedef]
[realType]
[candidate, ., isGetProp, (, )]
[candidate]
[defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,, getNativeType, (, NO_TYPE, ), ,, false, )]
[candidate]
[candidate, ., getParent, (, )]
[candidate]
[getNativeType, (, NO_TYPE, )]
[NO_TYPE]
[false]
[scope]
[NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,, this, )]
[NodeTraversal]
[compiler]
[scope, ., getRootNode, (, )]
[scope]
[this]
[getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), )]
[scope, ., getRootNode, (, )]
[scope]
[contents, !=, null]
[contents]
[null]
[contents, ., getEscapedVarNames, (, )]
[contents]
[scope, ., getVar, (, varName, )]
[scope]
[varName]
[Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, )]
[Preconditions]
[v, ., getScope, (, ), ==, scope]
[v, ., getScope, (, )]
[v]
[scope]
[v, ., markEscaped, (, )]
[v]
[contents, ., getAssignedNameCounts, (, ), ., entrySet, (, )]
[contents, ., getAssignedNameCounts, (, )]
[contents]
[scope, ., getVar, (, entry, ., getElement, (, ), )]
[scope]
[entry, ., getElement, (, )]
[entry]
[Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, )]
[Preconditions]
[v, ., getScope, (, ), ==, scope]
[v, ., getScope, (, )]
[v]
[scope]
[entry, ., getCount, (, ), ==, 1]
[entry, ., getCount, (, )]
[entry]
[1]
[v, ., markAssignedExactlyOnce, (, )]
[v]
[n, ==, scope, ., getRootNode, (, )]
[n]
[scope, ., getRootNode, (, )]
[scope]
[n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, )]
[n, ., isParamList, (, )]
[n]
[parent, ==, scope, ., getRootNode, (, )]
[parent]
[scope, ., getRootNode, (, )]
[scope]
[handleFunctionInputs, (, parent, )]
[parent]
[super, ., visit, (, t, ,, n, ,, parent, )]
[super]
[t]
[n]
[parent]
[fnNode, ., getFirstChild, (, )]
[fnNode]
[fnNameNode, ., getString, (, )]
[fnNameNode]
[!, fnName, ., isEmpty, (, )]
[fnName, ., isEmpty, (, )]
[fnName]
[scope, ., getVar, (, fnName, )]
[scope]
[fnName]
[fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, )]
[fnVar, ==, null]
[fnVar]
[null]
[(, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, )]
[fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode]
[fnVar, ., getNameNode, (, ), !=, null]
[fnVar, ., getNameNode, (, )]
[fnVar]
[null]
[fnVar, ., getInitialValue, (, ), !=, fnNode]
[fnVar, ., getInitialValue, (, )]
[fnVar]
[fnNode]
[defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, )]
[fnNameNode]
[fnNode]
[fnNode, ., getJSType, (, )]
[fnNode]
[false]
[declareArguments, (, fnNode, )]
[fnNode]
[functionNode, ., getFirstChild, (, ), ., getNext, (, )]
[functionNode, ., getFirstChild, (, )]
[functionNode]
[null]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, )]
[NodeUtil]
[functionNode]
[iifeArgumentNode]
[functionNode, ., getNext, (, )]
[functionNode]
[astParameters, ., getNext, (, )]
[astParameters]
[JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), )]
[JSType]
[functionNode, ., getJSType, (, )]
[functionNode]
[functionType, !=, null]
[functionType]
[null]
[functionType, ., getParametersNode, (, )]
[functionType]
[jsDocParameters, !=, null]
[jsDocParameters]
[null]
[jsDocParameters, ., getFirstChild, (, )]
[jsDocParameters]
[astParameters, ., children, (, )]
[astParameters]
[jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, )]
[jsDocParameter, ==, null]
[jsDocParameter]
[null]
[unknownType]
[jsDocParameter, ., getJSType, (, )]
[jsDocParameter]
[paramType, ==, null, ||, paramType, ==, unknownType]
[paramType, ==, null]
[paramType]
[null]
[paramType, ==, unknownType]
[paramType]
[unknownType]
[iifeArgumentNode, !=, null, &&, inferred]
[iifeArgumentNode, !=, null]
[iifeArgumentNode]
[null]
[inferred]
[iifeArgumentNode, ., getQualifiedName, (, )]
[iifeArgumentNode]
[argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, )]
[argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null]
[argumentName, ==, null]
[argumentName]
[null]
[scope, ., getParent, (, ), ==, null]
[scope, ., getParent, (, )]
[scope]
[null]
[null]
[scope, ., getParent, (, ), ., getVar, (, argumentName, )]
[scope, ., getParent, (, )]
[scope]
[argumentName]
[argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, )]
[argumentVar, !=, null]
[argumentVar]
[null]
[!, argumentVar, ., isTypeInferred, (, )]
[argumentVar, ., isTypeInferred, (, )]
[argumentVar]
[paramType]
[argumentVar, ., getType, (, )]
[argumentVar]
[paramType, ==, null]
[paramType]
[null]
[paramType]
[unknownType]
[defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, )]
[astParameter]
[functionNode]
[paramType]
[inferred]
[jsDocParameter, !=, null]
[jsDocParameter]
[null]
[jsDocParameter]
[jsDocParameter, ., getNext, (, )]
[jsDocParameter]
[iifeArgumentNode, !=, null]
[iifeArgumentNode]
[null]
[iifeArgumentNode]
[iifeArgumentNode, ., getNext, (, )]
[iifeArgumentNode]
[this, ., compiler]
[this]
[compiler]
[this, ., data]
[this]
[outParam]
[externs, ==, null]
[externs]
[null]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[ImmutableList, ., of, (, externs, ,, root, )]
[ImmutableList]
[externs]
[root]
[this]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScopeRoot, (, )]
[t]
[data, ., put, (, n, ,, new, AstFunctionContents, (, n, ), )]
[data]
[n]
[new, AstFunctionContents, (, n, )]
[n]
[t, ., inGlobalScope, (, )]
[t]
[n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null]
[n, ., isReturn, (, )]
[n]
[n, ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, )]
[n]
[null]
[data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, )]
[data, ., get, (, t, ., getScopeRoot, (, ), )]
[data]
[t, ., getScopeRoot, (, )]
[t]
[t, ., getScopeDepth, (, ), <=, 1]
[t, ., getScopeDepth, (, )]
[t]
[1]
[n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, )]
[n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, )]
[n, ., isName, (, )]
[n]
[NodeUtil, ., isLValue, (, n, )]
[NodeUtil]
[n]
[!, NodeUtil, ., isBleedingFunctionName, (, n, )]
[NodeUtil, ., isBleedingFunctionName, (, n, )]
[NodeUtil]
[n]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, name, )]
[scope]
[name]
[var, !=, null]
[var]
[null]
[var, ., getScope, (, )]
[var]
[ownerScope, ., isLocal, (, )]
[ownerScope]
[data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, )]
[data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[data]
[ownerScope, ., getRootNode, (, )]
[ownerScope]
[name]
[scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, )]
[scope, !=, ownerScope]
[scope]
[ownerScope]
[ownerScope, ., isLocal, (, )]
[ownerScope]
[data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, )]
[data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[data]
[ownerScope, ., getRootNode, (, )]
[ownerScope]
[name]
[n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, )]
[n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, )]
[n, ., isGetProp, (, )]
[n]
[n, ., isUnscopedQualifiedName, (, )]
[n]
[NodeUtil, ., isLValue, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, )]
[NodeUtil, ., getRootOfQualifiedName, (, n, )]
[NodeUtil]
[n]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, name, )]
[scope]
[name]
[var, !=, null]
[var]
[null]
[var, ., getScope, (, )]
[var]
[scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, )]
[scope, !=, ownerScope]
[scope]
[ownerScope]
[ownerScope, ., isLocal, (, )]
[ownerScope]
[data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, ), )]
[data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[data]
[ownerScope, ., getRootNode, (, )]
[ownerScope]
[n, ., getQualifiedName, (, )]
[n]
[n, ==, null]
[n]
[null]
[null]
[functionAnalysisResults, ., get, (, n, )]
[functionAnalysisResults]
[n]
