[DiagnosticType, ., error, (, "JSC_OUTPUT_SAME_AS_INPUT_ERROR", ,, "Bad output file (already listed as input file): {0}", )]
[DiagnosticType]
["JSC_OUTPUT_SAME_AS_INPUT_ERROR"]
["Bad output file (already listed as input file): {0}"]
[false]
[null]
[null]
[null]
[null]
[null]
[null]
[100]
["%output%"]
["%output|jsstring%"]
[new, RunTimeStats, (, )]
[System, ., out]
[System]
[System, ., err]
[System]
[this, ., config]
[this]
[new, CommandLineConfig, (, )]
[this, ., jsOutput]
[this]
[Preconditions, ., checkNotNull, (, out, )]
[Preconditions]
[out]
[this, ., err]
[this]
[Preconditions, ., checkNotNull, (, err, )]
[Preconditions]
[err]
[Preconditions, ., checkArgument, (, inputsSupplier, ==, null, ^, modulesSupplier, ==, null, )]
[Preconditions]
[inputsSupplier, ==, null, ^, modulesSupplier, ==, null]
[inputsSupplier, ==, null]
[inputsSupplier]
[null]
[modulesSupplier, ==, null]
[modulesSupplier]
[null]
[testMode]
[true]
[this, ., externsSupplierForTesting]
[this]
[externsSupplier]
[this, ., inputsSupplierForTesting]
[this]
[inputsSupplier]
[this, ., modulesSupplierForTesting]
[this]
[modulesSupplier]
[this, ., exitCodeReceiverForTesting]
[this]
[exitCodeReceiver]
[testMode]
[config]
[compiler, ==, null]
[compiler]
[null]
[new, DiagnosticGroups, (, )]
[compiler, ., getDiagnosticGroups, (, )]
[compiler]
[onlyClosureDependencies]
[closureEntryPoints, ., isEmpty, (, )]
[closureEntryPoints]
[new, FlagUsageException, (, "When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point", )]
["When only_closure_dependencies is ", +, "on, you must specify at least one closure_entry_point"]
["When only_closure_dependencies is "]
["on, you must specify at least one closure_entry_point"]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, ), ., setEntryPoints, (, closureEntryPoints, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, true, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, )]
[new, DependencyOptions, (, )]
[true]
[true]
[true]
[closureEntryPoints]
[processCommonJSModules]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, false, ), ., setDependencySorting, (, true, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, false, )]
[new, DependencyOptions, (, )]
[false]
[true]
[false]
[closureEntryPoints]
[manageClosureDependencies, ||, closureEntryPoints, ., size, (, ), >, 0]
[manageClosureDependencies]
[closureEntryPoints, ., size, (, ), >, 0]
[closureEntryPoints, ., size, (, )]
[closureEntryPoints]
[0]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, ), ., setEntryPoints, (, closureEntryPoints, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, ), ., setMoocherDropping, (, false, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, ), ., setDependencySorting, (, true, )]
[new, DependencyOptions, (, ), ., setDependencyPruning, (, true, )]
[new, DependencyOptions, (, )]
[true]
[true]
[false]
[closureEntryPoints]
[null]
[getDiagnosticGroups, (, )]
[config, ., warningGuards, !=, null]
[config, ., warningGuards]
[config]
[null]
[config, ., warningGuards, ., entries]
[config, ., warningGuards]
[config]
[diagnosticGroups, ., setWarningLevel, (, options, ,, entry, ., groupName, ,, entry, ., level, )]
[diagnosticGroups]
[options]
[entry, ., groupName]
[entry]
[entry, ., level]
[entry]
[!, config, ., warningsWhitelistFile, ., isEmpty, (, )]
[config, ., warningsWhitelistFile, ., isEmpty, (, )]
[config, ., warningsWhitelistFile]
[config]
[options, ., addWarningsGuard, (, WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), ), )]
[options]
[WhitelistWarningsGuard, ., fromFile, (, new, File, (, config, ., warningsWhitelistFile, ), )]
[WhitelistWarningsGuard]
[new, File, (, config, ., warningsWhitelistFile, )]
[config, ., warningsWhitelistFile]
[config]
[createDefineOrTweakReplacements, (, config, ., define, ,, options, ,, false, )]
[config, ., define]
[config]
[options]
[false]
[options, ., setTweakProcessing, (, config, ., tweakProcessing, )]
[options]
[config, ., tweakProcessing]
[config]
[createDefineOrTweakReplacements, (, config, ., tweak, ,, options, ,, true, )]
[config, ., tweak]
[config]
[options]
[true]
[createDependencyOptions, (, config, ., manageClosureDependencies, ,, config, ., onlyClosureDependencies, ,, config, ., processCommonJSModules, ,, config, ., closureEntryPoints, )]
[config, ., manageClosureDependencies]
[config]
[config, ., onlyClosureDependencies]
[config]
[config, ., processCommonJSModules]
[config]
[config, ., closureEntryPoints]
[config]
[depOptions, !=, null]
[depOptions]
[null]
[options, ., setDependencyOptions, (, depOptions, )]
[options]
[depOptions]
[options, ., devMode]
[options]
[config, ., jscompDevMode]
[config]
[options, ., setCodingConvention, (, config, ., codingConvention, )]
[options]
[config, ., codingConvention]
[config]
[options, ., setSummaryDetailLevel, (, config, ., summaryDetailLevel, )]
[options]
[config, ., summaryDetailLevel]
[config]
[options, ., setTrustedStrings, (, true, )]
[options]
[true]
[legacyOutputCharset]
[options, ., outputCharset]
[options]
[getLegacyOutputCharset, (, )]
[outputCharset2]
[getOutputCharset2, (, )]
[inputCharset]
[getInputCharset, (, )]
[config, ., jsOutputFile, ., length, (, ), >, 0]
[config, ., jsOutputFile, ., length, (, )]
[config, ., jsOutputFile]
[config]
[0]
[config, ., skipNormalOutputs]
[config]
[new, FlagUsageException, (, "skip_normal_outputs and js_output_file", +, " cannot be used together.", )]
["skip_normal_outputs and js_output_file", +, " cannot be used together."]
["skip_normal_outputs and js_output_file"]
[" cannot be used together."]
[config, ., skipNormalOutputs, &&, config, ., printAst]
[config, ., skipNormalOutputs]
[config]
[config, ., printAst]
[config]
[new, FlagUsageException, (, "skip_normal_outputs and print_ast cannot", +, " be used together.", )]
["skip_normal_outputs and print_ast cannot", +, " be used together."]
["skip_normal_outputs and print_ast cannot"]
[" be used together."]
[config, ., skipNormalOutputs, &&, config, ., printTree]
[config, ., skipNormalOutputs]
[config]
[config, ., printTree]
[config]
[new, FlagUsageException, (, "skip_normal_outputs and print_tree cannot", +, " be used together.", )]
["skip_normal_outputs and print_tree cannot", +, " be used together."]
["skip_normal_outputs and print_tree cannot"]
[" be used together."]
[config, ., createSourceMap, ., length, (, ), >, 0]
[config, ., createSourceMap, ., length, (, )]
[config, ., createSourceMap]
[config]
[0]
[options, ., sourceMapOutputPath]
[options]
[config, ., createSourceMap]
[config]
[options, ., sourceMapDetailLevel]
[options]
[config, ., sourceMapDetailLevel]
[config]
[options, ., sourceMapFormat]
[options]
[config, ., sourceMapFormat]
[config]
[!, config, ., variableMapInputFile, ., equals, (, "", )]
[config, ., variableMapInputFile, ., equals, (, "", )]
[config, ., variableMapInputFile]
[config]
[""]
[options, ., inputVariableMap]
[options]
[VariableMap, ., load, (, config, ., variableMapInputFile, )]
[VariableMap]
[config, ., variableMapInputFile]
[config]
[!, config, ., propertyMapInputFile, ., equals, (, "", )]
[config, ., propertyMapInputFile, ., equals, (, "", )]
[config, ., propertyMapInputFile]
[config]
[""]
[options, ., inputPropertyMap]
[options]
[VariableMap, ., load, (, config, ., propertyMapInputFile, )]
[VariableMap]
[config, ., propertyMapInputFile]
[config]
[config, ., languageIn, ., length, (, ), >, 0]
[config, ., languageIn, ., length, (, )]
[config, ., languageIn]
[config]
[0]
[CompilerOptions, ., LanguageMode, ., fromString, (, config, ., languageIn, )]
[CompilerOptions, ., LanguageMode]
[CompilerOptions]
[config, ., languageIn]
[config]
[languageMode, !=, null]
[languageMode]
[null]
[options, ., setLanguageIn, (, languageMode, )]
[options]
[languageMode]
[new, FlagUsageException, (, "Unknown language `", +, config, ., languageIn, +, "' specified.", )]
["Unknown language `", +, config, ., languageIn, +, "' specified."]
["Unknown language `", +, config, ., languageIn]
["Unknown language `"]
[config, ., languageIn]
[config]
["' specified."]
[!, config, ., outputManifests, ., isEmpty, (, )]
[config, ., outputManifests, ., isEmpty, (, )]
[config, ., outputManifests]
[config]
[Sets, ., newHashSet, (, )]
[Sets]
[config, ., outputManifests]
[config]
[!, uniqueNames, ., add, (, filename, )]
[uniqueNames, ., add, (, filename, )]
[uniqueNames]
[filename]
[new, FlagUsageException, (, "output_manifest flags specify ", +, "duplicate file names: ", +, filename, )]
["output_manifest flags specify ", +, "duplicate file names: ", +, filename]
["output_manifest flags specify ", +, "duplicate file names: "]
["output_manifest flags specify "]
["duplicate file names: "]
[filename]
[!, config, ., outputBundles, ., isEmpty, (, )]
[config, ., outputBundles, ., isEmpty, (, )]
[config, ., outputBundles]
[config]
[Sets, ., newHashSet, (, )]
[Sets]
[config, ., outputBundles]
[config]
[!, uniqueNames, ., add, (, filename, )]
[uniqueNames, ., add, (, filename, )]
[uniqueNames]
[filename]
[new, FlagUsageException, (, "output_bundle flags specify ", +, "duplicate file names: ", +, filename, )]
["output_bundle flags specify ", +, "duplicate file names: ", +, filename]
["output_bundle flags specify ", +, "duplicate file names: "]
["output_bundle flags specify "]
["duplicate file names: "]
[filename]
[options, ., acceptConstKeyword]
[options]
[config, ., acceptConstKeyword]
[config]
[options, ., transformAMDToCJSModules]
[options]
[config, ., transformAMDToCJSModules]
[config]
[options, ., processCommonJSModules]
[options]
[config, ., processCommonJSModules]
[config]
[options, ., commonJSModulePathPrefix]
[options]
[config, ., commonJSModulePathPrefix]
[config]
[compiler]
[0]
[1]
[config, ., computePhaseOrdering]
[config]
[runs]
[NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER]
[PhaseOptimizer, ., randomizeLoops, (, )]
[PhaseOptimizer]
[0]
[i, <, runs, &&, result, ==, 0]
[i, <, runs]
[i]
[runs]
[result, ==, 0]
[result]
[0]
[i, ++]
[i]
[runTimeStats, ., recordStartRun, (, )]
[runTimeStats]
[result]
[doRun, (, )]
[runTimeStats, ., recordEndRun, (, )]
[runTimeStats]
[System, ., err, ., println, (, e, ., getMessage, (, ), )]
[System, ., err]
[System]
[e, ., getMessage, (, )]
[e]
[result]
[-, 1]
[1]
[t, ., printStackTrace, (, )]
[t]
[result]
[-, 2]
[2]
[config, ., computePhaseOrdering]
[config]
[runTimeStats, ., outputBestPhaseOrdering, (, )]
[runTimeStats]
[jsOutput, instanceof, Closeable]
[jsOutput]
[(, (, Closeable, ), jsOutput, ), ., close, (, )]
[(, (, Closeable, ), jsOutput, )]
[(, Closeable, ), jsOutput]
[jsOutput]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[testMode]
[exitCodeReceiverForTesting, ., apply, (, result, )]
[exitCodeReceiverForTesting]
[result]
[System, ., exit, (, result, )]
[System]
[result]
[err]
[1L]
[message]
[new, ArrayList, <, SourceFile, >, (, files, ., size, (, ), )]
[files, ., size, (, )]
[files]
[false]
[files]
[!, "-", ., equals, (, filename, )]
["-", ., equals, (, filename, )]
["-"]
[filename]
[SourceFile, ., fromFile, (, filename, ,, inputCharset, )]
[SourceFile]
[filename]
[inputCharset]
[inputs, ., add, (, newFile, )]
[inputs]
[newFile]
[!, allowStdIn]
[allowStdIn]
[new, FlagUsageException, (, "Can't specify stdin.", )]
["Can't specify stdin."]
[usingStdin]
[new, FlagUsageException, (, "Can't specify stdin twice.", )]
["Can't specify stdin twice."]
[!, config, ., outputManifests, ., isEmpty, (, )]
[config, ., outputManifests, ., isEmpty, (, )]
[config, ., outputManifests]
[config]
[new, FlagUsageException, (, "Manifest files cannot be generated ", +, "when the input is from stdin.", )]
["Manifest files cannot be generated ", +, "when the input is from stdin."]
["Manifest files cannot be generated "]
["when the input is from stdin."]
[!, config, ., outputBundles, ., isEmpty, (, )]
[config, ., outputBundles, ., isEmpty, (, )]
[config, ., outputBundles]
[config]
[new, FlagUsageException, (, "Bundle files cannot be generated ", +, "when the input is from stdin.", )]
["Bundle files cannot be generated ", +, "when the input is from stdin."]
["Bundle files cannot be generated "]
["when the input is from stdin."]
[inputs, ., add, (, SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, ), )]
[inputs]
[SourceFile, ., fromInputStream, (, "stdin", ,, System, ., in, )]
[SourceFile]
["stdin"]
[System, ., in]
[System]
[usingStdin]
[true]
[inputs]
[isInTestMode, (, )]
[inputsSupplierForTesting, ., get, (, )]
[inputsSupplierForTesting]
[files, ., isEmpty, (, )]
[files]
[files]
[Collections, ., singletonList, (, "-", )]
[Collections]
["-"]
[createInputs, (, files, ,, true, )]
[files]
[true]
[new, FlagUsageException, (, "Bad --js flag. ", +, e, ., getMessage, (, ), )]
["Bad --js flag. ", +, e, ., getMessage, (, )]
["Bad --js flag. "]
[e, ., getMessage, (, )]
[e]
[files, ., isEmpty, (, )]
[files]
[ImmutableList, ., of, (, SourceFile, ., fromCode, (, "/dev/null", ,, "", ), )]
[ImmutableList]
[SourceFile, ., fromCode, (, "/dev/null", ,, "", )]
[SourceFile]
["/dev/null"]
[""]
[createInputs, (, files, ,, false, )]
[files]
[false]
[new, FlagUsageException, (, "Bad --externs flag. ", +, e, ., getMessage, (, ), )]
["Bad --externs flag. ", +, e, ., getMessage, (, )]
["Bad --externs flag. "]
[e, ., getMessage, (, )]
[e]
[isInTestMode, (, )]
[modulesSupplierForTesting, ., get, (, )]
[modulesSupplierForTesting]
[Preconditions, ., checkState, (, specs, !=, null, )]
[Preconditions]
[specs, !=, null]
[specs]
[null]
[Preconditions, ., checkState, (, !, specs, ., isEmpty, (, ), )]
[Preconditions]
[!, specs, ., isEmpty, (, )]
[specs, ., isEmpty, (, )]
[specs]
[Preconditions, ., checkState, (, jsFiles, !=, null, )]
[Preconditions]
[jsFiles, !=, null]
[jsFiles]
[null]
[jsFiles, ., size, (, )]
[jsFiles]
[0]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[specs]
[spec, ., split, (, ":", )]
[spec]
[":"]
[parts, ., length, <, 2, ||, parts, ., length, >, 4]
[parts, ., length, <, 2]
[parts, ., length]
[parts]
[2]
[parts, ., length, >, 4]
[parts, ., length]
[parts]
[4]
[new, FlagUsageException, (, "Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec, )]
["Expected 2-4 colon-delimited parts in ", +, "module spec: ", +, spec]
["Expected 2-4 colon-delimited parts in ", +, "module spec: "]
["Expected 2-4 colon-delimited parts in "]
["module spec: "]
[spec]
[parts, [, 0, ]]
[parts]
[0]
[checkModuleName, (, name, )]
[name]
[modulesByName, ., containsKey, (, name, )]
[modulesByName]
[name]
[new, FlagUsageException, (, "Duplicate module name: ", +, name, )]
["Duplicate module name: ", +, name]
["Duplicate module name: "]
[name]
[new, JSModule, (, name, )]
[name]
[-, 1]
[1]
[numJsFiles]
[Integer, ., parseInt, (, parts, [, 1, ], )]
[Integer]
[parts, [, 1, ]]
[parts]
[1]
[numJsFiles]
[-, 1]
[1]
[numJsFiles, <, 0]
[numJsFiles]
[0]
[new, FlagUsageException, (, "Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name, )]
["Invalid JS file count '", +, parts, [, 1, ], +, "' for module: ", +, name]
["Invalid JS file count '", +, parts, [, 1, ], +, "' for module: "]
["Invalid JS file count '", +, parts, [, 1, ]]
["Invalid JS file count '"]
[parts, [, 1, ]]
[parts]
[1]
["' for module: "]
[name]
[nextJsFileIndex, +, numJsFiles, >, totalNumJsFiles]
[nextJsFileIndex, +, numJsFiles]
[nextJsFileIndex]
[numJsFiles]
[totalNumJsFiles]
[new, FlagUsageException, (, "Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name, )]
["Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:", +, name]
["Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, ), +, " more in module:"]
["Not enough JS files specified. Expected ", +, (, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, )]
["Not enough JS files specified. Expected "]
[(, nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles, )]
[nextJsFileIndex, +, numJsFiles, -, totalNumJsFiles]
[nextJsFileIndex, +, numJsFiles]
[nextJsFileIndex]
[numJsFiles]
[totalNumJsFiles]
[" more in module:"]
[name]
[jsFiles, ., subList, (, nextJsFileIndex, ,, nextJsFileIndex, +, numJsFiles, )]
[jsFiles]
[nextJsFileIndex]
[nextJsFileIndex, +, numJsFiles]
[nextJsFileIndex]
[numJsFiles]
[createInputs, (, moduleJsFiles, ,, false, )]
[moduleJsFiles]
[false]
[module, ., add, (, input, )]
[module]
[input]
[nextJsFileIndex]
[numJsFiles]
[parts, ., length, >, 2]
[parts, ., length]
[parts]
[2]
[parts, [, 2, ]]
[parts]
[2]
[depList, ., length, (, ), >, 0]
[depList, ., length, (, )]
[depList]
[0]
[depList, ., split, (, ",", )]
[depList]
[","]
[deps]
[modulesByName, ., get, (, dep, )]
[modulesByName]
[dep]
[other, ==, null]
[other]
[null]
[new, FlagUsageException, (, "Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order.", )]
["Module '", +, name, +, "' depends on unknown module '", +, dep, +, "'. Be sure to list modules in dependency order."]
["Module '", +, name, +, "' depends on unknown module '", +, dep]
["Module '", +, name, +, "' depends on unknown module '"]
["Module '", +, name]
["Module '"]
[name]
["' depends on unknown module '"]
[dep]
["'. Be sure to list modules in dependency order."]
[module, ., addDependency, (, other, )]
[module]
[other]
[modulesByName, ., put, (, name, ,, module, )]
[modulesByName]
[name]
[module]
[nextJsFileIndex, <, totalNumJsFiles]
[nextJsFileIndex]
[totalNumJsFiles]
[new, FlagUsageException, (, "Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles, )]
["Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found ", +, totalNumJsFiles]
["Too many JS files specified. Expected ", +, nextJsFileIndex, +, " but found "]
["Too many JS files specified. Expected ", +, nextJsFileIndex]
["Too many JS files specified. Expected "]
[nextJsFileIndex]
[" but found "]
[totalNumJsFiles]
[Lists, ., newArrayList, (, modulesByName, ., values, (, ), )]
[Lists]
[modulesByName, ., values, (, )]
[modulesByName]
[!, TokenStream, ., isJSIdentifier, (, name, )]
[TokenStream, ., isJSIdentifier, (, name, )]
[TokenStream]
[name]
[new, FlagUsageException, (, "Invalid module name: '", +, name, +, "'", )]
["Invalid module name: '", +, name, +, "'"]
["Invalid module name: '", +, name]
["Invalid module name: '"]
[name]
["'"]
[Preconditions, ., checkState, (, specs, !=, null, )]
[Preconditions]
[specs, !=, null]
[specs]
[null]
[Maps, ., newHashMapWithExpectedSize, (, modules, ., size, (, ), )]
[Maps]
[modules, ., size, (, )]
[modules]
[modules]
[wrappers, ., put, (, m, ., getName, (, ), ,, "", )]
[wrappers]
[m, ., getName, (, )]
[m]
[""]
[specs]
[spec, ., indexOf, (, ':', )]
[spec]
[':']
[pos, ==, -, 1]
[pos]
[-, 1]
[1]
[new, FlagUsageException, (, "Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec, )]
["Expected module wrapper to have ", +, "<name>:<wrapper> format: ", +, spec]
["Expected module wrapper to have ", +, "<name>:<wrapper> format: "]
["Expected module wrapper to have "]
["<name>:<wrapper> format: "]
[spec]
[spec, ., substring, (, 0, ,, pos, )]
[spec]
[0]
[pos]
[!, wrappers, ., containsKey, (, name, )]
[wrappers, ., containsKey, (, name, )]
[wrappers]
[name]
[new, FlagUsageException, (, "Unknown module: '", +, name, +, "'", )]
["Unknown module: '", +, name, +, "'"]
["Unknown module: '", +, name]
["Unknown module: '"]
[name]
["'"]
[spec, ., substring, (, pos, +, 1, )]
[spec]
[pos, +, 1]
[pos]
[1]
[!, wrapper, ., contains, (, "%s", )]
[wrapper, ., contains, (, "%s", )]
[wrapper]
["%s"]
[new, FlagUsageException, (, "No %s placeholder in module wrapper: '", +, wrapper, +, "'", )]
["No %s placeholder in module wrapper: '", +, wrapper, +, "'"]
["No %s placeholder in module wrapper: '", +, wrapper]
["No %s placeholder in module wrapper: '"]
[wrapper]
["'"]
[wrappers, ., put, (, name, ,, wrapper, )]
[wrappers]
[name]
[wrapper]
[wrappers]
[config, ., moduleOutputPathPrefix, +, m, ., getName, (, ), +, ".js"]
[config, ., moduleOutputPathPrefix, +, m, ., getName, (, )]
[config, ., moduleOutputPathPrefix]
[config]
[m, ., getName, (, )]
[m]
[".js"]
[parsedModuleWrappers, ==, null]
[parsedModuleWrappers]
[null]
[parsedModuleWrappers]
[parseModuleWrappers, (, config, ., moduleWrapper, ,, Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), ), )]
[config, ., moduleWrapper]
[config]
[Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), )]
[Lists]
[compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, )]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[getModuleOutputFileName, (, m, )]
[m]
[new, File, (, fileName, ), ., getName, (, )]
[new, File, (, fileName, )]
[fileName]
[writeOutput, (, out, ,, compiler, ,, compiler, ., toSource, (, m, ), ,, parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, ), ,, "%s", ,, null, )]
[out]
[compiler]
[compiler, ., toSource, (, m, )]
[compiler]
[m]
[parsedModuleWrappers, ., get, (, m, ., getName, (, ), ), ., replace, (, "%basename%", ,, baseName, )]
[parsedModuleWrappers, ., get, (, m, ., getName, (, ), )]
[parsedModuleWrappers]
[m, ., getName, (, )]
[m]
["%basename%"]
[baseName]
["%s"]
[null]
[wrapper, ., indexOf, (, codePlaceholder, )]
[wrapper]
[codePlaceholder]
[pos, !=, -, 1]
[pos]
[-, 1]
[1]
[""]
[pos, >, 0]
[pos]
[0]
[prefix]
[wrapper, ., substring, (, 0, ,, pos, )]
[wrapper]
[0]
[pos]
[out, ., append, (, prefix, )]
[out]
[prefix]
[out, ., append, (, escaper, ==, null, ?, code, :, escaper, ., apply, (, code, ), )]
[out]
[escaper, ==, null, ?, code, :, escaper, ., apply, (, code, )]
[escaper, ==, null]
[escaper]
[null]
[code]
[escaper, ., apply, (, code, )]
[escaper]
[code]
[pos, +, codePlaceholder, ., length, (, )]
[pos]
[codePlaceholder, ., length, (, )]
[codePlaceholder]
[suffixStart, !=, wrapper, ., length, (, )]
[suffixStart]
[wrapper, ., length, (, )]
[wrapper]
[out, ., append, (, wrapper, ., substring, (, suffixStart, ), )]
[out]
[wrapper, ., substring, (, suffixStart, )]
[wrapper]
[suffixStart]
[out, ., append, (, '\n', )]
[out]
['\n']
[compiler, !=, null, &&, compiler, ., getSourceMap, (, ), !=, null]
[compiler, !=, null]
[compiler]
[null]
[compiler, ., getSourceMap, (, ), !=, null]
[compiler, ., getSourceMap, (, )]
[compiler]
[null]
[compiler, ., getSourceMap, (, ), ., setWrapperPrefix, (, prefix, )]
[compiler, ., getSourceMap, (, )]
[compiler]
[prefix]
[out, ., append, (, code, )]
[out]
[code]
[out, ., append, (, '\n', )]
[out]
['\n']
[pathPrefix, ., length, (, ), >, 0]
[pathPrefix, ., length, (, )]
[pathPrefix]
[0]
[pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar, ?, pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, ), :, new, File, (, pathPrefix, ), ., getParent, (, )]
[pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, ), ==, File, ., separatorChar]
[pathPrefix, ., charAt, (, pathPrefix, ., length, (, ), -, 1, )]
[pathPrefix]
[pathPrefix, ., length, (, ), -, 1]
[pathPrefix, ., length, (, )]
[pathPrefix]
[1]
[File, ., separatorChar]
[File]
[pathPrefix, ., substring, (, 0, ,, pathPrefix, ., length, (, ), -, 1, )]
[pathPrefix]
[0]
[pathPrefix, ., length, (, ), -, 1]
[pathPrefix, ., length, (, )]
[pathPrefix]
[1]
[new, File, (, pathPrefix, ), ., getParent, (, )]
[new, File, (, pathPrefix, )]
[pathPrefix]
[dirName, !=, null]
[dirName]
[null]
[new, File, (, dirName, ), ., mkdirs, (, )]
[new, File, (, dirName, )]
[dirName]
[Compiler, ., setLoggingLevel, (, Level, ., parse, (, config, ., loggingLevel, ), )]
[Compiler]
[Level, ., parse, (, config, ., loggingLevel, )]
[Level]
[config, ., loggingLevel]
[config]
[createExterns, (, )]
[compiler]
[createCompiler, (, )]
[createOptions, (, )]
[null]
[null]
[setRunOptions, (, options, )]
[options]
[!, config, ., jsOutputFile, ., isEmpty, (, )]
[config, ., jsOutputFile, ., isEmpty, (, )]
[config, ., jsOutputFile]
[config]
[Lists, ., newArrayList, (, )]
[Lists]
[writeOutputToFile]
[outputFileNames, ., add, (, config, ., jsOutputFile, )]
[outputFileNames]
[config, ., jsOutputFile]
[config]
[jsOutput]
[fileNameToLegacyOutputWriter, (, config, ., jsOutputFile, )]
[config, ., jsOutputFile]
[config]
[jsOutput, instanceof, OutputStream]
[jsOutput]
[jsOutput]
[streamToLegacyOutputWriter, (, (, OutputStream, ), jsOutput, )]
[(, OutputStream, ), jsOutput]
[jsOutput]
[config, ., js]
[config]
[config, ., module]
[config]
[false]
[options, ., processCommonJSModules]
[options]
[moduleSpecs, ., size, (, ), ==, 1, &&, "auto", ., equals, (, moduleSpecs, ., get, (, 0, ), )]
[moduleSpecs, ., size, (, ), ==, 1]
[moduleSpecs, ., size, (, )]
[moduleSpecs]
[1]
["auto", ., equals, (, moduleSpecs, ., get, (, 0, ), )]
["auto"]
[moduleSpecs, ., get, (, 0, )]
[moduleSpecs]
[0]
[createCommonJsModules]
[true]
[moduleSpecs, ., remove, (, 0, )]
[moduleSpecs]
[0]
[!, moduleSpecs, ., isEmpty, (, )]
[moduleSpecs, ., isEmpty, (, )]
[moduleSpecs]
[modules]
[createJsModules, (, moduleSpecs, ,, jsFiles, )]
[moduleSpecs]
[jsFiles]
[modules]
[outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), )]
[outputFileNames]
[getModuleOutputFileName, (, m, )]
[m]
[config, ., skipNormalOutputs]
[config]
[compiler, ., initModules, (, externs, ,, modules, ,, options, )]
[compiler]
[externs]
[modules]
[options]
[result]
[compiler, ., compileModules, (, externs, ,, modules, ,, options, )]
[compiler]
[externs]
[modules]
[options]
[createSourceInputs, (, jsFiles, )]
[jsFiles]
[config, ., skipNormalOutputs]
[config]
[compiler, ., init, (, externs, ,, inputs, ,, options, )]
[compiler]
[externs]
[inputs]
[options]
[result]
[compiler, ., compile, (, externs, ,, inputs, ,, options, )]
[compiler]
[externs]
[inputs]
[options]
[createCommonJsModules]
[modules]
[Lists, ., newArrayList, (, compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, ), )]
[Lists]
[compiler, ., getDegenerateModuleGraph, (, ), ., getAllModules, (, )]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[modules]
[outputFileNames, ., add, (, getModuleOutputFileName, (, m, ), )]
[outputFileNames]
[getModuleOutputFileName, (, m, )]
[m]
[outputFileNames]
[compiler, ., getSourceFileByName, (, outputFileName, ), !=, null]
[compiler, ., getSourceFileByName, (, outputFileName, )]
[compiler]
[outputFileName]
[null]
[compiler, ., report, (, JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, ), )]
[compiler]
[JSError, ., make, (, OUTPUT_SAME_AS_INPUT_ERROR, ,, outputFileName, )]
[JSError]
[OUTPUT_SAME_AS_INPUT_ERROR]
[outputFileName]
[1]
[processResults, (, result, ,, modules, ,, options, )]
[result]
[modules]
[options]
[jsOutput, instanceof, Flushable]
[jsOutput]
[(, (, Flushable, ), jsOutput, ), ., flush, (, )]
[(, (, Flushable, ), jsOutput, )]
[(, Flushable, ), jsOutput]
[jsOutput]
[errCode]
[config, ., computePhaseOrdering]
[config]
[0]
[config, ., printPassGraph]
[config]
[compiler, ., getRoot, (, ), ==, null]
[compiler, ., getRoot, (, )]
[compiler]
[null]
[1]
[jsOutput, ., append, (, DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), ), )]
[jsOutput]
[DotFormatter, ., toDot, (, compiler, ., getPassConfig, (, ), ., getPassGraph, (, ), )]
[DotFormatter]
[compiler, ., getPassConfig, (, ), ., getPassGraph, (, )]
[compiler, ., getPassConfig, (, )]
[compiler]
[jsOutput, ., append, (, '\n', )]
[jsOutput]
['\n']
[0]
[config, ., printAst]
[config]
[compiler, ., getRoot, (, ), ==, null]
[compiler, ., getRoot, (, )]
[compiler]
[null]
[1]
[compiler, ., computeCFG, (, )]
[compiler]
[DotFormatter, ., appendDot, (, compiler, ., getRoot, (, ), ., getLastChild, (, ), ,, cfg, ,, jsOutput, )]
[DotFormatter]
[compiler, ., getRoot, (, ), ., getLastChild, (, )]
[compiler, ., getRoot, (, )]
[compiler]
[cfg]
[jsOutput]
[jsOutput, ., append, (, '\n', )]
[jsOutput]
['\n']
[0]
[config, ., printTree]
[config]
[compiler, ., getRoot, (, ), ==, null]
[compiler, ., getRoot, (, )]
[compiler]
[null]
[jsOutput, ., append, (, "Code contains errors; no tree was generated.\n", )]
[jsOutput]
["Code contains errors; no tree was generated.\n"]
[1]
[compiler, ., getRoot, (, ), ., appendStringTree, (, jsOutput, )]
[compiler, ., getRoot, (, )]
[compiler]
[jsOutput]
[jsOutput, ., append, (, "\n", )]
[jsOutput]
["\n"]
[0]
[rootRelativePathsMap]
[constructRootRelativePathsMap, (, )]
[config, ., skipNormalOutputs]
[config]
[outputManifest, (, )]
[outputBundle, (, )]
[outputModuleGraphJson, (, )]
[0]
[result, ., success]
[result]
[outputModuleGraphJson, (, )]
[modules, ==, null]
[modules]
[null]
[outputSingleBinary, (, )]
[outputSourceMap, (, options, ,, config, ., jsOutputFile, )]
[options]
[config, ., jsOutputFile]
[config]
[outputModuleBinaryAndSourceMaps, (, modules, ,, options, )]
[modules]
[options]
[options, ., externExportsPath, !=, null]
[options, ., externExportsPath]
[options]
[null]
[openExternExportsStream, (, options, ,, config, ., jsOutputFile, )]
[options]
[config, ., jsOutputFile]
[config]
[eeOut, ., append, (, result, ., externExport, )]
[eeOut]
[result, ., externExport]
[result]
[eeOut, ., close, (, )]
[eeOut]
[outputNameMaps, (, options, )]
[options]
[outputManifest, (, )]
[outputBundle, (, )]
[Math, ., min, (, result, ., errors, ., length, ,, 0x7f, )]
[Math]
[result, ., errors, ., length]
[result, ., errors]
[result]
[0x7f]
[new, UnsupportedOperationException, (, "SourceCodeEscapers is not in the standard release of Guava yet :(", )]
["SourceCodeEscapers is not in the standard release of Guava yet :("]
[null]
[OUTPUT_MARKER]
[config, ., outputWrapper, ., contains, (, OUTPUT_MARKER_JS_STRING, )]
[config, ., outputWrapper]
[config]
[OUTPUT_MARKER_JS_STRING]
[marker]
[OUTPUT_MARKER_JS_STRING]
[escaper]
[getJavascriptEscaper, (, )]
[writeOutput, (, jsOutput, ,, compiler, ,, compiler, ., toSource, (, ), ,, config, ., outputWrapper, ,, marker, ,, escaper, )]
[jsOutput]
[compiler]
[compiler, ., toSource, (, )]
[compiler]
[config, ., outputWrapper]
[config]
[marker]
[escaper]
[parsedModuleWrappers]
[parseModuleWrappers, (, config, ., moduleWrapper, ,, modules, )]
[config, ., moduleWrapper]
[config]
[modules]
[maybeCreateDirsForPath, (, config, ., moduleOutputPathPrefix, )]
[config, ., moduleOutputPathPrefix]
[config]
[null]
[!, shouldGenerateMapPerModule, (, options, )]
[shouldGenerateMapPerModule, (, options, )]
[options]
[mapOut]
[fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, null, ), )]
[expandSourceMapPath, (, options, ,, null, )]
[options]
[null]
[modules]
[shouldGenerateMapPerModule, (, options, )]
[options]
[mapOut]
[fileNameToOutputWriter2, (, expandSourceMapPath, (, options, ,, m, ), )]
[expandSourceMapPath, (, options, ,, m, )]
[options]
[m]
[fileNameToLegacyOutputWriter, (, getModuleOutputFileName, (, m, ), )]
[getModuleOutputFileName, (, m, )]
[m]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[compiler, ., getSourceMap, (, ), ., reset, (, )]
[compiler, ., getSourceMap, (, )]
[compiler]
[writeModuleOutput, (, writer, ,, m, )]
[writer]
[m]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[compiler, ., getSourceMap, (, ), ., appendTo, (, mapOut, ,, m, ., getName, (, ), )]
[compiler, ., getSourceMap, (, )]
[compiler]
[mapOut]
[m, ., getName, (, )]
[m]
[writer, ., close, (, )]
[writer]
[shouldGenerateMapPerModule, (, options, ), &&, mapOut, !=, null]
[shouldGenerateMapPerModule, (, options, )]
[options]
[mapOut, !=, null]
[mapOut]
[null]
[mapOut, ., close, (, )]
[mapOut]
[mapOut]
[null]
[mapOut, !=, null]
[mapOut]
[null]
[mapOut, ., close, (, )]
[mapOut]
[!, config, ., charset, ., isEmpty, (, )]
[config, ., charset, ., isEmpty, (, )]
[config, ., charset]
[config]
[!, Charset, ., isSupported, (, config, ., charset, )]
[Charset, ., isSupported, (, config, ., charset, )]
[Charset]
[config, ., charset]
[config]
[new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", )]
[config, ., charset, +, " is not a valid charset name."]
[config, ., charset]
[config]
[" is not a valid charset name."]
[Charset, ., forName, (, config, ., charset, )]
[Charset]
[config, ., charset]
[config]
[Charsets, ., UTF_8]
[Charsets]
[!, config, ., charset, ., isEmpty, (, )]
[config, ., charset, ., isEmpty, (, )]
[config, ., charset]
[config]
[!, Charset, ., isSupported, (, config, ., charset, )]
[Charset, ., isSupported, (, config, ., charset, )]
[Charset]
[config, ., charset]
[config]
[new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", )]
[config, ., charset, +, " is not a valid charset name."]
[config, ., charset]
[config]
[" is not a valid charset name."]
[config, ., charset]
[config]
["US-ASCII"]
[!, config, ., charset, ., isEmpty, (, )]
[config, ., charset, ., isEmpty, (, )]
[config, ., charset]
[config]
[!, Charset, ., isSupported, (, config, ., charset, )]
[Charset, ., isSupported, (, config, ., charset, )]
[Charset]
[config, ., charset]
[config]
[new, FlagUsageException, (, config, ., charset, +, " is not a valid charset name.", )]
[config, ., charset, +, " is not a valid charset name."]
[config, ., charset]
[config]
[" is not a valid charset name."]
[Charset, ., forName, (, config, ., charset, )]
[Charset]
[config, ., charset]
[config]
[Charsets, ., UTF_8]
[Charsets]
[isInTestMode, (, ), ?, externsSupplierForTesting, ., get, (, ), :, createExternInputs, (, config, ., externs, )]
[isInTestMode, (, )]
[externsSupplierForTesting, ., get, (, )]
[externsSupplierForTesting]
[createExternInputs, (, config, ., externs, )]
[config, ., externs]
[config]
[options, ., sourceMapOutputPath, !=, null, &&, options, ., sourceMapOutputPath, ., contains, (, "%outname%", )]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[options, ., sourceMapOutputPath, ., contains, (, "%outname%", )]
[options, ., sourceMapOutputPath]
[options]
["%outname%"]
[options, ., externExportsPath, ==, null]
[options, ., externExportsPath]
[options]
[null]
[null]
[options, ., externExportsPath]
[options]
[!, exPath, ., contains, (, File, ., separator, )]
[exPath, ., contains, (, File, ., separator, )]
[exPath]
[File, ., separator]
[File]
[new, File, (, path, )]
[path]
[exPath]
[outputFile, ., getParent, (, ), +, File, ., separatorChar, +, exPath]
[outputFile, ., getParent, (, ), +, File, ., separatorChar]
[outputFile, ., getParent, (, )]
[outputFile]
[File, ., separatorChar]
[File]
[exPath]
[fileNameToOutputWriter2, (, exPath, )]
[exPath]
[forModule, !=, null]
[forModule]
[null]
[sub]
[config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, ), +, ".js"]
[config, ., moduleOutputPathPrefix, +, forModule, ., getName, (, )]
[config, ., moduleOutputPathPrefix]
[config]
[forModule, ., getName, (, )]
[forModule]
[".js"]
[!, config, ., module, ., isEmpty, (, )]
[config, ., module, ., isEmpty, (, )]
[config, ., module]
[config]
[sub]
[config, ., moduleOutputPathPrefix]
[config]
[sub]
[config, ., jsOutputFile]
[config]
[path, ., replace, (, "%outname%", ,, sub, )]
[path]
["%outname%"]
[sub]
[Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, )]
[Strings]
[options, ., sourceMapOutputPath]
[options]
[null]
[expandCommandLinePath, (, options, ., sourceMapOutputPath, ,, forModule, )]
[options, ., sourceMapOutputPath]
[options]
[forModule]
[fileName, ==, null]
[fileName]
[null]
[null]
[testMode]
[new, StringWriter, (, )]
[streamToLegacyOutputWriter, (, filenameToOutputStream, (, fileName, ), )]
[filenameToOutputStream, (, fileName, )]
[fileName]
[fileName, ==, null]
[fileName]
[null]
[null]
[testMode]
[new, StringWriter, (, )]
[streamToOutputWriter2, (, filenameToOutputStream, (, fileName, ), )]
[filenameToOutputStream, (, fileName, )]
[fileName]
[fileName, ==, null]
[fileName]
[null]
[null]
[new, FileOutputStream, (, fileName, )]
[fileName]
[legacyOutputCharset, ==, null]
[legacyOutputCharset]
[null]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), )]
[new, OutputStreamWriter, (, stream, )]
[stream]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, legacyOutputCharset, ), )]
[new, OutputStreamWriter, (, stream, ,, legacyOutputCharset, )]
[stream]
[legacyOutputCharset]
[outputCharset2, ==, null]
[outputCharset2]
[null]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ), )]
[new, OutputStreamWriter, (, stream, )]
[stream]
[new, BufferedWriter, (, new, OutputStreamWriter, (, stream, ,, outputCharset2, ), )]
[new, OutputStreamWriter, (, stream, ,, outputCharset2, )]
[stream]
[outputCharset2]
[Strings, ., isNullOrEmpty, (, options, ., sourceMapOutputPath, )]
[Strings]
[options, ., sourceMapOutputPath]
[options]
[expandSourceMapPath, (, options, ,, null, )]
[options]
[null]
[fileNameToOutputWriter2, (, outName, )]
[outName]
[compiler, ., getSourceMap, (, ), ., appendTo, (, out, ,, associatedName, )]
[compiler, ., getSourceMap, (, )]
[compiler]
[out]
[associatedName]
[out, ., close, (, )]
[out]
[""]
[outputFile, ., equals, (, "", )]
[outputFile]
[""]
[!, config, ., moduleOutputPathPrefix, ., equals, (, "", )]
[config, ., moduleOutputPathPrefix, ., equals, (, "", )]
[config, ., moduleOutputPathPrefix]
[config]
[""]
[basePath]
[config, ., moduleOutputPathPrefix]
[config]
[basePath]
["jscompiler"]
[new, File, (, outputFile, )]
[outputFile]
[file, ., getName, (, )]
[file]
[outputFileName, ., endsWith, (, ".js", )]
[outputFileName]
[".js"]
[outputFileName]
[outputFileName, ., substring, (, 0, ,, outputFileName, ., length, (, ), -, 3, )]
[outputFileName]
[0]
[outputFileName, ., length, (, ), -, 3]
[outputFileName, ., length, (, )]
[outputFileName]
[3]
[basePath]
[file, ., getParent, (, ), +, File, ., separatorChar, +, outputFileName]
[file, ., getParent, (, ), +, File, ., separatorChar]
[file, ., getParent, (, )]
[file]
[File, ., separatorChar]
[File]
[outputFileName]
[basePath]
[null]
[null]
[null]
[config, ., createNameMapFiles]
[config]
[getMapPath, (, config, ., jsOutputFile, )]
[config, ., jsOutputFile]
[config]
[propertyMapOutputPath]
[basePath, +, "_props_map.out"]
[basePath]
["_props_map.out"]
[variableMapOutputPath]
[basePath, +, "_vars_map.out"]
[basePath]
["_vars_map.out"]
[functionInformationMapOutputPath]
[basePath, +, "_functions_map.out"]
[basePath]
["_functions_map.out"]
[!, config, ., variableMapOutputFile, ., equals, (, "", )]
[config, ., variableMapOutputFile, ., equals, (, "", )]
[config, ., variableMapOutputFile]
[config]
[""]
[variableMapOutputPath, !=, null]
[variableMapOutputPath]
[null]
[new, FlagUsageException, (, "The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", )]
["The flags variable_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously."]
["The flags variable_map_output_file and "]
["create_name_map_files cannot both be used simultaniously."]
[variableMapOutputPath]
[config, ., variableMapOutputFile]
[config]
[!, config, ., propertyMapOutputFile, ., equals, (, "", )]
[config, ., propertyMapOutputFile, ., equals, (, "", )]
[config, ., propertyMapOutputFile]
[config]
[""]
[propertyMapOutputPath, !=, null]
[propertyMapOutputPath]
[null]
[new, FlagUsageException, (, "The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously.", )]
["The flags property_map_output_file and ", +, "create_name_map_files cannot both be used simultaniously."]
["The flags property_map_output_file and "]
["create_name_map_files cannot both be used simultaniously."]
[propertyMapOutputPath]
[config, ., propertyMapOutputFile]
[config]
[variableMapOutputPath, !=, null]
[variableMapOutputPath]
[null]
[compiler, ., getVariableMap, (, ), !=, null]
[compiler, ., getVariableMap, (, )]
[compiler]
[null]
[compiler, ., getVariableMap, (, ), ., save, (, variableMapOutputPath, )]
[compiler, ., getVariableMap, (, )]
[compiler]
[variableMapOutputPath]
[propertyMapOutputPath, !=, null]
[propertyMapOutputPath]
[null]
[compiler, ., getPropertyMap, (, ), !=, null]
[compiler, ., getPropertyMap, (, )]
[compiler]
[null]
[compiler, ., getPropertyMap, (, ), ., save, (, propertyMapOutputPath, )]
[compiler, ., getPropertyMap, (, )]
[compiler]
[propertyMapOutputPath]
[functionInformationMapOutputPath, !=, null]
[functionInformationMapOutputPath]
[null]
[compiler, ., getFunctionalInformationMap, (, ), !=, null]
[compiler, ., getFunctionalInformationMap, (, )]
[compiler]
[null]
[filenameToOutputStream, (, functionInformationMapOutputPath, )]
[functionInformationMapOutputPath]
[CodedOutputStream, ., newInstance, (, file, )]
[CodedOutputStream]
[file]
[compiler, ., getFunctionalInformationMap, (, ), ., writeTo, (, outputStream, )]
[compiler, ., getFunctionalInformationMap, (, )]
[compiler]
[outputStream]
[outputStream, ., flush, (, )]
[outputStream]
[file, ., flush, (, )]
[file]
[file, ., close, (, )]
[file]
[definitions]
[override, ., split, (, "=", ,, 2, )]
[override]
["="]
[2]
[assignment, [, 0, ]]
[assignment]
[0]
[defName, ., length, (, ), >, 0]
[defName, ., length, (, )]
[defName]
[0]
[assignment, ., length, ==, 1, ?, "true", :, assignment, [, 1, ]]
[assignment, ., length, ==, 1]
[assignment, ., length]
[assignment]
[1]
["true"]
[assignment, [, 1, ]]
[assignment]
[1]
[defValue, ., equals, (, "true", )]
[defValue]
["true"]
[defValue, ., equals, (, "false", )]
[defValue]
["false"]
[isTrue, ||, isFalse]
[isTrue]
[isFalse]
[tweaks]
[options, ., setTweakToBooleanLiteral, (, defName, ,, isTrue, )]
[options]
[defName]
[isTrue]
[options, ., setDefineToBooleanLiteral, (, defName, ,, isTrue, )]
[options]
[defName]
[isTrue]
[defValue, ., length, (, ), >, 1, &&, (, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), )]
[defValue, ., length, (, ), >, 1]
[defValue, ., length, (, )]
[defValue]
[1]
[(, (, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', ), )]
[(, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', ), ||, (, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', )]
[(, defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'', )]
[defValue, ., charAt, (, 0, ), ==, '\'', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'']
[defValue, ., charAt, (, 0, ), ==, '\'']
[defValue, ., charAt, (, 0, )]
[defValue]
[0]
['\'']
[defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\'']
[defValue, ., charAt, (, defValue, ., length, (, ), -, 1, )]
[defValue]
[defValue, ., length, (, ), -, 1]
[defValue, ., length, (, )]
[defValue]
[1]
['\'']
[(, defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"', )]
[defValue, ., charAt, (, 0, ), ==, '\"', &&, defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"']
[defValue, ., charAt, (, 0, ), ==, '\"']
[defValue, ., charAt, (, 0, )]
[defValue]
[0]
['\"']
[defValue, ., charAt, (, defValue, ., length, (, ), -, 1, ), ==, '\"']
[defValue, ., charAt, (, defValue, ., length, (, ), -, 1, )]
[defValue]
[defValue, ., length, (, ), -, 1]
[defValue, ., length, (, )]
[defValue]
[1]
['\"']
[defValue, ., substring, (, 1, ,, defValue, ., length, (, ), -, 1, )]
[defValue]
[1]
[defValue, ., length, (, ), -, 1]
[defValue, ., length, (, )]
[defValue]
[1]
[maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), ), ==, -, 1]
[maybeStringVal, ., indexOf, (, defValue, ., charAt, (, 0, ), )]
[maybeStringVal]
[defValue, ., charAt, (, 0, )]
[defValue]
[0]
[-, 1]
[1]
[tweaks]
[options, ., setTweakToStringLiteral, (, defName, ,, maybeStringVal, )]
[options]
[defName]
[maybeStringVal]
[options, ., setDefineToStringLiteral, (, defName, ,, maybeStringVal, )]
[options]
[defName]
[maybeStringVal]
[Double, ., parseDouble, (, defValue, )]
[Double]
[defValue]
[tweaks]
[options, ., setTweakToDoubleLiteral, (, defName, ,, value, )]
[options]
[defName]
[value]
[options, ., setDefineToDoubleLiteral, (, defName, ,, value, )]
[options]
[defName]
[value]
[tweaks]
[new, RuntimeException, (, "--tweak flag syntax invalid: ", +, override, )]
["--tweak flag syntax invalid: ", +, override]
["--tweak flag syntax invalid: "]
[override]
[new, RuntimeException, (, "--define flag syntax invalid: ", +, override, )]
["--define flag syntax invalid: ", +, override]
["--define flag syntax invalid: "]
[override]
[!, config, ., module, ., isEmpty, (, ), &&, output, !=, null, &&, output, ., contains, (, "%outname%", )]
[!, config, ., module, ., isEmpty, (, ), &&, output, !=, null]
[!, config, ., module, ., isEmpty, (, )]
[config, ., module, ., isEmpty, (, )]
[config, ., module]
[config]
[output, !=, null]
[output]
[null]
[output, ., contains, (, "%outname%", )]
[output]
["%outname%"]
[outputManifestOrBundle, (, config, ., outputManifests, ,, true, )]
[config, ., outputManifests]
[config]
[true]
[outputManifestOrBundle, (, config, ., outputBundles, ,, false, )]
[config, ., outputBundles]
[config]
[false]
[outputFiles, ., isEmpty, (, )]
[outputFiles]
[outputFiles]
[output, ., isEmpty, (, )]
[output]
[shouldGenerateOutputPerModule, (, output, )]
[output]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[graph, ., getAllModules, (, )]
[graph]
[modules]
[fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, module, ), )]
[expandCommandLinePath, (, output, ,, module, )]
[output]
[module]
[isManifest]
[printManifestTo, (, module, ., getInputs, (, ), ,, out, )]
[module, ., getInputs, (, )]
[module]
[out]
[printBundleTo, (, module, ., getInputs, (, ), ,, out, )]
[module, ., getInputs, (, )]
[module]
[out]
[out, ., close, (, )]
[out]
[fileNameToOutputWriter2, (, expandCommandLinePath, (, output, ,, null, ), )]
[expandCommandLinePath, (, output, ,, null, )]
[output]
[null]
[config, ., module, ., isEmpty, (, )]
[config, ., module]
[config]
[isManifest]
[printManifestTo, (, compiler, ., getInputsInOrder, (, ), ,, out, )]
[compiler, ., getInputsInOrder, (, )]
[compiler]
[out]
[printBundleTo, (, compiler, ., getInputsInOrder, (, ), ,, out, )]
[compiler, ., getInputsInOrder, (, )]
[compiler]
[out]
[printModuleGraphManifestOrBundleTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, ,, isManifest, )]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[out]
[isManifest]
[out, ., close, (, )]
[out]
[config, ., outputModuleDependencies, !=, null, &&, config, ., outputModuleDependencies, !=, ""]
[config, ., outputModuleDependencies, !=, null]
[config, ., outputModuleDependencies]
[config]
[null]
[config, ., outputModuleDependencies, !=, ""]
[config, ., outputModuleDependencies]
[config]
[""]
[fileNameToOutputWriter2, (, config, ., outputModuleDependencies, )]
[config, ., outputModuleDependencies]
[config]
[printModuleGraphJsonTo, (, compiler, ., getDegenerateModuleGraph, (, ), ,, out, )]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[out]
[out, ., close, (, )]
[out]
[out, ., append, (, compiler, ., getDegenerateModuleGraph, (, ), ., toJson, (, ), ., toString, (, ), )]
[out]
[compiler, ., getDegenerateModuleGraph, (, ), ., toJson, (, ), ., toString, (, )]
[compiler, ., getDegenerateModuleGraph, (, ), ., toJson, (, )]
[compiler, ., getDegenerateModuleGraph, (, )]
[compiler]
[Joiner, ., on, (, ",", )]
[Joiner]
[","]
[false]
[graph, ., getAllModules, (, )]
[graph]
[requiresNewline]
[out, ., append, (, "\n", )]
[out]
["\n"]
[isManifest]
[commas, ., join, (, module, ., getSortedDependencyNames, (, ), )]
[commas]
[module, ., getSortedDependencyNames, (, )]
[module]
[out, ., append, (, String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, ), )]
[out]
[String, ., format, (, "{%s%s}\n", ,, module, ., getName, (, ), ,, dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies, )]
[String]
["{%s%s}\n"]
[module, ., getName, (, )]
[module]
[dependencies, ., isEmpty, (, ), ?, "", :, ":", +, dependencies]
[dependencies, ., isEmpty, (, )]
[dependencies]
[""]
[":", +, dependencies]
[":"]
[dependencies]
[printManifestTo, (, module, ., getInputs, (, ), ,, out, )]
[module, ., getInputs, (, )]
[module]
[out]
[printBundleTo, (, module, ., getInputs, (, ), ,, out, )]
[module, ., getInputs, (, )]
[module]
[out]
[requiresNewline]
[true]
[inputs]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), )]
[rootRelativePathsMap]
[input, ., getName, (, )]
[input]
[rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, )]
[rootRelativePath, !=, null]
[rootRelativePath]
[null]
[rootRelativePath]
[input, ., getName, (, )]
[input]
[out, ., append, (, displayName, )]
[out]
[displayName]
[out, ., append, (, "\n", )]
[out]
["\n"]
[inputs]
[input, ., getName, (, ), ., equals, (, Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, ), )]
[input, ., getName, (, )]
[input]
[Compiler, ., createFillFileName, (, Compiler, ., SINGLETON_MODULE_NAME, )]
[Compiler]
[Compiler, ., SINGLETON_MODULE_NAME]
[Compiler]
[Preconditions, ., checkState, (, 1, ==, Iterables, ., size, (, inputs, ), )]
[Preconditions]
[1, ==, Iterables, ., size, (, inputs, )]
[1]
[Iterables, ., size, (, inputs, )]
[Iterables]
[inputs]
[rootRelativePathsMap, ., get, (, input, ., getName, (, ), )]
[rootRelativePathsMap]
[input, ., getName, (, )]
[input]
[rootRelativePath, !=, null, ?, rootRelativePath, :, input, ., getName, (, )]
[rootRelativePath, !=, null]
[rootRelativePath]
[null]
[rootRelativePath]
[input, ., getName, (, )]
[input]
[new, File, (, input, ., getName, (, ), )]
[input, ., getName, (, )]
[input]
[out, ., append, (, "//", )]
[out]
["//"]
[out, ., append, (, displayName, )]
[out]
[displayName]
[out, ., append, (, "\n", )]
[out]
["\n"]
[Files, ., copy, (, file, ,, inputCharset, ,, out, )]
[Files]
[file]
[inputCharset]
[out]
[out, ., append, (, "\n", )]
[out]
["\n"]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[config, ., manifestMaps]
[config]
[mapString, ., indexOf, (, ':', )]
[mapString]
[':']
[Preconditions, ., checkState, (, colonIndex, >, 0, )]
[Preconditions]
[colonIndex, >, 0]
[colonIndex]
[0]
[mapString, ., substring, (, 0, ,, colonIndex, )]
[mapString]
[0]
[colonIndex]
[mapString, ., substring, (, colonIndex, +, 1, )]
[mapString]
[colonIndex, +, 1]
[colonIndex]
[1]
[Preconditions, ., checkState, (, rootRelativePath, ., indexOf, (, ':', ), ==, -, 1, )]
[Preconditions]
[rootRelativePath, ., indexOf, (, ':', ), ==, -, 1]
[rootRelativePath, ., indexOf, (, ':', )]
[rootRelativePath]
[':']
[-, 1]
[1]
[rootRelativePathsMap, ., put, (, execPath, ,, rootRelativePath, )]
[rootRelativePathsMap]
[execPath]
[rootRelativePath]
[rootRelativePathsMap]
[Long, ., MAX_VALUE]
[Long]
[Long, ., MIN_VALUE]
[Long]
[0]
[null]
[lastStartTime]
[System, ., currentTimeMillis, (, )]
[System]
[PhaseOptimizer, ., clearLoopsRun, (, )]
[PhaseOptimizer]
[System, ., currentTimeMillis, (, )]
[System]
[endTime, -, lastStartTime]
[endTime]
[lastStartTime]
[worstRunTime]
[Math, ., max, (, length, ,, worstRunTime, )]
[Math]
[length]
[worstRunTime]
[length, <, bestRunTime]
[length]
[bestRunTime]
[loopedPassesInBestRun]
[PhaseOptimizer, ., getLoopsRun, (, )]
[PhaseOptimizer]
[bestRunTime]
[length]
[jsOutput, ., append, (, "Best time: ", +, bestRunTime, +, "\n", )]
[jsOutput]
["Best time: ", +, bestRunTime, +, "\n"]
["Best time: ", +, bestRunTime]
["Best time: "]
[bestRunTime]
["\n"]
[jsOutput, ., append, (, "Worst time: ", +, worstRunTime, +, "\n", )]
[jsOutput]
["Worst time: ", +, worstRunTime, +, "\n"]
["Worst time: ", +, worstRunTime]
["Worst time: "]
[worstRunTime]
["\n"]
[1]
[loopedPassesInBestRun]
[jsOutput, ., append, (, "\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n", )]
[jsOutput]
["\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, ), +, "\n"]
["\nLoop ", +, i, +, ":\n", +, Joiner, ., on, (, "\n", ), ., join, (, loop, )]
["\nLoop ", +, i, +, ":\n"]
["\nLoop ", +, i]
["\nLoop "]
[i]
[":\n"]
[Joiner, ., on, (, "\n", ), ., join, (, loop, )]
[Joiner, ., on, (, "\n", )]
[Joiner]
["\n"]
[loop]
["\n"]
[i, ++]
[i]
[new, RuntimeException, (, "unexpected exception", ,, e, )]
["unexpected exception"]
[e]
[false]
[this, ., printTree]
[this]
[printTree]
[this]
[false]
[this, ., computePhaseOrdering]
[this]
[computePhaseOrdering]
[this]
[false]
[this, ., printAst]
[this]
[printAst]
[this]
[false]
[this, ., printPassGraph]
[this]
[printPassGraph]
[this]
[CompilerOptions, ., DevMode, ., OFF]
[CompilerOptions, ., DevMode]
[CompilerOptions]
[this, ., jscompDevMode]
[this]
[jscompDevMode]
[this]
[Level, ., WARNING, ., getName, (, )]
[Level, ., WARNING]
[Level]
[this, ., loggingLevel]
[this]
[loggingLevel]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., externs, ., clear, (, )]
[this, ., externs]
[this]
[this, ., externs, ., addAll, (, externs, )]
[this, ., externs]
[this]
[externs]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., js, ., clear, (, )]
[this, ., js]
[this]
[this, ., js, ., addAll, (, js, )]
[this, ., js]
[this]
[js]
[this]
[""]
[this, ., jsOutputFile]
[this]
[jsOutputFile]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., module, ., clear, (, )]
[this, ., module]
[this]
[this, ., module, ., addAll, (, module, )]
[this, ., module]
[this]
[module]
[this]
[""]
[this, ., variableMapInputFile]
[this]
[variableMapInputFile]
[this]
[""]
[this, ., propertyMapInputFile]
[this]
[propertyMapInputFile]
[this]
[""]
[this, ., variableMapOutputFile]
[this]
[variableMapOutputFile]
[this]
[false]
[this, ., createNameMapFiles]
[this]
[createNameMapFiles]
[this]
[""]
[this, ., propertyMapOutputFile]
[this]
[propertyMapOutputFile]
[this]
[CodingConventions, ., getDefault, (, )]
[CodingConventions]
[this, ., codingConvention]
[this]
[codingConvention]
[this]
[1]
[this, ., summaryDetailLevel]
[this]
[summaryDetailLevel]
[this]
[""]
[this, ., outputWrapper]
[this]
[outputWrapper]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., moduleWrapper, ., clear, (, )]
[this, ., moduleWrapper]
[this]
[this, ., moduleWrapper, ., addAll, (, moduleWrapper, )]
[this, ., moduleWrapper]
[this]
[moduleWrapper]
[this]
[""]
[this, ., moduleOutputPathPrefix]
[this]
[moduleOutputPathPrefix]
[this]
[""]
[this, ., createSourceMap]
[this]
[createSourceMap]
[this]
[SourceMap, ., DetailLevel, ., ALL]
[SourceMap, ., DetailLevel]
[SourceMap]
[this, ., sourceMapDetailLevel]
[this]
[level]
[this]
[SourceMap, ., Format, ., DEFAULT]
[SourceMap, ., Format]
[SourceMap]
[this, ., sourceMapFormat]
[this]
[format]
[this]
[null]
[this, ., warningGuards]
[this]
[spec]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., define, ., clear, (, )]
[this, ., define]
[this]
[this, ., define, ., addAll, (, define, )]
[this, ., define]
[this]
[define]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., tweak, ., clear, (, )]
[this, ., tweak]
[this]
[this, ., tweak, ., addAll, (, tweak, )]
[this, ., tweak]
[this]
[tweak]
[this]
[TweakProcessing, ., OFF]
[TweakProcessing]
[this, ., tweakProcessing]
[this]
[tweakProcessing]
[this]
[""]
[this, ., charset]
[this]
[charset]
[this]
[false]
[this, ., manageClosureDependencies]
[this]
[newVal]
[this]
[false]
[this, ., onlyClosureDependencies]
[this]
[newVal]
[this]
[ImmutableList, ., of, (, )]
[ImmutableList]
[Preconditions, ., checkNotNull, (, entryPoints, )]
[Preconditions]
[entryPoints]
[this, ., closureEntryPoints]
[this]
[entryPoints]
[this]
[ImmutableList, ., of, (, )]
[ImmutableList]
[this, ., outputManifests]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[outputManifests]
[!, manifestName, ., isEmpty, (, )]
[manifestName, ., isEmpty, (, )]
[manifestName]
[this, ., outputManifests, ., add, (, manifestName, )]
[this, ., outputManifests]
[this]
[manifestName]
[this, ., outputManifests]
[this]
[ImmutableList, ., copyOf, (, this, ., outputManifests, )]
[ImmutableList]
[this, ., outputManifests]
[this]
[this]
[null]
[this, ., outputModuleDependencies]
[this]
[outputModuleDependencies]
[this]
[ImmutableList, ., of, (, )]
[ImmutableList]
[this, ., outputBundles]
[this]
[outputBundles]
[this]
[false]
[this, ., acceptConstKeyword]
[this]
[acceptConstKeyword]
[this]
[""]
[this, ., languageIn]
[this]
[languageIn]
[this]
[false]
[this, ., skipNormalOutputs]
[this]
[skipNormalOutputs]
[this]
[ImmutableList, ., of, (, )]
[ImmutableList]
[this, ., manifestMaps]
[this]
[manifestMaps]
[this]
[false]
[this, ., transformAMDToCJSModules]
[this]
[transformAMDToCJSModules]
[this]
[false]
[this, ., processCommonJSModules]
[this]
[processCommonJSModules]
[this]
[ProcessCommonJSModules, ., DEFAULT_FILENAME_PREFIX]
[ProcessCommonJSModules]
[this, ., commonJSModulePathPrefix]
[this]
[commonJSModulePathPrefix]
[this]
[""]
[this, ., warningsWhitelistFile]
[this]
[fileName]
[this]
[this, ., level]
[this]
[level]
[this, ., groupName]
[this]
[groupName]
[Lists, ., newArrayList, (, )]
[Lists]
[entries, ., add, (, new, Entry, (, level, ,, groupName, ), )]
[entries]
[new, Entry, (, level, ,, groupName, )]
[level]
[groupName]
[entries, ., clear, (, )]
[entries]
