[this, ., compiler]
[this]
[compiler]
[this, ., replacements]
[this]
[replacements]
[true]
[original, ., getParent, (, ), !=, null]
[original, ., getParent, (, )]
[original]
[null]
[original, ., detachFromParent, (, )]
[original]
[replacements, ., add, (, original, )]
[replacements]
[original]
[Preconditions, ., checkArgument, (, (, original, ., isAnd, (, ), ), ||, (, original, ., isOr, (, ), ), ,, "Expected: AND or OR, Got: %s", ,, Token, ., name, (, original, ., getType, (, ), ), )]
[Preconditions]
[(, original, ., isAnd, (, ), ), ||, (, original, ., isOr, (, ), )]
[(, original, ., isAnd, (, ), )]
[original, ., isAnd, (, )]
[original]
[(, original, ., isOr, (, ), )]
[original, ., isOr, (, )]
[original]
["Expected: AND or OR, Got: %s"]
[Token, ., name, (, original, ., getType, (, ), )]
[Token]
[original, ., getType, (, )]
[original]
[original, ., getFirstChild, (, )]
[original]
[left, ., getNext, (, )]
[left]
[simplifyShortCircuitBranch, (, right, )]
[right]
[original, ., detachChildren, (, )]
[original]
[original, ., addChildToBack, (, left, )]
[original]
[left]
[original, ., addChildToBack, (, simplifiedRight, )]
[original]
[simplifiedRight]
[keepSubTree, (, original, )]
[original]
[Preconditions, ., checkArgument, (, hook, ., isHook, (, ), ,, "Expected: HOOK, Got: %s", ,, Token, ., name, (, hook, ., getType, (, ), ), )]
[Preconditions]
[hook, ., isHook, (, )]
[hook]
["Expected: HOOK, Got: %s"]
[Token, ., name, (, hook, ., getType, (, ), )]
[Token]
[hook, ., getType, (, )]
[hook]
[hook, ., getFirstChild, (, )]
[hook]
[condition, ., getNext, (, )]
[condition]
[thenBranch, ., getNext, (, )]
[thenBranch]
[thenHasSideEffects, &&, elseHasSideEffects]
[thenHasSideEffects]
[elseHasSideEffects]
[hook, ., detachChildren, (, )]
[hook]
[hook, ., addChildToBack, (, condition, )]
[hook]
[condition]
[hook, ., addChildToBack, (, simplifyShortCircuitBranch, (, thenBranch, ), )]
[hook]
[simplifyShortCircuitBranch, (, thenBranch, )]
[thenBranch]
[hook, ., addChildToBack, (, simplifyShortCircuitBranch, (, elseBranch, ), )]
[hook]
[simplifyShortCircuitBranch, (, elseBranch, )]
[elseBranch]
[keepSubTree, (, hook, )]
[hook]
[thenHasSideEffects, ||, elseHasSideEffects]
[thenHasSideEffects]
[elseHasSideEffects]
[thenHasSideEffects, ?, Token, ., AND, :, Token, ., OR]
[thenHasSideEffects]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[thenHasSideEffects, ?, thenBranch, :, elseBranch]
[thenHasSideEffects]
[thenBranch]
[elseBranch]
[new, Node, (, type, ,, condition, ., detachFromParent, (, ), ,, simplifyShortCircuitBranch, (, body, ), ), ., copyInformationFrom, (, hook, )]
[new, Node, (, type, ,, condition, ., detachFromParent, (, ), ,, simplifyShortCircuitBranch, (, body, ), )]
[type]
[condition, ., detachFromParent, (, )]
[condition]
[simplifyShortCircuitBranch, (, body, )]
[body]
[hook]
[keepSubTree, (, simplified, )]
[simplified]
[new, IllegalArgumentException, (, "keepSimplifiedHookExpression must keep at least 1 branch", )]
["keepSimplifiedHookExpression must keep at least 1 branch"]
[Lists, ., newArrayList, (, )]
[Lists]
[NodeTraversal, ., traverse, (, compiler, ,, node, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, parts, ), ), )]
[NodeTraversal]
[compiler]
[node]
[new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, parts, ), )]
[compiler]
[new, GetReplacementSideEffectSubexpressions, (, compiler, ,, parts, )]
[compiler]
[parts]
[null]
[parts]
[ret, !=, null]
[ret]
[null]
[ret]
[IR, ., comma, (, ret, ,, part, ), ., srcref, (, node, )]
[IR, ., comma, (, ret, ,, part, )]
[IR]
[ret]
[part]
[node]
[ret]
[part]
[ret, ==, null]
[ret]
[null]
[new, IllegalArgumentException, (, "expected at least one side effect subexpression in short ", +, "circuit branch.", )]
["expected at least one side effect subexpression in short ", +, "circuit branch."]
["expected at least one side effect subexpression in short "]
["circuit branch."]
[ret]
[ImmutableSet, ., of, (, Token, ., BLOCK, ,, Token, ., SCRIPT, ,, Token, ., VAR, ,, Token, ., EXPR_RESULT, ,, Token, ., RETURN, )]
[ImmutableSet]
[Token, ., BLOCK]
[Token]
[Token, ., SCRIPT]
[Token]
[Token, ., VAR]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., RETURN]
[Token]
[this, ., compiler]
[this]
[compiler]
[this, ., accumulator]
[this]
[accumulator]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[callNode]
[classes, !=, null]
[classes]
[null]
[FORBIDDEN_TYPES, ., contains, (, node, ., getType, (, ), ), ||, NodeUtil, ., isControlStructure, (, node, )]
[FORBIDDEN_TYPES, ., contains, (, node, ., getType, (, ), )]
[FORBIDDEN_TYPES]
[node, ., getType, (, )]
[node]
[NodeUtil, ., isControlStructure, (, node, )]
[NodeUtil]
[node]
[new, IllegalArgumentException, (, Token, ., name, (, node, ., getType, (, ), ), +, " nodes are not supported.", )]
[Token, ., name, (, node, ., getType, (, ), ), +, " nodes are not supported."]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[" nodes are not supported."]
[node, ., isFunction, (, )]
[node]
[false]
[node, ., isHook, (, )]
[node]
[processHook, (, node, )]
[node]
[(, node, ., isAnd, (, ), ), ||, (, node, ., isOr, (, ), )]
[(, node, ., isAnd, (, ), )]
[node, ., isAnd, (, )]
[node]
[(, node, ., isOr, (, ), )]
[node, ., isOr, (, )]
[node]
[processShortCircuitExpression, (, node, )]
[node]
[!, NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ,, compiler, )]
[NodeUtil, ., nodeTypeMayHaveSideEffects, (, node, ,, compiler, )]
[NodeUtil]
[node]
[compiler]
[true]
[node, ., isCall, (, )]
[node]
[processFunctionCall, (, node, )]
[node]
[node, ., isNew, (, )]
[node]
[processConstructorCall, (, node, )]
[node]
[accumulator, ., keepSubTree, (, node, )]
[accumulator]
[node]
[false]
[Preconditions, ., checkArgument, (, (, node, ., isAnd, (, ), ), ||, (, node, ., isOr, (, ), ), ,, "Expected: AND or OR, Got: %s", ,, Token, ., name, (, node, ., getType, (, ), ), )]
[Preconditions]
[(, node, ., isAnd, (, ), ), ||, (, node, ., isOr, (, ), )]
[(, node, ., isAnd, (, ), )]
[node, ., isAnd, (, )]
[node]
[(, node, ., isOr, (, ), )]
[node, ., isOr, (, )]
[node]
["Expected: AND or OR, Got: %s"]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[left, ., getNext, (, )]
[left]
[NodeUtil, ., mayHaveSideEffects, (, right, ,, compiler, )]
[NodeUtil]
[right]
[compiler]
[accumulator, ., keepSimplifiedShortCircuitExpression, (, node, )]
[accumulator]
[node]
[false]
[true]
[Preconditions, ., checkArgument, (, node, ., isHook, (, ), ,, "Expected: HOOK, Got: %s", ,, Token, ., name, (, node, ., getType, (, ), ), )]
[Preconditions]
[node, ., isHook, (, )]
[node]
["Expected: HOOK, Got: %s"]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[condition, ., getNext, (, )]
[condition]
[ifBranch, ., getNext, (, )]
[ifBranch]
[NodeUtil, ., mayHaveSideEffects, (, ifBranch, ,, compiler, )]
[NodeUtil]
[ifBranch]
[compiler]
[NodeUtil, ., mayHaveSideEffects, (, elseBranch, ,, compiler, )]
[NodeUtil]
[elseBranch]
[compiler]
[thenHasSideEffects, ||, elseHasSideEffects]
[thenHasSideEffects]
[elseHasSideEffects]
[accumulator, ., keepSimplifiedHookExpression, (, node, ,, thenHasSideEffects, ,, elseHasSideEffects, )]
[accumulator]
[node]
[thenHasSideEffects]
[elseHasSideEffects]
[false]
[true]
[Preconditions, ., checkArgument, (, node, ., isCall, (, ), ,, "Expected: CALL, Got: %s", ,, Token, ., name, (, node, ., getType, (, ), ), )]
[Preconditions]
[node, ., isCall, (, )]
[node]
["Expected: CALL, Got: %s"]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[functionName, ., isName, (, ), ||, functionName, ., isGetProp, (, )]
[functionName, ., isName, (, )]
[functionName]
[functionName, ., isGetProp, (, )]
[functionName]
[!, accumulator, ., classDefiningCallsHaveSideEffects, (, ), &&, isClassDefiningCall, (, node, )]
[!, accumulator, ., classDefiningCallsHaveSideEffects, (, )]
[accumulator, ., classDefiningCallsHaveSideEffects, (, )]
[accumulator]
[isClassDefiningCall, (, node, )]
[node]
[true]
[!, NodeUtil, ., functionCallHasSideEffects, (, node, )]
[NodeUtil, ., functionCallHasSideEffects, (, node, )]
[NodeUtil]
[node]
[true]
[accumulator, ., keepSubTree, (, node, )]
[accumulator]
[node]
[false]
[Preconditions, ., checkArgument, (, node, ., isNew, (, ), ,, "Expected: NEW, Got: %s", ,, Token, ., name, (, node, ., getType, (, ), ), )]
[Preconditions]
[node, ., isNew, (, )]
[node]
["Expected: NEW, Got: %s"]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[!, NodeUtil, ., constructorCallHasSideEffects, (, node, )]
[NodeUtil, ., constructorCallHasSideEffects, (, node, )]
[NodeUtil]
[node]
[true]
[accumulator, ., keepSubTree, (, node, )]
[accumulator]
[node]
[false]
