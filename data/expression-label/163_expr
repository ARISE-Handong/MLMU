[65382027393090L]
[new, Fraction, (, 0, ,, 1, )]
[0]
[1]
[new, Fraction, (, 1, ,, 1, )]
[1]
[1]
[new, Fraction, (, 1, ,, 2, )]
[1]
[2]
[new, Fraction, (, 1, ,, 3, )]
[1]
[3]
[new, Fraction, (, 2, ,, 3, )]
[2]
[3]
[new, Fraction, (, 1, ,, 4, )]
[1]
[4]
[new, Fraction, (, 2, ,, 4, )]
[2]
[4]
[new, Fraction, (, 3, ,, 4, )]
[3]
[4]
[new, Fraction, (, 1, ,, 5, )]
[1]
[5]
[new, Fraction, (, 2, ,, 5, )]
[2]
[5]
[new, Fraction, (, 3, ,, 5, )]
[3]
[5]
[new, Fraction, (, 4, ,, 5, )]
[4]
[5]
[0]
[null]
[null]
[this, ., numerator]
[this]
[numerator]
[this, ., denominator]
[this]
[denominator]
[denominator, ==, 0]
[denominator]
[0]
[new, ArithmeticException, (, "The denominator must not be zero", )]
["The denominator must not be zero"]
[denominator, <, 0]
[denominator]
[0]
[numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE]
[numerator, ==, Integer, ., MIN_VALUE]
[numerator]
[Integer, ., MIN_VALUE]
[Integer]
[denominator, ==, Integer, ., MIN_VALUE]
[denominator]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: can't negate", )]
["overflow: can't negate"]
[numerator]
[-, numerator]
[numerator]
[denominator]
[-, denominator]
[denominator]
[new, Fraction, (, numerator, ,, denominator, )]
[numerator]
[denominator]
[denominator, ==, 0]
[denominator]
[0]
[new, ArithmeticException, (, "The denominator must not be zero", )]
["The denominator must not be zero"]
[denominator, <, 0]
[denominator]
[0]
[new, ArithmeticException, (, "The denominator must not be negative", )]
["The denominator must not be negative"]
[numerator, <, 0]
[numerator]
[0]
[new, ArithmeticException, (, "The numerator must not be negative", )]
["The numerator must not be negative"]
[whole, <, 0]
[whole]
[0]
[numeratorValue]
[whole, *, (, long, ), denominator, -, numerator]
[whole, *, (, long, ), denominator]
[whole]
[(, long, ), denominator]
[denominator]
[numerator]
[numeratorValue]
[whole, *, (, long, ), denominator, +, numerator]
[whole, *, (, long, ), denominator]
[whole]
[(, long, ), denominator]
[denominator]
[numerator]
[numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE]
[numeratorValue, <, Integer, ., MIN_VALUE]
[numeratorValue]
[Integer, ., MIN_VALUE]
[Integer]
[numeratorValue, >, Integer, ., MAX_VALUE]
[numeratorValue]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "Numerator too large to represent as an Integer.", )]
["Numerator too large to represent as an Integer."]
[new, Fraction, (, (, int, ), numeratorValue, ,, denominator, )]
[(, int, ), numeratorValue]
[numeratorValue]
[denominator]
[denominator, ==, 0]
[denominator]
[0]
[new, ArithmeticException, (, "The denominator must not be zero", )]
["The denominator must not be zero"]
[numerator, ==, 0]
[numerator]
[0]
[ZERO]
[denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0]
[denominator, ==, Integer, ., MIN_VALUE]
[denominator]
[Integer, ., MIN_VALUE]
[Integer]
[(, numerator, &, 1, ), ==, 0]
[(, numerator, &, 1, )]
[numerator, &, 1]
[numerator]
[1]
[0]
[numerator]
[2]
[denominator]
[2]
[denominator, <, 0]
[denominator]
[0]
[numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE]
[numerator, ==, Integer, ., MIN_VALUE]
[numerator]
[Integer, ., MIN_VALUE]
[Integer]
[denominator, ==, Integer, ., MIN_VALUE]
[denominator]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: can't negate", )]
["overflow: can't negate"]
[numerator]
[-, numerator]
[numerator]
[denominator]
[-, denominator]
[denominator]
[greatestCommonDivisor, (, numerator, ,, denominator, )]
[numerator]
[denominator]
[numerator]
[gcd]
[denominator]
[gcd]
[new, Fraction, (, numerator, ,, denominator, )]
[numerator]
[denominator]
[value, <, 0, ?, -, 1, :, 1]
[value, <, 0]
[value]
[0]
[-, 1]
[1]
[1]
[value]
[Math, ., abs, (, value, )]
[Math]
[value]
[value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, )]
[value, >, Integer, ., MAX_VALUE]
[value]
[Integer, ., MAX_VALUE]
[Integer]
[Double, ., isNaN, (, value, )]
[Double]
[value]
[new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", )]
["The value must not be greater than Integer.MAX_VALUE or NaN"]
[(, int, ), value]
[value]
[value]
[wholeNumber]
[0]
[1]
[1]
[0]
[0]
[0]
[(, int, ), value]
[value]
[0]
[1]
[0]
[value, -, a1]
[value]
[a1]
[0]
[Double, ., MAX_VALUE]
[Double]
[1]
[delta1]
[delta2]
[a2]
[(, int, ), (, x1, /, y1, )]
[(, x1, /, y1, )]
[x1, /, y1]
[x1]
[y1]
[x2]
[y1]
[y2]
[x1, -, a2, *, y1]
[x1]
[a2, *, y1]
[a2]
[y1]
[numer2]
[a1, *, numer1, +, numer0]
[a1, *, numer1]
[a1]
[numer1]
[numer0]
[denom2]
[a1, *, denom1, +, denom0]
[a1, *, denom1]
[a1]
[denom1]
[denom0]
[fraction]
[(, double, ), numer2, /, (, double, ), denom2]
[(, double, ), numer2]
[numer2]
[(, double, ), denom2]
[denom2]
[delta2]
[Math, ., abs, (, value, -, fraction, )]
[Math]
[value, -, fraction]
[value]
[fraction]
[a1]
[a2]
[x1]
[x2]
[y1]
[y2]
[numer0]
[numer1]
[denom0]
[denom1]
[numer1]
[numer2]
[denom1]
[denom2]
[i, ++]
[i]
[delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25]
[delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0]
[delta1, >, delta2, &&, denom2, <=, 10000]
[delta1, >, delta2]
[delta1]
[delta2]
[denom2, <=, 10000]
[denom2]
[10000]
[denom2, >, 0]
[denom2]
[0]
[i, <, 25]
[i]
[25]
[i, ==, 25]
[i]
[25]
[new, ArithmeticException, (, "Unable to convert double to fraction", )]
["Unable to convert double to fraction"]
[getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, ), *, sign, ,, denom0, )]
[(, numer0, +, wholeNumber, *, denom0, ), *, sign]
[(, numer0, +, wholeNumber, *, denom0, )]
[numer0, +, wholeNumber, *, denom0]
[numer0]
[wholeNumber, *, denom0]
[wholeNumber]
[denom0]
[sign]
[denom0]
[str, ==, null]
[str]
[null]
[new, IllegalArgumentException, (, "The string must not be null", )]
["The string must not be null"]
[str, ., indexOf, (, '.', )]
[str]
['.']
[pos, >=, 0]
[pos]
[0]
[getFraction, (, Double, ., parseDouble, (, str, ), )]
[Double, ., parseDouble, (, str, )]
[Double]
[str]
[pos]
[str, ., indexOf, (, ' ', )]
[str]
[' ']
[pos, >, 0]
[pos]
[0]
[Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), )]
[Integer]
[str, ., substring, (, 0, ,, pos, )]
[str]
[0]
[pos]
[str]
[str, ., substring, (, pos, +, 1, )]
[str]
[pos, +, 1]
[pos]
[1]
[pos]
[str, ., indexOf, (, '/', )]
[str]
['/']
[pos, <, 0]
[pos]
[0]
[new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", )]
["The fraction could not be parsed as the format X Y/Z"]
[Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), )]
[Integer]
[str, ., substring, (, 0, ,, pos, )]
[str]
[0]
[pos]
[Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), )]
[Integer]
[str, ., substring, (, pos, +, 1, )]
[str]
[pos, +, 1]
[pos]
[1]
[getFraction, (, whole, ,, numer, ,, denom, )]
[whole]
[numer]
[denom]
[pos]
[str, ., indexOf, (, '/', )]
[str]
['/']
[pos, <, 0]
[pos]
[0]
[getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, )]
[Integer, ., parseInt, (, str, )]
[Integer]
[str]
[1]
[Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), )]
[Integer]
[str, ., substring, (, 0, ,, pos, )]
[str]
[0]
[pos]
[Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), )]
[Integer]
[str, ., substring, (, pos, +, 1, )]
[str]
[pos, +, 1]
[pos]
[1]
[getFraction, (, numer, ,, denom, )]
[numer]
[denom]
[numerator]
[denominator]
[Math, ., abs, (, numerator, %, denominator, )]
[Math]
[numerator, %, denominator]
[numerator]
[denominator]
[numerator, /, denominator]
[numerator]
[denominator]
[numerator, /, denominator]
[numerator]
[denominator]
[(, long, ), numerator, /, denominator]
[(, long, ), numerator]
[numerator]
[denominator]
[(, float, ), numerator, /, (, float, ), denominator]
[(, float, ), numerator]
[numerator]
[(, float, ), denominator]
[denominator]
[(, double, ), numerator, /, (, double, ), denominator]
[(, double, ), numerator]
[numerator]
[(, double, ), denominator]
[denominator]
[numerator, ==, 0]
[numerator]
[0]
[equals, (, ZERO, ), ?, this, :, ZERO]
[equals, (, ZERO, )]
[ZERO]
[this]
[ZERO]
[greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, )]
[Math, ., abs, (, numerator, )]
[Math]
[numerator]
[denominator]
[gcd, ==, 1]
[gcd]
[1]
[this]
[Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, )]
[Fraction]
[numerator, /, gcd]
[numerator]
[gcd]
[denominator, /, gcd]
[denominator]
[gcd]
[numerator, ==, 0]
[numerator]
[0]
[new, ArithmeticException, (, "Unable to invert zero.", )]
["Unable to invert zero."]
[numerator, ==, Integer, ., MIN_VALUE]
[numerator]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: can't negate numerator", )]
["overflow: can't negate numerator"]
[numerator, <, 0]
[numerator]
[0]
[new, Fraction, (, -, denominator, ,, -, numerator, )]
[-, denominator]
[denominator]
[-, numerator]
[numerator]
[new, Fraction, (, denominator, ,, numerator, )]
[denominator]
[numerator]
[numerator, ==, Integer, ., MIN_VALUE]
[numerator]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: too large to negate", )]
["overflow: too large to negate"]
[new, Fraction, (, -, numerator, ,, denominator, )]
[-, numerator]
[numerator]
[denominator]
[numerator, >=, 0]
[numerator]
[0]
[this]
[negate, (, )]
[power, ==, 1]
[power]
[1]
[this]
[power, ==, 0]
[power]
[0]
[ONE]
[power, <, 0]
[power]
[0]
[power, ==, Integer, ., MIN_VALUE]
[power]
[Integer, ., MIN_VALUE]
[Integer]
[this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), )]
[this, ., invert, (, ), ., pow, (, 2, )]
[this, ., invert, (, )]
[this]
[2]
[-, (, power, /, 2, )]
[(, power, /, 2, )]
[power, /, 2]
[power]
[2]
[this, ., invert, (, ), ., pow, (, -, power, )]
[this, ., invert, (, )]
[this]
[-, power]
[power]
[this, ., multiplyBy, (, this, )]
[this]
[this]
[power, %, 2, ==, 0]
[power, %, 2]
[power]
[2]
[0]
[f, ., pow, (, power, /, 2, )]
[f]
[power, /, 2]
[power]
[2]
[f, ., pow, (, power, /, 2, ), ., multiplyBy, (, this, )]
[f, ., pow, (, power, /, 2, )]
[f]
[power, /, 2]
[power]
[2]
[this]
[u, ==, 0, ||, v, ==, 0]
[u, ==, 0]
[u]
[0]
[v, ==, 0]
[v]
[0]
[u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE]
[u, ==, Integer, ., MIN_VALUE]
[u]
[Integer, ., MIN_VALUE]
[Integer]
[v, ==, Integer, ., MIN_VALUE]
[v]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: gcd is 2^31", )]
["overflow: gcd is 2^31"]
[Math, ., abs, (, u, ), +, Math, ., abs, (, v, )]
[Math, ., abs, (, u, )]
[Math]
[u]
[Math, ., abs, (, v, )]
[Math]
[v]
[Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==, 1]
[Math, ., abs, (, u, ), ==, 1]
[Math, ., abs, (, u, )]
[Math]
[u]
[1]
[Math, ., abs, (, v, ), ==, 1]
[Math, ., abs, (, v, )]
[Math]
[v]
[1]
[1]
[u, >, 0]
[u]
[0]
[u]
[-, u]
[u]
[v, >, 0]
[v]
[0]
[v]
[-, v]
[v]
[0]
[(, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31]
[(, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0]
[(, u, &, 1, ), ==, 0]
[(, u, &, 1, )]
[u, &, 1]
[u]
[1]
[0]
[(, v, &, 1, ), ==, 0]
[(, v, &, 1, )]
[v, &, 1]
[v]
[1]
[0]
[k, <, 31]
[k]
[31]
[u]
[2]
[v]
[2]
[k, ++]
[k]
[k, ==, 31]
[k]
[31]
[new, ArithmeticException, (, "overflow: gcd is 2^31", )]
["overflow: gcd is 2^31"]
[(, u, &, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, )]
[(, u, &, 1, ), ==, 1]
[(, u, &, 1, )]
[u, &, 1]
[u]
[1]
[1]
[v]
[-, (, u, /, 2, )]
[(, u, /, 2, )]
[u, /, 2]
[u]
[2]
[(, t, &, 1, ), ==, 0]
[(, t, &, 1, )]
[t, &, 1]
[t]
[1]
[0]
[t]
[2]
[t, >, 0]
[t]
[0]
[u]
[-, t]
[t]
[v]
[t]
[t]
[(, v, -, u, ), /, 2]
[(, v, -, u, )]
[v, -, u]
[v]
[u]
[2]
[t, !=, 0]
[t]
[0]
[-, u, *, (, 1, <<, k, )]
[-, u]
[u]
[(, 1, <<, k, )]
[1, <<, k]
[1]
[k]
[(, long, ), x, *, (, long, ), y]
[(, long, ), x]
[x]
[(, long, ), y]
[y]
[m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE]
[m, <, Integer, ., MIN_VALUE]
[m]
[Integer, ., MIN_VALUE]
[Integer]
[m, >, Integer, ., MAX_VALUE]
[m]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: mul", )]
["overflow: mul"]
[(, int, ), m]
[m]
[(, long, ), x, *, (, long, ), y]
[(, long, ), x]
[x]
[(, long, ), y]
[y]
[m, >, Integer, ., MAX_VALUE]
[m]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: mulPos", )]
["overflow: mulPos"]
[(, int, ), m]
[m]
[(, long, ), x, +, (, long, ), y]
[(, long, ), x]
[x]
[(, long, ), y]
[y]
[s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE]
[s, <, Integer, ., MIN_VALUE]
[s]
[Integer, ., MIN_VALUE]
[Integer]
[s, >, Integer, ., MAX_VALUE]
[s]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: add", )]
["overflow: add"]
[(, int, ), s]
[s]
[(, long, ), x, -, (, long, ), y]
[(, long, ), x]
[x]
[(, long, ), y]
[y]
[s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE]
[s, <, Integer, ., MIN_VALUE]
[s]
[Integer, ., MIN_VALUE]
[Integer]
[s, >, Integer, ., MAX_VALUE]
[s]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "overflow: add", )]
["overflow: add"]
[(, int, ), s]
[s]
[addSub, (, fraction, ,, true, )]
[fraction]
[true]
[addSub, (, fraction, ,, false, )]
[fraction]
[false]
[fraction, ==, null]
[fraction]
[null]
[new, IllegalArgumentException, (, "The fraction must not be null", )]
["The fraction must not be null"]
[numerator, ==, 0]
[numerator]
[0]
[isAdd, ?, fraction, :, fraction, ., negate, (, )]
[isAdd]
[fraction]
[fraction, ., negate, (, )]
[fraction]
[fraction, ., numerator, ==, 0]
[fraction, ., numerator]
[fraction]
[0]
[this]
[greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[d1, ==, 1]
[d1]
[1]
[mulAndCheck, (, numerator, ,, fraction, ., denominator, )]
[numerator]
[fraction, ., denominator]
[fraction]
[mulAndCheck, (, fraction, ., numerator, ,, denominator, )]
[fraction, ., numerator]
[fraction]
[denominator]
[new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), )]
[isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, )]
[isAdd]
[addAndCheck, (, uvp, ,, upv, )]
[uvp]
[upv]
[subAndCheck, (, uvp, ,, upv, )]
[uvp]
[upv]
[mulPosAndCheck, (, denominator, ,, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), )]
[BigInteger, ., valueOf, (, numerator, )]
[BigInteger]
[numerator]
[BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, )]
[BigInteger]
[fraction, ., denominator, /, d1]
[fraction, ., denominator]
[fraction]
[d1]
[BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), )]
[BigInteger, ., valueOf, (, fraction, ., numerator, )]
[BigInteger]
[fraction, ., numerator]
[fraction]
[BigInteger, ., valueOf, (, denominator, /, d1, )]
[BigInteger]
[denominator, /, d1]
[denominator]
[d1]
[isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, )]
[isAdd]
[uvp, ., add, (, upv, )]
[uvp]
[upv]
[uvp, ., subtract, (, upv, )]
[uvp]
[upv]
[t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, )]
[t, ., mod, (, BigInteger, ., valueOf, (, d1, ), )]
[t]
[BigInteger, ., valueOf, (, d1, )]
[BigInteger]
[d1]
[tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, )]
[tmodd1, ==, 0]
[tmodd1]
[0]
[d1]
[greatestCommonDivisor, (, tmodd1, ,, d1, )]
[tmodd1]
[d1]
[t, ., divide, (, BigInteger, ., valueOf, (, d2, ), )]
[t]
[BigInteger, ., valueOf, (, d2, )]
[BigInteger]
[d2]
[w, ., bitLength, (, ), >, 31]
[w, ., bitLength, (, )]
[w]
[31]
[new, ArithmeticException, (, "overflow: numerator too large after multiply", )]
["overflow: numerator too large after multiply"]
[new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,, fraction, ., denominator, /, d2, ), )]
[w, ., intValue, (, )]
[w]
[mulPosAndCheck, (, denominator, /, d1, ,, fraction, ., denominator, /, d2, )]
[denominator, /, d1]
[denominator]
[d1]
[fraction, ., denominator, /, d2]
[fraction, ., denominator]
[fraction]
[d2]
[fraction, ==, null]
[fraction]
[null]
[new, IllegalArgumentException, (, "The fraction must not be null", )]
["The fraction must not be null"]
[numerator, ==, 0, ||, fraction, ., numerator, ==, 0]
[numerator, ==, 0]
[numerator]
[0]
[fraction, ., numerator, ==, 0]
[fraction, ., numerator]
[fraction]
[0]
[ZERO]
[greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, )]
[numerator]
[fraction, ., denominator]
[fraction]
[greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, )]
[fraction, ., numerator]
[fraction]
[denominator]
[getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), )]
[mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, )]
[numerator, /, d1]
[numerator]
[d1]
[fraction, ., numerator, /, d2]
[fraction, ., numerator]
[fraction]
[d2]
[mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, )]
[denominator, /, d2]
[denominator]
[d2]
[fraction, ., denominator, /, d1]
[fraction, ., denominator]
[fraction]
[d1]
[fraction, ==, null]
[fraction]
[null]
[new, IllegalArgumentException, (, "The fraction must not be null", )]
["The fraction must not be null"]
[fraction, ., numerator, ==, 0]
[fraction, ., numerator]
[fraction]
[0]
[new, ArithmeticException, (, "The fraction to divide by must not be zero", )]
["The fraction to divide by must not be zero"]
[multiplyBy, (, fraction, ., invert, (, ), )]
[fraction, ., invert, (, )]
[fraction]
[obj, ==, this]
[obj]
[this]
[true]
[obj, instanceof, Fraction, ==, false]
[obj, instanceof, Fraction]
[obj]
[false]
[false]
[(, Fraction, ), obj]
[obj]
[getNumerator, (, ), ==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==, other, ., getDenominator, (, )]
[getNumerator, (, ), ==, other, ., getNumerator, (, )]
[getNumerator, (, )]
[other, ., getNumerator, (, )]
[other]
[getDenominator, (, ), ==, other, ., getDenominator, (, )]
[getDenominator, (, )]
[other, ., getDenominator, (, )]
[other]
[hashCode, ==, 0]
[hashCode]
[0]
[hashCode]
[37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, )]
[37, *, (, 37, *, 17, +, getNumerator, (, ), )]
[37]
[(, 37, *, 17, +, getNumerator, (, ), )]
[37, *, 17, +, getNumerator, (, )]
[37, *, 17]
[37]
[17]
[getNumerator, (, )]
[getDenominator, (, )]
[hashCode]
[this, ==, other]
[this]
[other]
[0]
[numerator, ==, other, ., numerator, &&, denominator, ==, other, ., denominator]
[numerator, ==, other, ., numerator]
[numerator]
[other, ., numerator]
[other]
[denominator, ==, other, ., denominator]
[denominator]
[other, ., denominator]
[other]
[0]
[(, long, ), numerator, *, (, long, ), other, ., denominator]
[(, long, ), numerator]
[numerator]
[(, long, ), other, ., denominator]
[other, ., denominator]
[other]
[(, long, ), other, ., numerator, *, (, long, ), denominator]
[(, long, ), other, ., numerator]
[other, ., numerator]
[other]
[(, long, ), denominator]
[denominator]
[first, ==, second]
[first]
[second]
[0]
[first, <, second]
[first]
[second]
[-, 1]
[1]
[1]
[toString, ==, null]
[toString]
[null]
[toString]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), )]
[new, StringBuilder, (, 32, )]
[32]
[getNumerator, (, )]
['/']
[getDenominator, (, )]
[toString]
[toProperString, ==, null]
[toProperString]
[null]
[numerator, ==, 0]
[numerator]
[0]
[toProperString]
["0"]
[numerator, ==, denominator]
[numerator]
[denominator]
[toProperString]
["1"]
[numerator, ==, -, 1, *, denominator]
[numerator]
[-, 1, *, denominator]
[-, 1]
[1]
[denominator]
[toProperString]
["-1"]
[(, numerator, >, 0, ?, -, numerator, :, numerator, ), <, -, denominator]
[(, numerator, >, 0, ?, -, numerator, :, numerator, )]
[numerator, >, 0, ?, -, numerator, :, numerator]
[numerator, >, 0]
[numerator]
[0]
[-, numerator]
[numerator]
[numerator]
[-, denominator]
[denominator]
[getProperNumerator, (, )]
[properNumerator, ==, 0]
[properNumerator]
[0]
[toProperString]
[Integer, ., toString, (, getProperWhole, (, ), )]
[Integer]
[getProperWhole, (, )]
[toProperString]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, )]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator, (, ), )]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', )]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, )]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', )]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), )]
[new, StringBuilder, (, 32, )]
[32]
[getProperWhole, (, )]
[' ']
[properNumerator]
['/']
[getDenominator, (, )]
[toProperString]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', )]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), )]
[new, StringBuilder, (, 32, )]
[32]
[getNumerator, (, )]
['/']
[getDenominator, (, )]
[toProperString]
