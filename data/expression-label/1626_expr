[Maps, ., newHashMap, (, )]
[Maps]
[this, ., inputs]
[this]
[Lists, ., newArrayList, (, inputs, )]
[Lists]
[inputs]
[noProvides]
[Lists, ., newArrayList, (, )]
[Lists]
[inputs]
[input, ., getProvides, (, )]
[input]
[currentProvides, ., isEmpty, (, )]
[currentProvides]
[noProvides, ., add, (, input, )]
[noProvides]
[input]
[currentProvides]
[provideMap, ., put, (, provide, ,, input, )]
[provideMap]
[provide]
[input]
[HashMultimap, ., create, (, )]
[HashMultimap]
[inputs]
[input, ., getRequires, (, )]
[input]
[provideMap, ., get, (, req, )]
[provideMap]
[req]
[dep, !=, null, &&, dep, !=, input]
[dep, !=, null]
[dep]
[null]
[dep, !=, input]
[dep]
[input]
[deps, ., put, (, input, ,, dep, )]
[deps]
[input]
[dep]
[sortedList]
[topologicalStableSort, (, inputs, ,, deps, )]
[inputs]
[deps]
[sortedList, ., size, (, ), <, inputs, ., size, (, )]
[sortedList, ., size, (, )]
[sortedList]
[inputs, ., size, (, )]
[inputs]
[Lists, ., newArrayList, (, inputs, )]
[Lists]
[inputs]
[subGraph, ., removeAll, (, sortedList, )]
[subGraph]
[sortedList]
[new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps, ), ), )]
[cycleToString, (, findCycle, (, subGraph, ,, deps, ), )]
[findCycle, (, subGraph, ,, deps, )]
[subGraph]
[deps]
[provideMap, ., containsKey, (, symbol, )]
[provideMap]
[symbol]
[provideMap, ., get, (, symbol, )]
[provideMap]
[symbol]
[new, MissingProvideException, (, symbol, )]
[symbol]
[provideMap, ., get, (, symbol, )]
[provideMap]
[symbol]
[findCycle, (, subGraph, ., get, (, 0, ), ,, Sets, ., <, INPUT, >, newHashSet, (, subGraph, ), ,, deps, ,, Sets, ., <, INPUT, >, newHashSet, (, ), )]
[subGraph, ., get, (, 0, )]
[subGraph]
[0]
[Sets, ., <, INPUT, >, newHashSet, (, subGraph, )]
[Sets]
[subGraph]
[deps]
[Sets, ., <, INPUT, >, newHashSet, (, )]
[Sets]
[covered, ., add, (, current, )]
[covered]
[current]
[findCycle, (, findRequireInSubGraphOrFail, (, current, ,, subGraph, ), ,, subGraph, ,, deps, ,, covered, )]
[findRequireInSubGraphOrFail, (, current, ,, subGraph, )]
[current]
[subGraph]
[subGraph]
[deps]
[covered]
[cycle, ., get, (, 0, ), !=, cycle, ., get, (, cycle, ., size, (, ), -, 1, )]
[cycle, ., get, (, 0, )]
[cycle]
[0]
[cycle, ., get, (, cycle, ., size, (, ), -, 1, )]
[cycle]
[cycle, ., size, (, ), -, 1]
[cycle, ., size, (, )]
[cycle]
[1]
[cycle, ., add, (, current, )]
[cycle]
[current]
[cycle]
[Lists, ., <, INPUT, >, newArrayList, (, )]
[Lists]
[cycle, ., add, (, current, )]
[cycle]
[current]
[cycle]
[input, ., getRequires, (, )]
[input]
[provideMap, ., get, (, symbol, )]
[provideMap]
[symbol]
[subGraph, ., contains, (, candidate, )]
[subGraph]
[candidate]
[candidate]
[new, IllegalStateException, (, "no require found in subgraph", )]
["no require found in subgraph"]
[Lists, ., newArrayList, (, )]
[Lists]
[cycle, ., size, (, ), -, 1]
[cycle, ., size, (, )]
[cycle]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (, ), ., next, (, ), )]
[symbols]
[cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (, ), ., next, (, )]
[cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (, )]
[cycle, ., get, (, i, ), ., getProvides, (, )]
[cycle, ., get, (, i, )]
[cycle]
[i]
[symbols, ., add, (, symbols, ., get, (, 0, ), )]
[symbols]
[symbols, ., get, (, 0, )]
[symbols]
[0]
[Joiner, ., on, (, " -> ", ), ., join, (, symbols, )]
[Joiner, ., on, (, " -> ", )]
[Joiner]
[" -> "]
[symbols]
[Collections, ., <, INPUT, >, unmodifiableList, (, sortedList, )]
[Collections]
[sortedList]
[getDependenciesOf, (, roots, ,, true, )]
[roots]
[true]
[Preconditions, ., checkArgument, (, inputs, ., containsAll, (, roots, ), )]
[Preconditions]
[inputs, ., containsAll, (, roots, )]
[inputs]
[roots]
[Sets, ., newHashSet, (, )]
[Sets]
[new, ArrayDeque, <, INPUT, >, (, roots, )]
[roots]
[!, worklist, ., isEmpty, (, )]
[worklist, ., isEmpty, (, )]
[worklist]
[worklist, ., pop, (, )]
[worklist]
[included, ., add, (, current, )]
[included]
[current]
[current, ., getRequires, (, )]
[current]
[provideMap, ., get, (, req, )]
[provideMap]
[req]
[dep, !=, null]
[dep]
[null]
[worklist, ., add, (, dep, )]
[worklist]
[dep]
[ImmutableList, ., builder, (, )]
[ImmutableList]
[(, sorted, ?, sortedList, :, inputs, )]
[sorted, ?, sortedList, :, inputs]
[sorted]
[sortedList]
[inputs]
[included, ., contains, (, current, )]
[included]
[current]
[builder, ., add, (, current, )]
[builder]
[current]
[builder, ., build, (, )]
[builder]
[Collections, ., <, INPUT, >, unmodifiableList, (, noProvides, )]
[Collections]
[noProvides]
[items, ., size, (, ), ==, 0]
[items, ., size, (, )]
[items]
[0]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[0]
[i, <, items, ., size, (, )]
[i]
[items, ., size, (, )]
[items]
[i, ++]
[i]
[originalIndex, ., put, (, items, ., get, (, i, ), ,, i, )]
[originalIndex]
[items, ., get, (, i, )]
[items]
[i]
[i]
[new, PriorityQueue, <, T, >, (, items, ., size, (, ), ,, new, Comparator, <, T, >, (, ), {, @, Override, public, int, compare, (, T, a, ,, T, b, ), {, return, originalIndex, ., get, (, a, ), ., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, ), ;, }, }, )]
[items, ., size, (, )]
[items]
[new, Comparator, <, T, >, (, ), {, @, Override, public, int, compare, (, T, a, ,, T, b, ), {, return, originalIndex, ., get, (, a, ), ., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, ), ;, }, }]
[originalIndex, ., get, (, a, ), ., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, )]
[originalIndex, ., get, (, a, ), ., intValue, (, )]
[originalIndex, ., get, (, a, )]
[originalIndex]
[a]
[originalIndex, ., get, (, b, ), ., intValue, (, )]
[originalIndex, ., get, (, b, )]
[originalIndex]
[b]
[Lists, ., newArrayList, (, )]
[Lists]
[HashMultiset, ., create, (, )]
[HashMultiset]
[ArrayListMultimap, ., create, (, )]
[ArrayListMultimap]
[Multimaps, ., invertFrom, (, deps, ,, reverseDeps, )]
[Multimaps]
[deps]
[reverseDeps]
[items]
[deps, ., get, (, item, )]
[deps]
[item]
[inDegree, ., add, (, item, ,, itemDeps, ., size, (, ), )]
[inDegree]
[item]
[itemDeps, ., size, (, )]
[itemDeps]
[itemDeps, ., isEmpty, (, )]
[itemDeps]
[inDegreeZero, ., add, (, item, )]
[inDegreeZero]
[item]
[!, inDegreeZero, ., isEmpty, (, )]
[inDegreeZero, ., isEmpty, (, )]
[inDegreeZero]
[inDegreeZero, ., remove, (, )]
[inDegreeZero]
[result, ., add, (, item, )]
[result]
[item]
[reverseDeps, ., get, (, item, )]
[reverseDeps]
[item]
[inDegree, ., remove, (, inWaiting, ,, 1, )]
[inDegree]
[inWaiting]
[1]
[inDegree, ., count, (, inWaiting, ), ==, 0]
[inDegree, ., count, (, inWaiting, )]
[inDegree]
[inWaiting]
[0]
[inDegreeZero, ., add, (, inWaiting, )]
[inDegreeZero]
[inWaiting]
[result]
[message]
[provide]
