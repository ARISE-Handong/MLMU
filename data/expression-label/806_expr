[tree]
[new, BSPTree, <, S, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[this, ., tree]
[this]
[tree]
[boundary, ., size, (, ), ==, 0]
[boundary, ., size, (, )]
[boundary]
[0]
[tree]
[new, BSPTree, <, S, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[new, TreeSet, <, SubHyperplane, <, S, >, >, (, new, Comparator, <, SubHyperplane, <, S, >, >, (, ), {, public, int, compare, (, final, SubHyperplane, <, S, >, o1, ,, final, SubHyperplane, <, S, >, o2, ), {, final, double, size1, =, o1, ., getSize, (, ), ;, final, double, size2, =, o2, ., getSize, (, ), ;, return, (, size2, <, size1, ), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }, )]
[new, Comparator, <, SubHyperplane, <, S, >, >, (, ), {, public, int, compare, (, final, SubHyperplane, <, S, >, o1, ,, final, SubHyperplane, <, S, >, o2, ), {, final, double, size1, =, o1, ., getSize, (, ), ;, final, double, size2, =, o2, ., getSize, (, ), ;, return, (, size2, <, size1, ), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, ), ;, }, }]
[o1, ., getSize, (, )]
[o1]
[o2, ., getSize, (, )]
[o2]
[(, size2, <, size1, ), ?, -, 1, :, (, (, o1, ==, o2, ), ?, 0, :, +, 1, )]
[(, size2, <, size1, )]
[size2, <, size1]
[size2]
[size1]
[-, 1]
[1]
[(, (, o1, ==, o2, ), ?, 0, :, +, 1, )]
[(, o1, ==, o2, ), ?, 0, :, +, 1]
[(, o1, ==, o2, )]
[o1, ==, o2]
[o1]
[o2]
[0]
[+, 1]
[1]
[ordered, ., addAll, (, boundary, )]
[ordered]
[boundary]
[tree]
[new, BSPTree, <, S, >, (, )]
[insertCuts, (, tree, ,, ordered, )]
[tree]
[ordered]
[tree, ., visit, (, new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (, final, BSPTree, <, S, >, node, ), {, return, Order, ., PLUS_SUB_MINUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, }, public, void, visitLeafNode, (, final, BSPTree, <, S, >, node, ), {, node, ., setAttribute, (, (, node, ==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }, )]
[tree]
[new, BSPTreeVisitor, <, S, >, (, ), {, public, Order, visitOrder, (, final, BSPTree, <, S, >, node, ), {, return, Order, ., PLUS_SUB_MINUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, S, >, node, ), {, }, public, void, visitLeafNode, (, final, BSPTree, <, S, >, node, ), {, node, ., setAttribute, (, (, node, ==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, ), ;, }, }]
[Order, ., PLUS_SUB_MINUS]
[Order]
[node, ., setAttribute, (, (, node, ==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, )]
[node]
[(, node, ==, node, ., getParent, (, ), ., getPlus, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE]
[(, node, ==, node, ., getParent, (, ), ., getPlus, (, ), )]
[node, ==, node, ., getParent, (, ), ., getPlus, (, )]
[node]
[node, ., getParent, (, ), ., getPlus, (, )]
[node, ., getParent, (, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[Boolean, ., TRUE]
[Boolean]
[(, hyperplanes, ==, null, ), ||, (, hyperplanes, ., length, ==, 0, )]
[(, hyperplanes, ==, null, )]
[hyperplanes, ==, null]
[hyperplanes]
[null]
[(, hyperplanes, ., length, ==, 0, )]
[hyperplanes, ., length, ==, 0]
[hyperplanes, ., length]
[hyperplanes]
[0]
[tree]
[new, BSPTree, <, S, >, (, Boolean, ., FALSE, )]
[Boolean, ., FALSE]
[Boolean]
[tree]
[hyperplanes, [, 0, ], ., wholeSpace, (, ), ., getTree, (, false, )]
[hyperplanes, [, 0, ], ., wholeSpace, (, )]
[hyperplanes, [, 0, ]]
[hyperplanes]
[0]
[false]
[tree]
[node, ., setAttribute, (, Boolean, ., TRUE, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[hyperplanes]
[node, ., insertCut, (, hyperplane, )]
[node]
[hyperplane]
[node, ., setAttribute, (, null, )]
[node]
[null]
[node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, )]
[node, ., getPlus, (, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[node]
[node, ., getMinus, (, )]
[node]
[node, ., setAttribute, (, Boolean, ., TRUE, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[boundary, ., iterator, (, )]
[boundary]
[null]
[(, inserted, ==, null, ), &&, iterator, ., hasNext, (, )]
[(, inserted, ==, null, )]
[inserted, ==, null]
[inserted]
[null]
[iterator, ., hasNext, (, )]
[iterator]
[inserted]
[iterator, ., next, (, ), ., getHyperplane, (, )]
[iterator, ., next, (, )]
[iterator]
[!, node, ., insertCut, (, inserted, ., copySelf, (, ), )]
[node, ., insertCut, (, inserted, ., copySelf, (, ), )]
[node]
[inserted, ., copySelf, (, )]
[inserted]
[inserted]
[null]
[!, iterator, ., hasNext, (, )]
[iterator, ., hasNext, (, )]
[iterator]
[new, ArrayList, <, SubHyperplane, <, S, >, >, (, )]
[new, ArrayList, <, SubHyperplane, <, S, >, >, (, )]
[iterator, ., hasNext, (, )]
[iterator]
[iterator, ., next, (, )]
[iterator]
[other, ., side, (, inserted, )]
[other]
[inserted]
[PLUS]
[plusList, ., add, (, other, )]
[plusList]
[other]
[MINUS]
[minusList, ., add, (, other, )]
[minusList]
[other]
[BOTH]
[other, ., split, (, inserted, )]
[other]
[inserted]
[plusList, ., add, (, split, ., getPlus, (, ), )]
[plusList]
[split, ., getPlus, (, )]
[split]
[minusList, ., add, (, split, ., getMinus, (, ), )]
[minusList]
[split, ., getMinus, (, )]
[split]
[insertCuts, (, node, ., getPlus, (, ), ,, plusList, )]
[node, ., getPlus, (, )]
[node]
[plusList]
[insertCuts, (, node, ., getMinus, (, ), ,, minusList, )]
[node, ., getMinus, (, )]
[node]
[minusList]
[buildNew, (, tree, ., copySelf, (, ), )]
[tree, ., copySelf, (, )]
[tree]
[isEmpty, (, tree, )]
[tree]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[!, (, (, Boolean, ), node, ., getAttribute, (, ), )]
[(, (, Boolean, ), node, ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[isEmpty, (, node, ., getMinus, (, ), ), &&, isEmpty, (, node, ., getPlus, (, ), )]
[isEmpty, (, node, ., getMinus, (, ), )]
[node, ., getMinus, (, )]
[node]
[isEmpty, (, node, ., getPlus, (, ), )]
[node, ., getPlus, (, )]
[node]
[new, RegionFactory, <, S, >, (, ), ., difference, (, region, ,, this, ), ., isEmpty, (, )]
[new, RegionFactory, <, S, >, (, ), ., difference, (, region, ,, this, )]
[new, RegionFactory, <, S, >, (, )]
[region]
[this]
[checkPoint, (, tree, ,, point, )]
[tree]
[point]
[node, ., getCell, (, point, )]
[node]
[point]
[cell, ., getCut, (, ), ==, null]
[cell, ., getCut, (, )]
[cell]
[null]
[(, (, Boolean, ), cell, ., getAttribute, (, ), ), ?, Location, ., INSIDE, :, Location, ., OUTSIDE]
[(, (, Boolean, ), cell, ., getAttribute, (, ), )]
[(, Boolean, ), cell, ., getAttribute, (, )]
[cell, ., getAttribute, (, )]
[cell]
[Location, ., INSIDE]
[Location]
[Location, ., OUTSIDE]
[Location]
[checkPoint, (, cell, ., getMinus, (, ), ,, point, )]
[cell, ., getMinus, (, )]
[cell]
[point]
[checkPoint, (, cell, ., getPlus, (, ), ,, point, )]
[cell, ., getPlus, (, )]
[cell]
[point]
[(, minusCode, ==, plusCode, ), ?, minusCode, :, Location, ., BOUNDARY]
[(, minusCode, ==, plusCode, )]
[minusCode, ==, plusCode]
[minusCode]
[plusCode]
[minusCode]
[Location, ., BOUNDARY]
[Location]
[includeBoundaryAttributes, &&, (, tree, ., getCut, (, ), !=, null, ), &&, (, tree, ., getAttribute, (, ), ==, null, )]
[includeBoundaryAttributes, &&, (, tree, ., getCut, (, ), !=, null, )]
[includeBoundaryAttributes]
[(, tree, ., getCut, (, ), !=, null, )]
[tree, ., getCut, (, ), !=, null]
[tree, ., getCut, (, )]
[tree]
[null]
[(, tree, ., getAttribute, (, ), ==, null, )]
[tree, ., getAttribute, (, ), ==, null]
[tree, ., getAttribute, (, )]
[tree]
[null]
[tree, ., visit, (, new, BoundaryBuilder, <, S, >, (, ), )]
[tree]
[new, BoundaryBuilder, <, S, >, (, )]
[tree]
[Order, ., PLUS_MINUS_SUB]
[Order]
[null]
[null]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array]
[SubHyperplane, ., class]
[2]
[characterize, (, node, ., getPlus, (, ), ,, node, ., getCut, (, ), ., copySelf, (, ), ,, plusChar, )]
[node, ., getPlus, (, )]
[node]
[node, ., getCut, (, ), ., copySelf, (, )]
[node, ., getCut, (, )]
[node]
[plusChar]
[plusChar, [, 0, ], !=, null, &&, !, plusChar, [, 0, ], ., isEmpty, (, )]
[plusChar, [, 0, ], !=, null]
[plusChar, [, 0, ]]
[plusChar]
[0]
[null]
[!, plusChar, [, 0, ], ., isEmpty, (, )]
[plusChar, [, 0, ], ., isEmpty, (, )]
[plusChar, [, 0, ]]
[plusChar]
[0]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array]
[SubHyperplane, ., class]
[2]
[characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 0, ], ,, minusChar, )]
[node, ., getMinus, (, )]
[node]
[plusChar, [, 0, ]]
[plusChar]
[0]
[minusChar]
[minusChar, [, 1, ], !=, null, &&, !, minusChar, [, 1, ], ., isEmpty, (, )]
[minusChar, [, 1, ], !=, null]
[minusChar, [, 1, ]]
[minusChar]
[1]
[null]
[!, minusChar, [, 1, ], ., isEmpty, (, )]
[minusChar, [, 1, ], ., isEmpty, (, )]
[minusChar, [, 1, ]]
[minusChar]
[1]
[plusOutside]
[minusChar, [, 1, ]]
[minusChar]
[1]
[plusChar, [, 1, ], !=, null, &&, !, plusChar, [, 1, ], ., isEmpty, (, )]
[plusChar, [, 1, ], !=, null]
[plusChar, [, 1, ]]
[plusChar]
[1]
[null]
[!, plusChar, [, 1, ], ., isEmpty, (, )]
[plusChar, [, 1, ], ., isEmpty, (, )]
[plusChar, [, 1, ]]
[plusChar]
[1]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, SubHyperplane, <, S, >, [, ], ), Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array, ., newInstance, (, SubHyperplane, ., class, ,, 2, )]
[Array]
[SubHyperplane, ., class]
[2]
[characterize, (, node, ., getMinus, (, ), ,, plusChar, [, 1, ], ,, minusChar, )]
[node, ., getMinus, (, )]
[node]
[plusChar, [, 1, ]]
[plusChar]
[1]
[minusChar]
[minusChar, [, 0, ], !=, null, &&, !, minusChar, [, 0, ], ., isEmpty, (, )]
[minusChar, [, 0, ], !=, null]
[minusChar, [, 0, ]]
[minusChar]
[0]
[null]
[!, minusChar, [, 0, ], ., isEmpty, (, )]
[minusChar, [, 0, ], ., isEmpty, (, )]
[minusChar, [, 0, ]]
[minusChar]
[0]
[plusInside]
[minusChar, [, 0, ]]
[minusChar]
[0]
[node, ., setAttribute, (, new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, ), )]
[node]
[new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, )]
[plusOutside]
[plusInside]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[inside]
[characterization, [, 1, ], ==, null]
[characterization, [, 1, ]]
[characterization]
[1]
[null]
[characterization, [, 1, ]]
[characterization]
[1]
[sub]
[characterization, [, 1, ]]
[characterization]
[1]
[characterization, [, 1, ], ., reunite, (, sub, )]
[characterization, [, 1, ]]
[characterization]
[1]
[sub]
[characterization, [, 0, ], ==, null]
[characterization, [, 0, ]]
[characterization]
[0]
[null]
[characterization, [, 0, ]]
[characterization]
[0]
[sub]
[characterization, [, 0, ]]
[characterization]
[0]
[characterization, [, 0, ], ., reunite, (, sub, )]
[characterization, [, 0, ]]
[characterization]
[0]
[sub]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[sub, ., side, (, hyperplane, )]
[sub]
[hyperplane]
[PLUS]
[characterize, (, node, ., getPlus, (, ), ,, sub, ,, characterization, )]
[node, ., getPlus, (, )]
[node]
[sub]
[characterization]
[MINUS]
[characterize, (, node, ., getMinus, (, ), ,, sub, ,, characterization, )]
[node, ., getMinus, (, )]
[node]
[sub]
[characterization]
[BOTH]
[sub, ., split, (, hyperplane, )]
[sub]
[hyperplane]
[characterize, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, characterization, )]
[node, ., getPlus, (, )]
[node]
[split, ., getPlus, (, )]
[split]
[characterization]
[characterize, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, characterization, )]
[node, ., getMinus, (, )]
[node]
[split, ., getMinus, (, )]
[split]
[characterization]
[new, MathInternalError, (, )]
[new, BoundarySizeVisitor, <, S, >, (, )]
[getTree, (, true, ), ., visit, (, visitor, )]
[getTree, (, true, )]
[true]
[visitor]
[visitor, ., getSize, (, )]
[visitor]
[barycenter, ==, null]
[barycenter]
[null]
[computeGeometricalProperties, (, )]
[size]
[this, ., size]
[this]
[size]
[barycenter, ==, null]
[barycenter]
[null]
[computeGeometricalProperties, (, )]
[barycenter]
[this, ., barycenter]
[this]
[barycenter]
[new, Sides, (, )]
[recurseSides, (, tree, ,, hyperplane, ., wholeHyperplane, (, ), ,, sides, )]
[tree]
[hyperplane, ., wholeHyperplane, (, )]
[hyperplane]
[sides]
[sides, ., plusFound, (, ), ?, (, sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS, ), :, (, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, )]
[sides, ., plusFound, (, )]
[sides]
[(, sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS, )]
[sides, ., minusFound, (, ), ?, Side, ., BOTH, :, Side, ., PLUS]
[sides, ., minusFound, (, )]
[sides]
[Side, ., BOTH]
[Side]
[Side, ., PLUS]
[Side]
[(, sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER, )]
[sides, ., minusFound, (, ), ?, Side, ., MINUS, :, Side, ., HYPER]
[sides, ., minusFound, (, )]
[sides]
[Side, ., MINUS]
[Side]
[Side, ., HYPER]
[Side]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[sides, ., rememberPlusFound, (, )]
[sides]
[sides, ., rememberMinusFound, (, )]
[sides]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[sub, ., side, (, hyperplane, )]
[sub]
[hyperplane]
[PLUS]
[node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS]
[node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), )]
[node, ., getCut, (, )]
[node]
[sub, ., getHyperplane, (, )]
[sub]
[Side, ., PLUS]
[Side]
[!, isEmpty, (, node, ., getMinus, (, ), )]
[isEmpty, (, node, ., getMinus, (, ), )]
[node, ., getMinus, (, )]
[node]
[sides, ., rememberPlusFound, (, )]
[sides]
[!, isEmpty, (, node, ., getMinus, (, ), )]
[isEmpty, (, node, ., getMinus, (, ), )]
[node, ., getMinus, (, )]
[node]
[sides, ., rememberMinusFound, (, )]
[sides]
[!, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[(, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[sides, ., plusFound, (, ), &&, sides, ., minusFound, (, )]
[sides, ., plusFound, (, )]
[sides]
[sides, ., minusFound, (, )]
[sides]
[recurseSides, (, node, ., getPlus, (, ), ,, sub, ,, sides, )]
[node, ., getPlus, (, )]
[node]
[sub]
[sides]
[MINUS]
[node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), ), ==, Side, ., PLUS]
[node, ., getCut, (, ), ., side, (, sub, ., getHyperplane, (, ), )]
[node, ., getCut, (, )]
[node]
[sub, ., getHyperplane, (, )]
[sub]
[Side, ., PLUS]
[Side]
[!, isEmpty, (, node, ., getPlus, (, ), )]
[isEmpty, (, node, ., getPlus, (, ), )]
[node, ., getPlus, (, )]
[node]
[sides, ., rememberPlusFound, (, )]
[sides]
[!, isEmpty, (, node, ., getPlus, (, ), )]
[isEmpty, (, node, ., getPlus, (, ), )]
[node, ., getPlus, (, )]
[node]
[sides, ., rememberMinusFound, (, )]
[sides]
[!, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[(, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[sides, ., plusFound, (, ), &&, sides, ., minusFound, (, )]
[sides, ., plusFound, (, )]
[sides]
[sides, ., minusFound, (, )]
[sides]
[recurseSides, (, node, ., getMinus, (, ), ,, sub, ,, sides, )]
[node, ., getMinus, (, )]
[node]
[sub]
[sides]
[BOTH]
[sub, ., split, (, hyperplane, )]
[sub]
[hyperplane]
[recurseSides, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), ,, sides, )]
[node, ., getPlus, (, )]
[node]
[split, ., getPlus, (, )]
[split]
[sides]
[!, (, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[(, sides, ., plusFound, (, ), &&, sides, ., minusFound, (, ), )]
[sides, ., plusFound, (, ), &&, sides, ., minusFound, (, )]
[sides, ., plusFound, (, )]
[sides]
[sides, ., minusFound, (, )]
[sides]
[recurseSides, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), ,, sides, )]
[node, ., getMinus, (, )]
[node]
[split, ., getMinus, (, )]
[split]
[sides]
[node, ., getCut, (, ), ., getHyperplane, (, ), ., sameOrientationAs, (, sub, ., getHyperplane, (, ), )]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[sub, ., getHyperplane, (, )]
[sub]
[(, node, ., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), )]
[(, node, ., getPlus, (, ), ., getCut, (, ), !=, null, )]
[node, ., getPlus, (, ), ., getCut, (, ), !=, null]
[node, ., getPlus, (, ), ., getCut, (, )]
[node, ., getPlus, (, )]
[node]
[null]
[(, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, )]
[node, ., getPlus, (, ), ., getAttribute, (, )]
[node, ., getPlus, (, )]
[node]
[sides, ., rememberPlusFound, (, )]
[sides]
[(, node, ., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), )]
[(, node, ., getMinus, (, ), ., getCut, (, ), !=, null, )]
[node, ., getMinus, (, ), ., getCut, (, ), !=, null]
[node, ., getMinus, (, ), ., getCut, (, )]
[node, ., getMinus, (, )]
[node]
[null]
[(, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, )]
[node, ., getMinus, (, ), ., getAttribute, (, )]
[node, ., getMinus, (, )]
[node]
[sides, ., rememberMinusFound, (, )]
[sides]
[(, node, ., getPlus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), )]
[(, node, ., getPlus, (, ), ., getCut, (, ), !=, null, )]
[node, ., getPlus, (, ), ., getCut, (, ), !=, null]
[node, ., getPlus, (, ), ., getCut, (, )]
[node, ., getPlus, (, )]
[node]
[null]
[(, (, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getPlus, (, ), ., getAttribute, (, )]
[node, ., getPlus, (, ), ., getAttribute, (, )]
[node, ., getPlus, (, )]
[node]
[sides, ., rememberMinusFound, (, )]
[sides]
[(, node, ., getMinus, (, ), ., getCut, (, ), !=, null, ), ||, (, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), )]
[(, node, ., getMinus, (, ), ., getCut, (, ), !=, null, )]
[node, ., getMinus, (, ), ., getCut, (, ), !=, null]
[node, ., getMinus, (, ), ., getCut, (, )]
[node, ., getMinus, (, )]
[node]
[null]
[(, (, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getMinus, (, ), ., getAttribute, (, )]
[node, ., getMinus, (, ), ., getAttribute, (, )]
[node, ., getMinus, (, )]
[node]
[sides, ., rememberPlusFound, (, )]
[sides]
[plusFound]
[false]
[minusFound]
[false]
[plusFound]
[true]
[plusFound]
[minusFound]
[true]
[minusFound]
[recurseIntersection, (, tree, ,, sub, )]
[tree]
[sub]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[(, Boolean, ), node, ., getAttribute, (, ), ?, sub, ., copySelf, (, ), :, null]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[sub, ., copySelf, (, )]
[sub]
[null]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[sub, ., side, (, hyperplane, )]
[sub]
[hyperplane]
[PLUS]
[recurseIntersection, (, node, ., getPlus, (, ), ,, sub, )]
[node, ., getPlus, (, )]
[node]
[sub]
[MINUS]
[recurseIntersection, (, node, ., getMinus, (, ), ,, sub, )]
[node, ., getMinus, (, )]
[node]
[sub]
[BOTH]
[sub, ., split, (, hyperplane, )]
[sub]
[hyperplane]
[recurseIntersection, (, node, ., getPlus, (, ), ,, split, ., getPlus, (, ), )]
[node, ., getPlus, (, )]
[node]
[split, ., getPlus, (, )]
[split]
[recurseIntersection, (, node, ., getMinus, (, ), ,, split, ., getMinus, (, ), )]
[node, ., getMinus, (, )]
[node]
[split, ., getMinus, (, )]
[split]
[plus, ==, null]
[plus]
[null]
[minus]
[minus, ==, null]
[minus]
[null]
[plus]
[plus, ., reunite, (, minus, )]
[plus]
[minus]
[recurseIntersection, (, node, ., getPlus, (, ), ,, recurseIntersection, (, node, ., getMinus, (, ), ,, sub, ), )]
[node, ., getPlus, (, )]
[node]
[recurseIntersection, (, node, ., getMinus, (, ), ,, sub, )]
[node, ., getMinus, (, )]
[node]
[sub]
[buildNew, (, recurseTransform, (, getTree, (, false, ), ,, transform, ), )]
[recurseTransform, (, getTree, (, false, ), ,, transform, )]
[getTree, (, false, )]
[false]
[transform]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[new, BSPTree, <, S, >, (, node, ., getAttribute, (, ), )]
[node, ., getAttribute, (, )]
[node]
[node, ., getCut, (, )]
[node]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), sub, ), ., applyTransform, (, transform, )]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), sub, )]
[(, AbstractSubHyperplane, <, S, ,, T, >, ), sub]
[sub]
[transform]
[(, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[attribute, !=, null]
[attribute]
[null]
[(, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), ., applyTransform, (, transform, )]
[(, attribute, ., getPlusOutside, (, ), ==, null, )]
[attribute, ., getPlusOutside, (, ), ==, null]
[attribute, ., getPlusOutside, (, )]
[attribute]
[null]
[null]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), ), ., applyTransform, (, transform, )]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, ), )]
[(, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusOutside, (, )]
[attribute, ., getPlusOutside, (, )]
[attribute]
[transform]
[(, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :, (, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), ., applyTransform, (, transform, )]
[(, attribute, ., getPlusInside, (, ), ==, null, )]
[attribute, ., getPlusInside, (, ), ==, null]
[attribute, ., getPlusInside, (, )]
[attribute]
[null]
[null]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), ), ., applyTransform, (, transform, )]
[(, (, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, ), )]
[(, AbstractSubHyperplane, <, S, ,, T, >, ), attribute, ., getPlusInside, (, )]
[attribute, ., getPlusInside, (, )]
[attribute]
[transform]
[attribute]
[new, BoundaryAttribute, <, S, >, (, tPO, ,, tPI, )]
[tPO]
[tPI]
[new, BSPTree, <, S, >, (, tSub, ,, recurseTransform, (, node, ., getPlus, (, ), ,, transform, ), ,, recurseTransform, (, node, ., getMinus, (, ), ,, transform, ), ,, attribute, )]
[tSub]
[recurseTransform, (, node, ., getPlus, (, ), ,, transform, )]
[node, ., getPlus, (, )]
[node]
[transform]
[recurseTransform, (, node, ., getMinus, (, ), ,, transform, )]
[node, ., getMinus, (, )]
[node]
[transform]
[attribute]
