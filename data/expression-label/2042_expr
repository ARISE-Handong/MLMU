[(, long, ), Math, ., pow, (, 2, ,, 53, )]
[Math, ., pow, (, 2, ,, 53, )]
[Math]
[2]
[53]
["JSCompiler_renameProperty"]
[0x7f]
[new, HashSet, <, String, >, (, Arrays, ., asList, (, "Array", ,, "Date", ,, "Error", ,, "Object", ,, "RegExp", ,, "XMLHttpRequest", ), )]
[Arrays, ., asList, (, "Array", ,, "Date", ,, "Error", ,, "Object", ,, "RegExp", ,, "XMLHttpRequest", )]
[Arrays]
["Array"]
["Date"]
["Error"]
["Object"]
["RegExp"]
["XMLHttpRequest"]
[n, ., getType, (, )]
[n]
[Token, ., ASSIGN]
[Token]
[Token, ., COMMA]
[Token]
[getImpureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., NOT]
[Token]
[getImpureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[value, ., not, (, )]
[value]
[Token, ., AND]
[Token]
[getImpureBooleanValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[getImpureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[lhs, ., and, (, rhs, )]
[lhs]
[rhs]
[Token, ., OR]
[Token]
[getImpureBooleanValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[getImpureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[lhs, ., or, (, rhs, )]
[lhs]
[rhs]
[Token, ., HOOK]
[Token]
[getImpureBooleanValue, (, n, ., getFirstChild, (, ), ., getNext, (, ), )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[getImpureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[trueValue, ., equals, (, falseValue, )]
[trueValue]
[falseValue]
[trueValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[TernaryValue, ., TRUE]
[TernaryValue]
[Token, ., VOID]
[Token]
[TernaryValue, ., FALSE]
[TernaryValue]
[getPureBooleanValue, (, n, )]
[n]
[n, ., getType, (, )]
[n]
[Token, ., STRING]
[Token]
[TernaryValue, ., forBoolean, (, n, ., getString, (, ), ., length, (, ), >, 0, )]
[TernaryValue]
[n, ., getString, (, ), ., length, (, ), >, 0]
[n, ., getString, (, ), ., length, (, )]
[n, ., getString, (, )]
[n]
[0]
[Token, ., NUMBER]
[Token]
[TernaryValue, ., forBoolean, (, n, ., getDouble, (, ), !=, 0, )]
[TernaryValue]
[n, ., getDouble, (, ), !=, 0]
[n, ., getDouble, (, )]
[n]
[0]
[Token, ., NOT]
[Token]
[getPureBooleanValue, (, n, ., getLastChild, (, ), ), ., not, (, )]
[getPureBooleanValue, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., NULL]
[Token]
[Token, ., FALSE]
[Token]
[TernaryValue, ., FALSE]
[TernaryValue]
[Token, ., VOID]
[Token]
[!, mayHaveSideEffects, (, n, ., getFirstChild, (, ), )]
[mayHaveSideEffects, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[TernaryValue, ., FALSE]
[TernaryValue]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
["undefined", ., equals, (, name, ), ||, "NaN", ., equals, (, name, )]
["undefined", ., equals, (, name, )]
["undefined"]
[name]
["NaN", ., equals, (, name, )]
["NaN"]
[name]
[TernaryValue, ., FALSE]
[TernaryValue]
["Infinity", ., equals, (, name, )]
["Infinity"]
[name]
[TernaryValue, ., TRUE]
[TernaryValue]
[Token, ., TRUE]
[Token]
[Token, ., REGEXP]
[Token]
[TernaryValue, ., TRUE]
[TernaryValue]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[!, mayHaveSideEffects, (, n, )]
[mayHaveSideEffects, (, n, )]
[n]
[TernaryValue, ., TRUE]
[TernaryValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[n, ., getType, (, )]
[n]
[Token, ., STRING]
[Token]
[Token, ., STRING_KEY]
[Token]
[n, ., getString, (, )]
[n]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
["undefined", ., equals, (, name, ), ||, "Infinity", ., equals, (, name, ), ||, "NaN", ., equals, (, name, )]
["undefined", ., equals, (, name, ), ||, "Infinity", ., equals, (, name, )]
["undefined", ., equals, (, name, )]
["undefined"]
[name]
["Infinity", ., equals, (, name, )]
["Infinity"]
[name]
["NaN", ., equals, (, name, )]
["NaN"]
[name]
[name]
[Token, ., NUMBER]
[Token]
[getStringValue, (, n, ., getDouble, (, ), )]
[n, ., getDouble, (, )]
[n]
[Token, ., FALSE]
[Token]
["false"]
[Token, ., TRUE]
[Token]
["true"]
[Token, ., NULL]
[Token]
["null"]
[Token, ., VOID]
[Token]
["undefined"]
[Token, ., NOT]
[Token]
[getPureBooleanValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[child, !=, TernaryValue, ., UNKNOWN]
[child]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[child, ., toBoolean, (, true, ), ?, "false", :, "true"]
[child, ., toBoolean, (, true, )]
[child]
[true]
["false"]
["true"]
[Token, ., ARRAYLIT]
[Token]
[arrayToString, (, n, )]
[n]
[Token, ., OBJECTLIT]
[Token]
["[object Object]"]
[null]
[(, long, ), value]
[value]
[longValue, ==, value]
[longValue]
[value]
[Long, ., toString, (, longValue, )]
[Long]
[longValue]
[Double, ., toString, (, value, )]
[Double]
[value]
[(, NodeUtil, ., isNullOrUndefined, (, n, ), ||, n, ., isEmpty, (, ), ), ?, "", :, getStringValue, (, n, )]
[(, NodeUtil, ., isNullOrUndefined, (, n, ), ||, n, ., isEmpty, (, ), )]
[NodeUtil, ., isNullOrUndefined, (, n, ), ||, n, ., isEmpty, (, )]
[NodeUtil, ., isNullOrUndefined, (, n, )]
[NodeUtil]
[n]
[n, ., isEmpty, (, )]
[n]
[""]
[getStringValue, (, n, )]
[n]
[literal, ., getFirstChild, (, )]
[literal]
[new, StringBuilder, (, )]
[0]
[0]
[first]
[n, !=, null]
[n]
[null]
[n]
[n, ., getNext, (, )]
[n]
[getArrayElementStringValue, (, n, )]
[n]
[childValue, ==, null]
[childValue]
[null]
[null]
[n, !=, first]
[n]
[first]
[result, ., append, (, ',', )]
[result]
[',']
[result, ., append, (, childValue, )]
[result]
[childValue]
[nextSlot, ++]
[nextSlot]
[result, ., toString, (, )]
[result]
[n, ., getType, (, )]
[n]
[Token, ., TRUE]
[Token]
[1.0]
[Token, ., FALSE]
[Token]
[Token, ., NULL]
[Token]
[0.0]
[Token, ., NUMBER]
[Token]
[n, ., getDouble, (, )]
[n]
[Token, ., VOID]
[Token]
[mayHaveSideEffects, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[null]
[Double, ., NaN]
[Double]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
[name, ., equals, (, "undefined", )]
[name]
["undefined"]
[Double, ., NaN]
[Double]
[name, ., equals, (, "NaN", )]
[name]
["NaN"]
[Double, ., NaN]
[Double]
[name, ., equals, (, "Infinity", )]
[name]
["Infinity"]
[Double, ., POSITIVE_INFINITY]
[Double]
[null]
[Token, ., NEG]
[Token]
[n, ., getChildCount, (, ), ==, 1, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, n, ., getFirstChild, (, ), ., getString, (, ), ., equals, (, "Infinity", )]
[n, ., getChildCount, (, ), ==, 1, &&, n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getChildCount, (, ), ==, 1]
[n, ., getChildCount, (, )]
[n]
[1]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getString, (, ), ., equals, (, "Infinity", )]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
["Infinity"]
[Double, ., NEGATIVE_INFINITY]
[Double]
[null]
[Token, ., NOT]
[Token]
[getPureBooleanValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[child, !=, TernaryValue, ., UNKNOWN]
[child]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[child, ., toBoolean, (, true, ), ?, 0.0, :, 1.0]
[child, ., toBoolean, (, true, )]
[child]
[true]
[0.0]
[1.0]
[Token, ., STRING]
[Token]
[getStringNumberValue, (, n, ., getString, (, ), )]
[n, ., getString, (, )]
[n]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[getStringValue, (, n, )]
[n]
[value, !=, null, ?, getStringNumberValue, (, value, ), :, null]
[value, !=, null]
[value]
[null]
[getStringNumberValue, (, value, )]
[value]
[null]
[null]
[rawJsString, ., contains, (, "\u000b", )]
[rawJsString]
["\u000b"]
[null]
[trimJsWhiteSpace, (, rawJsString, )]
[rawJsString]
[s, ., length, (, ), ==, 0]
[s, ., length, (, )]
[s]
[0]
[0.0]
[s, ., length, (, ), >, 2, &&, s, ., charAt, (, 0, ), ==, '0', &&, (, s, ., charAt, (, 1, ), ==, 'x', ||, s, ., charAt, (, 1, ), ==, 'X', )]
[s, ., length, (, ), >, 2, &&, s, ., charAt, (, 0, ), ==, '0']
[s, ., length, (, ), >, 2]
[s, ., length, (, )]
[s]
[2]
[s, ., charAt, (, 0, ), ==, '0']
[s, ., charAt, (, 0, )]
[s]
[0]
['0']
[(, s, ., charAt, (, 1, ), ==, 'x', ||, s, ., charAt, (, 1, ), ==, 'X', )]
[s, ., charAt, (, 1, ), ==, 'x', ||, s, ., charAt, (, 1, ), ==, 'X']
[s, ., charAt, (, 1, ), ==, 'x']
[s, ., charAt, (, 1, )]
[s]
[1]
['x']
[s, ., charAt, (, 1, ), ==, 'X']
[s, ., charAt, (, 1, )]
[s]
[1]
['X']
[Double, ., valueOf, (, Integer, ., parseInt, (, s, ., substring, (, 2, ), ,, 16, ), )]
[Double]
[Integer, ., parseInt, (, s, ., substring, (, 2, ), ,, 16, )]
[Integer]
[s, ., substring, (, 2, )]
[s]
[2]
[16]
[Double, ., NaN]
[Double]
[s, ., length, (, ), >, 3, &&, (, s, ., charAt, (, 0, ), ==, '-', ||, s, ., charAt, (, 0, ), ==, '+', ), &&, s, ., charAt, (, 1, ), ==, '0', &&, (, s, ., charAt, (, 2, ), ==, 'x', ||, s, ., charAt, (, 2, ), ==, 'X', )]
[s, ., length, (, ), >, 3, &&, (, s, ., charAt, (, 0, ), ==, '-', ||, s, ., charAt, (, 0, ), ==, '+', ), &&, s, ., charAt, (, 1, ), ==, '0']
[s, ., length, (, ), >, 3, &&, (, s, ., charAt, (, 0, ), ==, '-', ||, s, ., charAt, (, 0, ), ==, '+', )]
[s, ., length, (, ), >, 3]
[s, ., length, (, )]
[s]
[3]
[(, s, ., charAt, (, 0, ), ==, '-', ||, s, ., charAt, (, 0, ), ==, '+', )]
[s, ., charAt, (, 0, ), ==, '-', ||, s, ., charAt, (, 0, ), ==, '+']
[s, ., charAt, (, 0, ), ==, '-']
[s, ., charAt, (, 0, )]
[s]
[0]
['-']
[s, ., charAt, (, 0, ), ==, '+']
[s, ., charAt, (, 0, )]
[s]
[0]
['+']
[s, ., charAt, (, 1, ), ==, '0']
[s, ., charAt, (, 1, )]
[s]
[1]
['0']
[(, s, ., charAt, (, 2, ), ==, 'x', ||, s, ., charAt, (, 2, ), ==, 'X', )]
[s, ., charAt, (, 2, ), ==, 'x', ||, s, ., charAt, (, 2, ), ==, 'X']
[s, ., charAt, (, 2, ), ==, 'x']
[s, ., charAt, (, 2, )]
[s]
[2]
['x']
[s, ., charAt, (, 2, ), ==, 'X']
[s, ., charAt, (, 2, )]
[s]
[2]
['X']
[null]
[s, ., equals, (, "infinity", ), ||, s, ., equals, (, "-infinity", ), ||, s, ., equals, (, "+infinity", )]
[s, ., equals, (, "infinity", ), ||, s, ., equals, (, "-infinity", )]
[s, ., equals, (, "infinity", )]
[s]
["infinity"]
[s, ., equals, (, "-infinity", )]
[s]
["-infinity"]
[s, ., equals, (, "+infinity", )]
[s]
["+infinity"]
[null]
[Double, ., parseDouble, (, s, )]
[Double]
[s]
[Double, ., NaN]
[Double]
[0]
[s, ., length, (, )]
[s]
[end, >, 0, &&, isStrWhiteSpaceChar, (, s, ., charAt, (, end, -, 1, ), ), ==, TernaryValue, ., TRUE]
[end, >, 0]
[end]
[0]
[isStrWhiteSpaceChar, (, s, ., charAt, (, end, -, 1, ), ), ==, TernaryValue, ., TRUE]
[isStrWhiteSpaceChar, (, s, ., charAt, (, end, -, 1, ), )]
[s, ., charAt, (, end, -, 1, )]
[s]
[end, -, 1]
[end]
[1]
[TernaryValue, ., TRUE]
[TernaryValue]
[end, --]
[end]
[start, <, end, &&, isStrWhiteSpaceChar, (, s, ., charAt, (, start, ), ), ==, TernaryValue, ., TRUE]
[start, <, end]
[start]
[end]
[isStrWhiteSpaceChar, (, s, ., charAt, (, start, ), ), ==, TernaryValue, ., TRUE]
[isStrWhiteSpaceChar, (, s, ., charAt, (, start, ), )]
[s, ., charAt, (, start, )]
[s]
[start]
[TernaryValue, ., TRUE]
[TernaryValue]
[start, ++]
[start]
[s, ., substring, (, start, ,, end, )]
[s]
[start]
[end]
[c]
['\u000B']
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[' ']
['\n']
['\r']
['\t']
['\u00A0']
['\u000C']
['\u2028']
['\u2029']
['\uFEFF']
[TernaryValue, ., TRUE]
[TernaryValue]
[(, Character, ., getType, (, c, ), ==, Character, ., SPACE_SEPARATOR, ), ?, TernaryValue, ., TRUE, :, TernaryValue, ., FALSE]
[(, Character, ., getType, (, c, ), ==, Character, ., SPACE_SEPARATOR, )]
[Character, ., getType, (, c, ), ==, Character, ., SPACE_SEPARATOR]
[Character, ., getType, (, c, )]
[Character]
[c]
[Character, ., SPACE_SEPARATOR]
[Character]
[TernaryValue, ., TRUE]
[TernaryValue]
[TernaryValue, ., FALSE]
[TernaryValue]
[Preconditions, ., checkState, (, n, ., isFunction, (, ), )]
[Preconditions]
[n, ., isFunction, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., NAME]
[Token]
[parent, ., getQualifiedName, (, )]
[parent]
[Token, ., ASSIGN]
[Token]
[parent, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[name]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[null]
[getFunctionName, (, n, )]
[n]
[name, !=, null]
[name]
[null]
[name]
[n, ., getParent, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., SETTER_DEF]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., STRING_KEY]
[Token]
[parent, ., getString, (, )]
[parent]
[Token, ., NUMBER]
[Token]
[getStringValue, (, parent, )]
[parent]
[null]
[n, ., getType, (, )]
[n]
[Token, ., STRING]
[Token]
[Token, ., NUMBER]
[Token]
[Token, ., NULL]
[Token]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[true]
[Token, ., CAST]
[Token]
[Token, ., NOT]
[Token]
[isImmutableValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., VOID]
[Token]
[Token, ., NEG]
[Token]
[isImmutableValue, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
["undefined", ., equals, (, name, ), ||, "Infinity", ., equals, (, name, ), ||, "NaN", ., equals, (, name, )]
["undefined", ., equals, (, name, ), ||, "Infinity", ., equals, (, name, )]
["undefined", ., equals, (, name, )]
["undefined"]
[name]
["Infinity", ., equals, (, name, )]
["Infinity"]
[name]
["NaN", ., equals, (, name, )]
["NaN"]
[name]
[false]
[n, ., getType, (, )]
[n]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., MUL]
[Token]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., GT]
[Token]
[Token, ., GE]
[Token]
[Token, ., LT]
[Token]
[Token, ., LE]
[Token]
[true]
[false]
[type]
[Token, ., GT]
[Token]
[Token, ., LT]
[Token]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., GE]
[Token]
[Token, ., LE]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[Token, ., ERROR]
[Token]
[n, ., getType, (, )]
[n]
[Token, ., CAST]
[Token]
[isLiteralValue, (, n, ., getFirstChild, (, ), ,, includeFunctions, )]
[n, ., getFirstChild, (, )]
[n]
[includeFunctions]
[Token, ., ARRAYLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[(, !, child, ., isEmpty, (, ), ), &&, !, isLiteralValue, (, child, ,, includeFunctions, )]
[(, !, child, ., isEmpty, (, ), )]
[!, child, ., isEmpty, (, )]
[child, ., isEmpty, (, )]
[child]
[!, isLiteralValue, (, child, ,, includeFunctions, )]
[isLiteralValue, (, child, ,, includeFunctions, )]
[child]
[includeFunctions]
[false]
[true]
[Token, ., REGEXP]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[!, isLiteralValue, (, child, ,, includeFunctions, )]
[isLiteralValue, (, child, ,, includeFunctions, )]
[child]
[includeFunctions]
[false]
[true]
[Token, ., OBJECTLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[!, isLiteralValue, (, child, ., getFirstChild, (, ), ,, includeFunctions, )]
[isLiteralValue, (, child, ., getFirstChild, (, ), ,, includeFunctions, )]
[child, ., getFirstChild, (, )]
[child]
[includeFunctions]
[false]
[true]
[Token, ., FUNCTION]
[Token]
[includeFunctions, &&, !, NodeUtil, ., isFunctionDeclaration, (, n, )]
[includeFunctions]
[!, NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[isImmutableValue, (, n, )]
[n]
[val, ., getType, (, )]
[val]
[Token, ., STRING]
[Token]
[Token, ., NUMBER]
[Token]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[true]
[Token, ., ADD]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., DIV]
[Token]
[Token, ., EQ]
[Token]
[Token, ., GE]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., LSH]
[Token]
[Token, ., LT]
[Token]
[Token, ., MOD]
[Token]
[Token, ., MUL]
[Token]
[Token, ., NE]
[Token]
[Token, ., RSH]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., SUB]
[Token]
[Token, ., URSH]
[Token]
[isValidDefineValue, (, val, ., getFirstChild, (, ), ,, defines, ), &&, isValidDefineValue, (, val, ., getLastChild, (, ), ,, defines, )]
[isValidDefineValue, (, val, ., getFirstChild, (, ), ,, defines, )]
[val, ., getFirstChild, (, )]
[val]
[defines]
[isValidDefineValue, (, val, ., getLastChild, (, ), ,, defines, )]
[val, ., getLastChild, (, )]
[val]
[defines]
[Token, ., NOT]
[Token]
[Token, ., NEG]
[Token]
[Token, ., POS]
[Token]
[isValidDefineValue, (, val, ., getFirstChild, (, ), ,, defines, )]
[val, ., getFirstChild, (, )]
[val]
[defines]
[Token, ., NAME]
[Token]
[Token, ., GETPROP]
[Token]
[val, ., isQualifiedName, (, )]
[val]
[defines, ., contains, (, val, ., getQualifiedName, (, ), )]
[defines]
[val, ., getQualifiedName, (, )]
[val]
[false]
[!, block, ., isBlock, (, )]
[block, ., isBlock, (, )]
[block]
[false]
[block, ., getFirstChild, (, )]
[block]
[n, !=, null]
[n]
[null]
[n]
[n, ., getNext, (, )]
[n]
[!, n, ., isEmpty, (, )]
[n, ., isEmpty, (, )]
[n]
[false]
[true]
[isSimpleOperatorType, (, n, ., getType, (, ), )]
[n, ., getType, (, )]
[n]
[type]
[Token, ., ADD]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., COMMA]
[Token]
[Token, ., DIV]
[Token]
[Token, ., EQ]
[Token]
[Token, ., GE]
[Token]
[Token, ., GETELEM]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., GT]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., LE]
[Token]
[Token, ., LSH]
[Token]
[Token, ., LT]
[Token]
[Token, ., MOD]
[Token]
[Token, ., MUL]
[Token]
[Token, ., NE]
[Token]
[Token, ., NOT]
[Token]
[Token, ., RSH]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., SUB]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Token, ., URSH]
[Token]
[true]
[false]
[IR, ., exprResult, (, child, ), ., srcref, (, child, )]
[IR, ., exprResult, (, child, )]
[IR]
[child]
[child]
[mayEffectMutableState, (, n, ,, null, )]
[n]
[null]
[checkForStateChangeHelper, (, n, ,, true, ,, compiler, )]
[n]
[true]
[compiler]
[mayHaveSideEffects, (, n, ,, null, )]
[n]
[null]
[checkForStateChangeHelper, (, n, ,, false, ,, compiler, )]
[n]
[false]
[compiler]
[n, ., getType, (, )]
[n]
[Token, ., CAST]
[Token]
[Token, ., AND]
[Token]
[Token, ., BLOCK]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., IF]
[Token]
[Token, ., IN]
[Token]
[Token, ., PARAM_LIST]
[Token]
[Token, ., NUMBER]
[Token]
[Token, ., OR]
[Token]
[Token, ., THIS]
[Token]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., NULL]
[Token]
[Token, ., STRING]
[Token]
[Token, ., STRING_KEY]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., TRY]
[Token]
[Token, ., EMPTY]
[Token]
[Token, ., THROW]
[Token]
[true]
[Token, ., OBJECTLIT]
[Token]
[checkForNewObjects]
[true]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[checkForStateChangeHelper, (, c, ., getFirstChild, (, ), ,, checkForNewObjects, ,, compiler, )]
[c, ., getFirstChild, (, )]
[c]
[checkForNewObjects]
[compiler]
[true]
[false]
[Token, ., ARRAYLIT]
[Token]
[Token, ., REGEXP]
[Token]
[checkForNewObjects]
[true]
[Token, ., VAR]
[Token]
[Token, ., NAME]
[Token]
[n, ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, )]
[n]
[null]
[true]
[Token, ., FUNCTION]
[Token]
[checkForNewObjects, ||, !, isFunctionExpression, (, n, )]
[checkForNewObjects]
[!, isFunctionExpression, (, n, )]
[isFunctionExpression, (, n, )]
[n]
[Token, ., NEW]
[Token]
[checkForNewObjects]
[true]
[!, constructorCallHasSideEffects, (, n, )]
[constructorCallHasSideEffects, (, n, )]
[n]
[true]
[Token, ., CALL]
[Token]
[!, functionCallHasSideEffects, (, n, ,, compiler, )]
[functionCallHasSideEffects, (, n, ,, compiler, )]
[n]
[compiler]
[true]
[isSimpleOperator, (, n, )]
[n]
[isAssignmentOp, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[assignTarget, ., isName, (, )]
[assignTarget]
[true]
[checkForStateChangeHelper, (, n, ., getFirstChild, (, ), ,, checkForNewObjects, ,, compiler, ), ||, checkForStateChangeHelper, (, n, ., getLastChild, (, ), ,, checkForNewObjects, ,, compiler, )]
[checkForStateChangeHelper, (, n, ., getFirstChild, (, ), ,, checkForNewObjects, ,, compiler, )]
[n, ., getFirstChild, (, )]
[n]
[checkForNewObjects]
[compiler]
[checkForStateChangeHelper, (, n, ., getLastChild, (, ), ,, checkForNewObjects, ,, compiler, )]
[n, ., getLastChild, (, )]
[n]
[checkForNewObjects]
[compiler]
[true]
[isGet, (, assignTarget, )]
[assignTarget]
[assignTarget, ., getFirstChild, (, )]
[assignTarget]
[evaluatesToLocalValue, (, current, )]
[current]
[false]
[isGet, (, current, )]
[current]
[current]
[current, ., getFirstChild, (, )]
[current]
[!, isLiteralValue, (, current, ,, true, )]
[isLiteralValue, (, current, ,, true, )]
[current]
[true]
[!, isLiteralValue, (, assignTarget, ,, true, )]
[isLiteralValue, (, assignTarget, ,, true, )]
[assignTarget]
[true]
[true]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[checkForStateChangeHelper, (, c, ,, checkForNewObjects, ,, compiler, )]
[c]
[checkForNewObjects]
[compiler]
[true]
[false]
[constructorCallHasSideEffects, (, callNode, ,, null, )]
[callNode]
[null]
[!, callNode, ., isNew, (, )]
[callNode, ., isNew, (, )]
[callNode]
[new, IllegalStateException, (, "Expected NEW node, got ", +, Token, ., name, (, callNode, ., getType, (, ), ), )]
["Expected NEW node, got ", +, Token, ., name, (, callNode, ., getType, (, ), )]
["Expected NEW node, got "]
[Token, ., name, (, callNode, ., getType, (, ), )]
[Token]
[callNode, ., getType, (, )]
[callNode]
[callNode, ., isNoSideEffectsCall, (, )]
[callNode]
[false]
[callNode, ., getFirstChild, (, )]
[callNode]
[nameNode, ., isName, (, ), &&, CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, ., contains, (, nameNode, ., getString, (, ), )]
[nameNode, ., isName, (, )]
[nameNode]
[CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, ., contains, (, nameNode, ., getString, (, ), )]
[CONSTRUCTORS_WITHOUT_SIDE_EFFECTS]
[nameNode, ., getString, (, )]
[nameNode]
[false]
[true]
[ImmutableSet, ., of, (, "Object", ,, "Array", ,, "String", ,, "Number", ,, "Boolean", ,, "RegExp", ,, "Error", )]
[ImmutableSet]
["Object"]
["Array"]
["String"]
["Number"]
["Boolean"]
["RegExp"]
["Error"]
[ImmutableSet, ., of, (, "toString", ,, "valueOf", )]
[ImmutableSet]
["toString"]
["valueOf"]
[ImmutableSet, ., of, (, "test", ,, "exec", )]
[ImmutableSet]
["test"]
["exec"]
[ImmutableSet, ., of, (, "match", ,, "replace", ,, "search", ,, "split", )]
[ImmutableSet]
["match"]
["replace"]
["search"]
["split"]
[functionCallHasSideEffects, (, callNode, ,, null, )]
[callNode]
[null]
[!, callNode, ., isCall, (, )]
[callNode, ., isCall, (, )]
[callNode]
[new, IllegalStateException, (, "Expected CALL node, got ", +, Token, ., name, (, callNode, ., getType, (, ), ), )]
["Expected CALL node, got ", +, Token, ., name, (, callNode, ., getType, (, ), )]
["Expected CALL node, got "]
[Token, ., name, (, callNode, ., getType, (, ), )]
[Token]
[callNode, ., getType, (, )]
[callNode]
[callNode, ., isNoSideEffectsCall, (, )]
[callNode]
[false]
[callNode, ., getFirstChild, (, )]
[callNode]
[nameNode, ., isName, (, )]
[nameNode]
[nameNode, ., getString, (, )]
[nameNode]
[BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS, ., contains, (, name, )]
[BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS]
[name]
[false]
[nameNode, ., isGetProp, (, )]
[nameNode]
[callNode, ., hasOneChild, (, ), &&, OBJECT_METHODS_WITHOUT_SIDEEFFECTS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[callNode, ., hasOneChild, (, )]
[callNode]
[OBJECT_METHODS_WITHOUT_SIDEEFFECTS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[OBJECT_METHODS_WITHOUT_SIDEEFFECTS]
[nameNode, ., getLastChild, (, ), ., getString, (, )]
[nameNode, ., getLastChild, (, )]
[nameNode]
[false]
[callNode, ., isOnlyModifiesThisCall, (, ), &&, evaluatesToLocalValue, (, nameNode, ., getFirstChild, (, ), )]
[callNode, ., isOnlyModifiesThisCall, (, )]
[callNode]
[evaluatesToLocalValue, (, nameNode, ., getFirstChild, (, ), )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[false]
[nameNode, ., getFirstChild, (, ), ., isName, (, )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
["Math.floor", ., equals, (, nameNode, ., getQualifiedName, (, ), )]
["Math.floor"]
[nameNode, ., getQualifiedName, (, )]
[nameNode]
[false]
[compiler, !=, null, &&, !, compiler, ., hasRegExpGlobalReferences, (, )]
[compiler, !=, null]
[compiler]
[null]
[!, compiler, ., hasRegExpGlobalReferences, (, )]
[compiler, ., hasRegExpGlobalReferences, (, )]
[compiler]
[nameNode, ., getFirstChild, (, ), ., isRegExp, (, ), &&, REGEXP_METHODS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[nameNode, ., getFirstChild, (, ), ., isRegExp, (, )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[REGEXP_METHODS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[REGEXP_METHODS]
[nameNode, ., getLastChild, (, ), ., getString, (, )]
[nameNode, ., getLastChild, (, )]
[nameNode]
[false]
[nameNode, ., getFirstChild, (, ), ., isString, (, ), &&, STRING_REGEXP_METHODS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[nameNode, ., getFirstChild, (, ), ., isString, (, )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[STRING_REGEXP_METHODS, ., contains, (, nameNode, ., getLastChild, (, ), ., getString, (, ), )]
[STRING_REGEXP_METHODS]
[nameNode, ., getLastChild, (, ), ., getString, (, )]
[nameNode, ., getLastChild, (, )]
[nameNode]
[nameNode, ., getNext, (, )]
[nameNode]
[param, !=, null, &&, (, param, ., isString, (, ), ||, param, ., isRegExp, (, ), )]
[param, !=, null]
[param]
[null]
[(, param, ., isString, (, ), ||, param, ., isRegExp, (, ), )]
[param, ., isString, (, ), ||, param, ., isRegExp, (, )]
[param, ., isString, (, )]
[param]
[param, ., isRegExp, (, )]
[param]
[false]
[true]
[Preconditions, ., checkState, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[(, n, ., getSideEffectFlags, (, ), &, Node, ., FLAG_LOCAL_RESULTS, ), >, 0]
[(, n, ., getSideEffectFlags, (, ), &, Node, ., FLAG_LOCAL_RESULTS, )]
[n, ., getSideEffectFlags, (, ), &, Node, ., FLAG_LOCAL_RESULTS]
[n, ., getSideEffectFlags, (, )]
[n]
[Node, ., FLAG_LOCAL_RESULTS]
[Node]
[0]
[Preconditions, ., checkState, (, n, ., isNew, (, ), )]
[Preconditions]
[n, ., isNew, (, )]
[n]
[n, ., isOnlyModifiesThisCall, (, )]
[n]
[nodeTypeMayHaveSideEffects, (, n, ,, null, )]
[n]
[null]
[isAssignmentOp, (, n, )]
[n]
[true]
[n, ., getType, (, )]
[n]
[Token, ., DELPROP]
[Token]
[Token, ., DEC]
[Token]
[Token, ., INC]
[Token]
[Token, ., THROW]
[Token]
[true]
[Token, ., CALL]
[Token]
[NodeUtil, ., functionCallHasSideEffects, (, n, ,, compiler, )]
[NodeUtil]
[n]
[compiler]
[Token, ., NEW]
[Token]
[NodeUtil, ., constructorCallHasSideEffects, (, n, ,, compiler, )]
[NodeUtil]
[n]
[compiler]
[Token, ., NAME]
[Token]
[n, ., hasChildren, (, )]
[n]
[false]
[Collections, ., emptySet, (, )]
[Collections]
[canBeSideEffected, (, n, ,, emptySet, )]
[n]
[emptySet]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[Token, ., NEW]
[Token]
[true]
[Token, ., NAME]
[Token]
[!, isConstantName, (, n, ), &&, !, knownConstants, ., contains, (, n, ., getString, (, ), )]
[!, isConstantName, (, n, )]
[isConstantName, (, n, )]
[n]
[!, knownConstants, ., contains, (, n, ., getString, (, ), )]
[knownConstants, ., contains, (, n, ., getString, (, ), )]
[knownConstants]
[n, ., getString, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[true]
[Token, ., FUNCTION]
[Token]
[Preconditions, ., checkState, (, isFunctionExpression, (, n, ), )]
[Preconditions]
[isFunctionExpression, (, n, )]
[n]
[false]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[canBeSideEffected, (, c, ,, knownConstants, )]
[c]
[knownConstants]
[true]
[false]
[type]
[Token, ., COMMA]
[Token]
[0]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., ASSIGN]
[Token]
[1]
[Token, ., HOOK]
[Token]
[2]
[Token, ., OR]
[Token]
[3]
[Token, ., AND]
[Token]
[4]
[Token, ., BITOR]
[Token]
[5]
[Token, ., BITXOR]
[Token]
[6]
[Token, ., BITAND]
[Token]
[7]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[8]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., IN]
[Token]
[9]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., URSH]
[Token]
[10]
[Token, ., SUB]
[Token]
[Token, ., ADD]
[Token]
[11]
[Token, ., MUL]
[Token]
[Token, ., MOD]
[Token]
[Token, ., DIV]
[Token]
[12]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[Token, ., NEW]
[Token]
[Token, ., DELPROP]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[Token, ., NOT]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[13]
[Token, ., CALL]
[Token]
[Token, ., GETELEM]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., ARRAYLIT]
[Token]
[Token, ., EMPTY]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., NAME]
[Token]
[Token, ., NULL]
[Token]
[Token, ., NUMBER]
[Token]
[Token, ., OBJECTLIT]
[Token]
[Token, ., REGEXP]
[Token]
[Token, ., STRING]
[Token]
[Token, ., STRING_KEY]
[Token]
[Token, ., THIS]
[Token]
[Token, ., TRUE]
[Token]
[15]
[Token, ., CAST]
[Token]
[16]
[new, Error, (, "Unknown precedence for ", +, Token, ., name, (, type, ), +, " (type ", +, type, +, ")", )]
["Unknown precedence for ", +, Token, ., name, (, type, ), +, " (type ", +, type, +, ")"]
["Unknown precedence for ", +, Token, ., name, (, type, ), +, " (type ", +, type]
["Unknown precedence for ", +, Token, ., name, (, type, ), +, " (type "]
["Unknown precedence for ", +, Token, ., name, (, type, )]
["Unknown precedence for "]
[Token, ., name, (, type, )]
[Token]
[type]
[" (type "]
[type]
[")"]
[n, ., getType, (, )]
[n]
[Token, ., VOID]
[Token]
[true]
[Token, ., NAME]
[Token]
[n, ., getString, (, ), ., equals, (, "undefined", )]
[n, ., getString, (, )]
[n]
["undefined"]
[false]
[n, ., isNull, (, ), ||, isUndefined, (, n, )]
[n, ., isNull, (, )]
[n]
[isUndefined, (, n, )]
[n]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, return, isImmutableValue, (, n, ), ;, }, }]
[isImmutableValue, (, n, )]
[n]
[allResultsMatch, (, n, ,, IMMUTABLE_PREDICATE, )]
[n]
[IMMUTABLE_PREDICATE]
[n, ., getType, (, )]
[n]
[Token, ., CAST]
[Token]
[allResultsMatch, (, n, ., getFirstChild, (, ), ,, p, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[Token, ., ASSIGN]
[Token]
[Token, ., COMMA]
[Token]
[allResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[allResultsMatch, (, n, ., getFirstChild, (, ), ,, p, ), &&, allResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[allResultsMatch, (, n, ., getFirstChild, (, ), ,, p, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[allResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[Token, ., HOOK]
[Token]
[allResultsMatch, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, p, ), &&, allResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[allResultsMatch, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, p, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[allResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[p, ., apply, (, n, )]
[p]
[n]
[n, ., getType, (, )]
[n]
[Token, ., CAST]
[Token]
[anyResultsMatch, (, n, ., getFirstChild, (, ), ,, p, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[Token, ., ASSIGN]
[Token]
[Token, ., COMMA]
[Token]
[anyResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[anyResultsMatch, (, n, ., getFirstChild, (, ), ,, p, ), ||, anyResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[anyResultsMatch, (, n, ., getFirstChild, (, ), ,, p, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[anyResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[Token, ., HOOK]
[Token]
[anyResultsMatch, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, p, ), ||, anyResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[anyResultsMatch, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, p, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[p]
[anyResultsMatch, (, n, ., getLastChild, (, ), ,, p, )]
[n, ., getLastChild, (, )]
[n]
[p]
[p, ., apply, (, n, )]
[p]
[n]
[isNumericResultHelper, (, n, )]
[n]
[new, NumbericResultPredicate, (, )]
[allResultsMatch, (, n, ,, NUMBERIC_RESULT_PREDICATE, )]
[n]
[NUMBERIC_RESULT_PREDICATE]
[n, ., getType, (, )]
[n]
[Token, ., ADD]
[Token]
[!, mayBeString, (, n, ., getFirstChild, (, ), ), &&, !, mayBeString, (, n, ., getLastChild, (, ), )]
[!, mayBeString, (, n, ., getFirstChild, (, ), )]
[mayBeString, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[!, mayBeString, (, n, ., getLastChild, (, ), )]
[mayBeString, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., BITNOT]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., URSH]
[Token]
[Token, ., SUB]
[Token]
[Token, ., MUL]
[Token]
[Token, ., MOD]
[Token]
[Token, ., DIV]
[Token]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Token, ., NUMBER]
[Token]
[true]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
[name, ., equals, (, "NaN", )]
[name]
["NaN"]
[true]
[name, ., equals, (, "Infinity", )]
[name]
["Infinity"]
[true]
[false]
[false]
[isBooleanResultHelper, (, n, )]
[n]
[new, BooleanResultPredicate, (, )]
[allResultsMatch, (, n, ,, BOOLEAN_RESULT_PREDICATE, )]
[n]
[BOOLEAN_RESULT_PREDICATE]
[n, ., getType, (, )]
[n]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[Token, ., IN]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., NOT]
[Token]
[Token, ., DELPROP]
[Token]
[true]
[false]
[mayBeStringHelper, (, n, )]
[n]
[new, MayBeStringResultPredicate, (, )]
[mayBeString, (, n, ,, true, )]
[n]
[true]
[recurse]
[anyResultsMatch, (, n, ,, MAY_BE_STRING_PREDICATE, )]
[n]
[MAY_BE_STRING_PREDICATE]
[mayBeStringHelper, (, n, )]
[n]
[!, isNumericResult, (, n, ), &&, !, isBooleanResult, (, n, ), &&, !, isUndefined, (, n, ), &&, !, n, ., isNull, (, )]
[!, isNumericResult, (, n, ), &&, !, isBooleanResult, (, n, ), &&, !, isUndefined, (, n, )]
[!, isNumericResult, (, n, ), &&, !, isBooleanResult, (, n, )]
[!, isNumericResult, (, n, )]
[isNumericResult, (, n, )]
[n]
[!, isBooleanResult, (, n, )]
[isBooleanResult, (, n, )]
[n]
[!, isUndefined, (, n, )]
[isUndefined, (, n, )]
[n]
[!, n, ., isNull, (, )]
[n, ., isNull, (, )]
[n]
[type]
[Token, ., MUL]
[Token]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITAND]
[Token]
[true]
[false]
[type]
[Token, ., MUL]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITAND]
[Token]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., MOD]
[Token]
[new, IllegalArgumentException, (, "Not an assignment op:", +, n, )]
["Not an assignment op:", +, n]
["Not an assignment op:"]
[n]
[containsType, (, n, ,, Token, ., FUNCTION, )]
[n]
[Token, ., FUNCTION]
[Token]
[(, n, ., isFunction, (, ), ), ?, n, ., getLastChild, (, ), :, n]
[(, n, ., isFunction, (, ), )]
[n, ., isFunction, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[n]
[containsType, (, start, ,, Token, ., THIS, ,, MATCH_NOT_FUNCTION, )]
[start]
[Token, ., THIS]
[Token]
[MATCH_NOT_FUNCTION]
[n, ., isGetProp, (, ), ||, n, ., isGetElem, (, )]
[n, ., isGetProp, (, )]
[n]
[n, ., isGetElem, (, )]
[n]
[n, ., isName, (, ), &&, n, ., getParent, (, ), ., isVar, (, )]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, ), ., isVar, (, )]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., isVar, (, )]
[parent]
[n, ., getFirstChild, (, )]
[n]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[n, ., getNext, (, )]
[n]
[null]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, )]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, ), ., isAssign, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isCall, (, )]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, ), ., isCall, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., isFor, (, ), &&, n, ., getChildCount, (, ), ==, 3]
[n, ., isFor, (, )]
[n]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[n, ., getType, (, )]
[n]
[Token, ., FOR]
[Token]
[Token, ., DO]
[Token]
[Token, ., WHILE]
[Token]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., FOR]
[Token]
[Token, ., WHILE]
[Token]
[n, ., getLastChild, (, )]
[n]
[Token, ., DO]
[Token]
[n, ., getFirstChild, (, )]
[n]
[null]
[n, ., getAncestors, (, )]
[n]
[NodeUtil, ., isLoopStructure, (, parent, )]
[NodeUtil]
[parent]
[true]
[parent, ., isFunction, (, )]
[parent]
[false]
[n, ., getType, (, )]
[n]
[Token, ., FOR]
[Token]
[Token, ., DO]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., WITH]
[Token]
[Token, ., IF]
[Token]
[Token, ., LABEL]
[Token]
[Token, ., TRY]
[Token]
[Token, ., CATCH]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., CASE]
[Token]
[Token, ., DEFAULT_CASE]
[Token]
[true]
[false]
[parent, ., getType, (, )]
[parent]
[Token, ., FOR]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., LABEL]
[Token]
[Token, ., WITH]
[Token]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[Token, ., DO]
[Token]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., IF]
[Token]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., TRY]
[Token]
[parent, ., getFirstChild, (, ), ==, n, ||, parent, ., getLastChild, (, ), ==, n]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[Token, ., CATCH]
[Token]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[Token, ., SWITCH]
[Token]
[Token, ., CASE]
[Token]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., DEFAULT_CASE]
[Token]
[true]
[Preconditions, ., checkState, (, isControlStructure, (, parent, ), )]
[Preconditions]
[isControlStructure, (, parent, )]
[parent]
[false]
[n, ., getType, (, )]
[n]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[n, ., getFirstChild, (, )]
[n]
[Token, ., DO]
[Token]
[n, ., getLastChild, (, )]
[n]
[Token, ., FOR]
[Token]
[n, ., getChildCount, (, )]
[n]
[3]
[null]
[4]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[new, IllegalArgumentException, (, "malformed 'for' statement ", +, n, )]
["malformed 'for' statement ", +, n]
["malformed 'for' statement "]
[n]
[Token, ., CASE]
[Token]
[null]
[new, IllegalArgumentException, (, n, +, " does not have a condition.", )]
[n, +, " does not have a condition."]
[n]
[" does not have a condition."]
[n, ., isScript, (, ), ||, n, ., isBlock, (, )]
[n, ., isScript, (, )]
[n]
[n, ., isBlock, (, )]
[n]
[isStatementParent, (, n, ., getParent, (, ), )]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, parent, !=, null, )]
[Preconditions]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., SCRIPT]
[Token]
[Token, ., BLOCK]
[Token]
[Token, ., LABEL]
[Token]
[true]
[false]
[n, ., isCase, (, ), ||, n, ., isDefaultCase, (, )]
[n, ., isCase, (, )]
[n]
[n, ., isDefaultCase, (, )]
[n]
[n, ., isName, (, ), &&, !, n, ., getString, (, ), ., isEmpty, (, )]
[n, ., isName, (, )]
[n]
[!, n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, )]
[n]
[parent, ., isTry, (, ), &&, parent, ., getChildCount, (, ), ==, 3, &&, child, ==, parent, ., getLastChild, (, )]
[parent, ., isTry, (, ), &&, parent, ., getChildCount, (, ), ==, 3]
[parent, ., isTry, (, )]
[parent]
[parent, ., getChildCount, (, ), ==, 3]
[parent, ., getChildCount, (, )]
[parent]
[3]
[child, ==, parent, ., getLastChild, (, )]
[child]
[parent, ., getLastChild, (, )]
[parent]
[n, ., getParent, (, )]
[n]
[parent, ., isTry, (, ), &&, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n]
[parent, ., isTry, (, )]
[parent]
[parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isTryFinallyNode, (, parent, ,, node, )]
[parent]
[node]
[NodeUtil, ., hasCatchHandler, (, getCatchBlock, (, parent, ), )]
[NodeUtil]
[getCatchBlock, (, parent, )]
[parent]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[node, ., detachChildren, (, )]
[node]
[node, ., isCatch, (, )]
[node]
[node, ., getParent, (, ), ., getParent, (, )]
[node, ., getParent, (, )]
[node]
[Preconditions, ., checkState, (, NodeUtil, ., hasFinally, (, tryNode, ), )]
[Preconditions]
[NodeUtil, ., hasFinally, (, tryNode, )]
[NodeUtil]
[tryNode]
[node, ., detachFromParent, (, )]
[node]
[isTryCatchNodeContainer, (, node, )]
[node]
[node, ., getParent, (, )]
[node]
[Preconditions, ., checkState, (, NodeUtil, ., hasFinally, (, tryNode, ), )]
[Preconditions]
[NodeUtil, ., hasFinally, (, tryNode, )]
[NodeUtil]
[tryNode]
[node, ., detachChildren, (, )]
[node]
[node, ., isBlock, (, )]
[node]
[node, ., detachChildren, (, )]
[node]
[isStatementBlock, (, parent, ), ||, isSwitchCase, (, node, )]
[isStatementBlock, (, parent, )]
[parent]
[isSwitchCase, (, node, )]
[node]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[parent, ., isVar, (, )]
[parent]
[parent, ., hasMoreThanOneChild, (, )]
[parent]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[removeChild, (, parent, ., getParent, (, ), ,, parent, )]
[parent, ., getParent, (, )]
[parent]
[parent]
[parent, ., isLabel, (, ), &&, node, ==, parent, ., getLastChild, (, )]
[parent, ., isLabel, (, )]
[parent]
[node, ==, parent, ., getLastChild, (, )]
[node]
[parent, ., getLastChild, (, )]
[parent]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[removeChild, (, parent, ., getParent, (, ), ,, parent, )]
[parent, ., getParent, (, )]
[parent]
[parent]
[parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), ==, 4]
[parent, ., isFor, (, )]
[parent]
[parent, ., getChildCount, (, ), ==, 4]
[parent, ., getChildCount, (, )]
[parent]
[4]
[parent, ., replaceChild, (, node, ,, IR, ., empty, (, ), )]
[parent]
[node]
[IR, ., empty, (, )]
[IR]
[new, IllegalStateException, (, "Invalid attempt to remove node: ", +, node, ., toString, (, ), +, " of ", +, parent, ., toString, (, ), )]
["Invalid attempt to remove node: ", +, node, ., toString, (, ), +, " of ", +, parent, ., toString, (, )]
["Invalid attempt to remove node: ", +, node, ., toString, (, ), +, " of "]
["Invalid attempt to remove node: ", +, node, ., toString, (, )]
["Invalid attempt to remove node: "]
[node, ., toString, (, )]
[node]
[" of "]
[parent, ., toString, (, )]
[parent]
[Preconditions, ., checkState, (, tryNode, ., isTry, (, ), )]
[Preconditions]
[tryNode, ., isTry, (, )]
[tryNode]
[!, NodeUtil, ., hasFinally, (, tryNode, )]
[NodeUtil, ., hasFinally, (, tryNode, )]
[NodeUtil]
[tryNode]
[tryNode, ., addChildrenToBack, (, IR, ., block, (, ), ., srcref, (, tryNode, ), )]
[tryNode]
[IR, ., block, (, ), ., srcref, (, tryNode, )]
[IR, ., block, (, )]
[IR]
[tryNode]
[Preconditions, ., checkState, (, block, ., isBlock, (, ), )]
[Preconditions]
[block, ., isBlock, (, )]
[block]
[block, ., getParent, (, )]
[block]
[isStatementBlock, (, parent, )]
[parent]
[block]
[block, ., hasChildren, (, )]
[block]
[block, ., removeFirstChild, (, )]
[block]
[parent, ., addChildAfter, (, child, ,, previous, )]
[parent]
[child]
[previous]
[previous]
[child]
[parent, ., removeChild, (, block, )]
[parent]
[block]
[true]
[false]
[node, ., isCall, (, ), ||, node, ., isNew, (, )]
[node, ., isCall, (, )]
[node]
[node, ., isNew, (, )]
[node]
[Preconditions, ., checkArgument, (, fn, ., isFunction, (, ), )]
[Preconditions]
[fn, ., isFunction, (, )]
[fn]
[fn, ., getLastChild, (, )]
[fn]
[n, ., isFunction, (, ), &&, isStatement, (, n, )]
[n, ., isFunction, (, )]
[n]
[isStatement, (, n, )]
[n]
[isFunctionDeclaration, (, n, ), &&, (, n, ., getParent, (, ), ., isScript, (, ), ||, n, ., getParent, (, ), ., getParent, (, ), ., isFunction, (, ), )]
[isFunctionDeclaration, (, n, )]
[n]
[(, n, ., getParent, (, ), ., isScript, (, ), ||, n, ., getParent, (, ), ., getParent, (, ), ., isFunction, (, ), )]
[n, ., getParent, (, ), ., isScript, (, ), ||, n, ., getParent, (, ), ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, ), ., isScript, (, )]
[n, ., getParent, (, )]
[n]
[n, ., getParent, (, ), ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, ), ., getParent, (, )]
[n, ., getParent, (, )]
[n]
[n, ., isFunction, (, ), &&, !, isStatement, (, n, )]
[n, ., isFunction, (, )]
[n]
[!, isStatement, (, n, )]
[isStatement, (, n, )]
[n]
[n, ., isName, (, ), &&, !, n, ., getString, (, ), ., isEmpty, (, ), &&, isFunctionExpression, (, n, ., getParent, (, ), )]
[n, ., isName, (, ), &&, !, n, ., getString, (, ), ., isEmpty, (, )]
[n, ., isName, (, )]
[n]
[!, n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, )]
[n]
[isFunctionExpression, (, n, ., getParent, (, ), )]
[n, ., getParent, (, )]
[n]
[isFunctionExpression, (, node, ), &&, isEmptyBlock, (, node, ., getLastChild, (, ), )]
[isFunctionExpression, (, node, )]
[node]
[isEmptyBlock, (, node, ., getLastChild, (, ), )]
[node, ., getLastChild, (, )]
[node]
[Preconditions, ., checkArgument, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[isNameReferenced, (, function, ., getLastChild, (, ), ,, "arguments", ,, MATCH_NOT_FUNCTION, )]
[function, ., getLastChild, (, )]
[function]
["arguments"]
[MATCH_NOT_FUNCTION]
[callNode, ., isCall, (, )]
[callNode]
[callNode, ., getFirstChild, (, )]
[callNode]
[isGet, (, functionIndentifyingExpression, )]
[functionIndentifyingExpression]
[functionIndentifyingExpression, ., getLastChild, (, )]
[functionIndentifyingExpression]
[last, !=, null, &&, last, ., isString, (, )]
[last, !=, null]
[last]
[null]
[last, ., isString, (, )]
[last]
[last, ., getString, (, )]
[last]
[(, propName, ., equals, (, methodName, ), )]
[propName, ., equals, (, methodName, )]
[propName]
[methodName]
[false]
[isObjectCallMethod, (, callNode, ,, "call", )]
[callNode]
["call"]
[isObjectCallMethod, (, callNode, ,, "apply", )]
[callNode]
["apply"]
[(, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, )]
[(, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isVar, (, )]
[parent]
[Preconditions, ., checkArgument, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ||, n, ., isGetElem, (, ), )]
[Preconditions]
[n, ., isName, (, ), ||, n, ., isGetProp, (, ), ||, n, ., isGetElem, (, )]
[n, ., isName, (, ), ||, n, ., isGetProp, (, )]
[n, ., isName, (, )]
[n]
[n, ., isGetProp, (, )]
[n]
[n, ., isGetElem, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[false]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isParamList, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isDec, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, (, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[(, NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isVar, (, )]
[parent]
[(, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isFunction, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isDec, (, )]
[parent]
[parent, ., isInc, (, )]
[parent]
[parent, ., isParamList, (, )]
[parent]
[parent, ., isCatch, (, )]
[parent]
[node, ., getType, (, )]
[node]
[Token, ., STRING_KEY]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., SETTER_DEF]
[Token]
[true]
[false]
[key, ., getType, (, )]
[key]
[Token, ., STRING_KEY]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., SETTER_DEF]
[Token]
[key, ., getString, (, )]
[key]
[new, IllegalStateException, (, "Unexpected node type: ", +, key, )]
["Unexpected node type: ", +, key]
["Unexpected node type: "]
[key]
[valueType, !=, null]
[valueType]
[null]
[key, ., getType, (, )]
[key]
[Token, ., GETTER_DEF]
[Token]
[valueType, ., isFunctionType, (, )]
[valueType]
[valueType, ., toMaybeFunctionType, (, )]
[valueType]
[valueType]
[fntype, ., getReturnType, (, )]
[fntype]
[null]
[Token, ., SETTER_DEF]
[Token]
[valueType, ., isFunctionType, (, )]
[valueType]
[valueType, ., toMaybeFunctionType, (, )]
[valueType]
[fntype, ., getParametersNode, (, ), ., getFirstChild, (, )]
[fntype, ., getParametersNode, (, )]
[fntype]
[valueType]
[param, ., getJSType, (, )]
[param]
[null]
[valueType]
[node, ., getType, (, )]
[node]
[Token, ., GETTER_DEF]
[Token]
[Token, ., SETTER_DEF]
[Token]
[true]
[false]
[operator]
[Token, ., BITOR]
[Token]
["|"]
[Token, ., OR]
[Token]
["||"]
[Token, ., BITXOR]
[Token]
["^"]
[Token, ., AND]
[Token]
["&&"]
[Token, ., BITAND]
[Token]
["&"]
[Token, ., SHEQ]
[Token]
["==="]
[Token, ., EQ]
[Token]
["=="]
[Token, ., NOT]
[Token]
["!"]
[Token, ., NE]
[Token]
["!="]
[Token, ., SHNE]
[Token]
["!=="]
[Token, ., LSH]
[Token]
["<<"]
[Token, ., IN]
[Token]
["in"]
[Token, ., LE]
[Token]
["<="]
[Token, ., LT]
[Token]
["<"]
[Token, ., URSH]
[Token]
[">>>"]
[Token, ., RSH]
[Token]
[">>"]
[Token, ., GE]
[Token]
[">="]
[Token, ., GT]
[Token]
[">"]
[Token, ., MUL]
[Token]
["*"]
[Token, ., DIV]
[Token]
["/"]
[Token, ., MOD]
[Token]
["%"]
[Token, ., BITNOT]
[Token]
["~"]
[Token, ., ADD]
[Token]
["+"]
[Token, ., SUB]
[Token]
["-"]
[Token, ., POS]
[Token]
["+"]
[Token, ., NEG]
[Token]
["-"]
[Token, ., ASSIGN]
[Token]
["="]
[Token, ., ASSIGN_BITOR]
[Token]
["|="]
[Token, ., ASSIGN_BITXOR]
[Token]
["^="]
[Token, ., ASSIGN_BITAND]
[Token]
["&="]
[Token, ., ASSIGN_LSH]
[Token]
["<<="]
[Token, ., ASSIGN_RSH]
[Token]
[">>="]
[Token, ., ASSIGN_URSH]
[Token]
[">>>="]
[Token, ., ASSIGN_ADD]
[Token]
["+="]
[Token, ., ASSIGN_SUB]
[Token]
["-="]
[Token, ., ASSIGN_MUL]
[Token]
["*="]
[Token, ., ASSIGN_DIV]
[Token]
["/="]
[Token, ., ASSIGN_MOD]
[Token]
["%="]
[Token, ., VOID]
[Token]
["void"]
[Token, ., TYPEOF]
[Token]
["typeof"]
[Token, ., INSTANCEOF]
[Token]
["instanceof"]
[null]
[opToStr, (, operator, )]
[operator]
[res, ==, null]
[res]
[null]
[new, Error, (, "Unknown op ", +, operator, +, ": ", +, Token, ., name, (, operator, ), )]
["Unknown op ", +, operator, +, ": ", +, Token, ., name, (, operator, )]
["Unknown op ", +, operator, +, ": "]
["Unknown op ", +, operator]
["Unknown op "]
[operator]
[": "]
[Token, ., name, (, operator, )]
[Token]
[operator]
[res]
[has, (, node, ,, new, MatchNodeType, (, type, ), ,, traverseChildrenPred, )]
[node]
[new, MatchNodeType, (, type, )]
[type]
[traverseChildrenPred]
[containsType, (, node, ,, type, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[node]
[type]
[Predicates, ., <, Node, >, alwaysTrue, (, )]
[Predicates]
[getVarsDeclaredInBranch, (, branch, )]
[branch]
[vars, ., isEmpty, (, )]
[vars]
[getAddingRoot, (, branch, )]
[branch]
[vars]
[IR, ., var, (, IR, ., name, (, nameNode, ., getString, (, ), ), ., srcref, (, nameNode, ), ), ., srcref, (, nameNode, )]
[IR, ., var, (, IR, ., name, (, nameNode, ., getString, (, ), ), ., srcref, (, nameNode, ), )]
[IR]
[IR, ., name, (, nameNode, ., getString, (, ), ), ., srcref, (, nameNode, )]
[IR, ., name, (, nameNode, ., getString, (, ), )]
[IR]
[nameNode, ., getString, (, )]
[nameNode]
[nameNode]
[nameNode]
[copyNameAnnotations, (, nameNode, ,, var, ., getFirstChild, (, ), )]
[nameNode]
[var, ., getFirstChild, (, )]
[var]
[parent, ., addChildToFront, (, var, )]
[parent]
[var]
[source, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[source]
[Node, ., IS_CONSTANT_NAME]
[Node]
[destination, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[destination]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[null]
[n]
[null, !=, (, ancestor, =, ancestor, ., getParent, (, ), )]
[null]
[(, ancestor, =, ancestor, ., getParent, (, ), )]
[ancestor]
[ancestor, ., getParent, (, )]
[ancestor]
[ancestor, ., getType, (, )]
[ancestor]
[type, ==, Token, ., SCRIPT]
[type]
[Token, ., SCRIPT]
[Token]
[addingRoot]
[ancestor]
[type, ==, Token, ., FUNCTION]
[type]
[Token, ., FUNCTION]
[Token]
[addingRoot]
[ancestor, ., getLastChild, (, )]
[ancestor]
[Preconditions, ., checkState, (, addingRoot, ., isBlock, (, ), ||, addingRoot, ., isScript, (, ), )]
[Preconditions]
[addingRoot, ., isBlock, (, ), ||, addingRoot, ., isScript, (, )]
[addingRoot, ., isBlock, (, )]
[addingRoot]
[addingRoot, ., isScript, (, )]
[addingRoot]
[Preconditions, ., checkState, (, addingRoot, ., getFirstChild, (, ), ==, null, ||, !, addingRoot, ., getFirstChild, (, ), ., isScript, (, ), )]
[Preconditions]
[addingRoot, ., getFirstChild, (, ), ==, null, ||, !, addingRoot, ., getFirstChild, (, ), ., isScript, (, )]
[addingRoot, ., getFirstChild, (, ), ==, null]
[addingRoot, ., getFirstChild, (, )]
[addingRoot]
[null]
[!, addingRoot, ., getFirstChild, (, ), ., isScript, (, )]
[addingRoot, ., getFirstChild, (, ), ., isScript, (, )]
[addingRoot, ., getFirstChild, (, )]
[addingRoot]
[addingRoot]
[name, ., indexOf, (, '.', )]
[name]
['.']
[endPos, ==, -, 1]
[endPos]
[-, 1]
[1]
[newName, (, convention, ,, name, )]
[convention]
[name]
[newName, (, convention, ,, name, ., substring, (, 0, ,, endPos, ), )]
[convention]
[name, ., substring, (, 0, ,, endPos, )]
[name]
[0]
[endPos]
[startPos]
[endPos, +, 1]
[endPos]
[1]
[endPos]
[name, ., indexOf, (, '.', ,, startPos, )]
[name]
['.']
[startPos]
[(, endPos, ==, -, 1, ?, name, ., substring, (, startPos, ), :, name, ., substring, (, startPos, ,, endPos, ), )]
[endPos, ==, -, 1, ?, name, ., substring, (, startPos, ), :, name, ., substring, (, startPos, ,, endPos, )]
[endPos, ==, -, 1]
[endPos]
[-, 1]
[1]
[name, ., substring, (, startPos, )]
[name]
[startPos]
[name, ., substring, (, startPos, ,, endPos, )]
[name]
[startPos]
[endPos]
[IR, ., string, (, part, )]
[IR]
[part]
[convention, ., isConstantKey, (, part, )]
[convention]
[part]
[propNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[propNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[node]
[IR, ., getprop, (, node, ,, propNode, )]
[IR]
[node]
[propNode]
[endPos, !=, -, 1]
[endPos]
[-, 1]
[1]
[node]
[newQualifiedNameNode, (, convention, ,, name, )]
[convention]
[name]
[setDebugInformation, (, node, ,, basisNode, ,, originalName, )]
[node]
[basisNode]
[originalName]
[node]
[qName]
[true]
[current]
[current, ., getFirstChild, (, )]
[current]
[current, ., isName, (, ), ||, current, ., isThis, (, )]
[current, ., isName, (, )]
[current]
[current, ., isThis, (, )]
[current]
[current]
[Preconditions, ., checkState, (, current, ., isGetProp, (, ), )]
[Preconditions]
[current, ., isGetProp, (, )]
[current]
[node, ., copyInformationFromForTree, (, basisNode, )]
[node]
[basisNode]
[node, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, originalName, )]
[node]
[Node, ., ORIGINALNAME_PROP]
[Node]
[originalName]
[IR, ., name, (, name, )]
[IR]
[name]
[convention, ., isConstant, (, name, )]
[convention]
[name]
[nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[nameNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[nameNode]
[newName, (, convention, ,, name, ), ., srcref, (, srcref, )]
[newName, (, convention, ,, name, )]
[convention]
[name]
[srcref]
[newName, (, convention, ,, name, ,, basisNode, )]
[convention]
[name]
[basisNode]
[nameNode, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, originalName, )]
[nameNode]
[Node, ., ORIGINALNAME_PROP]
[Node]
[originalName]
[nameNode]
[s, ., length, (, )]
[s]
[0]
[index, <, len]
[index]
[len]
[index, ++]
[index]
[s, ., charAt, (, index, )]
[s]
[index]
[c, >, LARGEST_BASIC_LATIN]
[c]
[LARGEST_BASIC_LATIN]
[false]
[true]
[TokenStream, ., isJSIdentifier, (, name, ), &&, !, TokenStream, ., isKeyword, (, name, ), &&, isLatin, (, name, )]
[TokenStream, ., isJSIdentifier, (, name, ), &&, !, TokenStream, ., isKeyword, (, name, )]
[TokenStream, ., isJSIdentifier, (, name, )]
[TokenStream]
[name]
[!, TokenStream, ., isKeyword, (, name, )]
[TokenStream, ., isKeyword, (, name, )]
[TokenStream]
[name]
[isLatin, (, name, )]
[name]
[name, ., endsWith, (, ".", ), ||, name, ., startsWith, (, ".", )]
[name, ., endsWith, (, ".", )]
[name]
["."]
[name, ., startsWith, (, ".", )]
[name]
["."]
[false]
[name, ., split, (, "\\.", )]
[name]
["\\."]
[parts]
[!, isValidSimpleName, (, part, )]
[isValidSimpleName, (, part, )]
[part]
[false]
[true]
[isValidSimpleName, (, name, )]
[name]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, !=, null, &&, parent, ., isVar, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., isVar, (, )]
[parent]
[n, ., getString, (, )]
[n]
[!, vars, ., containsKey, (, name, )]
[vars, ., containsKey, (, name, )]
[vars]
[name]
[vars, ., put, (, name, ,, n, )]
[vars]
[name]
[n]
[new, VarCollector, (, )]
[visitPreOrder, (, root, ,, collector, ,, MATCH_NOT_FUNCTION, )]
[root]
[collector]
[MATCH_NOT_FUNCTION]
[collector, ., vars, ., values, (, )]
[collector, ., vars]
[collector]
[!, isExprAssign, (, n, )]
[isExprAssign, (, n, )]
[n]
[false]
[isPrototypeProperty, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getQualifiedName, (, )]
[n]
[lhsString, ==, null]
[lhsString]
[null]
[false]
[lhsString, ., indexOf, (, ".prototype.", )]
[lhsString]
[".prototype."]
[prototypeIdx, !=, -, 1]
[prototypeIdx]
[-, 1]
[1]
[qName]
[cur, ., isGetProp, (, )]
[cur]
[cur, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[cur, ., getLastChild, (, ), ., getString, (, )]
[cur, ., getLastChild, (, )]
[cur]
["prototype"]
[cur, ., getFirstChild, (, )]
[cur]
[cur]
[cur, ., getFirstChild, (, )]
[cur]
[null]
[qName, ., getQualifiedName, (, )]
[qName]
[qNameStr, ., lastIndexOf, (, ".prototype.", )]
[qNameStr]
[".prototype."]
[prototypeIdx, +, ".prototype", ., length, (, ), +, 1]
[prototypeIdx, +, ".prototype", ., length, (, )]
[prototypeIdx]
[".prototype", ., length, (, )]
[".prototype"]
[1]
[qNameStr, ., substring, (, memberIndex, )]
[qNameStr]
[memberIndex]
[IR, ., voidNode, (, IR, ., number, (, 0, ), )]
[IR]
[IR, ., number, (, 0, )]
[IR]
[0]
[srcReferenceNode, !=, null]
[srcReferenceNode]
[null]
[node, ., copyInformationFromForTree, (, srcReferenceNode, )]
[node]
[srcReferenceNode]
[node]
[IR, ., name, (, name, )]
[IR]
[name]
[value, !=, null]
[value]
[null]
[Preconditions, ., checkState, (, value, ., getNext, (, ), ==, null, )]
[Preconditions]
[value, ., getNext, (, ), ==, null]
[value, ., getNext, (, )]
[value]
[null]
[nodeName, ., addChildToBack, (, value, )]
[nodeName]
[value]
[nodeName, ., srcref, (, value, )]
[nodeName]
[value]
[IR, ., var, (, nodeName, ), ., srcref, (, nodeName, )]
[IR, ., var, (, nodeName, )]
[IR]
[nodeName]
[nodeName]
[var]
[this, ., name]
[this]
[name]
[n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, name, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, name, )]
[n, ., getString, (, )]
[n]
[name]
[this, ., type]
[this]
[type]
[n, ., getType, (, ), ==, type]
[n, ., getType, (, )]
[n]
[type]
[isFunctionDeclaration, (, n, ), ||, n, ., isVar, (, )]
[isFunctionDeclaration, (, n, )]
[n]
[n, ., isVar, (, )]
[n]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[new, MatchNotFunction, (, )]
[n, ., getParent, (, )]
[n]
[n, ., isBlock, (, ), ||, (, !, n, ., isFunction, (, ), &&, (, parent, ==, null, ||, isControlStructure, (, parent, ), ||, isStatementBlock, (, parent, ), ), )]
[n, ., isBlock, (, )]
[n]
[(, !, n, ., isFunction, (, ), &&, (, parent, ==, null, ||, isControlStructure, (, parent, ), ||, isStatementBlock, (, parent, ), ), )]
[!, n, ., isFunction, (, ), &&, (, parent, ==, null, ||, isControlStructure, (, parent, ), ||, isStatementBlock, (, parent, ), )]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[(, parent, ==, null, ||, isControlStructure, (, parent, ), ||, isStatementBlock, (, parent, ), )]
[parent, ==, null, ||, isControlStructure, (, parent, ), ||, isStatementBlock, (, parent, )]
[parent, ==, null, ||, isControlStructure, (, parent, )]
[parent, ==, null]
[parent]
[null]
[isControlStructure, (, parent, )]
[parent]
[isStatementBlock, (, parent, )]
[parent]
[getCount, (, node, ,, new, MatchNodeType, (, type, ), ,, traverseChildrenPred, )]
[node]
[new, MatchNodeType, (, type, )]
[type]
[traverseChildrenPred]
[has, (, node, ,, new, MatchNameNode, (, name, ), ,, traverseChildrenPred, )]
[node]
[new, MatchNameNode, (, name, )]
[name]
[traverseChildrenPred]
[isNameReferenced, (, node, ,, name, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[node]
[name]
[Predicates, ., <, Node, >, alwaysTrue, (, )]
[Predicates]
[getCount, (, node, ,, new, MatchNameNode, (, name, ), ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[node]
[new, MatchNameNode, (, name, )]
[name]
[Predicates, ., <, Node, >, alwaysTrue, (, )]
[Predicates]
[pred, ., apply, (, node, )]
[pred]
[node]
[true]
[!, traverseChildrenPred, ., apply, (, node, )]
[traverseChildrenPred, ., apply, (, node, )]
[traverseChildrenPred]
[node]
[false]
[node, ., getFirstChild, (, )]
[node]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[has, (, c, ,, pred, ,, traverseChildrenPred, )]
[c]
[pred]
[traverseChildrenPred]
[true]
[false]
[0]
[pred, ., apply, (, n, )]
[pred]
[n]
[total, ++]
[total]
[traverseChildrenPred, ., apply, (, n, )]
[traverseChildrenPred]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[total]
[getCount, (, c, ,, pred, ,, traverseChildrenPred, )]
[c]
[pred]
[traverseChildrenPred]
[total]
[visitor, ., visit, (, node, )]
[visitor]
[node]
[traverseChildrenPred, ., apply, (, node, )]
[traverseChildrenPred]
[node]
[node, ., getFirstChild, (, )]
[node]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[visitPreOrder, (, c, ,, visitor, ,, traverseChildrenPred, )]
[c]
[visitor]
[traverseChildrenPred]
[traverseChildrenPred, ., apply, (, node, )]
[traverseChildrenPred]
[node]
[node, ., getFirstChild, (, )]
[node]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[visitPostOrder, (, c, ,, visitor, ,, traverseChildrenPred, )]
[c]
[visitor]
[traverseChildrenPred]
[visitor, ., visit, (, node, )]
[visitor]
[node]
[Preconditions, ., checkArgument, (, n, ., isTry, (, ), )]
[Preconditions]
[n, ., isTry, (, )]
[n]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[Preconditions, ., checkArgument, (, n, ., isTry, (, ), )]
[Preconditions]
[n, ., isTry, (, )]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[Preconditions, ., checkArgument, (, n, ., isBlock, (, ), )]
[Preconditions]
[n, ., isBlock, (, )]
[n]
[n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isCatch, (, )]
[n, ., hasChildren, (, )]
[n]
[n, ., getFirstChild, (, ), ., isCatch, (, )]
[n, ., getFirstChild, (, )]
[n]
[Preconditions, ., checkArgument, (, fnNode, ., isFunction, (, ), )]
[Preconditions]
[fnNode, ., isFunction, (, )]
[fnNode]
[fnNode, ., getFirstChild, (, ), ., getNext, (, )]
[fnNode, ., getFirstChild, (, )]
[fnNode]
[node, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[node]
[Node, ., IS_CONSTANT_NAME]
[Node]
[node, ., getString, (, )]
[node]
[parent, ., isGetProp, (, ), &&, node, ==, parent, ., getLastChild, (, )]
[parent, ., isGetProp, (, )]
[parent]
[node, ==, parent, ., getLastChild, (, )]
[node]
[parent, ., getLastChild, (, )]
[parent]
[convention, ., isConstantKey, (, name, )]
[convention]
[name]
[isObjectLitKey, (, node, ,, parent, )]
[node]
[parent]
[convention, ., isConstantKey, (, name, )]
[convention]
[name]
[convention, ., isConstant, (, name, )]
[convention]
[name]
[Preconditions, ., checkState, (, n, ., isFunction, (, ), )]
[Preconditions]
[n, ., isFunction, (, )]
[n]
[n, ., getJSDocInfo, (, )]
[n]
[fnInfo, ==, null, &&, NodeUtil, ., isFunctionExpression, (, n, )]
[fnInfo, ==, null]
[fnInfo]
[null]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., isAssign, (, )]
[parent]
[fnInfo]
[parent, ., getJSDocInfo, (, )]
[parent]
[parent, ., isName, (, )]
[parent]
[fnInfo]
[parent, ., getParent, (, ), ., getJSDocInfo, (, )]
[parent, ., getParent, (, )]
[parent]
[fnInfo]
[null]
[sourceName, ==, null, &&, n, !=, null]
[sourceName, ==, null]
[sourceName]
[null]
[n, !=, null]
[n]
[null]
[sourceName]
[n, ., getSourceFileName, (, )]
[n]
[n]
[n, ., getParent, (, )]
[n]
[sourceName]
[null]
[sourceName, ==, null, &&, n, !=, null]
[sourceName, ==, null]
[sourceName]
[null]
[n, !=, null]
[n]
[null]
[sourceName]
[n, ., getStaticSourceFile, (, )]
[n]
[n]
[n, ., getParent, (, )]
[n]
[sourceName]
[n, !=, null, &&, !, n, ., isScript, (, )]
[n, !=, null]
[n]
[null]
[!, n, ., isScript, (, )]
[n, ., isScript, (, )]
[n]
[n]
[n, ., getParent, (, )]
[n]
[(, n, !=, null, &&, n, ., isScript, (, ), ), ?, n, ., getInputId, (, ), :, null]
[(, n, !=, null, &&, n, ., isScript, (, ), )]
[n, !=, null, &&, n, ., isScript, (, )]
[n, !=, null]
[n]
[null]
[n, ., isScript, (, )]
[n]
[n, ., getInputId, (, )]
[n]
[null]
[!, isGet, (, callTarget, )]
[isGet, (, callTarget, )]
[callTarget]
[IR, ., call, (, callTarget, )]
[IR]
[callTarget]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, isFreeCall, )]
[call]
[Node, ., FREE_CALL]
[Node]
[isFreeCall]
[parameters]
[call, ., addChildToBack, (, parameter, )]
[call]
[parameter]
[call]
[evaluatesToLocalValue, (, value, ,, Predicates, ., <, Node, >, alwaysFalse, (, ), )]
[value]
[Predicates, ., <, Node, >, alwaysFalse, (, )]
[Predicates]
[value, ., getType, (, )]
[value]
[Token, ., CAST]
[Token]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ,, locals, )]
[value, ., getFirstChild, (, )]
[value]
[locals]
[Token, ., ASSIGN]
[Token]
[NodeUtil, ., isImmutableValue, (, value, ., getLastChild, (, ), ), ||, (, locals, ., apply, (, value, ), &&, evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, ), )]
[NodeUtil, ., isImmutableValue, (, value, ., getLastChild, (, ), )]
[NodeUtil]
[value, ., getLastChild, (, )]
[value]
[(, locals, ., apply, (, value, ), &&, evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, ), )]
[locals, ., apply, (, value, ), &&, evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[locals, ., apply, (, value, )]
[locals]
[value]
[evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[value, ., getLastChild, (, )]
[value]
[locals]
[Token, ., COMMA]
[Token]
[evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[value, ., getLastChild, (, )]
[value]
[locals]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ,, locals, ), &&, evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ,, locals, )]
[value, ., getFirstChild, (, )]
[value]
[locals]
[evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[value, ., getLastChild, (, )]
[value]
[locals]
[Token, ., HOOK]
[Token]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ., getNext, (, ), ,, locals, ), &&, evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ., getNext, (, ), ,, locals, )]
[value, ., getFirstChild, (, ), ., getNext, (, )]
[value, ., getFirstChild, (, )]
[value]
[locals]
[evaluatesToLocalValue, (, value, ., getLastChild, (, ), ,, locals, )]
[value, ., getLastChild, (, )]
[value]
[locals]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[value, ., getBooleanProp, (, Node, ., INCRDECR_PROP, )]
[value]
[Node, ., INCRDECR_PROP]
[Node]
[evaluatesToLocalValue, (, value, ., getFirstChild, (, ), ,, locals, )]
[value, ., getFirstChild, (, )]
[value]
[locals]
[true]
[Token, ., THIS]
[Token]
[locals, ., apply, (, value, )]
[locals]
[value]
[Token, ., NAME]
[Token]
[isImmutableValue, (, value, ), ||, locals, ., apply, (, value, )]
[isImmutableValue, (, value, )]
[value]
[locals, ., apply, (, value, )]
[locals]
[value]
[Token, ., GETELEM]
[Token]
[Token, ., GETPROP]
[Token]
[locals, ., apply, (, value, )]
[locals]
[value]
[Token, ., CALL]
[Token]
[callHasLocalResult, (, value, ), ||, isToStringMethodCall, (, value, ), ||, locals, ., apply, (, value, )]
[callHasLocalResult, (, value, ), ||, isToStringMethodCall, (, value, )]
[callHasLocalResult, (, value, )]
[value]
[isToStringMethodCall, (, value, )]
[value]
[locals, ., apply, (, value, )]
[locals]
[value]
[Token, ., NEW]
[Token]
[newHasLocalResult, (, value, ), ||, locals, ., apply, (, value, )]
[newHasLocalResult, (, value, )]
[value]
[locals, ., apply, (, value, )]
[locals]
[value]
[Token, ., FUNCTION]
[Token]
[Token, ., REGEXP]
[Token]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[true]
[Token, ., DELPROP]
[Token]
[Token, ., IN]
[Token]
[true]
[isAssignmentOp, (, value, ), ||, isSimpleOperator, (, value, ), ||, isImmutableValue, (, value, )]
[isAssignmentOp, (, value, ), ||, isSimpleOperator, (, value, )]
[isAssignmentOp, (, value, )]
[value]
[isSimpleOperator, (, value, )]
[value]
[isImmutableValue, (, value, )]
[value]
[true]
[new, IllegalStateException, (, "Unexpected expression node", +, value, +, "\n parent:", +, value, ., getParent, (, ), )]
["Unexpected expression node", +, value, +, "\n parent:", +, value, ., getParent, (, )]
["Unexpected expression node", +, value, +, "\n parent:"]
["Unexpected expression node", +, value]
["Unexpected expression node"]
[value]
["\n parent:"]
[value, ., getParent, (, )]
[value]
[first]
[index, !=, 0, &&, sibling, !=, null]
[index, !=, 0]
[index]
[0]
[sibling, !=, null]
[sibling]
[null]
[sibling]
[sibling, ., getNext, (, )]
[sibling]
[index, --]
[index]
[sibling]
[Preconditions, ., checkState, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[getNthSibling, (, function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ,, index, )]
[function, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, )]
[function, ., getFirstChild, (, ), ., getNext, (, )]
[function, ., getFirstChild, (, )]
[function]
[index]
[Preconditions, ., checkState, (, isCallOrNew, (, call, ), )]
[Preconditions]
[isCallOrNew, (, call, )]
[call]
[getNthSibling, (, call, ., getFirstChild, (, ), ., getNext, (, ), ,, index, )]
[call, ., getFirstChild, (, ), ., getNext, (, )]
[call, ., getFirstChild, (, )]
[call]
[index]
[target, ., getParent, (, )]
[target]
[parent, !=, null, &&, NodeUtil, ., isCallOrNew, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, target]
[parent, !=, null, &&, NodeUtil, ., isCallOrNew, (, parent, )]
[parent, !=, null]
[parent]
[null]
[NodeUtil, ., isCallOrNew, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, target]
[parent, ., getFirstChild, (, )]
[parent]
[target]
[call, ., getFirstChild, (, )]
[call]
[isGet, (, getNode, )]
[getNode]
[getNode, ., getLastChild, (, )]
[getNode]
[propNode, ., isString, (, ), &&, "toString", ., equals, (, propNode, ., getString, (, ), )]
[propNode, ., isString, (, )]
[propNode]
["toString", ., equals, (, propNode, ., getString, (, ), )]
["toString"]
[propNode, ., getString, (, )]
[propNode]
[false]
[n, ., getJSDocInfo, (, )]
[n]
[info, ==, null]
[info]
[null]
[n, ., getParent, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[null]
[parent, ., isName, (, )]
[parent]
[getBestJSDocInfo, (, parent, )]
[parent]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getJSDocInfo, (, )]
[parent]
[isObjectLitKey, (, parent, ,, parent, ., getParent, (, ), )]
[parent]
[parent, ., getParent, (, )]
[parent]
[parent, ., getJSDocInfo, (, )]
[parent]
[parent, ., isFunction, (, )]
[parent]
[parent, ., getJSDocInfo, (, )]
[parent]
[parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, )]
[parent, ., isVar, (, )]
[parent]
[parent, ., hasOneChild, (, )]
[parent]
[parent, ., getJSDocInfo, (, )]
[parent]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, ), ||, parent, ., isAnd, (, ), ||, (, parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, ), ||, parent, ., isAnd, (, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n]
[parent, ., isHook, (, )]
[parent]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isOr, (, )]
[parent]
[parent, ., isAnd, (, )]
[parent]
[(, parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n]
[parent, ., isComma, (, )]
[parent]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[getBestJSDocInfo, (, parent, )]
[parent]
[parent, ., isCast, (, )]
[parent]
[parent, ., getJSDocInfo, (, )]
[parent]
[info]
[n, ., getParent, (, )]
[n]
[isFunctionDeclaration, (, n, )]
[n]
[isFunctionDeclaration]
[n, ., getFirstChild, (, )]
[n]
[parent, ., isName, (, )]
[parent]
[parent]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, )]
[parent]
[isObjectLitKey, (, parent, ,, parent, ., getParent, (, ), )]
[parent]
[parent, ., getParent, (, )]
[parent]
[parent]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, ), ||, parent, ., isAnd, (, ), ||, (, parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, ), ||, parent, ., isAnd, (, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, ), ||, parent, ., isOr, (, )]
[(, parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[parent, ., isHook, (, ), &&, parent, ., getFirstChild, (, ), !=, n]
[parent, ., isHook, (, )]
[parent]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isOr, (, )]
[parent]
[parent, ., isAnd, (, )]
[parent]
[(, parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n, )]
[parent, ., isComma, (, ), &&, parent, ., getFirstChild, (, ), !=, n]
[parent, ., isComma, (, )]
[parent]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[getBestLValue, (, parent, )]
[parent]
[parent, ., isCast, (, )]
[parent]
[getBestLValue, (, parent, )]
[parent]
[null]
[n, ., getParent, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., ASSIGN]
[Token]
[n, ., getNext, (, )]
[n]
[Token, ., VAR]
[Token]
[n, ., getFirstChild, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[parent]
[null]
[lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null]
[lValue, ==, null]
[lValue]
[null]
[lValue, ., getParent, (, ), ==, null]
[lValue, ., getParent, (, )]
[lValue]
[null]
[null]
[isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[lValue]
[lValue, ., getParent, (, )]
[lValue]
[getBestLValue, (, lValue, ., getParent, (, ), )]
[lValue, ., getParent, (, )]
[lValue]
[isGet, (, lValue, )]
[lValue]
[lValue, ., getFirstChild, (, )]
[lValue]
[null]
[lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null]
[lValue, ==, null]
[lValue]
[null]
[lValue, ., getParent, (, ), ==, null]
[lValue, ., getParent, (, )]
[lValue]
[null]
[null]
[isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[lValue]
[lValue, ., getParent, (, )]
[lValue]
[getBestLValue, (, lValue, ., getParent, (, ), )]
[lValue, ., getParent, (, )]
[lValue]
[owner, !=, null]
[owner]
[null]
[getBestLValueName, (, owner, )]
[owner]
[ownerName, !=, null]
[ownerName]
[null]
[ownerName, +, ".", +, getObjectLitKeyName, (, lValue, )]
[ownerName, +, "."]
[ownerName]
["."]
[getObjectLitKeyName, (, lValue, )]
[lValue]
[null]
[lValue, ., getQualifiedName, (, )]
[lValue]
[expr, ., getParent, (, )]
[expr]
[parent, ., getType, (, )]
[parent]
[Token, ., BLOCK]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[false]
[Token, ., CAST]
[Token]
[isExpressionResultUsed, (, parent, )]
[parent]
[Token, ., HOOK]
[Token]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[(, expr, ==, parent, ., getFirstChild, (, ), ), ?, true, :, isExpressionResultUsed, (, parent, )]
[(, expr, ==, parent, ., getFirstChild, (, ), )]
[expr, ==, parent, ., getFirstChild, (, )]
[expr]
[parent, ., getFirstChild, (, )]
[parent]
[true]
[isExpressionResultUsed, (, parent, )]
[parent]
[Token, ., COMMA]
[Token]
[parent, ., getParent, (, )]
[parent]
[gramps, ., isCall, (, ), &&, parent, ==, gramps, ., getFirstChild, (, )]
[gramps, ., isCall, (, )]
[gramps]
[parent, ==, gramps, ., getFirstChild, (, )]
[parent]
[gramps, ., getFirstChild, (, )]
[gramps]
[expr, ==, parent, ., getFirstChild, (, ), &&, parent, ., getChildCount, (, ), ==, 2, &&, expr, ., getNext, (, ), ., isName, (, ), &&, "eval", ., equals, (, expr, ., getNext, (, ), ., getString, (, ), )]
[expr, ==, parent, ., getFirstChild, (, ), &&, parent, ., getChildCount, (, ), ==, 2, &&, expr, ., getNext, (, ), ., isName, (, )]
[expr, ==, parent, ., getFirstChild, (, ), &&, parent, ., getChildCount, (, ), ==, 2]
[expr, ==, parent, ., getFirstChild, (, )]
[expr]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ., getChildCount, (, ), ==, 2]
[parent, ., getChildCount, (, )]
[parent]
[2]
[expr, ., getNext, (, ), ., isName, (, )]
[expr, ., getNext, (, )]
[expr]
["eval", ., equals, (, expr, ., getNext, (, ), ., getString, (, ), )]
["eval"]
[expr, ., getNext, (, ), ., getString, (, )]
[expr, ., getNext, (, )]
[expr]
[true]
[(, expr, ==, parent, ., getFirstChild, (, ), ), ?, false, :, isExpressionResultUsed, (, parent, )]
[(, expr, ==, parent, ., getFirstChild, (, ), )]
[expr, ==, parent, ., getFirstChild, (, )]
[expr]
[parent, ., getFirstChild, (, )]
[parent]
[false]
[isExpressionResultUsed, (, parent, )]
[parent]
[Token, ., FOR]
[Token]
[!, NodeUtil, ., isForIn, (, parent, )]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[(, parent, ., getChildAtIndex, (, 1, ), ==, expr, )]
[parent, ., getChildAtIndex, (, 1, ), ==, expr]
[parent, ., getChildAtIndex, (, 1, )]
[parent]
[1]
[expr]
[true]
[n, ., getParent, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., IF]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[false]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getChildAtIndex, (, 1, ), !=, n]
[parent, ., getChildAtIndex, (, 1, )]
[parent]
[1]
[n]
[false]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[false]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[false]
[Token, ., TRY]
[Token]
[!, hasFinally, (, parent, ), ||, parent, ., getLastChild, (, ), !=, n]
[!, hasFinally, (, parent, )]
[hasFinally, (, parent, )]
[parent]
[parent, ., getLastChild, (, ), !=, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[false]
[Token, ., CASE]
[Token]
[Token, ., DEFAULT_CASE]
[Token]
[false]
[Token, ., SCRIPT]
[Token]
[Token, ., FUNCTION]
[Token]
[(, n, =, n, ., getParent, (, ), ), !=, null]
[(, n, =, n, ., getParent, (, ), )]
[n]
[n, ., getParent, (, )]
[n]
[null]
[true]
[value, ?, IR, ., trueNode, (, ), :, IR, ., falseNode, (, )]
[value]
[IR, ., trueNode, (, )]
[IR]
[IR, ., falseNode, (, )]
[IR]
[Double, ., isNaN, (, value, )]
[Double]
[value]
[result]
[IR, ., name, (, "NaN", )]
[IR]
["NaN"]
[value, ==, Double, ., POSITIVE_INFINITY]
[value]
[Double, ., POSITIVE_INFINITY]
[Double]
[result]
[IR, ., name, (, "Infinity", )]
[IR]
["Infinity"]
[value, ==, Double, ., NEGATIVE_INFINITY]
[value]
[Double, ., NEGATIVE_INFINITY]
[Double]
[result]
[IR, ., neg, (, IR, ., name, (, "Infinity", ), )]
[IR]
[IR, ., name, (, "Infinity", )]
[IR]
["Infinity"]
[result]
[IR, ., number, (, value, )]
[IR]
[value]
[srcref, !=, null]
[srcref]
[null]
[result, ., srcrefTree, (, srcref, )]
[result]
[srcref]
[result]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, "NaN", ), ), ||, (, n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, ), &&, n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0, &&, n, ., getLastChild, (, ), ., isNumber, (, ), &&, n, ., getLastChild, (, ), ., getDouble, (, ), ==, 0, )]
[(, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, "NaN", ), )]
[n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, "NaN", )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, "NaN", )]
[n, ., getString, (, )]
[n]
["NaN"]
[(, n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, ), &&, n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0, &&, n, ., getLastChild, (, ), ., isNumber, (, ), &&, n, ., getLastChild, (, ), ., getDouble, (, ), ==, 0, )]
[n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, ), &&, n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0, &&, n, ., getLastChild, (, ), ., isNumber, (, ), &&, n, ., getLastChild, (, ), ., getDouble, (, ), ==, 0]
[n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, ), &&, n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0, &&, n, ., getLastChild, (, ), ., isNumber, (, )]
[n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, ), &&, n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0]
[n, ., getType, (, ), ==, Token, ., DIV, &&, n, ., getFirstChild, (, ), ., isNumber, (, )]
[n, ., getType, (, ), ==, Token, ., DIV]
[n, ., getType, (, )]
[n]
[Token, ., DIV]
[Token]
[n, ., getFirstChild, (, ), ., isNumber, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getDouble, (, ), ==, 0]
[n, ., getFirstChild, (, ), ., getDouble, (, )]
[n, ., getFirstChild, (, )]
[n]
[0]
[n, ., getLastChild, (, ), ., isNumber, (, )]
[n, ., getLastChild, (, )]
[n]
[n, ., getLastChild, (, ), ., getDouble, (, ), ==, 0]
[n, ., getLastChild, (, ), ., getDouble, (, )]
[n, ., getLastChild, (, )]
[n]
[0]
[true]
[false]
