[Sets, ., newHashSet, (, )]
[Sets]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[ArrayListMultimap, ., create, (, )]
[ArrayListMultimap]
[Maps, ., newHashMap, (, )]
[Maps]
[ArrayListMultimap, ., create, (, )]
[ArrayListMultimap]
[ArrayListMultimap, ., create, (, )]
[ArrayListMultimap]
[this, ., compiler]
[this]
[compiler]
[this, ., codingConvention]
[this]
[compiler, ., getCodingConvention, (, )]
[compiler]
[this, ., removeGlobals]
[this]
[removeGlobals]
[this, ., preserveFunctionExpressionNames]
[this]
[preserveFunctionExpressionNames]
[this, ., modifyCallSites]
[this]
[modifyCallSites]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[null]
[modifyCallSites]
[defFinder]
[new, SimpleDefinitionFinder, (, compiler, )]
[compiler]
[defFinder, ., process, (, externs, ,, root, )]
[defFinder]
[externs]
[root]
[process, (, externs, ,, root, ,, defFinder, )]
[externs]
[root]
[defFinder]
[modifyCallSites]
[Preconditions, ., checkNotNull, (, defFinder, )]
[Preconditions]
[defFinder]
[callSiteOptimizer]
[new, CallSiteOptimizer, (, compiler, ,, defFinder, )]
[compiler]
[defFinder]
[traverseAndRemoveUnusedReferences, (, root, )]
[root]
[callSiteOptimizer, !=, null]
[callSiteOptimizer]
[null]
[callSiteOptimizer, ., applyChanges, (, )]
[callSiteOptimizer]
[new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, root, ,, null, )]
[new, SyntacticScopeCreator, (, compiler, )]
[compiler]
[root]
[null]
[traverseNode, (, root, ,, null, ,, scope, )]
[root]
[null]
[scope]
[removeGlobals]
[collectMaybeUnreferencedVars, (, scope, )]
[scope]
[interpretAssigns, (, )]
[removeUnreferencedVars, (, )]
[allFunctionScopes]
[removeUnreferencedFunctionArgs, (, fnScope, )]
[fnScope]
[n, ., getType, (, )]
[n]
[null]
[type]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[var]
[scope, ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), )]
[scope]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[var, !=, null, &&, isRemovableVar, (, var, )]
[var, !=, null]
[var]
[null]
[isRemovableVar, (, var, )]
[var]
[continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), )]
[continuations]
[var]
[new, Continuation, (, n, ,, scope, )]
[n]
[scope]
[traverseFunction, (, n, ,, scope, )]
[n]
[scope]
[Token, ., ASSIGN]
[Token]
[Assign, ., maybeCreateAssign, (, n, )]
[Assign]
[n]
[maybeAssign, !=, null]
[maybeAssign]
[null]
[var]
[scope, ., getVar, (, maybeAssign, ., nameNode, ., getString, (, ), )]
[scope]
[maybeAssign, ., nameNode, ., getString, (, )]
[maybeAssign, ., nameNode]
[maybeAssign]
[var, !=, null]
[var]
[null]
[assignsByVar, ., put, (, var, ,, maybeAssign, )]
[assignsByVar]
[var]
[maybeAssign]
[assignsByNode, ., put, (, maybeAssign, ., nameNode, ,, maybeAssign, )]
[assignsByNode]
[maybeAssign, ., nameNode]
[maybeAssign]
[maybeAssign]
[isRemovableVar, (, var, ), &&, !, maybeAssign, ., mayHaveSecondarySideEffects]
[isRemovableVar, (, var, )]
[var]
[!, maybeAssign, ., mayHaveSecondarySideEffects]
[maybeAssign, ., mayHaveSecondarySideEffects]
[maybeAssign]
[continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), )]
[continuations]
[var]
[new, Continuation, (, n, ,, scope, )]
[n]
[scope]
[Token, ., CALL]
[Token]
[null]
[codingConvention, ., getClassesDefinedByCall, (, n, )]
[codingConvention]
[n]
[subclassRelationship, !=, null]
[subclassRelationship]
[null]
[modifiedVar]
[scope, ., getVar, (, subclassRelationship, ., subclassName, )]
[scope]
[subclassRelationship, ., subclassName]
[subclassRelationship]
[codingConvention, ., getSingletonGetterClassName, (, n, )]
[codingConvention]
[n]
[className, !=, null]
[className]
[null]
[modifiedVar]
[scope, ., getVar, (, className, )]
[scope]
[className]
[modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, ), &&, !, referenced, ., contains, (, modifiedVar, )]
[modifiedVar, !=, null, &&, modifiedVar, ., isGlobal, (, )]
[modifiedVar, !=, null]
[modifiedVar]
[null]
[modifiedVar, ., isGlobal, (, )]
[modifiedVar]
[!, referenced, ., contains, (, modifiedVar, )]
[referenced, ., contains, (, modifiedVar, )]
[referenced]
[modifiedVar]
[classDefiningCalls, ., put, (, modifiedVar, ,, parent, )]
[classDefiningCalls]
[modifiedVar]
[parent]
[continuations, ., put, (, modifiedVar, ,, new, Continuation, (, n, ,, scope, ), )]
[continuations]
[modifiedVar]
[new, Continuation, (, n, ,, scope, )]
[n]
[scope]
[Token, ., NAME]
[Token]
[var]
[scope, ., getVar, (, n, ., getString, (, ), )]
[scope]
[n, ., getString, (, )]
[n]
[parent, ., isVar, (, )]
[parent]
[n, ., getFirstChild, (, )]
[n]
[value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, )]
[value, !=, null, &&, var, !=, null, &&, isRemovableVar, (, var, )]
[value, !=, null, &&, var, !=, null]
[value, !=, null]
[value]
[null]
[var, !=, null]
[var]
[null]
[isRemovableVar, (, var, )]
[var]
[!, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, )]
[NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, )]
[NodeUtil]
[value]
[compiler]
[continuations, ., put, (, var, ,, new, Continuation, (, n, ,, scope, ), )]
[continuations]
[var]
[new, Continuation, (, n, ,, scope, )]
[n]
[scope]
["arguments", ., equals, (, n, ., getString, (, ), ), &&, scope, ., isLocal, (, )]
["arguments", ., equals, (, n, ., getString, (, ), )]
["arguments"]
[n, ., getString, (, )]
[n]
[scope, ., isLocal, (, )]
[scope]
[scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, )]
[scope, ., getRootNode, (, ), ., getFirstChild, (, )]
[scope, ., getRootNode, (, )]
[scope]
[lp, ., getFirstChild, (, )]
[lp]
[a, !=, null]
[a]
[null]
[a]
[a, ., getNext, (, )]
[a]
[markReferencedVar, (, scope, ., getVar, (, a, ., getString, (, ), ), )]
[scope, ., getVar, (, a, ., getString, (, ), )]
[scope]
[a, ., getString, (, )]
[a]
[var, !=, null]
[var]
[null]
[isRemovableVar, (, var, )]
[var]
[!, assignsByNode, ., containsKey, (, n, )]
[assignsByNode, ., containsKey, (, n, )]
[assignsByNode]
[n]
[markReferencedVar, (, var, )]
[var]
[markReferencedVar, (, var, )]
[var]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[traverseNode, (, c, ,, n, ,, scope, )]
[c]
[n]
[scope]
[!, removeGlobals, &&, var, ., isGlobal, (, )]
[!, removeGlobals]
[removeGlobals]
[var, ., isGlobal, (, )]
[var]
[false]
[referenced, ., contains, (, var, )]
[referenced]
[var]
[false]
[codingConvention, ., isExported, (, var, ., getName, (, ), )]
[codingConvention]
[var, ., getName, (, )]
[var]
[false]
[true]
[Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, )]
[Preconditions]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[Preconditions, ., checkState, (, n, ., isFunction, (, ), )]
[Preconditions]
[n, ., isFunction, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, )]
[body, ., getNext, (, ), ==, null]
[body, ., getNext, (, )]
[body]
[null]
[body, ., isBlock, (, )]
[body]
[new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, n, ,, parentScope, )]
[new, SyntacticScopeCreator, (, compiler, )]
[compiler]
[n]
[parentScope]
[traverseNode, (, body, ,, n, ,, fnScope, )]
[body]
[n]
[fnScope]
[collectMaybeUnreferencedVars, (, fnScope, )]
[fnScope]
[allFunctionScopes, ., add, (, fnScope, )]
[allFunctionScopes]
[fnScope]
[scope, ., getVars, (, )]
[scope]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[isRemovableVar, (, var, )]
[var]
[maybeUnreferenced, ., add, (, var, )]
[maybeUnreferenced]
[var]
[fnScope, ., getRootNode, (, )]
[fnScope]
[Preconditions, ., checkState, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[NodeUtil, ., isGetOrSetKey, (, function, ., getParent, (, ), )]
[NodeUtil]
[function, ., getParent, (, )]
[function]
[getFunctionArgList, (, function, )]
[function]
[modifyCallSites, &&, callSiteOptimizer, ., canModifyCallers, (, function, )]
[modifyCallSites]
[callSiteOptimizer, ., canModifyCallers, (, function, )]
[callSiteOptimizer]
[function]
[!, modifyCallers]
[modifyCallers]
[(, lastArg, =, argList, ., getLastChild, (, ), ), !=, null]
[(, lastArg, =, argList, ., getLastChild, (, ), )]
[lastArg]
[argList, ., getLastChild, (, )]
[argList]
[null]
[fnScope, ., getVar, (, lastArg, ., getString, (, ), )]
[fnScope]
[lastArg, ., getString, (, )]
[lastArg]
[!, referenced, ., contains, (, var, )]
[referenced, ., contains, (, var, )]
[referenced]
[var]
[argList, ., removeChild, (, lastArg, )]
[argList]
[lastArg]
[compiler, ., reportCodeChange, (, )]
[compiler]
[callSiteOptimizer, ., optimize, (, fnScope, ,, referenced, )]
[callSiteOptimizer]
[fnScope]
[referenced]
[function, ., getFirstChild, (, ), ., getNext, (, )]
[function, ., getFirstChild, (, )]
[function]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., compiler]
[this]
[compiler]
[this, ., defFinder]
[this]
[defFinder]
[fnScope, ., getRootNode, (, )]
[fnScope]
[Preconditions, ., checkState, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[getFunctionArgList, (, function, )]
[function]
[canChangeSignature, (, function, )]
[function]
[markUnreferencedFunctionArgs, (, fnScope, ,, function, ,, referenced, ,, argList, ., getFirstChild, (, ), ,, 0, ,, changeCallSignature, )]
[fnScope]
[function]
[referenced]
[argList, ., getFirstChild, (, )]
[argList]
[0]
[changeCallSignature]
[toRemove]
[n, ., getParent, (, ), ., removeChild, (, n, )]
[n, ., getParent, (, )]
[n]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[toReplaceWithZero]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ., srcref, (, n, ), )]
[n, ., getParent, (, )]
[n]
[n]
[IR, ., number, (, 0, ), ., srcref, (, n, )]
[IR, ., number, (, 0, )]
[IR]
[0]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[param, !=, null]
[param]
[null]
[markUnreferencedFunctionArgs, (, scope, ,, function, ,, referenced, ,, param, ., getNext, (, ), ,, paramIndex, +, 1, ,, canChangeSignature, )]
[scope]
[function]
[referenced]
[param, ., getNext, (, )]
[param]
[paramIndex, +, 1]
[paramIndex]
[1]
[canChangeSignature]
[scope, ., getVar, (, param, ., getString, (, ), )]
[scope]
[param, ., getString, (, )]
[param]
[!, referenced, ., contains, (, var, )]
[referenced, ., contains, (, var, )]
[referenced]
[var]
[Preconditions, ., checkNotNull, (, var, )]
[Preconditions]
[var]
[canChangeSignature, ||, !, hasFollowing]
[canChangeSignature]
[!, hasFollowing]
[hasFollowing]
[modifyAllCallSites]
[modifyAllCallSites]
[canRemoveArgFromCallSites, (, function, ,, paramIndex, )]
[function]
[paramIndex]
[tryRemoveArgFromCallSites, (, function, ,, paramIndex, ,, modifyAllCallSites, )]
[function]
[paramIndex]
[modifyAllCallSites]
[modifyAllCallSites, ||, !, hasFollowing]
[modifyAllCallSites]
[!, hasFollowing]
[hasFollowing]
[toRemove, ., add, (, param, )]
[toRemove]
[param]
[hasFollowing]
[true]
[tryRemoveAllFollowingArgs, (, function, ,, paramIndex, -, 1, )]
[function]
[paramIndex, -, 1]
[paramIndex]
[1]
[false]
[getFunctionDefinition, (, function, )]
[function]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[isModifiableCallSite, (, site, )]
[site]
[getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, )]
[site]
[argIndex]
[arg, !=, null, &&, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[arg, !=, null]
[arg]
[null]
[NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[NodeUtil]
[arg]
[compiler]
[false]
[false]
[true]
[getFunctionDefinition, (, function, )]
[function]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[isModifiableCallSite, (, site, )]
[site]
[getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, )]
[site]
[argIndex]
[arg, !=, null]
[arg]
[null]
[arg, ., getParent, (, )]
[arg]
[canModifyAllSites, ||, (, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), )]
[canModifyAllSites]
[(, arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), )]
[arg, ., getNext, (, ), ==, null, &&, !, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[arg, ., getNext, (, ), ==, null]
[arg, ., getNext, (, )]
[arg]
[null]
[!, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[NodeUtil]
[arg]
[compiler]
[toRemove, ., add, (, arg, )]
[toRemove]
[arg]
[!, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, ), &&, (, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, )]
[!, NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[NodeUtil, ., mayHaveSideEffects, (, arg, ,, compiler, )]
[NodeUtil]
[arg]
[compiler]
[(, !, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0, )]
[!, arg, ., isNumber, (, ), ||, arg, ., getDouble, (, ), !=, 0]
[!, arg, ., isNumber, (, )]
[arg, ., isNumber, (, )]
[arg]
[arg, ., getDouble, (, ), !=, 0]
[arg, ., getDouble, (, )]
[arg]
[0]
[toReplaceWithZero, ., add, (, arg, )]
[toReplaceWithZero]
[arg]
[getFunctionDefinition, (, function, )]
[function]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[!, isModifiableCallSite, (, site, )]
[isModifiableCallSite, (, site, )]
[site]
[getArgumentForCallOrNewOrDotCall, (, site, ,, argIndex, +, 1, )]
[site]
[argIndex, +, 1]
[argIndex]
[1]
[arg, !=, null]
[arg]
[null]
[!, NodeUtil, ., mayHaveSideEffects, (, arg, )]
[NodeUtil, ., mayHaveSideEffects, (, arg, )]
[NodeUtil]
[arg]
[toRemove, ., add, (, arg, )]
[toRemove]
[arg]
[arg]
[arg, ., getNext, (, )]
[arg]
[argIndex]
[site, ., node, ., getParent, (, )]
[site, ., node]
[site]
[NodeUtil, ., isFunctionObjectCall, (, parent, )]
[NodeUtil]
[parent]
[adjustedArgIndex, ++]
[adjustedArgIndex]
[NodeUtil, ., getArgumentForCallOrNew, (, parent, ,, adjustedArgIndex, )]
[NodeUtil]
[parent]
[adjustedArgIndex]
[NodeUtil, ., isVarArgsFunction, (, function, )]
[NodeUtil]
[function]
[false]
[defFinder, ., getDefinitionForFunction, (, function, )]
[defFinder]
[function]
[defSite, ==, null]
[defSite]
[null]
[false]
[defSite, ., definition]
[defSite]
[!, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, )]
[SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, function, )]
[SimpleDefinitionFinder]
[function]
[false]
[defFinder, ., canModifyDefinition, (, definition, )]
[defFinder]
[definition]
[SimpleDefinitionFinder, ., isCallOrNewSite, (, site, ), &&, !, NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), )]
[SimpleDefinitionFinder, ., isCallOrNewSite, (, site, )]
[SimpleDefinitionFinder]
[site]
[!, NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), )]
[NodeUtil, ., isFunctionObjectApply, (, site, ., node, ., getParent, (, ), )]
[NodeUtil]
[site, ., node, ., getParent, (, )]
[site, ., node]
[site]
[getFunctionDefinition, (, function, )]
[function]
[compiler, ., getCodingConvention, (, )]
[compiler]
[Preconditions, ., checkState, (, !, definition, ., isExtern, (, ), )]
[Preconditions]
[!, definition, ., isExtern, (, )]
[definition, ., isExtern, (, )]
[definition]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[useSites]
[site, ., node, ., getParent, (, )]
[site, ., node]
[site]
[parent, ==, null]
[parent]
[null]
[parent, ., isCall, (, ), &&, convention, ., getClassesDefinedByCall, (, parent, ), !=, null]
[parent, ., isCall, (, )]
[parent]
[convention, ., getClassesDefinedByCall, (, parent, ), !=, null]
[convention, ., getClassesDefinedByCall, (, parent, )]
[convention]
[parent]
[null]
[!, SimpleDefinitionFinder, ., isCallOrNewSite, (, site, )]
[SimpleDefinitionFinder, ., isCallOrNewSite, (, site, )]
[SimpleDefinitionFinder]
[site]
[!, (, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), )]
[(, parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), ), )]
[parent, ., isGetProp, (, ), &&, NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), )]
[parent, ., isGetProp, (, )]
[parent]
[NodeUtil, ., isFunctionObjectCall, (, parent, ., getParent, (, ), )]
[NodeUtil]
[parent, ., getParent, (, )]
[parent]
[false]
[NodeUtil, ., isFunctionObjectApply, (, parent, )]
[NodeUtil]
[parent]
[false]
[site, ., node]
[site]
[defFinder, ., getDefinitionsReferencedAt, (, nameNode, )]
[defFinder]
[nameNode]
[Preconditions, ., checkState, (, singleSiteDefinitions, ., size, (, ), ==, 1, )]
[Preconditions]
[singleSiteDefinitions, ., size, (, ), ==, 1]
[singleSiteDefinitions, ., size, (, )]
[singleSiteDefinitions]
[1]
[Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), )]
[Preconditions]
[singleSiteDefinitions, ., contains, (, definition, )]
[singleSiteDefinitions]
[definition]
[true]
[defFinder, ., getDefinitionForFunction, (, function, )]
[defFinder]
[function]
[Preconditions, ., checkNotNull, (, definitionSite, )]
[Preconditions]
[definitionSite]
[definitionSite, ., definition]
[definitionSite]
[Preconditions, ., checkState, (, !, definitionSite, ., inExterns, )]
[Preconditions]
[!, definitionSite, ., inExterns]
[definitionSite, ., inExterns]
[definitionSite]
[Preconditions, ., checkState, (, definition, ., getRValue, (, ), ==, function, )]
[Preconditions]
[definition, ., getRValue, (, ), ==, function]
[definition, ., getRValue, (, )]
[definition]
[function]
[definition]
[false]
[changes]
[false]
[0]
[current, <, maybeUnreferenced, ., size, (, )]
[current]
[maybeUnreferenced, ., size, (, )]
[maybeUnreferenced]
[current, ++]
[current]
[maybeUnreferenced, ., get, (, current, )]
[maybeUnreferenced]
[current]
[referenced, ., contains, (, var, )]
[referenced]
[var]
[maybeUnreferenced, ., remove, (, current, )]
[maybeUnreferenced]
[current]
[current, --]
[current]
[false]
[false]
[var, ., getParentNode, (, ), ., isVar, (, ), &&, !, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), )]
[var, ., getParentNode, (, ), ., isVar, (, )]
[var, ., getParentNode, (, )]
[var]
[!, NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), )]
[NodeUtil, ., isForIn, (, var, ., getParentNode, (, ), ., getParent, (, ), )]
[NodeUtil]
[var, ., getParentNode, (, ), ., getParent, (, )]
[var, ., getParentNode, (, )]
[var]
[var, ., getInitialValue, (, )]
[var]
[assignedToUnknownValue]
[value, !=, null, &&, !, NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[value, !=, null]
[value]
[null]
[!, NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[NodeUtil]
[value]
[true]
[assignedToUnknownValue]
[true]
[false]
[assignsByVar, ., get, (, var, )]
[assignsByVar]
[var]
[assign, ., isPropertyAssign]
[assign]
[hasPropertyAssign]
[true]
[!, NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, )]
[NodeUtil, ., isLiteralValue, (, assign, ., assignNode, ., getLastChild, (, ), ,, true, )]
[NodeUtil]
[assign, ., assignNode, ., getLastChild, (, )]
[assign, ., assignNode]
[assign]
[true]
[assignedToUnknownValue]
[true]
[assign, ., maybeAliased]
[assign]
[maybeEscaped]
[true]
[(, assignedToUnknownValue, ||, maybeEscaped, ), &&, hasPropertyAssign]
[(, assignedToUnknownValue, ||, maybeEscaped, )]
[assignedToUnknownValue, ||, maybeEscaped]
[assignedToUnknownValue]
[maybeEscaped]
[hasPropertyAssign]
[changes]
[markReferencedVar, (, var, ), ||, changes]
[markReferencedVar, (, var, )]
[var]
[changes]
[maybeUnreferenced, ., remove, (, current, )]
[maybeUnreferenced]
[current]
[current, --]
[current]
[changes]
[assignsByVar, ., get, (, var, )]
[assignsByVar]
[var]
[assign, ., remove, (, )]
[assign]
[compiler, ., reportCodeChange, (, )]
[compiler]
[referenced, ., add, (, var, )]
[referenced]
[var]
[continuations, ., get, (, var, )]
[continuations]
[var]
[c, ., apply, (, )]
[c]
[true]
[false]
[codingConvention]
[maybeUnreferenced, ., iterator, (, )]
[maybeUnreferenced]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[classDefiningCalls, ., get, (, var, )]
[classDefiningCalls]
[var]
[NodeUtil, ., removeChild, (, exprCallNode, ., getParent, (, ), ,, exprCallNode, )]
[NodeUtil]
[exprCallNode, ., getParent, (, )]
[exprCallNode]
[exprCallNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[removeAllAssigns, (, var, )]
[var]
[compiler, ., addToDebugLog, (, "Unreferenced var: ", +, var, ., name, )]
[compiler]
["Unreferenced var: ", +, var, ., name]
["Unreferenced var: "]
[var, ., name]
[var]
[var, ., nameNode]
[var]
[nameNode, ., getParent, (, )]
[nameNode]
[toRemove, ., getParent, (, )]
[toRemove]
[Preconditions, ., checkState, (, toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, ), ,, "We should only declare vars and functions and function args", )]
[Preconditions]
[toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, ), ||, toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, )]
[toRemove, ., isVar, (, ), ||, toRemove, ., isFunction, (, )]
[toRemove, ., isVar, (, )]
[toRemove]
[toRemove, ., isFunction, (, )]
[toRemove]
[toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, )]
[toRemove, ., isParamList, (, )]
[toRemove]
[parent, ., isFunction, (, )]
[parent]
["We should only declare vars and functions and function args"]
[toRemove, ., isParamList, (, ), &&, parent, ., isFunction, (, )]
[toRemove, ., isParamList, (, )]
[toRemove]
[parent, ., isFunction, (, )]
[parent]
[NodeUtil, ., isFunctionExpression, (, toRemove, )]
[NodeUtil]
[toRemove]
[!, preserveFunctionExpressionNames]
[preserveFunctionExpressionNames]
[toRemove, ., getFirstChild, (, ), ., setString, (, "", )]
[toRemove, ., getFirstChild, (, )]
[toRemove]
[""]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent, !=, null, &&, parent, ., isFor, (, ), &&, parent, ., getChildCount, (, ), <, 4]
[parent, !=, null, &&, parent, ., isFor, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., isFor, (, )]
[parent]
[parent, ., getChildCount, (, ), <, 4]
[parent, ., getChildCount, (, )]
[parent]
[4]
[toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, ), &&, NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, )]
[toRemove, ., isVar, (, ), &&, nameNode, ., hasChildren, (, )]
[toRemove, ., isVar, (, )]
[toRemove]
[nameNode, ., hasChildren, (, )]
[nameNode]
[NodeUtil, ., mayHaveSideEffects, (, nameNode, ., getFirstChild, (, ), ,, compiler, )]
[NodeUtil]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[compiler]
[toRemove, ., getChildCount, (, ), ==, 1]
[toRemove, ., getChildCount, (, )]
[toRemove]
[1]
[parent, ., replaceChild, (, toRemove, ,, IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), ), )]
[parent]
[toRemove]
[IR, ., exprResult, (, nameNode, ., removeFirstChild, (, ), )]
[IR]
[nameNode, ., removeFirstChild, (, )]
[nameNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[toRemove, ., isVar, (, ), &&, toRemove, ., getChildCount, (, ), >, 1]
[toRemove, ., isVar, (, )]
[toRemove]
[toRemove, ., getChildCount, (, ), >, 1]
[toRemove, ., getChildCount, (, )]
[toRemove]
[1]
[toRemove, ., removeChild, (, nameNode, )]
[toRemove]
[nameNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent, !=, null]
[parent]
[null]
[NodeUtil, ., removeChild, (, parent, ,, toRemove, )]
[NodeUtil]
[parent]
[toRemove]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., node]
[this]
[node]
[this, ., scope]
[this]
[scope]
[NodeUtil, ., isFunctionDeclaration, (, node, )]
[NodeUtil]
[node]
[traverseFunction, (, node, ,, scope, )]
[node]
[scope]
[node, ., getFirstChild, (, )]
[node]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[traverseNode, (, child, ,, node, ,, scope, )]
[child]
[node]
[scope]
[Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), )]
[Preconditions]
[NodeUtil, ., isAssignmentOp, (, assignNode, )]
[NodeUtil]
[assignNode]
[this, ., assignNode]
[this]
[assignNode]
[this, ., nameNode]
[this]
[nameNode]
[this, ., isPropertyAssign]
[this]
[isPropertyAssign]
[this, ., maybeAliased]
[this]
[NodeUtil, ., isExpressionResultUsed, (, assignNode, )]
[NodeUtil]
[assignNode]
[this, ., mayHaveSecondarySideEffects]
[this]
[maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), ), ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), )]
[maybeAliased, ||, NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), )]
[maybeAliased]
[NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getFirstChild, (, ), )]
[NodeUtil]
[assignNode, ., getFirstChild, (, )]
[assignNode]
[NodeUtil, ., mayHaveSideEffects, (, assignNode, ., getLastChild, (, ), )]
[NodeUtil]
[assignNode, ., getLastChild, (, )]
[assignNode]
[Preconditions, ., checkState, (, NodeUtil, ., isAssignmentOp, (, assignNode, ), )]
[Preconditions]
[NodeUtil, ., isAssignmentOp, (, assignNode, )]
[NodeUtil]
[assignNode]
[false]
[assignNode, ., getFirstChild, (, )]
[assignNode]
[NodeUtil, ., isGet, (, current, )]
[NodeUtil]
[current]
[current]
[current, ., getFirstChild, (, )]
[current]
[isPropAssign]
[true]
[current, ., isGetProp, (, ), &&, current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[current, ., isGetProp, (, )]
[current]
[current, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[current, ., getLastChild, (, ), ., getString, (, )]
[current, ., getLastChild, (, )]
[current]
["prototype"]
[current]
[current, ., getFirstChild, (, )]
[current]
[current, ., isName, (, )]
[current]
[new, Assign, (, assignNode, ,, current, ,, isPropAssign, )]
[assignNode]
[current]
[isPropAssign]
[null]
[assignNode, ., getParent, (, )]
[assignNode]
[mayHaveSecondarySideEffects]
[assignNode, ., getLastChild, (, ), ., detachFromParent, (, )]
[assignNode, ., getLastChild, (, )]
[assignNode]
[assignNode, ., getFirstChild, (, )]
[assignNode]
[!, current, ., isName, (, )]
[current, ., isName, (, )]
[current]
[current]
[current, ., getFirstChild, (, )]
[current]
[current, ., isGetElem, (, )]
[current]
[replacement]
[IR, ., comma, (, current, ., getLastChild, (, ), ., detachFromParent, (, ), ,, replacement, )]
[IR]
[current, ., getLastChild, (, ), ., detachFromParent, (, )]
[current, ., getLastChild, (, )]
[current]
[replacement]
[replacement, ., copyInformationFrom, (, current, )]
[replacement]
[current]
[parent, ., replaceChild, (, assignNode, ,, replacement, )]
[parent]
[assignNode]
[replacement]
[parent, ., getParent, (, )]
[parent]
[parent, ., isExprResult, (, )]
[parent]
[gramps, ., removeChild, (, parent, )]
[gramps]
[parent]
[parent, ., replaceChild, (, assignNode, ,, assignNode, ., getLastChild, (, ), ., detachFromParent, (, ), )]
[parent]
[assignNode]
[assignNode, ., getLastChild, (, ), ., detachFromParent, (, )]
[assignNode, ., getLastChild, (, )]
[assignNode]
