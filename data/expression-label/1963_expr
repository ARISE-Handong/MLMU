[new, LineNumberingFormatter, (, )]
[null]
[this, ., excerpt]
[this]
[LINE]
[source]
[LINE]
[source]
[Preconditions, ., checkNotNull, (, source, )]
[Preconditions]
[source]
[this, ., excerpt]
[this]
[excerpt]
[new, LightweightMessageFormatter, (, )]
[format, (, error, ,, false, )]
[error]
[false]
[format, (, warning, ,, true, )]
[warning]
[true]
[getSource, (, )]
[source, ==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, )]
[source, ==, null]
[source]
[null]
[null]
[excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, )]
[excerpt]
[source]
[error, ., sourceName]
[error]
[error, ., lineNumber]
[error]
[excerptFormatter]
[new, StringBuilder, (, )]
[error, ., sourceName, !=, null]
[error, ., sourceName]
[error]
[null]
[b, ., append, (, error, ., sourceName, )]
[b]
[error, ., sourceName]
[error]
[error, ., lineNumber, >, 0]
[error, ., lineNumber]
[error]
[0]
[b, ., append, (, ':', )]
[b]
[':']
[b, ., append, (, error, ., lineNumber, )]
[b]
[error, ., lineNumber]
[error]
[b, ., append, (, ": ", )]
[b]
[": "]
[b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), )]
[b]
[getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, )]
[warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR]
[warning]
[CheckLevel, ., WARNING]
[CheckLevel]
[CheckLevel, ., ERROR]
[CheckLevel]
[b, ., append, (, " - ", )]
[b]
[" - "]
[b, ., append, (, error, ., description, )]
[b]
[error, ., description]
[error]
[b, ., append, (, '\n', )]
[b]
['\n']
[sourceExcerpt, !=, null]
[sourceExcerpt]
[null]
[b, ., append, (, sourceExcerpt, )]
[b]
[sourceExcerpt]
[b, ., append, (, '\n', )]
[b]
['\n']
[error, ., getCharno, (, )]
[error]
[excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, )]
[excerpt, ., equals, (, LINE, ), &&, 0, <=, charno]
[excerpt, ., equals, (, LINE, )]
[excerpt]
[LINE]
[0, <=, charno]
[0]
[charno]
[charno, <=, sourceExcerpt, ., length, (, )]
[charno]
[sourceExcerpt, ., length, (, )]
[sourceExcerpt]
[0]
[i, <, charno]
[i]
[charno]
[i, ++]
[i]
[sourceExcerpt, ., charAt, (, i, )]
[sourceExcerpt]
[i]
[Character, ., isWhitespace, (, c, )]
[Character]
[c]
[b, ., append, (, c, )]
[b]
[c]
[b, ., append, (, ' ', )]
[b]
[' ']
[b, ., append, (, "^\n", )]
[b]
["^\n"]
[b, ., toString, (, )]
[b]
[line]
[region, ==, null]
[region]
[null]
[null]
[region, ., getSourceExcerpt, (, )]
[region]
[code, ., length, (, ), ==, 0]
[code, ., length, (, )]
[code]
[0]
[null]
[Integer, ., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, )]
[Integer, ., toString, (, region, ., getEndingLineNumber, (, ), )]
[Integer]
[region, ., getEndingLineNumber, (, )]
[region]
[new, StringBuilder, (, code, ., length, (, ), *, 2, )]
[code, ., length, (, ), *, 2]
[code, ., length, (, )]
[code]
[2]
[0]
[code, ., indexOf, (, '\n', ,, start, )]
[code]
['\n']
[start]
[region, ., getBeginningLineNumber, (, )]
[region]
[start, >=, 0]
[start]
[0]
[end, <, 0]
[end]
[0]
[line]
[code, ., substring, (, start, )]
[code]
[start]
[line, ., length, (, ), ==, 0]
[line, ., length, (, )]
[line]
[0]
[builder, ., substring, (, 0, ,, builder, ., length, (, ), -, 1, )]
[builder]
[0]
[builder, ., length, (, ), -, 1]
[builder, ., length, (, )]
[builder]
[1]
[line]
[code, ., substring, (, start, ,, end, )]
[code]
[start]
[end]
[builder, ., append, (, "  ", )]
[builder]
["  "]
[numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, )]
[numberLength]
[Integer, ., toString, (, lineNumber, ), ., length, (, )]
[Integer, ., toString, (, lineNumber, )]
[Integer]
[lineNumber]
[builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), )]
[builder]
[Strings, ., repeat, (, " ", ,, spaces, )]
[Strings]
[" "]
[spaces]
[builder, ., append, (, lineNumber, )]
[builder]
[lineNumber]
[builder, ., append, (, "| ", )]
[builder]
["| "]
[end, <, 0]
[end]
[0]
[builder, ., append, (, line, )]
[builder]
[line]
[start]
[-, 1]
[1]
[builder, ., append, (, line, )]
[builder]
[line]
[builder, ., append, (, '\n', )]
[builder]
['\n']
[start]
[end, +, 1]
[end]
[1]
[end]
[code, ., indexOf, (, '\n', ,, start, )]
[code]
['\n']
[start]
[lineNumber, ++]
[lineNumber]
[builder, ., toString, (, )]
[builder]
