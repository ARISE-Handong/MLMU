["/"]
[".", +, MODULE_SLASH]
["."]
[MODULE_SLASH]
["\\$"]
["module$"]
[compiler]
[filenamePrefix]
[true]
[this, ., compiler]
[this]
[compiler]
[this, ., filenamePrefix]
[this]
[filenamePrefix, ., endsWith, (, MODULE_SLASH, ), ?, filenamePrefix, :, filenamePrefix, +, MODULE_SLASH]
[filenamePrefix, ., endsWith, (, MODULE_SLASH, )]
[filenamePrefix]
[MODULE_SLASH]
[filenamePrefix]
[filenamePrefix, +, MODULE_SLASH]
[filenamePrefix]
[MODULE_SLASH]
[this, ., reportDependencies]
[this]
[reportDependencies]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessCommonJsModulesCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessCommonJsModulesCallback, (, )]
[toModuleName, (, normalizeSourceName, (, filename, ), )]
[normalizeSourceName, (, filename, )]
[filename]
[module]
[MODULE_NAME_PREFIX, +, filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", )]
[MODULE_NAME_PREFIX]
[filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", ), ., replaceAll, (, "-", ,, "_", )]
[filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, ), ., replaceAll, (, "\\.js$", ,, "", )]
[filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", ), ., replaceAll, (, Pattern, ., quote, (, MODULE_SLASH, ), ,, MODULE_NAME_SEPARATOR, )]
[filename, ., replaceAll, (, "^\\.", +, Pattern, ., quote, (, MODULE_SLASH, ), ,, "", )]
[filename]
["^\\.", +, Pattern, ., quote, (, MODULE_SLASH, )]
["^\\."]
[Pattern, ., quote, (, MODULE_SLASH, )]
[Pattern]
[MODULE_SLASH]
[""]
[Pattern, ., quote, (, MODULE_SLASH, )]
[Pattern]
[MODULE_SLASH]
[MODULE_NAME_SEPARATOR]
["\\.js$"]
[""]
["-"]
["_"]
[requiredFilename]
[requiredFilename, ., replaceAll, (, "\\.js$", ,, "", )]
[requiredFilename]
["\\.js$"]
[""]
[currentFilename]
[currentFilename, ., replaceAll, (, "\\.js$", ,, "", )]
[currentFilename]
["\\.js$"]
[""]
[requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, ), ||, requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, )]
[requiredFilename, ., startsWith, (, ".", +, MODULE_SLASH, )]
[requiredFilename]
[".", +, MODULE_SLASH]
["."]
[MODULE_SLASH]
[requiredFilename, ., startsWith, (, "..", +, MODULE_SLASH, )]
[requiredFilename]
["..", +, MODULE_SLASH]
[".."]
[MODULE_SLASH]
[requiredFilename]
[(, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (, requiredFilename, ), ), ., toString, (, )]
[(, new, URI, (, currentFilename, ), ), ., resolve, (, new, URI, (, requiredFilename, ), )]
[(, new, URI, (, currentFilename, ), )]
[new, URI, (, currentFilename, )]
[currentFilename]
[new, URI, (, requiredFilename, )]
[requiredFilename]
[new, RuntimeException, (, e, )]
[e]
[toModuleName, (, requiredFilename, )]
[requiredFilename]
[filename]
[filename, ., replace, (, "\\", ,, "/", )]
[filename]
["\\"]
["/"]
[filename, ., indexOf, (, filenamePrefix, ), ==, 0]
[filename, ., indexOf, (, filenamePrefix, )]
[filename]
[filenamePrefix]
[0]
[filename]
[filename, ., substring, (, filenamePrefix, ., length, (, ), )]
[filename]
[filenamePrefix, ., length, (, )]
[filenamePrefix]
[filename]
[0]
[Sets, ., newHashSet, (, )]
[Sets]
[n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, n, ., getChildAtIndex, (, 1, ), ., isString, (, )]
[n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2, &&, "require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[n, ., isCall, (, ), &&, n, ., getChildCount, (, ), ==, 2]
[n, ., isCall, (, )]
[n]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
["require", ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
["require"]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getChildAtIndex, (, 1, ), ., isString, (, )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[visitRequireCall, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[n, ., isScript, (, )]
[n]
[scriptNodeCount, ++]
[scriptNodeCount]
[visitScript, (, t, ,, n, )]
[t]
[n]
[n, ., isGetProp, (, ), &&, "module.exports", ., equals, (, n, ., getQualifiedName, (, ), )]
[n, ., isGetProp, (, )]
[n]
["module.exports", ., equals, (, n, ., getQualifiedName, (, ), )]
["module.exports"]
[n, ., getQualifiedName, (, )]
[n]
[visitModuleExports, (, n, )]
[n]
[toModuleName, (, require, ., getChildAtIndex, (, 1, ), ., getString, (, ), ,, normalizeSourceName, (, t, ., getSourceName, (, ), ), )]
[require, ., getChildAtIndex, (, 1, ), ., getString, (, )]
[require, ., getChildAtIndex, (, 1, )]
[require]
[1]
[normalizeSourceName, (, t, ., getSourceName, (, ), )]
[t, ., getSourceName, (, )]
[t]
[IR, ., name, (, moduleName, ), ., srcref, (, require, )]
[IR, ., name, (, moduleName, )]
[IR]
[moduleName]
[require]
[parent, ., replaceChild, (, require, ,, moduleRef, )]
[parent]
[require]
[moduleRef]
[getCurrentScriptNode, (, parent, )]
[parent]
[reportDependencies]
[t, ., getInput, (, ), ., addRequire, (, moduleName, )]
[t, ., getInput, (, )]
[t]
[moduleName]
[script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, ), )]
[script]
[IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, require, )]
[IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), ), )]
[IR]
[IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), ), ,, IR, ., string, (, moduleName, ), )]
[IR]
[IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "require", ), )]
[IR]
[IR, ., name, (, "goog", )]
[IR]
["goog"]
[IR, ., string, (, "require", )]
[IR]
["require"]
[IR, ., string, (, moduleName, )]
[IR]
[moduleName]
[require]
[compiler, ., reportCodeChange, (, )]
[compiler]
[Preconditions, ., checkArgument, (, scriptNodeCount, ==, 1, ,, "ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node", )]
[Preconditions]
[scriptNodeCount, ==, 1]
[scriptNodeCount]
[1]
["ProcessCommonJSModules supports only one invocation per ", +, "CompilerInput / script node"]
["ProcessCommonJSModules supports only one invocation per "]
["CompilerInput / script node"]
[guessCJSModuleName, (, script, ., getSourceFileName, (, ), )]
[script, ., getSourceFileName, (, )]
[script]
[script, ., addChildToFront, (, IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, ), )]
[script]
[IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), ), ., copyInformationFromForTree, (, script, )]
[IR, ., var, (, IR, ., name, (, moduleName, ), ,, IR, ., objectlit, (, ), )]
[IR]
[IR, ., name, (, moduleName, )]
[IR]
[moduleName]
[IR, ., objectlit, (, )]
[IR]
[script]
[reportDependencies]
[t, ., getInput, (, )]
[t]
[ci, ., addProvide, (, moduleName, )]
[ci]
[moduleName]
[new, JSModule, (, moduleName, )]
[moduleName]
[m, ., addAndOverrideModule, (, ci, )]
[m]
[ci]
[module]
[m]
[script, ., addChildToFront, (, IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, ), )]
[script]
[IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), ), ., copyInformationFromForTree, (, script, )]
[IR, ., exprResult, (, IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), ), )]
[IR]
[IR, ., call, (, IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), ), ,, IR, ., string, (, moduleName, ), )]
[IR]
[IR, ., getprop, (, IR, ., name, (, "goog", ), ,, IR, ., string, (, "provide", ), )]
[IR]
[IR, ., name, (, "goog", )]
[IR]
["goog"]
[IR, ., string, (, "provide", )]
[IR]
["provide"]
[IR, ., string, (, moduleName, )]
[IR]
[moduleName]
[script]
[emitOptionalModuleExportsOverride, (, script, ,, moduleName, )]
[script]
[moduleName]
[NodeTraversal, ., traverse, (, compiler, ,, script, ,, new, SuffixVarsCallback, (, moduleName, ), )]
[NodeTraversal]
[compiler]
[script]
[new, SuffixVarsCallback, (, moduleName, )]
[moduleName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, modulesWithExports, ., contains, (, moduleName, )]
[modulesWithExports, ., contains, (, moduleName, )]
[modulesWithExports]
[moduleName]
[IR, ., getprop, (, IR, ., name, (, moduleName, ), ,, IR, ., string, (, "module$exports", ), )]
[IR]
[IR, ., name, (, moduleName, )]
[IR]
[moduleName]
[IR, ., string, (, "module$exports", )]
[IR]
["module$exports"]
[script, ., addChildToBack, (, IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, ), )]
[script]
[IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), ), ., copyInformationFromForTree, (, script, )]
[IR, ., ifNode, (, moduleExportsProp, ,, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), ), )]
[IR]
[moduleExportsProp]
[IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), ), )]
[IR]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), ), )]
[IR]
[IR, ., assign, (, IR, ., name, (, moduleName, ), ,, moduleExportsProp, ., cloneTree, (, ), )]
[IR]
[IR, ., name, (, moduleName, )]
[IR]
[moduleName]
[moduleExportsProp, ., cloneTree, (, )]
[moduleExportsProp]
[script]
[guessCJSModuleName, (, prop, ., getSourceFileName, (, ), )]
[prop, ., getSourceFileName, (, )]
[prop]
[prop, ., getChildAtIndex, (, 0, )]
[prop]
[0]
[module, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "module", )]
[module]
[Node, ., ORIGINALNAME_PROP]
[Node]
["module"]
[module, ., setString, (, moduleName, )]
[module]
[moduleName]
[prop, ., getChildAtIndex, (, 1, )]
[prop]
[1]
[exports, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, "exports", )]
[exports]
[Node, ., ORIGINALNAME_PROP]
[Node]
["exports"]
[exports, ., setString, (, "module$exports", )]
[exports]
["module$exports"]
[modulesWithExports, ., add, (, moduleName, )]
[modulesWithExports]
[moduleName]
[true]
[n, ., isScript, (, )]
[n]
[n]
[n]
[n, ., getParent, (, )]
[n]
["exports"]
[this, ., suffix]
[this]
[suffix]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[suffix, ., equals, (, name, )]
[suffix]
[name]
[EXPORTS, ., equals, (, name, )]
[EXPORTS]
[name]
[n, ., setString, (, suffix, )]
[n]
[suffix]
[n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, EXPORTS, )]
[n]
[Node, ., ORIGINALNAME_PROP]
[Node]
[EXPORTS]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, !=, null, &&, var, ., isGlobal, (, )]
[var, !=, null]
[var]
[null]
[var, ., isGlobal, (, )]
[var]
[n, ., setString, (, name, +, "$$", +, suffix, )]
[n]
[name, +, "$$", +, suffix]
[name, +, "$$"]
[name]
["$$"]
[suffix]
[n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, )]
[n]
[Node, ., ORIGINALNAME_PROP]
[Node]
[name]
