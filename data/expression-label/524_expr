[0x40000000L]
[new, double, [, ], {, +, 1.0d, ,, +, 1.0d, ,, +, 2.0d, ,, +, 6.0d, ,, +, 24.0d, ,, +, 120.0d, ,, +, 720.0d, ,, +, 5040.0d, ,, +, 40320.0d, ,, +, 362880.0d, ,, +, 3628800.0d, ,, +, 39916800.0d, ,, +, 479001600.0d, ,, +, 6227020800.0d, ,, +, 87178291200.0d, ,, +, 1307674368000.0d, ,, +, 20922789888000.0d, ,, +, 355687428096000.0d, ,, +, 6402373705728000.0d, ,, +, 121645100408832000.0d, ,, }]
[{, +, 1.0d, ,, +, 1.0d, ,, +, 2.0d, ,, +, 6.0d, ,, +, 24.0d, ,, +, 120.0d, ,, +, 720.0d, ,, +, 5040.0d, ,, +, 40320.0d, ,, +, 362880.0d, ,, +, 3628800.0d, ,, +, 39916800.0d, ,, +, 479001600.0d, ,, +, 6227020800.0d, ,, +, 87178291200.0d, ,, +, 1307674368000.0d, ,, +, 20922789888000.0d, ,, +, 355687428096000.0d, ,, +, 6402373705728000.0d, ,, +, 121645100408832000.0d, ,, }]
[+, 1.0d]
[1.0d]
[+, 1.0d]
[1.0d]
[+, 2.0d]
[2.0d]
[+, 6.0d]
[6.0d]
[+, 24.0d]
[24.0d]
[+, 120.0d]
[120.0d]
[+, 720.0d]
[720.0d]
[+, 5040.0d]
[5040.0d]
[+, 40320.0d]
[40320.0d]
[+, 362880.0d]
[362880.0d]
[+, 3628800.0d]
[3628800.0d]
[+, 39916800.0d]
[39916800.0d]
[+, 479001600.0d]
[479001600.0d]
[+, 6227020800.0d]
[6227020800.0d]
[+, 87178291200.0d]
[87178291200.0d]
[+, 1307674368000.0d]
[1307674368000.0d]
[+, 20922789888000.0d]
[20922789888000.0d]
[+, 355687428096000.0d]
[355687428096000.0d]
[+, 6402373705728000.0d]
[6402373705728000.0d]
[+, 121645100408832000.0d]
[121645100408832000.0d]
[{, {, 2.0, ,, 0.0, }, ,, {, 0.6666666269302368, ,, 3.9736429850260626E-8, }, ,, {, 0.3999999761581421, ,, 2.3841857910019882E-8, }, ,, {, 0.2857142686843872, ,, 1.7029898543501842E-8, }, ,, {, 0.2222222089767456, ,, 1.3245471311735498E-8, }, ,, {, 0.1818181574344635, ,, 2.4384203044354907E-8, }, ,, {, 0.1538461446762085, ,, 9.140260083262505E-9, }, ,, {, 0.13333332538604736, ,, 9.220590270857665E-9, }, ,, {, 0.11764700710773468, ,, 1.2393345855018391E-8, }, ,, {, 0.10526403784751892, ,, 8.251545029714408E-9, }, ,, {, 0.0952233225107193, ,, 1.2675934823758863E-8, }, ,, {, 0.08713622391223907, ,, 1.1430250008909141E-8, }, ,, {, 0.07842259109020233, ,, 2.404307984052299E-9, }, ,, {, 0.08371849358081818, ,, 1.176342548272881E-8, }, ,, {, 0.030589580535888672, ,, 1.2958646899018938E-9, }, ,, {, 0.14982303977012634, ,, 1.225743062930824E-8, }, ,, }]
[{, 2.0, ,, 0.0, }]
[2.0]
[0.0]
[{, 0.6666666269302368, ,, 3.9736429850260626E-8, }]
[0.6666666269302368]
[3.9736429850260626E-8]
[{, 0.3999999761581421, ,, 2.3841857910019882E-8, }]
[0.3999999761581421]
[2.3841857910019882E-8]
[{, 0.2857142686843872, ,, 1.7029898543501842E-8, }]
[0.2857142686843872]
[1.7029898543501842E-8]
[{, 0.2222222089767456, ,, 1.3245471311735498E-8, }]
[0.2222222089767456]
[1.3245471311735498E-8]
[{, 0.1818181574344635, ,, 2.4384203044354907E-8, }]
[0.1818181574344635]
[2.4384203044354907E-8]
[{, 0.1538461446762085, ,, 9.140260083262505E-9, }]
[0.1538461446762085]
[9.140260083262505E-9]
[{, 0.13333332538604736, ,, 9.220590270857665E-9, }]
[0.13333332538604736]
[9.220590270857665E-9]
[{, 0.11764700710773468, ,, 1.2393345855018391E-8, }]
[0.11764700710773468]
[1.2393345855018391E-8]
[{, 0.10526403784751892, ,, 8.251545029714408E-9, }]
[0.10526403784751892]
[8.251545029714408E-9]
[{, 0.0952233225107193, ,, 1.2675934823758863E-8, }]
[0.0952233225107193]
[1.2675934823758863E-8]
[{, 0.08713622391223907, ,, 1.1430250008909141E-8, }]
[0.08713622391223907]
[1.1430250008909141E-8]
[{, 0.07842259109020233, ,, 2.404307984052299E-9, }]
[0.07842259109020233]
[2.404307984052299E-9]
[{, 0.08371849358081818, ,, 1.176342548272881E-8, }]
[0.08371849358081818]
[1.176342548272881E-8]
[{, 0.030589580535888672, ,, 1.2958646899018938E-9, }]
[0.030589580535888672]
[1.2958646899018938E-9]
[{, 0.14982303977012634, ,, 1.225743062930824E-8, }]
[0.14982303977012634]
[1.225743062930824E-8]
["    {"]
["    };"]
[@, SuppressWarnings, (, "unused", )]
["unused"]
[new, double, [, 2, ]]
[2]
[0]
[i, <, 7]
[i]
[7]
[i, ++]
[i]
[i, /, 8.0]
[i]
[8.0]
[slowSin, (, x, ,, result, )]
[x]
[result]
[SINE_TABLE_A, [, i, ]]
[SINE_TABLE_A]
[i]
[result, [, 0, ]]
[result]
[0]
[SINE_TABLE_B, [, i, ]]
[SINE_TABLE_B]
[i]
[result, [, 1, ]]
[result]
[1]
[slowCos, (, x, ,, result, )]
[x]
[result]
[COSINE_TABLE_A, [, i, ]]
[COSINE_TABLE_A]
[i]
[result, [, 0, ]]
[result]
[0]
[COSINE_TABLE_B, [, i, ]]
[COSINE_TABLE_B]
[i]
[result, [, 1, ]]
[result]
[1]
[7]
[i, <, SINE_TABLE_LEN]
[i]
[SINE_TABLE_LEN]
[i, ++]
[i]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[(, i, &, 1, ), ==, 0]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[0]
[xs, [, 0, ]]
[xs]
[0]
[SINE_TABLE_A, [, i, /, 2, ]]
[SINE_TABLE_A]
[i, /, 2]
[i]
[2]
[xs, [, 1, ]]
[xs]
[1]
[SINE_TABLE_B, [, i, /, 2, ]]
[SINE_TABLE_B]
[i, /, 2]
[i]
[2]
[ys, [, 0, ]]
[ys]
[0]
[COSINE_TABLE_A, [, i, /, 2, ]]
[COSINE_TABLE_A]
[i, /, 2]
[i]
[2]
[ys, [, 1, ]]
[ys]
[1]
[COSINE_TABLE_B, [, i, /, 2, ]]
[COSINE_TABLE_B]
[i, /, 2]
[i]
[2]
[splitMult, (, xs, ,, ys, ,, result, )]
[xs]
[ys]
[result]
[SINE_TABLE_A, [, i, ]]
[SINE_TABLE_A]
[i]
[result, [, 0, ], *, 2.0]
[result, [, 0, ]]
[result]
[0]
[2.0]
[SINE_TABLE_B, [, i, ]]
[SINE_TABLE_B]
[i]
[result, [, 1, ], *, 2.0]
[result, [, 1, ]]
[result]
[1]
[2.0]
[splitMult, (, ys, ,, ys, ,, as, )]
[ys]
[ys]
[as]
[splitMult, (, xs, ,, xs, ,, temps, )]
[xs]
[xs]
[temps]
[temps, [, 0, ]]
[temps]
[0]
[-, temps, [, 0, ]]
[temps, [, 0, ]]
[temps]
[0]
[temps, [, 1, ]]
[temps]
[1]
[-, temps, [, 1, ]]
[temps, [, 1, ]]
[temps]
[1]
[splitAdd, (, as, ,, temps, ,, result, )]
[as]
[temps]
[result]
[COSINE_TABLE_A, [, i, ]]
[COSINE_TABLE_A]
[i]
[result, [, 0, ]]
[result]
[0]
[COSINE_TABLE_B, [, i, ]]
[COSINE_TABLE_B]
[i]
[result, [, 1, ]]
[result]
[1]
[xs, [, 0, ]]
[xs]
[0]
[SINE_TABLE_A, [, i, /, 2, ]]
[SINE_TABLE_A]
[i, /, 2]
[i]
[2]
[xs, [, 1, ]]
[xs]
[1]
[SINE_TABLE_B, [, i, /, 2, ]]
[SINE_TABLE_B]
[i, /, 2]
[i]
[2]
[ys, [, 0, ]]
[ys]
[0]
[COSINE_TABLE_A, [, i, /, 2, ]]
[COSINE_TABLE_A]
[i, /, 2]
[i]
[2]
[ys, [, 1, ]]
[ys]
[1]
[COSINE_TABLE_B, [, i, /, 2, ]]
[COSINE_TABLE_B]
[i, /, 2]
[i]
[2]
[as, [, 0, ]]
[as]
[0]
[SINE_TABLE_A, [, i, /, 2, +, 1, ]]
[SINE_TABLE_A]
[i, /, 2, +, 1]
[i, /, 2]
[i]
[2]
[1]
[as, [, 1, ]]
[as]
[1]
[SINE_TABLE_B, [, i, /, 2, +, 1, ]]
[SINE_TABLE_B]
[i, /, 2, +, 1]
[i, /, 2]
[i]
[2]
[1]
[bs, [, 0, ]]
[bs]
[0]
[COSINE_TABLE_A, [, i, /, 2, +, 1, ]]
[COSINE_TABLE_A]
[i, /, 2, +, 1]
[i, /, 2]
[i]
[2]
[1]
[bs, [, 1, ]]
[bs]
[1]
[COSINE_TABLE_B, [, i, /, 2, +, 1, ]]
[COSINE_TABLE_B]
[i, /, 2, +, 1]
[i, /, 2]
[i]
[2]
[1]
[splitMult, (, xs, ,, bs, ,, temps, )]
[xs]
[bs]
[temps]
[splitMult, (, ys, ,, as, ,, result, )]
[ys]
[as]
[result]
[splitAdd, (, result, ,, temps, ,, result, )]
[result]
[temps]
[result]
[SINE_TABLE_A, [, i, ]]
[SINE_TABLE_A]
[i]
[result, [, 0, ]]
[result]
[0]
[SINE_TABLE_B, [, i, ]]
[SINE_TABLE_B]
[i]
[result, [, 1, ]]
[result]
[1]
[splitMult, (, ys, ,, bs, ,, result, )]
[ys]
[bs]
[result]
[splitMult, (, xs, ,, as, ,, temps, )]
[xs]
[as]
[temps]
[temps, [, 0, ]]
[temps]
[0]
[-, temps, [, 0, ]]
[temps, [, 0, ]]
[temps]
[0]
[temps, [, 1, ]]
[temps]
[1]
[-, temps, [, 1, ]]
[temps, [, 1, ]]
[temps]
[1]
[splitAdd, (, result, ,, temps, ,, result, )]
[result]
[temps]
[result]
[COSINE_TABLE_A, [, i, ]]
[COSINE_TABLE_A]
[i]
[result, [, 0, ]]
[result]
[0]
[COSINE_TABLE_B, [, i, ]]
[COSINE_TABLE_B]
[i]
[result, [, 1, ]]
[result]
[1]
[0]
[i, <, SINE_TABLE_LEN]
[i]
[SINE_TABLE_LEN]
[i, ++]
[i]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[as, [, 0, ]]
[as]
[0]
[COSINE_TABLE_A, [, i, ]]
[COSINE_TABLE_A]
[i]
[as, [, 1, ]]
[as]
[1]
[COSINE_TABLE_B, [, i, ]]
[COSINE_TABLE_B]
[i]
[splitReciprocal, (, as, ,, ys, )]
[as]
[ys]
[xs, [, 0, ]]
[xs]
[0]
[SINE_TABLE_A, [, i, ]]
[SINE_TABLE_A]
[i]
[xs, [, 1, ]]
[xs]
[1]
[SINE_TABLE_B, [, i, ]]
[SINE_TABLE_B]
[i]
[splitMult, (, xs, ,, ys, ,, as, )]
[xs]
[ys]
[as]
[TANGENT_TABLE_A, [, i, ]]
[TANGENT_TABLE_A]
[i]
[as, [, 0, ]]
[as]
[0]
[TANGENT_TABLE_B, [, i, ]]
[TANGENT_TABLE_B]
[i]
[as, [, 1, ]]
[as]
[1]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[split, (, x, ,, xs, )]
[x]
[xs]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[0.0]
[FACT, ., length, -, 1]
[FACT, ., length]
[FACT]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[splitMult, (, xs, ,, ys, ,, as, )]
[xs]
[ys]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[(, i, &, 1, ), !=, 0]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[0]
[split, (, FACT, [, i, ], ,, as, )]
[FACT, [, i, ]]
[FACT]
[i]
[as]
[splitReciprocal, (, as, ,, facts, )]
[as]
[facts]
[(, i, &, 2, ), !=, 0]
[(, i, &, 2, )]
[i, &, 2]
[i]
[2]
[0]
[facts, [, 0, ]]
[facts]
[0]
[-, facts, [, 0, ]]
[facts, [, 0, ]]
[facts]
[0]
[facts, [, 1, ]]
[facts]
[1]
[-, facts, [, 1, ]]
[facts, [, 1, ]]
[facts]
[1]
[splitAdd, (, ys, ,, facts, ,, as, )]
[ys]
[facts]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[result, !=, null]
[result]
[null]
[result, [, 0, ]]
[result]
[0]
[ys, [, 0, ]]
[ys]
[0]
[result, [, 1, ]]
[result]
[1]
[ys, [, 1, ]]
[ys]
[1]
[ys, [, 0, ], +, ys, [, 1, ]]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[split, (, x, ,, xs, )]
[x]
[xs]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[0.0]
[FACT, ., length, -, 1]
[FACT, ., length]
[FACT]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[splitMult, (, xs, ,, ys, ,, as, )]
[xs]
[ys]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[(, i, &, 1, ), ==, 0]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[0]
[split, (, FACT, [, i, ], ,, as, )]
[FACT, [, i, ]]
[FACT]
[i]
[as]
[splitReciprocal, (, as, ,, facts, )]
[as]
[facts]
[(, i, &, 2, ), !=, 0]
[(, i, &, 2, )]
[i, &, 2]
[i]
[2]
[0]
[facts, [, 0, ]]
[facts]
[0]
[-, facts, [, 0, ]]
[facts, [, 0, ]]
[facts]
[0]
[facts, [, 1, ]]
[facts]
[1]
[-, facts, [, 1, ]]
[facts, [, 1, ]]
[facts]
[1]
[splitAdd, (, ys, ,, facts, ,, as, )]
[ys]
[facts]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[result, !=, null]
[result]
[null]
[result, [, 0, ]]
[result]
[0]
[ys, [, 0, ]]
[ys]
[0]
[result, [, 1, ]]
[result]
[1]
[ys, [, 1, ]]
[ys]
[1]
[ys, [, 0, ], +, ys, [, 1, ]]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[split, (, x, ,, xs, )]
[x]
[xs]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[0.0]
[FACT, ., length, -, 1]
[FACT, ., length]
[FACT]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[splitMult, (, xs, ,, ys, ,, as, )]
[xs]
[ys]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[split, (, FACT, [, i, ], ,, as, )]
[FACT, [, i, ]]
[FACT]
[i]
[as]
[splitReciprocal, (, as, ,, facts, )]
[as]
[facts]
[splitAdd, (, ys, ,, facts, ,, as, )]
[ys]
[facts]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[result, !=, null]
[result]
[null]
[result, [, 0, ]]
[result]
[0]
[ys, [, 0, ]]
[ys]
[0]
[result, [, 1, ]]
[result]
[1]
[ys, [, 1, ]]
[ys]
[1]
[ys, [, 0, ], +, ys, [, 1, ]]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[d, <, 8e298, &&, d, >, -, 8e298]
[d, <, 8e298]
[d]
[8e298]
[d, >, -, 8e298]
[d]
[-, 8e298]
[8e298]
[d, *, HEX_40000000]
[d]
[HEX_40000000]
[split, [, 0, ]]
[split]
[0]
[(, d, +, a, ), -, a]
[(, d, +, a, )]
[d, +, a]
[d]
[a]
[a]
[split, [, 1, ]]
[split]
[1]
[d, -, split, [, 0, ]]
[d]
[split, [, 0, ]]
[split]
[0]
[d, *, 9.31322574615478515625E-10]
[d]
[9.31322574615478515625E-10]
[split, [, 0, ]]
[split]
[0]
[(, d, +, a, -, d, ), *, HEX_40000000]
[(, d, +, a, -, d, )]
[d, +, a, -, d]
[d, +, a]
[d]
[a]
[d]
[HEX_40000000]
[split, [, 1, ]]
[split]
[1]
[d, -, split, [, 0, ]]
[d]
[split, [, 0, ]]
[split]
[0]
[a, [, 0, ], +, a, [, 1, ]]
[a, [, 0, ]]
[a]
[0]
[a, [, 1, ]]
[a]
[1]
[-, (, c, -, a, [, 0, ], -, a, [, 1, ], )]
[(, c, -, a, [, 0, ], -, a, [, 1, ], )]
[c, -, a, [, 0, ], -, a, [, 1, ]]
[c, -, a, [, 0, ]]
[c]
[a, [, 0, ]]
[a]
[0]
[a, [, 1, ]]
[a]
[1]
[c, <, 8e298, &&, c, >, -, 8e298]
[c, <, 8e298]
[c]
[8e298]
[c, >, -, 8e298]
[c]
[-, 8e298]
[8e298]
[c, *, HEX_40000000]
[c]
[HEX_40000000]
[a, [, 0, ]]
[a]
[0]
[(, c, +, z, ), -, z]
[(, c, +, z, )]
[c, +, z]
[c]
[z]
[z]
[a, [, 1, ]]
[a]
[1]
[c, -, a, [, 0, ], +, d]
[c, -, a, [, 0, ]]
[c]
[a, [, 0, ]]
[a]
[0]
[d]
[c, *, 9.31322574615478515625E-10]
[c]
[9.31322574615478515625E-10]
[a, [, 0, ]]
[a]
[0]
[(, c, +, z, -, c, ), *, HEX_40000000]
[(, c, +, z, -, c, )]
[c, +, z, -, c]
[c, +, z]
[c]
[z]
[c]
[HEX_40000000]
[a, [, 1, ]]
[a]
[1]
[c, -, a, [, 0, ], +, d]
[c, -, a, [, 0, ]]
[c]
[a, [, 0, ]]
[a]
[0]
[d]
[ans, [, 0, ]]
[ans]
[0]
[a, [, 0, ], *, b, [, 0, ]]
[a, [, 0, ]]
[a]
[0]
[b, [, 0, ]]
[b]
[0]
[ans, [, 1, ]]
[ans]
[1]
[a, [, 0, ], *, b, [, 1, ], +, a, [, 1, ], *, b, [, 0, ], +, a, [, 1, ], *, b, [, 1, ]]
[a, [, 0, ], *, b, [, 1, ], +, a, [, 1, ], *, b, [, 0, ]]
[a, [, 0, ], *, b, [, 1, ]]
[a, [, 0, ]]
[a]
[0]
[b, [, 1, ]]
[b]
[1]
[a, [, 1, ], *, b, [, 0, ]]
[a, [, 1, ]]
[a]
[1]
[b, [, 0, ]]
[b]
[0]
[a, [, 1, ], *, b, [, 1, ]]
[a, [, 1, ]]
[a]
[1]
[b, [, 1, ]]
[b]
[1]
[resplit, (, ans, )]
[ans]
[ans, [, 0, ]]
[ans]
[0]
[a, [, 0, ], +, b, [, 0, ]]
[a, [, 0, ]]
[a]
[0]
[b, [, 0, ]]
[b]
[0]
[ans, [, 1, ]]
[ans]
[1]
[a, [, 1, ], +, b, [, 1, ]]
[a, [, 1, ]]
[a]
[1]
[b, [, 1, ]]
[b]
[1]
[resplit, (, ans, )]
[ans]
[1.0, /, 4194304.0]
[1.0]
[4194304.0]
[1.0, -, b]
[1.0]
[b]
[in, [, 0, ], ==, 0.0]
[in, [, 0, ]]
[in]
[0]
[0.0]
[in, [, 0, ]]
[in]
[0]
[in, [, 1, ]]
[in]
[1]
[in, [, 1, ]]
[in]
[1]
[0.0]
[result, [, 0, ]]
[result]
[0]
[a, /, in, [, 0, ]]
[a]
[in, [, 0, ]]
[in]
[0]
[result, [, 1, ]]
[result]
[1]
[(, b, *, in, [, 0, ], -, a, *, in, [, 1, ], ), /, (, in, [, 0, ], *, in, [, 0, ], +, in, [, 0, ], *, in, [, 1, ], )]
[(, b, *, in, [, 0, ], -, a, *, in, [, 1, ], )]
[b, *, in, [, 0, ], -, a, *, in, [, 1, ]]
[b, *, in, [, 0, ]]
[b]
[in, [, 0, ]]
[in]
[0]
[a, *, in, [, 1, ]]
[a]
[in, [, 1, ]]
[in]
[1]
[(, in, [, 0, ], *, in, [, 0, ], +, in, [, 0, ], *, in, [, 1, ], )]
[in, [, 0, ], *, in, [, 0, ], +, in, [, 0, ], *, in, [, 1, ]]
[in, [, 0, ], *, in, [, 0, ]]
[in, [, 0, ]]
[in]
[0]
[in, [, 0, ]]
[in]
[0]
[in, [, 0, ], *, in, [, 1, ]]
[in, [, 0, ]]
[in]
[0]
[in, [, 1, ]]
[in]
[1]
[result, [, 1, ], !=, result, [, 1, ]]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ]]
[result]
[1]
[0.0]
[resplit, (, result, )]
[result]
[0]
[i, <, 2]
[i]
[2]
[i, ++]
[i]
[1.0, -, result, [, 0, ], *, in, [, 0, ], -, result, [, 0, ], *, in, [, 1, ], -, result, [, 1, ], *, in, [, 0, ], -, result, [, 1, ], *, in, [, 1, ]]
[1.0, -, result, [, 0, ], *, in, [, 0, ], -, result, [, 0, ], *, in, [, 1, ], -, result, [, 1, ], *, in, [, 0, ]]
[1.0, -, result, [, 0, ], *, in, [, 0, ], -, result, [, 0, ], *, in, [, 1, ]]
[1.0, -, result, [, 0, ], *, in, [, 0, ]]
[1.0]
[result, [, 0, ], *, in, [, 0, ]]
[result, [, 0, ]]
[result]
[0]
[in, [, 0, ]]
[in]
[0]
[result, [, 0, ], *, in, [, 1, ]]
[result, [, 0, ]]
[result]
[0]
[in, [, 1, ]]
[in]
[1]
[result, [, 1, ], *, in, [, 0, ]]
[result, [, 1, ]]
[result]
[1]
[in, [, 0, ]]
[in]
[0]
[result, [, 1, ], *, in, [, 1, ]]
[result, [, 1, ]]
[result]
[1]
[in, [, 1, ]]
[in]
[1]
[err]
[err, *, (, result, [, 0, ], +, result, [, 1, ], )]
[err]
[(, result, [, 0, ], +, result, [, 1, ], )]
[result, [, 0, ], +, result, [, 1, ]]
[result, [, 0, ]]
[result]
[0]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ]]
[result]
[1]
[err]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[split, (, a, [, 0, ], ,, xs, )]
[a, [, 0, ]]
[a]
[0]
[xs]
[split, (, b, [, 0, ], ,, ys, )]
[b, [, 0, ]]
[b]
[0]
[ys]
[splitMult, (, xs, ,, ys, ,, zs, )]
[xs]
[ys]
[zs]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 1, ]]
[result]
[1]
[zs, [, 1, ]]
[zs]
[1]
[split, (, b, [, 1, ], ,, ys, )]
[b, [, 1, ]]
[b]
[1]
[ys]
[splitMult, (, xs, ,, ys, ,, zs, )]
[xs]
[ys]
[zs]
[result, [, 0, ], +, zs, [, 0, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 0, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 0, ]]
[result]
[0]
[tmp]
[tmp]
[result, [, 0, ], +, zs, [, 1, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 1, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 0, ]]
[result]
[0]
[tmp]
[split, (, a, [, 1, ], ,, xs, )]
[a, [, 1, ]]
[a]
[1]
[xs]
[split, (, b, [, 0, ], ,, ys, )]
[b, [, 0, ]]
[b]
[0]
[ys]
[splitMult, (, xs, ,, ys, ,, zs, )]
[xs]
[ys]
[zs]
[tmp]
[result, [, 0, ], +, zs, [, 0, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 0, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 0, ]]
[result]
[0]
[tmp]
[tmp]
[result, [, 0, ], +, zs, [, 1, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 1, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 0, ]]
[result]
[0]
[tmp]
[split, (, a, [, 1, ], ,, xs, )]
[a, [, 1, ]]
[a]
[1]
[xs]
[split, (, b, [, 1, ], ,, ys, )]
[b, [, 1, ]]
[b]
[1]
[ys]
[splitMult, (, xs, ,, ys, ,, zs, )]
[xs]
[ys]
[zs]
[tmp]
[result, [, 0, ], +, zs, [, 0, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 0, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 0, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 0, ]]
[zs]
[0]
[result, [, 0, ]]
[result]
[0]
[tmp]
[tmp]
[result, [, 0, ], +, zs, [, 1, ]]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], -, (, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[result, [, 1, ]]
[result]
[1]
[(, tmp, -, result, [, 0, ], -, zs, [, 1, ], )]
[tmp, -, result, [, 0, ], -, zs, [, 1, ]]
[tmp, -, result, [, 0, ]]
[tmp]
[result, [, 0, ]]
[result]
[0]
[zs, [, 1, ]]
[zs]
[1]
[result, [, 0, ]]
[result]
[0]
[tmp]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[xs, [, 0, ]]
[xs]
[0]
[2.718281828459045]
[xs, [, 1, ]]
[xs]
[1]
[1.4456468917292502E-16]
[split, (, 1.0, ,, ys, )]
[1.0]
[ys]
[p, >, 0]
[p]
[0]
[(, p, &, 1, ), !=, 0]
[(, p, &, 1, )]
[p, &, 1]
[p]
[1]
[0]
[quadMult, (, ys, ,, xs, ,, as, )]
[ys]
[xs]
[as]
[ys, [, 0, ]]
[ys]
[0]
[as, [, 0, ]]
[as]
[0]
[ys, [, 1, ]]
[ys]
[1]
[as, [, 1, ]]
[as]
[1]
[quadMult, (, xs, ,, xs, ,, as, )]
[xs]
[xs]
[as]
[xs, [, 0, ]]
[xs]
[0]
[as, [, 0, ]]
[as]
[0]
[xs, [, 1, ]]
[xs]
[1]
[as, [, 1, ]]
[as]
[1]
[p]
[1]
[result, !=, null]
[result]
[null]
[result, [, 0, ]]
[result]
[0]
[ys, [, 0, ]]
[ys]
[0]
[result, [, 1, ]]
[result]
[1]
[ys, [, 1, ]]
[ys]
[1]
[resplit, (, result, )]
[result]
[ys, [, 0, ], +, ys, [, 1, ]]
[ys, [, 0, ]]
[ys]
[0]
[ys, [, 1, ]]
[ys]
[1]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[split, (, xi, ,, x, )]
[xi]
[x]
[x, [, 0, ]]
[x]
[0]
[1.0]
[resplit, (, x, )]
[x]
[splitReciprocal, (, x, ,, a, )]
[x]
[a]
[x, [, 0, ]]
[x]
[0]
[2.0]
[resplit, (, x, )]
[x]
[splitMult, (, x, ,, a, ,, y, )]
[x]
[a]
[y]
[x, [, 0, ]]
[x]
[0]
[y, [, 0, ]]
[y]
[0]
[x, [, 1, ]]
[x]
[1]
[y, [, 1, ]]
[y]
[1]
[splitMult, (, x, ,, x, ,, x2, )]
[x]
[x]
[x2]
[y, [, 0, ]]
[y]
[0]
[LN_SPLIT_COEF, [, LN_SPLIT_COEF, ., length, -, 1, ], [, 0, ]]
[LN_SPLIT_COEF, [, LN_SPLIT_COEF, ., length, -, 1, ]]
[LN_SPLIT_COEF]
[LN_SPLIT_COEF, ., length, -, 1]
[LN_SPLIT_COEF, ., length]
[LN_SPLIT_COEF]
[1]
[0]
[y, [, 1, ]]
[y]
[1]
[LN_SPLIT_COEF, [, LN_SPLIT_COEF, ., length, -, 1, ], [, 1, ]]
[LN_SPLIT_COEF, [, LN_SPLIT_COEF, ., length, -, 1, ]]
[LN_SPLIT_COEF]
[LN_SPLIT_COEF, ., length, -, 1]
[LN_SPLIT_COEF, ., length]
[LN_SPLIT_COEF]
[1]
[1]
[LN_SPLIT_COEF, ., length, -, 2]
[LN_SPLIT_COEF, ., length]
[LN_SPLIT_COEF]
[2]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[splitMult, (, y, ,, x2, ,, a, )]
[y]
[x2]
[a]
[y, [, 0, ]]
[y]
[0]
[a, [, 0, ]]
[a]
[0]
[y, [, 1, ]]
[y]
[1]
[a, [, 1, ]]
[a]
[1]
[splitAdd, (, y, ,, LN_SPLIT_COEF, [, i, ], ,, a, )]
[y]
[LN_SPLIT_COEF, [, i, ]]
[LN_SPLIT_COEF]
[i]
[a]
[y, [, 0, ]]
[y]
[0]
[a, [, 0, ]]
[a]
[0]
[y, [, 1, ]]
[y]
[1]
[a, [, 1, ]]
[a]
[1]
[splitMult, (, y, ,, x, ,, a, )]
[y]
[x]
[a]
[y, [, 0, ]]
[y]
[0]
[a, [, 0, ]]
[a]
[0]
[y, [, 1, ]]
[y]
[1]
[a, [, 1, ]]
[a]
[1]
[y]
[out, ., println, (, name, )]
[out]
[name]
[checkLen, (, expectedLen, ,, array2d, ., length, )]
[expectedLen]
[array2d, ., length]
[array2d]
[out, ., println, (, TABLE_START_DECL, +, " ", )]
[out]
[TABLE_START_DECL, +, " "]
[TABLE_START_DECL]
[" "]
[0]
[array2d]
[out, ., print, (, "        {", )]
[out]
["        {"]
[array]
[out, ., printf, (, "%-25.25s", ,, format, (, d, ), )]
[out]
["%-25.25s"]
[format, (, d, )]
[d]
[out, ., println, (, "}, // ", +, i, ++, )]
[out]
["}, // ", +, i, ++]
["}, // "]
[i, ++]
[i]
[out, ., println, (, TABLE_END_DECL, )]
[out]
[TABLE_END_DECL]
[out, ., println, (, name, +, "=", )]
[out]
[name, +, "="]
[name]
["="]
[checkLen, (, expectedLen, ,, array, ., length, )]
[expectedLen]
[array, ., length]
[array]
[out, ., println, (, TABLE_START_DECL, )]
[out]
[TABLE_START_DECL]
[array]
[out, ., printf, (, "        %s%n", ,, format, (, d, ), )]
[out]
["        %s%n"]
[format, (, d, )]
[d]
[out, ., println, (, TABLE_END_DECL, )]
[out]
[TABLE_END_DECL]
[d, !=, d]
[d]
[d]
["Double.NaN,"]
[(, (, d, >=, 0, ), ?, "+", :, "", ), +, Double, ., toString, (, d, ), +, "d,"]
[(, (, d, >=, 0, ), ?, "+", :, "", ), +, Double, ., toString, (, d, )]
[(, (, d, >=, 0, ), ?, "+", :, "", )]
[(, d, >=, 0, ), ?, "+", :, ""]
[(, d, >=, 0, )]
[d, >=, 0]
[d]
[0]
["+"]
[""]
[Double, ., toString, (, d, )]
[Double]
[d]
["d,"]
[expectedLen, !=, actual]
[expectedLen]
[actual]
[new, DimensionMismatchException, (, actual, ,, expectedLen, )]
[actual]
[expectedLen]
