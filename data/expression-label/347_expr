["$"]
["window"]
[ImmutableSet, ., of, (, WINDOW, ,, "eval", ,, "arguments", )]
[ImmutableSet]
[WINDOW]
["eval"]
["arguments"]
[this, ., compiler]
[this]
[compiler]
[this, ., globalSymbolNamespace]
[this]
[globalSymbolNamespace]
[this, ., addExtern]
[this]
[addExtern]
[compiler]
[globalSymbolNamespace]
[true]
[IR, ., var, (, IR, ., name, (, globalSymbolNamespace, ), )]
[IR]
[IR, ., name, (, globalSymbolNamespace, )]
[IR]
[globalSymbolNamespace]
[compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", )]
[compiler]
["{RescopeGlobalSymbolsNamespaceVar}"]
[input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, )]
[input, ., getAstRoot, (, compiler, )]
[input]
[compiler]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[addExtern]
[addExternForGlobalSymbolNamespace, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, RewriteScopeCallback, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, RemoveGlobalVarCallback, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, MakeExternsReferenceWindowExplicitly, (, )]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getFunctionName, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., setString, (, "", )]
[n, ., getFirstChild, (, )]
[n]
[""]
[parent, ., getChildBefore, (, n, )]
[parent]
[n]
[n, ., detachFromParent, (, )]
[n]
[NodeUtil, ., newVarNode, (, name, ,, n, )]
[NodeUtil]
[name]
[n]
[prev, ==, null]
[prev]
[null]
[parent, ., addChildToFront, (, var, )]
[parent]
[var]
[parent, ., addChildAfter, (, var, ,, prev, )]
[parent]
[var]
[prev]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[parent, ., isFunction, (, ), &&, name, ., length, (, ), ==, 0]
[parent, ., isFunction, (, )]
[parent]
[name, ., length, (, ), ==, 0]
[name, ., length, (, )]
[name]
[0]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, ==, null]
[var]
[null]
[var, ., isExtern, (, )]
[var]
[!, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, )]
[!, var, ., isExtern, (, )]
[var, ., isExtern, (, )]
[var]
[(, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, )]
[name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0]
[name, ., equals, (, globalSymbolNamespace, )]
[name]
[globalSymbolNamespace]
[name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0]
[name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, )]
[name]
[globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX]
[globalSymbolNamespace]
[DISAMBIGUATION_SUFFIX]
[0]
[n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, )]
[n]
[name, +, DISAMBIGUATION_SUFFIX]
[name]
[DISAMBIGUATION_SUFFIX]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, var, ., isGlobal, (, )]
[var, ., isGlobal, (, )]
[var]
[var, ., getNameNode, (, )]
[var]
[nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, )]
[nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null]
[nameNode, !=, null]
[nameNode]
[null]
[nameNode, ., getParent, (, ), !=, null]
[nameNode, ., getParent, (, )]
[nameNode]
[null]
[nameNode, ., getParent, (, ), ., isCatch, (, )]
[nameNode, ., getParent, (, )]
[nameNode]
[replaceSymbol, (, n, ,, name, )]
[n]
[name]
[node, ., getParent, (, )]
[node]
[IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), )]
[IR]
[IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, )]
[IR, ., name, (, globalSymbolNamespace, )]
[IR]
[globalSymbolNamespace]
[node]
[IR, ., string, (, name, ), ., srcref, (, node, )]
[IR, ., string, (, name, )]
[IR]
[name]
[node]
[replacement, ., srcref, (, node, )]
[replacement]
[node]
[node, ., hasChildren, (, )]
[node]
[IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), )]
[IR]
[replacement]
[node, ., removeFirstChild, (, )]
[node]
[parent, ., replaceChild, (, node, ,, assign, )]
[parent]
[node]
[assign]
[parent, ., replaceChild, (, node, ,, replacement, )]
[parent]
[node]
[replacement]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, n, ., isVar, (, )]
[n, ., isVar, (, )]
[n]
[new, ArrayList, <, Node, >, (, )]
[new, ArrayList, <, Node, >, (, )]
[n, ., children, (, )]
[n]
[c, ., isAssign, (, ), ||, parent, ., isFor, (, )]
[c, ., isAssign, (, )]
[c]
[parent, ., isFor, (, )]
[parent]
[interestingChildren, ., add, (, c, )]
[interestingChildren]
[c]
[interestingChildren]
[parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isFor, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[commas, ., add, (, c, ., cloneTree, (, ), )]
[commas]
[c, ., cloneTree, (, )]
[c]
[IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, )]
[IR, ., exprResult, (, c, ., cloneTree, (, ), )]
[IR]
[c, ., cloneTree, (, )]
[c]
[c]
[parent, ., addChildBefore, (, expr, ,, n, )]
[parent]
[expr]
[n]
[commas, ., size, (, ), >, 0]
[commas, ., size, (, )]
[commas]
[0]
[joinOnComma, (, commas, ,, n, )]
[commas]
[n]
[parent, ., addChildBefore, (, comma, ,, n, )]
[parent]
[comma]
[n]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[commas, ., get, (, 0, )]
[commas]
[0]
[1]
[i, <, commas, ., size, (, )]
[i]
[commas, ., size, (, )]
[commas]
[i, ++]
[i]
[IR, ., comma, (, comma, ,, commas, ., get, (, i, ), )]
[IR]
[comma]
[commas, ., get, (, i, )]
[commas]
[i]
[nextComma, ., copyInformationFrom, (, source, )]
[nextComma]
[source]
[comma]
[nextComma]
[comma]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, )]
[name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, )]
[name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), )]
[name, ., length, (, ), >, 0]
[name, ., length, (, )]
[name]
[0]
[(, var, ==, null, ||, var, ., isExtern, (, ), )]
[var, ==, null, ||, var, ., isExtern, (, )]
[var, ==, null]
[var]
[null]
[var, ., isExtern, (, )]
[var]
[!, globalSymbolNamespace, ., equals, (, name, )]
[globalSymbolNamespace, ., equals, (, name, )]
[globalSymbolNamespace]
[name]
[!, SPECIAL_EXTERNS, ., contains, (, name, )]
[SPECIAL_EXTERNS, ., contains, (, name, )]
[SPECIAL_EXTERNS]
[name]
[parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), )]
[parent]
[n]
[IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, )]
[IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), )]
[IR]
[IR, ., name, (, WINDOW, )]
[IR]
[WINDOW]
[IR, ., string, (, name, )]
[IR]
[name]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
