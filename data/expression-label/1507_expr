[Splitter, ., on, (, "\n", )]
[Splitter]
["\n"]
[Pattern, ., compile, (, ":-?\\d+", )]
[Pattern]
[":-?\\d+"]
[Preconditions, ., checkNotNull, (, whitelist, )]
[Preconditions]
[whitelist]
[this, ., whitelist]
[this]
[normalizeWhitelist, (, whitelist, )]
[whitelist]
[Sets, ., newHashSet, (, )]
[Sets]
[whitelist]
[line, ., trim, (, )]
[line]
[trimmed, ., isEmpty, (, ), ||, trimmed, ., charAt, (, 0, ), ==, '#']
[trimmed, ., isEmpty, (, )]
[trimmed]
[trimmed, ., charAt, (, 0, ), ==, '#']
[trimmed, ., charAt, (, 0, )]
[trimmed]
[0]
['#']
[result, ., add, (, LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", ), )]
[result]
[LINE_NUMBER, ., matcher, (, trimmed, ), ., replaceFirst, (, ":", )]
[LINE_NUMBER, ., matcher, (, trimmed, )]
[LINE_NUMBER]
[trimmed]
[":"]
[ImmutableSet, ., copyOf, (, result, )]
[ImmutableSet]
[result]
[containWarning, (, formatWarning, (, error, ), )]
[formatWarning, (, error, )]
[error]
[CheckLevel, ., WARNING]
[CheckLevel]
[null]
[whitelist, ., contains, (, formattedWarning, )]
[whitelist]
[formattedWarning]
[WarningsGuard, ., Priority, ., SUPPRESS_BY_WHITELIST, ., getValue, (, )]
[WarningsGuard, ., Priority, ., SUPPRESS_BY_WHITELIST]
[WarningsGuard, ., Priority]
[WarningsGuard]
[new, WhitelistWarningsGuard, (, loadWhitelistedJsWarnings, (, file, ), )]
[loadWhitelistedJsWarnings, (, file, )]
[file]
[loadWhitelistedJsWarnings, (, Files, ., newReaderSupplier, (, file, ,, Charsets, ., UTF_8, ), )]
[Files, ., newReaderSupplier, (, file, ,, Charsets, ., UTF_8, )]
[Files]
[file]
[Charsets, ., UTF_8]
[Charsets]
[loadWhitelistedJsWarnings, (, supplier, ., getInput, (, ), )]
[supplier, ., getInput, (, )]
[supplier]
[new, RuntimeException, (, e, )]
[e]
[Preconditions, ., checkNotNull, (, reader, )]
[Preconditions]
[reader]
[Sets, ., newHashSet, (, )]
[Sets]
[CharStreams, ., readLines, (, reader, )]
[CharStreams]
[reader]
[result, ., add, (, line, )]
[result]
[line]
[result]
[formatWarning, (, error, ,, false, )]
[error]
[false]
[new, StringBuilder, (, )]
[sb, ., append, (, error, ., sourceName, ), ., append, (, ":", )]
[sb, ., append, (, error, ., sourceName, )]
[sb]
[error, ., sourceName]
[error]
[":"]
[withMetaData]
[sb, ., append, (, error, ., lineNumber, )]
[sb]
[error, ., lineNumber]
[error]
[ImmutableList, ., copyOf, (, LINE_SPLITTER, ., split, (, error, ., description, ), )]
[ImmutableList]
[LINE_SPLITTER, ., split, (, error, ., description, )]
[LINE_SPLITTER]
[error, ., description]
[error]
[sb, ., append, (, "  ", ), ., append, (, lines, ., get, (, 0, ), )]
[sb, ., append, (, "  ", )]
[sb]
["  "]
[lines, ., get, (, 0, )]
[lines]
[0]
[withMetaData]
[1]
[i, <, lines, ., size, (, )]
[i]
[lines, ., size, (, )]
[lines]
[i, ++]
[i]
[sb, ., append, (, "\n# ", ), ., append, (, lines, ., get, (, i, ), )]
[sb, ., append, (, "\n# ", )]
[sb]
["\n# "]
[lines, ., get, (, i, )]
[lines]
[i]
[sb, ., append, (, "\n", )]
[sb]
["\n"]
[sb, ., toString, (, )]
[sb]
[warning, ., indexOf, (, '\n', )]
[warning]
['\n']
[lineLength, >, 0]
[lineLength]
[0]
[warning]
[warning, ., substring, (, 0, ,, lineLength, )]
[warning]
[0]
[lineLength]
[warning]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[null]
[null]
[null]
[this, ., productName]
[this]
[name]
[this]
[this, ., generatorTarget]
[this]
[name]
[this]
[this, ., headerNote]
[this]
[note]
[this]
[this]
[warnings, ., add, (, error, )]
[warnings]
[error]
[new, PrintStream, (, out, )]
[out]
[appendWhitelist, (, stream, )]
[stream]
[stream, ., close, (, )]
[stream]
[out, ., append, (, "# This is a list of legacy warnings that have yet to be fixed.\n", )]
[out]
["# This is a list of legacy warnings that have yet to be fixed.\n"]
[productName, !=, null]
[productName]
[null]
[out, ., append, (, "# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n", )]
[out]
["# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName, +, ".\n"]
["# Please find some time and fix at least one of them ", +, "and it will be the happiest day for ", +, productName]
["# Please find some time and fix at least one of them ", +, "and it will be the happiest day for "]
["# Please find some time and fix at least one of them "]
["and it will be the happiest day for "]
[productName]
[".\n"]
[generatorTarget, !=, null]
[generatorTarget]
[null]
[out, ., append, (, "# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n", )]
[out]
["# When you fix any of these warnings, run ", +, generatorTarget, +, " task.\n"]
["# When you fix any of these warnings, run ", +, generatorTarget]
["# When you fix any of these warnings, run "]
[generatorTarget]
[" task.\n"]
[headerNote, !=, null]
[headerNote]
[null]
[out, ., append, (, "#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), ), +, "\n", )]
[out]
["#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), ), +, "\n"]
["#", +, Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), )]
["#"]
[Joiner, ., on, (, "\n# ", ), ., join, (, Splitter, ., on, (, "\n", ), ., split, (, headerNote, ), )]
[Joiner, ., on, (, "\n# ", )]
[Joiner]
["\n# "]
[Splitter, ., on, (, "\n", ), ., split, (, headerNote, )]
[Splitter, ., on, (, "\n", )]
[Splitter]
["\n"]
[headerNote]
["\n"]
[TreeMultimap, ., create, (, )]
[TreeMultimap]
[warnings]
[warningsByType, ., put, (, warning, ., getType, (, ), ,, formatWarning, (, warning, ,, true, ), )]
[warningsByType]
[warning, ., getType, (, )]
[warning]
[formatWarning, (, warning, ,, true, )]
[warning]
[true]
[warningsByType, ., keySet, (, )]
[warningsByType]
[out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", ), ., println, (, Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), ), ,, 0, ), )]
[out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, ), ., append, (, ": ", )]
[out, ., append, (, "\n# Warning ", ), ., append, (, type, ., key, )]
[out, ., append, (, "\n# Warning ", )]
[out]
["\n# Warning "]
[type, ., key]
[type]
[": "]
[Iterables, ., get, (, LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), ), ,, 0, )]
[Iterables]
[LINE_SPLITTER, ., split, (, type, ., format, ., toPattern, (, ), )]
[LINE_SPLITTER]
[type, ., format, ., toPattern, (, )]
[type, ., format]
[type]
[0]
[warningsByType, ., get, (, type, )]
[warningsByType]
[type]
[out, ., println, (, warning, )]
[out]
[warning]
[out, ., flush, (, )]
[out]
