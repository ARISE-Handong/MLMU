[getOptimizer, (, points, ), ., optimize, (, ), ., getPoint, (, )]
[getOptimizer, (, points, ), ., optimize, (, )]
[getOptimizer, (, points, )]
[points]
[this, ., f]
[this]
[f]
[observations, ., size, (, )]
[observations]
[this, ., points]
[this]
[new, double, [, len, ]]
[len]
[0]
[observations]
[this, ., points, [, i, ++, ]]
[this, ., points]
[this]
[i, ++]
[i]
[obs, ., getX, (, )]
[obs]
[new, MultivariateVectorFunction, (, ), {, public, double, [, ], value, (, double, [, ], p, ), {, final, int, len, =, points, ., length, ;, final, double, [, ], values, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, values, [, i, ], =, f, ., value, (, points, [, i, ], ,, p, ), ;, }, return, values, ;, }, }]
[points, ., length]
[points]
[new, double, [, len, ]]
[len]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[values, [, i, ]]
[values]
[i]
[f, ., value, (, points, [, i, ], ,, p, )]
[f]
[points, [, i, ]]
[points]
[i]
[p]
[values]
[new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, double, [, ], p, ), {, final, int, len, =, points, ., length, ;, final, double, [, ], [, ], jacobian, =, new, double, [, len, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, jacobian, [, i, ], =, f, ., gradient, (, points, [, i, ], ,, p, ), ;, }, return, jacobian, ;, }, }]
[points, ., length]
[points]
[new, double, [, len, ], [, ]]
[len]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[jacobian, [, i, ]]
[jacobian]
[i]
[f, ., gradient, (, points, [, i, ], ,, p, )]
[f]
[points, [, i, ]]
[points]
[i]
[p]
[jacobian]
