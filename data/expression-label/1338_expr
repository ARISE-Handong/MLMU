[10000]
[-, 32767]
[32767]
[32768]
[32760]
[0]
[1]
[2]
[3]
["NaN"]
["Infinity"]
["-Infinity"]
["add"]
["multiply"]
["divide"]
["sqrt"]
["align"]
["trunc"]
["nextAfter"]
["lessThan"]
["greaterThan"]
["newInstance"]
[mant]
[new, int, [, field, ., getRadixDigits, (, ), ]]
[field, ., getRadixDigits, (, )]
[field]
[sign]
[1]
[exp]
[0]
[nans]
[FINITE]
[this, ., field]
[this]
[field]
[field]
[(, long, ), x]
[x]
[field]
[(, long, ), x]
[x]
[mant]
[new, int, [, field, ., getRadixDigits, (, ), ]]
[field, ., getRadixDigits, (, )]
[field]
[nans]
[FINITE]
[this, ., field]
[this]
[field]
[false]
[x, ==, Long, ., MIN_VALUE]
[x]
[Long, ., MIN_VALUE]
[Long]
[isLongMin]
[true]
[++, x]
[x]
[x, <, 0]
[x]
[0]
[sign]
[-, 1]
[1]
[x]
[-, x]
[x]
[sign]
[1]
[exp]
[0]
[x, !=, 0]
[x]
[0]
[System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, )]
[System]
[mant]
[mant, ., length, -, exp]
[mant, ., length]
[mant]
[exp]
[mant]
[mant, ., length, -, 1, -, exp]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[exp]
[exp]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[(, int, ), (, x, %, RADIX, )]
[(, x, %, RADIX, )]
[x, %, RADIX]
[x]
[RADIX]
[x]
[RADIX]
[exp, ++]
[exp]
[isLongMin]
[0]
[i, <, mant, ., length, -, 1]
[i]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, ++]
[i]
[mant, [, i, ], !=, 0]
[mant, [, i, ]]
[mant]
[i]
[0]
[mant, [, i, ], ++]
[mant, [, i, ]]
[mant]
[i]
[mant]
[new, int, [, field, ., getRadixDigits, (, ), ]]
[field, ., getRadixDigits, (, )]
[field]
[sign]
[1]
[exp]
[0]
[nans]
[FINITE]
[this, ., field]
[this]
[field]
[Double, ., doubleToLongBits, (, x, )]
[Double]
[x]
[bits, &, 0x000fffffffffffffL]
[bits]
[0x000fffffffffffffL]
[(, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023]
[(, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, )]
[(, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, )]
[(, bits, &, 0x7ff0000000000000L, ), >, >, 52]
[(, bits, &, 0x7ff0000000000000L, )]
[bits, &, 0x7ff0000000000000L]
[bits]
[0x7ff0000000000000L]
[52]
[1023]
[exponent, ==, -, 1023]
[exponent]
[-, 1023]
[1023]
[x, ==, 0]
[x]
[0]
[(, bits, &, 0x8000000000000000L, ), !=, 0]
[(, bits, &, 0x8000000000000000L, )]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[0]
[sign]
[-, 1]
[1]
[exponent, ++]
[exponent]
[(, mantissa, &, 0x0010000000000000L, ), ==, 0]
[(, mantissa, &, 0x0010000000000000L, )]
[mantissa, &, 0x0010000000000000L]
[mantissa]
[0x0010000000000000L]
[0]
[exponent, --]
[exponent]
[mantissa]
[1]
[mantissa]
[0x000fffffffffffffL]
[exponent, ==, 1024]
[exponent]
[1024]
[x, !=, x]
[x]
[x]
[sign]
[(, byte, ), 1]
[1]
[nans]
[QNAN]
[x, <, 0]
[x]
[0]
[sign]
[(, byte, ), -, 1]
[-, 1]
[1]
[nans]
[INFINITE]
[sign]
[(, byte, ), 1]
[1]
[nans]
[INFINITE]
[new, Dfp, (, field, ,, mantissa, )]
[field]
[mantissa]
[xdfp]
[xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), )]
[xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), )]
[xdfp]
[new, Dfp, (, field, ,, 4503599627370496l, )]
[field]
[4503599627370496l]
[field, ., getOne, (, )]
[field]
[xdfp]
[xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), )]
[xdfp]
[DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, )]
[DfpMath]
[field, ., getTwo, (, )]
[field]
[exponent]
[(, bits, &, 0x8000000000000000L, ), !=, 0]
[(, bits, &, 0x8000000000000000L, )]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[0]
[xdfp]
[xdfp, ., negate, (, )]
[xdfp]
[System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, )]
[System]
[xdfp, ., mant]
[xdfp]
[0]
[mant]
[0]
[mant, ., length]
[mant]
[sign]
[xdfp, ., sign]
[xdfp]
[exp]
[xdfp, ., exp]
[xdfp]
[nans]
[xdfp, ., nans]
[xdfp]
[mant]
[d, ., mant, ., clone, (, )]
[d, ., mant]
[d]
[sign]
[d, ., sign]
[d]
[exp]
[d, ., exp]
[d]
[nans]
[d, ., nans]
[d]
[field]
[d, ., field]
[d]
[mant]
[new, int, [, field, ., getRadixDigits, (, ), ]]
[field, ., getRadixDigits, (, )]
[field]
[sign]
[1]
[exp]
[0]
[nans]
[FINITE]
[this, ., field]
[this]
[field]
[false]
[4]
[4]
[new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *, 2, ]]
[getRadixDigits, (, ), *, rsize, +, offset, *, 2]
[getRadixDigits, (, ), *, rsize]
[getRadixDigits, (, )]
[rsize]
[offset, *, 2]
[offset]
[2]
[s, ., equals, (, POS_INFINITY_STRING, )]
[s]
[POS_INFINITY_STRING]
[sign]
[(, byte, ), 1]
[1]
[nans]
[INFINITE]
[s, ., equals, (, NEG_INFINITY_STRING, )]
[s]
[NEG_INFINITY_STRING]
[sign]
[(, byte, ), -, 1]
[-, 1]
[1]
[nans]
[INFINITE]
[s, ., equals, (, NAN_STRING, )]
[s]
[NAN_STRING]
[sign]
[(, byte, ), 1]
[1]
[nans]
[QNAN]
[s, ., indexOf, (, "e", )]
[s]
["e"]
[p, ==, -, 1]
[p]
[-, 1]
[1]
[p]
[s, ., indexOf, (, "E", )]
[s]
["E"]
[0]
[p, !=, -, 1]
[p]
[-, 1]
[1]
[fpdecimal]
[s, ., substring, (, 0, ,, p, )]
[s]
[0]
[p]
[s, ., substring, (, p, +, 1, )]
[s]
[p, +, 1]
[p]
[1]
[false]
[0]
[i, <, fpexp, ., length, (, )]
[i]
[fpexp, ., length, (, )]
[fpexp]
[i, ++]
[i]
[fpexp, ., charAt, (, i, ), ==, '-']
[fpexp, ., charAt, (, i, )]
[fpexp]
[i]
['-']
[negative]
[true]
[fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9']
[fpexp, ., charAt, (, i, ), >=, '0']
[fpexp, ., charAt, (, i, )]
[fpexp]
[i]
['0']
[fpexp, ., charAt, (, i, ), <=, '9']
[fpexp, ., charAt, (, i, )]
[fpexp]
[i]
['9']
[sciexp]
[sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0']
[sciexp, *, 10, +, fpexp, ., charAt, (, i, )]
[sciexp, *, 10]
[sciexp]
[10]
[fpexp, ., charAt, (, i, )]
[fpexp]
[i]
['0']
[negative]
[sciexp]
[-, sciexp]
[sciexp]
[fpdecimal]
[s]
[fpdecimal, ., indexOf, (, "-", ), !=, -, 1]
[fpdecimal, ., indexOf, (, "-", )]
[fpdecimal]
["-"]
[-, 1]
[1]
[sign]
[-, 1]
[1]
[p]
[0]
[0]
[fpdecimal, ., charAt, (, p, ), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9']
[fpdecimal, ., charAt, (, p, ), >=, '1']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['1']
[fpdecimal, ., charAt, (, p, ), <=, '9']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['9']
[decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0']
[decimalFound]
[fpdecimal, ., charAt, (, p, ), ==, '0']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['0']
[decimalPos, --]
[decimalPos]
[fpdecimal, ., charAt, (, p, ), ==, '.']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['.']
[decimalFound]
[true]
[p, ++]
[p]
[p, ==, fpdecimal, ., length, (, )]
[p]
[fpdecimal, ., length, (, )]
[fpdecimal]
[offset]
[striped, [, 0, ]]
[striped]
[0]
['0']
[striped, [, 1, ]]
[striped]
[1]
['0']
[striped, [, 2, ]]
[striped]
[2]
['0']
[striped, [, 3, ]]
[striped]
[3]
['0']
[0]
[p, ==, (, fpdecimal, ., length, (, ), )]
[p]
[(, fpdecimal, ., length, (, ), )]
[fpdecimal, ., length, (, )]
[fpdecimal]
[q, ==, mant, ., length, *, rsize, +, offset, +, 1]
[q]
[mant, ., length, *, rsize, +, offset, +, 1]
[mant, ., length, *, rsize, +, offset]
[mant, ., length, *, rsize]
[mant, ., length]
[mant]
[rsize]
[offset]
[1]
[fpdecimal, ., charAt, (, p, ), ==, '.']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['.']
[decimalFound]
[true]
[decimalPos]
[significantDigits]
[p, ++]
[p]
[fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9']
[fpdecimal, ., charAt, (, p, ), <, '0']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['0']
[fpdecimal, ., charAt, (, p, ), >, '9']
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
['9']
[p, ++]
[p]
[striped, [, q, ]]
[striped]
[q]
[fpdecimal, ., charAt, (, p, )]
[fpdecimal]
[p]
[q, ++]
[q]
[p, ++]
[p]
[significantDigits, ++]
[significantDigits]
[decimalFound, &&, q, !=, offset]
[decimalFound]
[q, !=, offset]
[q]
[offset]
[q, --]
[q]
[q, ==, offset]
[q]
[offset]
[striped, [, q, ], ==, '0']
[striped, [, q, ]]
[striped]
[q]
['0']
[significantDigits, --]
[significantDigits]
[decimalFound, &&, significantDigits, ==, 0]
[decimalFound]
[significantDigits, ==, 0]
[significantDigits]
[0]
[decimalPos]
[0]
[!, decimalFound]
[decimalFound]
[decimalPos]
[q, -, offset]
[q]
[offset]
[q]
[offset]
[p]
[significantDigits, -, 1, +, offset]
[significantDigits, -, 1]
[significantDigits]
[1]
[offset]
[p, >, q]
[p]
[q]
[striped, [, p, ], !=, '0']
[striped, [, p, ]]
[striped]
[p]
['0']
[p, --]
[p]
[(, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize]
[(, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, )]
[(, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize]
[(, rsize, *, 100, ), -, decimalPos]
[(, rsize, *, 100, )]
[rsize, *, 100]
[rsize]
[100]
[decimalPos]
[sciexp, %, rsize]
[sciexp]
[rsize]
[rsize]
[q]
[i]
[decimalPos]
[i]
[(, p, -, q, ), <, (, mant, ., length, *, rsize, )]
[(, p, -, q, )]
[p, -, q]
[p]
[q]
[(, mant, ., length, *, rsize, )]
[mant, ., length, *, rsize]
[mant, ., length]
[mant]
[rsize]
[i]
[0]
[i, <, rsize]
[i]
[rsize]
[i, ++]
[i]
[striped, [, ++, p, ]]
[striped]
[++, p]
[p]
['0']
[i]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[mant, [, i, ]]
[mant]
[i]
[(, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', )]
[(, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10]
[(, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100]
[(, striped, [, q, ], -, '0', ), *, 1000]
[(, striped, [, q, ], -, '0', )]
[striped, [, q, ], -, '0']
[striped, [, q, ]]
[striped]
[q]
['0']
[1000]
[(, striped, [, q, +, 1, ], -, '0', ), *, 100]
[(, striped, [, q, +, 1, ], -, '0', )]
[striped, [, q, +, 1, ], -, '0']
[striped, [, q, +, 1, ]]
[striped]
[q, +, 1]
[q]
[1]
['0']
[100]
[(, striped, [, q, +, 2, ], -, '0', ), *, 10]
[(, striped, [, q, +, 2, ], -, '0', )]
[striped, [, q, +, 2, ], -, '0']
[striped, [, q, +, 2, ]]
[striped]
[q, +, 2]
[q]
[2]
['0']
[10]
[(, striped, [, q, +, 3, ], -, '0', )]
[striped, [, q, +, 3, ], -, '0']
[striped, [, q, +, 3, ]]
[striped]
[q, +, 3]
[q]
[3]
['0']
[q]
[4]
[exp]
[(, decimalPos, +, sciexp, ), /, rsize]
[(, decimalPos, +, sciexp, )]
[decimalPos, +, sciexp]
[decimalPos]
[sciexp]
[rsize]
[q, <, striped, ., length]
[q]
[striped, ., length]
[striped]
[round, (, (, striped, [, q, ], -, '0', ), *, 1000, )]
[(, striped, [, q, ], -, '0', ), *, 1000]
[(, striped, [, q, ], -, '0', )]
[striped, [, q, ], -, '0']
[striped, [, q, ]]
[striped]
[q]
['0']
[1000]
[this, ., field]
[this]
[field]
[this, ., mant]
[this]
[new, int, [, field, ., getRadixDigits, (, ), ]]
[field, ., getRadixDigits, (, )]
[field]
[this, ., sign]
[this]
[sign]
[this, ., exp]
[this]
[0]
[this, ., nans]
[this]
[nans]
[new, Dfp, (, getField, (, ), )]
[getField, (, )]
[new, Dfp, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, Dfp, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, Dfp, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, Dfp, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[field, ., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[d, ., field, ., getRadixDigits, (, )]
[d, ., field]
[d]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[NEW_INSTANCE_TRAP]
[d]
[result]
[new, Dfp, (, d, )]
[d]
[new, Dfp, (, field, ,, s, )]
[field]
[s]
[field, ., newDfp, (, sig, ,, code, )]
[field]
[sig]
[code]
[field]
[field, ., getRadixDigits, (, )]
[field]
[field, ., getZero, (, )]
[field]
[field, ., getOne, (, )]
[field]
[field, ., getTwo, (, )]
[field]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >, 0]
[i]
[0]
[i, --]
[i]
[mant, [, i, ]]
[mant]
[i]
[mant, [, i, -, 1, ]]
[mant]
[i, -, 1]
[i]
[1]
[mant, [, 0, ]]
[mant]
[0]
[0]
[exp, --]
[exp]
[0]
[i, <, mant, ., length, -, 1]
[i]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, ++]
[i]
[mant, [, i, ]]
[mant]
[i]
[mant, [, i, +, 1, ]]
[mant]
[i, +, 1]
[i]
[1]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[exp, ++]
[exp]
[0]
[false]
[exp, -, e]
[exp]
[e]
[diff]
[adiff, <, 0]
[adiff]
[0]
[adiff]
[-, adiff]
[adiff]
[diff, ==, 0]
[diff]
[0]
[0]
[adiff, >, (, mant, ., length, +, 1, )]
[adiff]
[(, mant, ., length, +, 1, )]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[Arrays, ., fill, (, mant, ,, 0, )]
[Arrays]
[mant]
[0]
[exp]
[e]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[ALIGN_TRAP]
[this]
[this]
[0]
[0]
[i, <, adiff]
[i]
[adiff]
[i, ++]
[i]
[diff, <, 0]
[diff]
[0]
[lostdigit, !=, 0]
[lostdigit]
[0]
[inexact]
[true]
[lostdigit]
[mant, [, 0, ]]
[mant]
[0]
[shiftRight, (, )]
[shiftLeft, (, )]
[inexact]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[ALIGN_TRAP]
[this]
[this]
[lostdigit]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[x]
[result]
[false]
[isNaN, (, ), ||, x, ., isNaN, (, )]
[isNaN, (, )]
[x, ., isNaN, (, )]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[x]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[compare, (, this, ,, x, ), <, 0]
[compare, (, this, ,, x, )]
[this]
[x]
[0]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[GREATER_THAN_TRAP]
[x]
[result]
[false]
[isNaN, (, ), ||, x, ., isNaN, (, )]
[isNaN, (, )]
[x, ., isNaN, (, )]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[GREATER_THAN_TRAP]
[x]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[compare, (, this, ,, x, ), >, 0]
[compare, (, this, ,, x, )]
[this]
[x]
[0]
[isNaN, (, )]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[this]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[(, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[(, sign, <, 0, )]
[sign, <, 0]
[sign]
[0]
[(, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[!, isInfinite, (, )]
[isInfinite, (, )]
[isNaN, (, )]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[this]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[(, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[(, sign, <, 0, )]
[sign, <, 0]
[sign]
[0]
[(, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[(, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, )]
[(, mant, [, mant, ., length, -, 1, ], !=, 0, )]
[mant, [, mant, ., length, -, 1, ], !=, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[isInfinite, (, )]
[isNaN, (, )]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[this]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[(, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[(, sign, >, 0, )]
[sign, >, 0]
[sign]
[0]
[(, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, ), )]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[!, isInfinite, (, )]
[isInfinite, (, )]
[isNaN, (, )]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[this]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[(, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[(, sign, >, 0, )]
[sign, >, 0]
[sign]
[0]
[(, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, ), )]
[(, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||, isInfinite, (, )]
[(, mant, [, mant, ., length, -, 1, ], !=, 0, )]
[mant, [, mant, ., length, -, 1, ], !=, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[isInfinite, (, )]
[newInstance, (, this, )]
[this]
[result, ., sign]
[result]
[1]
[result]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[(, nans, ==, QNAN, ), ||, (, nans, ==, SNAN, )]
[(, nans, ==, QNAN, )]
[nans, ==, QNAN]
[nans]
[QNAN]
[(, nans, ==, SNAN, )]
[nans, ==, SNAN]
[nans]
[SNAN]
[isNaN, (, )]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[LESS_THAN_TRAP]
[this]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[false]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !, isInfinite, (, )]
[(, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[!, isInfinite, (, )]
[isInfinite, (, )]
[other, instanceof, Dfp]
[other]
[(, Dfp, ), other]
[other]
[isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[isNaN, (, ), ||, x, ., isNaN, (, )]
[isNaN, (, )]
[x, ., isNaN, (, )]
[x]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[false]
[compare, (, this, ,, x, ), ==, 0]
[compare, (, this, ,, x, )]
[this]
[x]
[0]
[false]
[17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (, mant, )]
[17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp]
[17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, )]
[17, +, (, sign, <<, 8, )]
[17]
[(, sign, <<, 8, )]
[sign, <<, 8]
[sign]
[8]
[(, nans, <<, 16, )]
[nans, <<, 16]
[nans]
[16]
[exp]
[Arrays, ., hashCode, (, mant, )]
[Arrays]
[mant]
[isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[isNaN, (, ), ||, x, ., isNaN, (, )]
[isNaN, (, )]
[x, ., isNaN, (, )]
[x]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[false]
[greaterThan, (, x, ), ||, lessThan, (, x, )]
[greaterThan, (, x, )]
[x]
[lessThan, (, x, )]
[x]
[a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE]
[a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE]
[a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0]
[a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0]
[a, ., mant, [, a, ., mant, ., length, -, 1, ]]
[a, ., mant]
[a]
[a, ., mant, ., length, -, 1]
[a, ., mant, ., length]
[a, ., mant]
[a]
[1]
[0]
[b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0]
[b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[b, ., mant]
[b]
[b, ., mant, ., length, -, 1]
[b, ., mant, ., length]
[b, ., mant]
[b]
[1]
[0]
[a, ., nans, ==, FINITE]
[a, ., nans]
[a]
[FINITE]
[b, ., nans, ==, FINITE]
[b, ., nans]
[b]
[FINITE]
[0]
[a, ., sign, !=, b, ., sign]
[a, ., sign]
[a]
[b, ., sign]
[b]
[a, ., sign, ==, -, 1]
[a, ., sign]
[a]
[-, 1]
[1]
[-, 1]
[1]
[1]
[a, ., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE]
[a, ., nans, ==, INFINITE]
[a, ., nans]
[a]
[INFINITE]
[b, ., nans, ==, FINITE]
[b, ., nans]
[b]
[FINITE]
[a, ., sign]
[a]
[a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE]
[a, ., nans, ==, FINITE]
[a, ., nans]
[a]
[FINITE]
[b, ., nans, ==, INFINITE]
[b, ., nans]
[b]
[INFINITE]
[-, b, ., sign]
[b, ., sign]
[b]
[a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE]
[a, ., nans, ==, INFINITE]
[a, ., nans]
[a]
[INFINITE]
[b, ., nans, ==, INFINITE]
[b, ., nans]
[b]
[INFINITE]
[0]
[b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0]
[b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0]
[b, ., mant, [, b, ., mant, ., length, -, 1, ]]
[b, ., mant]
[b]
[b, ., mant, ., length, -, 1]
[b, ., mant, ., length]
[b, ., mant]
[b]
[1]
[0]
[a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0]
[a, ., mant, [, b, ., mant, ., length, -, 1, ]]
[a, ., mant]
[a]
[b, ., mant, ., length, -, 1]
[b, ., mant, ., length]
[b, ., mant]
[b]
[1]
[0]
[a, ., exp, <, b, ., exp]
[a, ., exp]
[a]
[b, ., exp]
[b]
[-, a, ., sign]
[a, ., sign]
[a]
[a, ., exp, >, b, ., exp]
[a, ., exp]
[a]
[b, ., exp]
[b]
[a, ., sign]
[a]
[a, ., mant, ., length, -, 1]
[a, ., mant, ., length]
[a, ., mant]
[a]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[a, ., mant, [, i, ], >, b, ., mant, [, i, ]]
[a, ., mant, [, i, ]]
[a, ., mant]
[a]
[i]
[b, ., mant, [, i, ]]
[b, ., mant]
[b]
[i]
[a, ., sign]
[a]
[a, ., mant, [, i, ], <, b, ., mant, [, i, ]]
[a, ., mant, [, i, ]]
[a, ., mant]
[a]
[i]
[b, ., mant, [, i, ]]
[b, ., mant]
[b]
[i]
[-, a, ., sign]
[a, ., sign]
[a]
[0]
[trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, )]
[DfpField, ., RoundingMode, ., ROUND_HALF_EVEN]
[DfpField, ., RoundingMode]
[DfpField]
[trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, )]
[DfpField, ., RoundingMode, ., ROUND_FLOOR]
[DfpField, ., RoundingMode]
[DfpField]
[trunc, (, DfpField, ., RoundingMode, ., ROUND_CEIL, )]
[DfpField, ., RoundingMode, ., ROUND_CEIL]
[DfpField, ., RoundingMode]
[DfpField]
[this, ., subtract, (, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), )]
[this]
[this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, )]
[this, ., divide, (, d, ), ., rint, (, )]
[this, ., divide, (, d, )]
[this]
[d]
[d]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., sign]
[result]
[sign]
[result]
[false]
[isNaN, (, )]
[newInstance, (, this, )]
[this]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[newInstance, (, this, )]
[this]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[newInstance, (, this, )]
[this]
[exp, <, 0]
[exp]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[TRUNC_TRAP]
[this]
[result]
[result]
[exp, >=, mant, ., length]
[exp]
[mant, ., length]
[mant]
[newInstance, (, this, )]
[this]
[newInstance, (, this, )]
[this]
[0]
[i, <, mant, ., length, -, result, ., exp]
[i]
[mant, ., length, -, result, ., exp]
[mant, ., length]
[mant]
[result, ., exp]
[result]
[i, ++]
[i]
[changed]
[result, ., mant, [, i, ], !=, 0]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[0]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[0]
[changed]
[rmode]
[ROUND_FLOOR]
[result, ., sign, ==, -, 1]
[result, ., sign]
[result]
[-, 1]
[1]
[result]
[result, ., add, (, newInstance, (, -, 1, ), )]
[result]
[newInstance, (, -, 1, )]
[-, 1]
[1]
[ROUND_CEIL]
[result, ., sign, ==, 1]
[result, ., sign]
[result]
[1]
[result]
[result, ., add, (, getOne, (, ), )]
[result]
[getOne, (, )]
[ROUND_HALF_EVEN]
[newInstance, (, "0.5", )]
["0.5"]
[subtract, (, result, )]
[result]
[a, ., sign]
[a]
[1]
[a, ., greaterThan, (, half, )]
[a]
[half]
[a]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[a, ., sign]
[a]
[sign]
[result]
[result, ., add, (, a, )]
[result]
[a]
[a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0]
[a, ., equals, (, half, ), &&, result, ., exp, >, 0]
[a, ., equals, (, half, )]
[a]
[half]
[result, ., exp, >, 0]
[result, ., exp]
[result]
[0]
[(, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0]
[(, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, )]
[result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1]
[result, ., mant, [, mant, ., length, -, result, ., exp, ]]
[result, ., mant]
[result]
[mant, ., length, -, result, ., exp]
[mant, ., length]
[mant]
[result, ., exp]
[result]
[1]
[0]
[a]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[a, ., sign]
[a]
[sign]
[result]
[result, ., add, (, a, )]
[result]
[a]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[TRUNC_TRAP]
[this]
[result]
[result]
[result]
[0]
[rounded]
[rint, (, )]
[rounded, ., greaterThan, (, newInstance, (, 2147483647, ), )]
[rounded]
[newInstance, (, 2147483647, )]
[2147483647]
[2147483647]
[rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), )]
[rounded]
[newInstance, (, -, 2147483648, )]
[-, 2147483648]
[2147483648]
[-, 2147483648]
[2147483648]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, mant, ., length, -, rounded, ., exp]
[i]
[mant, ., length, -, rounded, ., exp]
[mant, ., length]
[mant]
[rounded, ., exp]
[rounded]
[i, --]
[i]
[result]
[result, *, RADIX, +, rounded, ., mant, [, i, ]]
[result, *, RADIX]
[result]
[RADIX]
[rounded, ., mant, [, i, ]]
[rounded, ., mant]
[rounded]
[i]
[rounded, ., sign, ==, -, 1]
[rounded, ., sign]
[rounded]
[-, 1]
[1]
[result]
[-, result]
[result]
[result]
[exp, -, 1]
[exp]
[1]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[d, ., exp]
[d]
[e, +, 1]
[e]
[1]
[d]
[mant, [, mant, ., length, -, 1, ], >, 1000]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[1000]
[exp, *, 4, -, 1]
[exp, *, 4]
[exp]
[4]
[1]
[mant, [, mant, ., length, -, 1, ], >, 100]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[100]
[exp, *, 4, -, 2]
[exp, *, 4]
[exp]
[4]
[2]
[mant, [, mant, ., length, -, 1, ], >, 10]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[10]
[exp, *, 4, -, 3]
[exp, *, 4]
[exp]
[4]
[3]
[exp, *, 4, -, 4]
[exp, *, 4]
[exp]
[4]
[4]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[e, >=, 0]
[e]
[0]
[d, ., exp]
[d]
[e, /, 4, +, 1]
[e, /, 4]
[e]
[4]
[1]
[d, ., exp]
[d]
[(, e, +, 1, ), /, 4]
[(, e, +, 1, )]
[e, +, 1]
[e]
[1]
[4]
[(, e, %, 4, +, 4, ), %, 4]
[(, e, %, 4, +, 4, )]
[e, %, 4, +, 4]
[e, %, 4]
[e]
[4]
[4]
[4]
[0]
[1]
[d]
[d, ., multiply, (, 10, )]
[d]
[10]
[2]
[d]
[d, ., multiply, (, 100, )]
[d]
[100]
[d]
[d, ., multiply, (, 1000, )]
[d]
[1000]
[d]
[extra]
[RADIX, -, extra]
[RADIX]
[extra]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[mant, [, i, ]]
[mant]
[i]
[RADIX, -, mant, [, i, ], -, 1]
[RADIX, -, mant, [, i, ]]
[RADIX]
[mant, [, i, ]]
[mant]
[i]
[1]
[extra, /, RADIX]
[extra]
[RADIX]
[extra]
[extra, -, rh, *, RADIX]
[extra]
[rh, *, RADIX]
[rh]
[RADIX]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[mant, [, i, ], +, rh]
[mant, [, i, ]]
[mant]
[i]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[mant, [, i, ]]
[mant]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[extra]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[ADD_TRAP]
[x]
[result]
[nans, !=, FINITE, ||, x, ., nans, !=, FINITE]
[nans, !=, FINITE]
[nans]
[FINITE]
[x, ., nans, !=, FINITE]
[x, ., nans]
[x]
[FINITE]
[isNaN, (, )]
[this]
[x, ., isNaN, (, )]
[x]
[x]
[nans, ==, INFINITE, &&, x, ., nans, ==, FINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[x, ., nans, ==, FINITE]
[x, ., nans]
[x]
[FINITE]
[this]
[x, ., nans, ==, INFINITE, &&, nans, ==, FINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, FINITE]
[nans]
[FINITE]
[x]
[x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign]
[x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[sign, ==, x, ., sign]
[sign]
[x, ., sign]
[x]
[x]
[x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign]
[x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[sign, !=, x, ., sign]
[sign]
[x, ., sign]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[ADD_TRAP]
[x]
[result]
[result]
[newInstance, (, this, )]
[this]
[newInstance, (, x, )]
[x]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[a, ., sign]
[a]
[b, ., sign]
[b]
[a, ., sign]
[a]
[1]
[b, ., sign]
[b]
[1]
[bsign]
[compare, (, a, ,, b, ), >, 0]
[compare, (, a, ,, b, )]
[a]
[b]
[0]
[rsign]
[asign]
[b, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[b, ., mant, [, mant, ., length, -, 1, ]]
[b, ., mant]
[b]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[b, ., exp]
[b]
[a, ., exp]
[a]
[a, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[a, ., mant, [, mant, ., length, -, 1, ]]
[a, ., mant]
[a]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[a, ., exp]
[a]
[b, ., exp]
[b]
[0]
[0]
[a, ., exp, <, b, ., exp]
[a, ., exp]
[a]
[b, ., exp]
[b]
[aextradigit]
[a, ., align, (, b, ., exp, )]
[a]
[b, ., exp]
[b]
[bextradigit]
[b, ., align, (, a, ., exp, )]
[b]
[a, ., exp]
[a]
[asign, !=, bsign]
[asign]
[bsign]
[asign, ==, rsign]
[asign]
[rsign]
[bextradigit]
[b, ., complement, (, bextradigit, )]
[b]
[bextradigit]
[aextradigit]
[a, ., complement, (, aextradigit, )]
[a]
[aextradigit]
[0]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[a, ., mant, [, i, ], +, b, ., mant, [, i, ], +, rh]
[a, ., mant, [, i, ], +, b, ., mant, [, i, ]]
[a, ., mant, [, i, ]]
[a, ., mant]
[a]
[i]
[b, ., mant, [, i, ]]
[b, ., mant]
[b]
[i]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[result, ., exp]
[result]
[a, ., exp]
[a]
[result, ., sign]
[result]
[rsign]
[rh, !=, 0, &&, (, asign, ==, bsign, )]
[rh, !=, 0]
[rh]
[0]
[(, asign, ==, bsign, )]
[asign, ==, bsign]
[asign]
[bsign]
[result, ., mant, [, 0, ]]
[result, ., mant]
[result]
[0]
[result, ., shiftRight, (, )]
[result]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[rh]
[result, ., round, (, lostdigit, )]
[result]
[lostdigit]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, )]
[excp]
[ADD_TRAP]
[x]
[result]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[result, ., mant, [, mant, ., length, -, 1, ], !=, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., shiftLeft, (, )]
[result]
[i, ==, 0]
[i]
[0]
[result, ., mant, [, 0, ]]
[result, ., mant]
[result]
[0]
[aextradigit, +, bextradigit]
[aextradigit]
[bextradigit]
[aextradigit]
[0]
[bextradigit]
[0]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., exp]
[result]
[0]
[asign, !=, bsign]
[asign]
[bsign]
[result, ., sign]
[result]
[1]
[result, ., round, (, aextradigit, +, bextradigit, )]
[result]
[aextradigit, +, bextradigit]
[aextradigit]
[bextradigit]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, )]
[excp]
[ADD_TRAP]
[x]
[result]
[result]
[newInstance, (, this, )]
[this]
[result, ., sign]
[result]
[(, byte, ), -, result, ., sign]
[-, result, ., sign]
[result, ., sign]
[result]
[result]
[add, (, x, ., negate, (, ), )]
[x, ., negate, (, )]
[x]
[false]
[field, ., getRoundingMode, (, )]
[field]
[ROUND_DOWN]
[inc]
[false]
[ROUND_UP]
[inc]
[n, !=, 0]
[n]
[0]
[ROUND_HALF_UP]
[inc]
[n, >=, 5000]
[n]
[5000]
[ROUND_HALF_DOWN]
[inc]
[n, >, 5000]
[n]
[5000]
[ROUND_HALF_EVEN]
[inc]
[n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, )]
[n, >, 5000]
[n]
[5000]
[(, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, )]
[n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1]
[n, ==, 5000]
[n]
[5000]
[(, mant, [, 0, ], &, 1, ), ==, 1]
[(, mant, [, 0, ], &, 1, )]
[mant, [, 0, ], &, 1]
[mant, [, 0, ]]
[mant]
[0]
[1]
[1]
[ROUND_HALF_ODD]
[inc]
[n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, )]
[n, >, 5000]
[n]
[5000]
[(, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, )]
[n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0]
[n, ==, 5000]
[n]
[5000]
[(, mant, [, 0, ], &, 1, ), ==, 0]
[(, mant, [, 0, ], &, 1, )]
[mant, [, 0, ], &, 1]
[mant, [, 0, ]]
[mant]
[0]
[1]
[0]
[ROUND_CEIL]
[inc]
[sign, ==, 1, &&, n, !=, 0]
[sign, ==, 1]
[sign]
[1]
[n, !=, 0]
[n]
[0]
[ROUND_FLOOR]
[inc]
[sign, ==, -, 1, &&, n, !=, 0]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[n, !=, 0]
[n]
[0]
[inc]
[1]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[mant, [, i, ], +, rh]
[mant, [, i, ]]
[mant]
[i]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[mant, [, i, ]]
[mant]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[rh, !=, 0]
[rh]
[0]
[shiftRight, (, )]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[rh]
[exp, <, MIN_EXP]
[exp]
[MIN_EXP]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, )]
[field]
[DfpField, ., FLAG_UNDERFLOW]
[DfpField]
[DfpField, ., FLAG_UNDERFLOW]
[DfpField]
[exp, >, MAX_EXP]
[exp]
[MAX_EXP]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, )]
[field]
[DfpField, ., FLAG_OVERFLOW]
[DfpField]
[DfpField, ., FLAG_OVERFLOW]
[DfpField]
[n, !=, 0]
[n]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[0]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[MULTIPLY_TRAP]
[x]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[nans, !=, FINITE, ||, x, ., nans, !=, FINITE]
[nans, !=, FINITE]
[nans]
[FINITE]
[x, ., nans, !=, FINITE]
[x, ., nans]
[x]
[FINITE]
[isNaN, (, )]
[this]
[x, ., isNaN, (, )]
[x]
[x]
[nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0]
[nans, ==, INFINITE, &&, x, ., nans, ==, FINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[x, ., nans, ==, FINITE]
[x, ., nans]
[x]
[FINITE]
[x, ., mant, [, mant, ., length, -, 1, ], !=, 0]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result]
[newInstance, (, this, )]
[this]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, x, ., sign, )]
[(, sign, *, x, ., sign, )]
[sign, *, x, ., sign]
[sign]
[x, ., sign]
[x]
[result]
[x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0]
[x, ., nans, ==, INFINITE, &&, nans, ==, FINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, FINITE]
[nans]
[FINITE]
[mant, [, mant, ., length, -, 1, ], !=, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result]
[newInstance, (, x, )]
[x]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, x, ., sign, )]
[(, sign, *, x, ., sign, )]
[sign, *, x, ., sign]
[sign]
[x, ., sign]
[x]
[result]
[x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[result]
[newInstance, (, this, )]
[this]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, x, ., sign, )]
[(, sign, *, x, ., sign, )]
[sign, *, x, ., sign]
[sign]
[x, ., sign]
[x]
[result]
[(, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[(, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, )]
[x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0]
[x, ., nans, ==, INFINITE, &&, nans, ==, FINITE]
[x, ., nans, ==, INFINITE]
[x, ., nans]
[x]
[INFINITE]
[nans, ==, FINITE]
[nans]
[FINITE]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[(, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, )]
[nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[nans, ==, INFINITE, &&, x, ., nans, ==, FINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[x, ., nans, ==, FINITE]
[x, ., nans]
[x]
[FINITE]
[x, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[MULTIPLY_TRAP]
[x]
[result]
[result]
[new, int, [, mant, ., length, *, 2, ]]
[mant, ., length, *, 2]
[mant, ., length]
[mant]
[2]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[0]
[0]
[j, <, mant, ., length]
[j]
[mant, ., length]
[mant]
[j, ++]
[j]
[mant, [, i, ], *, x, ., mant, [, j, ]]
[mant, [, i, ]]
[mant]
[i]
[x, ., mant, [, j, ]]
[x, ., mant]
[x]
[j]
[r]
[r, +, product, [, i, +, j, ], +, rh]
[r, +, product, [, i, +, j, ]]
[r]
[product, [, i, +, j, ]]
[product]
[i, +, j]
[i]
[j]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[product, [, i, +, j, ]]
[product]
[i, +, j]
[i]
[j]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[product, [, i, +, mant, ., length, ]]
[product]
[i, +, mant, ., length]
[i]
[mant, ., length]
[mant]
[rh]
[mant, ., length, *, 2, -, 1]
[mant, ., length, *, 2]
[mant, ., length]
[mant]
[2]
[1]
[mant, ., length, *, 2, -, 1]
[mant, ., length, *, 2]
[mant, ., length]
[mant]
[2]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[product, [, i, ], !=, 0]
[product, [, i, ]]
[product]
[i]
[0]
[md]
[i]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[result, ., mant, [, mant, ., length, -, i, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, i, -, 1]
[mant, ., length, -, i]
[mant, ., length]
[mant]
[i]
[1]
[product, [, md, -, i, ]]
[product]
[md, -, i]
[md]
[i]
[result, ., exp]
[result]
[exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1]
[exp, +, x, ., exp, +, md, -, 2, *, mant, ., length]
[exp, +, x, ., exp, +, md]
[exp, +, x, ., exp]
[exp]
[x, ., exp]
[x]
[md]
[2, *, mant, ., length]
[2]
[mant, ., length]
[mant]
[1]
[result, ., sign]
[result]
[(, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, )]
[(, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, )]
[(, sign, ==, x, ., sign, ), ?, 1, :, -, 1]
[(, sign, ==, x, ., sign, )]
[sign, ==, x, ., sign]
[sign]
[x, ., sign]
[x]
[1]
[-, 1]
[1]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., exp]
[result]
[0]
[md, >, (, mant, ., length, -, 1, )]
[md]
[(, mant, ., length, -, 1, )]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[excp]
[result, ., round, (, product, [, md, -, mant, ., length, ], )]
[result]
[product, [, md, -, mant, ., length, ]]
[product]
[md, -, mant, ., length]
[md]
[mant, ., length]
[mant]
[excp]
[result, ., round, (, 0, )]
[result]
[0]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, )]
[excp]
[MULTIPLY_TRAP]
[x]
[result]
[result]
[x, >=, 0, &&, x, <, RADIX]
[x, >=, 0]
[x]
[0]
[x, <, RADIX]
[x]
[RADIX]
[multiplyFast, (, x, )]
[x]
[multiply, (, newInstance, (, x, ), )]
[newInstance, (, x, )]
[x]
[newInstance, (, this, )]
[this]
[nans, !=, FINITE]
[nans]
[FINITE]
[isNaN, (, )]
[this]
[nans, ==, INFINITE, &&, x, !=, 0]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[x, !=, 0]
[x]
[0]
[result]
[newInstance, (, this, )]
[this]
[result]
[nans, ==, INFINITE, &&, x, ==, 0]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[x, ==, 0]
[x]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[MULTIPLY_TRAP]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result]
[result]
[x, <, 0, ||, x, >=, RADIX]
[x, <, 0]
[x]
[0]
[x, >=, RADIX]
[x]
[RADIX]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[MULTIPLY_TRAP]
[result]
[result]
[result]
[0]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[mant, [, i, ], *, x, +, rh]
[mant, [, i, ], *, x]
[mant, [, i, ]]
[mant]
[i]
[x]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[0]
[rh, !=, 0]
[rh]
[0]
[lostdigit]
[result, ., mant, [, 0, ]]
[result, ., mant]
[result]
[0]
[result, ., shiftRight, (, )]
[result]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[rh]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., exp]
[result]
[0]
[result, ., round, (, lostdigit, )]
[result]
[lostdigit]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, )]
[excp]
[MULTIPLY_TRAP]
[result]
[result]
[result]
[0]
[0]
[field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[divisor, ., field, ., getRadixDigits, (, )]
[divisor, ., field]
[divisor]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[DIVIDE_TRAP]
[divisor]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[nans, !=, FINITE, ||, divisor, ., nans, !=, FINITE]
[nans, !=, FINITE]
[nans]
[FINITE]
[divisor, ., nans, !=, FINITE]
[divisor, ., nans]
[divisor]
[FINITE]
[isNaN, (, )]
[this]
[divisor, ., isNaN, (, )]
[divisor]
[divisor]
[nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[divisor, ., nans, ==, FINITE]
[divisor, ., nans]
[divisor]
[FINITE]
[result]
[newInstance, (, this, )]
[this]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, divisor, ., sign, )]
[(, sign, *, divisor, ., sign, )]
[sign, *, divisor, ., sign]
[sign]
[divisor, ., sign]
[divisor]
[result]
[divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE]
[divisor, ., nans, ==, INFINITE]
[divisor, ., nans]
[divisor]
[INFINITE]
[nans, ==, FINITE]
[nans]
[FINITE]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, divisor, ., sign, )]
[(, sign, *, divisor, ., sign, )]
[sign, *, divisor, ., sign]
[sign]
[divisor, ., sign]
[divisor]
[result]
[divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE]
[divisor, ., nans, ==, INFINITE]
[divisor, ., nans]
[divisor]
[INFINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[DIVIDE_TRAP]
[divisor]
[result]
[result]
[divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[divisor, ., mant, [, mant, ., length, -, 1, ]]
[divisor, ., mant]
[divisor]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, )]
[field]
[DfpField, ., FLAG_DIV_ZERO]
[DfpField]
[result]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., sign]
[result]
[(, byte, ), (, sign, *, divisor, ., sign, )]
[(, sign, *, divisor, ., sign, )]
[sign, *, divisor, ., sign]
[sign]
[divisor, ., sign]
[divisor]
[result, ., nans]
[result]
[INFINITE]
[result]
[dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, )]
[DfpField, ., FLAG_DIV_ZERO]
[DfpField]
[DIVIDE_TRAP]
[divisor]
[result]
[result]
[dividend]
[new, int, [, mant, ., length, +, 1, ]]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[quotient]
[new, int, [, mant, ., length, +, 2, ]]
[mant, ., length, +, 2]
[mant, ., length]
[mant]
[2]
[remainder]
[new, int, [, mant, ., length, +, 1, ]]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[dividend, [, mant, ., length, ]]
[dividend]
[mant, ., length]
[mant]
[0]
[quotient, [, mant, ., length, ]]
[quotient]
[mant, ., length]
[mant]
[0]
[quotient, [, mant, ., length, +, 1, ]]
[quotient]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[0]
[remainder, [, mant, ., length, ]]
[remainder]
[mant, ., length]
[mant]
[0]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[dividend, [, i, ]]
[dividend]
[i]
[mant, [, i, ]]
[mant]
[i]
[quotient, [, i, ]]
[quotient]
[i]
[0]
[remainder, [, i, ]]
[remainder]
[i]
[0]
[nsqd]
[0]
[qd]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[qd, >=, 0]
[qd]
[0]
[qd, --]
[qd]
[dividend, [, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ]]
[dividend, [, mant, ., length, ], *, RADIX]
[dividend, [, mant, ., length, ]]
[dividend]
[mant, ., length]
[mant]
[RADIX]
[dividend, [, mant, ., length, -, 1, ]]
[dividend]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[divMsb]
[(, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[divisor, ., mant, [, mant, ., length, -, 1, ], +, 1]
[divisor, ., mant, [, mant, ., length, -, 1, ]]
[divisor, ., mant]
[divisor]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[1]
[(, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ]]
[(, divMsb, +, 1, )]
[divMsb, +, 1]
[divMsb]
[1]
[divisor, ., mant, [, mant, ., length, -, 1, ]]
[divisor, ., mant]
[divisor]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[trialgood]
[false]
[!, trialgood]
[trialgood]
[trial]
[(, min, +, max, ), /, 2]
[(, min, +, max, )]
[min, +, max]
[min]
[max]
[2]
[0]
[0]
[i, <, mant, ., length, +, 1]
[i]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[i, ++]
[i]
[(, i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0]
[(, i, <, mant, ., length, )]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[divisor, ., mant, [, i, ]]
[divisor, ., mant]
[divisor]
[i]
[0]
[(, dm, *, trial, ), +, rh]
[(, dm, *, trial, )]
[dm, *, trial]
[dm]
[trial]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[remainder, [, i, ]]
[remainder]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[rh]
[1]
[0]
[i, <, mant, ., length, +, 1]
[i]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[i, ++]
[i]
[(, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh]
[(, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ]]
[(, (, RADIX, -, 1, ), -, remainder, [, i, ], )]
[(, RADIX, -, 1, ), -, remainder, [, i, ]]
[(, RADIX, -, 1, )]
[RADIX, -, 1]
[RADIX]
[1]
[remainder, [, i, ]]
[remainder]
[i]
[dividend, [, i, ]]
[dividend]
[i]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[remainder, [, i, ]]
[remainder]
[i]
[r, -, rh, *, RADIX]
[r]
[rh, *, RADIX]
[rh]
[RADIX]
[rh, ==, 0]
[rh]
[0]
[max]
[trial, -, 1]
[trial]
[1]
[minadj]
[(, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ]]
[(, remainder, [, mant, ., length, ], *, RADIX, )]
[remainder, [, mant, ., length, ], *, RADIX]
[remainder, [, mant, ., length, ]]
[remainder]
[mant, ., length]
[mant]
[RADIX]
[remainder, [, mant, ., length, -, 1, ]]
[remainder]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[minadj]
[minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[minadj]
[(, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, )]
[divisor, ., mant, [, mant, ., length, -, 1, ], +, 1]
[divisor, ., mant, [, mant, ., length, -, 1, ]]
[divisor, ., mant]
[divisor]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[1]
[minadj, >=, 2]
[minadj]
[2]
[min]
[trial, +, minadj]
[trial]
[minadj]
[trialgood]
[false]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[divisor, ., mant, [, i, ], >, remainder, [, i, ]]
[divisor, ., mant, [, i, ]]
[divisor, ., mant]
[divisor]
[i]
[remainder, [, i, ]]
[remainder]
[i]
[trialgood]
[true]
[divisor, ., mant, [, i, ], <, remainder, [, i, ]]
[divisor, ., mant, [, i, ]]
[divisor, ., mant]
[divisor]
[i]
[remainder, [, i, ]]
[remainder]
[i]
[remainder, [, mant, ., length, ], !=, 0]
[remainder, [, mant, ., length, ]]
[remainder]
[mant, ., length]
[mant]
[0]
[trialgood]
[false]
[trialgood, ==, false]
[trialgood]
[false]
[min]
[trial, +, 1]
[trial]
[1]
[quotient, [, qd, ]]
[quotient]
[qd]
[trial]
[trial, !=, 0, ||, nsqd, !=, 0]
[trial, !=, 0]
[trial]
[0]
[nsqd, !=, 0]
[nsqd]
[0]
[nsqd, ++]
[nsqd]
[field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length]
[field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN]
[field, ., getRoundingMode, (, )]
[field]
[DfpField, ., RoundingMode, ., ROUND_DOWN]
[DfpField, ., RoundingMode]
[DfpField]
[nsqd, ==, mant, ., length]
[nsqd]
[mant, ., length]
[mant]
[nsqd, >, mant, ., length]
[nsqd]
[mant, ., length]
[mant]
[dividend, [, 0, ]]
[dividend]
[0]
[0]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[dividend, [, i, +, 1, ]]
[dividend]
[i, +, 1]
[i]
[1]
[remainder, [, i, ]]
[remainder]
[i]
[md]
[mant, ., length]
[mant]
[mant, ., length, +, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[quotient, [, i, ], !=, 0]
[quotient, [, i, ]]
[quotient]
[i]
[0]
[md]
[i]
[0]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[result, ., mant, [, mant, ., length, -, i, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, i, -, 1]
[mant, ., length, -, i]
[mant, ., length]
[mant]
[i]
[1]
[quotient, [, md, -, i, ]]
[quotient]
[md, -, i]
[md]
[i]
[result, ., exp]
[result]
[exp, -, divisor, ., exp, +, md, -, mant, ., length]
[exp, -, divisor, ., exp, +, md]
[exp, -, divisor, ., exp]
[exp]
[divisor, ., exp]
[divisor]
[md]
[mant, ., length]
[mant]
[result, ., sign]
[result]
[(, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, )]
[(, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, )]
[(, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1]
[(, sign, ==, divisor, ., sign, )]
[sign, ==, divisor, ., sign]
[sign]
[divisor, ., sign]
[divisor]
[1]
[-, 1]
[1]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., exp]
[result]
[0]
[md, >, (, mant, ., length, -, 1, )]
[md]
[(, mant, ., length, -, 1, )]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[excp]
[result, ., round, (, quotient, [, md, -, mant, ., length, ], )]
[result]
[quotient, [, md, -, mant, ., length, ]]
[quotient]
[md, -, mant, ., length]
[md]
[mant, ., length]
[mant]
[excp]
[result, ., round, (, 0, )]
[result]
[0]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, )]
[excp]
[DIVIDE_TRAP]
[divisor]
[result]
[result]
[nans, !=, FINITE]
[nans]
[FINITE]
[isNaN, (, )]
[this]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[newInstance, (, this, )]
[this]
[divisor, ==, 0]
[divisor]
[0]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, )]
[field]
[DfpField, ., FLAG_DIV_ZERO]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., sign]
[result]
[sign]
[result, ., nans]
[result]
[INFINITE]
[result]
[dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, )]
[DfpField, ., FLAG_DIV_ZERO]
[DfpField]
[DIVIDE_TRAP]
[getZero, (, )]
[result]
[result]
[divisor, <, 0, ||, divisor, >=, RADIX]
[divisor, <, 0]
[divisor]
[0]
[divisor, >=, RADIX]
[divisor]
[RADIX]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[DIVIDE_TRAP]
[result]
[result]
[result]
[newInstance, (, this, )]
[this]
[0]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[rl, *, RADIX, +, result, ., mant, [, i, ]]
[rl, *, RADIX]
[rl]
[RADIX]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[r, /, divisor]
[r]
[divisor]
[rl]
[r, -, rh, *, divisor]
[r]
[rh, *, divisor]
[rh]
[divisor]
[result, ., mant, [, i, ]]
[result, ., mant]
[result]
[i]
[rh]
[result, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[result, ., mant, [, mant, ., length, -, 1, ]]
[result, ., mant]
[result]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[result, ., shiftLeft, (, )]
[result]
[rl, *, RADIX]
[rl]
[RADIX]
[r, /, divisor]
[r]
[divisor]
[rl]
[r, -, rh, *, divisor]
[r]
[rh, *, divisor]
[rh]
[divisor]
[result, ., mant, [, 0, ]]
[result, ., mant]
[result]
[0]
[rh]
[result, ., round, (, rl, *, RADIX, /, divisor, )]
[result]
[rl, *, RADIX, /, divisor]
[rl, *, RADIX]
[rl]
[RADIX]
[divisor]
[excp, !=, 0]
[excp]
[0]
[result]
[dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, )]
[excp]
[DIVIDE_TRAP]
[result]
[result]
[result]
[field, ., getOne, (, ), ., divide, (, this, )]
[field, ., getOne, (, )]
[field]
[this]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0]
[nans, ==, FINITE]
[nans]
[FINITE]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[newInstance, (, this, )]
[this]
[nans, !=, FINITE]
[nans]
[FINITE]
[nans, ==, INFINITE, &&, sign, ==, 1]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[sign, ==, 1]
[sign]
[1]
[newInstance, (, this, )]
[this]
[nans, ==, QNAN]
[nans]
[QNAN]
[newInstance, (, this, )]
[this]
[nans, ==, SNAN]
[nans]
[SNAN]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, this, )]
[this]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[SQRT_TRAP]
[null]
[result]
[result]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[result]
[newInstance, (, this, )]
[this]
[result, ., nans]
[result]
[QNAN]
[result]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[SQRT_TRAP]
[null]
[result]
[result]
[newInstance, (, this, )]
[this]
[x, ., exp, <, -, 1, ||, x, ., exp, >, 1]
[x, ., exp, <, -, 1]
[x, ., exp]
[x]
[-, 1]
[1]
[x, ., exp, >, 1]
[x, ., exp]
[x]
[1]
[x, ., exp]
[x]
[this, ., exp, /, 2]
[this, ., exp]
[this]
[2]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2000]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[2000]
[0]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[2]
[1]
[2]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[1500]
[3]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[2200]
[x, ., mant, [, mant, ., length, -, 1, ]]
[x, ., mant]
[x]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[3000]
[newInstance, (, x, )]
[x]
[getZero, (, )]
[getZero, (, )]
[x, ., unequal, (, px, )]
[x]
[px]
[dx]
[newInstance, (, x, )]
[x]
[dx, ., sign]
[dx]
[-, 1]
[1]
[dx]
[dx, ., add, (, this, ., divide, (, x, ), )]
[dx]
[this, ., divide, (, x, )]
[this]
[x]
[dx]
[dx, ., divide, (, 2, )]
[dx]
[2]
[ppx]
[px]
[px]
[x]
[x]
[x, ., add, (, dx, )]
[x]
[dx]
[x, ., equals, (, ppx, )]
[x]
[ppx]
[dx, ., mant, [, mant, ., length, -, 1, ], ==, 0]
[dx, ., mant, [, mant, ., length, -, 1, ]]
[dx, ., mant]
[dx]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[x]
[nans, !=, FINITE]
[nans]
[FINITE]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[(, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING]
[(, sign, <, 0, )]
[sign, <, 0]
[sign]
[0]
[NEG_INFINITY_STRING]
[POS_INFINITY_STRING]
[NAN_STRING]
[exp, >, mant, ., length, ||, exp, <, -, 1]
[exp, >, mant, ., length]
[exp]
[mant, ., length]
[mant]
[exp, <, -, 1]
[exp]
[-, 1]
[1]
[dfp2sci, (, )]
[dfp2string, (, )]
[new, char, [, mant, ., length, *, 4, ]]
[mant, ., length, *, 4]
[mant, ., length]
[mant]
[4]
[new, char, [, mant, ., length, *, 4, +, 20, ]]
[mant, ., length, *, 4, +, 20]
[mant, ., length, *, 4]
[mant, ., length]
[mant]
[4]
[20]
[p]
[0]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[(, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', )]
[(, (, mant, [, i, ], /, 1000, ), +, '0', )]
[(, mant, [, i, ], /, 1000, ), +, '0']
[(, mant, [, i, ], /, 1000, )]
[mant, [, i, ], /, 1000]
[mant, [, i, ]]
[mant]
[i]
[1000]
['0']
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0']
[(, (, mant, [, i, ], /, 100, ), %, 10, )]
[(, mant, [, i, ], /, 100, ), %, 10]
[(, mant, [, i, ], /, 100, )]
[mant, [, i, ], /, 100]
[mant, [, i, ]]
[mant]
[i]
[100]
[10]
['0']
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0']
[(, (, mant, [, i, ], /, 10, ), %, 10, )]
[(, mant, [, i, ], /, 10, ), %, 10]
[(, mant, [, i, ], /, 10, )]
[mant, [, i, ], /, 10]
[mant, [, i, ]]
[mant]
[i]
[10]
[10]
['0']
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], ), %, 10, ), +, '0']
[(, (, mant, [, i, ], ), %, 10, )]
[(, mant, [, i, ], ), %, 10]
[(, mant, [, i, ], )]
[mant, [, i, ]]
[mant]
[i]
[10]
['0']
[p]
[0]
[p, <, rawdigits, ., length]
[p]
[rawdigits, ., length]
[rawdigits]
[p, ++]
[p]
[rawdigits, [, p, ], !=, '0']
[rawdigits, [, p, ]]
[rawdigits]
[p]
['0']
[shf]
[p]
[q]
[0]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['-']
[p, !=, rawdigits, ., length]
[p]
[rawdigits, ., length]
[rawdigits]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['.']
[p, <, rawdigits, ., length]
[p]
[rawdigits, ., length]
[rawdigits]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
[rawdigits, [, p, ++, ]]
[rawdigits]
[p, ++]
[p]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['0']
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['.']
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['0']
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['e']
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['0']
[new, String, (, outputbuffer, ,, 0, ,, 5, )]
[outputbuffer]
[0]
[5]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['e']
[e]
[exp, *, 4, -, shf, -, 1]
[exp, *, 4, -, shf]
[exp, *, 4]
[exp]
[4]
[shf]
[1]
[ae]
[e]
[e, <, 0]
[e]
[0]
[ae]
[-, e]
[e]
[p]
[1000000000]
[p, >, ae]
[p]
[ae]
[p]
[10]
[e, <, 0]
[e]
[0]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
['-']
[p, >, 0]
[p]
[0]
[outputbuffer, [, q, ++, ]]
[outputbuffer]
[q, ++]
[q]
[(, char, ), (, ae, /, p, +, '0', )]
[(, ae, /, p, +, '0', )]
[ae, /, p, +, '0']
[ae, /, p]
[ae]
[p]
['0']
[ae]
[ae, %, p]
[ae]
[p]
[p]
[p, /, 10]
[p]
[10]
[new, String, (, outputbuffer, ,, 0, ,, q, )]
[outputbuffer]
[0]
[q]
[new, char, [, mant, ., length, *, 4, +, 20, ]]
[mant, ., length, *, 4, +, 20]
[mant, ., length, *, 4]
[mant, ., length]
[mant]
[4]
[20]
[1]
[exp]
[false]
[buffer, [, 0, ]]
[buffer]
[0]
[' ']
[e, <=, 0]
[e]
[0]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['.']
[pointInserted]
[true]
[e, <, 0]
[e]
[0]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[e, ++]
[e]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
[(, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', )]
[(, (, mant, [, i, ], /, 1000, ), +, '0', )]
[(, mant, [, i, ], /, 1000, ), +, '0']
[(, mant, [, i, ], /, 1000, )]
[mant, [, i, ], /, 1000]
[mant, [, i, ]]
[mant]
[i]
[1000]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0']
[(, (, mant, [, i, ], /, 100, ), %, 10, )]
[(, mant, [, i, ], /, 100, ), %, 10]
[(, mant, [, i, ], /, 100, )]
[mant, [, i, ], /, 100]
[mant, [, i, ]]
[mant]
[i]
[100]
[10]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0']
[(, (, mant, [, i, ], /, 10, ), %, 10, )]
[(, mant, [, i, ], /, 10, ), %, 10]
[(, mant, [, i, ], /, 10, )]
[mant, [, i, ], /, 10]
[mant, [, i, ]]
[mant]
[i]
[10]
[10]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
[(, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[(, (, (, mant, [, i, ], ), %, 10, ), +, '0', )]
[(, (, mant, [, i, ], ), %, 10, ), +, '0']
[(, (, mant, [, i, ], ), %, 10, )]
[(, mant, [, i, ], ), %, 10]
[(, mant, [, i, ], )]
[mant, [, i, ]]
[mant]
[i]
[10]
['0']
[--, e, ==, 0]
[--, e]
[e]
[0]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['.']
[pointInserted]
[true]
[e, >, 0]
[e]
[0]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['0']
[e, --]
[e]
[!, pointInserted]
[pointInserted]
[buffer, [, p, ++, ]]
[buffer]
[p, ++]
[p]
['.']
[q]
[1]
[buffer, [, q, ], ==, '0']
[buffer, [, q, ]]
[buffer]
[q]
['0']
[q, ++]
[q]
[buffer, [, q, ], ==, '.']
[buffer, [, q, ]]
[buffer]
[q]
['.']
[q, --]
[q]
[buffer, [, p, -, 1, ], ==, '0']
[buffer, [, p, -, 1, ]]
[buffer]
[p, -, 1]
[p]
[1]
['0']
[p, --]
[p]
[sign, <, 0]
[sign]
[0]
[buffer, [, --, q, ]]
[buffer]
[--, q]
[q]
['-']
[new, String, (, buffer, ,, q, ,, p, -, q, )]
[buffer]
[q]
[p, -, q]
[p]
[q]
[result]
[type]
[DfpField, ., FLAG_INVALID]
[DfpField]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., sign]
[def]
[result, ., sign]
[result]
[def, ., nans]
[def]
[QNAN]
[DfpField, ., FLAG_DIV_ZERO]
[DfpField]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0]
[nans, ==, FINITE]
[nans]
[FINITE]
[mant, [, mant, ., length, -, 1, ], !=, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., sign]
[def]
[(, byte, ), (, sign, *, oper, ., sign, )]
[(, sign, *, oper, ., sign, )]
[sign, *, oper, ., sign]
[sign]
[oper, ., sign]
[oper]
[def, ., nans]
[def]
[INFINITE]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0]
[nans, ==, FINITE]
[nans]
[FINITE]
[mant, [, mant, ., length, -, 1, ], ==, 0]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[0]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., nans]
[def]
[QNAN]
[nans, ==, INFINITE, ||, nans, ==, QNAN]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[nans, ==, QNAN]
[nans]
[QNAN]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., nans]
[def]
[QNAN]
[nans, ==, INFINITE, ||, nans, ==, SNAN]
[nans, ==, INFINITE]
[nans]
[INFINITE]
[nans, ==, SNAN]
[nans]
[SNAN]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., nans]
[def]
[QNAN]
[DfpField, ., FLAG_UNDERFLOW]
[DfpField]
[(, result, ., exp, +, mant, ., length, ), <, MIN_EXP]
[(, result, ., exp, +, mant, ., length, )]
[result, ., exp, +, mant, ., length]
[result, ., exp]
[result]
[mant, ., length]
[mant]
[MIN_EXP]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., sign]
[def]
[result, ., sign]
[result]
[def]
[newInstance, (, result, )]
[result]
[result, ., exp]
[result]
[result, ., exp, +, ERR_SCALE]
[result, ., exp]
[result]
[ERR_SCALE]
[DfpField, ., FLAG_OVERFLOW]
[DfpField]
[result, ., exp]
[result]
[result, ., exp, -, ERR_SCALE]
[result, ., exp]
[result]
[ERR_SCALE]
[def]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[def, ., sign]
[def]
[result, ., sign]
[result]
[def, ., nans]
[def]
[INFINITE]
[def]
[result]
[trap, (, type, ,, what, ,, oper, ,, def, ,, result, )]
[type]
[what]
[oper]
[def]
[result]
[def]
[nans]
[x, ., newInstance, (, x, )]
[x]
[x]
[result, ., sign]
[result]
[y, ., sign]
[y]
[result]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, )]
[field, ., getRadixDigits, (, )]
[field]
[x, ., field, ., getRadixDigits, (, )]
[x, ., field]
[x]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[field]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[NEXT_AFTER_TRAP]
[x]
[result]
[false]
[this, ., lessThan, (, x, )]
[this]
[x]
[up]
[true]
[compare, (, this, ,, x, ), ==, 0]
[compare, (, this, ,, x, )]
[this]
[x]
[0]
[newInstance, (, x, )]
[x]
[lessThan, (, getZero, (, ), )]
[getZero, (, )]
[up]
[!, up]
[up]
[up]
[inc]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[inc, ., exp]
[inc]
[this, ., exp, -, mant, ., length, +, 1]
[this, ., exp, -, mant, ., length]
[this, ., exp]
[this]
[mant, ., length]
[mant]
[1]
[inc, ., sign]
[inc]
[this, ., sign]
[this]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[inc, ., exp]
[inc]
[MIN_EXP, -, mant, ., length]
[MIN_EXP]
[mant, ., length]
[mant]
[result]
[add, (, inc, )]
[inc]
[inc]
[newInstance, (, getOne, (, ), )]
[getOne, (, )]
[inc, ., exp]
[inc]
[this, ., exp]
[this]
[inc, ., sign]
[inc]
[this, ., sign]
[this]
[this, ., equals, (, inc, )]
[this]
[inc]
[inc, ., exp]
[inc]
[this, ., exp, -, mant, ., length]
[this, ., exp]
[this]
[mant, ., length]
[mant]
[inc, ., exp]
[inc]
[this, ., exp, -, mant, ., length, +, 1]
[this, ., exp, -, mant, ., length]
[this, ., exp]
[this]
[mant, ., length]
[mant]
[1]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[inc, ., exp]
[inc]
[MIN_EXP, -, mant, ., length]
[MIN_EXP]
[mant, ., length]
[mant]
[result]
[this, ., subtract, (, inc, )]
[this]
[inc]
[result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE]
[result, ., classify, (, ), ==, INFINITE]
[result, ., classify, (, )]
[result]
[INFINITE]
[this, ., classify, (, ), !=, INFINITE]
[this, ., classify, (, )]
[this]
[INFINITE]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[NEXT_AFTER_TRAP]
[x]
[result]
[result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false]
[result, ., equals, (, getZero, (, ), )]
[result]
[getZero, (, )]
[this, ., equals, (, getZero, (, ), ), ==, false]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[false]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[field]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[NEXT_AFTER_TRAP]
[x]
[result]
[result]
[isInfinite, (, )]
[lessThan, (, getZero, (, ), )]
[getZero, (, )]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[isNaN, (, )]
[Double, ., NaN]
[Double]
[this]
[false]
[compare, (, this, ,, getZero, (, ), )]
[this]
[getZero, (, )]
[cmp0, ==, 0]
[cmp0]
[0]
[sign, <, 0, ?, -, 0.0, :, +, 0.0]
[sign, <, 0]
[sign]
[0]
[-, 0.0]
[0.0]
[+, 0.0]
[0.0]
[cmp0, <, 0]
[cmp0]
[0]
[y]
[negate, (, )]
[negate]
[true]
[(, int, ), (, y, ., intLog10, (, ), *, 3.32, )]
[(, y, ., intLog10, (, ), *, 3.32, )]
[y, ., intLog10, (, ), *, 3.32]
[y, ., intLog10, (, )]
[y]
[3.32]
[exponent, <, 0]
[exponent]
[0]
[exponent, --]
[exponent]
[DfpMath, ., pow, (, getTwo, (, ), ,, exponent, )]
[DfpMath]
[getTwo, (, )]
[exponent]
[tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, )]
[tempDfp, ., lessThan, (, y, )]
[tempDfp]
[y]
[tempDfp, ., equals, (, y, )]
[tempDfp]
[y]
[tempDfp]
[tempDfp, ., multiply, (, 2, )]
[tempDfp]
[2]
[exponent, ++]
[exponent]
[exponent, --]
[exponent]
[y]
[y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), )]
[y]
[DfpMath, ., pow, (, getTwo, (, ), ,, exponent, )]
[DfpMath]
[getTwo, (, )]
[exponent]
[exponent, >, -, 1023]
[exponent]
[-, 1023]
[1023]
[y]
[y, ., subtract, (, getOne, (, ), )]
[y]
[getOne, (, )]
[exponent, <, -, 1074]
[exponent]
[-, 1074]
[1074]
[0]
[exponent, >, 1023]
[exponent]
[1023]
[negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY]
[negate]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[y]
[y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, )]
[y, ., multiply, (, newInstance, (, 4503599627370496l, ), )]
[y]
[newInstance, (, 4503599627370496l, )]
[4503599627370496l]
[y, ., toString, (, )]
[y]
[str]
[str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, )]
[str]
[0]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[Long, ., parseLong, (, str, )]
[Long]
[str]
[mantissa, ==, 4503599627370496L]
[mantissa]
[4503599627370496L]
[mantissa]
[0]
[exponent, ++]
[exponent]
[exponent, <=, -, 1023]
[exponent]
[-, 1023]
[1023]
[exponent, --]
[exponent]
[exponent, <, -, 1023]
[exponent]
[-, 1023]
[1023]
[exponent, ++]
[exponent]
[mantissa]
[1]
[mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, )]
[mantissa]
[(, (, exponent, +, 1023L, ), <<, 52, )]
[(, exponent, +, 1023L, ), <<, 52]
[(, exponent, +, 1023L, )]
[exponent, +, 1023L]
[exponent]
[1023L]
[52]
[Double, ., longBitsToDouble, (, bits, )]
[Double]
[bits]
[negate]
[x]
[-, x]
[x]
[x]
[new, double, [, 2, ]]
[2]
[0xffffffffc0000000L]
[split, [, 0, ]]
[split]
[0]
[Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, )]
[Double]
[Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask]
[Double, ., doubleToLongBits, (, toDouble, (, ), )]
[Double]
[toDouble, (, )]
[mask]
[split, [, 1, ]]
[split]
[1]
[subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, )]
[subtract, (, newInstance, (, split, [, 0, ], ), )]
[newInstance, (, split, [, 0, ], )]
[split, [, 0, ]]
[split]
[0]
[split]
[toDouble, (, )]
[add, (, newInstance, (, a, ), )]
[newInstance, (, a, )]
[a]
[subtract, (, newInstance, (, a, ), )]
[newInstance, (, a, )]
[a]
[multiply, (, newInstance, (, a, ), )]
[newInstance, (, a, )]
[a]
[divide, (, newInstance, (, a, ), )]
[newInstance, (, a, )]
[a]
[remainder, (, newInstance, (, a, ), )]
[newInstance, (, a, )]
[a]
[FastMath, ., round, (, toDouble, (, ), )]
[FastMath]
[toDouble, (, )]
[isNaN, (, ), ||, isZero, (, )]
[isNaN, (, )]
[isZero, (, )]
[this]
[newInstance, (, sign, >, 0, ?, +, 1, :, -, 1, )]
[sign, >, 0, ?, +, 1, :, -, 1]
[sign, >, 0]
[sign]
[0]
[+, 1]
[1]
[-, 1]
[1]
[(, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, )]
[(, sign, >=, 0, &&, s, ., sign, >=, 0, )]
[sign, >=, 0, &&, s, ., sign, >=, 0]
[sign, >=, 0]
[sign]
[0]
[s, ., sign, >=, 0]
[s, ., sign]
[s]
[0]
[(, sign, <, 0, &&, s, ., sign, <, 0, )]
[sign, <, 0, &&, s, ., sign, <, 0]
[sign, <, 0]
[sign]
[0]
[s, ., sign, <, 0]
[s, ., sign]
[s]
[0]
[this]
[negate, (, )]
[Double, ., doubleToLongBits, (, s, )]
[Double]
[s]
[(, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, )]
[(, sign, >=, 0, &&, sb, >=, 0, )]
[sign, >=, 0, &&, sb, >=, 0]
[sign, >=, 0]
[sign]
[0]
[sb, >=, 0]
[sb]
[0]
[(, sign, <, 0, &&, sb, <, 0, )]
[sign, <, 0, &&, sb, <, 0]
[sign, <, 0]
[sign]
[0]
[sb, <, 0]
[sb]
[0]
[this]
[negate, (, )]
[multiply, (, DfpMath, ., pow, (, getTwo, (, ), ,, n, ), )]
[DfpMath, ., pow, (, getTwo, (, ), ,, n, )]
[DfpMath]
[getTwo, (, )]
[n]
[multiply, (, this, ), ., add, (, y, ., multiply, (, y, ), ), ., sqrt, (, )]
[multiply, (, this, ), ., add, (, y, ., multiply, (, y, ), )]
[multiply, (, this, )]
[this]
[y, ., multiply, (, y, )]
[y]
[y]
[rootN, (, 3, )]
[3]
[(, sign, >=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), ), ., negate, (, )]
[(, sign, >=, 0, )]
[sign, >=, 0]
[sign]
[0]
[DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), )]
[DfpMath]
[this]
[getOne, (, ), ., divide, (, n, )]
[getOne, (, )]
[n]
[DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), ), ., negate, (, )]
[DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (, n, ), )]
[DfpMath]
[negate, (, )]
[getOne, (, ), ., divide, (, n, )]
[getOne, (, )]
[n]
[DfpMath, ., pow, (, this, ,, newInstance, (, p, ), )]
[DfpMath]
[this]
[newInstance, (, p, )]
[p]
[DfpMath, ., pow, (, this, ,, n, )]
[DfpMath]
[this]
[n]
[DfpMath, ., pow, (, this, ,, e, )]
[DfpMath]
[this]
[e]
[DfpMath, ., exp, (, this, )]
[DfpMath]
[this]
[DfpMath, ., exp, (, this, ), ., subtract, (, getOne, (, ), )]
[DfpMath, ., exp, (, this, )]
[DfpMath]
[this]
[getOne, (, )]
[DfpMath, ., log, (, this, )]
[DfpMath]
[this]
[DfpMath, ., log, (, this, ., add, (, getOne, (, ), ), )]
[DfpMath]
[this, ., add, (, getOne, (, ), )]
[this]
[getOne, (, )]
[intLog10, (, )]
[DfpMath, ., cos, (, this, )]
[DfpMath]
[this]
[DfpMath, ., sin, (, this, )]
[DfpMath]
[this]
[DfpMath, ., tan, (, this, )]
[DfpMath]
[this]
[DfpMath, ., acos, (, this, )]
[DfpMath]
[this]
[DfpMath, ., asin, (, this, )]
[DfpMath]
[this]
[DfpMath, ., atan, (, this, )]
[DfpMath]
[this]
[x, ., multiply, (, x, ), ., add, (, multiply, (, this, ), ), ., sqrt, (, )]
[x, ., multiply, (, x, ), ., add, (, multiply, (, this, ), )]
[x, ., multiply, (, x, )]
[x]
[x]
[multiply, (, this, )]
[this]
[x, ., sign, >=, 0]
[x, ., sign]
[x]
[0]
[getTwo, (, ), ., multiply, (, divide, (, r, ., add, (, x, ), ), ., atan, (, ), )]
[getTwo, (, )]
[divide, (, r, ., add, (, x, ), ), ., atan, (, )]
[divide, (, r, ., add, (, x, ), )]
[r, ., add, (, x, )]
[r]
[x]
[getTwo, (, ), ., multiply, (, divide, (, r, ., subtract, (, x, ), ), ., atan, (, ), )]
[getTwo, (, )]
[divide, (, r, ., subtract, (, x, ), ), ., atan, (, )]
[divide, (, r, ., subtract, (, x, ), )]
[r, ., subtract, (, x, )]
[r]
[x]
[newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, )]
[(, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI]
[(, tmp, ., sign, <=, 0, )]
[tmp, ., sign, <=, 0]
[tmp, ., sign]
[tmp]
[0]
[-, FastMath, ., PI]
[FastMath, ., PI]
[FastMath]
[FastMath, ., PI]
[FastMath]
[pmPi, ., subtract, (, tmp, )]
[pmPi]
[tmp]
[DfpMath, ., exp, (, this, ), ., add, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, )]
[DfpMath, ., exp, (, this, ), ., add, (, DfpMath, ., exp, (, negate, (, ), ), )]
[DfpMath, ., exp, (, this, )]
[DfpMath]
[this]
[DfpMath, ., exp, (, negate, (, ), )]
[DfpMath]
[negate, (, )]
[2]
[DfpMath, ., exp, (, this, ), ., subtract, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (, 2, )]
[DfpMath, ., exp, (, this, ), ., subtract, (, DfpMath, ., exp, (, negate, (, ), ), )]
[DfpMath, ., exp, (, this, )]
[DfpMath]
[this]
[DfpMath, ., exp, (, negate, (, ), )]
[DfpMath]
[negate, (, )]
[2]
[DfpMath, ., exp, (, this, )]
[DfpMath]
[this]
[DfpMath, ., exp, (, negate, (, ), )]
[DfpMath]
[negate, (, )]
[ePlus, ., subtract, (, eMinus, ), ., divide, (, ePlus, ., add, (, eMinus, ), )]
[ePlus, ., subtract, (, eMinus, )]
[ePlus]
[eMinus]
[ePlus, ., add, (, eMinus, )]
[ePlus]
[eMinus]
[multiply, (, this, ), ., subtract, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (, )]
[multiply, (, this, ), ., subtract, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, )]
[multiply, (, this, ), ., subtract, (, getOne, (, ), ), ., sqrt, (, )]
[multiply, (, this, ), ., subtract, (, getOne, (, ), )]
[multiply, (, this, )]
[this]
[getOne, (, )]
[this]
[multiply, (, this, ), ., add, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, ), ., log, (, )]
[multiply, (, this, ), ., add, (, getOne, (, ), ), ., sqrt, (, ), ., add, (, this, )]
[multiply, (, this, ), ., add, (, getOne, (, ), ), ., sqrt, (, )]
[multiply, (, this, ), ., add, (, getOne, (, ), )]
[multiply, (, this, )]
[this]
[getOne, (, )]
[this]
[getOne, (, ), ., add, (, this, ), ., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (, ), ., divide, (, 2, )]
[getOne, (, ), ., add, (, this, ), ., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (, )]
[getOne, (, ), ., add, (, this, ), ., divide, (, getOne, (, ), ., subtract, (, this, ), )]
[getOne, (, ), ., add, (, this, )]
[getOne, (, )]
[this]
[getOne, (, ), ., subtract, (, this, )]
[getOne, (, )]
[this]
[2]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[getZero, (, )]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[++, i]
[i]
[r]
[r, ., add, (, a, [, i, ], ., multiply, (, b, [, i, ], ), )]
[r]
[a, [, i, ], ., multiply, (, b, [, i, ], )]
[a, [, i, ]]
[a]
[i]
[b, [, i, ]]
[b]
[i]
[r]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[getZero, (, )]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[++, i]
[i]
[r]
[r, ., add, (, b, [, i, ], ., multiply, (, a, [, i, ], ), )]
[r]
[b, [, i, ], ., multiply, (, a, [, i, ], )]
[b, [, i, ]]
[b]
[i]
[a, [, i, ]]
[a]
[i]
[r]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), )]
[a1, ., multiply, (, b1, )]
[a1]
[b1]
[a2, ., multiply, (, b2, )]
[a2]
[b2]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), )]
[b1, ., multiply, (, a1, )]
[b1]
[a1]
[b2, ., multiply, (, a2, )]
[b2]
[a2]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), )]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), )]
[a1, ., multiply, (, b1, )]
[a1]
[b1]
[a2, ., multiply, (, b2, )]
[a2]
[b2]
[a3, ., multiply, (, b3, )]
[a3]
[b3]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), )]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), )]
[b1, ., multiply, (, a1, )]
[b1]
[a1]
[b2, ., multiply, (, a2, )]
[b2]
[a2]
[b3, ., multiply, (, a3, )]
[b3]
[a3]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (, b4, ), )]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), )]
[a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), )]
[a1, ., multiply, (, b1, )]
[a1]
[b1]
[a2, ., multiply, (, b2, )]
[a2]
[b2]
[a3, ., multiply, (, b3, )]
[a3]
[b3]
[a4, ., multiply, (, b4, )]
[a4]
[b4]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (, a4, ), )]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), )]
[b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), )]
[b1, ., multiply, (, a1, )]
[b1]
[a1]
[b2, ., multiply, (, a2, )]
[b2]
[a2]
[b3, ., multiply, (, a3, )]
[b3]
[a3]
[b4, ., multiply, (, a4, )]
[b4]
[a4]
