[Preconditions, ., checkNotNull, (, root, )]
[Preconditions]
[root]
[Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, )]
[Preconditions]
[root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT]
[root, ., getType, (, ), ==, Token, ., BLOCK]
[root, ., getType, (, )]
[root]
[Token, ., BLOCK]
[Token]
[root, ., getType, (, ), ==, Token, ., SCRIPT]
[root, ., getType, (, )]
[root]
[Token, ., SCRIPT]
[Token]
[new, JsonML, (, TagType, ., BlockStmt, )]
[TagType, ., BlockStmt]
[TagType]
[root, ., getType, (, ), ==, Token, ., SCRIPT]
[root, ., getType, (, )]
[root]
[Token, ., SCRIPT]
[Token]
[processNode, (, root, ,, rootElement, )]
[root]
[rootElement]
[rootElement, ., getChild, (, 0, )]
[rootElement]
[0]
[root, ., getFirstChild, (, )]
[root]
[child, !=, null]
[child]
[null]
[processNode, (, child, ,, rootElement, )]
[child]
[rootElement]
[child]
[child, ., getNext, (, )]
[child]
[rootElement, ., getChild, (, 0, )]
[rootElement]
[0]
[node, ., getType, (, )]
[node]
[Token, ., RETURN]
[Token]
[processReturn, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., BITOR]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "|", )]
[node]
[currentParent]
["|"]
[Token, ., BITXOR]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "^", )]
[node]
[currentParent]
["^"]
[Token, ., BITAND]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "&", )]
[node]
[currentParent]
["&"]
[Token, ., EQ]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "==", )]
[node]
[currentParent]
["=="]
[Token, ., NE]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "!=", )]
[node]
[currentParent]
["!="]
[Token, ., LT]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "<", )]
[node]
[currentParent]
["<"]
[Token, ., LE]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "<=", )]
[node]
[currentParent]
["<="]
[Token, ., GT]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, ">", )]
[node]
[currentParent]
[">"]
[Token, ., GE]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, ">=", )]
[node]
[currentParent]
[">="]
[Token, ., LSH]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "<<", )]
[node]
[currentParent]
["<<"]
[Token, ., RSH]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, ">>", )]
[node]
[currentParent]
[">>"]
[Token, ., URSH]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, ">>>", )]
[node]
[currentParent]
[">>>"]
[Token, ., ADD]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "+", )]
[node]
[currentParent]
["+"]
[Token, ., SUB]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "-", )]
[node]
[currentParent]
["-"]
[Token, ., MUL]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "*", )]
[node]
[currentParent]
["*"]
[Token, ., DIV]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "/", )]
[node]
[currentParent]
["/"]
[Token, ., MOD]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "%", )]
[node]
[currentParent]
["%"]
[Token, ., NOT]
[Token]
[processUnaryExpr, (, node, ,, currentParent, ,, "!", )]
[node]
[currentParent]
["!"]
[Token, ., BITNOT]
[Token]
[processUnaryExpr, (, node, ,, currentParent, ,, "~", )]
[node]
[currentParent]
["~"]
[Token, ., POS]
[Token]
[processUnaryExpr, (, node, ,, currentParent, ,, "+", )]
[node]
[currentParent]
["+"]
[Token, ., NEG]
[Token]
[processUnaryExpr, (, node, ,, currentParent, ,, "-", )]
[node]
[currentParent]
["-"]
[Token, ., NEW]
[Token]
[processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, )]
[node]
[currentParent]
[TagType, ., NewExpr]
[TagType]
[Token, ., DELPROP]
[Token]
[processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, )]
[node]
[currentParent]
[TagType, ., DeleteExpr]
[TagType]
[Token, ., TYPEOF]
[Token]
[processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, )]
[node]
[currentParent]
[TagType, ., TypeofExpr]
[TagType]
[Token, ., GETPROP]
[Token]
[processMemberExpr, (, node, ,, currentParent, ,, ".", )]
[node]
[currentParent]
["."]
[Token, ., GETELEM]
[Token]
[processMemberExpr, (, node, ,, currentParent, ,, "[]", )]
[node]
[currentParent]
["[]"]
[Token, ., CALL]
[Token]
[processCall, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., NAME]
[Token]
[processName, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., NUMBER]
[Token]
[Token, ., STRING]
[Token]
[Token, ., NULL]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., TRUE]
[Token]
[processLiteral, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., THIS]
[Token]
[processThis, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., SHEQ]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "===", )]
[node]
[currentParent]
["==="]
[Token, ., SHNE]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "!==", )]
[node]
[currentParent]
["!=="]
[Token, ., REGEXP]
[Token]
[processRegExp, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., THROW]
[Token]
[processThrow, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., IN]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "in", )]
[node]
[currentParent]
["in"]
[Token, ., INSTANCEOF]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", )]
[node]
[currentParent]
["instanceof"]
[Token, ., ARRAYLIT]
[Token]
[processArrayLiteral, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., OBJECTLIT]
[Token]
[processObjectLiteral, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., TRY]
[Token]
[processTry, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., COMMA]
[Token]
[processBinaryExpr, (, node, ,, currentParent, ,, ",", )]
[node]
[currentParent]
[","]
[Token, ., ASSIGN]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "=", )]
[node]
[currentParent]
["="]
[Token, ., ASSIGN_BITOR]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "|=", )]
[node]
[currentParent]
["|="]
[Token, ., ASSIGN_BITXOR]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "^=", )]
[node]
[currentParent]
["^="]
[Token, ., ASSIGN_BITAND]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "&=", )]
[node]
[currentParent]
["&="]
[Token, ., ASSIGN_LSH]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "<<=", )]
[node]
[currentParent]
["<<="]
[Token, ., ASSIGN_RSH]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, ">>=", )]
[node]
[currentParent]
[">>="]
[Token, ., ASSIGN_URSH]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, ">>>=", )]
[node]
[currentParent]
[">>>="]
[Token, ., ASSIGN_ADD]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "+=", )]
[node]
[currentParent]
["+="]
[Token, ., ASSIGN_SUB]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "-=", )]
[node]
[currentParent]
["-="]
[Token, ., ASSIGN_MUL]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "*=", )]
[node]
[currentParent]
["*="]
[Token, ., ASSIGN_DIV]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "/=", )]
[node]
[currentParent]
["/="]
[Token, ., ASSIGN_MOD]
[Token]
[processAssignExpr, (, node, ,, currentParent, ,, "%=", )]
[node]
[currentParent]
["%="]
[Token, ., HOOK]
[Token]
[processHook, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., OR]
[Token]
[processLogicalExpr, (, node, ,, currentParent, ,, "||", )]
[node]
[currentParent]
["||"]
[Token, ., AND]
[Token]
[processLogicalExpr, (, node, ,, currentParent, ,, "&&", )]
[node]
[currentParent]
["&&"]
[Token, ., INC]
[Token]
[processIncrDecrExpr, (, node, ,, currentParent, ,, "++", )]
[node]
[currentParent]
["++"]
[Token, ., DEC]
[Token]
[processIncrDecrExpr, (, node, ,, currentParent, ,, "--", )]
[node]
[currentParent]
["--"]
[Token, ., FUNCTION]
[Token]
[processFunction, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., IF]
[Token]
[processIf, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., SWITCH]
[Token]
[processSwitch, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., CASE]
[Token]
[processCase, (, node, ,, currentParent, ,, TagType, ., Case, )]
[node]
[currentParent]
[TagType, ., Case]
[TagType]
[Token, ., DEFAULT_CASE]
[Token]
[processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, )]
[node]
[currentParent]
[TagType, ., DefaultCase]
[TagType]
[Token, ., WHILE]
[Token]
[processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, )]
[node]
[currentParent]
[TagType, ., WhileStmt]
[TagType]
[Token, ., DO]
[Token]
[processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, )]
[node]
[currentParent]
[TagType, ., DoWhileStmt]
[TagType]
[Token, ., FOR]
[Token]
[processForLoop, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., BREAK]
[Token]
[processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, )]
[node]
[currentParent]
[TagType, ., BreakStmt]
[TagType]
[Token, ., CONTINUE]
[Token]
[processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, )]
[node]
[currentParent]
[TagType, ., ContinueStmt]
[TagType]
[Token, ., VAR]
[Token]
[processVar, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., WITH]
[Token]
[processWith, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., CATCH]
[Token]
[processCatch, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., VOID]
[Token]
[processUnaryExpr, (, node, ,, currentParent, ,, "void", )]
[node]
[currentParent]
["void"]
[Token, ., EMPTY]
[Token]
[processEmpty, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., BLOCK]
[Token]
[processBlock, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., LABEL]
[Token]
[processLabel, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., EXPR_RESULT]
[Token]
[processExprResult, (, node, ,, currentParent, )]
[node]
[currentParent]
[Token, ., SCRIPT]
[Token]
[processScript, (, node, ,, currentParent, )]
[node]
[currentParent]
[processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., AssignExpr, ,, op, )]
[node]
[currentParent]
[TagType, ., AssignExpr]
[TagType]
[op]
[new, JsonML, (, TagType, ., ArrayExpr, )]
[TagType, ., ArrayExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., children, (, ), ., iterator, (, )]
[node, ., children, (, )]
[node]
[it, ., hasNext, (, )]
[it]
[processNode, (, it, ., next, (, ), ,, element, )]
[it, ., next, (, )]
[it]
[element]
[processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., BinaryExpr, ,, op, )]
[node]
[currentParent]
[TagType, ., BinaryExpr]
[TagType]
[op]
[new, JsonML, (, TagType, ., BlockStmt, )]
[TagType, ., BlockStmt]
[TagType]
[currentParent, !=, null]
[currentParent]
[null]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processDirectives, (, node, ,, element, )]
[node]
[element]
[node, ., children, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[node, ., children, (, ), ., iterator, (, )]
[node, ., children, (, )]
[node]
[it, ., next, (, )]
[it]
[child, ., getType, (, )]
[child]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[element]
[new, JsonML, (, TagType, ., InvokeExpr, )]
[TagType, ., InvokeExpr]
[TagType]
[element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", )]
[element]
[TagAttr, ., OP]
[TagAttr]
[child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]"]
[child, ., getType, (, ), ==, Token, ., GETPROP]
[child, ., getType, (, )]
[child]
[Token, ., GETPROP]
[Token]
["."]
["[]"]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[child, ., getFirstChild, (, )]
[child]
[processNode, (, grandchild, ,, element, )]
[grandchild]
[element]
[processNode, (, grandchild, ., getNext, (, ), ,, element, )]
[grandchild, ., getNext, (, )]
[grandchild]
[element]
[Token, ., NAME]
[Token]
[child, ., getString, (, ), ., equals, (, "eval", )]
[child, ., getString, (, )]
[child]
["eval"]
[element]
[new, JsonML, (, TagType, ., EvalExpr, )]
[TagType, ., EvalExpr]
[TagType]
[element]
[new, JsonML, (, TagType, ., IdExpr, )]
[TagType, ., IdExpr]
[TagType]
[element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[child, ., getString, (, )]
[child]
[element]
[new, JsonML, (, TagType, ., CallExpr, ,, element, )]
[TagType, ., CallExpr]
[TagType]
[element]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[element]
[new, JsonML, (, TagType, ., CallExpr, )]
[TagType, ., CallExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processNode, (, child, ,, element, )]
[child]
[element]
[it, ., hasNext, (, )]
[it]
[processNode, (, it, ., next, (, ), ,, element, )]
[it, ., next, (, )]
[it]
[element]
[new, JsonML, (, type, )]
[type]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[type, ==, TagType, ., Case]
[type]
[TagType, ., Case]
[TagType]
[processNode, (, child, ,, element, )]
[child]
[element]
[child]
[child, ., getNext, (, )]
[child]
[Preconditions, ., checkNotNull, (, child, )]
[Preconditions]
[child]
[Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, )]
[Preconditions]
[child, ., getType, (, ), ==, Token, ., BLOCK]
[child, ., getType, (, )]
[child]
[Token, ., BLOCK]
[Token]
[child]
[child, ., getFirstChild, (, )]
[child]
[child, !=, null]
[child]
[null]
[processNode, (, child, ,, element, )]
[child]
[element]
[child]
[child, ., getNext, (, )]
[child]
[new, JsonML, (, TagType, ., CatchClause, )]
[TagType, ., CatchClause]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[new, JsonML, (, TagType, ., IdPatt, )]
[TagType, ., IdPatt]
[TagType]
[patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), )]
[patt]
[TagAttr, ., NAME]
[TagAttr]
[child, ., getString, (, )]
[child]
[element, ., appendChild, (, patt, )]
[element]
[patt]
[child]
[child, ., getNext, (, )]
[child]
[processNode, (, child, ,, element, )]
[child]
[element]
[currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr]
[currentParent, ., getType, (, )]
[currentParent]
[TagType, ., ArrayExpr]
[TagType]
[currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), )]
[currentParent]
[new, JsonML, (, TagType, ., Empty, )]
[TagType, ., Empty]
[TagType]
[currentParent, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), )]
[currentParent]
[new, JsonML, (, TagType, ., EmptyStmt, )]
[TagType, ., EmptyStmt]
[TagType]
[processNode, (, node, ., getFirstChild, (, ), ,, currentParent, )]
[node, ., getFirstChild, (, )]
[node]
[currentParent]
[NodeUtil, ., isForIn, (, node, )]
[NodeUtil]
[node]
[processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, )]
[node]
[currentParent]
[TagType, ., ForInStmt]
[TagType]
[processLoop, (, node, ,, currentParent, ,, TagType, ., ForStmt, )]
[node]
[currentParent]
[TagType, ., ForStmt]
[TagType]
[NodeUtil, ., isFunctionDeclaration, (, node, )]
[NodeUtil]
[node]
[element]
[new, JsonML, (, TagType, ., FunctionDecl, )]
[TagType, ., FunctionDecl]
[TagType]
[element]
[new, JsonML, (, TagType, ., FunctionExpr, )]
[TagType, ., FunctionExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[child, ., getString, (, )]
[child]
[!, name, ., equals, (, "", )]
[name, ., equals, (, "", )]
[name]
[""]
[new, JsonML, (, TagType, ., IdPatt, )]
[TagType, ., IdPatt]
[TagType]
[nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, )]
[nameElement]
[TagAttr, ., NAME]
[TagAttr]
[name]
[element, ., appendChild, (, nameElement, )]
[element]
[nameElement]
[element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), )]
[element]
[new, JsonML, (, TagType, ., Empty, )]
[TagType, ., Empty]
[TagType]
[child]
[child, ., getNext, (, )]
[child]
[new, JsonML, (, TagType, ., ParamDecl, )]
[TagType, ., ParamDecl]
[TagType]
[element, ., appendChild, (, params, )]
[element]
[params]
[child, ., children, (, ), ., iterator, (, )]
[child, ., children, (, )]
[child]
[it, ., hasNext, (, )]
[it]
[new, JsonML, (, TagType, ., IdPatt, )]
[TagType, ., IdPatt]
[TagType]
[it, ., next, (, )]
[it]
[param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), )]
[param]
[TagAttr, ., NAME]
[TagAttr]
[nameNode, ., getString, (, )]
[nameNode]
[params, ., appendChild, (, param, )]
[params]
[param]
[child]
[child, ., getNext, (, )]
[child]
[processDirectives, (, child, ,, element, )]
[child]
[element]
[it]
[child, ., children, (, ), ., iterator, (, )]
[child, ., children, (, )]
[child]
[it, ., hasNext, (, )]
[it]
[processNode, (, it, ., next, (, ), ,, element, )]
[it, ., next, (, )]
[it]
[element]
[new, JsonML, (, TagType, ., ConditionalExpr, )]
[TagType, ., ConditionalExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processChildren, (, node, ,, element, )]
[node]
[element]
[new, JsonML, (, TagType, ., IfStmt, )]
[TagType, ., IfStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., children, (, ), ., iterator, (, )]
[node, ., children, (, )]
[node]
[it, ., hasNext, (, )]
[it]
[processNode, (, it, ., next, (, ), ,, element, )]
[it, ., next, (, )]
[it]
[element]
[node, ., getChildCount, (, )]
[node]
[Preconditions, ., checkState, (, childCount, >=, 2, )]
[Preconditions]
[childCount, >=, 2]
[childCount]
[2]
[childCount, <, 3]
[childCount]
[3]
[element, ., appendChild, (, new, JsonML, (, TagType, ., EmptyStmt, ), )]
[element]
[new, JsonML, (, TagType, ., EmptyStmt, )]
[TagType, ., EmptyStmt]
[TagType]
[new, JsonML, (, TagType, ., CountExpr, )]
[TagType, ., CountExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[op, ., equals, (, "++", )]
[op]
["++"]
[element, ., setAttribute, (, TagAttr, ., OP, ,, "++", )]
[element]
[TagAttr, ., OP]
[TagAttr]
["++"]
[element, ., setAttribute, (, TagAttr, ., OP, ,, "--", )]
[element]
[TagAttr, ., OP]
[TagAttr]
["--"]
[node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1]
[node, ., getIntProp, (, Node, ., INCRDECR_PROP, )]
[node]
[Node, ., INCRDECR_PROP]
[Node]
[1]
[element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, )]
[element]
[TagAttr, ., IS_PREFIX]
[TagAttr]
[false]
[element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, )]
[element]
[TagAttr, ., IS_PREFIX]
[TagAttr]
[true]
[processNode, (, node, ., getFirstChild, (, ), ,, element, )]
[node, ., getFirstChild, (, )]
[node]
[element]
[new, JsonML, (, type, )]
[type]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[child, !=, null]
[child]
[null]
[element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), )]
[element]
[TagAttr, ., LABEL]
[TagAttr]
[child, ., getString, (, )]
[child]
[new, JsonML, (, TagType, ., LabelledStmt, )]
[TagType, ., LabelledStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), )]
[element]
[TagAttr, ., LABEL]
[TagAttr]
[child, ., getString, (, )]
[child]
[child]
[child, ., getNext, (, )]
[child]
[processNode, (, child, ,, element, )]
[child]
[element]
[new, JsonML, (, TagType, ., LiteralExpr, )]
[TagType, ., LiteralExpr]
[TagType]
[node, ., getType, (, )]
[node]
[Token, ., NUMBER]
[Token]
[element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
["number"]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[node, ., getDouble, (, )]
[node]
[Token, ., STRING]
[Token]
[element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
["string"]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[node, ., getString, (, )]
[node]
[Token, ., NULL]
[Token]
[element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
["null"]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[null]
[Token, ., TRUE]
[Token]
[element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
["boolean"]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[true]
[Token, ., FALSE]
[Token]
[element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
["boolean"]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[false]
[new, IllegalArgumentException, (, "Illegal type of node.", )]
["Illegal type of node."]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[op, ., equals, (, "||", )]
[op]
["||"]
[processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, )]
[node]
[currentParent]
[TagType, ., LogicalOrExpr]
[TagType]
[op, ., endsWith, (, "&&", )]
[op]
["&&"]
[processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, )]
[node]
[currentParent]
[TagType, ., LogicalAndExpr]
[TagType]
[new, IllegalArgumentException, (, "Unsupported value of op argument.", )]
["Unsupported value of op argument."]
[new, JsonML, (, type, )]
[type]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processChildren, (, node, ,, element, )]
[node]
[element]
[new, JsonML, (, TagType, ., MemberExpr, )]
[TagType, ., MemberExpr]
[TagType]
[element, ., setAttribute, (, TagAttr, ., OP, ,, op, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[op]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[processNode, (, child, ., getNext, (, ), ,, element, )]
[child, ., getNext, (, )]
[child]
[element]
[Preconditions, ., checkState, (, !, node, ., hasChildren, (, ), )]
[Preconditions]
[!, node, ., hasChildren, (, )]
[node, ., hasChildren, (, )]
[node]
[new, JsonML, (, TagType, ., IdExpr, )]
[TagType, ., IdExpr]
[TagType]
[element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[node, ., getString, (, )]
[node]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[new, JsonML, (, type, )]
[type]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processChildren, (, node, ,, element, )]
[node]
[element]
[new, JsonML, (, TagType, ., ObjectExpr, )]
[TagType, ., ObjectExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., children, (, )]
[node]
[key, ., getFirstChild, (, )]
[key]
[key, ., getType, (, )]
[key]
[Token, ., STRING_KEY]
[Token]
[item]
[new, JsonML, (, TagType, ., DataProp, )]
[TagType, ., DataProp]
[TagType]
[name]
[key, ., getString, (, )]
[key]
[Token, ., GETTER_DEF]
[Token]
[item]
[new, JsonML, (, TagType, ., GetterProp, )]
[TagType, ., GetterProp]
[TagType]
[name]
[key, ., getString, (, )]
[key]
[Token, ., SETTER_DEF]
[Token]
[item]
[new, JsonML, (, TagType, ., SetterProp, )]
[TagType, ., SetterProp]
[TagType]
[name]
[key, ., getString, (, )]
[key]
[new, IllegalArgumentException, (, "Illegal type of node.", )]
["Illegal type of node."]
[item, ., setAttribute, (, TagAttr, ., NAME, ,, name, )]
[item]
[TagAttr, ., NAME]
[TagAttr]
[name]
[processNode, (, value, ,, item, )]
[value]
[item]
[element, ., appendChild, (, item, )]
[element]
[item]
[new, JsonML, (, TagType, ., RegExpExpr, )]
[TagType, ., RegExpExpr]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[element, ., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), )]
[element]
[TagAttr, ., BODY]
[TagAttr]
[child, ., getString, (, )]
[child]
[""]
[child]
[child, ., getNext, (, )]
[child]
[child, !=, null]
[child]
[null]
[flags]
[child, ., getString, (, )]
[child]
[element, ., setAttribute, (, TagAttr, ., FLAGS, ,, flags, )]
[element]
[TagAttr, ., FLAGS]
[TagAttr]
[flags]
[new, JsonML, (, TagType, ., SwitchStmt, )]
[TagType, ., SwitchStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[child, ., getNext, (, )]
[child]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[processNode, (, c, ,, element, )]
[c]
[element]
[currentParent, ., appendChild, (, new, JsonML, (, TagType, ., ThisExpr, ), )]
[currentParent]
[new, JsonML, (, TagType, ., ThisExpr, )]
[TagType, ., ThisExpr]
[TagType]
[new, JsonML, (, TagType, ., ThrowStmt, )]
[TagType, ., ThrowStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processNode, (, node, ., getFirstChild, (, ), ,, element, )]
[node, ., getFirstChild, (, )]
[node]
[element]
[new, JsonML, (, TagType, ., TryStmt, )]
[TagType, ., TryStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[child]
[child, ., getNext, (, )]
[child]
[child, ., hasChildren, (, )]
[child]
[processNode, (, child, ., getFirstChild, (, ), ,, element, )]
[child, ., getFirstChild, (, )]
[child]
[element]
[element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), )]
[element]
[new, JsonML, (, TagType, ., Empty, )]
[TagType, ., Empty]
[TagType]
[child]
[child, ., getNext, (, )]
[child]
[child, !=, null]
[child]
[null]
[processNode, (, child, ,, element, )]
[child]
[element]
[processTwoArgExpr, (, node, ,, currentParent, ,, type, ,, null, )]
[node]
[currentParent]
[type]
[null]
[new, JsonML, (, type, )]
[type]
[op, !=, null]
[op]
[null]
[element, ., setAttribute, (, TagAttr, ., OP, ,, op, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[op]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, )]
[Preconditions]
[node, ., getChildCount, (, ), ==, 2]
[node, ., getChildCount, (, )]
[node]
[2]
[node, ., getFirstChild, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[processNode, (, child, ., getNext, (, ), ,, element, )]
[child, ., getNext, (, )]
[child]
[element]
[new, JsonML, (, TagType, ., UnaryExpr, )]
[TagType, ., UnaryExpr]
[TagType]
[element, ., setAttribute, (, TagAttr, ., OP, ,, op, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[op]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processNode, (, node, ., getFirstChild, (, ), ,, element, )]
[node, ., getFirstChild, (, )]
[node]
[element]
[new, JsonML, (, TagType, ., VarDecl, )]
[TagType, ., VarDecl]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., children, (, ), ., iterator, (, )]
[node, ., children, (, )]
[node]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[new, JsonML, (, TagType, ., IdPatt, )]
[TagType, ., IdPatt]
[TagType]
[id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), )]
[id]
[TagAttr, ., NAME]
[TagAttr]
[child, ., getString, (, )]
[child]
[child, ., hasChildren, (, )]
[child]
[new, JsonML, (, TagType, ., InitPatt, )]
[TagType, ., InitPatt]
[TagType]
[element, ., appendChild, (, patt, )]
[element]
[patt]
[patt, ., appendChild, (, id, )]
[patt]
[id]
[processNode, (, child, ., getFirstChild, (, ), ,, patt, )]
[child, ., getFirstChild, (, )]
[child]
[patt]
[element, ., appendChild, (, id, )]
[element]
[id]
[new, JsonML, (, TagType, ., ReturnStmt, )]
[TagType, ., ReturnStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[currentNode, ., hasChildren, (, )]
[currentNode]
[processNode, (, currentNode, ., getFirstChild, (, ), ,, element, )]
[currentNode, ., getFirstChild, (, )]
[currentNode]
[element]
[new, JsonML, (, TagType, ., Program, )]
[TagType, ., Program]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processDirectives, (, node, ,, element, )]
[node]
[element]
[processChildren, (, node, ,, element, )]
[node]
[element]
[new, JsonML, (, TagType, ., WithStmt, )]
[TagType, ., WithStmt]
[TagType]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[node, ., getFirstChild, (, )]
[node]
[processNode, (, child, ,, element, )]
[child]
[element]
[child]
[child, ., getNext, (, )]
[child]
[processNode, (, child, ,, element, )]
[child]
[element]
[node, ., children, (, )]
[node]
[processNode, (, child, ,, currentParent, )]
[child]
[currentParent]
[node, ., getDirectives, (, )]
[node]
[directives, ==, null]
[directives]
[null]
[directives]
[new, JsonML, (, TagType, ., PrologueDecl, )]
[TagType, ., PrologueDecl]
[TagType]
[element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, )]
[element]
[TagAttr, ., DIRECTIVE]
[TagAttr]
[directive]
[element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[directive]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[new, JsonML, (, type, )]
[type]
[currentParent, ., appendChild, (, element, )]
[currentParent]
[element]
[processNode, (, node, ., getFirstChild, (, ), ,, element, )]
[node, ., getFirstChild, (, )]
[node]
[element]
