[0x1.0p-52]
[0x1.0p-966]
[matrix, ., getRowDimension, (, ), <, matrix, ., getColumnDimension, (, )]
[matrix, ., getRowDimension, (, )]
[matrix]
[matrix, ., getColumnDimension, (, )]
[matrix]
[transposed]
[true]
[A]
[matrix, ., transpose, (, ), ., getData, (, )]
[matrix, ., transpose, (, )]
[matrix]
[m]
[matrix, ., getColumnDimension, (, )]
[matrix]
[n]
[matrix, ., getRowDimension, (, )]
[matrix]
[transposed]
[false]
[A]
[matrix, ., getData, (, )]
[matrix]
[m]
[matrix, ., getRowDimension, (, )]
[matrix]
[n]
[matrix, ., getColumnDimension, (, )]
[matrix]
[singularValues]
[new, double, [, n, ]]
[n]
[new, double, [, m, ], [, n, ]]
[m]
[n]
[new, double, [, n, ], [, n, ]]
[n]
[n]
[new, double, [, n, ]]
[n]
[new, double, [, m, ]]
[m]
[FastMath, ., min, (, m, -, 1, ,, n, )]
[FastMath]
[m, -, 1]
[m]
[1]
[n]
[FastMath, ., max, (, 0, ,, n, -, 2, )]
[FastMath]
[0]
[n, -, 2]
[n]
[2]
[0]
[k, <, FastMath, ., max, (, nct, ,, nrt, )]
[k]
[FastMath, ., max, (, nct, ,, nrt, )]
[FastMath]
[nct]
[nrt]
[k, ++]
[k]
[k, <, nct]
[k]
[nct]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[singularValues, [, k, ]]
[singularValues]
[k]
[FastMath, ., hypot, (, singularValues, [, k, ], ,, A, [, i, ], [, k, ], )]
[FastMath]
[singularValues, [, k, ]]
[singularValues]
[k]
[A, [, i, ], [, k, ]]
[A, [, i, ]]
[A]
[i]
[k]
[singularValues, [, k, ], !=, 0]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[A, [, k, ], [, k, ], <, 0]
[A, [, k, ], [, k, ]]
[A, [, k, ]]
[A]
[k]
[k]
[0]
[singularValues, [, k, ]]
[singularValues]
[k]
[-, singularValues, [, k, ]]
[singularValues, [, k, ]]
[singularValues]
[k]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[A, [, i, ], [, k, ]]
[A, [, i, ]]
[A]
[i]
[k]
[singularValues, [, k, ]]
[singularValues]
[k]
[A, [, k, ], [, k, ]]
[A, [, k, ]]
[A]
[k]
[k]
[1]
[singularValues, [, k, ]]
[singularValues]
[k]
[-, singularValues, [, k, ]]
[singularValues, [, k, ]]
[singularValues]
[k]
[k, +, 1]
[k]
[1]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[k, <, nct, &&, singularValues, [, k, ], !=, 0]
[k, <, nct]
[k]
[nct]
[singularValues, [, k, ], !=, 0]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[0]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[t]
[A, [, i, ], [, k, ], *, A, [, i, ], [, j, ]]
[A, [, i, ], [, k, ]]
[A, [, i, ]]
[A]
[i]
[k]
[A, [, i, ], [, j, ]]
[A, [, i, ]]
[A]
[i]
[j]
[t]
[-, t, /, A, [, k, ], [, k, ]]
[-, t]
[t]
[A, [, k, ], [, k, ]]
[A, [, k, ]]
[A]
[k]
[k]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[A, [, i, ], [, j, ]]
[A, [, i, ]]
[A]
[i]
[j]
[t, *, A, [, i, ], [, k, ]]
[t]
[A, [, i, ], [, k, ]]
[A, [, i, ]]
[A]
[i]
[k]
[e, [, j, ]]
[e]
[j]
[A, [, k, ], [, j, ]]
[A, [, k, ]]
[A]
[k]
[j]
[k, <, nct]
[k]
[nct]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[A, [, i, ], [, k, ]]
[A, [, i, ]]
[A]
[i]
[k]
[k, <, nrt]
[k]
[nrt]
[e, [, k, ]]
[e]
[k]
[0]
[k, +, 1]
[k]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[e, [, k, ]]
[e]
[k]
[FastMath, ., hypot, (, e, [, k, ], ,, e, [, i, ], )]
[FastMath]
[e, [, k, ]]
[e]
[k]
[e, [, i, ]]
[e]
[i]
[e, [, k, ], !=, 0]
[e, [, k, ]]
[e]
[k]
[0]
[e, [, k, +, 1, ], <, 0]
[e, [, k, +, 1, ]]
[e]
[k, +, 1]
[k]
[1]
[0]
[e, [, k, ]]
[e]
[k]
[-, e, [, k, ]]
[e, [, k, ]]
[e]
[k]
[k, +, 1]
[k]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[e, [, i, ]]
[e]
[i]
[e, [, k, ]]
[e]
[k]
[e, [, k, +, 1, ]]
[e]
[k, +, 1]
[k]
[1]
[1]
[e, [, k, ]]
[e]
[k]
[-, e, [, k, ]]
[e, [, k, ]]
[e]
[k]
[k, +, 1, <, m, &&, e, [, k, ], !=, 0]
[k, +, 1, <, m]
[k, +, 1]
[k]
[1]
[m]
[e, [, k, ], !=, 0]
[e, [, k, ]]
[e]
[k]
[0]
[k, +, 1]
[k]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[work, [, i, ]]
[work]
[i]
[0]
[k, +, 1]
[k]
[1]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[k, +, 1]
[k]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[work, [, i, ]]
[work]
[i]
[e, [, j, ], *, A, [, i, ], [, j, ]]
[e, [, j, ]]
[e]
[j]
[A, [, i, ], [, j, ]]
[A, [, i, ]]
[A]
[i]
[j]
[k, +, 1]
[k]
[1]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[-, e, [, j, ], /, e, [, k, +, 1, ]]
[-, e, [, j, ]]
[e, [, j, ]]
[e]
[j]
[e, [, k, +, 1, ]]
[e]
[k, +, 1]
[k]
[1]
[k, +, 1]
[k]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[A, [, i, ], [, j, ]]
[A, [, i, ]]
[A]
[i]
[j]
[t, *, work, [, i, ]]
[t]
[work, [, i, ]]
[work]
[i]
[k, +, 1]
[k]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[e, [, i, ]]
[e]
[i]
[n]
[nct, <, n]
[nct]
[n]
[singularValues, [, nct, ]]
[singularValues]
[nct]
[A, [, nct, ], [, nct, ]]
[A, [, nct, ]]
[A]
[nct]
[nct]
[m, <, p]
[m]
[p]
[singularValues, [, p, -, 1, ]]
[singularValues]
[p, -, 1]
[p]
[1]
[0]
[nrt, +, 1, <, p]
[nrt, +, 1]
[nrt]
[1]
[p]
[e, [, nrt, ]]
[e]
[nrt]
[A, [, nrt, ], [, p, -, 1, ]]
[A, [, nrt, ]]
[A]
[nrt]
[p, -, 1]
[p]
[1]
[e, [, p, -, 1, ]]
[e]
[p, -, 1]
[p]
[1]
[0]
[nct]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[0]
[U, [, j, ], [, j, ]]
[U, [, j, ]]
[U]
[j]
[j]
[1]
[nct, -, 1]
[nct]
[1]
[k, >=, 0]
[k]
[0]
[k, --]
[k]
[singularValues, [, k, ], !=, 0]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[k, +, 1]
[k]
[1]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[0]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[t]
[U, [, i, ], [, k, ], *, U, [, i, ], [, j, ]]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[t]
[-, t, /, U, [, k, ], [, k, ]]
[-, t]
[t]
[U, [, k, ], [, k, ]]
[U, [, k, ]]
[U]
[k]
[k]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[t, *, U, [, i, ], [, k, ]]
[t]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[k]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[-, U, [, i, ], [, k, ]]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[U, [, k, ], [, k, ]]
[U, [, k, ]]
[U]
[k]
[k]
[1, +, U, [, k, ], [, k, ]]
[1]
[U, [, k, ], [, k, ]]
[U, [, k, ]]
[U]
[k]
[k]
[0]
[i, <, k, -, 1]
[i]
[k, -, 1]
[k]
[1]
[i, ++]
[i]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[0]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[0]
[U, [, k, ], [, k, ]]
[U, [, k, ]]
[U]
[k]
[k]
[1]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k, --]
[k]
[k, <, nrt, &&, e, [, k, ], !=, 0]
[k, <, nrt]
[k]
[nrt]
[e, [, k, ], !=, 0]
[e, [, k, ]]
[e]
[k]
[0]
[k, +, 1]
[k]
[1]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[0]
[k, +, 1]
[k]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[t]
[V, [, i, ], [, k, ], *, V, [, i, ], [, j, ]]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[t]
[-, t, /, V, [, k, +, 1, ], [, k, ]]
[-, t]
[t]
[V, [, k, +, 1, ], [, k, ]]
[V, [, k, +, 1, ]]
[V]
[k, +, 1]
[k]
[1]
[k]
[k, +, 1]
[k]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[t, *, V, [, i, ], [, k, ]]
[t]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[0]
[V, [, k, ], [, k, ]]
[V, [, k, ]]
[V]
[k]
[k]
[1]
[p, -, 1]
[p]
[1]
[0]
[p, >, 0]
[p]
[0]
[k]
[p, -, 2]
[p]
[2]
[k, >=, 0]
[k]
[0]
[k, --]
[k]
[TINY, +, EPS, *, (, FastMath, ., abs, (, singularValues, [, k, ], ), +, FastMath, ., abs, (, singularValues, [, k, +, 1, ], ), )]
[TINY]
[EPS, *, (, FastMath, ., abs, (, singularValues, [, k, ], ), +, FastMath, ., abs, (, singularValues, [, k, +, 1, ], ), )]
[EPS]
[(, FastMath, ., abs, (, singularValues, [, k, ], ), +, FastMath, ., abs, (, singularValues, [, k, +, 1, ], ), )]
[FastMath, ., abs, (, singularValues, [, k, ], ), +, FastMath, ., abs, (, singularValues, [, k, +, 1, ], )]
[FastMath, ., abs, (, singularValues, [, k, ], )]
[FastMath]
[singularValues, [, k, ]]
[singularValues]
[k]
[FastMath, ., abs, (, singularValues, [, k, +, 1, ], )]
[FastMath]
[singularValues, [, k, +, 1, ]]
[singularValues]
[k, +, 1]
[k]
[1]
[!, (, FastMath, ., abs, (, e, [, k, ], ), >, threshold, )]
[(, FastMath, ., abs, (, e, [, k, ], ), >, threshold, )]
[FastMath, ., abs, (, e, [, k, ], ), >, threshold]
[FastMath, ., abs, (, e, [, k, ], )]
[FastMath]
[e, [, k, ]]
[e]
[k]
[threshold]
[e, [, k, ]]
[e]
[k]
[0]
[k, ==, p, -, 2]
[k]
[p, -, 2]
[p]
[2]
[kase]
[4]
[ks]
[p, -, 1]
[p]
[1]
[ks, >=, k]
[ks]
[k]
[ks, --]
[ks]
[ks, ==, k]
[ks]
[k]
[(, ks, !=, p, ?, FastMath, ., abs, (, e, [, ks, ], ), :, 0, ), +, (, ks, !=, k, +, 1, ?, FastMath, ., abs, (, e, [, ks, -, 1, ], ), :, 0, )]
[(, ks, !=, p, ?, FastMath, ., abs, (, e, [, ks, ], ), :, 0, )]
[ks, !=, p, ?, FastMath, ., abs, (, e, [, ks, ], ), :, 0]
[ks, !=, p]
[ks]
[p]
[FastMath, ., abs, (, e, [, ks, ], )]
[FastMath]
[e, [, ks, ]]
[e]
[ks]
[0]
[(, ks, !=, k, +, 1, ?, FastMath, ., abs, (, e, [, ks, -, 1, ], ), :, 0, )]
[ks, !=, k, +, 1, ?, FastMath, ., abs, (, e, [, ks, -, 1, ], ), :, 0]
[ks, !=, k, +, 1]
[ks]
[k, +, 1]
[k]
[1]
[FastMath, ., abs, (, e, [, ks, -, 1, ], )]
[FastMath]
[e, [, ks, -, 1, ]]
[e]
[ks, -, 1]
[ks]
[1]
[0]
[FastMath, ., abs, (, singularValues, [, ks, ], ), <=, TINY, +, EPS, *, t]
[FastMath, ., abs, (, singularValues, [, ks, ], )]
[FastMath]
[singularValues, [, ks, ]]
[singularValues]
[ks]
[TINY, +, EPS, *, t]
[TINY]
[EPS, *, t]
[EPS]
[t]
[singularValues, [, ks, ]]
[singularValues]
[ks]
[0]
[ks, ==, k]
[ks]
[k]
[kase]
[3]
[ks, ==, p, -, 1]
[ks]
[p, -, 1]
[p]
[1]
[kase]
[1]
[kase]
[2]
[k]
[ks]
[k, ++]
[k]
[kase]
[1]
[e, [, p, -, 2, ]]
[e]
[p, -, 2]
[p]
[2]
[e, [, p, -, 2, ]]
[e]
[p, -, 2]
[p]
[2]
[0]
[p, -, 2]
[p]
[2]
[j, >=, k]
[j]
[k]
[j, --]
[j]
[FastMath, ., hypot, (, singularValues, [, j, ], ,, f, )]
[FastMath]
[singularValues, [, j, ]]
[singularValues]
[j]
[f]
[singularValues, [, j, ], /, t]
[singularValues, [, j, ]]
[singularValues]
[j]
[t]
[f, /, t]
[f]
[t]
[singularValues, [, j, ]]
[singularValues]
[j]
[t]
[j, !=, k]
[j]
[k]
[f]
[-, sn, *, e, [, j, -, 1, ]]
[-, sn]
[sn]
[e, [, j, -, 1, ]]
[e]
[j, -, 1]
[j]
[1]
[e, [, j, -, 1, ]]
[e]
[j, -, 1]
[j]
[1]
[cs, *, e, [, j, -, 1, ]]
[cs]
[e, [, j, -, 1, ]]
[e]
[j, -, 1]
[j]
[1]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[t]
[cs, *, V, [, i, ], [, j, ], +, sn, *, V, [, i, ], [, p, -, 1, ]]
[cs, *, V, [, i, ], [, j, ]]
[cs]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[sn, *, V, [, i, ], [, p, -, 1, ]]
[sn]
[V, [, i, ], [, p, -, 1, ]]
[V, [, i, ]]
[V]
[i]
[p, -, 1]
[p]
[1]
[V, [, i, ], [, p, -, 1, ]]
[V, [, i, ]]
[V]
[i]
[p, -, 1]
[p]
[1]
[-, sn, *, V, [, i, ], [, j, ], +, cs, *, V, [, i, ], [, p, -, 1, ]]
[-, sn, *, V, [, i, ], [, j, ]]
[-, sn]
[sn]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[cs, *, V, [, i, ], [, p, -, 1, ]]
[cs]
[V, [, i, ], [, p, -, 1, ]]
[V, [, i, ]]
[V]
[i]
[p, -, 1]
[p]
[1]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[t]
[2]
[e, [, k, -, 1, ]]
[e]
[k, -, 1]
[k]
[1]
[e, [, k, -, 1, ]]
[e]
[k, -, 1]
[k]
[1]
[0]
[k]
[j, <, p]
[j]
[p]
[j, ++]
[j]
[FastMath, ., hypot, (, singularValues, [, j, ], ,, f, )]
[FastMath]
[singularValues, [, j, ]]
[singularValues]
[j]
[f]
[singularValues, [, j, ], /, t]
[singularValues, [, j, ]]
[singularValues]
[j]
[t]
[f, /, t]
[f]
[t]
[singularValues, [, j, ]]
[singularValues]
[j]
[t]
[f]
[-, sn, *, e, [, j, ]]
[-, sn]
[sn]
[e, [, j, ]]
[e]
[j]
[e, [, j, ]]
[e]
[j]
[cs, *, e, [, j, ]]
[cs]
[e, [, j, ]]
[e]
[j]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[t]
[cs, *, U, [, i, ], [, j, ], +, sn, *, U, [, i, ], [, k, -, 1, ]]
[cs, *, U, [, i, ], [, j, ]]
[cs]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[sn, *, U, [, i, ], [, k, -, 1, ]]
[sn]
[U, [, i, ], [, k, -, 1, ]]
[U, [, i, ]]
[U]
[i]
[k, -, 1]
[k]
[1]
[U, [, i, ], [, k, -, 1, ]]
[U, [, i, ]]
[U]
[i]
[k, -, 1]
[k]
[1]
[-, sn, *, U, [, i, ], [, j, ], +, cs, *, U, [, i, ], [, k, -, 1, ]]
[-, sn, *, U, [, i, ], [, j, ]]
[-, sn]
[sn]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[cs, *, U, [, i, ], [, k, -, 1, ]]
[cs]
[U, [, i, ], [, k, -, 1, ]]
[U, [, i, ]]
[U]
[i]
[k, -, 1]
[k]
[1]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[t]
[3]
[FastMath, ., max, (, FastMath, ., abs, (, singularValues, [, p, -, 1, ], ), ,, FastMath, ., abs, (, singularValues, [, p, -, 2, ], ), )]
[FastMath]
[FastMath, ., abs, (, singularValues, [, p, -, 1, ], )]
[FastMath]
[singularValues, [, p, -, 1, ]]
[singularValues]
[p, -, 1]
[p]
[1]
[FastMath, ., abs, (, singularValues, [, p, -, 2, ], )]
[FastMath]
[singularValues, [, p, -, 2, ]]
[singularValues]
[p, -, 2]
[p]
[2]
[FastMath, ., max, (, FastMath, ., max, (, FastMath, ., max, (, maxPm1Pm2, ,, FastMath, ., abs, (, e, [, p, -, 2, ], ), ), ,, FastMath, ., abs, (, singularValues, [, k, ], ), ), ,, FastMath, ., abs, (, e, [, k, ], ), )]
[FastMath]
[FastMath, ., max, (, FastMath, ., max, (, maxPm1Pm2, ,, FastMath, ., abs, (, e, [, p, -, 2, ], ), ), ,, FastMath, ., abs, (, singularValues, [, k, ], ), )]
[FastMath]
[FastMath, ., max, (, maxPm1Pm2, ,, FastMath, ., abs, (, e, [, p, -, 2, ], ), )]
[FastMath]
[maxPm1Pm2]
[FastMath, ., abs, (, e, [, p, -, 2, ], )]
[FastMath]
[e, [, p, -, 2, ]]
[e]
[p, -, 2]
[p]
[2]
[FastMath, ., abs, (, singularValues, [, k, ], )]
[FastMath]
[singularValues, [, k, ]]
[singularValues]
[k]
[FastMath, ., abs, (, e, [, k, ], )]
[FastMath]
[e, [, k, ]]
[e]
[k]
[singularValues, [, p, -, 1, ], /, scale]
[singularValues, [, p, -, 1, ]]
[singularValues]
[p, -, 1]
[p]
[1]
[scale]
[singularValues, [, p, -, 2, ], /, scale]
[singularValues, [, p, -, 2, ]]
[singularValues]
[p, -, 2]
[p]
[2]
[scale]
[e, [, p, -, 2, ], /, scale]
[e, [, p, -, 2, ]]
[e]
[p, -, 2]
[p]
[2]
[scale]
[singularValues, [, k, ], /, scale]
[singularValues, [, k, ]]
[singularValues]
[k]
[scale]
[e, [, k, ], /, scale]
[e, [, k, ]]
[e]
[k]
[scale]
[(, (, spm1, +, sp, ), *, (, spm1, -, sp, ), +, epm1, *, epm1, ), /, 2.0]
[(, (, spm1, +, sp, ), *, (, spm1, -, sp, ), +, epm1, *, epm1, )]
[(, spm1, +, sp, ), *, (, spm1, -, sp, ), +, epm1, *, epm1]
[(, spm1, +, sp, ), *, (, spm1, -, sp, )]
[(, spm1, +, sp, )]
[spm1, +, sp]
[spm1]
[sp]
[(, spm1, -, sp, )]
[spm1, -, sp]
[spm1]
[sp]
[epm1, *, epm1]
[epm1]
[epm1]
[2.0]
[(, sp, *, epm1, ), *, (, sp, *, epm1, )]
[(, sp, *, epm1, )]
[sp, *, epm1]
[sp]
[epm1]
[(, sp, *, epm1, )]
[sp, *, epm1]
[sp]
[epm1]
[0]
[b, !=, 0, ||, c, !=, 0]
[b, !=, 0]
[b]
[0]
[c, !=, 0]
[c]
[0]
[shift]
[FastMath, ., sqrt, (, b, *, b, +, c, )]
[FastMath]
[b, *, b, +, c]
[b, *, b]
[b]
[b]
[c]
[b, <, 0]
[b]
[0]
[shift]
[-, shift]
[shift]
[shift]
[c, /, (, b, +, shift, )]
[c]
[(, b, +, shift, )]
[b, +, shift]
[b]
[shift]
[(, sk, +, sp, ), *, (, sk, -, sp, ), +, shift]
[(, sk, +, sp, ), *, (, sk, -, sp, )]
[(, sk, +, sp, )]
[sk, +, sp]
[sk]
[sp]
[(, sk, -, sp, )]
[sk, -, sp]
[sk]
[sp]
[shift]
[sk, *, ek]
[sk]
[ek]
[k]
[j, <, p, -, 1]
[j]
[p, -, 1]
[p]
[1]
[j, ++]
[j]
[FastMath, ., hypot, (, f, ,, g, )]
[FastMath]
[f]
[g]
[f, /, t]
[f]
[t]
[g, /, t]
[g]
[t]
[j, !=, k]
[j]
[k]
[e, [, j, -, 1, ]]
[e]
[j, -, 1]
[j]
[1]
[t]
[f]
[cs, *, singularValues, [, j, ], +, sn, *, e, [, j, ]]
[cs, *, singularValues, [, j, ]]
[cs]
[singularValues, [, j, ]]
[singularValues]
[j]
[sn, *, e, [, j, ]]
[sn]
[e, [, j, ]]
[e]
[j]
[e, [, j, ]]
[e]
[j]
[cs, *, e, [, j, ], -, sn, *, singularValues, [, j, ]]
[cs, *, e, [, j, ]]
[cs]
[e, [, j, ]]
[e]
[j]
[sn, *, singularValues, [, j, ]]
[sn]
[singularValues, [, j, ]]
[singularValues]
[j]
[g]
[sn, *, singularValues, [, j, +, 1, ]]
[sn]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[cs, *, singularValues, [, j, +, 1, ]]
[cs]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[t]
[cs, *, V, [, i, ], [, j, ], +, sn, *, V, [, i, ], [, j, +, 1, ]]
[cs, *, V, [, i, ], [, j, ]]
[cs]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[sn, *, V, [, i, ], [, j, +, 1, ]]
[sn]
[V, [, i, ], [, j, +, 1, ]]
[V, [, i, ]]
[V]
[i]
[j, +, 1]
[j]
[1]
[V, [, i, ], [, j, +, 1, ]]
[V, [, i, ]]
[V]
[i]
[j, +, 1]
[j]
[1]
[-, sn, *, V, [, i, ], [, j, ], +, cs, *, V, [, i, ], [, j, +, 1, ]]
[-, sn, *, V, [, i, ], [, j, ]]
[-, sn]
[sn]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[cs, *, V, [, i, ], [, j, +, 1, ]]
[cs]
[V, [, i, ], [, j, +, 1, ]]
[V, [, i, ]]
[V]
[i]
[j, +, 1]
[j]
[1]
[V, [, i, ], [, j, ]]
[V, [, i, ]]
[V]
[i]
[j]
[t]
[t]
[FastMath, ., hypot, (, f, ,, g, )]
[FastMath]
[f]
[g]
[cs]
[f, /, t]
[f]
[t]
[sn]
[g, /, t]
[g]
[t]
[singularValues, [, j, ]]
[singularValues]
[j]
[t]
[f]
[cs, *, e, [, j, ], +, sn, *, singularValues, [, j, +, 1, ]]
[cs, *, e, [, j, ]]
[cs]
[e, [, j, ]]
[e]
[j]
[sn, *, singularValues, [, j, +, 1, ]]
[sn]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[-, sn, *, e, [, j, ], +, cs, *, singularValues, [, j, +, 1, ]]
[-, sn, *, e, [, j, ]]
[-, sn]
[sn]
[e, [, j, ]]
[e]
[j]
[cs, *, singularValues, [, j, +, 1, ]]
[cs]
[singularValues, [, j, +, 1, ]]
[singularValues]
[j, +, 1]
[j]
[1]
[g]
[sn, *, e, [, j, +, 1, ]]
[sn]
[e, [, j, +, 1, ]]
[e]
[j, +, 1]
[j]
[1]
[e, [, j, +, 1, ]]
[e]
[j, +, 1]
[j]
[1]
[cs, *, e, [, j, +, 1, ]]
[cs]
[e, [, j, +, 1, ]]
[e]
[j, +, 1]
[j]
[1]
[j, <, m, -, 1]
[j]
[m, -, 1]
[m]
[1]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[t]
[cs, *, U, [, i, ], [, j, ], +, sn, *, U, [, i, ], [, j, +, 1, ]]
[cs, *, U, [, i, ], [, j, ]]
[cs]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[sn, *, U, [, i, ], [, j, +, 1, ]]
[sn]
[U, [, i, ], [, j, +, 1, ]]
[U, [, i, ]]
[U]
[i]
[j, +, 1]
[j]
[1]
[U, [, i, ], [, j, +, 1, ]]
[U, [, i, ]]
[U]
[i]
[j, +, 1]
[j]
[1]
[-, sn, *, U, [, i, ], [, j, ], +, cs, *, U, [, i, ], [, j, +, 1, ]]
[-, sn, *, U, [, i, ], [, j, ]]
[-, sn]
[sn]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[cs, *, U, [, i, ], [, j, +, 1, ]]
[cs]
[U, [, i, ], [, j, +, 1, ]]
[U, [, i, ]]
[U]
[i]
[j, +, 1]
[j]
[1]
[U, [, i, ], [, j, ]]
[U, [, i, ]]
[U]
[i]
[j]
[t]
[e, [, p, -, 2, ]]
[e]
[p, -, 2]
[p]
[2]
[f]
[iter]
[iter, +, 1]
[iter]
[1]
[singularValues, [, k, ], <=, 0]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[singularValues, [, k, ]]
[singularValues]
[k]
[singularValues, [, k, ], <, 0, ?, -, singularValues, [, k, ], :, 0]
[singularValues, [, k, ], <, 0]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[-, singularValues, [, k, ]]
[singularValues, [, k, ]]
[singularValues]
[k]
[0]
[0]
[i, <=, pp]
[i]
[pp]
[i, ++]
[i]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[-, V, [, i, ], [, k, ]]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[k, <, pp]
[k]
[pp]
[singularValues, [, k, ], >=, singularValues, [, k, +, 1, ]]
[singularValues, [, k, ]]
[singularValues]
[k]
[singularValues, [, k, +, 1, ]]
[singularValues]
[k, +, 1]
[k]
[1]
[singularValues, [, k, ]]
[singularValues]
[k]
[singularValues, [, k, ]]
[singularValues]
[k]
[singularValues, [, k, +, 1, ]]
[singularValues]
[k, +, 1]
[k]
[1]
[singularValues, [, k, +, 1, ]]
[singularValues]
[k, +, 1]
[k]
[1]
[t]
[k, <, n, -, 1]
[k]
[n, -, 1]
[n]
[1]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[t]
[V, [, i, ], [, k, +, 1, ]]
[V, [, i, ]]
[V]
[i]
[k, +, 1]
[k]
[1]
[V, [, i, ], [, k, +, 1, ]]
[V, [, i, ]]
[V]
[i]
[k, +, 1]
[k]
[1]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[V, [, i, ], [, k, ]]
[V, [, i, ]]
[V]
[i]
[k]
[t]
[k, <, m, -, 1]
[k]
[m, -, 1]
[m]
[1]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[t]
[U, [, i, ], [, k, +, 1, ]]
[U, [, i, ]]
[U]
[i]
[k, +, 1]
[k]
[1]
[U, [, i, ], [, k, +, 1, ]]
[U, [, i, ]]
[U]
[i]
[k, +, 1]
[k]
[1]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[U, [, i, ], [, k, ]]
[U, [, i, ]]
[U]
[i]
[k]
[t]
[k, ++]
[k]
[iter]
[0]
[p, --]
[p]
[tol]
[FastMath, ., max, (, m, *, singularValues, [, 0, ], *, EPS, ,, FastMath, ., sqrt, (, Precision, ., SAFE_MIN, ), )]
[FastMath]
[m, *, singularValues, [, 0, ], *, EPS]
[m, *, singularValues, [, 0, ]]
[m]
[singularValues, [, 0, ]]
[singularValues]
[0]
[EPS]
[FastMath, ., sqrt, (, Precision, ., SAFE_MIN, )]
[FastMath]
[Precision, ., SAFE_MIN]
[Precision]
[!, transposed]
[transposed]
[cachedU]
[MatrixUtils, ., createRealMatrix, (, U, )]
[MatrixUtils]
[U]
[cachedV]
[MatrixUtils, ., createRealMatrix, (, V, )]
[MatrixUtils]
[V]
[cachedU]
[MatrixUtils, ., createRealMatrix, (, V, )]
[MatrixUtils]
[V]
[cachedV]
[MatrixUtils, ., createRealMatrix, (, U, )]
[MatrixUtils]
[U]
[cachedU]
[cachedUt, ==, null]
[cachedUt]
[null]
[cachedUt]
[getU, (, ), ., transpose, (, )]
[getU, (, )]
[cachedUt]
[cachedS, ==, null]
[cachedS]
[null]
[cachedS]
[MatrixUtils, ., createRealDiagonalMatrix, (, singularValues, )]
[MatrixUtils]
[singularValues]
[cachedS]
[singularValues, ., clone, (, )]
[singularValues]
[cachedV]
[cachedVt, ==, null]
[cachedVt]
[null]
[cachedVt]
[getV, (, ), ., transpose, (, )]
[getV, (, )]
[cachedVt]
[singularValues, ., length]
[singularValues]
[0]
[dimension, <, p, &&, singularValues, [, dimension, ], >=, minSingularValue]
[dimension, <, p]
[dimension]
[p]
[singularValues, [, dimension, ], >=, minSingularValue]
[singularValues, [, dimension, ]]
[singularValues]
[dimension]
[minSingularValue]
[++, dimension]
[dimension]
[dimension, ==, 0]
[dimension]
[0]
[new, NumberIsTooLargeException, (, LocalizedFormats, ., TOO_LARGE_CUTOFF_SINGULAR_VALUE, ,, minSingularValue, ,, singularValues, [, 0, ], ,, true, )]
[LocalizedFormats, ., TOO_LARGE_CUTOFF_SINGULAR_VALUE]
[LocalizedFormats]
[minSingularValue]
[singularValues, [, 0, ]]
[singularValues]
[0]
[true]
[new, double, [, dimension, ], [, p, ]]
[dimension]
[p]
[getVT, (, ), ., walkInOptimizedOrder, (, new, DefaultRealMatrixPreservingVisitor, (, ), {, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, data, [, row, ], [, column, ], =, value, /, singularValues, [, row, ], ;, }, }, ,, 0, ,, dimension, -, 1, ,, 0, ,, p, -, 1, )]
[getVT, (, )]
[new, DefaultRealMatrixPreservingVisitor, (, ), {, @, Override, public, void, visit, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, data, [, row, ], [, column, ], =, value, /, singularValues, [, row, ], ;, }, }]
[data, [, row, ], [, column, ]]
[data, [, row, ]]
[data]
[row]
[column]
[value, /, singularValues, [, row, ]]
[value]
[singularValues, [, row, ]]
[singularValues]
[row]
[0]
[dimension, -, 1]
[dimension]
[1]
[0]
[p, -, 1]
[p]
[1]
[new, Array2DRowRealMatrix, (, data, ,, false, )]
[data]
[false]
[jv, ., transpose, (, ), ., multiply, (, jv, )]
[jv, ., transpose, (, )]
[jv]
[jv]
[singularValues, [, 0, ]]
[singularValues]
[0]
[singularValues, [, 0, ], /, singularValues, [, n, -, 1, ]]
[singularValues, [, 0, ]]
[singularValues]
[0]
[singularValues, [, n, -, 1, ]]
[singularValues]
[n, -, 1]
[n]
[1]
[singularValues, [, n, -, 1, ], /, singularValues, [, 0, ]]
[singularValues, [, n, -, 1, ]]
[singularValues]
[n, -, 1]
[n]
[1]
[singularValues, [, 0, ]]
[singularValues]
[0]
[0]
[0]
[i, <, singularValues, ., length]
[i]
[singularValues, ., length]
[singularValues]
[i, ++]
[i]
[singularValues, [, i, ], >, tol]
[singularValues, [, i, ]]
[singularValues]
[i]
[tol]
[r, ++]
[r]
[r]
[new, Solver, (, singularValues, ,, getUT, (, ), ,, getV, (, ), ,, getRank, (, ), ==, m, ,, tol, )]
[singularValues]
[getUT, (, )]
[getV, (, )]
[getRank, (, ), ==, m]
[getRank, (, )]
[m]
[tol]
[uT, ., getData, (, )]
[uT]
[0]
[i, <, singularValues, ., length]
[i]
[singularValues, ., length]
[singularValues]
[++, i]
[i]
[singularValues, [, i, ], >, tol]
[singularValues, [, i, ]]
[singularValues]
[i]
[tol]
[a]
[1, /, singularValues, [, i, ]]
[1]
[singularValues, [, i, ]]
[singularValues]
[i]
[a]
[0]
[suT, [, i, ]]
[suT]
[i]
[0]
[j, <, suTi, ., length]
[j]
[suTi, ., length]
[suTi]
[++, j]
[j]
[suTi, [, j, ]]
[suTi]
[j]
[a]
[pseudoInverse]
[v, ., multiply, (, new, Array2DRowRealMatrix, (, suT, ,, false, ), )]
[v]
[new, Array2DRowRealMatrix, (, suT, ,, false, )]
[suT]
[false]
[this, ., nonSingular]
[this]
[nonSingular]
[pseudoInverse, ., operate, (, b, )]
[pseudoInverse]
[b]
[pseudoInverse, ., multiply, (, b, )]
[pseudoInverse]
[b]
[nonSingular]
[pseudoInverse]
