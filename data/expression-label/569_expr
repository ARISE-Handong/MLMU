[100]
[1e-10]
[1e-10]
[1e-10]
[Precision, ., SAFE_MIN]
[Precision]
[100]
[checker]
[1e-10]
[1e-10]
[1e-10]
[Precision, ., SAFE_MIN]
[Precision]
[checker]
[this, ., initialStepBoundFactor]
[this]
[initialStepBoundFactor]
[this, ., costRelativeTolerance]
[this]
[costRelativeTolerance]
[this, ., parRelativeTolerance]
[this]
[parRelativeTolerance]
[this, ., orthoTolerance]
[this]
[orthoTolerance]
[this, ., qrRankingThreshold]
[this]
[threshold]
[100]
[costRelativeTolerance]
[parRelativeTolerance]
[orthoTolerance]
[Precision, ., SAFE_MIN]
[Precision]
[null]
[this, ., initialStepBoundFactor]
[this]
[initialStepBoundFactor]
[this, ., costRelativeTolerance]
[this]
[costRelativeTolerance]
[this, ., parRelativeTolerance]
[this]
[parRelativeTolerance]
[this, ., orthoTolerance]
[this]
[orthoTolerance]
[this, ., qrRankingThreshold]
[this]
[threshold]
[getTarget, (, ), ., length]
[getTarget, (, )]
[getStartPoint, (, )]
[currentPoint, ., length]
[currentPoint]
[solvedCols]
[FastMath, ., min, (, nR, ,, nC, )]
[FastMath]
[nR]
[nC]
[diagR]
[new, double, [, nC, ]]
[nC]
[jacNorm]
[new, double, [, nC, ]]
[nC]
[beta]
[new, double, [, nC, ]]
[nC]
[permutation]
[new, int, [, nC, ]]
[nC]
[lmDir]
[new, double, [, nC, ]]
[nC]
[0]
[0]
[new, double, [, nC, ]]
[nC]
[new, double, [, nC, ]]
[nC]
[new, double, [, nR, ]]
[nR]
[new, double, [, nR, ]]
[nR]
[new, double, [, nR, ]]
[nR]
[new, double, [, nC, ]]
[nC]
[new, double, [, nC, ]]
[nC]
[new, double, [, nC, ]]
[nC]
[getWeightSquareRoot, (, )]
[computeObjectiveValue, (, currentPoint, )]
[currentPoint]
[computeResiduals, (, currentObjective, )]
[currentObjective]
[new, PointVectorValuePair, (, currentPoint, ,, currentObjective, )]
[currentPoint]
[currentObjective]
[computeCost, (, currentResiduals, )]
[currentResiduals]
[lmPar]
[0]
[true]
[0]
[getConvergenceChecker, (, )]
[true]
[++, iter]
[iter]
[current]
[qrDecomposition, (, computeWeightedJacobian, (, currentPoint, ), )]
[computeWeightedJacobian, (, currentPoint, )]
[currentPoint]
[weightedResidual]
[weightMatrixSqrt, ., operate, (, currentResiduals, )]
[weightMatrixSqrt]
[currentResiduals]
[0]
[i, <, nR]
[i]
[nR]
[i, ++]
[i]
[qtf, [, i, ]]
[qtf]
[i]
[weightedResidual, [, i, ]]
[weightedResidual]
[i]
[qTy, (, qtf, )]
[qtf]
[0]
[k, <, solvedCols]
[k]
[solvedCols]
[++, k]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[weightedJacobian, [, k, ], [, pk, ]]
[weightedJacobian, [, k, ]]
[weightedJacobian]
[k]
[pk]
[diagR, [, pk, ]]
[diagR]
[pk]
[firstIteration]
[xNorm]
[0]
[0]
[k, <, nC]
[k]
[nC]
[++, k]
[k]
[jacNorm, [, k, ]]
[jacNorm]
[k]
[dk, ==, 0]
[dk]
[0]
[dk]
[1.0]
[dk, *, currentPoint, [, k, ]]
[dk]
[currentPoint, [, k, ]]
[currentPoint]
[k]
[xNorm]
[xk, *, xk]
[xk]
[xk]
[diag, [, k, ]]
[diag]
[k]
[dk]
[xNorm]
[FastMath, ., sqrt, (, xNorm, )]
[FastMath]
[xNorm]
[delta]
[(, xNorm, ==, 0, ), ?, initialStepBoundFactor, :, (, initialStepBoundFactor, *, xNorm, )]
[(, xNorm, ==, 0, )]
[xNorm, ==, 0]
[xNorm]
[0]
[initialStepBoundFactor]
[(, initialStepBoundFactor, *, xNorm, )]
[initialStepBoundFactor, *, xNorm]
[initialStepBoundFactor]
[xNorm]
[0]
[currentCost, !=, 0]
[currentCost]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[jacNorm, [, pj, ]]
[jacNorm]
[pj]
[s, !=, 0]
[s]
[0]
[0]
[0]
[i, <=, j]
[i]
[j]
[++, i]
[i]
[sum]
[weightedJacobian, [, i, ], [, pj, ], *, qtf, [, i, ]]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[qtf, [, i, ]]
[qtf]
[i]
[maxCosine]
[FastMath, ., max, (, maxCosine, ,, FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, ), )]
[FastMath]
[maxCosine]
[FastMath, ., abs, (, sum, ), /, (, s, *, currentCost, )]
[FastMath, ., abs, (, sum, )]
[FastMath]
[sum]
[(, s, *, currentCost, )]
[s, *, currentCost]
[s]
[currentCost]
[maxCosine, <=, orthoTolerance]
[maxCosine]
[orthoTolerance]
[setCost, (, currentCost, )]
[currentCost]
[point]
[current, ., getPoint, (, )]
[current]
[current]
[0]
[j, <, nC]
[j]
[nC]
[++, j]
[j]
[diag, [, j, ]]
[diag]
[j]
[FastMath, ., max, (, diag, [, j, ], ,, jacNorm, [, j, ], )]
[FastMath]
[diag, [, j, ]]
[diag]
[j]
[jacNorm, [, j, ]]
[jacNorm]
[j]
[0]
[ratio, <, 1.0e-4]
[ratio]
[1.0e-4]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[oldX, [, pj, ]]
[oldX]
[pj]
[currentPoint, [, pj, ]]
[currentPoint]
[pj]
[currentCost]
[weightedResidual]
[weightedResidual]
[oldRes]
[oldRes]
[tmpVec]
[tmpVec]
[currentObjective]
[currentObjective]
[oldObj]
[oldObj]
[tmpVec]
[determineLMParameter, (, qtf, ,, delta, ,, diag, ,, work1, ,, work2, ,, work3, )]
[qtf]
[delta]
[diag]
[work1]
[work2]
[work3]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[-, lmDir, [, pj, ]]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[currentPoint, [, pj, ]]
[currentPoint]
[pj]
[oldX, [, pj, ], +, lmDir, [, pj, ]]
[oldX, [, pj, ]]
[oldX]
[pj]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[diag, [, pj, ], *, lmDir, [, pj, ]]
[diag, [, pj, ]]
[diag]
[pj]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[lmNorm]
[s, *, s]
[s]
[s]
[lmNorm]
[FastMath, ., sqrt, (, lmNorm, )]
[FastMath]
[lmNorm]
[firstIteration]
[delta]
[FastMath, ., min, (, delta, ,, lmNorm, )]
[FastMath]
[delta]
[lmNorm]
[currentObjective]
[computeObjectiveValue, (, currentPoint, )]
[currentPoint]
[currentResiduals]
[computeResiduals, (, currentObjective, )]
[currentObjective]
[current]
[new, PointVectorValuePair, (, currentPoint, ,, currentObjective, )]
[currentPoint]
[currentObjective]
[currentCost]
[computeCost, (, currentResiduals, )]
[currentResiduals]
[-, 1.0]
[1.0]
[0.1, *, currentCost, <, previousCost]
[0.1, *, currentCost]
[0.1]
[currentCost]
[previousCost]
[currentCost, /, previousCost]
[currentCost]
[previousCost]
[actRed]
[1.0, -, r, *, r]
[1.0]
[r, *, r]
[r]
[r]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[work1, [, j, ]]
[work1]
[j]
[0]
[0]
[i, <=, j]
[i]
[j]
[++, i]
[i]
[work1, [, i, ]]
[work1]
[i]
[weightedJacobian, [, i, ], [, pj, ], *, dirJ]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[dirJ]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[coeff1]
[work1, [, j, ], *, work1, [, j, ]]
[work1, [, j, ]]
[work1]
[j]
[work1, [, j, ]]
[work1]
[j]
[previousCost, *, previousCost]
[previousCost]
[previousCost]
[coeff1]
[coeff1, /, pc2]
[coeff1]
[pc2]
[lmPar, *, lmNorm, *, lmNorm, /, pc2]
[lmPar, *, lmNorm, *, lmNorm]
[lmPar, *, lmNorm]
[lmPar]
[lmNorm]
[lmNorm]
[pc2]
[coeff1, +, 2, *, coeff2]
[coeff1]
[2, *, coeff2]
[2]
[coeff2]
[-, (, coeff1, +, coeff2, )]
[(, coeff1, +, coeff2, )]
[coeff1, +, coeff2]
[coeff1]
[coeff2]
[ratio]
[(, preRed, ==, 0, ), ?, 0, :, (, actRed, /, preRed, )]
[(, preRed, ==, 0, )]
[preRed, ==, 0]
[preRed]
[0]
[0]
[(, actRed, /, preRed, )]
[actRed, /, preRed]
[actRed]
[preRed]
[ratio, <=, 0.25]
[ratio]
[0.25]
[(, actRed, <, 0, ), ?, (, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), ), :, 0.5]
[(, actRed, <, 0, )]
[actRed, <, 0]
[actRed]
[0]
[(, 0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, ), )]
[0.5, *, dirDer, /, (, dirDer, +, 0.5, *, actRed, )]
[0.5, *, dirDer]
[0.5]
[dirDer]
[(, dirDer, +, 0.5, *, actRed, )]
[dirDer, +, 0.5, *, actRed]
[dirDer]
[0.5, *, actRed]
[0.5]
[actRed]
[0.5]
[(, 0.1, *, currentCost, >=, previousCost, ), ||, (, tmp, <, 0.1, )]
[(, 0.1, *, currentCost, >=, previousCost, )]
[0.1, *, currentCost, >=, previousCost]
[0.1, *, currentCost]
[0.1]
[currentCost]
[previousCost]
[(, tmp, <, 0.1, )]
[tmp, <, 0.1]
[tmp]
[0.1]
[tmp]
[0.1]
[delta]
[tmp, *, FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, )]
[tmp]
[FastMath, ., min, (, delta, ,, 10.0, *, lmNorm, )]
[FastMath]
[delta]
[10.0, *, lmNorm]
[10.0]
[lmNorm]
[lmPar]
[tmp]
[(, lmPar, ==, 0, ), ||, (, ratio, >=, 0.75, )]
[(, lmPar, ==, 0, )]
[lmPar, ==, 0]
[lmPar]
[0]
[(, ratio, >=, 0.75, )]
[ratio, >=, 0.75]
[ratio]
[0.75]
[delta]
[2, *, lmNorm]
[2]
[lmNorm]
[lmPar]
[0.5]
[ratio, >=, 1.0e-4]
[ratio]
[1.0e-4]
[firstIteration]
[false]
[xNorm]
[0]
[0]
[k, <, nC]
[k]
[nC]
[++, k]
[k]
[diag, [, k, ], *, currentPoint, [, k, ]]
[diag, [, k, ]]
[diag]
[k]
[currentPoint, [, k, ]]
[currentPoint]
[k]
[xNorm]
[xK, *, xK]
[xK]
[xK]
[xNorm]
[FastMath, ., sqrt, (, xNorm, )]
[FastMath]
[xNorm]
[checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, )]
[checker, !=, null]
[checker]
[null]
[checker, ., converged, (, iter, ,, previous, ,, current, )]
[checker]
[iter]
[previous]
[current]
[setCost, (, currentCost, )]
[currentCost]
[point]
[current, ., getPoint, (, )]
[current]
[current]
[currentCost]
[previousCost]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[currentPoint, [, pj, ]]
[currentPoint]
[pj]
[oldX, [, pj, ]]
[oldX]
[pj]
[tmpVec]
[weightedResidual]
[weightedResidual]
[oldRes]
[oldRes]
[tmpVec]
[tmpVec]
[currentObjective]
[currentObjective]
[oldObj]
[oldObj]
[tmpVec]
[current]
[new, PointVectorValuePair, (, currentPoint, ,, currentObjective, )]
[currentPoint]
[currentObjective]
[(, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, ), ||, delta, <=, parRelativeTolerance, *, xNorm]
[(, FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0, )]
[FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance, &&, ratio, <=, 2.0]
[FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance, &&, preRed, <=, costRelativeTolerance]
[FastMath, ., abs, (, actRed, ), <=, costRelativeTolerance]
[FastMath, ., abs, (, actRed, )]
[FastMath]
[actRed]
[costRelativeTolerance]
[preRed, <=, costRelativeTolerance]
[preRed]
[costRelativeTolerance]
[ratio, <=, 2.0]
[ratio]
[2.0]
[delta, <=, parRelativeTolerance, *, xNorm]
[delta]
[parRelativeTolerance, *, xNorm]
[parRelativeTolerance]
[xNorm]
[setCost, (, currentCost, )]
[currentCost]
[point]
[current, ., getPoint, (, )]
[current]
[current]
[(, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, ), &&, (, ratio, <=, 2.0, )]
[(, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, ), &&, (, preRed, <=, 2.2204e-16, )]
[(, FastMath, ., abs, (, actRed, ), <=, 2.2204e-16, )]
[FastMath, ., abs, (, actRed, ), <=, 2.2204e-16]
[FastMath, ., abs, (, actRed, )]
[FastMath]
[actRed]
[2.2204e-16]
[(, preRed, <=, 2.2204e-16, )]
[preRed, <=, 2.2204e-16]
[preRed]
[2.2204e-16]
[(, ratio, <=, 2.0, )]
[ratio, <=, 2.0]
[ratio]
[2.0]
[new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE, ,, costRelativeTolerance, )]
[LocalizedFormats, ., TOO_SMALL_COST_RELATIVE_TOLERANCE]
[LocalizedFormats]
[costRelativeTolerance]
[delta, <=, 2.2204e-16, *, xNorm]
[delta]
[2.2204e-16, *, xNorm]
[2.2204e-16]
[xNorm]
[new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, ,, parRelativeTolerance, )]
[LocalizedFormats, ., TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE]
[LocalizedFormats]
[parRelativeTolerance]
[maxCosine, <=, 2.2204e-16]
[maxCosine]
[2.2204e-16]
[new, ConvergenceException, (, LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE, ,, orthoTolerance, )]
[LocalizedFormats, ., TOO_SMALL_ORTHOGONALITY_TOLERANCE]
[LocalizedFormats]
[orthoTolerance]
[weightedJacobian, [, 0, ], ., length]
[weightedJacobian, [, 0, ]]
[weightedJacobian]
[0]
[0]
[j, <, rank]
[j]
[rank]
[++, j]
[j]
[lmDir, [, permutation, [, j, ], ]]
[lmDir]
[permutation, [, j, ]]
[permutation]
[j]
[qy, [, j, ]]
[qy]
[j]
[rank]
[j, <, nC]
[j]
[nC]
[++, j]
[j]
[lmDir, [, permutation, [, j, ], ]]
[lmDir]
[permutation, [, j, ]]
[permutation]
[j]
[0]
[rank, -, 1]
[rank]
[1]
[k, >=, 0]
[k]
[0]
[--, k]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[lmDir, [, pk, ], /, diagR, [, pk, ]]
[lmDir, [, pk, ]]
[lmDir]
[pk]
[diagR, [, pk, ]]
[diagR]
[pk]
[0]
[i, <, k]
[i]
[k]
[++, i]
[i]
[lmDir, [, permutation, [, i, ], ]]
[lmDir]
[permutation, [, i, ]]
[permutation]
[i]
[ypk, *, weightedJacobian, [, i, ], [, pk, ]]
[ypk]
[weightedJacobian, [, i, ], [, pk, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pk]
[lmDir, [, pk, ]]
[lmDir]
[pk]
[ypk]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[diag, [, pj, ], *, lmDir, [, pj, ]]
[diag, [, pj, ]]
[diag]
[pj]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[work1, [, pj, ]]
[work1]
[pj]
[s]
[dxNorm]
[s, *, s]
[s]
[s]
[dxNorm]
[FastMath, ., sqrt, (, dxNorm, )]
[FastMath]
[dxNorm]
[dxNorm, -, delta]
[dxNorm]
[delta]
[fp, <=, 0.1, *, delta]
[fp]
[0.1, *, delta]
[0.1]
[delta]
[lmPar]
[0]
[0]
[rank, ==, solvedCols]
[rank]
[solvedCols]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[work1, [, pj, ]]
[work1]
[pj]
[diag, [, pj, ], /, dxNorm]
[diag, [, pj, ]]
[diag]
[pj]
[dxNorm]
[sum2]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[0]
[0]
[i, <, j]
[i]
[j]
[++, i]
[i]
[sum]
[weightedJacobian, [, i, ], [, pj, ], *, work1, [, permutation, [, i, ], ]]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[work1, [, permutation, [, i, ], ]]
[work1]
[permutation, [, i, ]]
[permutation]
[i]
[(, work1, [, pj, ], -, sum, ), /, diagR, [, pj, ]]
[(, work1, [, pj, ], -, sum, )]
[work1, [, pj, ], -, sum]
[work1, [, pj, ]]
[work1]
[pj]
[sum]
[diagR, [, pj, ]]
[diagR]
[pj]
[work1, [, pj, ]]
[work1]
[pj]
[s]
[sum2]
[s, *, s]
[s]
[s]
[parl]
[fp, /, (, delta, *, sum2, )]
[fp]
[(, delta, *, sum2, )]
[delta, *, sum2]
[delta]
[sum2]
[sum2]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[0]
[0]
[i, <=, j]
[i]
[j]
[++, i]
[i]
[sum]
[weightedJacobian, [, i, ], [, pj, ], *, qy, [, i, ]]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[qy, [, i, ]]
[qy]
[i]
[sum]
[diag, [, pj, ]]
[diag]
[pj]
[sum2]
[sum, *, sum]
[sum]
[sum]
[FastMath, ., sqrt, (, sum2, )]
[FastMath]
[sum2]
[gNorm, /, delta]
[gNorm]
[delta]
[paru, ==, 0]
[paru]
[0]
[paru]
[2.2251e-308, /, FastMath, ., min, (, delta, ,, 0.1, )]
[2.2251e-308]
[FastMath, ., min, (, delta, ,, 0.1, )]
[FastMath]
[delta]
[0.1]
[lmPar]
[FastMath, ., min, (, paru, ,, FastMath, ., max, (, lmPar, ,, parl, ), )]
[FastMath]
[paru]
[FastMath, ., max, (, lmPar, ,, parl, )]
[FastMath]
[lmPar]
[parl]
[lmPar, ==, 0]
[lmPar]
[0]
[lmPar]
[gNorm, /, dxNorm]
[gNorm]
[dxNorm]
[10]
[countdown, >=, 0]
[countdown]
[0]
[--, countdown]
[countdown]
[lmPar, ==, 0]
[lmPar]
[0]
[lmPar]
[FastMath, ., max, (, 2.2251e-308, ,, 0.001, *, paru, )]
[FastMath]
[2.2251e-308]
[0.001, *, paru]
[0.001]
[paru]
[FastMath, ., sqrt, (, lmPar, )]
[FastMath]
[lmPar]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[work1, [, pj, ]]
[work1]
[pj]
[sPar, *, diag, [, pj, ]]
[sPar]
[diag, [, pj, ]]
[diag]
[pj]
[determineLMDirection, (, qy, ,, work1, ,, work2, ,, work3, )]
[qy]
[work1]
[work2]
[work3]
[dxNorm]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[diag, [, pj, ], *, lmDir, [, pj, ]]
[diag, [, pj, ]]
[diag]
[pj]
[lmDir, [, pj, ]]
[lmDir]
[pj]
[work3, [, pj, ]]
[work3]
[pj]
[s]
[dxNorm]
[s, *, s]
[s]
[s]
[dxNorm]
[FastMath, ., sqrt, (, dxNorm, )]
[FastMath]
[dxNorm]
[fp]
[fp]
[dxNorm, -, delta]
[dxNorm]
[delta]
[(, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, ), ||, (, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), )]
[(, FastMath, ., abs, (, fp, ), <=, 0.1, *, delta, )]
[FastMath, ., abs, (, fp, ), <=, 0.1, *, delta]
[FastMath, ., abs, (, fp, )]
[FastMath]
[fp]
[0.1, *, delta]
[0.1]
[delta]
[(, (, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, ), )]
[(, parl, ==, 0, ), &&, (, fp, <=, previousFP, ), &&, (, previousFP, <, 0, )]
[(, parl, ==, 0, ), &&, (, fp, <=, previousFP, )]
[(, parl, ==, 0, )]
[parl, ==, 0]
[parl]
[0]
[(, fp, <=, previousFP, )]
[fp, <=, previousFP]
[fp]
[previousFP]
[(, previousFP, <, 0, )]
[previousFP, <, 0]
[previousFP]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[work1, [, pj, ]]
[work1]
[pj]
[work3, [, pj, ], *, diag, [, pj, ], /, dxNorm]
[work3, [, pj, ], *, diag, [, pj, ]]
[work3, [, pj, ]]
[work3]
[pj]
[diag, [, pj, ]]
[diag]
[pj]
[dxNorm]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[work1, [, pj, ]]
[work1]
[pj]
[work2, [, j, ]]
[work2]
[j]
[work1, [, pj, ]]
[work1]
[pj]
[j, +, 1]
[j]
[1]
[i, <, solvedCols]
[i]
[solvedCols]
[++, i]
[i]
[work1, [, permutation, [, i, ], ]]
[work1]
[permutation, [, i, ]]
[permutation]
[i]
[weightedJacobian, [, i, ], [, pj, ], *, tmp]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[tmp]
[sum2]
[0]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[work1, [, permutation, [, j, ], ]]
[work1]
[permutation, [, j, ]]
[permutation]
[j]
[sum2]
[s, *, s]
[s]
[s]
[fp, /, (, delta, *, sum2, )]
[fp]
[(, delta, *, sum2, )]
[delta, *, sum2]
[delta]
[sum2]
[fp, >, 0]
[fp]
[0]
[parl]
[FastMath, ., max, (, parl, ,, lmPar, )]
[FastMath]
[parl]
[lmPar]
[fp, <, 0]
[fp]
[0]
[paru]
[FastMath, ., min, (, paru, ,, lmPar, )]
[FastMath]
[paru]
[lmPar]
[lmPar]
[FastMath, ., max, (, parl, ,, lmPar, +, correction, )]
[FastMath]
[parl]
[lmPar, +, correction]
[lmPar]
[correction]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[j, +, 1]
[j]
[1]
[i, <, solvedCols]
[i]
[solvedCols]
[++, i]
[i]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[weightedJacobian, [, j, ], [, permutation, [, i, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, i, ]]
[permutation]
[i]
[lmDir, [, j, ]]
[lmDir]
[j]
[diagR, [, pj, ]]
[diagR]
[pj]
[work, [, j, ]]
[work]
[j]
[qy, [, j, ]]
[qy]
[j]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[diag, [, pj, ]]
[diag]
[pj]
[dpj, !=, 0]
[dpj]
[0]
[Arrays, ., fill, (, lmDiag, ,, j, +, 1, ,, lmDiag, ., length, ,, 0, )]
[Arrays]
[lmDiag]
[j, +, 1]
[j]
[1]
[lmDiag, ., length]
[lmDiag]
[0]
[lmDiag, [, j, ]]
[lmDiag]
[j]
[dpj]
[0]
[j]
[k, <, solvedCols]
[k]
[solvedCols]
[++, k]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[lmDiag, [, k, ], !=, 0]
[lmDiag, [, k, ]]
[lmDiag]
[k]
[0]
[weightedJacobian, [, k, ], [, pk, ]]
[weightedJacobian, [, k, ]]
[weightedJacobian]
[k]
[pk]
[FastMath, ., abs, (, rkk, ), <, FastMath, ., abs, (, lmDiag, [, k, ], )]
[FastMath, ., abs, (, rkk, )]
[FastMath]
[rkk]
[FastMath, ., abs, (, lmDiag, [, k, ], )]
[FastMath]
[lmDiag, [, k, ]]
[lmDiag]
[k]
[rkk, /, lmDiag, [, k, ]]
[rkk]
[lmDiag, [, k, ]]
[lmDiag]
[k]
[sin]
[1.0, /, FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, )]
[1.0]
[FastMath, ., sqrt, (, 1.0, +, cotan, *, cotan, )]
[FastMath]
[1.0, +, cotan, *, cotan]
[1.0]
[cotan, *, cotan]
[cotan]
[cotan]
[cos]
[sin, *, cotan]
[sin]
[cotan]
[lmDiag, [, k, ], /, rkk]
[lmDiag, [, k, ]]
[lmDiag]
[k]
[rkk]
[cos]
[1.0, /, FastMath, ., sqrt, (, 1.0, +, tan, *, tan, )]
[1.0]
[FastMath, ., sqrt, (, 1.0, +, tan, *, tan, )]
[FastMath]
[1.0, +, tan, *, tan]
[1.0]
[tan, *, tan]
[tan]
[tan]
[sin]
[cos, *, tan]
[cos]
[tan]
[weightedJacobian, [, k, ], [, pk, ]]
[weightedJacobian, [, k, ]]
[weightedJacobian]
[k]
[pk]
[cos, *, rkk, +, sin, *, lmDiag, [, k, ]]
[cos, *, rkk]
[cos]
[rkk]
[sin, *, lmDiag, [, k, ]]
[sin]
[lmDiag, [, k, ]]
[lmDiag]
[k]
[cos, *, work, [, k, ], +, sin, *, qtbpj]
[cos, *, work, [, k, ]]
[cos]
[work, [, k, ]]
[work]
[k]
[sin, *, qtbpj]
[sin]
[qtbpj]
[qtbpj]
[-, sin, *, work, [, k, ], +, cos, *, qtbpj]
[-, sin, *, work, [, k, ]]
[-, sin]
[sin]
[work, [, k, ]]
[work]
[k]
[cos, *, qtbpj]
[cos]
[qtbpj]
[work, [, k, ]]
[work]
[k]
[temp]
[k, +, 1]
[k]
[1]
[i, <, solvedCols]
[i]
[solvedCols]
[++, i]
[i]
[weightedJacobian, [, i, ], [, pk, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pk]
[cos, *, rik, +, sin, *, lmDiag, [, i, ]]
[cos, *, rik]
[cos]
[rik]
[sin, *, lmDiag, [, i, ]]
[sin]
[lmDiag, [, i, ]]
[lmDiag]
[i]
[lmDiag, [, i, ]]
[lmDiag]
[i]
[-, sin, *, rik, +, cos, *, lmDiag, [, i, ]]
[-, sin, *, rik]
[-, sin]
[sin]
[rik]
[cos, *, lmDiag, [, i, ]]
[cos]
[lmDiag, [, i, ]]
[lmDiag]
[i]
[weightedJacobian, [, i, ], [, pk, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pk]
[temp2]
[lmDiag, [, j, ]]
[lmDiag]
[j]
[weightedJacobian, [, j, ], [, permutation, [, j, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[weightedJacobian, [, j, ], [, permutation, [, j, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[lmDir, [, j, ]]
[lmDir]
[j]
[solvedCols]
[0]
[j, <, solvedCols]
[j]
[solvedCols]
[++, j]
[j]
[(, lmDiag, [, j, ], ==, 0, ), &&, (, nSing, ==, solvedCols, )]
[(, lmDiag, [, j, ], ==, 0, )]
[lmDiag, [, j, ], ==, 0]
[lmDiag, [, j, ]]
[lmDiag]
[j]
[0]
[(, nSing, ==, solvedCols, )]
[nSing, ==, solvedCols]
[nSing]
[solvedCols]
[nSing]
[j]
[nSing, <, solvedCols]
[nSing]
[solvedCols]
[work, [, j, ]]
[work]
[j]
[0]
[nSing, >, 0]
[nSing]
[0]
[nSing, -, 1]
[nSing]
[1]
[j, >=, 0]
[j]
[0]
[--, j]
[j]
[permutation, [, j, ]]
[permutation]
[j]
[0]
[j, +, 1]
[j]
[1]
[i, <, nSing]
[i]
[nSing]
[++, i]
[i]
[sum]
[weightedJacobian, [, i, ], [, pj, ], *, work, [, i, ]]
[weightedJacobian, [, i, ], [, pj, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pj]
[work, [, i, ]]
[work]
[i]
[work, [, j, ]]
[work]
[j]
[(, work, [, j, ], -, sum, ), /, lmDiag, [, j, ]]
[(, work, [, j, ], -, sum, )]
[work, [, j, ], -, sum]
[work, [, j, ]]
[work]
[j]
[sum]
[lmDiag, [, j, ]]
[lmDiag]
[j]
[0]
[j, <, lmDir, ., length]
[j]
[lmDir, ., length]
[lmDir]
[++, j]
[j]
[lmDir, [, permutation, [, j, ], ]]
[lmDir]
[permutation, [, j, ]]
[permutation]
[j]
[work, [, j, ]]
[work]
[j]
[weightedJacobian]
[jacobian, ., scalarMultiply, (, -, 1, ), ., getData, (, )]
[jacobian, ., scalarMultiply, (, -, 1, )]
[jacobian]
[-, 1]
[1]
[weightedJacobian, ., length]
[weightedJacobian]
[weightedJacobian, [, 0, ], ., length]
[weightedJacobian, [, 0, ]]
[weightedJacobian]
[0]
[0]
[k, <, nC]
[k]
[nC]
[++, k]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[k]
[0]
[0]
[i, <, nR]
[i]
[nR]
[++, i]
[i]
[weightedJacobian, [, i, ], [, k, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[k]
[norm2]
[akk, *, akk]
[akk]
[akk]
[jacNorm, [, k, ]]
[jacNorm]
[k]
[FastMath, ., sqrt, (, norm2, )]
[FastMath]
[norm2]
[0]
[k, <, nC]
[k]
[nC]
[++, k]
[k]
[-, 1]
[1]
[Double, ., NEGATIVE_INFINITY]
[Double]
[k]
[i, <, nC]
[i]
[nC]
[++, i]
[i]
[0]
[k]
[j, <, nR]
[j]
[nR]
[++, j]
[j]
[weightedJacobian, [, j, ], [, permutation, [, i, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, i, ]]
[permutation]
[i]
[norm2]
[aki, *, aki]
[aki]
[aki]
[Double, ., isInfinite, (, norm2, ), ||, Double, ., isNaN, (, norm2, )]
[Double, ., isInfinite, (, norm2, )]
[Double]
[norm2]
[Double, ., isNaN, (, norm2, )]
[Double]
[norm2]
[new, ConvergenceException, (, LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN, ,, nR, ,, nC, )]
[LocalizedFormats, ., UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN]
[LocalizedFormats]
[nR]
[nC]
[norm2, >, ak2]
[norm2]
[ak2]
[nextColumn]
[i]
[ak2]
[norm2]
[ak2, <=, qrRankingThreshold]
[ak2]
[qrRankingThreshold]
[rank]
[k]
[permutation, [, nextColumn, ]]
[permutation]
[nextColumn]
[permutation, [, nextColumn, ]]
[permutation]
[nextColumn]
[permutation, [, k, ]]
[permutation]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[pk]
[weightedJacobian, [, k, ], [, pk, ]]
[weightedJacobian, [, k, ]]
[weightedJacobian]
[k]
[pk]
[(, akk, >, 0, ), ?, -, FastMath, ., sqrt, (, ak2, ), :, FastMath, ., sqrt, (, ak2, )]
[(, akk, >, 0, )]
[akk, >, 0]
[akk]
[0]
[-, FastMath, ., sqrt, (, ak2, )]
[FastMath, ., sqrt, (, ak2, )]
[FastMath]
[ak2]
[FastMath, ., sqrt, (, ak2, )]
[FastMath]
[ak2]
[1.0, /, (, ak2, -, akk, *, alpha, )]
[1.0]
[(, ak2, -, akk, *, alpha, )]
[ak2, -, akk, *, alpha]
[ak2]
[akk, *, alpha]
[akk]
[alpha]
[beta, [, pk, ]]
[beta]
[pk]
[betak]
[diagR, [, pk, ]]
[diagR]
[pk]
[alpha]
[weightedJacobian, [, k, ], [, pk, ]]
[weightedJacobian, [, k, ]]
[weightedJacobian]
[k]
[pk]
[alpha]
[nC, -, 1, -, k]
[nC, -, 1]
[nC]
[1]
[k]
[dk, >, 0]
[dk]
[0]
[--, dk]
[dk]
[0]
[k]
[j, <, nR]
[j]
[nR]
[++, j]
[j]
[gamma]
[weightedJacobian, [, j, ], [, pk, ], *, weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ]]
[weightedJacobian, [, j, ], [, pk, ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[pk]
[weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, k, +, dk, ]]
[permutation]
[k, +, dk]
[k]
[dk]
[gamma]
[betak]
[k]
[j, <, nR]
[j]
[nR]
[++, j]
[j]
[weightedJacobian, [, j, ], [, permutation, [, k, +, dk, ], ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[permutation, [, k, +, dk, ]]
[permutation]
[k, +, dk]
[k]
[dk]
[gamma, *, weightedJacobian, [, j, ], [, pk, ]]
[gamma]
[weightedJacobian, [, j, ], [, pk, ]]
[weightedJacobian, [, j, ]]
[weightedJacobian]
[j]
[pk]
[rank]
[solvedCols]
[weightedJacobian, ., length]
[weightedJacobian]
[weightedJacobian, [, 0, ], ., length]
[weightedJacobian, [, 0, ]]
[weightedJacobian]
[0]
[0]
[k, <, nC]
[k]
[nC]
[++, k]
[k]
[permutation, [, k, ]]
[permutation]
[k]
[0]
[k]
[i, <, nR]
[i]
[nR]
[++, i]
[i]
[gamma]
[weightedJacobian, [, i, ], [, pk, ], *, y, [, i, ]]
[weightedJacobian, [, i, ], [, pk, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pk]
[y, [, i, ]]
[y]
[i]
[gamma]
[beta, [, pk, ]]
[beta]
[pk]
[k]
[i, <, nR]
[i]
[nR]
[++, i]
[i]
[y, [, i, ]]
[y]
[i]
[gamma, *, weightedJacobian, [, i, ], [, pk, ]]
[gamma]
[weightedJacobian, [, i, ], [, pk, ]]
[weightedJacobian, [, i, ]]
[weightedJacobian]
[i]
[pk]
