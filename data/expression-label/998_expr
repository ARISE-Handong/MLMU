[-, 7289292157229621901L]
[7289292157229621901L]
[unitType]
[multiple]
[DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, )]
[DateFormat]
[DateFormat, ., SHORT]
[DateFormat]
[unitType]
[multiple]
[unitType]
[multiple]
[formatter]
[DateTickUnit, ., getMillisecondCount, (, unitType, ,, multiple, )]
[DateTickUnit]
[unitType]
[multiple]
[formatter, ==, null]
[formatter]
[null]
[new, IllegalArgumentException, (, "Null 'formatter' argument.", )]
["Null 'formatter' argument."]
[multiple, <=, 0]
[multiple]
[0]
[new, IllegalArgumentException, (, "Requires 'multiple' > 0.", )]
["Requires 'multiple' > 0."]
[rollMultiple, <=, 0]
[rollMultiple]
[0]
[new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", )]
["Requires 'rollMultiple' > 0."]
[this, ., unitType]
[this]
[unitType]
[this, ., count]
[this]
[multiple]
[this, ., rollUnitType]
[this]
[rollUnitType]
[this, ., rollCount]
[this]
[rollMultiple]
[this, ., formatter]
[this]
[formatter]
[this, ., unitType]
[this]
[this, ., count]
[this]
[this, ., rollUnitType]
[this]
[this, ., rollCount]
[this]
[this, ., formatter, ., format, (, new, Date, (, (, long, ), milliseconds, ), )]
[this, ., formatter]
[this]
[new, Date, (, (, long, ), milliseconds, )]
[(, long, ), milliseconds]
[milliseconds]
[this, ., formatter, ., format, (, date, )]
[this, ., formatter]
[this]
[date]
[Calendar, ., getInstance, (, zone, )]
[Calendar]
[zone]
[calendar, ., setTime, (, base, )]
[calendar]
[base]
[calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, )]
[calendar]
[this, ., unitType, ., getCalendarField, (, )]
[this, ., unitType]
[this]
[this, ., count]
[this]
[calendar, ., getTime, (, )]
[calendar]
[rollDate, (, base, ,, TimeZone, ., getDefault, (, ), )]
[base]
[TimeZone, ., getDefault, (, )]
[TimeZone]
[Calendar, ., getInstance, (, zone, )]
[Calendar]
[zone]
[calendar, ., setTime, (, base, )]
[calendar]
[base]
[calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, )]
[calendar]
[this, ., rollUnitType, ., getCalendarField, (, )]
[this, ., rollUnitType]
[this]
[this, ., rollCount]
[this]
[calendar, ., getTime, (, )]
[calendar]
[this, ., unitType, ., getCalendarField, (, )]
[this, ., unitType]
[this]
[unit, ., equals, (, DateTickUnitType, ., YEAR, )]
[unit]
[DateTickUnitType, ., YEAR]
[DateTickUnitType]
[(, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count]
[(, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, )]
[365L, *, 24L, *, 60L, *, 60L, *, 1000L]
[365L, *, 24L, *, 60L, *, 60L]
[365L, *, 24L, *, 60L]
[365L, *, 24L]
[365L]
[24L]
[60L]
[60L]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., MONTH, )]
[unit]
[DateTickUnitType, ., MONTH]
[DateTickUnitType]
[(, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count]
[(, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, )]
[31L, *, 24L, *, 60L, *, 60L, *, 1000L]
[31L, *, 24L, *, 60L, *, 60L]
[31L, *, 24L, *, 60L]
[31L, *, 24L]
[31L]
[24L]
[60L]
[60L]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., DAY, )]
[unit]
[DateTickUnitType, ., DAY]
[DateTickUnitType]
[(, 24L, *, 60L, *, 60L, *, 1000L, ), *, count]
[(, 24L, *, 60L, *, 60L, *, 1000L, )]
[24L, *, 60L, *, 60L, *, 1000L]
[24L, *, 60L, *, 60L]
[24L, *, 60L]
[24L]
[60L]
[60L]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., HOUR, )]
[unit]
[DateTickUnitType, ., HOUR]
[DateTickUnitType]
[(, 60L, *, 60L, *, 1000L, ), *, count]
[(, 60L, *, 60L, *, 1000L, )]
[60L, *, 60L, *, 1000L]
[60L, *, 60L]
[60L]
[60L]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., MINUTE, )]
[unit]
[DateTickUnitType, ., MINUTE]
[DateTickUnitType]
[(, 60L, *, 1000L, ), *, count]
[(, 60L, *, 1000L, )]
[60L, *, 1000L]
[60L]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., SECOND, )]
[unit]
[DateTickUnitType, ., SECOND]
[DateTickUnitType]
[1000L, *, count]
[1000L]
[count]
[unit, ., equals, (, DateTickUnitType, ., MILLISECOND, )]
[unit]
[DateTickUnitType, ., MILLISECOND]
[DateTickUnitType]
[count]
[new, IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", )]
["The 'unit' argument has a ", +, "value that is not recognised."]
["The 'unit' argument has a "]
["value that is not recognised."]
[formatter, ==, null]
[formatter]
[null]
[DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, )]
[DateFormat]
[DateFormat, ., SHORT]
[DateFormat]
[formatter]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, DateTickUnit, )]
[(, obj, instanceof, DateTickUnit, )]
[obj, instanceof, DateTickUnit]
[obj]
[false]
[!, super, ., equals, (, obj, )]
[super, ., equals, (, obj, )]
[super]
[obj]
[false]
[(, DateTickUnit, ), obj]
[obj]
[!, (, this, ., unitType, ., equals, (, that, ., unitType, ), )]
[(, this, ., unitType, ., equals, (, that, ., unitType, ), )]
[this, ., unitType, ., equals, (, that, ., unitType, )]
[this, ., unitType]
[this]
[that, ., unitType]
[that]
[false]
[this, ., count, !=, that, ., count]
[this, ., count]
[this]
[that, ., count]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter, )]
[ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter, )]
[ObjectUtilities]
[this, ., formatter]
[this]
[that, ., formatter]
[that]
[false]
[true]
[19]
[result]
[37, *, result, +, this, ., unitType, ., hashCode, (, )]
[37, *, result]
[37]
[result]
[this, ., unitType, ., hashCode, (, )]
[this, ., unitType]
[this]
[result]
[37, *, result, +, this, ., count]
[37, *, result]
[37]
[result]
[this, ., count]
[this]
[result]
[37, *, result, +, this, ., formatter, ., hashCode, (, )]
[37, *, result]
[37]
[result]
[this, ., formatter, ., hashCode, (, )]
[this, ., formatter]
[this]
[result]
["DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", ", +, this, ., count, +, "]"]
["DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", ", +, this, ., count]
["DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", "]
["DateTickUnit[", +, this, ., unitType, ., toString, (, )]
["DateTickUnit["]
[this, ., unitType, ., toString, (, )]
[this, ., unitType]
[this]
[", "]
[this, ., count]
[this]
["]"]
