[-, 4670676796862967187L]
[4670676796862967187L]
[n, <=, 0]
[n]
[0]
[new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, )]
[LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES]
[LocalizedFormats]
[n]
[this, ., n]
[this]
[n]
[this, ., cdf, (, d, ,, false, )]
[this]
[d]
[false]
[this, ., cdf, (, d, ,, true, )]
[this]
[d]
[true]
[1, /, (, (, double, ), n, )]
[1]
[(, (, double, ), n, )]
[(, double, ), n]
[n]
[0.5, *, ninv]
[0.5]
[ninv]
[d, <=, ninvhalf]
[d]
[ninvhalf]
[0]
[ninvhalf, <, d, &&, d, <=, ninv]
[ninvhalf, <, d]
[ninvhalf]
[d]
[d, <=, ninv]
[d]
[ninv]
[1]
[2, *, d, -, ninv]
[2, *, d]
[2]
[d]
[ninv]
[1]
[i, <=, n]
[i]
[n]
[++, i]
[i]
[res]
[i, *, f]
[i]
[f]
[res]
[1, -, ninv, <=, d, &&, d, <, 1]
[1, -, ninv, <=, d]
[1, -, ninv]
[1]
[ninv]
[d]
[d, <, 1]
[d]
[1]
[1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, )]
[1]
[2, *, Math, ., pow, (, 1, -, d, ,, n, )]
[2]
[Math, ., pow, (, 1, -, d, ,, n, )]
[Math]
[1, -, d]
[1]
[d]
[n]
[1, <=, d]
[1]
[d]
[1]
[exact, ?, exactK, (, d, ), :, roundedK, (, d, )]
[exact]
[exactK, (, d, )]
[d]
[roundedK, (, d, )]
[d]
[(, int, ), Math, ., ceil, (, n, *, d, )]
[Math, ., ceil, (, n, *, d, )]
[Math]
[n, *, d]
[n]
[d]
[this, ., createH, (, d, )]
[this]
[d]
[H, ., power, (, n, )]
[H]
[n]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, )]
[Hpower]
[k, -, 1]
[k]
[1]
[k, -, 1]
[k]
[1]
[1]
[i, <=, n]
[i]
[n]
[++, i]
[i]
[pFrac]
[pFrac, ., multiply, (, i, ), ., divide, (, n, )]
[pFrac, ., multiply, (, i, )]
[pFrac]
[i]
[n]
[pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, ), ., doubleValue, (, )]
[pFrac, ., bigDecimalValue, (, 20, ,, BigDecimal, ., ROUND_HALF_UP, )]
[pFrac]
[20]
[BigDecimal, ., ROUND_HALF_UP]
[BigDecimal]
[(, int, ), Math, ., ceil, (, n, *, d, )]
[Math, ., ceil, (, n, *, d, )]
[Math]
[n, *, d]
[n]
[d]
[this, ., createH, (, d, )]
[this]
[d]
[HBigFraction, ., getRowDimension, (, )]
[HBigFraction]
[new, Array2DRowRealMatrix, (, m, ,, m, )]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[0]
[j, <, m]
[j]
[m]
[++, j]
[j]
[H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), )]
[H]
[i]
[j]
[HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, )]
[HBigFraction, ., getEntry, (, i, ,, j, )]
[HBigFraction]
[i]
[j]
[H, ., power, (, n, )]
[H]
[n]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, )]
[Hpower]
[k, -, 1]
[k]
[1]
[k, -, 1]
[k]
[1]
[1]
[i, <=, n]
[i]
[n]
[++, i]
[i]
[pFrac]
[(, double, ), i, /, (, double, ), n]
[(, double, ), i]
[i]
[(, double, ), n]
[n]
[pFrac]
[(, int, ), Math, ., ceil, (, n, *, d, )]
[Math, ., ceil, (, n, *, d, )]
[Math]
[n, *, d]
[n]
[d]
[2, *, k, -, 1]
[2, *, k]
[2]
[k]
[1]
[k, -, n, *, d]
[k]
[n, *, d]
[n]
[d]
[hDouble, >=, 1]
[hDouble]
[1]
[new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, )]
[hDouble]
[1.0]
[false]
[null]
[h]
[new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, )]
[hDouble]
[1.0e-20]
[10000]
[h]
[new, BigFraction, (, hDouble, ,, 1.0e-10, ,, 10000, )]
[hDouble]
[1.0e-10]
[10000]
[h]
[new, BigFraction, (, hDouble, ,, 1.0e-5, ,, 10000, )]
[hDouble]
[1.0e-5]
[10000]
[new, BigFraction, [, m, ], [, m, ]]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[0]
[j, <, m]
[j]
[m]
[++, j]
[j]
[i, -, j, +, 1, <, 0]
[i, -, j, +, 1]
[i, -, j]
[i]
[j]
[1]
[0]
[Hdata, [, i, ], [, j, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[j]
[BigFraction, ., ZERO]
[BigFraction]
[Hdata, [, i, ], [, j, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[j]
[BigFraction, ., ONE]
[BigFraction]
[new, BigFraction, [, m, ]]
[m]
[hPowers, [, 0, ]]
[hPowers]
[0]
[h]
[1]
[i, <, m]
[i]
[m]
[++, i]
[i]
[hPowers, [, i, ]]
[hPowers]
[i]
[h, ., multiply, (, hPowers, [, i, -, 1, ], )]
[h]
[hPowers, [, i, -, 1, ]]
[hPowers]
[i, -, 1]
[i]
[1]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[Hdata, [, i, ], [, 0, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[0]
[Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], )]
[Hdata, [, i, ], [, 0, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[0]
[hPowers, [, i, ]]
[hPowers]
[i]
[Hdata, [, m, -, 1, ], [, i, ]]
[Hdata, [, m, -, 1, ]]
[Hdata]
[m, -, 1]
[m]
[1]
[i]
[Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], )]
[Hdata, [, m, -, 1, ], [, i, ]]
[Hdata, [, m, -, 1, ]]
[Hdata]
[m, -, 1]
[m]
[1]
[i]
[hPowers, [, m, -, i, -, 1, ]]
[hPowers]
[m, -, i, -, 1]
[m, -, i]
[m]
[i]
[1]
[h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1]
[h, ., compareTo, (, BigFraction, ., ONE_HALF, )]
[h]
[BigFraction, ., ONE_HALF]
[BigFraction]
[1]
[Hdata, [, m, -, 1, ], [, 0, ]]
[Hdata, [, m, -, 1, ]]
[Hdata]
[m, -, 1]
[m]
[1]
[0]
[Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (, m, ), )]
[Hdata, [, m, -, 1, ], [, 0, ]]
[Hdata, [, m, -, 1, ]]
[Hdata]
[m, -, 1]
[m]
[1]
[0]
[h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (, m, )]
[h, ., multiply, (, 2, ), ., subtract, (, 1, )]
[h, ., multiply, (, 2, )]
[h]
[2]
[1]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[0]
[j, <, i, +, 1]
[j]
[i, +, 1]
[i]
[1]
[++, j]
[j]
[i, -, j, +, 1, >, 0]
[i, -, j, +, 1]
[i, -, j]
[i]
[j]
[1]
[0]
[2]
[g, <=, i, -, j, +, 1]
[g]
[i, -, j, +, 1]
[i, -, j]
[i]
[j]
[1]
[++, g]
[g]
[Hdata, [, i, ], [, j, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[j]
[Hdata, [, i, ], [, j, ], ., divide, (, g, )]
[Hdata, [, i, ], [, j, ]]
[Hdata, [, i, ]]
[Hdata]
[i]
[j]
[g]
[new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, ., getInstance, (, ), ,, Hdata, )]
[BigFractionField, ., getInstance, (, )]
[BigFractionField]
[Hdata]
