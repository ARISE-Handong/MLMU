[Sets, ., newHashSet, (, "COMPILED", )]
[Sets]
["COMPILED"]
[null]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_DEFINE_WARNING", ,, "unknown @define variable {0}", )]
[DiagnosticType]
["JSC_UNKNOWN_DEFINE_WARNING"]
["unknown @define variable {0}"]
[DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_TYPE_ERROR", ,, "@define tag only permits literal types", )]
[DiagnosticType]
["JSC_INVALID_DEFINE_TYPE_ERROR"]
["@define tag only permits literal types"]
[DiagnosticType, ., error, (, "JSC_INVALID_DEFINE_INIT_ERROR", ,, "illegal initialization of @define variable {0}", )]
[DiagnosticType]
["JSC_INVALID_DEFINE_INIT_ERROR"]
["illegal initialization of @define variable {0}"]
[DiagnosticType, ., error, (, "JSC_NON_GLOBAL_DEFINE_INIT_ERROR", ,, "@define variable {0} assignment must be global", )]
[DiagnosticType]
["JSC_NON_GLOBAL_DEFINE_INIT_ERROR"]
["@define variable {0} assignment must be global"]
[DiagnosticType, ., error, (, "JSC_DEFINE_NOT_ASSIGNABLE_ERROR", ,, "@define variable {0} cannot be reassigned due to code at {1}.", )]
[DiagnosticType]
["JSC_DEFINE_NOT_ASSIGNABLE_ERROR"]
["@define variable {0} cannot be reassigned due to code at {1}."]
[new, MessageFormat, (, "line {0} of {1}", )]
["line {0} of {1}"]
[this, ., compiler]
[this]
[compiler]
[dominantReplacements]
[replacements]
[this, ., namespace]
[this]
[namespace]
[this]
[namespace, ==, null]
[namespace]
[null]
[namespace]
[new, GlobalNamespace, (, compiler, ,, root, )]
[compiler]
[root]
[overrideDefines, (, collectDefines, (, root, ,, namespace, ), )]
[collectDefines, (, root, ,, namespace, )]
[root]
[namespace]
[false]
[allDefines, ., entrySet, (, )]
[allDefines]
[def, ., getKey, (, )]
[def]
[def, ., getValue, (, )]
[def]
[dominantReplacements, ., get, (, defineName, )]
[dominantReplacements]
[defineName]
[inputValue, !=, null, ?, inputValue, :, info, ., getLastValue, (, )]
[inputValue, !=, null]
[inputValue]
[null]
[inputValue]
[info, ., getLastValue, (, )]
[info]
[finalValue, !=, info, ., initialValue]
[finalValue]
[info, ., initialValue]
[info]
[info, ., initialValueParent, ., replaceChild, (, info, ., initialValue, ,, finalValue, ., cloneTree, (, ), )]
[info, ., initialValueParent]
[info]
[info, ., initialValue]
[info]
[finalValue, ., cloneTree, (, )]
[finalValue]
[compiler, ., addToDebugLog, (, "Overriding @define variable ", +, defineName, )]
[compiler]
["Overriding @define variable ", +, defineName]
["Overriding @define variable "]
[defineName]
[changed]
[changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, ), ||, !, finalValue, ., isEquivalentTo, (, info, ., initialValue, )]
[changed, ||, finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, )]
[changed]
[finalValue, ., getType, (, ), !=, info, ., initialValue, ., getType, (, )]
[finalValue, ., getType, (, )]
[finalValue]
[info, ., initialValue, ., getType, (, )]
[info, ., initialValue]
[info]
[!, finalValue, ., isEquivalentTo, (, info, ., initialValue, )]
[finalValue, ., isEquivalentTo, (, info, ., initialValue, )]
[finalValue]
[info, ., initialValue]
[info]
[changed]
[compiler, ., reportCodeChange, (, )]
[compiler]
[dominantReplacements, ., keySet, (, )]
[dominantReplacements]
[unusedReplacements, ., removeAll, (, allDefines, ., keySet, (, ), )]
[unusedReplacements]
[allDefines, ., keySet, (, )]
[allDefines]
[unusedReplacements, ., removeAll, (, KNOWN_DEFINES, )]
[unusedReplacements]
[KNOWN_DEFINES]
[unusedReplacements]
[compiler, ., report, (, JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine, ), )]
[compiler]
[JSError, ., make, (, UNKNOWN_DEFINE_WARNING, ,, unknownDefine, )]
[JSError]
[UNKNOWN_DEFINE_WARNING]
[unknownDefine]
[format, ., format, (, params, )]
[format]
[params]
[expression, ., evaluate, (, null, ,, compiler, ., getTypeRegistry, (, ), )]
[expression]
[null]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[!, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), )]
[!, type, ., isUnknownType, (, )]
[type, ., isUnknownType, (, )]
[type]
[type, ., isSubtype, (, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, ), )]
[type]
[compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NUMBER_STRING_BOOLEAN, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[JSTypeNative, ., NUMBER_STRING_BOOLEAN]
[JSTypeNative]
[Lists, ., newArrayList, (, )]
[Lists]
[namespace, ., getNameIndex, (, ), ., values, (, )]
[namespace, ., getNameIndex, (, )]
[namespace]
[name, ., getDeclaration, (, )]
[name]
[name, ., docInfo, !=, null, &&, name, ., docInfo, ., isDefine, (, )]
[name, ., docInfo, !=, null]
[name, ., docInfo]
[name]
[null]
[name, ., docInfo, ., isDefine, (, )]
[name, ., docInfo]
[name]
[isValidDefineType, (, name, ., docInfo, ., getType, (, ), )]
[name, ., docInfo, ., getType, (, )]
[name, ., docInfo]
[name]
[allDefines, ., add, (, name, )]
[allDefines]
[name]
[JSError, ., make, (, decl, ., getSourceName, (, ), ,, decl, ., node, ,, INVALID_DEFINE_TYPE_ERROR, )]
[JSError]
[decl, ., getSourceName, (, )]
[decl]
[decl, ., node]
[decl]
[INVALID_DEFINE_TYPE_ERROR]
[compiler, ., report, (, error, )]
[compiler]
[error]
[name, ., getRefs, (, )]
[name]
[ref, ==, decl]
[ref]
[decl]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[n, ., getJSDocInfo, (, )]
[n]
[info, ==, null, &&, parent, ., isVar, (, ), &&, parent, ., hasOneChild, (, )]
[info, ==, null, &&, parent, ., isVar, (, )]
[info, ==, null]
[info]
[null]
[parent, ., isVar, (, )]
[parent]
[parent, ., hasOneChild, (, )]
[parent]
[info]
[parent, ., getJSDocInfo, (, )]
[parent]
[info, !=, null, &&, info, ., isDefine, (, )]
[info, !=, null]
[info]
[null]
[info, ., isDefine, (, )]
[info]
[allDefines, ., add, (, name, )]
[allDefines]
[name]
[new, CollectDefines, (, compiler, ,, allDefines, )]
[compiler]
[allDefines]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, pass, )]
[NodeTraversal]
[compiler]
[root]
[pass]
[pass, ., getAllDefines, (, )]
[pass]
[null]
[this, ., compiler]
[this]
[compiler]
[this, ., allDefines]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[assignableDefines]
[Maps, ., newHashMap, (, )]
[Maps]
[assignAllowed]
[new, ArrayDeque, <, Integer, >, (, )]
[assignAllowed, ., push, (, 1, )]
[assignAllowed]
[1]
[allRefInfo]
[Maps, ., newHashMap, (, )]
[Maps]
[listOfDefines]
[name, ., getDeclaration, (, )]
[name]
[decl, !=, null]
[decl]
[null]
[allRefInfo, ., put, (, decl, ., node, ,, new, RefInfo, (, decl, ,, name, ), )]
[allRefInfo]
[decl, ., node]
[decl]
[new, RefInfo, (, decl, ,, name, )]
[decl]
[name]
[name, ., getRefs, (, )]
[name]
[ref, ==, decl]
[ref]
[decl]
[ref, ., getTwin, (, ), ==, null, ||, !, ref, ., getTwin, (, ), ., isSet, (, )]
[ref, ., getTwin, (, ), ==, null]
[ref, ., getTwin, (, )]
[ref]
[null]
[!, ref, ., getTwin, (, ), ., isSet, (, )]
[ref, ., getTwin, (, ), ., isSet, (, )]
[ref, ., getTwin, (, )]
[ref]
[allRefInfo, ., put, (, ref, ., node, ,, new, RefInfo, (, ref, ,, name, ), )]
[allRefInfo]
[ref, ., node]
[ref]
[new, RefInfo, (, ref, ,, name, )]
[ref]
[name]
[allDefines]
[updateAssignAllowedStack, (, n, ,, true, )]
[n]
[true]
[true]
[allRefInfo, ., get, (, n, )]
[allRefInfo]
[n]
[refInfo, !=, null]
[refInfo]
[null]
[refInfo, ., ref]
[refInfo]
[refInfo, ., name]
[refInfo]
[name, ., getFullName, (, )]
[name]
[ref, ., type]
[ref]
[SET_FROM_GLOBAL]
[SET_FROM_LOCAL]
[getValueParent, (, ref, )]
[ref]
[valParent, ., getLastChild, (, )]
[valParent]
[valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, ), &&, name, ., getDeclaration, (, ), ==, ref]
[valParent, ., isAssign, (, ), &&, name, ., isSimpleName, (, )]
[valParent, ., isAssign, (, )]
[valParent]
[name, ., isSimpleName, (, )]
[name]
[name, ., getDeclaration, (, ), ==, ref]
[name, ., getDeclaration, (, )]
[name]
[ref]
[compiler, ., report, (, t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, ), )]
[compiler]
[t, ., makeError, (, val, ,, INVALID_DEFINE_INIT_ERROR, ,, fullName, )]
[t]
[val]
[INVALID_DEFINE_INIT_ERROR]
[fullName]
[processDefineAssignment, (, t, ,, fullName, ,, val, ,, valParent, )]
[t]
[fullName]
[val]
[valParent]
[refInfo, ., name, ., removeRef, (, ref, )]
[refInfo, ., name]
[refInfo]
[ref]
[lvalueToRemoveLater]
[valParent]
[t, ., inGlobalScope, (, )]
[t]
[assignableDefines, ., get, (, fullName, )]
[assignableDefines]
[fullName]
[info, !=, null]
[info]
[null]
[setDefineInfoNotAssignable, (, info, ,, t, )]
[info]
[t]
[assignableDefines, ., remove, (, fullName, )]
[assignableDefines]
[fullName]
[!, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., isDefine, (, )]
[!, t, ., inGlobalScope, (, ), &&, n, ., getJSDocInfo, (, ), !=, null]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[n, ., getJSDocInfo, (, ), !=, null]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[n, ., getJSDocInfo, (, ), ., isDefine, (, )]
[n, ., getJSDocInfo, (, )]
[n]
[compiler, ., report, (, t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", ), )]
[compiler]
[t, ., makeError, (, n, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, "", )]
[t]
[n]
[NON_GLOBAL_DEFINE_INIT_ERROR]
[""]
[lvalueToRemoveLater, ==, n]
[lvalueToRemoveLater]
[n]
[lvalueToRemoveLater]
[null]
[n, ., isAssign, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[n, ., removeChild, (, last, )]
[n]
[last]
[parent, ., replaceChild, (, n, ,, last, )]
[parent]
[n]
[last]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[n, ., removeChild, (, n, ., getFirstChild, (, ), )]
[n]
[n, ., getFirstChild, (, )]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., isCall, (, )]
[n]
[t, ., inGlobalScope, (, )]
[t]
[assignableDefines, ., values, (, )]
[assignableDefines]
[setDefineInfoNotAssignable, (, info, ,, t, )]
[info]
[t]
[assignableDefines, ., clear, (, )]
[assignableDefines]
[updateAssignAllowedStack, (, n, ,, false, )]
[n]
[false]
[n, ., getType, (, )]
[n]
[Token, ., CASE]
[Token]
[Token, ., FOR]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., IF]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., WHILE]
[Token]
[entering]
[assignAllowed, ., push, (, 0, )]
[assignAllowed]
[0]
[assignAllowed, ., remove, (, )]
[assignAllowed]
[assignAllowed, ., element, (, ), ==, 1]
[assignAllowed, ., element, (, )]
[assignAllowed]
[1]
[value, ==, null, ||, !, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), )]
[value, ==, null]
[value]
[null]
[!, NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), )]
[NodeUtil, ., isValidDefineValue, (, value, ,, allDefines, ., keySet, (, ), )]
[NodeUtil]
[value]
[allDefines, ., keySet, (, )]
[allDefines]
[compiler, ., report, (, t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, ), )]
[compiler]
[t, ., makeError, (, value, ,, INVALID_DEFINE_INIT_ERROR, ,, name, )]
[t]
[value]
[INVALID_DEFINE_INIT_ERROR]
[name]
[!, isAssignAllowed, (, )]
[isAssignAllowed, (, )]
[compiler, ., report, (, t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, ), )]
[compiler]
[t, ., makeError, (, valueParent, ,, NON_GLOBAL_DEFINE_INIT_ERROR, ,, name, )]
[t]
[valueParent]
[NON_GLOBAL_DEFINE_INIT_ERROR]
[name]
[allDefines, ., get, (, name, )]
[allDefines]
[name]
[info, ==, null]
[info]
[null]
[info]
[new, DefineInfo, (, value, ,, valueParent, )]
[value]
[valueParent]
[allDefines, ., put, (, name, ,, info, )]
[allDefines]
[name]
[info]
[assignableDefines, ., put, (, name, ,, info, )]
[assignableDefines]
[name]
[info]
[info, ., recordAssignment, (, value, )]
[info]
[value]
[true]
[compiler, ., report, (, t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), ), )]
[compiler]
[t, ., makeError, (, valueParent, ,, DEFINE_NOT_ASSIGNABLE_ERROR, ,, name, ,, info, ., getReasonWhyNotAssignable, (, ), )]
[t]
[valueParent]
[DEFINE_NOT_ASSIGNABLE_ERROR]
[name]
[info, ., getReasonWhyNotAssignable, (, )]
[info]
[false]
[ref, ., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, ), ?, ref, ., node, :, ref, ., node, ., getParent, (, )]
[ref, ., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isVar, (, )]
[ref, ., node, ., getParent, (, ), !=, null]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[null]
[ref, ., node, ., getParent, (, ), ., isVar, (, )]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[info, ., setNotAssignable, (, format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,, t, ., getLineNumber, (, ), ,, t, ., getSourceName, (, ), ), )]
[info]
[format, (, REASON_DEFINE_NOT_ASSIGNABLE, ,, t, ., getLineNumber, (, ), ,, t, ., getSourceName, (, ), )]
[REASON_DEFINE_NOT_ASSIGNABLE]
[t, ., getLineNumber, (, )]
[t]
[t, ., getSourceName, (, )]
[t]
[this, ., ref]
[this]
[ref]
[this, ., name]
[this]
[name]
[this, ., initialValueParent]
[this]
[initialValueParent]
[this, ., initialValue]
[this]
[initialValue]
[lastValue]
[initialValue]
[isAssignable]
[true]
[isAssignable]
[false]
[reasonNotAssignable]
[reason]
[reasonNotAssignable]
[lastValue]
[value]
[isAssignable]
[lastValue]
