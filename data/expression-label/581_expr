[Math, ., log, (, 10, )]
[Math]
[10]
[value, <, 0]
[value]
[0]
[buf, ., append, (, '-', )]
[buf]
['-']
[value, !=, Integer, ., MIN_VALUE]
[value]
[Integer, ., MIN_VALUE]
[Integer]
[value]
[-, value]
[value]
[size, >, 10]
[size]
[10]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, )]
[buf]
["", +, -, (, long, ), Integer, ., MIN_VALUE]
[""]
[-, (, long, ), Integer, ., MIN_VALUE]
[(, long, ), Integer, ., MIN_VALUE]
[Integer, ., MIN_VALUE]
[Integer]
[value, <, 10]
[value]
[10]
[size, >, 1]
[size]
[1]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[buf, ., append, (, (, char, ), (, value, +, '0', ), )]
[buf]
[(, char, ), (, value, +, '0', )]
[(, value, +, '0', )]
[value, +, '0']
[value]
['0']
[value, <, 100]
[value]
[100]
[size, >, 2]
[size]
[2]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27]
[(, (, value, +, 1, ), *, 13421772, )]
[(, value, +, 1, ), *, 13421772]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[13421772]
[27]
[buf, ., append, (, (, char, ), (, d, +, '0', ), )]
[buf]
[(, char, ), (, d, +, '0', )]
[(, d, +, '0', )]
[d, +, '0']
[d]
['0']
[buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), )]
[buf]
[(, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[(, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[value, -, (, d, <<, 3, )]
[value]
[(, d, <<, 3, )]
[d, <<, 3]
[d]
[3]
[(, d, <<, 1, )]
[d, <<, 1]
[d]
[1]
['0']
[value, <, 1000]
[value]
[1000]
[digits]
[3]
[value, <, 10000]
[value]
[10000]
[digits]
[4]
[digits]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, )]
[(, Math, ., log, (, value, ), /, LOG_10, )]
[Math, ., log, (, value, ), /, LOG_10]
[Math, ., log, (, value, )]
[Math]
[value]
[LOG_10]
[1]
[size, >, digits]
[size]
[digits]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[buf, ., append, (, Integer, ., toString, (, value, ), )]
[buf]
[Integer, ., toString, (, value, )]
[Integer]
[value]
[(, int, ), value]
[value]
[intValue, ==, value]
[intValue]
[value]
[appendPaddedInteger, (, buf, ,, intValue, ,, size, )]
[buf]
[intValue]
[size]
[size, <=, 19]
[size]
[19]
[buf, ., append, (, Long, ., toString, (, value, ), )]
[buf]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[buf, ., append, (, '-', )]
[buf]
['-']
[value, !=, Long, ., MIN_VALUE]
[value]
[Long, ., MIN_VALUE]
[Long]
[value]
[-, value]
[value]
[size, >, 19]
[size]
[19]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[buf, ., append, (, "9223372036854775808", )]
[buf]
["9223372036854775808"]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, )]
[(, Math, ., log, (, value, ), /, LOG_10, )]
[Math, ., log, (, value, ), /, LOG_10]
[Math, ., log, (, value, )]
[Math]
[value]
[LOG_10]
[1]
[size, >, digits]
[size]
[digits]
[size, --]
[size]
[buf, ., append, (, '0', )]
[buf]
['0']
[buf, ., append, (, Long, ., toString, (, value, ), )]
[buf]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[out, ., write, (, '-', )]
[out]
['-']
[value, !=, Integer, ., MIN_VALUE]
[value]
[Integer, ., MIN_VALUE]
[Integer]
[value]
[-, value]
[value]
[size, >, 10]
[size]
[10]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, )]
[out]
["", +, -, (, long, ), Integer, ., MIN_VALUE]
[""]
[-, (, long, ), Integer, ., MIN_VALUE]
[(, long, ), Integer, ., MIN_VALUE]
[Integer, ., MIN_VALUE]
[Integer]
[value, <, 10]
[value]
[10]
[size, >, 1]
[size]
[1]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[out, ., write, (, value, +, '0', )]
[out]
[value, +, '0']
[value]
['0']
[value, <, 100]
[value]
[100]
[size, >, 2]
[size]
[2]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27]
[(, (, value, +, 1, ), *, 13421772, )]
[(, value, +, 1, ), *, 13421772]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[13421772]
[27]
[out, ., write, (, d, +, '0', )]
[out]
[d, +, '0']
[d]
['0']
[out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[out]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[value, -, (, d, <<, 3, )]
[value]
[(, d, <<, 3, )]
[d, <<, 3]
[d]
[3]
[(, d, <<, 1, )]
[d, <<, 1]
[d]
[1]
['0']
[value, <, 1000]
[value]
[1000]
[digits]
[3]
[value, <, 10000]
[value]
[10000]
[digits]
[4]
[digits]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, )]
[(, Math, ., log, (, value, ), /, LOG_10, )]
[Math, ., log, (, value, ), /, LOG_10]
[Math, ., log, (, value, )]
[Math]
[value]
[LOG_10]
[1]
[size, >, digits]
[size]
[digits]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[out, ., write, (, Integer, ., toString, (, value, ), )]
[out]
[Integer, ., toString, (, value, )]
[Integer]
[value]
[(, int, ), value]
[value]
[intValue, ==, value]
[intValue]
[value]
[writePaddedInteger, (, out, ,, intValue, ,, size, )]
[out]
[intValue]
[size]
[size, <=, 19]
[size]
[19]
[out, ., write, (, Long, ., toString, (, value, ), )]
[out]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[out, ., write, (, '-', )]
[out]
['-']
[value, !=, Long, ., MIN_VALUE]
[value]
[Long, ., MIN_VALUE]
[Long]
[value]
[-, value]
[value]
[size, >, 19]
[size]
[19]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[out, ., write, (, "9223372036854775808", )]
[out]
["9223372036854775808"]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, )]
[(, Math, ., log, (, value, ), /, LOG_10, )]
[Math, ., log, (, value, ), /, LOG_10]
[Math, ., log, (, value, )]
[Math]
[value]
[LOG_10]
[1]
[size, >, digits]
[size]
[digits]
[size, --]
[size]
[out, ., write, (, '0', )]
[out]
['0']
[out, ., write, (, Long, ., toString, (, value, ), )]
[out]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[buf, ., append, (, '-', )]
[buf]
['-']
[value, !=, Integer, ., MIN_VALUE]
[value]
[Integer, ., MIN_VALUE]
[Integer]
[value]
[-, value]
[value]
[buf, ., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, )]
[buf]
["", +, -, (, long, ), Integer, ., MIN_VALUE]
[""]
[-, (, long, ), Integer, ., MIN_VALUE]
[(, long, ), Integer, ., MIN_VALUE]
[Integer, ., MIN_VALUE]
[Integer]
[value, <, 10]
[value]
[10]
[buf, ., append, (, (, char, ), (, value, +, '0', ), )]
[buf]
[(, char, ), (, value, +, '0', )]
[(, value, +, '0', )]
[value, +, '0']
[value]
['0']
[value, <, 100]
[value]
[100]
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27]
[(, (, value, +, 1, ), *, 13421772, )]
[(, value, +, 1, ), *, 13421772]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[13421772]
[27]
[buf, ., append, (, (, char, ), (, d, +, '0', ), )]
[buf]
[(, char, ), (, d, +, '0', )]
[(, d, +, '0', )]
[d, +, '0']
[d]
['0']
[buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), )]
[buf]
[(, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[(, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[value, -, (, d, <<, 3, )]
[value]
[(, d, <<, 3, )]
[d, <<, 3]
[d]
[3]
[(, d, <<, 1, )]
[d, <<, 1]
[d]
[1]
['0']
[buf, ., append, (, Integer, ., toString, (, value, ), )]
[buf]
[Integer, ., toString, (, value, )]
[Integer]
[value]
[(, int, ), value]
[value]
[intValue, ==, value]
[intValue]
[value]
[appendUnpaddedInteger, (, buf, ,, intValue, )]
[buf]
[intValue]
[buf, ., append, (, Long, ., toString, (, value, ), )]
[buf]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[out, ., write, (, '-', )]
[out]
['-']
[value, !=, Integer, ., MIN_VALUE]
[value]
[Integer, ., MIN_VALUE]
[Integer]
[value]
[-, value]
[value]
[out, ., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, )]
[out]
["", +, -, (, long, ), Integer, ., MIN_VALUE]
[""]
[-, (, long, ), Integer, ., MIN_VALUE]
[(, long, ), Integer, ., MIN_VALUE]
[Integer, ., MIN_VALUE]
[Integer]
[value, <, 10]
[value]
[10]
[out, ., write, (, value, +, '0', )]
[out]
[value, +, '0']
[value]
['0']
[value, <, 100]
[value]
[100]
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27]
[(, (, value, +, 1, ), *, 13421772, )]
[(, value, +, 1, ), *, 13421772]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[13421772]
[27]
[out, ., write, (, d, +, '0', )]
[out]
[d, +, '0']
[d]
['0']
[out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', )]
[out]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0']
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, )]
[value, -, (, d, <<, 3, )]
[value]
[(, d, <<, 3, )]
[d, <<, 3]
[d]
[3]
[(, d, <<, 1, )]
[d, <<, 1]
[d]
[1]
['0']
[out, ., write, (, Integer, ., toString, (, value, ), )]
[out]
[Integer, ., toString, (, value, )]
[Integer]
[value]
[(, int, ), value]
[value]
[intValue, ==, value]
[intValue]
[value]
[writeUnpaddedInteger, (, out, ,, intValue, )]
[out]
[intValue]
[out, ., write, (, Long, ., toString, (, value, ), )]
[out]
[Long, ., toString, (, value, )]
[Long]
[value]
[value, <, 0]
[value]
[0]
[value, !=, Long, ., MIN_VALUE]
[value]
[Long, ., MIN_VALUE]
[Long]
[calculateDigitCount, (, -, value, ), +, 1]
[calculateDigitCount, (, -, value, )]
[-, value]
[value]
[1]
[20]
[(, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), ), ), )]
[value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), ), )]
[value, <, 10]
[value]
[10]
[1]
[(, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), ), )]
[value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), )]
[value, <, 100]
[value]
[100]
[2]
[(, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), ), )]
[value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), )]
[value, <, 1000]
[value]
[1000]
[3]
[(, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ), )]
[value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, )]
[value, <, 10000]
[value]
[10000]
[4]
[(, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, )]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, )]
[(, Math, ., log, (, value, ), /, LOG_10, )]
[Math, ., log, (, value, ), /, LOG_10]
[Math, ., log, (, value, )]
[Math]
[value]
[LOG_10]
[1]
[text, ., charAt, (, position, ), -, '0']
[text, ., charAt, (, position, )]
[text]
[position]
['0']
[(, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -, '0']
[(, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, )]
[(, (, value, <<, 3, ), +, (, value, <<, 1, ), )]
[(, value, <<, 3, ), +, (, value, <<, 1, )]
[(, value, <<, 3, )]
[value, <<, 3]
[value]
[3]
[(, value, <<, 1, )]
[value, <<, 1]
[value]
[1]
[text, ., charAt, (, position, +, 1, )]
[text]
[position, +, 1]
[position]
[1]
['0']
[errorPos, +, 32]
[errorPos]
[32]
[text, ., length, (, ), <=, sampleLen, +, 3]
[text, ., length, (, )]
[text]
[sampleLen, +, 3]
[sampleLen]
[3]
[sampleText]
[text]
[sampleText]
[text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", )]
[text, ., substring, (, 0, ,, sampleLen, )]
[text]
[0]
[sampleLen]
["..."]
[errorPos, <=, 0]
[errorPos]
[0]
["Invalid format: \"", +, sampleText, +, '"']
["Invalid format: \"", +, sampleText]
["Invalid format: \""]
[sampleText]
['"']
[errorPos, >=, text, ., length, (, )]
[errorPos]
[text, ., length, (, )]
[text]
["Invalid format: \"", +, sampleText, +, "\" is too short"]
["Invalid format: \"", +, sampleText]
["Invalid format: \""]
[sampleText]
["\" is too short"]
["Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +, '"']
["Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, )]
["Invalid format: \"", +, sampleText, +, "\" is malformed at \""]
["Invalid format: \"", +, sampleText]
["Invalid format: \""]
[sampleText]
["\" is malformed at \""]
[sampleText, ., substring, (, errorPos, )]
[sampleText]
[errorPos]
['"']
