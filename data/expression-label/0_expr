[subtree, ., isRegExp, (, )]
[subtree]
[subtree, ., getFirstChild, (, ), ., getString, (, )]
[subtree, ., getFirstChild, (, )]
[subtree]
[subtree, ., getChildCount, (, ), ==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (, ), :, ""]
[subtree, ., getChildCount, (, ), ==, 2]
[subtree, ., getChildCount, (, )]
[subtree]
[2]
[subtree, ., getLastChild, (, ), ., getString, (, )]
[subtree, ., getLastChild, (, )]
[subtree]
[""]
[regexTree]
[RegExpTree, ., parseRegExp, (, pattern, ,, flags, )]
[RegExpTree]
[pattern]
[flags]
[subtree]
[regexTree]
[regexTree, ., simplify, (, flags, )]
[regexTree]
[flags]
[regexTree, ., toString, (, )]
[regexTree]
[literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, )]
[literal]
[1]
[literal, ., length, (, ), -, 1]
[literal, ., length, (, )]
[literal]
[1]
[(, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), )]
[(, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", )]
[(, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", )]
[(, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", )]
[flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, ""]
[flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), )]
[flags, ., contains, (, "g", )]
[flags]
["g"]
[(, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), )]
[!, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, )]
[!, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, )]
[RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, )]
[RegExpTree]
[regexTree]
[flags]
[regexTree, ., hasCapturingGroup, (, )]
[regexTree]
["g"]
[""]
[(, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", )]
[flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, ""]
[flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, )]
[flags, ., contains, (, "i", )]
[flags]
["i"]
[regexTree, ., isCaseSensitive, (, )]
[regexTree]
["i"]
[""]
[(, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", )]
[flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, ""]
[flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, )]
[flags, ., contains, (, "m", )]
[flags]
["m"]
[regexTree, ., containsAnchor, (, )]
[regexTree]
["m"]
[""]
[!, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), )]
[(, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), )]
[newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, )]
[newPattern, ., equals, (, pattern, )]
[newPattern]
[pattern]
[newFlags, ., equals, (, flags, )]
[newFlags]
[flags]
[subtree, ., getFirstChild, (, ), ., setString, (, newPattern, )]
[subtree, ., getFirstChild, (, )]
[subtree]
[newPattern]
[!, "", ., equals, (, newFlags, )]
["", ., equals, (, newFlags, )]
[""]
[newFlags]
[subtree, ., getLastChild, (, ), ., setString, (, newFlags, )]
[subtree, ., getLastChild, (, )]
[subtree]
[newFlags]
[subtree, ., getChildCount, (, ), ==, 2]
[subtree, ., getChildCount, (, )]
[subtree]
[2]
[subtree, ., getLastChild, (, ), ., detachFromParent, (, )]
[subtree, ., getLastChild, (, )]
[subtree]
[reportCodeChange, (, )]
[subtree]
