[1023l]
[0x8000000000000000L]
[0x80000000]
[EPSILON]
[Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 53l, ), <<, 52, )]
[Double]
[(, EXPONENT_OFFSET, -, 53l, ), <<, 52]
[(, EXPONENT_OFFSET, -, 53l, )]
[EXPONENT_OFFSET, -, 53l]
[EXPONENT_OFFSET]
[53l]
[52]
[SAFE_MIN]
[Double, ., longBitsToDouble, (, (, EXPONENT_OFFSET, -, 1022l, ), <<, 52, )]
[Double]
[(, EXPONENT_OFFSET, -, 1022l, ), <<, 52]
[(, EXPONENT_OFFSET, -, 1022l, )]
[EXPONENT_OFFSET, -, 1022l]
[EXPONENT_OFFSET]
[1022l]
[52]
[equals, (, x, ,, y, ,, eps, )]
[x]
[y]
[eps]
[0]
[x, <, y]
[x]
[y]
[-, 1]
[1]
[1]
[equals, (, x, ,, y, ,, maxUlps, )]
[x]
[y]
[maxUlps]
[0]
[x, <, y]
[x]
[y]
[-, 1]
[1]
[1]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, )]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), )]
[Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, )]
[Float, ., isNaN, (, x, )]
[Float]
[x]
[Float, ., isNaN, (, y, )]
[Float]
[y]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[FastMath, ., abs, (, y, -, x, ), <=, eps]
[FastMath, ., abs, (, y, -, x, )]
[FastMath]
[y, -, x]
[y]
[x]
[eps]
[equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, )]
[equalsIncludingNaN, (, x, ,, y, )]
[x]
[y]
[(, FastMath, ., abs, (, y, -, x, ), <=, eps, )]
[FastMath, ., abs, (, y, -, x, ), <=, eps]
[FastMath, ., abs, (, y, -, x, )]
[FastMath]
[y, -, x]
[y]
[x]
[eps]
[Float, ., floatToIntBits, (, x, )]
[Float]
[x]
[Float, ., floatToIntBits, (, y, )]
[Float]
[y]
[xInt, <, 0]
[xInt]
[0]
[xInt]
[SGN_MASK_FLOAT, -, xInt]
[SGN_MASK_FLOAT]
[xInt]
[yInt, <, 0]
[yInt]
[0]
[yInt]
[SGN_MASK_FLOAT, -, yInt]
[SGN_MASK_FLOAT]
[yInt]
[FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps]
[FastMath, ., abs, (, xInt, -, yInt, )]
[FastMath]
[xInt, -, yInt]
[xInt]
[yInt]
[maxUlps]
[isEqual, &&, !, Float, ., isNaN, (, x, ), &&, !, Float, ., isNaN, (, y, )]
[isEqual, &&, !, Float, ., isNaN, (, x, )]
[isEqual]
[!, Float, ., isNaN, (, x, )]
[Float, ., isNaN, (, x, )]
[Float]
[x]
[!, Float, ., isNaN, (, y, )]
[Float, ., isNaN, (, y, )]
[Float]
[y]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, )]
[(, Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, ), )]
[Float, ., isNaN, (, x, ), &&, Float, ., isNaN, (, y, )]
[Float, ., isNaN, (, x, )]
[Float]
[x]
[Float, ., isNaN, (, y, )]
[Float]
[y]
[equals, (, x, ,, y, ,, maxUlps, )]
[x]
[y]
[maxUlps]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, 1, )]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), )]
[Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[Double, ., isNaN, (, y, )]
[Double]
[y]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[equals, (, x, ,, y, ,, 1, ), ||, FastMath, ., abs, (, y, -, x, ), <=, eps]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[FastMath, ., abs, (, y, -, x, ), <=, eps]
[FastMath, ., abs, (, y, -, x, )]
[FastMath]
[y, -, x]
[y]
[x]
[eps]
[equals, (, x, ,, y, ,, 1, )]
[x]
[y]
[1]
[true]
[FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), )]
[FastMath]
[FastMath, ., abs, (, x, )]
[FastMath]
[x]
[FastMath, ., abs, (, y, )]
[FastMath]
[y]
[FastMath, ., abs, (, (, x, -, y, ), /, absoluteMax, )]
[FastMath]
[(, x, -, y, ), /, absoluteMax]
[(, x, -, y, )]
[x, -, y]
[x]
[y]
[absoluteMax]
[relativeDifference, <=, eps]
[relativeDifference]
[eps]
[equalsIncludingNaN, (, x, ,, y, ), ||, (, FastMath, ., abs, (, y, -, x, ), <=, eps, )]
[equalsIncludingNaN, (, x, ,, y, )]
[x]
[y]
[(, FastMath, ., abs, (, y, -, x, ), <=, eps, )]
[FastMath, ., abs, (, y, -, x, ), <=, eps]
[FastMath, ., abs, (, y, -, x, )]
[FastMath]
[y, -, x]
[y]
[x]
[eps]
[Double, ., doubleToLongBits, (, x, )]
[Double]
[x]
[Double, ., doubleToLongBits, (, y, )]
[Double]
[y]
[xInt, <, 0]
[xInt]
[0]
[xInt]
[SGN_MASK, -, xInt]
[SGN_MASK]
[xInt]
[yInt, <, 0]
[yInt]
[0]
[yInt]
[SGN_MASK, -, yInt]
[SGN_MASK]
[yInt]
[FastMath, ., abs, (, xInt, -, yInt, ), <=, maxUlps]
[FastMath, ., abs, (, xInt, -, yInt, )]
[FastMath]
[xInt, -, yInt]
[xInt]
[yInt]
[maxUlps]
[isEqual, &&, !, Double, ., isNaN, (, x, ), &&, !, Double, ., isNaN, (, y, )]
[isEqual, &&, !, Double, ., isNaN, (, x, )]
[isEqual]
[!, Double, ., isNaN, (, x, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[!, Double, ., isNaN, (, y, )]
[Double, ., isNaN, (, y, )]
[Double]
[y]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), ), ||, equals, (, x, ,, y, ,, maxUlps, )]
[(, Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, ), )]
[Double, ., isNaN, (, x, ), &&, Double, ., isNaN, (, y, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[Double, ., isNaN, (, y, )]
[Double]
[y]
[equals, (, x, ,, y, ,, maxUlps, )]
[x]
[y]
[maxUlps]
[round, (, x, ,, scale, ,, BigDecimal, ., ROUND_HALF_UP, )]
[x]
[scale]
[BigDecimal, ., ROUND_HALF_UP]
[BigDecimal]
[(, new, BigDecimal, (, Double, ., toString, (, x, ), ), ., setScale, (, scale, ,, roundingMethod, ), ), ., doubleValue, (, )]
[(, new, BigDecimal, (, Double, ., toString, (, x, ), ), ., setScale, (, scale, ,, roundingMethod, ), )]
[new, BigDecimal, (, Double, ., toString, (, x, ), ), ., setScale, (, scale, ,, roundingMethod, )]
[new, BigDecimal, (, Double, ., toString, (, x, ), )]
[Double, ., toString, (, x, )]
[Double]
[x]
[scale]
[roundingMethod]
[Double, ., isInfinite, (, x, )]
[Double]
[x]
[x]
[Double, ., NaN]
[Double]
[round, (, x, ,, scale, ,, BigDecimal, ., ROUND_HALF_UP, )]
[x]
[scale]
[BigDecimal, ., ROUND_HALF_UP]
[BigDecimal]
[FastMath, ., copySign, (, 1f, ,, x, )]
[FastMath]
[1f]
[x]
[(, float, ), FastMath, ., pow, (, 10.0f, ,, scale, ), *, sign]
[(, float, ), FastMath, ., pow, (, 10.0f, ,, scale, )]
[FastMath, ., pow, (, 10.0f, ,, scale, )]
[FastMath]
[10.0f]
[scale]
[sign]
[(, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, ), /, factor]
[(, float, ), roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, )]
[roundUnscaled, (, x, *, factor, ,, sign, ,, roundingMethod, )]
[x, *, factor]
[x]
[factor]
[sign]
[roundingMethod]
[factor]
[roundingMethod]
[BigDecimal, ., ROUND_CEILING]
[BigDecimal]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[unscaled]
[FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., NEGATIVE_INFINITY]
[Double]
[unscaled]
[FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., POSITIVE_INFINITY]
[Double]
[BigDecimal, ., ROUND_DOWN]
[BigDecimal]
[unscaled]
[FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., NEGATIVE_INFINITY]
[Double]
[BigDecimal, ., ROUND_FLOOR]
[BigDecimal]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[unscaled]
[FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., POSITIVE_INFINITY]
[Double]
[unscaled]
[FastMath, ., floor, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., NEGATIVE_INFINITY]
[Double]
[BigDecimal, ., ROUND_HALF_DOWN]
[BigDecimal]
[unscaled]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., NEGATIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., NEGATIVE_INFINITY]
[Double]
[unscaled, -, FastMath, ., floor, (, unscaled, )]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[fraction, >, 0.5]
[fraction]
[0.5]
[unscaled]
[FastMath, ., ceil, (, unscaled, )]
[FastMath]
[unscaled]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[BigDecimal, ., ROUND_HALF_EVEN]
[BigDecimal]
[unscaled, -, FastMath, ., floor, (, unscaled, )]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[fraction, >, 0.5]
[fraction]
[0.5]
[unscaled]
[FastMath, ., ceil, (, unscaled, )]
[FastMath]
[unscaled]
[fraction, <, 0.5]
[fraction]
[0.5]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[FastMath, ., floor, (, unscaled, ), /, 2.0, ==, FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, )]
[FastMath, ., floor, (, unscaled, ), /, 2.0]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[2.0]
[FastMath, ., floor, (, Math, ., floor, (, unscaled, ), /, 2.0, )]
[FastMath]
[Math, ., floor, (, unscaled, ), /, 2.0]
[Math, ., floor, (, unscaled, )]
[Math]
[unscaled]
[2.0]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[unscaled]
[FastMath, ., ceil, (, unscaled, )]
[FastMath]
[unscaled]
[BigDecimal, ., ROUND_HALF_UP]
[BigDecimal]
[unscaled]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., POSITIVE_INFINITY]
[Double]
[unscaled, -, FastMath, ., floor, (, unscaled, )]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[fraction, >=, 0.5]
[fraction]
[0.5]
[unscaled]
[FastMath, ., ceil, (, unscaled, )]
[FastMath]
[unscaled]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[BigDecimal, ., ROUND_UNNECESSARY]
[BigDecimal]
[unscaled, !=, FastMath, ., floor, (, unscaled, )]
[unscaled]
[FastMath, ., floor, (, unscaled, )]
[FastMath]
[unscaled]
[new, MathArithmeticException, (, )]
[BigDecimal, ., ROUND_UP]
[BigDecimal]
[unscaled]
[FastMath, ., ceil, (, FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, ), )]
[FastMath]
[FastMath, ., nextAfter, (, unscaled, ,, Double, ., POSITIVE_INFINITY, )]
[FastMath]
[unscaled]
[Double, ., POSITIVE_INFINITY]
[Double]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., INVALID_ROUNDING_METHOD, ,, roundingMethod, ,, "ROUND_CEILING", ,, BigDecimal, ., ROUND_CEILING, ,, "ROUND_DOWN", ,, BigDecimal, ., ROUND_DOWN, ,, "ROUND_FLOOR", ,, BigDecimal, ., ROUND_FLOOR, ,, "ROUND_HALF_DOWN", ,, BigDecimal, ., ROUND_HALF_DOWN, ,, "ROUND_HALF_EVEN", ,, BigDecimal, ., ROUND_HALF_EVEN, ,, "ROUND_HALF_UP", ,, BigDecimal, ., ROUND_HALF_UP, ,, "ROUND_UNNECESSARY", ,, BigDecimal, ., ROUND_UNNECESSARY, ,, "ROUND_UP", ,, BigDecimal, ., ROUND_UP, )]
[LocalizedFormats, ., INVALID_ROUNDING_METHOD]
[LocalizedFormats]
[roundingMethod]
["ROUND_CEILING"]
[BigDecimal, ., ROUND_CEILING]
[BigDecimal]
["ROUND_DOWN"]
[BigDecimal, ., ROUND_DOWN]
[BigDecimal]
["ROUND_FLOOR"]
[BigDecimal, ., ROUND_FLOOR]
[BigDecimal]
["ROUND_HALF_DOWN"]
[BigDecimal, ., ROUND_HALF_DOWN]
[BigDecimal]
["ROUND_HALF_EVEN"]
[BigDecimal, ., ROUND_HALF_EVEN]
[BigDecimal]
["ROUND_HALF_UP"]
[BigDecimal, ., ROUND_HALF_UP]
[BigDecimal]
["ROUND_UNNECESSARY"]
[BigDecimal, ., ROUND_UNNECESSARY]
[BigDecimal]
["ROUND_UP"]
[BigDecimal, ., ROUND_UP]
[BigDecimal]
[unscaled]
[x, +, originalDelta, -, x]
[x, +, originalDelta]
[x]
[originalDelta]
[x]
