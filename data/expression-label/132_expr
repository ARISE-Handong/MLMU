[200000]
[this, ., cfg]
[this]
[targetCfg]
[this, ., joinOp]
[this]
[joinOp]
[cfg, ., getOptionalNodeComparator, (, isForward, (, ), )]
[cfg]
[isForward, (, )]
[nodeComparator, !=, null]
[nodeComparator]
[null]
[this, ., orderedWorkSet]
[this]
[Sets, ., newTreeSet, (, nodeComparator, )]
[Sets]
[nodeComparator]
[this, ., orderedWorkSet]
[this]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[cfg]
[getCfg, (, ), ., getImplicitReturn, (, )]
[getCfg, (, )]
[node, ., getAnnotation, (, )]
[node]
[state, ., getIn, (, )]
[state]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[joinOp, ., apply, (, Lists, ., <, L, >, newArrayList, (, latticeA, ,, latticeB, ), )]
[joinOp]
[Lists, ., <, L, >, newArrayList, (, latticeA, ,, latticeB, )]
[Lists]
[latticeA]
[latticeB]
[analyze, (, MAX_STEPS, )]
[MAX_STEPS]
[initialize, (, )]
[0]
[!, orderedWorkSet, ., isEmpty, (, )]
[orderedWorkSet, ., isEmpty, (, )]
[orderedWorkSet]
[step, >, maxSteps]
[step]
[maxSteps]
[new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", )]
["Analysis did not terminate after ", +, maxSteps, +, " iterations"]
["Analysis did not terminate after ", +, maxSteps]
["Analysis did not terminate after "]
[maxSteps]
[" iterations"]
[orderedWorkSet, ., iterator, (, ), ., next, (, )]
[orderedWorkSet, ., iterator, (, )]
[orderedWorkSet]
[orderedWorkSet, ., remove, (, curNode, )]
[orderedWorkSet]
[curNode]
[joinInputs, (, curNode, )]
[curNode]
[flow, (, curNode, )]
[curNode]
[isForward, (, ), ?, cfg, ., getDirectedSuccNodes, (, curNode, ), :, cfg, ., getDirectedPredNodes, (, curNode, )]
[isForward, (, )]
[cfg, ., getDirectedSuccNodes, (, curNode, )]
[cfg]
[curNode]
[cfg, ., getDirectedPredNodes, (, curNode, )]
[cfg]
[curNode]
[nextNodes]
[nextNode, !=, cfg, ., getImplicitReturn, (, )]
[nextNode]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[orderedWorkSet, ., add, (, nextNode, )]
[orderedWorkSet]
[nextNode]
[step, ++]
[step]
[isForward, (, )]
[joinInputs, (, getCfg, (, ), ., getImplicitReturn, (, ), )]
[getCfg, (, ), ., getImplicitReturn, (, )]
[getCfg, (, )]
[orderedWorkSet, ., clear, (, )]
[orderedWorkSet]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[node, ., setAnnotation, (, new, FlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, createInitialEstimateLattice, (, ), ), )]
[node]
[new, FlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, createInitialEstimateLattice, (, ), )]
[createInitialEstimateLattice, (, )]
[createInitialEstimateLattice, (, )]
[node, !=, cfg, ., getImplicitReturn, (, )]
[node]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[orderedWorkSet, ., add, (, node, )]
[orderedWorkSet]
[node]
[node, ., getAnnotation, (, )]
[node]
[isForward, (, )]
[state, ., out]
[state]
[state, ., out]
[state]
[flowThrough, (, node, ., getValue, (, ), ,, state, ., in, )]
[node, ., getValue, (, )]
[node]
[state, ., in]
[state]
[!, outBefore, ., equals, (, state, ., out, )]
[outBefore, ., equals, (, state, ., out, )]
[outBefore]
[state, ., out]
[state]
[state, ., in]
[state]
[state, ., in]
[state]
[flowThrough, (, node, ., getValue, (, ), ,, state, ., out, )]
[node, ., getValue, (, )]
[node]
[state, ., out]
[state]
[!, inBefore, ., equals, (, state, ., in, )]
[inBefore, ., equals, (, state, ., in, )]
[inBefore]
[state, ., in]
[state]
[node, ., getAnnotation, (, )]
[node]
[isForward, (, )]
[cfg, ., getEntry, (, ), ==, node]
[cfg, ., getEntry, (, )]
[cfg]
[node]
[state, ., setIn, (, createEntryLattice, (, ), )]
[state]
[createEntryLattice, (, )]
[cfg, ., getDirectedPredNodes, (, node, )]
[cfg]
[node]
[inNodes, ., size, (, ), ==, 1]
[inNodes, ., size, (, )]
[inNodes]
[1]
[inNodes, ., get, (, 0, ), ., getAnnotation, (, )]
[inNodes, ., get, (, 0, )]
[inNodes]
[0]
[state, ., setIn, (, inNodeState, ., getOut, (, ), )]
[state]
[inNodeState, ., getOut, (, )]
[inNodeState]
[inNodes, ., size, (, ), >, 1]
[inNodes, ., size, (, )]
[inNodes]
[1]
[new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[inNodes, ., size, (, )]
[inNodes]
[inNodes]
[currentNode, ., getAnnotation, (, )]
[currentNode]
[values, ., add, (, currentNodeState, ., getOut, (, ), )]
[values]
[currentNodeState, ., getOut, (, )]
[currentNodeState]
[state, ., setIn, (, joinOp, ., apply, (, values, ), )]
[state]
[joinOp, ., apply, (, values, )]
[joinOp]
[values]
[cfg, ., getDirectedSuccNodes, (, node, )]
[cfg]
[node]
[inNodes, ., size, (, ), ==, 1]
[inNodes, ., size, (, )]
[inNodes]
[1]
[inNodes, ., get, (, 0, )]
[inNodes]
[0]
[inNode, ==, cfg, ., getImplicitReturn, (, )]
[inNode]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[state, ., setOut, (, createEntryLattice, (, ), )]
[state]
[createEntryLattice, (, )]
[inNode, ., getAnnotation, (, )]
[inNode]
[state, ., setOut, (, inNodeState, ., getIn, (, ), )]
[state]
[inNodeState, ., getIn, (, )]
[inNodeState]
[inNodes, ., size, (, ), >, 1]
[inNodes, ., size, (, )]
[inNodes]
[1]
[new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[inNodes, ., size, (, )]
[inNodes]
[inNodes]
[currentNode, ., getAnnotation, (, )]
[currentNode]
[values, ., add, (, currentNodeState, ., getIn, (, ), )]
[values]
[currentNodeState, ., getIn, (, )]
[currentNodeState]
[state, ., setOut, (, joinOp, ., apply, (, values, ), )]
[state]
[joinOp, ., apply, (, values, )]
[joinOp]
[values]
[Preconditions, ., checkNotNull, (, inState, )]
[Preconditions]
[inState]
[Preconditions, ., checkNotNull, (, outState, )]
[Preconditions]
[outState]
[this, ., in]
[this]
[inState]
[this, ., out]
[this]
[outState]
[in]
[Preconditions, ., checkNotNull, (, in, )]
[Preconditions]
[in]
[this, ., in]
[this]
[in]
[out]
[Preconditions, ., checkNotNull, (, out, )]
[Preconditions]
[out]
[this, ., out]
[this]
[out]
[String, ., format, (, "IN: %s OUT: %s", ,, in, ,, out, )]
[String]
["IN: %s OUT: %s"]
[in]
[out]
[Objects, ., hashCode, (, in, ,, out, )]
[Objects]
[in]
[out]
[1L]
[msg]
[orderedWorkSet, ., clear, (, )]
[orderedWorkSet]
[getCfg, (, ), ., getDirectedGraphNodes, (, )]
[getCfg, (, )]
[getCfg, (, ), ., getOutEdges, (, node, ., getValue, (, ), ), ., size, (, )]
[getCfg, (, ), ., getOutEdges, (, node, ., getValue, (, ), )]
[getCfg, (, )]
[node, ., getValue, (, )]
[node]
[Lists, ., newArrayList, (, )]
[Lists]
[0]
[i, <, outEdgeCount]
[i]
[outEdgeCount]
[i, ++]
[i]
[outLattices, ., add, (, createInitialEstimateLattice, (, ), )]
[outLattices]
[createInitialEstimateLattice, (, )]
[node, ., setAnnotation, (, new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, outLattices, ), )]
[node]
[new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, outLattices, )]
[createInitialEstimateLattice, (, )]
[outLattices]
[node, !=, getCfg, (, ), ., getImplicitReturn, (, )]
[node]
[getCfg, (, ), ., getImplicitReturn, (, )]
[getCfg, (, )]
[orderedWorkSet, ., add, (, node, )]
[orderedWorkSet]
[node]
[targetCfg]
[joinOp]
[getCfg, (, ), ., getImplicitReturn, (, )]
[getCfg, (, )]
[node, ., getAnnotation, (, )]
[node]
[state, ., getIn, (, )]
[state]
[true]
[node, ., getAnnotation, (, )]
[node]
[state, ., out]
[state]
[state, ., out]
[state]
[branchedFlowThrough, (, node, ., getValue, (, ), ,, state, ., in, )]
[node, ., getValue, (, )]
[node]
[state, ., in]
[state]
[Preconditions, ., checkState, (, outBefore, ., size, (, ), ==, state, ., out, ., size, (, ), )]
[Preconditions]
[outBefore, ., size, (, ), ==, state, ., out, ., size, (, )]
[outBefore, ., size, (, )]
[outBefore]
[state, ., out, ., size, (, )]
[state, ., out]
[state]
[0]
[i, <, outBefore, ., size, (, )]
[i]
[outBefore, ., size, (, )]
[outBefore]
[i, ++]
[i]
[!, outBefore, ., get, (, i, ), ., equals, (, state, ., out, ., get, (, i, ), )]
[outBefore, ., get, (, i, ), ., equals, (, state, ., out, ., get, (, i, ), )]
[outBefore, ., get, (, i, )]
[outBefore]
[i]
[state, ., out, ., get, (, i, )]
[state, ., out]
[state]
[i]
[true]
[false]
[node, ., getAnnotation, (, )]
[node]
[getCfg, (, ), ., getDirectedPredNodes, (, node, )]
[getCfg, (, )]
[node]
[new, ArrayList, <, L, >, (, predNodes, ., size, (, ), )]
[predNodes, ., size, (, )]
[predNodes]
[predNodes]
[predNode, ., getAnnotation, (, )]
[predNode]
[predNodeState, ., out, ., get, (, getCfg, (, ), ., getDirectedSuccNodes, (, predNode, ), ., indexOf, (, node, ), )]
[predNodeState, ., out]
[predNodeState]
[getCfg, (, ), ., getDirectedSuccNodes, (, predNode, ), ., indexOf, (, node, )]
[getCfg, (, ), ., getDirectedSuccNodes, (, predNode, )]
[getCfg, (, )]
[predNode]
[node]
[values, ., add, (, in, )]
[values]
[in]
[getCfg, (, ), ., getEntry, (, ), ==, node]
[getCfg, (, ), ., getEntry, (, )]
[getCfg, (, )]
[node]
[state, ., setIn, (, createEntryLattice, (, ), )]
[state]
[createEntryLattice, (, )]
[!, values, ., isEmpty, (, )]
[values, ., isEmpty, (, )]
[values]
[state, ., setIn, (, joinOp, ., apply, (, values, ), )]
[state]
[joinOp, ., apply, (, values, )]
[joinOp]
[values]
[Preconditions, ., checkNotNull, (, inState, )]
[Preconditions]
[inState]
[Preconditions, ., checkNotNull, (, outState, )]
[Preconditions]
[outState]
[this, ., in]
[this]
[inState]
[this, ., out]
[this]
[outState]
[in]
[Preconditions, ., checkNotNull, (, in, )]
[Preconditions]
[in]
[this, ., in]
[this]
[in]
[out]
[Preconditions, ., checkNotNull, (, out, )]
[Preconditions]
[out]
[out]
[Preconditions, ., checkNotNull, (, item, )]
[Preconditions]
[item]
[this, ., out]
[this]
[out]
[String, ., format, (, "IN: %s OUT: %s", ,, in, ,, out, )]
[String]
["IN: %s OUT: %s"]
[in]
[out]
[Objects, ., hashCode, (, in, ,, out, )]
[Objects]
[in]
[out]
[new, AbstractPostOrderCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, jsScope, ==, t, ., getScope, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }]
[jsScope, ==, t, ., getScope, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, )]
[jsScope, ==, t, ., getScope, (, ), ||, !, n, ., isName, (, )]
[jsScope, ==, t, ., getScope, (, )]
[jsScope]
[t, ., getScope, (, )]
[t]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[parent, ., isFunction, (, )]
[parent]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, !=, null, &&, var, ., scope, ==, jsScope]
[var, !=, null]
[var]
[null]
[var, ., scope, ==, jsScope]
[var, ., scope]
[var]
[jsScope]
[escaped, ., add, (, jsScope, ., getVar, (, name, ), )]
[escaped]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
[new, NodeTraversal, (, compiler, ,, finder, )]
[compiler]
[finder]
[t, ., traverseAtScope, (, jsScope, )]
[t]
[jsScope]
[jsScope, ., getVars, (, )]
[jsScope]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[var, ., getParentNode, (, ), ., isCatch, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., getName, (, ), )]
[var, ., getParentNode, (, ), ., isCatch, (, )]
[var, ., getParentNode, (, )]
[var]
[compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., getName, (, ), )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[var, ., getName, (, )]
[var]
[escaped, ., add, (, var, )]
[escaped]
[var]
