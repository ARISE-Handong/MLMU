[MACH_PREC]
[FastMath, ., ulp, (, 1., )]
[FastMath]
[1.]
[CBRT_MACH_PREC]
[FastMath, ., cbrt, (, MACH_PREC, )]
[FastMath]
[MACH_PREC]
[this, ., a]
[this]
[a]
[this, ., m]
[this]
[m]
[this, ., b]
[this]
[b]
[this, ., xL]
[this]
[new, ArrayRealVector, (, b, ., getDimension, (, ), )]
[b, ., getDimension, (, )]
[b]
[this, ., goodb]
[this]
[goodb]
[this, ., shift]
[this]
[shift]
[this, ., mb]
[this]
[m, ==, null, ?, b, :, m, ., operate, (, b, )]
[m, ==, null]
[m]
[null]
[b]
[m, ., operate, (, b, )]
[m]
[b]
[this, ., hasConverged]
[this]
[false]
[this, ., check]
[this]
[check]
[this, ., delta]
[this]
[delta]
[y, ., dotProduct, (, y, )]
[y]
[y]
[x, ., dotProduct, (, z, )]
[x]
[z]
[(, s, +, MACH_PREC, ), *, CBRT_MACH_PREC]
[(, s, +, MACH_PREC, )]
[s, +, MACH_PREC]
[s]
[MACH_PREC]
[CBRT_MACH_PREC]
[FastMath, ., abs, (, s, -, t, ), >, epsa]
[FastMath, ., abs, (, s, -, t, )]
[FastMath]
[s, -, t]
[s]
[t]
[epsa]
[e]
[new, NonSelfAdjointOperatorException, (, )]
[e, ., getContext, (, )]
[e]
[context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, )]
[context]
[SymmLQ, ., OPERATOR]
[SymmLQ]
[l]
[context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, )]
[context]
[SymmLQ, ., VECTOR1]
[SymmLQ]
[x]
[context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, )]
[context]
[SymmLQ, ., VECTOR2]
[SymmLQ]
[y]
[context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), )]
[context]
[SymmLQ, ., THRESHOLD]
[SymmLQ]
[Double, ., valueOf, (, epsa, )]
[Double]
[epsa]
[e]
[e]
[new, NonPositiveDefiniteOperatorException, (, )]
[e, ., getContext, (, )]
[e]
[context, ., setValue, (, OPERATOR, ,, l, )]
[context]
[OPERATOR]
[l]
[context, ., setValue, (, VECTOR, ,, v, )]
[context]
[VECTOR]
[v]
[e]
[x, ., getDimension, (, )]
[x]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +, y, ., getEntry, (, i, ), )]
[y]
[i]
[a, *, x, ., getEntry, (, i, ), +, y, ., getEntry, (, i, )]
[a, *, x, ., getEntry, (, i, )]
[a]
[x, ., getEntry, (, i, )]
[x]
[i]
[y, ., getEntry, (, i, )]
[y]
[i]
[z, ., getDimension, (, )]
[z]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[zi]
[a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, )]
[a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, )]
[a, *, x, ., getEntry, (, i, )]
[a]
[x, ., getEntry, (, i, )]
[x]
[i]
[b, *, y, ., getEntry, (, i, )]
[b]
[y, ., getEntry, (, i, )]
[y]
[i]
[z, ., getEntry, (, i, )]
[z]
[i]
[z, ., setEntry, (, i, ,, zi, )]
[z]
[i]
[zi]
[this, ., xL, ., getDimension, (, )]
[this, ., xL]
[this]
[lqnorm, <, cgnorm]
[lqnorm]
[cgnorm]
[!, goodb]
[goodb]
[x, ., setSubVector, (, 0, ,, this, ., xL, )]
[x]
[0]
[this, ., xL]
[this]
[bstep, /, beta1]
[bstep]
[beta1]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[mb, ., getEntry, (, i, )]
[mb]
[i]
[this, ., xL, ., getEntry, (, i, )]
[this, ., xL]
[this]
[i]
[x, ., setEntry, (, i, ,, xi, +, step, *, bi, )]
[x]
[i]
[xi, +, step, *, bi]
[xi]
[step, *, bi]
[step]
[bi]
[FastMath, ., sqrt, (, tnorm, )]
[FastMath]
[tnorm]
[gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar]
[gbar, ==, 0.]
[gbar]
[0.]
[anorm, *, MACH_PREC]
[anorm]
[MACH_PREC]
[gbar]
[gammaZeta, /, diag]
[gammaZeta]
[diag]
[(, bstep, +, snprod, *, zbar, ), /, beta1]
[(, bstep, +, snprod, *, zbar, )]
[bstep, +, snprod, *, zbar]
[bstep]
[snprod, *, zbar]
[snprod]
[zbar]
[beta1]
[!, goodb]
[goodb]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[this, ., xL, ., getEntry, (, i, )]
[this, ., xL]
[this]
[i]
[wbar, ., getEntry, (, i, )]
[wbar]
[i]
[x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, )]
[x]
[i]
[xi, +, zbar, *, wi]
[xi]
[zbar, *, wi]
[zbar]
[wi]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[this, ., xL, ., getEntry, (, i, )]
[this, ., xL]
[this]
[i]
[wbar, ., getEntry, (, i, )]
[wbar]
[i]
[mb, ., getEntry, (, i, )]
[mb]
[i]
[x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *, bi, )]
[x]
[i]
[xi, +, zbar, *, wi, +, step, *, bi]
[xi, +, zbar, *, wi]
[xi]
[zbar, *, wi]
[zbar]
[wi]
[step, *, bi]
[step]
[bi]
[this, ., xL, ., set, (, 0., )]
[this, ., xL]
[this]
[0.]
[this, ., r1]
[this]
[this, ., b, ., copy, (, )]
[this, ., b]
[this]
[this, ., y]
[this]
[this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, )]
[this, ., m, ==, null]
[this, ., m]
[this]
[null]
[this, ., b, ., copy, (, )]
[this, ., b]
[this]
[this, ., m, ., operate, (, this, ., r1, )]
[this, ., m]
[this]
[this, ., r1]
[this]
[(, this, ., m, !=, null, ), &&, this, ., check]
[(, this, ., m, !=, null, )]
[this, ., m, !=, null]
[this, ., m]
[this]
[null]
[this, ., check]
[this]
[checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), )]
[this, ., m]
[this]
[this, ., r1]
[this]
[this, ., y]
[this]
[this, ., m, ., operate, (, this, ., y, )]
[this, ., m]
[this]
[this, ., y]
[this]
[this, ., beta1]
[this]
[this, ., r1, ., dotProduct, (, this, ., y, )]
[this, ., r1]
[this]
[this, ., y]
[this]
[this, ., beta1, <, 0.]
[this, ., beta1]
[this]
[0.]
[throwNPDLOException, (, this, ., m, ,, this, ., y, )]
[this, ., m]
[this]
[this, ., y]
[this]
[this, ., beta1, ==, 0.]
[this, ., beta1]
[this]
[0.]
[this, ., bIsNull]
[this]
[true]
[this, ., bIsNull]
[this]
[false]
[this, ., beta1]
[this]
[FastMath, ., sqrt, (, this, ., beta1, )]
[FastMath]
[this, ., beta1]
[this]
[this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, )]
[this, ., y]
[this]
[1., /, this, ., beta1]
[1.]
[this, ., beta1]
[this]
[this, ., y]
[this]
[this, ., a, ., operate, (, v, )]
[this, ., a]
[this]
[v]
[this, ., check]
[this]
[checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), )]
[this, ., a]
[this]
[v]
[this, ., y]
[this]
[this, ., a, ., operate, (, this, ., y, )]
[this, ., a]
[this]
[this, ., y]
[this]
[daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, )]
[-, this, ., shift]
[this, ., shift]
[this]
[v]
[this, ., y]
[this]
[v, ., dotProduct, (, this, ., y, )]
[v]
[this, ., y]
[this]
[daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y, )]
[-, alpha, /, this, ., beta1]
[-, alpha]
[alpha]
[this, ., beta1]
[this]
[this, ., r1]
[this]
[this, ., y]
[this]
[v, ., dotProduct, (, this, ., y, )]
[v]
[this, ., y]
[this]
[v, ., dotProduct, (, v, )]
[v]
[v]
[daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, )]
[-, vty, /, vtv]
[-, vty]
[vty]
[vtv]
[v]
[this, ., y]
[this]
[this, ., r2]
[this]
[this, ., y, ., copy, (, )]
[this, ., y]
[this]
[this, ., m, !=, null]
[this, ., m]
[this]
[null]
[this, ., y]
[this]
[this, ., m, ., operate, (, this, ., r2, )]
[this, ., m]
[this]
[this, ., r2]
[this]
[this, ., oldb]
[this]
[this, ., beta1]
[this]
[this, ., beta]
[this]
[this, ., r2, ., dotProduct, (, this, ., y, )]
[this, ., r2]
[this]
[this, ., y]
[this]
[this, ., beta, <, 0.]
[this, ., beta]
[this]
[0.]
[throwNPDLOException, (, this, ., m, ,, this, ., y, )]
[this, ., m]
[this]
[this, ., y]
[this]
[this, ., beta]
[this]
[FastMath, ., sqrt, (, this, ., beta, )]
[FastMath]
[this, ., beta]
[this]
[this, ., cgnorm]
[this]
[this, ., beta1]
[this]
[this, ., gbar]
[this]
[alpha]
[this, ., dbar]
[this]
[this, ., beta]
[this]
[this, ., gammaZeta]
[this]
[this, ., beta1]
[this]
[this, ., minusEpsZeta]
[this]
[0.]
[this, ., bstep]
[this]
[0.]
[this, ., snprod]
[this]
[1.]
[this, ., tnorm]
[this]
[alpha, *, alpha, +, this, ., beta, *, this, ., beta]
[alpha, *, alpha]
[alpha]
[alpha]
[this, ., beta, *, this, ., beta]
[this, ., beta]
[this]
[this, ., beta]
[this]
[this, ., ynorm2]
[this]
[0.]
[this, ., gmax]
[this]
[FastMath, ., abs, (, alpha, ), +, MACH_PREC]
[FastMath, ., abs, (, alpha, )]
[FastMath]
[alpha]
[MACH_PREC]
[this, ., gmin]
[this]
[this, ., gmax]
[this]
[this, ., goodb]
[this]
[this, ., wbar]
[this]
[new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), )]
[this, ., a, ., getRowDimension, (, )]
[this, ., a]
[this]
[this, ., wbar, ., set, (, 0., )]
[this, ., wbar]
[this]
[0.]
[this, ., wbar]
[this]
[v]
[updateNorms, (, )]
[y, ., mapMultiply, (, 1., /, beta, )]
[y]
[1., /, beta]
[1.]
[beta]
[y]
[a, ., operate, (, v, )]
[a]
[v]
[daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,, y, )]
[-, shift]
[shift]
[v]
[-, beta, /, oldb]
[-, beta]
[beta]
[oldb]
[r1]
[y]
[v, ., dotProduct, (, y, )]
[v]
[y]
[daxpy, (, -, alpha, /, beta, ,, r2, ,, y, )]
[-, alpha, /, beta]
[-, alpha]
[alpha]
[beta]
[r2]
[y]
[r1]
[r2]
[r2]
[y]
[m, !=, null]
[m]
[null]
[y]
[m, ., operate, (, r2, )]
[m]
[r2]
[oldb]
[beta]
[beta]
[r2, ., dotProduct, (, y, )]
[r2]
[y]
[beta, <, 0.]
[beta]
[0.]
[throwNPDLOException, (, m, ,, y, )]
[m]
[y]
[beta]
[FastMath, ., sqrt, (, beta, )]
[FastMath]
[beta]
[tnorm]
[alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta]
[alpha, *, alpha, +, oldb, *, oldb]
[alpha, *, alpha]
[alpha]
[alpha]
[oldb, *, oldb]
[oldb]
[oldb]
[beta, *, beta]
[beta]
[beta]
[FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, )]
[FastMath]
[gbar, *, gbar, +, oldb, *, oldb]
[gbar, *, gbar]
[gbar]
[gbar]
[oldb, *, oldb]
[oldb]
[oldb]
[gbar, /, gamma]
[gbar]
[gamma]
[oldb, /, gamma]
[oldb]
[gamma]
[c, *, dbar, +, s, *, alpha]
[c, *, dbar]
[c]
[dbar]
[s, *, alpha]
[s]
[alpha]
[gbar]
[s, *, dbar, -, c, *, alpha]
[s, *, dbar]
[s]
[dbar]
[c, *, alpha]
[c]
[alpha]
[s, *, beta]
[s]
[beta]
[dbar]
[-, c, *, beta]
[-, c]
[c]
[beta]
[gammaZeta, /, gamma]
[gammaZeta]
[gamma]
[zeta, *, c]
[zeta]
[c]
[zeta, *, s]
[zeta]
[s]
[xL, ., getDimension, (, )]
[xL]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[xL, ., getEntry, (, i, )]
[xL]
[i]
[v, ., getEntry, (, i, )]
[v]
[i]
[wbar, ., getEntry, (, i, )]
[wbar]
[i]
[xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, )]
[xL]
[i]
[xi, +, wi, *, zetaC, +, vi, *, zetaS]
[xi, +, wi, *, zetaC]
[xi]
[wi, *, zetaC]
[wi]
[zetaC]
[vi, *, zetaS]
[vi]
[zetaS]
[wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, )]
[wbar]
[i]
[wi, *, s, -, vi, *, c]
[wi, *, s]
[wi]
[s]
[vi, *, c]
[vi]
[c]
[bstep]
[snprod, *, c, *, zeta]
[snprod, *, c]
[snprod]
[c]
[zeta]
[snprod]
[s]
[gmax]
[FastMath, ., max, (, gmax, ,, gamma, )]
[FastMath]
[gmax]
[gamma]
[gmin]
[FastMath, ., min, (, gmin, ,, gamma, )]
[FastMath]
[gmin]
[gamma]
[ynorm2]
[zeta, *, zeta]
[zeta]
[zeta]
[gammaZeta]
[minusEpsZeta, -, deltak, *, zeta]
[minusEpsZeta]
[deltak, *, zeta]
[deltak]
[zeta]
[minusEpsZeta]
[-, eps, *, zeta]
[-, eps]
[eps]
[zeta]
[updateNorms, (, )]
[FastMath, ., sqrt, (, tnorm, )]
[FastMath]
[tnorm]
[FastMath, ., sqrt, (, ynorm2, )]
[FastMath]
[ynorm2]
[anorm, *, MACH_PREC]
[anorm]
[MACH_PREC]
[anorm, *, ynorm, *, MACH_PREC]
[anorm, *, ynorm]
[anorm]
[ynorm]
[MACH_PREC]
[anorm, *, ynorm, *, delta]
[anorm, *, ynorm]
[anorm]
[ynorm]
[delta]
[gbar, ==, 0., ?, epsa, :, gbar]
[gbar, ==, 0.]
[gbar]
[0.]
[epsa]
[gbar]
[lqnorm]
[FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, )]
[FastMath]
[gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta]
[gammaZeta, *, gammaZeta]
[gammaZeta]
[gammaZeta]
[minusEpsZeta, *, minusEpsZeta]
[minusEpsZeta]
[minusEpsZeta]
[snprod, *, beta1]
[snprod]
[beta1]
[cgnorm]
[qrnorm, *, beta, /, FastMath, ., abs, (, diag, )]
[qrnorm, *, beta]
[qrnorm]
[beta]
[FastMath, ., abs, (, diag, )]
[FastMath]
[diag]
[lqnorm, <=, cgnorm]
[lqnorm]
[cgnorm]
[acond]
[gmax, /, gmin]
[gmax]
[gmin]
[acond]
[gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), )]
[gmax]
[FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), )]
[FastMath]
[gmin]
[FastMath, ., abs, (, diag, )]
[FastMath]
[diag]
[acond, *, MACH_PREC, >=, 0.1]
[acond, *, MACH_PREC]
[acond]
[MACH_PREC]
[0.1]
[new, IllConditionedOperatorException, (, acond, )]
[acond]
[beta1, <=, epsx]
[beta1]
[epsx]
[new, SingularOperatorException, (, )]
[rnorm]
[FastMath, ., min, (, cgnorm, ,, lqnorm, )]
[FastMath]
[cgnorm]
[lqnorm]
[hasConverged]
[(, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, )]
[(, cgnorm, <=, epsx, )]
[cgnorm, <=, epsx]
[cgnorm]
[epsx]
[(, cgnorm, <=, epsr, )]
[cgnorm, <=, epsr]
[cgnorm]
[epsr]
[hasConverged]
[bIsNull]
[beta, <, MACH_PREC]
[beta]
[MACH_PREC]
[rnorm]
["operator"]
["threshold"]
["vector"]
["vector1"]
["vector2"]
[maxIterations]
[this, ., delta]
[this]
[delta]
[this, ., check]
[this]
[check]
[manager]
[this, ., delta]
[this]
[delta]
[this, ., check]
[this]
[check]
[check]
[MathUtils, ., checkNotNull, (, a, )]
[MathUtils]
[a]
[new, ArrayRealVector, (, a, ., getColumnDimension, (, ), )]
[a, ., getColumnDimension, (, )]
[a]
[solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,, 0., )]
[a]
[m]
[b]
[x]
[false]
[0.]
[MathUtils, ., checkNotNull, (, a, )]
[MathUtils]
[a]
[new, ArrayRealVector, (, a, ., getColumnDimension, (, ), )]
[a, ., getColumnDimension, (, )]
[a]
[solveInPlace, (, a, ,, m, ,, b, ,, x, ,, goodb, ,, shift, )]
[a]
[m]
[b]
[x]
[goodb]
[shift]
[MathUtils, ., checkNotNull, (, x, )]
[MathUtils]
[x]
[solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., )]
[a]
[m]
[b]
[x, ., copy, (, )]
[x]
[false]
[0.]
[MathUtils, ., checkNotNull, (, a, )]
[MathUtils]
[a]
[new, ArrayRealVector, (, a, ., getColumnDimension, (, ), )]
[a, ., getColumnDimension, (, )]
[a]
[x, ., set, (, 0., )]
[x]
[0.]
[solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,, 0., )]
[a]
[null]
[b]
[x]
[false]
[0.]
[MathUtils, ., checkNotNull, (, a, )]
[MathUtils]
[a]
[new, ArrayRealVector, (, a, ., getColumnDimension, (, ), )]
[a, ., getColumnDimension, (, )]
[a]
[solveInPlace, (, a, ,, null, ,, b, ,, x, ,, goodb, ,, shift, )]
[a]
[null]
[b]
[x]
[goodb]
[shift]
[MathUtils, ., checkNotNull, (, x, )]
[MathUtils]
[x]
[solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, ), ,, false, ,, 0., )]
[a]
[null]
[b]
[x, ., copy, (, )]
[x]
[false]
[0.]
[solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,, 0., )]
[a]
[m]
[b]
[x]
[false]
[0.]
[checkParameters, (, a, ,, m, ,, b, ,, x, )]
[a]
[m]
[b]
[x]
[getIterationManager, (, )]
[manager, ., resetIterationCount, (, )]
[manager]
[manager, ., incrementIterationCount, (, )]
[manager]
[state]
[new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, )]
[a]
[m]
[b]
[goodb]
[shift]
[delta]
[check]
[state, ., init, (, )]
[state]
[state, ., refineSolution, (, x, )]
[state]
[x]
[event]
[new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), )]
[this]
[manager, ., getIterations, (, )]
[manager]
[x]
[b]
[state, ., getNormOfResidual, (, )]
[state]
[state, ., bEqualsNullVector, (, )]
[state]
[manager, ., fireTerminationEvent, (, event, )]
[manager]
[event]
[x]
[earlyStop]
[state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, )]
[state, ., betaEqualsZero, (, )]
[state]
[state, ., hasConverged, (, )]
[state]
[manager, ., fireInitializationEvent, (, event, )]
[manager]
[event]
[!, earlyStop]
[earlyStop]
[manager, ., incrementIterationCount, (, )]
[manager]
[event]
[new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), )]
[this]
[manager, ., getIterations, (, )]
[manager]
[x]
[b]
[state, ., getNormOfResidual, (, )]
[state]
[manager, ., fireIterationStartedEvent, (, event, )]
[manager]
[event]
[state, ., update, (, )]
[state]
[state, ., refineSolution, (, x, )]
[state]
[x]
[event]
[new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), )]
[this]
[manager, ., getIterations, (, )]
[manager]
[x]
[b]
[state, ., getNormOfResidual, (, )]
[state]
[manager, ., fireIterationPerformedEvent, (, event, )]
[manager]
[event]
[!, state, ., hasConverged, (, )]
[state, ., hasConverged, (, )]
[state]
[event]
[new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), )]
[this]
[manager, ., getIterations, (, )]
[manager]
[x]
[b]
[state, ., getNormOfResidual, (, )]
[state]
[manager, ., fireTerminationEvent, (, event, )]
[manager]
[event]
[x]
[solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,, 0., )]
[a]
[null]
[b]
[x]
[false]
[0.]
