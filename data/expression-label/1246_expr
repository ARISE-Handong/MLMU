[Maps, ., newTreeMap, (, )]
[Maps]
[LinkedDirectedGraph, ., createWithoutAnnotations, (, )]
[LinkedDirectedGraph]
[LinkedListMultimap, ., create, (, )]
[LinkedListMultimap]
[".prototype."]
[PROTOTYPE_SUBSTRING, ., length, (, )]
[PROTOTYPE_SUBSTRING]
[".prototype", ., length, (, )]
[".prototype"]
["window"]
["Function"]
[ImmutableSet, ., of, (, "window", ,, "goog.global", )]
[ImmutableSet]
["window"]
["goog.global"]
[Sets, ., newHashSet, (, )]
[Sets]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[Sets, ., newHashSet, (, )]
[Sets]
[names, ., add, (, name1, )]
[names]
[name1]
[names, ., add, (, name2, )]
[names]
[name2]
[from, ., referenced, &&, !, to, ., referenced]
[from, ., referenced]
[from]
[!, to, ., referenced]
[to, ., referenced]
[to]
[to, ., referenced]
[to]
[true]
[true]
[false]
[false]
[false]
[null]
[null]
[null]
[false]
[Lists, ., newArrayList, (, )]
[Lists]
[false]
[false]
[false]
[false]
[new, StringBuilder, (, )]
[out, ., append, (, name, )]
[out]
[name]
[prototypeNames, ., size, (, ), >, 0]
[prototypeNames, ., size, (, )]
[prototypeNames]
[0]
[out, ., append, (, " (CLASS)\n", )]
[out]
[" (CLASS)\n"]
[out, ., append, (, " - FUNCTIONS: ", )]
[out]
[" - FUNCTIONS: "]
[prototypeNames, ., iterator, (, )]
[prototypeNames]
[pIter, ., hasNext, (, )]
[pIter]
[out, ., append, (, pIter, ., next, (, ), )]
[out]
[pIter, ., next, (, )]
[pIter]
[pIter, ., hasNext, (, )]
[pIter]
[out, ., append, (, ", ", )]
[out]
[", "]
[out, ., toString, (, )]
[out]
[this, ., name, ., compareTo, (, rhs, ., name, )]
[this, ., name]
[this]
[rhs, ., name]
[rhs]
[@, SuppressWarnings, (, "unused", )]
["unused"]
[this, ., name]
[this]
[name]
[this, ., node]
[this]
[node]
[this, ., parent]
[this]
[node, ., getParent, (, )]
[node]
[name]
[parent, ., getParent, (, )]
[parent]
[parent, ., getType, (, )]
[parent]
[Token, ., VAR]
[Token]
[Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), )]
[Preconditions]
[parent, ., hasOneChild, (, )]
[parent]
[replaceWithRhs, (, containingNode, ,, parent, )]
[containingNode]
[parent]
[Token, ., FUNCTION]
[Token]
[replaceWithRhs, (, containingNode, ,, parent, )]
[containingNode]
[parent]
[Token, ., ASSIGN]
[Token]
[containingNode, ., isExprResult, (, )]
[containingNode]
[replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, )]
[containingNode, ., getParent, (, )]
[containingNode]
[containingNode]
[replaceWithRhs, (, containingNode, ,, parent, )]
[containingNode]
[parent]
[Token, ., OBJECTLIT]
[Token]
[name]
[parent, ., getFirstChild, (, )]
[parent]
[Preconditions, ., checkState, (, parent, ., isAssign, (, ), )]
[Preconditions]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[gramps, ., isExprResult, (, )]
[gramps]
[changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, )]
[changeProxy]
[gramps, ., getParent, (, )]
[gramps]
[gramps]
[changeProxy, ., replaceWith, (, gramps, ,, parent, ,, parent, ., getLastChild, (, ), ., detachFromParent, (, ), )]
[changeProxy]
[gramps]
[parent]
[parent, ., getLastChild, (, ), ., detachFromParent, (, )]
[parent, ., getLastChild, (, )]
[parent]
[this, ., name]
[this]
[name]
[this, ., node]
[this]
[node]
[name]
[node, ., getParent, (, )]
[node]
[node, ., getParent, (, ), ==, null, ?, null, :, node, ., getParent, (, ), ., getParent, (, )]
[node, ., getParent, (, ), ==, null]
[node, ., getParent, (, )]
[node]
[null]
[null]
[node, ., getParent, (, ), ., getParent, (, )]
[node, ., getParent, (, )]
[node]
[name]
[node]
[Preconditions, ., checkState, (, node, ., isCall, (, ), )]
[Preconditions]
[node, ., isCall, (, )]
[node]
[Preconditions, ., checkState, (, node, ., isCall, (, ), )]
[Preconditions]
[node, ., isCall, (, )]
[node]
[getParent, (, )]
[parent, ., isExprResult, (, )]
[parent]
[changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, )]
[changeProxy]
[getGramps, (, )]
[parent]
[changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ), )]
[changeProxy]
[parent]
[node]
[IR, ., voidNode, (, IR, ., number, (, 0, ), )]
[IR]
[IR, ., number, (, 0, )]
[IR]
[0]
[name]
[node]
[Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), )]
[Preconditions]
[node, ., isQualifiedName, (, )]
[node]
[Preconditions, ., checkState, (, getParent, (, ), ., isInstanceOf, (, ), )]
[Preconditions]
[getParent, (, ), ., isInstanceOf, (, )]
[getParent, (, )]
[changeProxy, ., replaceWith, (, getGramps, (, ), ,, getParent, (, ), ,, IR, ., falseNode, (, ), )]
[changeProxy]
[getGramps, (, )]
[getParent, (, )]
[IR, ., falseNode, (, )]
[IR]
[null]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[ns]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[ns]
[createNameInformation, (, t, ,, n, ., getFirstChild, (, ), )]
[t]
[n, ., getFirstChild, (, )]
[n]
[ns, !=, null]
[ns]
[null]
[getName, (, ns, ., name, ,, true, )]
[ns, ., name]
[ns]
[true]
[jsName, ., externallyDefined]
[jsName]
[true]
[externalNames, ., add, (, ns, ., name, )]
[externalNames]
[ns, ., name]
[ns]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[n, ., isAssign, (, )]
[n]
[recordAssignment, (, t, ,, n, ,, n, )]
[t]
[n]
[n]
[!, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), )]
[NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), )]
[NodeUtil]
[n, ., getLastChild, (, )]
[n]
[recordConsumers, (, t, ,, n, ,, n, )]
[t]
[n]
[n]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[recordDepScope, (, n, ,, ns, )]
[n]
[ns]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[createNameInformation, (, t, ,, n, ., getFirstChild, (, ), )]
[t]
[n, ., getFirstChild, (, )]
[n]
[recordDepScope, (, n, ,, ns, )]
[n]
[ns]
[NodeUtil, ., isExprCall, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[callNode, ., getFirstChild, (, )]
[callNode]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[ns, !=, null, &&, ns, ., onlyAffectsClassDef]
[ns, !=, null]
[ns]
[null]
[ns, ., onlyAffectsClassDef]
[ns]
[recordDepScope, (, n, ,, ns, )]
[n]
[ns]
[n, ., getParent, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., ASSIGN]
[Token]
[n, ==, parent, ., getLastChild, (, )]
[n]
[parent, ., getLastChild, (, )]
[parent]
[recordAssignment, (, t, ,, parent, ,, recordNode, )]
[t]
[parent]
[recordNode]
[recordConsumers, (, t, ,, parent, ,, recordNode, )]
[t]
[parent]
[recordNode]
[Token, ., NAME]
[Token]
[createNameInformation, (, t, ,, parent, )]
[t]
[parent]
[recordDepScope, (, recordNode, ,, ns, )]
[recordNode]
[ns]
[Token, ., OR]
[Token]
[recordConsumers, (, t, ,, parent, ,, recordNode, )]
[t]
[parent]
[recordNode]
[Token, ., AND]
[Token]
[Token, ., COMMA]
[Token]
[Token, ., HOOK]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[recordConsumers, (, t, ,, parent, ,, recordNode, )]
[t]
[parent]
[recordNode]
[n, ., getFirstChild, (, )]
[n]
[n, ., getParent, (, )]
[n]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[ns, !=, null]
[ns]
[null]
[parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, )]
[parent, ., isFor, (, )]
[parent]
[!, NodeUtil, ., isForIn, (, parent, )]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[recordDepScope, (, recordNode, ,, ns, )]
[recordNode]
[ns]
[recordDepScope, (, nameNode, ,, ns, )]
[nameNode]
[ns]
[recordDepScope, (, recordNode, ,, ns, )]
[recordNode]
[ns]
[Preconditions, ., checkNotNull, (, name, )]
[Preconditions]
[name]
[scopes, ., put, (, node, ,, name, )]
[scopes]
[node]
[name]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", )]
[Preconditions]
[ns]
["NameInformation is null"]
[createName, (, ns, ., name, )]
[ns, ., name]
[ns]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", )]
[Preconditions]
[ns]
["NameInformation is null"]
[createName, (, nameNode, ., getString, (, ), )]
[nameNode, ., getString, (, )]
[nameNode]
[t, ., inGlobalScope, (, )]
[t]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[Preconditions, ., checkNotNull, (, ns, )]
[Preconditions]
[ns]
[recordSet, (, ns, ., name, ,, n, )]
[ns, ., name]
[ns]
[n]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[ns, !=, null]
[ns]
[null]
[getName, (, nameNode, ., getString, (, ), ,, true, )]
[nameNode, ., getString, (, )]
[nameNode]
[true]
[recordSet, (, nameInfo, ., name, ,, nameNode, )]
[nameInfo, ., name]
[nameInfo]
[nameNode]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[ns, !=, null]
[ns]
[null]
[recordSet, (, ns, ., name, ,, n, )]
[ns, ., name]
[ns]
[n]
[n, ., isAssign, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[ns, !=, null]
[ns]
[null]
[ns, ., isPrototype]
[ns]
[recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, )]
[ns, ., prototypeClass]
[ns]
[ns, ., prototypeProperty]
[ns]
[n]
[recordSet, (, ns, ., name, ,, nameNode, )]
[ns, ., name]
[ns]
[nameNode]
[n, ., isCall, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[createNameInformation, (, t, ,, nameNode, )]
[t]
[nameNode]
[ns, !=, null, &&, ns, ., onlyAffectsClassDef]
[ns, !=, null]
[ns]
[null]
[ns, ., onlyAffectsClassDef]
[ns]
[getName, (, ns, ., name, ,, true, )]
[ns, ., name]
[ns]
[true]
[refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), )]
[refNodes]
[new, ClassDefiningFunctionNode, (, name, ,, n, )]
[name]
[n]
[getName, (, name, ,, true, )]
[name]
[true]
[new, JsNameRefNode, (, jsn, ,, node, )]
[jsn]
[node]
[refNodes, ., add, (, nameRefNode, )]
[refNodes]
[nameRefNode]
[node, ., isGetElem, (, )]
[node]
[recordWriteOnProperties, (, name, )]
[name]
[name, ., indexOf, (, '.', ), !=, -, 1]
[name, ., indexOf, (, '.', )]
[name]
['.']
[-, 1]
[1]
[recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), ), )]
[name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), )]
[name]
[0]
[name, ., lastIndexOf, (, '.', )]
[name]
['.']
[getName, (, className, ,, true, )]
[className]
[true]
[name, ., prototypeNames, ., add, (, prototypeProperty, )]
[name, ., prototypeNames]
[name]
[prototypeProperty]
[refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), )]
[refNodes]
[new, PrototypeSetNode, (, name, ,, node, )]
[name]
[node]
[recordWriteOnProperties, (, className, )]
[className]
[getName, (, parentName, ,, true, )]
[parentName]
[true]
[parent, ., hasWrittenDescendants]
[parent]
[parent, ., hasWrittenDescendants]
[parent]
[true]
[parentName, ., indexOf, (, '.', ), ==, -, 1]
[parentName, ., indexOf, (, '.', )]
[parentName]
['.']
[-, 1]
[1]
[parentName]
[parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), )]
[parentName]
[0]
[parentName, ., lastIndexOf, (, '.', )]
[parentName]
['.']
[true]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, if, (, input, ., isCall, (, ), ), {, return, false, ;, }, return, true, ;, }, }]
[input, ., isCall, (, )]
[input]
[false]
[true]
[nodesToKeep]
[Sets, ., newHashSet, (, )]
[Sets]
[nodesToKeep, ., add, (, n, )]
[nodesToKeep]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[addAllChildren, (, child, )]
[child]
[NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, NodeAccumulator, (, ), ), )]
[NodeTraversal]
[compiler]
[n]
[new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, NodeAccumulator, (, ), )]
[compiler]
[new, NodeAccumulator, (, )]
[parent, ., isVar, (, )]
[parent]
[n, ., getFirstChild, (, )]
[n]
[value, !=, null]
[value]
[null]
[addSimplifiedChildren, (, value, )]
[value]
[n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), )]
[n, ., isAssign, (, )]
[n]
[(, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), )]
[parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, )]
[parent, ., isExprResult, (, ), ||, parent, ., isFor, (, )]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., isFor, (, )]
[parent]
[parent, ., isReturn, (, )]
[parent]
[n, ., children, (, )]
[n]
[addSimplifiedChildren, (, child, )]
[child]
[n, ., isCall, (, ), &&, parent, ., isExprResult, (, )]
[n, ., isCall, (, )]
[n]
[parent, ., isExprResult, (, )]
[parent]
[addSimplifiedChildren, (, n, )]
[n]
[addAllChildren, (, n, )]
[n]
[parent, ==, null]
[parent]
[null]
[true]
[n, ., isFor, (, )]
[n]
[!, NodeUtil, ., isForIn, (, n, )]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[decl, ., getNext, (, )]
[decl]
[pred, ., getNext, (, )]
[pred]
[addSimplifiedExpression, (, decl, ,, n, )]
[decl]
[n]
[addSimplifiedExpression, (, pred, ,, n, )]
[pred]
[n]
[addSimplifiedExpression, (, step, ,, n, )]
[step]
[n]
[n, ., getFirstChild, (, )]
[n]
[decl, ., getNext, (, )]
[decl]
[addAllChildren, (, decl, )]
[decl]
[addAllChildren, (, iter, )]
[iter]
[parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, )]
[parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, )]
[parent, ., isVar, (, ), ||, parent, ., isExprResult, (, )]
[parent, ., isVar, (, )]
[parent]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., isReturn, (, )]
[parent]
[parent, ., isThrow, (, )]
[parent]
[addSimplifiedExpression, (, n, ,, parent, )]
[n]
[parent]
[(, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n]
[(, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), )]
[parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, )]
[parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, )]
[parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, )]
[parent, ., isIf, (, ), ||, parent, ., isWhile, (, )]
[parent, ., isIf, (, )]
[parent]
[parent, ., isWhile, (, )]
[parent]
[parent, ., isWith, (, )]
[parent]
[parent, ., isSwitch, (, )]
[parent]
[parent, ., isCase, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[addAllChildren, (, n, )]
[n]
[parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n]
[parent, ., isDo, (, )]
[parent]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[addAllChildren, (, n, )]
[n]
[true]
[!, (, n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), )]
[(, n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), )]
[n, ., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, )]
[n, ., isName, (, )]
[n]
[NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, )]
[NodeUtil, ., isGet, (, n, )]
[NodeUtil]
[n]
[!, parent, ., isGetProp, (, )]
[parent, ., isGetProp, (, )]
[parent]
[createNameInformation, (, t, ,, n, )]
[t]
[n]
[nameInfo, ==, null]
[nameInfo]
[null]
[nameInfo, ., onlyAffectsClassDef]
[nameInfo]
[nameInfo, ., superclass, !=, null]
[nameInfo, ., superclass]
[nameInfo]
[null]
[recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, )]
[nameInfo, ., name]
[nameInfo]
[nameInfo, ., superclass]
[nameInfo]
[RefType, ., INHERITANCE]
[RefType]
[n, ., getQualifiedName, (, )]
[n]
[nodeName, !=, null]
[nodeName]
[null]
[recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, )]
[nameInfo, ., name]
[nameInfo]
[nodeName]
[RefType, ., REGULAR]
[RefType]
[parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, )]
[parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n]
[parent, ., isInstanceOf, (, )]
[parent]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[n, ., isQualifiedName, (, )]
[n]
[getName, (, nameInfo, ., name, ,, true, )]
[nameInfo, ., name]
[nameInfo]
[true]
[refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), )]
[refNodes]
[new, InstanceOfCheckNode, (, checkedClass, ,, n, )]
[checkedClass]
[n]
[checkedClass, ., hasInstanceOfReference]
[checkedClass]
[true]
[getDependencyScope, (, n, )]
[n]
[referers, ., isEmpty, (, )]
[referers]
[maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, null, )]
[t]
[n]
[parent]
[nameInfo]
[null]
[referers]
[maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, referring, )]
[t]
[n]
[parent]
[nameInfo]
[referring]
[recordAliases, (, referers, )]
[referers]
[""]
[referring, !=, null]
[referring]
[null]
[referringName]
[referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name]
[referring, ., isPrototype]
[referring]
[referring, ., prototypeClass]
[referring]
[referring, ., name]
[referring]
[nameInfo, ., name]
[nameInfo]
[maybeHiddenAlias, (, name, ,, n, )]
[name]
[n]
[recordAlias, (, name, ,, WINDOW, )]
[name]
[WINDOW]
[nameInfo, ., isExternallyReferenceable]
[nameInfo]
[recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, )]
[WINDOW]
[name]
[RefType, ., REGULAR]
[RefType]
[maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, )]
[name]
[parent]
[referring]
[referringName]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[referring, !=, null]
[referring]
[null]
[recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, )]
[referringName]
[name]
[RefType, ., REGULAR]
[RefType]
[nodesToKeep, ., contains, (, n, )]
[nodesToKeep]
[n]
[getEnclosingFunctionDependencyScope, (, t, )]
[t]
[!, functionScopes, ., isEmpty, (, )]
[functionScopes, ., isEmpty, (, )]
[functionScopes]
[functionScopes]
[recordReference, (, functionScope, ., name, ,, name, ,, RefType, ., REGULAR, )]
[functionScope, ., name]
[functionScope]
[name]
[RefType, ., REGULAR]
[RefType]
[recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, )]
[WINDOW]
[name]
[RefType, ., REGULAR]
[RefType]
[referring, !=, null]
[referring]
[null]
[maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, )]
[name]
[parent]
[referring]
[referringName]
[referring, !=, null]
[referring]
[null]
[!, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, )]
[maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, )]
[name]
[parent]
[referring]
[referringName]
[referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR]
[referring, ., onlyAffectsClassDef]
[referring]
[RefType, ., INHERITANCE]
[RefType]
[RefType, ., REGULAR]
[RefType]
[recordReference, (, referringName, ,, name, ,, depType, )]
[referringName]
[name]
[depType]
[n, ., getAncestors, (, )]
[n]
[NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, )]
[NodeUtil, ., isAssignmentOp, (, ancestor, )]
[NodeUtil]
[ancestor]
[ancestor, ., isFunction, (, )]
[ancestor]
[recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, )]
[WINDOW]
[name]
[RefType, ., REGULAR]
[RefType]
[referers, ., size, (, )]
[referers]
[0]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[i, +, 1]
[i]
[1]
[j, <, size]
[j]
[size]
[j, ++]
[j]
[recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, )]
[referers, ., get, (, i, ), ., name]
[referers, ., get, (, i, )]
[referers]
[i]
[referers, ., get, (, j, ), ., name]
[referers, ., get, (, j, )]
[referers]
[j]
[recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (, i, ), ., name, )]
[referers, ., get, (, j, ), ., name]
[referers, ., get, (, j, )]
[referers]
[j]
[referers, ., get, (, i, ), ., name]
[referers, ., get, (, i, )]
[referers]
[i]
[n, ., getParent, (, )]
[n]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[(, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, )]
[(, parent, ., isVar, (, ), )]
[parent, ., isVar, (, )]
[parent]
[n, ., getFirstChild, (, )]
[n]
[parent, ., getLastChild, (, )]
[parent]
[(, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), )]
[rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, )]
[rhs, !=, null]
[rhs]
[null]
[!, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, )]
[NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, )]
[NodeUtil]
[rhs]
[NON_LOCAL_RESULT_PREDICATE]
[false]
[parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), )]
[parent, ., isAssign, (, )]
[parent]
[NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), )]
[NodeUtil]
[parent, ., getFirstChild, (, )]
[parent]
[(, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, )]
[(, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null]
[(, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment]
[(, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), )]
[parent, ., isName, (, ), ||, parent, ., isAssign, (, )]
[parent, ., isName, (, )]
[parent]
[parent, ., isAssign, (, )]
[parent]
[!, isPrototypePropAssignment]
[isPrototypePropAssignment]
[referring, !=, null]
[referring]
[null]
[scopes, ., get, (, parent, ), ., contains, (, referring, )]
[scopes, ., get, (, parent, )]
[scopes]
[parent]
[referring]
[recordAlias, (, referringName, ,, name, )]
[referringName]
[name]
[true]
[false]
[false]
[addAllChildren, (, original, )]
[original]
[original, ., getFirstChild, (, )]
[original]
[condition, ., getNext, (, )]
[condition]
[addAllChildren, (, condition, )]
[condition]
[addSimplifiedChildren, (, thenBranch, )]
[thenBranch]
[hook, ., getFirstChild, (, )]
[hook]
[condition, ., getNext, (, )]
[condition]
[thenBranch, ., getNext, (, )]
[thenBranch]
[addAllChildren, (, condition, )]
[condition]
[thenHasSideEffects]
[addSimplifiedChildren, (, thenBranch, )]
[thenBranch]
[elseHasSideEffects]
[addSimplifiedChildren, (, elseBranch, )]
[elseBranch]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[this, ., removeUnreferenced]
[this]
[removeUnreferenced]
[this, ., globalNames]
[this]
[DEFAULT_GLOBAL_NAMES]
[this, ., changeProxy]
[this]
[new, AstChangeProxy, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, ProcessExternals, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindDependencyScopes, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, HoistVariableAndFunctionDeclarations, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindDeclarationsAndSetters, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindReferences, (, )]
[referenceParentNames, (, )]
[referenceAliases, (, )]
[calculateReferences, (, )]
[removeUnreferenced]
[removeUnreferenced, (, )]
[recordReference, (, fromName, ,, toName, ,, RefType, ., REGULAR, )]
[fromName]
[toName]
[RefType, ., REGULAR]
[RefType]
[aliases, ., get, (, toName, )]
[aliases]
[toName]
[aliases, ., get, (, fromName, )]
[aliases]
[fromName]
[null]
[toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null]
[toNameAliasSet, ==, null]
[toNameAliasSet]
[null]
[fromNameAliasSet, ==, null]
[fromNameAliasSet]
[null]
[resultSet]
[new, AliasSet, (, toName, ,, fromName, )]
[toName]
[fromName]
[toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null]
[toNameAliasSet, !=, null]
[toNameAliasSet]
[null]
[fromNameAliasSet, !=, null]
[fromNameAliasSet]
[null]
[resultSet]
[toNameAliasSet]
[resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, )]
[resultSet, ., names]
[resultSet]
[fromNameAliasSet, ., names]
[fromNameAliasSet]
[fromNameAliasSet, ., names]
[fromNameAliasSet]
[aliases, ., put, (, name, ,, resultSet, )]
[aliases]
[name]
[resultSet]
[toNameAliasSet, !=, null]
[toNameAliasSet]
[null]
[resultSet]
[toNameAliasSet]
[resultSet, ., names, ., add, (, fromName, )]
[resultSet, ., names]
[resultSet]
[fromName]
[resultSet]
[fromNameAliasSet]
[resultSet, ., names, ., add, (, toName, )]
[resultSet, ., names]
[resultSet]
[toName]
[aliases, ., put, (, fromName, ,, resultSet, )]
[aliases]
[fromName]
[resultSet]
[aliases, ., put, (, toName, ,, resultSet, )]
[aliases]
[toName]
[resultSet]
[fromName, ., equals, (, toName, )]
[fromName]
[toName]
[getName, (, fromName, ,, true, )]
[fromName]
[true]
[getName, (, toName, ,, true, )]
[toName]
[true]
[referenceGraph, ., createNode, (, from, )]
[referenceGraph]
[from]
[referenceGraph, ., createNode, (, to, )]
[referenceGraph]
[to]
[!, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, )]
[referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, )]
[referenceGraph]
[from]
[depType]
[to]
[referenceGraph, ., connect, (, from, ,, depType, ,, to, )]
[referenceGraph]
[from]
[depType]
[to]
[new, RemoveListener, (, )]
[changeProxy, ., registerListener, (, listener, )]
[changeProxy]
[listener]
[refNodes]
[refNode, ., name, (, )]
[refNode]
[!, name, ., referenced, &&, !, name, ., externallyDefined]
[!, name, ., referenced]
[name, ., referenced]
[name]
[!, name, ., externallyDefined]
[name, ., externallyDefined]
[name]
[refNode, ., remove, (, )]
[refNode]
[changeProxy, ., unregisterListener, (, listener, )]
[changeProxy]
[listener]
[new, StringBuilder, (, )]
[sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", )]
[sb]
["<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>"]
["<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;"]
["<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} "]
["<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} "]
["<html><body><style type=\"text/css\">"]
["body, td, p {font-family: Arial; font-size: 83%} "]
["ul {margin-top:2px; margin-left:0px; padding-left:1em;} "]
["li {margin-top:3px; margin-left:24px; padding-left:0px;"]
["padding-bottom: 4px}</style>"]
[sb, ., append, (, "OVERALL STATS<ul>", )]
[sb]
["OVERALL STATS<ul>"]
[appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), )]
[sb]
["Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, )]
["Total Names: "]
[countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, )]
[TriState, ., BOTH]
[TriState]
[TriState, ., BOTH]
[TriState]
[appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), )]
[sb]
["Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, )]
["Total Classes: "]
[countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, )]
[TriState, ., TRUE]
[TriState]
[TriState, ., BOTH]
[TriState]
[appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), )]
[sb]
["Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, )]
["Total Static Functions: "]
[countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, )]
[TriState, ., FALSE]
[TriState]
[TriState, ., BOTH]
[TriState]
[appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), )]
[sb]
["Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, )]
["Referenced Names: "]
[countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, )]
[TriState, ., BOTH]
[TriState]
[TriState, ., TRUE]
[TriState]
[appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), )]
[sb]
["Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, )]
["Referenced Classes: "]
[countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, )]
[TriState, ., TRUE]
[TriState]
[TriState, ., TRUE]
[TriState]
[appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), )]
[sb]
["Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, )]
["Referenced Functions: "]
[countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, )]
[TriState, ., FALSE]
[TriState]
[TriState, ., TRUE]
[TriState]
[sb, ., append, (, "</ul>", )]
[sb]
["</ul>"]
[sb, ., append, (, "ALL NAMES<ul>\n", )]
[sb]
["ALL NAMES<ul>\n"]
[allNames, ., values, (, )]
[allNames]
[sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", )]
[sb]
["<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>"]
["<li>", +, nameAnchor, (, node, ., name, )]
["<li>"]
[nameAnchor, (, node, ., name, )]
[node, ., name]
[node]
["<ul>"]
[node, ., prototypeNames, ., size, (, ), >, 0]
[node, ., prototypeNames, ., size, (, )]
[node, ., prototypeNames]
[node]
[0]
[sb, ., append, (, "<li>PROTOTYPES: ", )]
[sb]
["<li>PROTOTYPES: "]
[node, ., prototypeNames, ., iterator, (, )]
[node, ., prototypeNames]
[node]
[protoIter, ., hasNext, (, )]
[protoIter]
[sb, ., append, (, protoIter, ., next, (, ), )]
[sb]
[protoIter, ., next, (, )]
[protoIter]
[protoIter, ., hasNext, (, )]
[protoIter]
[sb, ., append, (, ", ", )]
[sb]
[", "]
[referenceGraph, ., hasNode, (, node, )]
[referenceGraph]
[node]
[referenceGraph, ., getOutEdges, (, node, )]
[referenceGraph]
[node]
[refersTo, ., size, (, ), >, 0]
[refersTo, ., size, (, )]
[refersTo]
[0]
[sb, ., append, (, "<li>REFERS TO: ", )]
[sb]
["<li>REFERS TO: "]
[refersTo, ., iterator, (, )]
[refersTo]
[toIter, ., hasNext, (, )]
[toIter]
[sb, ., append, (, nameLink, (, toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), )]
[sb]
[nameLink, (, toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, )]
[toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name]
[toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, )]
[toIter, ., next, (, ), ., getDestination, (, )]
[toIter, ., next, (, )]
[toIter]
[toIter, ., hasNext, (, )]
[toIter]
[sb, ., append, (, ", ", )]
[sb]
[", "]
[referenceGraph, ., getInEdges, (, node, )]
[referenceGraph]
[node]
[referencedBy, ., size, (, ), >, 0]
[referencedBy, ., size, (, )]
[referencedBy]
[0]
[sb, ., append, (, "<li>REFERENCED BY: ", )]
[sb]
["<li>REFERENCED BY: "]
[refersTo, ., iterator, (, )]
[refersTo]
[fromIter, ., hasNext, (, )]
[fromIter]
[sb, ., append, (, nameLink, (, fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), )]
[sb]
[nameLink, (, fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, )]
[fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name]
[fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, )]
[fromIter, ., next, (, ), ., getDestination, (, )]
[fromIter, ., next, (, )]
[fromIter]
[fromIter, ., hasNext, (, )]
[fromIter]
[sb, ., append, (, ", ", )]
[sb]
[", "]
[sb, ., append, (, "</li>", )]
[sb]
["</li>"]
[sb, ., append, (, "</ul></li>", )]
[sb]
["</ul></li>"]
[sb, ., append, (, "</ul>", )]
[sb]
["</ul>"]
[sb, ., append, (, "</body></html>", )]
[sb]
["</body></html>"]
[sb, ., toString, (, )]
[sb]
[sb, ., append, (, "<li>", +, text, +, "</li>\n", )]
[sb]
["<li>", +, text, +, "</li>\n"]
["<li>", +, text]
["<li>"]
[text]
["</li>\n"]
["<a href=\"#", +, name, +, "\">", +, name, +, "</a>"]
["<a href=\"#", +, name, +, "\">", +, name]
["<a href=\"#", +, name, +, "\">"]
["<a href=\"#", +, name]
["<a href=\"#"]
[name]
["\">"]
[name]
["</a>"]
["<a name=\"", +, name, +, "\">", +, name, +, "</a>"]
["<a name=\"", +, name, +, "\">", +, name]
["<a name=\"", +, name, +, "\">"]
["<a name=\"", +, name]
["<a name=\""]
[name]
["\">"]
[name]
["</a>"]
[canCreate]
[createName, (, name, )]
[name]
[allNames, ., get, (, name, )]
[allNames]
[name]
[allNames, ., get, (, name, )]
[allNames]
[name]
[jsn, ==, null]
[jsn]
[null]
[jsn]
[new, JsName, (, )]
[jsn, ., name]
[jsn]
[name]
[allNames, ., put, (, name, ,, jsn, )]
[allNames]
[name]
[jsn]
[aliases, ., entrySet, (, )]
[aliases]
[getName, (, entry, ., getKey, (, ), ,, false, )]
[entry, ., getKey, (, )]
[entry]
[false]
[name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference]
[name, ., hasWrittenDescendants]
[name]
[name, ., hasInstanceOfReference]
[name]
[entry, ., getValue, (, ), ., names]
[entry, ., getValue, (, )]
[entry]
[recordReference, (, alias, ,, entry, ., getKey, (, ), ,, RefType, ., REGULAR, )]
[alias]
[entry, ., getKey, (, )]
[entry]
[RefType, ., REGULAR]
[RefType]
[Sets, ., newHashSet, (, allNames, ., values, (, ), )]
[Sets]
[allNames, ., values, (, )]
[allNames]
[allNamesCopy]
[name, ., name]
[name]
[name]
[curName, ., indexOf, (, '.', ), !=, -, 1]
[curName, ., indexOf, (, '.', )]
[curName]
['.']
[-, 1]
[1]
[curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), )]
[curName]
[0]
[curName, ., lastIndexOf, (, '.', )]
[curName]
['.']
[!, globalNames, ., contains, (, parentName, )]
[globalNames, ., contains, (, parentName, )]
[globalNames]
[parentName]
[getName, (, parentName, ,, true, )]
[parentName]
[true]
[recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, )]
[curJsName, ., name]
[curJsName]
[parentJsName, ., name]
[parentJsName]
[RefType, ., REGULAR]
[RefType]
[recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, )]
[parentJsName, ., name]
[parentJsName]
[curJsName, ., name]
[curJsName]
[RefType, ., REGULAR]
[RefType]
[curJsName]
[parentJsName]
[curName]
[parentName]
[n, ., getParent, (, )]
[n]
[""]
[n]
[false]
[true]
[NodeUtil, ., isGet, (, rootNameNode, )]
[NodeUtil]
[rootNameNode]
[rootNameNode, ., getLastChild, (, )]
[rootNameNode]
[rootNameNode, ., isGetProp, (, )]
[rootNameNode]
[name]
[".", +, prop, ., getString, (, ), +, name]
[".", +, prop, ., getString, (, )]
["."]
[prop, ., getString, (, )]
[prop]
[name]
[bNameWasShortened]
[true]
[name]
[""]
[rootNameNode]
[rootNameNode, ., getFirstChild, (, )]
[rootNameNode]
[NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), )]
[NodeUtil]
[rootNameNode]
[rootNameNode, ., getParent, (, )]
[rootNameNode]
[name]
[".", +, rootNameNode, ., getString, (, ), +, name]
[".", +, rootNameNode, ., getString, (, )]
["."]
[rootNameNode, ., getString, (, )]
[rootNameNode]
[name]
[rootNameNode, ., getParent, (, )]
[rootNameNode]
[objLit, ., getParent, (, )]
[objLit]
[objLitParent, ., isAssign, (, )]
[objLitParent]
[rootNameNode]
[objLitParent, ., getFirstChild, (, )]
[objLitParent]
[objLitParent, ., isName, (, )]
[objLitParent]
[rootNameNode]
[objLitParent]
[objLitParent, ., isStringKey, (, )]
[objLitParent]
[rootNameNode]
[objLitParent]
[null]
[parent, ., isCall, (, ), &&, t, ., inGlobalScope, (, )]
[parent, ., isCall, (, )]
[parent]
[t, ., inGlobalScope, (, )]
[t]
[compiler, ., getCodingConvention, (, )]
[compiler]
[convention, ., getClassesDefinedByCall, (, parent, )]
[convention]
[parent]
[classes, !=, null]
[classes]
[null]
[new, NameInformation, (, )]
[nameInfo, ., name]
[nameInfo]
[classes, ., subclassName]
[classes]
[nameInfo, ., onlyAffectsClassDef]
[nameInfo]
[true]
[nameInfo, ., superclass]
[nameInfo]
[classes, ., superclassName]
[classes]
[nameInfo]
[convention, ., getSingletonGetterClassName, (, parent, )]
[convention]
[parent]
[singletonGetterClass, !=, null]
[singletonGetterClass]
[null]
[new, NameInformation, (, )]
[nameInfo, ., name]
[nameInfo]
[singletonGetterClass]
[nameInfo, ., onlyAffectsClassDef]
[nameInfo]
[true]
[nameInfo]
[rootNameNode, ., getType, (, )]
[rootNameNode]
[Token, ., NAME]
[Token]
[!, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), )]
[!, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, )]
[!, bNameWasShortened, &&, n, ., isGetProp, (, )]
[!, bNameWasShortened]
[bNameWasShortened]
[n, ., isGetProp, (, )]
[n]
[parent, ., isAssign, (, )]
[parent]
["prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), )]
["prototype"]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null]
[createNameInformation, (, t, ,, n, ., getFirstChild, (, ), )]
[t]
[n, ., getFirstChild, (, )]
[n]
[null]
[name]
[rootNameNode, ., getString, (, ), +, name]
[rootNameNode, ., getString, (, )]
[rootNameNode]
[name]
[name]
[name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, )]
[name]
[0]
[name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN]
[name, ., length, (, )]
[name]
[PROTOTYPE_SUFFIX_LEN]
[new, NameInformation, (, )]
[nameInfo, ., name]
[nameInfo]
[name]
[nameInfo]
[null]
[createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, )]
[rootNameNode, ., getString, (, ), +, name]
[rootNameNode, ., getString, (, )]
[rootNameNode]
[name]
[t, ., getScope, (, )]
[t]
[rootNameNode]
[Token, ., THIS]
[Token]
[t, ., inGlobalScope, (, )]
[t]
[new, NameInformation, (, )]
[name, ., indexOf, (, '.', ), ==, 0]
[name, ., indexOf, (, '.', )]
[name]
['.']
[0]
[nameInfo, ., name]
[nameInfo]
[name, ., substring, (, 1, )]
[name]
[1]
[nameInfo, ., name]
[nameInfo]
[name]
[nameInfo, ., isExternallyReferenceable]
[nameInfo]
[true]
[nameInfo]
[null]
[null]
[rootNameNode, ., getString, (, )]
[rootNameNode]
[scope, ., getVar, (, rootName, )]
[scope]
[rootName]
[(, v, ==, null, &&, externalNames, ., contains, (, rootName, ), )]
[v, ==, null, &&, externalNames, ., contains, (, rootName, )]
[v, ==, null]
[v]
[null]
[externalNames, ., contains, (, rootName, )]
[externalNames]
[rootName]
[(, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, )]
[(, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern]
[(, v, !=, null, &&, v, ., isGlobal, (, ), )]
[v, !=, null, &&, v, ., isGlobal, (, )]
[v, !=, null]
[v]
[null]
[v, ., isGlobal, (, )]
[v]
[isExtern]
[rootName, ., equals, (, WINDOW, )]
[rootName]
[WINDOW]
[!, isGlobalRef]
[isGlobalRef]
[null]
[new, NameInformation, (, )]
[name, ., indexOf, (, PROTOTYPE_SUBSTRING, )]
[name]
[PROTOTYPE_SUBSTRING]
[idx, !=, -, 1]
[idx]
[-, 1]
[1]
[nameInfo, ., isPrototype]
[nameInfo]
[true]
[nameInfo, ., prototypeClass]
[nameInfo]
[name, ., substring, (, 0, ,, idx, )]
[name]
[0]
[idx]
[nameInfo, ., prototypeProperty]
[nameInfo]
[name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, )]
[name]
[idx, +, PROTOTYPE_SUBSTRING_LEN]
[idx]
[PROTOTYPE_SUBSTRING_LEN]
[nameInfo, ., name]
[nameInfo]
[name]
[nameInfo, ., isExternallyReferenceable]
[nameInfo]
[isExtern, ||, isExternallyReferenceable, (, scope, ,, name, )]
[isExtern]
[isExternallyReferenceable, (, scope, ,, name, )]
[scope]
[name]
[nameInfo]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[true]
[scope, ., isLocal, (, )]
[scope]
[false]
[globalNames]
[name, ., startsWith, (, s, )]
[name]
[s]
[true]
[false]
[n, ., getAncestors, (, )]
[n]
[scopes, ., get, (, node, )]
[scopes]
[node]
[!, refs, ., isEmpty, (, )]
[refs, ., isEmpty, (, )]
[refs]
[refs]
[Collections, ., emptyList, (, )]
[Collections]
[t, ., getEnclosingFunction, (, )]
[t]
[function, ==, null]
[function]
[null]
[Collections, ., emptyList, (, )]
[Collections]
[scopes, ., get, (, function, )]
[scopes]
[function]
[!, refs, ., isEmpty, (, )]
[refs, ., isEmpty, (, )]
[refs]
[refs]
[function, ., getParent, (, )]
[function]
[parent, !=, null]
[parent]
[null]
[parent, ., isHook, (, )]
[parent]
[parent]
[parent, ., getParent, (, )]
[parent]
[parent, ., isName, (, )]
[parent]
[scopes, ., get, (, parent, )]
[scopes]
[parent]
[parent, ., isAssign, (, )]
[parent]
[scopes, ., get, (, parent, )]
[scopes]
[parent]
[Collections, ., emptyList, (, )]
[Collections]
[getName, (, WINDOW, ,, true, )]
[WINDOW]
[true]
[window, ., referenced]
[window]
[true]
[getName, (, FUNCTION, ,, true, )]
[FUNCTION]
[true]
[function, ., referenced]
[function]
[true]
[FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph, )]
[FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), )]
[FixedPointGraphTraversal]
[new, ReferencePropagationCallback, (, )]
[referenceGraph]
[0]
[allNames, ., values, (, )]
[allNames]
[name, ., prototypeNames, ., size, (, ), >, 0]
[name, ., prototypeNames, ., size, (, )]
[name, ., prototypeNames]
[name]
[0]
[isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, )]
[isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, )]
[isClass, ==, TriState, ., BOTH]
[isClass]
[TriState, ., BOTH]
[TriState]
[(, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, )]
[nodeIsClass, &&, isClass, ==, TriState, ., TRUE]
[nodeIsClass]
[isClass, ==, TriState, ., TRUE]
[isClass]
[TriState, ., TRUE]
[TriState]
[(, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, )]
[!, nodeIsClass, &&, isClass, ==, TriState, ., FALSE]
[!, nodeIsClass]
[nodeIsClass]
[isClass, ==, TriState, ., FALSE]
[isClass]
[TriState, ., FALSE]
[TriState]
[referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, )]
[referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, )]
[referenced, ==, TriState, ., BOTH]
[referenced]
[TriState, ., BOTH]
[TriState]
[(, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, )]
[name, ., referenced, &&, referenced, ==, TriState, ., TRUE]
[name, ., referenced]
[name]
[referenced, ==, TriState, ., TRUE]
[referenced]
[TriState, ., TRUE]
[TriState]
[(, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, )]
[!, name, ., referenced, &&, referenced, ==, TriState, ., FALSE]
[!, name, ., referenced]
[name, ., referenced]
[name]
[referenced, ==, TriState, ., FALSE]
[referenced]
[TriState, ., FALSE]
[TriState]
[classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined]
[classMatch, &&, referenceMatch]
[classMatch]
[referenceMatch]
[!, name, ., externallyDefined]
[name, ., externallyDefined]
[name]
[count, ++]
[count]
[count]
[Lists, ., newArrayList, (, )]
[Lists]
[NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), )]
[NodeTraversal]
[compiler]
[n]
[new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), )]
[compiler]
[new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, )]
[compiler]
[subexpressions]
[Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), )]
[Lists]
[subexpressions, ., size, (, )]
[subexpressions]
[subexpressions]
[replacements, ., add, (, NodeUtil, ., newExpr, (, subexpression, ), )]
[replacements]
[NodeUtil, ., newExpr, (, subexpression, )]
[NodeUtil]
[subexpression]
[replacements]
[valueConsumedByParent, (, n, ,, parent, )]
[n]
[parent]
[getRhsSubexpressions, (, n, )]
[n]
[Lists, ., newArrayList, (, )]
[Lists]
[0]
[i, <, replacements, ., size, (, ), -, 1]
[i]
[replacements, ., size, (, ), -, 1]
[replacements, ., size, (, )]
[replacements]
[1]
[i, ++]
[i]
[newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), )]
[newReplacements]
[getSideEffectNodes, (, replacements, ., get, (, i, ), )]
[replacements, ., get, (, i, )]
[replacements]
[i]
[replacements, ., get, (, replacements, ., size, (, ), -, 1, )]
[replacements]
[replacements, ., size, (, ), -, 1]
[replacements, ., size, (, )]
[replacements]
[1]
[valueExpr, ., detachFromParent, (, )]
[valueExpr]
[newReplacements, ., add, (, valueExpr, )]
[newReplacements]
[valueExpr]
[changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), )]
[changeProxy]
[parent]
[n]
[collapseReplacements, (, newReplacements, )]
[newReplacements]
[n, ., isAssign, (, ), &&, !, parent, ., isFor, (, )]
[n, ., isAssign, (, )]
[n]
[!, parent, ., isFor, (, )]
[parent, ., isFor, (, )]
[parent]
[n, ., getLastChild, (, )]
[n]
[replacement, ., detachFromParent, (, )]
[replacement]
[changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, )]
[changeProxy]
[parent]
[n]
[replacement]
[replaceTopLevelExpressionWithRhs, (, parent, ,, n, )]
[parent]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., BLOCK]
[Token]
[Token, ., SCRIPT]
[Token]
[Token, ., FOR]
[Token]
[Token, ., LABEL]
[Token]
[new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType, (, ), ), )]
["Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType, (, ), )]
["Unsupported parent node type in replaceWithRhs "]
[Token, ., name, (, parent, ., getType, (, ), )]
[Token]
[parent, ., getType, (, )]
[parent]
[n, ., getType, (, )]
[n]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., VAR]
[Token]
[Token, ., ASSIGN]
[Token]
[Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType, (, ), ), )]
[Preconditions]
[parent, ., isFor, (, )]
[parent]
["Unsupported assignment in replaceWithRhs. parent: %s"]
[Token, ., name, (, parent, ., getType, (, ), )]
[Token]
[parent, ., getType, (, )]
[parent]
[new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (, n, ., getType, (, ), ), )]
["Unsupported node type in replaceWithRhs ", +, Token, ., name, (, n, ., getType, (, ), )]
["Unsupported node type in replaceWithRhs "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[Lists, ., newArrayList, (, )]
[Lists]
[getRhsSubexpressions, (, n, )]
[n]
[replacements, ., addAll, (, getSideEffectNodes, (, rhs, ), )]
[replacements]
[getSideEffectNodes, (, rhs, )]
[rhs]
[parent, ., isFor, (, )]
[parent]
[replacements, ., isEmpty, (, )]
[replacements]
[replacements, ., add, (, IR, ., empty, (, ), )]
[replacements]
[IR, ., empty, (, )]
[IR]
[collapseReplacements, (, replacements, )]
[replacements]
[replacements, ., clear, (, )]
[replacements]
[replacements, ., add, (, expr, )]
[replacements]
[expr]
[changeProxy, ., replaceWith, (, parent, ,, n, ,, replacements, )]
[changeProxy]
[parent]
[n]
[replacements]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., NAME]
[Token]
[Token, ., RETURN]
[Token]
[true]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[Token, ., HOOK]
[Token]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., FOR]
[Token]
[parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[Token, ., DO]
[Token]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[false]
[null]
[replacements]
[rep, ., isExprResult, (, )]
[rep]
[rep]
[rep, ., getFirstChild, (, )]
[rep]
[rep, ., detachFromParent, (, )]
[rep]
[expr, ==, null]
[expr]
[null]
[expr]
[rep]
[expr]
[IR, ., comma, (, expr, ,, rep, )]
[IR]
[expr]
[rep]
[expr]
[n, ., getType, (, )]
[n]
[Token, ., EXPR_RESULT]
[Token]
[getRhsSubexpressions, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[Collections, ., emptyList, (, )]
[Collections]
[Token, ., NAME]
[Token]
[n, ., getFirstChild, (, )]
[n]
[rhs, !=, null]
[rhs]
[null]
[Lists, ., newArrayList, (, rhs, )]
[Lists]
[rhs]
[Collections, ., emptyList, (, )]
[Collections]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, )]
[n]
[lhs, ., getNext, (, )]
[lhs]
[Lists, ., newArrayList, (, lhs, ,, rhs, )]
[Lists]
[lhs]
[rhs]
[Token, ., VAR]
[Token]
[Lists, ., newArrayList, (, )]
[Lists]
[n, ., children, (, )]
[n]
[nodes, ., addAll, (, getRhsSubexpressions, (, child, ), )]
[nodes]
[getRhsSubexpressions, (, child, )]
[child]
[nodes]
[new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +, n, )]
["AstChangeProxy::getRhs ", +, n]
["AstChangeProxy::getRhs "]
[n]
