[false]
[false]
[false]
[true]
[add, (, identifier, )]
[identifier]
[append, (, "{", )]
["{"]
[append, (, "}", )]
["}"]
[maybeCutLine, (, )]
[statementNeedsEnded]
[append, (, ";", )]
[";"]
[maybeLineBreak, (, )]
[appendBlockStart, (, )]
[endLine, (, )]
[statementNeedsEnded]
[false]
[endBlock, (, false, )]
[false]
[appendBlockEnd, (, )]
[shouldEndLine]
[endLine, (, )]
[statementNeedsEnded]
[false]
[add, (, ",", )]
[","]
[maybeLineBreak, (, )]
[endStatement, (, false, )]
[false]
[needSemiColon]
[append, (, ";", )]
[";"]
[maybeLineBreak, (, )]
[statementNeedsEnded]
[false]
[statementStarted]
[statementNeedsEnded]
[true]
[statementNeedsEnded]
[append, (, ";", )]
[";"]
[maybeLineBreak, (, )]
[endLine, (, )]
[statementNeedsEnded]
[false]
[statementStarted]
[true]
[endFunction, (, false, )]
[false]
[sawFunction]
[true]
[statementContext]
[endLine, (, )]
[append, (, ":", )]
[":"]
[maybeEndStatement, (, )]
[newcode, ., length, (, ), ==, 0]
[newcode, ., length, (, )]
[newcode]
[0]
[newcode, ., charAt, (, 0, )]
[newcode]
[0]
[(, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), )]
[(, isWordChar, (, c, ), ||, c, ==, '\\', )]
[isWordChar, (, c, ), ||, c, ==, '\\']
[isWordChar, (, c, )]
[c]
[c, ==, '\\']
[c]
['\\']
[isWordChar, (, getLastChar, (, ), )]
[getLastChar, (, )]
[append, (, " ", )]
[" "]
[c, ==, '/', &&, getLastChar, (, ), ==, '/']
[c, ==, '/']
[c]
['/']
[getLastChar, (, ), ==, '/']
[getLastChar, (, )]
['/']
[append, (, " ", )]
[" "]
[append, (, newcode, )]
[newcode]
[append, (, op, )]
[op]
[maybeEndStatement, (, )]
[op, ., charAt, (, 0, )]
[op]
[0]
[getLastChar, (, )]
[(, first, ==, '+', ||, first, ==, '-', ), &&, prev, ==, first]
[(, first, ==, '+', ||, first, ==, '-', )]
[first, ==, '+', ||, first, ==, '-']
[first, ==, '+']
[first]
['+']
[first, ==, '-']
[first]
['-']
[prev, ==, first]
[prev]
[first]
[append, (, " ", )]
[" "]
[Character, ., isLetter, (, first, ), &&, isWordChar, (, prev, )]
[Character, ., isLetter, (, first, )]
[Character]
[first]
[isWordChar, (, prev, )]
[prev]
[append, (, " ", )]
[" "]
[prev, ==, '-', &&, first, ==, '>']
[prev, ==, '-']
[prev]
['-']
[first, ==, '>']
[first]
['>']
[append, (, " ", )]
[" "]
[appendOp, (, op, ,, binOp, )]
[op]
[binOp]
[binOp]
[maybeCutLine, (, )]
[getLastChar, (, )]
[isNegativeZero, (, x, )]
[x]
[(, x, <, 0, ||, negativeZero, ), &&, prev, ==, '-']
[(, x, <, 0, ||, negativeZero, )]
[x, <, 0, ||, negativeZero]
[x, <, 0]
[x]
[0]
[negativeZero]
[prev, ==, '-']
[prev]
['-']
[add, (, " ", )]
[" "]
[negativeZero]
[addConstant, (, "-0", )]
["-0"]
[(, long, ), x, ==, x]
[(, long, ), x]
[x]
[x]
[(, long, ), x]
[x]
[value]
[0]
[Math, ., abs, (, x, ), >=, 100]
[Math, ., abs, (, x, )]
[Math]
[x]
[100]
[mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value]
[mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, )]
[mantissa, /, 10]
[mantissa]
[10]
[Math, ., pow, (, 10, ,, exp, +, 1, )]
[Math]
[10]
[exp, +, 1]
[exp]
[1]
[value]
[mantissa]
[10]
[exp, ++]
[exp]
[exp, >, 2]
[exp]
[2]
[addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), )]
[Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp, )]
[Long, ., toString, (, mantissa, ), +, "E"]
[Long, ., toString, (, mantissa, )]
[Long]
[mantissa]
["E"]
[Integer, ., toString, (, exp, )]
[Integer]
[exp]
[Math, ., abs, (, value, )]
[Math]
[value]
[Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, )]
[Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2]
[Long, ., toHexString, (, valueAbs, ), ., length, (, )]
[Long, ., toHexString, (, valueAbs, )]
[Long]
[valueAbs]
[2]
[Long, ., toString, (, valueAbs, ), ., length, (, )]
[Long, ., toString, (, valueAbs, )]
[Long]
[valueAbs]
[addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), )]
[(, value, <, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, )]
[(, value, <, 0, ?, "-", :, "", ), +, "0x"]
[(, value, <, 0, ?, "-", :, "", )]
[value, <, 0, ?, "-", :, ""]
[value, <, 0]
[value]
[0]
["-"]
[""]
["0x"]
[Long, ., toHexString, (, valueAbs, )]
[Long]
[valueAbs]
[addConstant, (, Long, ., toString, (, value, ), )]
[Long, ., toString, (, value, )]
[Long]
[value]
[addConstant, (, String, ., valueOf, (, x, ), ., replace, (, ".0E", ,, "E", ), )]
[String, ., valueOf, (, x, ), ., replace, (, ".0E", ,, "E", )]
[String, ., valueOf, (, x, )]
[String]
[x]
[".0E"]
["E"]
[add, (, newcode, )]
[newcode]
[x, ==, 0.0, &&, Math, ., copySign, (, 1, ,, x, ), ==, -, 1.0]
[x, ==, 0.0]
[x]
[0.0]
[Math, ., copySign, (, 1, ,, x, ), ==, -, 1.0]
[Math, ., copySign, (, 1, ,, x, )]
[Math]
[1]
[x]
[-, 1.0]
[1.0]
[(, ch, ==, '_', ||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), )]
[ch, ==, '_', ||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, )]
[ch, ==, '_', ||, ch, ==, '$']
[ch, ==, '_']
[ch]
['_']
[ch, ==, '$']
[ch]
['$']
[Character, ., isLetterOrDigit, (, ch, )]
[Character]
[ch]
[false]
[statementContext]
