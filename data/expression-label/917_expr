[nodeCleaner]
[new, NodesCleaner, (, )]
[(, hyperplanes, ==, null, ), ||, (, hyperplanes, ., length, ==, 0, )]
[(, hyperplanes, ==, null, )]
[hyperplanes, ==, null]
[hyperplanes]
[null]
[(, hyperplanes, ., length, ==, 0, )]
[hyperplanes, ., length, ==, 0]
[hyperplanes, ., length]
[hyperplanes]
[0]
[null]
[hyperplanes, [, 0, ], ., wholeSpace, (, )]
[hyperplanes, [, 0, ]]
[hyperplanes]
[0]
[region, ., getTree, (, false, )]
[region]
[false]
[node, ., setAttribute, (, Boolean, ., TRUE, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[hyperplanes]
[node, ., insertCut, (, hyperplane, )]
[node]
[hyperplane]
[node, ., setAttribute, (, null, )]
[node]
[null]
[node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, )]
[node, ., getPlus, (, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[node]
[node, ., getMinus, (, )]
[node]
[node, ., setAttribute, (, Boolean, ., TRUE, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[region]
[region1, ., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, UnionMerger, (, ), )]
[region1, ., getTree, (, false, )]
[region1]
[false]
[region2, ., getTree, (, false, )]
[region2]
[false]
[new, UnionMerger, (, )]
[tree, ., visit, (, nodeCleaner, )]
[tree]
[nodeCleaner]
[region1, ., buildNew, (, tree, )]
[region1]
[tree]
[region1, ., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, IntersectionMerger, (, ), )]
[region1, ., getTree, (, false, )]
[region1]
[false]
[region2, ., getTree, (, false, )]
[region2]
[false]
[new, IntersectionMerger, (, )]
[tree, ., visit, (, nodeCleaner, )]
[tree]
[nodeCleaner]
[region1, ., buildNew, (, tree, )]
[region1]
[tree]
[region1, ., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, XorMerger, (, ), )]
[region1, ., getTree, (, false, )]
[region1]
[false]
[region2, ., getTree, (, false, )]
[region2]
[false]
[new, XorMerger, (, )]
[tree, ., visit, (, nodeCleaner, )]
[tree]
[nodeCleaner]
[region1, ., buildNew, (, tree, )]
[region1]
[tree]
[region1, ., getTree, (, false, ), ., merge, (, region2, ., getTree, (, false, ), ,, new, DifferenceMerger, (, ), )]
[region1, ., getTree, (, false, )]
[region1]
[false]
[region2, ., getTree, (, false, )]
[region2]
[false]
[new, DifferenceMerger, (, )]
[tree, ., visit, (, nodeCleaner, )]
[tree]
[nodeCleaner]
[region1, ., buildNew, (, tree, )]
[region1]
[tree]
[region, ., buildNew, (, recurseComplement, (, region, ., getTree, (, false, ), ), )]
[region]
[recurseComplement, (, region, ., getTree, (, false, ), )]
[region, ., getTree, (, false, )]
[region]
[false]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[new, BSPTree, <, S, >, (, (, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE, )]
[(, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Boolean, ., FALSE, :, Boolean, ., TRUE]
[(, (, Boolean, ), node, ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[Boolean, ., TRUE]
[Boolean]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, BoundaryAttribute, <, S, >, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[attribute, !=, null]
[attribute]
[null]
[(, attribute, ., getPlusInside, (, ), ==, null, ), ?, null, :, attribute, ., getPlusInside, (, ), ., copySelf, (, )]
[(, attribute, ., getPlusInside, (, ), ==, null, )]
[attribute, ., getPlusInside, (, ), ==, null]
[attribute, ., getPlusInside, (, )]
[attribute]
[null]
[null]
[attribute, ., getPlusInside, (, ), ., copySelf, (, )]
[attribute, ., getPlusInside, (, )]
[attribute]
[(, attribute, ., getPlusOutside, (, ), ==, null, ), ?, null, :, attribute, ., getPlusOutside, (, ), ., copySelf, (, )]
[(, attribute, ., getPlusOutside, (, ), ==, null, )]
[attribute, ., getPlusOutside, (, ), ==, null]
[attribute, ., getPlusOutside, (, )]
[attribute]
[null]
[null]
[attribute, ., getPlusOutside, (, ), ., copySelf, (, )]
[attribute, ., getPlusOutside, (, )]
[attribute]
[attribute]
[new, BoundaryAttribute, <, S, >, (, plusOutside, ,, plusInside, )]
[plusOutside]
[plusInside]
[new, BSPTree, <, S, >, (, node, ., getCut, (, ), ., copySelf, (, ), ,, recurseComplement, (, node, ., getPlus, (, ), ), ,, recurseComplement, (, node, ., getMinus, (, ), ), ,, attribute, )]
[node, ., getCut, (, ), ., copySelf, (, )]
[node, ., getCut, (, )]
[node]
[recurseComplement, (, node, ., getPlus, (, ), )]
[node, ., getPlus, (, )]
[node]
[recurseComplement, (, node, ., getMinus, (, ), )]
[node, ., getMinus, (, )]
[node]
[attribute]
[(, Boolean, ), leaf, ., getAttribute, (, )]
[leaf, ., getAttribute, (, )]
[leaf]
[leaf, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[leaf]
[parentTree]
[isPlusChild]
[leaf]
[tree, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[tree]
[parentTree]
[isPlusChild]
[tree]
[(, Boolean, ), leaf, ., getAttribute, (, )]
[leaf, ., getAttribute, (, )]
[leaf]
[tree, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[tree]
[parentTree]
[isPlusChild]
[tree]
[leaf, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[leaf]
[parentTree]
[isPlusChild]
[leaf]
[tree]
[(, Boolean, ), leaf, ., getAttribute, (, )]
[leaf, ., getAttribute, (, )]
[leaf]
[t]
[recurseComplement, (, t, )]
[t]
[t, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[t]
[parentTree]
[isPlusChild]
[t]
[(, Boolean, ), leaf, ., getAttribute, (, )]
[leaf, ., getAttribute, (, )]
[leaf]
[recurseComplement, (, leafFromInstance, ?, tree, :, leaf, )]
[leafFromInstance, ?, tree, :, leaf]
[leafFromInstance]
[tree]
[leaf]
[argTree, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[argTree]
[parentTree]
[isPlusChild]
[argTree]
[leafFromInstance, ?, leaf, :, tree]
[leafFromInstance]
[leaf]
[tree]
[instanceTree, ., insertInTree, (, parentTree, ,, isPlusChild, )]
[instanceTree]
[parentTree]
[isPlusChild]
[instanceTree]
[Order, ., PLUS_SUB_MINUS]
[Order]
[node, ., setAttribute, (, null, )]
[node]
[null]
