[this, ., compiler]
[this]
[compiler]
[this, ., functionNames]
[this]
[functionNames]
[this, ., templateFilename]
[this]
[templateFilename]
[this, ., appNameStr]
[this]
[appNameStr]
[Instrumentation, ., newBuilder, (, )]
[Instrumentation]
[TextFormat, ., merge, (, readable, ,, builder, )]
[TextFormat]
[readable]
[builder]
[compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), )]
[compiler]
[JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, )]
[JSError]
[RhinoErrorReporter, ., PARSE_ERROR]
[RhinoErrorReporter]
["Error reading instrumentation template protobuf at ", +, templateFilename]
["Error reading instrumentation template protobuf at "]
[templateFilename]
[this, ., initCodeSource]
[this]
[""]
[this, ., definedFunctionName]
[this]
[""]
[this, ., reportFunctionName]
[this]
[""]
[this, ., reportFunctionExitName]
[this]
[""]
[this, ., appNameSetter]
[this]
[""]
[this, ., declarationsToRemove]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[builder, ., build, (, )]
[builder]
[new, StringBuilder, (, )]
[template, ., getInitList, (, )]
[template]
[initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", )]
[initCodeSourceBuilder, ., append, (, line, )]
[initCodeSourceBuilder]
[line]
["\n"]
[this, ., initCodeSource]
[this]
[initCodeSourceBuilder, ., toString, (, )]
[initCodeSourceBuilder]
[this, ., definedFunctionName]
[this]
[template, ., getReportDefined, (, )]
[template]
[this, ., reportFunctionName]
[this]
[template, ., getReportCall, (, )]
[template]
[this, ., reportFunctionExitName]
[this]
[template, ., getReportExit, (, )]
[template]
[this, ., appNameSetter]
[this]
[template, ., getAppNameSetter, (, )]
[template]
[this, ., declarationsToRemove]
[this]
[ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, ), )]
[ImmutableList]
[template, ., getDeclarationToRemoveList, (, )]
[template]
[null]
[!, initCodeSource, ., isEmpty, (, )]
[initCodeSource, ., isEmpty, (, )]
[initCodeSource]
[compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, )]
[compiler]
[templateFilename, +, ":init"]
[templateFilename]
[":init"]
[initCodeSource]
[initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null]
[initCodeRoot, !=, null]
[initCodeRoot]
[null]
[initCodeRoot, ., getFirstChild, (, ), !=, null]
[initCodeRoot, ., getFirstChild, (, )]
[initCodeRoot]
[null]
[initCode]
[initCodeRoot, ., removeChildren, (, )]
[initCodeRoot]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), )]
[NodeTraversal]
[compiler]
[root]
[new, RemoveCallback, (, declarationsToRemove, )]
[declarationsToRemove]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, InstrumentCallback, (, )]
[!, appNameSetter, ., isEmpty, (, )]
[appNameSetter, ., isEmpty, (, )]
[appNameSetter]
[IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), )]
[IR]
[IR, ., name, (, appNameSetter, )]
[IR]
[appNameSetter]
[IR, ., string, (, appNameStr, )]
[IR]
[appNameStr]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[IR, ., exprResult, (, call, )]
[IR]
[call]
[compiler, ., getNodeForCodeInsertion, (, null, )]
[compiler]
[null]
[addingRoot, ., addChildrenToFront, (, expr, )]
[addingRoot]
[expr]
[compiler, ., reportCodeChange, (, )]
[compiler]
[initCode, !=, null]
[initCode]
[null]
[compiler, ., getNodeForCodeInsertion, (, null, )]
[compiler]
[null]
[addingRoot, ., addChildrenToFront, (, initCode, )]
[addingRoot]
[initCode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., removable]
[this]
[removable]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[removable, ., contains, (, n, ., getString, (, ), )]
[removable]
[n, ., getString, (, )]
[n]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[!, parent, ., hasChildren, (, )]
[parent, ., hasChildren, (, )]
[parent]
[parent, ., getParent, (, ), ., removeChild, (, parent, )]
[parent, ., getParent, (, )]
[parent]
[parent]
[this, ., functionId]
[this]
[functionId]
[NodeTraversal, ., traverse, (, compiler, ,, body, ,, this, )]
[NodeTraversal]
[compiler]
[body]
[this]
[!, allPathsReturn, (, body, )]
[allPathsReturn, (, body, )]
[body]
[newReportFunctionExitNode, (, )]
[IR, ., exprResult, (, call, )]
[IR]
[call]
[body, ., addChildToBack, (, expr, )]
[body]
[expr]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[!, n, ., isReturn, (, )]
[n, ., isReturn, (, )]
[n]
[newReportFunctionExitNode, (, )]
[n, ., removeFirstChild, (, )]
[n]
[returnRhs, !=, null]
[returnRhs]
[null]
[call, ., addChildToBack, (, returnRhs, )]
[call]
[returnRhs]
[n, ., addChildToFront, (, call, )]
[n]
[call]
[compiler, ., reportCodeChange, (, )]
[compiler]
[IR, ., call, (, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), )]
[IR]
[IR, ., name, (, reportFunctionExitName, )]
[IR]
[reportFunctionExitName]
[IR, ., number, (, functionId, )]
[IR]
[functionId]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[call]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, )]
[compiler]
[false]
[false]
[cfa, ., process, (, null, ,, block, )]
[cfa]
[null]
[block]
[cfa, ., getCfg, (, )]
[cfa]
[cfg, ., getImplicitReturn, (, ), ., getValue, (, )]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[cfg, ., getDirectedPredNodes, (, returnPathsParent, )]
[cfg]
[returnPathsParent]
[pred, ., getValue, (, )]
[pred]
[!, n, ., isReturn, (, )]
[n, ., isReturn, (, )]
[n]
[false]
[true]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[functionNames, ., getFunctionId, (, n, )]
[functionNames]
[n]
[id, <, 0]
[id]
[0]
[!, reportFunctionName, ., isEmpty, (, )]
[reportFunctionName, ., isEmpty, (, )]
[reportFunctionName]
[n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), )]
[IR]
[IR, ., name, (, reportFunctionName, )]
[IR]
[reportFunctionName]
[IR, ., number, (, id, )]
[IR]
[id]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[IR, ., exprResult, (, call, )]
[IR]
[call]
[body, ., addChildToFront, (, expr, )]
[body]
[expr]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, reportFunctionExitName, ., isEmpty, (, )]
[reportFunctionExitName, ., isEmpty, (, )]
[reportFunctionExitName]
[n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[(, new, InstrumentReturns, (, id, ), ), ., process, (, body, )]
[(, new, InstrumentReturns, (, id, ), )]
[new, InstrumentReturns, (, id, )]
[id]
[body]
[!, definedFunctionName, ., isEmpty, (, )]
[definedFunctionName, ., isEmpty, (, )]
[definedFunctionName]
[IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), )]
[IR]
[IR, ., name, (, definedFunctionName, )]
[IR]
[definedFunctionName]
[IR, ., number, (, id, )]
[IR]
[id]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[NodeUtil, ., newExpr, (, call, )]
[NodeUtil]
[call]
[null]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[t, ., getModule, (, )]
[t]
[addingRoot]
[compiler, ., getNodeForCodeInsertion, (, module, )]
[compiler]
[module]
[addingRoot, ., addChildToFront, (, expr, )]
[addingRoot]
[expr]
[n]
[n, ., getAncestors, (, )]
[n]
[ancestor, ., getType, (, )]
[ancestor]
[type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT]
[type, ==, Token, ., BLOCK]
[type]
[Token, ., BLOCK]
[Token]
[type, ==, Token, ., SCRIPT]
[type]
[Token, ., SCRIPT]
[Token]
[addingRoot]
[ancestor]
[beforeChild]
[ancestor]
[addingRoot, ., addChildBefore, (, expr, ,, beforeChild, )]
[addingRoot]
[expr]
[beforeChild]
[compiler, ., reportCodeChange, (, )]
[compiler]
