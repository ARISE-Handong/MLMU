[setEntry, (, index, ,, getEntry, (, index, ), +, increment, )]
[index]
[getEntry, (, index, ), +, increment]
[getEntry, (, index, )]
[index]
[increment]
[checkVectorDimensions, (, v, ., getDimension, (, ), )]
[v, ., getDimension, (, )]
[v]
[getDimension, (, )]
[d, !=, n]
[d]
[n]
[new, DimensionMismatchException, (, d, ,, n, )]
[d]
[n]
[index, <, 0, ||, index, >=, getDimension, (, )]
[index, <, 0]
[index]
[0]
[index, >=, getDimension, (, )]
[index]
[getDimension, (, )]
[new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[LocalizedFormats, ., INDEX]
[LocalizedFormats]
[index]
[0]
[getDimension, (, ), -, 1]
[getDimension, (, )]
[1]
[getDimension, (, )]
[(, start, <, 0, ), ||, (, start, >=, dim, )]
[(, start, <, 0, )]
[start, <, 0]
[start]
[0]
[(, start, >=, dim, )]
[start, >=, dim]
[start]
[dim]
[new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, )]
[LocalizedFormats, ., INDEX]
[LocalizedFormats]
[start]
[0]
[dim, -, 1]
[dim]
[1]
[(, end, <, 0, ), ||, (, end, >=, dim, )]
[(, end, <, 0, )]
[end, <, 0]
[end]
[0]
[(, end, >=, dim, )]
[end, >=, dim]
[end]
[dim]
[new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, )]
[LocalizedFormats, ., INDEX]
[LocalizedFormats]
[end]
[0]
[dim, -, 1]
[dim]
[1]
[end, <, start]
[end]
[start]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,, false, )]
[LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW]
[LocalizedFormats]
[end]
[start]
[false]
[checkVectorDimensions, (, v, )]
[v]
[v, ., copy, (, )]
[v]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., getIndex, (, )]
[e]
[result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), )]
[result]
[index]
[e, ., getValue, (, ), +, result, ., getEntry, (, index, )]
[e, ., getValue, (, )]
[e]
[result, ., getEntry, (, index, )]
[result]
[index]
[result]
[checkVectorDimensions, (, v, )]
[v]
[v, ., mapMultiply, (, -, 1d, )]
[v]
[-, 1d]
[1d]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., getIndex, (, )]
[e]
[result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), )]
[result]
[index]
[e, ., getValue, (, ), +, result, ., getEntry, (, index, )]
[e, ., getValue, (, )]
[e]
[result, ., getEntry, (, index, )]
[result]
[index]
[result]
[copy, (, ), ., mapAddToSelf, (, d, )]
[copy, (, )]
[d]
[d, !=, 0]
[d]
[0]
[mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, ), )]
[FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, )]
[FunctionUtils]
[new, Add, (, )]
[d]
[this]
[checkVectorDimensions, (, v, )]
[v]
[0]
[getDimension, (, )]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[d]
[getEntry, (, i, ), *, v, ., getEntry, (, i, )]
[getEntry, (, i, )]
[i]
[v, ., getEntry, (, i, )]
[v]
[i]
[d]
[getNorm, (, )]
[v, ., getNorm, (, )]
[v]
[norm, ==, 0, ||, vNorm, ==, 0]
[norm, ==, 0]
[norm]
[0]
[vNorm, ==, 0]
[vNorm]
[0]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[LocalizedFormats, ., ZERO_NORM]
[LocalizedFormats]
[dotProduct, (, v, ), /, (, norm, *, vNorm, )]
[dotProduct, (, v, )]
[v]
[(, norm, *, vNorm, )]
[norm, *, vNorm]
[norm]
[vNorm]
[checkVectorDimensions, (, v, )]
[v]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), )]
[e, ., getValue, (, )]
[e]
[v, ., getEntry, (, e, ., getIndex, (, ), )]
[v]
[e, ., getIndex, (, )]
[e]
[d]
[diff, *, diff]
[diff]
[diff]
[FastMath, ., sqrt, (, d, )]
[FastMath]
[d]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., getValue, (, )]
[e]
[sum]
[value, *, value]
[value]
[value]
[FastMath, ., sqrt, (, sum, )]
[FastMath]
[sum]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[norm]
[FastMath, ., abs, (, e, ., getValue, (, ), )]
[FastMath]
[e, ., getValue, (, )]
[e]
[norm]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[norm]
[FastMath, ., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue, (, ), ), )]
[FastMath]
[norm]
[FastMath, ., abs, (, e, ., getValue, (, ), )]
[FastMath]
[e, ., getValue, (, )]
[e]
[norm]
[checkVectorDimensions, (, v, )]
[v]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[d]
[FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), )]
[FastMath]
[e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), )]
[e, ., getValue, (, )]
[e]
[v, ., getEntry, (, e, ., getIndex, (, ), )]
[v]
[e, ., getIndex, (, )]
[e]
[d]
[checkVectorDimensions, (, v, )]
[v]
[0]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[d]
[FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ,, d, )]
[FastMath]
[FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), )]
[FastMath]
[e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), )]
[e, ., getValue, (, )]
[e]
[v, ., getEntry, (, e, ., getIndex, (, ), )]
[v]
[e, ., getIndex, (, )]
[e]
[d]
[d]
[-, 1]
[1]
[Double, ., POSITIVE_INFINITY]
[Double]
[iterator, (, )]
[iterator, ., hasNext, (, )]
[iterator]
[iterator, ., next, (, )]
[iterator]
[entry, ., getValue, (, ), <=, minValue]
[entry, ., getValue, (, )]
[entry]
[minValue]
[minIndex]
[entry, ., getIndex, (, )]
[entry]
[minValue]
[entry, ., getValue, (, )]
[entry]
[minIndex]
[getMinIndex, (, )]
[minIndex, <, 0, ?, Double, ., NaN, :, getEntry, (, minIndex, )]
[minIndex, <, 0]
[minIndex]
[0]
[Double, ., NaN]
[Double]
[getEntry, (, minIndex, )]
[minIndex]
[-, 1]
[1]
[Double, ., NEGATIVE_INFINITY]
[Double]
[iterator, (, )]
[iterator, ., hasNext, (, )]
[iterator]
[iterator, ., next, (, )]
[iterator]
[entry, ., getValue, (, ), >=, maxValue]
[entry, ., getValue, (, )]
[entry]
[maxValue]
[maxIndex]
[entry, ., getIndex, (, )]
[entry]
[maxValue]
[entry, ., getValue, (, )]
[entry]
[maxIndex]
[getMaxIndex, (, )]
[maxIndex, <, 0, ?, Double, ., NaN, :, getEntry, (, maxIndex, )]
[maxIndex, <, 0]
[maxIndex]
[0]
[Double, ., NaN]
[Double]
[getEntry, (, maxIndex, )]
[maxIndex]
[copy, (, ), ., mapMultiplyToSelf, (, d, )]
[copy, (, )]
[d]
[mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Multiply, (, ), ,, d, ), )]
[FunctionUtils, ., fix2ndArgument, (, new, Multiply, (, ), ,, d, )]
[FunctionUtils]
[new, Multiply, (, )]
[d]
[copy, (, ), ., mapSubtractToSelf, (, d, )]
[copy, (, )]
[d]
[mapAddToSelf, (, -, d, )]
[-, d]
[d]
[copy, (, ), ., mapDivideToSelf, (, d, )]
[copy, (, )]
[d]
[mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Divide, (, ), ,, d, ), )]
[FunctionUtils, ., fix2ndArgument, (, new, Divide, (, ), ,, d, )]
[FunctionUtils]
[new, Divide, (, )]
[d]
[this, ., getDimension, (, )]
[this]
[v, ., getDimension, (, )]
[v]
[v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector]
[v, instanceof, SparseRealVector]
[v]
[this, instanceof, SparseRealVector]
[this]
[product]
[new, OpenMapRealMatrix, (, m, ,, n, )]
[m]
[n]
[product]
[new, Array2DRowRealMatrix, (, m, ,, n, )]
[m]
[n]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[0]
[j, <, n]
[j]
[n]
[j, ++]
[j]
[product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, ), )]
[product]
[i]
[j]
[this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, )]
[this, ., getEntry, (, i, )]
[this]
[i]
[v, ., getEntry, (, j, )]
[v]
[j]
[product]
[v, ., dotProduct, (, v, )]
[v]
[v]
[norm2, ==, 0.0]
[norm2]
[0.0]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[LocalizedFormats, ., ZERO_NORM]
[LocalizedFormats]
[v, ., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (, v, ), )]
[v]
[dotProduct, (, v, ), /, v, ., dotProduct, (, v, )]
[dotProduct, (, v, )]
[v]
[v, ., dotProduct, (, v, )]
[v]
[v]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., setValue, (, value, )]
[e]
[value]
[getDimension, (, )]
[new, double, [, dim, ]]
[dim]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[values, [, i, ]]
[values]
[i]
[getEntry, (, i, )]
[i]
[values]
[getNorm, (, )]
[norm, ==, 0]
[norm]
[0]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[LocalizedFormats, ., ZERO_NORM]
[LocalizedFormats]
[mapDivide, (, norm, )]
[norm]
[getNorm, (, )]
[norm, ==, 0]
[norm]
[0]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[LocalizedFormats, ., ZERO_NORM]
[LocalizedFormats]
[mapDivideToSelf, (, getNorm, (, ), )]
[getNorm, (, )]
[new, SparseEntryIterator, (, )]
[getDimension, (, )]
[new, Iterator, <, Entry, >, (, ), {, private, int, i, =, 0, ;, private, Entry, e, =, new, Entry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }]
[0]
[new, Entry, (, )]
[i, <, dim]
[i]
[dim]
[i, <, dim]
[i]
[dim]
[e, ., setIndex, (, i, ++, )]
[e]
[i, ++]
[i]
[e]
[new, NoSuchElementException, (, )]
[new, MathUnsupportedOperationException, (, )]
[copy, (, ), ., mapToSelf, (, function, )]
[copy, (, )]
[function]
[iterator, (, )]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[e, ., setValue, (, function, ., value, (, e, ., getValue, (, ), ), )]
[e]
[function, ., value, (, e, ., getValue, (, ), )]
[function]
[e, ., getValue, (, )]
[e]
[this]
[copy, (, ), ., combineToSelf, (, a, ,, b, ,, y, )]
[copy, (, )]
[a]
[b]
[y]
[checkVectorDimensions, (, y, )]
[y]
[0]
[i, <, getDimension, (, )]
[i]
[getDimension, (, )]
[i, ++]
[i]
[getEntry, (, i, )]
[i]
[y, ., getEntry, (, i, )]
[y]
[i]
[setEntry, (, i, ,, a, *, xi, +, b, *, yi, )]
[i]
[a, *, xi, +, b, *, yi]
[a, *, xi]
[a]
[xi]
[b, *, yi]
[b]
[yi]
[this]
[getDimension, (, )]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, )]
[visitor]
[dim]
[0]
[dim, -, 1]
[dim]
[1]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[visitor]
[i]
[getEntry, (, i, )]
[i]
[visitor, ., end, (, )]
[visitor]
[checkIndices, (, start, ,, end, )]
[start]
[end]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, )]
[visitor]
[getDimension, (, )]
[start]
[end]
[start]
[i, <=, end]
[i]
[end]
[i, ++]
[i]
[visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[visitor]
[i]
[getEntry, (, i, )]
[i]
[visitor, ., end, (, )]
[visitor]
[walkInDefaultOrder, (, visitor, )]
[visitor]
[walkInDefaultOrder, (, visitor, ,, start, ,, end, )]
[visitor]
[start]
[end]
[getDimension, (, )]
[visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, )]
[visitor]
[dim]
[0]
[dim, -, 1]
[dim]
[1]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), )]
[i]
[visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[visitor]
[i]
[getEntry, (, i, )]
[i]
[visitor, ., end, (, )]
[visitor]
[checkIndices, (, start, ,, end, )]
[start]
[end]
[visitor, ., start, (, getDimension, (, ), ,, start, ,, end, )]
[visitor]
[getDimension, (, )]
[start]
[end]
[start]
[i, <=, end]
[i]
[end]
[i, ++]
[i]
[setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), )]
[i]
[visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[visitor]
[i]
[getEntry, (, i, )]
[i]
[visitor, ., end, (, )]
[visitor]
[walkInDefaultOrder, (, visitor, )]
[visitor]
[walkInDefaultOrder, (, visitor, ,, start, ,, end, )]
[visitor]
[start]
[end]
[setIndex, (, 0, )]
[0]
[getEntry, (, getIndex, (, ), )]
[getIndex, (, )]
[setEntry, (, getIndex, (, ), ,, value, )]
[getIndex, (, )]
[value]
[index]
[this, ., index]
[this]
[index]
[new, MathUnsupportedOperationException, (, )]
[new, MathUnsupportedOperationException, (, )]
[dim]
[getDimension, (, )]
[current]
[new, Entry, (, )]
[next]
[new, Entry, (, )]
[next, ., getValue, (, ), ==, 0]
[next, ., getValue, (, )]
[next]
[0]
[advance, (, next, )]
[next]
[e, ==, null]
[e]
[null]
[e, ., setIndex, (, e, ., getIndex, (, ), +, 1, )]
[e]
[e, ., getIndex, (, ), +, 1]
[e, ., getIndex, (, )]
[e]
[1]
[e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0]
[e, ., getIndex, (, ), <, dim]
[e, ., getIndex, (, )]
[e]
[dim]
[e, ., getValue, (, ), ==, 0]
[e, ., getValue, (, )]
[e]
[0]
[e, ., getIndex, (, ), >=, dim]
[e, ., getIndex, (, )]
[e]
[dim]
[e, ., setIndex, (, -, 1, )]
[e]
[-, 1]
[1]
[next, ., getIndex, (, ), >=, 0]
[next, ., getIndex, (, )]
[next]
[0]
[next, ., getIndex, (, )]
[next]
[index, <, 0]
[index]
[0]
[new, NoSuchElementException, (, )]
[current, ., setIndex, (, index, )]
[current]
[index]
[advance, (, next, )]
[next]
[current]
[new, MathUnsupportedOperationException, (, )]
[new, RealVector, (, ), {, @, Override, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, map, (, UnivariateFunction, function, ), {, return, v, ., map, (, function, ), ;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i, =, v, ., iterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, @, Override, public, Iterator, <, Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry, >, i, =, v, ., sparseIterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }, @, Override, public, RealVector, copy, (, ), {, return, v, ., copy, (, ), ;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., add, (, w, ), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., subtract, (, w, ), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return, v, ., mapAdd, (, d, ), ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapSubtract, (, double, d, ), {, return, v, ., mapSubtract, (, d, ), ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapMultiply, (, double, d, ), {, return, v, ., mapMultiply, (, d, ), ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, mapDivide, (, double, d, ), {, return, v, ., mapDivide, (, d, ), ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealVector, ebeMultiply, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeMultiply, (, w, ), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeDivide, (, w, ), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., dotProduct, (, w, ), ;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return, v, ., cosine, (, w, ), ;, }, @, Override, public, double, getNorm, (, ), {, return, v, ., getNorm, (, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, return, v, ., getL1Norm, (, ), ;, }, @, Override, public, double, getLInfNorm, (, ), {, return, v, ., getLInfNorm, (, ), ;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getDistance, (, w, ), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getL1Distance, (, w, ), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getLInfDistance, (, w, ), ;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return, v, ., unitVector, (, ), ;, }, @, Override, public, void, unitize, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, w, ), {, return, v, ., outerProduct, (, w, ), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return, v, ., getEntry, (, index, ), ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, void, addToEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, int, getDimension, (, ), {, return, v, ., getDimension, (, ), ;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return, v, ., append, (, w, ), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return, v, ., append, (, d, ), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return, v, ., getSubVector, (, index, ,, n, ), ;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, void, set, (, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return, v, ., toArray, (, ), ;, }, @, Override, public, boolean, isNaN, (, ), {, return, v, ., isNaN, (, ), ;, }, @, Override, public, boolean, isInfinite, (, ), {, return, v, ., isInfinite, (, ), ;, }, @, Override, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, v, ., combine, (, a, ,, b, ,, y, ), ;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, class, UnmodifiableEntry, extends, Entry, {, @, Override, public, double, getValue, (, ), {, return, v, ., getEntry, (, getIndex, (, ), ), ;, }, @, Override, public, void, setValue, (, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, }]
[new, MathUnsupportedOperationException, (, )]
[v, ., map, (, function, )]
[v]
[function]
[v, ., iterator, (, )]
[v]
[new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }]
[new, UnmodifiableEntry, (, )]
[i, ., hasNext, (, )]
[i]
[e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), )]
[e]
[i, ., next, (, ), ., getIndex, (, )]
[i, ., next, (, )]
[i]
[e]
[new, MathUnsupportedOperationException, (, )]
[v, ., sparseIterator, (, )]
[v]
[new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }]
[new, UnmodifiableEntry, (, )]
[i, ., hasNext, (, )]
[i]
[e, ., setIndex, (, i, ., next, (, ), ., getIndex, (, ), )]
[e]
[i, ., next, (, ), ., getIndex, (, )]
[i, ., next, (, )]
[i]
[e]
[new, MathUnsupportedOperationException, (, )]
[v, ., copy, (, )]
[v]
[v, ., add, (, w, )]
[v]
[w]
[v, ., subtract, (, w, )]
[v]
[w]
[v, ., mapAdd, (, d, )]
[v]
[d]
[new, MathUnsupportedOperationException, (, )]
[v, ., mapSubtract, (, d, )]
[v]
[d]
[new, MathUnsupportedOperationException, (, )]
[v, ., mapMultiply, (, d, )]
[v]
[d]
[new, MathUnsupportedOperationException, (, )]
[v, ., mapDivide, (, d, )]
[v]
[d]
[new, MathUnsupportedOperationException, (, )]
[v, ., ebeMultiply, (, w, )]
[v]
[w]
[v, ., ebeDivide, (, w, )]
[v]
[w]
[v, ., dotProduct, (, w, )]
[v]
[w]
[v, ., cosine, (, w, )]
[v]
[w]
[v, ., getNorm, (, )]
[v]
[v, ., getL1Norm, (, )]
[v]
[v, ., getLInfNorm, (, )]
[v]
[v, ., getDistance, (, w, )]
[v]
[w]
[v, ., getL1Distance, (, w, )]
[v]
[w]
[v, ., getLInfDistance, (, w, )]
[v]
[w]
[v, ., unitVector, (, )]
[v]
[new, MathUnsupportedOperationException, (, )]
[v, ., outerProduct, (, w, )]
[v]
[w]
[v, ., getEntry, (, index, )]
[v]
[index]
[new, MathUnsupportedOperationException, (, )]
[new, MathUnsupportedOperationException, (, )]
[v, ., getDimension, (, )]
[v]
[v, ., append, (, w, )]
[v]
[w]
[v, ., append, (, d, )]
[v]
[d]
[v, ., getSubVector, (, index, ,, n, )]
[v]
[index]
[n]
[new, MathUnsupportedOperationException, (, )]
[new, MathUnsupportedOperationException, (, )]
[v, ., toArray, (, )]
[v]
[v, ., isNaN, (, )]
[v]
[v, ., isInfinite, (, )]
[v]
[v, ., combine, (, a, ,, b, ,, y, )]
[v]
[a]
[b]
[y]
[new, MathUnsupportedOperationException, (, )]
[v, ., getEntry, (, getIndex, (, ), )]
[v]
[getIndex, (, )]
[new, MathUnsupportedOperationException, (, )]
