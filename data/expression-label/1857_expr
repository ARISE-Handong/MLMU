[20120917L]
[nbPoints]
[stepSize]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[nbPoints, <=, 1]
[nbPoints]
[1]
[new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, )]
[stepSize]
[1]
[false]
[this, ., nbPoints]
[this]
[nbPoints]
[stepSize, <=, 0]
[stepSize]
[0]
[new, NotPositiveException, (, stepSize, )]
[stepSize]
[this, ., stepSize]
[this]
[stepSize]
[halfSampleSpan]
[0.5, *, stepSize, *, (, nbPoints, -, 1, )]
[0.5, *, stepSize]
[0.5]
[stepSize]
[(, nbPoints, -, 1, )]
[nbPoints, -, 1]
[nbPoints]
[1]
[2, *, halfSampleSpan, >=, tUpper, -, tLower]
[2, *, halfSampleSpan]
[2]
[halfSampleSpan]
[tUpper, -, tLower]
[tUpper]
[tLower]
[new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, )]
[2, *, halfSampleSpan]
[2]
[halfSampleSpan]
[tUpper, -, tLower]
[tUpper]
[tLower]
[false]
[FastMath, ., ulp, (, halfSampleSpan, )]
[FastMath]
[halfSampleSpan]
[this, ., tMin]
[this]
[tLower, +, halfSampleSpan, +, safety]
[tLower, +, halfSampleSpan]
[tLower]
[halfSampleSpan]
[safety]
[this, ., tMax]
[this]
[tUpper, -, halfSampleSpan, -, safety]
[tUpper, -, halfSampleSpan]
[tUpper]
[halfSampleSpan]
[safety]
[nbPoints]
[stepSize]
[new, double, [, nbPoints, ]]
[nbPoints]
[new, double, [, nbPoints, ]]
[nbPoints]
[0]
[i, <, nbPoints]
[i]
[nbPoints]
[++, i]
[i]
[bottom, [, i, ]]
[bottom]
[i]
[y, [, i, ]]
[y]
[i]
[1]
[j, <=, i]
[j]
[i]
[++, j]
[j]
[bottom, [, i, -, j, ]]
[bottom]
[i, -, j]
[i]
[j]
[(, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, )]
[(, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], )]
[bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ]]
[bottom, [, i, -, j, +, 1, ]]
[bottom]
[i, -, j, +, 1]
[i, -, j]
[i]
[j]
[1]
[bottom, [, i, -, j, ]]
[bottom]
[i, -, j]
[i]
[j]
[(, j, *, stepSize, )]
[j, *, stepSize]
[j]
[stepSize]
[top, [, i, ]]
[top]
[i]
[bottom, [, 0, ]]
[bottom]
[0]
[t, ., getOrder, (, )]
[t]
[t, ., getFreeParameters, (, )]
[t]
[t, ., getAllDerivatives, (, )]
[t]
[t, ., getValue, (, ), -, t0]
[t, ., getValue, (, )]
[t]
[t0]
[new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, )]
[parameters]
[order]
[0.0]
[null]
[0]
[i, <, nbPoints]
[i]
[nbPoints]
[++, i]
[i]
[i, ==, 0]
[i]
[0]
[monomial]
[new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, )]
[parameters]
[order]
[1.0]
[derivatives, [, 0, ]]
[derivatives]
[0]
[dt0, -, (, i, -, 1, ), *, stepSize]
[dt0]
[(, i, -, 1, ), *, stepSize]
[(, i, -, 1, )]
[i, -, 1]
[i]
[1]
[stepSize]
[new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, )]
[parameters]
[order]
[derivatives]
[monomial]
[monomial, ., multiply, (, deltaX, )]
[monomial]
[deltaX]
[interpolation]
[interpolation, ., add, (, monomial, ., multiply, (, top, [, i, ], ), )]
[interpolation]
[monomial, ., multiply, (, top, [, i, ], )]
[monomial]
[top, [, i, ]]
[top]
[i]
[interpolation]
[new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }]
[function, ., value, (, x, )]
[function]
[x]
[t, ., getOrder, (, ), >=, nbPoints]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, )]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[false]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, )]
[FastMath]
[FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, )]
[FastMath]
[t, ., getValue, (, )]
[t]
[tMax]
[tMin]
[halfSampleSpan]
[new, double, [, nbPoints, ]]
[nbPoints]
[0]
[i, <, nbPoints]
[i]
[nbPoints]
[++, i]
[i]
[y, [, i, ]]
[y]
[i]
[function, ., value, (, t0, +, i, *, stepSize, )]
[function]
[t0, +, i, *, stepSize]
[t0]
[i, *, stepSize]
[i]
[stepSize]
[evaluate, (, t, ,, t0, ,, y, )]
[t]
[t0]
[y]
[new, UnivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }, return, value, ;, }, }]
[function, ., value, (, x, )]
[function]
[x]
[t, ., getOrder, (, ), >=, nbPoints]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, )]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[false]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, )]
[FastMath]
[FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, )]
[FastMath]
[t, ., getValue, (, )]
[t]
[tMax]
[tMin]
[halfSampleSpan]
[null]
[0]
[i, <, nbPoints]
[i]
[nbPoints]
[++, i]
[i]
[function, ., value, (, t0, +, i, *, stepSize, )]
[function]
[t0, +, i, *, stepSize]
[t0]
[i, *, stepSize]
[i]
[stepSize]
[i, ==, 0]
[i]
[0]
[y]
[new, double, [, v, ., length, ], [, nbPoints, ]]
[v, ., length]
[v]
[nbPoints]
[0]
[j, <, v, ., length]
[j]
[v, ., length]
[v]
[++, j]
[j]
[y, [, j, ], [, i, ]]
[y, [, j, ]]
[y]
[j]
[i]
[v, [, j, ]]
[v]
[j]
[new, DerivativeStructure, [, y, ., length, ]]
[y, ., length]
[y]
[0]
[j, <, value, ., length]
[j]
[value, ., length]
[value]
[++, j]
[j]
[value, [, j, ]]
[value]
[j]
[evaluate, (, t, ,, t0, ,, y, [, j, ], )]
[t]
[t0]
[y, [, j, ]]
[y]
[j]
[value]
[new, UnivariateDifferentiableMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, final, double, x, ), throws, MathIllegalArgumentException, {, return, function, ., value, (, x, ), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;, }, }, return, value, ;, }, }]
[function, ., value, (, x, )]
[function]
[x]
[t, ., getOrder, (, ), >=, nbPoints]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, )]
[t, ., getOrder, (, )]
[t]
[nbPoints]
[false]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, )]
[FastMath]
[FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, )]
[FastMath]
[t, ., getValue, (, )]
[t]
[tMax]
[tMin]
[halfSampleSpan]
[null]
[0]
[i, <, nbPoints]
[i]
[nbPoints]
[++, i]
[i]
[function, ., value, (, t0, +, i, *, stepSize, )]
[function]
[t0, +, i, *, stepSize]
[t0]
[i, *, stepSize]
[i]
[stepSize]
[i, ==, 0]
[i]
[0]
[y]
[new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], [, nbPoints, ]]
[v, ., length]
[v]
[v, [, 0, ], ., length]
[v, [, 0, ]]
[v]
[0]
[nbPoints]
[0]
[j, <, v, ., length]
[j]
[v, ., length]
[v]
[++, j]
[j]
[0]
[k, <, v, [, j, ], ., length]
[k]
[v, [, j, ], ., length]
[v, [, j, ]]
[v]
[j]
[++, k]
[k]
[y, [, j, ], [, k, ], [, i, ]]
[y, [, j, ], [, k, ]]
[y, [, j, ]]
[y]
[j]
[k]
[i]
[v, [, j, ], [, k, ]]
[v, [, j, ]]
[v]
[j]
[k]
[new, DerivativeStructure, [, y, ., length, ], [, y, [, 0, ], ., length, ]]
[y, ., length]
[y]
[y, [, 0, ], ., length]
[y, [, 0, ]]
[y]
[0]
[0]
[j, <, value, ., length]
[j]
[value, ., length]
[value]
[++, j]
[j]
[0]
[k, <, y, [, j, ], ., length]
[k]
[y, [, j, ], ., length]
[y, [, j, ]]
[y]
[j]
[++, k]
[k]
[value, [, j, ], [, k, ]]
[value, [, j, ]]
[value]
[j]
[k]
[evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], )]
[t]
[t0]
[y, [, j, ], [, k, ]]
[y, [, j, ]]
[y]
[j]
[k]
[value]
