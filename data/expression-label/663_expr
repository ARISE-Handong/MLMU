[new, CharRanges, (, new, int, [, 0, ], )]
[new, int, [, 0, ]]
[0]
[new, CharRanges, (, new, int, [, ], {, 0, ,, 0x10000, }, )]
[new, int, [, ], {, 0, ,, 0x10000, }]
[{, 0, ,, 0x10000, }]
[0]
[0x10000]
[start, >, end]
[start]
[end]
[new, IndexOutOfBoundsException, (, start, +, " > ", +, end, )]
[start, +, " > ", +, end]
[start, +, " > "]
[start]
[" > "]
[end]
[new, CharRanges, (, new, int, [, ], {, start, ,, end, +, 1, }, )]
[new, int, [, ], {, start, ,, end, +, 1, }]
[{, start, ,, end, +, 1, }]
[start]
[end, +, 1]
[end]
[1]
[new, CharRanges, (, intArrayToRanges, (, members, ., clone, (, ), ), )]
[intArrayToRanges, (, members, ., clone, (, ), )]
[members, ., clone, (, )]
[members]
[ranges]
[ranges, ., clone, (, )]
[ranges]
[(, ranges, ., length, &, 1, ), !=, 0]
[(, ranges, ., length, &, 1, )]
[ranges, ., length, &, 1]
[ranges, ., length]
[ranges]
[1]
[0]
[new, IllegalArgumentException, (, )]
[1]
[i, <, ranges, ., length]
[i]
[ranges, ., length]
[ranges]
[++, i]
[i]
[ranges, [, i, ], <=, ranges, [, i, -, 1, ]]
[ranges, [, i, ]]
[ranges]
[i]
[ranges, [, i, -, 1, ]]
[ranges]
[i, -, 1]
[i]
[1]
[new, IllegalArgumentException, (, ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ], )]
[ranges, [, i, ], +, " > ", +, ranges, [, i, -, 1, ]]
[ranges, [, i, ], +, " > "]
[ranges, [, i, ]]
[ranges]
[i]
[" > "]
[ranges, [, i, -, 1, ]]
[ranges]
[i, -, 1]
[i]
[1]
[new, CharRanges, (, ranges, )]
[ranges]
[this, ., ranges]
[this]
[ranges]
[members, ., length]
[members]
[nMembers, ==, 0]
[nMembers]
[0]
[new, int, [, 0, ]]
[0]
[Arrays, ., sort, (, members, )]
[Arrays]
[members]
[1]
[1]
[i, <, nMembers]
[i]
[nMembers]
[++, i]
[i]
[members, [, i, ]]
[members]
[i]
[members, [, i, -, 1, ]]
[members]
[i, -, 1]
[i]
[1]
[current, ==, last]
[current]
[last]
[current, !=, last, +, 1]
[current]
[last, +, 1]
[last]
[1]
[++, nRuns]
[nRuns]
[new, int, [, nRuns, *, 2, ]]
[nRuns, *, 2]
[nRuns]
[2]
[ranges, [, 0, ]]
[ranges]
[0]
[members, [, 0, ]]
[members]
[0]
[0]
[1]
[k, +, 2, <, ranges, ., length]
[k, +, 2]
[k]
[2]
[ranges, ., length]
[ranges]
[++, i]
[i]
[members, [, i, ]]
[members]
[i]
[members, [, i, -, 1, ]]
[members]
[i, -, 1]
[i]
[1]
[current, ==, last]
[current]
[last]
[current, !=, last, +, 1]
[current]
[last, +, 1]
[last]
[1]
[ranges, [, ++, k, ]]
[ranges]
[++, k]
[k]
[last, +, 1]
[last]
[1]
[ranges, [, ++, k, ]]
[ranges]
[++, k]
[k]
[current]
[ranges, [, ++, k, ]]
[ranges]
[++, k]
[k]
[members, [, nMembers, -, 1, ], +, 1]
[members, [, nMembers, -, 1, ]]
[members]
[nMembers, -, 1]
[nMembers]
[1]
[1]
[ranges]
[(, Arrays, ., binarySearch, (, ranges, ,, bit, ), &, 1, ), ==, 0]
[(, Arrays, ., binarySearch, (, ranges, ,, bit, ), &, 1, )]
[Arrays, ., binarySearch, (, ranges, ,, bit, ), &, 1]
[Arrays, ., binarySearch, (, ranges, ,, bit, )]
[Arrays]
[ranges]
[bit]
[1]
[0]
[ranges, ., length, >=, 0, ?, ranges, [, 0, ], :, Integer, ., MIN_VALUE]
[ranges, ., length, >=, 0]
[ranges, ., length]
[ranges]
[0]
[ranges, [, 0, ]]
[ranges]
[0]
[Integer, ., MIN_VALUE]
[Integer]
[ranges, ., length, ==, 0]
[ranges, ., length]
[ranges]
[0]
[ranges, ., length, >, >, 1]
[ranges, ., length]
[ranges]
[1]
[ranges, [, i, <<, 1, ]]
[ranges]
[i, <<, 1]
[i]
[1]
[ranges, [, (, i, <<, 1, ), |, 1, ]]
[ranges]
[(, i, <<, 1, ), |, 1]
[(, i, <<, 1, )]
[i, <<, 1]
[i]
[1]
[1]
[this, ., ranges]
[this]
[other, ., ranges]
[other]
[q, ., length]
[q]
[r, ., length]
[r]
[m, ==, 0]
[m]
[0]
[other]
[n, ==, 0]
[n]
[0]
[this]
[new, int, [, m, +, n, ]]
[m, +, n]
[m]
[n]
[0]
[0]
[0]
[i, <, m, &&, j, <, n]
[i, <, m]
[i]
[m]
[j, <, n]
[j]
[n]
[q, [, i, ]]
[q]
[i]
[q, [, i, +, 1, ]]
[q]
[i, +, 1]
[i]
[1]
[r, [, j, ]]
[r]
[j]
[r, [, j, +, 1, ]]
[r]
[j, +, 1]
[j]
[1]
[a1, <, b0]
[a1]
[b0]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[a0]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[a1]
[i]
[2]
[b1, <, a0]
[b1]
[a0]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[b0]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[b1]
[j]
[2]
[Math, ., min, (, a0, ,, b0, )]
[Math]
[a0]
[b0]
[Math, ., max, (, a1, ,, b1, )]
[Math]
[a1]
[b1]
[i]
[2]
[j]
[2]
[i, <, m, ||, j, <, n]
[i, <, m]
[i]
[m]
[j, <, n]
[j]
[n]
[i, <, m, &&, q, [, i, ], <=, end]
[i, <, m]
[i]
[m]
[q, [, i, ], <=, end]
[q, [, i, ]]
[q]
[i]
[end]
[end]
[Math, ., max, (, end, ,, q, [, i, +, 1, ], )]
[Math]
[end]
[q, [, i, +, 1, ]]
[q]
[i, +, 1]
[i]
[1]
[i]
[2]
[j, <, n, &&, r, [, j, ], <=, end]
[j, <, n]
[j]
[n]
[r, [, j, ], <=, end]
[r, [, j, ]]
[r]
[j]
[end]
[end]
[Math, ., max, (, end, ,, r, [, j, +, 1, ], )]
[Math]
[end]
[r, [, j, +, 1, ]]
[r]
[j, +, 1]
[j]
[1]
[j]
[2]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[start]
[out, [, k, ++, ]]
[out]
[k, ++]
[k]
[end]
[i, <, m]
[i]
[m]
[System, ., arraycopy, (, q, ,, i, ,, out, ,, k, ,, m, -, i, )]
[System]
[q]
[i]
[out]
[k]
[m, -, i]
[m]
[i]
[k]
[m, -, i]
[m]
[i]
[j, <, n]
[j]
[n]
[System, ., arraycopy, (, r, ,, j, ,, out, ,, k, ,, n, -, j, )]
[System]
[r]
[j]
[out]
[k]
[n, -, j]
[n]
[j]
[k]
[n, -, j]
[n]
[j]
[k, !=, out, ., length]
[k]
[out, ., length]
[out]
[new, int, [, k, ]]
[k]
[System, ., arraycopy, (, out, ,, 0, ,, clipped, ,, 0, ,, k, )]
[System]
[out]
[0]
[clipped]
[0]
[k]
[out]
[clipped]
[new, CharRanges, (, out, )]
[out]
[ranges]
[other, ., ranges]
[other]
[aRanges, ., length]
[aRanges]
[bRanges, ., length]
[bRanges]
[aLen, ==, 0]
[aLen]
[0]
[this]
[bLen, ==, 0]
[bLen]
[0]
[other]
[0]
[0]
[new, int, [, Math, ., min, (, aLen, ,, bLen, ), ]]
[Math, ., min, (, aLen, ,, bLen, )]
[Math]
[aLen]
[bLen]
[0]
[Math, ., min, (, aRanges, [, 0, ], ,, bRanges, [, 0, ], )]
[Math]
[aRanges, [, 0, ]]
[aRanges]
[0]
[bRanges, [, 0, ]]
[bRanges]
[0]
[aIdx, <, aLen, &&, bIdx, <, bLen]
[aIdx, <, aLen]
[aIdx]
[aLen]
[bIdx, <, bLen]
[bIdx]
[bLen]
[aRanges, [, aIdx, +, 1, ], <=, pos]
[aRanges, [, aIdx, +, 1, ]]
[aRanges]
[aIdx, +, 1]
[aIdx]
[1]
[pos]
[aIdx]
[2]
[bRanges, [, bIdx, +, 1, ], <=, pos]
[bRanges, [, bIdx, +, 1, ]]
[bRanges]
[bIdx, +, 1]
[bIdx]
[1]
[pos]
[bIdx]
[2]
[Math, ., max, (, aRanges, [, aIdx, ], ,, bRanges, [, bIdx, ], )]
[Math]
[aRanges, [, aIdx, ]]
[aRanges]
[aIdx]
[bRanges, [, bIdx, ]]
[bRanges]
[bIdx]
[pos, <, start]
[pos]
[start]
[pos]
[start]
[Math, ., min, (, aRanges, [, aIdx, +, 1, ], ,, bRanges, [, bIdx, +, 1, ], )]
[Math]
[aRanges, [, aIdx, +, 1, ]]
[aRanges]
[aIdx, +, 1]
[aIdx]
[1]
[bRanges, [, bIdx, +, 1, ]]
[bRanges]
[bIdx, +, 1]
[bIdx]
[1]
[intersectionIdx, !=, 0, &&, pos, ==, intersection, [, intersectionIdx, -, 1, ]]
[intersectionIdx, !=, 0]
[intersectionIdx]
[0]
[pos, ==, intersection, [, intersectionIdx, -, 1, ]]
[pos]
[intersection, [, intersectionIdx, -, 1, ]]
[intersection]
[intersectionIdx, -, 1]
[intersectionIdx]
[1]
[intersection, [, intersectionIdx, -, 1, ]]
[intersection]
[intersectionIdx, -, 1]
[intersectionIdx]
[1]
[end]
[intersectionIdx, ==, intersection, ., length]
[intersectionIdx]
[intersection, ., length]
[intersection]
[new, int, [, intersectionIdx, *, 2, ]]
[intersectionIdx, *, 2]
[intersectionIdx]
[2]
[System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, )]
[System]
[intersection]
[0]
[newArr]
[0]
[intersectionIdx]
[intersection]
[newArr]
[intersection, [, intersectionIdx, ++, ]]
[intersection]
[intersectionIdx, ++]
[intersectionIdx]
[pos]
[intersection, [, intersectionIdx, ++, ]]
[intersection]
[intersectionIdx, ++]
[intersectionIdx]
[end]
[pos]
[end]
[intersectionIdx, !=, intersection, ., length]
[intersectionIdx]
[intersection, ., length]
[intersection]
[new, int, [, intersectionIdx, ]]
[intersectionIdx]
[System, ., arraycopy, (, intersection, ,, 0, ,, newArr, ,, 0, ,, intersectionIdx, )]
[System]
[intersection]
[0]
[newArr]
[0]
[intersectionIdx]
[intersection]
[newArr]
[new, CharRanges, (, intersection, )]
[intersection]
[this, ., ranges]
[this]
[subtrahendRanges, ., ranges]
[subtrahendRanges]
[minuend, ., length]
[minuend]
[subtrahend, ., length]
[subtrahend]
[mn, ==, 0, ||, sn, ==, 0]
[mn, ==, 0]
[mn]
[0]
[sn, ==, 0]
[sn]
[0]
[this]
[new, int, [, minuend, ., length, ]]
[minuend, ., length]
[minuend]
[0]
[0]
[0]
[minuend, [, 0, ]]
[minuend]
[0]
[mIdx, <, mn]
[mIdx]
[mn]
[pos, >=, minuend, [, mIdx, +, 1, ]]
[pos]
[minuend, [, mIdx, +, 1, ]]
[minuend]
[mIdx, +, 1]
[mIdx]
[1]
[mIdx]
[2]
[pos, <, minuend, [, mIdx, ]]
[pos]
[minuend, [, mIdx, ]]
[minuend]
[mIdx]
[pos]
[minuend, [, mIdx, ]]
[minuend]
[mIdx]
[sIdx, <, sn, &&, pos, >=, subtrahend, [, sIdx, ]]
[sIdx, <, sn]
[sIdx]
[sn]
[pos, >=, subtrahend, [, sIdx, ]]
[pos]
[subtrahend, [, sIdx, ]]
[subtrahend]
[sIdx]
[pos]
[subtrahend, [, sIdx, +, 1, ]]
[subtrahend]
[sIdx, +, 1]
[sIdx]
[1]
[sIdx]
[2]
[sIdx, <, sn, ?, Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], ), :, minuend, [, mIdx, +, 1, ]]
[sIdx, <, sn]
[sIdx]
[sn]
[Math, ., min, (, minuend, [, mIdx, +, 1, ], ,, subtrahend, [, sIdx, ], )]
[Math]
[minuend, [, mIdx, +, 1, ]]
[minuend]
[mIdx, +, 1]
[mIdx]
[1]
[subtrahend, [, sIdx, ]]
[subtrahend]
[sIdx]
[minuend, [, mIdx, +, 1, ]]
[minuend]
[mIdx, +, 1]
[mIdx]
[1]
[dIdx, !=, 0, &&, difference, [, dIdx, -, 1, ], ==, pos]
[dIdx, !=, 0]
[dIdx]
[0]
[difference, [, dIdx, -, 1, ], ==, pos]
[difference, [, dIdx, -, 1, ]]
[difference]
[dIdx, -, 1]
[dIdx]
[1]
[pos]
[difference, [, dIdx, -, 1, ]]
[difference]
[dIdx, -, 1]
[dIdx]
[1]
[pos]
[dIdx, ==, difference, ., length]
[dIdx]
[difference, ., length]
[difference]
[new, int, [, dIdx, *, 2, ]]
[dIdx, *, 2]
[dIdx]
[2]
[System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, )]
[System]
[difference]
[0]
[newArr]
[0]
[dIdx]
[difference]
[newArr]
[difference, [, dIdx, ++, ]]
[difference]
[dIdx, ++]
[dIdx]
[pos]
[difference, [, dIdx, ++, ]]
[difference]
[dIdx, ++]
[dIdx]
[end]
[pos]
[end]
[dIdx, !=, difference, ., length]
[dIdx]
[difference, ., length]
[difference]
[new, int, [, dIdx, ]]
[dIdx]
[System, ., arraycopy, (, difference, ,, 0, ,, newArr, ,, 0, ,, dIdx, )]
[System]
[difference]
[0]
[newArr]
[0]
[dIdx]
[difference]
[newArr]
[new, CharRanges, (, difference, )]
[difference]
[this, ., ranges]
[this]
[sub, ., ranges]
[sub]
[0]
[0]
[superRanges, ., length]
[superRanges]
[subRanges, ., length]
[subRanges]
[subIdx, <, subLen]
[subIdx]
[subLen]
[superIdx, ==, superLen]
[superIdx]
[superLen]
[false]
[superRanges, [, superIdx, +, 1, ], <=, subRanges, [, subIdx, ]]
[superRanges, [, superIdx, +, 1, ]]
[superRanges]
[superIdx, +, 1]
[superIdx]
[1]
[subRanges, [, subIdx, ]]
[subRanges]
[subIdx]
[superIdx]
[2]
[superRanges, [, superIdx, ], >, subRanges, [, subIdx, ]]
[superRanges, [, superIdx, ]]
[superRanges]
[superIdx]
[subRanges, [, subIdx, ]]
[subRanges]
[subIdx]
[false]
[superRanges, [, superIdx, +, 1, ], >=, subRanges, [, subIdx, +, 1, ]]
[superRanges, [, superIdx, +, 1, ]]
[superRanges]
[superIdx, +, 1]
[superIdx]
[1]
[subRanges, [, subIdx, +, 1, ]]
[subRanges]
[subIdx, +, 1]
[subIdx]
[1]
[subIdx]
[2]
[false]
[subIdx, ==, subLen]
[subIdx]
[subLen]
[ranges, ., length]
[ranges]
[delta, ==, 0, ||, n, ==, 0]
[delta, ==, 0]
[delta]
[0]
[n, ==, 0]
[n]
[0]
[this]
[delta, <, 0]
[delta]
[0]
[ranges, [, 0, ], +, delta]
[ranges, [, 0, ]]
[ranges]
[0]
[delta]
[lmin, <, Integer, ., MIN_VALUE]
[lmin]
[Integer, ., MIN_VALUE]
[Integer]
[new, IndexOutOfBoundsException, (, )]
[ranges, [, n, -, 1, ], +, delta]
[ranges, [, n, -, 1, ]]
[ranges]
[n, -, 1]
[n]
[1]
[delta]
[lmax, >, Integer, ., MAX_VALUE]
[lmax]
[Integer, ., MAX_VALUE]
[Integer]
[new, IndexOutOfBoundsException, (, )]
[new, int, [, n, ]]
[n]
[n]
[--, i, >=, 0]
[--, i]
[i]
[0]
[shiftedRanges, [, i, ]]
[shiftedRanges]
[i]
[ranges, [, i, ], +, delta]
[ranges, [, i, ]]
[ranges]
[i]
[delta]
[new, CharRanges, (, shiftedRanges, )]
[shiftedRanges]
[new, StringBuilder, (, )]
[sb, ., append, (, '[', )]
[sb]
['[']
[0]
[i, <, ranges, ., length]
[i]
[ranges, ., length]
[ranges]
[++, i]
[i]
[(, i, &, 1, ), !=, 0, &&, ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1]
[(, i, &, 1, ), !=, 0]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[0]
[ranges, [, i, ], ==, ranges, [, i, -, 1, ], +, 1]
[ranges, [, i, ]]
[ranges]
[i]
[ranges, [, i, -, 1, ], +, 1]
[ranges, [, i, -, 1, ]]
[ranges]
[i, -, 1]
[i]
[1]
[1]
[i, !=, 0]
[i]
[0]
[sb, ., append, (, (, i, &, 1, ), ==, 0, ?, ' ', :, '-', )]
[sb]
[(, i, &, 1, ), ==, 0, ?, ' ', :, '-']
[(, i, &, 1, ), ==, 0]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[0]
[' ']
['-']
[sb, ., append, (, "0x", ), ., append, (, Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, ), )]
[sb, ., append, (, "0x", )]
[sb]
["0x"]
[Integer, ., toString, (, ranges, [, i, ], -, (, i, &, 1, ), ,, 16, )]
[Integer]
[ranges, [, i, ], -, (, i, &, 1, )]
[ranges, [, i, ]]
[ranges]
[i]
[(, i, &, 1, )]
[i, &, 1]
[i]
[1]
[16]
[sb, ., append, (, ']', )]
[sb]
[']']
[sb, ., toString, (, )]
[sb]
[!, (, o, instanceof, CharRanges, )]
[(, o, instanceof, CharRanges, )]
[o, instanceof, CharRanges]
[o]
[false]
[Arrays, ., equals, (, this, ., ranges, ,, (, (, CharRanges, ), o, ), ., ranges, )]
[Arrays]
[this, ., ranges]
[this]
[(, (, CharRanges, ), o, ), ., ranges]
[(, (, CharRanges, ), o, )]
[(, CharRanges, ), o]
[o]
[0]
[0]
[Math, ., min, (, 16, ,, ranges, ., length, )]
[Math]
[16]
[ranges, ., length]
[ranges]
[i, <, n]
[i]
[n]
[++, i]
[i]
[hc]
[(, hc, <<, 2, ), +, ranges, [, i, ]]
[(, hc, <<, 2, )]
[hc, <<, 2]
[hc]
[2]
[ranges, [, i, ]]
[ranges]
[i]
[hc]
