[tree]
[boundary]
[boxBoundary, (, xMin, ,, xMax, ,, yMin, ,, yMax, )]
[xMin]
[xMax]
[yMin]
[yMax]
[verticesToTree, (, hyperplaneThickness, ,, vertices, )]
[hyperplaneThickness]
[vertices]
[new, Vector2D, (, xMin, ,, yMin, )]
[xMin]
[yMin]
[new, Vector2D, (, xMin, ,, yMax, )]
[xMin]
[yMax]
[new, Vector2D, (, xMax, ,, yMin, )]
[xMax]
[yMin]
[new, Vector2D, (, xMax, ,, yMax, )]
[xMax]
[yMax]
[new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }]
[{, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }]
[new, Line, (, minMin, ,, maxMin, )]
[minMin]
[maxMin]
[new, Line, (, maxMin, ,, maxMax, )]
[maxMin]
[maxMax]
[new, Line, (, maxMax, ,, minMax, )]
[maxMax]
[minMax]
[new, Line, (, minMax, ,, minMin, )]
[minMax]
[minMin]
[vertices, ., length]
[vertices]
[n, ==, 0]
[n]
[0]
[new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[new, Vertex, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[vArray, [, i, ]]
[vArray]
[i]
[new, Vertex, (, vertices, [, i, ], )]
[vertices, [, i, ]]
[vertices]
[i]
[new, ArrayList, <, Edge, >, (, n, )]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[vArray, [, i, ]]
[vArray]
[i]
[vArray, [, (, i, +, 1, ), %, n, ]]
[vArray]
[(, i, +, 1, ), %, n]
[(, i, +, 1, )]
[i, +, 1]
[i]
[1]
[n]
[start, ., sharedLineWith, (, end, )]
[start]
[end]
[line, ==, null]
[line]
[null]
[line]
[new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), )]
[start, ., getLocation, (, )]
[start]
[end, ., getLocation, (, )]
[end]
[edges, ., add, (, new, Edge, (, start, ,, end, ,, line, ), )]
[edges]
[new, Edge, (, start, ,, end, ,, line, )]
[start]
[end]
[line]
[vArray]
[vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness]
[vertex, !=, start, &&, vertex, !=, end]
[vertex, !=, start]
[vertex]
[start]
[vertex, !=, end]
[vertex]
[end]
[FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness]
[FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), )]
[FastMath]
[line, ., getOffset, (, vertex, ., getLocation, (, ), )]
[line]
[vertex, ., getLocation, (, )]
[vertex]
[hyperplaneThickness]
[vertex, ., bindWith, (, line, )]
[vertex]
[line]
[new, BSPTree, <, Euclidean2D, >, (, )]
[insertEdges, (, hyperplaneThickness, ,, tree, ,, edges, )]
[hyperplaneThickness]
[tree]
[edges]
[tree]
[0]
[null]
[inserted, ==, null, &&, index, <, edges, ., size, (, )]
[inserted, ==, null]
[inserted]
[null]
[index, <, edges, ., size, (, )]
[index]
[edges, ., size, (, )]
[edges]
[inserted]
[edges, ., get, (, index, ++, )]
[edges]
[index, ++]
[index]
[inserted, ., getNode, (, ), ==, null]
[inserted, ., getNode, (, )]
[inserted]
[null]
[node, ., insertCut, (, inserted, ., getLine, (, ), )]
[node]
[inserted, ., getLine, (, )]
[inserted]
[inserted, ., setNode, (, node, )]
[inserted]
[node]
[inserted]
[null]
[inserted]
[null]
[inserted, ==, null]
[inserted]
[null]
[node, ., getParent, (, )]
[node]
[parent, ==, null, ||, node, ==, parent, ., getMinus, (, )]
[parent, ==, null]
[parent]
[null]
[node, ==, parent, ., getMinus, (, )]
[node]
[parent, ., getMinus, (, )]
[parent]
[node, ., setAttribute, (, Boolean, ., TRUE, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[node, ., setAttribute, (, Boolean, ., FALSE, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[new, ArrayList, <, Edge, >, (, )]
[new, ArrayList, <, Edge, >, (, )]
[edges]
[edge, !=, inserted]
[edge]
[inserted]
[inserted, ., getLine, (, ), ., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), )]
[inserted, ., getLine, (, )]
[inserted]
[edge, ., getStart, (, ), ., getLocation, (, )]
[edge, ., getStart, (, )]
[edge]
[inserted, ., getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), )]
[inserted, ., getLine, (, )]
[inserted]
[edge, ., getEnd, (, ), ., getLocation, (, )]
[edge, ., getEnd, (, )]
[edge]
[(, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[(, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, )]
[FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness]
[FastMath, ., abs, (, startOffset, )]
[FastMath]
[startOffset]
[hyperplaneThickness]
[Side, ., HYPER]
[Side]
[(, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[(, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[(, startOffset, <, 0, )]
[startOffset, <, 0]
[startOffset]
[0]
[Side, ., MINUS]
[Side]
[Side, ., PLUS]
[Side]
[(, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[(, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, )]
[FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness]
[FastMath, ., abs, (, endOffset, )]
[FastMath]
[endOffset]
[hyperplaneThickness]
[Side, ., HYPER]
[Side]
[(, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[(, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[(, endOffset, <, 0, )]
[endOffset, <, 0]
[endOffset]
[0]
[Side, ., MINUS]
[Side]
[Side, ., PLUS]
[Side]
[startSide]
[PLUS]
[endSide, ==, Side, ., MINUS]
[endSide]
[Side, ., MINUS]
[Side]
[edge, ., split, (, inserted, ., getLine, (, ), )]
[edge]
[inserted, ., getLine, (, )]
[inserted]
[minusList, ., add, (, splitPoint, ., getOutgoing, (, ), )]
[minusList]
[splitPoint, ., getOutgoing, (, )]
[splitPoint]
[plusList, ., add, (, splitPoint, ., getIncoming, (, ), )]
[plusList]
[splitPoint, ., getIncoming, (, )]
[splitPoint]
[plusList, ., add, (, edge, )]
[plusList]
[edge]
[MINUS]
[endSide, ==, Side, ., PLUS]
[endSide]
[Side, ., PLUS]
[Side]
[edge, ., split, (, inserted, ., getLine, (, ), )]
[edge]
[inserted, ., getLine, (, )]
[inserted]
[minusList, ., add, (, splitPoint, ., getIncoming, (, ), )]
[minusList]
[splitPoint, ., getIncoming, (, )]
[splitPoint]
[plusList, ., add, (, splitPoint, ., getOutgoing, (, ), )]
[plusList]
[splitPoint, ., getOutgoing, (, )]
[splitPoint]
[minusList, ., add, (, edge, )]
[minusList]
[edge]
[endSide, ==, Side, ., PLUS]
[endSide]
[Side, ., PLUS]
[Side]
[plusList, ., add, (, edge, )]
[plusList]
[edge]
[endSide, ==, Side, ., MINUS]
[endSide]
[Side, ., MINUS]
[Side]
[minusList, ., add, (, edge, )]
[minusList]
[edge]
[!, plusList, ., isEmpty, (, )]
[plusList, ., isEmpty, (, )]
[plusList]
[insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, )]
[hyperplaneThickness]
[node, ., getPlus, (, )]
[node]
[plusList]
[node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, )]
[node, ., getPlus, (, )]
[node]
[Boolean, ., FALSE]
[Boolean]
[!, minusList, ., isEmpty, (, )]
[minusList, ., isEmpty, (, )]
[minusList]
[insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, )]
[hyperplaneThickness]
[node, ., getMinus, (, )]
[node]
[minusList]
[node, ., getMinus, (, ), ., setAttribute, (, Boolean, ., TRUE, )]
[node, ., getMinus, (, )]
[node]
[Boolean, ., TRUE]
[Boolean]
[this, ., location]
[this]
[location]
[this, ., incoming]
[this]
[null]
[this, ., outgoing]
[this]
[null]
[this, ., lines]
[this]
[new, ArrayList, <, Line, >, (, )]
[location]
[lines, ., add, (, line, )]
[lines]
[line]
[lines]
[vertex, ., lines]
[vertex]
[line1, ==, line2]
[line1]
[line2]
[line1]
[null]
[this, ., incoming]
[this]
[incoming]
[bindWith, (, incoming, ., getLine, (, ), )]
[incoming, ., getLine, (, )]
[incoming]
[incoming]
[this, ., outgoing]
[this]
[outgoing]
[bindWith, (, outgoing, ., getLine, (, ), )]
[outgoing, ., getLine, (, )]
[outgoing]
[outgoing]
[this, ., start]
[this]
[start]
[this, ., end]
[this]
[end]
[this, ., line]
[this]
[line]
[this, ., node]
[this]
[null]
[start, ., setOutgoing, (, this, )]
[start]
[this]
[end, ., setIncoming, (, this, )]
[end]
[this]
[start]
[end]
[line]
[this, ., node]
[this]
[node]
[node]
[new, Vertex, (, line, ., intersection, (, splitLine, ), )]
[line, ., intersection, (, splitLine, )]
[line]
[splitLine]
[splitVertex, ., bindWith, (, splitLine, )]
[splitVertex]
[splitLine]
[new, Edge, (, start, ,, splitVertex, ,, line, )]
[start]
[splitVertex]
[line]
[new, Edge, (, splitVertex, ,, end, ,, line, )]
[splitVertex]
[end]
[line]
[startHalf, ., node]
[startHalf]
[node]
[endHalf, ., node]
[endHalf]
[node]
[splitVertex]
[new, PolygonsSet, (, tree, )]
[tree]
[getVertices, (, )]
[v, ., length, ==, 0]
[v, ., length]
[v]
[0]
[getTree, (, false, )]
[false]
[tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, )]
[tree, ., getCut, (, ), ==, null]
[tree, ., getCut, (, )]
[tree]
[null]
[(, Boolean, ), tree, ., getAttribute, (, )]
[tree, ., getAttribute, (, )]
[tree]
[setSize, (, Double, ., POSITIVE_INFINITY, )]
[Double, ., POSITIVE_INFINITY]
[Double]
[setBarycenter, (, Vector2D, ., NaN, )]
[Vector2D, ., NaN]
[Vector2D]
[setSize, (, 0, )]
[0]
[setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), )]
[new, Vector2D, (, 0, ,, 0, )]
[0]
[0]
[v, [, 0, ], [, 0, ], ==, null]
[v, [, 0, ], [, 0, ]]
[v, [, 0, ]]
[v]
[0]
[0]
[null]
[setSize, (, Double, ., POSITIVE_INFINITY, )]
[Double, ., POSITIVE_INFINITY]
[Double]
[setBarycenter, (, Vector2D, ., NaN, )]
[Vector2D, ., NaN]
[Vector2D]
[0]
[0]
[0]
[v]
[loop, [, loop, ., length, -, 1, ], ., getX, (, )]
[loop, [, loop, ., length, -, 1, ]]
[loop]
[loop, ., length, -, 1]
[loop, ., length]
[loop]
[1]
[loop, [, loop, ., length, -, 1, ], ., getY, (, )]
[loop, [, loop, ., length, -, 1, ]]
[loop]
[loop, ., length, -, 1]
[loop, ., length]
[loop]
[1]
[loop]
[x1]
[y1]
[x1]
[point, ., getX, (, )]
[point]
[y1]
[point, ., getY, (, )]
[point]
[x0, *, y1, -, y0, *, x1]
[x0, *, y1]
[x0]
[y1]
[y0, *, x1]
[y0]
[x1]
[sum]
[factor]
[sumX]
[factor, *, (, x0, +, x1, )]
[factor]
[(, x0, +, x1, )]
[x0, +, x1]
[x0]
[x1]
[sumY]
[factor, *, (, y0, +, y1, )]
[factor]
[(, y0, +, y1, )]
[y0, +, y1]
[y0]
[y1]
[sum, <, 0]
[sum]
[0]
[setSize, (, Double, ., POSITIVE_INFINITY, )]
[Double, ., POSITIVE_INFINITY]
[Double]
[setBarycenter, (, Vector2D, ., NaN, )]
[Vector2D, ., NaN]
[Vector2D]
[setSize, (, sum, /, 2, )]
[sum, /, 2]
[sum]
[2]
[setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *, sum, ), ), )]
[new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *, sum, ), )]
[sumX, /, (, 3, *, sum, )]
[sumX]
[(, 3, *, sum, )]
[3, *, sum]
[3]
[sum]
[sumY, /, (, 3, *, sum, )]
[sumY]
[(, 3, *, sum, )]
[3, *, sum]
[3]
[sum]
[vertices, ==, null]
[vertices]
[null]
[getTree, (, false, ), ., getCut, (, ), ==, null]
[getTree, (, false, ), ., getCut, (, )]
[getTree, (, false, )]
[false]
[null]
[vertices]
[new, Vector2D, [, 0, ], [, ]]
[0]
[new, SegmentsBuilder, (, )]
[getTree, (, true, ), ., visit, (, visitor, )]
[getTree, (, true, )]
[true]
[visitor]
[visitor, ., getSorted, (, )]
[visitor]
[new, ArrayList, <, List, <, ComparableSegment, >, >, (, )]
[!, sorted, ., isEmpty, (, )]
[sorted, ., isEmpty, (, )]
[sorted]
[sorted, ., getSmallest, (, )]
[sorted]
[followLoop, (, node, ,, sorted, )]
[node]
[sorted]
[loop, !=, null]
[loop]
[null]
[loops, ., add, (, loop, )]
[loops]
[loop]
[vertices]
[new, Vector2D, [, loops, ., size, (, ), ], [, ]]
[loops, ., size, (, )]
[loops]
[0]
[loops]
[loop, ., size, (, ), <, 2]
[loop, ., size, (, )]
[loop]
[2]
[loop, ., get, (, 0, ), ., getLine, (, )]
[loop, ., get, (, 0, )]
[loop]
[0]
[vertices, [, i, ++, ]]
[vertices]
[i, ++]
[i]
[new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }]
[{, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }]
[null]
[line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), )]
[line]
[new, Vector1D, (, -, Float, ., MAX_VALUE, )]
[-, Float, ., MAX_VALUE]
[Float, ., MAX_VALUE]
[Float]
[line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), )]
[line]
[new, Vector1D, (, +, Float, ., MAX_VALUE, )]
[+, Float, ., MAX_VALUE]
[Float, ., MAX_VALUE]
[Float]
[loop, ., get, (, 0, ), ., getStart, (, ), ==, null]
[loop, ., get, (, 0, ), ., getStart, (, )]
[loop, ., get, (, 0, )]
[loop]
[0]
[null]
[new, Vector2D, [, loop, ., size, (, ), +, 2, ]]
[loop, ., size, (, ), +, 2]
[loop, ., size, (, )]
[loop]
[2]
[0]
[loop]
[j, ==, 0]
[j]
[0]
[segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, )]
[segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), )]
[segment, ., getLine, (, )]
[segment]
[segment, ., getEnd, (, )]
[segment]
[x]
[FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), )]
[FastMath]
[1.0]
[FastMath, ., abs, (, x, /, 2, )]
[FastMath]
[x, /, 2]
[x]
[2]
[array, [, j, ++, ]]
[array]
[j, ++]
[j]
[null]
[array, [, j, ++, ]]
[array]
[j, ++]
[j]
[segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), )]
[segment, ., getLine, (, )]
[segment]
[new, Vector1D, (, x, )]
[x]
[j, <, (, array, ., length, -, 1, )]
[j]
[(, array, ., length, -, 1, )]
[array, ., length, -, 1]
[array, ., length]
[array]
[1]
[array, [, j, ++, ]]
[array]
[j, ++]
[j]
[segment, ., getEnd, (, )]
[segment]
[j, ==, (, array, ., length, -, 1, )]
[j]
[(, array, ., length, -, 1, )]
[array, ., length, -, 1]
[array, ., length]
[array]
[1]
[segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, )]
[segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), )]
[segment, ., getLine, (, )]
[segment]
[segment, ., getStart, (, )]
[segment]
[x]
[FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), )]
[FastMath]
[1.0]
[FastMath, ., abs, (, x, /, 2, )]
[FastMath]
[x, /, 2]
[x]
[2]
[array, [, j, ++, ]]
[array]
[j, ++]
[j]
[segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), )]
[segment, ., getLine, (, )]
[segment]
[new, Vector1D, (, x, )]
[x]
[vertices, [, i, ++, ]]
[vertices]
[i, ++]
[i]
[array]
[new, Vector2D, [, loop, ., size, (, ), ]]
[loop, ., size, (, )]
[loop]
[0]
[loop]
[array, [, j, ++, ]]
[array]
[j, ++]
[j]
[segment, ., getStart, (, )]
[segment]
[vertices, [, i, ++, ]]
[vertices]
[i, ++]
[i]
[array]
[vertices, ., clone, (, )]
[vertices]
[new, ArrayList, <, ComparableSegment, >, (, )]
[node, ., getElement, (, )]
[node]
[loop, ., add, (, segment, )]
[loop]
[segment]
[segment, ., getStart, (, )]
[segment]
[segment, ., getEnd, (, )]
[segment]
[node, ., delete, (, )]
[node]
[segment, ., getStart, (, ), ==, null]
[segment, ., getStart, (, )]
[segment]
[null]
[(, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), )]
[(, end, !=, null, )]
[end, !=, null]
[end]
[null]
[(, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), )]
[open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, )]
[open]
[(, globalStart, ., distance, (, end, ), >, 1.0e-10, )]
[globalStart, ., distance, (, end, ), >, 1.0e-10]
[globalStart, ., distance, (, end, )]
[globalStart]
[end]
[1.0e-10]
[null]
[null]
[Double, ., POSITIVE_INFINITY]
[Double]
[new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, )]
[end]
[-, 1.0e-10]
[1.0e-10]
[-, 1.0e-10]
[1.0e-10]
[new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, )]
[end]
[+, 1.0e-10]
[1.0e-10]
[+, 1.0e-10]
[1.0e-10]
[sorted, ., getNotSmaller, (, lowerLeft, )]
[sorted]
[lowerLeft]
[(, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, )]
[(, n, !=, null, )]
[n, !=, null]
[n]
[null]
[(, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, )]
[n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0]
[n, ., getElement, (, ), ., compareTo, (, upperRight, )]
[n, ., getElement, (, )]
[n]
[upperRight]
[0]
[n]
[n, ., getNext, (, )]
[n]
[segment]
[n, ., getElement, (, )]
[n]
[end, ., distance, (, segment, ., getStart, (, ), )]
[end]
[segment, ., getStart, (, )]
[segment]
[distance, <, selectedDistance]
[distance]
[selectedDistance]
[selectedNode]
[n]
[selectedSegment]
[segment]
[selectedDistance]
[distance]
[selectedDistance, >, 1.0e-10]
[selectedDistance]
[1.0e-10]
[null]
[end]
[selectedSegment, ., getEnd, (, )]
[selectedSegment]
[loop, ., add, (, selectedSegment, )]
[loop]
[selectedSegment]
[selectedNode, ., delete, (, )]
[selectedNode]
[(, loop, ., size, (, ), ==, 2, ), &&, !, open]
[(, loop, ., size, (, ), ==, 2, )]
[loop, ., size, (, ), ==, 2]
[loop, ., size, (, )]
[loop]
[2]
[!, open]
[open]
[null]
[(, end, ==, null, ), &&, !, open]
[(, end, ==, null, )]
[end, ==, null]
[end]
[null]
[!, open]
[open]
[new, MathInternalError, (, )]
[loop]
[start]
[end]
[line]
[sortingKey]
[(, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, ), )]
[(, start, ==, null, )]
[start, ==, null]
[start]
[null]
[new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, )]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., NEGATIVE_INFINITY]
[Double]
[new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, ), )]
[start, ., getX, (, )]
[start]
[start, ., getY, (, )]
[start]
[null]
[null]
[null]
[sortingKey]
[new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start, ., getY, (, ), +, dy, )]
[start, ., getX, (, ), +, dx]
[start, ., getX, (, )]
[start]
[dx]
[start, ., getY, (, ), +, dy]
[start, ., getY, (, )]
[start]
[dy]
[sortingKey, ., compareTo, (, o, ., sortingKey, )]
[sortingKey]
[o, ., sortingKey]
[o]
[this, ==, other]
[this]
[other]
[true]
[other, instanceof, ComparableSegment]
[other]
[compareTo, (, (, ComparableSegment, ), other, ), ==, 0]
[compareTo, (, (, ComparableSegment, ), other, )]
[(, ComparableSegment, ), other]
[other]
[0]
[false]
[getStart, (, ), ., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, ), ^, sortingKey, ., hashCode, (, )]
[getStart, (, ), ., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, )]
[getStart, (, ), ., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, )]
[getStart, (, ), ., hashCode, (, )]
[getStart, (, )]
[getEnd, (, ), ., hashCode, (, )]
[getEnd, (, )]
[getLine, (, ), ., hashCode, (, )]
[getLine, (, )]
[sortingKey, ., hashCode, (, )]
[sortingKey]
[sorted]
[new, AVLTree, <, ComparableSegment, >, (, )]
[Order, ., MINUS_SUB_PLUS]
[Order]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[attribute, ., getPlusOutside, (, ), !=, null]
[attribute, ., getPlusOutside, (, )]
[attribute]
[null]
[addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, )]
[attribute, ., getPlusOutside, (, )]
[attribute]
[false]
[attribute, ., getPlusInside, (, ), !=, null]
[attribute, ., getPlusInside, (, )]
[attribute]
[null]
[addContribution, (, attribute, ., getPlusInside, (, ), ,, true, )]
[attribute, ., getPlusInside, (, )]
[attribute]
[true]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub]
[sub]
[(, Line, ), sub, ., getHyperplane, (, )]
[sub, ., getHyperplane, (, )]
[sub]
[(, (, IntervalsSet, ), absSub, ., getRemainingRegion, (, ), ), ., asList, (, )]
[(, (, IntervalsSet, ), absSub, ., getRemainingRegion, (, ), )]
[(, IntervalsSet, ), absSub, ., getRemainingRegion, (, )]
[absSub, ., getRemainingRegion, (, )]
[absSub]
[intervals]
[Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), )]
[Double, ., isInfinite, (, i, ., getInf, (, ), )]
[Double]
[i, ., getInf, (, )]
[i]
[null]
[(, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), )]
[line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), )]
[line]
[new, Vector1D, (, i, ., getInf, (, ), )]
[i, ., getInf, (, )]
[i]
[Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), )]
[Double, ., isInfinite, (, i, ., getSup, (, ), )]
[Double]
[i, ., getSup, (, )]
[i]
[null]
[(, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), )]
[line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), )]
[line]
[new, Vector1D, (, i, ., getSup, (, ), )]
[i, ., getSup, (, )]
[i]
[reversed]
[sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), ), )]
[sorted]
[new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), )]
[end]
[start]
[line, ., getReverse, (, )]
[line]
[sorted, ., insert, (, new, ComparableSegment, (, start, ,, end, ,, line, ), )]
[sorted]
[new, ComparableSegment, (, start, ,, end, ,, line, )]
[start]
[end]
[line]
[sorted]
