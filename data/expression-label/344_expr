[DiagnosticType, ., warning, (, "JSC_INVALID_GETELEM_INDEX_ERROR", ,, "Array index not integer: {0}", )]
[DiagnosticType]
["JSC_INVALID_GETELEM_INDEX_ERROR"]
["Array index not integer: {0}"]
[DiagnosticType, ., warning, (, "JSC_INDEX_OUT_OF_BOUNDS_ERROR", ,, "Array index out of bounds: {0}", )]
[DiagnosticType]
["JSC_INDEX_OUT_OF_BOUNDS_ERROR"]
["Array index out of bounds: {0}"]
[DiagnosticType, ., warning, (, "JSC_NEGATING_A_NON_NUMBER_ERROR", ,, "Can't negate non-numeric value: {0}", )]
[DiagnosticType]
["JSC_NEGATING_A_NON_NUMBER_ERROR"]
["Can't negate non-numeric value: {0}"]
[DiagnosticType, ., warning, (, "JSC_BITWISE_OPERAND_OUT_OF_RANGE", ,, "Operand out of range, bitwise operation will lose information: {0}", )]
[DiagnosticType]
["JSC_BITWISE_OPERAND_OUT_OF_RANGE"]
["Operand out of range, bitwise operation will lose information: {0}"]
[DiagnosticType, ., warning, (, "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", ,, "Shift amount out of bounds: {0}", )]
[DiagnosticType]
["JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS"]
["Shift amount out of bounds: {0}"]
[DiagnosticType, ., warning, (, "JSC_FRACTIONAL_BITWISE_OPERAND", ,, "Fractional bitwise operand: {0}", )]
[DiagnosticType]
["JSC_FRACTIONAL_BITWISE_OPERAND"]
["Fractional bitwise operand: {0}"]
[Math, ., pow, (, 2, ,, 53, )]
[Math]
[2]
[53]
[this, ., late]
[this]
[late]
[subtree, ., getType, (, )]
[subtree]
[Token, ., NEW]
[Token]
[tryFoldCtorCall, (, subtree, )]
[subtree]
[Token, ., TYPEOF]
[Token]
[tryFoldTypeof, (, subtree, )]
[subtree]
[Token, ., NOT]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Token, ., BITNOT]
[Token]
[tryReduceOperandsForOp, (, subtree, )]
[subtree]
[tryFoldUnaryOperator, (, subtree, )]
[subtree]
[Token, ., VOID]
[Token]
[tryReduceVoid, (, subtree, )]
[subtree]
[tryReduceOperandsForOp, (, subtree, )]
[subtree]
[tryFoldBinaryOperator, (, subtree, )]
[subtree]
[subtree, ., getFirstChild, (, )]
[subtree]
[left, ==, null]
[left]
[null]
[subtree]
[left, ., getNext, (, )]
[left]
[right, ==, null]
[right]
[null]
[subtree]
[subtree, ., getType, (, )]
[subtree]
[Token, ., GETPROP]
[Token]
[tryFoldGetProp, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., GETELEM]
[Token]
[tryFoldGetElem, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., INSTANCEOF]
[Token]
[tryFoldInstanceof, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[tryFoldAndOr, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., URSH]
[Token]
[tryFoldShift, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., ASSIGN]
[Token]
[tryFoldAssign, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[tryUnfoldAssignOp, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., ADD]
[Token]
[tryFoldAdd, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., SUB]
[Token]
[Token, ., DIV]
[Token]
[Token, ., MOD]
[Token]
[tryFoldArithmeticOp, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., MUL]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[tryFoldArithmeticOp, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[result, !=, subtree]
[result]
[subtree]
[result]
[tryFoldLeftChildOp, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[tryFoldComparison, (, subtree, ,, left, ,, right, )]
[subtree]
[left]
[right]
[subtree]
[n, ., getFirstChild, (, )]
[n]
[!, child, ., isNumber, (, ), ||, child, ., getDouble, (, ), !=, 0.0]
[!, child, ., isNumber, (, )]
[child, ., isNumber, (, )]
[child]
[child, ., getDouble, (, ), !=, 0.0]
[child, ., getDouble, (, )]
[child]
[0.0]
[!, mayHaveSideEffects, (, n, )]
[mayHaveSideEffects, (, n, )]
[n]
[n, ., replaceChild, (, child, ,, IR, ., number, (, 0, ), )]
[n]
[child]
[IR, ., number, (, 0, )]
[IR]
[0]
[reportCodeChange, (, )]
[n]
[n, ., getType, (, )]
[n]
[Token, ., ADD]
[Token]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[!, NodeUtil, ., mayBeString, (, left, ), &&, !, NodeUtil, ., mayBeString, (, right, )]
[!, NodeUtil, ., mayBeString, (, left, )]
[NodeUtil, ., mayBeString, (, left, )]
[NodeUtil]
[left]
[!, NodeUtil, ., mayBeString, (, right, )]
[NodeUtil, ., mayBeString, (, right, )]
[NodeUtil]
[right]
[tryConvertOperandsToNumber, (, n, )]
[n]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[tryConvertToNumber, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., BITNOT]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., URSH]
[Token]
[Token, ., SUB]
[Token]
[Token, ., MUL]
[Token]
[Token, ., MOD]
[Token]
[Token, ., DIV]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[tryConvertOperandsToNumber, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[next]
[next]
[c, ., getNext, (, )]
[c]
[tryConvertToNumber, (, c, )]
[c]
[n, ., getType, (, )]
[n]
[Token, ., NUMBER]
[Token]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[Token, ., COMMA]
[Token]
[tryConvertToNumber, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., HOOK]
[Token]
[tryConvertToNumber, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[tryConvertToNumber, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., NAME]
[Token]
[!, NodeUtil, ., isUndefined, (, n, )]
[NodeUtil, ., isUndefined, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getNumberValue, (, n, )]
[NodeUtil]
[n]
[result, ==, null]
[result]
[null]
[result]
[NodeUtil, ., numberNode, (, value, ,, n, )]
[NodeUtil]
[value]
[n]
[replacement, ., isEquivalentTo, (, n, )]
[replacement]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, )]
[n, ., getParent, (, )]
[n]
[n]
[replacement]
[reportCodeChange, (, )]
[Preconditions, ., checkArgument, (, originalTypeofNode, ., isTypeOf, (, ), )]
[Preconditions]
[originalTypeofNode, ., isTypeOf, (, )]
[originalTypeofNode]
[originalTypeofNode, ., getFirstChild, (, )]
[originalTypeofNode]
[argumentNode, ==, null, ||, !, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, )]
[argumentNode, ==, null]
[argumentNode]
[null]
[!, NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, )]
[NodeUtil, ., isLiteralValue, (, argumentNode, ,, true, )]
[NodeUtil]
[argumentNode]
[true]
[originalTypeofNode]
[null]
[argumentNode, ., getType, (, )]
[argumentNode]
[Token, ., FUNCTION]
[Token]
[typeNameString]
["function"]
[Token, ., STRING]
[Token]
[typeNameString]
["string"]
[Token, ., NUMBER]
[Token]
[typeNameString]
["number"]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[typeNameString]
["boolean"]
[Token, ., NULL]
[Token]
[Token, ., OBJECTLIT]
[Token]
[Token, ., ARRAYLIT]
[Token]
[typeNameString]
["object"]
[Token, ., VOID]
[Token]
[typeNameString]
["undefined"]
[Token, ., NAME]
[Token]
["undefined", ., equals, (, argumentNode, ., getString, (, ), )]
["undefined"]
[argumentNode, ., getString, (, )]
[argumentNode]
[typeNameString]
["undefined"]
[typeNameString, !=, null]
[typeNameString]
[null]
[IR, ., string, (, typeNameString, )]
[IR]
[typeNameString]
[originalTypeofNode, ., getParent, (, ), ., replaceChild, (, originalTypeofNode, ,, newNode, )]
[originalTypeofNode, ., getParent, (, )]
[originalTypeofNode]
[originalTypeofNode]
[newNode]
[reportCodeChange, (, )]
[newNode]
[originalTypeofNode]
[Preconditions, ., checkState, (, n, ., hasOneChild, (, ), )]
[Preconditions]
[n, ., hasOneChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., getParent, (, )]
[n]
[left, ==, null]
[left]
[null]
[n]
[NodeUtil, ., getPureBooleanValue, (, left, )]
[NodeUtil]
[left]
[leftVal, ==, TernaryValue, ., UNKNOWN]
[leftVal]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[n]
[n, ., getType, (, )]
[n]
[Token, ., NOT]
[Token]
[late, &&, left, ., isNumber, (, )]
[late]
[left, ., isNumber, (, )]
[left]
[left, ., getDouble, (, )]
[left]
[numValue, ==, 0, ||, numValue, ==, 1]
[numValue, ==, 0]
[numValue]
[0]
[numValue, ==, 1]
[numValue]
[1]
[n]
[NodeUtil, ., booleanNode, (, !, leftVal, ., toBoolean, (, true, ), )]
[NodeUtil]
[!, leftVal, ., toBoolean, (, true, )]
[leftVal, ., toBoolean, (, true, )]
[leftVal]
[true]
[parent, ., replaceChild, (, n, ,, replacementNode, )]
[parent]
[n]
[replacementNode]
[reportCodeChange, (, )]
[replacementNode]
[Token, ., POS]
[Token]
[NodeUtil, ., isNumericResult, (, left, )]
[NodeUtil]
[left]
[parent, ., replaceChild, (, n, ,, left, ., detachFromParent, (, ), )]
[parent]
[n]
[left, ., detachFromParent, (, )]
[left]
[reportCodeChange, (, )]
[left]
[n]
[Token, ., NEG]
[Token]
[left, ., isName, (, )]
[left]
[left, ., getString, (, ), ., equals, (, "Infinity", )]
[left, ., getString, (, )]
[left]
["Infinity"]
[n]
[left, ., getString, (, ), ., equals, (, "NaN", )]
[left, ., getString, (, )]
[left]
["NaN"]
[n, ., removeChild, (, left, )]
[n]
[left]
[parent, ., replaceChild, (, n, ,, left, )]
[parent]
[n]
[left]
[reportCodeChange, (, )]
[left]
[left, ., isNumber, (, )]
[left]
[-, left, ., getDouble, (, )]
[left, ., getDouble, (, )]
[left]
[IR, ., number, (, negNum, )]
[IR]
[negNum]
[parent, ., replaceChild, (, n, ,, negNumNode, )]
[parent]
[n]
[negNumNode]
[reportCodeChange, (, )]
[negNumNode]
[report, (, NEGATING_A_NON_NUMBER_ERROR, ,, left, )]
[NEGATING_A_NON_NUMBER_ERROR]
[left]
[n]
[Token, ., BITNOT]
[Token]
[left, ., getDouble, (, )]
[left]
[val, >=, Integer, ., MIN_VALUE, &&, val, <=, Integer, ., MAX_VALUE]
[val, >=, Integer, ., MIN_VALUE]
[val]
[Integer, ., MIN_VALUE]
[Integer]
[val, <=, Integer, ., MAX_VALUE]
[val]
[Integer, ., MAX_VALUE]
[Integer]
[(, int, ), val]
[val]
[intVal, ==, val]
[intVal]
[val]
[IR, ., number, (, ~, intVal, )]
[IR]
[~, intVal]
[intVal]
[parent, ., replaceChild, (, n, ,, notIntValNode, )]
[parent]
[n]
[notIntValNode]
[reportCodeChange, (, )]
[notIntValNode]
[report, (, FRACTIONAL_BITWISE_OPERAND, ,, left, )]
[FRACTIONAL_BITWISE_OPERAND]
[left]
[n]
[report, (, BITWISE_OPERAND_OUT_OF_RANGE, ,, left, )]
[BITWISE_OPERAND_OUT_OF_RANGE]
[left]
[n]
[report, (, NEGATING_A_NON_NUMBER_ERROR, ,, left, )]
[NEGATING_A_NON_NUMBER_ERROR]
[left]
[n]
[n]
[Preconditions, ., checkArgument, (, n, ., isInstanceOf, (, ), )]
[Preconditions]
[n, ., isInstanceOf, (, )]
[n]
[NodeUtil, ., isLiteralValue, (, left, ,, true, ), &&, !, mayHaveSideEffects, (, right, )]
[NodeUtil, ., isLiteralValue, (, left, ,, true, )]
[NodeUtil]
[left]
[true]
[!, mayHaveSideEffects, (, right, )]
[mayHaveSideEffects, (, right, )]
[right]
[null]
[NodeUtil, ., isImmutableValue, (, left, )]
[NodeUtil]
[left]
[replacementNode]
[IR, ., falseNode, (, )]
[IR]
[right, ., isName, (, ), &&, "Object", ., equals, (, right, ., getString, (, ), )]
[right, ., isName, (, )]
[right]
["Object", ., equals, (, right, ., getString, (, ), )]
["Object"]
[right, ., getString, (, )]
[right]
[replacementNode]
[IR, ., trueNode, (, )]
[IR]
[replacementNode, !=, null]
[replacementNode]
[null]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacementNode, )]
[n, ., getParent, (, )]
[n]
[n]
[replacementNode]
[reportCodeChange, (, )]
[replacementNode]
[n]
[Preconditions, ., checkArgument, (, n, ., isAssign, (, ), )]
[Preconditions]
[n, ., isAssign, (, )]
[n]
[!, late]
[late]
[n]
[!, right, ., hasChildren, (, ), ||, right, ., getFirstChild, (, ), ., getNext, (, ), !=, right, ., getLastChild, (, )]
[!, right, ., hasChildren, (, )]
[right, ., hasChildren, (, )]
[right]
[right, ., getFirstChild, (, ), ., getNext, (, ), !=, right, ., getLastChild, (, )]
[right, ., getFirstChild, (, ), ., getNext, (, )]
[right, ., getFirstChild, (, )]
[right]
[right, ., getLastChild, (, )]
[right]
[n]
[mayHaveSideEffects, (, left, )]
[left]
[n]
[areNodesEqualForInlining, (, left, ,, right, ., getFirstChild, (, ), )]
[left]
[right, ., getFirstChild, (, )]
[right]
[newRight]
[right, ., getLastChild, (, )]
[right]
[NodeUtil, ., isCommutative, (, right, ., getType, (, ), ), &&, areNodesEqualForInlining, (, left, ,, right, ., getLastChild, (, ), )]
[NodeUtil, ., isCommutative, (, right, ., getType, (, ), )]
[NodeUtil]
[right, ., getType, (, )]
[right]
[areNodesEqualForInlining, (, left, ,, right, ., getLastChild, (, ), )]
[left]
[right, ., getLastChild, (, )]
[right]
[newRight]
[right, ., getFirstChild, (, )]
[right]
[n]
[-, 1]
[1]
[right, ., getType, (, )]
[right]
[Token, ., ADD]
[Token]
[newType]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., BITAND]
[Token]
[newType]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., BITOR]
[Token]
[newType]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[newType]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., DIV]
[Token]
[newType]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., LSH]
[Token]
[newType]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., MOD]
[Token]
[newType]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., MUL]
[Token]
[newType]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., RSH]
[Token]
[newType]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., SUB]
[Token]
[newType]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., URSH]
[Token]
[newType]
[Token, ., ASSIGN_URSH]
[Token]
[n]
[new, Node, (, newType, ,, left, ., detachFromParent, (, ), ,, newRight, ., detachFromParent, (, ), )]
[newType]
[left, ., detachFromParent, (, )]
[left]
[newRight, ., detachFromParent, (, )]
[newRight]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, )]
[n, ., getParent, (, )]
[n]
[n]
[newNode]
[reportCodeChange, (, )]
[newNode]
[late]
[n]
[!, n, ., hasChildren, (, ), ||, n, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ., getLastChild, (, )]
[!, n, ., hasChildren, (, )]
[n, ., hasChildren, (, )]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ., getLastChild, (, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[n]
[mayHaveSideEffects, (, left, )]
[left]
[n]
[NodeUtil, ., getOpFromAssignmentOp, (, n, )]
[NodeUtil]
[n]
[IR, ., assign, (, left, ., detachFromParent, (, ), ,, new, Node, (, op, ,, left, ., cloneTree, (, ), ,, right, ., detachFromParent, (, ), ), ., srcref, (, n, ), )]
[IR]
[left, ., detachFromParent, (, )]
[left]
[new, Node, (, op, ,, left, ., cloneTree, (, ), ,, right, ., detachFromParent, (, ), ), ., srcref, (, n, )]
[new, Node, (, op, ,, left, ., cloneTree, (, ), ,, right, ., detachFromParent, (, ), )]
[op]
[left, ., cloneTree, (, )]
[left]
[right, ., detachFromParent, (, )]
[right]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, )]
[n, ., getParent, (, )]
[n]
[n]
[replacement]
[reportCodeChange, (, )]
[replacement]
[n, ., getParent, (, )]
[n]
[null]
[n, ., getType, (, )]
[n]
[NodeUtil, ., getImpureBooleanValue, (, left, )]
[NodeUtil]
[left]
[leftVal, !=, TernaryValue, ., UNKNOWN]
[leftVal]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[leftVal, ., toBoolean, (, true, )]
[leftVal]
[true]
[lval, &&, type, ==, Token, ., OR, ||, !, lval, &&, type, ==, Token, ., AND]
[lval, &&, type, ==, Token, ., OR]
[lval]
[type, ==, Token, ., OR]
[type]
[Token, ., OR]
[Token]
[!, lval, &&, type, ==, Token, ., AND]
[!, lval]
[lval]
[type, ==, Token, ., AND]
[type]
[Token, ., AND]
[Token]
[result]
[left]
[!, mayHaveSideEffects, (, left, )]
[mayHaveSideEffects, (, left, )]
[left]
[result]
[right]
[result, !=, null]
[result]
[null]
[n, ., removeChild, (, result, )]
[n]
[result]
[parent, ., replaceChild, (, n, ,, result, )]
[parent]
[n]
[result]
[reportCodeChange, (, )]
[result]
[n]
[NodeUtil, ., isLiteralValue, (, right, ,, false, ), &&, left, ., isAdd, (, )]
[NodeUtil, ., isLiteralValue, (, right, ,, false, )]
[NodeUtil]
[right]
[false]
[left, ., isAdd, (, )]
[left]
[left, ., getFirstChild, (, )]
[left]
[ll, ., getNext, (, )]
[ll]
[lr, ., isString, (, )]
[lr]
[NodeUtil, ., getStringValue, (, lr, )]
[NodeUtil]
[lr]
[NodeUtil, ., getStringValue, (, right, )]
[NodeUtil]
[right]
[leftString, !=, null, &&, rightString, !=, null]
[leftString, !=, null]
[leftString]
[null]
[rightString, !=, null]
[rightString]
[null]
[left, ., removeChild, (, ll, )]
[left]
[ll]
[leftString, +, rightString]
[leftString]
[rightString]
[n, ., replaceChild, (, left, ,, ll, )]
[n]
[left]
[ll]
[n, ., replaceChild, (, right, ,, IR, ., string, (, result, ), )]
[n]
[right]
[IR, ., string, (, result, )]
[IR]
[result]
[reportCodeChange, (, )]
[n]
[NodeUtil, ., isLiteralValue, (, left, ,, false, ), &&, right, ., isAdd, (, )]
[NodeUtil, ., isLiteralValue, (, left, ,, false, )]
[NodeUtil]
[left]
[false]
[right, ., isAdd, (, )]
[right]
[right, ., getFirstChild, (, )]
[right]
[right, ., getLastChild, (, )]
[right]
[rl, ., isString, (, )]
[rl]
[NodeUtil, ., getStringValue, (, left, )]
[NodeUtil]
[left]
[NodeUtil, ., getStringValue, (, rl, )]
[NodeUtil]
[rl]
[leftString, !=, null, &&, rightString, !=, null]
[leftString, !=, null]
[leftString]
[null]
[rightString, !=, null]
[rightString]
[null]
[right, ., removeChild, (, rr, )]
[right]
[rr]
[leftString, +, rightString]
[leftString]
[rightString]
[n, ., replaceChild, (, right, ,, rr, )]
[n]
[right]
[rr]
[n, ., replaceChild, (, left, ,, IR, ., string, (, result, ), )]
[n]
[left]
[IR, ., string, (, result, )]
[IR]
[result]
[reportCodeChange, (, )]
[n]
[n]
[left, ., isString, (, ), ||, right, ., isString, (, )]
[left, ., isString, (, )]
[left]
[right, ., isString, (, )]
[right]
[NodeUtil, ., getStringValue, (, left, )]
[NodeUtil]
[left]
[NodeUtil, ., getStringValue, (, right, )]
[NodeUtil]
[right]
[leftString, !=, null, &&, rightString, !=, null]
[leftString, !=, null]
[leftString]
[null]
[rightString, !=, null]
[rightString]
[null]
[IR, ., string, (, leftString, +, rightString, )]
[IR]
[leftString, +, rightString]
[leftString]
[rightString]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newStringNode, )]
[n, ., getParent, (, )]
[n]
[n]
[newStringNode]
[reportCodeChange, (, )]
[newStringNode]
[n]
[performArithmeticOp, (, n, ., getType, (, ), ,, left, ,, right, )]
[n, ., getType, (, )]
[n]
[left]
[right]
[result, !=, null]
[result]
[null]
[result, ., copyInformationFromForTree, (, n, )]
[result]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, result, )]
[n, ., getParent, (, )]
[n]
[n]
[result]
[reportCodeChange, (, )]
[result]
[n]
[opType, ==, Token, ., ADD, &&, (, NodeUtil, ., mayBeString, (, left, ,, false, ), ||, NodeUtil, ., mayBeString, (, right, ,, false, ), )]
[opType, ==, Token, ., ADD]
[opType]
[Token, ., ADD]
[Token]
[(, NodeUtil, ., mayBeString, (, left, ,, false, ), ||, NodeUtil, ., mayBeString, (, right, ,, false, ), )]
[NodeUtil, ., mayBeString, (, left, ,, false, ), ||, NodeUtil, ., mayBeString, (, right, ,, false, )]
[NodeUtil, ., mayBeString, (, left, ,, false, )]
[NodeUtil]
[left]
[false]
[NodeUtil, ., mayBeString, (, right, ,, false, )]
[NodeUtil]
[right]
[false]
[null]
[NodeUtil, ., getNumberValue, (, left, )]
[NodeUtil]
[left]
[lValObj, ==, null]
[lValObj]
[null]
[null]
[NodeUtil, ., getNumberValue, (, right, )]
[NodeUtil]
[right]
[rValObj, ==, null]
[rValObj]
[null]
[null]
[lValObj]
[rValObj]
[opType]
[Token, ., BITAND]
[Token]
[result]
[ScriptRuntime, ., toInt32, (, lval, ), &, ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime, ., toInt32, (, lval, )]
[ScriptRuntime]
[lval]
[ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime]
[rval]
[Token, ., BITOR]
[Token]
[result]
[ScriptRuntime, ., toInt32, (, lval, ), |, ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime, ., toInt32, (, lval, )]
[ScriptRuntime]
[lval]
[ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime]
[rval]
[Token, ., BITXOR]
[Token]
[result]
[ScriptRuntime, ., toInt32, (, lval, ), ^, ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime, ., toInt32, (, lval, )]
[ScriptRuntime]
[lval]
[ScriptRuntime, ., toInt32, (, rval, )]
[ScriptRuntime]
[rval]
[Token, ., ADD]
[Token]
[result]
[lval, +, rval]
[lval]
[rval]
[Token, ., SUB]
[Token]
[result]
[lval, -, rval]
[lval]
[rval]
[Token, ., MUL]
[Token]
[result]
[lval, *, rval]
[lval]
[rval]
[Token, ., MOD]
[Token]
[rval, ==, 0]
[rval]
[0]
[null]
[result]
[lval, %, rval]
[lval]
[rval]
[Token, ., DIV]
[Token]
[rval, ==, 0]
[rval]
[0]
[null]
[result]
[lval, /, rval]
[lval]
[rval]
[new, Error, (, "Unexpected arithmetic operator", )]
["Unexpected arithmetic operator"]
[(, String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1, &&, Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER, ), ||, Double, ., isNaN, (, result, ), ||, result, ==, Double, ., POSITIVE_INFINITY, ||, result, ==, Double, ., NEGATIVE_INFINITY]
[(, String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1, &&, Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER, ), ||, Double, ., isNaN, (, result, ), ||, result, ==, Double, ., POSITIVE_INFINITY]
[(, String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1, &&, Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER, ), ||, Double, ., isNaN, (, result, )]
[(, String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1, &&, Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER, )]
[String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1, &&, Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER]
[String, ., valueOf, (, result, ), ., length, (, ), <=, String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1]
[String, ., valueOf, (, result, ), ., length, (, )]
[String, ., valueOf, (, result, )]
[String]
[result]
[String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, ), +, 1]
[String, ., valueOf, (, lval, ), ., length, (, ), +, String, ., valueOf, (, rval, ), ., length, (, )]
[String, ., valueOf, (, lval, ), ., length, (, )]
[String, ., valueOf, (, lval, )]
[String]
[lval]
[String, ., valueOf, (, rval, ), ., length, (, )]
[String, ., valueOf, (, rval, )]
[String]
[rval]
[1]
[Math, ., abs, (, result, ), <=, MAX_FOLD_NUMBER]
[Math, ., abs, (, result, )]
[Math]
[result]
[MAX_FOLD_NUMBER]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[result, ==, Double, ., POSITIVE_INFINITY]
[result]
[Double, ., POSITIVE_INFINITY]
[Double]
[result, ==, Double, ., NEGATIVE_INFINITY]
[result]
[Double, ., NEGATIVE_INFINITY]
[Double]
[NodeUtil, ., numberNode, (, result, ,, null, )]
[NodeUtil]
[result]
[null]
[null]
[n, ., getType, (, )]
[n]
[Preconditions, ., checkState, (, (, NodeUtil, ., isAssociative, (, opType, ), &&, NodeUtil, ., isCommutative, (, opType, ), ), ||, n, ., isAdd, (, ), )]
[Preconditions]
[(, NodeUtil, ., isAssociative, (, opType, ), &&, NodeUtil, ., isCommutative, (, opType, ), ), ||, n, ., isAdd, (, )]
[(, NodeUtil, ., isAssociative, (, opType, ), &&, NodeUtil, ., isCommutative, (, opType, ), )]
[NodeUtil, ., isAssociative, (, opType, ), &&, NodeUtil, ., isCommutative, (, opType, )]
[NodeUtil, ., isAssociative, (, opType, )]
[NodeUtil]
[opType]
[NodeUtil, ., isCommutative, (, opType, )]
[NodeUtil]
[opType]
[n, ., isAdd, (, )]
[n]
[Preconditions, ., checkState, (, !, n, ., isAdd, (, ), ||, !, NodeUtil, ., mayBeString, (, n, ), )]
[Preconditions]
[!, n, ., isAdd, (, ), ||, !, NodeUtil, ., mayBeString, (, n, )]
[!, n, ., isAdd, (, )]
[n, ., isAdd, (, )]
[n]
[!, NodeUtil, ., mayBeString, (, n, )]
[NodeUtil, ., mayBeString, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getNumberValue, (, right, )]
[NodeUtil]
[right]
[rightValObj, !=, null, &&, left, ., getType, (, ), ==, opType]
[rightValObj, !=, null]
[rightValObj]
[null]
[left, ., getType, (, ), ==, opType]
[left, ., getType, (, )]
[left]
[opType]
[Preconditions, ., checkState, (, left, ., getChildCount, (, ), ==, 2, )]
[Preconditions]
[left, ., getChildCount, (, ), ==, 2]
[left, ., getChildCount, (, )]
[left]
[2]
[left, ., getFirstChild, (, )]
[left]
[ll, ., getNext, (, )]
[ll]
[ll]
[performArithmeticOp, (, opType, ,, valueToCombine, ,, right, )]
[opType]
[valueToCombine]
[right]
[replacement, ==, null]
[replacement]
[null]
[valueToCombine]
[lr]
[replacement]
[performArithmeticOp, (, opType, ,, valueToCombine, ,, right, )]
[opType]
[valueToCombine]
[right]
[replacement, !=, null]
[replacement]
[null]
[left, ., removeChild, (, valueToCombine, )]
[left]
[valueToCombine]
[n, ., replaceChild, (, left, ,, left, ., removeFirstChild, (, ), )]
[n]
[left]
[left, ., removeFirstChild, (, )]
[left]
[replacement, ., copyInformationFromForTree, (, right, )]
[replacement]
[right]
[n, ., replaceChild, (, right, ,, replacement, )]
[n]
[right]
[replacement]
[reportCodeChange, (, )]
[n]
[Preconditions, ., checkArgument, (, node, ., isAdd, (, ), )]
[Preconditions]
[node, ., isAdd, (, )]
[node]
[NodeUtil, ., mayBeString, (, node, ,, true, )]
[NodeUtil]
[node]
[true]
[NodeUtil, ., isLiteralValue, (, left, ,, false, ), &&, NodeUtil, ., isLiteralValue, (, right, ,, false, )]
[NodeUtil, ., isLiteralValue, (, left, ,, false, )]
[NodeUtil]
[left]
[false]
[NodeUtil, ., isLiteralValue, (, right, ,, false, )]
[NodeUtil]
[right]
[false]
[tryFoldAddConstantString, (, node, ,, left, ,, right, )]
[node]
[left]
[right]
[tryFoldChildAddString, (, node, ,, left, ,, right, )]
[node]
[left]
[right]
[tryFoldArithmeticOp, (, node, ,, left, ,, right, )]
[node]
[left]
[right]
[result, !=, node]
[result]
[node]
[result]
[tryFoldLeftChildOp, (, node, ,, left, ,, right, )]
[node]
[left]
[right]
[left, ., isNumber, (, ), &&, right, ., isNumber, (, )]
[left, ., isNumber, (, )]
[left]
[right, ., isNumber, (, )]
[right]
[left, ., getDouble, (, )]
[left]
[right, ., getDouble, (, )]
[right]
[!, (, lval, >=, Integer, ., MIN_VALUE, &&, lval, <=, Integer, ., MAX_VALUE, )]
[(, lval, >=, Integer, ., MIN_VALUE, &&, lval, <=, Integer, ., MAX_VALUE, )]
[lval, >=, Integer, ., MIN_VALUE, &&, lval, <=, Integer, ., MAX_VALUE]
[lval, >=, Integer, ., MIN_VALUE]
[lval]
[Integer, ., MIN_VALUE]
[Integer]
[lval, <=, Integer, ., MAX_VALUE]
[lval]
[Integer, ., MAX_VALUE]
[Integer]
[report, (, BITWISE_OPERAND_OUT_OF_RANGE, ,, left, )]
[BITWISE_OPERAND_OUT_OF_RANGE]
[left]
[n]
[!, (, rval, >=, 0, &&, rval, <, 32, )]
[(, rval, >=, 0, &&, rval, <, 32, )]
[rval, >=, 0, &&, rval, <, 32]
[rval, >=, 0]
[rval]
[0]
[rval, <, 32]
[rval]
[32]
[report, (, SHIFT_AMOUNT_OUT_OF_BOUNDS, ,, right, )]
[SHIFT_AMOUNT_OUT_OF_BOUNDS]
[right]
[n]
[(, int, ), lval]
[lval]
[lvalInt, !=, lval]
[lvalInt]
[lval]
[report, (, FRACTIONAL_BITWISE_OPERAND, ,, left, )]
[FRACTIONAL_BITWISE_OPERAND]
[left]
[n]
[(, int, ), rval]
[rval]
[rvalInt, !=, rval]
[rvalInt]
[rval]
[report, (, FRACTIONAL_BITWISE_OPERAND, ,, right, )]
[FRACTIONAL_BITWISE_OPERAND]
[right]
[n]
[n, ., getType, (, )]
[n]
[Token, ., LSH]
[Token]
[result]
[lvalInt, <<, rvalInt]
[lvalInt]
[rvalInt]
[Token, ., RSH]
[Token]
[result]
[lvalInt, >, >, rvalInt]
[lvalInt]
[rvalInt]
[Token, ., URSH]
[Token]
[lvalInt, &, 0xffffffffL]
[lvalInt]
[0xffffffffL]
[result]
[lvalLong, >, >, >, rvalInt]
[lvalLong]
[rvalInt]
[new, AssertionError, (, "Unknown shift operator: ", +, Token, ., name, (, n, ., getType, (, ), ), )]
["Unknown shift operator: ", +, Token, ., name, (, n, ., getType, (, ), )]
["Unknown shift operator: "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[IR, ., number, (, result, )]
[IR]
[result]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newNumber, )]
[n, ., getParent, (, )]
[n]
[n]
[newNumber]
[reportCodeChange, (, )]
[newNumber]
[n]
[@, SuppressWarnings, (, "fallthrough", )]
["fallthrough"]
[evaluateComparison, (, n, ., getType, (, ), ,, left, ,, right, )]
[n, ., getType, (, )]
[n]
[left]
[right]
[result, ==, TernaryValue, ., UNKNOWN]
[result]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[n]
[NodeUtil, ., booleanNode, (, result, ., toBoolean, (, true, ), )]
[NodeUtil]
[result, ., toBoolean, (, true, )]
[result]
[true]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, )]
[n, ., getParent, (, )]
[n]
[n]
[newNode]
[reportCodeChange, (, )]
[newNode]
[NodeUtil, ., isLiteralValue, (, left, ,, true, )]
[NodeUtil]
[left]
[true]
[NodeUtil, ., isLiteralValue, (, right, ,, true, )]
[NodeUtil]
[right]
[true]
[!, leftLiteral, ||, !, rightLiteral]
[!, leftLiteral]
[leftLiteral]
[!, rightLiteral]
[rightLiteral]
[op, !=, Token, ., GT, &&, op, !=, Token, ., LT]
[op, !=, Token, ., GT]
[op]
[Token, ., GT]
[Token]
[op, !=, Token, ., LT]
[op]
[Token, ., LT]
[Token]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[NodeUtil, ., isUndefined, (, right, ), &&, rightLiteral]
[NodeUtil, ., isUndefined, (, right, )]
[NodeUtil]
[right]
[rightLiteral]
[right, ., isNull, (, )]
[right]
[getNormalizedNodeType, (, left, )]
[left]
[getNormalizedNodeType, (, right, )]
[right]
[lhType]
[Token, ., VOID]
[Token]
[!, leftLiteral]
[leftLiteral]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[!, rightLiteral]
[rightLiteral]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, right, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, right, ,, op, )]
[right]
[op]
[Token, ., NULL]
[Token]
[rightLiteral, &&, isEqualityOp, (, op, )]
[rightLiteral]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, right, ,, op, ), )]
[TernaryValue]
[compareToNull, (, right, ,, op, )]
[right]
[op]
[Token, ., TRUE]
[Token]
[Token, ., FALSE]
[Token]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[rhType, !=, Token, ., TRUE, &&, rhType, !=, Token, ., FALSE, &&, rhType, !=, Token, ., NULL]
[rhType, !=, Token, ., TRUE, &&, rhType, !=, Token, ., FALSE]
[rhType, !=, Token, ., TRUE]
[rhType]
[Token, ., TRUE]
[Token]
[rhType, !=, Token, ., FALSE]
[rhType]
[Token, ., FALSE]
[Token]
[rhType, !=, Token, ., NULL]
[rhType]
[Token, ., NULL]
[Token]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[op]
[Token, ., SHEQ]
[Token]
[Token, ., EQ]
[Token]
[TernaryValue, ., forBoolean, (, lhType, ==, rhType, )]
[TernaryValue]
[lhType, ==, rhType]
[lhType]
[rhType]
[Token, ., SHNE]
[Token]
[Token, ., NE]
[Token]
[TernaryValue, ., forBoolean, (, lhType, !=, rhType, )]
[TernaryValue]
[lhType, !=, rhType]
[lhType]
[rhType]
[Token, ., GE]
[Token]
[Token, ., LE]
[Token]
[Token, ., GT]
[Token]
[Token, ., LT]
[Token]
[compareAsNumbers, (, op, ,, left, ,, right, )]
[op]
[left]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., THIS]
[Token]
[!, right, ., isThis, (, )]
[right, ., isThis, (, )]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[op]
[Token, ., SHEQ]
[Token]
[Token, ., EQ]
[Token]
[TernaryValue, ., TRUE]
[TernaryValue]
[Token, ., SHNE]
[Token]
[Token, ., NE]
[Token]
[TernaryValue, ., FALSE]
[TernaryValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., STRING]
[Token]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[nullRight, &&, isEqualityOp, (, op, )]
[nullRight]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, left, ,, op, ), )]
[TernaryValue]
[compareToNull, (, left, ,, op, )]
[left]
[op]
[Token, ., STRING, !=, right, ., getType, (, )]
[Token, ., STRING]
[Token]
[right, ., getType, (, )]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[op]
[Token, ., SHEQ]
[Token]
[Token, ., EQ]
[Token]
[areStringsEqual, (, left, ., getString, (, ), ,, right, ., getString, (, ), )]
[left, ., getString, (, )]
[left]
[right, ., getString, (, )]
[right]
[Token, ., SHNE]
[Token]
[Token, ., NE]
[Token]
[areStringsEqual, (, left, ., getString, (, ), ,, right, ., getString, (, ), ), ., not, (, )]
[areStringsEqual, (, left, ., getString, (, ), ,, right, ., getString, (, ), )]
[left, ., getString, (, )]
[left]
[right, ., getString, (, )]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., NUMBER]
[Token]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[nullRight, &&, isEqualityOp, (, op, )]
[nullRight]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, left, ,, op, ), )]
[TernaryValue]
[compareToNull, (, left, ,, op, )]
[left]
[op]
[Token, ., NUMBER, !=, right, ., getType, (, )]
[Token, ., NUMBER]
[Token]
[right, ., getType, (, )]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[compareAsNumbers, (, op, ,, left, ,, right, )]
[op]
[left]
[right]
[Token, ., NAME]
[Token]
[leftLiteral, &&, undefinedRight]
[leftLiteral]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[rightLiteral]
[(, left, ., getString, (, ), ., equals, (, "undefined", ), )]
[left, ., getString, (, ), ., equals, (, "undefined", )]
[left, ., getString, (, )]
[left]
["undefined"]
[undefinedLeft]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, right, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, right, ,, op, )]
[right]
[op]
[leftLiteral, &&, nullRight, &&, isEqualityOp, (, op, )]
[leftLiteral, &&, nullRight]
[leftLiteral]
[nullRight]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, left, ,, op, ), )]
[TernaryValue]
[compareToNull, (, left, ,, op, )]
[left]
[op]
[Token, ., NAME, !=, right, ., getType, (, )]
[Token, ., NAME]
[Token]
[right, ., getType, (, )]
[right]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[left, ., getString, (, )]
[left]
[right, ., getString, (, )]
[right]
[!, ln, ., equals, (, rn, )]
[ln, ., equals, (, rn, )]
[ln]
[rn]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[op]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[TernaryValue, ., FALSE]
[TernaryValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., NEG]
[Token]
[leftLiteral]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[nullRight, &&, isEqualityOp, (, op, )]
[nullRight]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, left, ,, op, ), )]
[TernaryValue]
[compareToNull, (, left, ,, op, )]
[left]
[op]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[Token, ., REGEXP]
[Token]
[Token, ., FUNCTION]
[Token]
[leftLiteral]
[undefinedRight]
[TernaryValue, ., forBoolean, (, compareToUndefined, (, left, ,, op, ), )]
[TernaryValue]
[compareToUndefined, (, left, ,, op, )]
[left]
[op]
[nullRight, &&, isEqualityOp, (, op, )]
[nullRight]
[isEqualityOp, (, op, )]
[op]
[TernaryValue, ., forBoolean, (, compareToNull, (, left, ,, op, ), )]
[TernaryValue]
[compareToNull, (, left, ,, op, )]
[left]
[op]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[a, ., indexOf, (, '\u000B', ), !=, -, 1, ||, b, ., indexOf, (, '\u000B', ), !=, -, 1]
[a, ., indexOf, (, '\u000B', ), !=, -, 1]
[a, ., indexOf, (, '\u000B', )]
[a]
['\u000B']
[-, 1]
[1]
[b, ., indexOf, (, '\u000B', ), !=, -, 1]
[b, ., indexOf, (, '\u000B', )]
[b]
['\u000B']
[-, 1]
[1]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[a, ., equals, (, b, ), ?, TernaryValue, ., TRUE, :, TernaryValue, ., FALSE]
[a, ., equals, (, b, )]
[a]
[b]
[TernaryValue, ., TRUE]
[TernaryValue]
[TernaryValue, ., FALSE]
[TernaryValue]
[n, ., getType, (, )]
[n]
[type, ==, Token, ., NOT]
[type]
[Token, ., NOT]
[Token]
[NodeUtil, ., getPureBooleanValue, (, n, )]
[NodeUtil]
[n]
[value]
[TRUE]
[Token, ., TRUE]
[Token]
[FALSE]
[Token, ., FALSE]
[Token]
[UNKNOWN]
[type]
[type]
[NodeUtil, ., getNumberValue, (, left, )]
[NodeUtil]
[left]
[leftValue, ==, null]
[leftValue]
[null]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[NodeUtil, ., getNumberValue, (, right, )]
[NodeUtil]
[right]
[rightValue, ==, null]
[rightValue]
[null]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[leftValue]
[rightValue]
[op]
[Token, ., SHEQ]
[Token]
[Token, ., EQ]
[Token]
[Preconditions, ., checkState, (, left, ., isNumber, (, ), &&, right, ., isNumber, (, ), )]
[Preconditions]
[left, ., isNumber, (, ), &&, right, ., isNumber, (, )]
[left, ., isNumber, (, )]
[left]
[right, ., isNumber, (, )]
[right]
[TernaryValue, ., forBoolean, (, lv, ==, rv, )]
[TernaryValue]
[lv, ==, rv]
[lv]
[rv]
[Token, ., SHNE]
[Token]
[Token, ., NE]
[Token]
[Preconditions, ., checkState, (, left, ., isNumber, (, ), &&, right, ., isNumber, (, ), )]
[Preconditions]
[left, ., isNumber, (, ), &&, right, ., isNumber, (, )]
[left, ., isNumber, (, )]
[left]
[right, ., isNumber, (, )]
[right]
[TernaryValue, ., forBoolean, (, lv, !=, rv, )]
[TernaryValue]
[lv, !=, rv]
[lv]
[rv]
[Token, ., LE]
[Token]
[TernaryValue, ., forBoolean, (, lv, <=, rv, )]
[TernaryValue]
[lv, <=, rv]
[lv]
[rv]
[Token, ., LT]
[Token]
[TernaryValue, ., forBoolean, (, lv, <, rv, )]
[TernaryValue]
[lv, <, rv]
[lv]
[rv]
[Token, ., GE]
[Token]
[TernaryValue, ., forBoolean, (, lv, >=, rv, )]
[TernaryValue]
[lv, >=, rv]
[lv]
[rv]
[Token, ., GT]
[Token]
[TernaryValue, ., forBoolean, (, lv, >, rv, )]
[TernaryValue]
[lv, >, rv]
[lv]
[rv]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[Preconditions, ., checkState, (, NodeUtil, ., isLiteralValue, (, value, ,, true, ), )]
[Preconditions]
[NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[NodeUtil]
[value]
[true]
[NodeUtil, ., isUndefined, (, value, )]
[NodeUtil]
[value]
[(, Token, ., NULL, ==, value, ., getType, (, ), )]
[Token, ., NULL, ==, value, ., getType, (, )]
[Token, ., NULL]
[Token]
[value, ., getType, (, )]
[value]
[valueUndefined, ||, valueNull]
[valueUndefined]
[valueNull]
[op]
[Token, ., EQ]
[Token]
[equivalent]
[Token, ., NE]
[Token]
[!, equivalent]
[equivalent]
[Token, ., SHEQ]
[Token]
[valueUndefined]
[Token, ., SHNE]
[Token]
[!, valueUndefined]
[valueUndefined]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[false]
[new, IllegalStateException, (, "unexpected.", )]
["unexpected."]
[op]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[true]
[false]
[NodeUtil, ., isUndefined, (, value, )]
[NodeUtil]
[value]
[(, Token, ., NULL, ==, value, ., getType, (, ), )]
[Token, ., NULL, ==, value, ., getType, (, )]
[Token, ., NULL]
[Token]
[value, ., getType, (, )]
[value]
[valueUndefined, ||, valueNull]
[valueUndefined]
[valueNull]
[op]
[Token, ., EQ]
[Token]
[equivalent]
[Token, ., NE]
[Token]
[!, equivalent]
[equivalent]
[Token, ., SHEQ]
[Token]
[valueNull]
[Token, ., SHNE]
[Token]
[!, valueNull]
[valueNull]
[new, IllegalStateException, (, "unexpected.", )]
["unexpected."]
[Preconditions, ., checkArgument, (, n, ., isNew, (, ), )]
[Preconditions]
[n, ., isNew, (, )]
[n]
[inForcedStringContext, (, n, )]
[n]
[tryFoldInForcedStringContext, (, n, )]
[n]
[n]
[n, ., getParent, (, ), ., isGetElem, (, ), &&, n, ., getParent, (, ), ., getLastChild, (, ), ==, n]
[n, ., getParent, (, ), ., isGetElem, (, )]
[n, ., getParent, (, )]
[n]
[n, ., getParent, (, ), ., getLastChild, (, ), ==, n]
[n, ., getParent, (, ), ., getLastChild, (, )]
[n, ., getParent, (, )]
[n]
[n]
[true]
[n, ., getParent, (, ), ., isAdd, (, )]
[n, ., getParent, (, )]
[n]
[true]
[false]
[Preconditions, ., checkArgument, (, n, ., isNew, (, ), )]
[Preconditions]
[n, ., isNew, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[!, objectType, ., isName, (, )]
[objectType, ., isName, (, )]
[objectType]
[n]
[objectType, ., getString, (, ), ., equals, (, "String", )]
[objectType, ., getString, (, )]
[objectType]
["String"]
[objectType, ., getNext, (, )]
[objectType]
[null]
[value, ==, null]
[value]
[null]
[stringValue]
[""]
[!, NodeUtil, ., isImmutableValue, (, value, )]
[NodeUtil, ., isImmutableValue, (, value, )]
[NodeUtil]
[value]
[n]
[stringValue]
[NodeUtil, ., getStringValue, (, value, )]
[NodeUtil]
[value]
[stringValue, ==, null]
[stringValue]
[null]
[n]
[n, ., getParent, (, )]
[n]
[IR, ., string, (, stringValue, )]
[IR]
[stringValue]
[parent, ., replaceChild, (, n, ,, newString, )]
[parent]
[n]
[newString]
[newString, ., copyInformationFrom, (, parent, )]
[newString]
[parent]
[reportCodeChange, (, )]
[newString]
[n]
[Preconditions, ., checkArgument, (, n, ., isGetElem, (, ), )]
[Preconditions]
[n, ., isGetElem, (, )]
[n]
[left, ., isObjectLit, (, )]
[left]
[tryFoldObjectPropAccess, (, n, ,, left, ,, right, )]
[n]
[left]
[right]
[left, ., isArrayLit, (, )]
[left]
[tryFoldArrayAccess, (, n, ,, left, ,, right, )]
[n]
[left]
[right]
[n]
[Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), )]
[Preconditions]
[n, ., isGetProp, (, )]
[n]
[left, ., isObjectLit, (, )]
[left]
[tryFoldObjectPropAccess, (, n, ,, left, ,, right, )]
[n]
[left]
[right]
[right, ., isString, (, ), &&, right, ., getString, (, ), ., equals, (, "length", )]
[right, ., isString, (, )]
[right]
[right, ., getString, (, ), ., equals, (, "length", )]
[right, ., getString, (, )]
[right]
["length"]
[-, 1]
[1]
[left, ., getType, (, )]
[left]
[Token, ., ARRAYLIT]
[Token]
[mayHaveSideEffects, (, left, )]
[left]
[n]
[knownLength]
[left, ., getChildCount, (, )]
[left]
[Token, ., STRING]
[Token]
[knownLength]
[left, ., getString, (, ), ., length, (, )]
[left, ., getString, (, )]
[left]
[n]
[Preconditions, ., checkState, (, knownLength, !=, -, 1, )]
[Preconditions]
[knownLength, !=, -, 1]
[knownLength]
[-, 1]
[1]
[IR, ., number, (, knownLength, )]
[IR]
[knownLength]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, lengthNode, )]
[n, ., getParent, (, )]
[n]
[n]
[lengthNode]
[reportCodeChange, (, )]
[lengthNode]
[n]
[n, ., getParent, (, )]
[n]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isInc, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isInc, (, )]
[parent]
[parent, ., isDec, (, )]
[parent]
[true]
[false]
[n, ., getParent, (, )]
[n]
[isAssignmentTarget, (, n, )]
[n]
[n]
[!, right, ., isNumber, (, )]
[right, ., isNumber, (, )]
[right]
[n]
[right, ., getDouble, (, )]
[right]
[(, int, ), index]
[index]
[intIndex, !=, index]
[intIndex]
[index]
[report, (, INVALID_GETELEM_INDEX_ERROR, ,, right, )]
[INVALID_GETELEM_INDEX_ERROR]
[right]
[n]
[intIndex, <, 0]
[intIndex]
[0]
[report, (, INDEX_OUT_OF_BOUNDS_ERROR, ,, right, )]
[INDEX_OUT_OF_BOUNDS_ERROR]
[right]
[n]
[left, ., getFirstChild, (, )]
[left]
[null]
[0]
[current, !=, null]
[current]
[null]
[i, ++]
[i]
[i, !=, intIndex]
[i]
[intIndex]
[mayHaveSideEffects, (, current, )]
[current]
[n]
[elem]
[current]
[current]
[current, ., getNext, (, )]
[current]
[elem, ==, null]
[elem]
[null]
[report, (, INDEX_OUT_OF_BOUNDS_ERROR, ,, right, )]
[INDEX_OUT_OF_BOUNDS_ERROR]
[right]
[n]
[elem, ., isEmpty, (, )]
[elem]
[elem]
[NodeUtil, ., newUndefinedNode, (, elem, )]
[NodeUtil]
[elem]
[left, ., removeChild, (, elem, )]
[left]
[elem]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, elem, )]
[n, ., getParent, (, )]
[n]
[n]
[elem]
[reportCodeChange, (, )]
[elem]
[Preconditions, ., checkArgument, (, NodeUtil, ., isGet, (, n, ), )]
[Preconditions]
[NodeUtil, ., isGet, (, n, )]
[NodeUtil]
[n]
[!, left, ., isObjectLit, (, ), ||, !, right, ., isString, (, )]
[!, left, ., isObjectLit, (, )]
[left, ., isObjectLit, (, )]
[left]
[!, right, ., isString, (, )]
[right, ., isString, (, )]
[right]
[n]
[isAssignmentTarget, (, n, )]
[n]
[n]
[null]
[null]
[left, ., getFirstChild, (, )]
[left]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[c, ., getString, (, ), ., equals, (, right, ., getString, (, ), )]
[c, ., getString, (, )]
[c]
[right, ., getString, (, )]
[right]
[c, ., getType, (, )]
[c]
[Token, ., SETTER_DEF]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., STRING_KEY]
[Token]
[value, !=, null, &&, mayHaveSideEffects, (, value, )]
[value, !=, null]
[value]
[null]
[mayHaveSideEffects, (, value, )]
[value]
[n]
[key]
[c]
[value]
[key, ., getFirstChild, (, )]
[key]
[new, IllegalStateException, (, )]
[mayHaveSideEffects, (, c, ., getFirstChild, (, ), )]
[c, ., getFirstChild, (, )]
[c]
[n]
[value, ==, null]
[value]
[null]
[n]
[value, ., isFunction, (, ), &&, NodeUtil, ., referencesThis, (, value, )]
[value, ., isFunction, (, )]
[value]
[NodeUtil, ., referencesThis, (, value, )]
[NodeUtil]
[value]
[n]
[value, ., detachFromParent, (, )]
[value]
[key, ., isGetterDef, (, )]
[key]
[replacement]
[IR, ., call, (, replacement, )]
[IR]
[replacement]
[replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[replacement]
[Node, ., FREE_CALL]
[Node]
[true]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, )]
[n, ., getParent, (, )]
[n]
[n]
[replacement]
[reportCodeChange, (, )]
[n]
