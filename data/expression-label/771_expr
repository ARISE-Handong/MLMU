["  "]
[" -> "]
[" -- "]
[new, HashMap, <, Node, ,, Integer, >, (, )]
[0]
[this, ., builder]
[this]
[new, StringBuilder, (, )]
[this, ., cfg]
[this]
[null]
[this, ., printAnnotations]
[this]
[false]
[this, ., cfg]
[this]
[cfg]
[this, ., builder]
[this]
[builder]
[this, ., printAnnotations]
[this]
[printAnnotations]
[formatPreamble, (, )]
[traverseNodes, (, n, )]
[n]
[formatConclusion, (, )]
[toDot, (, n, ,, null, )]
[n]
[null]
[new, StringBuilder, (, )]
[new, DotFormatter, (, n, ,, inCFG, ,, builder, ,, printAnnotations, )]
[n]
[inCFG]
[builder]
[printAnnotations]
[builder, ., toString, (, )]
[builder]
[new, StringBuilder, (, )]
[new, DotFormatter, (, n, ,, inCFG, ,, builder, ,, false, )]
[n]
[inCFG]
[builder]
[false]
[builder, ., toString, (, )]
[builder]
[new, DotFormatter, (, n, ,, inCFG, ,, builder, ,, false, )]
[n]
[inCFG]
[builder]
[false]
[new, DotFormatter, (, )]
[key, (, parent, )]
[parent]
[parent, ., getFirstChild, (, )]
[parent]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[key, (, child, )]
[child]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, formatNodeName, (, keyParent, ), )]
[builder]
[formatNodeName, (, keyParent, )]
[keyParent]
[builder, ., append, (, ARROW, )]
[builder]
[ARROW]
[builder, ., append, (, formatNodeName, (, keyChild, ), )]
[builder]
[formatNodeName, (, keyChild, )]
[keyChild]
[builder, ., append, (, " [weight=1];\n", )]
[builder]
[" [weight=1];\n"]
[traverseNodes, (, child, )]
[child]
[cfg, !=, null, &&, cfg, ., hasNode, (, parent, )]
[cfg, !=, null]
[cfg]
[null]
[cfg, ., hasNode, (, parent, )]
[cfg]
[parent]
[cfg, ., getOutEdges, (, parent, )]
[cfg]
[parent]
[new, String, [, outEdges, ., size, (, ), ]]
[outEdges, ., size, (, )]
[outEdges]
[0]
[i, <, edgeList, ., length]
[i]
[edgeList, ., length]
[edgeList]
[i, ++]
[i]
[outEdges, ., get, (, i, )]
[outEdges]
[i]
[edge, ., getDestination, (, )]
[edge]
[null]
[succ, ==, cfg, ., getImplicitReturn, (, )]
[succ]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[toNode]
["RETURN"]
[key, (, succ, ., getValue, (, ), )]
[succ, ., getValue, (, )]
[succ]
[toNode]
[formatNodeName, (, keySucc, )]
[keySucc]
[edgeList, [, i, ]]
[edgeList]
[i]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", ", +, "weight=0.01, color=\"red\"];\n"]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", ", +, "fontcolor=\"red\", "]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, ), +, "\", "]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\"", +, edge, ., getValue, (, ), ., toString, (, )]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode, +, " [label=\""]
[formatNodeName, (, keyParent, ), +, ARROW, +, toNode]
[formatNodeName, (, keyParent, ), +, ARROW]
[formatNodeName, (, keyParent, )]
[keyParent]
[ARROW]
[toNode]
[" [label=\""]
[edge, ., getValue, (, ), ., toString, (, )]
[edge, ., getValue, (, )]
[edge]
["\", "]
["fontcolor=\"red\", "]
["weight=0.01, color=\"red\"];\n"]
[Arrays, ., sort, (, edgeList, )]
[Arrays]
[edgeList]
[0]
[i, <, edgeList, ., length]
[i]
[edgeList, ., length]
[edgeList]
[i, ++]
[i]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, edgeList, [, i, ], )]
[builder]
[edgeList, [, i, ]]
[edgeList]
[i]
[assignments, ., get, (, n, )]
[assignments]
[n]
[key, ==, null]
[key]
[null]
[key]
[keyCount, ++]
[keyCount]
[assignments, ., put, (, n, ,, key, )]
[assignments]
[n]
[key]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, formatNodeName, (, key, ), )]
[builder]
[formatNodeName, (, key, )]
[key]
[builder, ., append, (, " [label=\"", )]
[builder]
[" [label=\""]
[builder, ., append, (, name, (, n, ), )]
[builder]
[name, (, n, )]
[n]
[n, ., getJSType, (, )]
[n]
[type, !=, null]
[type]
[null]
[builder, ., append, (, " : ", )]
[builder]
[" : "]
[builder, ., append, (, type, ., toString, (, ), )]
[builder]
[type, ., toString, (, )]
[type]
[printAnnotations, &&, cfg, !=, null, &&, cfg, ., hasNode, (, n, )]
[printAnnotations, &&, cfg, !=, null]
[printAnnotations]
[cfg, !=, null]
[cfg]
[null]
[cfg, ., hasNode, (, n, )]
[cfg]
[n]
[cfg, ., getNode, (, n, ), ., getAnnotation, (, )]
[cfg, ., getNode, (, n, )]
[cfg]
[n]
[annotation, !=, null]
[annotation]
[null]
[builder, ., append, (, "\\n", )]
[builder]
["\\n"]
[builder, ., append, (, annotation, ., toString, (, ), )]
[builder]
[annotation, ., toString, (, )]
[annotation]
[builder, ., append, (, "\"", )]
[builder]
["\""]
[n, ., getJSDocInfo, (, ), !=, null]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[builder, ., append, (, " color=\"green\"", )]
[builder]
[" color=\"green\""]
[builder, ., append, (, "];\n", )]
[builder]
["];\n"]
[key]
[n, ., getType, (, )]
[n]
[type]
[Token, ., VOID]
[Token]
["VOID"]
[Token, ., name, (, type, )]
[Token]
[type]
["node", +, key]
["node"]
[key]
[builder, ., append, (, "digraph AST {\n", )]
[builder]
["digraph AST {\n"]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, "node [color=lightblue2, style=filled];\n", )]
[builder]
["node [color=lightblue2, style=filled];\n"]
[builder, ., append, (, "}\n", )]
[builder]
["}\n"]
[new, StringBuilder, (, )]
[builder, ., append, (, graph, ., isDirected, (, ), ?, "digraph", :, "graph", )]
[builder]
[graph, ., isDirected, (, ), ?, "digraph", :, "graph"]
[graph, ., isDirected, (, )]
[graph]
["digraph"]
["graph"]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, graph, ., getName, (, ), )]
[builder]
[graph, ., getName, (, )]
[graph]
[builder, ., append, (, " {\n", )]
[builder]
[" {\n"]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, "node [color=lightblue2, style=filled];\n", )]
[builder]
["node [color=lightblue2, style=filled];\n"]
[graph, ., isDirected, (, ), ?, ARROW, :, LINE]
[graph, ., isDirected, (, )]
[graph]
[ARROW]
[LINE]
[graph, ., getGraphvizNodes, (, )]
[graph]
[new, String, [, nodes, ., size, (, ), ]]
[nodes, ., size, (, )]
[nodes]
[0]
[i, <, nodeNames, ., length]
[i]
[nodeNames, ., length]
[nodeNames]
[i, ++]
[i]
[nodes, ., get, (, i, )]
[nodes]
[i]
[nodeNames, [, i, ]]
[nodeNames]
[i]
[gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, ), +, "\"]"]
[gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\"", +, gNode, ., getColor, (, )]
[gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, ), +, "\" color=\""]
[gNode, ., getId, (, ), +, " [label=\"", +, gNode, ., getLabel, (, )]
[gNode, ., getId, (, ), +, " [label=\""]
[gNode, ., getId, (, )]
[gNode]
[" [label=\""]
[gNode, ., getLabel, (, )]
[gNode]
["\" color=\""]
[gNode, ., getColor, (, )]
[gNode]
["\"]"]
[Arrays, ., sort, (, nodeNames, )]
[Arrays]
[nodeNames]
[nodeNames]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, nodeName, )]
[builder]
[nodeName]
[builder, ., append, (, ";\n", )]
[builder]
[";\n"]
[graph, ., getGraphvizEdges, (, )]
[graph]
[new, String, [, edges, ., size, (, ), ]]
[edges, ., size, (, )]
[edges]
[0]
[i, <, edgeNames, ., length]
[i]
[edgeNames, ., length]
[edgeNames]
[i, ++]
[i]
[edges, ., get, (, i, )]
[edges]
[i]
[edgeNames, [, i, ]]
[edgeNames]
[i]
[edge, ., getNode1Id, (, ), +, edgeSymbol, +, edge, ., getNode2Id, (, )]
[edge, ., getNode1Id, (, ), +, edgeSymbol]
[edge, ., getNode1Id, (, )]
[edge]
[edgeSymbol]
[edge, ., getNode2Id, (, )]
[edge]
[Arrays, ., sort, (, edgeNames, )]
[Arrays]
[edgeNames]
[edgeNames]
[builder, ., append, (, INDENT, )]
[builder]
[INDENT]
[builder, ., append, (, edgeName, )]
[builder]
[edgeName]
[builder, ., append, (, ";\n", )]
[builder]
[";\n"]
[builder, ., append, (, "}\n", )]
[builder]
["}\n"]
[builder, ., toString, (, )]
[builder]
