[new, ArrayList, <, Node, >, (, )]
[new, HashMap, <, Node, ,, Node, >, (, )]
[new, HashMap, <, String, ,, Property, >, (, )]
[new, HashSet, <, String, >, (, Arrays, ., asList, (, "prototype", ), )]
[Arrays, ., asList, (, "prototype", )]
[Arrays]
["prototype"]
[new, HashSet, <, String, >, (, )]
[new, Comparator, <, Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }]
[p1, ., numOccurrences, !=, p2, ., numOccurrences]
[p1, ., numOccurrences]
[p1]
[p2, ., numOccurrences]
[p2]
[p2, ., numOccurrences, -, p1, ., numOccurrences]
[p2, ., numOccurrences]
[p2]
[p1, ., numOccurrences]
[p1]
[p1, ., affinityScore, !=, p2, ., affinityScore]
[p1, ., affinityScore]
[p1]
[p2, ., affinityScore]
[p2]
[p2, ., affinityScore, -, p1, ., affinityScore]
[p2, ., affinityScore]
[p2]
[p1, ., affinityScore]
[p1]
[p1, ., oldName, ., compareTo, (, p2, ., oldName, )]
[p1, ., oldName]
[p1]
[p2, ., oldName]
[p2]
["JSCompiler_renameProperty"]
[DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", )]
[DiagnosticType]
["JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL"]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal"]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - "]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME]
["Bad "]
[RENAME_PROPERTY_FUNCTION_NAME]
[" call - "]
["argument must be a string literal"]
[DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier", )]
[DiagnosticType]
["JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG"]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier"]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - "]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME]
["Bad "]
[RENAME_PROPERTY_FUNCTION_NAME]
[" argument - "]
["'{0}' is not a valid JavaScript identifier"]
[compiler]
[affinity]
[generatePseudoNames]
[null]
[null]
[compiler]
[affinity]
[generatePseudoNames]
[prevUsedPropertyMap]
[null]
[this, ., compiler]
[this]
[compiler]
[this, ., generatePseudoNames]
[this]
[generatePseudoNames]
[this, ., prevUsedPropertyMap]
[this]
[prevUsedPropertyMap]
[this, ., reservedCharacters]
[this]
[reservedCharacters]
[affinity]
[this, ., affinityGraph]
[this]
[LinkedUndirectedGraph, ., createWithoutAnnotations, (, )]
[LinkedUndirectedGraph]
[this, ., affinityGraph]
[this]
[null]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, ProcessExterns, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessProperties, (, )]
[new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), )]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, )]
[externedNames, ., size, (, )]
[externedNames]
[quotedNames, ., size, (, )]
[quotedNames]
[reservedNames, ., addAll, (, externedNames, )]
[reservedNames]
[externedNames]
[reservedNames, ., addAll, (, quotedNames, )]
[reservedNames]
[quotedNames]
[prevUsedPropertyMap, !=, null]
[prevUsedPropertyMap]
[null]
[reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), )]
[reservedNames]
[propertyMap, ., values, (, )]
[propertyMap]
[compiler, ., addToDebugLog, (, "JS property assignments:", )]
[compiler]
["JS property assignments:"]
[affinityGraph, !=, null]
[affinityGraph]
[null]
[computeAffinityScores, (, )]
[new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, )]
[FREQUENCY_COMPARATOR]
[propsByFreq, ., addAll, (, propertyMap, ., values, (, ), )]
[propsByFreq]
[propertyMap, ., values, (, )]
[propertyMap]
[generateNames, (, propsByFreq, ,, reservedNames, )]
[propsByFreq]
[reservedNames]
[false]
[stringNodesToRename]
[n, ., getString, (, )]
[n]
[propertyMap, ., get, (, oldName, )]
[propertyMap]
[oldName]
[p, !=, null, &&, p, ., newName, !=, null]
[p, !=, null]
[p]
[null]
[p, ., newName, !=, null]
[p, ., newName]
[p]
[null]
[Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), )]
[Preconditions]
[oldName, ., equals, (, p, ., oldName, )]
[oldName]
[p, ., oldName]
[p]
[n, ., setString, (, p, ., newName, )]
[n]
[p, ., newName]
[p]
[changed]
[changed, ||, !, p, ., newName, ., equals, (, oldName, )]
[changed]
[!, p, ., newName, ., equals, (, oldName, )]
[p, ., newName, ., equals, (, oldName, )]
[p, ., newName]
[p]
[oldName]
[callNodeToParentMap, ., entrySet, (, )]
[callNodeToParentMap]
[nodeEntry, ., getValue, (, )]
[nodeEntry]
[nodeEntry, ., getKey, (, ), ., getFirstChild, (, ), ., getNext, (, )]
[nodeEntry, ., getKey, (, ), ., getFirstChild, (, )]
[nodeEntry, ., getKey, (, )]
[nodeEntry]
[new, StringBuilder, (, )]
[firstArg, ., getString, (, ), ., split, (, "[.]", )]
[firstArg, ., getString, (, )]
[firstArg]
["[.]"]
[propertyMap, ., get, (, oldName, )]
[propertyMap]
[oldName]
[p, !=, null, &&, p, ., newName, !=, null]
[p, !=, null]
[p]
[null]
[p, ., newName, !=, null]
[p, ., newName]
[p]
[null]
[Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), )]
[Preconditions]
[oldName, ., equals, (, p, ., oldName, )]
[oldName]
[p, ., oldName]
[p]
[replacement]
[p, ., newName]
[p]
[replacement]
[oldName]
[sb, ., length, (, ), >, 0]
[sb, ., length, (, )]
[sb]
[0]
[sb, ., append, (, '.', )]
[sb]
['.']
[sb, ., append, (, replacement, )]
[sb]
[replacement]
[parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (, ), ), )]
[parent]
[nodeEntry, ., getKey, (, )]
[nodeEntry]
[IR, ., string, (, sb, ., toString, (, ), )]
[IR]
[sb, ., toString, (, )]
[sb]
[changed]
[true]
[changed]
[compiler, ., reportCodeChange, (, )]
[compiler]
[compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, )]
[compiler]
[LifeCycleStage, ., NORMALIZED_OBFUSCATED]
[LifeCycleStage]
[allProps]
[prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, )]
[prevUsedPropertyMap]
[prop, ., oldName]
[prop]
[!, generatePseudoNames, &&, prevName, !=, null]
[!, generatePseudoNames]
[generatePseudoNames]
[prevName, !=, null]
[prevName]
[null]
[reservedNames, ., contains, (, prevName, )]
[reservedNames]
[prevName]
[prop, ., newName]
[prop]
[prevName]
[reservedNames, ., add, (, prevName, )]
[reservedNames]
[prevName]
[propertyMap, ., values, (, )]
[propertyMap]
[affinityGraph, ., getUndirectedGraphNode, (, p, )]
[affinityGraph]
[p]
[0]
[node, ., getNeighborEdgesIterator, (, )]
[node]
[edgeIterator, ., hasNext, (, )]
[edgeIterator]
[edgeIterator, ., next, (, )]
[edgeIterator]
[affinityScore]
[edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, )]
[edge, ., getValue, (, ), ., affinity]
[edge, ., getValue, (, )]
[edge]
[(, node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, )]
[node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences]
[node, ==, edge, ., getNodeA, (, )]
[node]
[edge, ., getNodeA, (, )]
[edge]
[edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences]
[edge, ., getNodeB, (, ), ., getValue, (, )]
[edge, ., getNodeB, (, )]
[edge]
[edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences]
[edge, ., getNodeA, (, ), ., getValue, (, )]
[edge, ., getNodeA, (, )]
[edge]
[node, ., getValue, (, ), ., affinityScore]
[node, ., getValue, (, )]
[node]
[affinityScore]
[new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[reservedNames]
[""]
[reservedCharacters]
[props]
[generatePseudoNames]
[p, ., newName]
[p]
["$", +, p, ., oldName, +, "$"]
["$", +, p, ., oldName]
["$"]
[p, ., oldName]
[p]
["$"]
[p, ., newName, ==, null]
[p, ., newName]
[p]
[null]
[p, ., newName]
[p]
[nameGen, ., generateNextName, (, )]
[nameGen]
[reservedNames, ., add, (, p, ., newName, )]
[reservedNames]
[p, ., newName]
[p]
[compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +, p, ., newName, )]
[compiler]
[p, ., oldName, +, " => ", +, p, ., newName]
[p, ., oldName, +, " => "]
[p, ., oldName]
[p]
[" => "]
[p, ., newName]
[p]
[ImmutableMap, ., builder, (, )]
[ImmutableMap]
[propertyMap, ., values, (, )]
[propertyMap]
[p, ., newName, !=, null]
[p, ., newName]
[p]
[null]
[map, ., put, (, p, ., oldName, ,, p, ., newName, )]
[map]
[p, ., oldName]
[p]
[p, ., newName]
[p]
[new, VariableMap, (, map, ., build, (, ), )]
[map, ., build, (, )]
[map]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[dest, ., isString, (, )]
[dest]
[externedNames, ., add, (, dest, ., getString, (, ), )]
[externedNames]
[dest, ., getString, (, )]
[dest]
[Token, ., OBJECTLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[externedNames, ., add, (, child, ., getString, (, ), )]
[externedNames]
[child, ., getString, (, )]
[child]
[null]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[propNode, ., isString, (, )]
[propNode]
[maybeMarkCandidate, (, propNode, )]
[propNode]
[Token, ., OBJECTLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[!, key, ., isQuotedString, (, )]
[key, ., isQuotedString, (, )]
[key]
[maybeMarkCandidate, (, key, )]
[key]
[quotedNames, ., add, (, key, ., getString, (, ), )]
[quotedNames]
[key, ., getString, (, )]
[key]
[Token, ., GETELEM]
[Token]
[n, ., getLastChild, (, )]
[n]
[child, !=, null, &&, child, ., isString, (, )]
[child, !=, null]
[child]
[null]
[child, ., isString, (, )]
[child]
[quotedNames, ., add, (, child, ., getString, (, ), )]
[quotedNames]
[child, ., getString, (, )]
[child]
[Token, ., CALL]
[Token]
[n, ., getFirstChild, (, )]
[n]
[fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), )]
[fnName, ., isName, (, )]
[fnName]
[RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), )]
[RENAME_PROPERTY_FUNCTION_NAME]
[fnName, ., getString, (, )]
[fnName]
[callNodeToParentMap, ., put, (, n, ,, parent, )]
[callNodeToParentMap]
[n]
[parent]
[countCallCandidates, (, t, ,, n, )]
[t]
[n]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, )]
[RENAME_PROPERTY_FUNCTION_NAME]
[name]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., detachFromParent, (, )]
[parent]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), )]
[parent, ., isName, (, )]
[parent]
[RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), )]
[RENAME_PROPERTY_FUNCTION_NAME]
[parent, ., getString, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[varNode, ., isVar, (, )]
[varNode]
[varNode, ., removeChild, (, parent, )]
[varNode]
[parent]
[!, varNode, ., hasChildren, (, )]
[varNode, ., hasChildren, (, )]
[varNode]
[varNode, ., detachFromParent, (, )]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getString, (, )]
[n]
[!, externedNames, ., contains, (, name, )]
[externedNames, ., contains, (, name, )]
[externedNames]
[name]
[stringNodesToRename, ., add, (, n, )]
[stringNodesToRename]
[n]
[countPropertyOccurrence, (, name, )]
[name]
[callNode, ., getFirstChild, (, ), ., getNext, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[!, firstArg, ., isString, (, )]
[firstArg, ., isString, (, )]
[firstArg]
[t, ., report, (, callNode, ,, BAD_CALL, )]
[t]
[callNode]
[BAD_CALL]
[firstArg, ., getString, (, ), ., split, (, "[.]", )]
[firstArg, ., getString, (, )]
[firstArg]
["[.]"]
[!, TokenStream, ., isJSIdentifier, (, name, )]
[TokenStream, ., isJSIdentifier, (, name, )]
[TokenStream]
[name]
[t, ., report, (, callNode, ,, BAD_ARG, ,, name, )]
[t]
[callNode]
[BAD_ARG]
[name]
[!, externedNames, ., contains, (, name, )]
[externedNames, ., contains, (, name, )]
[externedNames]
[name]
[countPropertyOccurrence, (, name, )]
[name]
[propertyMap, ., get, (, name, )]
[propertyMap]
[name]
[prop, ==, null]
[prop]
[null]
[prop]
[new, Property, (, name, )]
[name]
[propertyMap, ., put, (, name, ,, prop, )]
[propertyMap]
[name]
[prop]
[affinityGraph, !=, null]
[affinityGraph]
[null]
[affinityGraph, ., createNode, (, prop, )]
[affinityGraph]
[prop]
[prop, ., numOccurrences, ++]
[prop, ., numOccurrences]
[prop]
[currentHighAffinityProperties, !=, null]
[currentHighAffinityProperties]
[null]
[currentHighAffinityProperties, ., add, (, prop, )]
[currentHighAffinityProperties]
[prop]
[!, t, ., inGlobalScope, (, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, )]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, )]
[t, ., getScope, (, ), ., getParent, (, )]
[t, ., getScope, (, )]
[t]
[currentHighAffinityProperties]
[Sets, ., newHashSet, (, )]
[Sets]
[affinityGraph, ==, null]
[affinityGraph]
[null]
[!, t, ., inGlobalScope, (, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, )]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, )]
[t, ., getScope, (, ), ., getParent, (, )]
[t, ., getScope, (, )]
[t]
[currentHighAffinityProperties]
[currentHighAffinityProperties]
[p1, ., oldName, ., compareTo, (, p2, ., oldName, ), <, 0]
[p1, ., oldName, ., compareTo, (, p2, ., oldName, )]
[p1, ., oldName]
[p1]
[p2, ., oldName]
[p2]
[0]
[affinityGraph, ., getFirstEdge, (, p1, ,, p2, )]
[affinityGraph]
[p1]
[p2]
[edge, ==, null]
[edge]
[null]
[affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, )]
[affinityGraph]
[p1]
[new, PropertyAffinity, (, 1, )]
[1]
[p2]
[edge, ., getValue, (, ), ., increase, (, )]
[edge, ., getValue, (, )]
[edge]
[currentHighAffinityProperties]
[null]
[0]
[this, ., oldName]
[this]
[name]
[0]
[this, ., affinity]
[this]
[affinity]
[affinity, ++]
[affinity]
