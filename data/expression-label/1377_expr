[1L]
[new, HashSet, <, String, >, (, )]
[registry]
["enum{", +, name, +, "}"]
["enum{", +, name]
["enum{"]
[name]
["}"]
[null]
[this, ., source]
[this]
[source]
[this, ., elementsType]
[this]
[new, EnumElementType, (, registry, ,, elementsType, ,, name, )]
[registry]
[elementsType]
[name]
[source]
[this]
[registry, ., getNativeObjectType, (, JSTypeNative, ., OBJECT_TYPE, )]
[registry]
[JSTypeNative, ., OBJECT_TYPE]
[JSTypeNative]
[Collections, ., unmodifiableSet, (, elements, )]
[Collections]
[elements]
[elements, ., add, (, name, )]
[elements]
[name]
[defineDeclaredProperty, (, name, ,, elementsType, ,, definingNode, )]
[name]
[elementsType]
[definingNode]
[elementsType]
[super, ., testForEquality, (, that, )]
[super]
[that]
[result, !=, null]
[result]
[null]
[result]
[this, ., isEquivalentTo, (, that, ), ?, TRUE, :, FALSE]
[this, ., isEquivalentTo, (, that, )]
[this]
[that]
[TRUE]
[FALSE]
[that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ||, that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ), ||, JSType, ., isSubtypeHelper, (, this, ,, that, )]
[that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ||, that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), )]
[that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), )]
[that]
[getNativeType, (, JSTypeNative, ., OBJECT_TYPE, )]
[JSTypeNative, ., OBJECT_TYPE]
[JSTypeNative]
[that, ., isEquivalentTo, (, getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), )]
[that]
[getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, )]
[JSTypeNative, ., OBJECT_PROTOTYPE]
[JSTypeNative]
[JSType, ., isSubtypeHelper, (, this, ,, that, )]
[JSType]
[this]
[that]
[forAnnotations, ?, "Object", :, getReferenceName, (, )]
[forAnnotations]
["Object"]
[getReferenceName, (, )]
[elementsType, ., getDisplayName, (, )]
[elementsType]
[visitor, ., caseObjectType, (, this, )]
[visitor]
[this]
[visitor, ., caseObjectType, (, this, ,, that, )]
[visitor]
[this]
[that]
[null]
[false]
[true]
[true]
[elementsType]
[(, EnumElementType, ), elementsType, ., resolve, (, t, ,, scope, )]
[elementsType, ., resolve, (, t, ,, scope, )]
[elementsType]
[t]
[scope]
[super, ., resolveInternal, (, t, ,, scope, )]
[super]
[t]
[scope]
