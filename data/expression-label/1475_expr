[10]
[Logger, ., getLogger, (, DisambiguateProperties, ., class, ., getName, (, ), )]
[Logger]
[DisambiguateProperties, ., class, ., getName, (, )]
[DisambiguateProperties, ., class]
[DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,, "Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}", )]
[DiagnosticType]
["JSC_INVALIDATION"]
["Property disambiguator skipping all instances of property {0} ", +, "because of type {1} node {2}. {3}"]
["Property disambiguator skipping all instances of property {0} "]
["because of type {1} node {2}. {3}"]
[Sets, ., newHashSet, (, )]
[Sets]
[Sets, ., newHashSet, (, )]
[Sets]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., name]
[this]
[name]
[types, ==, null]
[types]
[null]
[types]
[new, StandardUnionFind, <, T, >, (, )]
[types]
[checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,, name, )]
[!, skipRenaming]
[skipRenaming]
["Attempt to record skipped property: %s"]
[name]
[typeSystem, ., isInvalidatingType, (, top, )]
[typeSystem]
[top]
[invalidate, (, )]
[false]
[typeSystem, ., isTypeToSkip, (, top, )]
[typeSystem]
[top]
[addTypeToSkip, (, top, )]
[top]
[relatedType, ==, null]
[relatedType]
[null]
[getTypes, (, ), ., add, (, top, )]
[getTypes, (, )]
[top]
[getTypes, (, ), ., union, (, top, ,, relatedType, )]
[getTypes, (, )]
[top]
[relatedType]
[typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, )]
[typeSystem]
[type]
[top]
[this]
[true]
[typeSystem, ., getTypesToSkipForType, (, type, )]
[typeSystem]
[type]
[typesToSkip, ., add, (, skipType, )]
[typesToSkip]
[skipType]
[getTypes, (, ), ., union, (, skipType, ,, type, )]
[getTypes, (, )]
[skipType]
[type]
[shouldRename, (, )]
[0]
[true]
[checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip.", )]
[++, count, <, 10]
[++, count]
[count]
[10]
["Stuck in loop expanding types to skip."]
[Sets, ., newHashSet, (, )]
[Sets]
[typesToSkip]
[rootTypesToSkip, ., add, (, types, ., find, (, subType, ), )]
[rootTypesToSkip]
[types, ., find, (, subType, )]
[types]
[subType]
[typesToSkip, ., addAll, (, rootTypesToSkip, )]
[typesToSkip]
[rootTypesToSkip]
[Sets, ., newHashSet, (, )]
[Sets]
[types, ., elements, (, )]
[types]
[allTypes, ., size, (, )]
[allTypes]
[allTypes]
[!, typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), )]
[!, typesToSkip, ., contains, (, subType, )]
[typesToSkip, ., contains, (, subType, )]
[typesToSkip]
[subType]
[typesToSkip, ., contains, (, types, ., find, (, subType, ), )]
[typesToSkip]
[types, ., find, (, subType, )]
[types]
[subType]
[newTypesToSkip, ., add, (, subType, )]
[newTypesToSkip]
[subType]
[newTypesToSkip]
[addTypeToSkip, (, newType, )]
[newType]
[types, ., elements, (, ), ., size, (, ), ==, originalTypesSize]
[types, ., elements, (, ), ., size, (, )]
[types, ., elements, (, )]
[types]
[originalTypesSize]
[!, skipRenaming, &&, types, !=, null, &&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1]
[!, skipRenaming, &&, types, !=, null]
[!, skipRenaming]
[skipRenaming]
[types, !=, null]
[types]
[null]
[types, ., allEquivalenceClasses, (, ), ., size, (, ), >, 1]
[types, ., allEquivalenceClasses, (, ), ., size, (, )]
[types, ., allEquivalenceClasses, (, )]
[types]
[1]
[!, skipRenaming, &&, !, typesToSkip, ., contains, (, type, )]
[!, skipRenaming]
[skipRenaming]
[!, typesToSkip, ., contains, (, type, )]
[typesToSkip, ., contains, (, type, )]
[typesToSkip]
[type]
[!, skipRenaming]
[skipRenaming]
[skipRenaming]
[true]
[types]
[null]
[changed]
[!, skipRenaming]
[skipRenaming]
[typeSystem, ., isInvalidatingType, (, type, )]
[typeSystem]
[type]
[invalidate, (, )]
[false]
[renameNodes, ., add, (, node, )]
[renameNodes]
[node]
[rootTypes, ., put, (, node, ,, type, )]
[rootTypes]
[node]
[type]
[true]
[Maps, ., newHashMap, (, )]
[Maps]
[new, DisambiguateProperties, <, JSType, >, (, compiler, ,, new, JSTypeSystem, (, compiler, ), ,, propertiesToErrorFor, )]
[compiler]
[new, JSTypeSystem, (, compiler, )]
[compiler]
[propertiesToErrorFor]
[new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,, new, ConcreteTypeSystem, (, tt, ,, compiler, ., getCodingConvention, (, ), ), ,, propertiesToErrorFor, )]
[compiler]
[new, ConcreteTypeSystem, (, tt, ,, compiler, ., getCodingConvention, (, ), )]
[tt]
[compiler, ., getCodingConvention, (, )]
[compiler]
[propertiesToErrorFor]
[this, ., compiler]
[this]
[compiler]
[this, ., typeSystem]
[this]
[typeSystem]
[this, ., propertiesToErrorFor]
[this]
[propertiesToErrorFor]
[!, this, ., propertiesToErrorFor, ., isEmpty, (, )]
[this, ., propertiesToErrorFor, ., isEmpty, (, )]
[this, ., propertiesToErrorFor]
[this]
[this, ., invalidationMap]
[this]
[LinkedHashMultimap, ., create, (, )]
[LinkedHashMultimap]
[this, ., invalidationMap]
[this]
[null]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[LifeCycleStage, ., NORMALIZED]
[LifeCycleStage]
[compiler, ., getTypeValidator, (, ), ., getMismatches, (, )]
[compiler, ., getTypeValidator, (, )]
[compiler]
[addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, )]
[mis, ., typeA]
[mis]
[mis, ., src]
[mis]
[addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, )]
[mis, ., typeB]
[mis]
[mis, ., src]
[mis]
[typeSystem, ., getRootScope, (, )]
[typeSystem]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, FindExternProperties, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindRenameableProperties, (, )]
[renameProperties, (, )]
[!, t, ., isObject, (, )]
[t, ., isObject, (, )]
[t]
[invalidationMap, !=, null]
[invalidationMap]
[null]
[invalidationMap, ., put, (, t, ,, error, )]
[invalidationMap]
[t]
[error]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[addInvalidatingType, (, alt, ,, error, )]
[alt]
[error]
[type, ., isEnumElementType, (, )]
[type]
[addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, )]
[type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[type, ., toMaybeEnumElementType, (, )]
[type]
[error]
[typeSystem, ., addInvalidatingType, (, type, )]
[typeSystem]
[type]
[recordInvalidationError, (, type, ,, error, )]
[type]
[error]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null]
[objType, !=, null]
[objType]
[null]
[objType, ., getImplicitPrototype, (, ), !=, null]
[objType, ., getImplicitPrototype, (, )]
[objType]
[null]
[typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), )]
[typeSystem]
[objType, ., getImplicitPrototype, (, )]
[objType]
[recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,, error, )]
[objType, ., getImplicitPrototype, (, )]
[objType]
[error]
[!, properties, ., containsKey, (, name, )]
[properties, ., containsKey, (, name, )]
[properties]
[name]
[properties, ., put, (, name, ,, new, Property, (, name, ), )]
[properties]
[name]
[new, Property, (, name, )]
[name]
[properties, ., get, (, name, )]
[properties]
[name]
[typeSystem, ., getTypeWithProperty, (, field, ,, type, )]
[typeSystem]
[field]
[type]
[new, Stack, <, StaticScope, <, T, >, >, (, )]
[true]
[t, ., inGlobalScope, (, )]
[t]
[scopes, ., push, (, typeSystem, ., getRootScope, (, ), )]
[scopes]
[typeSystem, ., getRootScope, (, )]
[typeSystem]
[scopes, ., push, (, typeSystem, ., getFunctionScope, (, t, ., getScopeRoot, (, ), ), )]
[scopes]
[typeSystem, ., getFunctionScope, (, t, ., getScopeRoot, (, ), )]
[typeSystem]
[t, ., getScopeRoot, (, )]
[t]
[scopes, ., pop, (, )]
[scopes]
[scopes, ., peek, (, )]
[scopes]
[n, ., isGetProp, (, )]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, field, )]
[typeSystem]
[getScope, (, )]
[n, ., getFirstChild, (, )]
[n]
[field]
[getProperty, (, field, )]
[field]
[typeSystem, ., isInvalidatingType, (, type, )]
[typeSystem]
[type]
[prop, ., invalidate, (, )]
[prop]
[prop, ., addTypeToSkip, (, type, )]
[prop]
[type]
[(, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null]
[(, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), )]
[type]
[typeSystem, ., getInstanceFromPrototype, (, type, )]
[typeSystem]
[type]
[null]
[prop, ., getTypes, (, ), ., add, (, type, )]
[prop, ., getTypes, (, )]
[prop]
[type]
[prop, ., typesToSkip, ., add, (, type, )]
[prop, ., typesToSkip]
[prop]
[type]
[n, ., isGetProp, (, )]
[n]
[handleGetProp, (, t, ,, n, )]
[t]
[n]
[n, ., isObjectLit, (, )]
[n]
[handleObjectLit, (, t, ,, n, )]
[t]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, name, )]
[typeSystem]
[getScope, (, )]
[n, ., getFirstChild, (, )]
[n]
[name]
[getProperty, (, name, )]
[name]
[!, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), )]
[prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), )]
[prop]
[n, ., getLastChild, (, )]
[n]
[processProperty, (, t, ,, prop, ,, type, ,, null, )]
[t]
[prop]
[type]
[null]
[propertiesToErrorFor, ., containsKey, (, name, )]
[propertiesToErrorFor]
[name]
[""]
[type, instanceof, JSType]
[type]
[(, JSType, ), type]
[type]
[jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, )]
[jsType, ., isAllType, (, )]
[jsType]
[jsType, ., isUnknownType, (, )]
[jsType]
[n, ., getFirstChild, (, ), ., isThis, (, )]
[n, ., getFirstChild, (, )]
[n]
[suggestion]
["The \"this\" object is unknown in the function,", +, "consider using @this"]
["The \"this\" object is unknown in the function,"]
["consider using @this"]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[suggestion]
["Consider casting ", +, qName, +, " if you know it's type."]
["Consider casting ", +, qName]
["Consider casting "]
[qName]
[" if you know it's type."]
[Lists, ., newArrayList, (, )]
[Lists]
[printErrorLocations, (, errors, ,, jsType, )]
[errors]
[jsType]
[!, errors, ., isEmpty, (, )]
[errors, ., isEmpty, (, )]
[errors]
[suggestion]
["Consider fixing errors for the following types:\n"]
[suggestion]
[Joiner, ., on, (, "\n", ), ., join, (, errors, )]
[Joiner, ., on, (, "\n", )]
[Joiner]
["\n"]
[errors]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, ), )]
[compiler]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, suggestion, )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[n]
[propertiesToErrorFor, ., get, (, name, )]
[propertiesToErrorFor]
[name]
[Warnings, ., INVALIDATION]
[Warnings]
[name]
[(, type, ==, null, ?, "null", :, type, ., toString, (, ), )]
[type, ==, null, ?, "null", :, type, ., toString, (, )]
[type, ==, null]
[type]
[null]
["null"]
[type, ., toString, (, )]
[type]
[n, ., toString, (, )]
[n]
[suggestion]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child, ., getString, (, )]
[child]
[typeSystem, ., getType, (, getScope, (, ), ,, n, ,, name, )]
[typeSystem]
[getScope, (, )]
[n]
[name]
[getProperty, (, name, )]
[name]
[!, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), )]
[prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), )]
[prop]
[child]
[processProperty, (, t, ,, prop, ,, type, ,, null, )]
[t]
[prop]
[type]
[null]
[propertiesToErrorFor, ., containsKey, (, name, )]
[propertiesToErrorFor]
[name]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), )]
[compiler]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[child]
[propertiesToErrorFor, ., get, (, name, )]
[propertiesToErrorFor]
[name]
[Warnings, ., INVALIDATION]
[Warnings]
[name]
[(, type, ==, null, ?, "null", :, type, ., toString, (, ), )]
[type, ==, null, ?, "null", :, type, ., toString, (, )]
[type, ==, null]
[type]
[null]
["null"]
[type, ., toString, (, )]
[type]
[n, ., toString, (, )]
[n]
[""]
[child]
[child, ., getNext, (, )]
[child]
[!, t, ., isObject, (, ), ||, t, ., isAllType, (, )]
[!, t, ., isObject, (, )]
[t, ., isObject, (, )]
[t]
[t, ., isAllType, (, )]
[t]
[t, ., isUnionType, (, )]
[t]
[t, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[t, ., toMaybeUnionType, (, )]
[t]
[printErrorLocations, (, errors, ,, alt, )]
[errors]
[alt]
[invalidationMap, ., get, (, t, )]
[invalidationMap]
[t]
[errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY]
[errors, ., size, (, )]
[errors]
[MAX_INVALDIATION_WARNINGS_PER_PROPERTY]
[errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +, error, ., lineNumber, )]
[errors]
[t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +, error, ., lineNumber]
[t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":"]
[t, ., toString, (, ), +, " at ", +, error, ., sourceName]
[t, ., toString, (, ), +, " at "]
[t, ., toString, (, )]
[t]
[" at "]
[error, ., sourceName]
[error]
[":"]
[error, ., lineNumber]
[error]
[type]
[typeSystem, ., restrictByNotNullOrUndefined, (, type, )]
[typeSystem]
[type]
[prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, )]
[prop, ., skipRenaming]
[prop]
[typeSystem, ., isInvalidatingType, (, type, )]
[typeSystem]
[type]
[null]
[typeSystem, ., getTypeAlternatives, (, type, )]
[typeSystem]
[type]
[alternatives, !=, null]
[alternatives]
[null]
[relatedType]
[alternatives]
[processProperty, (, t, ,, prop, ,, subType, ,, firstType, )]
[t]
[prop]
[subType]
[firstType]
[lastType, !=, null]
[lastType]
[null]
[firstType]
[firstType, ==, null, ?, lastType, :, firstType]
[firstType, ==, null]
[firstType]
[null]
[lastType]
[firstType]
[firstType]
[typeSystem, ., getTypeWithProperty, (, prop, ., name, ,, type, )]
[typeSystem]
[prop, ., name]
[prop]
[type]
[typeSystem, ., isInvalidatingType, (, topType, )]
[typeSystem]
[topType]
[null]
[prop, ., addType, (, type, ,, topType, ,, relatedType, )]
[prop]
[type]
[topType]
[relatedType]
[topType]
[0]
[0]
[0]
[0]
[0]
[properties, ., values, (, )]
[properties]
[prop, ., shouldRename, (, )]
[prop]
[buildPropNames, (, prop, ., getTypes, (, ), ,, prop, ., name, )]
[prop, ., getTypes, (, )]
[prop]
[prop, ., name]
[prop]
[++, propsRenamed]
[propsRenamed]
[prop, ., expandTypesToSkip, (, )]
[prop]
[prop, ., getTypes, (, )]
[prop]
[prop, ., renameNodes]
[prop]
[prop, ., rootTypes, ., get, (, node, )]
[prop, ., rootTypes]
[prop]
[node]
[prop, ., shouldRename, (, rootType, )]
[prop]
[rootType]
[propNames, ., get, (, rootType, )]
[propNames]
[rootType]
[node, ., setString, (, newName, )]
[node]
[newName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[++, instancesRenamed]
[instancesRenamed]
[++, instancesSkipped]
[instancesSkipped]
[prop, ., skipRenaming]
[prop]
[++, propsSkipped]
[propsSkipped]
[++, singleTypeProps]
[singleTypeProps]
[logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", )]
[logger]
["Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties."]
["Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed]
["Renamed ", +, instancesRenamed, +, " instances of "]
["Renamed ", +, instancesRenamed]
["Renamed "]
[instancesRenamed]
[" instances of "]
[propsRenamed]
[" properties."]
[logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type.", )]
[logger]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +, " properties that were referenced from only one type."]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and "]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties "]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped]
["Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, "]
["Skipped renaming ", +, instancesSkipped, +, " invalidated "]
["Skipped renaming ", +, instancesSkipped]
["Skipped renaming "]
[instancesSkipped]
[" invalidated "]
["properties, "]
[propsSkipped]
[" instances of properties "]
["that were skipped for specific types and "]
[singleTypeProps]
[" properties that were referenced from only one type."]
[Maps, ., newHashMap, (, )]
[Maps]
[types, ., allEquivalenceClasses, (, )]
[types]
[checkState, (, !, set, ., isEmpty, (, ), )]
[!, set, ., isEmpty, (, )]
[set, ., isEmpty, (, )]
[set]
[null]
[set]
[typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0]
[typeName, ==, null]
[typeName]
[null]
[type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0]
[type, ., toString, (, ), ., compareTo, (, typeName, )]
[type, ., toString, (, )]
[type]
[typeName]
[0]
[typeName]
[type, ., toString, (, )]
[type]
["{...}", ., equals, (, typeName, )]
["{...}"]
[typeName]
[newName]
[name]
[newName]
[typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name]
[typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$"]
[typeName, ., replaceAll, (, "[^\\w$]", ,, "_", )]
[typeName]
["[^\\w$]"]
["_"]
["$"]
[name]
[set]
[names, ., put, (, type, ,, newName, )]
[names]
[type]
[newName]
[names]
[HashMultimap, ., create, (, )]
[HashMultimap]
[properties, ., entrySet, (, )]
[properties]
[entry, ., getValue, (, )]
[entry]
[!, prop, ., skipRenaming]
[prop, ., skipRenaming]
[prop]
[prop, ., getTypes, (, ), ., allEquivalenceClasses, (, )]
[prop, ., getTypes, (, )]
[prop]
[!, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), )]
[!, c, ., isEmpty, (, )]
[c, ., isEmpty, (, )]
[c]
[!, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), )]
[prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), )]
[prop, ., typesToSkip]
[prop]
[c, ., iterator, (, ), ., next, (, )]
[c, ., iterator, (, )]
[c]
[ret, ., put, (, entry, ., getKey, (, ), ,, c, )]
[ret]
[entry, ., getKey, (, )]
[entry]
[c]
[ret]
[registry]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[invalidatingTypes]
[Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), )]
[Sets]
[registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, )]
[registry]
[JSTypeNative, ., ALL_TYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, )]
[registry]
[JSTypeNative, ., NO_OBJECT_TYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[registry]
[JSTypeNative, ., NO_TYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, )]
[registry]
[JSTypeNative, ., FUNCTION_PROTOTYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, )]
[registry]
[JSTypeNative, ., FUNCTION_INSTANCE_TYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, )]
[registry]
[JSTypeNative, ., OBJECT_PROTOTYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, )]
[registry]
[JSTypeNative, ., TOP_LEVEL_PROTOTYPE]
[JSTypeNative]
[registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[registry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[checkState, (, !, type, ., isUnionType, (, ), )]
[!, type, ., isUnionType, (, )]
[type, ., isUnionType, (, )]
[type]
[invalidatingTypes, ., add, (, type, )]
[invalidatingTypes]
[type]
[null]
[null]
[node, ., getJSType, (, ), ==, null]
[node, ., getJSType, (, )]
[node]
[null]
[registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[registry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[node, ., getJSType, (, )]
[node]
[type, ==, null, ||, invalidatingTypes, ., contains, (, type, ), ||, type, ., isUnknownType, (, )]
[type, ==, null, ||, invalidatingTypes, ., contains, (, type, )]
[type, ==, null]
[type]
[null]
[invalidatingTypes, ., contains, (, type, )]
[invalidatingTypes]
[type]
[type, ., isUnknownType, (, )]
[type]
[true]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null, &&, !, objType, ., hasReferenceName, (, )]
[objType, !=, null]
[objType]
[null]
[!, objType, ., hasReferenceName, (, )]
[objType, ., hasReferenceName, (, )]
[objType]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[Sets, ., newHashSet, (, type, )]
[Sets]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), )]
[types]
[getTypesToSkipForTypeNonUnion, (, type, )]
[type]
[ImmutableSet, ., copyOf, (, types, )]
[ImmutableSet]
[types]
[type, ., isEnumElementType, (, )]
[type]
[getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), )]
[type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[type, ., toMaybeEnumElementType, (, )]
[type]
[ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (, type, ), )]
[ImmutableSet]
[getTypesToSkipForTypeNonUnion, (, type, )]
[type]
[Sets, ., newHashSet, (, )]
[Sets]
[type]
[skipType, !=, null]
[skipType]
[null]
[types, ., add, (, skipType, )]
[types]
[skipType]
[skipType, ., toObjectType, (, )]
[skipType]
[objSkipType, !=, null]
[objSkipType]
[null]
[skipType]
[objSkipType, ., getImplicitPrototype, (, )]
[objSkipType]
[types]
[type, ., isEnumType, (, ), ||, (, type, ., autoboxesTo, (, ), !=, null, )]
[type, ., isEnumType, (, )]
[type]
[(, type, ., autoboxesTo, (, ), !=, null, )]
[type, ., autoboxesTo, (, ), !=, null]
[type, ., autoboxesTo, (, )]
[type]
[null]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[type, ., toObjectType, (, )]
[type]
[objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, )]
[objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null]
[objType, !=, null]
[objType]
[null]
[objType, ., getConstructor, (, ), !=, null]
[objType, ., getConstructor, (, )]
[objType]
[null]
[objType, ., getConstructor, (, ), ., isInterface, (, )]
[objType, ., getConstructor, (, )]
[objType]
[Lists, ., newArrayList, (, )]
[Lists]
[registry, ., getDirectImplementors, (, objType, )]
[registry]
[objType]
[list, ., add, (, impl, ., getInstanceType, (, ), )]
[list]
[impl, ., getInstanceType, (, )]
[impl]
[list]
[null]
[type, ==, null]
[type]
[null]
[null]
[type, ., isEnumElementType, (, )]
[type]
[getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), )]
[field]
[type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[type, ., toMaybeEnumElementType, (, )]
[type]
[!, (, type, instanceof, ObjectType, )]
[(, type, instanceof, ObjectType, )]
[type, instanceof, ObjectType]
[type]
[type, ., autoboxesTo, (, ), !=, null]
[type, ., autoboxesTo, (, )]
[type]
[null]
[type]
[type, ., autoboxesTo, (, )]
[type]
[null]
["prototype", ., equals, (, field, )]
["prototype"]
[field]
[null]
[null]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, )]
[objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null]
[objType, !=, null]
[objType]
[null]
[objType, ., getConstructor, (, ), !=, null]
[objType, ., getConstructor, (, )]
[objType]
[null]
[objType, ., getConstructor, (, ), ., isInterface, (, )]
[objType, ., getConstructor, (, )]
[objType]
[FunctionType, ., getTopDefiningInterface, (, objType, ,, field, )]
[FunctionType]
[objType]
[field]
[topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null]
[topInterface, !=, null]
[topInterface]
[null]
[topInterface, ., getConstructor, (, ), !=, null]
[topInterface, ., getConstructor, (, )]
[topInterface]
[null]
[foundType]
[topInterface, ., getConstructor, (, ), ., getPrototype, (, )]
[topInterface, ., getConstructor, (, )]
[topInterface]
[objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType]
[objType, !=, null]
[objType]
[null]
[objType, ., getImplicitPrototype, (, ), !=, objType]
[objType, ., getImplicitPrototype, (, )]
[objType]
[objType]
[objType, ., hasOwnProperty, (, field, )]
[objType]
[field]
[foundType]
[objType]
[objType]
[objType, ., getImplicitPrototype, (, )]
[objType]
[foundType, ==, null]
[foundType]
[null]
[ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), )]
[ObjectType]
[registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, )]
[registry]
[type]
[field]
[maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, )]
[maybeType, !=, null]
[maybeType]
[null]
[maybeType, ., hasOwnProperty, (, field, )]
[maybeType]
[field]
[foundType]
[maybeType]
[foundType]
[type, ., isFunctionPrototypeType, (, )]
[type]
[(, ObjectType, ), type]
[type]
[prototype, ., getOwnerFunction, (, )]
[prototype]
[owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, )]
[owner, ., isConstructor, (, )]
[owner]
[owner, ., isInterface, (, )]
[owner]
[prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, )]
[prototype, ., getOwnerFunction, (, )]
[prototype]
[null]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null]
[objType]
[null]
[objType, ., isFunctionType, (, )]
[objType]
[constructor]
[objType, ., toMaybeFunctionType, (, )]
[objType]
[objType, ., isFunctionPrototypeType, (, )]
[objType]
[constructor]
[objType, ., getOwnerFunction, (, )]
[objType]
[constructor]
[objType, ., getConstructor, (, )]
[objType]
[constructor, !=, null]
[constructor]
[null]
[constructor, ., getImplementedInterfaces, (, )]
[constructor]
[getTypeWithProperty, (, p, ., name, ,, itype, )]
[p, ., name]
[p]
[itype]
[top, !=, null]
[top]
[null]
[p, ., addType, (, itype, ,, top, ,, relatedType, )]
[p]
[itype]
[top]
[relatedType]
[recordInterfaces, (, itype, ,, relatedType, ,, p, )]
[itype]
[relatedType]
[p]
[p, ., skipRenaming]
[p]
[constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, )]
[constructor, ., isInterface, (, )]
[constructor]
[constructor, ., isConstructor, (, )]
[constructor]
[constructor]
[constructor, ., getSuperClassConstructor, (, )]
[constructor]
[constructor]
[null]
[Sets, ., newHashSet, (, )]
[Sets]
[new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }]
[{, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }]
[JSTypeNative, ., BOOLEAN_OBJECT_TYPE]
[JSTypeNative]
[JSTypeNative, ., NUMBER_OBJECT_TYPE]
[JSTypeNative]
[JSTypeNative, ., STRING_OBJECT_TYPE]
[JSTypeNative]
[this, ., tt]
[this]
[tt]
[this, ., codingConvention]
[this]
[convention]
[checkState, (, !, type, ., isUnionType, (, ), )]
[!, type, ., isUnionType, (, )]
[type, ., isUnionType, (, )]
[type]
[invalidatingTypes, ., add, (, type, )]
[invalidatingTypes]
[type]
[tt, ., getTopScope, (, )]
[tt]
[tt, ., getConcreteFunction, (, decl, )]
[tt]
[decl]
[(, func, !=, null, ), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, ), null]
[(, func, !=, null, )]
[func, !=, null]
[func]
[null]
[func, ., getScope, (, )]
[func]
[(, StaticScope, <, ConcreteType, >, ), null]
[null]
[scope, !=, null]
[scope]
[null]
[tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, )]
[tt]
[(, TightenTypes, ., ConcreteScope, ), scope]
[scope]
[node]
[maybeAddAutoboxes, (, c, ,, node, ,, prop, )]
[c]
[node]
[prop]
[null]
[node, ., getJSType, (, )]
[node]
[jsType, ==, null]
[jsType]
[null]
[cType]
[jsType, ., isUnknownType, (, )]
[jsType]
[nativeTypes]
[tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), )]
[tt]
[tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, )]
[tt, ., getTypeRegistry, (, )]
[tt]
[nativeType]
[concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, )]
[concrete, !=, null]
[concrete]
[null]
[!, concrete, ., getPropertyType, (, prop, ), ., isNone, (, )]
[concrete, ., getPropertyType, (, prop, ), ., isNone, (, )]
[concrete, ., getPropertyType, (, prop, )]
[concrete]
[prop]
[cType]
[cType, ., unionWith, (, concrete, )]
[cType]
[concrete]
[cType]
[maybeAddAutoboxes, (, cType, ,, jsType, ,, prop, )]
[cType]
[jsType]
[prop]
[jsType]
[jsType, ., restrictByNotNullOrUndefined, (, )]
[jsType]
[jsType, ., isUnionType, (, )]
[jsType]
[jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[jsType, ., toMaybeUnionType, (, )]
[jsType]
[cType]
[maybeAddAutoboxes, (, cType, ,, alt, ,, prop, )]
[cType]
[alt]
[prop]
[cType]
[jsType, ., isEnumElementType, (, )]
[jsType]
[maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, )]
[cType]
[jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, )]
[jsType, ., toMaybeEnumElementType, (, )]
[jsType]
[prop]
[jsType, ., autoboxesTo, (, ), !=, null]
[jsType, ., autoboxesTo, (, )]
[jsType]
[null]
[jsType, ., autoboxesTo, (, )]
[jsType]
[cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), )]
[cType]
[tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, )]
[tt]
[(, ObjectType, ), autoboxed]
[autoboxed]
[jsType, ., unboxesTo, (, ), !=, null]
[jsType, ., unboxesTo, (, )]
[jsType]
[null]
[cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), )]
[cType]
[tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, )]
[tt]
[(, ObjectType, ), jsType]
[jsType]
[cType]
[(, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, ), )]
[(, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, )]
[(, type, ==, null, ), ||, type, ., isAll, (, )]
[(, type, ==, null, )]
[type, ==, null]
[type]
[null]
[type, ., isAll, (, )]
[type]
[type, ., isFunction, (, )]
[type]
[(, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, ), )]
[type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, )]
[type, ., isInstance, (, )]
[type]
[invalidatingTypes, ., contains, (, type, ., toInstance, (, ), ., instanceType, )]
[invalidatingTypes]
[type, ., toInstance, (, ), ., instanceType]
[type, ., toInstance, (, )]
[type]
[ImmutableSet, ., of, (, type, )]
[ImmutableSet]
[type]
[type, ., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), )]
[type, ., isInstance, (, )]
[type]
[!, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), )]
[(, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, ), )]
[type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||, type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, )]
[type, ., toInstance, (, ), ., isFunctionPrototype, (, )]
[type, ., toInstance, (, )]
[type]
[type, ., toInstance, (, ), ., instanceType, ., isInstanceType, (, )]
[type, ., toInstance, (, ), ., instanceType]
[type, ., toInstance, (, )]
[type]
[type]
[type, ., isUnion, (, )]
[type]
[(, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, )]
[(, (, ConcreteUnionType, ), type, )]
[(, ConcreteUnionType, ), type]
[type]
[null]
[type, ., isInstance, (, )]
[type]
[(, ConcreteInstanceType, ), type]
[type]
[instanceType, ., getInstanceTypeWithProperty, (, field, )]
[instanceType]
[field]
[type, ., isFunction, (, )]
[type]
["prototype", ., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (, field, )]
["prototype", ., equals, (, field, )]
["prototype"]
[field]
[codingConvention, ., isSuperClassReference, (, field, )]
[codingConvention]
[field]
[type]
[type, ., isNone, (, )]
[type]
[new, ConcreteUniqueType, (, ++, nextUniqueId, )]
[++, nextUniqueId]
[nextUniqueId]
[type, ., isUnion, (, )]
[type]
[(, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, )]
[(, (, ConcreteUnionType, ), type, )]
[(, ConcreteUnionType, ), type]
[type]
[getTypeWithProperty, (, field, ,, t, )]
[field]
[t]
[ret, !=, null]
[ret]
[null]
[ret]
[null]
[type, ., isInstance, (, )]
[type]
[(, ConcreteInstanceType, ), type]
[type]
[instanceType, ., isFunctionPrototype, (, )]
[instanceType]
[instanceType, ., getConstructorType, (, ), ., getInstanceType, (, )]
[instanceType, ., getConstructorType, (, )]
[instanceType]
[null]
