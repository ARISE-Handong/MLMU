[new, Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, ), ;, }, }]
[p, ., typeA, ==, null, ||, p, ., typeB, ==, null]
[p, ., typeA, ==, null]
[p, ., typeA]
[p]
[null]
[p, ., typeB, ==, null]
[p, ., typeB]
[p]
[null]
[null]
[p, ., typeA, ., getTypesUnderEquality, (, p, ., typeB, )]
[p, ., typeA]
[p]
[p, ., typeB]
[p]
[new, Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, ), ;, }, }]
[p, ., typeA, ==, null, ||, p, ., typeB, ==, null]
[p, ., typeA, ==, null]
[p, ., typeA]
[p]
[null]
[p, ., typeB, ==, null]
[p, ., typeB]
[p]
[null]
[null]
[p, ., typeA, ., getTypesUnderInequality, (, p, ., typeB, )]
[p, ., typeA]
[p]
[p, ., typeB]
[p]
[new, Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, ), ;, }, }]
[p, ., typeA, ==, null, ||, p, ., typeB, ==, null]
[p, ., typeA, ==, null]
[p, ., typeA]
[p]
[null]
[p, ., typeB, ==, null]
[p, ., typeB]
[p]
[null]
[null]
[p, ., typeA, ., getTypesUnderShallowEquality, (, p, ., typeB, )]
[p, ., typeA]
[p]
[p, ., typeB]
[p]
[new, Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, if, (, p, ., typeA, ==, null, ||, p, ., typeB, ==, null, ), {, return, null, ;, }, return, p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, ), ;, }, }]
[p, ., typeA, ==, null, ||, p, ., typeB, ==, null]
[p, ., typeA, ==, null]
[p, ., typeA]
[p]
[null]
[p, ., typeB, ==, null]
[p, ., typeB]
[p]
[null]
[null]
[p, ., typeA, ., getTypesUnderShallowInequality, (, p, ., typeB, )]
[p, ., typeA]
[p]
[p, ., typeB]
[p]
[new, Function, <, TypePair, ,, TypePair, >, (, ), {, @, Override, public, TypePair, apply, (, TypePair, p, ), {, return, new, TypePair, (, getRestrictedWithoutUndefined, (, p, ., typeA, ), ,, getRestrictedWithoutUndefined, (, p, ., typeB, ), ), ;, }, }]
[new, TypePair, (, getRestrictedWithoutUndefined, (, p, ., typeA, ), ,, getRestrictedWithoutUndefined, (, p, ., typeB, ), )]
[getRestrictedWithoutUndefined, (, p, ., typeA, )]
[p, ., typeA]
[p]
[getRestrictedWithoutUndefined, (, p, ., typeB, )]
[p, ., typeB]
[p]
[convention]
[typeRegistry]
[condition, ., getType, (, )]
[condition]
[operatorToken]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., CASE]
[Token]
[operatorToken, ==, Token, ., CASE]
[operatorToken]
[Token, ., CASE]
[Token]
[left]
[condition, ., getParent, (, ), ., getFirstChild, (, )]
[condition, ., getParent, (, )]
[condition]
[right]
[condition, ., getFirstChild, (, )]
[condition]
[left]
[condition, ., getFirstChild, (, )]
[condition]
[right]
[condition, ., getLastChild, (, )]
[condition]
[null]
[null]
[left, ., isTypeOf, (, ), &&, right, ., isString, (, )]
[left, ., isTypeOf, (, )]
[left]
[right, ., isString, (, )]
[right]
[typeOfNode]
[left]
[stringNode]
[right]
[right, ., isTypeOf, (, ), &&, left, ., isString, (, )]
[right, ., isTypeOf, (, )]
[right]
[left, ., isString, (, )]
[left]
[typeOfNode]
[right]
[stringNode]
[left]
[typeOfNode, !=, null, &&, stringNode, !=, null]
[typeOfNode, !=, null]
[typeOfNode]
[null]
[stringNode, !=, null]
[stringNode]
[null]
[typeOfNode, ., getFirstChild, (, )]
[typeOfNode]
[getTypeIfRefinable, (, operandNode, ,, blindScope, )]
[operandNode]
[blindScope]
[operandType, !=, null]
[operandType]
[null]
[operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ, ||, operatorToken, ==, Token, ., CASE]
[operatorToken, ==, Token, ., EQ, ||, operatorToken, ==, Token, ., SHEQ]
[operatorToken, ==, Token, ., EQ]
[operatorToken]
[Token, ., EQ]
[Token]
[operatorToken, ==, Token, ., SHEQ]
[operatorToken]
[Token, ., SHEQ]
[Token]
[operatorToken, ==, Token, ., CASE]
[operatorToken]
[Token, ., CASE]
[Token]
[!, outcome]
[outcome]
[resultEqualsValue]
[!, resultEqualsValue]
[resultEqualsValue]
[caseTypeOf, (, operandNode, ,, operandType, ,, stringNode, ., getString, (, ), ,, resultEqualsValue, ,, blindScope, )]
[operandNode]
[operandType]
[stringNode, ., getString, (, )]
[stringNode]
[resultEqualsValue]
[blindScope]
[operatorToken]
[Token, ., AND]
[Token]
[outcome]
[caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[true]
[caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, true, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[true]
[Token, ., OR]
[Token]
[!, outcome]
[outcome]
[caseAndOrNotShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[false]
[caseAndOrMaybeShortCircuiting, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, false, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[false]
[Token, ., EQ]
[Token]
[outcome]
[caseEquality, (, condition, ,, blindScope, ,, EQ, )]
[condition]
[blindScope]
[EQ]
[caseEquality, (, condition, ,, blindScope, ,, NE, )]
[condition]
[blindScope]
[NE]
[Token, ., NE]
[Token]
[outcome]
[caseEquality, (, condition, ,, blindScope, ,, NE, )]
[condition]
[blindScope]
[NE]
[caseEquality, (, condition, ,, blindScope, ,, EQ, )]
[condition]
[blindScope]
[EQ]
[Token, ., SHEQ]
[Token]
[outcome]
[caseEquality, (, condition, ,, blindScope, ,, SHEQ, )]
[condition]
[blindScope]
[SHEQ]
[caseEquality, (, condition, ,, blindScope, ,, SHNE, )]
[condition]
[blindScope]
[SHNE]
[Token, ., SHNE]
[Token]
[outcome]
[caseEquality, (, condition, ,, blindScope, ,, SHNE, )]
[condition]
[blindScope]
[SHNE]
[caseEquality, (, condition, ,, blindScope, ,, SHEQ, )]
[condition]
[blindScope]
[SHEQ]
[Token, ., NAME]
[Token]
[Token, ., GETPROP]
[Token]
[caseNameOrGetProp, (, condition, ,, blindScope, ,, outcome, )]
[condition]
[blindScope]
[outcome]
[Token, ., ASSIGN]
[Token]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, ), ,, outcome, )]
[condition, ., getFirstChild, (, )]
[condition]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ., getNext, (, ), ,, blindScope, ,, outcome, )]
[condition, ., getFirstChild, (, ), ., getNext, (, )]
[condition, ., getFirstChild, (, )]
[condition]
[blindScope]
[outcome]
[outcome]
[Token, ., NOT]
[Token]
[firstPreciserScopeKnowingConditionOutcome, (, condition, ., getFirstChild, (, ), ,, blindScope, ,, !, outcome, )]
[condition, ., getFirstChild, (, )]
[condition]
[blindScope]
[!, outcome]
[outcome]
[Token, ., LE]
[Token]
[Token, ., LT]
[Token]
[Token, ., GE]
[Token]
[Token, ., GT]
[Token]
[outcome]
[caseEquality, (, condition, ,, blindScope, ,, INEQ, )]
[condition]
[blindScope]
[INEQ]
[Token, ., INSTANCEOF]
[Token]
[caseInstanceOf, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, outcome, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[outcome]
[Token, ., IN]
[Token]
[outcome, &&, condition, ., getFirstChild, (, ), ., isString, (, )]
[outcome]
[condition, ., getFirstChild, (, ), ., isString, (, )]
[condition, ., getFirstChild, (, )]
[condition]
[caseIn, (, condition, ., getLastChild, (, ), ,, condition, ., getFirstChild, (, ), ., getString, (, ), ,, blindScope, )]
[condition, ., getLastChild, (, )]
[condition]
[condition, ., getFirstChild, (, ), ., getString, (, )]
[condition, ., getFirstChild, (, )]
[condition]
[blindScope]
[Token, ., CASE]
[Token]
[condition, ., getParent, (, ), ., getFirstChild, (, )]
[condition, ., getParent, (, )]
[condition]
[condition, ., getFirstChild, (, )]
[condition]
[outcome]
[caseEquality, (, left, ,, right, ,, blindScope, ,, SHEQ, )]
[left]
[right]
[blindScope]
[SHEQ]
[caseEquality, (, left, ,, right, ,, blindScope, ,, SHNE, )]
[left]
[right]
[blindScope]
[SHNE]
[nextPreciserScopeKnowingConditionOutcome, (, condition, ,, blindScope, ,, outcome, )]
[condition]
[blindScope]
[outcome]
[caseEquality, (, condition, ., getFirstChild, (, ), ,, condition, ., getLastChild, (, ), ,, blindScope, ,, merging, )]
[condition, ., getFirstChild, (, )]
[condition]
[condition, ., getLastChild, (, )]
[condition]
[blindScope]
[merging]
[getTypeIfRefinable, (, left, ,, blindScope, )]
[left]
[blindScope]
[leftType, !=, null]
[leftType]
[null]
[leftIsRefineable]
[true]
[leftIsRefineable]
[false]
[leftType]
[left, ., getJSType, (, )]
[left]
[getTypeIfRefinable, (, right, ,, blindScope, )]
[right]
[blindScope]
[rightType, !=, null]
[rightType]
[null]
[rightIsRefineable]
[true]
[rightIsRefineable]
[false]
[rightType]
[right, ., getJSType, (, )]
[right]
[merging, ., apply, (, new, TypePair, (, leftType, ,, rightType, ), )]
[merging]
[new, TypePair, (, leftType, ,, rightType, )]
[leftType]
[rightType]
[merged, !=, null]
[merged]
[null]
[maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, merged, ., typeA, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, merged, ., typeB, :, null, )]
[blindScope]
[left]
[leftType]
[leftIsRefineable, ?, merged, ., typeA, :, null]
[leftIsRefineable]
[merged, ., typeA]
[merged]
[null]
[right]
[rightType]
[rightIsRefineable, ?, merged, ., typeB, :, null]
[rightIsRefineable]
[merged, ., typeB]
[merged]
[null]
[blindScope]
[getTypeIfRefinable, (, left, ,, blindScope, )]
[left]
[blindScope]
[leftType, !=, null]
[leftType]
[null]
[leftIsRefineable]
[true]
[leftIsRefineable]
[false]
[leftType]
[left, ., getJSType, (, )]
[left]
[blindScope]
[firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, )]
[left]
[blindScope]
[condition]
[(, leftType, ==, null, ), ?, null, :, leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, )]
[(, leftType, ==, null, )]
[leftType, ==, null]
[leftType]
[null]
[null]
[leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, )]
[leftType]
[condition]
[restrictedLeftType, ==, null]
[restrictedLeftType]
[null]
[firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, )]
[right]
[blindScope]
[condition]
[getTypeIfRefinable, (, right, ,, blindScope, )]
[right]
[blindScope]
[rightType, !=, null]
[rightType]
[null]
[rightIsRefineable]
[true]
[rightIsRefineable]
[false]
[rightType]
[right, ., getJSType, (, )]
[right]
[blindScope]
[firstPreciserScopeKnowingConditionOutcome, (, right, ,, blindScope, ,, condition, )]
[right]
[blindScope]
[condition]
[condition]
[(, rightType, ==, null, ), ?, null, :, rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, )]
[(, rightType, ==, null, )]
[rightType, ==, null]
[rightType]
[null]
[null]
[rightType, ., getRestrictedTypeGivenToBooleanOutcome, (, condition, )]
[rightType]
[condition]
[maybeRestrictTwoNames, (, blindScope, ,, left, ,, leftType, ,, leftIsRefineable, ?, restrictedLeftType, :, null, ,, right, ,, rightType, ,, rightIsRefineable, ?, restrictedRightType, :, null, )]
[blindScope]
[left]
[leftType]
[leftIsRefineable, ?, restrictedLeftType, :, null]
[leftIsRefineable]
[restrictedLeftType]
[null]
[right]
[rightType]
[rightIsRefineable, ?, restrictedRightType, :, null]
[rightIsRefineable]
[restrictedRightType]
[null]
[blindScope]
[firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, !, condition, )]
[left]
[blindScope]
[!, condition]
[condition]
[leftScope, ., findUniqueRefinedSlot, (, blindScope, )]
[leftScope]
[blindScope]
[leftVar, ==, null]
[leftVar]
[null]
[blindScope]
[firstPreciserScopeKnowingConditionOutcome, (, left, ,, blindScope, ,, condition, )]
[left]
[blindScope]
[condition]
[rightScope]
[firstPreciserScopeKnowingConditionOutcome, (, right, ,, rightScope, ,, !, condition, )]
[right]
[rightScope]
[!, condition]
[condition]
[rightScope, ., findUniqueRefinedSlot, (, blindScope, )]
[rightScope]
[blindScope]
[rightVar, ==, null, ||, !, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), )]
[rightVar, ==, null]
[rightVar]
[null]
[!, leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), )]
[leftVar, ., getName, (, ), ., equals, (, rightVar, ., getName, (, ), )]
[leftVar, ., getName, (, )]
[leftVar]
[rightVar, ., getName, (, )]
[rightVar]
[blindScope]
[leftVar, ., getType, (, ), ., getLeastSupertype, (, rightVar, ., getType, (, ), )]
[leftVar, ., getType, (, )]
[leftVar]
[rightVar, ., getType, (, )]
[rightVar]
[blindScope, ., createChildFlowScope, (, )]
[blindScope]
[informed, ., inferSlotType, (, leftVar, ., getName, (, ), ,, type, )]
[informed]
[leftVar, ., getName, (, )]
[leftVar]
[type]
[informed]
[restrictedType, !=, null, &&, restrictedType, !=, originalType]
[restrictedType, !=, null]
[restrictedType]
[null]
[restrictedType, !=, originalType]
[restrictedType]
[originalType]
[blindScope, ., createChildFlowScope, (, )]
[blindScope]
[declareNameInScope, (, informed, ,, node, ,, restrictedType, )]
[informed]
[node]
[restrictedType]
[informed]
[blindScope]
[restrictedLeftType, !=, null, &&, restrictedLeftType, !=, originalLeftType]
[restrictedLeftType, !=, null]
[restrictedLeftType]
[null]
[restrictedLeftType, !=, originalLeftType]
[restrictedLeftType]
[originalLeftType]
[restrictedRightType, !=, null, &&, restrictedRightType, !=, originalRightType]
[restrictedRightType, !=, null]
[restrictedRightType]
[null]
[restrictedRightType, !=, originalRightType]
[restrictedRightType]
[originalRightType]
[shouldRefineLeft, ||, shouldRefineRight]
[shouldRefineLeft]
[shouldRefineRight]
[blindScope, ., createChildFlowScope, (, )]
[blindScope]
[shouldRefineLeft]
[declareNameInScope, (, informed, ,, left, ,, restrictedLeftType, )]
[informed]
[left]
[restrictedLeftType]
[shouldRefineRight]
[declareNameInScope, (, informed, ,, right, ,, restrictedRightType, )]
[informed]
[right]
[restrictedRightType]
[informed]
[blindScope]
[getTypeIfRefinable, (, name, ,, blindScope, )]
[name]
[blindScope]
[type, !=, null]
[type]
[null]
[maybeRestrictName, (, blindScope, ,, name, ,, type, ,, type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, ), )]
[blindScope]
[name]
[type]
[type, ., getRestrictedTypeGivenToBooleanOutcome, (, outcome, )]
[type]
[outcome]
[blindScope]
[maybeRestrictName, (, blindScope, ,, node, ,, type, ,, getRestrictedByTypeOfResult, (, type, ,, value, ,, resultEqualsValue, ), )]
[blindScope]
[node]
[type]
[getRestrictedByTypeOfResult, (, type, ,, value, ,, resultEqualsValue, )]
[type]
[value]
[resultEqualsValue]
[getTypeIfRefinable, (, left, ,, blindScope, )]
[left]
[blindScope]
[leftType, ==, null]
[leftType]
[null]
[blindScope]
[right, ., getJSType, (, )]
[right]
[typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[typeRegistry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[rightType, !=, null, &&, rightType, ., isFunctionType, (, )]
[rightType, !=, null]
[rightType]
[null]
[rightType, ., isFunctionType, (, )]
[rightType]
[targetType]
[rightType, ., toMaybeFunctionType, (, )]
[rightType]
[outcome]
[visitor]
[new, RestrictByTrueInstanceOfResultVisitor, (, targetType, )]
[targetType]
[visitor]
[new, RestrictByFalseInstanceOfResultVisitor, (, targetType, )]
[targetType]
[maybeRestrictName, (, blindScope, ,, left, ,, leftType, ,, leftType, ., visit, (, visitor, ), )]
[blindScope]
[left]
[leftType]
[leftType, ., visit, (, visitor, )]
[leftType]
[visitor]
[object, ., getJSType, (, )]
[object]
[jsType]
[this, ., getRestrictedWithoutNull, (, jsType, )]
[this]
[jsType]
[jsType]
[this, ., getRestrictedWithoutUndefined, (, jsType, )]
[this]
[jsType]
[false]
[ObjectType, ., cast, (, jsType, )]
[ObjectType]
[jsType]
[objectType, !=, null]
[objectType]
[null]
[hasProperty]
[objectType, ., hasProperty, (, propertyName, )]
[objectType]
[propertyName]
[!, hasProperty]
[hasProperty]
[object, ., getQualifiedName, (, )]
[object]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[qualifiedName, +, ".", +, propertyName]
[qualifiedName, +, "."]
[qualifiedName]
["."]
[propertyName]
[blindScope, ., getSlot, (, propertyQualifiedName, ), ==, null]
[blindScope, ., getSlot, (, propertyQualifiedName, )]
[blindScope]
[propertyQualifiedName]
[null]
[blindScope, ., createChildFlowScope, (, )]
[blindScope]
[typeRegistry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[typeRegistry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[informed, ., inferQualifiedSlot, (, object, ,, propertyQualifiedName, ,, unknownType, ,, unknownType, )]
[informed]
[object]
[propertyQualifiedName]
[unknownType]
[unknownType]
[informed]
[blindScope]
[this, ., target]
[this]
[target]
[applyCommonRestriction, (, type, )]
[type]
[JSType, ., toMaybeFunctionType, (, target, )]
[JSType]
[target]
[funcTarget, !=, null, &&, funcTarget, ., hasInstanceType, (, )]
[funcTarget, !=, null]
[funcTarget]
[null]
[funcTarget, ., hasInstanceType, (, )]
[funcTarget]
[funcTarget, ., getInstanceType, (, )]
[funcTarget]
[getNativeType, (, UNKNOWN_TYPE, )]
[UNKNOWN_TYPE]
[applyCommonRestriction, (, type, )]
[type]
[applyCommonRestriction, (, type, )]
[type]
[caseObjectType, (, type, )]
[type]
[target, ., isUnknownType, (, )]
[target]
[type]
[target, ., toMaybeFunctionType, (, )]
[target]
[funcTarget, ., hasInstanceType, (, )]
[funcTarget]
[type, ., getGreatestSubtype, (, funcTarget, ., getInstanceType, (, ), )]
[type]
[funcTarget, ., getInstanceType, (, )]
[funcTarget]
[null]
[this, ., target]
[this]
[target]
[target, ., isUnknownType, (, )]
[target]
[type]
[target, ., toMaybeFunctionType, (, )]
[target]
[funcTarget, ., hasInstanceType, (, )]
[funcTarget]
[type, ., isSubtype, (, funcTarget, ., getInstanceType, (, ), )]
[type]
[funcTarget, ., getInstanceType, (, )]
[funcTarget]
[null]
[type]
[null]
[target, ., isUnknownType, (, )]
[target]
[type]
[target, ., toMaybeFunctionType, (, )]
[target]
[funcTarget, ., hasInstanceType, (, )]
[funcTarget]
[type, ., getRestrictedUnion, (, funcTarget, ., getInstanceType, (, ), )]
[type]
[funcTarget, ., getInstanceType, (, )]
[funcTarget]
[null]
[caseObjectType, (, type, )]
[type]
