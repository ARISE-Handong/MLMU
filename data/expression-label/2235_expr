[DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", )]
[DiagnosticType]
["JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE"]
["Unable to determine type of parameter {0} for exported function {1}"]
[DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}", )]
[DiagnosticType]
["JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE"]
["Unable to determine return type for exported function {0}"]
[this, ., symbolName]
[this]
[symbolName]
[this, ., value]
[this]
[value]
[appendExtern, (, getExportedPath, (, ), ,, getValue, (, value, ), )]
[getExportedPath, (, )]
[getValue, (, value, )]
[value]
[computePathPrefixes, (, path, )]
[path]
[0]
[i, <, pathPrefixes, ., size, (, )]
[i]
[pathPrefixes, ., size, (, )]
[pathPrefixes]
[++, i]
[i]
[pathPrefixes, ., get, (, i, )]
[pathPrefixes]
[i]
[(, i, ==, pathPrefixes, ., size, (, ), -, 1, )]
[i, ==, pathPrefixes, ., size, (, ), -, 1]
[i]
[pathPrefixes, ., size, (, ), -, 1]
[pathPrefixes, ., size, (, )]
[pathPrefixes]
[1]
[pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, )]
[pathPrefix, ., endsWith, (, ".prototype", )]
[pathPrefix]
[".prototype"]
[(, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, )]
[alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix]
[alreadyExportedPaths, ., contains, (, pathPrefix, )]
[alreadyExportedPaths]
[pathPrefix]
[!, isCompletePathPrefix]
[isCompletePathPrefix]
[!, skipPathPrefix]
[skipPathPrefix]
[isCompletePathPrefix, &&, valueToExport, !=, null]
[isCompletePathPrefix]
[valueToExport, !=, null]
[valueToExport]
[null]
[valueToExport, ., isFunction, (, )]
[valueToExport]
[initializer]
[createExternFunction, (, valueToExport, )]
[valueToExport]
[Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), )]
[Preconditions]
[valueToExport, ., isObjectLit, (, )]
[valueToExport]
[initializer]
[createExternObjectLit, (, valueToExport, )]
[valueToExport]
[initializer]
[IR, ., empty, (, )]
[IR]
[appendPathDefinition, (, pathPrefix, ,, initializer, )]
[pathPrefix]
[initializer]
[Lists, ., newArrayList, (, path, ., split, (, "\\.", ), )]
[Lists]
[path, ., split, (, "\\.", )]
[path]
["\\."]
[Lists, ., newArrayList, (, )]
[Lists]
[0]
[i, <, pieces, ., size, (, )]
[i]
[pieces, ., size, (, )]
[pieces]
[i, ++]
[i]
[pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), ), )]
[pathPrefixes]
[Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), )]
[Joiner, ., on, (, ".", )]
[Joiner]
["."]
[Iterables, ., limit, (, pieces, ,, i, +, 1, )]
[Iterables]
[pieces]
[i, +, 1]
[i]
[1]
[pathPrefixes]
[!, path, ., contains, (, ".", )]
[path, ., contains, (, ".", )]
[path]
["."]
[initializer, ., isEmpty, (, )]
[initializer]
[pathDefinition]
[IR, ., var, (, IR, ., name, (, path, ), )]
[IR]
[IR, ., name, (, path, )]
[IR]
[path]
[pathDefinition]
[NodeUtil, ., newVarNode, (, path, ,, initializer, )]
[NodeUtil]
[path]
[initializer]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[path]
[initializer, ., isEmpty, (, )]
[initializer]
[pathDefinition]
[NodeUtil, ., newExpr, (, qualifiedPath, )]
[NodeUtil]
[qualifiedPath]
[pathDefinition]
[NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), )]
[NodeUtil]
[IR, ., assign, (, qualifiedPath, ,, initializer, )]
[IR]
[qualifiedPath]
[initializer]
[externsRoot, ., addChildToBack, (, pathDefinition, )]
[externsRoot]
[pathDefinition]
[alreadyExportedPaths, ., add, (, path, )]
[alreadyExportedPaths]
[path]
[NodeUtil, ., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, )]
[NodeUtil, ., getFunctionParameters, (, exportedFunction, )]
[NodeUtil]
[exportedFunction]
[IR, ., function, (, IR, ., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), )]
[IR]
[IR, ., name, (, "", )]
[IR]
[""]
[paramList]
[IR, ., block, (, )]
[IR]
[checkForFunctionsWithUnknownTypes, (, exportedFunction, )]
[exportedFunction]
[externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), )]
[externFunction]
[exportedFunction, ., getJSType, (, )]
[exportedFunction]
[externFunction]
[IR, ., objectlit, (, )]
[IR]
[lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), )]
[lit]
[exportedObjectLit, ., getJSType, (, )]
[exportedObjectLit]
[lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), )]
[lit]
[new, JSDocInfo, (, )]
[1]
[exportedObjectLit, ., getFirstChild, (, )]
[exportedObjectLit]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., isStringKey, (, )]
[child]
[lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (, index, ++, ), ), )]
[lit]
[IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (, index, ++, ), )]
[IR]
[IR, ., stringKey, (, child, ., getString, (, ), )]
[IR]
[child, ., getString, (, )]
[child]
[IR, ., number, (, index, ++, )]
[IR]
[index, ++]
[index]
[lit]
[Preconditions, ., checkArgument, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), )]
[JSType]
[function, ., getJSType, (, )]
[function]
[functionType, ==, null]
[functionType]
[null]
[functionType, ., getJSDocInfo, (, )]
[functionType]
[functionType, ., getReturnType, (, )]
[functionType]
[!, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), )]
[!, functionType, ., isConstructor, (, )]
[functionType, ., isConstructor, (, )]
[functionType]
[(, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), )]
[returnType, ==, null, ||, returnType, ., isUnknownType, (, )]
[returnType, ==, null]
[returnType]
[null]
[returnType, ., isUnknownType, (, )]
[returnType]
[reportUnknownReturnType, (, function, )]
[function]
[NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, )]
[NodeUtil, ., getFunctionParameters, (, function, )]
[NodeUtil]
[function]
[functionType, ., getParametersNode, (, ), ., getFirstChild, (, )]
[functionType, ., getParametersNode, (, )]
[functionType]
[astParameterIterator, !=, null]
[astParameterIterator]
[null]
[typeParameterIterator, ., getJSType, (, )]
[typeParameterIterator]
[parameterType, ==, null, ||, parameterType, ., isUnknownType, (, )]
[parameterType, ==, null]
[parameterType]
[null]
[parameterType, ., isUnknownType, (, )]
[parameterType]
[reportUnknownParameterType, (, function, ,, astParameterIterator, )]
[function]
[astParameterIterator]
[astParameterIterator]
[astParameterIterator, ., getNext, (, )]
[astParameterIterator]
[typeParameterIterator]
[typeParameterIterator, ., getNext, (, )]
[typeParameterIterator]
[compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), ), )]
[compiler]
[JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), )]
[JSError]
[NodeUtil, ., getSourceName, (, function, )]
[NodeUtil]
[function]
[parameter]
[CheckLevel, ., WARNING]
[CheckLevel]
[EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE]
[NodeUtil, ., getFunctionName, (, function, )]
[NodeUtil]
[function]
[parameter, ., getString, (, )]
[parameter]
[compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), )]
[compiler]
[JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), )]
[JSError]
[NodeUtil, ., getSourceName, (, function, )]
[NodeUtil]
[function]
[function]
[CheckLevel, ., WARNING]
[CheckLevel]
[EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE]
[NodeUtil, ., getFunctionName, (, function, )]
[NodeUtil]
[function]
[value, ., getQualifiedName, (, )]
[value]
[qualifiedName, ==, null]
[qualifiedName]
[null]
[null]
[definitionMap, ., get, (, qualifiedName, )]
[definitionMap]
[qualifiedName]
[definitionParent, ==, null]
[definitionParent]
[null]
[null]
[definitionParent, ., getType, (, )]
[definitionParent]
[Token, ., ASSIGN]
[Token]
[definition]
[definitionParent, ., getLastChild, (, )]
[definitionParent]
[Token, ., VAR]
[Token]
[definition]
[definitionParent, ., getLastChild, (, ), ., getLastChild, (, )]
[definitionParent, ., getLastChild, (, )]
[definitionParent]
[null]
[!, definition, ., isFunction, (, ), &&, !, definition, ., isObjectLit, (, )]
[!, definition, ., isFunction, (, )]
[definition, ., isFunction, (, )]
[definition]
[!, definition, ., isObjectLit, (, )]
[definition, ., isObjectLit, (, )]
[definition]
[null]
[definition]
[symbolName]
[value]
[value, ., getQualifiedName, (, )]
[value]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[mappedPaths, ., put, (, qualifiedName, ,, symbolName, )]
[mappedPaths]
[qualifiedName]
[symbolName]
[symbolName]
[symbolName]
[value]
[this, ., exportPath]
[this]
[exportPath]
[Lists, ., newArrayList, (, exportPath, ., split, (, "\\.", ), )]
[Lists]
[exportPath, ., split, (, "\\.", )]
[exportPath]
["\\."]
[pieces, ., size, (, )]
[pieces]
[i, >, 0]
[i]
[0]
[i, --]
[i]
[Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), )]
[Joiner, ., on, (, ".", )]
[Joiner]
["."]
[Iterables, ., limit, (, pieces, ,, i, )]
[Iterables]
[pieces]
[i]
[mappedPaths, ., containsKey, (, cPath, )]
[mappedPaths]
[cPath]
[mappedPaths, ., get, (, cPath, )]
[mappedPaths]
[cPath]
[i, <, pieces, ., size, (, )]
[i]
[pieces, ., size, (, )]
[pieces]
[newPath]
[".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), )]
["."]
[Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), )]
[Joiner, ., on, (, ".", )]
[Joiner]
["."]
[Iterables, ., skip, (, pieces, ,, i, )]
[Iterables]
[pieces]
[i]
[newPath, +, ".", +, symbolName]
[newPath, +, "."]
[newPath]
["."]
[symbolName]
[exportPath, +, ".", +, symbolName]
[exportPath, +, "."]
[exportPath]
["."]
[symbolName]
[this, ., exports]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., compiler]
[this]
[compiler]
[this, ., definitionMap]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., externsRoot]
[this]
[IR, ., block, (, )]
[IR]
[this, ., externsRoot, ., setIsSyntheticBlock, (, true, )]
[this, ., externsRoot]
[this]
[true]
[this, ., alreadyExportedPaths]
[this]
[Sets, ., newHashSet, (, )]
[Sets]
[this, ., mappedPaths]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[initExportMethods, (, )]
[exportSymbolFunctionNames]
[Lists, ., newArrayList, (, )]
[Lists]
[exportPropertyFunctionNames]
[Lists, ., newArrayList, (, )]
[Lists]
[compiler, ., getCodingConvention, (, )]
[compiler]
[exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), )]
[exportSymbolFunctionNames]
[convention, ., getExportSymbolFunction, (, )]
[convention]
[exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), )]
[exportPropertyFunctionNames]
[convention, ., getExportPropertyFunction, (, )]
[convention]
[exportSymbolFunctionNames, ., add, (, "google_exportSymbol", )]
[exportSymbolFunctionNames]
["google_exportSymbol"]
[exportPropertyFunctionNames, ., add, (, "google_exportProperty", )]
[exportPropertyFunctionNames]
["google_exportProperty"]
[new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (, root, )]
[new, NodeTraversal, (, compiler, ,, this, )]
[compiler]
[this]
[root]
[new, TreeSet, <, Export, >, (, new, Comparator, <, Export, >, (, ), {, @, Override, public, int, compare, (, Export, e1, ,, Export, e2, ), {, return, e1, ., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, )]
[new, Comparator, <, Export, >, (, ), {, @, Override, public, int, compare, (, Export, e1, ,, Export, e2, ), {, return, e1, ., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }]
[e1, ., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), )]
[e1, ., getExportedPath, (, )]
[e1]
[e2, ., getExportedPath, (, )]
[e2]
[sorted, ., addAll, (, exports, )]
[sorted]
[exports]
[sorted]
[export, ., generateExterns, (, )]
[export]
[new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (, true, ), ., setOutputTypes, (, true, )]
[new, CodePrinter, ., Builder, (, externsRoot, ), ., setPrettyPrint, (, true, )]
[new, CodePrinter, ., Builder, (, externsRoot, )]
[externsRoot]
[true]
[true]
[builder, ., build, (, )]
[builder]
[n, ., getType, (, )]
[n]
[Token, ., NAME]
[Token]
[Token, ., GETPROP]
[Token]
[n, ., getQualifiedName, (, )]
[n]
[name, ==, null]
[name]
[null]
[parent, ., isAssign, (, ), ||, parent, ., isVar, (, )]
[parent, ., isAssign, (, )]
[parent]
[parent, ., isVar, (, )]
[parent]
[definitionMap, ., put, (, name, ,, parent, )]
[definitionMap]
[name]
[parent]
[!, parent, ., isCall, (, )]
[parent, ., isCall, (, )]
[parent]
[exportPropertyFunctionNames, ., contains, (, name, )]
[exportPropertyFunctionNames]
[name]
[handlePropertyExport, (, parent, )]
[parent]
[exportSymbolFunctionNames, ., contains, (, name, )]
[exportSymbolFunctionNames]
[name]
[handleSymbolExport, (, parent, )]
[parent]
[parent, ., getChildCount, (, ), !=, 3]
[parent, ., getChildCount, (, )]
[parent]
[3]
[parent, ., getFirstChild, (, )]
[parent]
[thisNode, ., getNext, (, )]
[thisNode]
[nameArg, ., getNext, (, )]
[nameArg]
[!, nameArg, ., isString, (, )]
[nameArg, ., isString, (, )]
[nameArg]
[this, ., exports, ., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,, valueArg, ), )]
[this, ., exports]
[this]
[new, SymbolExport, (, nameArg, ., getString, (, ), ,, valueArg, )]
[nameArg, ., getString, (, )]
[nameArg]
[valueArg]
[parent, ., getChildCount, (, ), !=, 4]
[parent, ., getChildCount, (, )]
[parent]
[4]
[parent, ., getFirstChild, (, )]
[parent]
[thisNode, ., getNext, (, )]
[thisNode]
[objectArg, ., getNext, (, )]
[objectArg]
[nameArg, ., getNext, (, )]
[nameArg]
[!, objectArg, ., isQualifiedName, (, )]
[objectArg, ., isQualifiedName, (, )]
[objectArg]
[!, nameArg, ., isString, (, )]
[nameArg, ., isString, (, )]
[nameArg]
[this, ., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,, valueArg, ), )]
[this, ., exports]
[this]
[new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,, valueArg, )]
[objectArg, ., getQualifiedName, (, )]
[objectArg]
[nameArg, ., getString, (, )]
[nameArg]
[valueArg]
