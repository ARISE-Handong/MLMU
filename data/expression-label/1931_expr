[DiagnosticType, ., warning, (, "JSC_UNSAFE_NAMESPACE", ,, "incomplete alias created for namespace {0}", )]
[DiagnosticType]
["JSC_UNSAFE_NAMESPACE"]
["incomplete alias created for namespace {0}"]
[DiagnosticType, ., warning, (, "JSC_NAMESPACE_REDEFINED", ,, "namespace {0} should not be redefined", )]
[DiagnosticType]
["JSC_NAMESPACE_REDEFINED"]
["namespace {0} should not be redefined"]
[DiagnosticType, ., warning, (, "JSC_UNSAFE_THIS", ,, "dangerous use of 'this' in static method {0}", )]
[DiagnosticType]
["JSC_UNSAFE_THIS"]
["dangerous use of 'this' in static method {0}"]
[this, ., compiler]
[this]
[compiler]
[this, ., collapsePropertiesOnExternTypes]
[this]
[collapsePropertiesOnExternTypes]
[this, ., inlineAliases]
[this]
[inlineAliases]
[collapsePropertiesOnExternTypes]
[namespace]
[new, GlobalNamespace, (, compiler, ,, externs, ,, root, )]
[compiler]
[externs]
[root]
[namespace]
[new, GlobalNamespace, (, compiler, ,, root, )]
[compiler]
[root]
[inlineAliases]
[inlineAliases, (, namespace, )]
[namespace]
[nameMap]
[namespace, ., getNameIndex, (, )]
[namespace]
[globalNames]
[namespace, ., getNameForest, (, )]
[namespace]
[checkNamespaces, (, )]
[globalNames]
[flattenReferencesToCollapsibleDescendantNames, (, n, ,, n, ., getBaseName, (, ), )]
[n]
[n, ., getBaseName, (, )]
[n]
[globalNames]
[collapseDeclarationOfNameAndDescendants, (, n, ,, n, ., getBaseName, (, ), )]
[n]
[n, ., getBaseName, (, )]
[n]
[new, ArrayDeque, <, Name, >, (, namespace, ., getNameForest, (, ), )]
[namespace, ., getNameForest, (, )]
[namespace]
[!, workList, ., isEmpty, (, )]
[workList, ., isEmpty, (, )]
[workList]
[workList, ., pop, (, )]
[workList]
[name, ., type, ==, Name, ., Type, ., GET, ||, name, ., type, ==, Name, ., Type, ., SET]
[name, ., type, ==, Name, ., Type, ., GET]
[name, ., type]
[name]
[Name, ., Type, ., GET]
[Name, ., Type]
[Name]
[name, ., type, ==, Name, ., Type, ., SET]
[name, ., type]
[name]
[Name, ., Type, ., SET]
[Name, ., Type]
[Name]
[name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0, &&, name, ., aliasingGets, >, 0]
[name, ., globalSets, ==, 1, &&, name, ., localSets, ==, 0]
[name, ., globalSets, ==, 1]
[name, ., globalSets]
[name]
[1]
[name, ., localSets, ==, 0]
[name, ., localSets]
[name]
[0]
[name, ., aliasingGets, >, 0]
[name, ., aliasingGets]
[name]
[0]
[Lists, ., newArrayList, (, name, ., getRefs, (, ), )]
[Lists]
[name, ., getRefs, (, )]
[name]
[refs]
[ref, ., type, ==, Type, ., ALIASING_GET, &&, ref, ., scope, ., isLocal, (, )]
[ref, ., type, ==, Type, ., ALIASING_GET]
[ref, ., type]
[ref]
[Type, ., ALIASING_GET]
[Type]
[ref, ., scope, ., isLocal, (, )]
[ref, ., scope]
[ref]
[inlineAliasIfPossible, (, ref, ,, namespace, )]
[ref]
[namespace]
[name, ., removeRef, (, ref, )]
[name]
[ref]
[(, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0, &&, name, ., props, !=, null]
[(, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, ), &&, name, ., aliasingGets, ==, 0]
[(, name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION, )]
[name, ., type, ==, Name, ., Type, ., OBJECTLIT, ||, name, ., type, ==, Name, ., Type, ., FUNCTION]
[name, ., type, ==, Name, ., Type, ., OBJECTLIT]
[name, ., type]
[name]
[Name, ., Type, ., OBJECTLIT]
[Name, ., Type]
[Name]
[name, ., type, ==, Name, ., Type, ., FUNCTION]
[name, ., type]
[name]
[Name, ., Type, ., FUNCTION]
[Name, ., Type]
[Name]
[name, ., aliasingGets, ==, 0]
[name, ., aliasingGets]
[name]
[0]
[name, ., props, !=, null]
[name, ., props]
[name]
[null]
[workList, ., addAll, (, name, ., props, )]
[workList]
[name, ., props]
[name]
[alias, ., node, ., getParent, (, )]
[alias, ., node]
[alias]
[aliasParent, ., isName, (, )]
[aliasParent]
[alias, ., scope]
[alias]
[scope, ., getVar, (, aliasParent, ., getString, (, ), )]
[scope]
[aliasParent, ., getString, (, )]
[aliasParent]
[new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ,, Predicates, ., <, Var, >, equalTo, (, aliasVar, ), )]
[compiler]
[ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR]
[ReferenceCollectingCallback]
[Predicates, ., <, Var, >, equalTo, (, aliasVar, )]
[Predicates]
[aliasVar]
[(, new, NodeTraversal, (, compiler, ,, collector, ), ), ., traverseAtScope, (, scope, )]
[(, new, NodeTraversal, (, compiler, ,, collector, ), )]
[new, NodeTraversal, (, compiler, ,, collector, )]
[compiler]
[collector]
[scope]
[collector, ., getReferences, (, aliasVar, )]
[collector]
[aliasVar]
[aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, ), &&, aliasRefs, ., isAssignedOnceInLifetime, (, )]
[aliasRefs, ., isWellDefined, (, ), &&, aliasRefs, ., firstReferenceIsAssigningDeclaration, (, )]
[aliasRefs, ., isWellDefined, (, )]
[aliasRefs]
[aliasRefs, ., firstReferenceIsAssigningDeclaration, (, )]
[aliasRefs]
[aliasRefs, ., isAssignedOnceInLifetime, (, )]
[aliasRefs]
[aliasRefs, ., references, ., size, (, )]
[aliasRefs, ., references]
[aliasRefs]
[Sets, ., newHashSetWithExpectedSize, (, size, -, 1, )]
[Sets]
[size, -, 1]
[size]
[1]
[1]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[aliasRefs, ., references, ., get, (, i, )]
[aliasRefs, ., references]
[aliasRefs]
[i]
[alias, ., node, ., cloneTree, (, )]
[alias, ., node]
[alias]
[aliasRef, ., getParent, (, ), ., replaceChild, (, aliasRef, ., getNode, (, ), ,, newNode, )]
[aliasRef, ., getParent, (, )]
[aliasRef]
[aliasRef, ., getNode, (, )]
[aliasRef]
[newNode]
[newNodes, ., add, (, newNode, )]
[newNodes]
[newNode]
[aliasParent, ., replaceChild, (, alias, ., node, ,, IR, ., nullNode, (, ), )]
[aliasParent]
[alias, ., node]
[alias]
[IR, ., nullNode, (, )]
[IR]
[compiler, ., reportCodeChange, (, )]
[compiler]
[namespace, ., scanNewNodes, (, alias, ., scope, ,, newNodes, )]
[namespace]
[alias, ., scope]
[alias]
[newNodes]
[true]
[false]
[nameMap, ., values, (, )]
[nameMap]
[name, ., isNamespace, (, ), &&, (, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, )]
[name, ., isNamespace, (, )]
[name]
[(, name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0, )]
[name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1, ||, name, ., deleteProps, >, 0]
[name, ., aliasingGets, >, 0, ||, name, ., localSets, +, name, ., globalSets, >, 1]
[name, ., aliasingGets, >, 0]
[name, ., aliasingGets]
[name]
[0]
[name, ., localSets, +, name, ., globalSets, >, 1]
[name, ., localSets, +, name, ., globalSets]
[name, ., localSets]
[name]
[name, ., globalSets]
[name]
[1]
[name, ., deleteProps, >, 0]
[name, ., deleteProps]
[name]
[0]
[name, ., getDeclaration, (, ), !=, null]
[name, ., getDeclaration, (, )]
[name]
[null]
[name, ., getRefs, (, )]
[name]
[ref, ==, name, ., getDeclaration, (, )]
[ref]
[name, ., getDeclaration, (, )]
[name]
[ref, ., type, ==, Ref, ., Type, ., DELETE_PROP]
[ref, ., type]
[ref]
[Ref, ., Type, ., DELETE_PROP]
[Ref, ., Type]
[Ref]
[initialized]
[warnAboutNamespaceRedefinition, (, name, ,, ref, )]
[name]
[ref]
[ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ||, ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL]
[ref, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL]
[ref, ., type]
[ref]
[Ref, ., Type, ., SET_FROM_GLOBAL]
[Ref, ., Type]
[Ref]
[ref, ., type, ==, Ref, ., Type, ., SET_FROM_LOCAL]
[ref, ., type]
[ref]
[Ref, ., Type, ., SET_FROM_LOCAL]
[Ref, ., Type]
[Ref]
[initialized]
[warnAboutNamespaceRedefinition, (, name, ,, ref, )]
[name]
[ref]
[initialized]
[true]
[ref, ., type, ==, Ref, ., Type, ., ALIASING_GET]
[ref, ., type]
[ref]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[warnAboutNamespaceAliasing, (, name, ,, ref, )]
[name]
[ref]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), ), )]
[compiler]
[JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, UNSAFE_NAMESPACE_WARNING, ,, nameObj, ., getFullName, (, ), )]
[JSError]
[ref, ., getSourceName, (, )]
[ref]
[ref, ., node]
[ref]
[UNSAFE_NAMESPACE_WARNING]
[nameObj, ., getFullName, (, )]
[nameObj]
[compiler, ., report, (, JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), ), )]
[compiler]
[JSError, ., make, (, ref, ., getSourceName, (, ), ,, ref, ., node, ,, NAMESPACE_REDEFINED_WARNING, ,, nameObj, ., getFullName, (, ), )]
[JSError]
[ref, ., getSourceName, (, )]
[ref]
[ref, ., node]
[ref]
[NAMESPACE_REDEFINED_WARNING]
[nameObj, ., getFullName, (, )]
[nameObj]
[n, ., props, ==, null]
[n, ., props]
[n]
[null]
[n, ., props]
[n]
[appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), )]
[alias]
[p, ., getBaseName, (, )]
[p]
[p, ., canCollapse, (, )]
[p]
[flattenReferencesTo, (, p, ,, propAlias, )]
[p]
[propAlias]
[p, ., isSimpleStubDeclaration, (, )]
[p]
[flattenSimpleStubDeclaration, (, p, ,, propAlias, )]
[p]
[propAlias]
[flattenReferencesToCollapsibleDescendantNames, (, p, ,, propAlias, )]
[p]
[propAlias]
[Iterables, ., getOnlyElement, (, name, ., getRefs, (, ), )]
[Iterables]
[name, ., getRefs, (, )]
[name]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ,, name, ., getFullName, (, ), )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[alias]
[ref, ., node]
[ref]
[name, ., getFullName, (, )]
[name]
[IR, ., var, (, nameNode, ), ., copyInformationFrom, (, nameNode, )]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[nameNode]
[Preconditions, ., checkState, (, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), )]
[Preconditions]
[ref, ., node, ., getParent, (, ), ., isExprResult, (, )]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[parent, ., getParent, (, )]
[parent]
[gramps, ., replaceChild, (, parent, ,, varNode, )]
[gramps]
[parent]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getFullName, (, )]
[n]
[n, ., getRefs, (, )]
[n]
[r, ==, n, ., getDeclaration, (, )]
[r]
[n, ., getDeclaration, (, )]
[n]
[r, ., node, ., getParent, (, )]
[r, ., node]
[r]
[!, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, ), &&, (, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), )]
[!, NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, )]
[NodeUtil, ., isObjectLitKey, (, r, ., node, ,, rParent, )]
[NodeUtil]
[r, ., node]
[r]
[rParent]
[(, r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, ), )]
[r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, )]
[r, ., getTwin, (, ), ==, null]
[r, ., getTwin, (, )]
[r]
[null]
[r, ., isSet, (, )]
[r]
[flattenNameRef, (, alias, ,, r, ., node, ,, rParent, ,, originalName, )]
[alias]
[r, ., node]
[r]
[rParent]
[originalName]
[n, ., props, !=, null]
[n, ., props]
[n]
[null]
[n, ., props]
[n]
[flattenPrefixes, (, alias, ,, p, ,, 1, )]
[alias]
[p]
[1]
[n, ., getFullName, (, )]
[n]
[n, ., getDeclaration, (, )]
[n]
[decl, !=, null, &&, decl, ., node, !=, null, &&, decl, ., node, ., isGetProp, (, )]
[decl, !=, null, &&, decl, ., node, !=, null]
[decl, !=, null]
[decl]
[null]
[decl, ., node, !=, null]
[decl, ., node]
[decl]
[null]
[decl, ., node, ., isGetProp, (, )]
[decl, ., node]
[decl]
[flattenNameRefAtDepth, (, alias, ,, decl, ., node, ,, depth, ,, originalName, )]
[alias]
[decl, ., node]
[decl]
[depth]
[originalName]
[n, ., getRefs, (, )]
[n]
[r, ==, decl]
[r]
[decl]
[r, ., getTwin, (, ), ==, null, ||, r, ., isSet, (, )]
[r, ., getTwin, (, ), ==, null]
[r, ., getTwin, (, )]
[r]
[null]
[r, ., isSet, (, )]
[r]
[flattenNameRefAtDepth, (, alias, ,, r, ., node, ,, depth, ,, originalName, )]
[alias]
[r, ., node]
[r]
[depth]
[originalName]
[n, ., props, !=, null]
[n, ., props]
[n]
[null]
[n, ., props]
[n]
[flattenPrefixes, (, alias, ,, p, ,, depth, +, 1, )]
[alias]
[p]
[depth, +, 1]
[depth]
[1]
[n, ., getType, (, )]
[n]
[nType, ==, Token, ., NAME, ||, nType, ==, Token, ., GETPROP]
[nType, ==, Token, ., NAME]
[nType]
[Token, ., NAME]
[Token]
[nType, ==, Token, ., GETPROP]
[nType]
[Token, ., GETPROP]
[Token]
[NodeUtil, ., isObjectLitKey, (, n, ,, n, ., getParent, (, ), )]
[NodeUtil]
[n]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, isObjKey, ||, isQName, )]
[Preconditions]
[isObjKey, ||, isQName]
[isObjKey]
[isQName]
[isQName]
[1]
[i, <, depth, &&, n, ., hasChildren, (, )]
[i, <, depth]
[i]
[depth]
[n, ., hasChildren, (, )]
[n]
[i, ++]
[i]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., hasChildren, (, )]
[n]
[flattenNameRef, (, alias, ,, n, ., getFirstChild, (, ), ,, n, ,, originalName, )]
[alias]
[n, ., getFirstChild, (, )]
[n]
[n]
[originalName]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, n, ,, originalName, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[alias]
[n]
[originalName]
[NodeUtil, ., copyNameAnnotations, (, n, ., getLastChild, (, ), ,, ref, )]
[NodeUtil]
[n, ., getLastChild, (, )]
[n]
[ref]
[parent, ., isCall, (, ), &&, n, ==, parent, ., getFirstChild, (, )]
[parent, ., isCall, (, )]
[parent]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[parent]
[Node, ., FREE_CALL]
[Node]
[true]
[n, ., getJSType, (, )]
[n]
[type, !=, null]
[type]
[null]
[ref, ., setJSType, (, type, )]
[ref]
[type]
[parent, ., replaceChild, (, n, ,, ref, )]
[parent]
[n]
[ref]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., canCollapseUnannotatedChildNames, (, )]
[n]
[n, ., canCollapse, (, )]
[n]
[updateObjLitOrFunctionDeclaration, (, n, ,, alias, ,, canCollapseChildNames, )]
[n]
[alias]
[canCollapseChildNames]
[n, ., props, !=, null]
[n, ., props]
[n]
[null]
[n, ., props]
[n]
[collapseDeclarationOfNameAndDescendants, (, p, ,, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), )]
[p]
[appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), )]
[alias]
[p, ., getBaseName, (, )]
[p]
[!, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, )]
[!, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null, &&, p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null]
[!, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, ), &&, p, ., getDeclaration, (, ), ., node, !=, null]
[!, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null, &&, p, ., canCollapse, (, )]
[!, p, ., inExterns, &&, canCollapseChildNames, &&, p, ., getDeclaration, (, ), !=, null]
[!, p, ., inExterns, &&, canCollapseChildNames]
[!, p, ., inExterns]
[p, ., inExterns]
[p]
[canCollapseChildNames]
[p, ., getDeclaration, (, ), !=, null]
[p, ., getDeclaration, (, )]
[p]
[null]
[p, ., canCollapse, (, )]
[p]
[p, ., getDeclaration, (, ), ., node, !=, null]
[p, ., getDeclaration, (, ), ., node]
[p, ., getDeclaration, (, )]
[p]
[null]
[p, ., getDeclaration, (, ), ., node, ., getParent, (, ), !=, null]
[p, ., getDeclaration, (, ), ., node, ., getParent, (, )]
[p, ., getDeclaration, (, ), ., node]
[p, ., getDeclaration, (, )]
[p]
[null]
[p, ., getDeclaration, (, ), ., node, ., getParent, (, ), ., isAssign, (, )]
[p, ., getDeclaration, (, ), ., node, ., getParent, (, )]
[p, ., getDeclaration, (, ), ., node]
[p, ., getDeclaration, (, )]
[p]
[updateSimpleDeclaration, (, appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), ), ,, p, ,, p, ., getDeclaration, (, ), )]
[appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), )]
[alias]
[p, ., getBaseName, (, )]
[p]
[p]
[p, ., getDeclaration, (, )]
[p]
[ref, ., node, ., getNext, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[parent, ., getParent, (, )]
[parent]
[gramps, ., getParent, (, )]
[gramps]
[greatGramps, ., getParent, (, )]
[greatGramps]
[rvalue, !=, null, &&, rvalue, ., isFunction, (, )]
[rvalue, !=, null]
[rvalue]
[null]
[rvalue, ., isFunction, (, )]
[rvalue]
[checkForHosedThisReferences, (, rvalue, ,, refName, ., docInfo, ,, refName, )]
[rvalue]
[refName, ., docInfo]
[refName]
[refName]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, gramps, ., getFirstChild, (, ), ,, refName, ., getFullName, (, ), )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[alias]
[gramps, ., getFirstChild, (, )]
[gramps]
[refName, ., getFullName, (, )]
[refName]
[NodeUtil, ., copyNameAnnotations, (, ref, ., node, ., getLastChild, (, ), ,, nameNode, )]
[NodeUtil]
[ref, ., node, ., getLastChild, (, )]
[ref, ., node]
[ref]
[nameNode]
[gramps, ., isExprResult, (, )]
[gramps]
[parent, ., removeChild, (, rvalue, )]
[parent]
[rvalue]
[nameNode, ., addChildToFront, (, rvalue, )]
[nameNode]
[rvalue]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[greatGramps, ., replaceChild, (, gramps, ,, varNode, )]
[greatGramps]
[gramps]
[varNode]
[Preconditions, ., checkNotNull, (, ref, ., getTwin, (, ), )]
[Preconditions]
[ref, ., getTwin, (, )]
[ref]
[gramps]
[gramps, ., getParent, (, )]
[gramps]
[!, currentParent, ., isScript, (, ), &&, !, currentParent, ., isBlock, (, )]
[!, currentParent, ., isScript, (, )]
[currentParent, ., isScript, (, )]
[currentParent]
[!, currentParent, ., isBlock, (, )]
[currentParent, ., isBlock, (, )]
[currentParent]
[current]
[currentParent]
[currentParent]
[currentParent, ., getParent, (, )]
[currentParent]
[IR, ., var, (, nameNode, ., cloneTree, (, ), ), ., copyInformationFrom, (, nameNode, )]
[IR, ., var, (, nameNode, ., cloneTree, (, ), )]
[IR]
[nameNode, ., cloneTree, (, )]
[nameNode]
[nameNode]
[currentParent, ., addChildBefore, (, stubVar, ,, current, )]
[currentParent]
[stubVar]
[current]
[parent, ., replaceChild, (, ref, ., node, ,, nameNode, )]
[parent]
[ref, ., node]
[ref]
[nameNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getDeclaration, (, )]
[n]
[decl, ==, null]
[decl]
[null]
[decl, ., getTwin, (, ), !=, null]
[decl, ., getTwin, (, )]
[decl]
[null]
[decl, ., node, ., getParent, (, ), ., getType, (, )]
[decl, ., node, ., getParent, (, )]
[decl, ., node]
[decl]
[Token, ., ASSIGN]
[Token]
[updateObjLitOrFunctionDeclarationAtAssignNode, (, n, ,, alias, ,, canCollapseChildNames, )]
[n]
[alias]
[canCollapseChildNames]
[Token, ., VAR]
[Token]
[updateObjLitOrFunctionDeclarationAtVarNode, (, n, ,, canCollapseChildNames, )]
[n]
[canCollapseChildNames]
[Token, ., FUNCTION]
[Token]
[updateFunctionDeclarationAtFunctionNode, (, n, ,, canCollapseChildNames, )]
[n]
[canCollapseChildNames]
[n, ., getDeclaration, (, )]
[n]
[ref, ., node, ., getNext, (, )]
[ref, ., node]
[ref]
[new, Node, (, Token, ., VAR, )]
[Token, ., VAR]
[Token]
[ref, ., node, ., getAncestor, (, 3, )]
[ref, ., node]
[ref]
[3]
[ref, ., node, ., getAncestor, (, 2, )]
[ref, ., node]
[ref]
[2]
[rvalue, ., isObjectLit, (, )]
[rvalue]
[false]
[isObjLit, &&, n, ., canEliminate, (, )]
[isObjLit]
[n, ., canEliminate, (, )]
[n]
[varParent, ., replaceChild, (, gramps, ,, varNode, )]
[varParent]
[gramps]
[varNode]
[ref, ., node]
[ref]
[null]
[insertedVarNode]
[true]
[!, n, ., isSimpleName, (, )]
[n, ., isSimpleName, (, )]
[n]
[rvalue, ., isFunction, (, )]
[rvalue]
[checkForHosedThisReferences, (, rvalue, ,, n, ., docInfo, ,, n, )]
[rvalue]
[n, ., docInfo]
[n]
[n]
[ref, ., node, ., getParent, (, ), ., removeChild, (, rvalue, )]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[rvalue]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, alias, ,, ref, ., node, ., getAncestor, (, 2, ), ,, n, ., getFullName, (, ), )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[alias]
[ref, ., node, ., getAncestor, (, 2, )]
[ref, ., node]
[ref]
[2]
[n, ., getFullName, (, )]
[n]
[ref, ., node, ., getParent, (, ), ., getJSDocInfo, (, )]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ||, (, info, !=, null, &&, info, ., isConstant, (, ), )]
[ref, ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[ref, ., node, ., getLastChild, (, )]
[ref, ., node]
[ref]
[Node, ., IS_CONSTANT_NAME]
[Node]
[(, info, !=, null, &&, info, ., isConstant, (, ), )]
[info, !=, null, &&, info, ., isConstant, (, )]
[info, !=, null]
[info]
[null]
[info, ., isConstant, (, )]
[info]
[nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[nameNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[info, !=, null]
[info]
[null]
[varNode, ., setJSDocInfo, (, info, )]
[varNode]
[info]
[varNode, ., addChildToBack, (, nameNode, )]
[varNode]
[nameNode]
[nameNode, ., addChildToFront, (, rvalue, )]
[nameNode]
[rvalue]
[varParent, ., replaceChild, (, gramps, ,, varNode, )]
[varParent]
[gramps]
[varNode]
[ref, ., node]
[ref]
[nameNode]
[insertedVarNode]
[true]
[canCollapseChildNames]
[isObjLit]
[declareVarsForObjLitValues, (, n, ,, alias, ,, rvalue, ,, varNode, ,, varParent, ., getChildBefore, (, varNode, ), ,, varParent, )]
[n]
[alias]
[rvalue]
[varNode]
[varParent, ., getChildBefore, (, varNode, )]
[varParent]
[varNode]
[varParent]
[addStubsForUndeclaredProperties, (, n, ,, alias, ,, varParent, ,, varNode, )]
[n]
[alias]
[varParent]
[varNode]
[insertedVarNode]
[!, varNode, ., hasChildren, (, )]
[varNode, ., hasChildren, (, )]
[varNode]
[varParent, ., removeChild, (, varNode, )]
[varParent]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[docInfo, ==, null, ||, (, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), )]
[docInfo, ==, null]
[docInfo]
[null]
[(, !, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, ), )]
[!, docInfo, ., isConstructor, (, ), &&, !, docInfo, ., hasThisType, (, )]
[!, docInfo, ., isConstructor, (, )]
[docInfo, ., isConstructor, (, )]
[docInfo]
[!, docInfo, ., hasThisType, (, )]
[docInfo, ., hasThisType, (, )]
[docInfo]
[NodeTraversal, ., traverse, (, compiler, ,, function, ., getLastChild, (, ), ,, new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), ), ;, }, }, }, )]
[NodeTraversal]
[compiler]
[function, ., getLastChild, (, )]
[function]
[new, NodeTraversal, ., AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isThis, (, ), ), {, compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), ), ;, }, }, }]
[n, ., isThis, (, )]
[n]
[compiler, ., report, (, JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), ), )]
[compiler]
[JSError, ., make, (, name, ., getDeclaration, (, ), ., getSourceName, (, ), ,, n, ,, UNSAFE_THIS, ,, name, ., getFullName, (, ), )]
[JSError]
[name, ., getDeclaration, (, ), ., getSourceName, (, )]
[name, ., getDeclaration, (, )]
[name]
[n]
[UNSAFE_THIS]
[name, ., getFullName, (, )]
[name]
[!, canCollapseChildNames]
[canCollapseChildNames]
[n, ., getDeclaration, (, )]
[n]
[ref, ., node, ., getString, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getFirstChild, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[varNode, ., getParent, (, )]
[varNode]
[rvalue, ., isObjectLit, (, )]
[rvalue]
[0]
[isObjLit]
[numChanges]
[declareVarsForObjLitValues, (, n, ,, name, ,, rvalue, ,, varNode, ,, gramps, ., getChildBefore, (, varNode, ), ,, gramps, )]
[n]
[name]
[rvalue]
[varNode]
[gramps, ., getChildBefore, (, varNode, )]
[gramps]
[varNode]
[gramps]
[numChanges]
[addStubsForUndeclaredProperties, (, n, ,, name, ,, gramps, ,, varNode, )]
[n]
[name]
[gramps]
[varNode]
[isObjLit, &&, n, ., canEliminate, (, )]
[isObjLit]
[n, ., canEliminate, (, )]
[n]
[varNode, ., removeChild, (, ref, ., node, )]
[varNode]
[ref, ., node]
[ref]
[!, varNode, ., hasChildren, (, )]
[varNode, ., hasChildren, (, )]
[varNode]
[gramps, ., removeChild, (, varNode, )]
[gramps]
[varNode]
[numChanges, ++]
[numChanges]
[ref, ., node]
[ref]
[null]
[numChanges, >, 0]
[numChanges]
[0]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, canCollapseChildNames]
[canCollapseChildNames]
[n, ., getDeclaration, (, )]
[n]
[ref, ., node, ., getString, (, )]
[ref, ., node]
[ref]
[addStubsForUndeclaredProperties, (, n, ,, fnName, ,, ref, ., node, ., getAncestor, (, 2, ), ,, ref, ., node, ., getParent, (, ), )]
[n]
[fnName]
[ref, ., node, ., getAncestor, (, 2, )]
[ref, ., node]
[ref]
[2]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[0]
[0]
[!, objlitName, ., shouldKeepKeys, (, )]
[objlitName, ., shouldKeepKeys, (, )]
[objlitName]
[objlit, ., getFirstChild, (, )]
[objlit]
[key, !=, null]
[key]
[null]
[key]
[nextKey]
[key, ., getFirstChild, (, )]
[key]
[nextKey]
[key, ., getNext, (, )]
[key]
[key, ., isGetterDef, (, ), ||, key, ., isSetterDef, (, )]
[key, ., isGetterDef, (, )]
[key]
[key, ., isSetterDef, (, )]
[key]
[!, key, ., isNumber, (, ), &&, TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), )]
[!, key, ., isNumber, (, )]
[key, ., isNumber, (, )]
[key]
[TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), )]
[TokenStream]
[key, ., getString, (, )]
[key]
[isJsIdentifier, ?, key, ., getString, (, ), :, String, ., valueOf, (, ++, arbitraryNameCounter, )]
[isJsIdentifier]
[key, ., getString, (, )]
[key]
[String, ., valueOf, (, ++, arbitraryNameCounter, )]
[String]
[++, arbitraryNameCounter]
[arbitraryNameCounter]
[objlitName, ., getFullName, (, ), +, '.', +, propName]
[objlitName, ., getFullName, (, ), +, '.']
[objlitName, ., getFullName, (, )]
[objlitName]
['.']
[propName]
[nameMap, ., get, (, qName, )]
[nameMap]
[qName]
[p, !=, null, &&, !, p, ., canCollapse, (, )]
[p, !=, null]
[p]
[null]
[!, p, ., canCollapse, (, )]
[p, ., canCollapse, (, )]
[p]
[appendPropForAlias, (, alias, ,, propName, )]
[alias]
[propName]
[null]
[discardKeys]
[objlit, ., removeChild, (, key, )]
[objlit]
[key]
[value, ., detachFromParent, (, )]
[value]
[refNode]
[IR, ., name, (, propAlias, )]
[IR]
[propAlias]
[key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[key]
[Node, ., IS_CONSTANT_NAME]
[Node]
[refNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[refNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[key, ., replaceChild, (, value, ,, refNode, )]
[key]
[value]
[refNode]
[IR, ., name, (, propAlias, )]
[IR]
[propAlias]
[nameNode, ., addChildToFront, (, value, )]
[nameNode]
[value]
[key, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[key]
[Node, ., IS_CONSTANT_NAME]
[Node]
[nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[nameNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, key, )]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[key]
[nameToAddAfter, !=, null]
[nameToAddAfter]
[null]
[varParent, ., addChildAfter, (, newVar, ,, nameToAddAfter, )]
[varParent]
[newVar]
[nameToAddAfter]
[varParent, ., addChildBefore, (, newVar, ,, varNode, )]
[varParent]
[newVar]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[nameToAddAfter]
[newVar]
[isJsIdentifier, &&, p, !=, null]
[isJsIdentifier]
[p, !=, null]
[p]
[null]
[!, discardKeys]
[discardKeys]
[p, ., getDeclaration, (, ), ., cloneAndReclassify, (, Ref, ., Type, ., ALIASING_GET, )]
[p, ., getDeclaration, (, )]
[p]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[newAlias, ., node]
[newAlias]
[refNode]
[p, ., addRef, (, newAlias, )]
[p]
[newAlias]
[p, ., getDeclaration, (, ), ., node]
[p, ., getDeclaration, (, )]
[p]
[nameNode]
[value, ., isFunction, (, )]
[value]
[checkForHosedThisReferences, (, value, ,, value, ., getJSDocInfo, (, ), ,, p, )]
[value]
[value, ., getJSDocInfo, (, )]
[value]
[p]
[numVars, ++]
[numVars]
[numVars]
[Preconditions, ., checkState, (, n, ., canCollapseUnannotatedChildNames, (, ), )]
[Preconditions]
[n, ., canCollapseUnannotatedChildNames, (, )]
[n]
[Preconditions, ., checkArgument, (, NodeUtil, ., isStatementBlock, (, parent, ), )]
[Preconditions]
[NodeUtil, ., isStatementBlock, (, parent, )]
[NodeUtil]
[parent]
[Preconditions, ., checkNotNull, (, addAfter, )]
[Preconditions]
[addAfter]
[0]
[n, ., props, !=, null]
[n, ., props]
[n]
[null]
[n, ., props]
[n]
[p, ., needsToBeStubbed, (, )]
[p]
[appendPropForAlias, (, alias, ,, p, ., getBaseName, (, ), )]
[alias]
[p, ., getBaseName, (, )]
[p]
[IR, ., name, (, propAlias, )]
[IR]
[propAlias]
[IR, ., var, (, nameNode, ), ., copyInformationFromForTree, (, addAfter, )]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[addAfter]
[parent, ., addChildAfter, (, newVar, ,, addAfter, )]
[parent]
[newVar]
[addAfter]
[addAfter]
[newVar]
[numStubs, ++]
[numStubs]
[compiler, ., reportCodeChange, (, )]
[compiler]
[p, ., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, ), ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[p, ., getRefs, (, ), ., get, (, 0, ), ., node, ., getLastChild, (, )]
[p, ., getRefs, (, ), ., get, (, 0, ), ., node]
[p, ., getRefs, (, ), ., get, (, 0, )]
[p, ., getRefs, (, )]
[p]
[0]
[Node, ., IS_CONSTANT_NAME]
[Node]
[nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[nameNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[numStubs]
[prop, ., indexOf, (, '$', ), !=, -, 1]
[prop, ., indexOf, (, '$', )]
[prop]
['$']
[-, 1]
[1]
[prop]
[prop, ., replace, (, "$", ,, "$0", )]
[prop]
["$"]
["$0"]
[root, +, '$', +, prop]
[root, +, '$']
[root]
['$']
[prop]
