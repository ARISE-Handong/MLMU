[Logger, ., getLogger, (, AmbiguateProperties, ., class, ., getName, (, ), )]
[Logger]
[AmbiguateProperties, ., class, ., getName, (, )]
[AmbiguateProperties, ., class]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[Sets, ., newHashSet, (, )]
[Sets]
[Sets, ., newHashSet, (, )]
[Sets]
[Maps, ., newHashMap, (, )]
[Maps]
[new, Comparator, <, Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }]
[p1, ., numOccurrences, !=, p2, ., numOccurrences]
[p1, ., numOccurrences]
[p1]
[p2, ., numOccurrences]
[p2]
[p2, ., numOccurrences, -, p1, ., numOccurrences]
[p2, ., numOccurrences]
[p2]
[p1, ., numOccurrences]
[p1]
[p1, ., oldName, ., compareTo, (, p2, ., oldName, )]
[p1, ., oldName]
[p1]
[p2, ., oldName]
[p2]
[HashBiMap, ., create, (, )]
[HashBiMap]
[Maps, ., newHashMap, (, )]
[Maps]
["JSAbstractCompiler"]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[this, ., reservedCharacters]
[this]
[reservedCharacters]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[invalidatingTypes]
[Sets, ., newHashSet, (, r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), )]
[Sets]
[r, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, )]
[r]
[JSTypeNative, ., ALL_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, )]
[r]
[JSTypeNative, ., NO_OBJECT_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[r]
[JSTypeNative, ., NO_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., NULL_TYPE, )]
[r]
[JSTypeNative, ., NULL_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., VOID_TYPE, )]
[r]
[JSTypeNative, ., VOID_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., FUNCTION_FUNCTION_TYPE, )]
[r]
[JSTypeNative, ., FUNCTION_FUNCTION_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, )]
[r]
[JSTypeNative, ., FUNCTION_INSTANCE_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, )]
[r]
[JSTypeNative, ., FUNCTION_PROTOTYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, )]
[r]
[JSTypeNative, ., GLOBAL_THIS]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., OBJECT_TYPE, )]
[r]
[JSTypeNative, ., OBJECT_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, )]
[r]
[JSTypeNative, ., OBJECT_PROTOTYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., OBJECT_FUNCTION_TYPE, )]
[r]
[JSTypeNative, ., OBJECT_FUNCTION_TYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, )]
[r]
[JSTypeNative, ., TOP_LEVEL_PROTOTYPE]
[JSTypeNative]
[r, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[r]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[compiler, ., getTypeValidator, (, ), ., getMismatches, (, )]
[compiler, ., getTypeValidator, (, )]
[compiler]
[addInvalidatingType, (, mis, ., typeA, )]
[mis, ., typeA]
[mis]
[addInvalidatingType, (, mis, ., typeB, )]
[mis, ., typeB]
[mis]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[addInvalidatingType, (, alt, )]
[alt]
[invalidatingTypes, ., add, (, type, )]
[invalidatingTypes]
[type]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null, &&, objType, ., isInstanceType, (, )]
[objType, !=, null]
[objType]
[null]
[objType, ., isInstanceType, (, )]
[objType]
[invalidatingTypes, ., add, (, objType, ., getImplicitPrototype, (, ), )]
[invalidatingTypes]
[objType, ., getImplicitPrototype, (, )]
[objType]
[renamingMap]
[intForType, ., containsKey, (, type, )]
[intForType]
[type]
[intForType, ., get, (, type, ), ., intValue, (, )]
[intForType, ., get, (, type, )]
[intForType]
[type]
[intForType, ., size, (, ), +, 1]
[intForType, ., size, (, )]
[intForType]
[1]
[intForType, ., put, (, type, ,, newInt, )]
[intForType]
[type]
[newInt]
[newInt]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, ProcessExterns, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessProperties, (, )]
[new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), )]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, )]
[externedNames, ., size, (, )]
[externedNames]
[quotedNames, ., size, (, )]
[quotedNames]
[reservedNames, ., addAll, (, externedNames, )]
[reservedNames]
[externedNames]
[reservedNames, ., addAll, (, quotedNames, )]
[reservedNames]
[quotedNames]
[0]
[0]
[new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, )]
[FREQUENCY_COMPARATOR]
[propertyMap, ., values, (, )]
[propertyMap]
[!, p, ., skipAmbiguating]
[p, ., skipAmbiguating]
[p]
[++, numRenamedPropertyNames]
[numRenamedPropertyNames]
[propsByFreq, ., add, (, p, )]
[propsByFreq]
[p]
[++, numSkippedPropertyNames]
[numSkippedPropertyNames]
[reservedNames, ., add, (, p, ., oldName, )]
[reservedNames]
[p, ., oldName]
[p]
[new, PropertyGraph, (, Lists, ., newLinkedList, (, propsByFreq, ), )]
[Lists, ., newLinkedList, (, propsByFreq, )]
[Lists]
[propsByFreq]
[new, GreedyGraphColoring, <, Property, ,, Void, >, (, graph, ,, FREQUENCY_COMPARATOR, )]
[graph]
[FREQUENCY_COMPARATOR]
[coloring, ., color, (, )]
[coloring]
[new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[reservedNames]
[""]
[reservedCharacters]
[Maps, ., newHashMap, (, )]
[Maps]
[0]
[i, <, numNewPropertyNames]
[i]
[numNewPropertyNames]
[++, i]
[i]
[colorMap, ., put, (, i, ,, nameGen, ., generateNextName, (, ), )]
[colorMap]
[i]
[nameGen, ., generateNextName, (, )]
[nameGen]
[graph, ., getNodes, (, )]
[graph]
[node, ., getValue, (, ), ., newName]
[node, ., getValue, (, )]
[node]
[colorMap, ., get, (, node, ., getAnnotation, (, ), ., hashCode, (, ), )]
[colorMap]
[node, ., getAnnotation, (, ), ., hashCode, (, )]
[node, ., getAnnotation, (, )]
[node]
[renamingMap, ., put, (, node, ., getValue, (, ), ., oldName, ,, node, ., getValue, (, ), ., newName, )]
[renamingMap]
[node, ., getValue, (, ), ., oldName]
[node, ., getValue, (, )]
[node]
[node, ., getValue, (, ), ., newName]
[node, ., getValue, (, )]
[node]
[stringNodesToRename]
[n, ., getString, (, )]
[n]
[propertyMap, ., get, (, oldName, )]
[propertyMap]
[oldName]
[p, !=, null, &&, p, ., newName, !=, null]
[p, !=, null]
[p]
[null]
[p, ., newName, !=, null]
[p, ., newName]
[p]
[null]
[Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), )]
[Preconditions]
[oldName, ., equals, (, p, ., oldName, )]
[oldName]
[p, ., oldName]
[p]
[!, p, ., newName, ., equals, (, oldName, )]
[p, ., newName, ., equals, (, oldName, )]
[p, ., newName]
[p]
[oldName]
[n, ., setString, (, p, ., newName, )]
[n]
[p, ., newName]
[p]
[compiler, ., reportCodeChange, (, )]
[compiler]
[logger, ., fine, (, "Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties.", )]
[logger]
["Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames, +, " properties."]
["Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming ", +, numSkippedPropertyNames]
["Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames, +, " and skipped renaming "]
["Collapsed ", +, numRenamedPropertyNames, +, " properties into ", +, numNewPropertyNames]
["Collapsed ", +, numRenamedPropertyNames, +, " properties into "]
["Collapsed ", +, numRenamedPropertyNames]
["Collapsed "]
[numRenamedPropertyNames]
[" properties into "]
[numNewPropertyNames]
[" and skipped renaming "]
[numSkippedPropertyNames]
[" properties."]
[relatedBitsets, ., containsKey, (, type, )]
[relatedBitsets]
[type]
[relatedBitsets, ., get, (, type, )]
[relatedBitsets]
[type]
[new, RuntimeException, (, "Related types should have been computed for", +, " type: ", +, type, +, " but have not been.", )]
["Related types should have been computed for", +, " type: ", +, type, +, " but have not been."]
["Related types should have been computed for", +, " type: ", +, type]
["Related types should have been computed for", +, " type: "]
["Related types should have been computed for"]
[" type: "]
[type]
[" but have not been."]
[type, ., isUnionType, (, )]
[type]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[computeRelatedTypes, (, alt, )]
[alt]
[relatedBitsets, ., containsKey, (, type, )]
[relatedBitsets]
[type]
[new, JSTypeBitSet, (, intForType, ., size, (, ), )]
[intForType, ., size, (, )]
[intForType]
[relatedBitsets, ., put, (, type, ,, related, )]
[relatedBitsets]
[type]
[related]
[related, ., set, (, getIntForType, (, type, ), )]
[related]
[getIntForType, (, type, )]
[type]
[type, ., isFunctionPrototypeType, (, )]
[type]
[addRelatedInstance, (, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ,, related, )]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, )]
[(, (, ObjectType, ), type, )]
[(, ObjectType, ), type]
[type]
[related]
[type, ., toObjectType, (, ), ., getConstructor, (, )]
[type, ., toObjectType, (, )]
[type]
[constructor, !=, null, &&, constructor, ., getSubTypes, (, ), !=, null]
[constructor, !=, null]
[constructor]
[null]
[constructor, ., getSubTypes, (, ), !=, null]
[constructor, ., getSubTypes, (, )]
[constructor]
[null]
[constructor, ., getSubTypes, (, )]
[constructor]
[addRelatedInstance, (, subType, ,, related, )]
[subType]
[related]
[compiler, ., getTypeRegistry, (, ), ., getDirectImplementors, (, type, ., toObjectType, (, ), )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[type, ., toObjectType, (, )]
[type]
[addRelatedInstance, (, implementor, ,, related, )]
[implementor]
[related]
[constructor, ., hasInstanceType, (, )]
[constructor]
[constructor, ., getInstanceType, (, )]
[constructor]
[related, ., set, (, getIntForType, (, instanceType, ., getImplicitPrototype, (, ), ), )]
[related]
[getIntForType, (, instanceType, ., getImplicitPrototype, (, ), )]
[instanceType, ., getImplicitPrototype, (, )]
[instanceType]
[computeRelatedTypes, (, instanceType, )]
[instanceType]
[related, ., or, (, relatedBitsets, ., get, (, instanceType, ), )]
[related]
[relatedBitsets, ., get, (, instanceType, )]
[relatedBitsets]
[instanceType]
[Maps, ., newHashMap, (, )]
[Maps]
[props]
[nodes, ., put, (, prop, ,, new, PropertyGraphNode, (, prop, ), )]
[nodes]
[prop]
[new, PropertyGraphNode, (, prop, )]
[prop]
[Lists, ., <, GraphNode, <, Property, ,, Void, >, >, newArrayList, (, nodes, ., values, (, ), )]
[Lists]
[nodes, ., values, (, )]
[nodes]
[nodes, ., get, (, property, )]
[nodes]
[property]
[new, PropertySubGraph, (, )]
[nodes, ., values, (, )]
[nodes]
[node, ., setAnnotation, (, null, )]
[node]
[null]
[value, ., numOccurrences]
[value]
[new, JSTypeBitSet, (, intForType, ., size, (, ), )]
[intForType, ., size, (, )]
[intForType]
[!, relatedTypes, ., intersects, (, prop, ., relatedTypes, )]
[relatedTypes, ., intersects, (, prop, ., relatedTypes, )]
[relatedTypes]
[prop, ., relatedTypes]
[prop]
[relatedTypes, ., or, (, prop, ., relatedTypes, )]
[relatedTypes]
[prop, ., relatedTypes]
[prop]
[this, ., property]
[this]
[property]
[property]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, A, ), annotation]
[annotation]
[annotation]
[data]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[externedNames, ., add, (, dest, ., getString, (, ), )]
[externedNames]
[dest, ., getString, (, )]
[dest]
[Token, ., OBJECTLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[externedNames, ., add, (, child, ., getString, (, ), )]
[externedNames]
[child, ., getString, (, )]
[child]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[getJSType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[maybeMarkCandidate, (, propNode, ,, jstype, ,, t, )]
[propNode]
[jstype]
[t]
[Token, ., OBJECTLIT]
[Token]
[n, ., getFirstChild, (, )]
[n]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[!, key, ., isQuotedString, (, )]
[key, ., isQuotedString, (, )]
[key]
[getJSType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[maybeMarkCandidate, (, key, ,, jstype, ,, t, )]
[key]
[jstype]
[t]
[quotedNames, ., add, (, key, ., getString, (, ), )]
[quotedNames]
[key, ., getString, (, )]
[key]
[Token, ., GETELEM]
[Token]
[n, ., getLastChild, (, )]
[n]
[child, ., isString, (, )]
[child]
[quotedNames, ., add, (, child, ., getString, (, ), )]
[quotedNames]
[child, ., getString, (, )]
[child]
[n, ., getString, (, )]
[n]
[!, externedNames, ., contains, (, name, )]
[externedNames, ., contains, (, name, )]
[externedNames]
[name]
[stringNodesToRename, ., add, (, n, )]
[stringNodesToRename]
[n]
[recordProperty, (, name, ,, type, )]
[name]
[type]
[getProperty, (, name, )]
[name]
[prop, ., addType, (, type, )]
[prop]
[type]
[prop]
[type, ., isUnionType, (, )]
[type]
[type]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[isInvalidatingType, (, alt, )]
[alt]
[true]
[false]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, ), ||, objType, ., autoboxesTo, (, ), !=, null]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, ), ||, objType, ., isEnumType, (, )]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, ), ||, objType, ., isEmptyType, (, )]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, ), ||, objType, ., isUnknownType, (, )]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, ), ||, !, objType, ., hasReferenceName, (, )]
[objType, ==, null, ||, invalidatingTypes, ., contains, (, objType, )]
[objType, ==, null]
[objType]
[null]
[invalidatingTypes, ., contains, (, objType, )]
[invalidatingTypes]
[objType]
[!, objType, ., hasReferenceName, (, )]
[objType, ., hasReferenceName, (, )]
[objType]
[objType, ., isUnknownType, (, )]
[objType]
[objType, ., isEmptyType, (, )]
[objType]
[objType, ., isEnumType, (, )]
[objType]
[objType, ., autoboxesTo, (, ), !=, null]
[objType, ., autoboxesTo, (, )]
[objType]
[null]
[propertyMap, ., get, (, name, )]
[propertyMap]
[name]
[prop, ==, null]
[prop]
[null]
[prop]
[new, Property, (, name, )]
[name]
[propertyMap, ., put, (, name, ,, prop, )]
[propertyMap]
[name]
[prop]
[prop]
[n, ., getJSType, (, )]
[n]
[jsType, ==, null]
[jsType]
[null]
[compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[jsType]
[new, JSTypeBitSet, (, intForType, ., size, (, ), )]
[intForType, ., size, (, )]
[intForType]
[this, ., oldName]
[this]
[name]
[name, ., startsWith, (, SKIP_PREFIX, )]
[name]
[SKIP_PREFIX]
[skipAmbiguating]
[true]
[skipAmbiguating]
[++, numOccurrences]
[numOccurrences]
[newType, ., isUnionType, (, )]
[newType]
[newType]
[newType, ., restrictByNotNullOrUndefined, (, )]
[newType]
[newType, ., isUnionType, (, )]
[newType]
[newType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[newType, ., toMaybeUnionType, (, )]
[newType]
[addNonUnionType, (, alt, )]
[alt]
[addNonUnionType, (, newType, )]
[newType]
[skipAmbiguating, ||, isInvalidatingType, (, newType, )]
[skipAmbiguating]
[isInvalidatingType, (, newType, )]
[newType]
[skipAmbiguating]
[true]
[!, relatedTypes, ., get, (, getIntForType, (, newType, ), )]
[relatedTypes, ., get, (, getIntForType, (, newType, ), )]
[relatedTypes]
[getIntForType, (, newType, )]
[newType]
[computeRelatedTypes, (, newType, )]
[newType]
[relatedTypes, ., or, (, getRelatedTypesOnNonUnion, (, newType, ), )]
[relatedTypes]
[getRelatedTypesOnNonUnion, (, newType, )]
[newType]
[1L]
[size]
[0]
[0]
[Lists, ., newArrayList, (, )]
[Lists]
[-, 1, !=, (, current, =, nextSetBit, (, from, ), )]
[-, 1]
[1]
[(, current, =, nextSetBit, (, from, ), )]
[current]
[nextSetBit, (, from, )]
[from]
[types, ., add, (, intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, ), )]
[types]
[intForType, ., inverse, (, ), ., get, (, current, ), ., toString, (, )]
[intForType, ., inverse, (, ), ., get, (, current, )]
[intForType, ., inverse, (, )]
[intForType]
[current]
[from]
[current, +, 1]
[current]
[1]
[Joiner, ., on, (, " && ", ), ., join, (, types, )]
[Joiner, ., on, (, " && ", )]
[Joiner]
[" && "]
[types]
