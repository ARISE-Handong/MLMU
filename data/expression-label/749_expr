[false]
[0]
[new, ArrayList, <, Name, >, (, )]
[new, HashMap, <, String, ,, Name, >, (, )]
[compiler]
[null]
[root]
[this, ., compiler]
[this]
[compiler]
[this, ., externsRoot]
[this]
[externsRoot]
[this, ., root]
[this]
[root]
[externsRoot, !=, null]
[externsRoot]
[null]
[root, ., getParent, (, )]
[root]
[null]
[getOwnSlot, (, name, )]
[name]
[ensureGenerated, (, )]
[nameMap, ., get, (, name, )]
[nameMap]
[name]
[compiler, ., getTypeRegistry, (, ), ., getNativeObjectType, (, GLOBAL_THIS, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[GLOBAL_THIS]
[ensureGenerated, (, )]
[Collections, ., unmodifiableList, (, slot, ., getRefs, (, ), )]
[Collections]
[slot, ., getRefs, (, )]
[slot]
[this]
[ensureGenerated, (, )]
[Collections, ., unmodifiableCollection, (, getNameIndex, (, ), ., values, (, ), )]
[Collections]
[getNameIndex, (, ), ., values, (, )]
[getNameIndex, (, )]
[!, generated]
[generated]
[process, (, )]
[ensureGenerated, (, )]
[globalNames]
[ensureGenerated, (, )]
[nameMap]
[new, NodeTraversal, (, compiler, ,, new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), ), )]
[compiler]
[new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), )]
[new, NodeFilter, (, newNodes, )]
[newNodes]
[t, ., traverseAtScope, (, scope, )]
[t]
[scope]
[this, ., newNodes]
[this]
[newNodes]
[!, n, ., isQualifiedName, (, )]
[n, ., isQualifiedName, (, )]
[n]
[false]
[current]
[n]
[current, ., isGetProp, (, )]
[current]
[current]
[current, ., getFirstChild, (, )]
[current]
[newNodes, ., contains, (, current, )]
[newNodes]
[current]
[true]
[current, ., isName, (, ), &&, newNodes, ., contains, (, current, )]
[current, ., isName, (, )]
[current]
[newNodes, ., contains, (, current, )]
[newNodes]
[current]
[externsRoot, !=, null]
[externsRoot]
[null]
[inExterns]
[true]
[NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), )]
[NodeTraversal]
[compiler]
[externsRoot]
[new, BuildGlobalNamespace, (, )]
[inExterns]
[false]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, BuildGlobalNamespace, (, )]
[generated]
[true]
[getTopVarName, (, name, )]
[name]
[isGlobalVarReference, (, topVarName, ,, s, )]
[topVarName]
[s]
[name, ., indexOf, (, '.', )]
[name]
['.']
[firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (, 0, ,, firstDotIndex, )]
[firstDotIndex, ==, -, 1]
[firstDotIndex]
[-, 1]
[1]
[name]
[name, ., substring, (, 0, ,, firstDotIndex, )]
[name]
[0]
[firstDotIndex]
[s, ., getVar, (, name, )]
[s]
[name]
[v, ==, null, &&, externsScope, !=, null]
[v, ==, null]
[v]
[null]
[externsScope, !=, null]
[externsScope]
[null]
[v]
[externsScope, ., getVar, (, name, )]
[externsScope]
[name]
[v, !=, null, &&, !, v, ., isLocal, (, )]
[v, !=, null]
[v]
[null]
[!, v, ., isLocal, (, )]
[v, ., isLocal, (, )]
[v]
[s, ., getParent, (, ), ==, null]
[s, ., getParent, (, )]
[s]
[null]
[null]
[this, ., nodeFilter]
[this]
[nodeFilter]
[collect, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[true]
[nodeFilter, !=, null, &&, !, nodeFilter, ., apply, (, n, )]
[nodeFilter, !=, null]
[nodeFilter]
[null]
[!, nodeFilter, ., apply, (, n, )]
[nodeFilter, ., apply, (, n, )]
[nodeFilter]
[n]
[externsRoot, !=, null, &&, n, ==, externsRoot]
[externsRoot, !=, null]
[externsRoot]
[null]
[n, ==, externsRoot]
[n]
[externsRoot]
[externsScope]
[t, ., getScope, (, )]
[t]
[false]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[false]
[n, ., getType, (, )]
[n]
[Token, ., GETTER_DEF]
[Token]
[Token, ., SETTER_DEF]
[Token]
[Token, ., STRING_KEY]
[Token]
[name]
[null]
[parent, !=, null, &&, parent, ., isObjectLit, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., isObjectLit, (, )]
[parent]
[name]
[getNameForObjLitKey, (, n, )]
[n]
[name, ==, null]
[name]
[null]
[isSet]
[true]
[n, ., getType, (, )]
[n]
[Token, ., STRING_KEY]
[Token]
[type]
[getValueType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., GETTER_DEF]
[Token]
[type]
[Name, ., Type, ., GET]
[Name, ., Type]
[Name]
[Token, ., SETTER_DEF]
[Token]
[type]
[Name, ., Type, ., SET]
[Name, ., Type]
[Name]
[new, IllegalStateException, (, "unexpected:", +, n, )]
["unexpected:", +, n]
["unexpected:"]
[n]
[Token, ., NAME]
[Token]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., VAR]
[Token]
[isSet]
[true]
[n, ., getFirstChild, (, )]
[n]
[type]
[rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, )]
[rvalue, ==, null]
[rvalue]
[null]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[getValueType, (, rvalue, )]
[rvalue]
[Token, ., ASSIGN]
[Token]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isSet]
[true]
[type]
[getValueType, (, n, ., getNext, (, ), )]
[n, ., getNext, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., FUNCTION]
[Token]
[parent, ., getParent, (, )]
[parent]
[gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, )]
[gramps, ==, null]
[gramps]
[null]
[NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil]
[parent]
[isSet]
[true]
[type]
[Name, ., Type, ., FUNCTION]
[Name, ., Type]
[Name]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[isSet]
[true]
[type]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isSet]
[true]
[type]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[name]
[n, ., getString, (, )]
[n]
[Token, ., GETPROP]
[Token]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., ASSIGN]
[Token]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isSet]
[true]
[type]
[getValueType, (, n, ., getNext, (, ), )]
[n, ., getNext, (, )]
[n]
[isPropAssign]
[true]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[isSet]
[true]
[type]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[Token, ., GETPROP]
[Token]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[isSet]
[true]
[type]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[name]
[n, ., getQualifiedName, (, )]
[n]
[name, ==, null]
[name]
[null]
[t, ., getScope, (, )]
[t]
[!, isGlobalNameReference, (, name, ,, scope, )]
[isGlobalNameReference, (, name, ,, scope, )]
[name]
[scope]
[isSet]
[isGlobalScope, (, scope, )]
[scope]
[handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, )]
[t]
[n]
[parent]
[name]
[isPropAssign]
[type]
[handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, )]
[t]
[n]
[parent]
[name]
[handleGet, (, t, ,, n, ,, parent, ,, name, )]
[t]
[n]
[parent]
[name]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), )]
[Preconditions]
[parent, ., isObjectLit, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[gramps, ==, null]
[gramps]
[null]
[null]
[gramps, ., getParent, (, )]
[gramps]
[gramps, ., getType, (, )]
[gramps]
[Token, ., NAME]
[Token]
[greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, )]
[greatGramps, ==, null]
[greatGramps]
[null]
[!, greatGramps, ., isVar, (, )]
[greatGramps, ., isVar, (, )]
[greatGramps]
[null]
[name]
[gramps, ., getString, (, )]
[gramps]
[Token, ., ASSIGN]
[Token]
[gramps, ., getFirstChild, (, )]
[gramps]
[name]
[lvalue, ., getQualifiedName, (, )]
[lvalue]
[Token, ., STRING_KEY]
[Token]
[greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, )]
[greatGramps, !=, null]
[greatGramps]
[null]
[greatGramps, ., isObjectLit, (, )]
[greatGramps]
[name]
[getNameForObjLitKey, (, gramps, )]
[gramps]
[null]
[null]
[name, !=, null]
[name]
[null]
[n, ., getString, (, )]
[n]
[TokenStream, ., isJSIdentifier, (, key, )]
[TokenStream]
[key]
[name, +, '.', +, key]
[name, +, '.']
[name]
['.']
[key]
[null]
[n, ., getType, (, )]
[n]
[Token, ., OBJECTLIT]
[Token]
[Name, ., Type, ., OBJECTLIT]
[Name, ., Type]
[Name]
[Token, ., FUNCTION]
[Token]
[Name, ., Type, ., FUNCTION]
[Name, ., Type]
[Name]
[Token, ., OR]
[Token]
[getValueType, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., HOOK]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[getValueType, (, second, )]
[second]
[t, !=, Name, ., Type, ., OTHER]
[t]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[t]
[second, ., getNext, (, )]
[second]
[getValueType, (, third, )]
[third]
[Name, ., Type, ., OTHER]
[Name, ., Type]
[Name]
[maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, )]
[t]
[n]
[parent]
[name]
[getOrCreateName, (, name, )]
[name]
[nameObj, ., type]
[nameObj]
[type]
[new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, )]
[t]
[n]
[nameObj]
[Ref, ., Type, ., SET_FROM_GLOBAL]
[Ref, ., Type]
[Ref]
[currentPreOrderIndex, ++]
[currentPreOrderIndex]
[nameObj, ., addRef, (, set, )]
[nameObj]
[set]
[isNestedAssign, (, parent, )]
[parent]
[new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, )]
[t]
[n]
[nameObj]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[currentPreOrderIndex, ++]
[currentPreOrderIndex]
[nameObj, ., addRef, (, get, )]
[nameObj]
[get]
[Ref, ., markTwins, (, set, ,, get, )]
[Ref]
[set]
[get]
[isTypeDeclaration, (, n, ,, parent, )]
[n]
[parent]
[nameObj, ., setDeclaredType, (, )]
[nameObj]
[NodeUtil, ., getRValueOfLValue, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., getBestJSDocInfo, (, n, )]
[NodeUtil]
[n]
[info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), )]
[info, !=, null, &&, valueNode, !=, null]
[info, !=, null]
[info]
[null]
[valueNode, !=, null]
[valueNode]
[null]
[(, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), )]
[info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, )]
[info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, )]
[info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, )]
[info, ., isConstructor, (, )]
[info]
[valueNode, ., isFunction, (, )]
[valueNode]
[info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, )]
[info, ., isInterface, (, )]
[info]
[valueNode, ., isFunction, (, )]
[valueNode]
[info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, )]
[info, ., hasEnumParameterType, (, )]
[info]
[valueNode, ., isObjectLit, (, )]
[valueNode]
[maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, )]
[t]
[n]
[parent]
[name]
[getOrCreateName, (, name, )]
[name]
[new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, )]
[t]
[n]
[nameObj]
[Ref, ., Type, ., SET_FROM_LOCAL]
[Ref, ., Type]
[Ref]
[currentPreOrderIndex, ++]
[currentPreOrderIndex]
[nameObj, ., addRef, (, set, )]
[nameObj]
[set]
[isNestedAssign, (, parent, )]
[parent]
[new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, )]
[t]
[n]
[nameObj]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[currentPreOrderIndex, ++]
[currentPreOrderIndex]
[nameObj, ., addRef, (, get, )]
[nameObj]
[get]
[Ref, ., markTwins, (, set, ,, get, )]
[Ref]
[set]
[get]
[maybeHandlePrototypePrefix, (, t, ,, n, ,, parent, ,, name, )]
[t]
[n]
[parent]
[name]
[Ref, ., Type, ., DIRECT_GET]
[Ref, ., Type]
[Ref]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., IF]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[Token, ., NOT]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Token, ., CALL]
[Token]
[type]
[n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[Ref, ., Type, ., CALL_GET]
[Ref, ., Type]
[Ref]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[Token, ., NEW]
[Token]
[type]
[n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[Ref, ., Type, ., DIRECT_GET]
[Ref, ., Type]
[Ref]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[Token, ., OR]
[Token]
[Token, ., AND]
[Token]
[type]
[determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, )]
[t]
[parent]
[name]
[Token, ., HOOK]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[type]
[determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, )]
[t]
[parent]
[name]
[Token, ., DELPROP]
[Token]
[type]
[Ref, ., Type, ., DELETE_PROP]
[Ref, ., Type]
[Ref]
[type]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[handleGet, (, t, ,, n, ,, parent, ,, name, ,, type, )]
[t]
[n]
[parent]
[name]
[type]
[parent]
[parent, ., getAncestors, (, )]
[parent]
[anc, ., getType, (, )]
[anc]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., VAR]
[Token]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., FOR]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[Token, ., NOT]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Ref, ., Type, ., DIRECT_GET]
[Ref, ., Type]
[Ref]
[Token, ., HOOK]
[Token]
[anc, ., getFirstChild, (, ), ==, prev]
[anc, ., getFirstChild, (, )]
[anc]
[prev]
[Ref, ., Type, ., DIRECT_GET]
[Ref, ., Type]
[Ref]
[Token, ., ASSIGN]
[Token]
[!, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[name]
[anc, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[anc, ., getFirstChild, (, )]
[anc]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[Token, ., NAME]
[Token]
[!, name, ., equals, (, anc, ., getString, (, ), )]
[name, ., equals, (, anc, ., getString, (, ), )]
[name]
[anc, ., getString, (, )]
[anc]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[Token, ., CALL]
[Token]
[anc, ., getFirstChild, (, ), !=, prev]
[anc, ., getFirstChild, (, )]
[anc]
[prev]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[Token, ., DELPROP]
[Token]
[Ref, ., Type, ., DELETE_PROP]
[Ref, ., Type]
[Ref]
[prev]
[anc]
[Ref, ., Type, ., ALIASING_GET]
[Ref, ., Type]
[Ref]
[getOrCreateName, (, name, )]
[name]
[nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, ), )]
[nameObj]
[new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, )]
[t]
[n]
[nameObj]
[type]
[currentPreOrderIndex, ++]
[currentPreOrderIndex]
[name, ., endsWith, (, ".prototype", )]
[name]
[".prototype"]
[numLevelsToRemove]
[1]
[prefix]
[name, ., substring, (, 0, ,, name, ., length, (, ), -, 10, )]
[name]
[0]
[name, ., length, (, ), -, 10]
[name, ., length, (, )]
[name]
[10]
[name, ., indexOf, (, ".prototype.", )]
[name]
[".prototype."]
[i, ==, -, 1]
[i]
[-, 1]
[1]
[false]
[prefix]
[name, ., substring, (, 0, ,, i, )]
[name]
[0]
[i]
[numLevelsToRemove]
[2]
[i]
[name, ., indexOf, (, '.', ,, i, +, 11, )]
[name]
['.']
[i, +, 11]
[i]
[11]
[i, >=, 0]
[i]
[0]
[numLevelsToRemove, ++]
[numLevelsToRemove]
[i]
[name, ., indexOf, (, '.', ,, i, +, 1, )]
[name]
['.']
[i, +, 1]
[i]
[1]
[parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[parent, !=, null]
[parent]
[null]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[true]
[0]
[i, <, numLevelsToRemove]
[i]
[numLevelsToRemove]
[i, ++]
[i]
[parent]
[n]
[n]
[n, ., getFirstChild, (, )]
[n]
[handleGet, (, t, ,, n, ,, parent, ,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, )]
[t]
[n]
[parent]
[prefix]
[Ref, ., Type, ., PROTOTYPE_GET]
[Ref, ., Type]
[Ref]
[true]
[parent, ., isAssign, (, ), &&, !, parent, ., getParent, (, ), ., isExprResult, (, )]
[parent, ., isAssign, (, )]
[parent]
[!, parent, ., getParent, (, ), ., isExprResult, (, )]
[parent, ., getParent, (, ), ., isExprResult, (, )]
[parent, ., getParent, (, )]
[parent]
[nameMap, ., get, (, name, )]
[nameMap]
[name]
[node, ==, null]
[node]
[null]
[name, ., lastIndexOf, (, '.', )]
[name]
['.']
[i, >=, 0]
[i]
[0]
[name, ., substring, (, 0, ,, i, )]
[name]
[0]
[i]
[getOrCreateName, (, parentName, )]
[parentName]
[node]
[parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, )]
[parent]
[name, ., substring, (, i, +, 1, )]
[name]
[i, +, 1]
[i]
[1]
[inExterns]
[node]
[new, Name, (, name, ,, null, ,, inExterns, )]
[name]
[null]
[inExterns]
[globalNames, ., add, (, node, )]
[globalNames]
[node]
[nameMap, ., put, (, name, ,, node, )]
[nameMap]
[name]
[node]
[node]
[false]
[false]
[0]
[0]
[0]
[0]
[0]
[0]
[null]
[this, ., baseName]
[this]
[name]
[this, ., parent]
[this]
[parent]
[this, ., type]
[this]
[Type, ., OTHER]
[Type]
[this, ., inExterns]
[this]
[inExterns]
[props, ==, null]
[props]
[null]
[props]
[new, ArrayList, <, Name, >, (, )]
[new, Name, (, name, ,, this, ,, inExterns, )]
[name]
[this]
[inExterns]
[props, ., add, (, node, )]
[props]
[node]
[node]
[baseName]
[getFullName, (, )]
[parent, ==, null, ?, baseName, :, parent, ., getFullName, (, ), +, '.', +, baseName]
[parent, ==, null]
[parent]
[null]
[baseName]
[parent, ., getFullName, (, ), +, '.', +, baseName]
[parent, ., getFullName, (, ), +, '.']
[parent, ., getFullName, (, )]
[parent]
['.']
[baseName]
[declaration]
[false]
[null]
[addRefInternal, (, ref, )]
[ref]
[ref, ., type]
[ref]
[SET_FROM_GLOBAL]
[declaration, ==, null]
[declaration]
[null]
[declaration]
[ref]
[docInfo]
[getDocInfoForDeclaration, (, ref, )]
[ref]
[globalSets, ++]
[globalSets]
[SET_FROM_LOCAL]
[localSets, ++]
[localSets]
[PROTOTYPE_GET]
[DIRECT_GET]
[totalGets, ++]
[totalGets]
[ALIASING_GET]
[aliasingGets, ++]
[aliasingGets]
[totalGets, ++]
[totalGets]
[CALL_GET]
[callGets, ++]
[callGets]
[totalGets, ++]
[totalGets]
[DELETE_PROP]
[deleteProps, ++]
[deleteProps]
[new, IllegalStateException, (, )]
[refs, !=, null, &&, refs, ., remove, (, ref, )]
[refs, !=, null]
[refs]
[null]
[refs, ., remove, (, ref, )]
[refs]
[ref]
[ref, ==, declaration]
[ref]
[declaration]
[declaration]
[null]
[refs, !=, null]
[refs]
[null]
[refs]
[maybeNewDecl, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL]
[maybeNewDecl, ., type]
[maybeNewDecl]
[Ref, ., Type, ., SET_FROM_GLOBAL]
[Ref, ., Type]
[Ref]
[declaration]
[maybeNewDecl]
[ref, ., type]
[ref]
[SET_FROM_GLOBAL]
[globalSets, --]
[globalSets]
[SET_FROM_LOCAL]
[localSets, --]
[localSets]
[PROTOTYPE_GET]
[DIRECT_GET]
[totalGets, --]
[totalGets]
[ALIASING_GET]
[aliasingGets, --]
[aliasingGets]
[totalGets, --]
[totalGets]
[CALL_GET]
[callGets, --]
[callGets]
[totalGets, --]
[totalGets]
[DELETE_PROP]
[deleteProps, --]
[deleteProps]
[new, IllegalStateException, (, )]
[refs, ==, null, ?, ImmutableList, ., <, Ref, >, of, (, ), :, refs]
[refs, ==, null]
[refs]
[null]
[ImmutableList, ., <, Ref, >, of, (, )]
[ImmutableList]
[refs]
[refs, ==, null]
[refs]
[null]
[refs]
[Lists, ., newArrayList, (, )]
[Lists]
[refs, ., add, (, ref, )]
[refs]
[ref]
[!, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0]
[!, canCollapseUnannotatedChildNames, (, )]
[canCollapseUnannotatedChildNames, (, )]
[totalGets, >, 0]
[totalGets]
[0]
[false]
[props, !=, null]
[props]
[null]
[props]
[!, n, ., canCollapse, (, )]
[n, ., canCollapse, (, )]
[n]
[false]
[true]
[getRefs, (, ), ., size, (, ), ==, 1]
[getRefs, (, ), ., size, (, )]
[getRefs, (, )]
[1]
[refs, ., get, (, 0, )]
[refs]
[0]
[ref, ., node, ., getJSDocInfo, (, )]
[ref, ., node]
[ref]
[ref, ., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isExprResult, (, )]
[ref, ., node, ., getParent, (, ), !=, null]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[null]
[ref, ., node, ., getParent, (, ), ., isExprResult, (, )]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[true]
[false]
[!, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, )]
[!, inExterns, &&, !, isGetOrSetDefinition, (, )]
[!, inExterns]
[inExterns]
[!, isGetOrSetDefinition, (, )]
[isGetOrSetDefinition, (, )]
[(, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, )]
[declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0]
[declaredType]
[(, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0]
[(, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, )]
[(, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), )]
[parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, )]
[parent, ==, null]
[parent]
[null]
[parent, ., canCollapseUnannotatedChildNames, (, )]
[parent]
[(, globalSets, >, 0, ||, localSets, >, 0, )]
[globalSets, >, 0, ||, localSets, >, 0]
[globalSets, >, 0]
[globalSets]
[0]
[localSets, >, 0]
[localSets]
[0]
[deleteProps, ==, 0]
[deleteProps]
[0]
[this, ., type, ==, Type, ., GET, ||, this, ., type, ==, Type, ., SET]
[this, ., type, ==, Type, ., GET]
[this, ., type]
[this]
[Type, ., GET]
[Type]
[this, ., type, ==, Type, ., SET]
[this, ., type]
[this]
[Type, ., SET]
[Type]
[type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0]
[type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0]
[type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1]
[type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, )]
[type, ==, Type, ., OTHER]
[type]
[Type, ., OTHER]
[Type]
[isGetOrSetDefinition, (, )]
[globalSets, !=, 1]
[globalSets]
[1]
[localSets, !=, 0]
[localSets]
[0]
[deleteProps, !=, 0]
[deleteProps]
[0]
[false]
[Preconditions, ., checkNotNull, (, declaration, )]
[Preconditions]
[declaration]
[declaration, ., getTwin, (, ), !=, null]
[declaration, ., getTwin, (, )]
[declaration]
[null]
[false]
[declaredType]
[true]
[parent, !=, null, &&, parent, ., shouldKeepKeys, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., shouldKeepKeys, (, )]
[parent]
[false]
[aliasingGets, >, 0]
[aliasingGets]
[0]
[false]
[(, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), )]
[parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, )]
[parent, ==, null]
[parent]
[null]
[parent, ., canCollapseUnannotatedChildNames, (, )]
[parent]
[type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0]
[type, ==, Type, ., OBJECTLIT]
[type]
[Type, ., OBJECTLIT]
[Type]
[aliasingGets, >, 0]
[aliasingGets]
[0]
[globalSets, ==, 0, &&, localSets, >, 0]
[globalSets, ==, 0]
[globalSets]
[0]
[localSets, >, 0]
[localSets]
[0]
[declaredType]
[true]
[parent]
[ancestor, !=, null]
[ancestor]
[null]
[ancestor]
[ancestor, ., parent]
[ancestor]
[ancestor, ., hasDeclaredTypeDescendant]
[ancestor]
[true]
[declaredType]
[hasDeclaredTypeDescendant, &&, type, ==, Type, ., OBJECTLIT]
[hasDeclaredTypeDescendant]
[type, ==, Type, ., OBJECTLIT]
[type]
[Type, ., OBJECTLIT]
[Type]
[parent, ==, null]
[parent]
[null]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets="]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets="]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets="]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets="]
[getFullName, (, ), +, " (", +, type, +, "): globalSets=", +, globalSets]
[getFullName, (, ), +, " (", +, type, +, "): globalSets="]
[getFullName, (, ), +, " (", +, type]
[getFullName, (, ), +, " ("]
[getFullName, (, )]
[" ("]
[type]
["): globalSets="]
[globalSets]
[", localSets="]
[localSets]
[", totalGets="]
[totalGets]
[", aliasingGets="]
[aliasingGets]
[", callGets="]
[callGets]
[docInfo]
[ref, ., node, !=, null]
[ref, ., node]
[ref]
[null]
[ref, ., node, ., getParent, (, )]
[ref, ., node]
[ref]
[refParent, ., getType, (, )]
[refParent]
[Token, ., FUNCTION]
[Token]
[Token, ., ASSIGN]
[Token]
[refParent, ., getJSDocInfo, (, )]
[refParent]
[Token, ., VAR]
[Token]
[ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, )]
[ref, ., node, ==, refParent, ., getFirstChild, (, )]
[ref, ., node]
[ref]
[refParent, ., getFirstChild, (, )]
[refParent]
[refParent, ., getJSDocInfo, (, )]
[refParent]
[ref, ., node, ., getJSDocInfo, (, )]
[ref, ., node]
[ref]
[null]
[null]
[this, ., node]
[this]
[node]
[this, ., name]
[this]
[name]
[this, ., module]
[this]
[t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, )]
[t, ., getInput, (, ), ==, null]
[t, ., getInput, (, )]
[t]
[null]
[null]
[t, ., getInput, (, ), ., getModule, (, )]
[t, ., getInput, (, )]
[t]
[this, ., source]
[this]
[node, ., getStaticSourceFile, (, )]
[node]
[this, ., type]
[this]
[type]
[this, ., scope]
[this]
[t, ., getScope, (, )]
[t]
[this, ., preOrderIndex]
[this]
[index]
[this, ., node]
[this]
[original, ., node]
[original]
[this, ., name]
[this]
[original, ., name]
[original]
[this, ., module]
[this]
[original, ., module]
[original]
[this, ., source]
[this]
[original, ., source]
[original]
[this, ., type]
[this]
[type]
[this, ., scope]
[this]
[original, ., scope]
[original]
[this, ., preOrderIndex]
[this]
[index]
[this, ., type]
[this]
[type]
[this, ., module]
[this]
[null]
[this, ., source]
[this]
[null]
[this, ., scope]
[this]
[null]
[this, ., name]
[this]
[null]
[this, ., preOrderIndex]
[this]
[index]
[node]
[source]
[name]
[module]
[source, ==, null, ?, "", :, source, ., getName, (, )]
[source, ==, null]
[source]
[null]
[""]
[source, ., getName, (, )]
[source]
[twin]
[type, ==, Type, ., SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL]
[type, ==, Type, ., SET_FROM_GLOBAL]
[type]
[Type, ., SET_FROM_GLOBAL]
[Type]
[type, ==, Type, ., SET_FROM_LOCAL]
[type]
[Type, ., SET_FROM_LOCAL]
[Type]
[Preconditions, ., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), )]
[Preconditions]
[(, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, )]
[(, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, )]
[a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET]
[a, ., type, ==, Type, ., ALIASING_GET]
[a, ., type]
[a]
[Type, ., ALIASING_GET]
[Type]
[b, ., type, ==, Type, ., ALIASING_GET]
[b, ., type]
[b]
[Type, ., ALIASING_GET]
[Type]
[(, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, )]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL]
[a, ., type, ==, Type, ., SET_FROM_GLOBAL]
[a, ., type]
[a]
[Type, ., SET_FROM_GLOBAL]
[Type]
[a, ., type, ==, Type, ., SET_FROM_LOCAL]
[a, ., type]
[a]
[Type, ., SET_FROM_LOCAL]
[Type]
[b, ., type, ==, Type, ., SET_FROM_GLOBAL]
[b, ., type]
[b]
[Type, ., SET_FROM_GLOBAL]
[Type]
[b, ., type, ==, Type, ., SET_FROM_LOCAL]
[b, ., type]
[b]
[Type, ., SET_FROM_LOCAL]
[Type]
[a, ., twin]
[a]
[b]
[b, ., twin]
[b]
[a]
[new, Ref, (, this, ,, type, ,, this, ., preOrderIndex, )]
[this]
[type]
[this, ., preOrderIndex]
[this]
[new, Ref, (, type, ,, -, 1, )]
[type]
[-, 1]
[1]
[ImmutableSet, ., of, (, )]
[ImmutableSet]
[this, ., compiler]
[this]
[compiler]
[this, ., stream]
[this]
[stream]
[this, ., isInterestingSymbol]
[this]
[isInterestingSymbol]
[new, GlobalNamespace, (, compiler, ,, externs, ,, root, )]
[compiler]
[externs]
[root]
[Sets, ., newTreeSet, (, )]
[Sets]
[namespace, ., getNameIndex, (, ), ., keySet, (, )]
[namespace, ., getNameIndex, (, )]
[namespace]
[isInterestingSymbol, ., apply, (, name, )]
[isInterestingSymbol]
[name]
[currentSymbols, ., add, (, name, )]
[currentSymbols]
[name]
[compiler, ., getLastPassName, (, )]
[compiler]
[passName, ==, null]
[passName]
[null]
[passName]
["[Unknown pass]"]
[currentSymbols]
[!, previousSymbolsInTree, ., contains, (, sym, )]
[previousSymbolsInTree, ., contains, (, sym, )]
[previousSymbolsInTree]
[sym]
[stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), )]
[stream]
[String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, )]
[String]
["%s: Added by %s"]
[sym]
[passName]
[previousSymbolsInTree]
[!, currentSymbols, ., contains, (, sym, )]
[currentSymbols, ., contains, (, sym, )]
[currentSymbols]
[sym]
[stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), )]
[stream]
[String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, )]
[String]
["%s: Removed by %s"]
[sym]
[passName]
[previousSymbolsInTree]
[currentSymbols]
