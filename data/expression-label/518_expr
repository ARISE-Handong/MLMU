[node, ., getType, (, )]
[node]
[Token, ., ADD]
[Token]
[Token, ., AND]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., COMMA]
[Token]
[Token, ., DIV]
[Token]
[Token, ., EQ]
[Token]
[Token, ., GE]
[Token]
[Token, ., GT]
[Token]
[Token, ., IN]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., LE]
[Token]
[Token, ., LSH]
[Token]
[Token, ., LT]
[Token]
[Token, ., MOD]
[Token]
[Token, ., MUL]
[Token]
[Token, ., NE]
[Token]
[Token, ., OR]
[Token]
[Token, ., RSH]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., SUB]
[Token]
[Token, ., URSH]
[Token]
[processInfixExpression, (, (, InfixExpression, ), node, )]
[(, InfixExpression, ), node]
[node]
[Token, ., ARRAYLIT]
[Token]
[processArrayLiteral, (, (, ArrayLiteral, ), node, )]
[(, ArrayLiteral, ), node]
[node]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[processAssignment, (, (, Assignment, ), node, )]
[(, Assignment, ), node]
[node]
[Token, ., BITNOT]
[Token]
[Token, ., DEC]
[Token]
[Token, ., DELPROP]
[Token]
[Token, ., INC]
[Token]
[Token, ., NEG]
[Token]
[Token, ., NOT]
[Token]
[Token, ., POS]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[processUnaryExpression, (, (, UnaryExpression, ), node, )]
[(, UnaryExpression, ), node]
[node]
[Token, ., BLOCK]
[Token]
[node, instanceof, Block]
[node]
[processBlock, (, (, Block, ), node, )]
[(, Block, ), node]
[node]
[node, instanceof, Scope]
[node]
[processScope, (, (, Scope, ), node, )]
[(, Scope, ), node]
[node]
[new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: "]
["Unexpected node type.  class: ", +, node, ., getClass, (, )]
["Unexpected node type.  class: "]
[node, ., getClass, (, )]
[node]
[" type: "]
[Token, ., typeToName, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[Token, ., BREAK]
[Token]
[processBreakStatement, (, (, BreakStatement, ), node, )]
[(, BreakStatement, ), node]
[node]
[Token, ., CALL]
[Token]
[processFunctionCall, (, (, FunctionCall, ), node, )]
[(, FunctionCall, ), node]
[node]
[Token, ., CASE]
[Token]
[Token, ., DEFAULT]
[Token]
[processSwitchCase, (, (, SwitchCase, ), node, )]
[(, SwitchCase, ), node]
[node]
[Token, ., CATCH]
[Token]
[processCatchClause, (, (, CatchClause, ), node, )]
[(, CatchClause, ), node]
[node]
[Token, ., COLON]
[Token]
[processObjectProperty, (, (, ObjectProperty, ), node, )]
[(, ObjectProperty, ), node]
[node]
[Token, ., CONTINUE]
[Token]
[processContinueStatement, (, (, ContinueStatement, ), node, )]
[(, ContinueStatement, ), node]
[node]
[Token, ., DO]
[Token]
[processDoLoop, (, (, DoLoop, ), node, )]
[(, DoLoop, ), node]
[node]
[Token, ., EMPTY]
[Token]
[(, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, )]
[(, node, instanceof, EmptyExpression, )]
[node, instanceof, EmptyExpression]
[node]
[processEmptyExpression, (, (, EmptyExpression, ), node, )]
[(, EmptyExpression, ), node]
[node]
[processEmptyStatement, (, (, EmptyStatement, ), node, )]
[(, EmptyStatement, ), node]
[node]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., EXPR_VOID]
[Token]
[node, instanceof, ExpressionStatement]
[node]
[processExpressionStatement, (, (, ExpressionStatement, ), node, )]
[(, ExpressionStatement, ), node]
[node]
[node, instanceof, LabeledStatement]
[node]
[processLabeledStatement, (, (, LabeledStatement, ), node, )]
[(, LabeledStatement, ), node]
[node]
[new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: "]
["Unexpected node type.  class: ", +, node, ., getClass, (, )]
["Unexpected node type.  class: "]
[node, ., getClass, (, )]
[node]
[" type: "]
[Token, ., typeToName, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[Token, ., DEBUGGER]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., NULL]
[Token]
[Token, ., THIS]
[Token]
[Token, ., TRUE]
[Token]
[processKeywordLiteral, (, (, KeywordLiteral, ), node, )]
[(, KeywordLiteral, ), node]
[node]
[Token, ., FOR]
[Token]
[node, instanceof, ForInLoop]
[node]
[processForInLoop, (, (, ForInLoop, ), node, )]
[(, ForInLoop, ), node]
[node]
[node, instanceof, ForLoop]
[node]
[processForLoop, (, (, ForLoop, ), node, )]
[(, ForLoop, ), node]
[node]
[new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: "]
["Unexpected node type.  class: ", +, node, ., getClass, (, )]
["Unexpected node type.  class: "]
[node, ., getClass, (, )]
[node]
[" type: "]
[Token, ., typeToName, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[Token, ., FUNCTION]
[Token]
[processFunctionNode, (, (, FunctionNode, ), node, )]
[(, FunctionNode, ), node]
[node]
[Token, ., GETELEM]
[Token]
[processElementGet, (, (, ElementGet, ), node, )]
[(, ElementGet, ), node]
[node]
[Token, ., GETPROP]
[Token]
[processPropertyGet, (, (, PropertyGet, ), node, )]
[(, PropertyGet, ), node]
[node]
[Token, ., HOOK]
[Token]
[processConditionalExpression, (, (, ConditionalExpression, ), node, )]
[(, ConditionalExpression, ), node]
[node]
[Token, ., IF]
[Token]
[processIfStatement, (, (, IfStatement, ), node, )]
[(, IfStatement, ), node]
[node]
[Token, ., LABEL]
[Token]
[processLabel, (, (, Label, ), node, )]
[(, Label, ), node]
[node]
[Token, ., LP]
[Token]
[processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, )]
[(, ParenthesizedExpression, ), node]
[node]
[Token, ., NAME]
[Token]
[processName, (, (, Name, ), node, )]
[(, Name, ), node]
[node]
[Token, ., NEW]
[Token]
[processNewExpression, (, (, NewExpression, ), node, )]
[(, NewExpression, ), node]
[node]
[Token, ., NUMBER]
[Token]
[processNumberLiteral, (, (, NumberLiteral, ), node, )]
[(, NumberLiteral, ), node]
[node]
[Token, ., OBJECTLIT]
[Token]
[processObjectLiteral, (, (, ObjectLiteral, ), node, )]
[(, ObjectLiteral, ), node]
[node]
[Token, ., REGEXP]
[Token]
[processRegExpLiteral, (, (, RegExpLiteral, ), node, )]
[(, RegExpLiteral, ), node]
[node]
[Token, ., RETURN]
[Token]
[processReturnStatement, (, (, ReturnStatement, ), node, )]
[(, ReturnStatement, ), node]
[node]
[Token, ., SCRIPT]
[Token]
[processAstRoot, (, (, AstRoot, ), node, )]
[(, AstRoot, ), node]
[node]
[Token, ., STRING]
[Token]
[processStringLiteral, (, (, StringLiteral, ), node, )]
[(, StringLiteral, ), node]
[node]
[Token, ., SWITCH]
[Token]
[processSwitchStatement, (, (, SwitchStatement, ), node, )]
[(, SwitchStatement, ), node]
[node]
[Token, ., THROW]
[Token]
[processThrowStatement, (, (, ThrowStatement, ), node, )]
[(, ThrowStatement, ), node]
[node]
[Token, ., TRY]
[Token]
[processTryStatement, (, (, TryStatement, ), node, )]
[(, TryStatement, ), node]
[node]
[Token, ., CONST]
[Token]
[Token, ., VAR]
[Token]
[node, instanceof, VariableDeclaration]
[node]
[processVariableDeclaration, (, (, VariableDeclaration, ), node, )]
[(, VariableDeclaration, ), node]
[node]
[node, instanceof, VariableInitializer]
[node]
[processVariableInitializer, (, (, VariableInitializer, ), node, )]
[(, VariableInitializer, ), node]
[node]
[new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), )]
["Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: "]
["Unexpected node type.  class: ", +, node, ., getClass, (, )]
["Unexpected node type.  class: "]
[node, ., getClass, (, )]
[node]
[" type: "]
[Token, ., typeToName, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[Token, ., WHILE]
[Token]
[processWhileLoop, (, (, WhileLoop, ), node, )]
[(, WhileLoop, ), node]
[node]
[Token, ., WITH]
[Token]
[processWithStatement, (, (, WithStatement, ), node, )]
[(, WithStatement, ), node]
[node]
[processIllegalToken, (, node, )]
[node]
