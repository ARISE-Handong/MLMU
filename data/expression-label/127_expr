[DiagnosticType, ., error, (, "JSC_UNREACHABLE_CODE", ,, "unreachable code", )]
[DiagnosticType]
["JSC_UNREACHABLE_CODE"]
["unreachable code"]
[this, ., compiler]
[this]
[compiler]
[this, ., level]
[this]
[level]
[initScope, (, t, ., getControlFlowGraph, (, ), )]
[t, ., getControlFlowGraph, (, )]
[t]
[t, ., getControlFlowGraph, (, ), ., getNode, (, n, )]
[t, ., getControlFlowGraph, (, )]
[t]
[n]
[gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE]
[gNode, !=, null]
[gNode]
[null]
[gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE]
[gNode, ., getAnnotation, (, )]
[gNode]
[GraphReachability, ., REACHABLE]
[GraphReachability]
[n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, )]
[n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, )]
[n, ., getLineno, (, ), !=, -, 1]
[n, ., getLineno, (, )]
[n]
[-, 1]
[1]
[!, n, ., isEmpty, (, )]
[n, ., isEmpty, (, )]
[n]
[!, n, ., isBreak, (, )]
[n, ., isBreak, (, )]
[n]
[compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), )]
[compiler]
[t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, )]
[t]
[n]
[level]
[UNREACHABLE_CODE]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), ., recompute, (, n, )]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), )]
[t, ., getControlFlowGraph, (, )]
[t]
[n]
[false]
[true]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,, new, ReachablePredicate, (, ), ), ., compute, (, controlFlowGraph, ., getEntry, (, ), ., getValue, (, ), )]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, controlFlowGraph, ,, new, ReachablePredicate, (, ), )]
[controlFlowGraph]
[new, ReachablePredicate, (, )]
[controlFlowGraph, ., getEntry, (, ), ., getValue, (, )]
[controlFlowGraph, ., getEntry, (, )]
[controlFlowGraph]
[input, ., edge]
[input]
[!, branch, ., isConditional, (, )]
[branch, ., isConditional, (, )]
[branch]
[true]
[input, ., sourceNode]
[input]
[NodeUtil, ., getConditionExpression, (, predecessor, )]
[NodeUtil]
[predecessor]
[condition, !=, null]
[condition]
[null]
[NodeUtil, ., getImpureBooleanValue, (, condition, )]
[NodeUtil]
[condition]
[val, !=, TernaryValue, ., UNKNOWN]
[val]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, )]
[val, ., toBoolean, (, true, )]
[val]
[true]
[(, branch, ==, Branch, ., ON_TRUE, )]
[branch, ==, Branch, ., ON_TRUE]
[branch]
[Branch, ., ON_TRUE]
[Branch]
[true]
