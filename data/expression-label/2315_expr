[Logger, ., getLogger, (, JsAst, ., class, ., getName, (, ), )]
[Logger]
[JsAst, ., class, ., getName, (, )]
[JsAst, ., class]
[1L]
[this, ., inputId]
[this]
[new, InputId, (, sourceFile, ., getName, (, ), )]
[sourceFile, ., getName, (, )]
[sourceFile]
[this, ., sourceFile]
[this]
[sourceFile]
[this, ., fileName]
[this]
[sourceFile, ., getName, (, )]
[sourceFile]
[root, ==, null]
[root]
[null]
[parse, (, compiler, )]
[compiler]
[root, ., setInputId, (, inputId, )]
[root]
[inputId]
[root]
[root]
[null]
[sourceFile, ., clearCachedSource, (, )]
[sourceFile]
[inputId]
[sourceFile]
[Preconditions, ., checkState, (, fileName, ., equals, (, file, ., getName, (, ), ), )]
[Preconditions]
[fileName, ., equals, (, file, ., getName, (, ), )]
[fileName]
[file, ., getName, (, )]
[file]
[sourceFile]
[file]
[logger_, ., fine, (, "Parsing: ", +, sourceFile, ., getName, (, ), )]
[logger_]
["Parsing: ", +, sourceFile, ., getName, (, )]
["Parsing: "]
[sourceFile, ., getName, (, )]
[sourceFile]
[ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, )]
[ParserRunner]
[sourceFile]
[sourceFile, ., getCode, (, )]
[sourceFile]
[compiler, ., getParserConfig, (, )]
[compiler]
[compiler, ., getDefaultErrorReporter, (, )]
[compiler]
[logger_]
[root]
[result, ., ast]
[result]
[compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, )]
[compiler]
[sourceFile, ., getName, (, )]
[sourceFile]
[result, ., oldAst]
[result]
[compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), )]
[compiler]
[JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), )]
[JSError]
[AbstractCompiler, ., READ_ERROR]
[AbstractCompiler]
[sourceFile, ., getName, (, )]
[sourceFile]
[root, ==, null, ||, compiler, ., hasHaltingErrors, (, )]
[root, ==, null]
[root]
[null]
[compiler, ., hasHaltingErrors, (, )]
[compiler]
[root]
[IR, ., script, (, )]
[IR]
[compiler, ., prepareAst, (, root, )]
[compiler]
[root]
[root, ., setStaticSourceFile, (, sourceFile, )]
[root]
[sourceFile]
