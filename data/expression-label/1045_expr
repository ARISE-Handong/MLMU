[consumer]
[options]
[n, ., getParent, (, )]
[n]
[parent, !=, null, &&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), )]
[parent, !=, null]
[parent]
[null]
[(, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), )]
[parent, ., isBlock, (, ), ||, parent, ., isScript, (, )]
[parent, ., isBlock, (, )]
[parent]
[parent, ., isScript, (, )]
[parent]
[n, ., isFunction, (, )]
[n]
[add, (, getFunctionAnnotation, (, n, ), )]
[getFunctionAnnotation, (, n, )]
[n]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, )]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, ), ., isAssign, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getLastChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[add, (, getTypeAnnotation, (, rhs, ), )]
[getTypeAnnotation, (, rhs, )]
[rhs]
[n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[n, ., isVar, (, )]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[null]
[add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), )]
[getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[super, ., add, (, n, ,, context, )]
[super]
[n]
[context]
[NodeUtil, ., getBestJSDocInfo, (, node, )]
[NodeUtil]
[node]
[jsdoc, ==, null, &&, !, node, ., isFunction, (, )]
[jsdoc, ==, null]
[jsdoc]
[null]
[!, node, ., isFunction, (, )]
[node, ., isFunction, (, )]
[node]
[""]
[node, ., getJSType, (, )]
[node]
[type, ==, null]
[type]
[null]
[""]
[type, ., isFunctionType, (, )]
[type]
[getFunctionAnnotation, (, node, )]
[node]
[type, ., isEnumType, (, )]
[type]
["/** @enum {", +, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n"]
["/** @enum {", +, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, )]
["/** @enum {"]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, )]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, )]
[type, ., toMaybeEnumType, (, )]
[type]
["} */\n"]
[!, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, )]
[!, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, )]
[!, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, )]
[!, type, ., isUnknownType, (, )]
[type, ., isUnknownType, (, )]
[type]
[!, type, ., isEmptyType, (, )]
[type, ., isEmptyType, (, )]
[type]
[!, type, ., isVoidType, (, )]
[type, ., isVoidType, (, )]
[type]
[!, type, ., isFunctionPrototypeType, (, )]
[type, ., isFunctionPrototypeType, (, )]
[type]
["/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n"]
["/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, )]
["/** @type {"]
[node, ., getJSType, (, ), ., toAnnotationString, (, )]
[node, ., getJSType, (, )]
[node]
["} */\n"]
[""]
[Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), )]
[Preconditions]
[fnNode, ., isFunction, (, )]
[fnNode]
[new, StringBuilder, (, "/**\n", )]
["/**\n"]
[fnNode, ., getJSType, (, )]
[fnNode]
[type, ==, null, ||, type, ., isUnknownType, (, )]
[type, ==, null]
[type]
[null]
[type, ., isUnknownType, (, )]
[type]
[""]
[type, ., toMaybeFunctionType, (, )]
[type]
[fnNode, !=, null]
[fnNode]
[null]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, )]
[NodeUtil, ., getFunctionParameters, (, fnNode, )]
[NodeUtil]
[fnNode]
[funType, ., getParameters, (, )]
[funType]
[paramNode, ==, null]
[paramNode]
[null]
[sb, ., append, (, " * ", )]
[sb]
[" * "]
[appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), )]
[sb]
["param"]
[getParameterNodeJSDocType, (, n, )]
[n]
[sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", )]
[sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), )]
[sb, ., append, (, " ", )]
[sb]
[" "]
[paramNode, ., getString, (, )]
[paramNode]
["\n"]
[paramNode]
[paramNode, ., getNext, (, )]
[paramNode]
[funType, ., getReturnType, (, )]
[funType]
[retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, )]
[retType, !=, null, &&, !, retType, ., isUnknownType, (, )]
[retType, !=, null]
[retType]
[null]
[!, retType, ., isUnknownType, (, )]
[retType, ., isUnknownType, (, )]
[retType]
[!, retType, ., isEmptyType, (, )]
[retType, ., isEmptyType, (, )]
[retType]
[sb, ., append, (, " * ", )]
[sb]
[" * "]
[appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), )]
[sb]
["return"]
[retType, ., toAnnotationString, (, )]
[retType]
[sb, ., append, (, "\n", )]
[sb]
["\n"]
[funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, )]
[funType, ., isConstructor, (, )]
[funType]
[funType, ., isInterface, (, )]
[funType]
[funType, ., getSuperClassConstructor, (, )]
[funType]
[superConstructor, !=, null]
[superConstructor]
[null]
[funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, )]
[funType, ., getSuperClassConstructor, (, )]
[funType]
[!, superInstance, ., toString, (, ), ., equals, (, "Object", )]
[superInstance, ., toString, (, ), ., equals, (, "Object", )]
[superInstance, ., toString, (, )]
[superInstance]
["Object"]
[sb, ., append, (, " * ", )]
[sb]
[" * "]
[appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), )]
[sb]
["extends"]
[superInstance, ., toAnnotationString, (, )]
[superInstance]
[sb, ., append, (, "\n", )]
[sb]
["\n"]
[funType, ., isInterface, (, )]
[funType]
[funType, ., getExtendedInterfaces, (, )]
[funType]
[sb, ., append, (, " * ", )]
[sb]
[" * "]
[appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), )]
[sb]
["extends"]
[interfaceType, ., toAnnotationString, (, )]
[interfaceType]
[sb, ., append, (, "\n", )]
[sb]
["\n"]
[Sets, ., newTreeSet, (, )]
[Sets]
[funType, ., getImplementedInterfaces, (, )]
[funType]
[interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), )]
[interfaces]
[interfaze, ., toAnnotationString, (, )]
[interfaze]
[interfaces]
[sb, ., append, (, " * ", )]
[sb]
[" * "]
[appendAnnotation, (, sb, ,, "implements", ,, interfaze, )]
[sb]
["implements"]
[interfaze]
[sb, ., append, (, "\n", )]
[sb]
["\n"]
[funType, ., isConstructor, (, )]
[funType]
[sb, ., append, (, " * @constructor\n", )]
[sb]
[" * @constructor\n"]
[funType, ., isInterface, (, )]
[funType]
[sb, ., append, (, " * @interface\n", )]
[sb]
[" * @interface\n"]
[fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, )]
[fnNode, !=, null]
[fnNode]
[null]
[fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, )]
[fnNode]
[Node, ., IS_DISPATCHER]
[Node]
[sb, ., append, (, " * @javadispatch\n", )]
[sb]
[" * @javadispatch\n"]
[sb, ., append, (, " */\n", )]
[sb]
[" */\n"]
[sb, ., toString, (, )]
[sb]
[sb, ., append, (, "@", ), ., append, (, name, ), ., append, (, " {", ), ., append, (, type, ), ., append, (, "}", )]
[sb, ., append, (, "@", ), ., append, (, name, ), ., append, (, " {", ), ., append, (, type, )]
[sb, ., append, (, "@", ), ., append, (, name, ), ., append, (, " {", )]
[sb, ., append, (, "@", ), ., append, (, name, )]
[sb, ., append, (, "@", )]
[sb]
["@"]
[name]
[" {"]
[type]
["}"]
[parameterNode, ., getJSType, (, )]
[parameterNode]
[parameterType, ., isUnknownType, (, )]
[parameterType]
[typeString]
["*"]
[parameterNode, ., isOptionalArg, (, )]
[parameterNode]
[typeString]
[parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "="]
[parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, )]
[parameterType, ., restrictByNotNullOrUndefined, (, )]
[parameterType]
["="]
[parameterNode, ., isVarArgs, (, )]
[parameterNode]
[typeString]
["...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, )]
["..."]
[parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, )]
[parameterType, ., restrictByNotNullOrUndefined, (, )]
[parameterType]
[typeString]
[parameterType, ., toAnnotationString, (, )]
[parameterType]
[typeString]
