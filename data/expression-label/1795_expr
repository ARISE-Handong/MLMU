[Sets, ., newHashSet, (, )]
[Sets]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ==, null, ), {, return, false, ;, }, if, (, n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, ), ), {, return, true, ;, }, if, (, n, ., isDelProp, (, ), ), {, return, true, ;, }, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, !, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[n, ==, null]
[n]
[null]
[false]
[n, ., isCall, (, ), &&, NodeUtil, ., functionCallHasSideEffects, (, n, )]
[n, ., isCall, (, )]
[n]
[NodeUtil, ., functionCallHasSideEffects, (, n, )]
[NodeUtil]
[n]
[true]
[n, ., isNew, (, ), &&, NodeUtil, ., constructorCallHasSideEffects, (, n, )]
[n, ., isNew, (, )]
[n]
[NodeUtil, ., constructorCallHasSideEffects, (, n, )]
[NodeUtil]
[n]
[true]
[n, ., isDelProp, (, )]
[n]
[true]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, apply, (, c, )]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph]
[c]
[apply, (, c, )]
[c]
[true]
[false]
[this, ., compiler]
[this]
[compiler]
[t, ., inGlobalScope, (, )]
[t]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, )]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE]
[LiveVariablesAnalysis]
[t, ., getScope, (, ), ., getVarCount, (, )]
[t, ., getScope, (, )]
[t]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, )]
[compiler]
[false]
[true]
[Preconditions, ., checkState, (, t, ., getScopeRoot, (, ), ., isFunction, (, ), )]
[Preconditions]
[t, ., getScopeRoot, (, ), ., isFunction, (, )]
[t, ., getScopeRoot, (, )]
[t]
[cfa, ., process, (, null, ,, t, ., getScopeRoot, (, ), ., getLastChild, (, ), )]
[cfa]
[null]
[t, ., getScopeRoot, (, ), ., getLastChild, (, )]
[t, ., getScopeRoot, (, )]
[t]
[cfg]
[cfa, ., getCfg, (, )]
[cfa]
[reachingDef]
[new, MustBeReachingVariableDef, (, cfg, ,, t, ., getScope, (, ), ,, compiler, )]
[cfg]
[t, ., getScope, (, )]
[t]
[compiler]
[reachingDef, ., analyze, (, )]
[reachingDef]
[candidates]
[Lists, ., newLinkedList, (, )]
[Lists]
[new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), ), ., traverse, (, t, ., getScopeRoot, (, ), ., getLastChild, (, ), )]
[new, NodeTraversal, (, compiler, ,, new, GatherCandiates, (, ), )]
[compiler]
[new, GatherCandiates, (, )]
[t, ., getScopeRoot, (, ), ., getLastChild, (, )]
[t, ., getScopeRoot, (, )]
[t]
[reachingUses]
[new, MaybeReachingVariableUse, (, cfg, ,, t, ., getScope, (, ), ,, compiler, )]
[cfg]
[t, ., getScope, (, )]
[t]
[compiler]
[reachingUses, ., analyze, (, )]
[reachingUses]
[candidates]
[c, ., canInline, (, t, ., getScope, (, ), )]
[c]
[t, ., getScope, (, )]
[t]
[c, ., inlineVariable, (, )]
[c]
[!, c, ., defMetadata, ., depends, ., isEmpty, (, )]
[c, ., defMetadata, ., depends, ., isEmpty, (, )]
[c, ., defMetadata, ., depends]
[c, ., defMetadata]
[c]
[inlinedNewDependencies, ., add, (, t, ., getScope, (, ), ., getVar, (, c, ., varName, ), )]
[inlinedNewDependencies]
[t, ., getScope, (, ), ., getVar, (, c, ., varName, )]
[t, ., getScope, (, )]
[t]
[c, ., varName]
[c]
[(, new, NodeTraversal, (, compiler, ,, this, ), ), ., traverseRoots, (, externs, ,, root, )]
[(, new, NodeTraversal, (, compiler, ,, this, ), )]
[new, NodeTraversal, (, compiler, ,, this, )]
[compiler]
[this]
[externs]
[root]
[cfg, ., getDirectedGraphNode, (, n, )]
[cfg]
[n]
[graphNode, ==, null]
[graphNode]
[null]
[graphNode, ., getAnnotation, (, )]
[graphNode]
[state, ., getIn, (, )]
[state]
[n]
[new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, if, (, parent, ==, null, ), {, return, ;, }, if, (, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, ;, }, Definition, def, =, reachingDef, ., getDef, (, name, ,, cfgNode, ), ;, if, (, def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, ), ), {, candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), ), ;, }, }, }, }]
[n, ., isName, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, parent, ., isParamList, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, ), ||, parent, ., isInc, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ||, parent, ., isVar, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., isVar, (, )]
[parent]
[parent, ., isInc, (, )]
[parent]
[parent, ., isDec, (, )]
[parent]
[parent, ., isParamList, (, )]
[parent]
[parent, ., isCatch, (, )]
[parent]
[n, ., getString, (, )]
[n]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[reachingDef, ., getDef, (, name, ,, cfgNode, )]
[reachingDef]
[name]
[cfgNode]
[def, !=, null, &&, !, reachingDef, ., dependsOnOuterScopeVars, (, def, )]
[def, !=, null]
[def]
[null]
[!, reachingDef, ., dependsOnOuterScopeVars, (, def, )]
[reachingDef, ., dependsOnOuterScopeVars, (, def, )]
[reachingDef]
[def]
[candidates, ., add, (, new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, ), )]
[candidates]
[new, Candidate, (, name, ,, def, ,, n, ,, cfgNode, )]
[name]
[def]
[n]
[cfgNode]
[NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ,, gatherCb, )]
[NodeTraversal]
[compiler]
[cfgNode]
[gatherCb]
[Preconditions, ., checkArgument, (, use, ., isName, (, ), )]
[Preconditions]
[use, ., isName, (, )]
[use]
[this, ., varName]
[this]
[varName]
[this, ., defMetadata]
[this]
[defMetadata]
[this, ., use]
[this]
[use]
[this, ., useCfgNode]
[this]
[useCfgNode]
[defMetadata, ., node]
[defMetadata]
[getDefCfgNode, (, ), ., isFunction, (, )]
[getDefCfgNode, (, )]
[false]
[defMetadata, ., depends]
[defMetadata]
[inlinedNewDependencies, ., contains, (, dependency, )]
[inlinedNewDependencies]
[dependency]
[false]
[getDefinition, (, getDefCfgNode, (, ), ,, null, )]
[getDefCfgNode, (, )]
[null]
[getNumUseInUseCfgNode, (, useCfgNode, ,, null, )]
[useCfgNode]
[null]
[def, ==, null]
[def]
[null]
[false]
[def, ., isAssign, (, ), &&, !, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), )]
[def, ., isAssign, (, )]
[def]
[!, NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), )]
[NodeUtil, ., isExprAssign, (, def, ., getParent, (, ), )]
[NodeUtil]
[def, ., getParent, (, )]
[def]
[false]
[checkRightOf, (, def, ,, getDefCfgNode, (, ), ,, SIDE_EFFECT_PREDICATE, )]
[def]
[getDefCfgNode, (, )]
[SIDE_EFFECT_PREDICATE]
[false]
[checkLeftOf, (, use, ,, useCfgNode, ,, SIDE_EFFECT_PREDICATE, )]
[use]
[useCfgNode]
[SIDE_EFFECT_PREDICATE]
[false]
[NodeUtil, ., mayHaveSideEffects, (, def, ., getLastChild, (, ), ,, compiler, )]
[NodeUtil]
[def, ., getLastChild, (, )]
[def]
[compiler]
[false]
[numUseWithinUseCfgNode, !=, 1]
[numUseWithinUseCfgNode]
[1]
[false]
[NodeUtil, ., isWithinLoop, (, use, )]
[NodeUtil]
[use]
[false]
[reachingUses, ., getUses, (, varName, ,, getDefCfgNode, (, ), )]
[reachingUses]
[varName]
[getDefCfgNode, (, )]
[uses, ., size, (, ), !=, 1]
[uses, ., size, (, )]
[uses]
[1]
[false]
[NodeUtil, ., has, (, def, ., getLastChild, (, ), ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }, ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !, input, ., isFunction, (, ), ;, }, }, )]
[NodeUtil]
[def, ., getLastChild, (, )]
[def]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, switch, (, input, ., getType, (, ), ), {, case, Token, ., GETELEM, :, case, Token, ., GETPROP, :, case, Token, ., ARRAYLIT, :, case, Token, ., OBJECTLIT, :, case, Token, ., REGEXP, :, case, Token, ., NEW, :, return, true, ;, case, Token, ., NAME, :, Var, var, =, scope, ., getOwnSlot, (, input, ., getString, (, ), ), ;, if, (, var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[input, ., getType, (, )]
[input]
[Token, ., GETELEM]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., ARRAYLIT]
[Token]
[Token, ., OBJECTLIT]
[Token]
[Token, ., REGEXP]
[Token]
[Token, ., NEW]
[Token]
[true]
[Token, ., NAME]
[Token]
[scope, ., getOwnSlot, (, input, ., getString, (, ), )]
[scope]
[input, ., getString, (, )]
[input]
[var, !=, null, &&, var, ., getParentNode, (, ), ., isCatch, (, )]
[var, !=, null]
[var]
[null]
[var, ., getParentNode, (, ), ., isCatch, (, )]
[var, ., getParentNode, (, )]
[var]
[true]
[false]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !, input, ., isFunction, (, ), ;, }, }]
[!, input, ., isFunction, (, )]
[input, ., isFunction, (, )]
[input]
[false]
[NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), ), &&, getDefCfgNode, (, ), ., getNext, (, ), !=, useCfgNode]
[NodeUtil, ., isStatementBlock, (, getDefCfgNode, (, ), ., getParent, (, ), )]
[NodeUtil]
[getDefCfgNode, (, ), ., getParent, (, )]
[getDefCfgNode, (, )]
[getDefCfgNode, (, ), ., getNext, (, ), !=, useCfgNode]
[getDefCfgNode, (, ), ., getNext, (, )]
[getDefCfgNode, (, )]
[useCfgNode]
[new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ,, cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), ), ,, cfg, ., getDirectedGraphNode, (, useCfgNode, ), ,, SIDE_EFFECT_PREDICATE, ,, Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, ), ,, false, )]
[cfg]
[cfg, ., getDirectedGraphNode, (, getDefCfgNode, (, ), )]
[cfg]
[getDefCfgNode, (, )]
[cfg, ., getDirectedGraphNode, (, useCfgNode, )]
[cfg]
[useCfgNode]
[SIDE_EFFECT_PREDICATE]
[Predicates, ., <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, alwaysTrue, (, )]
[Predicates]
[false]
[pathCheck, ., somePathsSatisfyPredicate, (, )]
[pathCheck]
[false]
[true]
[def, ., getParent, (, )]
[def]
[use, ., getParent, (, )]
[use]
[def, ., isAssign, (, )]
[def]
[def, ., getLastChild, (, )]
[def]
[rhs, ., detachFromParent, (, )]
[rhs]
[Preconditions, ., checkState, (, defParent, ., isExprResult, (, ), )]
[Preconditions]
[defParent, ., isExprResult, (, )]
[defParent]
[defParent, ., getParent, (, ), ., isLabel, (, )]
[defParent, ., getParent, (, )]
[defParent]
[defParent]
[defParent, ., getParent, (, )]
[defParent]
[defParent, ., detachFromParent, (, )]
[defParent]
[useParent, ., replaceChild, (, use, ,, rhs, )]
[useParent]
[use]
[rhs]
[defParent, ., isVar, (, )]
[defParent]
[def, ., getLastChild, (, )]
[def]
[def, ., removeChild, (, rhs, )]
[def]
[rhs]
[useParent, ., replaceChild, (, use, ,, rhs, )]
[useParent]
[use]
[rhs]
[Preconditions, ., checkState, (, false, ,, "No other definitions can be inlined.", )]
[Preconditions]
[false]
["No other definitions can be inlined."]
[compiler, ., reportCodeChange, (, )]
[compiler]
[new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, ), ), {, def, =, n, ;, }, return, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, ), ), {, def, =, n, ;, }, return, ;, }, }, }]
[n, ., getType, (, )]
[n]
[Token, ., NAME]
[Token]
[n, ., getString, (, ), ., equals, (, varName, ), &&, n, ., hasChildren, (, )]
[n, ., getString, (, ), ., equals, (, varName, )]
[n, ., getString, (, )]
[n]
[varName]
[n, ., hasChildren, (, )]
[n]
[def]
[n]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, )]
[n]
[lhs, ., isName, (, ), &&, lhs, ., getString, (, ), ., equals, (, varName, )]
[lhs, ., isName, (, )]
[lhs]
[lhs, ., getString, (, ), ., equals, (, varName, )]
[lhs, ., getString, (, )]
[lhs]
[varName]
[def]
[n]
[NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, )]
[NodeTraversal]
[compiler]
[n]
[gatherCb]
[new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), ), ), {, numUseWithinUseCfgNode, ++, ;, }, }, }]
[n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, ), &&, !, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), )]
[n, ., isName, (, ), &&, n, ., getString, (, ), ., equals, (, varName, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, varName, )]
[n, ., getString, (, )]
[n]
[varName]
[!, (, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), )]
[(, parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, ), )]
[parent, ., isAssign, (, ), &&, (, parent, ., getFirstChild, (, ), ==, n, )]
[parent, ., isAssign, (, )]
[parent]
[(, parent, ., getFirstChild, (, ), ==, n, )]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[numUseWithinUseCfgNode, ++]
[numUseWithinUseCfgNode]
[NodeTraversal, ., traverse, (, compiler, ,, n, ,, gatherCb, )]
[NodeTraversal]
[compiler]
[n]
[gatherCb]
[n]
[p, !=, expressionRoot]
[p]
[expressionRoot]
[p]
[p, ., getParent, (, )]
[p]
[p, ., getNext, (, )]
[p]
[cur, !=, null]
[cur]
[null]
[cur]
[cur, ., getNext, (, )]
[cur]
[predicate, ., apply, (, cur, )]
[predicate]
[cur]
[true]
[false]
[n, ., getParent, (, )]
[n]
[p, !=, expressionRoot]
[p]
[expressionRoot]
[p]
[p, ., getParent, (, )]
[p]
[p, ., getParent, (, ), ., getFirstChild, (, )]
[p, ., getParent, (, )]
[p]
[cur, !=, p]
[cur]
[p]
[cur]
[cur, ., getNext, (, )]
[cur]
[predicate, ., apply, (, cur, )]
[predicate]
[cur]
[true]
[false]
