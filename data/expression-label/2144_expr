[4]
[DEFAULT_REQUIRED_USAGE]
[4]
[getArrayNotationNameFor, (, "prototype", )]
["prototype"]
[Maps, ., newHashMap, (, )]
[Maps]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[new, IdentityHashMap, <, Node, ,, Node, >, (, )]
[Maps, ., newHashMap, (, )]
[Maps]
[Sets, ., newHashSet, (, "arguments", ,, "eval", ,, "NodeFilter", ,, "JSCompiler_renameProperty", )]
[Sets]
["arguments"]
["eval"]
["NodeFilter"]
["JSCompiler_renameProperty"]
[Sets, ., newHashSet, (, )]
[Sets]
[compiler]
[moduleGraph]
[null]
[null]
[this, ., compiler]
[this]
[compiler]
[this, ., moduleGraph]
[this]
[moduleGraph]
[!, Strings, ., isNullOrEmpty, (, unaliasableGlobals, ), &&, !, Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[!, Strings, ., isNullOrEmpty, (, unaliasableGlobals, )]
[Strings, ., isNullOrEmpty, (, unaliasableGlobals, )]
[Strings]
[unaliasableGlobals]
[!, Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[Strings]
[aliasableGlobals]
[new, IllegalArgumentException, (, "Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other.", )]
["Cannot pass in both unaliasable and aliasable globals; you must ", +, "choose one or the other."]
["Cannot pass in both unaliasable and aliasable globals; you must "]
["choose one or the other."]
[!, Strings, ., isNullOrEmpty, (, unaliasableGlobals, )]
[Strings, ., isNullOrEmpty, (, unaliasableGlobals, )]
[Strings]
[unaliasableGlobals]
[this, ., unaliasableGlobals, ., addAll, (, Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), ), )]
[this, ., unaliasableGlobals]
[this]
[Arrays, ., asList, (, unaliasableGlobals, ., split, (, ",", ), )]
[Arrays]
[unaliasableGlobals, ., split, (, ",", )]
[unaliasableGlobals]
[","]
[!, Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[Strings, ., isNullOrEmpty, (, aliasableGlobals, )]
[Strings]
[aliasableGlobals]
[this, ., aliasableGlobals, ., addAll, (, Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), ), )]
[this, ., aliasableGlobals]
[this]
[Arrays, ., asList, (, aliasableGlobals, ., split, (, ",", ), )]
[Arrays]
[aliasableGlobals, ., split, (, ",", )]
[aliasableGlobals]
[","]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[moduleRoots]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., requiredUsage]
[this]
[usage]
[defaultRoot]
[root, ., getFirstChild, (, )]
[root]
[Preconditions, ., checkState, (, defaultRoot, ., isScript, (, ), )]
[Preconditions]
[defaultRoot, ., isScript, (, )]
[defaultRoot]
[aliasProperties, (, externs, ,, root, )]
[externs]
[root]
[aliasGlobals, (, externs, ,, root, )]
[externs]
[root]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetAliasableNames, (, aliasableGlobals, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, GetAliasableNames, (, aliasableGlobals, )]
[aliasableGlobals]
[props, ., put, (, "prototype", ,, newSymbolForProperty, (, "prototype", ), )]
[props]
["prototype"]
[newSymbolForProperty, (, "prototype", )]
["prototype"]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PropertyGatherer, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, PropertyGatherer, (, )]
[props, ., values, (, )]
[props]
[prop, ., name, ., length, (, ), >=, MIN_PROP_SIZE]
[prop, ., name, ., length, (, )]
[prop, ., name]
[prop]
[MIN_PROP_SIZE]
[prop, ., accessorCount, >=, requiredUsage]
[prop, ., accessorCount]
[prop]
[requiredUsage]
[prop, ., aliasAccessor]
[prop]
[true]
[prop, ., mutatorCount, >=, requiredUsage]
[prop, ., mutatorCount]
[prop]
[requiredUsage]
[prop, ., aliasMutator]
[prop]
[true]
[accessors]
[replaceAccessor, (, propInfo, )]
[propInfo]
[mutators]
[replaceMutator, (, propInfo, )]
[propInfo]
[props, ., values, (, )]
[props]
[prop, ., aliasAccessor]
[prop]
[addAccessorPropName, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleAccess, ), )]
[prop, ., name]
[prop]
[getAddingRoot, (, prop, ., deepestModuleAccess, )]
[prop, ., deepestModuleAccess]
[prop]
[props, ., values, (, )]
[props]
[prop, ., aliasMutator]
[prop]
[addMutatorFunction, (, prop, ., name, ,, getAddingRoot, (, prop, ., deepestModuleMutate, ), )]
[prop, ., name]
[prop]
[getAddingRoot, (, prop, ., deepestModuleMutate, )]
[prop, ., deepestModuleMutate]
[prop]
[getPropNode, ., getLastChild, (, )]
[getPropNode]
[propNameNode, ., getString, (, )]
[propNameNode]
[props, ., get, (, propName, ), ., aliasAccessor]
[props, ., get, (, propName, )]
[props]
[propName]
[getPropNode, ., getFirstChild, (, )]
[getPropNode]
[getPropNode, ., removeChild, (, propSrc, )]
[getPropNode]
[propSrc]
[IR, ., name, (, getArrayNotationNameFor, (, propName, ), )]
[IR]
[getArrayNotationNameFor, (, propName, )]
[propName]
[IR, ., getelem, (, propSrc, ,, newNameNode, )]
[IR]
[propSrc]
[newNameNode]
[replaceNode, (, getPropNode, ., getParent, (, ), ,, getPropNode, ,, elemNode, )]
[getPropNode, ., getParent, (, )]
[getPropNode]
[getPropNode]
[elemNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[getPropNode, ., getLastChild, (, )]
[getPropNode]
[getPropNode, ., getParent, (, )]
[getPropNode]
[props, ., get, (, propNameNode, ., getString, (, ), )]
[props]
[propNameNode, ., getString, (, )]
[propNameNode]
[prop, ., aliasMutator]
[prop]
[getPropNode, ., getFirstChild, (, )]
[getPropNode]
[parentNode, ., getLastChild, (, )]
[parentNode]
[getPropNode, ., removeChild, (, propSrc, )]
[getPropNode]
[propSrc]
[getPropNode, ., removeChild, (, propNameNode, )]
[getPropNode]
[propNameNode]
[parentNode, ., removeChild, (, propDest, )]
[parentNode]
[propDest]
[IR, ., name, (, getMutatorFor, (, propNameNode, ., getString, (, ), ), )]
[IR]
[getMutatorFor, (, propNameNode, ., getString, (, ), )]
[propNameNode, ., getString, (, )]
[propNameNode]
[IR, ., call, (, callName, ,, propSrc, ,, propDest, )]
[IR]
[callName]
[propSrc]
[propDest]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[replaceNode, (, parentNode, ., getParent, (, ), ,, parentNode, ,, call, )]
[parentNode, ., getParent, (, )]
[parentNode]
[parentNode]
[call]
[compiler, ., reportCodeChange, (, )]
[compiler]
[replacementMap, ., containsKey, (, parent, )]
[replacementMap]
[parent]
[parent]
[replacementMap, ., get, (, parent, )]
[replacementMap]
[parent]
[parent, ., replaceChild, (, before, ,, after, )]
[parent]
[before]
[after]
[replacementMap, ., put, (, before, ,, after, )]
[replacementMap]
[before]
[after]
[IR, ., string, (, propName, )]
[IR]
[propName]
[IR, ., name, (, getArrayNotationNameFor, (, propName, ), )]
[IR]
[getArrayNotationNameFor, (, propName, )]
[propName]
[propNameNode, ., addChildToFront, (, propValue, )]
[propNameNode]
[propValue]
[IR, ., var, (, propNameNode, )]
[IR]
[propNameNode]
[root, ., addChildToFront, (, var, )]
[root]
[var]
[compiler, ., reportCodeChange, (, )]
[compiler]
[getMutatorFor, (, propName, )]
[propName]
[getMutatorFor, (, propName, ), +, "$a"]
[getMutatorFor, (, propName, )]
[propName]
["$a"]
[getMutatorFor, (, propName, ), +, "$b"]
[getMutatorFor, (, propName, )]
[propName]
["$b"]
[IR, ., function, (, IR, ., name, (, functionName, ), ,, IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), ), ,, IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), ), )]
[IR]
[IR, ., name, (, functionName, )]
[IR]
[functionName]
[IR, ., paramList, (, IR, ., name, (, localPropName, ), ,, IR, ., name, (, localValueName, ), )]
[IR]
[IR, ., name, (, localPropName, )]
[IR]
[localPropName]
[IR, ., name, (, localValueName, )]
[IR]
[localValueName]
[IR, ., block, (, IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), ), )]
[IR]
[IR, ., returnNode, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), ), )]
[IR]
[IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), ), ,, IR, ., name, (, localValueName, ), )]
[IR]
[IR, ., getprop, (, IR, ., name, (, localPropName, ), ,, IR, ., string, (, propName, ), )]
[IR]
[IR, ., name, (, localPropName, )]
[IR]
[localPropName]
[IR, ., string, (, propName, )]
[IR]
[propName]
[IR, ., name, (, localValueName, )]
[IR]
[localValueName]
[root, ., addChildToFront, (, fnNode, )]
[root]
[fnNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[m, !=, null]
[m]
[null]
[moduleRoots, ., get, (, m, )]
[moduleRoots]
[m]
[root, !=, null]
[root]
[null]
[root]
[root]
[compiler, ., getNodeForCodeInsertion, (, m, )]
[compiler]
[m]
[root, !=, null]
[root]
[null]
[moduleRoots, ., put, (, m, ,, root, )]
[moduleRoots]
[m]
[root]
[root]
[defaultRoot]
[this, ., whitelist]
[this]
[whitelist]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[dest, ., isString, (, ), &&, (, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), )]
[dest, ., isString, (, )]
[dest]
[(, whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), ), )]
[whitelist, ., isEmpty, (, ), ||, whitelist, ., contains, (, dest, ., getString, (, ), )]
[whitelist, ., isEmpty, (, )]
[whitelist]
[whitelist, ., contains, (, dest, ., getString, (, ), )]
[whitelist]
[dest, ., getString, (, )]
[dest]
[props, ., put, (, dest, ., getString, (, ), ,, newSymbolForProperty, (, dest, ., getString, (, ), ), )]
[props]
[dest, ., getString, (, )]
[dest]
[newSymbolForProperty, (, dest, ., getString, (, ), )]
[dest, ., getString, (, )]
[dest]
[n, ., isGetProp, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[canReplaceWithGetProp, (, propNameNode, ,, n, ,, parent, )]
[propNameNode]
[n]
[parent]
[propNameNode, ., getString, (, )]
[propNameNode]
[props, ., get, (, name, ), ., recordAccessor, (, t, )]
[props, ., get, (, name, )]
[props]
[name]
[t]
[accessors, ., add, (, n, )]
[accessors]
[n]
[canReplaceWithSetProp, (, propNameNode, ,, n, ,, parent, )]
[propNameNode]
[n]
[parent]
[propNameNode, ., getString, (, )]
[propNameNode]
[props, ., get, (, name, ), ., recordMutator, (, t, )]
[props, ., get, (, name, )]
[props]
[name]
[t]
[mutators, ., add, (, n, )]
[mutators]
[n]
[(, parent, ., isCall, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[(, parent, ., isCall, (, ), )]
[parent, ., isCall, (, )]
[parent]
[(, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[parent, ., getFirstChild, (, ), ==, getPropNode]
[parent, ., getFirstChild, (, )]
[parent]
[getPropNode]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[(, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[parent, ., getFirstChild, (, ), ==, getPropNode]
[parent, ., getFirstChild, (, )]
[parent]
[getPropNode]
[(, parent, ., isInc, (, ), ), ||, (, parent, ., isDec, (, ), )]
[(, parent, ., isInc, (, ), )]
[parent, ., isInc, (, )]
[parent]
[(, parent, ., isDec, (, ), )]
[parent, ., isDec, (, )]
[parent]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), )]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), ), &&, !, isIncOrDec]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget, &&, (, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), )]
[(, propNameNode, ., isString, (, ), ), &&, !, isAssignTarget]
[(, propNameNode, ., isString, (, ), )]
[propNameNode, ., isString, (, )]
[propNameNode]
[!, isAssignTarget]
[isAssignTarget]
[(, !, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), ), )]
[!, isCallTarget, ||, !, "eval", ., equals, (, propNameNode, ., getString, (, ), )]
[!, isCallTarget]
[isCallTarget]
[!, "eval", ., equals, (, propNameNode, ., getString, (, ), )]
["eval", ., equals, (, propNameNode, ., getString, (, ), )]
["eval"]
[propNameNode, ., getString, (, )]
[propNameNode]
[!, isIncOrDec]
[isIncOrDec]
[props, ., containsKey, (, propNameNode, ., getString, (, ), )]
[props]
[propNameNode, ., getString, (, )]
[propNameNode]
[(, parent, ., isAssign, (, ), ), &&, (, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[(, parent, ., isAssign, (, ), )]
[parent, ., isAssign, (, )]
[parent]
[(, parent, ., getFirstChild, (, ), ==, getPropNode, )]
[parent, ., getFirstChild, (, ), ==, getPropNode]
[parent, ., getFirstChild, (, )]
[parent]
[getPropNode]
[(, propNameNode, ., isString, (, ), ), &&, isAssignTarget, &&, props, ., containsKey, (, propNameNode, ., getString, (, ), )]
[(, propNameNode, ., isString, (, ), ), &&, isAssignTarget]
[(, propNameNode, ., isString, (, ), )]
[propNameNode, ., isString, (, )]
[propNameNode]
[isAssignTarget]
[props, ., containsKey, (, propNameNode, ., getString, (, ), )]
[props]
[propNameNode, ., getString, (, )]
[propNameNode]
["SETPROP_", +, prop]
["SETPROP_"]
[prop]
["$$PROP_", +, prop]
["$$PROP_"]
[prop]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GetGlobals, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, GetGlobals, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GlobalGatherer, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, GlobalGatherer, (, )]
[globals, ., values, (, )]
[globals]
[global, ., mutatorCount, >, 0]
[global, ., mutatorCount]
[global]
[0]
[global, ., name, ., length, (, ), *, global, ., accessorCount]
[global, ., name, ., length, (, )]
[global, ., name]
[global]
[global, ., accessorCount]
[global]
[8, +, global, ., name, ., length, (, ), +, 2, *, global, ., accessorCount]
[8, +, global, ., name, ., length, (, )]
[8]
[global, ., name, ., length, (, )]
[global, ., name]
[global]
[2, *, global, ., accessorCount]
[2]
[global, ., accessorCount]
[global]
[aliasedBytes, <, currentBytes]
[aliasedBytes]
[currentBytes]
[global, ., aliasAccessor]
[global]
[true]
[globals, ., values, (, )]
[globals]
[global, ., uses]
[global]
[replaceGlobalUse, (, globalUse, )]
[globalUse]
[global, ., aliasAccessor]
[global]
[addGlobalAliasNode, (, global, ,, getAddingRoot, (, global, ., deepestModuleAccess, ), )]
[global]
[getAddingRoot, (, global, ., deepestModuleAccess, )]
[global, ., deepestModuleAccess]
[global]
[dest, ., isName, (, )]
[dest]
[dest, ., getJSDocInfo, (, ), ==, null, ?, parent, ., getJSDocInfo, (, ), :, dest, ., getJSDocInfo, (, )]
[dest, ., getJSDocInfo, (, ), ==, null]
[dest, ., getJSDocInfo, (, )]
[dest]
[null]
[parent, ., getJSDocInfo, (, )]
[parent]
[dest, ., getJSDocInfo, (, )]
[dest]
[!, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), ), &&, (, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), )]
[!, unaliasableGlobals, ., contains, (, dest, ., getString, (, ), )]
[unaliasableGlobals, ., contains, (, dest, ., getString, (, ), )]
[unaliasableGlobals]
[dest, ., getString, (, )]
[dest]
[(, docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, ), )]
[docInfo, ==, null, ||, !, docInfo, ., isNoAlias, (, )]
[docInfo, ==, null]
[docInfo]
[null]
[!, docInfo, ., isNoAlias, (, )]
[docInfo, ., isNoAlias, (, )]
[docInfo]
[aliasable]
[dest, ., getString, (, )]
[dest]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, !=, null, &&, !, var, ., isLocal, (, )]
[var, !=, null]
[var]
[null]
[!, var, ., isLocal, (, )]
[var, ., isLocal, (, )]
[var]
[globals, ., put, (, name, ,, newSymbolForGlobalVar, (, dest, ), )]
[globals]
[name]
[newSymbolForGlobalVar, (, dest, )]
[dest]
[n, ., getType, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[getGlobalName, (, t, ,, n, ., getFirstChild, (, ), ,, n, )]
[t]
[n, ., getFirstChild, (, )]
[n]
[n]
[Token, ., VAR]
[Token]
[n, ., getFirstChild, (, )]
[n]
[varChild, !=, null]
[varChild]
[null]
[varChild]
[varChild, ., getNext, (, )]
[varChild]
[getGlobalName, (, t, ,, varChild, ,, n, )]
[t]
[varChild]
[n]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, !=, null, &&, var, ., isLocal, (, )]
[var, !=, null]
[var]
[null]
[var, ., isLocal, (, )]
[var]
[globals, ., get, (, name, )]
[globals]
[name]
[global, !=, null]
[global]
[null]
[n, ., getParent, (, ), ., isVar, (, ), ||, n, ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, ), ., isVar, (, )]
[n, ., getParent, (, )]
[n]
[n, ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, )]
[n]
[globals, ., remove, (, name, )]
[globals]
[name]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, ), ||, parent, ., isInc, (, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, ), ||, (, parent, ., isNew, (, ), &&, isFirst, )]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, isFirst]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[isFirst]
[(, parent, ., isNew, (, ), &&, isFirst, )]
[parent, ., isNew, (, ), &&, isFirst]
[parent, ., isNew, (, )]
[parent]
[isFirst]
[parent, ., isInc, (, )]
[parent]
[parent, ., isDec, (, )]
[parent]
[global, ., recordMutator, (, t, )]
[global]
[t]
[global, ., recordAccessor, (, t, )]
[global]
[t]
[global, ., uses, ., add, (, n, )]
[global, ., uses]
[global]
[n]
[globalUse, ., getString, (, )]
[globalUse]
[globals, ., get, (, globalName, ), ., aliasAccessor]
[globals, ., get, (, globalName, )]
[globals]
[globalName]
[globalUse, ., setString, (, "GLOBAL_", +, globalName, )]
[globalUse]
["GLOBAL_", +, globalName]
["GLOBAL_"]
[globalName]
[globalUse, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, false, )]
[globalUse]
[Node, ., IS_CONSTANT_NAME]
[Node]
[false]
[compiler, ., reportCodeChange, (, )]
[compiler]
[global, ., name]
[global]
[IR, ., name, (, global, ., name, )]
[IR]
[global, ., name]
[global]
[globalValue, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, global, ., isConstant, )]
[globalValue]
[Node, ., IS_CONSTANT_NAME]
[Node]
[global, ., isConstant]
[global]
[IR, ., name, (, "GLOBAL_", +, globalName, )]
[IR]
["GLOBAL_", +, globalName]
["GLOBAL_"]
[globalName]
[globalNameNode, ., addChildToFront, (, globalValue, )]
[globalNameNode]
[globalValue]
[IR, ., var, (, globalNameNode, )]
[IR]
[globalNameNode]
[root, ., addChildToFront, (, var, )]
[root]
[var]
[compiler, ., reportCodeChange, (, )]
[compiler]
[new, Symbol, (, name, ., getString, (, ), ,, name, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), )]
[name, ., getString, (, )]
[name]
[name, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[name]
[Node, ., IS_CONSTANT_NAME]
[Node]
[new, Symbol, (, name, ,, false, )]
[name]
[false]
[0]
[0]
[false]
[false]
[null]
[null]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., name]
[this]
[name]
[this, ., isConstant]
[this]
[isConstant]
[accessorCount, ++]
[accessorCount]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[deepestModuleAccess]
[(, deepestModuleAccess, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, )]
[(, deepestModuleAccess, ==, null, )]
[deepestModuleAccess, ==, null]
[deepestModuleAccess]
[null]
[t, ., getModule, (, )]
[t]
[moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleAccess, )]
[moduleGraph]
[t, ., getModule, (, )]
[t]
[deepestModuleAccess]
[mutatorCount, ++]
[mutatorCount]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[deepestModuleMutate]
[(, deepestModuleMutate, ==, null, ), ?, t, ., getModule, (, ), :, moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, )]
[(, deepestModuleMutate, ==, null, )]
[deepestModuleMutate, ==, null]
[deepestModuleMutate]
[null]
[t, ., getModule, (, )]
[t]
[moduleGraph, ., getDeepestCommonDependencyInclusive, (, t, ., getModule, (, ), ,, deepestModuleMutate, )]
[moduleGraph]
[t, ., getModule, (, )]
[t]
[deepestModuleMutate]
