[{, '0', ,, '1', ,, '2', ,, '3', ,, '4', ,, '5', ,, '6', ,, '7', ,, '8', ,, '9', ,, 'a', ,, 'b', ,, 'c', ,, 'd', ,, 'e', ,, 'f', }]
['0']
['1']
['2']
['3']
['4']
['5']
['6']
['7']
['8']
['9']
['a']
['b']
['c']
['d']
['e']
['f']
[escapeString, (, s, ,, '"', ,, "\\\"", ,, "\'", ,, "\\\\", ,, null, )]
[s]
['"']
["\\\""]
["\'"]
["\\\\"]
[null]
[new, StringBuilder, (, s, ., length, (, ), +, 2, )]
[s, ., length, (, ), +, 2]
[s, ., length, (, )]
[s]
[2]
[sb, ., append, (, quote, )]
[sb]
[quote]
[0]
[i, <, s, ., length, (, )]
[i]
[s, ., length, (, )]
[s]
[i, ++]
[i]
[s, ., charAt, (, i, )]
[s]
[i]
[c]
['\n']
[sb, ., append, (, "\\n", )]
[sb]
["\\n"]
['\r']
[sb, ., append, (, "\\r", )]
[sb]
["\\r"]
['\t']
[sb, ., append, (, "\\t", )]
[sb]
["\\t"]
['\\']
[sb, ., append, (, backslashEscape, )]
[sb]
[backslashEscape]
['\"']
[sb, ., append, (, doublequoteEscape, )]
[sb]
[doublequoteEscape]
['\'']
[sb, ., append, (, singlequoteEscape, )]
[sb]
[singlequoteEscape]
['>']
[i, >=, 2, &&, (, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), )]
[i, >=, 2]
[i]
[2]
[(, (, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', ), )]
[(, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', ), ||, (, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', )]
[(, s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-', )]
[s, ., charAt, (, i, -, 1, ), ==, '-', &&, s, ., charAt, (, i, -, 2, ), ==, '-']
[s, ., charAt, (, i, -, 1, ), ==, '-']
[s, ., charAt, (, i, -, 1, )]
[s]
[i, -, 1]
[i]
[1]
['-']
[s, ., charAt, (, i, -, 2, ), ==, '-']
[s, ., charAt, (, i, -, 2, )]
[s]
[i, -, 2]
[i]
[2]
['-']
[(, s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']', )]
[s, ., charAt, (, i, -, 1, ), ==, ']', &&, s, ., charAt, (, i, -, 2, ), ==, ']']
[s, ., charAt, (, i, -, 1, ), ==, ']']
[s, ., charAt, (, i, -, 1, )]
[s]
[i, -, 1]
[i]
[1]
[']']
[s, ., charAt, (, i, -, 2, ), ==, ']']
[s, ., charAt, (, i, -, 2, )]
[s]
[i, -, 2]
[i]
[2]
[']']
[sb, ., append, (, "\\>", )]
[sb]
["\\>"]
[sb, ., append, (, c, )]
[sb]
[c]
['<']
["/script"]
["!--"]
[s, ., regionMatches, (, true, ,, i, +, 1, ,, END_SCRIPT, ,, 0, ,, END_SCRIPT, ., length, (, ), )]
[s]
[true]
[i, +, 1]
[i]
[1]
[END_SCRIPT]
[0]
[END_SCRIPT, ., length, (, )]
[END_SCRIPT]
[sb, ., append, (, "<\\", )]
[sb]
["<\\"]
[s, ., regionMatches, (, false, ,, i, +, 1, ,, START_COMMENT, ,, 0, ,, START_COMMENT, ., length, (, ), )]
[s]
[false]
[i, +, 1]
[i]
[1]
[START_COMMENT]
[0]
[START_COMMENT, ., length, (, )]
[START_COMMENT]
[sb, ., append, (, "<\\", )]
[sb]
["<\\"]
[sb, ., append, (, c, )]
[sb]
[c]
[outputCharsetEncoder, !=, null]
[outputCharsetEncoder]
[null]
[outputCharsetEncoder, ., canEncode, (, c, )]
[outputCharsetEncoder]
[c]
[sb, ., append, (, c, )]
[sb]
[c]
[appendCharAsHex, (, sb, ,, c, )]
[sb]
[c]
[c, >, 0x1f, &&, c, <=, 0x7f]
[c, >, 0x1f]
[c]
[0x1f]
[c, <=, 0x7f]
[c]
[0x7f]
[sb, ., append, (, c, )]
[sb]
[c]
[appendCharAsHex, (, sb, ,, c, )]
[sb]
[c]
[sb, ., append, (, quote, )]
[sb]
[quote]
[sb, ., toString, (, )]
[sb]
[@, SuppressWarnings, (, "cast", )]
["cast"]
[appendHexJavaScriptRepresentation, (, sb, ,, (, int, ), c, )]
[sb]
[(, int, ), c]
[c]
[new, RuntimeException, (, ex, )]
[ex]
[Character, ., isSupplementaryCodePoint, (, codePoint, )]
[Character]
[codePoint]
[Character, ., toChars, (, codePoint, )]
[Character]
[codePoint]
[appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 0, ], )]
[out]
[surrogates, [, 0, ]]
[surrogates]
[0]
[appendHexJavaScriptRepresentation, (, out, ,, surrogates, [, 1, ], )]
[out]
[surrogates, [, 1, ]]
[surrogates]
[1]
[out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, codePoint, &, 0xf, ], )]
[out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ], )]
[out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ], )]
[out, ., append, (, "\\u", ), ., append, (, HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ], )]
[out, ., append, (, "\\u", )]
[out]
["\\u"]
[HEX_CHARS, [, (, codePoint, >, >, >, 12, ), &, 0xf, ]]
[HEX_CHARS]
[(, codePoint, >, >, >, 12, ), &, 0xf]
[(, codePoint, >, >, >, 12, )]
[codePoint, >, >, >, 12]
[codePoint]
[12]
[0xf]
[HEX_CHARS, [, (, codePoint, >, >, >, 8, ), &, 0xf, ]]
[HEX_CHARS]
[(, codePoint, >, >, >, 8, ), &, 0xf]
[(, codePoint, >, >, >, 8, )]
[codePoint, >, >, >, 8]
[codePoint]
[8]
[0xf]
[HEX_CHARS, [, (, codePoint, >, >, >, 4, ), &, 0xf, ]]
[HEX_CHARS]
[(, codePoint, >, >, >, 4, ), &, 0xf]
[(, codePoint, >, >, >, 4, )]
[codePoint, >, >, >, 4]
[codePoint]
[4]
[0xf]
[HEX_CHARS, [, codePoint, &, 0xf, ]]
[HEX_CHARS]
[codePoint, &, 0xf]
[codePoint]
[0xf]
