[element, ., getType, (, )]
[element]
[ArrayExpr]
[AssignExpr]
[BinaryExpr]
[CallExpr]
[ConditionalExpr]
[CountExpr]
[DeleteExpr]
[EvalExpr]
[FunctionExpr]
[IdExpr]
[InvokeExpr]
[LiteralExpr]
[LogicalAndExpr]
[LogicalOrExpr]
[MemberExpr]
[NewExpr]
[ObjectExpr]
[RegExpExpr]
[ThisExpr]
[TypeofExpr]
[UnaryExpr]
[true]
[false]
[parseElement, (, new, JSONArray, (, jsonml, ), )]
[new, JSONArray, (, jsonml, )]
[jsonml]
[new, JsonML, (, TagType, ., valueOf, (, element, ., getString, (, 0, ), ), )]
[TagType, ., valueOf, (, element, ., getString, (, 0, ), )]
[TagType]
[element, ., getString, (, 0, )]
[element]
[0]
[element, ., getJSONObject, (, 1, )]
[element]
[1]
[attrs, ., keys, (, )]
[attrs]
[it, ., hasNext, (, )]
[it]
[(, String, ), it, ., next, (, )]
[it, ., next, (, )]
[it]
[attrs, ., get, (, key, )]
[attrs]
[key]
[TagAttr, ., get, (, key, )]
[TagAttr]
[key]
[tag, ==, null]
[tag]
[null]
[value, instanceof, Number]
[value]
[value]
[(, (, Number, ), value, ), ., doubleValue, (, )]
[(, (, Number, ), value, )]
[(, Number, ), value]
[value]
[tag]
[NAME]
[BODY]
[FLAGS]
[OP]
[TYPE]
[IS_PREFIX]
[LABEL]
[jsonMLElement, ., setAttribute, (, tag, ,, value, )]
[jsonMLElement]
[tag]
[value]
[VALUE]
[value, !=, null, &&, value, ., equals, (, null, )]
[value, !=, null]
[value]
[null]
[value, ., equals, (, null, )]
[value]
[null]
[value]
[null]
[value, instanceof, Number]
[value]
[jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, ), )]
[jsonMLElement]
[tag]
[(, (, Number, ), value, ), ., doubleValue, (, )]
[(, (, Number, ), value, )]
[(, Number, ), value]
[value]
[jsonMLElement, ., setAttribute, (, tag, ,, value, )]
[jsonMLElement]
[tag]
[value]
[2]
[i, <, element, ., length, (, )]
[i]
[element, ., length, (, )]
[element]
[++, i]
[i]
[jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), )]
[jsonMLElement]
[parseElement, (, element, ., getJSONArray, (, i, ), )]
[element, ., getJSONArray, (, i, )]
[element]
[i]
[jsonMLElement]
[(, new, JsonMLComparator, (, tree1, ,, tree2, ), ), ., compare, (, )]
[(, new, JsonMLComparator, (, tree1, ,, tree2, ), )]
[new, JsonMLComparator, (, tree1, ,, tree2, )]
[tree1]
[tree2]
[(, new, JsonMLComparator, (, tree1, ,, tree2, ), ), ., compareSilent, (, )]
[(, new, JsonMLComparator, (, tree1, ,, tree2, ), )]
[new, JsonMLComparator, (, tree1, ,, tree2, )]
[tree1]
[tree2]
[{, TagAttr, ., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }]
[TagAttr, ., BODY]
[TagAttr]
[TagAttr, ., FLAGS]
[TagAttr]
[TagAttr, ., IS_PREFIX]
[TagAttr]
[TagAttr, ., LABEL]
[TagAttr]
[TagAttr, ., NAME]
[TagAttr]
[TagAttr, ., OP]
[TagAttr]
[TagAttr, ., TYPE]
[TagAttr]
[TagAttr, ., VALUE]
[TagAttr]
[this, ., treeA]
[this]
[treeA]
[this, ., treeB]
[this]
[treeB]
[compareElements, (, treeA, ,, treeB, )]
[treeA]
[treeB]
[mismatchA]
[null]
[mismatchB]
[null]
[mismatchA]
[a]
[mismatchB]
[b]
[false]
[a, ==, null, ||, b, ==, null]
[a, ==, null]
[a]
[null]
[b, ==, null]
[b]
[null]
[a, ==, null, &&, b, ==, null]
[a, ==, null]
[a]
[null]
[b, ==, null]
[b]
[null]
[true]
[setMismatch, (, a, ,, b, )]
[a]
[b]
[!, areEquivalent, (, a, ,, b, )]
[areEquivalent, (, a, ,, b, )]
[a]
[b]
[setMismatch, (, a, ,, b, )]
[a]
[b]
[a, ., childrenSize, (, ), !=, b, ., childrenSize, (, )]
[a, ., childrenSize, (, )]
[a]
[b, ., childrenSize, (, )]
[b]
[setMismatch, (, a, ,, b, )]
[a]
[b]
[a, ., getChildren, (, ), ., listIterator, (, )]
[a, ., getChildren, (, )]
[a]
[b, ., getChildren, (, ), ., listIterator, (, )]
[b, ., getChildren, (, )]
[b]
[itA, ., hasNext, (, )]
[itA]
[!, compareElements, (, itA, ., next, (, ), ,, itB, ., next, (, ), )]
[compareElements, (, itA, ., next, (, ), ,, itB, ., next, (, ), )]
[itA, ., next, (, )]
[itA]
[itB, ., next, (, )]
[itB]
[false]
[true]
[a, ., getType, (, ), !=, b, ., getType, (, )]
[a, ., getType, (, )]
[a]
[b, ., getType, (, )]
[b]
[false]
[ATTRS_TO_COMPARE]
[!, compareAttribute, (, attr, ,, a, ,, b, )]
[compareAttribute, (, attr, ,, a, ,, b, )]
[attr]
[a]
[b]
[false]
[true]
[a, ., getAttributes, (, ), ., get, (, attr, )]
[a, ., getAttributes, (, )]
[a]
[attr]
[b, ., getAttributes, (, ), ., get, (, attr, )]
[b, ., getAttributes, (, )]
[b]
[attr]
[valueA, ==, null, &&, valueB, ==, null]
[valueA, ==, null]
[valueA]
[null]
[valueB, ==, null]
[valueB]
[null]
[true]
[valueA, ==, null, ||, valueB, ==, null]
[valueA, ==, null]
[valueA]
[null]
[valueB, ==, null]
[valueB]
[null]
[false]
[!, (, valueA, ., equals, (, valueB, ), )]
[(, valueA, ., equals, (, valueB, ), )]
[valueA, ., equals, (, valueB, )]
[valueA]
[valueB]
[null]
[null]
[valueA, instanceof, Number]
[valueA]
[doubleA]
[(, (, Number, ), valueA, ), ., doubleValue, (, )]
[(, (, Number, ), valueA, )]
[(, Number, ), valueA]
[valueA]
[valueA, instanceof, String]
[valueA]
[doubleA]
[Double, ., valueOf, (, (, String, ), valueA, )]
[Double]
[(, String, ), valueA]
[valueA]
[false]
[valueB, instanceof, Number]
[valueB]
[doubleB]
[(, (, Number, ), valueB, ), ., doubleValue, (, )]
[(, (, Number, ), valueB, )]
[(, Number, ), valueB]
[valueB]
[valueB, instanceof, String]
[valueB]
[doubleB]
[Double, ., valueOf, (, (, String, ), valueB, )]
[Double]
[(, String, ), valueB]
[valueB]
[false]
[!, doubleA, ., equals, (, doubleB, )]
[doubleA, ., equals, (, doubleB, )]
[doubleA]
[doubleB]
[false]
[true]
[mismatchA, ==, null, &&, mismatchB, ==, null]
[mismatchA, ==, null]
[mismatchA]
[null]
[mismatchB, ==, null]
[mismatchB]
[null]
[compareSilent, (, )]
[null]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, )]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n "]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, )]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n "]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, )]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n "]
["The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, )]
["The trees are not equal: ", +, "\n\nTree1:\n "]
["The trees are not equal: "]
["\n\nTree1:\n "]
[treeA, ., toStringTree, (, )]
[treeA]
["\n\nTree2:\n "]
[treeB, ., toStringTree, (, )]
[treeB]
["\n\nSubtree1:\n "]
[mismatchA, ., toStringTree, (, )]
[mismatchA]
["\n\nSubtree2:\n "]
[mismatchB, ., toStringTree, (, )]
[mismatchB]
