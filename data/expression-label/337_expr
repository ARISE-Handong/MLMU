[5886554608114265863L]
[0.05]
[0.20]
[null]
[label]
[this, ., lowerMargin]
[this]
[DEFAULT_AXIS_MARGIN]
[this, ., upperMargin]
[this]
[DEFAULT_AXIS_MARGIN]
[this, ., categoryMargin]
[this]
[DEFAULT_CATEGORY_MARGIN]
[this, ., maximumCategoryLabelLines]
[this]
[1]
[this, ., maximumCategoryLabelWidthRatio]
[this]
[0.0f]
[this, ., categoryLabelPositionOffset]
[this]
[4]
[this, ., categoryLabelPositions]
[this]
[CategoryLabelPositions, ., STANDARD]
[CategoryLabelPositions]
[this, ., tickLabelFontMap]
[this]
[new, HashMap, (, )]
[this, ., tickLabelPaintMap]
[this]
[new, HashMap, (, )]
[this, ., categoryLabelToolTips]
[this]
[new, HashMap, (, )]
[this, ., lowerMargin]
[this]
[this, ., lowerMargin]
[this]
[margin]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., upperMargin]
[this]
[this, ., upperMargin]
[this]
[margin]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., categoryMargin]
[this]
[this, ., categoryMargin]
[this]
[margin]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., maximumCategoryLabelLines]
[this]
[this, ., maximumCategoryLabelLines]
[this]
[lines]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., maximumCategoryLabelWidthRatio]
[this]
[this, ., maximumCategoryLabelWidthRatio]
[this]
[ratio]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., categoryLabelPositionOffset]
[this]
[this, ., categoryLabelPositionOffset]
[this]
[offset]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., categoryLabelPositions]
[this]
[positions, ==, null]
[positions]
[null]
[new, IllegalArgumentException, (, "Null 'positions' argument.", )]
["Null 'positions' argument."]
[this, ., categoryLabelPositions]
[this]
[positions]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[(, Font, ), this, ., tickLabelFontMap, ., get, (, category, )]
[this, ., tickLabelFontMap, ., get, (, category, )]
[this, ., tickLabelFontMap]
[this]
[category]
[result, ==, null]
[result]
[null]
[result]
[getTickLabelFont, (, )]
[result]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[font, ==, null]
[font]
[null]
[this, ., tickLabelFontMap, ., remove, (, category, )]
[this, ., tickLabelFontMap]
[this]
[category]
[this, ., tickLabelFontMap, ., put, (, category, ,, font, )]
[this, ., tickLabelFontMap]
[this]
[category]
[font]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[(, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, )]
[this, ., tickLabelPaintMap, ., get, (, category, )]
[this, ., tickLabelPaintMap]
[this]
[category]
[result, ==, null]
[result]
[null]
[result]
[getTickLabelPaint, (, )]
[result]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[paint, ==, null]
[paint]
[null]
[this, ., tickLabelPaintMap, ., remove, (, category, )]
[this, ., tickLabelPaintMap]
[this]
[category]
[this, ., tickLabelPaintMap, ., put, (, category, ,, paint, )]
[this, ., tickLabelPaintMap]
[this]
[category]
[paint]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, )]
[this, ., categoryLabelToolTips]
[this]
[category]
[tooltip]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[(, String, ), this, ., categoryLabelToolTips, ., get, (, category, )]
[this, ., categoryLabelToolTips, ., get, (, category, )]
[this, ., categoryLabelToolTips]
[this]
[category]
[category, ==, null]
[category]
[null]
[new, IllegalArgumentException, (, "Null 'category' argument.", )]
["Null 'category' argument."]
[this, ., categoryLabelToolTips, ., remove, (, category, )]
[this, ., categoryLabelToolTips]
[this]
[category]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., categoryLabelToolTips, ., clear, (, )]
[this, ., categoryLabelToolTips]
[this]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[0.0]
[anchor, ==, CategoryAnchor, ., START]
[anchor]
[CategoryAnchor, ., START]
[CategoryAnchor]
[result]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, )]
[category]
[categoryCount]
[area]
[edge]
[anchor, ==, CategoryAnchor, ., MIDDLE]
[anchor]
[CategoryAnchor, ., MIDDLE]
[CategoryAnchor]
[result]
[getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, )]
[category]
[categoryCount]
[area]
[edge]
[anchor, ==, CategoryAnchor, ., END]
[anchor]
[CategoryAnchor, ., END]
[CategoryAnchor]
[result]
[getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, )]
[category]
[categoryCount]
[area]
[edge]
[result]
[0.0]
[(, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[(, edge, ==, RectangleEdge, ., TOP, )]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., BOTTOM, )]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[result]
[area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, )]
[area, ., getX, (, )]
[area]
[area, ., getWidth, (, ), *, getLowerMargin, (, )]
[area, ., getWidth, (, )]
[area]
[getLowerMargin, (, )]
[(, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[(, edge, ==, RectangleEdge, ., LEFT, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., RIGHT, )]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[result]
[area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, )]
[area, ., getMinY, (, )]
[area]
[area, ., getHeight, (, ), *, getLowerMargin, (, )]
[area, ., getHeight, (, )]
[area]
[getLowerMargin, (, )]
[calculateCategorySize, (, categoryCount, ,, area, ,, edge, )]
[categoryCount]
[area]
[edge]
[calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, )]
[categoryCount]
[area]
[edge]
[result]
[result, +, category, *, (, categorySize, +, categoryGapWidth, )]
[result]
[category, *, (, categorySize, +, categoryGapWidth, )]
[category]
[(, categorySize, +, categoryGapWidth, )]
[categorySize, +, categoryGapWidth]
[categorySize]
[categoryGapWidth]
[result]
[category, <, 0, ||, category, >=, categoryCount]
[category, <, 0]
[category]
[0]
[category, >=, categoryCount]
[category]
[categoryCount]
[new, IllegalArgumentException, (, "Invalid category index: ", +, category, )]
["Invalid category index: ", +, category]
["Invalid category index: "]
[category]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, )]
[category]
[categoryCount]
[area]
[edge]
[calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /, 2]
[calculateCategorySize, (, categoryCount, ,, area, ,, edge, )]
[categoryCount]
[area]
[edge]
[2]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, )]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, )]
[category]
[categoryCount]
[area]
[edge]
[calculateCategorySize, (, categoryCount, ,, area, ,, edge, )]
[categoryCount]
[area]
[edge]
[categories, ==, null]
[categories]
[null]
[new, IllegalArgumentException, (, "Null 'categories' argument.", )]
["Null 'categories' argument."]
[categories, ., indexOf, (, category, )]
[categories]
[category]
[categories, ., size, (, )]
[categories]
[getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, )]
[categoryIndex]
[categoryCount]
[area]
[edge]
[dataset, ., getColumnIndex, (, category, )]
[dataset]
[category]
[dataset, ., getColumnCount, (, )]
[dataset]
[dataset, ., getRowIndex, (, seriesKey, )]
[dataset]
[seriesKey]
[dataset, ., getRowCount, (, )]
[dataset]
[getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, )]
[categoryIndex]
[categoryCount]
[area]
[edge]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, )]
[categoryIndex]
[categoryCount]
[area]
[edge]
[end, -, start]
[end]
[start]
[seriesCount, ==, 1]
[seriesCount]
[1]
[start, +, width, /, 2.0]
[start]
[width, /, 2.0]
[width]
[2.0]
[(, width, *, itemMargin, ), /, (, seriesCount, -, 1, )]
[(, width, *, itemMargin, )]
[width, *, itemMargin]
[width]
[itemMargin]
[(, seriesCount, -, 1, )]
[seriesCount, -, 1]
[seriesCount]
[1]
[(, width, *, (, 1, -, itemMargin, ), ), /, seriesCount]
[(, width, *, (, 1, -, itemMargin, ), )]
[width, *, (, 1, -, itemMargin, )]
[width]
[(, 1, -, itemMargin, )]
[1, -, itemMargin]
[1]
[itemMargin]
[seriesCount]
[start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[start, +, (, seriesIndex, *, (, ww, +, gap, ), )]
[start]
[(, seriesIndex, *, (, ww, +, gap, ), )]
[seriesIndex, *, (, ww, +, gap, )]
[seriesIndex]
[(, ww, +, gap, )]
[ww, +, gap]
[ww]
[gap]
[ww, /, 2.0]
[ww]
[2.0]
[getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, )]
[categoryIndex]
[categoryCount]
[area]
[edge]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, )]
[categoryIndex]
[categoryCount]
[area]
[edge]
[end, -, start]
[end]
[start]
[seriesCount, ==, 1]
[seriesCount]
[1]
[start, +, width, /, 2.0]
[start]
[width, /, 2.0]
[width]
[2.0]
[(, width, *, itemMargin, ), /, (, seriesCount, -, 1, )]
[(, width, *, itemMargin, )]
[width, *, itemMargin]
[width]
[itemMargin]
[(, seriesCount, -, 1, )]
[seriesCount, -, 1]
[seriesCount]
[1]
[(, width, *, (, 1, -, itemMargin, ), ), /, seriesCount]
[(, width, *, (, 1, -, itemMargin, ), )]
[width, *, (, 1, -, itemMargin, )]
[width]
[(, 1, -, itemMargin, )]
[1, -, itemMargin]
[1]
[itemMargin]
[seriesCount]
[start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /, 2.0]
[start, +, (, seriesIndex, *, (, ww, +, gap, ), )]
[start]
[(, seriesIndex, *, (, ww, +, gap, ), )]
[seriesIndex, *, (, ww, +, gap, )]
[seriesIndex]
[(, ww, +, gap, )]
[ww, +, gap]
[ww]
[gap]
[ww, /, 2.0]
[ww]
[2.0]
[0.0]
[0.0]
[(, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[(, edge, ==, RectangleEdge, ., TOP, )]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., BOTTOM, )]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[available]
[area, ., getWidth, (, )]
[area]
[(, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[(, edge, ==, RectangleEdge, ., LEFT, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., RIGHT, )]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[available]
[area, ., getHeight, (, )]
[area]
[categoryCount, >, 1]
[categoryCount]
[1]
[result]
[available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), )]
[available]
[(, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), )]
[1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, )]
[1, -, getLowerMargin, (, ), -, getUpperMargin, (, )]
[1, -, getLowerMargin, (, )]
[1]
[getLowerMargin, (, )]
[getUpperMargin, (, )]
[getCategoryMargin, (, )]
[result]
[result, /, categoryCount]
[result]
[categoryCount]
[result]
[available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), )]
[available]
[(, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), )]
[1, -, getLowerMargin, (, ), -, getUpperMargin, (, )]
[1, -, getLowerMargin, (, )]
[1]
[getLowerMargin, (, )]
[getUpperMargin, (, )]
[result]
[0.0]
[0.0]
[(, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[(, edge, ==, RectangleEdge, ., TOP, )]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., BOTTOM, )]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[available]
[area, ., getWidth, (, )]
[area]
[(, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, )]
[(, edge, ==, RectangleEdge, ., LEFT, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[(, edge, ==, RectangleEdge, ., RIGHT, )]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[available]
[area, ., getHeight, (, )]
[area]
[categoryCount, >, 1]
[categoryCount]
[1]
[result]
[available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, )]
[available, *, getCategoryMargin, (, )]
[available]
[getCategoryMargin, (, )]
[(, categoryCount, -, 1, )]
[categoryCount, -, 1]
[categoryCount]
[1]
[result]
[space, ==, null]
[space]
[null]
[space]
[new, AxisSpace, (, )]
[!, isVisible, (, )]
[isVisible, (, )]
[space]
[0.0]
[0.0]
[isTickLabelsVisible, (, )]
[g2, ., setFont, (, getTickLabelFont, (, ), )]
[g2]
[getTickLabelFont, (, )]
[new, AxisState, (, )]
[refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, )]
[g2]
[state]
[plotArea]
[edge]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[tickLabelHeight]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[tickLabelHeight]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[tickLabelWidth]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[tickLabelWidth]
[state, ., getMax, (, )]
[state]
[getLabelEnclosure, (, g2, ,, edge, )]
[g2]
[edge]
[0.0]
[0.0]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[labelHeight]
[labelEnclosure, ., getHeight, (, )]
[labelEnclosure]
[space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, )]
[space]
[labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset]
[labelHeight, +, tickLabelHeight]
[labelHeight]
[tickLabelHeight]
[this, ., categoryLabelPositionOffset]
[this]
[edge]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[labelWidth]
[labelEnclosure, ., getWidth, (, )]
[labelEnclosure]
[space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, )]
[space]
[labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset]
[labelWidth, +, tickLabelWidth]
[labelWidth]
[tickLabelWidth]
[this, ., categoryLabelPositionOffset]
[this]
[edge]
[space]
[!, isVisible, (, )]
[isVisible, (, )]
[new, AxisState, (, cursor, )]
[cursor]
[isAxisLineVisible, (, )]
[drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, )]
[g2]
[cursor]
[dataArea]
[edge]
[new, AxisState, (, cursor, )]
[cursor]
[isTickMarksVisible, (, )]
[drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, )]
[g2]
[cursor]
[dataArea]
[edge]
[state]
[createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, )]
[cursor]
[state]
[dataArea]
[edge]
[plotState]
[state]
[drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, )]
[g2]
[plotArea]
[dataArea]
[edge]
[state]
[plotState]
[state]
[drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, )]
[getLabel, (, )]
[g2]
[plotArea]
[dataArea]
[edge]
[state]
[plotState]
[state]
[state, ==, null]
[state]
[null]
[new, IllegalArgumentException, (, "Null 'state' argument.", )]
["Null 'state' argument."]
[isTickLabelsVisible, (, )]
[refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, )]
[g2]
[state]
[plotArea]
[edge]
[state, ., setTicks, (, ticks, )]
[state]
[ticks]
[0]
[ticks, ., iterator, (, )]
[ticks]
[iterator, ., hasNext, (, )]
[iterator]
[(, CategoryTick, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), )]
[g2]
[getTickLabelFont, (, tick, ., getCategory, (, ), )]
[tick, ., getCategory, (, )]
[tick]
[g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), )]
[g2]
[getTickLabelPaint, (, tick, ., getCategory, (, ), )]
[tick, ., getCategory, (, )]
[tick]
[this, ., categoryLabelPositions, ., getLabelPosition, (, edge, )]
[this, ., categoryLabelPositions]
[this]
[edge]
[0.0]
[0.0]
[0.0]
[0.0]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[x0]
[getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[x1]
[getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[y1]
[state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset]
[state, ., getCursor, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[y0]
[y1, -, state, ., getMax, (, )]
[y1]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[x0]
[getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[x1]
[getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[y0]
[state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getCursor, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[y1]
[y0, +, state, ., getMax, (, )]
[y0]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[y0]
[getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[y1]
[getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[x1]
[state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset]
[state, ., getCursor, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[x0]
[x1, -, state, ., getMax, (, )]
[x1]
[state, ., getMax, (, )]
[state]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[y0]
[getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[y1]
[getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, )]
[categoryIndex]
[ticks, ., size, (, )]
[ticks]
[dataArea]
[edge]
[x0]
[state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getCursor, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[x1]
[x0, -, state, ., getMax, (, )]
[x0]
[state, ., getMax, (, )]
[state]
[new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), )]
[x0]
[y0]
[(, x1, -, x0, )]
[x1, -, x0]
[x1]
[x0]
[(, y1, -, y0, )]
[y1, -, y0]
[y1]
[y0]
[RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), )]
[RectangleAnchor]
[area]
[position, ., getCategoryAnchor, (, )]
[position]
[tick, ., getLabel, (, )]
[tick]
[block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), )]
[block]
[g2]
[(, float, ), anchorPoint, ., getX, (, )]
[anchorPoint, ., getX, (, )]
[anchorPoint]
[(, float, ), anchorPoint, ., getY, (, )]
[anchorPoint, ., getY, (, )]
[anchorPoint]
[position, ., getLabelAnchor, (, )]
[position]
[(, float, ), anchorPoint, ., getX, (, )]
[anchorPoint, ., getX, (, )]
[anchorPoint]
[(, float, ), anchorPoint, ., getY, (, )]
[anchorPoint, ., getY, (, )]
[anchorPoint]
[position, ., getAngle, (, )]
[position]
[block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), )]
[block]
[g2]
[(, float, ), anchorPoint, ., getX, (, )]
[anchorPoint, ., getX, (, )]
[anchorPoint]
[(, float, ), anchorPoint, ., getY, (, )]
[anchorPoint, ., getY, (, )]
[anchorPoint]
[position, ., getLabelAnchor, (, )]
[position]
[(, float, ), anchorPoint, ., getX, (, )]
[anchorPoint, ., getX, (, )]
[anchorPoint]
[(, float, ), anchorPoint, ., getY, (, )]
[anchorPoint, ., getY, (, )]
[anchorPoint]
[position, ., getAngle, (, )]
[position]
[plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null]
[plotState, !=, null]
[plotState]
[null]
[plotState, ., getOwner, (, ), !=, null]
[plotState, ., getOwner, (, )]
[plotState]
[null]
[plotState, ., getOwner, (, ), ., getEntityCollection, (, )]
[plotState, ., getOwner, (, )]
[plotState]
[entities, !=, null]
[entities]
[null]
[getCategoryLabelToolTip, (, tick, ., getCategory, (, ), )]
[tick, ., getCategory, (, )]
[tick]
[entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), )]
[entities]
[new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, )]
[tick, ., getCategory, (, )]
[tick]
[bounds]
[tooltip]
[null]
[categoryIndex, ++]
[categoryIndex]
[edge, ., equals, (, RectangleEdge, ., TOP, )]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getMax, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[state, ., cursorUp, (, h, )]
[state]
[h]
[edge, ., equals, (, RectangleEdge, ., BOTTOM, )]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getMax, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[state, ., cursorDown, (, h, )]
[state]
[h]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getMax, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[state, ., cursorLeft, (, w, )]
[state]
[w]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset]
[state, ., getMax, (, )]
[state]
[this, ., categoryLabelPositionOffset]
[this]
[state, ., cursorRight, (, w, )]
[state]
[w]
[state]
[new, java, ., util, ., ArrayList, (, )]
[dataArea, ., getHeight, (, ), <=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0]
[dataArea, ., getHeight, (, ), <=, 0.0]
[dataArea, ., getHeight, (, )]
[dataArea]
[0.0]
[dataArea, ., getWidth, (, ), <, 0.0]
[dataArea, ., getWidth, (, )]
[dataArea]
[0.0]
[ticks]
[(, CategoryPlot, ), getPlot, (, )]
[getPlot, (, )]
[plot, ., getCategoriesForAxis, (, this, )]
[plot]
[this]
[0.0]
[categories, !=, null]
[categories]
[null]
[this, ., categoryLabelPositions, ., getLabelPosition, (, edge, )]
[this, ., categoryLabelPositions]
[this]
[edge]
[this, ., maximumCategoryLabelWidthRatio]
[this]
[r, <=, 0.0]
[r]
[0.0]
[r]
[position, ., getWidthRatio, (, )]
[position]
[0.0f]
[position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY]
[position, ., getWidthType, (, )]
[position]
[CategoryLabelWidthType, ., CATEGORY]
[CategoryLabelWidthType]
[l]
[(, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, )]
[calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, )]
[categories, ., size, (, )]
[categories]
[dataArea]
[edge]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[l]
[(, float, ), dataArea, ., getWidth, (, )]
[dataArea, ., getWidth, (, )]
[dataArea]
[l]
[(, float, ), dataArea, ., getHeight, (, )]
[dataArea, ., getHeight, (, )]
[dataArea]
[0]
[categories, ., iterator, (, )]
[categories]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[g2, ., setFont, (, getTickLabelFont, (, category, ), )]
[g2]
[getTickLabelFont, (, category, )]
[category]
[createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, )]
[category]
[l, *, r]
[l]
[r]
[edge]
[g2]
[edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[max]
[Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), )]
[Math]
[max]
[calculateTextBlockHeight, (, label, ,, position, ,, g2, )]
[label]
[position]
[g2]
[edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[max]
[Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), )]
[Math]
[max]
[calculateTextBlockWidth, (, label, ,, position, ,, g2, )]
[label]
[position]
[g2]
[new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), )]
[category]
[label]
[position, ., getLabelAnchor, (, )]
[position]
[position, ., getRotationAnchor, (, )]
[position]
[position, ., getAngle, (, )]
[position]
[ticks, ., add, (, tick, )]
[ticks]
[tick]
[categoryIndex]
[categoryIndex, +, 1]
[categoryIndex]
[1]
[state, ., setMax, (, max, )]
[state]
[max]
[ticks]
[getPlot, (, )]
[p, ==, null]
[p]
[null]
[(, CategoryPlot, ), p]
[p]
[getTickMarkInsideLength, (, )]
[getTickMarkOutsideLength, (, )]
[new, Line2D, ., Double, (, )]
[plot, ., getCategoriesForAxis, (, this, )]
[plot]
[this]
[g2, ., setPaint, (, getTickMarkPaint, (, ), )]
[g2]
[getTickMarkPaint, (, )]
[g2, ., setStroke, (, getTickMarkStroke, (, ), )]
[g2]
[getTickMarkStroke, (, )]
[edge, ., equals, (, RectangleEdge, ., TOP, )]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[categories, ., iterator, (, )]
[categories]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, )]
[key]
[categories]
[dataArea]
[edge]
[line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, )]
[line]
[x]
[cursor]
[x]
[cursor, +, il]
[cursor]
[il]
[g2, ., draw, (, line, )]
[g2]
[line]
[line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, )]
[line]
[x]
[cursor]
[x]
[cursor, -, ol]
[cursor]
[ol]
[g2, ., draw, (, line, )]
[g2]
[line]
[state, ., cursorUp, (, ol, )]
[state]
[ol]
[edge, ., equals, (, RectangleEdge, ., BOTTOM, )]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[categories, ., iterator, (, )]
[categories]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, )]
[key]
[categories]
[dataArea]
[edge]
[line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, )]
[line]
[x]
[cursor]
[x]
[cursor, -, il]
[cursor]
[il]
[g2, ., draw, (, line, )]
[g2]
[line]
[line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, )]
[line]
[x]
[cursor]
[x]
[cursor, +, ol]
[cursor]
[ol]
[g2, ., draw, (, line, )]
[g2]
[line]
[state, ., cursorDown, (, ol, )]
[state]
[ol]
[edge, ., equals, (, RectangleEdge, ., LEFT, )]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[categories, ., iterator, (, )]
[categories]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, )]
[key]
[categories]
[dataArea]
[edge]
[line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, )]
[line]
[cursor]
[y]
[cursor, +, il]
[cursor]
[il]
[y]
[g2, ., draw, (, line, )]
[g2]
[line]
[line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, )]
[line]
[cursor]
[y]
[cursor, -, ol]
[cursor]
[ol]
[y]
[g2, ., draw, (, line, )]
[g2]
[line]
[state, ., cursorLeft, (, ol, )]
[state]
[ol]
[edge, ., equals, (, RectangleEdge, ., RIGHT, )]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[categories, ., iterator, (, )]
[categories]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, )]
[key]
[categories]
[dataArea]
[edge]
[line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, )]
[line]
[cursor]
[y]
[cursor, -, il]
[cursor]
[il]
[y]
[g2, ., draw, (, line, )]
[g2]
[line]
[line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, )]
[line]
[cursor]
[y]
[cursor, +, ol]
[cursor]
[ol]
[y]
[g2, ., draw, (, line, )]
[g2]
[line]
[state, ., cursorRight, (, ol, )]
[state]
[ol]
[TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), )]
[TextUtilities]
[category, ., toString, (, )]
[category]
[getTickLabelFont, (, category, )]
[category]
[getTickLabelPaint, (, category, )]
[category]
[width]
[this, ., maximumCategoryLabelLines]
[this]
[new, G2TextMeasurer, (, g2, )]
[g2]
[label]
[getTickLabelInsets, (, )]
[block, ., calculateDimensions, (, g2, )]
[block]
[g2]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), )]
[0.0]
[0.0]
[size, ., getWidth, (, )]
[size]
[size, ., getHeight, (, )]
[size]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, )]
[ShapeUtilities]
[box]
[position, ., getAngle, (, )]
[position]
[0.0f]
[0.0f]
[rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, )]
[rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, )]
[rotatedBox, ., getBounds2D, (, ), ., getWidth, (, )]
[rotatedBox, ., getBounds2D, (, )]
[rotatedBox]
[insets, ., getLeft, (, )]
[insets]
[insets, ., getRight, (, )]
[insets]
[w]
[getTickLabelInsets, (, )]
[block, ., calculateDimensions, (, g2, )]
[block]
[g2]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), )]
[0.0]
[0.0]
[size, ., getWidth, (, )]
[size]
[size, ., getHeight, (, )]
[size]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, )]
[ShapeUtilities]
[box]
[position, ., getAngle, (, )]
[position]
[0.0f]
[0.0f]
[rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, )]
[rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, )]
[rotatedBox, ., getBounds2D, (, ), ., getHeight, (, )]
[rotatedBox, ., getBounds2D, (, )]
[rotatedBox]
[insets, ., getTop, (, )]
[insets]
[insets, ., getBottom, (, )]
[insets]
[h]
[(, CategoryAxis, ), super, ., clone, (, )]
[super, ., clone, (, )]
[super]
[clone, ., tickLabelFontMap]
[clone]
[new, HashMap, (, this, ., tickLabelFontMap, )]
[this, ., tickLabelFontMap]
[this]
[clone, ., tickLabelPaintMap]
[clone]
[new, HashMap, (, this, ., tickLabelPaintMap, )]
[this, ., tickLabelPaintMap]
[this]
[clone, ., categoryLabelToolTips]
[clone]
[new, HashMap, (, this, ., categoryLabelToolTips, )]
[this, ., categoryLabelToolTips]
[this]
[clone]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, CategoryAxis, )]
[(, obj, instanceof, CategoryAxis, )]
[obj, instanceof, CategoryAxis]
[obj]
[false]
[!, super, ., equals, (, obj, )]
[super, ., equals, (, obj, )]
[super]
[obj]
[false]
[(, CategoryAxis, ), obj]
[obj]
[that, ., lowerMargin, !=, this, ., lowerMargin]
[that, ., lowerMargin]
[that]
[this, ., lowerMargin]
[this]
[false]
[that, ., upperMargin, !=, this, ., upperMargin]
[that, ., upperMargin]
[that]
[this, ., upperMargin]
[this]
[false]
[that, ., categoryMargin, !=, this, ., categoryMargin]
[that, ., categoryMargin]
[that]
[this, ., categoryMargin]
[this]
[false]
[that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio]
[that, ., maximumCategoryLabelWidthRatio]
[that]
[this, ., maximumCategoryLabelWidthRatio]
[this]
[false]
[that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset]
[that, ., categoryLabelPositionOffset]
[that]
[this, ., categoryLabelPositionOffset]
[this]
[false]
[!, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, )]
[ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, )]
[ObjectUtilities]
[that, ., categoryLabelPositions]
[that]
[this, ., categoryLabelPositions]
[this]
[false]
[!, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, )]
[ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, )]
[ObjectUtilities]
[that, ., categoryLabelToolTips]
[that]
[this, ., categoryLabelToolTips]
[this]
[false]
[!, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, )]
[ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, )]
[ObjectUtilities]
[this, ., tickLabelFontMap]
[this]
[that, ., tickLabelFontMap]
[that]
[false]
[!, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, )]
[equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, )]
[this, ., tickLabelPaintMap]
[this]
[that, ., tickLabelPaintMap]
[that]
[false]
[true]
[getLabel, (, ), !=, null]
[getLabel, (, )]
[null]
[getLabel, (, ), ., hashCode, (, )]
[getLabel, (, )]
[0]
[stream, ., defaultWriteObject, (, )]
[stream]
[writePaintMap, (, this, ., tickLabelPaintMap, ,, stream, )]
[this, ., tickLabelPaintMap]
[this]
[stream]
[stream, ., defaultReadObject, (, )]
[stream]
[this, ., tickLabelPaintMap]
[this]
[readPaintMap, (, stream, )]
[stream]
[in, ., readBoolean, (, )]
[in]
[isNull]
[null]
[new, HashMap, (, )]
[in, ., readInt, (, )]
[in]
[0]
[i, <, count]
[i]
[count]
[i, ++]
[i]
[(, Comparable, ), in, ., readObject, (, )]
[in, ., readObject, (, )]
[in]
[SerialUtilities, ., readPaint, (, in, )]
[SerialUtilities]
[in]
[result, ., put, (, category, ,, paint, )]
[result]
[category]
[paint]
[result]
[map, ==, null]
[map]
[null]
[out, ., writeBoolean, (, true, )]
[out]
[true]
[out, ., writeBoolean, (, false, )]
[out]
[false]
[map, ., keySet, (, )]
[map]
[keys, ., size, (, )]
[keys]
[out, ., writeInt, (, count, )]
[out]
[count]
[keys, ., iterator, (, )]
[keys]
[iterator, ., hasNext, (, )]
[iterator]
[(, Comparable, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[out, ., writeObject, (, key, )]
[out]
[key]
[SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,, out, )]
[SerialUtilities]
[(, Paint, ), map, ., get, (, key, )]
[map, ., get, (, key, )]
[map]
[key]
[out]
[map1, ., size, (, ), !=, map2, ., size, (, )]
[map1, ., size, (, )]
[map1]
[map2, ., size, (, )]
[map2]
[false]
[map1, ., entrySet, (, )]
[map1]
[entries, ., iterator, (, )]
[entries]
[iterator, ., hasNext, (, )]
[iterator]
[(, Map, ., Entry, ), iterator, ., next, (, )]
[iterator, ., next, (, )]
[iterator]
[(, Paint, ), entry, ., getValue, (, )]
[entry, ., getValue, (, )]
[entry]
[(, Paint, ), map2, ., get, (, entry, ., getKey, (, ), )]
[map2, ., get, (, entry, ., getKey, (, ), )]
[map2]
[entry, ., getKey, (, )]
[entry]
[!, PaintUtilities, ., equal, (, p1, ,, p2, )]
[PaintUtilities, ., equal, (, p1, ,, p2, )]
[PaintUtilities]
[p1]
[p2]
[false]
[true]
