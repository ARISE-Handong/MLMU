[RealMatrixFormat, ., getInstance, (, )]
[RealMatrixFormat]
[new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,, "", ,, "; ", ,, ", ", )]
["["]
["]"]
[""]
[""]
["; "]
[", "]
[(, rows, *, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, )]
[(, rows, *, columns, <=, 4096, )]
[rows, *, columns, <=, 4096]
[rows, *, columns]
[rows]
[columns]
[4096]
[new, Array2DRowRealMatrix, (, rows, ,, columns, )]
[rows]
[columns]
[new, BlockRealMatrix, (, rows, ,, columns, )]
[rows]
[columns]
[(, rows, *, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, )]
[(, rows, *, columns, <=, 4096, )]
[rows, *, columns, <=, 4096]
[rows, *, columns]
[rows]
[columns]
[4096]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, )]
[field]
[rows]
[columns]
[new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, )]
[field]
[rows]
[columns]
[data, ==, null, ||, data, [, 0, ], ==, null]
[data, ==, null]
[data]
[null]
[data, [, 0, ], ==, null]
[data, [, 0, ]]
[data]
[0]
[null]
[new, NullArgumentException, (, )]
[(, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, )]
[(, data, ., length, *, data, [, 0, ], ., length, <=, 4096, )]
[data, ., length, *, data, [, 0, ], ., length, <=, 4096]
[data, ., length, *, data, [, 0, ], ., length]
[data, ., length]
[data]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[4096]
[new, Array2DRowRealMatrix, (, data, )]
[data]
[new, BlockRealMatrix, (, data, )]
[data]
[data, ==, null, ||, data, [, 0, ], ==, null]
[data, ==, null]
[data]
[null]
[data, [, 0, ], ==, null]
[data, [, 0, ]]
[data]
[0]
[null]
[new, NullArgumentException, (, )]
[(, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data, )]
[(, data, ., length, *, data, [, 0, ], ., length, <=, 4096, )]
[data, ., length, *, data, [, 0, ], ., length, <=, 4096]
[data, ., length, *, data, [, 0, ], ., length]
[data, ., length]
[data]
[data, [, 0, ], ., length]
[data, [, 0, ]]
[data]
[0]
[4096]
[new, Array2DRowFieldMatrix, <, T, >, (, data, )]
[data]
[new, BlockFieldMatrix, <, T, >, (, data, )]
[data]
[createRealMatrix, (, dimension, ,, dimension, )]
[dimension]
[dimension]
[0]
[i, <, dimension]
[i]
[dimension]
[++, i]
[i]
[m, ., setEntry, (, i, ,, i, ,, 1.0, )]
[m]
[i]
[i]
[1.0]
[m]
[field, ., getZero, (, )]
[field]
[field, ., getOne, (, )]
[field]
[MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, )]
[MathArrays]
[field]
[dimension]
[dimension]
[0]
[row, <, dimension]
[row]
[dimension]
[row, ++]
[row]
[d, [, row, ]]
[d]
[row]
[Arrays, ., fill, (, dRow, ,, zero, )]
[Arrays]
[dRow]
[zero]
[dRow, [, row, ]]
[dRow]
[row]
[one]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,, false, )]
[field]
[d]
[false]
[createRealMatrix, (, diagonal, ., length, ,, diagonal, ., length, )]
[diagonal, ., length]
[diagonal]
[diagonal, ., length]
[diagonal]
[0]
[i, <, diagonal, ., length]
[i]
[diagonal, ., length]
[diagonal]
[++, i]
[i]
[m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], )]
[m]
[i]
[i]
[diagonal, [, i, ]]
[diagonal]
[i]
[m]
[createFieldMatrix, (, diagonal, [, 0, ], ., getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, )]
[diagonal, [, 0, ], ., getField, (, )]
[diagonal, [, 0, ]]
[diagonal]
[0]
[diagonal, ., length]
[diagonal]
[diagonal, ., length]
[diagonal]
[0]
[i, <, diagonal, ., length]
[i]
[diagonal, ., length]
[diagonal]
[++, i]
[i]
[m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], )]
[m]
[i]
[i]
[diagonal, [, i, ]]
[diagonal]
[i]
[m]
[data, ==, null]
[data]
[null]
[new, NullArgumentException, (, )]
[new, ArrayRealVector, (, data, ,, true, )]
[data]
[true]
[data, ==, null]
[data]
[null]
[new, NullArgumentException, (, )]
[data, ., length, ==, 0]
[data, ., length]
[data]
[0]
[new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, )]
[LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT]
[LocalizedFormats]
[new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, ), ,, data, ,, true, )]
[data, [, 0, ], ., getField, (, )]
[data, [, 0, ]]
[data]
[0]
[data]
[true]
[rowData, ==, null]
[rowData]
[null]
[new, NullArgumentException, (, )]
[rowData, ., length]
[rowData]
[createRealMatrix, (, 1, ,, nCols, )]
[1]
[nCols]
[0]
[i, <, nCols]
[i]
[nCols]
[++, i]
[i]
[m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], )]
[m]
[0]
[i]
[rowData, [, i, ]]
[rowData]
[i]
[m]
[rowData, ==, null]
[rowData]
[null]
[new, NullArgumentException, (, )]
[rowData, ., length]
[rowData]
[nCols, ==, 0]
[nCols]
[0]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, )]
[LocalizedFormats, ., AT_LEAST_ONE_COLUMN]
[LocalizedFormats]
[createFieldMatrix, (, rowData, [, 0, ], ., getField, (, ), ,, 1, ,, nCols, )]
[rowData, [, 0, ], ., getField, (, )]
[rowData, [, 0, ]]
[rowData]
[0]
[1]
[nCols]
[0]
[i, <, nCols]
[i]
[nCols]
[++, i]
[i]
[m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], )]
[m]
[0]
[i]
[rowData, [, i, ]]
[rowData]
[i]
[m]
[columnData, ==, null]
[columnData]
[null]
[new, NullArgumentException, (, )]
[columnData, ., length]
[columnData]
[createRealMatrix, (, nRows, ,, 1, )]
[nRows]
[1]
[0]
[i, <, nRows]
[i]
[nRows]
[++, i]
[i]
[m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], )]
[m]
[i]
[0]
[columnData, [, i, ]]
[columnData]
[i]
[m]
[columnData, ==, null]
[columnData]
[null]
[new, NullArgumentException, (, )]
[columnData, ., length]
[columnData]
[nRows, ==, 0]
[nRows]
[0]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, )]
[LocalizedFormats, ., AT_LEAST_ONE_ROW]
[LocalizedFormats]
[createFieldMatrix, (, columnData, [, 0, ], ., getField, (, ), ,, nRows, ,, 1, )]
[columnData, [, 0, ], ., getField, (, )]
[columnData, [, 0, ]]
[columnData]
[0]
[nRows]
[1]
[0]
[i, <, nRows]
[i]
[nRows]
[++, i]
[i]
[m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], )]
[m]
[i]
[0]
[columnData, [, i, ]]
[columnData]
[i]
[m]
[matrix, ., getRowDimension, (, )]
[matrix]
[rows, !=, matrix, ., getColumnDimension, (, )]
[rows]
[matrix, ., getColumnDimension, (, )]
[matrix]
[raiseException]
[new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension, (, ), )]
[rows]
[matrix, ., getColumnDimension, (, )]
[matrix]
[false]
[0]
[i, <, rows]
[i]
[rows]
[i, ++]
[i]
[i, +, 1]
[i]
[1]
[j, <, rows]
[j]
[rows]
[j, ++]
[j]
[matrix, ., getEntry, (, i, ,, j, )]
[matrix]
[i]
[j]
[matrix, ., getEntry, (, j, ,, i, )]
[matrix]
[j]
[i]
[FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance]
[FastMath, ., abs, (, mij, -, mji, )]
[FastMath]
[mij, -, mji]
[mij]
[mji]
[FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance]
[FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), )]
[FastMath]
[FastMath, ., abs, (, mij, )]
[FastMath]
[mij]
[FastMath, ., abs, (, mji, )]
[FastMath]
[mji]
[relativeTolerance]
[raiseException]
[new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, )]
[i]
[j]
[relativeTolerance]
[false]
[true]
[isSymmetricInternal, (, matrix, ,, eps, ,, true, )]
[matrix]
[eps]
[true]
[isSymmetricInternal, (, matrix, ,, eps, ,, false, )]
[matrix]
[eps]
[false]
[checkRowIndex, (, m, ,, row, )]
[m]
[row]
[checkColumnIndex, (, m, ,, column, )]
[m]
[column]
[row, <, 0, ||, row, >=, m, ., getRowDimension, (, )]
[row, <, 0]
[row]
[0]
[row, >=, m, ., getRowDimension, (, )]
[row]
[m, ., getRowDimension, (, )]
[m]
[new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -, 1, )]
[LocalizedFormats, ., ROW_INDEX]
[LocalizedFormats]
[row]
[0]
[m, ., getRowDimension, (, ), -, 1]
[m, ., getRowDimension, (, )]
[m]
[1]
[column, <, 0, ||, column, >=, m, ., getColumnDimension, (, )]
[column, <, 0]
[column]
[0]
[column, >=, m, ., getColumnDimension, (, )]
[column]
[m, ., getColumnDimension, (, )]
[m]
[new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -, 1, )]
[LocalizedFormats, ., COLUMN_INDEX]
[LocalizedFormats]
[column]
[0]
[m, ., getColumnDimension, (, ), -, 1]
[m, ., getColumnDimension, (, )]
[m]
[1]
[checkRowIndex, (, m, ,, startRow, )]
[m]
[startRow]
[checkRowIndex, (, m, ,, endRow, )]
[m]
[endRow]
[endRow, <, startRow]
[endRow]
[startRow]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, )]
[LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW]
[LocalizedFormats]
[endRow]
[startRow]
[false]
[checkColumnIndex, (, m, ,, startColumn, )]
[m]
[startColumn]
[checkColumnIndex, (, m, ,, endColumn, )]
[m]
[endColumn]
[endColumn, <, startColumn]
[endColumn]
[startColumn]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, false, )]
[LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN]
[LocalizedFormats]
[endColumn]
[startColumn]
[false]
[selectedRows, ==, null]
[selectedRows]
[null]
[new, NullArgumentException, (, )]
[selectedColumns, ==, null]
[selectedColumns]
[null]
[new, NullArgumentException, (, )]
[selectedRows, ., length, ==, 0]
[selectedRows, ., length]
[selectedRows]
[0]
[new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, )]
[LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY]
[LocalizedFormats]
[selectedColumns, ., length, ==, 0]
[selectedColumns, ., length]
[selectedColumns]
[0]
[new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, )]
[LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY]
[LocalizedFormats]
[selectedRows]
[checkRowIndex, (, m, ,, row, )]
[m]
[row]
[selectedColumns]
[checkColumnIndex, (, m, ,, column, )]
[m]
[column]
[(, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), )]
[(, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), )]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, )]
[left, ., getRowDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[(, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), )]
[left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, )]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getColumnDimension, (, )]
[right]
[new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), )]
[left, ., getRowDimension, (, )]
[left]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[right, ., getColumnDimension, (, )]
[right]
[(, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), )]
[(, left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), )]
[left, ., getRowDimension, (, ), !=, right, ., getRowDimension, (, )]
[left, ., getRowDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[(, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), )]
[left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, )]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getColumnDimension, (, )]
[right]
[new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), )]
[left, ., getRowDimension, (, )]
[left]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[right, ., getColumnDimension, (, )]
[right]
[left, ., getColumnDimension, (, ), !=, right, ., getRowDimension, (, )]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), )]
[left, ., getColumnDimension, (, )]
[left]
[right, ., getRowDimension, (, )]
[right]
[new, FractionMatrixConverter, (, )]
[m, ., walkInOptimizedOrder, (, converter, )]
[m]
[converter]
[converter, ., getConvertedMatrix, (, )]
[converter]
[Fraction, ., ZERO]
[Fraction]
[data]
[new, double, [, rows, ], [, columns, ]]
[rows]
[columns]
[data, [, row, ], [, column, ]]
[data, [, row, ]]
[data]
[row]
[column]
[value, ., doubleValue, (, )]
[value]
[new, Array2DRowRealMatrix, (, data, ,, false, )]
[data]
[false]
[new, BigFractionMatrixConverter, (, )]
[m, ., walkInOptimizedOrder, (, converter, )]
[m]
[converter]
[converter, ., getConvertedMatrix, (, )]
[converter]
[BigFraction, ., ZERO]
[BigFraction]
[data]
[new, double, [, rows, ], [, columns, ]]
[rows]
[columns]
[data, [, row, ], [, column, ]]
[data, [, row, ]]
[data]
[row]
[column]
[value, ., doubleValue, (, )]
[value]
[new, Array2DRowRealMatrix, (, data, ,, false, )]
[data]
[false]
[vector, ., getDimension, (, )]
[vector]
[oos, ., writeInt, (, n, )]
[oos]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[oos, ., writeDouble, (, vector, ., getEntry, (, i, ), )]
[oos]
[vector, ., getEntry, (, i, )]
[vector]
[i]
[ois, ., readInt, (, )]
[ois]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[data, [, i, ]]
[data]
[i]
[ois, ., readDouble, (, )]
[ois]
[new, ArrayRealVector, (, data, ,, false, )]
[data]
[false]
[instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, )]
[instance, ., getClass, (, )]
[instance]
[fieldName]
[f, ., setAccessible, (, true, )]
[f]
[true]
[f, ., set, (, instance, ,, vector, )]
[f]
[instance]
[vector]
[new, IOException, (, )]
[ioe, ., initCause, (, nsfe, )]
[ioe]
[nsfe]
[ioe]
[new, IOException, (, )]
[ioe, ., initCause, (, iae, )]
[ioe]
[iae]
[ioe]
[matrix, ., getRowDimension, (, )]
[matrix]
[matrix, ., getColumnDimension, (, )]
[matrix]
[oos, ., writeInt, (, n, )]
[oos]
[n]
[oos, ., writeInt, (, m, )]
[oos]
[m]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[0]
[j, <, m]
[j]
[m]
[++, j]
[j]
[oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), )]
[oos]
[matrix, ., getEntry, (, i, ,, j, )]
[matrix]
[i]
[j]
[ois, ., readInt, (, )]
[ois]
[ois, ., readInt, (, )]
[ois]
[new, double, [, n, ], [, m, ]]
[n]
[m]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[data, [, i, ]]
[data]
[i]
[0]
[j, <, m]
[j]
[m]
[++, j]
[j]
[dataI, [, j, ]]
[dataI]
[j]
[ois, ., readDouble, (, )]
[ois]
[new, Array2DRowRealMatrix, (, data, ,, false, )]
[data]
[false]
[instance, ., getClass, (, ), ., getDeclaredField, (, fieldName, )]
[instance, ., getClass, (, )]
[instance]
[fieldName]
[f, ., setAccessible, (, true, )]
[f]
[true]
[f, ., set, (, instance, ,, matrix, )]
[f]
[instance]
[matrix]
[new, IOException, (, )]
[ioe, ., initCause, (, nsfe, )]
[ioe]
[nsfe]
[ioe]
[new, IOException, (, )]
[ioe, ., initCause, (, iae, )]
[ioe]
[iae]
[ioe]
[(, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[(, rm, ==, null, ), ||, (, b, ==, null, )]
[(, rm, ==, null, )]
[rm, ==, null]
[rm]
[null]
[(, b, ==, null, )]
[b, ==, null]
[b]
[null]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[rm, ., getRowDimension, (, )]
[rm]
[b, ., getDimension, (, )]
[b]
[new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), )]
[(, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[(, rm, ==, null, )]
[rm, ==, null]
[rm]
[null]
[0]
[rm, ., getRowDimension, (, )]
[rm]
[(, b, ==, null, ), ?, 0, :, b, ., getDimension, (, )]
[(, b, ==, null, )]
[b, ==, null]
[b]
[null]
[0]
[b, ., getDimension, (, )]
[b]
[rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, )]
[rm, ., getColumnDimension, (, )]
[rm]
[rm, ., getRowDimension, (, )]
[rm]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), )]
[rm, ., getRowDimension, (, )]
[rm]
[rm, ., getColumnDimension, (, )]
[rm]
[rm, ., getRowDimension, (, )]
[rm]
[0]
[i, <, rows]
[i]
[rows]
[i, ++]
[i]
[rm, ., getEntry, (, i, ,, i, )]
[rm]
[i]
[i]
[FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN]
[FastMath, ., abs, (, diag, )]
[FastMath]
[diag]
[Precision, ., SAFE_MIN]
[Precision]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, )]
[LocalizedFormats, ., ZERO_DENOMINATOR]
[LocalizedFormats]
[b, ., getEntry, (, i, ), /, diag]
[b, ., getEntry, (, i, )]
[b]
[i]
[diag]
[b, ., setEntry, (, i, ,, bi, )]
[b]
[i]
[bi]
[i, +, 1]
[i]
[1]
[j, <, rows]
[j]
[rows]
[j, ++]
[j]
[b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), )]
[b]
[j]
[b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, )]
[b, ., getEntry, (, j, )]
[b]
[j]
[bi, *, rm, ., getEntry, (, j, ,, i, )]
[bi]
[rm, ., getEntry, (, j, ,, i, )]
[rm]
[j]
[i]
[(, rm, ==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[(, rm, ==, null, ), ||, (, b, ==, null, )]
[(, rm, ==, null, )]
[rm, ==, null]
[rm]
[null]
[(, b, ==, null, )]
[b, ==, null]
[b]
[null]
[(, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[rm, ., getRowDimension, (, )]
[rm]
[b, ., getDimension, (, )]
[b]
[new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), )]
[(, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[(, rm, ==, null, )]
[rm, ==, null]
[rm]
[null]
[0]
[rm, ., getRowDimension, (, )]
[rm]
[(, b, ==, null, ), ?, 0, :, b, ., getDimension, (, )]
[(, b, ==, null, )]
[b, ==, null]
[b]
[null]
[0]
[b, ., getDimension, (, )]
[b]
[rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, )]
[rm, ., getColumnDimension, (, )]
[rm]
[rm, ., getRowDimension, (, )]
[rm]
[new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), )]
[rm, ., getRowDimension, (, )]
[rm]
[rm, ., getColumnDimension, (, )]
[rm]
[rm, ., getRowDimension, (, )]
[rm]
[rows, -, 1]
[rows]
[1]
[i, >, -, 1]
[i]
[-, 1]
[1]
[i, --]
[i]
[rm, ., getEntry, (, i, ,, i, )]
[rm]
[i]
[i]
[FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN]
[FastMath, ., abs, (, diag, )]
[FastMath]
[diag]
[Precision, ., SAFE_MIN]
[Precision]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, )]
[LocalizedFormats, ., ZERO_DENOMINATOR]
[LocalizedFormats]
[b, ., getEntry, (, i, ), /, diag]
[b, ., getEntry, (, i, )]
[b]
[i]
[diag]
[b, ., setEntry, (, i, ,, bi, )]
[b]
[i]
[bi]
[i, -, 1]
[i]
[1]
[j, >, -, 1]
[j]
[-, 1]
[1]
[j, --]
[j]
[b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), )]
[b]
[j]
[b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, )]
[b, ., getEntry, (, j, )]
[b]
[j]
[bi, *, rm, ., getEntry, (, j, ,, i, )]
[bi]
[rm, ., getEntry, (, j, ,, i, )]
[rm]
[j]
[i]
[m, ., getRowDimension, (, )]
[m]
[m, ., getColumnDimension, (, ), !=, n]
[m, ., getColumnDimension, (, )]
[m]
[n]
[new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), )]
[m, ., getRowDimension, (, )]
[m]
[m, ., getColumnDimension, (, )]
[m]
[splitIndex, +, 1]
[splitIndex]
[1]
[m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, )]
[m]
[0]
[splitIndex]
[0]
[splitIndex]
[m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, )]
[m]
[0]
[splitIndex]
[splitIndex1]
[n, -, 1]
[n]
[1]
[m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, )]
[m]
[splitIndex1]
[n, -, 1]
[n]
[1]
[0]
[splitIndex]
[m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -, 1, )]
[m]
[splitIndex1]
[n, -, 1]
[n]
[1]
[splitIndex1]
[n, -, 1]
[n]
[1]
[new, SingularValueDecomposition, (, a, )]
[a]
[aDec, ., getSolver, (, )]
[aDec]
[!, aSolver, ., isNonSingular, (, )]
[aSolver, ., isNonSingular, (, )]
[aSolver]
[new, SingularMatrixException, (, )]
[aSolver, ., getInverse, (, )]
[aSolver]
[new, SingularValueDecomposition, (, d, )]
[d]
[dDec, ., getSolver, (, )]
[dDec]
[!, dSolver, ., isNonSingular, (, )]
[dSolver, ., isNonSingular, (, )]
[dSolver]
[new, SingularMatrixException, (, )]
[dSolver, ., getInverse, (, )]
[dSolver]
[a, ., subtract, (, b, ., multiply, (, dInv, ), ., multiply, (, c, ), )]
[a]
[b, ., multiply, (, dInv, ), ., multiply, (, c, )]
[b, ., multiply, (, dInv, )]
[b]
[dInv]
[c]
[new, SingularValueDecomposition, (, tmp1, )]
[tmp1]
[tmp1Dec, ., getSolver, (, )]
[tmp1Dec]
[!, tmp1Solver, ., isNonSingular, (, )]
[tmp1Solver, ., isNonSingular, (, )]
[tmp1Solver]
[new, SingularMatrixException, (, )]
[tmp1Solver, ., getInverse, (, )]
[tmp1Solver]
[d, ., subtract, (, c, ., multiply, (, aInv, ), ., multiply, (, b, ), )]
[d]
[c, ., multiply, (, aInv, ), ., multiply, (, b, )]
[c, ., multiply, (, aInv, )]
[c]
[aInv]
[b]
[new, SingularValueDecomposition, (, tmp2, )]
[tmp2]
[tmp2Dec, ., getSolver, (, )]
[tmp2Dec]
[!, tmp2Solver, ., isNonSingular, (, )]
[tmp2Solver, ., isNonSingular, (, )]
[tmp2Solver]
[new, SingularMatrixException, (, )]
[tmp2Solver, ., getInverse, (, )]
[tmp2Solver]
[aInv, ., multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, )]
[aInv, ., multiply, (, b, ), ., multiply, (, result11, )]
[aInv, ., multiply, (, b, )]
[aInv]
[b]
[result11]
[-, 1]
[1]
[dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (, -, 1, )]
[dInv, ., multiply, (, c, ), ., multiply, (, result00, )]
[dInv, ., multiply, (, c, )]
[dInv]
[c]
[result00]
[-, 1]
[1]
[new, Array2DRowRealMatrix, (, n, ,, n, )]
[n]
[n]
[result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, )]
[result]
[result00, ., getData, (, )]
[result00]
[0]
[0]
[result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, )]
[result]
[result01, ., getData, (, )]
[result01]
[0]
[splitIndex1]
[result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, )]
[result]
[result10, ., getData, (, )]
[result10]
[splitIndex1]
[0]
[result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, )]
[result]
[result11, ., getData, (, )]
[result11]
[splitIndex1]
[splitIndex1]
[result]
