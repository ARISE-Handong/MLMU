[1L]
[this, ., root]
[this]
[root]
[this, ., sourceName]
[this]
[sourceName]
[expr, ., isOptionalArg, (, ), ||, expr, ., isVarArgs, (, )]
[expr, ., isOptionalArg, (, )]
[expr]
[expr, ., isVarArgs, (, )]
[expr]
[expr]
[new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr, ., root, ), ,, expr, ., sourceName, )]
[new, Node, (, Token, ., EQUALS, ,, expr, ., root, )]
[Token, ., EQUALS]
[Token]
[expr, ., root]
[expr]
[expr, ., sourceName]
[expr]
[root, ., getType, (, ), ==, Token, ., EQUALS]
[root, ., getType, (, )]
[root]
[Token, ., EQUALS]
[Token]
[root, ., getType, (, ), ==, Token, ., ELLIPSIS]
[root, ., getType, (, )]
[root]
[Token, ., ELLIPSIS]
[Token]
[registry, ., createFromTypeNodes, (, root, ,, sourceName, ,, scope, )]
[registry]
[root]
[sourceName]
[scope]
[root, ., setJSType, (, type, )]
[root]
[type]
[type]
[other, instanceof, JSTypeExpression, &&, (, (, JSTypeExpression, ), other, ), ., root, ., isEquivalentTo, (, root, )]
[other, instanceof, JSTypeExpression]
[other]
[(, (, JSTypeExpression, ), other, ), ., root, ., isEquivalentTo, (, root, )]
[(, (, JSTypeExpression, ), other, ), ., root]
[(, (, JSTypeExpression, ), other, )]
[(, JSTypeExpression, ), other]
[other]
[root]
[root, ., toStringTree, (, ), ., hashCode, (, )]
[root, ., toStringTree, (, )]
[root]
[root]
