[DiagnosticType, ., warning, (, "JSC_INTERNAL_ERROR_DATAFLOW", ,, "non-monotonic data-flow analysis", )]
[DiagnosticType]
["JSC_INTERNAL_ERROR_DATAFLOW"]
["non-monotonic data-flow analysis"]
[this, ., compiler]
[this]
[compiler]
[this, ., reverseInterpreter]
[this]
[reverseInterpreter]
[this, ., topScope]
[this]
[topScope]
[this, ., scopeCreator]
[this]
[scopeCreator]
[assertionFunctionsMap]
[Maps, ., newHashMap, (, )]
[Maps]
[compiler, ., getCodingConvention, (, ), ., getAssertionFunctions, (, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[assertionFunctionsMap, ., put, (, assertionFucntion, ., getFunctionName, (, ), ,, assertionFucntion, )]
[assertionFunctionsMap]
[assertionFucntion, ., getFunctionName, (, )]
[assertionFucntion]
[assertionFucntion]
[jsRoot, ., getParent, (, )]
[jsRoot]
[Preconditions, ., checkState, (, externsAndJs, !=, null, )]
[Preconditions]
[externsAndJs, !=, null]
[externsAndJs]
[null]
[Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), )]
[Preconditions]
[externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, )]
[externsRoot, ==, null]
[externsRoot]
[null]
[externsAndJs, ., hasChild, (, externsRoot, )]
[externsAndJs]
[externsRoot]
[inferAllScopes, (, externsAndJs, )]
[externsAndJs]
[(, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, )]
[(, new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, ), )]
[new, NodeTraversal, (, compiler, ,, new, FirstScopeBuildingCallback, (, ), ,, scopeCreator, )]
[compiler]
[new, FirstScopeBuildingCallback, (, )]
[scopeCreator]
[node]
[topScope]
[(, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), ), ., traverseWithScope, (, node, ,, topScope, )]
[(, new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, ), )]
[new, NodeTraversal, (, compiler, ,, new, SecondScopeBuildingCallback, (, ), ,, scopeCreator, )]
[compiler]
[new, SecondScopeBuildingCallback, (, )]
[scopeCreator]
[node]
[topScope]
[new, TypeInference, (, compiler, ,, computeCfg, (, n, ), ,, reverseInterpreter, ,, scope, ,, assertionFunctionsMap, )]
[compiler]
[computeCfg, (, n, )]
[n]
[reverseInterpreter]
[scope]
[assertionFunctionsMap]
[typeInference, ., analyze, (, )]
[typeInference]
[compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, scope, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[scope]
[compiler, ., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,, DATAFLOW_ERROR, ), )]
[compiler]
[JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,, DATAFLOW_ERROR, )]
[JSError]
[n, ., getSourceFileName, (, )]
[n]
[n]
[DATAFLOW_ERROR]
[t, ., getScope, (, )]
[t]
[inferScope, (, t, ., getCurrentNode, (, ), ,, t, ., getScope, (, ), )]
[t, ., getCurrentNode, (, )]
[t]
[t, ., getScope, (, )]
[t]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, )]
[compiler]
[false]
[false]
[cfa, ., process, (, null, ,, n, )]
[cfa]
[null]
[n]
[cfa, ., getCfg, (, )]
[cfa]
