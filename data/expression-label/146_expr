[this, ., startNode]
[this]
[startNode]
[this, ., endNode]
[this]
[endNode]
[this, ., parent]
[this]
[parent]
[Lists, ., newArrayList, (, )]
[Lists]
[Sets, ., newHashSet, (, )]
[Sets]
[Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[!, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[collapses, ., clear, (, )]
[collapses]
[nodesToCollapse, ., clear, (, )]
[nodesToCollapse]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherCollapses, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, GatherCollapses, (, )]
[!, collapses, ., isEmpty, (, )]
[collapses, ., isEmpty, (, )]
[collapses]
[applyCollapses, (, )]
[compiler, ., reportCodeChange, (, )]
[compiler]
[Sets, ., newHashSet, (, )]
[Sets]
[n, ., isVar, (, )]
[n]
[blacklistStubVars, (, t, ,, n, )]
[t]
[n]
[!, n, ., isVar, (, ), &&, !, canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[!, n, ., isVar, (, )]
[n, ., isVar, (, )]
[n]
[!, canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[n]
[t, ., getScope, (, )]
[t]
[nodesToCollapse, ., contains, (, n, )]
[nodesToCollapse]
[n]
[parent, ., isIf, (, )]
[parent]
[n]
[n, ., isVar, (, )]
[n]
[n]
[n, ., getNext, (, )]
[n]
[false]
[n, !=, null, &&, (, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), )]
[n, !=, null]
[n]
[null]
[(, n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), ), )]
[n, ., isVar, (, ), ||, canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[n, ., isVar, (, )]
[n]
[canBeRedeclared, (, n, ,, t, ., getScope, (, ), )]
[n]
[t, ., getScope, (, )]
[t]
[n, ., isVar, (, )]
[n]
[blacklistStubVars, (, t, ,, n, )]
[t]
[n]
[hasVar]
[true]
[nodesToCollapse, ., add, (, n, )]
[nodesToCollapse]
[n]
[hasNodesToCollapse]
[true]
[n]
[n, ., getNext, (, )]
[n]
[hasNodesToCollapse, &&, hasVar]
[hasNodesToCollapse]
[hasVar]
[nodesToCollapse, ., add, (, varNode, )]
[nodesToCollapse]
[varNode]
[collapses, ., add, (, new, Collapse, (, varNode, ,, n, ,, parent, ), )]
[collapses]
[new, Collapse, (, varNode, ,, n, ,, parent, )]
[varNode]
[n]
[parent]
[varNode, ., getFirstChild, (, )]
[varNode]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., getFirstChild, (, ), ==, null]
[child, ., getFirstChild, (, )]
[child]
[null]
[blacklistedVars, ., add, (, t, ., getScope, (, ), ., getVar, (, child, ., getString, (, ), ), )]
[blacklistedVars]
[t, ., getScope, (, ), ., getVar, (, child, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[child, ., getString, (, )]
[child]
[!, NodeUtil, ., isExprAssign, (, n, )]
[NodeUtil, ., isExprAssign, (, n, )]
[NodeUtil]
[n]
[false]
[n, ., getFirstChild, (, )]
[n]
[assign, ., getFirstChild, (, )]
[assign]
[!, lhs, ., isName, (, )]
[lhs, ., isName, (, )]
[lhs]
[false]
[s, ., getVar, (, lhs, ., getString, (, ), )]
[s]
[lhs, ., getString, (, )]
[lhs]
[var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, ), &&, !, blacklistedVars, ., contains, (, var, )]
[var, !=, null, &&, var, ., getScope, (, ), ==, s, &&, !, isNamedParameter, (, var, )]
[var, !=, null, &&, var, ., getScope, (, ), ==, s]
[var, !=, null]
[var]
[null]
[var, ., getScope, (, ), ==, s]
[var, ., getScope, (, )]
[var]
[s]
[!, isNamedParameter, (, var, )]
[isNamedParameter, (, var, )]
[var]
[!, blacklistedVars, ., contains, (, var, )]
[blacklistedVars, ., contains, (, var, )]
[blacklistedVars]
[var]
[v, ., getParentNode, (, ), ., isParamList, (, )]
[v, ., getParentNode, (, )]
[v]
[collapses]
[new, Node, (, Token, ., VAR, )]
[Token, ., VAR]
[Token]
[var, ., copyInformationFrom, (, collapse, ., startNode, )]
[var]
[collapse, ., startNode]
[collapse]
[collapse, ., parent, ., addChildBefore, (, var, ,, collapse, ., startNode, )]
[collapse, ., parent]
[collapse]
[var]
[collapse, ., startNode]
[collapse]
[false]
[collapse, ., startNode]
[collapse]
[n, !=, collapse, ., endNode]
[n]
[collapse, ., endNode]
[collapse]
[n, ., getNext, (, )]
[n]
[Preconditions, ., checkState, (, var, ., getNext, (, ), ==, n, )]
[Preconditions]
[var, ., getNext, (, ), ==, n]
[var, ., getNext, (, )]
[var]
[n]
[collapse, ., parent, ., removeChildAfter, (, var, )]
[collapse, ., parent]
[collapse]
[var]
[n, ., isVar, (, )]
[n]
[n, ., hasChildren, (, )]
[n]
[var, ., addChildToBack, (, n, ., removeFirstChild, (, ), )]
[var]
[n, ., removeFirstChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[assign, ., getFirstChild, (, )]
[assign]
[Preconditions, ., checkState, (, lhs, ., isName, (, ), )]
[Preconditions]
[lhs, ., isName, (, )]
[lhs]
[assign, ., getLastChild, (, )]
[assign]
[lhs, ., addChildToBack, (, rhs, ., detachFromParent, (, ), )]
[lhs]
[rhs, ., detachFromParent, (, )]
[rhs]
[var, ., addChildToBack, (, lhs, ., detachFromParent, (, ), )]
[var]
[lhs, ., detachFromParent, (, )]
[lhs]
[redeclaration]
[true]
[n]
[next]
[redeclaration]
[new, JSDocInfo, (, )]
[info, ., addSuppression, (, "duplicate", )]
[info]
["duplicate"]
[var, ., setJSDocInfo, (, info, )]
[var]
[info]
