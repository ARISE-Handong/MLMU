[this, ., compiler]
[this]
[compiler]
[this, ., specializationState]
[this]
[state]
[new, SimpleDefinitionFinder, (, compiler, )]
[compiler]
[defFinder, ., process, (, externs, ,, root, )]
[defFinder]
[externs]
[root]
[process, (, externs, ,, root, ,, defFinder, )]
[externs]
[root]
[defFinder]
[definitions, ., getDefinitionSites, (, )]
[definitions]
[rewriteDefinitionIfEligible, (, defSite, ,, definitions, )]
[defSite]
[definitions]
[site, ., node]
[site]
[node, ., getParent, (, )]
[node]
[(, parent, ., getFirstChild, (, ), ==, node, ), &&, parent, ., isCall, (, )]
[(, parent, ., getFirstChild, (, ), ==, node, )]
[parent, ., getFirstChild, (, ), ==, node]
[parent, ., getFirstChild, (, )]
[parent]
[node]
[parent, ., isCall, (, )]
[parent]
[node, ., getParent, (, )]
[node]
[parent, ==, null]
[parent]
[null]
[false]
[parent, ., getParent, (, )]
[parent]
[gramp, ==, null]
[gramp]
[null]
[false]
[node, ., isGetProp, (, )]
[node]
[parent, ., getFirstChild, (, ), !=, node]
[parent, ., getFirstChild, (, )]
[parent]
[node]
[false]
[!, NodeUtil, ., isExprAssign, (, gramp, )]
[NodeUtil, ., isExprAssign, (, gramp, )]
[NodeUtil]
[gramp]
[false]
[parent, ., getLastChild, (, )]
[parent]
[(, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, )]
[(, functionNode, ==, null, )]
[functionNode, ==, null]
[functionNode]
[null]
[!, functionNode, ., isFunction, (, )]
[functionNode, ., isFunction, (, )]
[functionNode]
[false]
[node, ., getFirstChild, (, )]
[node]
[nameNode, ., isGetProp, (, ), &&, nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[nameNode, ., isGetProp, (, )]
[nameNode]
[nameNode, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[nameNode, ., getLastChild, (, ), ., getString, (, )]
[nameNode, ., getLastChild, (, )]
[nameNode]
["prototype"]
[node, ., isStringKey, (, )]
[node]
[Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), )]
[Preconditions]
[parent, ., isObjectLit, (, )]
[parent]
[!, gramp, ., isAssign, (, )]
[gramp, ., isAssign, (, )]
[gramp]
[false]
[gramp, ., getLastChild, (, ), !=, parent]
[gramp, ., getLastChild, (, )]
[gramp]
[parent]
[false]
[gramp, ., getParent, (, )]
[gramp]
[greatGramp, ==, null, ||, !, greatGramp, ., isExprResult, (, )]
[greatGramp, ==, null]
[greatGramp]
[null]
[!, greatGramp, ., isExprResult, (, )]
[greatGramp, ., isExprResult, (, )]
[greatGramp]
[false]
[node, ., getFirstChild, (, )]
[node]
[(, functionNode, ==, null, ), ||, !, functionNode, ., isFunction, (, )]
[(, functionNode, ==, null, )]
[functionNode, ==, null]
[functionNode]
[null]
[!, functionNode, ., isFunction, (, )]
[functionNode, ., isFunction, (, )]
[functionNode]
[false]
[gramp, ., getFirstChild, (, )]
[gramp]
[target, ., isGetProp, (, ), &&, target, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[target, ., isGetProp, (, )]
[target]
[target, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", )]
[target, ., getLastChild, (, ), ., getString, (, )]
[target, ., getLastChild, (, )]
[target]
["prototype"]
[false]
[node, ., isGetProp, (, )]
[node]
[node, ., getLastChild, (, ), ., getString, (, )]
[node, ., getLastChild, (, )]
[node]
[node, ., isStringKey, (, )]
[node]
[node, ., getString, (, )]
[node]
[new, IllegalStateException, (, "unexpected", )]
["unexpected"]
["JSCompiler_StaticMethods_", +, originalMethodName]
["JSCompiler_StaticMethods_"]
[originalMethodName]
[defSite, ., inExterns, ||, !, defSite, ., inGlobalScope, ||, !, isEligibleDefinition, (, defFinder, ,, defSite, )]
[defSite, ., inExterns, ||, !, defSite, ., inGlobalScope]
[defSite, ., inExterns]
[defSite]
[!, defSite, ., inGlobalScope]
[defSite, ., inGlobalScope]
[defSite]
[!, isEligibleDefinition, (, defFinder, ,, defSite, )]
[isEligibleDefinition, (, defFinder, ,, defSite, )]
[defFinder]
[defSite]
[defSite, ., node]
[defSite]
[!, isPrototypeMethodDefinition, (, node, )]
[isPrototypeMethodDefinition, (, node, )]
[node]
[node, ., getParent, (, )]
[node]
[ancestor, !=, null]
[ancestor]
[null]
[ancestor]
[ancestor, ., getParent, (, )]
[ancestor]
[NodeUtil, ., isControlStructure, (, ancestor, )]
[NodeUtil]
[ancestor]
[getRewrittenMethodName, (, getMethodName, (, node, ), )]
[getMethodName, (, node, )]
[node]
[rewriteDefinition, (, node, ,, newMethodName, )]
[node]
[newMethodName]
[rewriteCallSites, (, defFinder, ,, defSite, ., definition, ,, newMethodName, )]
[defFinder]
[defSite, ., definition]
[defSite]
[newMethodName]
[definitionSite, ., definition]
[definitionSite]
[definitionSite, ., module]
[definitionSite]
[definition, ., getRValue, (, )]
[definition]
[rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ||, NodeUtil, ., isVarArgsFunction, (, rValue, )]
[rValue, ==, null, ||, !, rValue, ., isFunction, (, )]
[rValue, ==, null]
[rValue]
[null]
[!, rValue, ., isFunction, (, )]
[rValue, ., isFunction, (, )]
[rValue]
[NodeUtil, ., isVarArgsFunction, (, rValue, )]
[NodeUtil]
[rValue]
[false]
[definition, ., getLValue, (, )]
[definition]
[(, lValue, ==, null, ), ||, !, lValue, ., isGetProp, (, )]
[(, lValue, ==, null, )]
[lValue, ==, null]
[lValue]
[null]
[!, lValue, ., isGetProp, (, )]
[lValue, ., isGetProp, (, )]
[lValue]
[false]
[compiler, ., getCodingConvention, (, )]
[compiler]
[codingConvention, ., isExported, (, lValue, ., getLastChild, (, ), ., getString, (, ), )]
[codingConvention]
[lValue, ., getLastChild, (, ), ., getString, (, )]
[lValue, ., getLastChild, (, )]
[lValue]
[false]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[useSites, ., isEmpty, (, )]
[useSites]
[false]
[compiler, ., getModuleGraph, (, )]
[compiler]
[useSites]
[!, isCall, (, site, )]
[isCall, (, site, )]
[site]
[false]
[site, ., node]
[site]
[specializationState, !=, null, &&, !, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, )]
[specializationState, !=, null]
[specializationState]
[null]
[!, specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, )]
[specializationState, ., canFixupSpecializedFunctionContainingNode, (, nameNode, )]
[specializationState]
[nameNode]
[false]
[defFinder, ., getDefinitionsReferencedAt, (, nameNode, )]
[defFinder]
[nameNode]
[singleSiteDefinitions, ., size, (, ), >, 1]
[singleSiteDefinitions, ., size, (, )]
[singleSiteDefinitions]
[1]
[false]
[Preconditions, ., checkState, (, !, singleSiteDefinitions, ., isEmpty, (, ), )]
[Preconditions]
[!, singleSiteDefinitions, ., isEmpty, (, )]
[singleSiteDefinitions, ., isEmpty, (, )]
[singleSiteDefinitions]
[Preconditions, ., checkState, (, singleSiteDefinitions, ., contains, (, definition, ), )]
[Preconditions]
[singleSiteDefinitions, ., contains, (, definition, )]
[singleSiteDefinitions]
[definition]
[site, ., module]
[site]
[(, definitionModule, !=, callModule, ), &&, (, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), )]
[(, definitionModule, !=, callModule, )]
[definitionModule, !=, callModule]
[definitionModule]
[callModule]
[(, (, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, ), )]
[(, callModule, ==, null, ), ||, !, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, )]
[(, callModule, ==, null, )]
[callModule, ==, null]
[callModule]
[null]
[!, moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, )]
[moduleGraph, ., dependsOn, (, callModule, ,, definitionModule, )]
[moduleGraph]
[callModule]
[definitionModule]
[false]
[true]
[defFinder, ., getUseSites, (, definition, )]
[defFinder]
[definition]
[useSites]
[site, ., node]
[site]
[node, ., getParent, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[node, ., removeChild, (, objectNode, )]
[node]
[objectNode]
[parent, ., replaceChild, (, node, ,, objectNode, )]
[parent]
[node]
[objectNode]
[parent, ., addChildToFront, (, IR, ., name, (, newMethodName, ), ., srcref, (, node, ), )]
[parent]
[IR, ., name, (, newMethodName, ), ., srcref, (, node, )]
[IR, ., name, (, newMethodName, )]
[IR]
[newMethodName]
[node]
[Preconditions, ., checkState, (, parent, ., isCall, (, ), )]
[Preconditions]
[parent, ., isCall, (, )]
[parent]
[parent, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[parent]
[Node, ., FREE_CALL]
[Node]
[true]
[compiler, ., reportCodeChange, (, )]
[compiler]
[specializationState, !=, null]
[specializationState]
[null]
[specializationState, ., reportSpecializedFunctionContainingNode, (, parent, )]
[specializationState]
[parent]
[node, ., isStringKey, (, )]
[node]
[node, ., getParent, (, )]
[node]
[isObjLitDefKey, ?, node, :, parent, ., getFirstChild, (, )]
[isObjLitDefKey]
[node]
[parent, ., getFirstChild, (, )]
[parent]
[IR, ., name, (, newMethodName, ), ., copyInformationFrom, (, refNode, )]
[IR, ., name, (, newMethodName, )]
[IR]
[newMethodName]
[refNode]
[IR, ., var, (, newNameNode, ), ., copyInformationFrom, (, refNode, )]
[IR, ., var, (, newNameNode, )]
[IR]
[newNameNode]
[refNode]
[!, isObjLitDefKey]
[isObjLitDefKey]
[Preconditions, ., checkState, (, parent, ., isAssign, (, ), )]
[Preconditions]
[parent, ., isAssign, (, )]
[parent]
[functionNode]
[parent, ., getLastChild, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[expr, ., getParent, (, )]
[expr]
[parent, ., removeChild, (, functionNode, )]
[parent]
[functionNode]
[newNameNode, ., addChildToFront, (, functionNode, )]
[newNameNode]
[functionNode]
[block, ., replaceChild, (, expr, ,, newVarNode, )]
[block]
[expr]
[newVarNode]
[specializationState, !=, null]
[specializationState]
[null]
[specializationState, ., reportRemovedFunction, (, functionNode, ,, block, )]
[specializationState]
[functionNode]
[block]
[Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), )]
[Preconditions]
[parent, ., isObjectLit, (, )]
[parent]
[functionNode]
[node, ., getFirstChild, (, )]
[node]
[parent, ., getParent, (, )]
[parent]
[assign, ., getParent, (, )]
[assign]
[expr, ., getParent, (, )]
[expr]
[node, ., removeChild, (, functionNode, )]
[node]
[functionNode]
[parent, ., removeChild, (, node, )]
[parent]
[node]
[newNameNode, ., addChildToFront, (, functionNode, )]
[newNameNode]
[functionNode]
[block, ., addChildAfter, (, newVarNode, ,, expr, )]
[block]
[newVarNode]
[expr]
[specializationState, !=, null]
[specializationState]
[null]
[specializationState, ., reportRemovedFunction, (, functionNode, ,, block, )]
[specializationState]
[functionNode]
[block]
[newMethodName, +, "$self"]
[newMethodName]
["$self"]
[functionNode, ., getFirstChild, (, ), ., getNext, (, )]
[functionNode, ., getFirstChild, (, )]
[functionNode]
[argList, ., addChildToFront, (, IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, ), )]
[argList]
[IR, ., name, (, self, ), ., copyInformationFrom, (, functionNode, )]
[IR, ., name, (, self, )]
[IR]
[self]
[functionNode]
[functionNode, ., getLastChild, (, )]
[functionNode]
[replaceReferencesToThis, (, body, ,, self, )]
[body]
[self]
[fixFunctionType, (, functionNode, )]
[functionNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), )]
[JSType]
[functionNode, ., getJSType, (, )]
[functionNode]
[type, !=, null]
[type]
[null]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[Lists, ., newArrayList, (, )]
[Lists]
[parameterTypes, ., add, (, type, ., getTypeOfThis, (, ), )]
[parameterTypes]
[type, ., getTypeOfThis, (, )]
[type]
[type, ., getParameters, (, )]
[type]
[parameterTypes, ., add, (, param, ., getJSType, (, ), )]
[parameterTypes]
[param, ., getJSType, (, )]
[param]
[typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[typeRegistry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[type, ., getReturnType, (, )]
[type]
[typeRegistry, ., createFunctionType, (, thisType, ,, returnType, ,, parameterTypes, )]
[typeRegistry]
[thisType]
[returnType]
[parameterTypes]
[functionNode, ., setJSType, (, newType, )]
[functionNode]
[newType]
[node, ., isFunction, (, )]
[node]
[node, ., children, (, )]
[node]
[child, ., isThis, (, )]
[child]
[IR, ., name, (, name, )]
[IR]
[name]
[newName, ., setJSType, (, child, ., getJSType, (, ), )]
[newName]
[child, ., getJSType, (, )]
[child]
[node, ., replaceChild, (, child, ,, newName, )]
[node]
[child]
[newName]
[replaceReferencesToThis, (, child, ,, name, )]
[child]
[name]
