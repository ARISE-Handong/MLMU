[1E-14]
[.9189385332046727]
[{, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }]
[.833333333333333333333333333333E-01]
[-, .277777777777777777777777752282E-04]
[.277777777777777777777777752282E-04]
[.793650793650793650791732130419E-07]
[-, .595238095238095232389839236182E-09]
[.595238095238095232389839236182E-09]
[.841750841750832853294451671990E-11]
[-, .191752691751854612334149171243E-12]
[.191752691751854612334149171243E-12]
[.641025640510325475730918472625E-14]
[-, .295506514125338232839867823991E-15]
[.295506514125338232839867823991E-15]
[.179643716359402238723287696452E-16]
[-, .139228964661627791231203060395E-17]
[.139228964661627791231203060395E-17]
[.133802855014020915603275339093E-18]
[-, .154246009867966094273710216533E-19]
[.154246009867966094273710216533E-19]
[.197701992980957427278370133333E-20]
[-, .234065664793997056856992426667E-21]
[.234065664793997056856992426667E-21]
[.171348014966398575409015466667E-22]
[regularizedBeta, (, x, ,, a, ,, b, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, )]
[x]
[a]
[b]
[DEFAULT_EPSILON]
[Integer, ., MAX_VALUE]
[Integer]
[regularizedBeta, (, x, ,, a, ,, b, ,, epsilon, ,, Integer, ., MAX_VALUE, )]
[x]
[a]
[b]
[epsilon]
[Integer, ., MAX_VALUE]
[Integer]
[regularizedBeta, (, x, ,, a, ,, b, ,, DEFAULT_EPSILON, ,, maxIterations, )]
[x]
[a]
[b]
[DEFAULT_EPSILON]
[maxIterations]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, )]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[Double, ., isNaN, (, a, )]
[Double]
[a]
[Double, ., isNaN, (, b, )]
[Double]
[b]
[x, <, 0]
[x]
[0]
[x, >, 1]
[x]
[1]
[a, <=, 0.0]
[a]
[0.0]
[b, <=, 0.0]
[b]
[0.0]
[ret]
[Double, ., NaN]
[Double]
[x, >, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, )]
[x]
[(, a, +, 1.0, ), /, (, a, +, b, +, 2.0, )]
[(, a, +, 1.0, )]
[a, +, 1.0]
[a]
[1.0]
[(, a, +, b, +, 2.0, )]
[a, +, b, +, 2.0]
[a, +, b]
[a]
[b]
[2.0]
[ret]
[1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, )]
[1.0]
[regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, )]
[1.0, -, x]
[1.0]
[x]
[b]
[a]
[epsilon]
[maxIterations]
[new, ContinuedFraction, (, ), {, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }]
[n, %, 2, ==, 0]
[n, %, 2]
[n]
[2]
[0]
[m]
[n, /, 2.0]
[n]
[2.0]
[ret]
[(, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), )]
[(, m, *, (, b, -, m, ), *, x, )]
[m, *, (, b, -, m, ), *, x]
[m, *, (, b, -, m, )]
[m]
[(, b, -, m, )]
[b, -, m]
[b]
[m]
[x]
[(, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), )]
[(, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), )]
[(, a, +, (, 2, *, m, ), -, 1, )]
[a, +, (, 2, *, m, ), -, 1]
[a, +, (, 2, *, m, )]
[a]
[(, 2, *, m, )]
[2, *, m]
[2]
[m]
[1]
[(, a, +, (, 2, *, m, ), )]
[a, +, (, 2, *, m, )]
[a]
[(, 2, *, m, )]
[2, *, m]
[2]
[m]
[m]
[(, n, -, 1.0, ), /, 2.0]
[(, n, -, 1.0, )]
[n, -, 1.0]
[n]
[1.0]
[2.0]
[ret]
[-, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), )]
[-, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, )]
[(, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, )]
[(, a, +, m, ), *, (, a, +, b, +, m, ), *, x]
[(, a, +, m, ), *, (, a, +, b, +, m, )]
[(, a, +, m, )]
[a, +, m]
[a]
[m]
[(, a, +, b, +, m, )]
[a, +, b, +, m]
[a, +, b]
[a]
[b]
[m]
[x]
[(, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), )]
[(, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, )]
[(, a, +, (, 2, *, m, ), )]
[a, +, (, 2, *, m, )]
[a]
[(, 2, *, m, )]
[2, *, m]
[2]
[m]
[(, a, +, (, 2, *, m, ), +, 1.0, )]
[a, +, (, 2, *, m, ), +, 1.0]
[a, +, (, 2, *, m, )]
[a]
[(, 2, *, m, )]
[2, *, m]
[2]
[m]
[1.0]
[ret]
[1.0]
[ret]
[FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, )]
[FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0]
[FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), )]
[FastMath]
[(, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, )]
[(, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, )]
[(, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), )]
[(, a, *, FastMath, ., log, (, x, ), )]
[a, *, FastMath, ., log, (, x, )]
[a]
[FastMath, ., log, (, x, )]
[FastMath]
[x]
[(, b, *, FastMath, ., log, (, 1.0, -, x, ), )]
[b, *, FastMath, ., log, (, 1.0, -, x, )]
[b]
[FastMath, ., log, (, 1.0, -, x, )]
[FastMath]
[1.0, -, x]
[1.0]
[x]
[FastMath, ., log, (, a, )]
[FastMath]
[a]
[logBeta, (, a, ,, b, )]
[a]
[b]
[1.0]
[fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, )]
[fraction]
[x]
[epsilon]
[maxIterations]
[ret]
[logBeta, (, a, ,, b, )]
[a]
[b]
[(, a, <, 1.0, ), ||, (, a, >, 2.0, )]
[(, a, <, 1.0, )]
[a, <, 1.0]
[a]
[1.0]
[(, a, >, 2.0, )]
[a, >, 2.0]
[a]
[2.0]
[new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, )]
[a]
[1.0]
[2.0]
[(, b, <, 1.0, ), ||, (, b, >, 2.0, )]
[(, b, <, 1.0, )]
[b, <, 1.0]
[b]
[1.0]
[(, b, >, 2.0, )]
[b, >, 2.0]
[b]
[2.0]
[new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, )]
[b]
[1.0]
[2.0]
[(, a, -, 1.0, ), +, (, b, -, 1.0, )]
[(, a, -, 1.0, )]
[a, -, 1.0]
[a]
[1.0]
[(, b, -, 1.0, )]
[b, -, 1.0]
[b]
[1.0]
[x, <=, 0.5]
[x]
[0.5]
[Gamma, ., logGamma1p, (, 1.0, +, x, )]
[Gamma]
[1.0, +, x]
[1.0]
[x]
[x, <=, 1.5]
[x]
[1.5]
[Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, )]
[Gamma, ., logGamma1p, (, x, )]
[Gamma]
[x]
[FastMath, ., log1p, (, x, )]
[FastMath]
[x]
[Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *, (, 1.0, +, x, ), )]
[Gamma, ., logGamma1p, (, x, -, 1.0, )]
[Gamma]
[x, -, 1.0]
[x]
[1.0]
[FastMath, ., log, (, x, *, (, 1.0, +, x, ), )]
[FastMath]
[x, *, (, 1.0, +, x, )]
[x]
[(, 1.0, +, x, )]
[1.0, +, x]
[1.0]
[x]
[a, <, 0.0]
[a]
[0.0]
[new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, )]
[a]
[0.0]
[true]
[b, <, 10.0]
[b]
[10.0]
[new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, )]
[b]
[10.0]
[true]
[a, <=, b]
[a]
[b]
[d]
[b, +, (, a, -, 0.5, )]
[b]
[(, a, -, 0.5, )]
[a, -, 0.5]
[a]
[0.5]
[w]
[deltaMinusDeltaSum, (, a, ,, b, )]
[a]
[b]
[d]
[a, +, (, b, -, 0.5, )]
[a]
[(, b, -, 0.5, )]
[b, -, 0.5]
[b]
[0.5]
[w]
[deltaMinusDeltaSum, (, b, ,, a, )]
[b]
[a]
[d, *, FastMath, ., log1p, (, a, /, b, )]
[d]
[FastMath, ., log1p, (, a, /, b, )]
[FastMath]
[a, /, b]
[a]
[b]
[a, *, (, FastMath, ., log, (, b, ), -, 1.0, )]
[a]
[(, FastMath, ., log, (, b, ), -, 1.0, )]
[FastMath, ., log, (, b, ), -, 1.0]
[FastMath, ., log, (, b, )]
[FastMath]
[b]
[1.0]
[u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, ), -, u]
[u, <=, v]
[u]
[v]
[(, w, -, u, ), -, v]
[(, w, -, u, )]
[w, -, u]
[w]
[u]
[v]
[(, w, -, v, ), -, u]
[(, w, -, v, )]
[w, -, v]
[w]
[v]
[u]
[(, a, <, 0, ), ||, (, a, >, b, )]
[(, a, <, 0, )]
[a, <, 0]
[a]
[0]
[(, a, >, b, )]
[a, >, b]
[a]
[b]
[new, OutOfRangeException, (, a, ,, 0, ,, b, )]
[a]
[0]
[b]
[b, <, 10]
[b]
[10]
[new, NumberIsTooSmallException, (, b, ,, 10, ,, true, )]
[b]
[10]
[true]
[a, /, b]
[a]
[b]
[h, /, (, 1.0, +, h, )]
[h]
[(, 1.0, +, h, )]
[1.0, +, h]
[1.0]
[h]
[1.0, /, (, 1.0, +, h, )]
[1.0]
[(, 1.0, +, h, )]
[1.0, +, h]
[1.0]
[h]
[q, *, q]
[q]
[q]
[new, double, [, DELTA, ., length, ]]
[DELTA, ., length]
[DELTA]
[s, [, 0, ]]
[s]
[0]
[1.0]
[1]
[i, <, s, ., length]
[i]
[s, ., length]
[s]
[i, ++]
[i]
[s, [, i, ]]
[s]
[i]
[1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], )]
[1.0]
[(, q, +, q2, *, s, [, i, -, 1, ], )]
[q, +, q2, *, s, [, i, -, 1, ]]
[q]
[q2, *, s, [, i, -, 1, ]]
[q2]
[s, [, i, -, 1, ]]
[s]
[i, -, 1]
[i]
[1]
[10.0, /, b]
[10.0]
[b]
[sqrtT, *, sqrtT]
[sqrtT]
[sqrtT]
[DELTA, [, DELTA, ., length, -, 1, ], *, s, [, s, ., length, -, 1, ]]
[DELTA, [, DELTA, ., length, -, 1, ]]
[DELTA]
[DELTA, ., length, -, 1]
[DELTA, ., length]
[DELTA]
[1]
[s, [, s, ., length, -, 1, ]]
[s]
[s, ., length, -, 1]
[s, ., length]
[s]
[1]
[DELTA, ., length, -, 2]
[DELTA, ., length]
[DELTA]
[2]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[w]
[t, *, w, +, DELTA, [, i, ], *, s, [, i, ]]
[t, *, w]
[t]
[w]
[DELTA, [, i, ], *, s, [, i, ]]
[DELTA, [, i, ]]
[DELTA]
[i]
[s, [, i, ]]
[s]
[i]
[w, *, p, /, b]
[w, *, p]
[w]
[p]
[b]
[p, <, 10.0]
[p]
[10.0]
[new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, )]
[p]
[10.0]
[true]
[q, <, 10.0]
[q]
[10.0]
[new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, )]
[q]
[10.0]
[true]
[FastMath, ., min, (, p, ,, q, )]
[FastMath]
[p]
[q]
[FastMath, ., max, (, p, ,, q, )]
[FastMath]
[p]
[q]
[10.0, /, a]
[10.0]
[a]
[sqrtT, *, sqrtT]
[sqrtT]
[sqrtT]
[DELTA, [, DELTA, ., length, -, 1, ]]
[DELTA]
[DELTA, ., length, -, 1]
[DELTA, ., length]
[DELTA]
[1]
[DELTA, ., length, -, 2]
[DELTA, ., length]
[DELTA]
[2]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[z]
[t, *, z, +, DELTA, [, i, ]]
[t, *, z]
[t]
[z]
[DELTA, [, i, ]]
[DELTA]
[i]
[z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, )]
[z, /, a]
[z]
[a]
[deltaMinusDeltaSum, (, a, ,, b, )]
[a]
[b]
[Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, )]
[Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, )]
[Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, )]
[Double, ., isNaN, (, p, )]
[Double]
[p]
[Double, ., isNaN, (, q, )]
[Double]
[q]
[(, p, <=, 0.0, )]
[p, <=, 0.0]
[p]
[0.0]
[(, q, <=, 0.0, )]
[q, <=, 0.0]
[q]
[0.0]
[Double, ., NaN]
[Double]
[FastMath, ., min, (, p, ,, q, )]
[FastMath]
[p]
[q]
[FastMath, ., max, (, p, ,, q, )]
[FastMath]
[p]
[q]
[a, >=, 10.0]
[a]
[10.0]
[sumDeltaMinusDeltaSum, (, a, ,, b, )]
[a]
[b]
[a, /, b]
[a]
[b]
[h, /, (, 1.0, +, h, )]
[h]
[(, 1.0, +, h, )]
[1.0, +, h]
[1.0]
[h]
[-, (, a, -, 0.5, ), *, FastMath, ., log, (, c, )]
[-, (, a, -, 0.5, )]
[(, a, -, 0.5, )]
[a, -, 0.5]
[a]
[0.5]
[FastMath, ., log, (, c, )]
[FastMath]
[c]
[b, *, FastMath, ., log1p, (, h, )]
[b]
[FastMath, ., log1p, (, h, )]
[FastMath]
[h]
[u, <=, v]
[u]
[v]
[(, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v]
[(, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, )]
[(, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u]
[(, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, )]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, )]
[-, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI]
[-, 0.5, *, FastMath, ., log, (, b, )]
[-, 0.5]
[0.5]
[FastMath, ., log, (, b, )]
[FastMath]
[b]
[HALF_LOG_TWO_PI]
[w]
[u]
[v]
[(, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u]
[(, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, )]
[(, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v]
[(, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, )]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, )]
[-, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI]
[-, 0.5, *, FastMath, ., log, (, b, )]
[-, 0.5]
[0.5]
[FastMath, ., log, (, b, )]
[FastMath]
[b]
[HALF_LOG_TWO_PI]
[w]
[v]
[u]
[a, >, 2.0]
[a]
[2.0]
[b, >, 1000.0]
[b]
[1000.0]
[(, int, ), FastMath, ., floor, (, a, -, 1.0, )]
[FastMath, ., floor, (, a, -, 1.0, )]
[FastMath]
[a, -, 1.0]
[a]
[1.0]
[1.0]
[a]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[ared]
[1.0]
[prod]
[ared, /, (, 1.0, +, ared, /, b, )]
[ared]
[(, 1.0, +, ared, /, b, )]
[1.0, +, ared, /, b]
[1.0]
[ared, /, b]
[ared]
[b]
[(, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), )]
[(, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), )]
[FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, )]
[FastMath, ., log, (, prod, )]
[FastMath]
[prod]
[n, *, FastMath, ., log, (, b, )]
[n]
[FastMath, ., log, (, b, )]
[FastMath]
[b]
[(, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), )]
[Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, )]
[Gamma, ., logGamma, (, ared, )]
[Gamma]
[ared]
[logGammaMinusLogGammaSum, (, ared, ,, b, )]
[ared]
[b]
[1.0]
[a]
[ared, >, 2.0]
[ared]
[2.0]
[ared]
[1.0]
[ared, /, b]
[ared]
[b]
[prod1]
[h, /, (, 1.0, +, h, )]
[h]
[(, 1.0, +, h, )]
[1.0, +, h]
[1.0]
[h]
[b, <, 10.0]
[b]
[10.0]
[1.0]
[b]
[bred, >, 2.0]
[bred]
[2.0]
[bred]
[1.0]
[prod2]
[bred, /, (, ared, +, bred, )]
[bred]
[(, ared, +, bred, )]
[ared, +, bred]
[ared]
[bred]
[FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), )]
[FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, )]
[FastMath, ., log, (, prod1, )]
[FastMath]
[prod1]
[FastMath, ., log, (, prod2, )]
[FastMath]
[prod2]
[(, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), )]
[Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), )]
[Gamma, ., logGamma, (, ared, )]
[Gamma]
[ared]
[(, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), )]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, )]
[Gamma, ., logGamma, (, bred, )]
[Gamma]
[bred]
[logGammaSum, (, ared, ,, bred, )]
[ared]
[bred]
[FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, )]
[FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, )]
[FastMath, ., log, (, prod1, )]
[FastMath]
[prod1]
[Gamma, ., logGamma, (, ared, )]
[Gamma]
[ared]
[logGammaMinusLogGammaSum, (, ared, ,, b, )]
[ared]
[b]
[a, >=, 1.0]
[a]
[1.0]
[b, >, 2.0]
[b]
[2.0]
[b, <, 10.0]
[b]
[10.0]
[1.0]
[b]
[bred, >, 2.0]
[bred]
[2.0]
[bred]
[1.0]
[prod]
[bred, /, (, a, +, bred, )]
[bred]
[(, a, +, bred, )]
[a, +, bred]
[a]
[bred]
[FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), )]
[FastMath, ., log, (, prod, )]
[FastMath]
[prod]
[(, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), )]
[Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), )]
[Gamma, ., logGamma, (, a, )]
[Gamma]
[a]
[(, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), )]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, )]
[Gamma, ., logGamma, (, bred, )]
[Gamma]
[bred]
[logGammaSum, (, a, ,, bred, )]
[a]
[bred]
[Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, )]
[Gamma, ., logGamma, (, a, )]
[Gamma]
[a]
[logGammaMinusLogGammaSum, (, a, ,, b, )]
[a]
[b]
[Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, )]
[Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, )]
[Gamma, ., logGamma, (, a, )]
[Gamma]
[a]
[Gamma, ., logGamma, (, b, )]
[Gamma]
[b]
[logGammaSum, (, a, ,, b, )]
[a]
[b]
[b, >=, 10.0]
[b]
[10.0]
[Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, )]
[Gamma, ., logGamma, (, a, )]
[Gamma]
[a]
[logGammaMinusLogGammaSum, (, a, ,, b, )]
[a]
[b]
[FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b, ), )]
[FastMath]
[Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b, )]
[Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, )]
[Gamma, ., gamma, (, a, )]
[Gamma]
[a]
[Gamma, ., gamma, (, b, )]
[Gamma]
[b]
[Gamma, ., gamma, (, a, +, b, )]
[Gamma]
[a, +, b]
[a]
[b]
