[1.0e-6]
[10]
[DEFAULT_EPSILON]
[DEFAULT_ULPS]
[this, ., epsilon]
[this]
[epsilon]
[this, ., maxUlps]
[this]
[maxUlps]
[0]
[null]
[tableau, ., getNumObjectiveFunctions, (, )]
[tableau]
[i, <, tableau, ., getWidth, (, ), -, 1]
[i]
[tableau, ., getWidth, (, ), -, 1]
[tableau, ., getWidth, (, )]
[tableau]
[1]
[i, ++]
[i]
[tableau, ., getEntry, (, 0, ,, i, )]
[tableau]
[0]
[i]
[entry, <, minValue]
[entry]
[minValue]
[minValue]
[entry]
[minPos]
[i]
[minPos]
[new, ArrayList, <, Integer, >, (, )]
[Double, ., MAX_VALUE]
[Double]
[tableau, ., getNumObjectiveFunctions, (, )]
[tableau]
[i, <, tableau, ., getHeight, (, )]
[i]
[tableau, ., getHeight, (, )]
[tableau]
[i, ++]
[i]
[tableau, ., getEntry, (, i, ,, tableau, ., getWidth, (, ), -, 1, )]
[tableau]
[i]
[tableau, ., getWidth, (, ), -, 1]
[tableau, ., getWidth, (, )]
[tableau]
[1]
[tableau, ., getEntry, (, i, ,, col, )]
[tableau]
[i]
[col]
[Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, ), >, 0]
[Precision, ., compareTo, (, entry, ,, 0d, ,, maxUlps, )]
[Precision]
[entry]
[0d]
[maxUlps]
[0]
[rhs, /, entry]
[rhs]
[entry]
[Double, ., compare, (, ratio, ,, minRatio, )]
[Double]
[ratio]
[minRatio]
[cmp, ==, 0]
[cmp]
[0]
[minRatioPositions, ., add, (, i, )]
[minRatioPositions]
[i]
[cmp, <, 0]
[cmp]
[0]
[minRatio]
[ratio]
[minRatioPositions]
[new, ArrayList, <, Integer, >, (, )]
[minRatioPositions, ., add, (, i, )]
[minRatioPositions]
[i]
[minRatioPositions, ., size, (, ), ==, 0]
[minRatioPositions, ., size, (, )]
[minRatioPositions]
[0]
[null]
[minRatioPositions, ., size, (, ), >, 1]
[minRatioPositions, ., size, (, )]
[minRatioPositions]
[1]
[tableau, ., getNumArtificialVariables, (, ), >, 0]
[tableau, ., getNumArtificialVariables, (, )]
[tableau]
[0]
[minRatioPositions]
[0]
[i, <, tableau, ., getNumArtificialVariables, (, )]
[i]
[tableau, ., getNumArtificialVariables, (, )]
[tableau]
[i, ++]
[i]
[i, +, tableau, ., getArtificialVariableOffset, (, )]
[i]
[tableau, ., getArtificialVariableOffset, (, )]
[tableau]
[tableau, ., getEntry, (, row, ,, column, )]
[tableau]
[row]
[column]
[Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, row, ., equals, (, tableau, ., getBasicRow, (, column, ), )]
[Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, )]
[Precision]
[entry]
[1d]
[maxUlps]
[row, ., equals, (, tableau, ., getBasicRow, (, column, ), )]
[row]
[tableau, ., getBasicRow, (, column, )]
[tableau]
[column]
[row]
[getIterations, (, ), <, getMaxIterations, (, ), /, 2]
[getIterations, (, )]
[getMaxIterations, (, ), /, 2]
[getMaxIterations, (, )]
[2]
[null]
[tableau, ., getWidth, (, )]
[tableau]
[tableau, ., getNumObjectiveFunctions, (, )]
[tableau]
[tableau, ., getWidth, (, ), -, 1]
[tableau, ., getWidth, (, )]
[tableau]
[1]
[minRatioPositions]
[varStart]
[i, <, varEnd, &&, !, row, ., equals, (, minRow, )]
[i, <, varEnd]
[i]
[varEnd]
[!, row, ., equals, (, minRow, )]
[row, ., equals, (, minRow, )]
[row]
[minRow]
[i, ++]
[i]
[tableau, ., getBasicRow, (, i, )]
[tableau]
[i]
[basicRow, !=, null, &&, basicRow, ., equals, (, row, ), &&, i, <, minIndex]
[basicRow, !=, null, &&, basicRow, ., equals, (, row, )]
[basicRow, !=, null]
[basicRow]
[null]
[basicRow, ., equals, (, row, )]
[basicRow]
[row]
[i, <, minIndex]
[i]
[minIndex]
[minIndex]
[i]
[minRow]
[row]
[minRow]
[minRatioPositions, ., get, (, 0, )]
[minRatioPositions]
[0]
[incrementIterationsCounter, (, )]
[getPivotColumn, (, tableau, )]
[tableau]
[getPivotRow, (, tableau, ,, pivotCol, )]
[tableau]
[pivotCol]
[pivotRow, ==, null]
[pivotRow]
[null]
[new, UnboundedSolutionException, (, )]
[tableau, ., getEntry, (, pivotRow, ,, pivotCol, )]
[tableau]
[pivotRow]
[pivotCol]
[tableau, ., divideRow, (, pivotRow, ,, pivotVal, )]
[tableau]
[pivotRow]
[pivotVal]
[0]
[i, <, tableau, ., getHeight, (, )]
[i]
[tableau, ., getHeight, (, )]
[tableau]
[i, ++]
[i]
[i, !=, pivotRow]
[i]
[pivotRow]
[tableau, ., getEntry, (, i, ,, pivotCol, )]
[tableau]
[i]
[pivotCol]
[tableau, ., subtractRow, (, i, ,, pivotRow, ,, multiplier, )]
[tableau]
[i]
[pivotRow]
[multiplier]
[tableau, ., getNumArtificialVariables, (, ), ==, 0]
[tableau, ., getNumArtificialVariables, (, )]
[tableau]
[0]
[!, tableau, ., isOptimal, (, )]
[tableau, ., isOptimal, (, )]
[tableau]
[doIteration, (, tableau, )]
[tableau]
[!, Precision, ., equals, (, tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), ), ,, 0d, ,, epsilon, )]
[Precision, ., equals, (, tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), ), ,, 0d, ,, epsilon, )]
[Precision]
[tableau, ., getEntry, (, 0, ,, tableau, ., getRhsOffset, (, ), )]
[tableau]
[0]
[tableau, ., getRhsOffset, (, )]
[tableau]
[0d]
[epsilon]
[new, NoFeasibleSolutionException, (, )]
[new, SimplexTableau, (, getFunction, (, ), ,, getConstraints, (, ), ,, getGoalType, (, ), ,, restrictToNonNegative, (, ), ,, epsilon, ,, maxUlps, )]
[getFunction, (, )]
[getConstraints, (, )]
[getGoalType, (, )]
[restrictToNonNegative, (, )]
[epsilon]
[maxUlps]
[solvePhase1, (, tableau, )]
[tableau]
[tableau, ., dropPhase1Objective, (, )]
[tableau]
[!, tableau, ., isOptimal, (, )]
[tableau, ., isOptimal, (, )]
[tableau]
[doIteration, (, tableau, )]
[tableau]
[tableau, ., getSolution, (, )]
[tableau]
