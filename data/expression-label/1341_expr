[Maps, ., newHashMap, (, )]
[Maps]
[new, SimpleSubGraph, <, N, ,, E, >, (, this, )]
[this]
[new, LinkedUndirectedGraph, <, N, ,, E, >, (, false, ,, false, )]
[false]
[false]
[new, LinkedUndirectedGraph, <, N, ,, E, >, (, true, ,, false, )]
[true]
[false]
[new, LinkedUndirectedGraph, <, N, ,, E, >, (, false, ,, true, )]
[false]
[true]
[new, LinkedUndirectedGraph, <, N, ,, E, >, (, true, ,, true, )]
[true]
[true]
[this, ., useNodeAnnotations]
[this]
[useNodeAnnotations]
[this, ., useEdgeAnnotations]
[this]
[useEdgeAnnotations]
[getNodeOrFail, (, srcValue, )]
[srcValue]
[getNodeOrFail, (, destValue, )]
[destValue]
[useEdgeAnnotations, ?, new, AnnotatedLinkedUndirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, ), :, new, LinkedUndirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[useEdgeAnnotations]
[new, AnnotatedLinkedUndirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[src]
[edgeValue]
[dest]
[new, LinkedUndirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[src]
[edgeValue]
[dest]
[src, ., getNeighborEdges, (, ), ., add, (, edge, )]
[src, ., getNeighborEdges, (, )]
[src]
[edge]
[dest, ., getNeighborEdges, (, ), ., add, (, edge, )]
[dest, ., getNeighborEdges, (, )]
[dest]
[edge]
[getNodeOrFail, (, srcValue, )]
[srcValue]
[getNodeOrFail, (, destValue, )]
[destValue]
[getUndirectedGraphEdges, (, srcValue, ,, destValue, )]
[srcValue]
[destValue]
[src, ., getNeighborEdges, (, ), ., remove, (, edge, )]
[src, ., getNeighborEdges, (, )]
[src]
[edge]
[dest, ., getNeighborEdges, (, ), ., remove, (, edge, )]
[dest, ., getNeighborEdges, (, )]
[dest]
[edge]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[node, ==, null]
[node]
[null]
[node]
[useNodeAnnotations, ?, new, AnnotatedLinkedUndirectedGraphNode, <, N, ,, E, >, (, nodeValue, ), :, new, LinkedUndirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[useNodeAnnotations]
[new, AnnotatedLinkedUndirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[nodeValue]
[new, LinkedUndirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[nodeValue]
[nodes, ., put, (, nodeValue, ,, node, )]
[nodes]
[nodeValue]
[node]
[node]
[getUndirectedGraphNode, (, value, )]
[value]
[Lists, ., newArrayList, (, )]
[Lists]
[getNeighborNodesIterator, (, value, )]
[value]
[i, ., hasNext, (, )]
[i]
[nodeList, ., add, (, i, ., next, (, ), )]
[nodeList]
[i, ., next, (, )]
[i]
[nodeList]
[getUndirectedGraphNode, (, value, )]
[value]
[Preconditions, ., checkNotNull, (, uNode, ,, "%s should be in the graph.", ,, value, )]
[Preconditions]
[uNode]
["%s should be in the graph."]
[value]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), uNode, ), ., neighborIterator, (, )]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), uNode, )]
[(, LinkedUndirectedGraphNode, <, N, ,, E, >, ), uNode]
[uNode]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[nodes, ., get, (, n1, )]
[nodes]
[n1]
[dNode1, ==, null]
[dNode1]
[null]
[null]
[nodes, ., get, (, n2, )]
[nodes]
[n2]
[dNode2, ==, null]
[dNode2]
[null]
[null]
[Lists, ., newArrayList, (, )]
[Lists]
[dNode1, ., getNeighborEdges, (, )]
[dNode1]
[outEdge, ., getNodeA, (, ), ==, dNode2, ||, outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, )]
[outEdge]
[dNode2]
[outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeB, (, )]
[outEdge]
[dNode2]
[edges, ., add, (, outEdge, )]
[edges]
[outEdge]
[edges]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[Collections, ., <, UndiGraphNode, <, N, ,, E, >, >, unmodifiableCollection, (, nodes, ., values, (, ), )]
[Collections]
[nodes, ., values, (, )]
[nodes]
[createUndirectedGraphNode, (, value, )]
[value]
[Collections, ., <, GraphEdge, <, N, ,, E, >, >, unmodifiableList, (, getUndirectedGraphEdges, (, n1, ,, n2, ), )]
[Collections]
[getUndirectedGraphEdges, (, n1, ,, n2, )]
[n1]
[n2]
[getNodeOrFail, (, n1, )]
[n1]
[getNodeOrFail, (, n2, )]
[n2]
[dNode1, ., getNeighborEdges, (, )]
[dNode1]
[outEdge, ., getNodeA, (, ), ==, dNode2, ||, outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, )]
[outEdge]
[dNode2]
[outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeB, (, )]
[outEdge]
[dNode2]
[outEdge]
[null]
[getUndirectedGraphNode, (, value, )]
[value]
[isConnected, (, n1, ,, Predicates, ., <, E, >, alwaysTrue, (, ), ,, n2, )]
[n1]
[Predicates, ., <, E, >, alwaysTrue, (, )]
[Predicates]
[n2]
[isConnected, (, n1, ,, Predicates, ., <, E, >, equalTo, (, e, ), ,, n2, )]
[n1]
[Predicates, ., <, E, >, equalTo, (, e, )]
[Predicates]
[e]
[n2]
[nodes, ., get, (, n1, )]
[nodes]
[n1]
[dNode1, ==, null]
[dNode1]
[null]
[false]
[nodes, ., get, (, n2, )]
[nodes]
[n2]
[dNode2, ==, null]
[dNode2]
[null]
[false]
[dNode1, ., getNeighborEdges, (, )]
[dNode1]
[(, outEdge, ., getNodeA, (, ), ==, dNode1, &&, outEdge, ., getNodeB, (, ), ==, dNode2, ), ||, (, outEdge, ., getNodeA, (, ), ==, dNode2, &&, outEdge, ., getNodeB, (, ), ==, dNode1, )]
[(, outEdge, ., getNodeA, (, ), ==, dNode1, &&, outEdge, ., getNodeB, (, ), ==, dNode2, )]
[outEdge, ., getNodeA, (, ), ==, dNode1, &&, outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, ), ==, dNode1]
[outEdge, ., getNodeA, (, )]
[outEdge]
[dNode1]
[outEdge, ., getNodeB, (, ), ==, dNode2]
[outEdge, ., getNodeB, (, )]
[outEdge]
[dNode2]
[(, outEdge, ., getNodeA, (, ), ==, dNode2, &&, outEdge, ., getNodeB, (, ), ==, dNode1, )]
[outEdge, ., getNodeA, (, ), ==, dNode2, &&, outEdge, ., getNodeB, (, ), ==, dNode1]
[outEdge, ., getNodeA, (, ), ==, dNode2]
[outEdge, ., getNodeA, (, )]
[outEdge]
[dNode2]
[outEdge, ., getNodeB, (, ), ==, dNode1]
[outEdge, ., getNodeB, (, )]
[outEdge]
[dNode1]
[edgePredicate, ., apply, (, outEdge, ., getValue, (, ), )]
[edgePredicate]
[outEdge, ., getValue, (, )]
[outEdge]
[true]
[false]
[Lists, ., newArrayList, (, )]
[Lists]
[nodes, ., values, (, )]
[nodes]
[node, ., getNeighborEdges, (, )]
[node]
[edge, ., getNodeA, (, ), ==, node]
[edge, ., getNodeA, (, )]
[edge]
[node]
[edgeList, ., add, (, (, GraphvizEdge, ), edge, )]
[edgeList]
[(, GraphvizEdge, ), edge]
[edge]
[edgeList]
["LinkedUndirectedGraph"]
[Lists, ., newArrayListWithCapacity, (, nodes, ., size, (, ), )]
[Lists]
[nodes, ., size, (, )]
[nodes]
[nodes, ., values, (, )]
[nodes]
[nodeList, ., add, (, node, )]
[nodeList]
[node]
[nodeList]
[false]
[Collections, ., <, GraphNode, <, N, ,, E, >, >, unmodifiableCollection, (, nodes, ., values, (, ), )]
[Collections]
[nodes, ., values, (, )]
[nodes]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[Lists, ., newArrayList, (, )]
[Lists]
[nodes, ., values, (, )]
[nodes]
[node, ., getNeighborEdges, (, )]
[node]
[edge, ., getNodeA, (, ), ==, node]
[edge, ., getNodeA, (, )]
[edge]
[node]
[result, ., add, (, edge, )]
[result]
[edge]
[result]
[getUndirectedGraphNode, (, value, )]
[value]
[uNode, ==, null]
[uNode]
[null]
[new, IllegalArgumentException, (, value, +, " not found in graph", )]
[value, +, " not found in graph"]
[value]
[" not found in graph"]
[uNode, ., getNeighborEdges, (, ), ., size, (, )]
[uNode, ., getNeighborEdges, (, )]
[uNode]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., value]
[this]
[nodeValue]
[neighborList]
[neighborList, ., iterator, (, )]
[neighborList]
[new, UnsupportedOperationException, (, "Graph initialized with node annotations turned off", )]
["Graph initialized with node annotations turned off"]
[new, UnsupportedOperationException, (, "Graph initialized with node annotations turned off", )]
["Graph initialized with node annotations turned off"]
[value]
["white"]
["LDN", +, hashCode, (, )]
["LDN"]
[hashCode, (, )]
[value, !=, null, ?, value, ., toString, (, ), :, "null"]
[value, !=, null]
[value]
[null]
[value, ., toString, (, )]
[value]
["null"]
[new, NeighborIterator, (, )]
[neighborList, ., iterator, (, )]
[neighborList]
[edgeIterator, ., hasNext, (, )]
[edgeIterator]
[edgeIterator, ., next, (, )]
[edgeIterator]
[edge, ., getNodeA, (, ), ==, LinkedUndirectedGraphNode, ., this]
[edge, ., getNodeA, (, )]
[edge]
[LinkedUndirectedGraphNode, ., this]
[edge, ., getNodeB, (, )]
[edge]
[edge, ., getNodeA, (, )]
[edge]
[new, UnsupportedOperationException, (, "Remove not supported.", )]
["Remove not supported."]
[nodeValue]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, A, ), annotation]
[annotation]
[annotation]
[data]
[this, ., value]
[this]
[edgeValue]
[this, ., nodeA]
[this]
[nodeA]
[this, ., nodeB]
[this]
[nodeB]
[value]
[nodeA]
[nodeB]
[new, UnsupportedOperationException, (, "Graph initialized with edge annotations turned off", )]
["Graph initialized with edge annotations turned off"]
[new, UnsupportedOperationException, (, "Graph initialized with edge annotations turned off", )]
["Graph initialized with edge annotations turned off"]
["black"]
[value, !=, null, ?, value, ., toString, (, ), :, "null"]
[value, !=, null]
[value]
[null]
[value, ., toString, (, )]
[value]
["null"]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeA, ), ., getId, (, )]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeA, )]
[(, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeA]
[nodeA]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeB, ), ., getId, (, )]
[(, (, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeB, )]
[(, LinkedUndirectedGraphNode, <, N, ,, E, >, ), nodeB]
[nodeB]
[nodeA, ., toString, (, ), +, " -- ", +, nodeB, ., toString, (, )]
[nodeA, ., toString, (, ), +, " -- "]
[nodeA, ., toString, (, )]
[nodeA]
[" -- "]
[nodeB, ., toString, (, )]
[nodeB]
[nodeA]
[edgeValue]
[nodeB]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, A, ), annotation]
[annotation]
[annotation]
[data]
