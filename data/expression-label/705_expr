[Maps, ., newHashMap, (, )]
[Maps]
[ImmutableList, ., copyOf, (, modulesInDepOrder, )]
[ImmutableList]
[modulesInDepOrder]
[Preconditions, ., checkState, (, modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", )]
[Preconditions]
[modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, )]
[modulesInDepOrder, ., size, (, )]
[modulesInDepOrder]
[Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, )]
[Sets, ., newHashSet, (, modulesInDepOrder, )]
[Sets]
[modulesInDepOrder]
["Found duplicate modules"]
[modules]
[ImmutableList, ., copyOf, (, modulesInDepOrder, )]
[ImmutableList]
[modulesInDepOrder]
[modulesByDepth]
[Lists, ., newArrayList, (, )]
[Lists]
[modulesInDepOrder]
[0]
[module, ., getDependencies, (, )]
[module]
[dep, ., getDepth, (, )]
[dep]
[depDepth, <, 0]
[depDepth]
[0]
[new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, )]
[String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, ., getName, (, ), )]
[String]
["Modules not in dependency order: %s preceded %s"]
[module, ., getName, (, )]
[module]
[dep, ., getName, (, )]
[dep]
[module]
[dep]
[depth]
[Math, ., max, (, depth, ,, depDepth, +, 1, )]
[Math]
[depth]
[depDepth, +, 1]
[depDepth]
[1]
[module, ., setDepth, (, depth, )]
[module]
[depth]
[depth, ==, modulesByDepth, ., size, (, )]
[depth]
[modulesByDepth, ., size, (, )]
[modulesByDepth]
[modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), )]
[modulesByDepth]
[new, ArrayList, <, JSModule, >, (, )]
[modulesByDepth, ., get, (, depth, ), ., add, (, module, )]
[modulesByDepth, ., get, (, depth, )]
[modulesByDepth]
[depth]
[module]
[modules]
[modules, ., size, (, )]
[modules]
[Iterables, ., getOnlyElement, (, modulesByDepth, ., get, (, 0, ), )]
[Iterables]
[modulesByDepth, ., get, (, 0, )]
[modulesByDepth]
[0]
[new, JSONArray, (, )]
[getAllModules, (, )]
[new, JSONObject, (, )]
[node, ., put, (, "name", ,, module, ., getName, (, ), )]
[node]
["name"]
[module, ., getName, (, )]
[module]
[new, JSONArray, (, )]
[node, ., put, (, "dependencies", ,, deps, )]
[node]
["dependencies"]
[deps]
[module, ., getDependencies, (, )]
[module]
[deps, ., put, (, m, ., getName, (, ), )]
[deps]
[m, ., getName, (, )]
[m]
[new, JSONArray, (, )]
[node, ., put, (, "transitive-dependencies", ,, transitiveDeps, )]
[node]
["transitive-dependencies"]
[transitiveDeps]
[getTransitiveDepsDeepestFirst, (, module, )]
[module]
[transitiveDeps, ., put, (, m, ., getName, (, ), )]
[transitiveDeps]
[m, ., getName, (, )]
[m]
[new, JSONArray, (, )]
[node, ., put, (, "inputs", ,, inputs, )]
[node]
["inputs"]
[inputs]
[module, ., getInputs, (, )]
[module]
[inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), )]
[inputs]
[input, ., getSourceFile, (, ), ., getOriginalPath, (, )]
[input, ., getSourceFile, (, )]
[input]
[modules, ., put, (, node, )]
[modules]
[node]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[modules]
[dependencyMap, ., get, (, src, )]
[dependencyMap]
[src]
[deps, ==, null]
[deps]
[null]
[deps]
[getTransitiveDepsDeepestFirst, (, src, )]
[src]
[dependencyMap, ., put, (, src, ,, deps, )]
[dependencyMap]
[src]
[deps]
[deps, ., contains, (, m, )]
[deps]
[m]
[m1, ., getDepth, (, )]
[m1]
[m2, ., getDepth, (, )]
[m2]
[Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1]
[Math, ., min, (, m1Depth, ,, m2Depth, )]
[Math]
[m1Depth]
[m2Depth]
[1]
[depth, >=, 0]
[depth]
[0]
[depth, --]
[depth]
[modulesByDepth, ., get, (, depth, )]
[modulesByDepth]
[depth]
[modulesAtDepth, ., size, (, ), -, 1]
[modulesAtDepth, ., size, (, )]
[modulesAtDepth]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[modulesAtDepth, ., get, (, i, )]
[modulesAtDepth]
[i]
[dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,, m, )]
[dependsOn, (, m1, ,, m, )]
[m1]
[m]
[dependsOn, (, m2, ,, m, )]
[m2]
[m]
[m]
[null]
[m2, ==, m1, ||, dependsOn, (, m2, ,, m1, )]
[m2, ==, m1]
[m2]
[m1]
[dependsOn, (, m2, ,, m1, )]
[m2]
[m1]
[m1]
[dependsOn, (, m1, ,, m2, )]
[m1]
[m2]
[m2]
[getDeepestCommonDependency, (, m1, ,, m2, )]
[m1]
[m2]
[modules, ., iterator, (, )]
[modules]
[iter, ., next, (, )]
[iter]
[iter, ., hasNext, (, )]
[iter]
[dep]
[getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (, ), )]
[dep]
[iter, ., next, (, )]
[iter]
[dep]
[dependencyMap, ., get, (, m, )]
[dependencyMap]
[m]
[deps, !=, null]
[deps]
[null]
[deps]
[deps]
[new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), )]
[new, InverseDepthComparator, (, )]
[addDeps, (, deps, ,, m, )]
[deps]
[m]
[dependencyMap, ., put, (, m, ,, deps, )]
[dependencyMap]
[m]
[deps]
[deps]
[m, ., getDependencies, (, )]
[m]
[deps, ., add, (, dep, )]
[deps]
[dep]
[addDeps, (, deps, ,, dep, )]
[deps]
[dep]
[LinkedHashMultimap, ., create, (, )]
[LinkedHashMultimap]
[modules]
[module, ., getInputs, (, )]
[module]
[fileRefs, ., put, (, jsFile, ., getName, (, ), ,, module, )]
[fileRefs]
[jsFile, ., getName, (, )]
[jsFile]
[module]
[fileRefs, ., keySet, (, )]
[fileRefs]
[fileRefs, ., get, (, path, )]
[fileRefs]
[path]
[refModules, ., size, (, ), >, 1]
[refModules, ., size, (, )]
[refModules]
[1]
[getDeepestCommonDependencyInclusive, (, refModules, )]
[refModules]
[refModules, ., iterator, (, ), ., next, (, ), ., getByName, (, path, )]
[refModules, ., iterator, (, ), ., next, (, )]
[refModules, ., iterator, (, )]
[refModules]
[path]
[refModules]
[module, !=, depModule]
[module]
[depModule]
[module, ., removeByName, (, path, )]
[module]
[path]
[!, refModules, ., contains, (, depModule, )]
[refModules, ., contains, (, depModule, )]
[refModules]
[depModule]
[depModule, ., add, (, file, )]
[depModule]
[file]
[new, DependencyOptions, (, )]
[depOptions, ., setDependencySorting, (, true, )]
[depOptions]
[true]
[depOptions, ., setDependencyPruning, (, true, )]
[depOptions]
[true]
[depOptions, ., setEntryPoints, (, entryPoints, )]
[depOptions]
[entryPoints]
[manageDependencies, (, depOptions, ,, inputs, )]
[depOptions]
[inputs]
[new, SortedDependencies, <, CompilerInput, >, (, inputs, )]
[inputs]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[depOptions, ., shouldPruneDependencies, (, )]
[depOptions]
[!, depOptions, ., shouldDropMoochers, (, )]
[depOptions, ., shouldDropMoochers, (, )]
[depOptions]
[entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), )]
[entryPointInputs]
[sorter, ., getInputsWithoutProvides, (, )]
[sorter]
[depOptions, ., getEntryPoints, (, )]
[depOptions]
[entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), )]
[entryPointInputs]
[sorter, ., getInputProviding, (, entryPoint, )]
[sorter]
[entryPoint]
[sorter, ., maybeGetInputProviding, (, "goog", )]
[sorter]
["goog"]
[baseJs, !=, null]
[baseJs]
[null]
[entryPointInputs, ., add, (, baseJs, )]
[entryPointInputs]
[baseJs]
[entryPointInputs, ., addAll, (, inputs, )]
[entryPointInputs]
[inputs]
[sorter, ., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, ), )]
[sorter]
[inputs]
[depOptions, ., shouldSortDependencies, (, )]
[depOptions]
[LinkedListMultimap, ., create, (, )]
[LinkedListMultimap]
[entryPointInputs]
[input, ., getModule, (, )]
[input]
[Preconditions, ., checkNotNull, (, module, )]
[Preconditions]
[module]
[entryPointInputsPerModule, ., put, (, module, ,, input, )]
[entryPointInputsPerModule]
[module]
[input]
[getAllModules, (, )]
[module, ., removeAll, (, )]
[module]
[entryPointInputsPerModule, ., keySet, (, )]
[entryPointInputsPerModule]
[sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (, module, ), ,, depOptions, ., shouldSortDependencies, (, ), )]
[sorter]
[entryPointInputsPerModule, ., get, (, module, )]
[entryPointInputsPerModule]
[module]
[depOptions, ., shouldSortDependencies, (, )]
[depOptions]
[transitiveClosure]
[input, ., getModule, (, )]
[input]
[oldModule, ==, null]
[oldModule]
[null]
[input, ., setModule, (, module, )]
[input]
[module]
[input, ., setModule, (, null, )]
[input]
[null]
[input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), )]
[input]
[getDeepestCommonDependencyInclusive, (, oldModule, ,, module, )]
[oldModule]
[module]
[absoluteOrder]
[input, ., getModule, (, )]
[input]
[module, !=, null]
[module]
[null]
[module, ., add, (, input, )]
[module]
[input]
[Lists, ., newArrayList, (, )]
[Lists]
[getAllModules, (, )]
[result, ., addAll, (, module, ., getInputs, (, ), )]
[result]
[module, ., getInputs, (, )]
[module]
[result]
[LinkedDirectedGraph, ., create, (, )]
[LinkedDirectedGraph]
[getAllModules, (, )]
[graphViz, ., createNode, (, module, )]
[graphViz]
[module]
[module, ., getDependencies, (, )]
[module]
[graphViz, ., createNode, (, dep, )]
[graphViz]
[dep]
[graphViz, ., connect, (, module, ,, "->", ,, dep, )]
[graphViz]
[module]
["->"]
[dep]
[graphViz]
[depthCompare, (, m2, ,, m1, )]
[m2]
[m1]
[m1, ==, m2]
[m1]
[m2]
[0]
[m1, ., getDepth, (, )]
[m1]
[m2, ., getDepth, (, )]
[m2]
[d1, <, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1]
[d1, <, d2]
[d1]
[d2]
[-, 1]
[1]
[d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1]
[d2, ==, d1]
[d2]
[d1]
[m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), )]
[m1, ., getName, (, )]
[m1]
[m2, ., getName, (, )]
[m2]
[1]
[1]
[message]
[this, ., module]
[this]
[module]
[this, ., dependentModule]
[this]
[dependentModule]
[module]
[dependentModule]
