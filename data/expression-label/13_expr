[compiler]
[new, DefaultNameSupplier, (, )]
[true]
[this, ., compiler]
[this]
[compiler]
[this, ., nameSupplier]
[this]
[supplier]
[this, ., removeUnused]
[this]
[removeUnused]
[new, NameGenerator, (, new, HashSet, <, String, >, (, ), ,, "", ,, null, )]
[new, HashSet, <, String, >, (, )]
[""]
[null]
[nameGenerator, ., generateNextName, (, )]
[nameGenerator]
[namespaceStack, ., push, (, new, LabelNamespace, (, ), )]
[namespaceStack]
[new, LabelNamespace, (, )]
[Lists, ., newLinkedList, (, )]
[Lists]
[new, ArrayList, <, String, >, (, )]
[namespaceStack, ., push, (, new, LabelNamespace, (, ), )]
[namespaceStack]
[new, LabelNamespace, (, )]
[namespaceStack, ., pop, (, )]
[namespaceStack]
[node, ., isLabel, (, )]
[node]
[namespaceStack, ., peek, (, )]
[namespaceStack]
[current, ., renameMap, ., size, (, ), +, 1]
[current, ., renameMap, ., size, (, )]
[current, ., renameMap]
[current]
[1]
[node, ., getFirstChild, (, ), ., getString, (, )]
[node, ., getFirstChild, (, )]
[node]
[new, LabelInfo, (, currentDepth, )]
[currentDepth]
[Preconditions, ., checkState, (, !, current, ., renameMap, ., containsKey, (, name, ), )]
[Preconditions]
[!, current, ., renameMap, ., containsKey, (, name, )]
[current, ., renameMap, ., containsKey, (, name, )]
[current, ., renameMap]
[current]
[name]
[current, ., renameMap, ., put, (, name, ,, li, )]
[current, ., renameMap]
[current]
[name]
[li]
[names, ., size, (, ), <, currentDepth]
[names, ., size, (, )]
[names]
[currentDepth]
[names, ., add, (, nameSupplier, ., get, (, ), )]
[names]
[nameSupplier, ., get, (, )]
[nameSupplier]
[getNameForId, (, currentDepth, )]
[currentDepth]
[compiler, ., addToDebugLog, (, "label renamed: ", +, name, +, " => ", +, newName, )]
[compiler]
["label renamed: ", +, name, +, " => ", +, newName]
["label renamed: ", +, name, +, " => "]
["label renamed: ", +, name]
["label renamed: "]
[name]
[" => "]
[newName]
[true]
[node, ., getType, (, )]
[node]
[Token, ., LABEL]
[Token]
[visitLabel, (, node, ,, parent, )]
[node]
[parent]
[Token, ., BREAK]
[Token]
[Token, ., CONTINUE]
[Token]
[visitBreakOrContinue, (, node, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[nameNode, !=, null]
[nameNode]
[null]
[nameNode, ., getString, (, )]
[nameNode]
[Preconditions, ., checkState, (, name, ., length, (, ), !=, 0, )]
[Preconditions]
[name, ., length, (, ), !=, 0]
[name, ., length, (, )]
[name]
[0]
[getLabelInfo, (, name, )]
[name]
[li, !=, null]
[li]
[null]
[getNameForId, (, li, ., id, )]
[li, ., id]
[li]
[li, ., referenced]
[li]
[true]
[!, name, ., equals, (, newName, )]
[name, ., equals, (, newName, )]
[name]
[newName]
[nameNode, ., setString, (, newName, )]
[nameNode]
[newName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[node, ., getFirstChild, (, )]
[node]
[Preconditions, ., checkState, (, nameNode, !=, null, )]
[Preconditions]
[nameNode, !=, null]
[nameNode]
[null]
[nameNode, ., getString, (, )]
[nameNode]
[getLabelInfo, (, name, )]
[name]
[li, ., referenced, ||, !, removeUnused]
[li, ., referenced]
[li]
[!, removeUnused]
[removeUnused]
[getNameForId, (, li, ., id, )]
[li, ., id]
[li]
[!, name, ., equals, (, newName, )]
[name, ., equals, (, newName, )]
[name]
[newName]
[nameNode, ., setString, (, newName, )]
[nameNode]
[newName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[node, ., getLastChild, (, )]
[node]
[node, ., removeChild, (, newChild, )]
[node]
[newChild]
[parent, ., replaceChild, (, node, ,, newChild, )]
[parent]
[node]
[newChild]
[newChild, ., isBlock, (, )]
[newChild]
[NodeUtil, ., tryMergeBlock, (, newChild, )]
[NodeUtil]
[newChild]
[compiler, ., reportCodeChange, (, )]
[compiler]
[namespaceStack, ., peek, (, ), ., renameMap, ., remove, (, name, )]
[namespaceStack, ., peek, (, ), ., renameMap]
[namespaceStack, ., peek, (, )]
[namespaceStack]
[name]
[names, ., get, (, id, -, 1, )]
[names]
[id, -, 1]
[id]
[1]
[namespaceStack, ., peek, (, ), ., renameMap, ., get, (, name, )]
[namespaceStack, ., peek, (, ), ., renameMap]
[namespaceStack, ., peek, (, )]
[namespaceStack]
[name]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessLabels, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessLabels, (, )]
[false]
[this, ., id]
[this]
[id]
[new, HashMap, <, String, ,, LabelInfo, >, (, )]
