[105414357.0, /, 33554432.0, +, 1.984187159361080883e-9]
[105414357.0, /, 33554432.0]
[105414357.0]
[33554432.0]
[1.984187159361080883e-9]
[2850325.0, /, 1048576.0, +, 8.254840070411028747e-8]
[2850325.0, /, 1048576.0]
[2850325.0]
[1048576.0]
[8.254840070411028747e-8]
[750]
[EXP_INT_TABLE_MAX_INDEX, *, 2]
[EXP_INT_TABLE_MAX_INDEX]
[2]
[1024]
[1025]
[StrictMath, ., log, (, Double, ., MAX_VALUE, )]
[StrictMath]
[Double, ., MAX_VALUE]
[Double]
[false]
[0.693147063255310059]
[1.17304635250823482e-7]
[{, {, 1.0, ,, 5.669184079525E-24, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.986821492305628E-8, }, ,, {, -, 0.25, ,, -, 6.663542893624021E-14, }, ,, {, 0.19999998807907104, ,, 1.1921056801463227E-8, }, ,, {, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }, ,, {, 0.1428571343421936, ,, 5.650007086920087E-9, }, ,, {, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }, ,, {, 0.11113807559013367, ,, 9.219544613762692E-9, }, ,, }]
[{, 1.0, ,, 5.669184079525E-24, }]
[1.0]
[5.669184079525E-24]
[{, -, 0.25, ,, -, 0.25, }]
[-, 0.25]
[0.25]
[-, 0.25]
[0.25]
[{, 0.3333333134651184, ,, 1.986821492305628E-8, }]
[0.3333333134651184]
[1.986821492305628E-8]
[{, -, 0.25, ,, -, 6.663542893624021E-14, }]
[-, 0.25]
[0.25]
[-, 6.663542893624021E-14]
[6.663542893624021E-14]
[{, 0.19999998807907104, ,, 1.1921056801463227E-8, }]
[0.19999998807907104]
[1.1921056801463227E-8]
[{, -, 0.1666666567325592, ,, -, 7.800414592973399E-9, }]
[-, 0.1666666567325592]
[0.1666666567325592]
[-, 7.800414592973399E-9]
[7.800414592973399E-9]
[{, 0.1428571343421936, ,, 5.650007086920087E-9, }]
[0.1428571343421936]
[5.650007086920087E-9]
[{, -, 0.12502530217170715, ,, -, 7.44321345601866E-11, }]
[-, 0.12502530217170715]
[0.12502530217170715]
[-, 7.44321345601866E-11]
[7.44321345601866E-11]
[{, 0.11113807559013367, ,, 9.219544613762692E-9, }]
[0.11113807559013367]
[9.219544613762692E-9]
[{, {, 1.0, ,, -, 6.032174644509064E-23, }, ,, {, -, 0.25, ,, -, 0.25, }, ,, {, 0.3333333134651184, ,, 1.9868161777724352E-8, }, ,, {, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }, ,, {, 0.19999954104423523, ,, 1.5830993332061267E-10, }, ,, {, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }, }]
[{, 1.0, ,, -, 6.032174644509064E-23, }]
[1.0]
[-, 6.032174644509064E-23]
[6.032174644509064E-23]
[{, -, 0.25, ,, -, 0.25, }]
[-, 0.25]
[0.25]
[-, 0.25]
[0.25]
[{, 0.3333333134651184, ,, 1.9868161777724352E-8, }]
[0.3333333134651184]
[1.9868161777724352E-8]
[{, -, 0.2499999701976776, ,, -, 2.957007209750105E-8, }]
[-, 0.2499999701976776]
[0.2499999701976776]
[-, 2.957007209750105E-8]
[2.957007209750105E-8]
[{, 0.19999954104423523, ,, 1.5830993332061267E-10, }]
[0.19999954104423523]
[1.5830993332061267E-10]
[{, -, 0.16624879837036133, ,, -, 2.6033824355191673E-8, }]
[-, 0.16624879837036133]
[0.16624879837036133]
[-, 2.6033824355191673E-8]
[2.6033824355191673E-8]
[14]
[{, +, 0.0d, ,, +, 0.1246747374534607d, ,, +, 0.24740394949913025d, ,, +, 0.366272509098053d, ,, +, 0.4794255495071411d, ,, +, 0.5850973129272461d, ,, +, 0.6816387176513672d, ,, +, 0.7675435543060303d, ,, +, 0.8414709568023682d, ,, +, 0.902267575263977d, ,, +, 0.9489846229553223d, ,, +, 0.9808930158615112d, ,, +, 0.9974949359893799d, ,, +, 0.9985313415527344d, ,, }]
[+, 0.0d]
[0.0d]
[+, 0.1246747374534607d]
[0.1246747374534607d]
[+, 0.24740394949913025d]
[0.24740394949913025d]
[+, 0.366272509098053d]
[0.366272509098053d]
[+, 0.4794255495071411d]
[0.4794255495071411d]
[+, 0.5850973129272461d]
[0.5850973129272461d]
[+, 0.6816387176513672d]
[0.6816387176513672d]
[+, 0.7675435543060303d]
[0.7675435543060303d]
[+, 0.8414709568023682d]
[0.8414709568023682d]
[+, 0.902267575263977d]
[0.902267575263977d]
[+, 0.9489846229553223d]
[0.9489846229553223d]
[+, 0.9808930158615112d]
[0.9808930158615112d]
[+, 0.9974949359893799d]
[0.9974949359893799d]
[+, 0.9985313415527344d]
[0.9985313415527344d]
[{, +, 0.0d, ,, -, 4.068233003401932E-9d, ,, +, 9.755392680573412E-9d, ,, +, 1.9987994582857286E-8d, ,, -, 1.0902938113007961E-8d, ,, -, 3.9986783938944604E-8d, ,, +, 4.23719669792332E-8d, ,, -, 5.207000323380292E-8d, ,, +, 2.800552834259E-8d, ,, +, 1.883511811213715E-8d, ,, -, 3.5997360512765566E-9d, ,, +, 4.116164446561962E-8d, ,, +, 5.0614674548127384E-8d, ,, -, 1.0129027912496858E-9d, ,, }]
[+, 0.0d]
[0.0d]
[-, 4.068233003401932E-9d]
[4.068233003401932E-9d]
[+, 9.755392680573412E-9d]
[9.755392680573412E-9d]
[+, 1.9987994582857286E-8d]
[1.9987994582857286E-8d]
[-, 1.0902938113007961E-8d]
[1.0902938113007961E-8d]
[-, 3.9986783938944604E-8d]
[3.9986783938944604E-8d]
[+, 4.23719669792332E-8d]
[4.23719669792332E-8d]
[-, 5.207000323380292E-8d]
[5.207000323380292E-8d]
[+, 2.800552834259E-8d]
[2.800552834259E-8d]
[+, 1.883511811213715E-8d]
[1.883511811213715E-8d]
[-, 3.5997360512765566E-9d]
[3.5997360512765566E-9d]
[+, 4.116164446561962E-8d]
[4.116164446561962E-8d]
[+, 5.0614674548127384E-8d]
[5.0614674548127384E-8d]
[-, 1.0129027912496858E-9d]
[1.0129027912496858E-9d]
[{, +, 1.0d, ,, +, 0.9921976327896118d, ,, +, 0.9689123630523682d, ,, +, 0.9305076599121094d, ,, +, 0.8775825500488281d, ,, +, 0.8109631538391113d, ,, +, 0.7316888570785522d, ,, +, 0.6409968137741089d, ,, +, 0.5403022766113281d, ,, +, 0.4311765432357788d, ,, +, 0.3153223395347595d, ,, +, 0.19454771280288696d, ,, +, 0.07073719799518585d, ,, -, 0.05417713522911072d, ,, }]
[+, 1.0d]
[1.0d]
[+, 0.9921976327896118d]
[0.9921976327896118d]
[+, 0.9689123630523682d]
[0.9689123630523682d]
[+, 0.9305076599121094d]
[0.9305076599121094d]
[+, 0.8775825500488281d]
[0.8775825500488281d]
[+, 0.8109631538391113d]
[0.8109631538391113d]
[+, 0.7316888570785522d]
[0.7316888570785522d]
[+, 0.6409968137741089d]
[0.6409968137741089d]
[+, 0.5403022766113281d]
[0.5403022766113281d]
[+, 0.4311765432357788d]
[0.4311765432357788d]
[+, 0.3153223395347595d]
[0.3153223395347595d]
[+, 0.19454771280288696d]
[0.19454771280288696d]
[+, 0.07073719799518585d]
[0.07073719799518585d]
[-, 0.05417713522911072d]
[0.05417713522911072d]
[{, +, 0.0d, ,, +, 3.4439717236742845E-8d, ,, +, 5.865827662008209E-8d, ,, -, 3.7999795083850525E-8d, ,, +, 1.184154459111628E-8d, ,, -, 3.43338934259355E-8d, ,, +, 1.1795268640216787E-8d, ,, +, 4.438921624363781E-8d, ,, +, 2.925681159240093E-8d, ,, -, 2.6437112632041807E-8d, ,, +, 2.2860509143963117E-8d, ,, -, 4.813899778443457E-9d, ,, +, 3.6725170580355583E-9d, ,, +, 2.0217439756338078E-10d, ,, }]
[+, 0.0d]
[0.0d]
[+, 3.4439717236742845E-8d]
[3.4439717236742845E-8d]
[+, 5.865827662008209E-8d]
[5.865827662008209E-8d]
[-, 3.7999795083850525E-8d]
[3.7999795083850525E-8d]
[+, 1.184154459111628E-8d]
[1.184154459111628E-8d]
[-, 3.43338934259355E-8d]
[3.43338934259355E-8d]
[+, 1.1795268640216787E-8d]
[1.1795268640216787E-8d]
[+, 4.438921624363781E-8d]
[4.438921624363781E-8d]
[+, 2.925681159240093E-8d]
[2.925681159240093E-8d]
[-, 2.6437112632041807E-8d]
[2.6437112632041807E-8d]
[+, 2.2860509143963117E-8d]
[2.2860509143963117E-8d]
[-, 4.813899778443457E-9d]
[4.813899778443457E-9d]
[+, 3.6725170580355583E-9d]
[3.6725170580355583E-9d]
[+, 2.0217439756338078E-10d]
[2.0217439756338078E-10d]
[{, +, 0.0d, ,, +, 0.1256551444530487d, ,, +, 0.25534194707870483d, ,, +, 0.3936265707015991d, ,, +, 0.5463024377822876d, ,, +, 0.7214844226837158d, ,, +, 0.9315965175628662d, ,, +, 1.1974215507507324d, ,, +, 1.5574076175689697d, ,, +, 2.092571258544922d, ,, +, 3.0095696449279785d, ,, +, 5.041914939880371d, ,, +, 14.101419448852539d, ,, -, 18.430862426757812d, ,, }]
[+, 0.0d]
[0.0d]
[+, 0.1256551444530487d]
[0.1256551444530487d]
[+, 0.25534194707870483d]
[0.25534194707870483d]
[+, 0.3936265707015991d]
[0.3936265707015991d]
[+, 0.5463024377822876d]
[0.5463024377822876d]
[+, 0.7214844226837158d]
[0.7214844226837158d]
[+, 0.9315965175628662d]
[0.9315965175628662d]
[+, 1.1974215507507324d]
[1.1974215507507324d]
[+, 1.5574076175689697d]
[1.5574076175689697d]
[+, 2.092571258544922d]
[2.092571258544922d]
[+, 3.0095696449279785d]
[3.0095696449279785d]
[+, 5.041914939880371d]
[5.041914939880371d]
[+, 14.101419448852539d]
[14.101419448852539d]
[-, 18.430862426757812d]
[18.430862426757812d]
[{, +, 0.0d, ,, -, 7.877917738262007E-9d, ,, -, 2.5857668567479893E-8d, ,, +, 5.2240336371356666E-9d, ,, +, 5.206150291559893E-8d, ,, +, 1.8307188599677033E-8d, ,, -, 5.7618793749770706E-8d, ,, +, 7.848361555046424E-8d, ,, +, 1.0708593250394448E-7d, ,, +, 1.7827257129423813E-8d, ,, +, 2.893485277253286E-8d, ,, +, 3.1660099222737955E-7d, ,, +, 4.983191803254889E-7d, ,, -, 3.356118100840571E-7d, ,, }]
[+, 0.0d]
[0.0d]
[-, 7.877917738262007E-9d]
[7.877917738262007E-9d]
[-, 2.5857668567479893E-8d]
[2.5857668567479893E-8d]
[+, 5.2240336371356666E-9d]
[5.2240336371356666E-9d]
[+, 5.206150291559893E-8d]
[5.206150291559893E-8d]
[+, 1.8307188599677033E-8d]
[1.8307188599677033E-8d]
[-, 5.7618793749770706E-8d]
[5.7618793749770706E-8d]
[+, 7.848361555046424E-8d]
[7.848361555046424E-8d]
[+, 1.0708593250394448E-7d]
[1.0708593250394448E-7d]
[+, 1.7827257129423813E-8d]
[1.7827257129423813E-8d]
[+, 2.893485277253286E-8d]
[2.893485277253286E-8d]
[+, 3.1660099222737955E-7d]
[3.1660099222737955E-7d]
[+, 4.983191803254889E-7d]
[4.983191803254889E-7d]
[-, 3.356118100840571E-7d]
[3.356118100840571E-7d]
[new, long, [, ], {, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }]
[{, (, 0x28be60dbL, <<, 32, ), |, 0x9391054aL, ,, (, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L, ,, (, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L, ,, (, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L, ,, (, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L, ,, (, 0x01924bbaL, <<, 32, ), |, 0x82746487L, ,, (, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL, ,, (, 0xba208d7dL, <<, 32, ), |, 0x4baed121L, ,, (, 0x3a671c09L, <<, 32, ), |, 0xad17df90L, ,, (, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL, ,, (, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL, ,, (, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L, ,, (, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L, ,, (, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL, ,, (, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL, ,, (, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL, ,, (, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL, ,, 0x9afed7ecL, <<, 32, }]
[(, 0x28be60dbL, <<, 32, ), |, 0x9391054aL]
[(, 0x28be60dbL, <<, 32, )]
[0x28be60dbL, <<, 32]
[0x28be60dbL]
[32]
[0x9391054aL]
[(, 0x7f09d5f4L, <<, 32, ), |, 0x7d4d3770L]
[(, 0x7f09d5f4L, <<, 32, )]
[0x7f09d5f4L, <<, 32]
[0x7f09d5f4L]
[32]
[0x7d4d3770L]
[(, 0x36d8a566L, <<, 32, ), |, 0x4f10e410L]
[(, 0x36d8a566L, <<, 32, )]
[0x36d8a566L, <<, 32]
[0x36d8a566L]
[32]
[0x4f10e410L]
[(, 0x7f9458eaL, <<, 32, ), |, 0xf7aef158L]
[(, 0x7f9458eaL, <<, 32, )]
[0x7f9458eaL, <<, 32]
[0x7f9458eaL]
[32]
[0xf7aef158L]
[(, 0x6dc91b8eL, <<, 32, ), |, 0x909374b8L]
[(, 0x6dc91b8eL, <<, 32, )]
[0x6dc91b8eL, <<, 32]
[0x6dc91b8eL]
[32]
[0x909374b8L]
[(, 0x01924bbaL, <<, 32, ), |, 0x82746487L]
[(, 0x01924bbaL, <<, 32, )]
[0x01924bbaL, <<, 32]
[0x01924bbaL]
[32]
[0x82746487L]
[(, 0x3f877ac7L, <<, 32, ), |, 0x2c4a69cfL]
[(, 0x3f877ac7L, <<, 32, )]
[0x3f877ac7L, <<, 32]
[0x3f877ac7L]
[32]
[0x2c4a69cfL]
[(, 0xba208d7dL, <<, 32, ), |, 0x4baed121L]
[(, 0xba208d7dL, <<, 32, )]
[0xba208d7dL, <<, 32]
[0xba208d7dL]
[32]
[0x4baed121L]
[(, 0x3a671c09L, <<, 32, ), |, 0xad17df90L]
[(, 0x3a671c09L, <<, 32, )]
[0x3a671c09L, <<, 32]
[0x3a671c09L]
[32]
[0xad17df90L]
[(, 0x4e64758eL, <<, 32, ), |, 0x60d4ce7dL]
[(, 0x4e64758eL, <<, 32, )]
[0x4e64758eL, <<, 32]
[0x4e64758eL]
[32]
[0x60d4ce7dL]
[(, 0x272117e2L, <<, 32, ), |, 0xef7e4a0eL]
[(, 0x272117e2L, <<, 32, )]
[0x272117e2L, <<, 32]
[0x272117e2L]
[32]
[0xef7e4a0eL]
[(, 0xc7fe25ffL, <<, 32, ), |, 0xf7816603L]
[(, 0xc7fe25ffL, <<, 32, )]
[0xc7fe25ffL, <<, 32]
[0xc7fe25ffL]
[32]
[0xf7816603L]
[(, 0xfbcbc462L, <<, 32, ), |, 0xd6829b47L]
[(, 0xfbcbc462L, <<, 32, )]
[0xfbcbc462L, <<, 32]
[0xfbcbc462L]
[32]
[0xd6829b47L]
[(, 0xdb4d9fb3L, <<, 32, ), |, 0xc9f2c26dL]
[(, 0xdb4d9fb3L, <<, 32, )]
[0xdb4d9fb3L, <<, 32]
[0xdb4d9fb3L]
[32]
[0xc9f2c26dL]
[(, 0xd3d18fd9L, <<, 32, ), |, 0xa797fa8bL]
[(, 0xd3d18fd9L, <<, 32, )]
[0xd3d18fd9L, <<, 32]
[0xd3d18fd9L]
[32]
[0xa797fa8bL]
[(, 0x5d49eeb1L, <<, 32, ), |, 0xfaf97c5eL]
[(, 0x5d49eeb1L, <<, 32, )]
[0x5d49eeb1L, <<, 32]
[0x5d49eeb1L]
[32]
[0xfaf97c5eL]
[(, 0xcf41ce7dL, <<, 32, ), |, 0xe294a4baL]
[(, 0xcf41ce7dL, <<, 32, )]
[0xcf41ce7dL, <<, 32]
[0xcf41ce7dL]
[32]
[0xe294a4baL]
[0x9afed7ecL, <<, 32]
[0x9afed7ecL]
[32]
[new, long, [, ], {, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }]
[{, (, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L, ,, (, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L, }]
[(, 0xc90fdaa2L, <<, 32, ), |, 0x2168c234L]
[(, 0xc90fdaa2L, <<, 32, )]
[0xc90fdaa2L, <<, 32]
[0xc90fdaa2L]
[32]
[0x2168c234L]
[(, 0xc4c6628bL, <<, 32, ), |, 0x80dc1cd1L]
[(, 0xc4c6628bL, <<, 32, )]
[0xc4c6628bL, <<, 32]
[0xc4c6628bL]
[32]
[0x80dc1cd1L]
[{, 0, ,, 0.125, ,, 0.25, ,, 0.375, ,, 0.5, ,, 0.625, ,, 0.75, ,, 0.875, ,, 1.0, ,, 1.125, ,, 1.25, ,, 1.375, ,, 1.5, ,, 1.625, }]
[0]
[0.125]
[0.25]
[0.375]
[0.5]
[0.625]
[0.75]
[0.875]
[1.0]
[1.125]
[1.25]
[1.375]
[1.5]
[1.625]
[{, 0.6299605249474366, ,, 0.7937005259840998, ,, 1.0, ,, 1.2599210498948732, ,, 1.5874010519681994, }]
[0.6299605249474366]
[0.7937005259840998]
[1.0]
[1.2599210498948732]
[1.5874010519681994]
[0x40000000L]
[-, 1L, -, (, HEX_40000000, -, 1, )]
[-, 1L]
[1L]
[(, HEX_40000000, -, 1, )]
[HEX_40000000, -, 1]
[HEX_40000000]
[1]
[0x7fffffff]
[0x7fffffffffffffffl]
[4503599627370496.0]
[2, *, TWO_POWER_52]
[2]
[TWO_POWER_52]
[1d, /, 3d]
[1d]
[3d]
[1d, /, 5d]
[1d]
[5d]
[1d, /, 7d]
[1d]
[7d]
[1d, /, 9d]
[1d]
[9d]
[1d, /, 11d]
[1d]
[11d]
[1d, /, 13d]
[1d]
[13d]
[1d, /, 15d]
[1d]
[15d]
[1d, /, 17d]
[1d]
[17d]
[3d, /, 4d]
[3d]
[4d]
[15d, /, 16d]
[15d]
[16d]
[13d, /, 14d]
[13d]
[14d]
[11d, /, 12d]
[11d]
[12d]
[9d, /, 10d]
[9d]
[10d]
[7d, /, 8d]
[7d]
[8d]
[5d, /, 6d]
[5d]
[6d]
[1d, /, 2d]
[1d]
[2d]
[1d, /, 4d]
[1d]
[4d]
[d, >, -, Precision, ., SAFE_MIN, &&, d, <, Precision, ., SAFE_MIN]
[d, >, -, Precision, ., SAFE_MIN]
[d]
[-, Precision, ., SAFE_MIN]
[Precision, ., SAFE_MIN]
[Precision]
[d, <, Precision, ., SAFE_MIN]
[d]
[Precision, ., SAFE_MIN]
[Precision]
[d]
[Double, ., doubleToRawLongBits, (, d, )]
[Double]
[d]
[xl]
[xl, &, MASK_30BITS]
[xl]
[MASK_30BITS]
[Double, ., longBitsToDouble, (, xl, )]
[Double]
[xl]
[Math, ., sqrt, (, a, )]
[Math]
[a]
[x, !=, x]
[x]
[x]
[x]
[x, >, 20]
[x]
[20]
[x, >=, LOG_MAX_VALUE]
[x]
[LOG_MAX_VALUE]
[exp, (, 0.5, *, x, )]
[0.5, *, x]
[0.5]
[x]
[(, 0.5, *, t, ), *, t]
[(, 0.5, *, t, )]
[0.5, *, t]
[0.5]
[t]
[t]
[0.5, *, exp, (, x, )]
[0.5]
[exp, (, x, )]
[x]
[x, <, -, 20]
[x]
[-, 20]
[20]
[x, <=, -, LOG_MAX_VALUE]
[x]
[-, LOG_MAX_VALUE]
[LOG_MAX_VALUE]
[exp, (, -, 0.5, *, x, )]
[-, 0.5, *, x]
[-, 0.5]
[0.5]
[x]
[(, 0.5, *, t, ), *, t]
[(, 0.5, *, t, )]
[0.5, *, t]
[0.5]
[t]
[t]
[0.5, *, exp, (, -, x, )]
[0.5]
[exp, (, -, x, )]
[-, x]
[x]
[new, double, [, 2, ]]
[2]
[x, <, 0.0]
[x]
[0.0]
[x]
[-, x]
[x]
[exp, (, x, ,, 0.0, ,, hiPrec, )]
[x]
[0.0]
[hiPrec]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[ya, -, hiPrec, [, 0, ]]
[ya]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[ya, *, HEX_40000000]
[ya]
[HEX_40000000]
[ya, +, temp, -, temp]
[ya, +, temp]
[ya]
[temp]
[temp]
[ya, -, yaa]
[ya]
[yaa]
[1.0, /, ya]
[1.0]
[ya]
[temp]
[recip, *, HEX_40000000]
[recip]
[HEX_40000000]
[recip, +, temp, -, temp]
[recip, +, temp]
[recip]
[temp]
[temp]
[recip, -, recipa]
[recip]
[recipa]
[recipb]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, )]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[1.0, -, yaa, *, recipa]
[1.0]
[yaa, *, recipa]
[yaa]
[recipa]
[yaa, *, recipb]
[yaa]
[recipb]
[yab, *, recipa]
[yab]
[recipa]
[yab, *, recipb]
[yab]
[recipb]
[recip]
[recipb]
[-, yb, *, recip, *, recip]
[-, yb, *, recip]
[-, yb]
[yb]
[recip]
[recip]
[temp]
[ya, +, recipa]
[ya]
[recipa]
[yb]
[-, (, temp, -, ya, -, recipa, )]
[(, temp, -, ya, -, recipa, )]
[temp, -, ya, -, recipa]
[temp, -, ya]
[temp]
[ya]
[recipa]
[ya]
[temp]
[temp]
[ya, +, recipb]
[ya]
[recipb]
[yb]
[-, (, temp, -, ya, -, recipb, )]
[(, temp, -, ya, -, recipb, )]
[temp, -, ya, -, recipb]
[temp, -, ya]
[temp]
[ya]
[recipb]
[ya]
[temp]
[ya, +, yb]
[ya]
[yb]
[result]
[0.5]
[result]
[false]
[x, !=, x]
[x]
[x]
[x]
[x, >, 20]
[x]
[20]
[x, >=, LOG_MAX_VALUE]
[x]
[LOG_MAX_VALUE]
[exp, (, 0.5, *, x, )]
[0.5, *, x]
[0.5]
[x]
[(, 0.5, *, t, ), *, t]
[(, 0.5, *, t, )]
[0.5, *, t]
[0.5]
[t]
[t]
[0.5, *, exp, (, x, )]
[0.5]
[exp, (, x, )]
[x]
[x, <, -, 20]
[x]
[-, 20]
[20]
[x, <=, -, LOG_MAX_VALUE]
[x]
[-, LOG_MAX_VALUE]
[LOG_MAX_VALUE]
[exp, (, -, 0.5, *, x, )]
[-, 0.5, *, x]
[-, 0.5]
[0.5]
[x]
[(, -, 0.5, *, t, ), *, t]
[(, -, 0.5, *, t, )]
[-, 0.5, *, t]
[-, 0.5]
[0.5]
[t]
[t]
[-, 0.5, *, exp, (, -, x, )]
[-, 0.5]
[0.5]
[exp, (, -, x, )]
[-, x]
[x]
[x, ==, 0]
[x]
[0]
[x]
[x, <, 0.0]
[x]
[0.0]
[x]
[-, x]
[x]
[negate]
[true]
[x, >, 0.25]
[x]
[0.25]
[new, double, [, 2, ]]
[2]
[exp, (, x, ,, 0.0, ,, hiPrec, )]
[x]
[0.0]
[hiPrec]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[ya, -, hiPrec, [, 0, ]]
[ya]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[ya, *, HEX_40000000]
[ya]
[HEX_40000000]
[ya, +, temp, -, temp]
[ya, +, temp]
[ya]
[temp]
[temp]
[ya, -, yaa]
[ya]
[yaa]
[1.0, /, ya]
[1.0]
[ya]
[temp]
[recip, *, HEX_40000000]
[recip]
[HEX_40000000]
[recip, +, temp, -, temp]
[recip, +, temp]
[recip]
[temp]
[temp]
[recip, -, recipa]
[recip]
[recipa]
[recipb]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, ), *, recip]
[(, 1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb, )]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa, -, yab, *, recipb]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb, -, yab, *, recipa]
[1.0, -, yaa, *, recipa, -, yaa, *, recipb]
[1.0, -, yaa, *, recipa]
[1.0]
[yaa, *, recipa]
[yaa]
[recipa]
[yaa, *, recipb]
[yaa]
[recipb]
[yab, *, recipa]
[yab]
[recipa]
[yab, *, recipb]
[yab]
[recipb]
[recip]
[recipb]
[-, yb, *, recip, *, recip]
[-, yb, *, recip]
[-, yb]
[yb]
[recip]
[recip]
[recipa]
[-, recipa]
[recipa]
[recipb]
[-, recipb]
[recipb]
[temp]
[ya, +, recipa]
[ya]
[recipa]
[yb]
[-, (, temp, -, ya, -, recipa, )]
[(, temp, -, ya, -, recipa, )]
[temp, -, ya, -, recipa]
[temp, -, ya]
[temp]
[ya]
[recipa]
[ya]
[temp]
[temp]
[ya, +, recipb]
[ya]
[recipb]
[yb]
[-, (, temp, -, ya, -, recipb, )]
[(, temp, -, ya, -, recipb, )]
[temp, -, ya, -, recipb]
[temp, -, ya]
[temp]
[ya]
[recipb]
[ya]
[temp]
[result]
[ya, +, yb]
[ya]
[yb]
[result]
[0.5]
[new, double, [, 2, ]]
[2]
[expm1, (, x, ,, hiPrec, )]
[x]
[hiPrec]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[ya, -, hiPrec, [, 0, ]]
[ya]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[1.0, +, ya]
[1.0]
[ya]
[1.0, /, denom]
[1.0]
[denom]
[-, (, denom, -, 1.0, -, ya, ), +, yb]
[-, (, denom, -, 1.0, -, ya, )]
[(, denom, -, 1.0, -, ya, )]
[denom, -, 1.0, -, ya]
[denom, -, 1.0]
[denom]
[1.0]
[ya]
[yb]
[ya, *, denomr]
[ya]
[denomr]
[ratio, *, HEX_40000000]
[ratio]
[HEX_40000000]
[ratio, +, temp, -, temp]
[ratio, +, temp]
[ratio]
[temp]
[temp]
[ratio, -, ra]
[ratio]
[ra]
[temp]
[denom, *, HEX_40000000]
[denom]
[HEX_40000000]
[denom, +, temp, -, temp]
[denom, +, temp]
[denom]
[temp]
[temp]
[denom, -, za]
[denom]
[za]
[rb]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, )]
[ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb]
[ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra]
[ya, -, za, *, ra, -, za, *, rb]
[ya, -, za, *, ra]
[ya]
[za, *, ra]
[za]
[ra]
[za, *, rb]
[za]
[rb]
[zb, *, ra]
[zb]
[ra]
[zb, *, rb]
[zb]
[rb]
[denomr]
[rb]
[yb, *, denomr]
[yb]
[denomr]
[rb]
[-, ya, *, denomb, *, denomr, *, denomr]
[-, ya, *, denomb, *, denomr]
[-, ya, *, denomb]
[-, ya]
[ya]
[denomb]
[denomr]
[denomr]
[temp]
[ya, +, ra]
[ya]
[ra]
[yb]
[-, (, temp, -, ya, -, ra, )]
[(, temp, -, ya, -, ra, )]
[temp, -, ya, -, ra]
[temp, -, ya]
[temp]
[ya]
[ra]
[ya]
[temp]
[temp]
[ya, +, rb]
[ya]
[rb]
[yb]
[-, (, temp, -, ya, -, rb, )]
[(, temp, -, ya, -, rb, )]
[temp, -, ya, -, rb]
[temp, -, ya]
[temp]
[ya]
[rb]
[ya]
[temp]
[result]
[ya, +, yb]
[ya]
[yb]
[result]
[0.5]
[negate]
[result]
[-, result]
[result]
[result]
[false]
[x, !=, x]
[x]
[x]
[x]
[x, >, 20.0]
[x]
[20.0]
[1.0]
[x, <, -, 20]
[x]
[-, 20]
[20]
[-, 1.0]
[1.0]
[x, ==, 0]
[x]
[0]
[x]
[x, <, 0.0]
[x]
[0.0]
[x]
[-, x]
[x]
[negate]
[true]
[x, >=, 0.5]
[x]
[0.5]
[new, double, [, 2, ]]
[2]
[exp, (, x, *, 2.0, ,, 0.0, ,, hiPrec, )]
[x, *, 2.0]
[x]
[2.0]
[0.0]
[hiPrec]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[ya, -, hiPrec, [, 0, ]]
[ya]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, 1.0, +, ya]
[-, 1.0]
[1.0]
[ya]
[-, (, na, +, 1.0, -, ya, )]
[(, na, +, 1.0, -, ya, )]
[na, +, 1.0, -, ya]
[na, +, 1.0]
[na]
[1.0]
[ya]
[na, +, yb]
[na]
[yb]
[nb]
[-, (, temp, -, na, -, yb, )]
[(, temp, -, na, -, yb, )]
[temp, -, na, -, yb]
[temp, -, na]
[temp]
[na]
[yb]
[na]
[temp]
[1.0, +, ya]
[1.0]
[ya]
[-, (, da, -, 1.0, -, ya, )]
[(, da, -, 1.0, -, ya, )]
[da, -, 1.0, -, ya]
[da, -, 1.0]
[da]
[1.0]
[ya]
[temp]
[da, +, yb]
[da]
[yb]
[db]
[-, (, temp, -, da, -, yb, )]
[(, temp, -, da, -, yb, )]
[temp, -, da, -, yb]
[temp, -, da]
[temp]
[da]
[yb]
[da]
[temp]
[temp]
[da, *, HEX_40000000]
[da]
[HEX_40000000]
[da, +, temp, -, temp]
[da, +, temp]
[da]
[temp]
[temp]
[da, -, daa]
[da]
[daa]
[na, /, da]
[na]
[da]
[temp]
[ratio, *, HEX_40000000]
[ratio]
[HEX_40000000]
[ratio, +, temp, -, temp]
[ratio, +, temp]
[ratio]
[temp]
[temp]
[ratio, -, ratioa]
[ratio]
[ratioa]
[ratiob]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, )]
[na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob]
[na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa]
[na, -, daa, *, ratioa, -, daa, *, ratiob]
[na, -, daa, *, ratioa]
[na]
[daa, *, ratioa]
[daa]
[ratioa]
[daa, *, ratiob]
[daa]
[ratiob]
[dab, *, ratioa]
[dab]
[ratioa]
[dab, *, ratiob]
[dab]
[ratiob]
[da]
[ratiob]
[nb, /, da]
[nb]
[da]
[ratiob]
[-, db, *, na, /, da, /, da]
[-, db, *, na, /, da]
[-, db, *, na]
[-, db]
[db]
[na]
[da]
[da]
[result]
[ratioa, +, ratiob]
[ratioa]
[ratiob]
[new, double, [, 2, ]]
[2]
[expm1, (, x, *, 2.0, ,, hiPrec, )]
[x, *, 2.0]
[x]
[2.0]
[hiPrec]
[hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, (, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[(, ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ], )]
[ya, -, hiPrec, [, 0, ], -, hiPrec, [, 1, ]]
[ya, -, hiPrec, [, 0, ]]
[ya]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[ya]
[yb]
[2.0, +, ya]
[2.0]
[ya]
[-, (, da, -, 2.0, -, ya, )]
[(, da, -, 2.0, -, ya, )]
[da, -, 2.0, -, ya]
[da, -, 2.0]
[da]
[2.0]
[ya]
[da, +, yb]
[da]
[yb]
[db]
[-, (, temp, -, da, -, yb, )]
[(, temp, -, da, -, yb, )]
[temp, -, da, -, yb]
[temp, -, da]
[temp]
[da]
[yb]
[da]
[temp]
[temp]
[da, *, HEX_40000000]
[da]
[HEX_40000000]
[da, +, temp, -, temp]
[da, +, temp]
[da]
[temp]
[temp]
[da, -, daa]
[da]
[daa]
[na, /, da]
[na]
[da]
[temp]
[ratio, *, HEX_40000000]
[ratio]
[HEX_40000000]
[ratio, +, temp, -, temp]
[ratio, +, temp]
[ratio]
[temp]
[temp]
[ratio, -, ratioa]
[ratio]
[ratioa]
[ratiob]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, ), /, da]
[(, na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob, )]
[na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa, -, dab, *, ratiob]
[na, -, daa, *, ratioa, -, daa, *, ratiob, -, dab, *, ratioa]
[na, -, daa, *, ratioa, -, daa, *, ratiob]
[na, -, daa, *, ratioa]
[na]
[daa, *, ratioa]
[daa]
[ratioa]
[daa, *, ratiob]
[daa]
[ratiob]
[dab, *, ratioa]
[dab]
[ratioa]
[dab, *, ratiob]
[dab]
[ratiob]
[da]
[ratiob]
[nb, /, da]
[nb]
[da]
[ratiob]
[-, db, *, na, /, da, /, da]
[-, db, *, na, /, da]
[-, db, *, na]
[-, db]
[db]
[na]
[da]
[da]
[result]
[ratioa, +, ratiob]
[ratioa]
[ratiob]
[negate]
[result]
[-, result]
[result]
[result]
[FastMath, ., log, (, a, +, FastMath, ., sqrt, (, a, *, a, -, 1, ), )]
[FastMath]
[a, +, FastMath, ., sqrt, (, a, *, a, -, 1, )]
[a]
[FastMath, ., sqrt, (, a, *, a, -, 1, )]
[FastMath]
[a, *, a, -, 1]
[a, *, a]
[a]
[a]
[1]
[false]
[a, <, 0]
[a]
[0]
[negative]
[true]
[a]
[-, a]
[a]
[a, >, 0.167]
[a]
[0.167]
[absAsinh]
[FastMath, ., log, (, FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a, )]
[FastMath]
[FastMath, ., sqrt, (, a, *, a, +, 1, ), +, a]
[FastMath, ., sqrt, (, a, *, a, +, 1, )]
[FastMath]
[a, *, a, +, 1]
[a, *, a]
[a]
[a]
[1]
[a]
[a, *, a]
[a]
[a]
[a, >, 0.097]
[a]
[0.097]
[absAsinh]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[a]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[1]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[a2]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[F_1_3]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, )]
[a2]
[(, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, )]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6]
[F_1_5]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, )]
[a2]
[(, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8, )]
[F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8]
[F_1_7]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, ), *, F_7_8]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, )]
[a2]
[(, F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10, )]
[F_1_9, -, a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10]
[F_1_9]
[a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, ), *, F_9_10]
[a2, *, (, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, )]
[a2]
[(, F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12, )]
[F_1_11, -, a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12]
[F_1_11]
[a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, ), *, F_11_12]
[a2, *, (, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, )]
[a2]
[(, F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14, )]
[F_1_13, -, a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14]
[F_1_13]
[a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, ), *, F_13_14]
[a2, *, (, F_1_15, -, a2, *, F_1_17, *, F_15_16, )]
[a2]
[(, F_1_15, -, a2, *, F_1_17, *, F_15_16, )]
[F_1_15, -, a2, *, F_1_17, *, F_15_16]
[F_1_15]
[a2, *, F_1_17, *, F_15_16]
[a2, *, F_1_17]
[a2]
[F_1_17]
[F_15_16]
[F_13_14]
[F_11_12]
[F_9_10]
[F_7_8]
[F_5_6]
[F_3_4]
[F_1_2]
[a, >, 0.036]
[a]
[0.036]
[absAsinh]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[a]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[1]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[a2]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[F_1_3]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, )]
[a2]
[(, F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6, )]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6]
[F_1_5]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, ), *, F_5_6]
[a2, *, (, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, )]
[a2]
[(, F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8, )]
[F_1_7, -, a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8]
[F_1_7]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, ), *, F_7_8]
[a2, *, (, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, )]
[a2]
[(, F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10, )]
[F_1_9, -, a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10]
[F_1_9]
[a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, ), *, F_9_10]
[a2, *, (, F_1_11, -, a2, *, F_1_13, *, F_11_12, )]
[a2]
[(, F_1_11, -, a2, *, F_1_13, *, F_11_12, )]
[F_1_11, -, a2, *, F_1_13, *, F_11_12]
[F_1_11]
[a2, *, F_1_13, *, F_11_12]
[a2, *, F_1_13]
[a2]
[F_1_13]
[F_11_12]
[F_9_10]
[F_7_8]
[F_5_6]
[F_3_4]
[F_1_2]
[a, >, 0.0036]
[a]
[0.0036]
[absAsinh]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[a]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2, )]
[1, -, a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[1]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, ), *, F_1_2]
[a2, *, (, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[a2]
[(, F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4, )]
[F_1_3, -, a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[F_1_3]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, ), *, F_3_4]
[a2, *, (, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, )]
[a2]
[(, F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6, )]
[F_1_5, -, a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6]
[F_1_5]
[a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, ), *, F_5_6]
[a2, *, (, F_1_7, -, a2, *, F_1_9, *, F_7_8, )]
[a2]
[(, F_1_7, -, a2, *, F_1_9, *, F_7_8, )]
[F_1_7, -, a2, *, F_1_9, *, F_7_8]
[F_1_7]
[a2, *, F_1_9, *, F_7_8]
[a2, *, F_1_9]
[a2]
[F_1_9]
[F_7_8]
[F_5_6]
[F_3_4]
[F_1_2]
[absAsinh]
[a, *, (, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, )]
[a]
[(, 1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2, )]
[1, -, a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2]
[1]
[a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, ), *, F_1_2]
[a2, *, (, F_1_3, -, a2, *, F_1_5, *, F_3_4, )]
[a2]
[(, F_1_3, -, a2, *, F_1_5, *, F_3_4, )]
[F_1_3, -, a2, *, F_1_5, *, F_3_4]
[F_1_3]
[a2, *, F_1_5, *, F_3_4]
[a2, *, F_1_5]
[a2]
[F_1_5]
[F_3_4]
[F_1_2]
[negative, ?, -, absAsinh, :, absAsinh]
[negative]
[-, absAsinh]
[absAsinh]
[absAsinh]
[false]
[a, <, 0]
[a]
[0]
[negative]
[true]
[a]
[-, a]
[a]
[a, >, 0.15]
[a]
[0.15]
[absAtanh]
[0.5, *, FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a, ), )]
[0.5]
[FastMath, ., log, (, (, 1, +, a, ), /, (, 1, -, a, ), )]
[FastMath]
[(, 1, +, a, ), /, (, 1, -, a, )]
[(, 1, +, a, )]
[1, +, a]
[1]
[a]
[(, 1, -, a, )]
[1, -, a]
[1]
[a]
[a, *, a]
[a]
[a]
[a, >, 0.087]
[a]
[0.087]
[absAtanh]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), )]
[a]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), ), )]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), )]
[1]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), )]
[a2]
[(, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), ), )]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), )]
[F_1_3]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), )]
[a2]
[(, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), ), )]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), )]
[F_1_5]
[a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), )]
[a2]
[(, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), ), )]
[F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), )]
[F_1_7]
[a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), )]
[a2]
[(, F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), ), )]
[F_1_9, +, a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), )]
[F_1_9]
[a2, *, (, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), )]
[a2]
[(, F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), ), )]
[F_1_11, +, a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), )]
[F_1_11]
[a2, *, (, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), )]
[a2]
[(, F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, ), )]
[F_1_13, +, a2, *, (, F_1_15, +, a2, *, F_1_17, )]
[F_1_13]
[a2, *, (, F_1_15, +, a2, *, F_1_17, )]
[a2]
[(, F_1_15, +, a2, *, F_1_17, )]
[F_1_15, +, a2, *, F_1_17]
[F_1_15]
[a2, *, F_1_17]
[a2]
[F_1_17]
[a, >, 0.031]
[a]
[0.031]
[absAtanh]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), )]
[a]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), ), )]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), )]
[1]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), )]
[a2]
[(, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), ), )]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), )]
[F_1_3]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), )]
[a2]
[(, F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), ), )]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), )]
[F_1_5]
[a2, *, (, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), )]
[a2]
[(, F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), ), )]
[F_1_7, +, a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), )]
[F_1_7]
[a2, *, (, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), )]
[a2]
[(, F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, ), )]
[F_1_9, +, a2, *, (, F_1_11, +, a2, *, F_1_13, )]
[F_1_9]
[a2, *, (, F_1_11, +, a2, *, F_1_13, )]
[a2]
[(, F_1_11, +, a2, *, F_1_13, )]
[F_1_11, +, a2, *, F_1_13]
[F_1_11]
[a2, *, F_1_13]
[a2]
[F_1_13]
[a, >, 0.003]
[a]
[0.003]
[absAtanh]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), )]
[a]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), ), )]
[1, +, a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), )]
[1]
[a2, *, (, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), )]
[a2]
[(, F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), ), )]
[F_1_3, +, a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), )]
[F_1_3]
[a2, *, (, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), )]
[a2]
[(, F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, ), )]
[F_1_5, +, a2, *, (, F_1_7, +, a2, *, F_1_9, )]
[F_1_5]
[a2, *, (, F_1_7, +, a2, *, F_1_9, )]
[a2]
[(, F_1_7, +, a2, *, F_1_9, )]
[F_1_7, +, a2, *, F_1_9]
[F_1_7]
[a2, *, F_1_9]
[a2]
[F_1_9]
[absAtanh]
[a, *, (, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), )]
[a]
[(, 1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, ), )]
[1, +, a2, *, (, F_1_3, +, a2, *, F_1_5, )]
[1]
[a2, *, (, F_1_3, +, a2, *, F_1_5, )]
[a2]
[(, F_1_3, +, a2, *, F_1_5, )]
[F_1_3, +, a2, *, F_1_5]
[F_1_3]
[a2, *, F_1_5]
[a2]
[F_1_5]
[negative, ?, -, absAtanh, :, absAtanh]
[negative]
[-, absAtanh]
[absAtanh]
[absAtanh]
[(, a, <, 0.0, ), ?, -, 1.0, :, (, (, a, >, 0.0, ), ?, 1.0, :, a, )]
[(, a, <, 0.0, )]
[a, <, 0.0]
[a]
[0.0]
[-, 1.0]
[1.0]
[(, (, a, >, 0.0, ), ?, 1.0, :, a, )]
[(, a, >, 0.0, ), ?, 1.0, :, a]
[(, a, >, 0.0, )]
[a, >, 0.0]
[a]
[0.0]
[1.0]
[a]
[(, a, <, 0.0f, ), ?, -, 1.0f, :, (, (, a, >, 0.0f, ), ?, 1.0f, :, a, )]
[(, a, <, 0.0f, )]
[a, <, 0.0f]
[a]
[0.0f]
[-, 1.0f]
[1.0f]
[(, (, a, >, 0.0f, ), ?, 1.0f, :, a, )]
[(, a, >, 0.0f, ), ?, 1.0f, :, a]
[(, a, >, 0.0f, )]
[a, >, 0.0f]
[a]
[0.0f]
[1.0f]
[a]
[nextAfter, (, a, ,, Double, ., POSITIVE_INFINITY, )]
[a]
[Double, ., POSITIVE_INFINITY]
[Double]
[nextAfter, (, a, ,, Float, ., POSITIVE_INFINITY, )]
[a]
[Float, ., POSITIVE_INFINITY]
[Float]
[Math, ., random, (, )]
[Math]
[exp, (, x, ,, 0.0, ,, null, )]
[x]
[0.0]
[null]
[x, <, 0.0]
[x]
[0.0]
[intVal]
[(, int, ), -, x]
[-, x]
[x]
[intVal, >, 746]
[intVal]
[746]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[0.0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[0.0]
[0.0]
[intVal, >, 709]
[intVal]
[709]
[exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, ), /, 285040095144011776.0]
[exp, (, x, +, 40.19140625, ,, extra, ,, hiPrec, )]
[x, +, 40.19140625]
[x]
[40.19140625]
[extra]
[hiPrec]
[285040095144011776.0]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[285040095144011776.0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[285040095144011776.0]
[result]
[intVal, ==, 709]
[intVal]
[709]
[exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, ), /, 4.455505956692756620]
[exp, (, x, +, 1.494140625, ,, extra, ,, hiPrec, )]
[x, +, 1.494140625]
[x]
[1.494140625]
[extra]
[hiPrec]
[4.455505956692756620]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[4.455505956692756620]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[4.455505956692756620]
[result]
[intVal, ++]
[intVal]
[intPartA]
[ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ]]
[ExpIntTable, ., EXP_INT_TABLE_A]
[ExpIntTable]
[EXP_INT_TABLE_MAX_INDEX, -, intVal]
[EXP_INT_TABLE_MAX_INDEX]
[intVal]
[intPartB]
[ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, -, intVal, ]]
[ExpIntTable, ., EXP_INT_TABLE_B]
[ExpIntTable]
[EXP_INT_TABLE_MAX_INDEX, -, intVal]
[EXP_INT_TABLE_MAX_INDEX]
[intVal]
[intVal]
[-, intVal]
[intVal]
[intVal]
[(, int, ), x]
[x]
[intVal, >, 709]
[intVal]
[709]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[Double, ., POSITIVE_INFINITY]
[Double]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[0.0]
[Double, ., POSITIVE_INFINITY]
[Double]
[intPartA]
[ExpIntTable, ., EXP_INT_TABLE_A, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ]]
[ExpIntTable, ., EXP_INT_TABLE_A]
[ExpIntTable]
[EXP_INT_TABLE_MAX_INDEX, +, intVal]
[EXP_INT_TABLE_MAX_INDEX]
[intVal]
[intPartB]
[ExpIntTable, ., EXP_INT_TABLE_B, [, EXP_INT_TABLE_MAX_INDEX, +, intVal, ]]
[ExpIntTable, ., EXP_INT_TABLE_B]
[ExpIntTable]
[EXP_INT_TABLE_MAX_INDEX, +, intVal]
[EXP_INT_TABLE_MAX_INDEX]
[intVal]
[(, int, ), (, (, x, -, intVal, ), *, 1024.0, )]
[(, (, x, -, intVal, ), *, 1024.0, )]
[(, x, -, intVal, ), *, 1024.0]
[(, x, -, intVal, )]
[x, -, intVal]
[x]
[intVal]
[1024.0]
[ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ]]
[ExpFracTable, ., EXP_FRAC_TABLE_A]
[ExpFracTable]
[intFrac]
[ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ]]
[ExpFracTable, ., EXP_FRAC_TABLE_B]
[ExpFracTable]
[intFrac]
[x, -, (, intVal, +, intFrac, /, 1024.0, )]
[x]
[(, intVal, +, intFrac, /, 1024.0, )]
[intVal, +, intFrac, /, 1024.0]
[intVal]
[intFrac, /, 1024.0]
[intFrac]
[1024.0]
[0.04168701738764507]
[z]
[z, *, epsilon, +, 0.1666666505023083]
[z, *, epsilon]
[z]
[epsilon]
[0.1666666505023083]
[z]
[z, *, epsilon, +, 0.5000000000042687]
[z, *, epsilon]
[z]
[epsilon]
[0.5000000000042687]
[z]
[z, *, epsilon, +, 1.0]
[z, *, epsilon]
[z]
[epsilon]
[1.0]
[z]
[z, *, epsilon, +, -, 3.940510424527919E-20]
[z, *, epsilon]
[z]
[epsilon]
[-, 3.940510424527919E-20]
[3.940510424527919E-20]
[intPartA, *, fracPartA]
[intPartA]
[fracPartA]
[intPartA, *, fracPartB, +, intPartB, *, fracPartA, +, intPartB, *, fracPartB]
[intPartA, *, fracPartB, +, intPartB, *, fracPartA]
[intPartA, *, fracPartB]
[intPartA]
[fracPartB]
[intPartB, *, fracPartA]
[intPartB]
[fracPartA]
[intPartB, *, fracPartB]
[intPartB]
[fracPartB]
[tempB, +, tempA]
[tempB]
[tempA]
[extra, !=, 0.0]
[extra]
[0.0]
[result]
[tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB, +, tempA]
[tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB]
[tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z]
[tempC, *, extra, *, z, +, tempC, *, extra]
[tempC, *, extra, *, z]
[tempC, *, extra]
[tempC]
[extra]
[z]
[tempC, *, extra]
[tempC]
[extra]
[tempC, *, z]
[tempC]
[z]
[tempB]
[tempA]
[result]
[tempC, *, z, +, tempB, +, tempA]
[tempC, *, z, +, tempB]
[tempC, *, z]
[tempC]
[z]
[tempB]
[tempA]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[tempA]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z, +, tempB]
[tempC, *, extra, *, z, +, tempC, *, extra, +, tempC, *, z]
[tempC, *, extra, *, z, +, tempC, *, extra]
[tempC, *, extra, *, z]
[tempC, *, extra]
[tempC]
[extra]
[z]
[tempC, *, extra]
[tempC]
[extra]
[tempC, *, z]
[tempC]
[z]
[tempB]
[result]
[expm1, (, x, ,, null, )]
[x]
[null]
[x, !=, x, ||, x, ==, 0.0]
[x, !=, x]
[x]
[x]
[x, ==, 0.0]
[x]
[0.0]
[x]
[x, <=, -, 1.0, ||, x, >=, 1.0]
[x, <=, -, 1.0]
[x]
[-, 1.0]
[1.0]
[x, >=, 1.0]
[x]
[1.0]
[new, double, [, 2, ]]
[2]
[exp, (, x, ,, 0.0, ,, hiPrec, )]
[x]
[0.0]
[hiPrec]
[x, >, 0.0]
[x]
[0.0]
[-, 1.0, +, hiPrec, [, 0, ], +, hiPrec, [, 1, ]]
[-, 1.0, +, hiPrec, [, 0, ]]
[-, 1.0]
[1.0]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[-, 1.0, +, hiPrec, [, 0, ]]
[-, 1.0]
[1.0]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[-, (, ra, +, 1.0, -, hiPrec, [, 0, ], )]
[(, ra, +, 1.0, -, hiPrec, [, 0, ], )]
[ra, +, 1.0, -, hiPrec, [, 0, ]]
[ra, +, 1.0]
[ra]
[1.0]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[rb]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[ra, +, rb]
[ra]
[rb]
[false]
[x, <, 0.0]
[x]
[0.0]
[x]
[-, x]
[x]
[negative]
[true]
[(, int, ), (, x, *, 1024.0, )]
[(, x, *, 1024.0, )]
[x, *, 1024.0]
[x]
[1024.0]
[ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ], -, 1.0]
[ExpFracTable, ., EXP_FRAC_TABLE_A, [, intFrac, ]]
[ExpFracTable, ., EXP_FRAC_TABLE_A]
[ExpFracTable]
[intFrac]
[1.0]
[ExpFracTable, ., EXP_FRAC_TABLE_B, [, intFrac, ]]
[ExpFracTable, ., EXP_FRAC_TABLE_B]
[ExpFracTable]
[intFrac]
[tempA, +, tempB]
[tempA]
[tempB]
[tempB]
[-, (, temp, -, tempA, -, tempB, )]
[(, temp, -, tempA, -, tempB, )]
[temp, -, tempA, -, tempB]
[temp, -, tempA]
[temp]
[tempA]
[tempB]
[tempA]
[temp]
[temp]
[tempA, *, HEX_40000000]
[tempA]
[HEX_40000000]
[baseA]
[tempA, +, temp, -, temp]
[tempA, +, temp]
[tempA]
[temp]
[temp]
[baseB]
[tempB, +, (, tempA, -, baseA, )]
[tempB]
[(, tempA, -, baseA, )]
[tempA, -, baseA]
[tempA]
[baseA]
[epsilon]
[x, -, intFrac, /, 1024.0]
[x]
[intFrac, /, 1024.0]
[intFrac]
[1024.0]
[0.008336750013465571]
[zb]
[zb, *, epsilon, +, 0.041666663879186654]
[zb, *, epsilon]
[zb]
[epsilon]
[0.041666663879186654]
[zb]
[zb, *, epsilon, +, 0.16666666666745392]
[zb, *, epsilon]
[zb]
[epsilon]
[0.16666666666745392]
[zb]
[zb, *, epsilon, +, 0.49999999999999994]
[zb, *, epsilon]
[zb]
[epsilon]
[0.49999999999999994]
[zb]
[zb, *, epsilon]
[zb]
[epsilon]
[zb]
[zb, *, epsilon]
[zb]
[epsilon]
[epsilon]
[za, +, zb]
[za]
[zb]
[zb]
[-, (, temp, -, za, -, zb, )]
[(, temp, -, za, -, zb, )]
[temp, -, za, -, zb]
[temp, -, za]
[temp]
[za]
[zb]
[za]
[temp]
[temp]
[za, *, HEX_40000000]
[za]
[HEX_40000000]
[temp]
[za, +, temp, -, temp]
[za, +, temp]
[za]
[temp]
[temp]
[zb]
[za, -, temp]
[za]
[temp]
[za]
[temp]
[za, *, baseA]
[za]
[baseA]
[temp]
[ya, +, za, *, baseB]
[ya]
[za, *, baseB]
[za]
[baseB]
[-, (, temp, -, ya, -, za, *, baseB, )]
[(, temp, -, ya, -, za, *, baseB, )]
[temp, -, ya, -, za, *, baseB]
[temp, -, ya]
[temp]
[ya]
[za, *, baseB]
[za]
[baseB]
[ya]
[temp]
[temp]
[ya, +, zb, *, baseA]
[ya]
[zb, *, baseA]
[zb]
[baseA]
[yb]
[-, (, temp, -, ya, -, zb, *, baseA, )]
[(, temp, -, ya, -, zb, *, baseA, )]
[temp, -, ya, -, zb, *, baseA]
[temp, -, ya]
[temp]
[ya]
[zb, *, baseA]
[zb]
[baseA]
[ya]
[temp]
[temp]
[ya, +, zb, *, baseB]
[ya]
[zb, *, baseB]
[zb]
[baseB]
[yb]
[-, (, temp, -, ya, -, zb, *, baseB, )]
[(, temp, -, ya, -, zb, *, baseB, )]
[temp, -, ya, -, zb, *, baseB]
[temp, -, ya]
[temp]
[ya]
[zb, *, baseB]
[zb]
[baseB]
[ya]
[temp]
[temp]
[ya, +, baseA]
[ya]
[baseA]
[yb]
[-, (, temp, -, baseA, -, ya, )]
[(, temp, -, baseA, -, ya, )]
[temp, -, baseA, -, ya]
[temp, -, baseA]
[temp]
[baseA]
[ya]
[ya]
[temp]
[temp]
[ya, +, za]
[ya]
[za]
[yb]
[-, (, temp, -, ya, -, za, )]
[(, temp, -, ya, -, za, )]
[temp, -, ya, -, za]
[temp, -, ya]
[temp]
[ya]
[za]
[ya]
[temp]
[temp]
[ya, +, baseB]
[ya]
[baseB]
[yb]
[-, (, temp, -, ya, -, baseB, )]
[(, temp, -, ya, -, baseB, )]
[temp, -, ya, -, baseB]
[temp, -, ya]
[temp]
[ya]
[baseB]
[ya]
[temp]
[temp]
[ya, +, zb]
[ya]
[zb]
[yb]
[-, (, temp, -, ya, -, zb, )]
[(, temp, -, ya, -, zb, )]
[temp, -, ya, -, zb]
[temp, -, ya]
[temp]
[ya]
[zb]
[ya]
[temp]
[negative]
[1.0, +, ya]
[1.0]
[ya]
[1.0, /, denom]
[1.0]
[denom]
[-, (, denom, -, 1.0, -, ya, ), +, yb]
[-, (, denom, -, 1.0, -, ya, )]
[(, denom, -, 1.0, -, ya, )]
[denom, -, 1.0, -, ya]
[denom, -, 1.0]
[denom]
[1.0]
[ya]
[yb]
[ya, *, denomr]
[ya]
[denomr]
[temp]
[ratio, *, HEX_40000000]
[ratio]
[HEX_40000000]
[ratio, +, temp, -, temp]
[ratio, +, temp]
[ratio]
[temp]
[temp]
[ratio, -, ra]
[ratio]
[ra]
[temp]
[denom, *, HEX_40000000]
[denom]
[HEX_40000000]
[za]
[denom, +, temp, -, temp]
[denom, +, temp]
[denom]
[temp]
[temp]
[zb]
[denom, -, za]
[denom]
[za]
[rb]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, ), *, denomr]
[(, ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb, )]
[ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra, -, zb, *, rb]
[ya, -, za, *, ra, -, za, *, rb, -, zb, *, ra]
[ya, -, za, *, ra, -, za, *, rb]
[ya, -, za, *, ra]
[ya]
[za, *, ra]
[za]
[ra]
[za, *, rb]
[za]
[rb]
[zb, *, ra]
[zb]
[ra]
[zb, *, rb]
[zb]
[rb]
[denomr]
[rb]
[yb, *, denomr]
[yb]
[denomr]
[rb]
[-, ya, *, denomb, *, denomr, *, denomr]
[-, ya, *, denomb, *, denomr]
[-, ya, *, denomb]
[-, ya]
[ya]
[denomb]
[denomr]
[denomr]
[ya]
[-, ra]
[ra]
[yb]
[-, rb]
[rb]
[hiPrecOut, !=, null]
[hiPrecOut]
[null]
[hiPrecOut, [, 0, ]]
[hiPrecOut]
[0]
[ya]
[hiPrecOut, [, 1, ]]
[hiPrecOut]
[1]
[yb]
[ya, +, yb]
[ya]
[yb]
[log, (, x, ,, null, )]
[x]
[null]
[x, ==, 0]
[x]
[0]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, ), &&, x, !=, 0.0]
[(, (, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x, )]
[(, bits, &, 0x8000000000000000L, ), !=, 0, ||, x, !=, x]
[(, bits, &, 0x8000000000000000L, ), !=, 0]
[(, bits, &, 0x8000000000000000L, )]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[0]
[x, !=, x]
[x]
[x]
[x, !=, 0.0]
[x]
[0.0]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[Double, ., NaN]
[Double]
[Double, ., NaN]
[Double]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[(, int, ), (, bits, >, >, 52, ), -, 1023]
[(, int, ), (, bits, >, >, 52, )]
[(, bits, >, >, 52, )]
[bits, >, >, 52]
[bits]
[52]
[1023]
[(, bits, &, 0x7ff0000000000000L, ), ==, 0]
[(, bits, &, 0x7ff0000000000000L, )]
[bits, &, 0x7ff0000000000000L]
[bits]
[0x7ff0000000000000L]
[0]
[x, ==, 0]
[x]
[0]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., NEGATIVE_INFINITY]
[Double]
[bits]
[1]
[(, bits, &, 0x0010000000000000L, ), ==, 0]
[(, bits, &, 0x0010000000000000L, )]
[bits, &, 0x0010000000000000L]
[bits]
[0x0010000000000000L]
[0]
[--, exp]
[exp]
[bits]
[1]
[(, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99, &&, hiPrec, ==, null]
[(, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01, &&, x, >, 0.99]
[(, exp, ==, -, 1, ||, exp, ==, 0, ), &&, x, <, 1.01]
[(, exp, ==, -, 1, ||, exp, ==, 0, )]
[exp, ==, -, 1, ||, exp, ==, 0]
[exp, ==, -, 1]
[exp]
[-, 1]
[1]
[exp, ==, 0]
[exp]
[0]
[x, <, 1.01]
[x]
[1.01]
[x, >, 0.99]
[x]
[0.99]
[hiPrec, ==, null]
[hiPrec]
[null]
[x, -, 1.0]
[x]
[1.0]
[xa, -, x, +, 1.0]
[xa, -, x]
[xa]
[x]
[1.0]
[xa, *, HEX_40000000]
[xa]
[HEX_40000000]
[xa, +, tmp, -, tmp]
[xa, +, tmp]
[xa]
[tmp]
[tmp]
[xa, -, aa]
[xa]
[aa]
[xa]
[aa]
[xb]
[ab]
[LN_QUICK_COEF, [, LN_QUICK_COEF, ., length, -, 1, ]]
[LN_QUICK_COEF]
[LN_QUICK_COEF, ., length, -, 1]
[LN_QUICK_COEF, ., length]
[LN_QUICK_COEF]
[1]
[lnCoef_last, [, 0, ]]
[lnCoef_last]
[0]
[lnCoef_last, [, 1, ]]
[lnCoef_last]
[1]
[LN_QUICK_COEF, ., length, -, 2]
[LN_QUICK_COEF, ., length]
[LN_QUICK_COEF]
[2]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[aa]
[ya, *, xa]
[ya]
[xa]
[ab]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb]
[ya, *, xb, +, yb, *, xa]
[ya, *, xb]
[ya]
[xb]
[yb, *, xa]
[yb]
[xa]
[yb, *, xb]
[yb]
[xb]
[tmp]
[aa, *, HEX_40000000]
[aa]
[HEX_40000000]
[ya]
[aa, +, tmp, -, tmp]
[aa, +, tmp]
[aa]
[tmp]
[tmp]
[yb]
[aa, -, ya, +, ab]
[aa, -, ya]
[aa]
[ya]
[ab]
[LN_QUICK_COEF, [, i, ]]
[LN_QUICK_COEF]
[i]
[aa]
[ya, +, lnCoef_i, [, 0, ]]
[ya]
[lnCoef_i, [, 0, ]]
[lnCoef_i]
[0]
[ab]
[yb, +, lnCoef_i, [, 1, ]]
[yb]
[lnCoef_i, [, 1, ]]
[lnCoef_i]
[1]
[tmp]
[aa, *, HEX_40000000]
[aa]
[HEX_40000000]
[ya]
[aa, +, tmp, -, tmp]
[aa, +, tmp]
[aa]
[tmp]
[tmp]
[yb]
[aa, -, ya, +, ab]
[aa, -, ya]
[aa]
[ya]
[ab]
[aa]
[ya, *, xa]
[ya]
[xa]
[ab]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb]
[ya, *, xb, +, yb, *, xa]
[ya, *, xb]
[ya]
[xb]
[yb, *, xa]
[yb]
[xa]
[yb, *, xb]
[yb]
[xb]
[tmp]
[aa, *, HEX_40000000]
[aa]
[HEX_40000000]
[ya]
[aa, +, tmp, -, tmp]
[aa, +, tmp]
[aa]
[tmp]
[tmp]
[yb]
[aa, -, ya, +, ab]
[aa, -, ya]
[aa]
[ya]
[ab]
[ya, +, yb]
[ya]
[yb]
[lnMant, ., LN_MANT, [, (, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, ), ]]
[lnMant, ., LN_MANT]
[lnMant]
[(, int, ), (, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, )]
[(, (, bits, &, 0x000ffc0000000000L, ), >, >, 42, )]
[(, bits, &, 0x000ffc0000000000L, ), >, >, 42]
[(, bits, &, 0x000ffc0000000000L, )]
[bits, &, 0x000ffc0000000000L]
[bits]
[0x000ffc0000000000L]
[42]
[(, bits, &, 0x3ffffffffffL, ), /, (, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), )]
[(, bits, &, 0x3ffffffffffL, )]
[bits, &, 0x3ffffffffffL]
[bits]
[0x3ffffffffffL]
[(, TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, ), )]
[TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, )]
[TWO_POWER_52]
[(, bits, &, 0x000ffc0000000000L, )]
[bits, &, 0x000ffc0000000000L]
[bits]
[0x000ffc0000000000L]
[0.0]
[0.0]
[hiPrec, !=, null]
[hiPrec]
[null]
[epsilon, *, HEX_40000000]
[epsilon]
[HEX_40000000]
[epsilon, +, tmp, -, tmp]
[epsilon, +, tmp]
[epsilon]
[tmp]
[tmp]
[epsilon, -, aa]
[epsilon]
[aa]
[aa]
[ab]
[bits, &, 0x3ffffffffffL]
[bits]
[0x3ffffffffffL]
[TWO_POWER_52, +, (, bits, &, 0x000ffc0000000000L, )]
[TWO_POWER_52]
[(, bits, &, 0x000ffc0000000000L, )]
[bits, &, 0x000ffc0000000000L]
[bits]
[0x000ffc0000000000L]
[aa]
[numer, -, xa, *, denom, -, xb, *, denom]
[numer, -, xa, *, denom]
[numer]
[xa, *, denom]
[xa]
[denom]
[xb, *, denom]
[xb]
[denom]
[xb]
[aa, /, denom]
[aa]
[denom]
[LN_HI_PREC_COEF, [, LN_HI_PREC_COEF, ., length, -, 1, ]]
[LN_HI_PREC_COEF]
[LN_HI_PREC_COEF, ., length, -, 1]
[LN_HI_PREC_COEF, ., length]
[LN_HI_PREC_COEF]
[1]
[lnCoef_last, [, 0, ]]
[lnCoef_last]
[0]
[lnCoef_last, [, 1, ]]
[lnCoef_last]
[1]
[LN_HI_PREC_COEF, ., length, -, 2]
[LN_HI_PREC_COEF, ., length]
[LN_HI_PREC_COEF]
[2]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[aa]
[ya, *, xa]
[ya]
[xa]
[ab]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb]
[ya, *, xb, +, yb, *, xa]
[ya, *, xb]
[ya]
[xb]
[yb, *, xa]
[yb]
[xa]
[yb, *, xb]
[yb]
[xb]
[tmp]
[aa, *, HEX_40000000]
[aa]
[HEX_40000000]
[ya]
[aa, +, tmp, -, tmp]
[aa, +, tmp]
[aa]
[tmp]
[tmp]
[yb]
[aa, -, ya, +, ab]
[aa, -, ya]
[aa]
[ya]
[ab]
[LN_HI_PREC_COEF, [, i, ]]
[LN_HI_PREC_COEF]
[i]
[aa]
[ya, +, lnCoef_i, [, 0, ]]
[ya]
[lnCoef_i, [, 0, ]]
[lnCoef_i]
[0]
[ab]
[yb, +, lnCoef_i, [, 1, ]]
[yb]
[lnCoef_i, [, 1, ]]
[lnCoef_i]
[1]
[tmp]
[aa, *, HEX_40000000]
[aa]
[HEX_40000000]
[ya]
[aa, +, tmp, -, tmp]
[aa, +, tmp]
[aa]
[tmp]
[tmp]
[yb]
[aa, -, ya, +, ab]
[aa, -, ya]
[aa]
[ya]
[ab]
[aa]
[ya, *, xa]
[ya]
[xa]
[ab]
[ya, *, xb, +, yb, *, xa, +, yb, *, xb]
[ya, *, xb, +, yb, *, xa]
[ya, *, xb]
[ya]
[xb]
[yb, *, xa]
[yb]
[xa]
[yb, *, xb]
[yb]
[xb]
[lnza]
[aa, +, ab]
[aa]
[ab]
[lnzb]
[-, (, lnza, -, aa, -, ab, )]
[(, lnza, -, aa, -, ab, )]
[lnza, -, aa, -, ab]
[lnza, -, aa]
[lnza]
[aa]
[ab]
[lnza]
[-, 0.16624882440418567]
[0.16624882440418567]
[lnza]
[lnza, *, epsilon, +, 0.19999954120254515]
[lnza, *, epsilon]
[lnza]
[epsilon]
[0.19999954120254515]
[lnza]
[lnza, *, epsilon, +, -, 0.2499999997677497]
[lnza, *, epsilon]
[lnza]
[epsilon]
[-, 0.2499999997677497]
[0.2499999997677497]
[lnza]
[lnza, *, epsilon, +, 0.3333333333332802]
[lnza, *, epsilon]
[lnza]
[epsilon]
[0.3333333333332802]
[lnza]
[lnza, *, epsilon, +, -, 0.5]
[lnza, *, epsilon]
[lnza]
[epsilon]
[-, 0.5]
[0.5]
[lnza]
[lnza, *, epsilon, +, 1.0]
[lnza, *, epsilon]
[lnza]
[epsilon]
[1.0]
[lnza]
[lnza, *, epsilon]
[lnza]
[epsilon]
[LN_2_A, *, exp]
[LN_2_A]
[exp]
[0.0]
[a, +, lnm, [, 0, ]]
[a]
[lnm, [, 0, ]]
[lnm]
[0]
[-, (, c, -, a, -, lnm, [, 0, ], )]
[(, c, -, a, -, lnm, [, 0, ], )]
[c, -, a, -, lnm, [, 0, ]]
[c, -, a]
[c]
[a]
[lnm, [, 0, ]]
[lnm]
[0]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[c]
[a, +, lnza]
[a]
[lnza]
[d]
[-, (, c, -, a, -, lnza, )]
[(, c, -, a, -, lnza, )]
[c, -, a, -, lnza]
[c, -, a]
[c]
[a]
[lnza]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[c]
[a, +, LN_2_B, *, exp]
[a]
[LN_2_B, *, exp]
[LN_2_B]
[exp]
[d]
[-, (, c, -, a, -, LN_2_B, *, exp, )]
[(, c, -, a, -, LN_2_B, *, exp, )]
[c, -, a, -, LN_2_B, *, exp]
[c, -, a]
[c]
[a]
[LN_2_B, *, exp]
[LN_2_B]
[exp]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[c]
[a, +, lnm, [, 1, ]]
[a]
[lnm, [, 1, ]]
[lnm]
[1]
[d]
[-, (, c, -, a, -, lnm, [, 1, ], )]
[(, c, -, a, -, lnm, [, 1, ], )]
[c, -, a, -, lnm, [, 1, ]]
[c, -, a]
[c]
[a]
[lnm, [, 1, ]]
[lnm]
[1]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[c]
[a, +, lnzb]
[a]
[lnzb]
[d]
[-, (, c, -, a, -, lnzb, )]
[(, c, -, a, -, lnzb, )]
[c, -, a, -, lnzb]
[c, -, a]
[c]
[a]
[lnzb]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[hiPrec, !=, null]
[hiPrec]
[null]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[a]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[b]
[a, +, b]
[a]
[b]
[x, ==, -, 1]
[x]
[-, 1]
[1]
[Double, ., NEGATIVE_INFINITY]
[Double]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[x, >, 1e-6, ||, x, <, -, 1e-6]
[x, >, 1e-6]
[x]
[1e-6]
[x, <, -, 1e-6]
[x]
[-, 1e-6]
[1e-6]
[1, +, x]
[1]
[x]
[-, (, xpa, -, 1, -, x, )]
[(, xpa, -, 1, -, x, )]
[xpa, -, 1, -, x]
[xpa, -, 1]
[xpa]
[1]
[x]
[new, double, [, 2, ]]
[2]
[log, (, xpa, ,, hiPrec, )]
[xpa]
[hiPrec]
[Double, ., isInfinite, (, lores, )]
[Double]
[lores]
[lores]
[xpb, /, xpa]
[xpb]
[xpa]
[0.5, *, fx1, +, 1]
[0.5, *, fx1]
[0.5]
[fx1]
[1]
[epsilon, *, fx1, +, hiPrec, [, 1, ], +, hiPrec, [, 0, ]]
[epsilon, *, fx1, +, hiPrec, [, 1, ]]
[epsilon, *, fx1]
[epsilon]
[fx1]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[(, x, *, F_1_3, -, F_1_2, ), *, x, +, 1]
[(, x, *, F_1_3, -, F_1_2, ), *, x]
[(, x, *, F_1_3, -, F_1_2, )]
[x, *, F_1_3, -, F_1_2]
[x, *, F_1_3]
[x]
[F_1_3]
[F_1_2]
[x]
[1]
[y, *, x]
[y]
[x]
[new, double, [, 2, ]]
[2]
[log, (, x, ,, hiPrec, )]
[x]
[hiPrec]
[Double, ., isInfinite, (, lores, )]
[Double]
[lores]
[lores]
[hiPrec, [, 0, ], *, HEX_40000000]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[HEX_40000000]
[hiPrec, [, 0, ], +, tmp, -, tmp]
[hiPrec, [, 0, ], +, tmp]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[tmp]
[tmp]
[hiPrec, [, 0, ], -, lna, +, hiPrec, [, 1, ]]
[hiPrec, [, 0, ], -, lna]
[hiPrec, [, 0, ]]
[hiPrec]
[0]
[lna]
[hiPrec, [, 1, ]]
[hiPrec]
[1]
[0.4342944622039795]
[1.9699272335463627E-8]
[rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb, +, rln10a, *, lna]
[rln10b, *, lnb, +, rln10b, *, lna, +, rln10a, *, lnb]
[rln10b, *, lnb, +, rln10b, *, lna]
[rln10b, *, lnb]
[rln10b]
[lnb]
[rln10b, *, lna]
[rln10b]
[lna]
[rln10a, *, lnb]
[rln10a]
[lnb]
[rln10a, *, lna]
[rln10a]
[lna]
[log, (, x, ), /, log, (, base, )]
[log, (, x, )]
[x]
[log, (, base, )]
[base]
[new, double, [, 2, ]]
[2]
[y, ==, 0.0]
[y]
[0.0]
[1.0]
[x, !=, x]
[x]
[x]
[x]
[x, ==, 0]
[x]
[0]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[(, bits, &, 0x8000000000000000L, ), !=, 0]
[(, bits, &, 0x8000000000000000L, )]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[0]
[(, long, ), y]
[y]
[y, <, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1]
[y, <, 0, &&, y, ==, yi]
[y, <, 0]
[y]
[0]
[y, ==, yi]
[y]
[yi]
[(, yi, &, 1, ), ==, 1]
[(, yi, &, 1, )]
[yi, &, 1]
[yi]
[1]
[1]
[Double, ., NEGATIVE_INFINITY]
[Double]
[y, >, 0, &&, y, ==, yi, &&, (, yi, &, 1, ), ==, 1]
[y, >, 0, &&, y, ==, yi]
[y, >, 0]
[y]
[0]
[y, ==, yi]
[y]
[yi]
[(, yi, &, 1, ), ==, 1]
[(, yi, &, 1, )]
[yi, &, 1]
[yi]
[1]
[1]
[-, 0.0]
[0.0]
[y, <, 0]
[y]
[0]
[Double, ., POSITIVE_INFINITY]
[Double]
[y, >, 0]
[y]
[0]
[0.0]
[Double, ., NaN]
[Double]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[y, !=, y]
[y]
[y]
[y]
[y, <, 0.0]
[y]
[0.0]
[0.0]
[Double, ., POSITIVE_INFINITY]
[Double]
[y, ==, Double, ., POSITIVE_INFINITY]
[y]
[Double, ., POSITIVE_INFINITY]
[Double]
[x, *, x, ==, 1.0]
[x, *, x]
[x]
[x]
[1.0]
[Double, ., NaN]
[Double]
[x, *, x, >, 1.0]
[x, *, x]
[x]
[x]
[1.0]
[Double, ., POSITIVE_INFINITY]
[Double]
[0.0]
[x, ==, Double, ., NEGATIVE_INFINITY]
[x]
[Double, ., NEGATIVE_INFINITY]
[Double]
[y, !=, y]
[y]
[y]
[y]
[y, <, 0]
[y]
[0]
[(, long, ), y]
[y]
[y, ==, yi, &&, (, yi, &, 1, ), ==, 1]
[y, ==, yi]
[y]
[yi]
[(, yi, &, 1, ), ==, 1]
[(, yi, &, 1, )]
[yi, &, 1]
[yi]
[1]
[1]
[-, 0.0]
[0.0]
[0.0]
[y, >, 0]
[y]
[0]
[(, long, ), y]
[y]
[y, ==, yi, &&, (, yi, &, 1, ), ==, 1]
[y, ==, yi]
[y]
[yi]
[(, yi, &, 1, ), ==, 1]
[(, yi, &, 1, )]
[yi, &, 1]
[yi]
[1]
[1]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[y, ==, Double, ., NEGATIVE_INFINITY]
[y]
[Double, ., NEGATIVE_INFINITY]
[Double]
[x, *, x, ==, 1.0]
[x, *, x]
[x]
[x]
[1.0]
[Double, ., NaN]
[Double]
[x, *, x, <, 1.0]
[x, *, x]
[x]
[x]
[1.0]
[Double, ., POSITIVE_INFINITY]
[Double]
[0.0]
[x, <, 0]
[x]
[0]
[y, >=, TWO_POWER_53, ||, y, <=, -, TWO_POWER_53]
[y, >=, TWO_POWER_53]
[y]
[TWO_POWER_53]
[y, <=, -, TWO_POWER_53]
[y]
[-, TWO_POWER_53]
[TWO_POWER_53]
[pow, (, -, x, ,, y, )]
[-, x]
[x]
[y]
[y, ==, (, long, ), y]
[y]
[(, long, ), y]
[y]
[(, (, long, ), y, &, 1, ), ==, 0, ?, pow, (, -, x, ,, y, ), :, -, pow, (, -, x, ,, y, )]
[(, (, long, ), y, &, 1, ), ==, 0]
[(, (, long, ), y, &, 1, )]
[(, long, ), y, &, 1]
[(, long, ), y]
[y]
[1]
[0]
[pow, (, -, x, ,, y, )]
[-, x]
[x]
[y]
[-, pow, (, -, x, ,, y, )]
[pow, (, -, x, ,, y, )]
[-, x]
[x]
[y]
[Double, ., NaN]
[Double]
[y, <, 8e298, &&, y, >, -, 8e298]
[y, <, 8e298]
[y]
[8e298]
[y, >, -, 8e298]
[y]
[-, 8e298]
[8e298]
[y, *, HEX_40000000]
[y]
[HEX_40000000]
[ya]
[y, +, tmp1, -, tmp1]
[y, +, tmp1]
[y]
[tmp1]
[tmp1]
[yb]
[y, -, ya]
[y]
[ya]
[y, *, 9.31322574615478515625E-10]
[y]
[9.31322574615478515625E-10]
[tmp1, *, 9.31322574615478515625E-10]
[tmp1]
[9.31322574615478515625E-10]
[ya]
[(, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000, *, HEX_40000000]
[(, tmp1, +, tmp2, -, tmp1, ), *, HEX_40000000]
[(, tmp1, +, tmp2, -, tmp1, )]
[tmp1, +, tmp2, -, tmp1]
[tmp1, +, tmp2]
[tmp1]
[tmp2]
[tmp1]
[HEX_40000000]
[HEX_40000000]
[yb]
[y, -, ya]
[y]
[ya]
[log, (, x, ,, lns, )]
[x]
[lns]
[Double, ., isInfinite, (, lores, )]
[Double]
[lores]
[lores]
[lns, [, 0, ]]
[lns]
[0]
[lns, [, 1, ]]
[lns]
[1]
[lna, *, HEX_40000000]
[lna]
[HEX_40000000]
[lna, +, tmp1, -, tmp1]
[lna, +, tmp1]
[lna]
[tmp1]
[tmp1]
[lnb]
[lna, -, tmp2]
[lna]
[tmp2]
[lna]
[tmp2]
[lna, *, ya]
[lna]
[ya]
[lna, *, yb, +, lnb, *, ya, +, lnb, *, yb]
[lna, *, yb, +, lnb, *, ya]
[lna, *, yb]
[lna]
[yb]
[lnb, *, ya]
[lnb]
[ya]
[lnb, *, yb]
[lnb]
[yb]
[lna]
[aa, +, ab]
[aa]
[ab]
[lnb]
[-, (, lna, -, aa, -, ab, )]
[(, lna, -, aa, -, ab, )]
[lna, -, aa, -, ab]
[lna, -, aa]
[lna]
[aa]
[ab]
[1.0, /, 120.0]
[1.0]
[120.0]
[z]
[z, *, lnb, +, (, 1.0, /, 24.0, )]
[z, *, lnb]
[z]
[lnb]
[(, 1.0, /, 24.0, )]
[1.0, /, 24.0]
[1.0]
[24.0]
[z]
[z, *, lnb, +, (, 1.0, /, 6.0, )]
[z, *, lnb]
[z]
[lnb]
[(, 1.0, /, 6.0, )]
[1.0, /, 6.0]
[1.0]
[6.0]
[z]
[z, *, lnb, +, 0.5]
[z, *, lnb]
[z]
[lnb]
[0.5]
[z]
[z, *, lnb, +, 1.0]
[z, *, lnb]
[z]
[lnb]
[1.0]
[z]
[z, *, lnb]
[z]
[lnb]
[exp, (, lna, ,, z, ,, null, )]
[lna]
[z]
[null]
[result]
[e, ==, 0]
[e]
[0]
[1.0]
[e, <, 0]
[e]
[0]
[e]
[-, e]
[e]
[d]
[1.0, /, d]
[1.0]
[d]
[0x8000001]
[splitFactor, *, d]
[splitFactor]
[d]
[cd, -, (, cd, -, d, )]
[cd]
[(, cd, -, d, )]
[cd, -, d]
[cd]
[d]
[d, -, d1High]
[d]
[d1High]
[1]
[0]
[d]
[d1High]
[d1Low]
[e, !=, 0]
[e]
[0]
[(, e, &, 0x1, ), !=, 0]
[(, e, &, 0x1, )]
[e, &, 0x1]
[e]
[0x1]
[0]
[resultHigh, *, d2p]
[resultHigh]
[d2p]
[splitFactor, *, resultHigh]
[splitFactor]
[resultHigh]
[cRH, -, (, cRH, -, resultHigh, )]
[cRH]
[(, cRH, -, resultHigh, )]
[cRH, -, resultHigh]
[cRH]
[resultHigh]
[resultHigh, -, rHH]
[resultHigh]
[rHH]
[rHL, *, d2pLow, -, (, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, )]
[rHL, *, d2pLow]
[rHL]
[d2pLow]
[(, (, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow, )]
[(, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, ), -, rHH, *, d2pLow]
[(, (, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh, )]
[(, tmpHigh, -, rHH, *, d2pHigh, ), -, rHL, *, d2pHigh]
[(, tmpHigh, -, rHH, *, d2pHigh, )]
[tmpHigh, -, rHH, *, d2pHigh]
[tmpHigh]
[rHH, *, d2pHigh]
[rHH]
[d2pHigh]
[rHL, *, d2pHigh]
[rHL]
[d2pHigh]
[rHH, *, d2pLow]
[rHH]
[d2pLow]
[resultHigh]
[tmpHigh]
[resultLow]
[resultLow, *, d2p, +, tmpLow]
[resultLow, *, d2p]
[resultLow]
[d2p]
[tmpLow]
[d2pHigh, *, d2p]
[d2pHigh]
[d2p]
[splitFactor, *, d2pHigh]
[splitFactor]
[d2pHigh]
[cD2pH, -, (, cD2pH, -, d2pHigh, )]
[cD2pH]
[(, cD2pH, -, d2pHigh, )]
[cD2pH, -, d2pHigh]
[cD2pH]
[d2pHigh]
[d2pHigh, -, d2pHH]
[d2pHigh]
[d2pHH]
[d2pHL, *, d2pLow, -, (, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, )]
[d2pHL, *, d2pLow]
[d2pHL]
[d2pLow]
[(, (, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow, )]
[(, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, ), -, d2pHH, *, d2pLow]
[(, (, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh, )]
[(, tmpHigh, -, d2pHH, *, d2pHigh, ), -, d2pHL, *, d2pHigh]
[(, tmpHigh, -, d2pHH, *, d2pHigh, )]
[tmpHigh, -, d2pHH, *, d2pHigh]
[tmpHigh]
[d2pHH, *, d2pHigh]
[d2pHH]
[d2pHigh]
[d2pHL, *, d2pHigh]
[d2pHL]
[d2pHigh]
[d2pHH, *, d2pLow]
[d2pHH]
[d2pLow]
[splitFactor, *, tmpHigh]
[splitFactor]
[tmpHigh]
[d2pHigh]
[cTmpH, -, (, cTmpH, -, tmpHigh, )]
[cTmpH]
[(, cTmpH, -, tmpHigh, )]
[cTmpH, -, tmpHigh]
[cTmpH]
[tmpHigh]
[d2pLow]
[d2pLow, *, d2p, +, tmpLow, +, (, tmpHigh, -, d2pHigh, )]
[d2pLow, *, d2p, +, tmpLow]
[d2pLow, *, d2p]
[d2pLow]
[d2p]
[tmpLow]
[(, tmpHigh, -, d2pHigh, )]
[tmpHigh, -, d2pHigh]
[tmpHigh]
[d2pHigh]
[d2p]
[d2pHigh, +, d2pLow]
[d2pHigh]
[d2pLow]
[e]
[e, >, >, 1]
[e]
[1]
[resultHigh, +, resultLow]
[resultHigh]
[resultLow]
[x, *, x]
[x]
[x]
[2.7553817452272217E-6]
[p]
[p, *, x2, +, -, 1.9841269659586505E-4]
[p, *, x2]
[p]
[x2]
[-, 1.9841269659586505E-4]
[1.9841269659586505E-4]
[p]
[p, *, x2, +, 0.008333333333329196]
[p, *, x2]
[p]
[x2]
[0.008333333333329196]
[p]
[p, *, x2, +, -, 0.16666666666666666]
[p, *, x2]
[p]
[x2]
[-, 0.16666666666666666]
[0.16666666666666666]
[p]
[p, *, x2, *, x]
[p, *, x2]
[p]
[x2]
[x]
[p]
[x, *, x]
[x]
[x]
[2.479773539153719E-5]
[p]
[p, *, x2, +, -, 0.0013888888689039883]
[p, *, x2]
[p]
[x2]
[-, 0.0013888888689039883]
[0.0013888888689039883]
[p]
[p, *, x2, +, 0.041666666666621166]
[p, *, x2]
[p]
[x2]
[0.041666666666621166]
[p]
[p, *, x2, +, -, 0.49999999999999994]
[p, *, x2]
[p]
[x2]
[-, 0.49999999999999994]
[0.49999999999999994]
[p]
[x2]
[p]
[(, int, ), (, (, xa, *, 8.0, ), +, 0.5, )]
[(, (, xa, *, 8.0, ), +, 0.5, )]
[(, xa, *, 8.0, ), +, 0.5]
[(, xa, *, 8.0, )]
[xa, *, 8.0]
[xa]
[8.0]
[0.5]
[xa, -, EIGHTHS, [, idx, ]]
[xa]
[EIGHTHS, [, idx, ]]
[EIGHTHS]
[idx]
[SINE_TABLE_A, [, idx, ]]
[SINE_TABLE_A]
[idx]
[SINE_TABLE_B, [, idx, ]]
[SINE_TABLE_B]
[idx]
[COSINE_TABLE_A, [, idx, ]]
[COSINE_TABLE_A]
[idx]
[COSINE_TABLE_B, [, idx, ]]
[COSINE_TABLE_B]
[idx]
[epsilon]
[polySine, (, epsilon, )]
[epsilon]
[1.0]
[polyCosine, (, epsilon, )]
[epsilon]
[sinEpsA, *, HEX_40000000]
[sinEpsA]
[HEX_40000000]
[(, sinEpsA, +, temp, ), -, temp]
[(, sinEpsA, +, temp, )]
[sinEpsA, +, temp]
[sinEpsA]
[temp]
[temp]
[sinEpsB]
[sinEpsA, -, temp2]
[sinEpsA]
[temp2]
[sinEpsA]
[temp2]
[0]
[0]
[sintA]
[a, +, t]
[a]
[t]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[t]
[costA, *, sinEpsA]
[costA]
[sinEpsA]
[c]
[a, +, t]
[a]
[t]
[d]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[b]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB]
[b, +, sintA, *, cosEpsB]
[b]
[sintA, *, cosEpsB]
[sintA]
[cosEpsB]
[costA, *, sinEpsB]
[costA]
[sinEpsB]
[b]
[b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB]
[b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB]
[b, +, sintB, +, costB, *, sinEpsA]
[b, +, sintB]
[b]
[sintB]
[costB, *, sinEpsA]
[costB]
[sinEpsA]
[sintB, *, cosEpsB]
[sintB]
[cosEpsB]
[costB, *, sinEpsB]
[costB]
[sinEpsB]
[xb, !=, 0.0]
[xb]
[0.0]
[t]
[(, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), ), *, xb]
[(, (, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, ), )]
[(, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, ), -, (, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, )]
[(, costA, +, costB, ), *, (, cosEpsA, +, cosEpsB, )]
[(, costA, +, costB, )]
[costA, +, costB]
[costA]
[costB]
[(, cosEpsA, +, cosEpsB, )]
[cosEpsA, +, cosEpsB]
[cosEpsA]
[cosEpsB]
[(, sintA, +, sintB, ), *, (, sinEpsA, +, sinEpsB, )]
[(, sintA, +, sintB, )]
[sintA, +, sintB]
[sintA]
[sintB]
[(, sinEpsA, +, sinEpsB, )]
[sinEpsA, +, sinEpsB]
[sinEpsA]
[sinEpsB]
[xb]
[c]
[a, +, t]
[a]
[t]
[d]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[result]
[a, +, b]
[a]
[b]
[result]
[1.5707963267948966]
[6.123233995736766E-17]
[pi2a, -, xa]
[pi2a]
[xa]
[-, (, a, -, pi2a, +, xa, )]
[(, a, -, pi2a, +, xa, )]
[a, -, pi2a, +, xa]
[a, -, pi2a]
[a]
[pi2a]
[xa]
[b]
[pi2b, -, xb]
[pi2b]
[xb]
[sinQ, (, a, ,, b, )]
[a]
[b]
[(, int, ), (, (, xa, *, 8.0, ), +, 0.5, )]
[(, (, xa, *, 8.0, ), +, 0.5, )]
[(, xa, *, 8.0, ), +, 0.5]
[(, xa, *, 8.0, )]
[xa, *, 8.0]
[xa]
[8.0]
[0.5]
[xa, -, EIGHTHS, [, idx, ]]
[xa]
[EIGHTHS, [, idx, ]]
[EIGHTHS]
[idx]
[SINE_TABLE_A, [, idx, ]]
[SINE_TABLE_A]
[idx]
[SINE_TABLE_B, [, idx, ]]
[SINE_TABLE_B]
[idx]
[COSINE_TABLE_A, [, idx, ]]
[COSINE_TABLE_A]
[idx]
[COSINE_TABLE_B, [, idx, ]]
[COSINE_TABLE_B]
[idx]
[epsilon]
[polySine, (, epsilon, )]
[epsilon]
[1.0]
[polyCosine, (, epsilon, )]
[epsilon]
[sinEpsA, *, HEX_40000000]
[sinEpsA]
[HEX_40000000]
[(, sinEpsA, +, temp, ), -, temp]
[(, sinEpsA, +, temp, )]
[sinEpsA, +, temp]
[sinEpsA]
[temp]
[temp]
[sinEpsB]
[sinEpsA, -, temp2]
[sinEpsA]
[temp2]
[sinEpsA]
[temp2]
[0]
[0]
[sintA]
[a, +, t]
[a]
[t]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[t]
[costA, *, sinEpsA]
[costA]
[sinEpsA]
[c]
[a, +, t]
[a]
[t]
[d]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[b]
[b, +, sintA, *, cosEpsB, +, costA, *, sinEpsB]
[b, +, sintA, *, cosEpsB]
[b]
[sintA, *, cosEpsB]
[sintA]
[cosEpsB]
[costA, *, sinEpsB]
[costA]
[sinEpsB]
[b]
[b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB, +, costB, *, sinEpsB]
[b, +, sintB, +, costB, *, sinEpsA, +, sintB, *, cosEpsB]
[b, +, sintB, +, costB, *, sinEpsA]
[b, +, sintB]
[b]
[sintB]
[costB, *, sinEpsA]
[costB]
[sinEpsA]
[sintB, *, cosEpsB]
[sintB]
[cosEpsB]
[costB, *, sinEpsB]
[costB]
[sinEpsB]
[a, +, b]
[a]
[b]
[-, (, sina, -, a, -, b, )]
[(, sina, -, a, -, b, )]
[sina, -, a, -, b]
[sina, -, a]
[sina]
[a]
[b]
[a]
[b]
[c]
[d]
[0.0]
[t]
[costA, *, cosEpsA]
[costA]
[cosEpsA]
[c]
[a, +, t]
[a]
[t]
[d]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[t]
[-, sintA, *, sinEpsA]
[-, sintA]
[sintA]
[sinEpsA]
[c]
[a, +, t]
[a]
[t]
[d]
[-, (, c, -, a, -, t, )]
[(, c, -, a, -, t, )]
[c, -, a, -, t]
[c, -, a]
[c]
[a]
[t]
[a]
[c]
[b]
[b, +, d]
[b]
[d]
[b]
[b, +, costB, *, cosEpsA, +, costA, *, cosEpsB, +, costB, *, cosEpsB]
[b, +, costB, *, cosEpsA, +, costA, *, cosEpsB]
[b, +, costB, *, cosEpsA]
[b]
[costB, *, cosEpsA]
[costB]
[cosEpsA]
[costA, *, cosEpsB]
[costA]
[cosEpsB]
[costB, *, cosEpsB]
[costB]
[cosEpsB]
[b]
[b, -, (, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, )]
[b]
[(, sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB, )]
[sintB, *, sinEpsA, +, sintA, *, sinEpsB, +, sintB, *, sinEpsB]
[sintB, *, sinEpsA, +, sintA, *, sinEpsB]
[sintB, *, sinEpsA]
[sintB]
[sinEpsA]
[sintA, *, sinEpsB]
[sintA]
[sinEpsB]
[sintB, *, sinEpsB]
[sintB]
[sinEpsB]
[a, +, b]
[a]
[b]
[-, (, cosa, -, a, -, b, )]
[(, cosa, -, a, -, b, )]
[cosa, -, a, -, b]
[cosa, -, a]
[cosa]
[a]
[b]
[cotanFlag]
[tmp]
[cosa]
[cosa]
[sina]
[sina]
[tmp]
[tmp]
[cosb]
[cosb]
[sinb]
[sinb]
[tmp]
[sina, /, cosa]
[sina]
[cosa]
[temp]
[est, *, HEX_40000000]
[est]
[HEX_40000000]
[(, est, +, temp, ), -, temp]
[(, est, +, temp, )]
[est, +, temp]
[est]
[temp]
[temp]
[est, -, esta]
[est]
[esta]
[temp]
[cosa, *, HEX_40000000]
[cosa]
[HEX_40000000]
[(, cosa, +, temp, ), -, temp]
[(, cosa, +, temp, )]
[cosa, +, temp]
[cosa]
[temp]
[temp]
[cosa, -, cosaa]
[cosa]
[cosaa]
[(, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, ), /, cosa]
[(, sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab, )]
[sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa, -, estb, *, cosab]
[sina, -, esta, *, cosaa, -, esta, *, cosab, -, estb, *, cosaa]
[sina, -, esta, *, cosaa, -, esta, *, cosab]
[sina, -, esta, *, cosaa]
[sina]
[esta, *, cosaa]
[esta]
[cosaa]
[esta, *, cosab]
[esta]
[cosab]
[estb, *, cosaa]
[estb]
[cosaa]
[estb, *, cosab]
[estb]
[cosab]
[cosa]
[err]
[sinb, /, cosa]
[sinb]
[cosa]
[err]
[-, sina, *, cosb, /, cosa, /, cosa]
[-, sina, *, cosb, /, cosa]
[-, sina, *, cosb]
[-, sina]
[sina]
[cosb]
[cosa]
[cosa]
[xb, !=, 0.0]
[xb]
[0.0]
[xb, +, est, *, est, *, xb]
[xb]
[est, *, est, *, xb]
[est, *, est]
[est]
[est]
[xb]
[cotanFlag]
[xbadj]
[-, xbadj]
[xbadj]
[err]
[xbadj]
[est, +, err]
[est]
[err]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, inbits, >, >, 52, ), &, 0x7ff]
[(, inbits, >, >, 52, )]
[inbits, >, >, 52]
[inbits]
[52]
[0x7ff]
[1023]
[inbits]
[0x000fffffffffffffL]
[inbits]
[0x0010000000000000L]
[exponent, ++]
[exponent]
[inbits]
[11]
[exponent, >, >, 6]
[exponent]
[6]
[exponent, -, (, idx, <<, 6, )]
[exponent]
[(, idx, <<, 6, )]
[idx, <<, 6]
[idx]
[6]
[shift, !=, 0]
[shift]
[0]
[shpi0]
[(, idx, ==, 0, ), ?, 0, :, (, RECIP_2PI, [, idx, -, 1, ], <<, shift, )]
[(, idx, ==, 0, )]
[idx, ==, 0]
[idx]
[0]
[0]
[(, RECIP_2PI, [, idx, -, 1, ], <<, shift, )]
[RECIP_2PI, [, idx, -, 1, ], <<, shift]
[RECIP_2PI, [, idx, -, 1, ]]
[RECIP_2PI]
[idx, -, 1]
[idx]
[1]
[shift]
[shpi0]
[RECIP_2PI, [, idx, ], >, >, >, (, 64, -, shift, )]
[RECIP_2PI, [, idx, ]]
[RECIP_2PI]
[idx]
[(, 64, -, shift, )]
[64, -, shift]
[64]
[shift]
[shpiA]
[(, RECIP_2PI, [, idx, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), )]
[(, RECIP_2PI, [, idx, ], <<, shift, )]
[RECIP_2PI, [, idx, ], <<, shift]
[RECIP_2PI, [, idx, ]]
[RECIP_2PI]
[idx]
[shift]
[(, RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, ), )]
[RECIP_2PI, [, idx, +, 1, ], >, >, >, (, 64, -, shift, )]
[RECIP_2PI, [, idx, +, 1, ]]
[RECIP_2PI]
[idx, +, 1]
[idx]
[1]
[(, 64, -, shift, )]
[64, -, shift]
[64]
[shift]
[shpiB]
[(, RECIP_2PI, [, idx, +, 1, ], <<, shift, ), |, (, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), )]
[(, RECIP_2PI, [, idx, +, 1, ], <<, shift, )]
[RECIP_2PI, [, idx, +, 1, ], <<, shift]
[RECIP_2PI, [, idx, +, 1, ]]
[RECIP_2PI]
[idx, +, 1]
[idx]
[1]
[shift]
[(, RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, ), )]
[RECIP_2PI, [, idx, +, 2, ], >, >, >, (, 64, -, shift, )]
[RECIP_2PI, [, idx, +, 2, ]]
[RECIP_2PI]
[idx, +, 2]
[idx]
[2]
[(, 64, -, shift, )]
[64, -, shift]
[64]
[shift]
[shpi0]
[(, idx, ==, 0, ), ?, 0, :, RECIP_2PI, [, idx, -, 1, ]]
[(, idx, ==, 0, )]
[idx, ==, 0]
[idx]
[0]
[0]
[RECIP_2PI, [, idx, -, 1, ]]
[RECIP_2PI]
[idx, -, 1]
[idx]
[1]
[shpiA]
[RECIP_2PI, [, idx, ]]
[RECIP_2PI]
[idx]
[shpiB]
[RECIP_2PI, [, idx, +, 1, ]]
[RECIP_2PI]
[idx, +, 1]
[idx]
[1]
[inbits, >, >, >, 32]
[inbits]
[32]
[inbits, &, 0xffffffffL]
[inbits]
[0xffffffffL]
[shpiA, >, >, >, 32]
[shpiA]
[32]
[shpiA, &, 0xffffffffL]
[shpiA]
[0xffffffffL]
[a, *, c]
[a]
[c]
[b, *, d]
[b]
[d]
[b, *, c]
[b]
[c]
[a, *, d]
[a]
[d]
[bd, +, (, ad, <<, 32, )]
[bd]
[(, ad, <<, 32, )]
[ad, <<, 32]
[ad]
[32]
[ac, +, (, ad, >, >, >, 32, )]
[ac]
[(, ad, >, >, >, 32, )]
[ad, >, >, >, 32]
[ad]
[32]
[(, bd, &, 0x8000000000000000L, ), !=, 0]
[(, bd, &, 0x8000000000000000L, )]
[bd, &, 0x8000000000000000L]
[bd]
[0x8000000000000000L]
[0]
[(, ad, &, 0x80000000L, ), !=, 0]
[(, ad, &, 0x80000000L, )]
[ad, &, 0x80000000L]
[ad]
[0x80000000L]
[0]
[(, prodB, &, 0x8000000000000000L, ), !=, 0]
[(, prodB, &, 0x8000000000000000L, )]
[prodB, &, 0x8000000000000000L]
[prodB]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prodA, ++]
[prodA]
[bita]
[(, prodB, &, 0x8000000000000000L, ), !=, 0]
[(, prodB, &, 0x8000000000000000L, )]
[prodB, &, 0x8000000000000000L]
[prodB]
[0x8000000000000000L]
[0]
[bitb]
[(, bc, &, 0x80000000L, ), !=, 0]
[(, bc, &, 0x80000000L, )]
[bc, &, 0x80000000L]
[bc]
[0x80000000L]
[0]
[prodB]
[prodB, +, (, bc, <<, 32, )]
[prodB]
[(, bc, <<, 32, )]
[bc, <<, 32]
[bc]
[32]
[prodA]
[prodA, +, (, bc, >, >, >, 32, )]
[prodA]
[(, bc, >, >, >, 32, )]
[bc, >, >, >, 32]
[bc]
[32]
[bitsum]
[(, prodB, &, 0x8000000000000000L, ), !=, 0]
[(, prodB, &, 0x8000000000000000L, )]
[prodB, &, 0x8000000000000000L]
[prodB]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prodA, ++]
[prodA]
[c]
[shpiB, >, >, >, 32]
[shpiB]
[32]
[d]
[shpiB, &, 0xffffffffL]
[shpiB]
[0xffffffffL]
[ac]
[a, *, c]
[a]
[c]
[bc]
[b, *, c]
[b]
[c]
[ad]
[a, *, d]
[a]
[d]
[ac]
[ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[ac]
[(, (, bc, +, ad, ), >, >, >, 32, )]
[(, bc, +, ad, ), >, >, >, 32]
[(, bc, +, ad, )]
[bc, +, ad]
[bc]
[ad]
[32]
[bita]
[(, prodB, &, 0x8000000000000000L, ), !=, 0]
[(, prodB, &, 0x8000000000000000L, )]
[prodB, &, 0x8000000000000000L]
[prodB]
[0x8000000000000000L]
[0]
[bitb]
[(, ac, &, 0x8000000000000000L, ), !=, 0]
[(, ac, &, 0x8000000000000000L, )]
[ac, &, 0x8000000000000000L]
[ac]
[0x8000000000000000L]
[0]
[prodB]
[ac]
[bitsum]
[(, prodB, &, 0x8000000000000000L, ), !=, 0]
[(, prodB, &, 0x8000000000000000L, )]
[prodB, &, 0x8000000000000000L]
[prodB]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prodA, ++]
[prodA]
[c]
[shpi0, >, >, >, 32]
[shpi0]
[32]
[d]
[shpi0, &, 0xffffffffL]
[shpi0]
[0xffffffffL]
[bd]
[b, *, d]
[b]
[d]
[bc]
[b, *, c]
[b]
[c]
[ad]
[a, *, d]
[a]
[d]
[prodA]
[bd, +, (, (, bc, +, ad, ), <<, 32, )]
[bd]
[(, (, bc, +, ad, ), <<, 32, )]
[(, bc, +, ad, ), <<, 32]
[(, bc, +, ad, )]
[bc, +, ad]
[bc]
[ad]
[32]
[(, int, ), (, prodA, >, >, >, 62, )]
[(, prodA, >, >, >, 62, )]
[prodA, >, >, >, 62]
[prodA]
[62]
[prodA]
[2]
[prodA]
[prodB, >, >, >, 62]
[prodB]
[62]
[prodB]
[2]
[a]
[prodA, >, >, >, 32]
[prodA]
[32]
[b]
[prodA, &, 0xffffffffL]
[prodA]
[0xffffffffL]
[c]
[PI_O_4_BITS, [, 0, ], >, >, >, 32]
[PI_O_4_BITS, [, 0, ]]
[PI_O_4_BITS]
[0]
[32]
[d]
[PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[PI_O_4_BITS, [, 0, ]]
[PI_O_4_BITS]
[0]
[0xffffffffL]
[ac]
[a, *, c]
[a]
[c]
[bd]
[b, *, d]
[b]
[d]
[bc]
[b, *, c]
[b]
[c]
[ad]
[a, *, d]
[a]
[d]
[bd, +, (, ad, <<, 32, )]
[bd]
[(, ad, <<, 32, )]
[ad, <<, 32]
[ad]
[32]
[ac, +, (, ad, >, >, >, 32, )]
[ac]
[(, ad, >, >, >, 32, )]
[ad, >, >, >, 32]
[ad]
[32]
[bita]
[(, bd, &, 0x8000000000000000L, ), !=, 0]
[(, bd, &, 0x8000000000000000L, )]
[bd, &, 0x8000000000000000L]
[bd]
[0x8000000000000000L]
[0]
[bitb]
[(, ad, &, 0x80000000L, ), !=, 0]
[(, ad, &, 0x80000000L, )]
[ad, &, 0x80000000L]
[ad]
[0x80000000L]
[0]
[bitsum]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prod2A, ++]
[prod2A]
[bita]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[bitb]
[(, bc, &, 0x80000000L, ), !=, 0]
[(, bc, &, 0x80000000L, )]
[bc, &, 0x80000000L]
[bc]
[0x80000000L]
[0]
[prod2B]
[prod2B, +, (, bc, <<, 32, )]
[prod2B]
[(, bc, <<, 32, )]
[bc, <<, 32]
[bc]
[32]
[prod2A]
[prod2A, +, (, bc, >, >, >, 32, )]
[prod2A]
[(, bc, >, >, >, 32, )]
[bc, >, >, >, 32]
[bc]
[32]
[bitsum]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prod2A, ++]
[prod2A]
[c]
[PI_O_4_BITS, [, 1, ], >, >, >, 32]
[PI_O_4_BITS, [, 1, ]]
[PI_O_4_BITS]
[1]
[32]
[d]
[PI_O_4_BITS, [, 1, ], &, 0xffffffffL]
[PI_O_4_BITS, [, 1, ]]
[PI_O_4_BITS]
[1]
[0xffffffffL]
[ac]
[a, *, c]
[a]
[c]
[bc]
[b, *, c]
[b]
[c]
[ad]
[a, *, d]
[a]
[d]
[ac]
[ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[ac]
[(, (, bc, +, ad, ), >, >, >, 32, )]
[(, bc, +, ad, ), >, >, >, 32]
[(, bc, +, ad, )]
[bc, +, ad]
[bc]
[ad]
[32]
[bita]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[bitb]
[(, ac, &, 0x8000000000000000L, ), !=, 0]
[(, ac, &, 0x8000000000000000L, )]
[ac, &, 0x8000000000000000L]
[ac]
[0x8000000000000000L]
[0]
[prod2B]
[ac]
[bitsum]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prod2A, ++]
[prod2A]
[a]
[prodB, >, >, >, 32]
[prodB]
[32]
[b]
[prodB, &, 0xffffffffL]
[prodB]
[0xffffffffL]
[c]
[PI_O_4_BITS, [, 0, ], >, >, >, 32]
[PI_O_4_BITS, [, 0, ]]
[PI_O_4_BITS]
[0]
[32]
[d]
[PI_O_4_BITS, [, 0, ], &, 0xffffffffL]
[PI_O_4_BITS, [, 0, ]]
[PI_O_4_BITS]
[0]
[0xffffffffL]
[ac]
[a, *, c]
[a]
[c]
[bc]
[b, *, c]
[b]
[c]
[ad]
[a, *, d]
[a]
[d]
[ac]
[ac, +, (, (, bc, +, ad, ), >, >, >, 32, )]
[ac]
[(, (, bc, +, ad, ), >, >, >, 32, )]
[(, bc, +, ad, ), >, >, >, 32]
[(, bc, +, ad, )]
[bc, +, ad]
[bc]
[ad]
[32]
[bita]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[bitb]
[(, ac, &, 0x8000000000000000L, ), !=, 0]
[(, ac, &, 0x8000000000000000L, )]
[ac, &, 0x8000000000000000L]
[ac]
[0x8000000000000000L]
[0]
[prod2B]
[ac]
[bitsum]
[(, prod2B, &, 0x8000000000000000L, ), !=, 0]
[(, prod2B, &, 0x8000000000000000L, )]
[prod2B, &, 0x8000000000000000L]
[prod2B]
[0x8000000000000000L]
[0]
[(, bita, &&, bitb, ), ||, (, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, &&, bitb, )]
[bita, &&, bitb]
[bita]
[bitb]
[(, (, bita, ||, bitb, ), &&, !, bitsum, )]
[(, bita, ||, bitb, ), &&, !, bitsum]
[(, bita, ||, bitb, )]
[bita, ||, bitb]
[bita]
[bitb]
[!, bitsum]
[bitsum]
[prod2A, ++]
[prod2A]
[(, prod2A, >, >, >, 12, ), /, TWO_POWER_52]
[(, prod2A, >, >, >, 12, )]
[prod2A, >, >, >, 12]
[prod2A]
[12]
[TWO_POWER_52]
[(, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52, /, TWO_POWER_52]
[(, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), ), /, TWO_POWER_52]
[(, (, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, ), )]
[(, (, prod2A, &, 0xfffL, ), <<, 40, ), +, (, prod2B, >, >, >, 24, )]
[(, (, prod2A, &, 0xfffL, ), <<, 40, )]
[(, prod2A, &, 0xfffL, ), <<, 40]
[(, prod2A, &, 0xfffL, )]
[prod2A, &, 0xfffL]
[prod2A]
[0xfffL]
[40]
[(, prod2B, >, >, >, 24, )]
[prod2B, >, >, >, 24]
[prod2B]
[24]
[TWO_POWER_52]
[TWO_POWER_52]
[tmpA, +, tmpB]
[tmpA]
[tmpB]
[-, (, sumA, -, tmpA, -, tmpB, )]
[(, sumA, -, tmpA, -, tmpB, )]
[sumA, -, tmpA, -, tmpB]
[sumA, -, tmpA]
[sumA]
[tmpA]
[tmpB]
[result, [, 0, ]]
[result]
[0]
[intPart]
[result, [, 1, ]]
[result]
[1]
[sumA, *, 2.0]
[sumA]
[2.0]
[result, [, 2, ]]
[result]
[2]
[sumB, *, 2.0]
[sumB]
[2.0]
[false]
[0]
[0.0]
[xa]
[x]
[x, <, 0]
[x]
[0]
[negative]
[true]
[xa]
[-, xa]
[xa]
[xa, ==, 0.0]
[xa]
[0.0]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[bits, <, 0]
[bits]
[0]
[-, 0.0]
[0.0]
[0.0]
[xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY]
[xa, !=, xa]
[xa]
[xa]
[xa, ==, Double, ., POSITIVE_INFINITY]
[xa]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NaN]
[Double]
[xa, >, 3294198.0]
[xa]
[3294198.0]
[new, double, [, 3, ]]
[3]
[reducePayneHanek, (, xa, ,, reduceResults, )]
[xa]
[reduceResults]
[quadrant]
[(, (, int, ), reduceResults, [, 0, ], ), &, 3]
[(, (, int, ), reduceResults, [, 0, ], )]
[(, int, ), reduceResults, [, 0, ]]
[reduceResults, [, 0, ]]
[reduceResults]
[0]
[3]
[xa]
[reduceResults, [, 1, ]]
[reduceResults]
[1]
[xb]
[reduceResults, [, 2, ]]
[reduceResults]
[2]
[xa, >, 1.5707963267948966]
[xa]
[1.5707963267948966]
[new, CodyWaite, (, xa, )]
[xa]
[quadrant]
[cw, ., getK, (, ), &, 3]
[cw, ., getK, (, )]
[cw]
[3]
[xa]
[cw, ., getRemA, (, )]
[cw]
[xb]
[cw, ., getRemB, (, )]
[cw]
[negative]
[quadrant]
[2]
[quadrant]
[0]
[sinQ, (, xa, ,, xb, )]
[xa]
[xb]
[1]
[cosQ, (, xa, ,, xb, )]
[xa]
[xb]
[2]
[-, sinQ, (, xa, ,, xb, )]
[sinQ, (, xa, ,, xb, )]
[xa]
[xb]
[3]
[-, cosQ, (, xa, ,, xb, )]
[cosQ, (, xa, ,, xb, )]
[xa]
[xb]
[Double, ., NaN]
[Double]
[0]
[x]
[x, <, 0]
[x]
[0]
[xa]
[-, xa]
[xa]
[xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY]
[xa, !=, xa]
[xa]
[xa]
[xa, ==, Double, ., POSITIVE_INFINITY]
[xa]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NaN]
[Double]
[0]
[xa, >, 3294198.0]
[xa]
[3294198.0]
[new, double, [, 3, ]]
[3]
[reducePayneHanek, (, xa, ,, reduceResults, )]
[xa]
[reduceResults]
[quadrant]
[(, (, int, ), reduceResults, [, 0, ], ), &, 3]
[(, (, int, ), reduceResults, [, 0, ], )]
[(, int, ), reduceResults, [, 0, ]]
[reduceResults, [, 0, ]]
[reduceResults]
[0]
[3]
[xa]
[reduceResults, [, 1, ]]
[reduceResults]
[1]
[xb]
[reduceResults, [, 2, ]]
[reduceResults]
[2]
[xa, >, 1.5707963267948966]
[xa]
[1.5707963267948966]
[new, CodyWaite, (, xa, )]
[xa]
[quadrant]
[cw, ., getK, (, ), &, 3]
[cw, ., getK, (, )]
[cw]
[3]
[xa]
[cw, ., getRemA, (, )]
[cw]
[xb]
[cw, ., getRemB, (, )]
[cw]
[quadrant]
[0]
[cosQ, (, xa, ,, xb, )]
[xa]
[xb]
[1]
[-, sinQ, (, xa, ,, xb, )]
[sinQ, (, xa, ,, xb, )]
[xa]
[xb]
[2]
[-, cosQ, (, xa, ,, xb, )]
[cosQ, (, xa, ,, xb, )]
[xa]
[xb]
[3]
[sinQ, (, xa, ,, xb, )]
[xa]
[xb]
[Double, ., NaN]
[Double]
[false]
[0]
[x]
[x, <, 0]
[x]
[0]
[negative]
[true]
[xa]
[-, xa]
[xa]
[xa, ==, 0.0]
[xa]
[0.0]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[bits, <, 0]
[bits]
[0]
[-, 0.0]
[0.0]
[0.0]
[xa, !=, xa, ||, xa, ==, Double, ., POSITIVE_INFINITY]
[xa, !=, xa]
[xa]
[xa]
[xa, ==, Double, ., POSITIVE_INFINITY]
[xa]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NaN]
[Double]
[0]
[xa, >, 3294198.0]
[xa]
[3294198.0]
[new, double, [, 3, ]]
[3]
[reducePayneHanek, (, xa, ,, reduceResults, )]
[xa]
[reduceResults]
[quadrant]
[(, (, int, ), reduceResults, [, 0, ], ), &, 3]
[(, (, int, ), reduceResults, [, 0, ], )]
[(, int, ), reduceResults, [, 0, ]]
[reduceResults, [, 0, ]]
[reduceResults]
[0]
[3]
[xa]
[reduceResults, [, 1, ]]
[reduceResults]
[1]
[xb]
[reduceResults, [, 2, ]]
[reduceResults]
[2]
[xa, >, 1.5707963267948966]
[xa]
[1.5707963267948966]
[new, CodyWaite, (, xa, )]
[xa]
[quadrant]
[cw, ., getK, (, ), &, 3]
[cw, ., getK, (, )]
[cw]
[3]
[xa]
[cw, ., getRemA, (, )]
[cw]
[xb]
[cw, ., getRemB, (, )]
[cw]
[xa, >, 1.5]
[xa]
[1.5]
[1.5707963267948966]
[6.123233995736766E-17]
[pi2a, -, xa]
[pi2a]
[xa]
[-, (, a, -, pi2a, +, xa, )]
[(, a, -, pi2a, +, xa, )]
[a, -, pi2a, +, xa]
[a, -, pi2a]
[a]
[pi2a]
[xa]
[b]
[pi2b, -, xb]
[pi2b]
[xb]
[xa]
[a, +, b]
[a]
[b]
[xb]
[-, (, xa, -, a, -, b, )]
[(, xa, -, a, -, b, )]
[xa, -, a, -, b]
[xa, -, a]
[xa]
[a]
[b]
[quadrant]
[1]
[negative]
[true]
[(, quadrant, &, 1, ), ==, 0]
[(, quadrant, &, 1, )]
[quadrant, &, 1]
[quadrant]
[1]
[0]
[result]
[tanQ, (, xa, ,, xb, ,, false, )]
[xa]
[xb]
[false]
[result]
[-, tanQ, (, xa, ,, xb, ,, true, )]
[tanQ, (, xa, ,, xb, ,, true, )]
[xa]
[xb]
[true]
[negative]
[result]
[-, result]
[result]
[result]
[atan, (, x, ,, 0.0, ,, false, )]
[x]
[0.0]
[false]
[false]
[xa, ==, 0.0]
[xa]
[0.0]
[leftPlane, ?, copySign, (, Math, ., PI, ,, xa, ), :, xa]
[leftPlane]
[copySign, (, Math, ., PI, ,, xa, )]
[Math, ., PI]
[Math]
[xa]
[xa]
[xa, <, 0]
[xa]
[0]
[xa]
[-, xa]
[xa]
[xb]
[-, xb]
[xb]
[negate]
[true]
[xa, >, 1.633123935319537E16]
[xa]
[1.633123935319537E16]
[(, negate, ^, leftPlane, ), ?, (, -, Math, ., PI, *, F_1_2, ), :, (, Math, ., PI, *, F_1_2, )]
[(, negate, ^, leftPlane, )]
[negate, ^, leftPlane]
[negate]
[leftPlane]
[(, -, Math, ., PI, *, F_1_2, )]
[-, Math, ., PI, *, F_1_2]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[F_1_2]
[(, Math, ., PI, *, F_1_2, )]
[Math, ., PI, *, F_1_2]
[Math, ., PI]
[Math]
[F_1_2]
[xa, <, 1]
[xa]
[1]
[idx]
[(, int, ), (, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, )]
[(, (, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5, )]
[(, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, ), +, 0.5]
[(, (, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa, )]
[(, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, ), *, xa]
[(, -, 1.7168146928204136, *, xa, *, xa, +, 8.0, )]
[-, 1.7168146928204136, *, xa, *, xa, +, 8.0]
[-, 1.7168146928204136, *, xa, *, xa]
[-, 1.7168146928204136, *, xa]
[-, 1.7168146928204136]
[1.7168146928204136]
[xa]
[xa]
[8.0]
[xa]
[0.5]
[1, /, xa]
[1]
[xa]
[idx]
[(, int, ), (, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, )]
[(, -, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07, )]
[-, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, ), +, 13.07]
[-, (, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, )]
[(, (, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa, )]
[(, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, ), *, oneOverXa]
[(, -, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0, )]
[-, 1.7168146928204136, *, oneOverXa, *, oneOverXa, +, 8.0]
[-, 1.7168146928204136, *, oneOverXa, *, oneOverXa]
[-, 1.7168146928204136, *, oneOverXa]
[-, 1.7168146928204136]
[1.7168146928204136]
[oneOverXa]
[oneOverXa]
[8.0]
[oneOverXa]
[13.07]
[xa, -, TANGENT_TABLE_A, [, idx, ]]
[xa]
[TANGENT_TABLE_A, [, idx, ]]
[TANGENT_TABLE_A]
[idx]
[-, (, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], )]
[(, epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ], )]
[epsA, -, xa, +, TANGENT_TABLE_A, [, idx, ]]
[epsA, -, xa]
[epsA]
[xa]
[TANGENT_TABLE_A, [, idx, ]]
[TANGENT_TABLE_A]
[idx]
[epsB]
[xb, -, TANGENT_TABLE_B, [, idx, ]]
[xb]
[TANGENT_TABLE_B, [, idx, ]]
[TANGENT_TABLE_B]
[idx]
[epsA, +, epsB]
[epsA]
[epsB]
[epsB]
[-, (, temp, -, epsA, -, epsB, )]
[(, temp, -, epsA, -, epsB, )]
[temp, -, epsA, -, epsB]
[temp, -, epsA]
[temp]
[epsA]
[epsB]
[epsA]
[temp]
[temp]
[xa, *, HEX_40000000]
[xa]
[HEX_40000000]
[xa, +, temp, -, temp]
[xa, +, temp]
[xa]
[temp]
[temp]
[xb, +, xa, -, ya]
[xb, +, xa]
[xb]
[xa]
[ya]
[xa]
[ya]
[xb]
[yb]
[idx, ==, 0]
[idx]
[0]
[1d, /, (, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), )]
[1d]
[(, 1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], ), )]
[1d, +, (, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], )]
[1d]
[(, xa, +, xb, ), *, (, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], )]
[(, xa, +, xb, )]
[xa, +, xb]
[xa]
[xb]
[(, TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ], )]
[TANGENT_TABLE_A, [, idx, ], +, TANGENT_TABLE_B, [, idx, ]]
[TANGENT_TABLE_A, [, idx, ]]
[TANGENT_TABLE_A]
[idx]
[TANGENT_TABLE_B, [, idx, ]]
[TANGENT_TABLE_B]
[idx]
[ya]
[epsA, *, denom]
[epsA]
[denom]
[yb]
[epsB, *, denom]
[epsB]
[denom]
[xa, *, TANGENT_TABLE_A, [, idx, ]]
[xa]
[TANGENT_TABLE_A, [, idx, ]]
[TANGENT_TABLE_A]
[idx]
[1d, +, temp2]
[1d]
[temp2]
[-, (, za, -, 1d, -, temp2, )]
[(, za, -, 1d, -, temp2, )]
[za, -, 1d, -, temp2]
[za, -, 1d]
[za]
[1d]
[temp2]
[temp2]
[xb, *, TANGENT_TABLE_A, [, idx, ], +, xa, *, TANGENT_TABLE_B, [, idx, ]]
[xb, *, TANGENT_TABLE_A, [, idx, ]]
[xb]
[TANGENT_TABLE_A, [, idx, ]]
[TANGENT_TABLE_A]
[idx]
[xa, *, TANGENT_TABLE_B, [, idx, ]]
[xa]
[TANGENT_TABLE_B, [, idx, ]]
[TANGENT_TABLE_B]
[idx]
[temp]
[za, +, temp2]
[za]
[temp2]
[zb]
[-, (, temp, -, za, -, temp2, )]
[(, temp, -, za, -, temp2, )]
[temp, -, za, -, temp2]
[temp, -, za]
[temp]
[za]
[temp2]
[za]
[temp]
[zb]
[xb, *, TANGENT_TABLE_B, [, idx, ]]
[xb]
[TANGENT_TABLE_B, [, idx, ]]
[TANGENT_TABLE_B]
[idx]
[ya]
[epsA, /, za]
[epsA]
[za]
[temp]
[ya, *, HEX_40000000]
[ya]
[HEX_40000000]
[(, ya, +, temp, ), -, temp]
[(, ya, +, temp, )]
[ya, +, temp]
[ya]
[temp]
[temp]
[ya, -, yaa]
[ya]
[yaa]
[temp]
[za, *, HEX_40000000]
[za]
[HEX_40000000]
[(, za, +, temp, ), -, temp]
[(, za, +, temp, )]
[za, +, temp]
[za]
[temp]
[temp]
[za, -, zaa]
[za]
[zaa]
[yb]
[(, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, ), /, za]
[(, epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab, )]
[epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa, -, yab, *, zab]
[epsA, -, yaa, *, zaa, -, yaa, *, zab, -, yab, *, zaa]
[epsA, -, yaa, *, zaa, -, yaa, *, zab]
[epsA, -, yaa, *, zaa]
[epsA]
[yaa, *, zaa]
[yaa]
[zaa]
[yaa, *, zab]
[yaa]
[zab]
[yab, *, zaa]
[yab]
[zaa]
[yab, *, zab]
[yab]
[zab]
[za]
[yb]
[-, epsA, *, zb, /, za, /, za]
[-, epsA, *, zb, /, za]
[-, epsA, *, zb]
[-, epsA]
[epsA]
[zb]
[za]
[za]
[yb]
[epsB, /, za]
[epsB]
[za]
[epsA]
[ya]
[epsB]
[yb]
[epsA, *, epsA]
[epsA]
[epsA]
[yb]
[0.07490822288864472]
[yb]
[yb, *, epsA2, +, -, 0.09088450866185192]
[yb, *, epsA2]
[yb]
[epsA2]
[-, 0.09088450866185192]
[0.09088450866185192]
[yb]
[yb, *, epsA2, +, 0.11111095942313305]
[yb, *, epsA2]
[yb]
[epsA2]
[0.11111095942313305]
[yb]
[yb, *, epsA2, +, -, 0.1428571423679182]
[yb, *, epsA2]
[yb]
[epsA2]
[-, 0.1428571423679182]
[0.1428571423679182]
[yb]
[yb, *, epsA2, +, 0.19999999999923582]
[yb, *, epsA2]
[yb]
[epsA2]
[0.19999999999923582]
[yb]
[yb, *, epsA2, +, -, 0.33333333333333287]
[yb, *, epsA2]
[yb]
[epsA2]
[-, 0.33333333333333287]
[0.33333333333333287]
[yb]
[yb, *, epsA2, *, epsA]
[yb, *, epsA2]
[yb]
[epsA2]
[epsA]
[ya]
[epsA]
[temp]
[ya, +, yb]
[ya]
[yb]
[yb]
[-, (, temp, -, ya, -, yb, )]
[(, temp, -, ya, -, yb, )]
[temp, -, ya, -, yb]
[temp, -, ya]
[temp]
[ya]
[yb]
[ya]
[temp]
[yb]
[epsB, /, (, 1d, +, epsA, *, epsA, )]
[epsB]
[(, 1d, +, epsA, *, epsA, )]
[1d, +, epsA, *, epsA]
[1d]
[epsA, *, epsA]
[epsA]
[epsA]
[EIGHTHS, [, idx, ], +, ya]
[EIGHTHS, [, idx, ]]
[EIGHTHS]
[idx]
[ya]
[-, (, za, -, EIGHTHS, [, idx, ], -, ya, )]
[(, za, -, EIGHTHS, [, idx, ], -, ya, )]
[za, -, EIGHTHS, [, idx, ], -, ya]
[za, -, EIGHTHS, [, idx, ]]
[za]
[EIGHTHS, [, idx, ]]
[EIGHTHS]
[idx]
[ya]
[temp]
[za, +, yb]
[za]
[yb]
[zb]
[-, (, temp, -, za, -, yb, )]
[(, temp, -, za, -, yb, )]
[temp, -, za, -, yb]
[temp, -, za]
[temp]
[za]
[yb]
[za]
[temp]
[za, +, zb]
[za]
[zb]
[leftPlane]
[-, (, result, -, za, -, zb, )]
[(, result, -, za, -, zb, )]
[result, -, za, -, zb]
[result, -, za]
[result]
[za]
[zb]
[1.5707963267948966, *, 2]
[1.5707963267948966]
[2]
[6.123233995736766E-17, *, 2]
[6.123233995736766E-17]
[2]
[za]
[pia, -, result]
[pia]
[result]
[zb]
[-, (, za, -, pia, +, result, )]
[(, za, -, pia, +, result, )]
[za, -, pia, +, result]
[za, -, pia]
[za]
[pia]
[result]
[zb]
[pib, -, resultb]
[pib]
[resultb]
[result]
[za, +, zb]
[za]
[zb]
[negate, ^, leftPlane]
[negate]
[leftPlane]
[result]
[-, result]
[result]
[result]
[x, !=, x, ||, y, !=, y]
[x, !=, x]
[x]
[x]
[y, !=, y]
[y]
[y]
[Double, ., NaN]
[Double]
[y, ==, 0]
[y]
[0]
[x, *, y]
[x]
[y]
[1d, /, x]
[1d]
[x]
[1d, /, y]
[1d]
[y]
[invx, ==, 0]
[invx]
[0]
[x, >, 0]
[x]
[0]
[y]
[copySign, (, Math, ., PI, ,, y, )]
[Math, ., PI]
[Math]
[y]
[x, <, 0, ||, invx, <, 0]
[x, <, 0]
[x]
[0]
[invx, <, 0]
[invx]
[0]
[y, <, 0, ||, invy, <, 0]
[y, <, 0]
[y]
[0]
[invy, <, 0]
[invy]
[0]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[Math, ., PI]
[Math]
[result]
[y, ==, Double, ., POSITIVE_INFINITY]
[y]
[Double, ., POSITIVE_INFINITY]
[Double]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[Math, ., PI, *, F_1_4]
[Math, ., PI]
[Math]
[F_1_4]
[x, ==, Double, ., NEGATIVE_INFINITY]
[x]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Math, ., PI, *, F_3_4]
[Math, ., PI]
[Math]
[F_3_4]
[Math, ., PI, *, F_1_2]
[Math, ., PI]
[Math]
[F_1_2]
[y, ==, Double, ., NEGATIVE_INFINITY]
[y]
[Double, ., NEGATIVE_INFINITY]
[Double]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[-, Math, ., PI, *, F_1_4]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[F_1_4]
[x, ==, Double, ., NEGATIVE_INFINITY]
[x]
[Double, ., NEGATIVE_INFINITY]
[Double]
[-, Math, ., PI, *, F_3_4]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[F_3_4]
[-, Math, ., PI, *, F_1_2]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[F_1_2]
[x, ==, Double, ., POSITIVE_INFINITY]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[y, >, 0, ||, 1, /, y, >, 0]
[y, >, 0]
[y]
[0]
[1, /, y, >, 0]
[1, /, y]
[1]
[y]
[0]
[0d]
[y, <, 0, ||, 1, /, y, <, 0]
[y, <, 0]
[y]
[0]
[1, /, y, <, 0]
[1, /, y]
[1]
[y]
[0]
[-, 0d]
[0d]
[x, ==, Double, ., NEGATIVE_INFINITY]
[x]
[Double, ., NEGATIVE_INFINITY]
[Double]
[y, >, 0.0, ||, 1, /, y, >, 0.0]
[y, >, 0.0]
[y]
[0.0]
[1, /, y, >, 0.0]
[1, /, y]
[1]
[y]
[0.0]
[Math, ., PI]
[Math]
[y, <, 0, ||, 1, /, y, <, 0]
[y, <, 0]
[y]
[0]
[1, /, y, <, 0]
[1, /, y]
[1]
[y]
[0]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[x, ==, 0]
[x]
[0]
[y, >, 0, ||, 1, /, y, >, 0]
[y, >, 0]
[y]
[0]
[1, /, y, >, 0]
[1, /, y]
[1]
[y]
[0]
[Math, ., PI, *, F_1_2]
[Math, ., PI]
[Math]
[F_1_2]
[y, <, 0, ||, 1, /, y, <, 0]
[y, <, 0]
[y]
[0]
[1, /, y, <, 0]
[1, /, y]
[1]
[y]
[0]
[-, Math, ., PI, *, F_1_2]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[F_1_2]
[y, /, x]
[y]
[x]
[Double, ., isInfinite, (, r, )]
[Double]
[r]
[atan, (, r, ,, 0, ,, x, <, 0, )]
[r]
[0]
[x, <, 0]
[x]
[0]
[doubleHighPart, (, r, )]
[r]
[r, -, ra]
[r]
[ra]
[doubleHighPart, (, x, )]
[x]
[x, -, xa]
[x]
[xa]
[rb]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, )]
[y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb]
[y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa]
[y, -, ra, *, xa, -, ra, *, xb]
[y, -, ra, *, xa]
[y]
[ra, *, xa]
[ra]
[xa]
[ra, *, xb]
[ra]
[xb]
[rb, *, xa]
[rb]
[xa]
[rb, *, xb]
[rb]
[xb]
[x]
[ra, +, rb]
[ra]
[rb]
[rb]
[-, (, temp, -, ra, -, rb, )]
[(, temp, -, ra, -, rb, )]
[temp, -, ra, -, rb]
[temp, -, ra]
[temp]
[ra]
[rb]
[ra]
[temp]
[ra, ==, 0]
[ra]
[0]
[ra]
[copySign, (, 0d, ,, y, )]
[0d]
[y]
[atan, (, ra, ,, rb, ,, x, <, 0, )]
[ra]
[rb]
[x, <, 0]
[x]
[0]
[result]
[x, !=, x]
[x]
[x]
[Double, ., NaN]
[Double]
[x, >, 1.0, ||, x, <, -, 1.0]
[x, >, 1.0]
[x]
[1.0]
[x, <, -, 1.0]
[x]
[-, 1.0]
[1.0]
[Double, ., NaN]
[Double]
[x, ==, 1.0]
[x]
[1.0]
[Math, ., PI, /, 2.0]
[Math, ., PI]
[Math]
[2.0]
[x, ==, -, 1.0]
[x]
[-, 1.0]
[1.0]
[-, Math, ., PI, /, 2.0]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[2.0]
[x, ==, 0.0]
[x]
[0.0]
[x]
[x, *, HEX_40000000]
[x]
[HEX_40000000]
[x, +, temp, -, temp]
[x, +, temp]
[x]
[temp]
[temp]
[x, -, xa]
[x]
[xa]
[xa, *, xa]
[xa]
[xa]
[xa, *, xb, *, 2.0, +, xb, *, xb]
[xa, *, xb, *, 2.0]
[xa, *, xb]
[xa]
[xb]
[2.0]
[xb, *, xb]
[xb]
[xb]
[ya]
[-, ya]
[ya]
[yb]
[-, yb]
[yb]
[1.0, +, ya]
[1.0]
[ya]
[-, (, za, -, 1.0, -, ya, )]
[(, za, -, 1.0, -, ya, )]
[za, -, 1.0, -, ya]
[za, -, 1.0]
[za]
[1.0]
[ya]
[temp]
[za, +, yb]
[za]
[yb]
[zb]
[-, (, temp, -, za, -, yb, )]
[(, temp, -, za, -, yb, )]
[temp, -, za, -, yb]
[temp, -, za]
[temp]
[za]
[yb]
[za]
[temp]
[y]
[sqrt, (, za, )]
[za]
[temp]
[y, *, HEX_40000000]
[y]
[HEX_40000000]
[ya]
[y, +, temp, -, temp]
[y, +, temp]
[y]
[temp]
[temp]
[yb]
[y, -, ya]
[y]
[ya]
[yb]
[(, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, )]
[(, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb]
[za, -, ya, *, ya, -, 2, *, ya, *, yb]
[za, -, ya, *, ya]
[za]
[ya, *, ya]
[ya]
[ya]
[2, *, ya, *, yb]
[2, *, ya]
[2]
[ya]
[yb]
[yb, *, yb]
[yb]
[yb]
[(, 2.0, *, y, )]
[2.0, *, y]
[2.0]
[y]
[zb, /, (, 2.0, *, y, )]
[zb]
[(, 2.0, *, y, )]
[2.0, *, y]
[2.0]
[y]
[x, /, y]
[x]
[y]
[temp]
[r, *, HEX_40000000]
[r]
[HEX_40000000]
[r, +, temp, -, temp]
[r, +, temp]
[r]
[temp]
[temp]
[r, -, ra]
[r]
[ra]
[rb]
[(, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, ), /, y]
[(, x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb, )]
[x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya, -, rb, *, yb]
[x, -, ra, *, ya, -, ra, *, yb, -, rb, *, ya]
[x, -, ra, *, ya, -, ra, *, yb]
[x, -, ra, *, ya]
[x]
[ra, *, ya]
[ra]
[ya]
[ra, *, yb]
[ra]
[yb]
[rb, *, ya]
[rb]
[ya]
[rb, *, yb]
[rb]
[yb]
[y]
[rb]
[-, x, *, dx, /, y, /, y]
[-, x, *, dx, /, y]
[-, x, *, dx]
[-, x]
[x]
[dx]
[y]
[y]
[temp]
[ra, +, rb]
[ra]
[rb]
[rb]
[-, (, temp, -, ra, -, rb, )]
[(, temp, -, ra, -, rb, )]
[temp, -, ra, -, rb]
[temp, -, ra]
[temp]
[ra]
[rb]
[ra]
[temp]
[atan, (, ra, ,, rb, ,, false, )]
[ra]
[rb]
[false]
[x, !=, x]
[x]
[x]
[Double, ., NaN]
[Double]
[x, >, 1.0, ||, x, <, -, 1.0]
[x, >, 1.0]
[x]
[1.0]
[x, <, -, 1.0]
[x]
[-, 1.0]
[1.0]
[Double, ., NaN]
[Double]
[x, ==, -, 1.0]
[x]
[-, 1.0]
[1.0]
[Math, ., PI]
[Math]
[x, ==, 1.0]
[x]
[1.0]
[0.0]
[x, ==, 0]
[x]
[0]
[Math, ., PI, /, 2.0]
[Math, ., PI]
[Math]
[2.0]
[x, *, HEX_40000000]
[x]
[HEX_40000000]
[x, +, temp, -, temp]
[x, +, temp]
[x]
[temp]
[temp]
[x, -, xa]
[x]
[xa]
[xa, *, xa]
[xa]
[xa]
[xa, *, xb, *, 2.0, +, xb, *, xb]
[xa, *, xb, *, 2.0]
[xa, *, xb]
[xa]
[xb]
[2.0]
[xb, *, xb]
[xb]
[xb]
[ya]
[-, ya]
[ya]
[yb]
[-, yb]
[yb]
[1.0, +, ya]
[1.0]
[ya]
[-, (, za, -, 1.0, -, ya, )]
[(, za, -, 1.0, -, ya, )]
[za, -, 1.0, -, ya]
[za, -, 1.0]
[za]
[1.0]
[ya]
[temp]
[za, +, yb]
[za]
[yb]
[zb]
[-, (, temp, -, za, -, yb, )]
[(, temp, -, za, -, yb, )]
[temp, -, za, -, yb]
[temp, -, za]
[temp]
[za]
[yb]
[za]
[temp]
[sqrt, (, za, )]
[za]
[temp]
[y, *, HEX_40000000]
[y]
[HEX_40000000]
[ya]
[y, +, temp, -, temp]
[y, +, temp]
[y]
[temp]
[temp]
[yb]
[y, -, ya]
[y]
[ya]
[yb]
[(, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, ), /, (, 2.0, *, y, )]
[(, za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb, )]
[za, -, ya, *, ya, -, 2, *, ya, *, yb, -, yb, *, yb]
[za, -, ya, *, ya, -, 2, *, ya, *, yb]
[za, -, ya, *, ya]
[za]
[ya, *, ya]
[ya]
[ya]
[2, *, ya, *, yb]
[2, *, ya]
[2]
[ya]
[yb]
[yb, *, yb]
[yb]
[yb]
[(, 2.0, *, y, )]
[2.0, *, y]
[2.0]
[y]
[yb]
[zb, /, (, 2.0, *, y, )]
[zb]
[(, 2.0, *, y, )]
[2.0, *, y]
[2.0]
[y]
[y]
[ya, +, yb]
[ya]
[yb]
[yb]
[-, (, y, -, ya, -, yb, )]
[(, y, -, ya, -, yb, )]
[y, -, ya, -, yb]
[y, -, ya]
[y]
[ya]
[yb]
[y, /, x]
[y]
[x]
[Double, ., isInfinite, (, r, )]
[Double]
[r]
[Math, ., PI, /, 2]
[Math, ., PI]
[Math]
[2]
[doubleHighPart, (, r, )]
[r]
[r, -, ra]
[r]
[ra]
[rb]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, ), /, x]
[(, y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb, )]
[y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa, -, rb, *, xb]
[y, -, ra, *, xa, -, ra, *, xb, -, rb, *, xa]
[y, -, ra, *, xa, -, ra, *, xb]
[y, -, ra, *, xa]
[y]
[ra, *, xa]
[ra]
[xa]
[ra, *, xb]
[ra]
[xb]
[rb, *, xa]
[rb]
[xa]
[rb, *, xb]
[rb]
[xb]
[x]
[rb]
[yb, /, x]
[yb]
[x]
[temp]
[ra, +, rb]
[ra]
[rb]
[rb]
[-, (, temp, -, ra, -, rb, )]
[(, temp, -, ra, -, rb, )]
[temp, -, ra, -, rb]
[temp, -, ra]
[temp]
[ra]
[rb]
[ra]
[temp]
[atan, (, ra, ,, rb, ,, x, <, 0, )]
[ra]
[rb]
[x, <, 0]
[x]
[0]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, inbits, >, >, 52, ), &, 0x7ff]
[(, inbits, >, >, 52, )]
[inbits, >, >, 52]
[inbits]
[52]
[0x7ff]
[1023]
[false]
[exponent, ==, -, 1023]
[exponent]
[-, 1023]
[1023]
[x, ==, 0]
[x]
[0]
[x]
[subnormal]
[true]
[x]
[1.8014398509481984E16]
[inbits]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[exponent]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, ), -, 1023]
[(, int, ), (, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, (, inbits, >, >, 52, ), &, 0x7ff, )]
[(, inbits, >, >, 52, ), &, 0x7ff]
[(, inbits, >, >, 52, )]
[inbits, >, >, 52]
[inbits]
[52]
[0x7ff]
[1023]
[exponent, ==, 1024]
[exponent]
[1024]
[x]
[exponent, /, 3]
[exponent]
[3]
[Double, ., longBitsToDouble, (, (, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52, )]
[Double]
[(, inbits, &, 0x8000000000000000L, ), |, (, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52]
[(, inbits, &, 0x8000000000000000L, )]
[inbits, &, 0x8000000000000000L]
[inbits]
[0x8000000000000000L]
[(, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), ), <<, 52]
[(, long, ), (, (, (, exp3, +, 1023, ), &, 0x7ff, ), )]
[(, (, (, exp3, +, 1023, ), &, 0x7ff, ), )]
[(, (, exp3, +, 1023, ), &, 0x7ff, )]
[(, exp3, +, 1023, ), &, 0x7ff]
[(, exp3, +, 1023, )]
[exp3, +, 1023]
[exp3]
[1023]
[0x7ff]
[52]
[Double, ., longBitsToDouble, (, (, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L, )]
[Double]
[(, inbits, &, 0x000fffffffffffffL, ), |, 0x3ff0000000000000L]
[(, inbits, &, 0x000fffffffffffffL, )]
[inbits, &, 0x000fffffffffffffL]
[inbits]
[0x000fffffffffffffL]
[0x3ff0000000000000L]
[-, 0.010714690733195933]
[0.010714690733195933]
[est]
[est, *, mant, +, 0.0875862700108075]
[est, *, mant]
[est]
[mant]
[0.0875862700108075]
[est]
[est, *, mant, +, -, 0.3058015757857271]
[est, *, mant]
[est]
[mant]
[-, 0.3058015757857271]
[0.3058015757857271]
[est]
[est, *, mant, +, 0.7249995199969751]
[est, *, mant]
[est]
[mant]
[0.7249995199969751]
[est]
[est, *, mant, +, 0.5039018405998233]
[est, *, mant]
[est]
[mant]
[0.5039018405998233]
[est]
[CBRTTWO, [, exponent, %, 3, +, 2, ]]
[CBRTTWO]
[exponent, %, 3, +, 2]
[exponent, %, 3]
[exponent]
[3]
[2]
[x, /, (, p2, *, p2, *, p2, )]
[x]
[(, p2, *, p2, *, p2, )]
[p2, *, p2, *, p2]
[p2, *, p2]
[p2]
[p2]
[p2]
[est]
[(, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[(, xs, -, est, *, est, *, est, )]
[xs, -, est, *, est, *, est]
[xs]
[est, *, est, *, est]
[est, *, est]
[est]
[est]
[est]
[(, 3, *, est, *, est, )]
[3, *, est, *, est]
[3, *, est]
[3]
[est]
[est]
[est]
[(, xs, -, est, *, est, *, est, ), /, (, 3, *, est, *, est, )]
[(, xs, -, est, *, est, *, est, )]
[xs, -, est, *, est, *, est]
[xs]
[est, *, est, *, est]
[est, *, est]
[est]
[est]
[est]
[(, 3, *, est, *, est, )]
[3, *, est, *, est]
[3, *, est]
[3]
[est]
[est]
[est, *, HEX_40000000]
[est]
[HEX_40000000]
[est, +, temp, -, temp]
[est, +, temp]
[est]
[temp]
[temp]
[est, -, ya]
[est]
[ya]
[ya, *, ya]
[ya]
[ya]
[ya, *, yb, *, 2.0, +, yb, *, yb]
[ya, *, yb, *, 2.0]
[ya, *, yb]
[ya]
[yb]
[2.0]
[yb, *, yb]
[yb]
[yb]
[temp]
[za, *, HEX_40000000]
[za]
[HEX_40000000]
[za, +, temp, -, temp]
[za, +, temp]
[za]
[temp]
[temp]
[zb]
[za, -, temp2]
[za]
[temp2]
[za]
[temp2]
[zb]
[za, *, yb, +, ya, *, zb, +, zb, *, yb]
[za, *, yb, +, ya, *, zb]
[za, *, yb]
[za]
[yb]
[ya, *, zb]
[ya]
[zb]
[zb, *, yb]
[zb]
[yb]
[za]
[za, *, ya]
[za]
[ya]
[xs, -, za]
[xs]
[za]
[-, (, na, -, xs, +, za, )]
[(, na, -, xs, +, za, )]
[na, -, xs, +, za]
[na, -, xs]
[na]
[xs]
[za]
[nb]
[zb]
[est]
[(, na, +, nb, ), /, (, 3, *, est, *, est, )]
[(, na, +, nb, )]
[na, +, nb]
[na]
[nb]
[(, 3, *, est, *, est, )]
[3, *, est, *, est]
[3, *, est]
[3]
[est]
[est]
[est]
[p2]
[subnormal]
[est]
[3.814697265625E-6]
[est]
[Double, ., isInfinite, (, x, ), ||, x, ==, 0.0]
[Double, ., isInfinite, (, x, )]
[Double]
[x]
[x, ==, 0.0]
[x]
[0.0]
[x]
[0.01745329052209854]
[1.997844754509471E-9]
[doubleHighPart, (, x, )]
[x]
[x, -, xa]
[x]
[xa]
[xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta]
[xb, *, factb, +, xb, *, facta, +, xa, *, factb]
[xb, *, factb, +, xb, *, facta]
[xb, *, factb]
[xb]
[factb]
[xb, *, facta]
[xb]
[facta]
[xa, *, factb]
[xa]
[factb]
[xa, *, facta]
[xa]
[facta]
[result, ==, 0]
[result]
[0]
[result]
[result, *, x]
[result]
[x]
[result]
[Double, ., isInfinite, (, x, ), ||, x, ==, 0.0]
[Double, ., isInfinite, (, x, )]
[Double]
[x]
[x, ==, 0.0]
[x]
[0.0]
[x]
[57.2957763671875]
[3.145894820876798E-6]
[doubleHighPart, (, x, )]
[x]
[x, -, xa]
[x]
[xa]
[xb, *, factb, +, xb, *, facta, +, xa, *, factb, +, xa, *, facta]
[xb, *, factb, +, xb, *, facta, +, xa, *, factb]
[xb, *, factb, +, xb, *, facta]
[xb, *, factb]
[xb]
[factb]
[xb, *, facta]
[xb]
[facta]
[xa, *, factb]
[xa]
[factb]
[xa, *, facta]
[xa]
[facta]
[x, >, >, >, 31]
[x]
[31]
[(, x, ^, (, ~, i, +, 1, ), ), +, i]
[(, x, ^, (, ~, i, +, 1, ), )]
[x, ^, (, ~, i, +, 1, )]
[x]
[(, ~, i, +, 1, )]
[~, i, +, 1]
[~, i]
[i]
[1]
[i]
[x, >, >, >, 63]
[x]
[63]
[(, x, ^, (, ~, l, +, 1, ), ), +, l]
[(, x, ^, (, ~, l, +, 1, ), )]
[x, ^, (, ~, l, +, 1, )]
[x]
[(, ~, l, +, 1, )]
[~, l, +, 1]
[~, l]
[l]
[1]
[l]
[Float, ., intBitsToFloat, (, MASK_NON_SIGN_INT, &, Float, ., floatToRawIntBits, (, x, ), )]
[Float]
[MASK_NON_SIGN_INT, &, Float, ., floatToRawIntBits, (, x, )]
[MASK_NON_SIGN_INT]
[Float, ., floatToRawIntBits, (, x, )]
[Float]
[x]
[Double, ., longBitsToDouble, (, MASK_NON_SIGN_LONG, &, Double, ., doubleToRawLongBits, (, x, ), )]
[Double]
[MASK_NON_SIGN_LONG, &, Double, ., doubleToRawLongBits, (, x, )]
[MASK_NON_SIGN_LONG]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[Double, ., isInfinite, (, x, )]
[Double]
[x]
[Double, ., POSITIVE_INFINITY]
[Double]
[abs, (, x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, ), )]
[x, -, Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, )]
[x]
[Double, ., longBitsToDouble, (, Double, ., doubleToRawLongBits, (, x, ), ^, 1, )]
[Double]
[Double, ., doubleToRawLongBits, (, x, ), ^, 1]
[Double, ., doubleToRawLongBits, (, x, )]
[Double]
[x]
[1]
[Float, ., isInfinite, (, x, )]
[Float]
[x]
[Float, ., POSITIVE_INFINITY]
[Float]
[abs, (, x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, ), )]
[x, -, Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, )]
[x]
[Float, ., intBitsToFloat, (, Float, ., floatToIntBits, (, x, ), ^, 1, )]
[Float]
[Float, ., floatToIntBits, (, x, ), ^, 1]
[Float, ., floatToIntBits, (, x, )]
[Float]
[x]
[1]
[(, n, >, -, 1023, ), &&, (, n, <, 1024, )]
[(, n, >, -, 1023, )]
[n, >, -, 1023]
[n]
[-, 1023]
[1023]
[(, n, <, 1024, )]
[n, <, 1024]
[n]
[1024]
[d, *, Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, )]
[d]
[Double, ., longBitsToDouble, (, (, (, long, ), (, n, +, 1023, ), ), <<, 52, )]
[Double]
[(, (, long, ), (, n, +, 1023, ), ), <<, 52]
[(, (, long, ), (, n, +, 1023, ), )]
[(, long, ), (, n, +, 1023, )]
[(, n, +, 1023, )]
[n, +, 1023]
[n]
[1023]
[52]
[Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, ), ||, (, d, ==, 0, )]
[Double, ., isNaN, (, d, ), ||, Double, ., isInfinite, (, d, )]
[Double, ., isNaN, (, d, )]
[Double]
[d]
[Double, ., isInfinite, (, d, )]
[Double]
[d]
[(, d, ==, 0, )]
[d, ==, 0]
[d]
[0]
[d]
[n, <, -, 2098]
[n]
[-, 2098]
[2098]
[(, d, >, 0, ), ?, 0.0, :, -, 0.0]
[(, d, >, 0, )]
[d, >, 0]
[d]
[0]
[0.0]
[-, 0.0]
[0.0]
[n, >, 2097]
[n]
[2097]
[(, d, >, 0, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY]
[(, d, >, 0, )]
[d, >, 0]
[d]
[0]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., doubleToRawLongBits, (, d, )]
[Double]
[d]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[(, (, int, ), (, bits, >, >, >, 52, ), ), &, 0x7ff]
[(, (, int, ), (, bits, >, >, >, 52, ), )]
[(, int, ), (, bits, >, >, >, 52, )]
[(, bits, >, >, >, 52, )]
[bits, >, >, >, 52]
[bits]
[52]
[0x7ff]
[bits, &, 0x000fffffffffffffL]
[bits]
[0x000fffffffffffffL]
[exponent, +, n]
[exponent]
[n]
[n, <, 0]
[n]
[0]
[scaledExponent, >, 0]
[scaledExponent]
[0]
[Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, )]
[Double]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, )]
[sign]
[(, (, (, long, ), scaledExponent, ), <<, 52, )]
[(, (, long, ), scaledExponent, ), <<, 52]
[(, (, long, ), scaledExponent, )]
[(, long, ), scaledExponent]
[scaledExponent]
[52]
[mantissa]
[scaledExponent, >, -, 53]
[scaledExponent]
[-, 53]
[53]
[mantissa]
[mantissa, |, (, 1L, <<, 52, )]
[mantissa]
[(, 1L, <<, 52, )]
[1L, <<, 52]
[1L]
[52]
[mantissa, &, (, 1L, <<, (, -, scaledExponent, ), )]
[mantissa]
[(, 1L, <<, (, -, scaledExponent, ), )]
[1L, <<, (, -, scaledExponent, )]
[1L]
[(, -, scaledExponent, )]
[-, scaledExponent]
[scaledExponent]
[mantissa]
[mantissa, >, >, >, (, 1, -, scaledExponent, )]
[mantissa]
[(, 1, -, scaledExponent, )]
[1, -, scaledExponent]
[1]
[scaledExponent]
[mostSignificantLostBit, !=, 0]
[mostSignificantLostBit]
[0]
[mantissa, ++]
[mantissa]
[Double, ., longBitsToDouble, (, sign, |, mantissa, )]
[Double]
[sign, |, mantissa]
[sign]
[mantissa]
[(, sign, ==, 0L, ), ?, 0.0, :, -, 0.0]
[(, sign, ==, 0L, )]
[sign, ==, 0L]
[sign]
[0L]
[0.0]
[-, 0.0]
[0.0]
[exponent, ==, 0]
[exponent]
[0]
[(, mantissa, >, >, >, 52, ), !=, 1]
[(, mantissa, >, >, >, 52, )]
[mantissa, >, >, >, 52]
[mantissa]
[52]
[1]
[mantissa]
[mantissa, <<, 1]
[mantissa]
[1]
[--, scaledExponent]
[scaledExponent]
[++, scaledExponent]
[scaledExponent]
[mantissa]
[mantissa, &, 0x000fffffffffffffL]
[mantissa]
[0x000fffffffffffffL]
[scaledExponent, <, 2047]
[scaledExponent]
[2047]
[Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, )]
[Double]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, )]
[sign]
[(, (, (, long, ), scaledExponent, ), <<, 52, )]
[(, (, long, ), scaledExponent, ), <<, 52]
[(, (, long, ), scaledExponent, )]
[(, long, ), scaledExponent]
[scaledExponent]
[52]
[mantissa]
[(, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY]
[(, sign, ==, 0L, )]
[sign, ==, 0L]
[sign]
[0L]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NEGATIVE_INFINITY]
[Double]
[scaledExponent, <, 2047]
[scaledExponent]
[2047]
[Double, ., longBitsToDouble, (, sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa, )]
[Double]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, ), |, mantissa]
[sign, |, (, (, (, long, ), scaledExponent, ), <<, 52, )]
[sign]
[(, (, (, long, ), scaledExponent, ), <<, 52, )]
[(, (, long, ), scaledExponent, ), <<, 52]
[(, (, long, ), scaledExponent, )]
[(, long, ), scaledExponent]
[scaledExponent]
[52]
[mantissa]
[(, sign, ==, 0L, ), ?, Double, ., POSITIVE_INFINITY, :, Double, ., NEGATIVE_INFINITY]
[(, sign, ==, 0L, )]
[sign, ==, 0L]
[sign]
[0L]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., NEGATIVE_INFINITY]
[Double]
[(, n, >, -, 127, ), &&, (, n, <, 128, )]
[(, n, >, -, 127, )]
[n, >, -, 127]
[n]
[-, 127]
[127]
[(, n, <, 128, )]
[n, <, 128]
[n]
[128]
[f, *, Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, )]
[f]
[Float, ., intBitsToFloat, (, (, n, +, 127, ), <<, 23, )]
[Float]
[(, n, +, 127, ), <<, 23]
[(, n, +, 127, )]
[n, +, 127]
[n]
[127]
[23]
[Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, ), ||, (, f, ==, 0f, )]
[Float, ., isNaN, (, f, ), ||, Float, ., isInfinite, (, f, )]
[Float, ., isNaN, (, f, )]
[Float]
[f]
[Float, ., isInfinite, (, f, )]
[Float]
[f]
[(, f, ==, 0f, )]
[f, ==, 0f]
[f]
[0f]
[f]
[n, <, -, 277]
[n]
[-, 277]
[277]
[(, f, >, 0, ), ?, 0.0f, :, -, 0.0f]
[(, f, >, 0, )]
[f, >, 0]
[f]
[0]
[0.0f]
[-, 0.0f]
[0.0f]
[n, >, 276]
[n]
[276]
[(, f, >, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY]
[(, f, >, 0, )]
[f, >, 0]
[f]
[0]
[Float, ., POSITIVE_INFINITY]
[Float]
[Float, ., NEGATIVE_INFINITY]
[Float]
[Float, ., floatToIntBits, (, f, )]
[Float]
[f]
[bits, &, 0x80000000]
[bits]
[0x80000000]
[(, bits, >, >, >, 23, ), &, 0xff]
[(, bits, >, >, >, 23, )]
[bits, >, >, >, 23]
[bits]
[23]
[0xff]
[bits, &, 0x007fffff]
[bits]
[0x007fffff]
[exponent, +, n]
[exponent]
[n]
[n, <, 0]
[n]
[0]
[scaledExponent, >, 0]
[scaledExponent]
[0]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, )]
[Float]
[sign, |, (, scaledExponent, <<, 23, ), |, mantissa]
[sign, |, (, scaledExponent, <<, 23, )]
[sign]
[(, scaledExponent, <<, 23, )]
[scaledExponent, <<, 23]
[scaledExponent]
[23]
[mantissa]
[scaledExponent, >, -, 24]
[scaledExponent]
[-, 24]
[24]
[mantissa]
[mantissa, |, (, 1, <<, 23, )]
[mantissa]
[(, 1, <<, 23, )]
[1, <<, 23]
[1]
[23]
[mantissa, &, (, 1, <<, (, -, scaledExponent, ), )]
[mantissa]
[(, 1, <<, (, -, scaledExponent, ), )]
[1, <<, (, -, scaledExponent, )]
[1]
[(, -, scaledExponent, )]
[-, scaledExponent]
[scaledExponent]
[mantissa]
[mantissa, >, >, >, (, 1, -, scaledExponent, )]
[mantissa]
[(, 1, -, scaledExponent, )]
[1, -, scaledExponent]
[1]
[scaledExponent]
[mostSignificantLostBit, !=, 0]
[mostSignificantLostBit]
[0]
[mantissa, ++]
[mantissa]
[Float, ., intBitsToFloat, (, sign, |, mantissa, )]
[Float]
[sign, |, mantissa]
[sign]
[mantissa]
[(, sign, ==, 0, ), ?, 0.0f, :, -, 0.0f]
[(, sign, ==, 0, )]
[sign, ==, 0]
[sign]
[0]
[0.0f]
[-, 0.0f]
[0.0f]
[exponent, ==, 0]
[exponent]
[0]
[(, mantissa, >, >, >, 23, ), !=, 1]
[(, mantissa, >, >, >, 23, )]
[mantissa, >, >, >, 23]
[mantissa]
[23]
[1]
[mantissa]
[mantissa, <<, 1]
[mantissa]
[1]
[--, scaledExponent]
[scaledExponent]
[++, scaledExponent]
[scaledExponent]
[mantissa]
[mantissa, &, 0x007fffff]
[mantissa]
[0x007fffff]
[scaledExponent, <, 255]
[scaledExponent]
[255]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, )]
[Float]
[sign, |, (, scaledExponent, <<, 23, ), |, mantissa]
[sign, |, (, scaledExponent, <<, 23, )]
[sign]
[(, scaledExponent, <<, 23, )]
[scaledExponent, <<, 23]
[scaledExponent]
[23]
[mantissa]
[(, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY]
[(, sign, ==, 0, )]
[sign, ==, 0]
[sign]
[0]
[Float, ., POSITIVE_INFINITY]
[Float]
[Float, ., NEGATIVE_INFINITY]
[Float]
[scaledExponent, <, 255]
[scaledExponent]
[255]
[Float, ., intBitsToFloat, (, sign, |, (, scaledExponent, <<, 23, ), |, mantissa, )]
[Float]
[sign, |, (, scaledExponent, <<, 23, ), |, mantissa]
[sign, |, (, scaledExponent, <<, 23, )]
[sign]
[(, scaledExponent, <<, 23, )]
[scaledExponent, <<, 23]
[scaledExponent]
[23]
[mantissa]
[(, sign, ==, 0, ), ?, Float, ., POSITIVE_INFINITY, :, Float, ., NEGATIVE_INFINITY]
[(, sign, ==, 0, )]
[sign, ==, 0]
[sign]
[0]
[Float, ., POSITIVE_INFINITY]
[Float]
[Float, ., NEGATIVE_INFINITY]
[Float]
[Double, ., isNaN, (, d, ), ||, Double, ., isNaN, (, direction, )]
[Double, ., isNaN, (, d, )]
[Double]
[d]
[Double, ., isNaN, (, direction, )]
[Double]
[direction]
[Double, ., NaN]
[Double]
[d, ==, direction]
[d]
[direction]
[direction]
[Double, ., isInfinite, (, d, )]
[Double]
[d]
[(, d, <, 0, ), ?, -, Double, ., MAX_VALUE, :, Double, ., MAX_VALUE]
[(, d, <, 0, )]
[d, <, 0]
[d]
[0]
[-, Double, ., MAX_VALUE]
[Double, ., MAX_VALUE]
[Double]
[Double, ., MAX_VALUE]
[Double]
[d, ==, 0]
[d]
[0]
[(, direction, <, 0, ), ?, -, Double, ., MIN_VALUE, :, Double, ., MIN_VALUE]
[(, direction, <, 0, )]
[direction, <, 0]
[direction]
[0]
[-, Double, ., MIN_VALUE]
[Double, ., MIN_VALUE]
[Double]
[Double, ., MIN_VALUE]
[Double]
[Double, ., doubleToRawLongBits, (, d, )]
[Double]
[d]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[(, direction, <, d, ), ^, (, sign, ==, 0L, )]
[(, direction, <, d, )]
[direction, <, d]
[direction]
[d]
[(, sign, ==, 0L, )]
[sign, ==, 0L]
[sign]
[0L]
[Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, ), )]
[Double]
[sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), +, 1, )]
[sign]
[(, (, bits, &, 0x7fffffffffffffffL, ), +, 1, )]
[(, bits, &, 0x7fffffffffffffffL, ), +, 1]
[(, bits, &, 0x7fffffffffffffffL, )]
[bits, &, 0x7fffffffffffffffL]
[bits]
[0x7fffffffffffffffL]
[1]
[Double, ., longBitsToDouble, (, sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1, ), )]
[Double]
[sign, |, (, (, bits, &, 0x7fffffffffffffffL, ), -, 1, )]
[sign]
[(, (, bits, &, 0x7fffffffffffffffL, ), -, 1, )]
[(, bits, &, 0x7fffffffffffffffL, ), -, 1]
[(, bits, &, 0x7fffffffffffffffL, )]
[bits, &, 0x7fffffffffffffffL]
[bits]
[0x7fffffffffffffffL]
[1]
[Double, ., isNaN, (, f, ), ||, Double, ., isNaN, (, direction, )]
[Double, ., isNaN, (, f, )]
[Double]
[f]
[Double, ., isNaN, (, direction, )]
[Double]
[direction]
[Float, ., NaN]
[Float]
[f, ==, direction]
[f]
[direction]
[(, float, ), direction]
[direction]
[Float, ., isInfinite, (, f, )]
[Float]
[f]
[(, f, <, 0f, ), ?, -, Float, ., MAX_VALUE, :, Float, ., MAX_VALUE]
[(, f, <, 0f, )]
[f, <, 0f]
[f]
[0f]
[-, Float, ., MAX_VALUE]
[Float, ., MAX_VALUE]
[Float]
[Float, ., MAX_VALUE]
[Float]
[f, ==, 0f]
[f]
[0f]
[(, direction, <, 0, ), ?, -, Float, ., MIN_VALUE, :, Float, ., MIN_VALUE]
[(, direction, <, 0, )]
[direction, <, 0]
[direction]
[0]
[-, Float, ., MIN_VALUE]
[Float, ., MIN_VALUE]
[Float]
[Float, ., MIN_VALUE]
[Float]
[Float, ., floatToIntBits, (, f, )]
[Float]
[f]
[bits, &, 0x80000000]
[bits]
[0x80000000]
[(, direction, <, f, ), ^, (, sign, ==, 0, )]
[(, direction, <, f, )]
[direction, <, f]
[direction]
[f]
[(, sign, ==, 0, )]
[sign, ==, 0]
[sign]
[0]
[Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, ), )]
[Float]
[sign, |, (, (, bits, &, 0x7fffffff, ), +, 1, )]
[sign]
[(, (, bits, &, 0x7fffffff, ), +, 1, )]
[(, bits, &, 0x7fffffff, ), +, 1]
[(, bits, &, 0x7fffffff, )]
[bits, &, 0x7fffffff]
[bits]
[0x7fffffff]
[1]
[Float, ., intBitsToFloat, (, sign, |, (, (, bits, &, 0x7fffffff, ), -, 1, ), )]
[Float]
[sign, |, (, (, bits, &, 0x7fffffff, ), -, 1, )]
[sign]
[(, (, bits, &, 0x7fffffff, ), -, 1, )]
[(, bits, &, 0x7fffffff, ), -, 1]
[(, bits, &, 0x7fffffff, )]
[bits, &, 0x7fffffff]
[bits]
[0x7fffffff]
[1]
[x, !=, x]
[x]
[x]
[x]
[x, >=, TWO_POWER_52, ||, x, <=, -, TWO_POWER_52]
[x, >=, TWO_POWER_52]
[x]
[TWO_POWER_52]
[x, <=, -, TWO_POWER_52]
[x]
[-, TWO_POWER_52]
[TWO_POWER_52]
[x]
[y]
[(, long, ), x]
[x]
[x, <, 0, &&, y, !=, x]
[x, <, 0]
[x]
[0]
[y, !=, x]
[y]
[x]
[y, --]
[y]
[y, ==, 0]
[y]
[0]
[x, *, y]
[x]
[y]
[y]
[x, !=, x]
[x]
[x]
[x]
[y]
[floor, (, x, )]
[x]
[y, ==, x]
[y]
[x]
[y]
[y]
[1.0]
[y, ==, 0]
[y]
[0]
[x, *, y]
[x]
[y]
[y]
[floor, (, x, )]
[x]
[x, -, y]
[x]
[y]
[d, >, 0.5]
[d]
[0.5]
[y, ==, -, 1.0]
[y]
[-, 1.0]
[1.0]
[-, 0.0]
[0.0]
[y, +, 1.0]
[y]
[1.0]
[d, <, 0.5]
[d]
[0.5]
[y]
[(, long, ), y]
[y]
[(, z, &, 1, ), ==, 0, ?, y, :, y, +, 1.0]
[(, z, &, 1, ), ==, 0]
[(, z, &, 1, )]
[z, &, 1]
[z]
[1]
[0]
[y]
[y, +, 1.0]
[y]
[1.0]
[(, long, ), floor, (, x, +, 0.5, )]
[floor, (, x, +, 0.5, )]
[x, +, 0.5]
[x]
[0.5]
[(, int, ), floor, (, x, +, 0.5f, )]
[floor, (, x, +, 0.5f, )]
[x, +, 0.5f]
[x]
[0.5f]
[(, a, <=, b, ), ?, a, :, b]
[(, a, <=, b, )]
[a, <=, b]
[a]
[b]
[a]
[b]
[(, a, <=, b, ), ?, a, :, b]
[(, a, <=, b, )]
[a, <=, b]
[a]
[b]
[a]
[b]
[a, >, b]
[a]
[b]
[b]
[a, <, b]
[a]
[b]
[a]
[a, !=, b]
[a]
[b]
[Float, ., NaN]
[Float]
[Float, ., floatToRawIntBits, (, a, )]
[Float]
[a]
[bits, ==, 0x80000000]
[bits]
[0x80000000]
[a]
[b]
[a, >, b]
[a]
[b]
[b]
[a, <, b]
[a]
[b]
[a]
[a, !=, b]
[a]
[b]
[Double, ., NaN]
[Double]
[Double, ., doubleToRawLongBits, (, a, )]
[Double]
[a]
[bits, ==, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[a]
[b]
[(, a, <=, b, ), ?, b, :, a]
[(, a, <=, b, )]
[a, <=, b]
[a]
[b]
[b]
[a]
[(, a, <=, b, ), ?, b, :, a]
[(, a, <=, b, )]
[a, <=, b]
[a]
[b]
[b]
[a]
[a, >, b]
[a]
[b]
[a]
[a, <, b]
[a]
[b]
[b]
[a, !=, b]
[a]
[b]
[Float, ., NaN]
[Float]
[Float, ., floatToRawIntBits, (, a, )]
[Float]
[a]
[bits, ==, 0x80000000]
[bits]
[0x80000000]
[b]
[a]
[a, >, b]
[a]
[b]
[a]
[a, <, b]
[a]
[b]
[b]
[a, !=, b]
[a]
[b]
[Double, ., NaN]
[Double]
[Double, ., doubleToRawLongBits, (, a, )]
[Double]
[a]
[bits, ==, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[b]
[a]
[Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, )]
[Double, ., isInfinite, (, x, )]
[Double]
[x]
[Double, ., isInfinite, (, y, )]
[Double]
[y]
[Double, ., POSITIVE_INFINITY]
[Double]
[Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[Double, ., isNaN, (, y, )]
[Double]
[y]
[Double, ., NaN]
[Double]
[getExponent, (, x, )]
[x]
[getExponent, (, y, )]
[y]
[expX, >, expY, +, 27]
[expX]
[expY, +, 27]
[expY]
[27]
[abs, (, x, )]
[x]
[expY, >, expX, +, 27]
[expY]
[expX, +, 27]
[expX]
[27]
[abs, (, y, )]
[y]
[(, expX, +, expY, ), /, 2]
[(, expX, +, expY, )]
[expX, +, expY]
[expX]
[expY]
[2]
[scalb, (, x, ,, -, middleExp, )]
[x]
[-, middleExp]
[middleExp]
[scalb, (, y, ,, -, middleExp, )]
[y]
[-, middleExp]
[middleExp]
[sqrt, (, scaledX, *, scaledX, +, scaledY, *, scaledY, )]
[scaledX, *, scaledX, +, scaledY, *, scaledY]
[scaledX, *, scaledX]
[scaledX]
[scaledX]
[scaledY, *, scaledY]
[scaledY]
[scaledY]
[scalb, (, scaledH, ,, middleExp, )]
[scaledH]
[middleExp]
[StrictMath, ., IEEEremainder, (, dividend, ,, divisor, )]
[StrictMath]
[dividend]
[divisor]
[Double, ., doubleToRawLongBits, (, magnitude, )]
[Double]
[magnitude]
[Double, ., doubleToRawLongBits, (, sign, )]
[Double]
[sign]
[(, m, ^, s, ), >=, 0]
[(, m, ^, s, )]
[m, ^, s]
[m]
[s]
[0]
[magnitude]
[-, magnitude]
[magnitude]
[Float, ., floatToRawIntBits, (, magnitude, )]
[Float]
[magnitude]
[Float, ., floatToRawIntBits, (, sign, )]
[Float]
[sign]
[(, m, ^, s, ), >=, 0]
[(, m, ^, s, )]
[m, ^, s]
[m]
[s]
[0]
[magnitude]
[-, magnitude]
[magnitude]
[(, int, ), (, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff, ), -, 1023]
[(, int, ), (, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff, )]
[(, (, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff, )]
[(, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, ), &, 0x7ff]
[(, Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52, )]
[Double, ., doubleToRawLongBits, (, d, ), >, >, >, 52]
[Double, ., doubleToRawLongBits, (, d, )]
[Double]
[d]
[52]
[0x7ff]
[1023]
[(, (, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, ), &, 0xff, ), -, 127]
[(, (, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, ), &, 0xff, )]
[(, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, ), &, 0xff]
[(, Float, ., floatToRawIntBits, (, f, ), >, >, >, 23, )]
[Float, ., floatToRawIntBits, (, f, ), >, >, >, 23]
[Float, ., floatToRawIntBits, (, f, )]
[Float]
[f]
[23]
[0xff]
[127]
[System, ., out]
[System]
[FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_A", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_A, )]
[FastMathCalc]
[out]
["EXP_INT_TABLE_A"]
[EXP_INT_TABLE_LEN]
[ExpIntTable, ., EXP_INT_TABLE_A]
[ExpIntTable]
[FastMathCalc, ., printarray, (, out, ,, "EXP_INT_TABLE_B", ,, EXP_INT_TABLE_LEN, ,, ExpIntTable, ., EXP_INT_TABLE_B, )]
[FastMathCalc]
[out]
["EXP_INT_TABLE_B"]
[EXP_INT_TABLE_LEN]
[ExpIntTable, ., EXP_INT_TABLE_B]
[ExpIntTable]
[FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_A", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_A, )]
[FastMathCalc]
[out]
["EXP_FRAC_TABLE_A"]
[EXP_FRAC_TABLE_LEN]
[ExpFracTable, ., EXP_FRAC_TABLE_A]
[ExpFracTable]
[FastMathCalc, ., printarray, (, out, ,, "EXP_FRAC_TABLE_B", ,, EXP_FRAC_TABLE_LEN, ,, ExpFracTable, ., EXP_FRAC_TABLE_B, )]
[FastMathCalc]
[out]
["EXP_FRAC_TABLE_B"]
[EXP_FRAC_TABLE_LEN]
[ExpFracTable, ., EXP_FRAC_TABLE_B]
[ExpFracTable]
[FastMathCalc, ., printarray, (, out, ,, "LN_MANT", ,, LN_MANT_LEN, ,, lnMant, ., LN_MANT, )]
[FastMathCalc]
[out]
["LN_MANT"]
[LN_MANT_LEN]
[lnMant, ., LN_MANT]
[lnMant]
[FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_A", ,, SINE_TABLE_LEN, ,, SINE_TABLE_A, )]
[FastMathCalc]
[out]
["SINE_TABLE_A"]
[SINE_TABLE_LEN]
[SINE_TABLE_A]
[FastMathCalc, ., printarray, (, out, ,, "SINE_TABLE_B", ,, SINE_TABLE_LEN, ,, SINE_TABLE_B, )]
[FastMathCalc]
[out]
["SINE_TABLE_B"]
[SINE_TABLE_LEN]
[SINE_TABLE_B]
[FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_A", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_A, )]
[FastMathCalc]
[out]
["COSINE_TABLE_A"]
[SINE_TABLE_LEN]
[COSINE_TABLE_A]
[FastMathCalc, ., printarray, (, out, ,, "COSINE_TABLE_B", ,, SINE_TABLE_LEN, ,, COSINE_TABLE_B, )]
[FastMathCalc]
[out]
["COSINE_TABLE_B"]
[SINE_TABLE_LEN]
[COSINE_TABLE_B]
[FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_A", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_A, )]
[FastMathCalc]
[out]
["TANGENT_TABLE_A"]
[SINE_TABLE_LEN]
[TANGENT_TABLE_A]
[FastMathCalc, ., printarray, (, out, ,, "TANGENT_TABLE_B", ,, SINE_TABLE_LEN, ,, TANGENT_TABLE_B, )]
[FastMathCalc]
[out]
["TANGENT_TABLE_B"]
[SINE_TABLE_LEN]
[TANGENT_TABLE_B]
[RECOMPUTE_TABLES_AT_RUNTIME]
[EXP_INT_TABLE_A]
[new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ]]
[FastMath, ., EXP_INT_TABLE_LEN]
[FastMath]
[EXP_INT_TABLE_B]
[new, double, [, FastMath, ., EXP_INT_TABLE_LEN, ]]
[FastMath, ., EXP_INT_TABLE_LEN]
[FastMath]
[new, double, [, 2, ]]
[2]
[new, double, [, 2, ]]
[2]
[0]
[i, <, FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[i]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[FastMath]
[i, ++]
[i]
[FastMathCalc, ., expint, (, i, ,, tmp, )]
[FastMathCalc]
[i]
[tmp]
[EXP_INT_TABLE_A, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ]]
[EXP_INT_TABLE_A]
[i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[i]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[FastMath]
[tmp, [, 0, ]]
[tmp]
[0]
[EXP_INT_TABLE_B, [, i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX, ]]
[EXP_INT_TABLE_B]
[i, +, FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[i]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[FastMath]
[tmp, [, 1, ]]
[tmp]
[1]
[i, !=, 0]
[i]
[0]
[FastMathCalc, ., splitReciprocal, (, tmp, ,, recip, )]
[FastMathCalc]
[tmp]
[recip]
[EXP_INT_TABLE_A, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ]]
[EXP_INT_TABLE_A]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[FastMath]
[i]
[recip, [, 0, ]]
[recip]
[0]
[EXP_INT_TABLE_B, [, FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i, ]]
[EXP_INT_TABLE_B]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX, -, i]
[FastMath, ., EXP_INT_TABLE_MAX_INDEX]
[FastMath]
[i]
[recip, [, 1, ]]
[recip]
[1]
[EXP_INT_TABLE_A]
[FastMathLiteralArrays, ., loadExpIntA, (, )]
[FastMathLiteralArrays]
[EXP_INT_TABLE_B]
[FastMathLiteralArrays, ., loadExpIntB, (, )]
[FastMathLiteralArrays]
[RECOMPUTE_TABLES_AT_RUNTIME]
[EXP_FRAC_TABLE_A]
[new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ]]
[FastMath, ., EXP_FRAC_TABLE_LEN]
[FastMath]
[EXP_FRAC_TABLE_B]
[new, double, [, FastMath, ., EXP_FRAC_TABLE_LEN, ]]
[FastMath, ., EXP_FRAC_TABLE_LEN]
[FastMath]
[new, double, [, 2, ]]
[2]
[1d, /, (, EXP_FRAC_TABLE_LEN, -, 1, )]
[1d]
[(, EXP_FRAC_TABLE_LEN, -, 1, )]
[EXP_FRAC_TABLE_LEN, -, 1]
[EXP_FRAC_TABLE_LEN]
[1]
[0]
[i, <, EXP_FRAC_TABLE_A, ., length]
[i]
[EXP_FRAC_TABLE_A, ., length]
[EXP_FRAC_TABLE_A]
[i, ++]
[i]
[FastMathCalc, ., slowexp, (, i, *, factor, ,, tmp, )]
[FastMathCalc]
[i, *, factor]
[i]
[factor]
[tmp]
[EXP_FRAC_TABLE_A, [, i, ]]
[EXP_FRAC_TABLE_A]
[i]
[tmp, [, 0, ]]
[tmp]
[0]
[EXP_FRAC_TABLE_B, [, i, ]]
[EXP_FRAC_TABLE_B]
[i]
[tmp, [, 1, ]]
[tmp]
[1]
[EXP_FRAC_TABLE_A]
[FastMathLiteralArrays, ., loadExpFracA, (, )]
[FastMathLiteralArrays]
[EXP_FRAC_TABLE_B]
[FastMathLiteralArrays, ., loadExpFracB, (, )]
[FastMathLiteralArrays]
[RECOMPUTE_TABLES_AT_RUNTIME]
[LN_MANT]
[new, double, [, FastMath, ., LN_MANT_LEN, ], [, ]]
[FastMath, ., LN_MANT_LEN]
[FastMath]
[0]
[i, <, LN_MANT, ., length]
[i]
[LN_MANT, ., length]
[LN_MANT]
[i, ++]
[i]
[Double, ., longBitsToDouble, (, (, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L, )]
[Double]
[(, (, (, long, ), i, ), <<, 42, ), |, 0x3ff0000000000000L]
[(, (, (, long, ), i, ), <<, 42, )]
[(, (, long, ), i, ), <<, 42]
[(, (, long, ), i, )]
[(, long, ), i]
[i]
[42]
[0x3ff0000000000000L]
[LN_MANT, [, i, ]]
[LN_MANT]
[i]
[FastMathCalc, ., slowLog, (, d, )]
[FastMathCalc]
[d]
[LN_MANT]
[FastMathLiteralArrays, ., loadLnMant, (, )]
[FastMathLiteralArrays]
[(, int, ), (, xa, *, 0.6366197723675814, )]
[(, xa, *, 0.6366197723675814, )]
[xa, *, 0.6366197723675814]
[xa]
[0.6366197723675814]
[true]
[-, k, *, 1.570796251296997]
[-, k]
[k]
[1.570796251296997]
[remA]
[xa, +, a]
[xa]
[a]
[remB]
[-, (, remA, -, xa, -, a, )]
[(, remA, -, xa, -, a, )]
[remA, -, xa, -, a]
[remA, -, xa]
[remA]
[xa]
[a]
[a]
[-, k, *, 7.549789948768648E-8]
[-, k]
[k]
[7.549789948768648E-8]
[remA]
[remA]
[a, +, b]
[a]
[b]
[remB]
[-, (, remA, -, b, -, a, )]
[(, remA, -, b, -, a, )]
[remA, -, b, -, a]
[remA, -, b]
[remA]
[b]
[a]
[a]
[-, k, *, 6.123233995736766E-17]
[-, k]
[k]
[6.123233995736766E-17]
[b]
[remA]
[remA]
[a, +, b]
[a]
[b]
[remB]
[-, (, remA, -, b, -, a, )]
[(, remA, -, b, -, a, )]
[remA, -, b, -, a]
[remA, -, b]
[remA]
[b]
[a]
[remA, >, 0]
[remA]
[0]
[--, k]
[k]
[this, ., finalK]
[this]
[k]
[this, ., finalRemA]
[this]
[remA]
[this, ., finalRemB]
[this]
[remB]
[finalK]
[finalRemA]
[finalRemB]
