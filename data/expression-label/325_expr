[new, Comparator, <, DiGraphNode, <, Node, ,, Branch, >, >, (, ), {, @, Override, public, int, compare, (, DiGraphNode, <, Node, ,, Branch, >, a, ,, DiGraphNode, <, Node, ,, Branch, >, b, ), {, return, astPosition, ., get, (, a, ., getValue, (, ), ), -, astPosition, ., get, (, b, ., getValue, (, ), ), ;, }, }]
[astPosition, ., get, (, a, ., getValue, (, ), ), -, astPosition, ., get, (, b, ., getValue, (, ), )]
[astPosition, ., get, (, a, ., getValue, (, ), )]
[astPosition]
[a, ., getValue, (, )]
[a]
[astPosition, ., get, (, b, ., getValue, (, ), )]
[astPosition]
[b, ., getValue, (, )]
[b]
[new, ArrayDeque, <, Node, >, (, )]
[HashMultimap, ., create, (, )]
[HashMultimap]
[this, ., compiler]
[this]
[compiler]
[this, ., shouldTraverseFunctions]
[this]
[shouldTraverseFunctions]
[this, ., edgeAnnotations]
[this]
[edgeAnnotations]
[cfg]
[this, ., root]
[this]
[root]
[astPositionCounter]
[0]
[astPosition]
[Maps, ., newHashMap, (, )]
[Maps]
[nodePriorities]
[Maps, ., newHashMap, (, )]
[Maps]
[cfg]
[new, AstControlFlowGraph, (, computeFallThrough, (, root, ), ,, nodePriorities, ,, edgeAnnotations, )]
[computeFallThrough, (, root, )]
[root]
[nodePriorities]
[edgeAnnotations]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[astPosition, ., put, (, null, ,, ++, astPositionCounter, )]
[astPosition]
[null]
[++, astPositionCounter]
[astPositionCounter]
[priorityCounter]
[0]
[cfg, ., getEntry, (, )]
[cfg]
[prioritizeFromEntryNode, (, entry, )]
[entry]
[shouldTraverseFunctions]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[candidate, ., getValue, (, )]
[candidate]
[value, !=, null, &&, value, ., isFunction, (, )]
[value, !=, null]
[value]
[null]
[value, ., isFunction, (, )]
[value]
[Preconditions, ., checkState, (, !, nodePriorities, ., containsKey, (, candidate, ), ||, candidate, ==, entry, )]
[Preconditions]
[!, nodePriorities, ., containsKey, (, candidate, ), ||, candidate, ==, entry]
[!, nodePriorities, ., containsKey, (, candidate, )]
[nodePriorities, ., containsKey, (, candidate, )]
[nodePriorities]
[candidate]
[candidate, ==, entry]
[candidate]
[entry]
[prioritizeFromEntryNode, (, candidate, )]
[candidate]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[!, nodePriorities, ., containsKey, (, candidate, )]
[nodePriorities, ., containsKey, (, candidate, )]
[nodePriorities]
[candidate]
[nodePriorities, ., put, (, candidate, ,, ++, priorityCounter, )]
[nodePriorities]
[candidate]
[++, priorityCounter]
[priorityCounter]
[nodePriorities, ., put, (, cfg, ., getImplicitReturn, (, ), ,, ++, priorityCounter, )]
[nodePriorities]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[++, priorityCounter]
[priorityCounter]
[new, PriorityQueue, <, DiGraphNode, <, Node, ,, Branch, >, >, (, 10, ,, priorityComparator, )]
[10]
[priorityComparator]
[worklist, ., add, (, entry, )]
[worklist]
[entry]
[!, worklist, ., isEmpty, (, )]
[worklist, ., isEmpty, (, )]
[worklist]
[worklist, ., remove, (, )]
[worklist]
[nodePriorities, ., containsKey, (, current, )]
[nodePriorities]
[current]
[nodePriorities, ., put, (, current, ,, ++, priorityCounter, )]
[nodePriorities]
[current]
[++, priorityCounter]
[priorityCounter]
[cfg, ., getDirectedSuccNodes, (, current, )]
[cfg]
[current]
[successors]
[worklist, ., add, (, candidate, )]
[worklist]
[candidate]
[astPosition, ., put, (, n, ,, astPositionCounter, ++, )]
[astPosition]
[n]
[astPositionCounter, ++]
[astPositionCounter]
[n, ., getType, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[shouldTraverseFunctions, ||, n, ==, cfg, ., getEntry, (, ), ., getValue, (, )]
[shouldTraverseFunctions]
[n, ==, cfg, ., getEntry, (, ), ., getValue, (, )]
[n]
[cfg, ., getEntry, (, ), ., getValue, (, )]
[cfg, ., getEntry, (, )]
[cfg]
[exceptionHandler, ., push, (, n, )]
[exceptionHandler]
[n]
[true]
[false]
[Token, ., TRY]
[Token]
[exceptionHandler, ., push, (, n, )]
[exceptionHandler]
[n]
[true]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., FOR]
[Token]
[n, ==, parent, ., getLastChild, (, )]
[n]
[parent, ., getLastChild, (, )]
[parent]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., WITH]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., DO]
[Token]
[n, !=, parent, ., getFirstChild, (, ), ., getNext, (, )]
[n]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., SWITCH]
[Token]
[Token, ., CASE]
[Token]
[Token, ., CATCH]
[Token]
[Token, ., LABEL]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., FUNCTION]
[Token]
[n, ==, parent, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[n]
[parent, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., CONTINUE]
[Token]
[Token, ., BREAK]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., VAR]
[Token]
[Token, ., RETURN]
[Token]
[Token, ., THROW]
[Token]
[false]
[Token, ., TRY]
[Token]
[n, ==, parent, ., getFirstChild, (, ), ., getNext, (, )]
[n]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[Preconditions, ., checkState, (, exceptionHandler, ., peek, (, ), ==, parent, )]
[Preconditions]
[exceptionHandler, ., peek, (, ), ==, parent]
[exceptionHandler, ., peek, (, )]
[exceptionHandler]
[parent]
[exceptionHandler, ., pop, (, )]
[exceptionHandler]
[true]
[n, ., getType, (, )]
[n]
[Token, ., IF]
[Token]
[handleIf, (, n, )]
[n]
[Token, ., WHILE]
[Token]
[handleWhile, (, n, )]
[n]
[Token, ., DO]
[Token]
[handleDo, (, n, )]
[n]
[Token, ., FOR]
[Token]
[handleFor, (, n, )]
[n]
[Token, ., SWITCH]
[Token]
[handleSwitch, (, n, )]
[n]
[Token, ., CASE]
[Token]
[handleCase, (, n, )]
[n]
[Token, ., DEFAULT_CASE]
[Token]
[handleDefault, (, n, )]
[n]
[Token, ., BLOCK]
[Token]
[Token, ., SCRIPT]
[Token]
[handleStmtList, (, n, )]
[n]
[Token, ., FUNCTION]
[Token]
[handleFunction, (, n, )]
[n]
[Token, ., EXPR_RESULT]
[Token]
[handleExpr, (, n, )]
[n]
[Token, ., THROW]
[Token]
[handleThrow, (, n, )]
[n]
[Token, ., TRY]
[Token]
[handleTry, (, n, )]
[n]
[Token, ., CATCH]
[Token]
[handleCatch, (, n, )]
[n]
[Token, ., BREAK]
[Token]
[handleBreak, (, n, )]
[n]
[Token, ., CONTINUE]
[Token]
[handleContinue, (, n, )]
[n]
[Token, ., RETURN]
[Token]
[handleReturn, (, n, )]
[n]
[Token, ., WITH]
[Token]
[handleWith, (, n, )]
[n]
[Token, ., LABEL]
[Token]
[handleStmt, (, n, )]
[n]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[thenBlock, ., getNext, (, )]
[thenBlock]
[createEdge, (, node, ,, Branch, ., ON_TRUE, ,, computeFallThrough, (, thenBlock, ), )]
[node]
[Branch, ., ON_TRUE]
[Branch]
[computeFallThrough, (, thenBlock, )]
[thenBlock]
[elseBlock, ==, null]
[elseBlock]
[null]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, computeFallThrough, (, elseBlock, ), )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[computeFallThrough, (, elseBlock, )]
[elseBlock]
[connectToPossibleExceptionHandler, (, node, ,, NodeUtil, ., getConditionExpression, (, node, ), )]
[node]
[NodeUtil, ., getConditionExpression, (, node, )]
[NodeUtil]
[node]
[createEdge, (, node, ,, Branch, ., ON_TRUE, ,, computeFallThrough, (, node, ., getFirstChild, (, ), ., getNext, (, ), ), )]
[node]
[Branch, ., ON_TRUE]
[Branch]
[computeFallThrough, (, node, ., getFirstChild, (, ), ., getNext, (, ), )]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, NodeUtil, ., getConditionExpression, (, node, ), )]
[node]
[NodeUtil, ., getConditionExpression, (, node, )]
[NodeUtil]
[node]
[createEdge, (, node, ,, Branch, ., ON_TRUE, ,, computeFallThrough, (, node, ., getFirstChild, (, ), ), )]
[node]
[Branch, ., ON_TRUE]
[Branch]
[computeFallThrough, (, node, ., getFirstChild, (, ), )]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, NodeUtil, ., getConditionExpression, (, node, ), )]
[node]
[NodeUtil, ., getConditionExpression, (, node, )]
[NodeUtil]
[node]
[forNode, ., getChildCount, (, ), ==, 4]
[forNode, ., getChildCount, (, )]
[forNode]
[4]
[forNode, ., getFirstChild, (, )]
[forNode]
[init, ., getNext, (, )]
[init]
[cond, ., getNext, (, )]
[cond]
[iter, ., getNext, (, )]
[iter]
[createEdge, (, init, ,, Branch, ., UNCOND, ,, forNode, )]
[init]
[Branch, ., UNCOND]
[Branch]
[forNode]
[createEdge, (, forNode, ,, Branch, ., ON_TRUE, ,, computeFallThrough, (, body, ), )]
[forNode]
[Branch, ., ON_TRUE]
[Branch]
[computeFallThrough, (, body, )]
[body]
[createEdge, (, forNode, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, forNode, ,, this, ), )]
[forNode]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, forNode, ,, this, )]
[forNode]
[this]
[createEdge, (, iter, ,, Branch, ., UNCOND, ,, forNode, )]
[iter]
[Branch, ., UNCOND]
[Branch]
[forNode]
[connectToPossibleExceptionHandler, (, init, ,, init, )]
[init]
[init]
[connectToPossibleExceptionHandler, (, forNode, ,, cond, )]
[forNode]
[cond]
[connectToPossibleExceptionHandler, (, iter, ,, iter, )]
[iter]
[iter]
[forNode, ., getFirstChild, (, )]
[forNode]
[item, ., getNext, (, )]
[item]
[collection, ., getNext, (, )]
[collection]
[createEdge, (, collection, ,, Branch, ., UNCOND, ,, forNode, )]
[collection]
[Branch, ., UNCOND]
[Branch]
[forNode]
[createEdge, (, forNode, ,, Branch, ., ON_TRUE, ,, computeFallThrough, (, body, ), )]
[forNode]
[Branch, ., ON_TRUE]
[Branch]
[computeFallThrough, (, body, )]
[body]
[createEdge, (, forNode, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, forNode, ,, this, ), )]
[forNode]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, forNode, ,, this, )]
[forNode]
[this]
[connectToPossibleExceptionHandler, (, forNode, ,, collection, )]
[forNode]
[collection]
[getNextSiblingOfType, (, node, ., getFirstChild, (, ), ., getNext, (, ), ,, Token, ., CASE, ,, Token, ., EMPTY, )]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[Token, ., CASE]
[Token]
[Token, ., EMPTY]
[Token]
[next, !=, null]
[next]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, next, )]
[node]
[Branch, ., UNCOND]
[Branch]
[next]
[node, ., getFirstChild, (, ), ., getNext, (, ), !=, null]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, node, ., getFirstChild, (, ), ., getNext, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, node, ., getFirstChild, (, ), )]
[node]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., ON_TRUE, ,, node, ., getFirstChild, (, ), ., getNext, (, ), )]
[node]
[Branch, ., ON_TRUE]
[Branch]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[getNextSiblingOfType, (, node, ., getNext, (, ), ,, Token, ., CASE, )]
[node, ., getNext, (, )]
[node]
[Token, ., CASE]
[Token]
[next, !=, null]
[next]
[null]
[Preconditions, ., checkState, (, next, ., isCase, (, ), )]
[Preconditions]
[next, ., isCase, (, )]
[next]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, next, )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[next]
[node, ., getParent, (, )]
[node]
[getNextSiblingOfType, (, parent, ., getFirstChild, (, ), ., getNext, (, ), ,, Token, ., DEFAULT_CASE, )]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., DEFAULT_CASE]
[Token]
[deflt, !=, null]
[deflt]
[null]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, deflt, )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[deflt]
[createEdge, (, node, ,, Branch, ., ON_FALSE, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., ON_FALSE]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, node, ., getFirstChild, (, ), )]
[node]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, node, ., getFirstChild, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, node, ., getLastChild, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[node, ., getLastChild, (, )]
[node]
[connectToPossibleExceptionHandler, (, node, ,, node, ., getFirstChild, (, ), )]
[node]
[node, ., getFirstChild, (, )]
[node]
[node, ., getParent, (, )]
[node]
[node, ., isBlock, (, ), &&, parent, !=, null, &&, parent, ., isTry, (, ), &&, NodeUtil, ., getCatchBlock, (, parent, ), ==, node, &&, !, NodeUtil, ., hasCatchHandler, (, node, )]
[node, ., isBlock, (, ), &&, parent, !=, null, &&, parent, ., isTry, (, ), &&, NodeUtil, ., getCatchBlock, (, parent, ), ==, node]
[node, ., isBlock, (, ), &&, parent, !=, null, &&, parent, ., isTry, (, )]
[node, ., isBlock, (, ), &&, parent, !=, null]
[node, ., isBlock, (, )]
[node]
[parent, !=, null]
[parent]
[null]
[parent, ., isTry, (, )]
[parent]
[NodeUtil, ., getCatchBlock, (, parent, ), ==, node]
[NodeUtil, ., getCatchBlock, (, parent, )]
[NodeUtil]
[parent]
[node]
[!, NodeUtil, ., hasCatchHandler, (, node, )]
[NodeUtil, ., hasCatchHandler, (, node, )]
[NodeUtil]
[node]
[node, ., getFirstChild, (, )]
[node]
[child, !=, null, &&, child, ., isFunction, (, )]
[child, !=, null]
[child]
[null]
[child, ., isFunction, (, )]
[child]
[child]
[child, ., getNext, (, )]
[child]
[child, !=, null]
[child]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFallThrough, (, child, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFallThrough, (, child, )]
[child]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., DEFAULT_CASE]
[Token]
[Token, ., CASE]
[Token]
[Token, ., TRY]
[Token]
[node, ., isBlock, (, ), &&, node, ., isSyntheticBlock, (, )]
[node, ., isBlock, (, )]
[node]
[node, ., isSyntheticBlock, (, )]
[node]
[createEdge, (, node, ,, Branch, ., SYN_BLOCK, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., SYN_BLOCK]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[Preconditions, ., checkState, (, node, ., getChildCount, (, ), >=, 3, )]
[Preconditions]
[node, ., getChildCount, (, ), >=, 3]
[node, ., getChildCount, (, )]
[node]
[3]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFallThrough, (, node, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFallThrough, (, node, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), )]
[node, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, ), ., getNext, (, )]
[node, ., getFirstChild, (, )]
[node]
[Preconditions, ., checkState, (, exceptionHandler, ., peek, (, ), ==, node, )]
[Preconditions]
[exceptionHandler, ., peek, (, ), ==, node]
[exceptionHandler, ., peek, (, )]
[exceptionHandler]
[node]
[exceptionHandler, ., pop, (, )]
[exceptionHandler]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, node, )]
[node]
[node]
[connectToPossibleExceptionHandler, (, node, ,, node, )]
[node]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, node, ., getFirstChild, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[node, ., getFirstChild, (, )]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, node, ., getLastChild, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[node, ., getLastChild, (, )]
[node]
[null]
[node, ., hasChildren, (, )]
[node]
[label]
[node, ., getFirstChild, (, ), ., getString, (, )]
[node, ., getFirstChild, (, )]
[node]
[null]
[node, ., getParent, (, )]
[node]
[cur]
[node]
[lastJump]
[node]
[!, isBreakTarget, (, cur, ,, label, )]
[isBreakTarget, (, cur, ,, label, )]
[cur]
[label]
[cur]
[parent]
[parent]
[parent, ., getParent, (, )]
[parent]
[cur, ., isTry, (, ), &&, NodeUtil, ., hasFinally, (, cur, ), &&, cur, ., getLastChild, (, ), !=, previous]
[cur, ., isTry, (, ), &&, NodeUtil, ., hasFinally, (, cur, )]
[cur, ., isTry, (, )]
[cur]
[NodeUtil, ., hasFinally, (, cur, )]
[NodeUtil]
[cur]
[cur, ., getLastChild, (, ), !=, previous]
[cur, ., getLastChild, (, )]
[cur]
[previous]
[lastJump, ==, node]
[lastJump]
[node]
[createEdge, (, lastJump, ,, Branch, ., UNCOND, ,, computeFallThrough, (, cur, ., getLastChild, (, ), ), )]
[lastJump]
[Branch, ., UNCOND]
[Branch]
[computeFallThrough, (, cur, ., getLastChild, (, ), )]
[cur, ., getLastChild, (, )]
[cur]
[finallyMap, ., put, (, lastJump, ,, computeFallThrough, (, cur, ., getLastChild, (, ), ), )]
[finallyMap]
[lastJump]
[computeFallThrough, (, cur, ., getLastChild, (, ), )]
[cur, ., getLastChild, (, )]
[cur]
[lastJump]
[cur]
[parent, ==, null]
[parent]
[null]
[compiler, ., isIdeMode, (, )]
[compiler]
[new, IllegalStateException, (, "Cannot find break target.", )]
["Cannot find break target."]
[previous]
[cur]
[lastJump, ==, node]
[lastJump]
[node]
[createEdge, (, lastJump, ,, Branch, ., UNCOND, ,, computeFollowNode, (, cur, ,, this, ), )]
[lastJump]
[Branch, ., UNCOND]
[Branch]
[computeFollowNode, (, cur, ,, this, )]
[cur]
[this]
[finallyMap, ., put, (, lastJump, ,, computeFollowNode, (, cur, ,, this, ), )]
[finallyMap]
[lastJump]
[computeFollowNode, (, cur, ,, this, )]
[cur]
[this]
[null]
[node, ., hasChildren, (, )]
[node]
[label]
[node, ., getFirstChild, (, ), ., getString, (, )]
[node, ., getFirstChild, (, )]
[node]
[null]
[node, ., getParent, (, )]
[node]
[cur]
[node]
[lastJump]
[node]
[!, isContinueTarget, (, cur, ,, parent, ,, label, )]
[isContinueTarget, (, cur, ,, parent, ,, label, )]
[cur]
[parent]
[label]
[cur]
[parent]
[parent]
[parent, ., getParent, (, )]
[parent]
[cur, ., isTry, (, ), &&, NodeUtil, ., hasFinally, (, cur, ), &&, cur, ., getLastChild, (, ), !=, previous]
[cur, ., isTry, (, ), &&, NodeUtil, ., hasFinally, (, cur, )]
[cur, ., isTry, (, )]
[cur]
[NodeUtil, ., hasFinally, (, cur, )]
[NodeUtil]
[cur]
[cur, ., getLastChild, (, ), !=, previous]
[cur, ., getLastChild, (, )]
[cur]
[previous]
[lastJump, ==, node]
[lastJump]
[node]
[createEdge, (, lastJump, ,, Branch, ., UNCOND, ,, cur, ., getLastChild, (, ), )]
[lastJump]
[Branch, ., UNCOND]
[Branch]
[cur, ., getLastChild, (, )]
[cur]
[finallyMap, ., put, (, lastJump, ,, computeFallThrough, (, cur, ., getLastChild, (, ), ), )]
[finallyMap]
[lastJump]
[computeFallThrough, (, cur, ., getLastChild, (, ), )]
[cur, ., getLastChild, (, )]
[cur]
[lastJump]
[cur]
[Preconditions, ., checkState, (, parent, !=, null, ,, "Cannot find continue target.", )]
[Preconditions]
[parent, !=, null]
[parent]
[null]
["Cannot find continue target."]
[previous]
[cur]
[cur]
[cur, ., getChildCount, (, ), ==, 4]
[cur, ., getChildCount, (, )]
[cur]
[4]
[iter]
[cur, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[cur, ., getFirstChild, (, ), ., getNext, (, )]
[cur, ., getFirstChild, (, )]
[cur]
[lastJump, ==, node]
[lastJump]
[node]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, iter, )]
[node]
[Branch, ., UNCOND]
[Branch]
[iter]
[finallyMap, ., put, (, lastJump, ,, iter, )]
[finallyMap]
[lastJump]
[iter]
[null]
[exceptionHandler, ., iterator, (, )]
[exceptionHandler]
[iter, ., hasNext, (, )]
[iter]
[iter, ., next, (, )]
[iter]
[curHandler, ., isFunction, (, )]
[curHandler]
[NodeUtil, ., hasFinally, (, curHandler, )]
[NodeUtil]
[curHandler]
[lastJump, ==, null]
[lastJump]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, curHandler, ., getLastChild, (, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[curHandler, ., getLastChild, (, )]
[curHandler]
[finallyMap, ., put, (, lastJump, ,, computeFallThrough, (, curHandler, ., getLastChild, (, ), ), )]
[finallyMap]
[lastJump]
[computeFallThrough, (, curHandler, ., getLastChild, (, ), )]
[curHandler, ., getLastChild, (, )]
[curHandler]
[lastJump]
[curHandler]
[node, ., hasChildren, (, )]
[node]
[connectToPossibleExceptionHandler, (, node, ,, node, ., getFirstChild, (, ), )]
[node]
[node, ., getFirstChild, (, )]
[node]
[lastJump, ==, null]
[lastJump]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, null, )]
[node]
[Branch, ., UNCOND]
[Branch]
[null]
[finallyMap, ., put, (, lastJump, ,, null, )]
[finallyMap]
[lastJump]
[null]
[createEdge, (, node, ,, Branch, ., UNCOND, ,, computeFollowNode, (, node, ,, this, ), )]
[node]
[Branch, ., UNCOND]
[Branch]
[computeFollowNode, (, node, ,, this, )]
[node]
[this]
[connectToPossibleExceptionHandler, (, node, ,, node, )]
[node]
[node]
[computeFollowNode, (, node, ,, node, ,, cfa, )]
[node]
[node]
[cfa]
[computeFollowNode, (, node, ,, node, ,, null, )]
[node]
[node]
[null]
[node, ., getParent, (, )]
[node]
[parent, ==, null, ||, parent, ., isFunction, (, ), ||, (, cfa, !=, null, &&, node, ==, cfa, ., root, )]
[parent, ==, null, ||, parent, ., isFunction, (, )]
[parent, ==, null]
[parent]
[null]
[parent, ., isFunction, (, )]
[parent]
[(, cfa, !=, null, &&, node, ==, cfa, ., root, )]
[cfa, !=, null, &&, node, ==, cfa, ., root]
[cfa, !=, null]
[cfa]
[null]
[node, ==, cfa, ., root]
[node]
[cfa, ., root]
[cfa]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., IF]
[Token]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[Token, ., CASE]
[Token]
[Token, ., DEFAULT_CASE]
[Token]
[parent, ., getNext, (, ), !=, null]
[parent, ., getNext, (, )]
[parent]
[null]
[parent, ., getNext, (, ), ., isCase, (, )]
[parent, ., getNext, (, )]
[parent]
[parent, ., getNext, (, ), ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getNext, (, ), ., getFirstChild, (, )]
[parent, ., getNext, (, )]
[parent]
[parent, ., getNext, (, ), ., isDefaultCase, (, )]
[parent, ., getNext, (, )]
[parent]
[parent, ., getNext, (, ), ., getFirstChild, (, )]
[parent, ., getNext, (, )]
[parent]
[Preconditions, ., checkState, (, false, ,, "Not reachable", )]
[Preconditions]
[false]
["Not reachable"]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[parent]
[parent, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, ), ., getNext, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[parent]
[Token, ., TRY]
[Token]
[parent, ., getFirstChild, (, ), ==, node]
[parent, ., getFirstChild, (, )]
[parent]
[node]
[NodeUtil, ., hasFinally, (, parent, )]
[NodeUtil]
[parent]
[computeFallThrough, (, parent, ., getLastChild, (, ), )]
[parent, ., getLastChild, (, )]
[parent]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[NodeUtil, ., getCatchBlock, (, parent, ), ==, node]
[NodeUtil, ., getCatchBlock, (, parent, )]
[NodeUtil]
[parent]
[node]
[NodeUtil, ., hasFinally, (, parent, )]
[NodeUtil]
[parent]
[computeFallThrough, (, node, ., getNext, (, ), )]
[node, ., getNext, (, )]
[node]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[parent, ., getLastChild, (, ), ==, node]
[parent, ., getLastChild, (, )]
[parent]
[node]
[cfa, !=, null]
[cfa]
[null]
[cfa, ., finallyMap, ., get, (, parent, )]
[cfa, ., finallyMap]
[cfa]
[parent]
[cfa, ., createEdge, (, fromNode, ,, Branch, ., ON_EX, ,, finallyNode, )]
[cfa]
[fromNode]
[Branch, ., ON_EX]
[Branch]
[finallyNode]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[node, ., getNext, (, )]
[node]
[nextSibling, !=, null, &&, nextSibling, ., isFunction, (, )]
[nextSibling, !=, null]
[nextSibling]
[null]
[nextSibling, ., isFunction, (, )]
[nextSibling]
[nextSibling]
[nextSibling, ., getNext, (, )]
[nextSibling]
[nextSibling, !=, null]
[nextSibling]
[null]
[computeFallThrough, (, nextSibling, )]
[nextSibling]
[computeFollowNode, (, fromNode, ,, parent, ,, cfa, )]
[fromNode]
[parent]
[cfa]
[n, ., getType, (, )]
[n]
[Token, ., DO]
[Token]
[computeFallThrough, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[computeFallThrough, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., LABEL]
[Token]
[computeFallThrough, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[n]
[cfg, ., createNode, (, fromNode, )]
[cfg]
[fromNode]
[cfg, ., createNode, (, toNode, )]
[cfg]
[toNode]
[cfg, ., connectIfNotFound, (, fromNode, ,, branch, ,, toNode, )]
[cfg]
[fromNode]
[branch]
[toNode]
[mayThrowException, (, target, ), &&, !, exceptionHandler, ., isEmpty, (, )]
[mayThrowException, (, target, )]
[target]
[!, exceptionHandler, ., isEmpty, (, )]
[exceptionHandler, ., isEmpty, (, )]
[exceptionHandler]
[cfgNode]
[exceptionHandler]
[handler, ., isFunction, (, )]
[handler]
[Preconditions, ., checkState, (, handler, ., isTry, (, ), )]
[Preconditions]
[handler, ., isTry, (, )]
[handler]
[NodeUtil, ., getCatchBlock, (, handler, )]
[NodeUtil]
[handler]
[!, NodeUtil, ., hasCatchHandler, (, catchBlock, )]
[NodeUtil, ., hasCatchHandler, (, catchBlock, )]
[NodeUtil]
[catchBlock]
[lastJump, ==, cfgNode]
[lastJump]
[cfgNode]
[createEdge, (, cfgNode, ,, Branch, ., ON_EX, ,, handler, ., getLastChild, (, ), )]
[cfgNode]
[Branch, ., ON_EX]
[Branch]
[handler, ., getLastChild, (, )]
[handler]
[finallyMap, ., put, (, lastJump, ,, handler, ., getLastChild, (, ), )]
[finallyMap]
[lastJump]
[handler, ., getLastChild, (, )]
[handler]
[lastJump, ==, cfgNode]
[lastJump]
[cfgNode]
[createEdge, (, cfgNode, ,, Branch, ., ON_EX, ,, catchBlock, )]
[cfgNode]
[Branch, ., ON_EX]
[Branch]
[catchBlock]
[finallyMap, ., put, (, lastJump, ,, catchBlock, )]
[finallyMap]
[lastJump]
[catchBlock]
[lastJump]
[handler]
[first]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[types]
[c, ., getType, (, ), ==, type]
[c, ., getType, (, )]
[c]
[type]
[c]
[null]
[isBreakStructure, (, target, ,, label, !=, null, ), &&, matchLabel, (, target, ., getParent, (, ), ,, label, )]
[isBreakStructure, (, target, ,, label, !=, null, )]
[target]
[label, !=, null]
[label]
[null]
[matchLabel, (, target, ., getParent, (, ), ,, label, )]
[target, ., getParent, (, )]
[target]
[label]
[isContinueStructure, (, target, ), &&, matchLabel, (, parent, ,, label, )]
[isContinueStructure, (, target, )]
[target]
[matchLabel, (, parent, ,, label, )]
[parent]
[label]
[label, ==, null]
[label]
[null]
[true]
[target, ., isLabel, (, )]
[target]
[target, ., getFirstChild, (, ), ., getString, (, ), ., equals, (, label, )]
[target, ., getFirstChild, (, ), ., getString, (, )]
[target, ., getFirstChild, (, )]
[target]
[label]
[true]
[target]
[target, ., getParent, (, )]
[target]
[false]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[Token, ., THROW]
[Token]
[Token, ., NEW]
[Token]
[Token, ., ASSIGN]
[Token]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[Token, ., INSTANCEOF]
[Token]
[true]
[Token, ., FUNCTION]
[Token]
[false]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, ), &&, mayThrowException, (, c, )]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph]
[c]
[mayThrowException, (, c, )]
[c]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., FOR]
[Token]
[Token, ., DO]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., SWITCH]
[Token]
[true]
[Token, ., BLOCK]
[Token]
[Token, ., IF]
[Token]
[Token, ., TRY]
[Token]
[labeled]
[false]
[n, ., getType, (, )]
[n]
[Token, ., FOR]
[Token]
[Token, ., DO]
[Token]
[Token, ., WHILE]
[Token]
[true]
[false]
[n]
[!, cur, ., isScript, (, ), &&, !, cur, ., isFunction, (, )]
[!, cur, ., isScript, (, )]
[cur, ., isScript, (, )]
[cur]
[!, cur, ., isFunction, (, )]
[cur, ., isFunction, (, )]
[cur]
[cur]
[cur, ., getParent, (, )]
[cur]
[getCatchHandlerForBlock, (, cur, )]
[cur]
[catchNode, !=, null]
[catchNode]
[null]
[catchNode]
[null]
[block, ., isBlock, (, ), &&, block, ., getParent, (, ), ., isTry, (, ), &&, block, ., getParent, (, ), ., getFirstChild, (, ), ==, block]
[block, ., isBlock, (, ), &&, block, ., getParent, (, ), ., isTry, (, )]
[block, ., isBlock, (, )]
[block]
[block, ., getParent, (, ), ., isTry, (, )]
[block, ., getParent, (, )]
[block]
[block, ., getParent, (, ), ., getFirstChild, (, ), ==, block]
[block, ., getParent, (, ), ., getFirstChild, (, )]
[block, ., getParent, (, )]
[block]
[block]
[block, ., getNext, (, )]
[block]
[s, !=, null]
[s]
[null]
[s]
[s, ., getNext, (, )]
[s]
[NodeUtil, ., hasCatchHandler, (, s, )]
[NodeUtil]
[s]
[s, ., getFirstChild, (, )]
[s]
[null]
[entry]
[true]
[edgeAnnotations]
[this, ., priorities]
[this]
[priorities]
[isForward]
[new, Comparator, <, DiGraphNode, <, Node, ,, Branch, >, >, (, ), {, @, Override, public, int, compare, (, DiGraphNode, <, Node, ,, Branch, >, n1, ,, DiGraphNode, <, Node, ,, Branch, >, n2, ), {, return, getPosition, (, n1, ), -, getPosition, (, n2, ), ;, }, }]
[getPosition, (, n1, ), -, getPosition, (, n2, )]
[getPosition, (, n1, )]
[n1]
[getPosition, (, n2, )]
[n2]
[new, Comparator, <, DiGraphNode, <, Node, ,, Branch, >, >, (, ), {, @, Override, public, int, compare, (, DiGraphNode, <, Node, ,, Branch, >, n1, ,, DiGraphNode, <, Node, ,, Branch, >, n2, ), {, return, getPosition, (, n2, ), -, getPosition, (, n1, ), ;, }, }]
[getPosition, (, n2, ), -, getPosition, (, n1, )]
[getPosition, (, n2, )]
[n2]
[getPosition, (, n1, )]
[n1]
[priorities, ., get, (, n, )]
[priorities]
[n]
[Preconditions, ., checkNotNull, (, priority, )]
[Preconditions]
[priority]
[priority]
