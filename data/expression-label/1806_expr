[1000]
[60, *, MILLIS_PER_SECOND]
[60]
[MILLIS_PER_SECOND]
[60, *, MILLIS_PER_MINUTE]
[60]
[MILLIS_PER_MINUTE]
[24, *, MILLIS_PER_HOUR]
[24]
[MILLIS_PER_HOUR]
[1001]
[{, {, Calendar, ., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }]
[{, Calendar, ., MILLISECOND, }]
[Calendar, ., MILLISECOND]
[Calendar]
[{, Calendar, ., SECOND, }]
[Calendar, ., SECOND]
[Calendar]
[{, Calendar, ., MINUTE, }]
[Calendar, ., MINUTE]
[Calendar]
[{, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[Calendar, ., HOUR]
[Calendar]
[{, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }]
[Calendar, ., DATE]
[Calendar]
[Calendar, ., DAY_OF_MONTH]
[Calendar]
[Calendar, ., AM_PM]
[Calendar]
[{, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }]
[Calendar, ., MONTH]
[Calendar]
[DateUtils, ., SEMI_MONTH]
[DateUtils]
[{, Calendar, ., YEAR, }]
[Calendar, ., YEAR]
[Calendar]
[{, Calendar, ., ERA, }]
[Calendar, ., ERA]
[Calendar]
[1]
[2]
[3]
[4]
[5]
[6]
[0]
[1]
[2]
[date1, ==, null, ||, date2, ==, null]
[date1, ==, null]
[date1]
[null]
[date2, ==, null]
[date2]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[cal1, ., setTime, (, date1, )]
[cal1]
[date1]
[Calendar, ., getInstance, (, )]
[Calendar]
[cal2, ., setTime, (, date2, )]
[cal2]
[date2]
[isSameDay, (, cal1, ,, cal2, )]
[cal1]
[cal2]
[cal1, ==, null, ||, cal2, ==, null]
[cal1, ==, null]
[cal1]
[null]
[cal2, ==, null]
[cal2]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[(, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), )]
[cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, )]
[cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, )]
[cal1, ., get, (, Calendar, ., ERA, )]
[cal1]
[Calendar, ., ERA]
[Calendar]
[cal2, ., get, (, Calendar, ., ERA, )]
[cal2]
[Calendar, ., ERA]
[Calendar]
[cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, )]
[cal1, ., get, (, Calendar, ., YEAR, )]
[cal1]
[Calendar, ., YEAR]
[Calendar]
[cal2, ., get, (, Calendar, ., YEAR, )]
[cal2]
[Calendar, ., YEAR]
[Calendar]
[cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal2]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[date1, ==, null, ||, date2, ==, null]
[date1, ==, null]
[date1]
[null]
[date2, ==, null]
[date2]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[date1, ., getTime, (, ), ==, date2, ., getTime, (, )]
[date1, ., getTime, (, )]
[date1]
[date2, ., getTime, (, )]
[date2]
[cal1, ==, null, ||, cal2, ==, null]
[cal1, ==, null]
[cal1]
[null]
[cal2, ==, null]
[cal2]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[cal1, ., getTime, (, ), ., getTime, (, ), ==, cal2, ., getTime, (, ), ., getTime, (, )]
[cal1, ., getTime, (, ), ., getTime, (, )]
[cal1, ., getTime, (, )]
[cal1]
[cal2, ., getTime, (, ), ., getTime, (, )]
[cal2, ., getTime, (, )]
[cal2]
[cal1, ==, null, ||, cal2, ==, null]
[cal1, ==, null]
[cal1]
[null]
[cal2, ==, null]
[cal2]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[(, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, )]
[cal1, ., get, (, Calendar, ., MILLISECOND, )]
[cal1]
[Calendar, ., MILLISECOND]
[Calendar]
[cal2, ., get, (, Calendar, ., MILLISECOND, )]
[cal2]
[Calendar, ., MILLISECOND]
[Calendar]
[cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, )]
[cal1, ., get, (, Calendar, ., SECOND, )]
[cal1]
[Calendar, ., SECOND]
[Calendar]
[cal2, ., get, (, Calendar, ., SECOND, )]
[cal2]
[Calendar, ., SECOND]
[Calendar]
[cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, )]
[cal1, ., get, (, Calendar, ., MINUTE, )]
[cal1]
[Calendar, ., MINUTE]
[Calendar]
[cal2, ., get, (, Calendar, ., MINUTE, )]
[cal2]
[Calendar, ., MINUTE]
[Calendar]
[cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[cal1, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[cal1]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[cal2, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[cal2]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal1]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[cal2, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[cal2]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, )]
[cal1, ., get, (, Calendar, ., YEAR, )]
[cal1]
[Calendar, ., YEAR]
[Calendar]
[cal2, ., get, (, Calendar, ., YEAR, )]
[cal2]
[Calendar, ., YEAR]
[Calendar]
[cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, )]
[cal1, ., get, (, Calendar, ., ERA, )]
[cal1]
[Calendar, ., ERA]
[Calendar]
[cal2, ., get, (, Calendar, ., ERA, )]
[cal2]
[Calendar, ., ERA]
[Calendar]
[cal1, ., getClass, (, ), ==, cal2, ., getClass, (, )]
[cal1, ., getClass, (, )]
[cal1]
[cal2, ., getClass, (, )]
[cal2]
[parseDate, (, str, ,, null, ,, parsePatterns, )]
[str]
[null]
[parsePatterns]
[parseDateWithLeniency, (, str, ,, locale, ,, parsePatterns, ,, true, )]
[str]
[locale]
[parsePatterns]
[true]
[parseDateStrictly, (, str, ,, null, ,, parsePatterns, )]
[str]
[null]
[parsePatterns]
[parseDateWithLeniency, (, str, ,, null, ,, parsePatterns, ,, false, )]
[str]
[null]
[parsePatterns]
[false]
[str, ==, null, ||, parsePatterns, ==, null]
[str, ==, null]
[str]
[null]
[parsePatterns, ==, null]
[parsePatterns]
[null]
[new, IllegalArgumentException, (, "Date and Patterns must not be null", )]
["Date and Patterns must not be null"]
[locale, ==, null]
[locale]
[null]
[parser]
[new, SimpleDateFormat, (, )]
[parser]
[new, SimpleDateFormat, (, "", ,, locale, )]
[""]
[locale]
[parser, ., setLenient, (, lenient, )]
[parser]
[lenient]
[new, ParsePosition, (, 0, )]
[0]
[parsePatterns]
[parsePattern]
[parsePattern, ., endsWith, (, "ZZ", )]
[parsePattern]
["ZZ"]
[pattern]
[pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, )]
[pattern]
[0]
[pattern, ., length, (, ), -, 1]
[pattern, ., length, (, )]
[pattern]
[1]
[parser, ., applyPattern, (, pattern, )]
[parser]
[pattern]
[pos, ., setIndex, (, 0, )]
[pos]
[0]
[str]
[parsePattern, ., endsWith, (, "ZZ", )]
[parsePattern]
["ZZ"]
[str2]
[str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", )]
[str]
["([-+][0-9][0-9]):([0-9][0-9])$"]
["$1$2"]
[parser, ., parse, (, str2, ,, pos, )]
[parser]
[str2]
[pos]
[date, !=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (, )]
[date, !=, null]
[date]
[null]
[pos, ., getIndex, (, ), ==, str2, ., length, (, )]
[pos, ., getIndex, (, )]
[pos]
[str2, ., length, (, )]
[str2]
[date]
[new, ParseException, (, "Unable to parse the date: ", +, str, ,, -, 1, )]
["Unable to parse the date: ", +, str]
["Unable to parse the date: "]
[str]
[-, 1]
[1]
[add, (, date, ,, Calendar, ., YEAR, ,, amount, )]
[date]
[Calendar, ., YEAR]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., MONTH, ,, amount, )]
[date]
[Calendar, ., MONTH]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., WEEK_OF_YEAR, ,, amount, )]
[date]
[Calendar, ., WEEK_OF_YEAR]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., DAY_OF_MONTH, ,, amount, )]
[date]
[Calendar, ., DAY_OF_MONTH]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., HOUR_OF_DAY, ,, amount, )]
[date]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., MINUTE, ,, amount, )]
[date]
[Calendar, ., MINUTE]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., SECOND, ,, amount, )]
[date]
[Calendar, ., SECOND]
[Calendar]
[amount]
[add, (, date, ,, Calendar, ., MILLISECOND, ,, amount, )]
[date]
[Calendar, ., MILLISECOND]
[Calendar]
[amount]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[c, ., setTime, (, date, )]
[c]
[date]
[c, ., add, (, calendarField, ,, amount, )]
[c]
[calendarField]
[amount]
[c, ., getTime, (, )]
[c]
[set, (, date, ,, Calendar, ., YEAR, ,, amount, )]
[date]
[Calendar, ., YEAR]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., MONTH, ,, amount, )]
[date]
[Calendar, ., MONTH]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., DAY_OF_MONTH, ,, amount, )]
[date]
[Calendar, ., DAY_OF_MONTH]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., HOUR_OF_DAY, ,, amount, )]
[date]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., MINUTE, ,, amount, )]
[date]
[Calendar, ., MINUTE]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., SECOND, ,, amount, )]
[date]
[Calendar, ., SECOND]
[Calendar]
[amount]
[set, (, date, ,, Calendar, ., MILLISECOND, ,, amount, )]
[date]
[Calendar, ., MILLISECOND]
[Calendar]
[amount]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[c, ., setLenient, (, false, )]
[c]
[false]
[c, ., setTime, (, date, )]
[c]
[date]
[c, ., set, (, calendarField, ,, amount, )]
[c]
[calendarField]
[amount]
[c, ., getTime, (, )]
[c]
[Calendar, ., getInstance, (, )]
[Calendar]
[c, ., setTime, (, date, )]
[c]
[date]
[c]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[gval, ., setTime, (, date, )]
[gval]
[date]
[modify, (, gval, ,, field, ,, MODIFY_ROUND, )]
[gval]
[field]
[MODIFY_ROUND]
[gval, ., getTime, (, )]
[gval]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[(, Calendar, ), date, ., clone, (, )]
[date, ., clone, (, )]
[date]
[modify, (, rounded, ,, field, ,, MODIFY_ROUND, )]
[rounded]
[field]
[MODIFY_ROUND]
[rounded]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[date, instanceof, Date]
[date]
[round, (, (, Date, ), date, ,, field, )]
[(, Date, ), date]
[date]
[field]
[date, instanceof, Calendar]
[date]
[round, (, (, Calendar, ), date, ,, field, ), ., getTime, (, )]
[round, (, (, Calendar, ), date, ,, field, )]
[(, Calendar, ), date]
[date]
[field]
[new, ClassCastException, (, "Could not round ", +, date, )]
["Could not round ", +, date]
["Could not round "]
[date]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[gval, ., setTime, (, date, )]
[gval]
[date]
[modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, )]
[gval]
[field]
[MODIFY_TRUNCATE]
[gval, ., getTime, (, )]
[gval]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[(, Calendar, ), date, ., clone, (, )]
[date, ., clone, (, )]
[date]
[modify, (, truncated, ,, field, ,, MODIFY_TRUNCATE, )]
[truncated]
[field]
[MODIFY_TRUNCATE]
[truncated]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[date, instanceof, Date]
[date]
[truncate, (, (, Date, ), date, ,, field, )]
[(, Date, ), date]
[date]
[field]
[date, instanceof, Calendar]
[date]
[truncate, (, (, Calendar, ), date, ,, field, ), ., getTime, (, )]
[truncate, (, (, Calendar, ), date, ,, field, )]
[(, Calendar, ), date]
[date]
[field]
[new, ClassCastException, (, "Could not truncate ", +, date, )]
["Could not truncate ", +, date]
["Could not truncate "]
[date]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[gval, ., setTime, (, date, )]
[gval]
[date]
[modify, (, gval, ,, field, ,, MODIFY_CEILING, )]
[gval]
[field]
[MODIFY_CEILING]
[gval, ., getTime, (, )]
[gval]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[(, Calendar, ), date, ., clone, (, )]
[date, ., clone, (, )]
[date]
[modify, (, ceiled, ,, field, ,, MODIFY_CEILING, )]
[ceiled]
[field]
[MODIFY_CEILING]
[ceiled]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[date, instanceof, Date]
[date]
[ceiling, (, (, Date, ), date, ,, field, )]
[(, Date, ), date]
[date]
[field]
[date, instanceof, Calendar]
[date]
[ceiling, (, (, Calendar, ), date, ,, field, ), ., getTime, (, )]
[ceiling, (, (, Calendar, ), date, ,, field, )]
[(, Calendar, ), date]
[date]
[field]
[new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass, (, ), )]
["Could not find ceiling of for type: ", +, date, ., getClass, (, )]
["Could not find ceiling of for type: "]
[date, ., getClass, (, )]
[date]
[val, ., get, (, Calendar, ., YEAR, ), >, 280000000]
[val, ., get, (, Calendar, ., YEAR, )]
[val]
[Calendar, ., YEAR]
[Calendar]
[280000000]
[new, ArithmeticException, (, "Calendar value too large for accurate calculations", )]
["Calendar value too large for accurate calculations"]
[field, ==, Calendar, ., MILLISECOND]
[field]
[Calendar, ., MILLISECOND]
[Calendar]
[val, ., getTime, (, )]
[val]
[date, ., getTime, (, )]
[date]
[false]
[val, ., get, (, Calendar, ., MILLISECOND, )]
[val]
[Calendar, ., MILLISECOND]
[Calendar]
[MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500]
[MODIFY_TRUNCATE, ==, modType]
[MODIFY_TRUNCATE]
[modType]
[millisecs, <, 500]
[millisecs]
[500]
[time]
[time, -, millisecs]
[time]
[millisecs]
[field, ==, Calendar, ., SECOND]
[field]
[Calendar, ., SECOND]
[Calendar]
[done]
[true]
[val, ., get, (, Calendar, ., SECOND, )]
[val]
[Calendar, ., SECOND]
[Calendar]
[!, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, )]
[!, done]
[done]
[(, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, )]
[MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30]
[MODIFY_TRUNCATE, ==, modType]
[MODIFY_TRUNCATE]
[modType]
[seconds, <, 30]
[seconds]
[30]
[time]
[time, -, (, seconds, *, 1000L, )]
[time]
[(, seconds, *, 1000L, )]
[seconds, *, 1000L]
[seconds]
[1000L]
[field, ==, Calendar, ., MINUTE]
[field]
[Calendar, ., MINUTE]
[Calendar]
[done]
[true]
[val, ., get, (, Calendar, ., MINUTE, )]
[val]
[Calendar, ., MINUTE]
[Calendar]
[!, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, )]
[!, done]
[done]
[(, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, )]
[MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30]
[MODIFY_TRUNCATE, ==, modType]
[MODIFY_TRUNCATE]
[modType]
[minutes, <, 30]
[minutes]
[30]
[time]
[time, -, (, minutes, *, 60000L, )]
[time]
[(, minutes, *, 60000L, )]
[minutes, *, 60000L]
[minutes]
[60000L]
[date, ., getTime, (, ), !=, time]
[date, ., getTime, (, )]
[date]
[time]
[date, ., setTime, (, time, )]
[date]
[time]
[val, ., setTime, (, date, )]
[val]
[date]
[false]
[fields]
[aField]
[element, ==, field]
[element]
[field]
[modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, )]
[modType, ==, MODIFY_CEILING]
[modType]
[MODIFY_CEILING]
[(, modType, ==, MODIFY_ROUND, &&, roundUp, )]
[modType, ==, MODIFY_ROUND, &&, roundUp]
[modType, ==, MODIFY_ROUND]
[modType]
[MODIFY_ROUND]
[roundUp]
[field, ==, DateUtils, ., SEMI_MONTH]
[field]
[DateUtils, ., SEMI_MONTH]
[DateUtils]
[val, ., get, (, Calendar, ., DATE, ), ==, 1]
[val, ., get, (, Calendar, ., DATE, )]
[val]
[Calendar, ., DATE]
[Calendar]
[1]
[val, ., add, (, Calendar, ., DATE, ,, 15, )]
[val]
[Calendar, ., DATE]
[Calendar]
[15]
[val, ., add, (, Calendar, ., DATE, ,, -, 15, )]
[val]
[Calendar, ., DATE]
[Calendar]
[-, 15]
[15]
[val, ., add, (, Calendar, ., MONTH, ,, 1, )]
[val]
[Calendar, ., MONTH]
[Calendar]
[1]
[field, ==, Calendar, ., AM_PM]
[field]
[Calendar, ., AM_PM]
[Calendar]
[val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0]
[val, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[val]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[0]
[val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, )]
[val]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[12]
[val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, )]
[val]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[-, 12]
[12]
[val, ., add, (, Calendar, ., DATE, ,, 1, )]
[val]
[Calendar, ., DATE]
[Calendar]
[1]
[val, ., add, (, aField, [, 0, ], ,, 1, )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[1]
[0]
[false]
[field]
[DateUtils, ., SEMI_MONTH]
[DateUtils]
[aField, [, 0, ], ==, Calendar, ., DATE]
[aField, [, 0, ]]
[aField]
[0]
[Calendar, ., DATE]
[Calendar]
[offset]
[val, ., get, (, Calendar, ., DATE, ), -, 1]
[val, ., get, (, Calendar, ., DATE, )]
[val]
[Calendar, ., DATE]
[Calendar]
[1]
[offset, >=, 15]
[offset]
[15]
[offset]
[15]
[roundUp]
[offset, >, 7]
[offset]
[7]
[offsetSet]
[true]
[Calendar, ., AM_PM]
[Calendar]
[aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY]
[aField, [, 0, ]]
[aField]
[0]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[offset]
[val, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[val]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[offset, >=, 12]
[offset]
[12]
[offset]
[12]
[roundUp]
[offset, >=, 6]
[offset]
[6]
[offsetSet]
[true]
[!, offsetSet]
[offsetSet]
[val, ., getActualMinimum, (, aField, [, 0, ], )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[val, ., getActualMaximum, (, aField, [, 0, ], )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[offset]
[val, ., get, (, aField, [, 0, ], ), -, min]
[val, ., get, (, aField, [, 0, ], )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[min]
[roundUp]
[offset, >, (, (, max, -, min, ), /, 2, )]
[offset]
[(, (, max, -, min, ), /, 2, )]
[(, max, -, min, ), /, 2]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[2]
[offset, !=, 0]
[offset]
[0]
[val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0, ], ), -, offset, )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[val, ., get, (, aField, [, 0, ], ), -, offset]
[val, ., get, (, aField, [, 0, ], )]
[val]
[aField, [, 0, ]]
[aField]
[0]
[offset]
[new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", )]
["The field ", +, field, +, " is not supported"]
["The field ", +, field]
["The field "]
[field]
[" is not supported"]
[focus, ==, null]
[focus]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[gval, ., setTime, (, focus, )]
[gval]
[focus]
[iterator, (, gval, ,, rangeStyle, )]
[gval]
[rangeStyle]
[focus, ==, null]
[focus]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[null]
[null]
[Calendar, ., SUNDAY]
[Calendar]
[Calendar, ., SATURDAY]
[Calendar]
[rangeStyle]
[RANGE_MONTH_SUNDAY]
[RANGE_MONTH_MONDAY]
[start]
[truncate, (, focus, ,, Calendar, ., MONTH, )]
[focus]
[Calendar, ., MONTH]
[Calendar]
[end]
[(, Calendar, ), start, ., clone, (, )]
[start, ., clone, (, )]
[start]
[end, ., add, (, Calendar, ., MONTH, ,, 1, )]
[end]
[Calendar, ., MONTH]
[Calendar]
[1]
[end, ., add, (, Calendar, ., DATE, ,, -, 1, )]
[end]
[Calendar, ., DATE]
[Calendar]
[-, 1]
[1]
[rangeStyle, ==, RANGE_MONTH_MONDAY]
[rangeStyle]
[RANGE_MONTH_MONDAY]
[startCutoff]
[Calendar, ., MONDAY]
[Calendar]
[endCutoff]
[Calendar, ., SUNDAY]
[Calendar]
[RANGE_WEEK_SUNDAY]
[RANGE_WEEK_MONDAY]
[RANGE_WEEK_RELATIVE]
[RANGE_WEEK_CENTER]
[start]
[truncate, (, focus, ,, Calendar, ., DATE, )]
[focus]
[Calendar, ., DATE]
[Calendar]
[end]
[truncate, (, focus, ,, Calendar, ., DATE, )]
[focus]
[Calendar, ., DATE]
[Calendar]
[rangeStyle]
[RANGE_WEEK_SUNDAY]
[RANGE_WEEK_MONDAY]
[startCutoff]
[Calendar, ., MONDAY]
[Calendar]
[endCutoff]
[Calendar, ., SUNDAY]
[Calendar]
[RANGE_WEEK_RELATIVE]
[startCutoff]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[focus]
[Calendar, ., DAY_OF_WEEK]
[Calendar]
[endCutoff]
[startCutoff, -, 1]
[startCutoff]
[1]
[RANGE_WEEK_CENTER]
[startCutoff]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[focus]
[Calendar, ., DAY_OF_WEEK]
[Calendar]
[3]
[endCutoff]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3]
[focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[focus]
[Calendar, ., DAY_OF_WEEK]
[Calendar]
[3]
[new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", )]
["The range style ", +, rangeStyle, +, " is not valid."]
["The range style ", +, rangeStyle]
["The range style "]
[rangeStyle]
[" is not valid."]
[startCutoff, <, Calendar, ., SUNDAY]
[startCutoff]
[Calendar, ., SUNDAY]
[Calendar]
[startCutoff]
[7]
[startCutoff, >, Calendar, ., SATURDAY]
[startCutoff]
[Calendar, ., SATURDAY]
[Calendar]
[startCutoff]
[7]
[endCutoff, <, Calendar, ., SUNDAY]
[endCutoff]
[Calendar, ., SUNDAY]
[Calendar]
[endCutoff]
[7]
[endCutoff, >, Calendar, ., SATURDAY]
[endCutoff]
[Calendar, ., SATURDAY]
[Calendar]
[endCutoff]
[7]
[start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff]
[start, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[start]
[Calendar, ., DAY_OF_WEEK]
[Calendar]
[startCutoff]
[start, ., add, (, Calendar, ., DATE, ,, -, 1, )]
[start]
[Calendar, ., DATE]
[Calendar]
[-, 1]
[1]
[end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff]
[end, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[end]
[Calendar, ., DAY_OF_WEEK]
[Calendar]
[endCutoff]
[end, ., add, (, Calendar, ., DATE, ,, 1, )]
[end]
[Calendar, ., DATE]
[Calendar]
[1]
[new, DateIterator, (, start, ,, end, )]
[start]
[end]
[focus, ==, null]
[focus]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[focus, instanceof, Date]
[focus]
[iterator, (, (, Date, ), focus, ,, rangeStyle, )]
[(, Date, ), focus]
[focus]
[rangeStyle]
[focus, instanceof, Calendar]
[focus]
[iterator, (, (, Calendar, ), focus, ,, rangeStyle, )]
[(, Calendar, ), focus]
[focus]
[rangeStyle]
[new, ClassCastException, (, "Could not iterate based on ", +, focus, )]
["Could not iterate based on ", +, focus]
["Could not iterate based on "]
[focus]
[getFragment, (, date, ,, fragment, ,, Calendar, ., MILLISECOND, )]
[date]
[fragment]
[Calendar, ., MILLISECOND]
[Calendar]
[getFragment, (, date, ,, fragment, ,, Calendar, ., SECOND, )]
[date]
[fragment]
[Calendar, ., SECOND]
[Calendar]
[getFragment, (, date, ,, fragment, ,, Calendar, ., MINUTE, )]
[date]
[fragment]
[Calendar, ., MINUTE]
[Calendar]
[getFragment, (, date, ,, fragment, ,, Calendar, ., HOUR_OF_DAY, )]
[date]
[fragment]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[getFragment, (, date, ,, fragment, ,, Calendar, ., DAY_OF_YEAR, )]
[date]
[fragment]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[getFragment, (, calendar, ,, fragment, ,, Calendar, ., MILLISECOND, )]
[calendar]
[fragment]
[Calendar, ., MILLISECOND]
[Calendar]
[getFragment, (, calendar, ,, fragment, ,, Calendar, ., SECOND, )]
[calendar]
[fragment]
[Calendar, ., SECOND]
[Calendar]
[getFragment, (, calendar, ,, fragment, ,, Calendar, ., MINUTE, )]
[calendar]
[fragment]
[Calendar, ., MINUTE]
[Calendar]
[getFragment, (, calendar, ,, fragment, ,, Calendar, ., HOUR_OF_DAY, )]
[calendar]
[fragment]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[getFragment, (, calendar, ,, fragment, ,, Calendar, ., DAY_OF_YEAR, )]
[calendar]
[fragment]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[date, ==, null]
[date]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[Calendar, ., getInstance, (, )]
[Calendar]
[calendar, ., setTime, (, date, )]
[calendar]
[date]
[getFragment, (, calendar, ,, fragment, ,, unit, )]
[calendar]
[fragment]
[unit]
[calendar, ==, null]
[calendar]
[null]
[new, IllegalArgumentException, (, "The date must not be null", )]
["The date must not be null"]
[getMillisPerUnit, (, unit, )]
[unit]
[0]
[fragment]
[Calendar, ., YEAR]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, )]
[calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY]
[calendar, ., get, (, Calendar, ., DAY_OF_YEAR, )]
[calendar]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[MILLIS_PER_DAY]
[millisPerUnit]
[Calendar, ., MONTH]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, )]
[calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY]
[calendar, ., get, (, Calendar, ., DAY_OF_MONTH, )]
[calendar]
[Calendar, ., DAY_OF_MONTH]
[Calendar]
[MILLIS_PER_DAY]
[millisPerUnit]
[fragment]
[Calendar, ., YEAR]
[Calendar]
[Calendar, ., MONTH]
[Calendar]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[Calendar, ., DATE]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, )]
[calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR]
[calendar, ., get, (, Calendar, ., HOUR_OF_DAY, )]
[calendar]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[MILLIS_PER_HOUR]
[millisPerUnit]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, )]
[calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE]
[calendar, ., get, (, Calendar, ., MINUTE, )]
[calendar]
[Calendar, ., MINUTE]
[Calendar]
[MILLIS_PER_MINUTE]
[millisPerUnit]
[Calendar, ., MINUTE]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, )]
[calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND]
[calendar, ., get, (, Calendar, ., SECOND, )]
[calendar]
[Calendar, ., SECOND]
[Calendar]
[MILLIS_PER_SECOND]
[millisPerUnit]
[Calendar, ., SECOND]
[Calendar]
[result]
[(, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit]
[(, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, )]
[calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1]
[calendar, ., get, (, Calendar, ., MILLISECOND, )]
[calendar]
[Calendar, ., MILLISECOND]
[Calendar]
[1]
[millisPerUnit]
[Calendar, ., MILLISECOND]
[Calendar]
[new, IllegalArgumentException, (, "The fragment ", +, fragment, +, " is not supported", )]
["The fragment ", +, fragment, +, " is not supported"]
["The fragment ", +, fragment]
["The fragment "]
[fragment]
[" is not supported"]
[result]
[truncatedCompareTo, (, cal1, ,, cal2, ,, field, ), ==, 0]
[truncatedCompareTo, (, cal1, ,, cal2, ,, field, )]
[cal1]
[cal2]
[field]
[0]
[truncatedCompareTo, (, date1, ,, date2, ,, field, ), ==, 0]
[truncatedCompareTo, (, date1, ,, date2, ,, field, )]
[date1]
[date2]
[field]
[0]
[truncate, (, cal1, ,, field, )]
[cal1]
[field]
[truncate, (, cal2, ,, field, )]
[cal2]
[field]
[truncatedCal1, ., compareTo, (, truncatedCal2, )]
[truncatedCal1]
[truncatedCal2]
[truncate, (, date1, ,, field, )]
[date1]
[field]
[truncate, (, date2, ,, field, )]
[date2]
[field]
[truncatedDate1, ., compareTo, (, truncatedDate2, )]
[truncatedDate1]
[truncatedDate2]
[Long, ., MAX_VALUE]
[Long]
[unit]
[Calendar, ., DAY_OF_YEAR]
[Calendar]
[Calendar, ., DATE]
[Calendar]
[result]
[MILLIS_PER_DAY]
[Calendar, ., HOUR_OF_DAY]
[Calendar]
[result]
[MILLIS_PER_HOUR]
[Calendar, ., MINUTE]
[Calendar]
[result]
[MILLIS_PER_MINUTE]
[Calendar, ., SECOND]
[Calendar]
[result]
[MILLIS_PER_SECOND]
[Calendar, ., MILLISECOND]
[Calendar]
[result]
[1]
[new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds", )]
["The unit ", +, unit, +, " cannot be represented is milleseconds"]
["The unit ", +, unit]
["The unit "]
[unit]
[" cannot be represented is milleseconds"]
[result]
[this, ., endFinal]
[this]
[endFinal]
[spot]
[startFinal]
[spot, ., add, (, Calendar, ., DATE, ,, -, 1, )]
[spot]
[Calendar, ., DATE]
[Calendar]
[-, 1]
[1]
[spot, ., before, (, endFinal, )]
[spot]
[endFinal]
[spot, ., equals, (, endFinal, )]
[spot]
[endFinal]
[new, NoSuchElementException, (, )]
[spot, ., add, (, Calendar, ., DATE, ,, 1, )]
[spot]
[Calendar, ., DATE]
[Calendar]
[1]
[(, Calendar, ), spot, ., clone, (, )]
[spot, ., clone, (, )]
[spot]
[new, UnsupportedOperationException, (, )]
