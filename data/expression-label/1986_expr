["JSCompiler_object_inline_"]
[this, ., compiler]
[this]
[compiler]
[this, ., safeNameIdSupplier]
[this]
[safeNameIdSupplier]
[new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), )]
[compiler]
[new, InliningBehavior, (, )]
[callback, ., process, (, externs, ,, root, )]
[callback]
[externs]
[root]
[Sets, ., newHashSet, (, )]
[Sets]
[t, ., getScope, (, ), ., getVars, (, )]
[t, ., getScope, (, )]
[t]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[isVarInlineForbidden, (, v, )]
[v]
[referenceMap, ., getReferences, (, v, )]
[referenceMap]
[v]
[isInlinableObject, (, referenceInfo, ., references, )]
[referenceInfo, ., references]
[referenceInfo]
[staleVars, ., add, (, v, )]
[staleVars]
[v]
[referenceInfo, ., references, ., get, (, 0, )]
[referenceInfo, ., references]
[referenceInfo]
[0]
[referenceInfo, ., getInitializingReference, (, )]
[referenceInfo]
[splitObject, (, v, ,, declaration, ,, init, ,, referenceInfo, )]
[v]
[declaration]
[init]
[referenceInfo]
[NodeUtil, ., visitPreOrder, (, root, ,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, )]
[NodeUtil]
[root]
[new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }]
[node, ., isName, (, )]
[node]
[staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), )]
[staleVars]
[scope, ., getVar, (, node, ., getString, (, ), )]
[scope]
[node, ., getString, (, )]
[node]
[NodeUtil, ., MATCH_NOT_FUNCTION]
[NodeUtil]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, )]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, )]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, )]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, )]
[var, ., isGlobal, (, )]
[var]
[var, ., isExtern, (, )]
[var]
[compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[var, ., name]
[var]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, )]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME]
[RenameProperties]
[var, ., name]
[var]
[staleVars, ., contains, (, var, )]
[staleVars]
[var]
[false]
[Sets, ., newHashSet, (, )]
[Sets]
[refs]
[ref, ., getNode, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[ref, ., getGrandparent, (, )]
[ref]
[parent, ., isGetProp, (, )]
[parent]
[Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, )]
[Preconditions]
[parent, ., getFirstChild, (, ), ==, name]
[parent, ., getFirstChild, (, )]
[parent]
[name]
[gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent]
[gramps, ., isCall, (, )]
[gramps]
[gramps, ., getFirstChild, (, ), ==, parent]
[gramps, ., getFirstChild, (, )]
[gramps]
[parent]
[false]
[gramps, ., isDelProp, (, )]
[gramps]
[false]
[parent, ., getLastChild, (, ), ., getString, (, )]
[parent, ., getLastChild, (, )]
[parent]
[!, validProperties, ., contains, (, propName, )]
[validProperties, ., contains, (, propName, )]
[validProperties]
[propName]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, )]
[NodeUtil]
[parent]
[gramps]
[validProperties, ., add, (, propName, )]
[validProperties]
[propName]
[false]
[!, isVarOrAssignExprLhs, (, name, )]
[isVarOrAssignExprLhs, (, name, )]
[name]
[false]
[ref, ., getAssignedValue, (, )]
[ref]
[val, ==, null]
[val]
[null]
[!, val, ., isObjectLit, (, )]
[val, ., isObjectLit, (, )]
[val]
[false]
[val, ., getFirstChild, (, )]
[val]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, )]
[child, ., isGetterDef, (, )]
[child]
[child, ., isSetterDef, (, )]
[child]
[false]
[validProperties, ., add, (, child, ., getString, (, ), )]
[validProperties]
[child, ., getString, (, )]
[child]
[child, ., getFirstChild, (, )]
[child]
[refs]
[t, ., getParent, (, )]
[t]
[!, NodeUtil, ., isStatementBlock, (, refNode, )]
[NodeUtil, ., isStatementBlock, (, refNode, )]
[NodeUtil]
[refNode]
[refNode, ==, childVal]
[refNode]
[childVal]
[false]
[refNode]
[refNode, ., getParent, (, )]
[refNode]
[ret]
[true]
[ret]
[n, ., getParent, (, )]
[n]
[parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, ), )]
[parent, ., isVar, (, )]
[parent]
[(, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, ), )]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&, parent, ., getParent, (, ), ., isExprResult, (, )]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[parent, ., getParent, (, ), ., isExprResult, (, )]
[parent, ., getParent, (, )]
[parent]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[referenceInfo, ., references]
[referenceInfo]
[ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, )]
[ref, ., isLvalue, (, )]
[ref]
[ref, ., isInitializingDeclaration, (, )]
[ref]
[ref, ., getAssignedValue, (, )]
[ref]
[val, !=, null]
[val]
[null]
[Preconditions, ., checkState, (, val, ., isObjectLit, (, ), )]
[Preconditions]
[val, ., isObjectLit, (, )]
[val]
[val, ., getFirstChild, (, )]
[val]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., getString, (, )]
[child]
[varmap, ., containsKey, (, varname, )]
[varmap]
[varname]
[VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, )]
[VAR_PREFIX, +, varname, +, "_"]
[VAR_PREFIX, +, varname]
[VAR_PREFIX]
[varname]
["_"]
[safeNameIdSupplier, ., get, (, )]
[safeNameIdSupplier]
[varmap, ., put, (, varname, ,, var, )]
[varmap]
[varname]
[var]
[ref, ., getParent, (, ), ., isVar, (, )]
[ref, ., getParent, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), )]
[Preconditions]
[getprop, ., isGetProp, (, )]
[getprop]
[getprop, ., getLastChild, (, ), ., getString, (, )]
[getprop, ., getLastChild, (, )]
[getprop]
[varmap, ., containsKey, (, varname, )]
[varmap]
[varname]
[VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, )]
[VAR_PREFIX, +, varname, +, "_"]
[VAR_PREFIX, +, varname]
[VAR_PREFIX]
[varname]
["_"]
[safeNameIdSupplier, ., get, (, )]
[safeNameIdSupplier]
[varmap, ., put, (, varname, ,, var, )]
[varmap]
[varname]
[var]
[varmap]
[init, ., getAssignedValue, (, )]
[init]
[Preconditions, ., checkState, (, object, ., isObjectLit, (, ), )]
[Preconditions]
[object, ., isObjectLit, (, )]
[object]
[object, ., getFirstChild, (, )]
[object]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[initvals, ., put, (, key, ., getString, (, ), ,, key, ., removeFirstChild, (, ), )]
[initvals]
[key, ., getString, (, )]
[key]
[key, ., removeFirstChild, (, )]
[key]
[Lists, ., newArrayList, (, )]
[Lists]
[ref, ., getAssignedValue, (, )]
[ref]
[blacklistVarReferencesInTree, (, val, ,, v, ., scope, )]
[val]
[v, ., scope]
[v]
[Preconditions, ., checkState, (, val, ., isObjectLit, (, ), )]
[Preconditions]
[val, ., isObjectLit, (, )]
[val]
[Sets, ., newLinkedHashSet, (, varmap, ., keySet, (, ), )]
[Sets]
[varmap, ., keySet, (, )]
[varmap]
[val, ., getFirstChild, (, )]
[val]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[key, ., getString, (, )]
[key]
[key, ., removeFirstChild, (, )]
[key]
[nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, ), )]
[nodes]
[IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, )]
[IR]
[IR, ., name, (, varmap, ., get, (, var, ), )]
[IR]
[varmap, ., get, (, var, )]
[varmap]
[var]
[value]
[all, ., remove, (, var, )]
[all]
[var]
[all]
[nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), )]
[nodes]
[IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), )]
[IR]
[IR, ., name, (, varmap, ., get, (, var, ), )]
[IR]
[varmap, ., get, (, var, )]
[varmap]
[var]
[NodeUtil, ., newUndefinedNode, (, null, )]
[NodeUtil]
[null]
[nodes, ., isEmpty, (, )]
[nodes]
[replacement]
[IR, ., trueNode, (, )]
[IR]
[nodes, ., add, (, IR, ., trueNode, (, ), )]
[nodes]
[IR, ., trueNode, (, )]
[IR]
[nodes]
[Lists, ., reverse, (, nodes, )]
[Lists]
[nodes]
[replacement]
[new, Node, (, Token, ., COMMA, )]
[Token, ., COMMA]
[Token]
[replacement]
[i]
[0]
[i, <, nodes, ., size, (, ), -, 2]
[i]
[nodes, ., size, (, ), -, 2]
[nodes, ., size, (, )]
[nodes]
[2]
[i, ++]
[i]
[cur, ., addChildToFront, (, nodes, ., get, (, i, ), )]
[cur]
[nodes, ., get, (, i, )]
[nodes]
[i]
[new, Node, (, Token, ., COMMA, )]
[Token, ., COMMA]
[Token]
[cur, ., addChildToFront, (, t, )]
[cur]
[t]
[cur]
[t]
[cur, ., addChildToFront, (, nodes, ., get, (, i, ), )]
[cur]
[nodes, ., get, (, i, )]
[nodes]
[i]
[cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), )]
[cur]
[nodes, ., get, (, i, +, 1, )]
[nodes]
[i, +, 1]
[i]
[1]
[ref, ., getParent, (, )]
[ref]
[replacement, ., copyInformationFromForTree, (, replace, )]
[replacement]
[replace]
[replace, ., isVar, (, )]
[replace]
[replace, ., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), )]
[replace, ., getParent, (, )]
[replace]
[replace]
[NodeUtil, ., newExpr, (, replacement, )]
[NodeUtil]
[replacement]
[replace, ., getParent, (, ), ., replaceChild, (, replace, ,, replacement, )]
[replace, ., getParent, (, )]
[replace]
[replace]
[replacement]
[computeVarList, (, v, ,, referenceInfo, )]
[v]
[referenceInfo]
[Maps, ., newHashMap, (, )]
[Maps]
[referenceInfo, ., isWellDefined, (, ), &&, init, ., getParent, (, ), ., isVar, (, )]
[referenceInfo, ., isWellDefined, (, )]
[referenceInfo]
[init, ., getParent, (, ), ., isVar, (, )]
[init, ., getParent, (, )]
[init]
[defined]
[vnode]
[init, ., getParent, (, )]
[init]
[fillInitialValues, (, init, ,, initvals, )]
[init]
[initvals]
[vnode]
[v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, ), ., getFirstChild, (, )]
[v, ., getScope, (, ), ., getRootNode, (, ), ., getLastChild, (, )]
[v, ., getScope, (, ), ., getRootNode, (, )]
[v, ., getScope, (, )]
[v]
[varmap, ., entrySet, (, )]
[varmap]
[initvals, ., get, (, entry, ., getKey, (, ), )]
[initvals]
[entry, ., getKey, (, )]
[entry]
[NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, )]
[NodeUtil]
[entry, ., getValue, (, )]
[entry]
[val]
[val, ==, null]
[val]
[null]
[varnode, ., copyInformationFromForTree, (, vnode, )]
[varnode]
[vnode]
[blacklistVarReferencesInTree, (, val, ,, v, ., scope, )]
[val]
[v, ., scope]
[v]
[vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, )]
[vnode, ., getParent, (, )]
[vnode]
[varnode]
[vnode]
[defined]
[vnode, ., getParent, (, ), ., removeChild, (, vnode, )]
[vnode, ., getParent, (, )]
[vnode]
[vnode]
[referenceInfo, ., references]
[referenceInfo]
[defined, &&, ref, ==, init]
[defined]
[ref, ==, init]
[ref]
[init]
[ref, ., isLvalue, (, )]
[ref]
[replaceAssignmentExpression, (, v, ,, ref, ,, varmap, )]
[v]
[ref]
[varmap]
[ref, ., getParent, (, ), ., isVar, (, )]
[ref, ., getParent, (, )]
[ref]
[ref, ., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), )]
[ref, ., getGrandparent, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), )]
[Preconditions]
[getprop, ., isGetProp, (, )]
[getprop]
[getprop, ., getChildAtIndex, (, 1, ), ., getString, (, )]
[getprop, ., getChildAtIndex, (, 1, )]
[getprop]
[1]
[Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), )]
[Preconditions]
[varmap, ., containsKey, (, var, )]
[varmap]
[var]
[IR, ., name, (, varmap, ., get, (, var, ), )]
[IR]
[varmap, ., get, (, var, )]
[varmap]
[var]
[replacement, ., copyInformationFrom, (, getprop, )]
[replacement]
[getprop]
[ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, )]
[ref, ., getGrandparent, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[replacement]
[compiler, ., reportCodeChange, (, )]
[compiler]
