[cfg]
[new, ReachingUsesJoinOp, (, )]
[this, ., jsScope]
[this]
[jsScope]
[this, ., escaped]
[this]
[Sets, ., newHashSet, (, )]
[Sets]
[computeEscaped, (, jsScope, ,, escaped, ,, compiler, )]
[jsScope]
[escaped]
[compiler]
[mayUseMap]
[HashMultimap, ., create, (, )]
[HashMultimap]
[mayUseMap]
[HashMultimap, ., create, (, other, ., mayUseMap, )]
[HashMultimap]
[other, ., mayUseMap]
[other]
[(, other, instanceof, ReachingUses, ), &&, (, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (, this, ., mayUseMap, )]
[(, other, instanceof, ReachingUses, )]
[other, instanceof, ReachingUses]
[other]
[(, (, ReachingUses, ), other, ), ., mayUseMap, ., equals, (, this, ., mayUseMap, )]
[(, (, ReachingUses, ), other, ), ., mayUseMap]
[(, (, ReachingUses, ), other, )]
[(, ReachingUses, ), other]
[other]
[this, ., mayUseMap]
[this]
[mayUseMap, ., hashCode, (, )]
[mayUseMap]
[new, ReachingUses, (, )]
[from]
[result, ., mayUseMap, ., putAll, (, uses, ., mayUseMap, )]
[result, ., mayUseMap]
[result]
[uses, ., mayUseMap]
[uses]
[result]
[false]
[new, ReachingUses, (, )]
[new, ReachingUses, (, )]
[new, ReachingUses, (, input, )]
[input]
[hasExceptionHandler, (, n, )]
[n]
[computeMayUse, (, n, ,, n, ,, output, ,, conditional, )]
[n]
[n]
[output]
[conditional]
[output]
[getCfg, (, ), ., getOutEdges, (, cfgNode, )]
[getCfg, (, )]
[cfgNode]
[branchEdges]
[edge, ., getValue, (, ), ==, Branch, ., ON_EX]
[edge, ., getValue, (, )]
[edge]
[Branch, ., ON_EX]
[Branch]
[true]
[false]
[n, ., getType, (, )]
[n]
[Token, ., BLOCK]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., NAME]
[Token]
[addToUseIfLocal, (, n, ., getString, (, ), ,, cfgNode, ,, output, )]
[n, ., getString, (, )]
[n]
[cfgNode]
[output]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[Token, ., IF]
[Token]
[computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, )]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[cfgNode]
[output]
[conditional]
[Token, ., FOR]
[Token]
[!, NodeUtil, ., isForIn, (, n, )]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[computeMayUse, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, )]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[cfgNode]
[output]
[conditional]
[n, ., getFirstChild, (, )]
[n]
[lhs, ., getNext, (, )]
[lhs]
[lhs, ., isVar, (, )]
[lhs]
[lhs]
[lhs, ., getLastChild, (, )]
[lhs]
[lhs, ., isName, (, ), &&, !, conditional]
[lhs, ., isName, (, )]
[lhs]
[!, conditional]
[conditional]
[removeFromUseIfLocal, (, lhs, ., getString, (, ), ,, output, )]
[lhs, ., getString, (, )]
[lhs]
[output]
[computeMayUse, (, rhs, ,, cfgNode, ,, output, ,, conditional, )]
[rhs]
[cfgNode]
[output]
[conditional]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getLastChild, (, )]
[n]
[cfgNode]
[output]
[true]
[computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[conditional]
[Token, ., HOOK]
[Token]
[computeMayUse, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getLastChild, (, )]
[n]
[cfgNode]
[output]
[true]
[computeMayUse, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[true]
[computeMayUse, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[conditional]
[Token, ., VAR]
[Token]
[n, ., getFirstChild, (, )]
[n]
[Preconditions, ., checkState, (, n, ., hasChildren, (, ), ,, "AST should be normalized", )]
[Preconditions]
[n, ., hasChildren, (, )]
[n]
["AST should be normalized"]
[varName, ., hasChildren, (, )]
[varName]
[computeMayUse, (, varName, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[varName, ., getFirstChild, (, )]
[varName]
[cfgNode]
[output]
[conditional]
[!, conditional]
[conditional]
[removeFromUseIfLocal, (, varName, ., getString, (, ), ,, output, )]
[varName, ., getString, (, )]
[varName]
[output]
[NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, )]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[!, conditional]
[conditional]
[removeFromUseIfLocal, (, name, ., getString, (, ), ,, output, )]
[name, ., getString, (, )]
[name]
[output]
[!, n, ., isAssign, (, )]
[n, ., isAssign, (, )]
[n]
[addToUseIfLocal, (, name, ., getString, (, ), ,, cfgNode, ,, output, )]
[name, ., getString, (, )]
[name]
[cfgNode]
[output]
[computeMayUse, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[name, ., getNext, (, )]
[name]
[cfgNode]
[output]
[conditional]
[n, ., getLastChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[n, ., getChildBefore, (, c, )]
[n]
[c]
[computeMayUse, (, c, ,, cfgNode, ,, output, ,, conditional, )]
[c]
[cfgNode]
[output]
[conditional]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
[var, ==, null, ||, var, ., scope, !=, jsScope]
[var, ==, null]
[var]
[null]
[var, ., scope, !=, jsScope]
[var, ., scope]
[var]
[jsScope]
[!, escaped, ., contains, (, var, )]
[escaped, ., contains, (, var, )]
[escaped]
[var]
[use, ., mayUseMap, ., put, (, var, ,, node, )]
[use, ., mayUseMap]
[use]
[var]
[node]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
[var, ==, null, ||, var, ., scope, !=, jsScope]
[var, ==, null]
[var]
[null]
[var, ., scope, !=, jsScope]
[var, ., scope]
[var]
[jsScope]
[!, escaped, ., contains, (, var, )]
[escaped, ., contains, (, var, )]
[escaped]
[var]
[use, ., mayUseMap, ., removeAll, (, var, )]
[use, ., mayUseMap]
[use]
[var]
[getCfg, (, ), ., getNode, (, defNode, )]
[getCfg, (, )]
[defNode]
[Preconditions, ., checkNotNull, (, n, )]
[Preconditions]
[n]
[n, ., getAnnotation, (, )]
[n]
[state, ., getOut, (, ), ., mayUseMap, ., get, (, jsScope, ., getVar, (, name, ), )]
[state, ., getOut, (, ), ., mayUseMap]
[state, ., getOut, (, )]
[state]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
