[this, ., graph]
[this]
[graph]
[Preconditions, ., checkNotNull, (, colorToNodeMap, ,, "No coloring founded. color() should be called first.", )]
[Preconditions]
[colorToNodeMap]
["No coloring founded. color() should be called first."]
[graph, ., getNode, (, node, ), ., getAnnotation, (, )]
[graph, ., getNode, (, node, )]
[graph]
[node]
[colorToNodeMap, [, color, ., value, ]]
[colorToNodeMap]
[color, ., value]
[color]
[headNode, ==, null]
[headNode]
[null]
[colorToNodeMap, [, color, ., value, ]]
[colorToNodeMap]
[color, ., value]
[color]
[node]
[node]
[headNode]
[graph]
[0]
[this, ., value]
[this]
[value]
[!, (, other, instanceof, Color, )]
[(, other, instanceof, Color, )]
[other, instanceof, Color]
[other]
[false]
[value, ==, (, (, Color, ), other, ), ., value]
[value]
[(, (, Color, ), other, ), ., value]
[(, (, Color, ), other, )]
[(, Color, ), other]
[other]
[value]
[graph]
[null]
[graph]
[this, ., tieBreaker]
[this]
[tieBreaker]
[graph, ., clearNodeAnnotations, (, )]
[graph]
[Lists, ., newArrayList, (, graph, ., getNodes, (, ), )]
[Lists]
[graph, ., getNodes, (, )]
[graph]
[Collections, ., sort, (, worklist, ,, new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, ), {, @, Override, public, int, compare, (, GraphNode, <, N, ,, E, >, o1, ,, GraphNode, <, N, ,, E, >, o2, ), {, int, result, =, graph, ., getWeight, (, o2, ., getValue, (, ), ), -, graph, ., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;, }, }, )]
[Collections]
[worklist]
[new, Comparator, <, GraphNode, <, N, ,, E, >, >, (, ), {, @, Override, public, int, compare, (, GraphNode, <, N, ,, E, >, o1, ,, GraphNode, <, N, ,, E, >, o2, ), {, int, result, =, graph, ., getWeight, (, o2, ., getValue, (, ), ), -, graph, ., getWeight, (, o1, ., getValue, (, ), ), ;, return, result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result, ;, }, }]
[graph, ., getWeight, (, o2, ., getValue, (, ), ), -, graph, ., getWeight, (, o1, ., getValue, (, ), )]
[graph, ., getWeight, (, o2, ., getValue, (, ), )]
[graph]
[o2, ., getValue, (, )]
[o2]
[graph, ., getWeight, (, o1, ., getValue, (, ), )]
[graph]
[o1, ., getValue, (, )]
[o1]
[result, ==, 0, &&, tieBreaker, !=, null, ?, tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), ), :, result]
[result, ==, 0, &&, tieBreaker, !=, null]
[result, ==, 0]
[result]
[0]
[tieBreaker, !=, null]
[tieBreaker]
[null]
[tieBreaker, ., compare, (, o1, ., getValue, (, ), ,, o2, ., getValue, (, ), )]
[tieBreaker]
[o1, ., getValue, (, )]
[o1]
[o2, ., getValue, (, )]
[o2]
[result]
[0]
[new, Color, (, count, )]
[count]
[graph, ., newSubGraph, (, )]
[graph]
[worklist, ., iterator, (, )]
[worklist]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[subgraph, ., isIndependentOf, (, node, ., getValue, (, ), )]
[subgraph]
[node, ., getValue, (, )]
[node]
[subgraph, ., addNode, (, node, ., getValue, (, ), )]
[subgraph]
[node, ., getValue, (, )]
[node]
[node, ., setAnnotation, (, color, )]
[node]
[color]
[i, ., remove, (, )]
[i]
[count, ++]
[count]
[!, worklist, ., isEmpty, (, )]
[worklist, ., isEmpty, (, )]
[worklist]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, N, [, ], ), new, Object, [, count, ]]
[new, Object, [, count, ]]
[count]
[colorToNodeMap]
[map]
[count]
