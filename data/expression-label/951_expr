[0.5, *, (, 3, -, FastMath, ., sqrt, (, 5, ), )]
[0.5]
[(, 3, -, FastMath, ., sqrt, (, 5, ), )]
[3, -, FastMath, ., sqrt, (, 5, )]
[3]
[FastMath, ., sqrt, (, 5, )]
[FastMath]
[5]
[2, *, FastMath, ., ulp, (, 1d, )]
[2]
[FastMath, ., ulp, (, 1d, )]
[FastMath]
[1d]
[checker]
[rel, <, MIN_RELATIVE_TOLERANCE]
[rel]
[MIN_RELATIVE_TOLERANCE]
[new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, )]
[rel]
[MIN_RELATIVE_TOLERANCE]
[true]
[abs, <=, 0]
[abs]
[0]
[new, NotStrictlyPositiveException, (, abs, )]
[abs]
[relativeThreshold]
[rel]
[absoluteThreshold]
[abs]
[rel]
[abs]
[null]
[getGoalType, (, ), ==, GoalType, ., MINIMIZE]
[getGoalType, (, )]
[GoalType, ., MINIMIZE]
[GoalType]
[getMin, (, )]
[getStartValue, (, )]
[getMax, (, )]
[getConvergenceChecker, (, )]
[lo, <, hi]
[lo]
[hi]
[a]
[lo]
[b]
[hi]
[a]
[hi]
[b]
[lo]
[mid]
[x]
[x]
[0]
[0]
[computeObjectiveValue, (, x, )]
[x]
[!, isMinim]
[isMinim]
[fx]
[-, fx]
[fx]
[fx]
[fx]
[null]
[new, UnivariatePointValuePair, (, x, ,, isMinim, ?, fx, :, -, fx, )]
[x]
[isMinim, ?, fx, :, -, fx]
[isMinim]
[fx]
[-, fx]
[fx]
[current]
[0]
[true]
[0.5, *, (, a, +, b, )]
[0.5]
[(, a, +, b, )]
[a, +, b]
[a]
[b]
[relativeThreshold, *, FastMath, ., abs, (, x, ), +, absoluteThreshold]
[relativeThreshold, *, FastMath, ., abs, (, x, )]
[relativeThreshold]
[FastMath, ., abs, (, x, )]
[FastMath]
[x]
[absoluteThreshold]
[2, *, tol1]
[2]
[tol1]
[FastMath, ., abs, (, x, -, m, ), <=, tol2, -, 0.5, *, (, b, -, a, )]
[FastMath, ., abs, (, x, -, m, )]
[FastMath]
[x, -, m]
[x]
[m]
[tol2, -, 0.5, *, (, b, -, a, )]
[tol2]
[0.5, *, (, b, -, a, )]
[0.5]
[(, b, -, a, )]
[b, -, a]
[b]
[a]
[!, stop]
[stop]
[0]
[0]
[0]
[0]
[FastMath, ., abs, (, e, ), >, tol1]
[FastMath, ., abs, (, e, )]
[FastMath]
[e]
[tol1]
[r]
[(, x, -, w, ), *, (, fx, -, fv, )]
[(, x, -, w, )]
[x, -, w]
[x]
[w]
[(, fx, -, fv, )]
[fx, -, fv]
[fx]
[fv]
[q]
[(, x, -, v, ), *, (, fx, -, fw, )]
[(, x, -, v, )]
[x, -, v]
[x]
[v]
[(, fx, -, fw, )]
[fx, -, fw]
[fx]
[fw]
[p]
[(, x, -, v, ), *, q, -, (, x, -, w, ), *, r]
[(, x, -, v, ), *, q]
[(, x, -, v, )]
[x, -, v]
[x]
[v]
[q]
[(, x, -, w, ), *, r]
[(, x, -, w, )]
[x, -, w]
[x]
[w]
[r]
[q]
[2, *, (, q, -, r, )]
[2]
[(, q, -, r, )]
[q, -, r]
[q]
[r]
[q, >, 0]
[q]
[0]
[p]
[-, p]
[p]
[q]
[-, q]
[q]
[r]
[e]
[e]
[d]
[p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, ), &&, FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, )]
[p, >, q, *, (, a, -, x, ), &&, p, <, q, *, (, b, -, x, )]
[p, >, q, *, (, a, -, x, )]
[p]
[q, *, (, a, -, x, )]
[q]
[(, a, -, x, )]
[a, -, x]
[a]
[x]
[p, <, q, *, (, b, -, x, )]
[p]
[q, *, (, b, -, x, )]
[q]
[(, b, -, x, )]
[b, -, x]
[b]
[x]
[FastMath, ., abs, (, p, ), <, FastMath, ., abs, (, 0.5, *, q, *, r, )]
[FastMath, ., abs, (, p, )]
[FastMath]
[p]
[FastMath, ., abs, (, 0.5, *, q, *, r, )]
[FastMath]
[0.5, *, q, *, r]
[0.5, *, q]
[0.5]
[q]
[r]
[d]
[p, /, q]
[p]
[q]
[u]
[x, +, d]
[x]
[d]
[u, -, a, <, tol2, ||, b, -, u, <, tol2]
[u, -, a, <, tol2]
[u, -, a]
[u]
[a]
[tol2]
[b, -, u, <, tol2]
[b, -, u]
[b]
[u]
[tol2]
[x, <=, m]
[x]
[m]
[d]
[tol1]
[d]
[-, tol1]
[tol1]
[x, <, m]
[x]
[m]
[e]
[b, -, x]
[b]
[x]
[e]
[a, -, x]
[a]
[x]
[d]
[GOLDEN_SECTION, *, e]
[GOLDEN_SECTION]
[e]
[x, <, m]
[x]
[m]
[e]
[b, -, x]
[b]
[x]
[e]
[a, -, x]
[a]
[x]
[d]
[GOLDEN_SECTION, *, e]
[GOLDEN_SECTION]
[e]
[FastMath, ., abs, (, d, ), <, tol1]
[FastMath, ., abs, (, d, )]
[FastMath]
[d]
[tol1]
[d, >=, 0]
[d]
[0]
[u]
[x, +, tol1]
[x]
[tol1]
[u]
[x, -, tol1]
[x]
[tol1]
[u]
[x, +, d]
[x]
[d]
[computeObjectiveValue, (, u, )]
[u]
[!, isMinim]
[isMinim]
[fu]
[-, fu]
[fu]
[previous]
[current]
[current]
[new, UnivariatePointValuePair, (, u, ,, isMinim, ?, fu, :, -, fu, )]
[u]
[isMinim, ?, fu, :, -, fu]
[isMinim]
[fu]
[-, fu]
[fu]
[best]
[best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, )]
[best]
[best, (, previous, ,, current, ,, isMinim, )]
[previous]
[current]
[isMinim]
[isMinim]
[checker, !=, null, &&, checker, ., converged, (, iter, ,, previous, ,, current, )]
[checker, !=, null]
[checker]
[null]
[checker, ., converged, (, iter, ,, previous, ,, current, )]
[checker]
[iter]
[previous]
[current]
[best]
[fu, <=, fx]
[fu]
[fx]
[u, <, x]
[u]
[x]
[b]
[x]
[a]
[x]
[v]
[w]
[fv]
[fw]
[w]
[x]
[fw]
[fx]
[x]
[u]
[fx]
[fu]
[u, <, x]
[u]
[x]
[a]
[u]
[b]
[u]
[fu, <=, fw, ||, Precision, ., equals, (, w, ,, x, )]
[fu, <=, fw]
[fu]
[fw]
[Precision, ., equals, (, w, ,, x, )]
[Precision]
[w]
[x]
[v]
[w]
[fv]
[fw]
[w]
[u]
[fw]
[fu]
[fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, ), ||, Precision, ., equals, (, v, ,, w, )]
[fu, <=, fv, ||, Precision, ., equals, (, v, ,, x, )]
[fu, <=, fv]
[fu]
[fv]
[Precision, ., equals, (, v, ,, x, )]
[Precision]
[v]
[x]
[Precision, ., equals, (, v, ,, w, )]
[Precision]
[v]
[w]
[v]
[u]
[fv]
[fu]
[best, (, best, ,, best, (, previous, ,, current, ,, isMinim, ), ,, isMinim, )]
[best]
[best, (, previous, ,, current, ,, isMinim, )]
[previous]
[current]
[isMinim]
[isMinim]
[++, iter]
[iter]
[a, ==, null]
[a]
[null]
[b]
[b, ==, null]
[b]
[null]
[a]
[isMinim]
[a, ., getValue, (, ), <=, b, ., getValue, (, ), ?, a, :, b]
[a, ., getValue, (, ), <=, b, ., getValue, (, )]
[a, ., getValue, (, )]
[a]
[b, ., getValue, (, )]
[b]
[a]
[b]
[a, ., getValue, (, ), >=, b, ., getValue, (, ), ?, a, :, b]
[a, ., getValue, (, ), >=, b, ., getValue, (, )]
[a, ., getValue, (, )]
[a]
[b, ., getValue, (, )]
[b]
[a]
[b]
