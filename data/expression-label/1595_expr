[Maps, ., newHashMap, (, )]
[Maps]
[new, ArrayDeque, <, BasicBlock, >, (, )]
[compiler]
[behavior]
[Predicates, ., <, Var, >, alwaysTrue, (, )]
[Predicates]
[this, ., compiler]
[this]
[compiler]
[this, ., behavior]
[this]
[behavior]
[this, ., varFilter]
[this]
[varFilter]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[this]
[NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, this, )]
[NodeTraversal]
[compiler]
[scriptRoot]
[this]
[referenceMap, ., keySet, (, )]
[referenceMap]
[var, ., scope]
[var]
[referenceMap, ., get, (, v, )]
[referenceMap]
[v]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, "arguments", )]
[n, ., getString, (, )]
[n]
["arguments"]
[v]
[t, ., getScope, (, ), ., getArgumentsVar, (, )]
[t, ., getScope, (, )]
[t]
[v]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getString, (, )]
[n]
[v, !=, null, &&, varFilter, ., apply, (, v, )]
[v, !=, null]
[v]
[null]
[varFilter, ., apply, (, v, )]
[varFilter]
[v]
[addReference, (, t, ,, v, ,, new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), ), )]
[t]
[v]
[new, Reference, (, n, ,, t, ,, blockStack, ., peek, (, ), )]
[n]
[t]
[blockStack, ., peek, (, )]
[blockStack]
[isBlockBoundary, (, n, ,, parent, )]
[n]
[parent]
[blockStack, ., pop, (, )]
[blockStack]
[t, ., getScope, (, ), ., getRootNode, (, )]
[t, ., getScope, (, )]
[t]
[blockStack, ., isEmpty, (, ), ?, null, :, blockStack, ., peek, (, )]
[blockStack, ., isEmpty, (, )]
[blockStack]
[null]
[blockStack, ., peek, (, )]
[blockStack]
[blockStack, ., push, (, new, BasicBlock, (, parent, ,, n, ), )]
[blockStack]
[new, BasicBlock, (, parent, ,, n, )]
[parent]
[n]
[blockStack, ., pop, (, )]
[blockStack]
[t, ., getScope, (, ), ., isGlobal, (, )]
[t, ., getScope, (, )]
[t]
[compiler, ., updateGlobalVarReferences, (, referenceMap, ,, t, ., getScopeRoot, (, ), )]
[compiler]
[referenceMap]
[t, ., getScopeRoot, (, )]
[t]
[behavior, ., afterExitScope, (, t, ,, compiler, ., getGlobalVarReferences, (, ), )]
[behavior]
[t]
[compiler, ., getGlobalVarReferences, (, )]
[compiler]
[behavior, ., afterExitScope, (, t, ,, new, ReferenceMapWrapper, (, referenceMap, ), )]
[behavior]
[t]
[new, ReferenceMapWrapper, (, referenceMap, )]
[referenceMap]
[isBlockBoundary, (, n, ,, parent, )]
[n]
[parent]
[blockStack, ., push, (, new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, ), )]
[blockStack]
[new, BasicBlock, (, blockStack, ., peek, (, ), ,, n, )]
[blockStack, ., peek, (, )]
[blockStack]
[n]
[true]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[Token, ., DO]
[Token]
[Token, ., FOR]
[Token]
[Token, ., TRY]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., WITH]
[Token]
[true]
[Token, ., AND]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., IF]
[Token]
[Token, ., OR]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[n, ., isCase, (, )]
[n]
[referenceMap, ., get, (, v, )]
[referenceMap]
[v]
[referenceInfo, ==, null]
[referenceInfo]
[null]
[referenceInfo]
[new, ReferenceCollection, (, )]
[referenceMap, ., put, (, v, ,, referenceInfo, )]
[referenceMap]
[v]
[referenceInfo]
[referenceInfo, ., add, (, reference, ,, t, ,, v, )]
[referenceInfo]
[reference]
[t]
[v]
[this, ., referenceMap]
[this]
[referenceMap]
[referenceMap, ., get, (, var, )]
[referenceMap]
[var]
[new, Behavior, (, ), {, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, }, }]
[Lists, ., newArrayList, (, )]
[Lists]
[references, ., iterator, (, )]
[references]
[references, ., add, (, reference, )]
[references]
[reference]
[references, ., size, (, )]
[references]
[size, ==, 0]
[size]
[0]
[false]
[getInitializingReference, (, )]
[init, ==, null]
[init]
[null]
[false]
[Preconditions, ., checkState, (, references, ., get, (, 0, ), ., isDeclaration, (, ), )]
[Preconditions]
[references, ., get, (, 0, ), ., isDeclaration, (, )]
[references, ., get, (, 0, )]
[references]
[0]
[init, ., getBasicBlock, (, )]
[init]
[1]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[!, initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, ), )]
[initBlock, ., provablyExecutesBefore, (, references, ., get, (, i, ), ., getBasicBlock, (, ), )]
[initBlock]
[references, ., get, (, i, ), ., getBasicBlock, (, )]
[references, ., get, (, i, )]
[references]
[i]
[false]
[true]
[null]
[references]
[scope, ==, null]
[scope]
[null]
[scope]
[ref, ., scope]
[ref]
[scope, !=, ref, ., scope]
[scope]
[ref, ., scope]
[ref]
[true]
[false]
[references, ., get, (, index, )]
[references]
[index]
[maybeInit, ., isInitializingDeclaration, (, )]
[maybeInit]
[true]
[false]
[index, <, references, ., size, (, ), &&, index, >, 0]
[index, <, references, ., size, (, )]
[index]
[references, ., size, (, )]
[references]
[index, >, 0]
[index]
[0]
[references, ., get, (, index, -, 1, )]
[references]
[index, -, 1]
[index]
[1]
[maybeDecl, ., isVarDeclaration, (, )]
[maybeDecl]
[Preconditions, ., checkState, (, !, maybeDecl, ., isInitializingDeclaration, (, ), )]
[Preconditions]
[!, maybeDecl, ., isInitializingDeclaration, (, )]
[maybeDecl, ., isInitializingDeclaration, (, )]
[maybeDecl]
[references, ., get, (, index, )]
[references]
[index]
[maybeInit, ., isSimpleAssignmentToName, (, )]
[maybeInit]
[true]
[false]
[isInitializingDeclarationAt, (, 0, )]
[0]
[references, ., get, (, 0, )]
[references]
[0]
[isInitializingAssignmentAt, (, 1, )]
[1]
[references, ., get, (, 1, )]
[references]
[1]
[null]
[references, ., size, (, )]
[references]
[0]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[isInitializingDeclarationAt, (, i, ), ||, isInitializingAssignmentAt, (, i, )]
[isInitializingDeclarationAt, (, i, )]
[i]
[isInitializingAssignmentAt, (, i, )]
[i]
[references, ., get, (, i, )]
[references]
[i]
[null]
[getOneAndOnlyAssignment, (, )]
[ref, ==, null]
[ref]
[null]
[false]
[ref, ., getBasicBlock, (, )]
[ref]
[block, !=, null]
[block]
[null]
[block]
[block, ., getParent, (, )]
[block]
[block, ., isFunction]
[block]
[block, ., isLoop]
[block]
[false]
[true]
[null]
[references, ., size, (, )]
[references]
[0]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[references, ., get, (, i, )]
[references]
[i]
[ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, )]
[ref, ., isLvalue, (, )]
[ref]
[ref, ., isInitializingDeclaration, (, )]
[ref]
[assignment, ==, null]
[assignment]
[null]
[assignment]
[ref]
[null]
[assignment]
[references, ., size, (, )]
[references]
[0]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[references, ., get, (, i, )]
[references]
[i]
[ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, )]
[ref, ., isLvalue, (, )]
[ref]
[ref, ., isInitializingDeclaration, (, )]
[ref]
[false]
[true]
[references, ., size, (, )]
[references]
[size, >, 0, &&, references, ., get, (, 0, ), ., isInitializingDeclaration, (, )]
[size, >, 0]
[size]
[0]
[references, ., get, (, 0, ), ., isInitializingDeclaration, (, )]
[references, ., get, (, 0, )]
[references]
[0]
[true]
[false]
[ImmutableSet, ., of, (, Token, ., VAR, ,, Token, ., FUNCTION, ,, Token, ., CATCH, )]
[ImmutableSet]
[Token, ., VAR]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., CATCH]
[Token]
[nameNode]
[basicBlock]
[t, ., getScope, (, )]
[t]
[t, ., getInput, (, ), ., getInputId, (, )]
[t, ., getInput, (, )]
[t]
[new, Reference, (, func, ., getFirstChild, (, ), ,, basicBlock, ,, t, ., getScope, (, ), ,, t, ., getInput, (, ), ., getInputId, (, ), )]
[func, ., getFirstChild, (, )]
[func]
[basicBlock]
[t, ., getScope, (, )]
[t]
[t, ., getInput, (, ), ., getInputId, (, )]
[t, ., getInput, (, )]
[t]
[new, Reference, (, new, Node, (, Token, ., NAME, ), ,, null, ,, null, ,, input, ., getInputId, (, ), )]
[new, Node, (, Token, ., NAME, )]
[Token, ., NAME]
[Token]
[null]
[null]
[input, ., getInputId, (, )]
[input]
[this, ., nameNode]
[this]
[nameNode]
[this, ., basicBlock]
[this]
[basicBlock]
[this, ., scope]
[this]
[scope]
[this, ., inputId]
[this]
[inputId]
[this, ., sourceFile]
[this]
[nameNode, ., getStaticSourceFile, (, )]
[nameNode]
[new, Reference, (, nameNode, ,, basicBlock, ,, newScope, ,, inputId, )]
[nameNode]
[basicBlock]
[newScope]
[inputId]
[scope, ., getVar, (, nameNode, ., getString, (, ), )]
[scope]
[nameNode, ., getString, (, )]
[nameNode]
[nameNode]
[inputId]
[sourceFile]
[getParent, (, )]
[parent, ., getParent, (, )]
[parent]
[DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), ), ||, parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, )]
[DECLARATION_PARENTS, ., contains, (, parent, ., getType, (, ), )]
[DECLARATION_PARENTS]
[parent, ., getType, (, )]
[parent]
[parent, ., isParamList, (, ), &&, grandparent, ., isFunction, (, )]
[parent, ., isParamList, (, )]
[parent]
[grandparent, ., isFunction, (, )]
[grandparent]
[getParent, (, ), ., isVar, (, )]
[getParent, (, )]
[NodeUtil, ., isHoistedFunctionDeclaration, (, getParent, (, ), )]
[NodeUtil]
[getParent, (, )]
[isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, ), ||, nameNode, ., getFirstChild, (, ), !=, null]
[isDeclaration, (, ), &&, !, getParent, (, ), ., isVar, (, )]
[isDeclaration, (, )]
[!, getParent, (, ), ., isVar, (, )]
[getParent, (, ), ., isVar, (, )]
[getParent, (, )]
[nameNode, ., getFirstChild, (, ), !=, null]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[null]
[getParent, (, )]
[(, parent, ., isFunction, (, ), ), ?, parent, :, NodeUtil, ., getAssignedValue, (, nameNode, )]
[(, parent, ., isFunction, (, ), )]
[parent, ., isFunction, (, )]
[parent]
[parent]
[NodeUtil, ., getAssignedValue, (, nameNode, )]
[NodeUtil]
[nameNode]
[basicBlock]
[getNode, (, ), ., getParent, (, )]
[getNode, (, )]
[getParent, (, )]
[parent, ==, null, ?, null, :, parent, ., getParent, (, )]
[parent, ==, null]
[parent]
[null]
[null]
[parent, ., getParent, (, )]
[parent]
[n, ., getParent, (, )]
[n]
[parent, ., isVar, (, )]
[parent]
[isLhsOfForInExpression, (, parent, )]
[parent]
[NodeUtil, ., isForIn, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[getParent, (, )]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, nameNode]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, nameNode]
[parent, ., getFirstChild, (, )]
[parent]
[nameNode]
[getParent, (, )]
[parent, ., getType, (, )]
[parent]
[(, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, ), ||, isLhsOfForInExpression, (, nameNode, )]
[(, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC, ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, )]
[(, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC, ||, parentType, ==, Token, ., DEC]
[(, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, ), ||, parentType, ==, Token, ., INC]
[(, parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null, )]
[parentType, ==, Token, ., VAR, &&, nameNode, ., getFirstChild, (, ), !=, null]
[parentType, ==, Token, ., VAR]
[parentType]
[Token, ., VAR]
[Token]
[nameNode, ., getFirstChild, (, ), !=, null]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[null]
[parentType, ==, Token, ., INC]
[parentType]
[Token, ., INC]
[Token]
[parentType, ==, Token, ., DEC]
[parentType]
[Token, ., DEC]
[Token]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, nameNode]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, nameNode]
[parent, ., getFirstChild, (, )]
[parent]
[nameNode]
[isLhsOfForInExpression, (, nameNode, )]
[nameNode]
[scope]
[this, ., parent]
[this]
[parent]
[this, ., isHoisted]
[this]
[NodeUtil, ., isHoistedFunctionDeclaration, (, root, )]
[NodeUtil]
[root]
[this, ., isFunction]
[this]
[root, ., isFunction, (, )]
[root]
[root, ., getParent, (, ), !=, null]
[root, ., getParent, (, )]
[root]
[null]
[root, ., getParent, (, ), ., getType, (, )]
[root, ., getParent, (, )]
[root]
[this, ., isLoop]
[this]
[pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE, ||, pType, ==, Token, ., FOR]
[pType, ==, Token, ., DO, ||, pType, ==, Token, ., WHILE]
[pType, ==, Token, ., DO]
[pType]
[Token, ., DO]
[Token]
[pType, ==, Token, ., WHILE]
[pType]
[Token, ., WHILE]
[Token]
[pType, ==, Token, ., FOR]
[pType]
[Token, ., FOR]
[Token]
[this, ., isLoop]
[this]
[false]
[parent]
[getParent, (, ), ==, null]
[getParent, (, )]
[null]
[currentBlock]
[thatBlock]
[currentBlock, !=, null, &&, currentBlock, !=, this]
[currentBlock, !=, null]
[currentBlock]
[null]
[currentBlock, !=, this]
[currentBlock]
[this]
[currentBlock]
[currentBlock, ., getParent, (, )]
[currentBlock]
[currentBlock, ., isHoisted]
[currentBlock]
[false]
[currentBlock, ==, this]
[currentBlock]
[this]
[true]
[isGlobalScopeBlock, (, ), &&, thatBlock, ., isGlobalScopeBlock, (, )]
[isGlobalScopeBlock, (, )]
[thatBlock, ., isGlobalScopeBlock, (, )]
[thatBlock]
[true]
[false]
