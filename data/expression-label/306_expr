[DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", )]
[DiagnosticType]
["JSC_REGEXP_REFERENCE"]
["References to the global RegExp object prevents ", +, "optimization of regular expressions."]
["References to the global RegExp object prevents "]
["optimization of regular expressions."]
[DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", )]
[DiagnosticType]
["JSC_MALFORMED_REGEXP"]
["Malformed Regular Expression: {0}"]
[false]
[globalRegExpPropertiesUsed]
[this, ., compiler]
[this]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[NodeUtil, ., isReferenceName, (, n, )]
[NodeUtil]
[n]
[n, ., getString, (, )]
[n]
[name, ., equals, (, "RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null]
[name, ., equals, (, "RegExp", )]
[name]
["RegExp"]
[t, ., getScope, (, ), ., getVar, (, name, ), ==, null]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[null]
[parent, ., getType, (, )]
[parent]
[(, n, ==, parent, ., getFirstChild, (, ), )]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[!, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), )]
[(, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), )]
[(, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, )]
[(, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, )]
[(, parentType, ==, Token, ., NEW, &&, first, )]
[parentType, ==, Token, ., NEW, &&, first]
[parentType, ==, Token, ., NEW]
[parentType]
[Token, ., NEW]
[Token]
[first]
[(, parentType, ==, Token, ., CALL, &&, first, )]
[parentType, ==, Token, ., CALL, &&, first]
[parentType, ==, Token, ., CALL]
[parentType]
[Token, ., CALL]
[Token]
[first]
[(, parentType, ==, Token, ., INSTANCEOF, &&, !, first, )]
[parentType, ==, Token, ., INSTANCEOF, &&, !, first]
[parentType, ==, Token, ., INSTANCEOF]
[parentType]
[Token, ., INSTANCEOF]
[Token]
[!, first]
[first]
[t, ., report, (, n, ,, REGEXP_REFERENCE, )]
[t]
[n]
[REGEXP_REFERENCE]
[globalRegExpPropertiesUsed]
[true]
[n, ., isRegExp, (, )]
[n]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, ""]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[""]
[RegExpTree, ., parseRegExp, (, pattern, ,, flags, )]
[RegExpTree]
[pattern]
[flags]
[t, ., report, (, n, ,, MALFORMED_REGEXP, ,, ex, ., getMessage, (, ), )]
[t]
[n]
[MALFORMED_REGEXP]
[ex, ., getMessage, (, )]
[ex]
