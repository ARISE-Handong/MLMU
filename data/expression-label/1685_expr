[-, 7514160997164582554L]
[7514160997164582554L]
[new, BasicStroke, (, 1.0f, )]
[1.0f]
[Color, ., gray]
[Color]
[DEFAULT_ADVANCE_LINE_STROKE]
[period]
[0.0]
[period]
[offset]
[null]
[0]
[period]
[label]
[label]
[this, ., period]
[this]
[period]
[this, ., offset]
[this]
[offset]
[setFixedAutoRange, (, period, )]
[period]
[this, ., advanceLineVisible]
[this]
[true]
[this, ., advanceLinePaint]
[this]
[DEFAULT_ADVANCE_LINE_PAINT]
[this, ., advanceLineVisible]
[this]
[this, ., advanceLineVisible]
[this]
[visible]
[this, ., advanceLinePaint]
[this]
[paint, ==, null]
[paint]
[null]
[new, IllegalArgumentException, (, "Null 'paint' argument.", )]
["Null 'paint' argument."]
[this, ., advanceLinePaint]
[this]
[paint]
[this, ., advanceLineStroke]
[this]
[stroke, ==, null]
[stroke]
[null]
[new, IllegalArgumentException, (, "Null 'stroke' argument.", )]
["Null 'stroke' argument."]
[this, ., advanceLineStroke]
[this]
[stroke]
[this, ., boundMappedToLastCycle]
[this]
[this, ., boundMappedToLastCycle]
[this]
[boundMappedToLastCycle]
[estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), )]
[g2]
[getTickUnit, (, )]
[getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, )]
[getRange, (, ), ., getLength, (, ), *, tickLabelWidth]
[getRange, (, ), ., getLength, (, )]
[getRange, (, )]
[tickLabelWidth]
[dataArea, ., getWidth, (, )]
[dataArea]
[setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, )]
[(, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[getStandardTickUnits, (, )]
[n]
[false]
[false]
[estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), )]
[g2]
[getTickUnit, (, )]
[getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, )]
[getRange, (, ), ., getLength, (, ), *, tickLabelWidth]
[getRange, (, ), ., getLength, (, )]
[getRange, (, )]
[tickLabelWidth]
[dataArea, ., getHeight, (, )]
[dataArea]
[setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,, false, )]
[(, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, )]
[getStandardTickUnits, (, )]
[n]
[false]
[false]
[number]
[label]
[textAnchor]
[rotationAnchor]
[angle]
[this, ., mapToLastCycle]
[this]
[mapToLastCycle]
[tick, instanceof, CycleBoundTick]
[tick]
[this, ., boundMappedToLastCycle]
[this]
[this, ., boundMappedToLastCycle]
[this]
[(, (, CycleBoundTick, ), tick, ), ., mapToLastCycle]
[(, (, CycleBoundTick, ), tick, )]
[(, CycleBoundTick, ), tick]
[tick]
[super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, )]
[super]
[tick]
[cursor]
[dataArea]
[edge]
[this, ., boundMappedToLastCycle]
[this]
[mapsav]
[ret]
[super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, )]
[super]
[tick]
[cursor]
[dataArea]
[edge]
[new, java, ., util, ., ArrayList, (, )]
[getTickLabelFont, (, )]
[g2, ., setFont, (, tickLabelFont, )]
[g2]
[tickLabelFont]
[isAutoTickUnitSelection, (, )]
[selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[getTickUnit, (, ), ., getSize, (, )]
[getTickUnit, (, )]
[getCycleBound, (, )]
[Math, ., ceil, (, cycleBound, /, unit, ), *, unit]
[Math, ., ceil, (, cycleBound, /, unit, )]
[Math]
[cycleBound, /, unit]
[cycleBound]
[unit]
[unit]
[getRange, (, ), ., getUpperBound, (, )]
[getRange, (, )]
[false]
[this, ., boundMappedToLastCycle]
[this]
[this, ., boundMappedToLastCycle]
[this]
[false]
[null]
[0.0f]
[upperValue, ==, cycleBound]
[upperValue]
[cycleBound]
[currentTickValue]
[calculateLowestVisibleTickValue, (, )]
[cycled]
[true]
[this, ., boundMappedToLastCycle]
[this]
[true]
[currentTickValue, <=, upperValue]
[currentTickValue]
[upperValue]
[false]
[(, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled]
[(, currentTickValue, +, unit, >, upperValue, )]
[currentTickValue, +, unit, >, upperValue]
[currentTickValue, +, unit]
[currentTickValue]
[unit]
[upperValue]
[!, cycled]
[cycled]
[cyclenow]
[true]
[valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, )]
[currentTickValue]
[dataArea]
[edge]
[getNumberFormatOverride, (, )]
[formatter, !=, null]
[formatter]
[null]
[tickLabel]
[formatter, ., format, (, currentTickValue, )]
[formatter]
[currentTickValue]
[tickLabel]
[getTickUnit, (, ), ., valueToString, (, currentTickValue, )]
[getTickUnit, (, )]
[currentTickValue]
[(, float, ), xx]
[xx]
[null]
[null]
[0.0]
[isVerticalTickLabels, (, )]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[angle]
[Math, ., PI, /, 2.0]
[Math, ., PI]
[Math]
[2.0]
[angle]
[-, Math, ., PI, /, 2.0]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[2.0]
[anchor]
[TextAnchor, ., CENTER_RIGHT]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastX, ==, x, )]
[lastX, ==, x]
[lastX]
[x]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT]
[isInverted, (, )]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[rotationAnchor]
[anchor]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[anchor]
[TextAnchor, ., BOTTOM_CENTER]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastX, ==, x, )]
[lastX, ==, x]
[lastX]
[x]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[rotationAnchor]
[anchor]
[anchor]
[TextAnchor, ., TOP_CENTER]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastX, ==, x, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastX, ==, x, )]
[lastX, ==, x]
[lastX]
[x]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT]
[isInverted, (, )]
[TextAnchor, ., TOP_LEFT]
[TextAnchor]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT]
[isInverted, (, )]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[TextAnchor, ., TOP_LEFT]
[TextAnchor]
[rotationAnchor]
[anchor]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, )]
[this, ., boundMappedToLastCycle]
[this]
[new, Double, (, currentTickValue, )]
[currentTickValue]
[tickLabel]
[anchor]
[rotationAnchor]
[angle]
[currentTickValue, ==, cycleBound]
[currentTickValue]
[cycleBound]
[this, ., internalMarkerCycleBoundTick]
[this]
[tick]
[result, ., add, (, tick, )]
[result]
[tick]
[lastTick]
[tick]
[lastX]
[x]
[currentTickValue]
[unit]
[cyclenow]
[currentTickValue]
[calculateLowestVisibleTickValue, (, )]
[upperValue]
[cycleBound]
[cycled]
[true]
[this, ., boundMappedToLastCycle]
[this]
[true]
[this, ., boundMappedToLastCycle]
[this]
[boundMapping]
[result]
[new, java, ., util, ., ArrayList, (, )]
[result, ., clear, (, )]
[result]
[getTickLabelFont, (, )]
[g2, ., setFont, (, tickLabelFont, )]
[g2]
[tickLabelFont]
[isAutoTickUnitSelection, (, )]
[selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[getTickUnit, (, ), ., getSize, (, )]
[getTickUnit, (, )]
[getCycleBound, (, )]
[Math, ., ceil, (, cycleBound, /, unit, ), *, unit]
[Math, ., ceil, (, cycleBound, /, unit, )]
[Math]
[cycleBound, /, unit]
[cycleBound]
[unit]
[unit]
[getRange, (, ), ., getUpperBound, (, )]
[getRange, (, )]
[false]
[this, ., boundMappedToLastCycle]
[this]
[this, ., boundMappedToLastCycle]
[this]
[true]
[null]
[0.0f]
[upperValue, ==, cycleBound]
[upperValue]
[cycleBound]
[currentTickValue]
[calculateLowestVisibleTickValue, (, )]
[cycled]
[true]
[this, ., boundMappedToLastCycle]
[this]
[true]
[currentTickValue, <=, upperValue]
[currentTickValue]
[upperValue]
[false]
[(, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled]
[(, currentTickValue, +, unit, >, upperValue, )]
[currentTickValue, +, unit, >, upperValue]
[currentTickValue, +, unit]
[currentTickValue]
[unit]
[upperValue]
[!, cycled]
[cycled]
[cyclenow]
[true]
[valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, )]
[currentTickValue]
[dataArea]
[edge]
[getNumberFormatOverride, (, )]
[formatter, !=, null]
[formatter]
[null]
[tickLabel]
[formatter, ., format, (, currentTickValue, )]
[formatter]
[currentTickValue]
[tickLabel]
[getTickUnit, (, ), ., valueToString, (, currentTickValue, )]
[getTickUnit, (, )]
[currentTickValue]
[(, float, ), yy]
[yy]
[null]
[null]
[0.0]
[isVerticalTickLabels, (, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[anchor]
[TextAnchor, ., BOTTOM_CENTER]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastY, ==, y, )]
[lastY, ==, y]
[lastY]
[y]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[rotationAnchor]
[anchor]
[angle]
[-, Math, ., PI, /, 2.0]
[-, Math, ., PI]
[Math, ., PI]
[Math]
[2.0]
[anchor]
[TextAnchor, ., BOTTOM_CENTER]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastY, ==, y, )]
[lastY, ==, y]
[lastY]
[y]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[rotationAnchor]
[anchor]
[angle]
[Math, ., PI, /, 2.0]
[Math, ., PI]
[Math]
[2.0]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[anchor]
[TextAnchor, ., CENTER_RIGHT]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastY, ==, y, )]
[lastY, ==, y]
[lastY]
[y]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT]
[isInverted, (, )]
[TextAnchor, ., TOP_RIGHT]
[TextAnchor]
[TextAnchor, ., BOTTOM_RIGHT]
[TextAnchor]
[rotationAnchor]
[anchor]
[anchor]
[TextAnchor, ., CENTER_LEFT]
[TextAnchor]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, )]
[(, lastTick, !=, null, ), &&, (, lastY, ==, y, )]
[(, lastTick, !=, null, )]
[lastTick, !=, null]
[lastTick]
[null]
[(, lastY, ==, y, )]
[lastY, ==, y]
[lastY]
[y]
[(, currentTickValue, !=, cycleBound, )]
[currentTickValue, !=, cycleBound]
[currentTickValue]
[cycleBound]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT]
[isInverted, (, )]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[TextAnchor, ., TOP_LEFT]
[TextAnchor]
[result, ., remove, (, result, ., size, (, ), -, 1, )]
[result]
[result, ., size, (, ), -, 1]
[result, ., size, (, )]
[result]
[1]
[result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), )]
[result]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), )]
[this, ., boundMappedToLastCycle]
[this]
[lastTick, ., getNumber, (, )]
[lastTick]
[lastTick, ., getText, (, )]
[lastTick]
[anchor]
[anchor]
[lastTick, ., getAngle, (, )]
[lastTick]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[true]
[anchor]
[isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT]
[isInverted, (, )]
[TextAnchor, ., TOP_LEFT]
[TextAnchor]
[TextAnchor, ., BOTTOM_LEFT]
[TextAnchor]
[rotationAnchor]
[anchor]
[new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, )]
[this, ., boundMappedToLastCycle]
[this]
[new, Double, (, currentTickValue, )]
[currentTickValue]
[tickLabel]
[anchor]
[rotationAnchor]
[angle]
[currentTickValue, ==, cycleBound]
[currentTickValue]
[cycleBound]
[this, ., internalMarkerCycleBoundTick]
[this]
[tick]
[result, ., add, (, tick, )]
[result]
[tick]
[lastTick]
[tick]
[lastY]
[y]
[currentTickValue, ==, cycleBound]
[currentTickValue]
[cycleBound]
[this, ., internalMarkerCycleBoundTick]
[this]
[tick]
[currentTickValue]
[unit]
[cyclenow]
[currentTickValue]
[calculateLowestVisibleTickValue, (, )]
[upperValue]
[cycleBound]
[cycled]
[true]
[this, ., boundMappedToLastCycle]
[this]
[false]
[this, ., boundMappedToLastCycle]
[this]
[boundMapping]
[result]
[getRange, (, )]
[range, ., getUpperBound, (, )]
[range]
[getCycleBound, (, )]
[0.0]
[0.0]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[jmin]
[dataArea, ., getMinX, (, )]
[dataArea]
[jmax]
[dataArea, ., getMaxX, (, )]
[dataArea]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[jmin]
[dataArea, ., getMaxY, (, )]
[dataArea]
[jmax]
[dataArea, ., getMinY, (, )]
[dataArea]
[isInverted, (, )]
[jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[jmax]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, )]
[(, vmax, -, vp, )]
[vmax, -, vp]
[vmax]
[vp]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[java2DValue, >=, jbreak]
[java2DValue]
[jbreak]
[vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[vp]
[(, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[(, jmax, -, java2DValue, ), *, this, ., period]
[(, jmax, -, java2DValue, )]
[jmax, -, java2DValue]
[jmax]
[java2DValue]
[this, ., period]
[this]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[vp]
[(, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[(, java2DValue, -, jmin, ), *, this, ., period]
[(, java2DValue, -, jmin, )]
[java2DValue, -, jmin]
[java2DValue]
[jmin]
[this, ., period]
[this]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, )]
[(, vmax, -, vp, )]
[vmax, -, vp]
[vmax]
[vp]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[jmin]
[java2DValue, <=, jbreak]
[java2DValue]
[jbreak]
[vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[vp]
[(, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, )]
[(, java2DValue, -, jmin, ), *, this, ., period]
[(, java2DValue, -, jmin, )]
[java2DValue, -, jmin]
[java2DValue]
[jmin]
[this, ., period]
[this]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[vp]
[(, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, )]
[(, jmax, -, java2DValue, ), *, this, ., period]
[(, jmax, -, java2DValue, )]
[jmax, -, java2DValue]
[jmax]
[java2DValue]
[this, ., period]
[this]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[getRange, (, )]
[range, ., getLowerBound, (, )]
[range]
[range, ., getUpperBound, (, )]
[range]
[getCycleBound, (, )]
[(, value, <, vmin, ), ||, (, value, >, vmax, )]
[(, value, <, vmin, )]
[value, <, vmin]
[value]
[vmin]
[(, value, >, vmax, )]
[value, >, vmax]
[value]
[vmax]
[Double, ., NaN]
[Double]
[0.0]
[0.0]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[jmin]
[dataArea, ., getMinX, (, )]
[dataArea]
[jmax]
[dataArea, ., getMaxX, (, )]
[dataArea]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[jmax]
[dataArea, ., getMinY, (, )]
[dataArea]
[jmin]
[dataArea, ., getMaxY, (, )]
[dataArea]
[isInverted, (, )]
[value, ==, vp]
[value]
[vp]
[this, ., boundMappedToLastCycle, ?, jmin, :, jmax]
[this, ., boundMappedToLastCycle]
[this]
[jmin]
[jmax]
[value, >, vp]
[value]
[vp]
[jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[jmax]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, value, -, vp, ), *, (, jmax, -, jmin, )]
[(, value, -, vp, )]
[value, -, vp]
[value]
[vp]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period]
[jmin]
[(, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, vp, -, value, ), *, (, jmax, -, jmin, )]
[(, vp, -, value, )]
[vp, -, value]
[vp]
[value]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[value, ==, vp]
[value]
[vp]
[this, ., boundMappedToLastCycle, ?, jmax, :, jmin]
[this, ., boundMappedToLastCycle]
[this]
[jmax]
[jmin]
[value, >=, vp]
[value]
[vp]
[jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[jmin]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, value, -, vp, ), *, (, jmax, -, jmin, )]
[(, value, -, vp, )]
[value, -, vp]
[value]
[vp]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period]
[jmax]
[(, vp, -, value, ), *, (, jmax, -, jmin, ), /, this, ., period]
[(, vp, -, value, ), *, (, jmax, -, jmin, )]
[(, vp, -, value, )]
[vp, -, value]
[vp]
[value]
[(, jmax, -, jmin, )]
[jmax, -, jmin]
[jmax]
[jmin]
[this, ., period]
[this]
[setRange, (, value, -, this, ., period, /, 2.0, ,, value, +, this, ., period, /, 2.0, )]
[value, -, this, ., period, /, 2.0]
[value]
[this, ., period, /, 2.0]
[this, ., period]
[this]
[2.0]
[value, +, this, ., period, /, 2.0]
[value]
[this, ., period, /, 2.0]
[this, ., period]
[this]
[2.0]
[size, >, this, ., period]
[size]
[this, ., period]
[this]
[this, ., period]
[this]
[size]
[super, ., setAutoRangeMinimumSize, (, size, ,, notify, )]
[super]
[size]
[notify]
[this, ., period]
[this]
[length]
[super, ., setFixedAutoRange, (, length, )]
[super]
[length]
[range, ., getUpperBound, (, ), -, range, ., getLowerBound, (, )]
[range, ., getUpperBound, (, )]
[range]
[range, ., getLowerBound, (, )]
[range]
[size, >, this, ., period]
[size]
[this, ., period]
[this]
[this, ., period]
[this]
[size]
[super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, )]
[super]
[range]
[turnOffAutoRange]
[notify]
[Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *, this, ., period, +, this, ., offset]
[Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *, this, ., period]
[Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, )]
[Math]
[(, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period]
[(, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, )]
[getRange, (, ), ., getUpperBound, (, ), -, this, ., offset]
[getRange, (, ), ., getUpperBound, (, )]
[getRange, (, )]
[this, ., offset]
[this]
[this, ., period]
[this]
[this, ., period]
[this]
[this, ., offset]
[this]
[this, ., offset]
[this]
[this, ., offset]
[this]
[offset]
[this, ., period]
[this]
[this, ., period]
[this]
[period]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[false]
[super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, )]
[super]
[g2]
[cursor]
[plotArea]
[dataArea]
[edge]
[info]
[!, this, ., internalMarkerWhenTicksOverlap]
[this, ., internalMarkerWhenTicksOverlap]
[this]
[ret]
[getTickMarkOutsideLength, (, )]
[g2, ., getFontMetrics, (, getTickLabelFont, (, ), )]
[g2]
[getTickLabelFont, (, )]
[isVerticalTickLabels, (, )]
[ol]
[fm, ., getMaxAdvance, (, )]
[fm]
[ol]
[fm, ., getHeight, (, )]
[fm]
[0]
[isTickMarksVisible, (, )]
[(, float, ), valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, )]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, )]
[getRange, (, ), ., getUpperBound, (, )]
[getRange, (, )]
[dataArea]
[edge]
[null]
[g2, ., setStroke, (, getTickMarkStroke, (, ), )]
[g2]
[getTickMarkStroke, (, )]
[g2, ., setPaint, (, getTickMarkPaint, (, ), )]
[g2]
[getTickMarkPaint, (, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, )]
[cursor, -, ol]
[cursor]
[ol]
[xx]
[cursor, +, il]
[cursor]
[il]
[xx]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, )]
[cursor, +, ol]
[cursor]
[ol]
[xx]
[cursor, -, il]
[cursor]
[il]
[xx]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, )]
[xx]
[cursor, -, ol]
[cursor]
[ol]
[xx]
[cursor, +, il]
[cursor]
[il]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, )]
[xx]
[cursor, +, ol]
[cursor]
[ol]
[xx]
[cursor, -, il]
[cursor]
[il]
[g2, ., draw, (, mark, )]
[g2]
[mark]
[ret]
[super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, )]
[super]
[g2]
[cursor]
[plotArea]
[dataArea]
[edge]
[plotState]
[isAdvanceLineVisible, (, )]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, )]
[getRange, (, ), ., getUpperBound, (, )]
[getRange, (, )]
[dataArea]
[edge]
[null]
[g2, ., setStroke, (, getAdvanceLineStroke, (, ), )]
[g2]
[getAdvanceLineStroke, (, )]
[g2, ., setPaint, (, getAdvanceLinePaint, (, ), )]
[g2]
[getAdvanceLinePaint, (, )]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, )]
[cursor]
[xx]
[cursor, +, dataArea, ., getWidth, (, )]
[cursor]
[dataArea, ., getWidth, (, )]
[dataArea]
[xx]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, )]
[cursor, -, dataArea, ., getWidth, (, )]
[cursor]
[dataArea, ., getWidth, (, )]
[dataArea]
[xx]
[cursor]
[xx]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, )]
[xx]
[cursor, +, dataArea, ., getHeight, (, )]
[cursor]
[dataArea, ., getHeight, (, )]
[dataArea]
[xx]
[cursor]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[mark]
[new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), )]
[xx]
[cursor]
[xx]
[cursor, -, dataArea, ., getHeight, (, )]
[cursor]
[dataArea, ., getHeight, (, )]
[dataArea]
[g2, ., draw, (, mark, )]
[g2]
[mark]
[ret]
[this, ., internalMarkerCycleBoundTick]
[this]
[null]
[super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, )]
[super]
[g2]
[plot]
[plotArea]
[edge]
[space]
[this, ., internalMarkerCycleBoundTick, ==, null]
[this, ., internalMarkerCycleBoundTick]
[this]
[null]
[ret]
[g2, ., getFontMetrics, (, getTickLabelFont, (, ), )]
[g2]
[getTickLabelFont, (, )]
[TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, )]
[TextUtilities]
[this, ., internalMarkerCycleBoundTick, ., getText, (, )]
[this, ., internalMarkerCycleBoundTick]
[this]
[g2]
[fm]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[isVerticalTickLabels, (, )]
[space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, )]
[space]
[r, ., getHeight, (, ), /, 2]
[r, ., getHeight, (, )]
[r]
[2]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, )]
[space]
[r, ., getWidth, (, ), /, 2]
[r, ., getWidth, (, )]
[r]
[2]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[isVerticalTickLabels, (, )]
[space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, )]
[space]
[r, ., getWidth, (, ), /, 2]
[r, ., getWidth, (, )]
[r]
[2]
[RectangleEdge, ., TOP]
[RectangleEdge]
[space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP, )]
[space]
[r, ., getHeight, (, ), /, 2]
[r, ., getHeight, (, )]
[r]
[2]
[RectangleEdge, ., TOP]
[RectangleEdge]
[ret]
[stream, ., defaultWriteObject, (, )]
[stream]
[SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, )]
[SerialUtilities]
[this, ., advanceLinePaint]
[this]
[stream]
[SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,, stream, )]
[SerialUtilities]
[this, ., advanceLineStroke]
[this]
[stream]
[stream, ., defaultReadObject, (, )]
[stream]
[this, ., advanceLinePaint]
[this]
[SerialUtilities, ., readPaint, (, stream, )]
[SerialUtilities]
[stream]
[this, ., advanceLineStroke]
[this]
[SerialUtilities, ., readStroke, (, stream, )]
[SerialUtilities]
[stream]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, CyclicNumberAxis, )]
[(, obj, instanceof, CyclicNumberAxis, )]
[obj, instanceof, CyclicNumberAxis]
[obj]
[false]
[!, super, ., equals, (, obj, )]
[super, ., equals, (, obj, )]
[super]
[obj]
[false]
[(, CyclicNumberAxis, ), obj]
[obj]
[this, ., period, !=, that, ., period]
[this, ., period]
[this]
[that, ., period]
[that]
[false]
[this, ., offset, !=, that, ., offset]
[this, ., offset]
[this]
[that, ., offset]
[that]
[false]
[!, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, )]
[PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, )]
[PaintUtilities]
[this, ., advanceLinePaint]
[this]
[that, ., advanceLinePaint]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, )]
[ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, )]
[ObjectUtilities]
[this, ., advanceLineStroke]
[this]
[that, ., advanceLineStroke]
[that]
[false]
[this, ., advanceLineVisible, !=, that, ., advanceLineVisible]
[this, ., advanceLineVisible]
[this]
[that, ., advanceLineVisible]
[that]
[false]
[this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle]
[this, ., boundMappedToLastCycle]
[this]
[that, ., boundMappedToLastCycle]
[that]
[false]
[true]
