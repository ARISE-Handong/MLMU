["arguments"]
[DiagnosticType, ., error, (, "JSC_VAR_MULTIPLY_DECLARED_ERROR", ,, "Variable {0} first declared in {1}", )]
[DiagnosticType]
["JSC_VAR_MULTIPLY_DECLARED_ERROR"]
["Variable {0} first declared in {1}"]
[DiagnosticType, ., error, (, "JSC_VAR_ARGUMENTS_SHADOWED_ERROR", ,, "Shadowing \"arguments\" is not allowed", )]
[DiagnosticType]
["JSC_VAR_ARGUMENTS_SHADOWED_ERROR"]
["Shadowing \"arguments\" is not allowed"]
[this, ., compiler]
[this]
[compiler]
[this, ., redeclarationHandler]
[this]
[new, DefaultRedeclarationHandler, (, )]
[this, ., compiler]
[this]
[compiler]
[this, ., redeclarationHandler]
[this]
[redeclarationHandler]
[inputId]
[null]
[parent, ==, null]
[parent]
[null]
[scope]
[Scope, ., createGlobalScope, (, n, )]
[Scope]
[n]
[scope]
[new, Scope, (, parent, ,, n, )]
[parent]
[n]
[scanRoot, (, n, ,, parent, )]
[n]
[parent]
[inputId]
[null]
[scope]
[scope]
[null]
[returnedScope]
[n, ., isFunction, (, )]
[n]
[inputId, ==, null]
[inputId]
[null]
[inputId]
[NodeUtil, ., getInputId, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[fnNameNode, ., getNext, (, )]
[fnNameNode]
[args, ., getNext, (, )]
[args]
[fnNameNode, ., getString, (, )]
[fnNameNode]
[!, fnName, ., isEmpty, (, ), &&, NodeUtil, ., isFunctionExpression, (, n, )]
[!, fnName, ., isEmpty, (, )]
[fnName, ., isEmpty, (, )]
[fnName]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[declareVar, (, fnNameNode, )]
[fnNameNode]
[Preconditions, ., checkState, (, args, ., isParamList, (, ), )]
[Preconditions]
[args, ., isParamList, (, )]
[args]
[args, ., getFirstChild, (, )]
[args]
[a, !=, null]
[a]
[null]
[a]
[a, ., getNext, (, )]
[a]
[Preconditions, ., checkState, (, a, ., isName, (, ), )]
[Preconditions]
[a, ., isName, (, )]
[a]
[declareVar, (, a, )]
[a]
[scanVars, (, body, ,, n, )]
[body]
[n]
[Preconditions, ., checkState, (, scope, ., getParent, (, ), ==, null, )]
[Preconditions]
[scope, ., getParent, (, ), ==, null]
[scope, ., getParent, (, )]
[scope]
[null]
[scanVars, (, n, ,, null, )]
[n]
[null]
[n, ., getType, (, )]
[n]
[Token, ., VAR]
[Token]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child, ., getNext, (, )]
[child]
[declareVar, (, child, )]
[child]
[child]
[next]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[fnName, ., isEmpty, (, )]
[fnName]
[declareVar, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., CATCH]
[Token]
[Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 2, )]
[Preconditions]
[n, ., getChildCount, (, ), ==, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[Preconditions, ., checkState, (, n, ., getFirstChild, (, ), ., isName, (, ), )]
[Preconditions]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[var, ., getNext, (, )]
[var]
[declareVar, (, var, )]
[var]
[scanVars, (, block, ,, n, )]
[block]
[n]
[Token, ., SCRIPT]
[Token]
[inputId]
[n, ., getInputId, (, )]
[n]
[Preconditions, ., checkNotNull, (, inputId, )]
[Preconditions]
[inputId]
[NodeUtil, ., isControlStructure, (, n, ), ||, NodeUtil, ., isStatementBlock, (, n, )]
[NodeUtil, ., isControlStructure, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., isStatementBlock, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child, ., getNext, (, )]
[child]
[scanVars, (, child, ,, n, )]
[child]
[n]
[child]
[next]
[n, ., getParent, (, )]
[n]
[scope, ., isGlobal, (, )]
[scope]
[scope, ., getVar, (, name, )]
[scope]
[name]
[origVar, ., getParentNode, (, )]
[origVar]
[origParent, ., isCatch, (, ), &&, parent, ., isCatch, (, )]
[origParent, ., isCatch, (, )]
[origParent]
[parent, ., isCatch, (, )]
[parent]
[hasDuplicateDeclarationSuppression, (, n, ,, origVar, )]
[n]
[origVar]
[!, allowDupe]
[allowDupe]
[compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", ), ), )]
[compiler]
[JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_MULTIPLY_DECLARED_ERROR, ,, name, ,, (, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", ), )]
[JSError]
[NodeUtil, ., getSourceName, (, n, )]
[NodeUtil]
[n]
[n]
[VAR_MULTIPLY_DECLARED_ERROR]
[name]
[(, origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??", )]
[origVar, ., input, !=, null, ?, origVar, ., input, ., getName, (, ), :, "??"]
[origVar, ., input, !=, null]
[origVar, ., input]
[origVar]
[null]
[origVar, ., input, ., getName, (, )]
[origVar, ., input]
[origVar]
["??"]
[name, ., equals, (, ARGUMENTS, ), &&, !, NodeUtil, ., isVarDeclaration, (, n, )]
[name, ., equals, (, ARGUMENTS, )]
[name]
[ARGUMENTS]
[!, NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, ), )]
[compiler]
[JSError, ., make, (, NodeUtil, ., getSourceName, (, n, ), ,, n, ,, VAR_ARGUMENTS_SHADOWED_ERROR, )]
[JSError]
[NodeUtil, ., getSourceName, (, n, )]
[NodeUtil]
[n]
[n]
[VAR_ARGUMENTS_SHADOWED_ERROR]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[compiler, ., getInput, (, inputId, )]
[compiler]
[inputId]
[n, ., getString, (, )]
[n]
[scope, ., isDeclared, (, name, ,, false, ), ||, (, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), )]
[scope, ., isDeclared, (, name, ,, false, )]
[scope]
[name]
[false]
[(, scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, ), )]
[scope, ., isLocal, (, ), &&, name, ., equals, (, ARGUMENTS, )]
[scope, ., isLocal, (, )]
[scope]
[name, ., equals, (, ARGUMENTS, )]
[name]
[ARGUMENTS]
[redeclarationHandler, ., onRedeclaration, (, scope, ,, name, ,, n, ,, input, )]
[redeclarationHandler]
[scope]
[name]
[n]
[input]
[scope, ., declare, (, name, ,, n, ,, null, ,, input, )]
[scope]
[name]
[n]
[null]
[input]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, )]
[n]
[origVar, ., getParentNode, (, )]
[origVar]
[n, ., getJSDocInfo, (, )]
[n]
[info, ==, null]
[info]
[null]
[info]
[parent, ., getJSDocInfo, (, )]
[parent]
[info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, !=, null]
[info]
[null]
[info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, ., getSuppressions, (, )]
[info]
["duplicate"]
[true]
[info]
[origVar, ., nameNode, ., getJSDocInfo, (, )]
[origVar, ., nameNode]
[origVar]
[info, ==, null]
[info]
[null]
[info]
[origParent, ., getJSDocInfo, (, )]
[origParent]
[(, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", ), )]
[info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, !=, null]
[info]
[null]
[info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, ., getSuppressions, (, )]
[info]
["duplicate"]
[new, SyntacticScopeCreator, (, compiler, ), ., createScope, (, compiler, ., getRoot, (, ), ,, null, )]
[new, SyntacticScopeCreator, (, compiler, )]
[compiler]
[compiler, ., getRoot, (, )]
[compiler]
[null]
