[new, Years, (, 0, )]
[0]
[new, Years, (, 1, )]
[1]
[new, Years, (, 2, )]
[2]
[new, Years, (, 3, )]
[3]
[new, Years, (, Integer, ., MAX_VALUE, )]
[Integer, ., MAX_VALUE]
[Integer]
[new, Years, (, Integer, ., MIN_VALUE, )]
[Integer, ., MIN_VALUE]
[Integer]
[ISOPeriodFormat, ., standard, (, ), ., withParseType, (, PeriodType, ., years, (, ), )]
[ISOPeriodFormat, ., standard, (, )]
[ISOPeriodFormat]
[PeriodType, ., years, (, )]
[PeriodType]
[87525275727380868L]
[years]
[0]
[ZERO]
[1]
[ONE]
[2]
[TWO]
[3]
[THREE]
[Integer, ., MAX_VALUE]
[Integer]
[MAX_VALUE]
[Integer, ., MIN_VALUE]
[Integer]
[MIN_VALUE]
[new, Years, (, years, )]
[years]
[BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, DurationFieldType, ., years, (, ), )]
[BaseSingleFieldPeriod]
[start]
[end]
[DurationFieldType, ., years, (, )]
[DurationFieldType]
[Years, ., years, (, amount, )]
[Years]
[amount]
[start, instanceof, LocalDate, &&, end, instanceof, LocalDate]
[start, instanceof, LocalDate]
[start]
[end, instanceof, LocalDate]
[end]
[DateTimeUtils, ., getChronology, (, start, ., getChronology, (, ), )]
[DateTimeUtils]
[start, ., getChronology, (, )]
[start]
[chrono, ., years, (, ), ., getDifference, (, (, (, LocalDate, ), end, ), ., getLocalMillis, (, ), ,, (, (, LocalDate, ), start, ), ., getLocalMillis, (, ), )]
[chrono, ., years, (, )]
[chrono]
[(, (, LocalDate, ), end, ), ., getLocalMillis, (, )]
[(, (, LocalDate, ), end, )]
[(, LocalDate, ), end]
[end]
[(, (, LocalDate, ), start, ), ., getLocalMillis, (, )]
[(, (, LocalDate, ), start, )]
[(, LocalDate, ), start]
[start]
[Years, ., years, (, years, )]
[Years]
[years]
[BaseSingleFieldPeriod, ., between, (, start, ,, end, ,, ZERO, )]
[BaseSingleFieldPeriod]
[start]
[end]
[ZERO]
[Years, ., years, (, amount, )]
[Years]
[amount]
[interval, ==, null]
[interval]
[null]
[Years, ., ZERO]
[Years]
[BaseSingleFieldPeriod, ., between, (, interval, ., getStart, (, ), ,, interval, ., getEnd, (, ), ,, DurationFieldType, ., years, (, ), )]
[BaseSingleFieldPeriod]
[interval, ., getStart, (, )]
[interval]
[interval, ., getEnd, (, )]
[interval]
[DurationFieldType, ., years, (, )]
[DurationFieldType]
[Years, ., years, (, amount, )]
[Years]
[amount]
[periodStr, ==, null]
[periodStr]
[null]
[Years, ., ZERO]
[Years]
[PARSER, ., parsePeriod, (, periodStr, )]
[PARSER]
[periodStr]
[Years, ., years, (, p, ., getYears, (, ), )]
[Years]
[p, ., getYears, (, )]
[p]
[years]
[Years, ., years, (, getValue, (, ), )]
[Years]
[getValue, (, )]
[DurationFieldType, ., years, (, )]
[DurationFieldType]
[PeriodType, ., years, (, )]
[PeriodType]
[getValue, (, )]
[years, ==, 0]
[years]
[0]
[this]
[Years, ., years, (, FieldUtils, ., safeAdd, (, getValue, (, ), ,, years, ), )]
[Years]
[FieldUtils, ., safeAdd, (, getValue, (, ), ,, years, )]
[FieldUtils]
[getValue, (, )]
[years]
[years, ==, null]
[years]
[null]
[this]
[plus, (, years, ., getValue, (, ), )]
[years, ., getValue, (, )]
[years]
[plus, (, FieldUtils, ., safeNegate, (, years, ), )]
[FieldUtils, ., safeNegate, (, years, )]
[FieldUtils]
[years]
[years, ==, null]
[years]
[null]
[this]
[minus, (, years, ., getValue, (, ), )]
[years, ., getValue, (, )]
[years]
[Years, ., years, (, FieldUtils, ., safeMultiply, (, getValue, (, ), ,, scalar, ), )]
[Years]
[FieldUtils, ., safeMultiply, (, getValue, (, ), ,, scalar, )]
[FieldUtils]
[getValue, (, )]
[scalar]
[divisor, ==, 1]
[divisor]
[1]
[this]
[Years, ., years, (, getValue, (, ), /, divisor, )]
[Years]
[getValue, (, ), /, divisor]
[getValue, (, )]
[divisor]
[Years, ., years, (, FieldUtils, ., safeNegate, (, getValue, (, ), ), )]
[Years]
[FieldUtils, ., safeNegate, (, getValue, (, ), )]
[FieldUtils]
[getValue, (, )]
[other, ==, null]
[other]
[null]
[getValue, (, ), >, 0]
[getValue, (, )]
[0]
[getValue, (, ), >, other, ., getValue, (, )]
[getValue, (, )]
[other, ., getValue, (, )]
[other]
[other, ==, null]
[other]
[null]
[getValue, (, ), <, 0]
[getValue, (, )]
[0]
[getValue, (, ), <, other, ., getValue, (, )]
[getValue, (, )]
[other, ., getValue, (, )]
[other]
["P", +, String, ., valueOf, (, getValue, (, ), ), +, "Y"]
["P", +, String, ., valueOf, (, getValue, (, ), )]
["P"]
[String, ., valueOf, (, getValue, (, ), )]
[String]
[getValue, (, )]
["Y"]
