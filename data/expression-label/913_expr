[this, ., compiler]
[this]
[compiler]
[this, ., specializationPassFactories]
[this]
[specializationPassFactories]
[compiler, ., getModuleGraph, (, )]
[compiler]
[moduleGraph, ==, null]
[moduleGraph]
[null]
[moduleGraph, ., getRootModule, (, )]
[moduleGraph]
[copyModuleInputs, (, module, )]
[module]
[new, SimpleDefinitionFinder, (, compiler, )]
[compiler]
[defFinder, ., process, (, externs, ,, fakeModuleRoot, )]
[defFinder]
[externs]
[fakeModuleRoot]
[new, SimpleFunctionAliasAnalysis, (, )]
[initialModuleFunctionAliasAnalysis, ., analyze, (, defFinder, )]
[initialModuleFunctionAliasAnalysis]
[defFinder]
[specializationState]
[new, SpecializationState, (, initialModuleFunctionAliasAnalysis, )]
[initialModuleFunctionAliasAnalysis]
[specializationState, ., resetHasChanged, (, )]
[specializationState]
[createSpecializingPasses, (, )]
[pass, ., enableSpecialization, (, specializationState, )]
[pass]
[specializationState]
[pass, ., process, (, externs, ,, fakeModuleRoot, )]
[pass]
[externs]
[fakeModuleRoot]
[specializationState, ., hasChanged, (, )]
[specializationState]
[addDummyVarDeclarationsToInitialModule, (, module, )]
[module]
[replaceOriginalModuleInputsWithSpecialized, (, )]
[addOriginalFunctionVersionsToDependentModules, (, module, )]
[module]
[Lists, ., newLinkedList, (, )]
[Lists]
[specializationPassFactories]
[passFactory, ., create, (, compiler, )]
[passFactory]
[compiler]
[Preconditions, ., checkState, (, pass, instanceof, SpecializationAwareCompilerPass, )]
[Preconditions]
[pass, instanceof, SpecializationAwareCompilerPass]
[pass]
[passes, ., add, (, (, SpecializationAwareCompilerPass, ), pass, )]
[passes]
[(, SpecializationAwareCompilerPass, ), pass]
[pass]
[passes]
[specializedInputRootsByOriginal]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[functionInfoBySpecializedFunctionNode]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[IR, ., block, (, )]
[IR]
[syntheticModuleJsRoot, ., setIsSyntheticBlock, (, true, )]
[syntheticModuleJsRoot]
[true]
[module, ., getInputs, (, )]
[module]
[input, ., getAstRoot, (, compiler, )]
[input]
[compiler]
[originalInputRoot, ., cloneTree, (, )]
[originalInputRoot]
[copiedInputRoot, ., copyInformationFromForTree, (, originalInputRoot, )]
[copiedInputRoot]
[originalInputRoot]
[specializedInputRootsByOriginal, ., put, (, originalInputRoot, ,, copiedInputRoot, )]
[specializedInputRootsByOriginal]
[originalInputRoot]
[copiedInputRoot]
[matchTopLevelFunctions, (, originalInputRoot, ,, copiedInputRoot, )]
[originalInputRoot]
[copiedInputRoot]
[syntheticModuleJsRoot, ., addChildToBack, (, copiedInputRoot, )]
[syntheticModuleJsRoot]
[copiedInputRoot]
[IR, ., block, (, )]
[IR]
[syntheticExternsAndJsRoot, ., addChildToBack, (, syntheticModuleJsRoot, )]
[syntheticExternsAndJsRoot]
[syntheticModuleJsRoot]
[syntheticModuleJsRoot]
[new, NodeMatcher, (, ), {, @, Override, public, void, reportMatch, (, Node, original, ,, Node, specialized, ), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !, n1, ., isFunction, (, ), ;, }, }, ., match, (, original, ,, toBeSpecialized, )]
[new, NodeMatcher, (, ), {, @, Override, public, void, reportMatch, (, Node, original, ,, Node, specialized, ), {, if, (, original, ., isFunction, (, ), ), {, OriginalFunctionInformation, functionInfo, =, new, OriginalFunctionInformation, (, original, ), ;, functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, Node, n1, ,, Node, n2, ), {, return, !, n1, ., isFunction, (, ), ;, }, }]
[original, ., isFunction, (, )]
[original]
[new, OriginalFunctionInformation, (, original, )]
[original]
[functionInfoBySpecializedFunctionNode, ., put, (, specialized, ,, functionInfo, )]
[functionInfoBySpecializedFunctionNode]
[specialized]
[functionInfo]
[!, n1, ., isFunction, (, )]
[n1, ., isFunction, (, )]
[n1]
[original]
[toBeSpecialized]
[specializedInputRootsByOriginal, ., keySet, (, )]
[specializedInputRootsByOriginal]
[specializedInputRootsByOriginal, ., get, (, original, )]
[specializedInputRootsByOriginal]
[original]
[original, ., removeChildren, (, )]
[original]
[Lists, ., newLinkedList, (, )]
[Lists]
[specialized, ., getFirstChild, (, ), !=, null]
[specialized, ., getFirstChild, (, )]
[specialized]
[null]
[original, ., addChildToBack, (, specialized, ., removeFirstChild, (, ), )]
[original]
[specialized, ., removeFirstChild, (, )]
[specialized]
[functionInfoBySpecializedFunctionNode, ., keySet, (, )]
[functionInfoBySpecializedFunctionNode]
[specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, )]
[specializationState, ., getRemovedFunctions, (, )]
[specializationState]
[modifiedFunction]
[functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, )]
[functionInfoBySpecializedFunctionNode]
[modifiedFunction]
[originalInfo, ., name, !=, null, &&, originalInfo, ., originalWasDeclaration, (, )]
[originalInfo, ., name, !=, null]
[originalInfo, ., name]
[originalInfo]
[null]
[originalInfo, ., originalWasDeclaration, (, )]
[originalInfo]
[specializationState, ., removedFunctionToBlock, ., get, (, modifiedFunction, )]
[specializationState, ., removedFunctionToBlock]
[specializationState]
[modifiedFunction]
[block, !=, null]
[block]
[null]
[specializedInputRootsByOriginal, ., get, (, block, )]
[specializedInputRootsByOriginal]
[block]
[block, ., addChildrenToBack, (, originalInfo, ., generateDummyDeclaration, (, ), )]
[block]
[originalInfo, ., generateDummyDeclaration, (, )]
[originalInfo]
[getDirectDependents, (, module, )]
[module]
[directDependent, ., getInputs, (, ), ., get, (, 0, )]
[directDependent, ., getInputs, (, )]
[directDependent]
[0]
[firstInput, ., getAstRoot, (, compiler, )]
[firstInput]
[compiler]
[Lists, ., newArrayList, (, functionInfoBySpecializedFunctionNode, ., keySet, (, ), )]
[Lists]
[functionInfoBySpecializedFunctionNode, ., keySet, (, )]
[functionInfoBySpecializedFunctionNode]
[Collections, ., reverse, (, possiblyModifiedFunctions, )]
[Collections]
[possiblyModifiedFunctions]
[possiblyModifiedFunctions]
[specializationState, ., getSpecializedFunctions, (, ), ., contains, (, modifiedFunction, )]
[specializationState, ., getSpecializedFunctions, (, )]
[specializationState]
[modifiedFunction]
[specializationState, ., getRemovedFunctions, (, ), ., contains, (, modifiedFunction, )]
[specializationState, ., getRemovedFunctions, (, )]
[specializationState]
[modifiedFunction]
[declarationWasSpecialized, ||, declarationWasRemoved]
[declarationWasSpecialized]
[declarationWasRemoved]
[functionInfoBySpecializedFunctionNode, ., get, (, modifiedFunction, )]
[functionInfoBySpecializedFunctionNode]
[modifiedFunction]
[originalInfo, ., name, !=, null]
[originalInfo, ., name]
[originalInfo]
[null]
[originalInfo, ., generateFixupDefinition, (, )]
[originalInfo]
[firstInputRootNode, ., addChildrenToFront, (, newDefinition, )]
[firstInputRootNode]
[newDefinition]
[Sets, ., newHashSet, (, )]
[Sets]
[compiler, ., getModuleGraph, (, ), ., getAllModules, (, )]
[compiler, ., getModuleGraph, (, )]
[compiler]
[possibleDependent, ., getDependencies, (, ), ., contains, (, module, )]
[possibleDependent, ., getDependencies, (, )]
[possibleDependent]
[module]
[directDependents, ., add, (, possibleDependent, )]
[directDependents]
[possibleDependent]
[directDependents]
[reportMatch, (, ast1, ,, ast2, )]
[ast1]
[ast2]
[shouldTraverse, (, ast1, ,, ast2, )]
[ast1]
[ast2]
[ast1, ., getFirstChild, (, )]
[ast1]
[ast2, ., getFirstChild, (, )]
[ast2]
[childOf1, !=, null]
[childOf1]
[null]
[match, (, childOf1, ,, childOf2, )]
[childOf1]
[childOf2]
[childOf1]
[childOf1, ., getNext, (, )]
[childOf1]
[childOf2]
[childOf2, ., getNext, (, )]
[childOf2]
[true]
[name]
[NodeUtil, ., getFunctionName, (, originalFunction, )]
[NodeUtil]
[originalFunction]
[originalFunctionCopy]
[originalFunction, ., cloneTree, (, )]
[originalFunction]
[originalFunctionCopy, ., copyInformationFromForTree, (, originalFunction, )]
[originalFunctionCopy]
[originalFunction]
[originalFunction, ., getParent, (, )]
[originalFunction]
[isAssignFunction]
[originalParent, ., isAssign, (, ), ||, originalParent, ., isName, (, )]
[originalParent, ., isAssign, (, )]
[originalParent]
[originalParent, ., isName, (, )]
[originalParent]
[assignHasVar]
[isAssignFunction, &&, originalParent, ., getParent, (, ), ., isVar, (, )]
[isAssignFunction]
[originalParent, ., getParent, (, ), ., isVar, (, )]
[originalParent, ., getParent, (, )]
[originalParent]
[originalFunctionCopy, ., cloneTree, (, )]
[originalFunctionCopy]
[copy, ., copyInformationFromForTree, (, originalFunctionCopy, )]
[copy]
[originalFunctionCopy]
[copy]
[(, !, isAssignFunction, ), ||, (, assignHasVar, )]
[(, !, isAssignFunction, )]
[!, isAssignFunction]
[isAssignFunction]
[(, assignHasVar, )]
[assignHasVar]
[copiedOriginalFunction, (, )]
[isAssignFunction]
[nameNode]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, functionCopy, ,, name, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[functionCopy]
[name]
[nameNode]
[functionCopy, ., getFirstChild, (, )]
[functionCopy]
[functionCopy, ., replaceChild, (, nameNode, ,, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, ), )]
[functionCopy]
[nameNode]
[NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, "", ,, nameNode, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[""]
[nameNode]
[IR, ., assign, (, nameNode, ,, functionCopy, )]
[IR]
[nameNode]
[functionCopy]
[assignment, ., copyInformationFrom, (, functionCopy, )]
[assignment]
[functionCopy]
[NodeUtil, ., newExpr, (, assignment, )]
[NodeUtil]
[assignment]
[NodeUtil, ., newVarNode, (, name, ,, null, )]
[NodeUtil]
[name]
[null]
[declaration, ., copyInformationFromForTree, (, originalFunctionCopy, )]
[declaration]
[originalFunctionCopy]
[declaration]
[false]
[this, ., initialModuleAliasAnalysis]
[this]
[initialModuleAliasAnalysis]
[specializedFunctions]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[removedFunctions]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[removedFunctionToBlock]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[hasChanged]
[hasChanged]
[false]
[specializedFunctions]
[specializedFunctions, ., add, (, functionNode, )]
[specializedFunctions]
[functionNode]
[hasChanged]
[true]
[containingFunction, (, node, )]
[node]
[containingFunction, !=, null]
[containingFunction]
[null]
[reportSpecializedFunction, (, containingFunction, )]
[containingFunction]
[removedFunctions]
[removedFunctions, ., add, (, functionNode, )]
[removedFunctions]
[functionNode]
[hasChanged]
[true]
[removedFunctionToBlock, ., put, (, functionNode, ,, declaringBlock, )]
[removedFunctionToBlock]
[functionNode]
[declaringBlock]
[Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), )]
[Preconditions]
[functionNode, ., isFunction, (, )]
[functionNode]
[!, nodeIsInGlobalScope, (, functionNode, ), ||, initialModuleAliasAnalysis, ., isAliased, (, functionNode, )]
[!, nodeIsInGlobalScope, (, functionNode, )]
[nodeIsInGlobalScope, (, functionNode, )]
[functionNode]
[initialModuleAliasAnalysis, ., isAliased, (, functionNode, )]
[initialModuleAliasAnalysis]
[functionNode]
[false]
[NodeUtil, ., isStatement, (, functionNode, )]
[NodeUtil]
[functionNode]
[true]
[functionNode, ., getParent, (, )]
[functionNode]
[parent, ., getParent, (, )]
[parent]
[parent, ., isName, (, ), &&, gramps, ., isVar, (, )]
[parent, ., isName, (, )]
[parent]
[gramps, ., isVar, (, )]
[gramps]
[true]
[NodeUtil, ., isExprAssign, (, gramps, ), &&, parent, ., getChildAtIndex, (, 1, ), ==, functionNode]
[NodeUtil, ., isExprAssign, (, gramps, )]
[NodeUtil]
[gramps]
[parent, ., getChildAtIndex, (, 1, ), ==, functionNode]
[parent, ., getChildAtIndex, (, 1, )]
[parent]
[1]
[functionNode]
[true]
[false]
[containingFunction, (, n, )]
[n]
[containingFunction, !=, null]
[containingFunction]
[null]
[canFixupFunction, (, containingFunction, )]
[containingFunction]
[true]
[containingFunction, (, node, ), ==, null]
[containingFunction, (, node, )]
[node]
[null]
[node, ., getAncestors, (, )]
[node]
[ancestor, ., isFunction, (, )]
[ancestor]
[ancestor]
[null]
