[107049519551235069L]
[PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, )]
[PolynomialFunctionLagrangeForm]
[x]
[y]
[true]
[new, double, [, x, ., length, -, 1, ]]
[x, ., length, -, 1]
[x, ., length]
[x]
[1]
[System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,, c, ., length, )]
[System]
[x]
[0]
[c]
[0]
[c, ., length]
[c]
[computeDividedDifference, (, x, ,, y, )]
[x]
[y]
[new, PolynomialFunctionNewtonForm, (, a, ,, c, )]
[a]
[c]
[PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, )]
[PolynomialFunctionLagrangeForm]
[x]
[y]
[true]
[y, ., clone, (, )]
[y]
[x, ., length]
[x]
[new, double, [, n, ]]
[n]
[a, [, 0, ]]
[a]
[0]
[divdiff, [, 0, ]]
[divdiff]
[0]
[1]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[0]
[j, <, n, -, i]
[j]
[n, -, i]
[n]
[i]
[j, ++]
[j]
[x, [, j, +, i, ], -, x, [, j, ]]
[x, [, j, +, i, ]]
[x]
[j, +, i]
[j]
[i]
[x, [, j, ]]
[x]
[j]
[divdiff, [, j, ]]
[divdiff]
[j]
[(, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator]
[(, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], )]
[divdiff, [, j, +, 1, ], -, divdiff, [, j, ]]
[divdiff, [, j, +, 1, ]]
[divdiff]
[j, +, 1]
[j]
[1]
[divdiff, [, j, ]]
[divdiff]
[j]
[denominator]
[a, [, i, ]]
[a]
[i]
[divdiff, [, 0, ]]
[divdiff]
[0]
[a]
