[new, AtomicReference, <, DSCompiler, [, ], [, ], >, (, null, )]
[null]
[this, ., parameters]
[this]
[parameters]
[this, ., order]
[this]
[order]
[this, ., sizes]
[this]
[compileSizes, (, parameters, ,, order, ,, valueCompiler, )]
[parameters]
[order]
[valueCompiler]
[this, ., derivativesIndirection]
[this]
[compileDerivativesIndirection, (, parameters, ,, order, ,, valueCompiler, ,, derivativeCompiler, )]
[parameters]
[order]
[valueCompiler]
[derivativeCompiler]
[this, ., lowerIndirection]
[this]
[compileLowerIndirection, (, parameters, ,, order, ,, valueCompiler, ,, derivativeCompiler, )]
[parameters]
[order]
[valueCompiler]
[derivativeCompiler]
[this, ., multIndirection]
[this]
[compileMultiplicationIndirection, (, parameters, ,, order, ,, valueCompiler, ,, derivativeCompiler, ,, lowerIndirection, )]
[parameters]
[order]
[valueCompiler]
[derivativeCompiler]
[lowerIndirection]
[this, ., compIndirection]
[this]
[compileCompositionIndirection, (, parameters, ,, order, ,, valueCompiler, ,, derivativeCompiler, ,, sizes, ,, derivativesIndirection, )]
[parameters]
[order]
[valueCompiler]
[derivativeCompiler]
[sizes]
[derivativesIndirection]
[compilers, ., get, (, )]
[compilers]
[cache, !=, null, &&, cache, ., length, >, parameters, &&, cache, [, parameters, ], ., length, >, order, &&, cache, [, parameters, ], [, order, ], !=, null]
[cache, !=, null, &&, cache, ., length, >, parameters, &&, cache, [, parameters, ], ., length, >, order]
[cache, !=, null, &&, cache, ., length, >, parameters]
[cache, !=, null]
[cache]
[null]
[cache, ., length, >, parameters]
[cache, ., length]
[cache]
[parameters]
[cache, [, parameters, ], ., length, >, order]
[cache, [, parameters, ], ., length]
[cache, [, parameters, ]]
[cache]
[parameters]
[order]
[cache, [, parameters, ], [, order, ], !=, null]
[cache, [, parameters, ], [, order, ]]
[cache, [, parameters, ]]
[cache]
[parameters]
[order]
[null]
[cache, [, parameters, ], [, order, ]]
[cache, [, parameters, ]]
[cache]
[parameters]
[order]
[FastMath, ., max, (, parameters, ,, cache, ==, null, ?, 0, :, cache, ., length, )]
[FastMath]
[parameters]
[cache, ==, null, ?, 0, :, cache, ., length]
[cache, ==, null]
[cache]
[null]
[0]
[cache, ., length]
[cache]
[FastMath, ., max, (, order, ,, cache, ==, null, ?, 0, :, cache, [, 0, ], ., length, )]
[FastMath]
[order]
[cache, ==, null, ?, 0, :, cache, [, 0, ], ., length]
[cache, ==, null]
[cache]
[null]
[0]
[cache, [, 0, ], ., length]
[cache, [, 0, ]]
[cache]
[0]
[new, DSCompiler, [, maxParameters, +, 1, ], [, maxOrder, +, 1, ]]
[maxParameters, +, 1]
[maxParameters]
[1]
[maxOrder, +, 1]
[maxOrder]
[1]
[cache, !=, null]
[cache]
[null]
[0]
[i, <, cache, ., length]
[i]
[cache, ., length]
[cache]
[++, i]
[i]
[System, ., arraycopy, (, cache, [, i, ], ,, 0, ,, newCache, [, i, ], ,, 0, ,, cache, [, i, ], ., length, )]
[System]
[cache, [, i, ]]
[cache]
[i]
[0]
[newCache, [, i, ]]
[newCache]
[i]
[0]
[cache, [, i, ], ., length]
[cache, [, i, ]]
[cache]
[i]
[0]
[diag, <=, parameters, +, order]
[diag]
[parameters, +, order]
[parameters]
[order]
[++, diag]
[diag]
[FastMath, ., max, (, 0, ,, diag, -, parameters, )]
[FastMath]
[0]
[diag, -, parameters]
[diag]
[parameters]
[o, <=, FastMath, ., min, (, order, ,, diag, )]
[o]
[FastMath, ., min, (, order, ,, diag, )]
[FastMath]
[order]
[diag]
[++, o]
[o]
[diag, -, o]
[diag]
[o]
[newCache, [, p, ], [, o, ], ==, null]
[newCache, [, p, ], [, o, ]]
[newCache, [, p, ]]
[newCache]
[p]
[o]
[null]
[(, p, ==, 0, ), ?, null, :, newCache, [, p, -, 1, ], [, o, ]]
[(, p, ==, 0, )]
[p, ==, 0]
[p]
[0]
[null]
[newCache, [, p, -, 1, ], [, o, ]]
[newCache, [, p, -, 1, ]]
[newCache]
[p, -, 1]
[p]
[1]
[o]
[(, o, ==, 0, ), ?, null, :, newCache, [, p, ], [, o, -, 1, ]]
[(, o, ==, 0, )]
[o, ==, 0]
[o]
[0]
[null]
[newCache, [, p, ], [, o, -, 1, ]]
[newCache, [, p, ]]
[newCache]
[p]
[o, -, 1]
[o]
[1]
[newCache, [, p, ], [, o, ]]
[newCache, [, p, ]]
[newCache]
[p]
[o]
[new, DSCompiler, (, p, ,, o, ,, valueCompiler, ,, derivativeCompiler, )]
[p]
[o]
[valueCompiler]
[derivativeCompiler]
[compilers, ., compareAndSet, (, cache, ,, newCache, )]
[compilers]
[cache]
[newCache]
[newCache, [, parameters, ], [, order, ]]
[newCache, [, parameters, ]]
[newCache]
[parameters]
[order]
[new, int, [, parameters, +, 1, ], [, order, +, 1, ]]
[parameters, +, 1]
[parameters]
[1]
[order, +, 1]
[order]
[1]
[parameters, ==, 0]
[parameters]
[0]
[Arrays, ., fill, (, sizes, [, 0, ], ,, 1, )]
[Arrays]
[sizes, [, 0, ]]
[sizes]
[0]
[1]
[System, ., arraycopy, (, valueCompiler, ., sizes, ,, 0, ,, sizes, ,, 0, ,, parameters, )]
[System]
[valueCompiler, ., sizes]
[valueCompiler]
[0]
[sizes]
[0]
[parameters]
[sizes, [, parameters, ], [, 0, ]]
[sizes, [, parameters, ]]
[sizes]
[parameters]
[0]
[1]
[0]
[i, <, order]
[i]
[order]
[++, i]
[i]
[sizes, [, parameters, ], [, i, +, 1, ]]
[sizes, [, parameters, ]]
[sizes]
[parameters]
[i, +, 1]
[i]
[1]
[sizes, [, parameters, ], [, i, ], +, sizes, [, parameters, -, 1, ], [, i, +, 1, ]]
[sizes, [, parameters, ], [, i, ]]
[sizes, [, parameters, ]]
[sizes]
[parameters]
[i]
[sizes, [, parameters, -, 1, ], [, i, +, 1, ]]
[sizes, [, parameters, -, 1, ]]
[sizes]
[parameters, -, 1]
[parameters]
[1]
[i, +, 1]
[i]
[1]
[sizes]
[parameters, ==, 0, ||, order, ==, 0]
[parameters, ==, 0]
[parameters]
[0]
[order, ==, 0]
[order]
[0]
[new, int, [, 1, ], [, parameters, ]]
[1]
[parameters]
[valueCompiler, ., derivativesIndirection, ., length]
[valueCompiler, ., derivativesIndirection]
[valueCompiler]
[derivativeCompiler, ., derivativesIndirection, ., length]
[derivativeCompiler, ., derivativesIndirection]
[derivativeCompiler]
[new, int, [, vSize, +, dSize, ], [, parameters, ]]
[vSize, +, dSize]
[vSize]
[dSize]
[parameters]
[0]
[i, <, vSize]
[i]
[vSize]
[++, i]
[i]
[System, ., arraycopy, (, valueCompiler, ., derivativesIndirection, [, i, ], ,, 0, ,, derivativesIndirection, [, i, ], ,, 0, ,, parameters, -, 1, )]
[System]
[valueCompiler, ., derivativesIndirection, [, i, ]]
[valueCompiler, ., derivativesIndirection]
[valueCompiler]
[i]
[0]
[derivativesIndirection, [, i, ]]
[derivativesIndirection]
[i]
[0]
[parameters, -, 1]
[parameters]
[1]
[0]
[i, <, dSize]
[i]
[dSize]
[++, i]
[i]
[System, ., arraycopy, (, derivativeCompiler, ., derivativesIndirection, [, i, ], ,, 0, ,, derivativesIndirection, [, vSize, +, i, ], ,, 0, ,, parameters, )]
[System]
[derivativeCompiler, ., derivativesIndirection, [, i, ]]
[derivativeCompiler, ., derivativesIndirection]
[derivativeCompiler]
[i]
[0]
[derivativesIndirection, [, vSize, +, i, ]]
[derivativesIndirection]
[vSize, +, i]
[vSize]
[i]
[0]
[parameters]
[derivativesIndirection, [, vSize, +, i, ], [, parameters, -, 1, ], ++]
[derivativesIndirection, [, vSize, +, i, ], [, parameters, -, 1, ]]
[derivativesIndirection, [, vSize, +, i, ]]
[derivativesIndirection]
[vSize, +, i]
[vSize]
[i]
[parameters, -, 1]
[parameters]
[1]
[derivativesIndirection]
[parameters, ==, 0, ||, order, <=, 1]
[parameters, ==, 0]
[parameters]
[0]
[order, <=, 1]
[order]
[1]
[new, int, [, ], {, 0, }]
[{, 0, }]
[0]
[valueCompiler, ., lowerIndirection, ., length]
[valueCompiler, ., lowerIndirection]
[valueCompiler]
[derivativeCompiler, ., lowerIndirection, ., length]
[derivativeCompiler, ., lowerIndirection]
[derivativeCompiler]
[new, int, [, vSize, +, dSize, ]]
[vSize, +, dSize]
[vSize]
[dSize]
[System, ., arraycopy, (, valueCompiler, ., lowerIndirection, ,, 0, ,, lowerIndirection, ,, 0, ,, vSize, )]
[System]
[valueCompiler, ., lowerIndirection]
[valueCompiler]
[0]
[lowerIndirection]
[0]
[vSize]
[0]
[i, <, dSize]
[i]
[dSize]
[++, i]
[i]
[lowerIndirection, [, vSize, +, i, ]]
[lowerIndirection]
[vSize, +, i]
[vSize]
[i]
[valueCompiler, ., getSize, (, ), +, derivativeCompiler, ., lowerIndirection, [, i, ]]
[valueCompiler, ., getSize, (, )]
[valueCompiler]
[derivativeCompiler, ., lowerIndirection, [, i, ]]
[derivativeCompiler, ., lowerIndirection]
[derivativeCompiler]
[i]
[lowerIndirection]
[(, parameters, ==, 0, ), ||, (, order, ==, 0, )]
[(, parameters, ==, 0, )]
[parameters, ==, 0]
[parameters]
[0]
[(, order, ==, 0, )]
[order, ==, 0]
[order]
[0]
[new, int, [, ], [, ], [, ], {, {, {, 1, ,, 0, ,, 0, }, }, }]
[{, {, {, 1, ,, 0, ,, 0, }, }, }]
[{, {, 1, ,, 0, ,, 0, }, }]
[{, 1, ,, 0, ,, 0, }]
[1]
[0]
[0]
[valueCompiler, ., multIndirection, ., length]
[valueCompiler, ., multIndirection]
[valueCompiler]
[derivativeCompiler, ., multIndirection, ., length]
[derivativeCompiler, ., multIndirection]
[derivativeCompiler]
[new, int, [, vSize, +, dSize, ], [, ], [, ]]
[vSize, +, dSize]
[vSize]
[dSize]
[System, ., arraycopy, (, valueCompiler, ., multIndirection, ,, 0, ,, multIndirection, ,, 0, ,, vSize, )]
[System]
[valueCompiler, ., multIndirection]
[valueCompiler]
[0]
[multIndirection]
[0]
[vSize]
[0]
[i, <, dSize]
[i]
[dSize]
[++, i]
[i]
[derivativeCompiler, ., multIndirection, [, i, ]]
[derivativeCompiler, ., multIndirection]
[derivativeCompiler]
[i]
[new, ArrayList, <, int, [, ], >, (, dRow, ., length, *, 2, )]
[dRow, ., length, *, 2]
[dRow, ., length]
[dRow]
[2]
[0]
[j, <, dRow, ., length]
[j]
[dRow, ., length]
[dRow]
[++, j]
[j]
[row, ., add, (, new, int, [, ], {, dRow, [, j, ], [, 0, ], ,, lowerIndirection, [, dRow, [, j, ], [, 1, ], ], ,, vSize, +, dRow, [, j, ], [, 2, ], }, )]
[row]
[new, int, [, ], {, dRow, [, j, ], [, 0, ], ,, lowerIndirection, [, dRow, [, j, ], [, 1, ], ], ,, vSize, +, dRow, [, j, ], [, 2, ], }]
[{, dRow, [, j, ], [, 0, ], ,, lowerIndirection, [, dRow, [, j, ], [, 1, ], ], ,, vSize, +, dRow, [, j, ], [, 2, ], }]
[dRow, [, j, ], [, 0, ]]
[dRow, [, j, ]]
[dRow]
[j]
[0]
[lowerIndirection, [, dRow, [, j, ], [, 1, ], ]]
[lowerIndirection]
[dRow, [, j, ], [, 1, ]]
[dRow, [, j, ]]
[dRow]
[j]
[1]
[vSize, +, dRow, [, j, ], [, 2, ]]
[vSize]
[dRow, [, j, ], [, 2, ]]
[dRow, [, j, ]]
[dRow]
[j]
[2]
[row, ., add, (, new, int, [, ], {, dRow, [, j, ], [, 0, ], ,, vSize, +, dRow, [, j, ], [, 1, ], ,, lowerIndirection, [, dRow, [, j, ], [, 2, ], ], }, )]
[row]
[new, int, [, ], {, dRow, [, j, ], [, 0, ], ,, vSize, +, dRow, [, j, ], [, 1, ], ,, lowerIndirection, [, dRow, [, j, ], [, 2, ], ], }]
[{, dRow, [, j, ], [, 0, ], ,, vSize, +, dRow, [, j, ], [, 1, ], ,, lowerIndirection, [, dRow, [, j, ], [, 2, ], ], }]
[dRow, [, j, ], [, 0, ]]
[dRow, [, j, ]]
[dRow]
[j]
[0]
[vSize, +, dRow, [, j, ], [, 1, ]]
[vSize]
[dRow, [, j, ], [, 1, ]]
[dRow, [, j, ]]
[dRow]
[j]
[1]
[lowerIndirection, [, dRow, [, j, ], [, 2, ], ]]
[lowerIndirection]
[dRow, [, j, ], [, 2, ]]
[dRow, [, j, ]]
[dRow]
[j]
[2]
[new, ArrayList, <, int, [, ], >, (, row, ., size, (, ), )]
[row, ., size, (, )]
[row]
[0]
[j, <, row, ., size, (, )]
[j]
[row, ., size, (, )]
[row]
[++, j]
[j]
[row, ., get, (, j, )]
[row]
[j]
[termJ, [, 0, ], >, 0]
[termJ, [, 0, ]]
[termJ]
[0]
[0]
[j, +, 1]
[j]
[1]
[k, <, row, ., size, (, )]
[k]
[row, ., size, (, )]
[row]
[++, k]
[k]
[row, ., get, (, k, )]
[row]
[k]
[termJ, [, 1, ], ==, termK, [, 1, ], &&, termJ, [, 2, ], ==, termK, [, 2, ]]
[termJ, [, 1, ], ==, termK, [, 1, ]]
[termJ, [, 1, ]]
[termJ]
[1]
[termK, [, 1, ]]
[termK]
[1]
[termJ, [, 2, ], ==, termK, [, 2, ]]
[termJ, [, 2, ]]
[termJ]
[2]
[termK, [, 2, ]]
[termK]
[2]
[termJ, [, 0, ]]
[termJ]
[0]
[termK, [, 0, ]]
[termK]
[0]
[termK, [, 0, ]]
[termK]
[0]
[0]
[combined, ., add, (, termJ, )]
[combined]
[termJ]
[multIndirection, [, vSize, +, i, ]]
[multIndirection]
[vSize, +, i]
[vSize]
[i]
[combined, ., toArray, (, new, int, [, combined, ., size, (, ), ], [, ], )]
[combined]
[new, int, [, combined, ., size, (, ), ], [, ]]
[combined, ., size, (, )]
[combined]
[multIndirection]
[(, parameters, ==, 0, ), ||, (, order, ==, 0, )]
[(, parameters, ==, 0, )]
[parameters, ==, 0]
[parameters]
[0]
[(, order, ==, 0, )]
[order, ==, 0]
[order]
[0]
[new, int, [, ], [, ], [, ], {, {, {, 1, ,, 0, }, }, }]
[{, {, {, 1, ,, 0, }, }, }]
[{, {, 1, ,, 0, }, }]
[{, 1, ,, 0, }]
[1]
[0]
[valueCompiler, ., compIndirection, ., length]
[valueCompiler, ., compIndirection]
[valueCompiler]
[derivativeCompiler, ., compIndirection, ., length]
[derivativeCompiler, ., compIndirection]
[derivativeCompiler]
[new, int, [, vSize, +, dSize, ], [, ], [, ]]
[vSize, +, dSize]
[vSize]
[dSize]
[System, ., arraycopy, (, valueCompiler, ., compIndirection, ,, 0, ,, compIndirection, ,, 0, ,, vSize, )]
[System]
[valueCompiler, ., compIndirection]
[valueCompiler]
[0]
[compIndirection]
[0]
[vSize]
[0]
[i, <, dSize]
[i]
[dSize]
[++, i]
[i]
[new, ArrayList, <, int, [, ], >, (, )]
[derivativeCompiler, ., compIndirection, [, i, ]]
[derivativeCompiler, ., compIndirection]
[derivativeCompiler]
[i]
[new, int, [, term, ., length, +, 1, ]]
[term, ., length, +, 1]
[term, ., length]
[term]
[1]
[derivedTermF, [, 0, ]]
[derivedTermF]
[0]
[term, [, 0, ]]
[term]
[0]
[derivedTermF, [, 1, ]]
[derivedTermF]
[1]
[term, [, 1, ], +, 1]
[term, [, 1, ]]
[term]
[1]
[1]
[new, int, [, parameters, ]]
[parameters]
[orders, [, parameters, -, 1, ]]
[orders]
[parameters, -, 1]
[parameters]
[1]
[1]
[derivedTermF, [, term, ., length, ]]
[derivedTermF]
[term, ., length]
[term]
[getPartialDerivativeIndex, (, parameters, ,, order, ,, sizes, ,, orders, )]
[parameters]
[order]
[sizes]
[orders]
[2]
[j, <, term, ., length]
[j]
[term, ., length]
[term]
[++, j]
[j]
[derivedTermF, [, j, ]]
[derivedTermF]
[j]
[convertIndex, (, term, [, j, ], ,, parameters, ,, derivativeCompiler, ., derivativesIndirection, ,, parameters, ,, order, ,, sizes, )]
[term, [, j, ]]
[term]
[j]
[parameters]
[derivativeCompiler, ., derivativesIndirection]
[derivativeCompiler]
[parameters]
[order]
[sizes]
[Arrays, ., sort, (, derivedTermF, ,, 2, ,, derivedTermF, ., length, )]
[Arrays]
[derivedTermF]
[2]
[derivedTermF, ., length]
[derivedTermF]
[row, ., add, (, derivedTermF, )]
[row]
[derivedTermF]
[2]
[l, <, term, ., length]
[l]
[term, ., length]
[term]
[++, l]
[l]
[new, int, [, term, ., length, ]]
[term, ., length]
[term]
[derivedTermG, [, 0, ]]
[derivedTermG]
[0]
[term, [, 0, ]]
[term]
[0]
[derivedTermG, [, 1, ]]
[derivedTermG]
[1]
[term, [, 1, ]]
[term]
[1]
[2]
[j, <, term, ., length]
[j]
[term, ., length]
[term]
[++, j]
[j]
[derivedTermG, [, j, ]]
[derivedTermG]
[j]
[convertIndex, (, term, [, j, ], ,, parameters, ,, derivativeCompiler, ., derivativesIndirection, ,, parameters, ,, order, ,, sizes, )]
[term, [, j, ]]
[term]
[j]
[parameters]
[derivativeCompiler, ., derivativesIndirection]
[derivativeCompiler]
[parameters]
[order]
[sizes]
[j, ==, l]
[j]
[l]
[System, ., arraycopy, (, derivativesIndirection, [, derivedTermG, [, j, ], ], ,, 0, ,, orders, ,, 0, ,, parameters, )]
[System]
[derivativesIndirection, [, derivedTermG, [, j, ], ]]
[derivativesIndirection]
[derivedTermG, [, j, ]]
[derivedTermG]
[j]
[0]
[orders]
[0]
[parameters]
[orders, [, parameters, -, 1, ], ++]
[orders, [, parameters, -, 1, ]]
[orders]
[parameters, -, 1]
[parameters]
[1]
[derivedTermG, [, j, ]]
[derivedTermG]
[j]
[getPartialDerivativeIndex, (, parameters, ,, order, ,, sizes, ,, orders, )]
[parameters]
[order]
[sizes]
[orders]
[Arrays, ., sort, (, derivedTermG, ,, 2, ,, derivedTermG, ., length, )]
[Arrays]
[derivedTermG]
[2]
[derivedTermG, ., length]
[derivedTermG]
[row, ., add, (, derivedTermG, )]
[row]
[derivedTermG]
[new, ArrayList, <, int, [, ], >, (, row, ., size, (, ), )]
[row, ., size, (, )]
[row]
[0]
[j, <, row, ., size, (, )]
[j]
[row, ., size, (, )]
[row]
[++, j]
[j]
[row, ., get, (, j, )]
[row]
[j]
[termJ, [, 0, ], >, 0]
[termJ, [, 0, ]]
[termJ]
[0]
[0]
[j, +, 1]
[j]
[1]
[k, <, row, ., size, (, )]
[k]
[row, ., size, (, )]
[row]
[++, k]
[k]
[row, ., get, (, k, )]
[row]
[k]
[termJ, ., length, ==, termK, ., length]
[termJ, ., length]
[termJ]
[termK, ., length]
[termK]
[1]
[equals, &&, l, <, termJ, ., length]
[equals]
[l, <, termJ, ., length]
[l]
[termJ, ., length]
[termJ]
[++, l]
[l]
[equals]
[termJ, [, l, ], ==, termK, [, l, ]]
[termJ, [, l, ]]
[termJ]
[l]
[termK, [, l, ]]
[termK]
[l]
[equals]
[termJ, [, 0, ]]
[termJ]
[0]
[termK, [, 0, ]]
[termK]
[0]
[termK, [, 0, ]]
[termK]
[0]
[0]
[combined, ., add, (, termJ, )]
[combined]
[termJ]
[compIndirection, [, vSize, +, i, ]]
[compIndirection]
[vSize, +, i]
[vSize]
[i]
[combined, ., toArray, (, new, int, [, combined, ., size, (, ), ], [, ], )]
[combined]
[new, int, [, combined, ., size, (, ), ], [, ]]
[combined, ., size, (, )]
[combined]
[compIndirection]
[orders, ., length, !=, getFreeParameters, (, )]
[orders, ., length]
[orders]
[getFreeParameters, (, )]
[new, DimensionMismatchException, (, orders, ., length, ,, getFreeParameters, (, ), )]
[orders, ., length]
[orders]
[getFreeParameters, (, )]
[getPartialDerivativeIndex, (, parameters, ,, order, ,, sizes, ,, orders, )]
[parameters]
[order]
[sizes]
[orders]
[0]
[order]
[0]
[parameters, -, 1]
[parameters]
[1]
[i, >=, 0]
[i]
[0]
[--, i]
[i]
[orders, [, i, ]]
[orders]
[i]
[ordersSum]
[derivativeOrder]
[ordersSum, >, order]
[ordersSum]
[order]
[new, NumberIsTooLargeException, (, ordersSum, ,, order, ,, true, )]
[ordersSum]
[order]
[true]
[derivativeOrder, --, >, 0]
[derivativeOrder, --]
[derivativeOrder]
[0]
[index]
[sizes, [, i, ], [, m, --, ]]
[sizes, [, i, ]]
[sizes]
[i]
[m, --]
[m]
[index]
[new, int, [, destP, ]]
[destP]
[System, ., arraycopy, (, srcDerivativesIndirection, [, index, ], ,, 0, ,, orders, ,, 0, ,, FastMath, ., min, (, srcP, ,, destP, ), )]
[System]
[srcDerivativesIndirection, [, index, ]]
[srcDerivativesIndirection]
[index]
[0]
[orders]
[0]
[FastMath, ., min, (, srcP, ,, destP, )]
[FastMath]
[srcP]
[destP]
[getPartialDerivativeIndex, (, destP, ,, destO, ,, destSizes, ,, orders, )]
[destP]
[destO]
[destSizes]
[orders]
[derivativesIndirection, [, index, ]]
[derivativesIndirection]
[index]
[parameters]
[order]
[sizes, [, parameters, ], [, order, ]]
[sizes, [, parameters, ]]
[sizes]
[parameters]
[order]
[0]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[MathArrays, ., linearCombination, (, a1, ,, c1, [, offset1, +, i, ], ,, a2, ,, c2, [, offset2, +, i, ], )]
[MathArrays]
[a1]
[c1, [, offset1, +, i, ]]
[c1]
[offset1, +, i]
[offset1]
[i]
[a2]
[c2, [, offset2, +, i, ]]
[c2]
[offset2, +, i]
[offset2]
[i]
[0]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[MathArrays, ., linearCombination, (, a1, ,, c1, [, offset1, +, i, ], ,, a2, ,, c2, [, offset2, +, i, ], ,, a3, ,, c3, [, offset3, +, i, ], )]
[MathArrays]
[a1]
[c1, [, offset1, +, i, ]]
[c1]
[offset1, +, i]
[offset1]
[i]
[a2]
[c2, [, offset2, +, i, ]]
[c2]
[offset2, +, i]
[offset2]
[i]
[a3]
[c3, [, offset3, +, i, ]]
[c3]
[offset3, +, i]
[offset3]
[i]
[0]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[MathArrays, ., linearCombination, (, a1, ,, c1, [, offset1, +, i, ], ,, a2, ,, c2, [, offset2, +, i, ], ,, a3, ,, c3, [, offset3, +, i, ], ,, a4, ,, c4, [, offset4, +, i, ], )]
[MathArrays]
[a1]
[c1, [, offset1, +, i, ]]
[c1]
[offset1, +, i]
[offset1]
[i]
[a2]
[c2, [, offset2, +, i, ]]
[c2]
[offset2, +, i]
[offset2]
[i]
[a3]
[c3, [, offset3, +, i, ]]
[c3]
[offset3, +, i]
[offset3]
[i]
[a4]
[c4, [, offset4, +, i, ]]
[c4]
[offset4, +, i]
[offset4]
[i]
[0]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[lhs, [, lhsOffset, +, i, ], +, rhs, [, rhsOffset, +, i, ]]
[lhs, [, lhsOffset, +, i, ]]
[lhs]
[lhsOffset, +, i]
[lhsOffset]
[i]
[rhs, [, rhsOffset, +, i, ]]
[rhs]
[rhsOffset, +, i]
[rhsOffset]
[i]
[0]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[lhs, [, lhsOffset, +, i, ], -, rhs, [, rhsOffset, +, i, ]]
[lhs, [, lhsOffset, +, i, ]]
[lhs]
[lhsOffset, +, i]
[lhsOffset]
[i]
[rhs, [, rhsOffset, +, i, ]]
[rhs]
[rhsOffset, +, i]
[rhsOffset]
[i]
[0]
[i, <, multIndirection, ., length]
[i]
[multIndirection, ., length]
[multIndirection]
[++, i]
[i]
[multIndirection, [, i, ]]
[multIndirection]
[i]
[0]
[0]
[j, <, mappingI, ., length]
[j]
[mappingI, ., length]
[mappingI]
[++, j]
[j]
[r]
[mappingI, [, j, ], [, 0, ], *, lhs, [, lhsOffset, +, mappingI, [, j, ], [, 1, ], ], *, rhs, [, rhsOffset, +, mappingI, [, j, ], [, 2, ], ]]
[mappingI, [, j, ], [, 0, ], *, lhs, [, lhsOffset, +, mappingI, [, j, ], [, 1, ], ]]
[mappingI, [, j, ], [, 0, ]]
[mappingI, [, j, ]]
[mappingI]
[j]
[0]
[lhs, [, lhsOffset, +, mappingI, [, j, ], [, 1, ], ]]
[lhs]
[lhsOffset, +, mappingI, [, j, ], [, 1, ]]
[lhsOffset]
[mappingI, [, j, ], [, 1, ]]
[mappingI, [, j, ]]
[mappingI]
[j]
[1]
[rhs, [, rhsOffset, +, mappingI, [, j, ], [, 2, ], ]]
[rhs]
[rhsOffset, +, mappingI, [, j, ], [, 2, ]]
[rhsOffset]
[mappingI, [, j, ], [, 2, ]]
[mappingI, [, j, ]]
[mappingI]
[j]
[2]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[r]
[new, double, [, getSize, (, ), ]]
[getSize, (, )]
[pow, (, rhs, ,, lhsOffset, ,, -, 1, ,, reciprocal, ,, 0, )]
[rhs]
[lhsOffset]
[-, 1]
[1]
[reciprocal]
[0]
[multiply, (, lhs, ,, lhsOffset, ,, reciprocal, ,, 0, ,, result, ,, resultOffset, )]
[lhs]
[lhsOffset]
[reciprocal]
[0]
[result]
[resultOffset]
[FastMath, ., IEEEremainder, (, lhs, [, lhsOffset, ], ,, rhs, [, rhsOffset, ], )]
[FastMath]
[lhs, [, lhsOffset, ]]
[lhs]
[lhsOffset]
[rhs, [, rhsOffset, ]]
[rhs]
[rhsOffset]
[FastMath, ., rint, (, (, lhs, [, lhsOffset, ], -, rem, ), /, rhs, [, rhsOffset, ], )]
[FastMath]
[(, lhs, [, lhsOffset, ], -, rem, ), /, rhs, [, rhsOffset, ]]
[(, lhs, [, lhsOffset, ], -, rem, )]
[lhs, [, lhsOffset, ], -, rem]
[lhs, [, lhsOffset, ]]
[lhs]
[lhsOffset]
[rem]
[rhs, [, rhsOffset, ]]
[rhs]
[rhsOffset]
[result, [, resultOffset, ]]
[result]
[resultOffset]
[rem]
[1]
[i, <, getSize, (, )]
[i]
[getSize, (, )]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[lhs, [, lhsOffset, +, i, ], -, k, *, rhs, [, rhsOffset, +, i, ]]
[lhs, [, lhsOffset, +, i, ]]
[lhs]
[lhsOffset, +, i]
[lhsOffset]
[i]
[k, *, rhs, [, rhsOffset, +, i, ]]
[k]
[rhs, [, rhsOffset, +, i, ]]
[rhs]
[rhsOffset, +, i]
[rhsOffset]
[i]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[a, ==, 0]
[a]
[0]
[operand, [, operandOffset, ], ==, 0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[0]
[function, [, 0, ]]
[function]
[0]
[1]
[Double, ., POSITIVE_INFINITY]
[Double]
[1]
[i, <, function, ., length]
[i]
[function, ., length]
[function]
[++, i]
[i]
[infinity]
[-, infinity]
[infinity]
[function, [, i, ]]
[function]
[i]
[infinity]
[operand, [, operandOffset, ], <, 0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[0]
[Arrays, ., fill, (, function, ,, Double, ., NaN, )]
[Arrays]
[function]
[Double, ., NaN]
[Double]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., pow, (, a, ,, operand, [, operandOffset, ], )]
[FastMath]
[a]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[FastMath, ., log, (, a, )]
[FastMath]
[a]
[1]
[i, <, function, ., length]
[i]
[function, ., length]
[function]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[lnA, *, function, [, i, -, 1, ]]
[lnA]
[function, [, i, -, 1, ]]
[function]
[i, -, 1]
[i]
[1]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[FastMath, ., pow, (, operand, [, operandOffset, ], ,, p, -, order, )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[p, -, order]
[p]
[order]
[order]
[i, >, 0]
[i]
[0]
[--, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[xk]
[p]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[coefficient]
[coefficient]
[p, -, i]
[p]
[i]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[n, ==, 0]
[n]
[0]
[result, [, resultOffset, ]]
[result]
[resultOffset]
[1.0]
[Arrays, ., fill, (, result, ,, resultOffset, +, 1, ,, resultOffset, +, getSize, (, ), ,, 0, )]
[Arrays]
[result]
[resultOffset, +, 1]
[resultOffset]
[1]
[resultOffset, +, getSize, (, )]
[resultOffset]
[getSize, (, )]
[0]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[n, >, 0]
[n]
[0]
[FastMath, ., min, (, order, ,, n, )]
[FastMath]
[order]
[n]
[FastMath, ., pow, (, operand, [, operandOffset, ], ,, n, -, maxOrder, )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[n, -, maxOrder]
[n]
[maxOrder]
[maxOrder]
[i, >, 0]
[i]
[0]
[--, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[xk]
[1.0, /, operand, [, operandOffset, ]]
[1.0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[FastMath, ., pow, (, inv, ,, -, n, )]
[FastMath]
[inv]
[-, n]
[n]
[0]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[inv]
[n]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[coefficient]
[coefficient]
[n, -, i]
[n]
[i]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, getSize, (, ), ]]
[getSize, (, )]
[log, (, x, ,, xOffset, ,, logX, ,, 0, )]
[x]
[xOffset]
[logX]
[0]
[new, double, [, getSize, (, ), ]]
[getSize, (, )]
[multiply, (, logX, ,, 0, ,, y, ,, yOffset, ,, yLogX, ,, 0, )]
[logX]
[0]
[y]
[yOffset]
[yLogX]
[0]
[exp, (, yLogX, ,, 0, ,, result, ,, resultOffset, )]
[yLogX]
[0]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[n, ==, 2]
[n]
[2]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., sqrt, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[xk]
[0.5, /, function, [, 0, ]]
[0.5]
[function, [, 0, ]]
[function]
[0]
[n, ==, 3]
[n]
[3]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., cbrt, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[xk]
[1.0, /, (, 3.0, *, function, [, 0, ], *, function, [, 0, ], )]
[1.0]
[(, 3.0, *, function, [, 0, ], *, function, [, 0, ], )]
[3.0, *, function, [, 0, ], *, function, [, 0, ]]
[3.0, *, function, [, 0, ]]
[3.0]
[function, [, 0, ]]
[function]
[0]
[function, [, 0, ]]
[function]
[0]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., pow, (, operand, [, operandOffset, ], ,, 1.0, /, n, )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[1.0, /, n]
[1.0]
[n]
[xk]
[1.0, /, (, n, *, FastMath, ., pow, (, function, [, 0, ], ,, n, -, 1, ), )]
[1.0]
[(, n, *, FastMath, ., pow, (, function, [, 0, ], ,, n, -, 1, ), )]
[n, *, FastMath, ., pow, (, function, [, 0, ], ,, n, -, 1, )]
[n]
[FastMath, ., pow, (, function, [, 0, ], ,, n, -, 1, )]
[FastMath]
[function, [, 0, ]]
[function]
[0]
[n, -, 1]
[n]
[1]
[1.0, /, n]
[1.0]
[n]
[1.0, /, operand, [, operandOffset, ]]
[1.0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[xReciprocal, *, (, nReciprocal, -, i, )]
[xReciprocal]
[(, nReciprocal, -, i, )]
[nReciprocal, -, i]
[nReciprocal]
[i]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[Arrays, ., fill, (, function, ,, FastMath, ., exp, (, operand, [, operandOffset, ], ), )]
[Arrays]
[function]
[FastMath, ., exp, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., expm1, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[Arrays, ., fill, (, function, ,, 1, ,, 1, +, order, ,, FastMath, ., exp, (, operand, [, operandOffset, ], ), )]
[Arrays]
[function]
[1]
[1, +, order]
[1]
[order]
[FastMath, ., exp, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., log, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[1.0, /, operand, [, operandOffset, ]]
[1.0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[inv]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[-, i, *, inv]
[-, i]
[i]
[inv]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., log1p, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[1.0, /, (, 1.0, +, operand, [, operandOffset, ], )]
[1.0]
[(, 1.0, +, operand, [, operandOffset, ], )]
[1.0, +, operand, [, operandOffset, ]]
[1.0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[inv]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[-, i, *, inv]
[-, i]
[i]
[inv]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., log10, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[1.0, /, operand, [, operandOffset, ]]
[1.0]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[inv, /, FastMath, ., log, (, 10.0, )]
[inv]
[FastMath, ., log, (, 10.0, )]
[FastMath]
[10.0]
[1]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[xk]
[xk]
[-, i, *, inv]
[-, i]
[i]
[inv]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., cos, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[function, [, 1, ]]
[function]
[1]
[-, FastMath, ., sin, (, operand, [, operandOffset, ], )]
[FastMath, ., sin, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[2]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[-, function, [, i, -, 2, ]]
[function, [, i, -, 2, ]]
[function]
[i, -, 2]
[i]
[2]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., sin, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[function, [, 1, ]]
[function]
[1]
[FastMath, ., cos, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[2]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[-, function, [, i, -, 2, ]]
[function, [, i, -, 2, ]]
[function]
[i, -, 2]
[i]
[2]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[FastMath, ., tan, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[t]
[order, >, 0]
[order]
[0]
[new, double, [, order, +, 2, ]]
[order, +, 2]
[order]
[2]
[p, [, 1, ]]
[p]
[1]
[1]
[t, *, t]
[t]
[t]
[1]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, +, 1, ]]
[p]
[n, +, 1]
[n]
[1]
[n, *, p, [, n, ]]
[n]
[p, [, n, ]]
[p]
[n]
[n, +, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, t2, +, p, [, k, ]]
[v, *, t2]
[v]
[t2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, p, [, k, -, 1, ], +, (, k, -, 3, ), *, p, [, k, -, 3, ]]
[(, k, -, 1, ), *, p, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, k, -, 3, ), *, p, [, k, -, 3, ]]
[(, k, -, 3, )]
[k, -, 3]
[k]
[3]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[t]
[function, [, n, ]]
[function]
[n]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., acos, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[p, [, 0, ]]
[p]
[0]
[-, 1]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, 1, -, x2, )]
[1.0]
[(, 1, -, x2, )]
[1, -, x2]
[1]
[x2]
[FastMath, ., sqrt, (, f, )]
[FastMath]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, p, [, 0, ]]
[coeff]
[p, [, 0, ]]
[p]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, -, 1, ]]
[p]
[n, -, 1]
[n]
[1]
[(, n, -, 1, ), *, p, [, n, -, 2, ]]
[(, n, -, 1, )]
[n, -, 1]
[n]
[1]
[p, [, n, -, 2, ]]
[p]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, p, [, k, ]]
[v, *, x2]
[v]
[x2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, p, [, k, -, 1, ], +, (, 2, *, n, -, k, ), *, p, [, k, -, 3, ]]
[(, k, -, 1, ), *, p, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, 2, *, n, -, k, ), *, p, [, k, -, 3, ]]
[(, 2, *, n, -, k, )]
[2, *, n, -, k]
[2, *, n]
[2]
[n]
[k]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., asin, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[p, [, 0, ]]
[p]
[0]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, 1, -, x2, )]
[1.0]
[(, 1, -, x2, )]
[1, -, x2]
[1]
[x2]
[FastMath, ., sqrt, (, f, )]
[FastMath]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, p, [, 0, ]]
[coeff]
[p, [, 0, ]]
[p]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, -, 1, ]]
[p]
[n, -, 1]
[n]
[1]
[(, n, -, 1, ), *, p, [, n, -, 2, ]]
[(, n, -, 1, )]
[n, -, 1]
[n]
[1]
[p, [, n, -, 2, ]]
[p]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, p, [, k, ]]
[v, *, x2]
[v]
[x2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, p, [, k, -, 1, ], +, (, 2, *, n, -, k, ), *, p, [, k, -, 3, ]]
[(, k, -, 1, ), *, p, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, 2, *, n, -, k, ), *, p, [, k, -, 3, ]]
[(, 2, *, n, -, k, )]
[2, *, n, -, k]
[2, *, n]
[2]
[n]
[k]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., atan, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[q, [, 0, ]]
[q]
[0]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, 1, +, x2, )]
[1.0]
[(, 1, +, x2, )]
[1, +, x2]
[1]
[x2]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, q, [, 0, ]]
[coeff]
[q, [, 0, ]]
[q]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[q, [, n, -, 1, ]]
[q]
[n, -, 1]
[n]
[1]
[-, n, *, q, [, n, -, 2, ]]
[-, n]
[n]
[q, [, n, -, 2, ]]
[q]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, q, [, k, ]]
[v, *, x2]
[v]
[x2]
[q, [, k, ]]
[q]
[k]
[k, >, 2]
[k]
[2]
[q, [, k, -, 2, ]]
[q]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, q, [, k, -, 1, ], +, (, k, -, 1, -, 2, *, n, ), *, q, [, k, -, 3, ]]
[(, k, -, 1, ), *, q, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[q, [, k, -, 1, ]]
[q]
[k, -, 1]
[k]
[1]
[(, k, -, 1, -, 2, *, n, ), *, q, [, k, -, 3, ]]
[(, k, -, 1, -, 2, *, n, )]
[k, -, 1, -, 2, *, n]
[k, -, 1]
[k]
[1]
[2, *, n]
[2]
[n]
[q, [, k, -, 3, ]]
[q]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[q, [, 0, ]]
[q]
[0]
[q, [, 1, ]]
[q]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, getSize, (, ), ]]
[getSize, (, )]
[multiply, (, x, ,, xOffset, ,, x, ,, xOffset, ,, tmp1, ,, 0, )]
[x]
[xOffset]
[x]
[xOffset]
[tmp1]
[0]
[new, double, [, getSize, (, ), ]]
[getSize, (, )]
[multiply, (, y, ,, yOffset, ,, y, ,, yOffset, ,, tmp2, ,, 0, )]
[y]
[yOffset]
[y]
[yOffset]
[tmp2]
[0]
[add, (, tmp1, ,, 0, ,, tmp2, ,, 0, ,, tmp2, ,, 0, )]
[tmp1]
[0]
[tmp2]
[0]
[tmp2]
[0]
[rootN, (, tmp2, ,, 0, ,, 2, ,, tmp1, ,, 0, )]
[tmp2]
[0]
[2]
[tmp1]
[0]
[x, [, xOffset, ], >=, 0]
[x, [, xOffset, ]]
[x]
[xOffset]
[0]
[add, (, tmp1, ,, 0, ,, x, ,, xOffset, ,, tmp2, ,, 0, )]
[tmp1]
[0]
[x]
[xOffset]
[tmp2]
[0]
[divide, (, y, ,, yOffset, ,, tmp2, ,, 0, ,, tmp1, ,, 0, )]
[y]
[yOffset]
[tmp2]
[0]
[tmp1]
[0]
[atan, (, tmp1, ,, 0, ,, tmp2, ,, 0, )]
[tmp1]
[0]
[tmp2]
[0]
[0]
[i, <, tmp2, ., length]
[i]
[tmp2, ., length]
[tmp2]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[2, *, tmp2, [, i, ]]
[2]
[tmp2, [, i, ]]
[tmp2]
[i]
[subtract, (, tmp1, ,, 0, ,, x, ,, xOffset, ,, tmp2, ,, 0, )]
[tmp1]
[0]
[x]
[xOffset]
[tmp2]
[0]
[divide, (, y, ,, yOffset, ,, tmp2, ,, 0, ,, tmp1, ,, 0, )]
[y]
[yOffset]
[tmp2]
[0]
[tmp1]
[0]
[atan, (, tmp1, ,, 0, ,, tmp2, ,, 0, )]
[tmp1]
[0]
[tmp2]
[0]
[result, [, resultOffset, ]]
[result]
[resultOffset]
[(, (, tmp2, [, 0, ], <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), -, 2, *, tmp2, [, 0, ]]
[(, (, tmp2, [, 0, ], <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, )]
[(, tmp2, [, 0, ], <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI]
[(, tmp2, [, 0, ], <=, 0, )]
[tmp2, [, 0, ], <=, 0]
[tmp2, [, 0, ]]
[tmp2]
[0]
[0]
[-, FastMath, ., PI]
[FastMath, ., PI]
[FastMath]
[FastMath, ., PI]
[FastMath]
[2, *, tmp2, [, 0, ]]
[2]
[tmp2, [, 0, ]]
[tmp2]
[0]
[1]
[i, <, tmp2, ., length]
[i]
[tmp2, ., length]
[tmp2]
[++, i]
[i]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[-, 2, *, tmp2, [, i, ]]
[-, 2]
[2]
[tmp2, [, i, ]]
[tmp2]
[i]
[result, [, resultOffset, ]]
[result]
[resultOffset]
[FastMath, ., atan2, (, y, [, yOffset, ], ,, x, [, xOffset, ], )]
[FastMath]
[y, [, yOffset, ]]
[y]
[yOffset]
[x, [, xOffset, ]]
[x]
[xOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., cosh, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[function, [, 1, ]]
[function]
[1]
[FastMath, ., sinh, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[2]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[function, [, i, -, 2, ]]
[function]
[i, -, 2]
[i]
[2]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., sinh, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[order, >, 0]
[order]
[0]
[function, [, 1, ]]
[function]
[1]
[FastMath, ., cosh, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[2]
[i, <=, order]
[i]
[order]
[++, i]
[i]
[function, [, i, ]]
[function]
[i]
[function, [, i, -, 2, ]]
[function]
[i, -, 2]
[i]
[2]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[FastMath, ., tanh, (, operand, [, operandOffset, ], )]
[FastMath]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[t]
[order, >, 0]
[order]
[0]
[new, double, [, order, +, 2, ]]
[order, +, 2]
[order]
[2]
[p, [, 1, ]]
[p]
[1]
[1]
[t, *, t]
[t]
[t]
[1]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, +, 1, ]]
[p]
[n, +, 1]
[n]
[1]
[-, n, *, p, [, n, ]]
[-, n]
[n]
[p, [, n, ]]
[p]
[n]
[n, +, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, t2, +, p, [, k, ]]
[v, *, t2]
[v]
[t2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, p, [, k, -, 1, ], -, (, k, -, 3, ), *, p, [, k, -, 3, ]]
[(, k, -, 1, ), *, p, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, k, -, 3, ), *, p, [, k, -, 3, ]]
[(, k, -, 3, )]
[k, -, 3]
[k]
[3]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[t]
[function, [, n, ]]
[function]
[n]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., acosh, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[p, [, 0, ]]
[p]
[0]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, x2, -, 1, )]
[1.0]
[(, x2, -, 1, )]
[x2, -, 1]
[x2]
[1]
[FastMath, ., sqrt, (, f, )]
[FastMath]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, p, [, 0, ]]
[coeff]
[p, [, 0, ]]
[p]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, -, 1, ]]
[p]
[n, -, 1]
[n]
[1]
[(, 1, -, n, ), *, p, [, n, -, 2, ]]
[(, 1, -, n, )]
[1, -, n]
[1]
[n]
[p, [, n, -, 2, ]]
[p]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, p, [, k, ]]
[v, *, x2]
[v]
[x2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, 1, -, k, ), *, p, [, k, -, 1, ], +, (, k, -, 2, *, n, ), *, p, [, k, -, 3, ]]
[(, 1, -, k, ), *, p, [, k, -, 1, ]]
[(, 1, -, k, )]
[1, -, k]
[1]
[k]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, k, -, 2, *, n, ), *, p, [, k, -, 3, ]]
[(, k, -, 2, *, n, )]
[k, -, 2, *, n]
[k]
[2, *, n]
[2]
[n]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[-, p, [, 1, ]]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., asinh, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[p, [, 0, ]]
[p]
[0]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, 1, +, x2, )]
[1.0]
[(, 1, +, x2, )]
[1, +, x2]
[1]
[x2]
[FastMath, ., sqrt, (, f, )]
[FastMath]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, p, [, 0, ]]
[coeff]
[p, [, 0, ]]
[p]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[p, [, n, -, 1, ]]
[p]
[n, -, 1]
[n]
[1]
[(, 1, -, n, ), *, p, [, n, -, 2, ]]
[(, 1, -, n, )]
[1, -, n]
[1]
[n]
[p, [, n, -, 2, ]]
[p]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, p, [, k, ]]
[v, *, x2]
[v]
[x2]
[p, [, k, ]]
[p]
[k]
[k, >, 2]
[k]
[2]
[p, [, k, -, 2, ]]
[p]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, p, [, k, -, 1, ], +, (, k, -, 2, *, n, ), *, p, [, k, -, 3, ]]
[(, k, -, 1, ), *, p, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[p, [, k, -, 1, ]]
[p]
[k, -, 1]
[k]
[1]
[(, k, -, 2, *, n, ), *, p, [, k, -, 3, ]]
[(, k, -, 2, *, n, )]
[k, -, 2, *, n]
[k]
[2, *, n]
[2]
[n]
[p, [, k, -, 3, ]]
[p]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[p, [, 0, ]]
[p]
[0]
[p, [, 1, ]]
[p]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[new, double, [, 1, +, order, ]]
[1, +, order]
[1]
[order]
[operand, [, operandOffset, ]]
[operand]
[operandOffset]
[function, [, 0, ]]
[function]
[0]
[FastMath, ., atanh, (, x, )]
[FastMath]
[x]
[order, >, 0]
[order]
[0]
[new, double, [, order, ]]
[order]
[q, [, 0, ]]
[q]
[0]
[1]
[x, *, x]
[x]
[x]
[1.0, /, (, 1, -, x2, )]
[1.0]
[(, 1, -, x2, )]
[1, -, x2]
[1]
[x2]
[f]
[function, [, 1, ]]
[function]
[1]
[coeff, *, q, [, 0, ]]
[coeff]
[q, [, 0, ]]
[q]
[0]
[2]
[n, <=, order]
[n]
[order]
[++, n]
[n]
[0]
[q, [, n, -, 1, ]]
[q]
[n, -, 1]
[n]
[1]
[n, *, q, [, n, -, 2, ]]
[n]
[q, [, n, -, 2, ]]
[q]
[n, -, 2]
[n]
[2]
[n, -, 1]
[n]
[1]
[k, >=, 0]
[k]
[0]
[k]
[2]
[v]
[v, *, x2, +, q, [, k, ]]
[v, *, x2]
[v]
[x2]
[q, [, k, ]]
[q]
[k]
[k, >, 2]
[k]
[2]
[q, [, k, -, 2, ]]
[q]
[k, -, 2]
[k]
[2]
[(, k, -, 1, ), *, q, [, k, -, 1, ], +, (, 2, *, n, -, k, +, 1, ), *, q, [, k, -, 3, ]]
[(, k, -, 1, ), *, q, [, k, -, 1, ]]
[(, k, -, 1, )]
[k, -, 1]
[k]
[1]
[q, [, k, -, 1, ]]
[q]
[k, -, 1]
[k]
[1]
[(, 2, *, n, -, k, +, 1, ), *, q, [, k, -, 3, ]]
[(, 2, *, n, -, k, +, 1, )]
[2, *, n, -, k, +, 1]
[2, *, n, -, k]
[2, *, n]
[2]
[n]
[k]
[1]
[q, [, k, -, 3, ]]
[q]
[k, -, 3]
[k]
[3]
[k, ==, 2]
[k]
[2]
[q, [, 0, ]]
[q]
[0]
[q, [, 1, ]]
[q]
[1]
[(, n, &, 0x1, ), ==, 0]
[(, n, &, 0x1, )]
[n, &, 0x1]
[n]
[0x1]
[0]
[v]
[x]
[coeff]
[f]
[function, [, n, ]]
[function]
[n]
[coeff, *, v]
[coeff]
[v]
[compose, (, operand, ,, operandOffset, ,, function, ,, result, ,, resultOffset, )]
[operand]
[operandOffset]
[function]
[result]
[resultOffset]
[0]
[i, <, compIndirection, ., length]
[i]
[compIndirection, ., length]
[compIndirection]
[++, i]
[i]
[compIndirection, [, i, ]]
[compIndirection]
[i]
[0]
[0]
[j, <, mappingI, ., length]
[j]
[mappingI, ., length]
[mappingI]
[++, j]
[j]
[mappingI, [, j, ]]
[mappingI]
[j]
[mappingIJ, [, 0, ], *, f, [, mappingIJ, [, 1, ], ]]
[mappingIJ, [, 0, ]]
[mappingIJ]
[0]
[f, [, mappingIJ, [, 1, ], ]]
[f]
[mappingIJ, [, 1, ]]
[mappingIJ]
[1]
[2]
[k, <, mappingIJ, ., length]
[k]
[mappingIJ, ., length]
[mappingIJ]
[++, k]
[k]
[product]
[operand, [, operandOffset, +, mappingIJ, [, k, ], ]]
[operand]
[operandOffset, +, mappingIJ, [, k, ]]
[operandOffset]
[mappingIJ, [, k, ]]
[mappingIJ]
[k]
[r]
[product]
[result, [, resultOffset, +, i, ]]
[result]
[resultOffset, +, i]
[resultOffset]
[i]
[r]
[0]
[getSize, (, ), -, 1]
[getSize, (, )]
[1]
[i, >=, 0]
[i]
[0]
[--, i]
[i]
[getPartialDerivativeOrders, (, i, )]
[i]
[ds, [, dsOffset, +, i, ]]
[ds]
[dsOffset, +, i]
[dsOffset]
[i]
[0]
[k, <, orders, ., length]
[k]
[orders, ., length]
[orders]
[++, k]
[k]
[orders, [, k, ], >, 0]
[orders, [, k, ]]
[orders]
[k]
[0]
[term]
[FastMath, ., pow, (, delta, [, k, ], ,, orders, [, k, ], ), /, CombinatoricsUtils, ., factorial, (, orders, [, k, ], )]
[FastMath, ., pow, (, delta, [, k, ], ,, orders, [, k, ], )]
[FastMath]
[delta, [, k, ]]
[delta]
[k]
[orders, [, k, ]]
[orders]
[k]
[CombinatoricsUtils, ., factorial, (, orders, [, k, ], )]
[CombinatoricsUtils]
[orders, [, k, ]]
[orders]
[k]
[new, MathInternalError, (, e, )]
[e]
[value]
[term]
[value]
[parameters, !=, compiler, ., parameters]
[parameters]
[compiler, ., parameters]
[compiler]
[new, DimensionMismatchException, (, parameters, ,, compiler, ., parameters, )]
[parameters]
[compiler, ., parameters]
[compiler]
[order, !=, compiler, ., order]
[order]
[compiler, ., order]
[compiler]
[new, DimensionMismatchException, (, order, ,, compiler, ., order, )]
[order]
[compiler, ., order]
[compiler]
