[null]
[this, ., options]
[this]
[options]
[internalScopeCreator]
[new, TypedScopeCreator, (, compiler, )]
[compiler]
[typedScopeCreator]
[new, MemoizedScopeCreator, (, internalScopeCreator, )]
[internalScopeCreator]
[topScope]
[typedScopeCreator, ., createScope, (, root, ,, null, )]
[typedScopeCreator]
[root]
[null]
[internalScopeCreator]
[null]
[typedScopeCreator]
[null]
[topScope]
[null]
[Preconditions, ., checkNotNull, (, internalScopeCreator, )]
[Preconditions]
[internalScopeCreator]
[internalScopeCreator, ., patchGlobalScope, (, topScope, ,, scriptRoot, )]
[internalScopeCreator]
[topScope]
[scriptRoot]
[typedScopeCreator]
[topScope]
[LinkedDirectedGraph, ., createWithoutAnnotations, (, )]
[LinkedDirectedGraph]
[Iterables, ., concat, (, getChecks, (, ), ,, getOptimizations, (, ), )]
[Iterables]
[getChecks, (, )]
[getOptimizations, (, )]
[null]
[null]
[allPasses]
[pass, ., getName, (, )]
[pass]
[1]
[graph, ., hasNode, (, passName, )]
[graph]
[passName]
[passName]
[pass, ., getName, (, ), +, (, i, ++, )]
[pass, ., getName, (, )]
[pass]
[(, i, ++, )]
[i, ++]
[i]
[graph, ., createNode, (, passName, )]
[graph]
[passName]
[loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, )]
[loopStart, ==, null]
[loopStart]
[null]
[!, pass, ., isOneTimePass, (, )]
[pass, ., isOneTimePass, (, )]
[pass]
[loopStart]
[passName]
[loopStart, !=, null, &&, pass, ., isOneTimePass, (, )]
[loopStart, !=, null]
[loopStart]
[null]
[pass, ., isOneTimePass, (, )]
[pass]
[graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, )]
[graph]
[lastPass]
["loop"]
[loopStart]
[loopStart]
[null]
[lastPass, !=, null]
[lastPass]
[null]
[graph, ., connect, (, lastPass, ,, "", ,, passName, )]
[graph]
[lastPass]
[""]
[passName]
[lastPass]
[passName]
[graph]
[new, TypeInferencePass, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, topScope, ,, typedScopeCreator, )]
[compiler]
[compiler, ., getReverseAbstractInterpreter, (, )]
[compiler]
[topScope]
[typedScopeCreator]
[new, InferJSDocInfo, (, compiler, )]
[compiler]
[new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), ), )]
[new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, )]
[compiler]
[compiler, ., getReverseAbstractInterpreter, (, )]
[compiler]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[topScope]
[typedScopeCreator]
[options, ., reportMissingOverride]
[options]
[options, ., reportUnknownTypes]
[options]
[options, ., enables, (, DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, ), )]
[options]
[DiagnosticGroup, ., forType, (, TypeCheck, ., INEXISTENT_PROPERTY, )]
[DiagnosticGroup]
[TypeCheck, ., INEXISTENT_PROPERTY]
[TypeCheck]
[factoryList, ., add, (, findPassIndexByName, (, factoryList, ,, passName, ), ,, factory, )]
[factoryList]
[findPassIndexByName, (, factoryList, ,, passName, )]
[factoryList]
[passName]
[factory]
[factoryList, ., set, (, findPassIndexByName, (, factoryList, ,, factory, ., getName, (, ), ), ,, factory, )]
[factoryList]
[findPassIndexByName, (, factoryList, ,, factory, ., getName, (, ), )]
[factoryList]
[factory, ., getName, (, )]
[factory]
[factory]
[0]
[i, <, factoryList, ., size, (, )]
[i]
[factoryList, ., size, (, )]
[factoryList]
[i, ++]
[i]
[factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (, name, )]
[factoryList, ., get, (, i, ), ., getName, (, )]
[factoryList, ., get, (, i, )]
[factoryList]
[i]
[name]
[i]
[new, IllegalArgumentException, (, "No factory named '", +, name, +, "' in the factory list", )]
["No factory named '", +, name, +, "' in the factory list"]
["No factory named '", +, name]
["No factory named '"]
[name]
["' in the factory list"]
[this]
[current, instanceof, PassConfigDelegate]
[current]
[current]
[(, (, PassConfigDelegate, ), current, ), ., delegate]
[(, (, PassConfigDelegate, ), current, )]
[(, PassConfigDelegate, ), current]
[current]
[current]
[delegate, ., options]
[delegate]
[this, ., delegate]
[this]
[delegate]
[delegate, ., getChecks, (, )]
[delegate]
[delegate, ., getOptimizations, (, )]
[delegate]
[delegate, ., getTypedScopeCreator, (, )]
[delegate]
[delegate, ., getTopScope, (, )]
[delegate]
[delegate, ., getIntermediateState, (, )]
[delegate]
[delegate, ., setIntermediateState, (, state, )]
[delegate]
[state]
[1L]
[this, ., cssNames]
[this]
[cssNames]
[this, ., exportedNames]
[this]
[exportedNames]
[this, ., crossModuleIdGenerator]
[this]
[crossModuleIdGenerator]
[this, ., variableMap]
[this]
[variableMap]
[this, ., propertyMap]
[this]
[propertyMap]
[this, ., anonymousFunctionNameMap]
[this]
[anonymousFunctionNameMap]
[this, ., stringMap]
[this]
[stringMap]
[this, ., idGeneratorMap]
[this]
[idGeneratorMap]
[this, ., functionNames]
[this]
[functionNames]
