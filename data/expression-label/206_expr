[DiagnosticType, ., warning, (, "JSC_USELESS_CODE", ,, "Suspicious code. {0}", )]
[DiagnosticType]
["JSC_USELESS_CODE"]
["Suspicious code. {0}"]
["JSCOMPILER_PRESERVE"]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., compiler]
[this]
[compiler]
[this, ., level]
[this]
[level]
[this, ., protectSideEffectFreeCode]
[this]
[protectSideEffectFreeCode]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[protectSideEffectFreeCode]
[protectSideEffects, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, this, )]
[NodeTraversal]
[compiler]
[scriptRoot]
[this]
[n, ., isEmpty, (, ), ||, n, ., isComma, (, )]
[n, ., isEmpty, (, )]
[n]
[n, ., isComma, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[n, ., isExprResult, (, ), ||, n, ., isBlock, (, )]
[n, ., isExprResult, (, )]
[n]
[n, ., isBlock, (, )]
[n]
[n, ., isQualifiedName, (, ), &&, n, ., getJSDocInfo, (, ), !=, null]
[n, ., isQualifiedName, (, )]
[n]
[n, ., getJSDocInfo, (, ), !=, null]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[NodeUtil, ., isExpressionResultUsed, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., isSimpleOperator, (, n, )]
[NodeUtil]
[n]
[!, isResultUsed, &&, (, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), )]
[!, isResultUsed]
[isResultUsed]
[(, isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), ), )]
[isSimpleOp, ||, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), )]
[isSimpleOp]
[!, NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), )]
[NodeUtil, ., mayHaveSideEffects, (, n, ,, t, ., getCompiler, (, ), )]
[NodeUtil]
[n]
[t, ., getCompiler, (, )]
[t]
["This code lacks side-effects. Is there a bug?"]
[n, ., isString, (, )]
[n]
[msg]
["Is there a missing '+' on the previous line?"]
[isSimpleOp]
[msg]
["The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, ), +, "' operator is not being used."]
["The result of the '", +, Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, )]
["The result of the '"]
[Token, ., name, (, n, ., getType, (, ), ), ., toLowerCase, (, )]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
["' operator is not being used."]
[t, ., getCompiler, (, ), ., report, (, t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, ), )]
[t, ., getCompiler, (, )]
[t]
[t, ., makeError, (, n, ,, level, ,, USELESS_CODE_ERROR, ,, msg, )]
[t]
[n]
[level]
[USELESS_CODE_ERROR]
[msg]
[!, NodeUtil, ., isStatement, (, n, )]
[NodeUtil, ., isStatement, (, n, )]
[NodeUtil]
[n]
[problemNodes, ., add, (, n, )]
[problemNodes]
[n]
[!, problemNodes, ., isEmpty, (, )]
[problemNodes, ., isEmpty, (, )]
[problemNodes]
[addExtern, (, )]
[problemNodes]
[IR, ., name, (, PROTECTOR_FN, ), ., srcref, (, n, )]
[IR, ., name, (, PROTECTOR_FN, )]
[IR]
[PROTECTOR_FN]
[n]
[name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[name]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[IR, ., call, (, name, ), ., srcref, (, n, )]
[IR, ., call, (, name, )]
[IR]
[name]
[n]
[replacement, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[replacement]
[Node, ., FREE_CALL]
[Node]
[true]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, replacement, )]
[n, ., getParent, (, )]
[n]
[n]
[replacement]
[replacement, ., addChildToBack, (, n, )]
[replacement]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[IR, ., name, (, PROTECTOR_FN, )]
[IR]
[PROTECTOR_FN]
[name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[name]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[IR, ., var, (, name, )]
[IR]
[name]
[new, JSDocInfoBuilder, (, false, )]
[false]
[builder, ., recordNoAlias, (, )]
[builder]
[var, ., setJSDocInfo, (, builder, ., build, (, var, ), )]
[var]
[builder, ., build, (, var, )]
[builder]
[var]
[compiler, ., getSynthesizedExternsInput, (, )]
[compiler]
[input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, var, )]
[input, ., getAstRoot, (, compiler, )]
[input]
[compiler]
[var]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[n, ., isCall, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, PROTECTOR_FN, )]
[target, ., isName, (, )]
[target]
[target, ., getString, (, ), ., equals, (, PROTECTOR_FN, )]
[target, ., getString, (, )]
[target]
[PROTECTOR_FN]
[n, ., getLastChild, (, )]
[n]
[n, ., detachChildren, (, )]
[n]
[parent, ., replaceChild, (, n, ,, expr, )]
[parent]
[n]
[expr]
