[CharMatcher, ., is, (, '/', )]
[CharMatcher]
['/']
[CharMatcher, ., isNot, (, '/', )]
[CharMatcher]
['/']
[path]
[removeExtraneousSlashes, (, path, )]
[path]
[!, path, ., contains, (, ".", )]
[path, ., contains, (, ".", )]
[path]
["."]
[path]
[path, ., split, (, "/", )]
[path]
["/"]
[Lists, ., newArrayList, (, )]
[Lists]
[srcFragments]
[fragment, ., equals, (, "..", )]
[fragment]
[".."]
[!, dstFragments, ., isEmpty, (, )]
[dstFragments, ., isEmpty, (, )]
[dstFragments]
[dstFragments, ., remove, (, dstFragments, ., size, (, ), -, 1, )]
[dstFragments]
[dstFragments, ., size, (, ), -, 1]
[dstFragments, ., size, (, )]
[dstFragments]
[1]
[!, fragment, ., equals, (, ".", )]
[fragment, ., equals, (, ".", )]
[fragment]
["."]
[dstFragments, ., add, (, fragment, )]
[dstFragments]
[fragment]
[dstFragments, ., size, (, ), ==, 1, &&, dstFragments, ., get, (, 0, ), ., isEmpty, (, )]
[dstFragments, ., size, (, ), ==, 1]
[dstFragments, ., size, (, )]
[dstFragments]
[1]
[dstFragments, ., get, (, 0, ), ., isEmpty, (, )]
[dstFragments, ., get, (, 0, )]
[dstFragments]
[0]
["/"]
[Joiner, ., on, (, "/", ), ., join, (, dstFragments, )]
[Joiner, ., on, (, "/", )]
[Joiner]
["/"]
[dstFragments]
[path, ., startsWith, (, "/", )]
[path]
["/"]
[NON_SLASH_MATCHER, ., lastIndexIn, (, s, )]
[NON_SLASH_MATCHER]
[s]
[lastNonSlash, !=, -, 1]
[lastNonSlash]
[-, 1]
[1]
[s]
[s, ., substring, (, 0, ,, lastNonSlash, +, 1, )]
[s]
[0]
[lastNonSlash, +, 1]
[lastNonSlash]
[1]
[SLASH_MATCHER, ., collapseFrom, (, s, ,, '/', )]
[SLASH_MATCHER]
[s]
['/']
[makeAbsolute, (, path, ,, System, ., getProperty, (, "user.dir", ), )]
[path]
[System, ., getProperty, (, "user.dir", )]
[System]
["user.dir"]
[!, isAbsolute, (, path, )]
[isAbsolute, (, path, )]
[path]
[path]
[rootPath, +, "/", +, path]
[rootPath, +, "/"]
[rootPath]
["/"]
[path]
[collapseDots, (, path, )]
[path]
[isAbsolute, (, basePath, ), !=, isAbsolute, (, targetPath, )]
[isAbsolute, (, basePath, )]
[basePath]
[isAbsolute, (, targetPath, )]
[targetPath]
[new, IllegalArgumentException, (, "Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath, )]
["Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: ", +, targetPath]
["Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n", +, "  targetPath: "]
["Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath, +, "\n"]
["Paths must both be relative or both absolute.\n", +, "  basePath: ", +, basePath]
["Paths must both be relative or both absolute.\n", +, "  basePath: "]
["Paths must both be relative or both absolute.\n"]
["  basePath: "]
[basePath]
["\n"]
["  targetPath: "]
[targetPath]
[basePath]
[collapseDots, (, basePath, )]
[basePath]
[targetPath]
[collapseDots, (, targetPath, )]
[targetPath]
[basePath, ., split, (, "/", )]
[basePath]
["/"]
[targetPath, ., split, (, "/", )]
[targetPath]
["/"]
[-, 1]
[1]
[i]
[1]
[i, ==, baseFragments, ., length, &&, i, ==, targetFragments, ., length]
[i, ==, baseFragments, ., length]
[i]
[baseFragments, ., length]
[baseFragments]
[i, ==, targetFragments, ., length]
[i]
[targetFragments, ., length]
[targetFragments]
["."]
[i, ==, baseFragments, ., length]
[i]
[baseFragments, ., length]
[baseFragments]
[Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), )]
[Joiner, ., on, (, "/", )]
[Joiner]
["/"]
[Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), )]
[Lists]
[Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, )]
[Arrays, ., asList, (, targetFragments, )]
[Arrays]
[targetFragments]
[i]
[i, ==, targetFragments, ., length]
[i]
[targetFragments, ., length]
[targetFragments]
[Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, ), +, ".."]
[Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, -, 1, )]
[Strings]
["../"]
[baseFragments, ., length, -, i, -, 1]
[baseFragments, ., length, -, i]
[baseFragments, ., length]
[baseFragments]
[i]
[1]
[".."]
[baseFragments, [, i, ], ., equals, (, targetFragments, [, i, ], )]
[baseFragments, [, i, ]]
[baseFragments]
[i]
[targetFragments, [, i, ]]
[targetFragments]
[i]
[Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, ), +, Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), )]
[Strings, ., repeat, (, "../", ,, baseFragments, ., length, -, i, )]
[Strings]
["../"]
[baseFragments, ., length, -, i]
[baseFragments, ., length]
[baseFragments]
[i]
[Joiner, ., on, (, "/", ), ., join, (, Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), ), )]
[Joiner, ., on, (, "/", )]
[Joiner]
["/"]
[Lists, ., newArrayList, (, Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, ), )]
[Lists]
[Arrays, ., asList, (, targetFragments, ), ., listIterator, (, i, )]
[Arrays, ., asList, (, targetFragments, )]
[Arrays]
[targetFragments]
[i]
