[0x8000000000000000L]
[0x7ff0000000000000L]
[0x000fffffffffffffL]
[0x0010000000000000L]
[this, ., components]
[this]
[components, ., clone, (, )]
[components]
[Integer, ., MIN_VALUE]
[Integer]
[lsb]
[Integer, ., MAX_VALUE]
[Integer]
[posInf]
[false]
[negInf]
[false]
[nan]
[false]
[0]
[i, <, components, ., length]
[i]
[components, ., length]
[components]
[++, i]
[i]
[Double, ., isInfinite, (, components, [, i, ], )]
[Double]
[components, [, i, ]]
[components]
[i]
[components, [, i, ], <, 0]
[components, [, i, ]]
[components]
[i]
[0]
[negInf]
[true]
[posInf]
[true]
[Double, ., isNaN, (, components, [, i, ], )]
[Double]
[components, [, i, ]]
[components]
[i]
[nan]
[true]
[Double, ., doubleToLongBits, (, components, [, i, ], )]
[Double]
[components, [, i, ]]
[components]
[i]
[mantissa, (, b, )]
[b]
[m, !=, 0]
[m]
[0]
[exponent, (, b, )]
[b]
[msb]
[FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), )]
[FastMath]
[msb]
[e, +, computeMSB, (, m, )]
[e]
[computeMSB, (, m, )]
[m]
[lsb]
[FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), )]
[FastMath]
[lsb]
[e, +, computeLSB, (, m, )]
[e]
[computeLSB, (, m, )]
[m]
[posInf, &&, negInf]
[posInf]
[negInf]
[posInf]
[false]
[negInf]
[false]
[nan]
[true]
[lsb, <=, msb]
[lsb]
[msb]
[encode, (, msb, +, 16, )]
[msb, +, 16]
[msb]
[16]
[encoding]
[new, long, [, ], {, 0x0L, }]
[{, 0x0L, }]
[0x0L]
[offset]
[minOffset, +, 31]
[minOffset]
[31]
[offset]
[offset, %, 32]
[offset]
[32]
[(, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, )]
[(, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, )]
[(, encoding, !=, null, )]
[encoding, !=, null]
[encoding]
[null]
[(, encoding, ., length, ==, 1, )]
[encoding, ., length, ==, 1]
[encoding, ., length]
[encoding]
[1]
[(, encoding, [, 0, ], ==, 0x0L, )]
[encoding, [, 0, ], ==, 0x0L]
[encoding, [, 0, ]]
[encoding]
[0]
[0x0L]
[offset, +, 1, -, lsb]
[offset, +, 1]
[offset]
[1]
[lsb]
[(, neededBits, +, 62, ), /, 63]
[(, neededBits, +, 62, )]
[neededBits, +, 62]
[neededBits]
[62]
[63]
[encoding]
[new, long, [, components, ., length, *, neededLongs, ]]
[components, ., length, *, neededLongs]
[components, ., length]
[components]
[neededLongs]
[0]
[62]
[0x0L]
[offset]
[eIndex, <, encoding, ., length]
[eIndex]
[encoding, ., length]
[encoding]
[--, k]
[k]
[0]
[vIndex, <, components, ., length]
[vIndex]
[components, ., length]
[components]
[++, vIndex]
[vIndex]
[getBit, (, vIndex, ,, k, ), !=, 0]
[getBit, (, vIndex, ,, k, )]
[vIndex]
[k]
[0]
[word]
[0x1L, <<, shift]
[0x1L]
[shift]
[shift, --, ==, 0]
[shift, --]
[shift]
[0]
[encoding, [, eIndex, ++, ]]
[encoding]
[eIndex, ++]
[eIndex]
[word]
[word]
[0x0L]
[shift]
[62]
[components, ., length, ==, ot, ., components, ., length]
[components, ., length]
[components]
[ot, ., components, ., length]
[ot, ., components]
[ot]
[nan]
[+, 1]
[1]
[ot, ., nan]
[ot]
[-, 1]
[1]
[negInf, ||, ot, ., posInf]
[negInf]
[ot, ., posInf]
[ot]
[-, 1]
[1]
[posInf, ||, ot, ., negInf]
[posInf]
[ot, ., negInf]
[ot]
[+, 1]
[1]
[offset, <, ot, ., offset]
[offset]
[ot, ., offset]
[ot]
[encode, (, ot, ., offset, )]
[ot, ., offset]
[ot]
[offset, >, ot, ., offset]
[offset]
[ot, ., offset]
[ot]
[ot, ., encode, (, offset, )]
[ot]
[offset]
[FastMath, ., min, (, encoding, ., length, ,, ot, ., encoding, ., length, )]
[FastMath]
[encoding, ., length]
[encoding]
[ot, ., encoding, ., length]
[ot, ., encoding]
[ot]
[0]
[i, <, limit]
[i]
[limit]
[++, i]
[i]
[encoding, [, i, ], <, ot, ., encoding, [, i, ]]
[encoding, [, i, ]]
[encoding]
[i]
[ot, ., encoding, [, i, ]]
[ot, ., encoding]
[ot]
[i]
[-, 1]
[1]
[encoding, [, i, ], >, ot, ., encoding, [, i, ]]
[encoding, [, i, ]]
[encoding]
[i]
[ot, ., encoding, [, i, ]]
[ot, ., encoding]
[ot]
[i]
[+, 1]
[1]
[encoding, ., length, <, ot, ., encoding, ., length]
[encoding, ., length]
[encoding]
[ot, ., encoding, ., length]
[ot, ., encoding]
[ot]
[-, 1]
[1]
[encoding, ., length, >, ot, ., encoding, ., length]
[encoding, ., length]
[encoding]
[ot, ., encoding, ., length]
[ot, ., encoding]
[ot]
[+, 1]
[1]
[0]
[components, ., length, -, ot, ., components, ., length]
[components, ., length]
[components]
[ot, ., components, ., length]
[ot, ., components]
[ot]
[this, ==, other]
[this]
[other]
[true]
[other, instanceof, OrderedTuple]
[other]
[compareTo, (, (, OrderedTuple, ), other, ), ==, 0]
[compareTo, (, (, OrderedTuple, ), other, )]
[(, OrderedTuple, ), other]
[other]
[0]
[false]
[37]
[97]
[71]
[Arrays, ., hashCode, (, components, )]
[Arrays]
[components]
[hash]
[hash, *, multiplier, +, offset]
[hash, *, multiplier]
[hash]
[multiplier]
[offset]
[hash]
[hash, *, multiplier, +, lsb]
[hash, *, multiplier]
[hash]
[multiplier]
[lsb]
[hash]
[hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, )]
[hash, *, multiplier]
[hash]
[multiplier]
[(, posInf, ?, trueHash, :, falseHash, )]
[posInf, ?, trueHash, :, falseHash]
[posInf]
[trueHash]
[falseHash]
[hash]
[hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, )]
[hash, *, multiplier]
[hash]
[multiplier]
[(, negInf, ?, trueHash, :, falseHash, )]
[negInf, ?, trueHash, :, falseHash]
[negInf]
[trueHash]
[falseHash]
[hash]
[hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, )]
[hash, *, multiplier]
[hash]
[multiplier]
[(, nan, ?, trueHash, :, falseHash, )]
[nan, ?, trueHash, :, falseHash]
[nan]
[trueHash]
[falseHash]
[hash]
[components, ., clone, (, )]
[components]
[bits, &, SIGN_MASK]
[bits]
[SIGN_MASK]
[(, (, int, ), (, (, bits, &, EXPONENT_MASK, ), >, >, 52, ), ), -, 1075]
[(, (, int, ), (, (, bits, &, EXPONENT_MASK, ), >, >, 52, ), )]
[(, int, ), (, (, bits, &, EXPONENT_MASK, ), >, >, 52, )]
[(, (, bits, &, EXPONENT_MASK, ), >, >, 52, )]
[(, bits, &, EXPONENT_MASK, ), >, >, 52]
[(, bits, &, EXPONENT_MASK, )]
[bits, &, EXPONENT_MASK]
[bits]
[EXPONENT_MASK]
[52]
[1075]
[(, (, bits, &, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), )]
[(, (, bits, &, EXPONENT_MASK, ), ==, 0, )]
[(, bits, &, EXPONENT_MASK, ), ==, 0]
[(, bits, &, EXPONENT_MASK, )]
[bits, &, EXPONENT_MASK]
[bits]
[EXPONENT_MASK]
[0]
[(, (, bits, &, MANTISSA_MASK, ), <<, 1, )]
[(, bits, &, MANTISSA_MASK, ), <<, 1]
[(, bits, &, MANTISSA_MASK, )]
[bits, &, MANTISSA_MASK]
[bits]
[MANTISSA_MASK]
[1]
[(, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), )]
[IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, )]
[IMPLICIT_ONE]
[(, bits, &, MANTISSA_MASK, )]
[bits, &, MANTISSA_MASK]
[bits]
[MANTISSA_MASK]
[l]
[0xffffffffL]
[32]
[0]
[scale, !=, 0]
[scale]
[0]
[(, ll, &, mask, ), !=, ll]
[(, ll, &, mask, )]
[ll, &, mask]
[ll]
[mask]
[ll]
[msb]
[scale]
[ll]
[ll, >, >, scale]
[ll]
[scale]
[scale]
[scale, >, >, 1]
[scale]
[1]
[mask]
[mask, >, >, scale]
[mask]
[scale]
[msb]
[l]
[0xffffffff00000000L]
[32]
[0]
[scale, !=, 0]
[scale]
[0]
[(, ll, &, mask, ), ==, ll]
[(, ll, &, mask, )]
[ll, &, mask]
[ll]
[mask]
[ll]
[lsb]
[scale]
[ll]
[ll, >, >, scale]
[ll]
[scale]
[scale]
[scale, >, >, 1]
[scale]
[1]
[mask]
[mask, >, >, scale]
[mask]
[scale]
[lsb]
[Double, ., doubleToLongBits, (, components, [, i, ], )]
[Double]
[components, [, i, ]]
[components]
[i]
[exponent, (, bits, )]
[bits]
[(, k, <, e, ), ||, (, k, >, offset, )]
[(, k, <, e, )]
[k, <, e]
[k]
[e]
[(, k, >, offset, )]
[k, >, offset]
[k]
[offset]
[0]
[k, ==, offset]
[k]
[offset]
[(, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0]
[(, sign, (, bits, ), ==, 0L, )]
[sign, (, bits, ), ==, 0L]
[sign, (, bits, )]
[bits]
[0L]
[1]
[0]
[k, >, (, e, +, 52, )]
[k]
[(, e, +, 52, )]
[e, +, 52]
[e]
[52]
[(, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1]
[(, sign, (, bits, ), ==, 0L, )]
[sign, (, bits, ), ==, 0L]
[sign, (, bits, )]
[bits]
[0L]
[0]
[1]
[(, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, )]
[(, sign, (, bits, ), ==, 0L, )]
[sign, (, bits, ), ==, 0L]
[sign, (, bits, )]
[bits]
[0L]
[mantissa, (, bits, )]
[bits]
[-, mantissa, (, bits, )]
[mantissa, (, bits, )]
[bits]
[(, int, ), (, (, m, >, >, (, k, -, e, ), ), &, 0x1L, )]
[(, (, m, >, >, (, k, -, e, ), ), &, 0x1L, )]
[(, m, >, >, (, k, -, e, ), ), &, 0x1L]
[(, m, >, >, (, k, -, e, ), )]
[m, >, >, (, k, -, e, )]
[m]
[(, k, -, e, )]
[k, -, e]
[k]
[e]
[0x1L]
