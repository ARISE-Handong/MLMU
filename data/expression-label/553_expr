[Long, ., valueOf, (, 0L, )]
[Long]
[0L]
[Long, ., valueOf, (, 1L, )]
[Long]
[1L]
[Long, ., valueOf, (, -, 1L, )]
[Long]
[-, 1L]
[1L]
[Integer, ., valueOf, (, 0, )]
[Integer]
[0]
[Integer, ., valueOf, (, 1, )]
[Integer]
[1]
[Integer, ., valueOf, (, -, 1, )]
[Integer]
[-, 1]
[1]
[Short, ., valueOf, (, (, short, ), 0, )]
[Short]
[(, short, ), 0]
[0]
[Short, ., valueOf, (, (, short, ), 1, )]
[Short]
[(, short, ), 1]
[1]
[Short, ., valueOf, (, (, short, ), -, 1, )]
[Short]
[(, short, ), -, 1]
[-, 1]
[1]
[Byte, ., valueOf, (, (, byte, ), 0, )]
[Byte]
[(, byte, ), 0]
[0]
[Byte, ., valueOf, (, (, byte, ), 1, )]
[Byte]
[(, byte, ), 1]
[1]
[Byte, ., valueOf, (, (, byte, ), -, 1, )]
[Byte]
[(, byte, ), -, 1]
[-, 1]
[1]
[Double, ., valueOf, (, 0.0d, )]
[Double]
[0.0d]
[Double, ., valueOf, (, 1.0d, )]
[Double]
[1.0d]
[Double, ., valueOf, (, -, 1.0d, )]
[Double]
[-, 1.0d]
[1.0d]
[Float, ., valueOf, (, 0.0f, )]
[Float]
[0.0f]
[Float, ., valueOf, (, 1.0f, )]
[Float]
[1.0f]
[Float, ., valueOf, (, -, 1.0f, )]
[Float]
[-, 1.0f]
[1.0f]
[toInt, (, str, ,, 0, )]
[str]
[0]
[str, ==, null]
[str]
[null]
[defaultValue]
[Integer, ., parseInt, (, str, )]
[Integer]
[str]
[defaultValue]
[toLong, (, str, ,, 0L, )]
[str]
[0L]
[str, ==, null]
[str]
[null]
[defaultValue]
[Long, ., parseLong, (, str, )]
[Long]
[str]
[defaultValue]
[toFloat, (, str, ,, 0.0f, )]
[str]
[0.0f]
[str, ==, null]
[str]
[null]
[defaultValue]
[Float, ., parseFloat, (, str, )]
[Float]
[str]
[defaultValue]
[toDouble, (, str, ,, 0.0d, )]
[str]
[0.0d]
[str, ==, null]
[str]
[null]
[defaultValue]
[Double, ., parseDouble, (, str, )]
[Double]
[str]
[defaultValue]
[toByte, (, str, ,, (, byte, ), 0, )]
[str]
[(, byte, ), 0]
[0]
[str, ==, null]
[str]
[null]
[defaultValue]
[Byte, ., parseByte, (, str, )]
[Byte]
[str]
[defaultValue]
[toShort, (, str, ,, (, short, ), 0, )]
[str]
[(, short, ), 0]
[0]
[str, ==, null]
[str]
[null]
[defaultValue]
[Short, ., parseShort, (, str, )]
[Short]
[str]
[defaultValue]
[str, ==, null]
[str]
[null]
[null]
[StringUtils, ., isBlank, (, str, )]
[StringUtils]
[str]
[new, NumberFormatException, (, "A blank string is not a valid number", )]
["A blank string is not a valid number"]
[{, "0x", ,, "0X", ,, "-0x", ,, "-0X", ,, "#", ,, "-#", }]
["0x"]
["0X"]
["-0x"]
["-0X"]
["#"]
["-#"]
[0]
[hex_prefixes]
[str, ., startsWith, (, pfx, )]
[str]
[pfx]
[pfxLen]
[pfx, ., length, (, )]
[pfx]
[pfxLen, >, 0]
[pfxLen]
[0]
[str, ., length, (, ), -, pfxLen]
[str, ., length, (, )]
[str]
[pfxLen]
[hexDigits, >, 16]
[hexDigits]
[16]
[createBigInteger, (, str, )]
[str]
[hexDigits, >, 8]
[hexDigits]
[8]
[createLong, (, str, )]
[str]
[createInteger, (, str, )]
[str]
[str, ., charAt, (, str, ., length, (, ), -, 1, )]
[str]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[str, ., indexOf, (, '.', )]
[str]
['.']
[str, ., indexOf, (, 'e', ), +, str, ., indexOf, (, 'E', ), +, 1]
[str, ., indexOf, (, 'e', ), +, str, ., indexOf, (, 'E', )]
[str, ., indexOf, (, 'e', )]
[str]
['e']
[str, ., indexOf, (, 'E', )]
[str]
['E']
[1]
[0]
[decPos, >, -, 1]
[decPos]
[-, 1]
[1]
[expPos, >, -, 1]
[expPos]
[-, 1]
[1]
[expPos, <, decPos, ||, expPos, >, str, ., length, (, )]
[expPos, <, decPos]
[expPos]
[decPos]
[expPos, >, str, ., length, (, )]
[expPos]
[str, ., length, (, )]
[str]
[new, NumberFormatException, (, str, +, " is not a valid number.", )]
[str, +, " is not a valid number."]
[str]
[" is not a valid number."]
[dec]
[str, ., substring, (, decPos, +, 1, ,, expPos, )]
[str]
[decPos, +, 1]
[decPos]
[1]
[expPos]
[dec]
[str, ., substring, (, decPos, +, 1, )]
[str]
[decPos, +, 1]
[decPos]
[1]
[mant]
[str, ., substring, (, 0, ,, decPos, )]
[str]
[0]
[decPos]
[numDecimals]
[dec, ., length, (, )]
[dec]
[expPos, >, -, 1]
[expPos]
[-, 1]
[1]
[expPos, >, str, ., length, (, )]
[expPos]
[str, ., length, (, )]
[str]
[new, NumberFormatException, (, str, +, " is not a valid number.", )]
[str, +, " is not a valid number."]
[str]
[" is not a valid number."]
[mant]
[str, ., substring, (, 0, ,, expPos, )]
[str]
[0]
[expPos]
[mant]
[str]
[dec]
[null]
[!, Character, ., isDigit, (, lastChar, ), &&, lastChar, !=, '.']
[!, Character, ., isDigit, (, lastChar, )]
[Character, ., isDigit, (, lastChar, )]
[Character]
[lastChar]
[lastChar, !=, '.']
[lastChar]
['.']
[expPos, >, -, 1, &&, expPos, <, str, ., length, (, ), -, 1]
[expPos, >, -, 1]
[expPos]
[-, 1]
[1]
[expPos, <, str, ., length, (, ), -, 1]
[expPos]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[exp]
[str, ., substring, (, expPos, +, 1, ,, str, ., length, (, ), -, 1, )]
[str]
[expPos, +, 1]
[expPos]
[1]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[exp]
[null]
[str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, )]
[str]
[0]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[isAllZeros, (, mant, ), &&, isAllZeros, (, exp, )]
[isAllZeros, (, mant, )]
[mant]
[isAllZeros, (, exp, )]
[exp]
[lastChar]
['l']
['L']
[dec, ==, null, &&, exp, ==, null, &&, (, numeric, ., charAt, (, 0, ), ==, '-', &&, isDigits, (, numeric, ., substring, (, 1, ), ), ||, isDigits, (, numeric, ), )]
[dec, ==, null, &&, exp, ==, null]
[dec, ==, null]
[dec]
[null]
[exp, ==, null]
[exp]
[null]
[(, numeric, ., charAt, (, 0, ), ==, '-', &&, isDigits, (, numeric, ., substring, (, 1, ), ), ||, isDigits, (, numeric, ), )]
[numeric, ., charAt, (, 0, ), ==, '-', &&, isDigits, (, numeric, ., substring, (, 1, ), ), ||, isDigits, (, numeric, )]
[numeric, ., charAt, (, 0, ), ==, '-', &&, isDigits, (, numeric, ., substring, (, 1, ), )]
[numeric, ., charAt, (, 0, ), ==, '-']
[numeric, ., charAt, (, 0, )]
[numeric]
[0]
['-']
[isDigits, (, numeric, ., substring, (, 1, ), )]
[numeric, ., substring, (, 1, )]
[numeric]
[1]
[isDigits, (, numeric, )]
[numeric]
[createLong, (, numeric, )]
[numeric]
[createBigInteger, (, numeric, )]
[numeric]
[new, NumberFormatException, (, str, +, " is not a valid number.", )]
[str, +, " is not a valid number."]
[str]
[" is not a valid number."]
['f']
['F']
[NumberUtils, ., createFloat, (, numeric, )]
[NumberUtils]
[numeric]
[!, (, f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, ), )]
[(, f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, ), )]
[f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, )]
[f, ., isInfinite, (, )]
[f]
[(, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, )]
[f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros]
[f, ., floatValue, (, ), ==, 0.0F]
[f, ., floatValue, (, )]
[f]
[0.0F]
[!, allZeros]
[allZeros]
[f]
['d']
['D']
[NumberUtils, ., createDouble, (, numeric, )]
[NumberUtils]
[numeric]
[!, (, d, ., isInfinite, (, ), ||, (, d, ., floatValue, (, ), ==, 0.0D, &&, !, allZeros, ), )]
[(, d, ., isInfinite, (, ), ||, (, d, ., floatValue, (, ), ==, 0.0D, &&, !, allZeros, ), )]
[d, ., isInfinite, (, ), ||, (, d, ., floatValue, (, ), ==, 0.0D, &&, !, allZeros, )]
[d, ., isInfinite, (, )]
[d]
[(, d, ., floatValue, (, ), ==, 0.0D, &&, !, allZeros, )]
[d, ., floatValue, (, ), ==, 0.0D, &&, !, allZeros]
[d, ., floatValue, (, ), ==, 0.0D]
[d, ., floatValue, (, )]
[d]
[0.0D]
[!, allZeros]
[allZeros]
[d]
[createBigDecimal, (, numeric, )]
[numeric]
[new, NumberFormatException, (, str, +, " is not a valid number.", )]
[str, +, " is not a valid number."]
[str]
[" is not a valid number."]
[expPos, >, -, 1, &&, expPos, <, str, ., length, (, ), -, 1]
[expPos, >, -, 1]
[expPos]
[-, 1]
[1]
[expPos, <, str, ., length, (, ), -, 1]
[expPos]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[exp]
[str, ., substring, (, expPos, +, 1, ,, str, ., length, (, ), )]
[str]
[expPos, +, 1]
[expPos]
[1]
[str, ., length, (, )]
[str]
[exp]
[null]
[dec, ==, null, &&, exp, ==, null]
[dec, ==, null]
[dec]
[null]
[exp, ==, null]
[exp]
[null]
[createInteger, (, str, )]
[str]
[createLong, (, str, )]
[str]
[createBigInteger, (, str, )]
[str]
[isAllZeros, (, mant, ), &&, isAllZeros, (, exp, )]
[isAllZeros, (, mant, )]
[mant]
[isAllZeros, (, exp, )]
[exp]
[numDecimals, <=, 7]
[numDecimals]
[7]
[createFloat, (, str, )]
[str]
[!, (, f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, ), )]
[(, f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, ), )]
[f, ., isInfinite, (, ), ||, (, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, )]
[f, ., isInfinite, (, )]
[f]
[(, f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros, )]
[f, ., floatValue, (, ), ==, 0.0F, &&, !, allZeros]
[f, ., floatValue, (, ), ==, 0.0F]
[f, ., floatValue, (, )]
[f]
[0.0F]
[!, allZeros]
[allZeros]
[f]
[numDecimals, <=, 16]
[numDecimals]
[16]
[createDouble, (, str, )]
[str]
[!, (, d, ., isInfinite, (, ), ||, (, d, ., doubleValue, (, ), ==, 0.0D, &&, !, allZeros, ), )]
[(, d, ., isInfinite, (, ), ||, (, d, ., doubleValue, (, ), ==, 0.0D, &&, !, allZeros, ), )]
[d, ., isInfinite, (, ), ||, (, d, ., doubleValue, (, ), ==, 0.0D, &&, !, allZeros, )]
[d, ., isInfinite, (, )]
[d]
[(, d, ., doubleValue, (, ), ==, 0.0D, &&, !, allZeros, )]
[d, ., doubleValue, (, ), ==, 0.0D, &&, !, allZeros]
[d, ., doubleValue, (, ), ==, 0.0D]
[d, ., doubleValue, (, )]
[d]
[0.0D]
[!, allZeros]
[allZeros]
[d]
[createBigDecimal, (, str, )]
[str]
[str, ==, null]
[str]
[null]
[true]
[str, ., length, (, ), -, 1]
[str, ., length, (, )]
[str]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[str, ., charAt, (, i, ), !=, '0']
[str, ., charAt, (, i, )]
[str]
[i]
['0']
[false]
[str, ., length, (, ), >, 0]
[str, ., length, (, )]
[str]
[0]
[str, ==, null]
[str]
[null]
[null]
[Float, ., valueOf, (, str, )]
[Float]
[str]
[str, ==, null]
[str]
[null]
[null]
[Double, ., valueOf, (, str, )]
[Double]
[str]
[str, ==, null]
[str]
[null]
[null]
[Integer, ., decode, (, str, )]
[Integer]
[str]
[str, ==, null]
[str]
[null]
[null]
[Long, ., decode, (, str, )]
[Long]
[str]
[str, ==, null]
[str]
[null]
[null]
[0]
[10]
[false]
[str, ., startsWith, (, "-", )]
[str]
["-"]
[negate]
[true]
[pos]
[1]
[str, ., startsWith, (, "0x", ,, pos, ), ||, str, ., startsWith, (, "0x", ,, pos, )]
[str, ., startsWith, (, "0x", ,, pos, )]
[str]
["0x"]
[pos]
[str, ., startsWith, (, "0x", ,, pos, )]
[str]
["0x"]
[pos]
[radix]
[16]
[pos]
[2]
[str, ., startsWith, (, "#", ,, pos, )]
[str]
["#"]
[pos]
[radix]
[16]
[pos, ++]
[pos]
[str, ., startsWith, (, "0", ,, pos, ), &&, str, ., length, (, ), >, pos, +, 1]
[str, ., startsWith, (, "0", ,, pos, )]
[str]
["0"]
[pos]
[str, ., length, (, ), >, pos, +, 1]
[str, ., length, (, )]
[str]
[pos, +, 1]
[pos]
[1]
[radix]
[8]
[pos, ++]
[pos]
[new, BigInteger, (, str, ., substring, (, pos, ), ,, radix, )]
[str, ., substring, (, pos, )]
[str]
[pos]
[radix]
[negate, ?, value, ., negate, (, ), :, value]
[negate]
[value, ., negate, (, )]
[value]
[value]
[str, ==, null]
[str]
[null]
[null]
[StringUtils, ., isBlank, (, str, )]
[StringUtils]
[str]
[new, NumberFormatException, (, "A blank string is not a valid number", )]
["A blank string is not a valid number"]
[str, ., trim, (, ), ., startsWith, (, "--", )]
[str, ., trim, (, )]
[str]
["--"]
[new, NumberFormatException, (, str, +, " is not a valid number.", )]
[str, +, " is not a valid number."]
[str]
[" is not a valid number."]
[new, BigDecimal, (, str, )]
[str]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[array, [, i, ], <, min]
[array, [, i, ]]
[array]
[i]
[min]
[min]
[array, [, i, ]]
[array]
[i]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[j, <, array, ., length]
[j]
[array, ., length]
[array]
[j, ++]
[j]
[array, [, j, ], <, min]
[array, [, j, ]]
[array]
[j]
[min]
[min]
[array, [, j, ]]
[array]
[j]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[array, [, i, ], <, min]
[array, [, i, ]]
[array]
[i]
[min]
[min]
[array, [, i, ]]
[array]
[i]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[array, [, i, ], <, min]
[array, [, i, ]]
[array]
[i]
[min]
[min]
[array, [, i, ]]
[array]
[i]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[Double, ., isNaN, (, array, [, i, ], )]
[Double]
[array, [, i, ]]
[array]
[i]
[Double, ., NaN]
[Double]
[array, [, i, ], <, min]
[array, [, i, ]]
[array]
[i]
[min]
[min]
[array, [, i, ]]
[array]
[i]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[Float, ., isNaN, (, array, [, i, ], )]
[Float]
[array, [, i, ]]
[array]
[i]
[Float, ., NaN]
[Float]
[array, [, i, ], <, min]
[array, [, i, ]]
[array]
[i]
[min]
[min]
[array, [, i, ]]
[array]
[i]
[min]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[j, <, array, ., length]
[j]
[array, ., length]
[array]
[j, ++]
[j]
[array, [, j, ], >, max]
[array, [, j, ]]
[array]
[j]
[max]
[max]
[array, [, j, ]]
[array]
[j]
[max]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[j, <, array, ., length]
[j]
[array, ., length]
[array]
[j, ++]
[j]
[array, [, j, ], >, max]
[array, [, j, ]]
[array]
[j]
[max]
[max]
[array, [, j, ]]
[array]
[j]
[max]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[array, [, i, ], >, max]
[array, [, i, ]]
[array]
[i]
[max]
[max]
[array, [, i, ]]
[array]
[i]
[max]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[i, <, array, ., length]
[i]
[array, ., length]
[array]
[i, ++]
[i]
[array, [, i, ], >, max]
[array, [, i, ]]
[array]
[i]
[max]
[max]
[array, [, i, ]]
[array]
[i]
[max]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[j, <, array, ., length]
[j]
[array, ., length]
[array]
[j, ++]
[j]
[Double, ., isNaN, (, array, [, j, ], )]
[Double]
[array, [, j, ]]
[array]
[j]
[Double, ., NaN]
[Double]
[array, [, j, ], >, max]
[array, [, j, ]]
[array]
[j]
[max]
[max]
[array, [, j, ]]
[array]
[j]
[max]
[validateArray, (, array, )]
[array]
[array, [, 0, ]]
[array]
[0]
[1]
[j, <, array, ., length]
[j]
[array, ., length]
[array]
[j, ++]
[j]
[Float, ., isNaN, (, array, [, j, ], )]
[Float]
[array, [, j, ]]
[array]
[j]
[Float, ., NaN]
[Float]
[array, [, j, ], >, max]
[array, [, j, ]]
[array]
[j]
[max]
[max]
[array, [, j, ]]
[array]
[j]
[max]
[array, ==, null]
[array]
[null]
[new, IllegalArgumentException, (, "The Array must not be null", )]
["The Array must not be null"]
[Array, ., getLength, (, array, ), ==, 0]
[Array, ., getLength, (, array, )]
[Array]
[array]
[0]
[new, IllegalArgumentException, (, "Array cannot be empty.", )]
["Array cannot be empty."]
[b, <, a]
[b]
[a]
[a]
[b]
[c, <, a]
[c]
[a]
[a]
[c]
[a]
[b, <, a]
[b]
[a]
[a]
[b]
[c, <, a]
[c]
[a]
[a]
[c]
[a]
[b, <, a]
[b]
[a]
[a]
[b]
[c, <, a]
[c]
[a]
[a]
[c]
[a]
[b, <, a]
[b]
[a]
[a]
[b]
[c, <, a]
[c]
[a]
[a]
[c]
[a]
[Math, ., min, (, Math, ., min, (, a, ,, b, ), ,, c, )]
[Math]
[Math, ., min, (, a, ,, b, )]
[Math]
[a]
[b]
[c]
[Math, ., min, (, Math, ., min, (, a, ,, b, ), ,, c, )]
[Math]
[Math, ., min, (, a, ,, b, )]
[Math]
[a]
[b]
[c]
[b, >, a]
[b]
[a]
[a]
[b]
[c, >, a]
[c]
[a]
[a]
[c]
[a]
[b, >, a]
[b]
[a]
[a]
[b]
[c, >, a]
[c]
[a]
[a]
[c]
[a]
[b, >, a]
[b]
[a]
[a]
[b]
[c, >, a]
[c]
[a]
[a]
[c]
[a]
[b, >, a]
[b]
[a]
[a]
[b]
[c, >, a]
[c]
[a]
[a]
[c]
[a]
[Math, ., max, (, Math, ., max, (, a, ,, b, ), ,, c, )]
[Math]
[Math, ., max, (, a, ,, b, )]
[Math]
[a]
[b]
[c]
[Math, ., max, (, Math, ., max, (, a, ,, b, ), ,, c, )]
[Math]
[Math, ., max, (, a, ,, b, )]
[Math]
[a]
[b]
[c]
[StringUtils, ., isEmpty, (, str, )]
[StringUtils]
[str]
[false]
[0]
[i, <, str, ., length, (, )]
[i]
[str, ., length, (, )]
[str]
[i, ++]
[i]
[!, Character, ., isDigit, (, str, ., charAt, (, i, ), )]
[Character, ., isDigit, (, str, ., charAt, (, i, ), )]
[Character]
[str, ., charAt, (, i, )]
[str]
[i]
[false]
[true]
[StringUtils, ., isEmpty, (, str, )]
[StringUtils]
[str]
[false]
[str, ., toCharArray, (, )]
[str]
[chars, ., length]
[chars]
[false]
[false]
[false]
[false]
[(, chars, [, 0, ], ==, '-', ), ?, 1, :, 0]
[(, chars, [, 0, ], ==, '-', )]
[chars, [, 0, ], ==, '-']
[chars, [, 0, ]]
[chars]
[0]
['-']
[1]
[0]
[sz, >, start, +, 1, &&, chars, [, start, ], ==, '0', &&, chars, [, start, +, 1, ], ==, 'x']
[sz, >, start, +, 1, &&, chars, [, start, ], ==, '0']
[sz, >, start, +, 1]
[sz]
[start, +, 1]
[start]
[1]
[chars, [, start, ], ==, '0']
[chars, [, start, ]]
[chars]
[start]
['0']
[chars, [, start, +, 1, ], ==, 'x']
[chars, [, start, +, 1, ]]
[chars]
[start, +, 1]
[start]
[1]
['x']
[start, +, 2]
[start]
[2]
[i, ==, sz]
[i]
[sz]
[false]
[i, <, chars, ., length]
[i]
[chars, ., length]
[chars]
[i, ++]
[i]
[(, chars, [, i, ], <, '0', ||, chars, [, i, ], >, '9', ), &&, (, chars, [, i, ], <, 'a', ||, chars, [, i, ], >, 'f', ), &&, (, chars, [, i, ], <, 'A', ||, chars, [, i, ], >, 'F', )]
[(, chars, [, i, ], <, '0', ||, chars, [, i, ], >, '9', ), &&, (, chars, [, i, ], <, 'a', ||, chars, [, i, ], >, 'f', )]
[(, chars, [, i, ], <, '0', ||, chars, [, i, ], >, '9', )]
[chars, [, i, ], <, '0', ||, chars, [, i, ], >, '9']
[chars, [, i, ], <, '0']
[chars, [, i, ]]
[chars]
[i]
['0']
[chars, [, i, ], >, '9']
[chars, [, i, ]]
[chars]
[i]
['9']
[(, chars, [, i, ], <, 'a', ||, chars, [, i, ], >, 'f', )]
[chars, [, i, ], <, 'a', ||, chars, [, i, ], >, 'f']
[chars, [, i, ], <, 'a']
[chars, [, i, ]]
[chars]
[i]
['a']
[chars, [, i, ], >, 'f']
[chars, [, i, ]]
[chars]
[i]
['f']
[(, chars, [, i, ], <, 'A', ||, chars, [, i, ], >, 'F', )]
[chars, [, i, ], <, 'A', ||, chars, [, i, ], >, 'F']
[chars, [, i, ], <, 'A']
[chars, [, i, ]]
[chars]
[i]
['A']
[chars, [, i, ], >, 'F']
[chars, [, i, ]]
[chars]
[i]
['F']
[false]
[true]
[sz, --]
[sz]
[start]
[i, <, sz, ||, (, i, <, sz, +, 1, &&, allowSigns, &&, !, foundDigit, )]
[i, <, sz]
[i]
[sz]
[(, i, <, sz, +, 1, &&, allowSigns, &&, !, foundDigit, )]
[i, <, sz, +, 1, &&, allowSigns, &&, !, foundDigit]
[i, <, sz, +, 1, &&, allowSigns]
[i, <, sz, +, 1]
[i]
[sz, +, 1]
[sz]
[1]
[allowSigns]
[!, foundDigit]
[foundDigit]
[chars, [, i, ], >=, '0', &&, chars, [, i, ], <=, '9']
[chars, [, i, ], >=, '0']
[chars, [, i, ]]
[chars]
[i]
['0']
[chars, [, i, ], <=, '9']
[chars, [, i, ]]
[chars]
[i]
['9']
[foundDigit]
[true]
[allowSigns]
[false]
[chars, [, i, ], ==, '.']
[chars, [, i, ]]
[chars]
[i]
['.']
[hasDecPoint, ||, hasExp]
[hasDecPoint]
[hasExp]
[false]
[hasDecPoint]
[true]
[chars, [, i, ], ==, 'e', ||, chars, [, i, ], ==, 'E']
[chars, [, i, ], ==, 'e']
[chars, [, i, ]]
[chars]
[i]
['e']
[chars, [, i, ], ==, 'E']
[chars, [, i, ]]
[chars]
[i]
['E']
[hasExp]
[false]
[!, foundDigit]
[foundDigit]
[false]
[hasExp]
[true]
[allowSigns]
[true]
[chars, [, i, ], ==, '+', ||, chars, [, i, ], ==, '-']
[chars, [, i, ], ==, '+']
[chars, [, i, ]]
[chars]
[i]
['+']
[chars, [, i, ], ==, '-']
[chars, [, i, ]]
[chars]
[i]
['-']
[!, allowSigns]
[allowSigns]
[false]
[allowSigns]
[false]
[foundDigit]
[false]
[false]
[i, ++]
[i]
[i, <, chars, ., length]
[i]
[chars, ., length]
[chars]
[chars, [, i, ], >=, '0', &&, chars, [, i, ], <=, '9']
[chars, [, i, ], >=, '0']
[chars, [, i, ]]
[chars]
[i]
['0']
[chars, [, i, ], <=, '9']
[chars, [, i, ]]
[chars]
[i]
['9']
[true]
[chars, [, i, ], ==, 'e', ||, chars, [, i, ], ==, 'E']
[chars, [, i, ], ==, 'e']
[chars, [, i, ]]
[chars]
[i]
['e']
[chars, [, i, ], ==, 'E']
[chars, [, i, ]]
[chars]
[i]
['E']
[false]
[chars, [, i, ], ==, '.']
[chars, [, i, ]]
[chars]
[i]
['.']
[hasDecPoint, ||, hasExp]
[hasDecPoint]
[hasExp]
[false]
[foundDigit]
[!, allowSigns, &&, (, chars, [, i, ], ==, 'd', ||, chars, [, i, ], ==, 'D', ||, chars, [, i, ], ==, 'f', ||, chars, [, i, ], ==, 'F', )]
[!, allowSigns]
[allowSigns]
[(, chars, [, i, ], ==, 'd', ||, chars, [, i, ], ==, 'D', ||, chars, [, i, ], ==, 'f', ||, chars, [, i, ], ==, 'F', )]
[chars, [, i, ], ==, 'd', ||, chars, [, i, ], ==, 'D', ||, chars, [, i, ], ==, 'f', ||, chars, [, i, ], ==, 'F']
[chars, [, i, ], ==, 'd', ||, chars, [, i, ], ==, 'D', ||, chars, [, i, ], ==, 'f']
[chars, [, i, ], ==, 'd', ||, chars, [, i, ], ==, 'D']
[chars, [, i, ], ==, 'd']
[chars, [, i, ]]
[chars]
[i]
['d']
[chars, [, i, ], ==, 'D']
[chars, [, i, ]]
[chars]
[i]
['D']
[chars, [, i, ], ==, 'f']
[chars, [, i, ]]
[chars]
[i]
['f']
[chars, [, i, ], ==, 'F']
[chars, [, i, ]]
[chars]
[i]
['F']
[foundDigit]
[chars, [, i, ], ==, 'l', ||, chars, [, i, ], ==, 'L']
[chars, [, i, ], ==, 'l']
[chars, [, i, ]]
[chars]
[i]
['l']
[chars, [, i, ], ==, 'L']
[chars, [, i, ]]
[chars]
[i]
['L']
[foundDigit, &&, !, hasExp, &&, !, hasDecPoint]
[foundDigit, &&, !, hasExp]
[foundDigit]
[!, hasExp]
[hasExp]
[!, hasDecPoint]
[hasDecPoint]
[false]
[!, allowSigns, &&, foundDigit]
[!, allowSigns]
[allowSigns]
[foundDigit]
