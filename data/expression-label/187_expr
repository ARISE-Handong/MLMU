[options, ., length, >, 0]
[options, ., length]
[options]
[0]
[this, ., options]
[this]
[EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), )]
[EnumSet]
[Arrays, ., asList, (, options, )]
[Arrays]
[options]
[this, ., options]
[this]
[EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }, ), )]
[EnumSet]
[Arrays, ., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }, )]
[Arrays]
[new, OPTION, [, ], {, OPTION, ., semiColonRequired, }]
[{, OPTION, ., semiColonRequired, }]
[OPTION, ., semiColonRequired]
[OPTION]
[options, ==, null, ?, false, :, options, ., contains, (, option, )]
[options, ==, null]
[options]
[null]
[false]
[options, ., contains, (, option, )]
[options]
[option]
[input, ., length, (, )]
[input]
[input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#']
[input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2]
[input, ., charAt, (, index, ), ==, '&']
[input, ., charAt, (, index, )]
[input]
[index]
['&']
[index, <, seqEnd, -, 2]
[index]
[seqEnd, -, 2]
[seqEnd]
[2]
[input, ., charAt, (, index, +, 1, ), ==, '#']
[input, ., charAt, (, index, +, 1, )]
[input]
[index, +, 1]
[index]
[1]
['#']
[index, +, 2]
[index]
[2]
[false]
[input, ., charAt, (, start, )]
[input]
[start]
[firstChar, ==, 'x', ||, firstChar, ==, 'X']
[firstChar, ==, 'x']
[firstChar]
['x']
[firstChar, ==, 'X']
[firstChar]
['X']
[start, ++]
[start]
[isHex]
[true]
[start, ==, seqEnd]
[start]
[seqEnd]
[0]
[start]
[end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', )]
[end, <, seqEnd]
[end]
[seqEnd]
[(, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', )]
[input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F']
[input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f']
[input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9']
[input, ., charAt, (, end, ), >=, '0']
[input, ., charAt, (, end, )]
[input]
[end]
['0']
[input, ., charAt, (, end, ), <=, '9']
[input, ., charAt, (, end, )]
[input]
[end]
['9']
[input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f']
[input, ., charAt, (, end, ), >=, 'a']
[input, ., charAt, (, end, )]
[input]
[end]
['a']
[input, ., charAt, (, end, ), <=, 'f']
[input, ., charAt, (, end, )]
[input]
[end]
['f']
[input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F']
[input, ., charAt, (, end, ), >=, 'A']
[input, ., charAt, (, end, )]
[input]
[end]
['A']
[input, ., charAt, (, end, ), <=, 'F']
[input, ., charAt, (, end, )]
[input]
[end]
['F']
[end, ++]
[end]
[end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';']
[end, !=, seqEnd]
[end]
[seqEnd]
[input, ., charAt, (, end, ), ==, ';']
[input, ., charAt, (, end, )]
[input]
[end]
[';']
[!, semiNext]
[semiNext]
[isSet, (, OPTION, ., semiColonRequired, )]
[OPTION, ., semiColonRequired]
[OPTION]
[0]
[isSet, (, OPTION, ., errorIfNoSemiColon, )]
[OPTION, ., errorIfNoSemiColon]
[OPTION]
[new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", )]
["Semi-colon required at end of numeric entity"]
[isHex]
[entityValue]
[Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, )]
[Integer]
[input, ., subSequence, (, start, ,, end, ), ., toString, (, )]
[input, ., subSequence, (, start, ,, end, )]
[input]
[start]
[end]
[16]
[entityValue]
[Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, )]
[Integer]
[input, ., subSequence, (, start, ,, end, ), ., toString, (, )]
[input, ., subSequence, (, start, ,, end, )]
[input]
[start]
[end]
[10]
[0]
[entityValue, >, 0xFFFF]
[entityValue]
[0xFFFF]
[Character, ., toChars, (, entityValue, )]
[Character]
[entityValue]
[out, ., write, (, chrs, [, 0, ], )]
[out]
[chrs, [, 0, ]]
[chrs]
[0]
[out, ., write, (, chrs, [, 1, ], )]
[out]
[chrs, [, 1, ]]
[chrs]
[1]
[out, ., write, (, entityValue, )]
[out]
[entityValue]
[2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, )]
[2, +, end, -, start, +, (, isHex, ?, 1, :, 0, )]
[2, +, end, -, start]
[2, +, end]
[2]
[end]
[start]
[(, isHex, ?, 1, :, 0, )]
[isHex, ?, 1, :, 0]
[isHex]
[1]
[0]
[(, semiNext, ?, 1, :, 0, )]
[semiNext, ?, 1, :, 0]
[semiNext]
[1]
[0]
[0]
