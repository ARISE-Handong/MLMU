[true]
[Lists, ., newArrayList, (, )]
[Lists]
["{0}\n", +, "found   : {1}\n", +, "required: {2}"]
["{0}\n", +, "found   : {1}\n"]
["{0}\n"]
["found   : {1}\n"]
["required: {2}"]
[DiagnosticType, ., disabled, (, "JSC_INVALID_CAST", ,, "invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}", )]
[DiagnosticType]
["JSC_INVALID_CAST"]
["invalid cast - must be a subtype or supertype\n", +, "from: {0}\n", +, "to  : {1}"]
["invalid cast - must be a subtype or supertype\n", +, "from: {0}\n"]
["invalid cast - must be a subtype or supertype\n"]
["from: {0}\n"]
["to  : {1}"]
[DiagnosticType, ., warning, (, "JSC_TYPE_MISMATCH", ,, "{0}", )]
[DiagnosticType]
["JSC_TYPE_MISMATCH"]
["{0}"]
[DiagnosticType, ., warning, (, "JSC_MISSING_EXTENDS_TAG", ,, "Missing @extends tag on type {0}", )]
[DiagnosticType]
["JSC_MISSING_EXTENDS_TAG"]
["Missing @extends tag on type {0}"]
[DiagnosticType, ., warning, (, "JSC_DUP_VAR_DECLARATION", ,, "variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}", )]
[DiagnosticType]
["JSC_DUP_VAR_DECLARATION"]
["variable {0} redefined with type {1}, ", +, "original definition at {2}:{3} with type {4}"]
["variable {0} redefined with type {1}, "]
["original definition at {2}:{3} with type {4}"]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", )]
[DiagnosticType]
["JSC_HIDDEN_PROPERTY_MISMATCH"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n"]
["mismatch of the {0} property type and the type "]
["of the property it overrides from superclass {1}\n"]
["original: {2}\n"]
["override: {3}"]
[DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", ,, "property {0} on interface {1} is not implemented by type {2}", )]
[DiagnosticType]
["JSC_INTERFACE_METHOD_NOT_IMPLEMENTED"]
["property {0} on interface {1} is not implemented by type {2}"]
[DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}", )]
[DiagnosticType]
["JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n", +, "override: {3}"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n", +, "original: {2}\n"]
["mismatch of the {0} property type and the type ", +, "of the property it overrides from interface {1}\n"]
["mismatch of the {0} property type and the type "]
["of the property it overrides from interface {1}\n"]
["original: {2}\n"]
["override: {3}"]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_TYPEOF_VALUE", ,, "unknown type: {0}", )]
[DiagnosticType]
["JSC_UNKNOWN_TYPEOF_VALUE"]
["unknown type: {0}"]
[DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_ACCESS", ,, "Cannot do {0} access on a {1}", )]
[DiagnosticType]
["JSC_ILLEGAL_PROPERTY_ACCESS"]
["Cannot do {0} access on a {1}"]
[new, DiagnosticGroup, (, INVALID_CAST, ,, TYPE_MISMATCH_WARNING, ,, MISSING_EXTENDS_TAG_WARNING, ,, DUP_VAR_DECLARATION, ,, HIDDEN_PROPERTY_MISMATCH, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, UNKNOWN_TYPEOF_VALUE, ,, ILLEGAL_PROPERTY_ACCESS, )]
[INVALID_CAST]
[TYPE_MISMATCH_WARNING]
[MISSING_EXTENDS_TAG_WARNING]
[DUP_VAR_DECLARATION]
[HIDDEN_PROPERTY_MISMATCH]
[INTERFACE_METHOD_NOT_IMPLEMENTED]
[HIDDEN_INTERFACE_PROPERTY_MISMATCH]
[UNKNOWN_TYPEOF_VALUE]
[ILLEGAL_PROPERTY_ACCESS]
[this, ., compiler]
[this]
[compiler]
[this, ., typeRegistry]
[this]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[this, ., allValueTypes]
[this]
[typeRegistry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, ,, BOOLEAN_TYPE, ,, NULL_TYPE, ,, VOID_TYPE, )]
[typeRegistry]
[STRING_TYPE]
[NUMBER_TYPE]
[BOOLEAN_TYPE]
[NULL_TYPE]
[VOID_TYPE]
[this, ., nullOrUndefined]
[this]
[typeRegistry, ., createUnionType, (, NULL_TYPE, ,, VOID_TYPE, )]
[typeRegistry]
[NULL_TYPE]
[VOID_TYPE]
[mismatches]
[this, ., shouldReport]
[this]
[report]
[report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, UNKNOWN_TYPEOF_VALUE, ,, found, ), )]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, UNKNOWN_TYPEOF_VALUE, ,, found, )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[n]
[UNKNOWN_TYPEOF_VALUE]
[found]
[!, type, ., matchesObjectContext, (, )]
[type, ., matchesObjectContext, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, )]
[t]
[n]
[msg]
[type]
[OBJECT_TYPE]
[false]
[true]
[!, type, ., isObject, (, )]
[type, ., isObject, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, OBJECT_TYPE, )]
[t]
[n]
[msg]
[type]
[OBJECT_TYPE]
[getNativeType, (, NO_OBJECT_TYPE, )]
[NO_OBJECT_TYPE]
[!, anyObjectType, ., isSubtype, (, type, ), &&, !, type, ., isEmptyType, (, )]
[!, anyObjectType, ., isSubtype, (, type, )]
[anyObjectType, ., isSubtype, (, type, )]
[anyObjectType]
[type]
[!, type, ., isEmptyType, (, )]
[type, ., isEmptyType, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, anyObjectType, )]
[t]
[n]
[msg]
[type]
[anyObjectType]
[!, type, ., matchesStringContext, (, )]
[type, ., matchesStringContext, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, STRING_TYPE, )]
[t]
[n]
[msg]
[type]
[STRING_TYPE]
[!, type, ., matchesNumberContext, (, )]
[type, ., matchesNumberContext, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_TYPE, )]
[t]
[n]
[msg]
[type]
[NUMBER_TYPE]
[!, type, ., matchesNumberContext, (, ), &&, !, type, ., isSubtype, (, allValueTypes, )]
[!, type, ., matchesNumberContext, (, )]
[type, ., matchesNumberContext, (, )]
[type]
[!, type, ., isSubtype, (, allValueTypes, )]
[type, ., isSubtype, (, allValueTypes, )]
[type]
[allValueTypes]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, allValueTypes, )]
[t]
[n]
[msg]
[type]
[allValueTypes]
[!, type, ., matchesNumberContext, (, ), &&, !, type, ., matchesStringContext, (, )]
[!, type, ., matchesNumberContext, (, )]
[type, ., matchesNumberContext, (, )]
[type]
[!, type, ., matchesStringContext, (, )]
[type, ., matchesStringContext, (, )]
[type]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, NUMBER_STRING, )]
[t]
[n]
[msg]
[type]
[NUMBER_STRING]
[!, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, ), &&, !, containsForwardDeclaredUnresolvedName, (, type, )]
[!, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, ), &&, type, ., isSubtype, (, nullOrUndefined, )]
[!, type, ., isNoType, (, ), &&, !, type, ., isUnknownType, (, )]
[!, type, ., isNoType, (, )]
[type, ., isNoType, (, )]
[type]
[!, type, ., isUnknownType, (, )]
[type, ., isUnknownType, (, )]
[type]
[type, ., isSubtype, (, nullOrUndefined, )]
[type]
[nullOrUndefined]
[!, containsForwardDeclaredUnresolvedName, (, type, )]
[containsForwardDeclaredUnresolvedName, (, type, )]
[type]
[n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, ), &&, type, ., isNullType, (, )]
[n, ., isGetProp, (, ), &&, !, t, ., inGlobalScope, (, )]
[n, ., isGetProp, (, )]
[n]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[type, ., isNullType, (, )]
[type]
[true]
[mismatch, (, t, ,, n, ,, msg, ,, type, ,, expectedType, )]
[t]
[n]
[msg]
[type]
[expectedType]
[false]
[true]
[type, ., isUnionType, (, )]
[type]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[containsForwardDeclaredUnresolvedName, (, alt, )]
[alt]
[true]
[type, ., isNoResolvedType, (, )]
[type]
[!, switchType, ., canTestForShallowEqualityWith, (, caseType, ), &&, (, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), )]
[!, switchType, ., canTestForShallowEqualityWith, (, caseType, )]
[switchType, ., canTestForShallowEqualityWith, (, caseType, )]
[switchType]
[caseType]
[(, caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, ), )]
[caseType, ., autoboxesTo, (, ), ==, null, ||, !, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, )]
[caseType, ., autoboxesTo, (, ), ==, null]
[caseType, ., autoboxesTo, (, )]
[caseType]
[null]
[!, caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, )]
[caseType, ., autoboxesTo, (, ), ., isSubtype, (, switchType, )]
[caseType, ., autoboxesTo, (, )]
[caseType]
[switchType]
[mismatch, (, t, ,, n, ., getFirstChild, (, ), ,, "case expression doesn't match switch", ,, caseType, ,, switchType, )]
[t]
[n, ., getFirstChild, (, )]
[n]
["case expression doesn't match switch"]
[caseType]
[switchType]
[Preconditions, ., checkState, (, n, ., isGetElem, (, ), )]
[Preconditions]
[n, ., isGetElem, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[objType, ., isStruct, (, )]
[objType]
[report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", ), )]
[JSError, ., make, (, t, ., getSourceName, (, ), ,, indexNode, ,, ILLEGAL_PROPERTY_ACCESS, ,, "'[]'", ,, "struct", )]
[JSError]
[t, ., getSourceName, (, )]
[t]
[indexNode]
[ILLEGAL_PROPERTY_ACCESS]
["'[]'"]
["struct"]
[objType, ., isUnknownType, (, )]
[objType]
[expectStringOrNumber, (, t, ,, indexNode, ,, indexType, ,, "property access", )]
[t]
[indexNode]
[indexType]
["property access"]
[objType, ., dereference, (, )]
[objType]
[dereferenced, !=, null, &&, dereferenced, ., getIndexType, (, ), !=, null]
[dereferenced, !=, null]
[dereferenced]
[null]
[dereferenced, ., getIndexType, (, ), !=, null]
[dereferenced, ., getIndexType, (, )]
[dereferenced]
[null]
[expectCanAssignTo, (, t, ,, indexNode, ,, indexType, ,, dereferenced, ., getIndexType, (, ), ,, "restricted index type", )]
[t]
[indexNode]
[indexType]
[dereferenced, ., getIndexType, (, )]
[dereferenced]
["restricted index type"]
[dereferenced, !=, null, &&, dereferenced, ., isArrayType, (, )]
[dereferenced, !=, null]
[dereferenced]
[null]
[dereferenced, ., isArrayType, (, )]
[dereferenced]
[expectNumber, (, t, ,, indexNode, ,, indexType, ,, "array access", )]
[t]
[indexNode]
[indexType]
["array access"]
[objType, ., matchesObjectContext, (, )]
[objType]
[expectString, (, t, ,, indexNode, ,, indexType, ,, "property access", )]
[t]
[indexNode]
[indexType]
["property access"]
[mismatch, (, t, ,, n, ,, "only arrays or objects can be accessed", ,, objType, ,, typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, ), )]
[t]
[n]
["only arrays or objects can be accessed"]
[objType]
[typeRegistry, ., createUnionType, (, ARRAY_TYPE, ,, OBJECT_TYPE, )]
[typeRegistry]
[ARRAY_TYPE]
[OBJECT_TYPE]
[!, leftType, ., isNoType, (, ), &&, !, rightType, ., isSubtype, (, leftType, )]
[!, leftType, ., isNoType, (, )]
[leftType, ., isNoType, (, )]
[leftType]
[!, rightType, ., isSubtype, (, leftType, )]
[rightType, ., isSubtype, (, leftType, )]
[rightType]
[leftType]
[getJSType, (, owner, )]
[owner]
[ownerType, ., isFunctionPrototypeType, (, )]
[ownerType]
[ownerType, ., toObjectType, (, ), ., getOwnerFunction, (, )]
[ownerType, ., toObjectType, (, )]
[ownerType]
[ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, ), &&, leftType, ., isFunctionType, (, )]
[ownerFn, ., isInterface, (, ), &&, rightType, ., isFunctionType, (, )]
[ownerFn, ., isInterface, (, )]
[ownerFn]
[rightType, ., isFunctionType, (, )]
[rightType]
[leftType, ., isFunctionType, (, )]
[leftType]
[true]
[mismatch, (, t, ,, n, ,, "assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, ), ,, rightType, ,, leftType, )]
[t]
[n]
["assignment to property ", +, propName, +, " of ", +, getReadableJSTypeName, (, owner, ,, true, )]
["assignment to property ", +, propName, +, " of "]
["assignment to property ", +, propName]
["assignment to property "]
[propName]
[" of "]
[getReadableJSTypeName, (, owner, ,, true, )]
[owner]
[true]
[rightType]
[leftType]
[false]
[true]
[!, rightType, ., isSubtype, (, leftType, )]
[rightType, ., isSubtype, (, leftType, )]
[rightType]
[leftType]
[mismatch, (, t, ,, n, ,, msg, ,, rightType, ,, leftType, )]
[t]
[n]
[msg]
[rightType]
[leftType]
[false]
[true]
[!, argType, ., isSubtype, (, paramType, )]
[argType, ., isSubtype, (, paramType, )]
[argType]
[paramType]
[mismatch, (, t, ,, n, ,, String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), ), ,, argType, ,, paramType, )]
[t]
[n]
[String, ., format, (, "actual parameter %d of %s does not match ", +, "formal parameter", ,, ordinal, ,, getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, ), )]
[String]
["actual parameter %d of %s does not match ", +, "formal parameter"]
["actual parameter %d of %s does not match "]
["formal parameter"]
[ordinal]
[getReadableJSTypeName, (, callNode, ., getFirstChild, (, ), ,, false, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[false]
[argType]
[paramType]
[!, overridingType, ., isSubtype, (, hiddenType, )]
[overridingType, ., isSubtype, (, hiddenType, )]
[overridingType]
[hiddenType]
[registerMismatch, (, overridingType, ,, hiddenType, ,, report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), ), ), )]
[overridingType]
[hiddenType]
[report, (, t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), ), )]
[t, ., makeError, (, n, ,, HIDDEN_PROPERTY_MISMATCH, ,, propertyName, ,, ownerType, ., toString, (, ), ,, hiddenType, ., toString, (, ), ,, overridingType, ., toString, (, ), )]
[t]
[n]
[HIDDEN_PROPERTY_MISMATCH]
[propertyName]
[ownerType, ., toString, (, )]
[ownerType]
[hiddenType, ., toString, (, )]
[hiddenType]
[overridingType, ., toString, (, )]
[overridingType]
[subObject, ., getConstructor, (, )]
[subObject]
[subObject, ., getImplicitPrototype, (, )]
[subObject]
[implicitProto, ==, null, ?, null, :, implicitProto, ., getImplicitPrototype, (, )]
[implicitProto, ==, null]
[implicitProto]
[null]
[null]
[implicitProto, ., getImplicitPrototype, (, )]
[implicitProto]
[declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, ), &&, !, declaredSuper, ., isEquivalentTo, (, superObject, )]
[declaredSuper, !=, null, &&, !, (, superObject, instanceof, UnknownType, )]
[declaredSuper, !=, null]
[declaredSuper]
[null]
[!, (, superObject, instanceof, UnknownType, )]
[(, superObject, instanceof, UnknownType, )]
[superObject, instanceof, UnknownType]
[superObject]
[!, declaredSuper, ., isEquivalentTo, (, superObject, )]
[declaredSuper, ., isEquivalentTo, (, superObject, )]
[declaredSuper]
[superObject]
[declaredSuper, ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), )]
[declaredSuper]
[getNativeType, (, OBJECT_TYPE, )]
[OBJECT_TYPE]
[registerMismatch, (, superObject, ,, declaredSuper, ,, report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), ), )]
[superObject]
[declaredSuper]
[report, (, t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), ), )]
[t, ., makeError, (, n, ,, MISSING_EXTENDS_TAG_WARNING, ,, subObject, ., toString, (, ), )]
[t]
[n]
[MISSING_EXTENDS_TAG_WARNING]
[subObject, ., toString, (, )]
[subObject]
[mismatch, (, t, ., getSourceName, (, ), ,, n, ,, "mismatch in declaration of superclass type", ,, superObject, ,, declaredSuper, )]
[t, ., getSourceName, (, )]
[t]
[n]
["mismatch in declaration of superclass type"]
[superObject]
[declaredSuper]
[!, subCtor, ., hasCachedValues, (, )]
[subCtor, ., hasCachedValues, (, )]
[subCtor]
[subCtor, ., setPrototypeBasedOn, (, superObject, )]
[subCtor]
[superObject]
[!, type, ., canCastTo, (, castType, )]
[type, ., canCastTo, (, castType, )]
[type]
[castType]
[registerMismatch, (, type, ,, castType, ,, report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString, (, ), ), ), )]
[type]
[castType]
[report, (, t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString, (, ), ), )]
[t, ., makeError, (, n, ,, INVALID_CAST, ,, type, ., toString, (, ), ,, castType, ., toString, (, ), )]
[t]
[n]
[INVALID_CAST]
[type, ., toString, (, )]
[type]
[castType, ., toString, (, )]
[castType]
[var]
[false]
[n, ., isGetProp, (, ), ||, NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[n, ., isGetProp, (, )]
[n]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[n, ., getJSDocInfo, (, )]
[n]
[info, ==, null]
[info]
[null]
[info]
[parent, ., getJSDocInfo, (, )]
[parent]
[allowDupe]
[info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, !=, null]
[info]
[null]
[info, ., getSuppressions, (, ), ., contains, (, "duplicate", )]
[info, ., getSuppressions, (, )]
[info]
["duplicate"]
[var, ., getType, (, )]
[var]
[varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null, &&, newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), &&, newType, !=, null]
[varType, !=, null, &&, varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[varType, !=, null]
[varType]
[null]
[varType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[varType]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[newType, !=, null]
[newType]
[null]
[newType, !=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[newType]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[var, ., input, ==, null]
[var, ., input]
[var]
[null]
[var, ., getScope, (, )]
[var]
[s, ., undeclare, (, var, )]
[s]
[var]
[newVar]
[s, ., declare, (, variableName, ,, n, ,, varType, ,, input, ,, false, )]
[s]
[variableName]
[n]
[varType]
[input]
[false]
[n, ., setJSType, (, varType, )]
[n]
[varType]
[parent, ., isVar, (, )]
[parent]
[n, ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, )]
[n]
[null]
[n, ., getFirstChild, (, ), ., setJSType, (, varType, )]
[n, ., getFirstChild, (, )]
[n]
[varType]
[Preconditions, ., checkState, (, parent, ., isFunction, (, ), )]
[Preconditions]
[parent, ., isFunction, (, )]
[parent]
[parent, ., setJSType, (, varType, )]
[parent]
[varType]
[!, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), ), ||, !, newType, ., isEquivalentTo, (, varType, )]
[!, (, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), )]
[(, allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, ), )]
[allowDupe, ||, var, ., getParentNode, (, ), ., isExprResult, (, )]
[allowDupe]
[var, ., getParentNode, (, ), ., isExprResult, (, )]
[var, ., getParentNode, (, )]
[var]
[!, newType, ., isEquivalentTo, (, varType, )]
[newType, ., isEquivalentTo, (, varType, )]
[newType]
[varType]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), ), )]
[JSError, ., make, (, sourceName, ,, n, ,, DUP_VAR_DECLARATION, ,, variableName, ,, newType, ., toString, (, ), ,, var, ., getInputName, (, ), ,, String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), ), ,, varType, ., toString, (, ), )]
[JSError]
[sourceName]
[n]
[DUP_VAR_DECLARATION]
[variableName]
[newType, ., toString, (, )]
[newType]
[var, ., getInputName, (, )]
[var]
[String, ., valueOf, (, var, ., nameNode, ., getLineno, (, ), )]
[String]
[var, ., nameNode, ., getLineno, (, )]
[var, ., nameNode]
[var]
[varType, ., toString, (, )]
[varType]
[newVar]
[type, ., getInstanceType, (, )]
[type]
[type, ., getAllImplementedInterfaces, (, )]
[type]
[implemented, ., getImplicitPrototype, (, ), !=, null]
[implemented, ., getImplicitPrototype, (, )]
[implemented]
[null]
[implemented, ., getImplicitPrototype, (, ), ., getOwnPropertyNames, (, )]
[implemented, ., getImplicitPrototype, (, )]
[implemented]
[expectInterfaceProperty, (, t, ,, n, ,, instance, ,, implemented, ,, prop, )]
[t]
[n]
[instance]
[implemented]
[prop]
[instance, ., getSlot, (, prop, )]
[instance]
[prop]
[propSlot, ==, null]
[propSlot]
[null]
[n, ., getSourceFileName, (, )]
[n]
[sourceName]
[sourceName, ==, null, ?, "", :, sourceName]
[sourceName, ==, null]
[sourceName]
[null]
[""]
[sourceName]
[registerMismatch, (, instance, ,, implementedInterface, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), ), )]
[instance]
[implementedInterface]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), ), )]
[JSError, ., make, (, sourceName, ,, n, ,, INTERFACE_METHOD_NOT_IMPLEMENTED, ,, prop, ,, implementedInterface, ., toString, (, ), ,, instance, ., toString, (, ), )]
[JSError]
[sourceName]
[n]
[INTERFACE_METHOD_NOT_IMPLEMENTED]
[prop]
[implementedInterface, ., toString, (, )]
[implementedInterface]
[instance, ., toString, (, )]
[instance]
[propSlot, ., getDeclaration, (, ), ==, null, ?, null, :, propSlot, ., getDeclaration, (, ), ., getNode, (, )]
[propSlot, ., getDeclaration, (, ), ==, null]
[propSlot, ., getDeclaration, (, )]
[propSlot]
[null]
[null]
[propSlot, ., getDeclaration, (, ), ., getNode, (, )]
[propSlot, ., getDeclaration, (, )]
[propSlot]
[propNode]
[propNode, ==, null, ?, n, :, propNode]
[propNode, ==, null]
[propNode]
[null]
[n]
[propNode]
[propSlot, ., getType, (, )]
[propSlot]
[implementedInterface, ., getImplicitPrototype, (, ), ., getPropertyType, (, prop, )]
[implementedInterface, ., getImplicitPrototype, (, )]
[implementedInterface]
[prop]
[found]
[found, ., restrictByNotNullOrUndefined, (, )]
[found]
[required]
[required, ., restrictByNotNullOrUndefined, (, )]
[required]
[!, found, ., isSubtype, (, required, )]
[found, ., isSubtype, (, required, )]
[found]
[required]
[implementedInterface, ., toObjectType, (, ), ., getConstructor, (, )]
[implementedInterface, ., toObjectType, (, )]
[implementedInterface]
[registerMismatch, (, found, ,, required, ,, report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (, ), ), ), )]
[found]
[required]
[report, (, t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (, ), ), )]
[t, ., makeError, (, propNode, ,, HIDDEN_INTERFACE_PROPERTY_MISMATCH, ,, prop, ,, constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, ), ,, required, ., toString, (, ), ,, found, ., toString, (, ), )]
[t]
[propNode]
[HIDDEN_INTERFACE_PROPERTY_MISMATCH]
[prop]
[constructor, ., getTopMostDefiningType, (, prop, ), ., toString, (, )]
[constructor, ., getTopMostDefiningType, (, prop, )]
[constructor]
[prop]
[required, ., toString, (, )]
[required]
[found, ., toString, (, )]
[found]
[mismatch, (, t, ., getSourceName, (, ), ,, n, ,, msg, ,, found, ,, required, )]
[t, ., getSourceName, (, )]
[t]
[n]
[msg]
[found]
[required]
[mismatch, (, t, ,, n, ,, msg, ,, found, ,, getNativeType, (, required, ), )]
[t]
[n]
[msg]
[found]
[getNativeType, (, required, )]
[required]
[registerMismatch, (, found, ,, required, ,, report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), ), )]
[found]
[required]
[report, (, JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), ), )]
[JSError, ., make, (, sourceName, ,, n, ,, TYPE_MISMATCH_WARNING, ,, formatFoundRequired, (, msg, ,, found, ,, required, ), )]
[JSError]
[sourceName]
[n]
[TYPE_MISMATCH_WARNING]
[formatFoundRequired, (, msg, ,, found, ,, required, )]
[msg]
[found]
[required]
[found]
[found, ., restrictByNotNullOrUndefined, (, )]
[found]
[required]
[required, ., restrictByNotNullOrUndefined, (, )]
[required]
[found, ., isSubtype, (, required, ), ||, required, ., isSubtype, (, found, )]
[found, ., isSubtype, (, required, )]
[found]
[required]
[required, ., isSubtype, (, found, )]
[required]
[found]
[mismatches, ., add, (, new, TypeMismatch, (, found, ,, required, ,, error, ), )]
[mismatches]
[new, TypeMismatch, (, found, ,, required, ,, error, )]
[found]
[required]
[error]
[found, ., isFunctionType, (, ), &&, required, ., isFunctionType, (, )]
[found, ., isFunctionType, (, )]
[found]
[required, ., isFunctionType, (, )]
[required]
[found, ., toMaybeFunctionType, (, )]
[found]
[required, ., toMaybeFunctionType, (, )]
[required]
[fnTypeA, ., getParameters, (, ), ., iterator, (, )]
[fnTypeA, ., getParameters, (, )]
[fnTypeA]
[fnTypeB, ., getParameters, (, ), ., iterator, (, )]
[fnTypeB, ., getParameters, (, )]
[fnTypeB]
[paramItA, ., hasNext, (, ), &&, paramItB, ., hasNext, (, )]
[paramItA, ., hasNext, (, )]
[paramItA]
[paramItB, ., hasNext, (, )]
[paramItB]
[registerIfMismatch, (, paramItA, ., next, (, ), ., getJSType, (, ), ,, paramItB, ., next, (, ), ., getJSType, (, ), ,, error, )]
[paramItA, ., next, (, ), ., getJSType, (, )]
[paramItA, ., next, (, )]
[paramItA]
[paramItB, ., next, (, ), ., getJSType, (, )]
[paramItB, ., next, (, )]
[paramItB]
[error]
[registerIfMismatch, (, fnTypeA, ., getReturnType, (, ), ,, fnTypeB, ., getReturnType, (, ), ,, error, )]
[fnTypeA, ., getReturnType, (, )]
[fnTypeA]
[fnTypeB, ., getReturnType, (, )]
[fnTypeB]
[error]
[found, !=, null, &&, required, !=, null, &&, !, found, ., isSubtype, (, required, )]
[found, !=, null, &&, required, !=, null]
[found, !=, null]
[found]
[null]
[required, !=, null]
[required]
[null]
[!, found, ., isSubtype, (, required, )]
[found, ., isSubtype, (, required, )]
[found]
[required]
[registerMismatch, (, found, ,, required, ,, error, )]
[found]
[required]
[error]
[MessageFormat, ., format, (, FOUND_REQUIRED, ,, description, ,, found, ,, required, )]
[MessageFormat]
[FOUND_REQUIRED]
[description]
[found]
[required]
[n, ., isGetProp, (, )]
[n]
[getJSType, (, n, ., getFirstChild, (, ), ), ., dereference, (, )]
[getJSType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[objectType, !=, null]
[objectType]
[null]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[objectType, ., getConstructor, (, ), !=, null, &&, objectType, ., getConstructor, (, ), ., isInterface, (, )]
[objectType, ., getConstructor, (, ), !=, null]
[objectType, ., getConstructor, (, )]
[objectType]
[null]
[objectType, ., getConstructor, (, ), ., isInterface, (, )]
[objectType, ., getConstructor, (, )]
[objectType]
[objectType]
[FunctionType, ., getTopDefiningInterface, (, objectType, ,, propName, )]
[FunctionType]
[objectType]
[propName]
[objectType, !=, null, &&, !, objectType, ., hasOwnProperty, (, propName, )]
[objectType, !=, null]
[objectType]
[null]
[!, objectType, ., hasOwnProperty, (, propName, )]
[objectType, ., hasOwnProperty, (, propName, )]
[objectType]
[propName]
[objectType]
[objectType, ., getImplicitPrototype, (, )]
[objectType]
[objectType, !=, null, &&, (, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), )]
[objectType, !=, null]
[objectType]
[null]
[(, objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, ), )]
[objectType, ., getConstructor, (, ), !=, null, ||, objectType, ., isFunctionPrototypeType, (, )]
[objectType, ., getConstructor, (, ), !=, null]
[objectType, ., getConstructor, (, )]
[objectType]
[null]
[objectType, ., isFunctionPrototypeType, (, )]
[objectType]
[objectType, ., toString, (, ), +, ".", +, propName]
[objectType, ., toString, (, ), +, "."]
[objectType, ., toString, (, )]
[objectType]
["."]
[propName]
[getJSType, (, n, )]
[n]
[dereference]
[type, ., dereference, (, )]
[type]
[dereferenced, !=, null]
[dereferenced]
[null]
[type]
[dereferenced]
[n, ., getQualifiedName, (, )]
[n]
[type, ., isFunctionPrototypeType, (, ), ||, (, type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, )]
[type, ., isFunctionPrototypeType, (, )]
[type]
[(, type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null, )]
[type, ., toObjectType, (, ), !=, null, &&, type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null]
[type, ., toObjectType, (, ), !=, null]
[type, ., toObjectType, (, )]
[type]
[null]
[type, ., toObjectType, (, ), ., getConstructor, (, ), !=, null]
[type, ., toObjectType, (, ), ., getConstructor, (, )]
[type, ., toObjectType, (, )]
[type]
[null]
[type, ., toString, (, )]
[type]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[qualifiedName]
[type, ., isFunctionType, (, )]
[type]
["function"]
[type, ., toString, (, )]
[type]
[n, ., getJSType, (, )]
[n]
[jsType, ==, null]
[jsType]
[null]
[getNativeType, (, UNKNOWN_TYPE, )]
[UNKNOWN_TYPE]
[jsType]
[typeRegistry, ., getNativeType, (, typeId, )]
[typeRegistry]
[typeId]
[shouldReport]
[compiler, ., report, (, error, )]
[compiler]
[error]
[error]
[this, ., typeA]
[this]
[a]
[this, ., typeB]
[this]
[b]
[this, ., src]
[this]
[src]
[object, instanceof, TypeMismatch]
[object]
[(, TypeMismatch, ), object]
[object]
[(, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), ), ||, (, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), )]
[(, that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, ), )]
[that, ., typeA, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeB, ., isEquivalentTo, (, this, ., typeB, )]
[that, ., typeA, ., isEquivalentTo, (, this, ., typeA, )]
[that, ., typeA]
[that]
[this, ., typeA]
[this]
[that, ., typeB, ., isEquivalentTo, (, this, ., typeB, )]
[that, ., typeB]
[that]
[this, ., typeB]
[this]
[(, that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, ), )]
[that, ., typeB, ., isEquivalentTo, (, this, ., typeA, ), &&, that, ., typeA, ., isEquivalentTo, (, this, ., typeB, )]
[that, ., typeB, ., isEquivalentTo, (, this, ., typeA, )]
[that, ., typeB]
[that]
[this, ., typeA]
[this]
[that, ., typeA, ., isEquivalentTo, (, this, ., typeB, )]
[that, ., typeA]
[that]
[this, ., typeB]
[this]
[false]
[Objects, ., hashCode, (, typeA, ,, typeB, )]
[Objects]
[typeA]
[typeB]
["(", +, typeA, +, ", ", +, typeB, +, ")"]
["(", +, typeA, +, ", ", +, typeB]
["(", +, typeA, +, ", "]
["(", +, typeA]
["("]
[typeA]
[", "]
[typeB]
[")"]
