[null]
[this, ., graph]
[this]
[g]
[new, StringBuilder, (, )]
[Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), )]
[Lists]
[graph, ., getDirectedGraphNodes, (, )]
[graph]
[generateHtmlReportHeader, (, builder, )]
[builder]
[builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", )]
[builder]
["<h1>Name Reference Graph Dump</h1>\n"]
[builder, ., append, (, "OVERALL STATS\n", )]
[builder]
["OVERALL STATS\n"]
[builder, ., append, (, "<ul>\n", )]
[builder]
["<ul>\n"]
[builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), )]
[builder]
["<li>Total names: ", +, nodes, ., size, (, )]
["<li>Total names: "]
[nodes, ., size, (, )]
[nodes]
[builder, ., append, (, "</ul>\n", )]
[builder]
["</ul>\n"]
[builder, ., append, (, "ALL NAMES\n", )]
[builder]
["ALL NAMES\n"]
[builder, ., append, (, "<UL>\n", )]
[builder]
["<UL>\n"]
[Collections, ., sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), )]
[Collections]
[nodes]
[new, DiGraphNodeComparator, (, )]
[nodes]
[generateDeclarationReport, (, builder, ,, n, )]
[builder]
[n]
[graph, ., getOutEdges, (, n, ., getValue, (, ), )]
[graph]
[n, ., getValue, (, )]
[n]
[graph, ., getInEdges, (, n, ., getValue, (, ), )]
[graph]
[n, ., getValue, (, )]
[n]
[!, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, )]
[!, outEdges, ., isEmpty, (, )]
[outEdges, ., isEmpty, (, )]
[outEdges]
[!, inEdges, ., isEmpty, (, )]
[inEdges, ., isEmpty, (, )]
[inEdges]
[builder, ., append, (, "<ul>", )]
[builder]
["<ul>"]
[outEdges, ., size, (, ), >, 0]
[outEdges, ., size, (, )]
[outEdges]
[0]
[builder, ., append, (, "<li>REFERS TO:<br>\n", )]
[builder]
["<li>REFERS TO:<br>\n"]
[builder, ., append, (, "<ul>", )]
[builder]
["<ul>"]
[outEdges]
[generateEdgeReport, (, builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, )]
[builder]
[edge, ., getDestination, (, ), ., getValue, (, )]
[edge, ., getDestination, (, )]
[edge]
[edge]
[builder, ., append, (, "</ul>\n", )]
[builder]
["</ul>\n"]
[inEdges, ., size, (, ), >, 0]
[inEdges, ., size, (, )]
[inEdges]
[0]
[builder, ., append, (, "<li>REFERENCED BY:<br>\n", )]
[builder]
["<li>REFERENCED BY:<br>\n"]
[builder, ., append, (, "<ul>", )]
[builder]
["<ul>"]
[inEdges]
[generateEdgeReport, (, builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, )]
[builder]
[edge, ., getSource, (, ), ., getValue, (, )]
[edge, ., getSource, (, )]
[edge]
[edge]
[builder, ., append, (, "</ul>", )]
[builder]
["</ul>"]
[builder, ., append, (, "</ul>\n", )]
[builder]
["</ul>\n"]
[builder, ., append, (, "</ul>\n", )]
[builder]
["</ul>\n"]
[generateHtmlReportFooter, (, builder, )]
[builder]
[builder, ., toString, (, )]
[builder]
[node, ., getSourceFileName, (, )]
[node]
[filename, ==, null]
[filename]
[null]
[""]
[filename]
[declarationNode, ., getValue, (, ), ., getQualifiedName, (, )]
[declarationNode, ., getValue, (, )]
[declarationNode]
[declarationNode, ., getValue, (, ), ., getType, (, )]
[declarationNode, ., getValue, (, )]
[declarationNode]
[builder, ., append, (, "<LI> ", )]
[builder]
["<LI> "]
[builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", )]
[builder]
["<A NAME=\"", +, declName, +, "\">"]
["<A NAME=\"", +, declName]
["<A NAME=\""]
[declName]
["\">"]
[builder, ., append, (, declName, )]
[builder]
[declName]
[builder, ., append, (, "\n", )]
[builder]
["\n"]
[generateType, (, builder, ,, declType, )]
[builder]
[declType]
[declarationNode, ., getValue, (, ), ., getDeclarations, (, )]
[declarationNode, ., getValue, (, )]
[declarationNode]
[defs, ., size, (, ), ==, 0]
[defs, ., size, (, )]
[defs]
[0]
[builder, ., append, (, "<br>No definitions found<br>", )]
[builder]
["<br>No definitions found<br>"]
[builder, ., append, (, "<ul>", )]
[builder]
["<ul>"]
[defs]
[def, ., getRValue, (, )]
[def]
[getSourceFile, (, fnDef, )]
[fnDef]
[builder, ., append, (, "<li> Defined: ", )]
[builder]
["<li> Defined: "]
[generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), )]
[builder]
[sourceFileName]
[fnDef, ., getLineno, (, )]
[fnDef]
[fnDef, ., getCharno, (, )]
[fnDef]
[builder, ., append, (, "</ul>", )]
[builder]
["</ul>"]
[builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", )]
[builder]
["<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, "]
["<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>"]
["<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >"]
["<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" "]
["<!DOCTYPE html>\n", +, "<html>", +, "<head>"]
["<!DOCTYPE html>\n", +, "<html>"]
["<!DOCTYPE html>\n"]
["<html>"]
["<head>"]
["<meta http-equiv=\"Content-Type\" "]
["content=\"text/html;charset=utf-8\" >"]
["<title>Name Reference Graph Dump</title>"]
["<style type=\"text/css\">body, td, "]
[builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", )]
[builder]
["p {font-family: Arial; font-size: 83%} "]
[builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", )]
[builder]
["ul {margin-top:2px; margin-left:0px; padding-left:1em;}"]
[builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", )]
[builder]
["li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}"]
["li {margin-top:3px; margin-left:24px;"]
["padding-left:0px;padding-bottom: 4px}"]
[builder, ., append, (, "</style></head><body>\n", )]
[builder]
["</style></head><body>\n"]
[builder, ., append, (, "</body></html>", )]
[builder]
["</body></html>"]
[referencedDecl, ., getQualifiedName, (, )]
[referencedDecl]
[builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", )]
[builder]
["<li><A HREF=\"#", +, srcDeclName, +, "\">"]
["<li><A HREF=\"#", +, srcDeclName]
["<li><A HREF=\"#"]
[srcDeclName]
["\">"]
[builder, ., append, (, srcDeclName, )]
[builder]
[srcDeclName]
[builder, ., append, (, "</a> ", )]
[builder]
["</a> "]
[edge, ., getValue, (, ), ., getSite, (, )]
[edge, ., getValue, (, )]
[edge]
[def, ., getLineno, (, )]
[def]
[def, ., getCharno, (, )]
[def]
[getSourceFile, (, def, )]
[def]
[generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, )]
[builder]
[sourceFile]
[lineNumber]
[columnNumber]
[edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, )]
[edge, ., getValue, (, ), ., getSite, (, )]
[edge, ., getValue, (, )]
[edge]
[generateType, (, builder, ,, defType, )]
[builder]
[defType]
[(, sourceFile, !=, null, )]
[sourceFile, !=, null]
[sourceFile]
[null]
[builder, ., append, (, "(", )]
[builder]
["("]
[builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, )]
[builder]
[sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber]
[sourceFile, +, ":", +, lineNumber, +, ","]
[sourceFile, +, ":", +, lineNumber]
[sourceFile, +, ":"]
[sourceFile]
[":"]
[lineNumber]
[","]
[columnNumber]
[builder, ., append, (, ")", )]
[builder]
[")"]
[defType, ==, null]
[defType]
[null]
[builder, ., append, (, " (type: null) ", )]
[builder]
[" (type: null) "]
[defType, ., isUnknownType, (, )]
[defType]
[builder, ., append, (, " (type: unknown) ", )]
[builder]
[" (type: unknown) "]
[builder, ., append, (, " (type: ", +, defType, ., toString, (, ), +, ") ", )]
[builder]
[" (type: ", +, defType, ., toString, (, ), +, ") "]
[" (type: ", +, defType, ., toString, (, )]
[" (type: "]
[defType, ., toString, (, )]
[defType]
[") "]
[Preconditions, ., checkNotNull, (, node1, ., getValue, (, ), )]
[Preconditions]
[node1, ., getValue, (, )]
[node1]
[Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), )]
[Preconditions]
[node2, ., getValue, (, )]
[node2]
[(, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, )]
[(, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, )]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[node1, ., getValue, (, ), ., getQualifiedName, (, )]
[node1, ., getValue, (, )]
[node1]
[null]
[(, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, )]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[node2, ., getValue, (, ), ., getQualifiedName, (, )]
[node2, ., getValue, (, )]
[node2]
[null]
[0]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[node1, ., getValue, (, ), ., getQualifiedName, (, )]
[node1, ., getValue, (, )]
[node1]
[null]
[-, 1]
[1]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null]
[node2, ., getValue, (, ), ., getQualifiedName, (, )]
[node2, ., getValue, (, )]
[node2]
[null]
[1]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), )]
[node1, ., getValue, (, ), ., getQualifiedName, (, )]
[node1, ., getValue, (, )]
[node1]
[node2, ., getValue, (, ), ., getQualifiedName, (, )]
[node2, ., getValue, (, )]
[node2]
