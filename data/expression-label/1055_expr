[new, Comparator, <, JSType, >, (, ), {, @, Override, public, int, compare, (, JSType, t1, ,, JSType, t2, ), {, return, getName, (, t1, ), ., compareTo, (, getName, (, t2, ), ), ;, }, private, String, getName, (, JSType, type, ), {, if, (, type, ., isInstanceType, (, ), ), {, return, (, (, ObjectType, ), type, ), ., getReferenceName, (, ), ;, }, else, if, (, type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, ), ), {, return, type, ., toString, (, ), ;, }, else, {, return, "", ;, }, }, }]
[getName, (, t1, ), ., compareTo, (, getName, (, t2, ), )]
[getName, (, t1, )]
[t1]
[getName, (, t2, )]
[t2]
[type, ., isInstanceType, (, )]
[type]
[(, (, ObjectType, ), type, ), ., getReferenceName, (, )]
[(, (, ObjectType, ), type, )]
[(, ObjectType, ), type]
[type]
[type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, )]
[type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, )]
[type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, )]
[type, ., isNullType, (, ), ||, type, ., isBooleanValueType, (, )]
[type, ., isNullType, (, )]
[type]
[type, ., isBooleanValueType, (, )]
[type]
[type, ., isNumberValueType, (, )]
[type]
[type, ., isStringValueType, (, )]
[type]
[type, ., isVoidType, (, )]
[type]
[type, ., toString, (, )]
[type]
[""]
[this, ., compiler]
[this]
[compiler]
[this, ., logFunction]
[this]
[logFunction]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddMarkers, (, compiler, ), )]
[NodeTraversal]
[compiler]
[root]
[new, AddMarkers, (, compiler, )]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AddChecks, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, AddChecks, (, )]
[addBoilerplateCode, (, )]
[this, ., compiler]
[this]
[compiler]
[n, ., isFunction, (, )]
[n]
[visitFunction, (, t, ,, n, )]
[t]
[n]
[n, ., getJSType, (, ), ., toMaybeFunctionType, (, )]
[n, ., getJSType, (, )]
[n]
[funType, !=, null, &&, !, funType, ., isConstructor, (, )]
[funType, !=, null]
[funType]
[null]
[!, funType, ., isConstructor, (, )]
[funType, ., isConstructor, (, )]
[funType]
[findNodeToInsertAfter, (, n, )]
[n]
[nodeToInsertAfter]
[addMarker, (, funType, ,, nodeToInsertAfter, ,, null, )]
[funType]
[nodeToInsertAfter]
[null]
[Sets, ., newTreeSet, (, ALPHA, )]
[Sets]
[ALPHA]
[Iterables, ., addAll, (, stuff, ,, funType, ., getAllImplementedInterfaces, (, ), )]
[Iterables]
[stuff]
[funType, ., getAllImplementedInterfaces, (, )]
[funType]
[stuff]
[nodeToInsertAfter]
[addMarker, (, funType, ,, nodeToInsertAfter, ,, interfaceType, )]
[funType]
[nodeToInsertAfter]
[interfaceType]
[funType, ., getSource, (, ), ==, null]
[funType, ., getSource, (, )]
[funType]
[null]
[nodeToInsertAfter]
[NodeUtil, ., getFunctionName, (, funType, ., getSource, (, ), )]
[NodeUtil]
[funType, ., getSource, (, )]
[funType]
[className, ==, null]
[className]
[null]
[nodeToInsertAfter]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[className]
[IR, ., string, (, interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, ), )]
[IR]
[interfaceType, ==, null, ?, "instance_of__", +, className, :, "implements__", +, interfaceType, ., getReferenceName, (, )]
[interfaceType, ==, null]
[interfaceType]
[null]
["instance_of__", +, className]
["instance_of__"]
[className]
["implements__", +, interfaceType, ., getReferenceName, (, )]
["implements__"]
[interfaceType, ., getReferenceName, (, )]
[interfaceType]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), ), )]
[IR]
[IR, ., assign, (, IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, ), ,, IR, ., trueNode, (, ), )]
[IR]
[IR, ., getelem, (, IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), ), ,, marker, )]
[IR]
[IR, ., getprop, (, classNode, ,, IR, ., string, (, "prototype", ), )]
[IR]
[classNode]
[IR, ., string, (, "prototype", )]
[IR]
["prototype"]
[marker]
[IR, ., trueNode, (, )]
[IR]
[nodeToInsertAfter, ., getParent, (, ), ., addChildAfter, (, assign, ,, nodeToInsertAfter, )]
[nodeToInsertAfter, ., getParent, (, )]
[nodeToInsertAfter]
[assign]
[nodeToInsertAfter]
[compiler, ., reportCodeChange, (, )]
[compiler]
[nodeToInsertAfter]
[assign]
[nodeToInsertAfter]
[findEnclosingConstructorDeclaration, (, n, )]
[n]
[nodeToInsertAfter, ., getNext, (, )]
[nodeToInsertAfter]
[next, !=, null, &&, isClassDefiningCall, (, next, )]
[next, !=, null]
[next]
[null]
[isClassDefiningCall, (, next, )]
[next]
[nodeToInsertAfter]
[next]
[next]
[nodeToInsertAfter, ., getNext, (, )]
[nodeToInsertAfter]
[nodeToInsertAfter]
[!, n, ., getParent, (, ), ., isScript, (, ), &&, !, n, ., getParent, (, ), ., isBlock, (, )]
[!, n, ., getParent, (, ), ., isScript, (, )]
[n, ., getParent, (, ), ., isScript, (, )]
[n, ., getParent, (, )]
[n]
[!, n, ., getParent, (, ), ., isBlock, (, )]
[n, ., getParent, (, ), ., isBlock, (, )]
[n, ., getParent, (, )]
[n]
[n]
[n, ., getParent, (, )]
[n]
[n]
[NodeUtil, ., isExprCall, (, next, ), &&, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null]
[NodeUtil, ., isExprCall, (, next, )]
[NodeUtil]
[next]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), ), !=, null]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, next, ., getFirstChild, (, ), )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[next, ., getFirstChild, (, )]
[next]
[null]
[n, ., isFunction, (, )]
[n]
[visitFunction, (, t, ,, n, )]
[t]
[n]
[n, ., isReturn, (, )]
[n]
[visitReturn, (, t, ,, n, )]
[t]
[n]
[JSType, ., toMaybeFunctionType, (, n, ., getJSType, (, ), )]
[JSType]
[n, ., getJSType, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[NodeUtil, ., getFunctionParameters, (, n, ), ., getFirstChild, (, )]
[NodeUtil, ., getFunctionParameters, (, n, )]
[NodeUtil]
[n]
[null]
[block, ., getFirstChild, (, )]
[block]
[next, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, next, )]
[next, !=, null]
[next]
[null]
[NodeUtil, ., isFunctionDeclaration, (, next, )]
[NodeUtil]
[next]
[next]
[next, ., getNext, (, )]
[next]
[insertionPoint]
[next]
[funType, ., getParameters, (, )]
[funType]
[paramName, ==, null]
[paramName]
[null]
[createCheckTypeCallNode, (, paramType, ., getJSType, (, ), ,, paramName, ., cloneTree, (, ), )]
[paramType, ., getJSType, (, )]
[paramType]
[paramName, ., cloneTree, (, )]
[paramName]
[checkNode, ==, null]
[checkNode]
[null]
[paramName]
[paramName, ., getNext, (, )]
[paramName]
[checkNode]
[IR, ., exprResult, (, checkNode, )]
[IR]
[checkNode]
[insertionPoint, ==, null]
[insertionPoint]
[null]
[block, ., addChildToFront, (, checkNode, )]
[block]
[checkNode]
[block, ., addChildAfter, (, checkNode, ,, insertionPoint, )]
[block]
[checkNode]
[insertionPoint]
[compiler, ., reportCodeChange, (, )]
[compiler]
[paramName]
[paramName, ., getNext, (, )]
[paramName]
[insertionPoint]
[checkNode]
[t, ., getEnclosingFunction, (, )]
[t]
[function, ., getJSType, (, ), ., toMaybeFunctionType, (, )]
[function, ., getJSType, (, )]
[function]
[n, ., getFirstChild, (, )]
[n]
[retValue, ==, null]
[retValue]
[null]
[createCheckTypeCallNode, (, funType, ., getReturnType, (, ), ,, retValue, ., cloneTree, (, ), )]
[funType, ., getReturnType, (, )]
[funType]
[retValue, ., cloneTree, (, )]
[retValue]
[checkNode, ==, null]
[checkNode]
[null]
[n, ., replaceChild, (, retValue, ,, checkNode, )]
[n]
[retValue]
[checkNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[IR, ., arraylit, (, )]
[IR]
[type, ., isUnionType, (, )]
[type]
[alternates]
[Sets, ., newTreeSet, (, ALPHA, )]
[Sets]
[ALPHA]
[Iterables, ., addAll, (, alternates, ,, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), )]
[Iterables]
[alternates]
[type, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[type, ., toMaybeUnionType, (, )]
[type]
[alternates]
[ImmutableList, ., of, (, type, )]
[ImmutableList]
[type]
[alternates]
[createCheckerNode, (, alternate, )]
[alternate]
[checkerNode, ==, null]
[checkerNode]
[null]
[null]
[arrayNode, ., addChildToBack, (, checkerNode, )]
[arrayNode]
[checkerNode]
[IR, ., call, (, jsCode, (, "checkType", ), ,, expr, ,, arrayNode, )]
[IR]
[jsCode, (, "checkType", )]
["checkType"]
[expr]
[arrayNode]
[type, ., isNullType, (, )]
[type]
[jsCode, (, "nullChecker", )]
["nullChecker"]
[type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, ), ||, type, ., isVoidType, (, )]
[type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, ), ||, type, ., isStringValueType, (, )]
[type, ., isBooleanValueType, (, ), ||, type, ., isNumberValueType, (, )]
[type, ., isBooleanValueType, (, )]
[type]
[type, ., isNumberValueType, (, )]
[type]
[type, ., isStringValueType, (, )]
[type]
[type, ., isVoidType, (, )]
[type]
[IR, ., call, (, jsCode, (, "valueChecker", ), ,, IR, ., string, (, type, ., toString, (, ), ), )]
[IR]
[jsCode, (, "valueChecker", )]
["valueChecker"]
[IR, ., string, (, type, ., toString, (, ), )]
[IR]
[type, ., toString, (, )]
[type]
[type, ., isInstanceType, (, )]
[type]
[(, ObjectType, ), type]
[type]
[objType, ., getReferenceName, (, )]
[objType]
[NodeUtil, ., getSourceFile, (, objType, ., getConstructor, (, ), ., getSource, (, ), )]
[NodeUtil]
[objType, ., getConstructor, (, ), ., getSource, (, )]
[objType, ., getConstructor, (, )]
[objType]
[sourceFile, ==, null, ||, sourceFile, ., isExtern, (, )]
[sourceFile, ==, null]
[sourceFile]
[null]
[sourceFile, ., isExtern, (, )]
[sourceFile]
[IR, ., call, (, jsCode, (, "externClassChecker", ), ,, IR, ., string, (, refName, ), )]
[IR]
[jsCode, (, "externClassChecker", )]
["externClassChecker"]
[IR, ., string, (, refName, )]
[IR]
[refName]
[IR, ., call, (, jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", ), ,, IR, ., string, (, refName, ), )]
[IR]
[jsCode, (, objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker", )]
[objType, ., getConstructor, (, ), ., isInterface, (, ), ?, "interfaceChecker", :, "classChecker"]
[objType, ., getConstructor, (, ), ., isInterface, (, )]
[objType, ., getConstructor, (, )]
[objType]
["interfaceChecker"]
["classChecker"]
[IR, ., string, (, refName, )]
[IR]
[refName]
[null]
[compiler, ., ensureLibraryInjected, (, "runtime_type_check", )]
[compiler]
["runtime_type_check"]
[newNode, !=, null, &&, logFunction, !=, null]
[newNode, !=, null]
[newNode]
[null]
[logFunction, !=, null]
[logFunction]
[null]
[IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), ), )]
[IR]
[IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, ), )]
[IR]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.log", )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
["$jscomp.typecheck.log"]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, logFunction, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[logFunction]
[newNode, ., getParent, (, ), ., addChildAfter, (, logOverride, ,, newNode, )]
[newNode, ., getParent, (, )]
[newNode]
[logOverride]
[newNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, "$jscomp.typecheck.", +, prop, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
["$jscomp.typecheck.", +, prop]
["$jscomp.typecheck."]
[prop]
