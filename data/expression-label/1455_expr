[@, SuppressWarnings, (, "unused", )]
["unused"]
[8318475124230605365L]
[field]
[field, ., getRangeDurationField, (, )]
[field]
[type]
[divisor]
[field]
[type]
[divisor, <, 2]
[divisor]
[2]
[new, IllegalArgumentException, (, "The divisor must be at least 2", )]
["The divisor must be at least 2"]
[field, ., getDurationField, (, )]
[field]
[unitField, ==, null]
[unitField]
[null]
[iDurationField]
[null]
[iDurationField]
[new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, )]
[unitField]
[type, ., getDurationType, (, )]
[type]
[divisor]
[iRangeDurationField]
[rangeField]
[iDivisor]
[divisor]
[field, ., getMinimumValue, (, )]
[field]
[(, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, )]
[(, i, >=, 0, )]
[i, >=, 0]
[i]
[0]
[i, /, divisor]
[i]
[divisor]
[(, (, i, +, 1, ), /, divisor, -, 1, )]
[(, i, +, 1, ), /, divisor, -, 1]
[(, i, +, 1, ), /, divisor]
[(, i, +, 1, )]
[i, +, 1]
[i]
[1]
[divisor]
[1]
[field, ., getMaximumValue, (, )]
[field]
[(, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, )]
[(, j, >=, 0, )]
[j, >=, 0]
[j]
[0]
[j, /, divisor]
[j]
[divisor]
[(, (, j, +, 1, ), /, divisor, -, 1, )]
[(, j, +, 1, ), /, divisor, -, 1]
[(, j, +, 1, ), /, divisor]
[(, j, +, 1, )]
[j, +, 1]
[j]
[1]
[divisor]
[1]
[iMin]
[min]
[iMax]
[max]
[remainderField]
[null]
[type]
[remainderField, ., getWrappedField, (, )]
[remainderField]
[type]
[iDivisor]
[remainderField, ., iDivisor]
[remainderField]
[iDurationField]
[remainderField, ., iRangeField]
[remainderField]
[iRangeDurationField]
[rangeField]
[getWrappedField, (, )]
[field, ., getMinimumValue, (, )]
[field]
[(, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, )]
[(, i, >=, 0, )]
[i, >=, 0]
[i]
[0]
[i, /, divisor]
[i]
[divisor]
[(, (, i, +, 1, ), /, divisor, -, 1, )]
[(, i, +, 1, ), /, divisor, -, 1]
[(, i, +, 1, ), /, divisor]
[(, i, +, 1, )]
[i, +, 1]
[i]
[1]
[divisor]
[1]
[field, ., getMaximumValue, (, )]
[field]
[(, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, )]
[(, j, >=, 0, )]
[j, >=, 0]
[j]
[0]
[j, /, divisor]
[j]
[divisor]
[(, (, j, +, 1, ), /, divisor, -, 1, )]
[(, j, +, 1, ), /, divisor, -, 1]
[(, j, +, 1, ), /, divisor]
[(, j, +, 1, )]
[j, +, 1]
[j]
[1]
[divisor]
[1]
[iMin]
[min]
[iMax]
[max]
[iRangeDurationField, !=, null]
[iRangeDurationField]
[null]
[iRangeDurationField]
[super, ., getRangeDurationField, (, )]
[super]
[getWrappedField, (, ), ., get, (, instant, )]
[getWrappedField, (, )]
[instant]
[value, >=, 0]
[value]
[0]
[value, /, iDivisor]
[value]
[iDivisor]
[(, (, value, +, 1, ), /, iDivisor, ), -, 1]
[(, (, value, +, 1, ), /, iDivisor, )]
[(, value, +, 1, ), /, iDivisor]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[iDivisor]
[1]
[getWrappedField, (, ), ., add, (, instant, ,, amount, *, iDivisor, )]
[getWrappedField, (, )]
[instant]
[amount, *, iDivisor]
[amount]
[iDivisor]
[getWrappedField, (, ), ., add, (, instant, ,, amount, *, iDivisor, )]
[getWrappedField, (, )]
[instant]
[amount, *, iDivisor]
[amount]
[iDivisor]
[set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,, iMax, ), )]
[instant]
[FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,, iMax, )]
[FieldUtils]
[get, (, instant, )]
[instant]
[amount]
[iMin]
[iMax]
[getWrappedField, (, ), ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), /, iDivisor]
[getWrappedField, (, ), ., getDifference, (, minuendInstant, ,, subtrahendInstant, )]
[getWrappedField, (, )]
[minuendInstant]
[subtrahendInstant]
[iDivisor]
[getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), /, iDivisor]
[getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, )]
[getWrappedField, (, )]
[minuendInstant]
[subtrahendInstant]
[iDivisor]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, )]
[FieldUtils]
[this]
[value]
[iMin]
[iMax]
[getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), )]
[getWrappedField, (, ), ., get, (, instant, )]
[getWrappedField, (, )]
[instant]
[getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +, remainder, )]
[getWrappedField, (, )]
[instant]
[value, *, iDivisor, +, remainder]
[value, *, iDivisor]
[value]
[iDivisor]
[remainder]
[iDurationField]
[iMin]
[iMax]
[getWrappedField, (, )]
[field, ., roundFloor, (, field, ., set, (, instant, ,, get, (, instant, ), *, iDivisor, ), )]
[field]
[field, ., set, (, instant, ,, get, (, instant, ), *, iDivisor, )]
[field]
[instant]
[get, (, instant, ), *, iDivisor]
[get, (, instant, )]
[instant]
[iDivisor]
[set, (, instant, ,, get, (, getWrappedField, (, ), ., remainder, (, instant, ), ), )]
[instant]
[get, (, getWrappedField, (, ), ., remainder, (, instant, ), )]
[getWrappedField, (, ), ., remainder, (, instant, )]
[getWrappedField, (, )]
[instant]
[iDivisor]
[value, >=, 0]
[value]
[0]
[value, %, iDivisor]
[value]
[iDivisor]
[(, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %, iDivisor, )]
[(, iDivisor, -, 1, )]
[iDivisor, -, 1]
[iDivisor]
[1]
[(, (, value, +, 1, ), %, iDivisor, )]
[(, value, +, 1, ), %, iDivisor]
[(, value, +, 1, )]
[value, +, 1]
[value]
[1]
[iDivisor]
