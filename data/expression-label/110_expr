[!, n, ., getParent, (, ), ., isFunction, (, ), &&, canFuseIntoOneStatement, (, n, )]
[!, n, ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, )]
[n]
[canFuseIntoOneStatement, (, n, )]
[n]
[fuseIntoOneStatement, (, n, )]
[n]
[reportCodeChange, (, )]
[n]
[!, block, ., isBlock, (, )]
[block, ., isBlock, (, )]
[block]
[false]
[!, block, ., hasChildren, (, ), ||, block, ., hasOneChild, (, )]
[!, block, ., hasChildren, (, )]
[block, ., hasChildren, (, )]
[block]
[block, ., hasOneChild, (, )]
[block]
[false]
[block, ., getLastChild, (, )]
[block]
[block, ., getFirstChild, (, )]
[block]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[!, c, ., isExprResult, (, ), &&, c, !=, last]
[!, c, ., isExprResult, (, )]
[c, ., isExprResult, (, )]
[c]
[c, !=, last]
[c]
[last]
[false]
[last, ., getType, (, )]
[last]
[Token, ., IF]
[Token]
[Token, ., THROW]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[true]
[Token, ., RETURN]
[Token]
[last, ., hasChildren, (, )]
[last]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, last, ), &&, !, mayHaveSideEffects, (, last, ., getFirstChild, (, ), )]
[NodeUtil, ., isForIn, (, last, )]
[NodeUtil]
[last]
[!, mayHaveSideEffects, (, last, ., getFirstChild, (, ), )]
[mayHaveSideEffects, (, last, ., getFirstChild, (, ), )]
[last, ., getFirstChild, (, )]
[last]
[false]
[block, ., removeFirstChild, (, )]
[block]
[cur, ., removeFirstChild, (, )]
[cur]
[block, ., hasMoreThanOneChild, (, )]
[block]
[block, ., removeFirstChild, (, ), ., removeFirstChild, (, )]
[block, ., removeFirstChild, (, )]
[block]
[commaTree]
[fuseExpressionIntoExpression, (, commaTree, ,, next, )]
[commaTree]
[next]
[Preconditions, ., checkState, (, block, ., hasOneChild, (, ), )]
[Preconditions]
[block, ., hasOneChild, (, )]
[block]
[block, ., getLastChild, (, )]
[block]
[last, ., getType, (, )]
[last]
[Token, ., IF]
[Token]
[Token, ., RETURN]
[Token]
[Token, ., THROW]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[fuseExpresssonIntoFirstChild, (, commaTree, ,, last, )]
[commaTree]
[last]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, last, )]
[NodeUtil]
[last]
[fuseExpresssonIntoSecondChild, (, commaTree, ,, last, )]
[commaTree]
[last]
[new, IllegalStateException, (, "Statement fusion missing.", )]
["Statement fusion missing."]
[new, Node, (, Token, ., COMMA, ,, exp1, )]
[Token, ., COMMA]
[Token]
[exp1]
[comma, ., copyInformationFrom, (, exp2, )]
[comma]
[exp2]
[exp2, ., isComma, (, )]
[exp2]
[exp2]
[leftMostChild, ., isComma, (, )]
[leftMostChild]
[leftMostChild]
[leftMostChild, ., getFirstChild, (, )]
[leftMostChild]
[leftMostChild, ., getParent, (, )]
[leftMostChild]
[comma, ., addChildToBack, (, leftMostChild, ., detachFromParent, (, ), )]
[comma]
[leftMostChild, ., detachFromParent, (, )]
[leftMostChild]
[parent, ., addChildToFront, (, comma, )]
[parent]
[comma]
[exp2]
[comma, ., addChildToBack, (, exp2, )]
[comma]
[exp2]
[comma]
[stmt, ., removeFirstChild, (, )]
[stmt]
[fuseExpressionIntoExpression, (, exp, ,, val, )]
[exp]
[val]
[stmt, ., addChildToFront, (, comma, )]
[stmt]
[comma]
[stmt, ., removeChildAfter, (, stmt, ., getFirstChild, (, ), )]
[stmt]
[stmt, ., getFirstChild, (, )]
[stmt]
[fuseExpressionIntoExpression, (, exp, ,, val, )]
[exp]
[val]
[stmt, ., addChildAfter, (, comma, ,, stmt, ., getFirstChild, (, ), )]
[stmt]
[comma]
[stmt, ., getFirstChild, (, )]
[stmt]
