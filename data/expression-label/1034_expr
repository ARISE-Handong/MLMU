[DiagnosticType, ., error, (, "JSONML_SYNTAX", ,, "Syntax error: {0}", )]
[DiagnosticType]
["JSONML_SYNTAX"]
["Syntax error: {0}"]
[Sets, ., newHashSet, (, "use strict", )]
[Sets]
["use strict"]
[this, ., compiler]
[this]
[compiler]
[report, (, JSONML_SYNTAX, ,, element, ,, arguments, )]
[JSONML_SYNTAX]
[element]
[arguments]
[nodeIndex]
[-, 1]
[1]
[report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,, arguments, ), )]
[JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,, arguments, )]
[JSError]
[sourceName]
[lineno]
[charno]
[type]
[arguments]
[report, (, error, ,, true, )]
[error]
[true]
[compiler, ., report, (, error, )]
[compiler]
[error]
[terminal]
[new, JsonMLException, (, )]
[true]
[this, ., rootElement]
[this]
[rootElement]
[compiler, ==, null]
[compiler]
[null]
[null]
[errorReporter]
[this, ., new, ErrorReporter, (, compiler, )]
[this]
[compiler]
[IR, ., block, (, )]
[IR]
[nodeIndex]
[-, 1]
[1]
[Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, )]
[Preconditions]
[rootElement, ., getType, (, ), ==, TagType, ., Program]
[rootElement, ., getType, (, )]
[rootElement]
[TagType, ., Program]
[TagType]
[transformElement, (, rootElement, ,, root, )]
[rootElement]
[root]
[root, ., removeFirstChild, (, )]
[root]
[getAttribute, (, element, ,, attr, ,, type, ,, true, )]
[element]
[attr]
[type]
[true]
[getAttribute, (, element, ,, attr, ,, type, ,, false, )]
[element]
[attr]
[type]
[false]
[element, ., getAttribute, (, attr, )]
[element]
[attr]
[value, ==, null]
[value]
[null]
[type, ==, null, ||, optional]
[type, ==, null]
[type]
[null]
[optional]
[null]
[new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", )]
["Missing ", +, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element."]
["Missing ", +, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, )]
["Missing ", +, attr, ., name, (, ), +, " attribute for "]
["Missing ", +, attr, ., name, (, )]
["Missing "]
[attr, ., name, (, )]
[attr]
[" attribute for "]
[element, ., getType, (, ), ., name, (, )]
[element, ., getType, (, )]
[element]
[" element."]
[type, ., equals, (, Double, ., class, )]
[type]
[Double, ., class]
[value, instanceof, Number]
[value]
[type, ., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), )]
[type]
[(, (, Number, ), value, ), ., doubleValue, (, )]
[(, (, Number, ), value, )]
[(, Number, ), value]
[value]
[value, instanceof, String]
[value]
[type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), )]
[type]
[Double, ., valueOf, (, (, String, ), value, )]
[Double]
[(, String, ), value]
[value]
[new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), )]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, )]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: "]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, )]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: "]
["Wrong type of ", +, attr, ., name, (, ), +, " attribute. "]
["Wrong type of ", +, attr, ., name, (, )]
["Wrong type of "]
[attr, ., name, (, )]
[attr]
[" attribute. "]
["Received: "]
[value, ., getClass, (, )]
[value]
[". Expected: "]
[type, ., getName, (, )]
[type]
[type, ., isInstance, (, value, )]
[type]
[value]
[type, ., cast, (, value, )]
[type]
[value]
[new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), )]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, )]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: "]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, )]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: "]
["Wrong type of ", +, attr, ., name, (, ), +, "attribute. "]
["Wrong type of ", +, attr, ., name, (, )]
["Wrong type of "]
[attr, ., name, (, )]
[attr]
["attribute. "]
["Received: "]
[value, ., getClass, (, )]
[value]
[". Expected: "]
[type, ., getName, (, )]
[type]
[getAttribute, (, element, ,, attr, ,, Object, ., class, )]
[element]
[attr]
[Object, ., class]
[getAttribute, (, element, ,, attr, ,, String, ., class, )]
[element]
[attr]
[String, ., class]
[Validator, ., validate, (, element, )]
[Validator]
[element]
[errorMessage, !=, null]
[errorMessage]
[null]
[errorReporter, ., report, (, element, ,, errorMessage, )]
[errorReporter]
[element]
[errorMessage]
[nodeIndex, ++]
[nodeIndex]
[validate, (, element, )]
[element]
[insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, )]
[insertExprResultState]
[JsonMLUtil, ., isExpression, (, element, )]
[JsonMLUtil]
[element]
[transformExpr, (, element, ,, parent, )]
[element]
[parent]
[element, ., getType, (, )]
[element]
[ArrayExpr]
[transformArrayExpr, (, element, ,, parent, )]
[element]
[parent]
[AssignExpr]
[transformAssignExpr, (, element, ,, parent, )]
[element]
[parent]
[BinaryExpr]
[transformBinaryExpr, (, element, ,, parent, )]
[element]
[parent]
[BlockStmt]
[transformBlock, (, element, ,, parent, )]
[element]
[parent]
[BreakStmt]
[transformBreakStmt, (, element, ,, parent, )]
[element]
[parent]
[CallExpr]
[transformCallExpr, (, element, ,, parent, )]
[element]
[parent]
[Case]
[transformCase, (, element, ,, parent, )]
[element]
[parent]
[CatchClause]
[transformCatchClause, (, element, ,, parent, )]
[element]
[parent]
[ConditionalExpr]
[transformConditionalExpr, (, element, ,, parent, )]
[element]
[parent]
[ContinueStmt]
[transformContinueStmt, (, element, ,, parent, )]
[element]
[parent]
[CountExpr]
[transformCountExpr, (, element, ,, parent, )]
[element]
[parent]
[DataProp]
[transformDataProp, (, element, ,, parent, )]
[element]
[parent]
[GetterProp]
[transformGetterProp, (, element, ,, parent, )]
[element]
[parent]
[SetterProp]
[transformSetterProp, (, element, ,, parent, )]
[element]
[parent]
[DefaultCase]
[transformDefaultCase, (, element, ,, parent, )]
[element]
[parent]
[DeleteExpr]
[transformDeleteExpr, (, element, ,, parent, )]
[element]
[parent]
[DoWhileStmt]
[transformDoWhileStmt, (, element, ,, parent, )]
[element]
[parent]
[Empty]
[transformEmpty, (, element, ,, parent, )]
[element]
[parent]
[EmptyStmt]
[transformEmptyStmt, (, element, ,, parent, )]
[element]
[parent]
[EvalExpr]
[transformEvalExpr, (, element, ,, parent, )]
[element]
[parent]
[ForInStmt]
[transformForInStmt, (, element, ,, parent, )]
[element]
[parent]
[ForStmt]
[transformForStmt, (, element, ,, parent, )]
[element]
[parent]
[FunctionDecl]
[transformFunctionDecl, (, element, ,, parent, )]
[element]
[parent]
[FunctionExpr]
[transformFunctionExpr, (, element, ,, parent, )]
[element]
[parent]
[IdExpr]
[transformIdExpr, (, element, ,, parent, )]
[element]
[parent]
[IdPatt]
[transformIdPatt, (, element, ,, parent, )]
[element]
[parent]
[IfStmt]
[transformIfStmt, (, element, ,, parent, )]
[element]
[parent]
[InitPatt]
[transformInitPatt, (, element, ,, parent, )]
[element]
[parent]
[InvokeExpr]
[transformInvokeExpr, (, element, ,, parent, )]
[element]
[parent]
[LabelledStmt]
[transformLabelledStmt, (, element, ,, parent, )]
[element]
[parent]
[LiteralExpr]
[transformLiteralExpr, (, element, ,, parent, )]
[element]
[parent]
[LogicalAndExpr]
[transformLogicalAndExpr, (, element, ,, parent, )]
[element]
[parent]
[LogicalOrExpr]
[transformLogicalOrExpr, (, element, ,, parent, )]
[element]
[parent]
[MemberExpr]
[transformMemberExpr, (, element, ,, parent, )]
[element]
[parent]
[NewExpr]
[transformNewExpr, (, element, ,, parent, )]
[element]
[parent]
[ObjectExpr]
[transformObjectExpr, (, element, ,, parent, )]
[element]
[parent]
[ParamDecl]
[transformParamDecl, (, element, ,, parent, )]
[element]
[parent]
[Program]
[transformProgram, (, element, ,, parent, )]
[element]
[parent]
[PrologueDecl]
[transformPrologueDecl, (, element, ,, parent, )]
[element]
[parent]
[RegExpExpr]
[transformRegExpExpr, (, element, ,, parent, )]
[element]
[parent]
[ReturnStmt]
[transformReturnStmt, (, element, ,, parent, )]
[element]
[parent]
[SwitchStmt]
[transformSwitchStmt, (, element, ,, parent, )]
[element]
[parent]
[ThisExpr]
[transformThisExpr, (, element, ,, parent, )]
[element]
[parent]
[ThrowStmt]
[transformThrowStmt, (, element, ,, parent, )]
[element]
[parent]
[TryStmt]
[transformTryStmt, (, element, ,, parent, )]
[element]
[parent]
[TypeofExpr]
[transformTypeofExpr, (, element, ,, parent, )]
[element]
[parent]
[UnaryExpr]
[transformUnaryExpr, (, element, ,, parent, )]
[element]
[parent]
[VarDecl]
[transformVarDecl, (, element, ,, parent, )]
[element]
[parent]
[WhileStmt]
[transformWhileStmt, (, element, ,, parent, )]
[element]
[parent]
[WithStmt]
[transformWithStmt, (, element, ,, parent, )]
[element]
[parent]
[transformElements, (, element, ., getChildren, (, ), ,, parent, ,, newState, )]
[element, ., getChildren, (, )]
[element]
[parent]
[newState]
[transformElements, (, element, ., getChildren, (, ), ,, parent, )]
[element, ., getChildren, (, )]
[element]
[parent]
[transformElements, (, element, ., getChildren, (, ), ., subList, (, fromIndex, ,, element, ., childrenSize, (, ), ), ,, parent, ,, newState, )]
[element, ., getChildren, (, ), ., subList, (, fromIndex, ,, element, ., childrenSize, (, ), )]
[element, ., getChildren, (, )]
[element]
[fromIndex]
[element, ., childrenSize, (, )]
[element]
[parent]
[newState]
[insertExprResultState]
[insertExprResultState]
[newState]
[transformElements, (, elements, ,, parent, )]
[elements]
[parent]
[insertExprResultState]
[oldState]
[elements]
[transformElement, (, element, ,, parent, )]
[element]
[parent]
[false]
[insertExprResultState]
[new, Node, (, Token, ., EXPR_RESULT, )]
[Token, ., EXPR_RESULT]
[Token]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[insertExprResultState]
[false]
[nodeIndex, --]
[nodeIndex]
[transformElement, (, element, ,, node, )]
[element]
[node]
[insertExprResultState]
[true]
[result]
[true]
[result]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., FOR, ,, element, )]
[Token, ., FOR]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[0]
[i, <, childno]
[i]
[childno]
[++, i]
[i]
[child]
[element, ., getChild, (, i, )]
[element]
[i]
[child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty]
[child, ., getType, (, ), ==, TagType, ., EmptyStmt]
[child, ., getType, (, )]
[child]
[TagType, ., EmptyStmt]
[TagType]
[child, ., getType, (, ), ==, TagType, ., Empty]
[child, ., getType, (, )]
[child]
[TagType, ., Empty]
[TagType]
[nodeIndex, ++]
[nodeIndex]
[node, ., addChildToBack, (, IR, ., empty, (, ), )]
[node]
[IR, ., empty, (, )]
[IR]
[transformElement, (, child, ,, node, )]
[child]
[node]
[transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, )]
[element, ., getChild, (, childno, )]
[element]
[childno]
[node]
[insertExprResultState]
[true]
[createNode, (, type, ,, element, )]
[type]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, )]
[element]
[TagAttr, ., LABEL]
[TagAttr]
[String, ., class]
[label, !=, null]
[label]
[null]
[node, ., addChildToBack, (, IR, ., labelName, (, label, ), )]
[node]
[IR, ., labelName, (, label, )]
[IR]
[label]
[transformTwoArgumentExpr, (, element, ,, parent, ,, type, )]
[element]
[parent]
[type]
[createNode, (, type, ,, element, )]
[type]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[element, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty]
[element, ., getType, (, ), ==, TagType, ., EmptyStmt]
[element, ., getType, (, )]
[element]
[TagType, ., EmptyStmt]
[TagType]
[element, ., getType, (, ), ==, TagType, ., Empty]
[element, ., getType, (, )]
[element]
[TagType, ., Empty]
[TagType]
[nodeIndex, ++]
[nodeIndex]
[IR, ., block, (, )]
[IR]
[parent, ., addChildToBack, (, block, )]
[parent]
[block]
[block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, )]
[block]
[Node, ., EMPTY_BLOCK]
[Node]
[true]
[element, ., getType, (, ), !=, TagType, ., BlockStmt]
[element, ., getType, (, )]
[element]
[TagType, ., BlockStmt]
[TagType]
[IR, ., block, (, )]
[IR]
[parent, ., addChildToBack, (, block, )]
[parent]
[block]
[insertExprResultState]
[insertExprResultState]
[true]
[transformElement, (, element, ,, block, )]
[element]
[block]
[insertExprResultState]
[state]
[nodeIndex, ++]
[nodeIndex]
[transformBlock, (, element, ,, parent, )]
[element]
[parent]
[createNode, (, Token, ., ARRAYLIT, ,, element, )]
[Token, ., ARRAYLIT]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChildren, (, )]
[element]
[transformElement, (, child, ,, node, )]
[child]
[node]
[getStringAttribute, (, element, ,, TagAttr, ., OP, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[Operator, ., getNodeTypeForAssignOp, (, op, )]
[Operator]
[op]
[transformTwoArgumentExpr, (, element, ,, parent, ,, type, )]
[element]
[parent]
[type]
[getStringAttribute, (, element, ,, TagAttr, ., OP, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[Operator, ., getNodeTypeForBinaryOp, (, op, )]
[Operator]
[op]
[transformTwoArgumentExpr, (, element, ,, parent, ,, type, )]
[element]
[parent]
[type]
[transformBlock, (, element, ,, parent, ,, 0, ,, element, ., childrenSize, (, ), )]
[element]
[parent]
[0]
[element, ., childrenSize, (, )]
[element]
[transformBlock, (, element, ,, parent, ,, start, ,, element, ., childrenSize, (, ), )]
[element]
[parent]
[start]
[element, ., childrenSize, (, )]
[element]
[createNode, (, Token, ., BLOCK, ,, element, )]
[Token, ., BLOCK]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node, ,, true, )]
[element, ., getChildren, (, start, ,, end, )]
[element]
[start]
[end]
[node]
[true]
[transformJumpStmt, (, element, ,, parent, ,, Token, ., BREAK, )]
[element]
[parent]
[Token, ., BREAK]
[Token]
[createNode, (, Token, ., CALL, ,, element, )]
[Token, ., CALL]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[node, ., getFirstChild, (, )]
[node]
[first, ., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM]
[first, ., getType, (, ), !=, Token, ., GETPROP]
[first, ., getType, (, )]
[first]
[Token, ., GETPROP]
[Token]
[first, ., getType, (, ), !=, Token, ., GETELEM]
[first, ., getType, (, )]
[first]
[Token, ., GETELEM]
[Token]
[node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[node]
[Node, ., FREE_CALL]
[Node]
[true]
[createNode, (, Token, ., CASE, ,, element, )]
[Token, ., CASE]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[IR, ., block, (, )]
[IR]
[block, ., setIsSyntheticBlock, (, true, )]
[block]
[true]
[node, ., addChildToBack, (, block, )]
[node]
[block]
[transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, )]
[element]
[block]
[1]
[true]
[createNode, (, Token, ., CATCH, ,, element, )]
[Token, ., CATCH]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformElement, (, child, ,, node, )]
[child]
[node]
[createNode, (, Token, ., HOOK, ,, element, )]
[Token, ., HOOK]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[transformJumpStmt, (, element, ,, parent, ,, Token, ., CONTINUE, )]
[element]
[parent]
[Token, ., CONTINUE]
[Token]
[getStringAttribute, (, element, ,, TagAttr, ., OP, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[Operator, ., getNodeTypeForCountOp, (, op, )]
[Operator]
[op]
[getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, )]
[element]
[TagAttr, ., IS_PREFIX]
[TagAttr]
[Boolean, ., class]
[createNode, (, type, ,, element, )]
[type]
[element]
[node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, )]
[node]
[Node, ., INCRDECR_PROP]
[Node]
[isPrefix, ?, 0, :, 1]
[isPrefix]
[0]
[1]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[getObjectAttribute, (, element, ,, TagAttr, ., NAME, )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[null]
[name, instanceof, Number]
[name]
[node]
[IR, ., stringKey, (, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), ), )]
[IR]
[getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), )]
[(, (, Number, ), name, ), ., doubleValue, (, )]
[(, (, Number, ), name, )]
[(, Number, ), name]
[name]
[name, instanceof, String]
[name]
[node]
[IR, ., stringKey, (, (, String, ), name, )]
[IR]
[(, String, ), name]
[name]
[new, IllegalStateException, (, "The name of the property has invalid type.", )]
["The name of the property has invalid type."]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[(, long, ), value]
[value]
[longValue, ==, value]
[longValue]
[value]
[Long, ., toString, (, longValue, )]
[Long]
[longValue]
[Double, ., toString, (, value, )]
[Double]
[value]
[transformProp, (, Token, ., GETTER_DEF, ,, element, ,, parent, )]
[Token, ., GETTER_DEF]
[Token]
[element]
[parent]
[transformProp, (, Token, ., SETTER_DEF, ,, element, ,, parent, )]
[Token, ., SETTER_DEF]
[Token]
[element]
[parent]
[getObjectAttribute, (, element, ,, TagAttr, ., NAME, )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[null]
[name, instanceof, Number]
[name]
[new, IllegalStateException, (, "Not yet supported.", )]
["Not yet supported."]
[name, instanceof, String]
[name]
[node]
[Node, ., newString, (, tokenType, ,, (, String, ), name, )]
[Node]
[tokenType]
[(, String, ), name]
[name]
[new, IllegalStateException, (, "The name of the property has invalid type.", )]
["The name of the property has invalid type."]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[createNode, (, Token, ., DEFAULT_CASE, ,, element, )]
[Token, ., DEFAULT_CASE]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[IR, ., block, (, )]
[IR]
[block, ., setIsSyntheticBlock, (, true, )]
[block]
[true]
[node, ., addChildToBack, (, block, )]
[node]
[block]
[transformAllChildren, (, element, ,, block, ,, true, )]
[element]
[block]
[true]
[createNode, (, Token, ., DELPROP, ,, element, )]
[Token, ., DELPROP]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., DO, ,, element, )]
[Token, ., DO]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformElement, (, child, ,, node, )]
[child]
[node]
[insertExprResultState]
[true]
[parent, ., getType, (, )]
[parent]
[Token, ., ARRAYLIT]
[Token]
[parent, ., addChildToBack, (, IR, ., empty, (, ), )]
[parent]
[IR, ., empty, (, )]
[IR]
[Token, ., FUNCTION]
[Token]
[parent, ., addChildToBack, (, IR, ., name, (, "", ), )]
[parent]
[IR, ., name, (, "", )]
[IR]
[""]
[new, IllegalArgumentException, (, "Unexpected Empty element.", )]
["Unexpected Empty element."]
[Preconditions, ., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, )]
[Preconditions]
[parent, ., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT]
[parent, ., getType, (, ), ==, Token, ., BLOCK]
[parent, ., getType, (, )]
[parent]
[Token, ., BLOCK]
[Token]
[parent, ., getType, (, ), ==, Token, ., SCRIPT]
[parent, ., getType, (, )]
[parent]
[Token, ., SCRIPT]
[Token]
[parent, ., addChildToBack, (, IR, ., empty, (, ), )]
[parent]
[IR, ., empty, (, )]
[IR]
[createNode, (, Token, ., CALL, ,, element, )]
[Token, ., CALL]
[Token]
[element]
[node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[node]
[Node, ., FREE_CALL]
[Node]
[true]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[IR, ., name, (, "eval", )]
[IR]
["eval"]
[child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, )]
[child]
[Node, ., DIRECT_EVAL]
[Node]
[true]
[node, ., addChildToBack, (, child, )]
[node]
[child]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[transformForLoop, (, element, ,, parent, ,, 2, )]
[element]
[parent]
[2]
[transformForLoop, (, element, ,, parent, ,, 3, )]
[element]
[parent]
[3]
[createNode, (, Token, ., FUNCTION, ,, element, )]
[Token, ., FUNCTION]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[""]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[transformElement, (, element, ., getChild, (, 1, ), ,, node, )]
[element, ., getChild, (, 1, )]
[element]
[1]
[node]
[transformBlock, (, element, ,, node, ,, 2, )]
[element]
[node]
[2]
[transformFunction, (, element, ,, parent, ,, true, )]
[element]
[parent]
[true]
[transformFunction, (, element, ,, parent, ,, false, )]
[element]
[parent]
[false]
[getStringAttribute, (, element, ,, TagAttr, ., NAME, )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[IR, ., name, (, name, )]
[IR]
[name]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[nodeIndex, ++]
[nodeIndex]
[IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), )]
[IR]
[getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, )]
[child]
[TagAttr, ., NAME]
[TagAttr]
[String, ., class]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformElement, (, child, ,, node, )]
[child]
[node]
[IR, ., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), )]
[IR]
[getStringAttribute, (, element, ,, TagAttr, ., NAME, )]
[element]
[TagAttr, ., NAME]
[TagAttr]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., IF, ,, element, )]
[Token, ., IF]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 2, )]
[element]
[2]
[child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty]
[child, ., getType, (, ), !=, TagType, ., EmptyStmt]
[child, ., getType, (, )]
[child]
[TagType, ., EmptyStmt]
[TagType]
[child, ., getType, (, ), !=, TagType, ., Empty]
[child, ., getType, (, )]
[child]
[TagType, ., Empty]
[TagType]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[child]
[node]
[nodeIndex, ++]
[nodeIndex]
[insertExprResultState]
[true]
[createNode, (, Token, ., CALL, ,, element, )]
[Token, ., CALL]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformMemberExpr, (, element, ,, node, )]
[element]
[node]
[transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,, node, )]
[element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), )]
[element]
[2]
[element, ., childrenSize, (, )]
[element]
[node]
[getStringAttribute, (, element, ,, TagAttr, ., LABEL, )]
[element]
[TagAttr, ., LABEL]
[TagAttr]
[createNode, (, Token, ., LABEL, ,, element, )]
[Token, ., LABEL]
[Token]
[element]
[node, ., addChildToBack, (, IR, ., labelName, (, label, ), )]
[node]
[IR, ., labelName, (, label, )]
[IR]
[label]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[child, ., getType, (, ), ==, TagType, ., EmptyStmt]
[child, ., getType, (, )]
[child]
[TagType, ., EmptyStmt]
[TagType]
[nodeIndex, ++]
[nodeIndex]
[node, ., addChildToBack, (, IR, ., empty, (, ), )]
[node]
[IR, ., empty, (, )]
[IR]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[null]
[Type, ., get, (, getStringAttribute, (, element, ,, TagAttr, ., TYPE, ), )]
[Type]
[getStringAttribute, (, element, ,, TagAttr, ., TYPE, )]
[element]
[TagAttr, ., TYPE]
[TagAttr]
[type]
[BOOLEAN]
[getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[Boolean, ., class]
[value]
[node]
[IR, ., trueNode, (, )]
[IR]
[node]
[IR, ., falseNode, (, )]
[IR]
[NULL]
[getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[null]
[node]
[IR, ., nullNode, (, )]
[IR]
[NUMBER]
[getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[Double, ., class]
[node]
[IR, ., number, (, value, )]
[IR]
[value]
[STRING]
[getStringAttribute, (, element, ,, TagAttr, ., VALUE, )]
[element]
[TagAttr, ., VALUE]
[TagAttr]
[node]
[IR, ., string, (, value, )]
[IR]
[value]
[new, JsonMLException, (, "Unrecognized type attribute.", )]
["Unrecognized type attribute."]
[setPosition, (, node, )]
[node]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformLogicalExpr, (, element, ,, parent, ,, Token, ., AND, )]
[element]
[parent]
[Token, ., AND]
[Token]
[transformLogicalExpr, (, element, ,, parent, ,, Token, ., OR, )]
[element]
[parent]
[Token, ., OR]
[Token]
[getAttribute, (, element, ,, TagAttr, ., OP, ,, String, ., class, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[String, ., class]
[op, ., equals, (, ".", )]
[op]
["."]
[type]
[Token, ., GETPROP]
[Token]
[op, ., equals, (, "[]", )]
[op]
["[]"]
[type]
[Token, ., GETELEM]
[Token]
[new, JsonMLException, (, "Invalid OP argument: ", +, op, )]
["Invalid OP argument: ", +, op]
["Invalid OP argument: "]
[op]
[createNode, (, type, ,, element, )]
[type]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[transformElement, (, element, ., getChild, (, 1, ), ,, node, )]
[element, ., getChild, (, 1, )]
[element]
[1]
[node]
[createNode, (, Token, ., NEW, ,, element, )]
[Token, ., NEW]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[createNode, (, Token, ., OBJECTLIT, ,, element, )]
[Token, ., OBJECTLIT]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[createNode, (, Token, ., PARAM_LIST, ,, element, )]
[Token, ., PARAM_LIST]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[Preconditions, ., checkNotNull, (, parent, )]
[Preconditions]
[parent]
[insertExprResultState]
[true]
[IR, ., script, (, )]
[IR]
[parent, ., addChildToBack, (, script, )]
[parent]
[script]
[element, ., getChildren, (, )]
[element]
[transformElement, (, child, ,, script, )]
[child]
[script]
[getStringAttribute, (, element, ,, TagAttr, ., DIRECTIVE, )]
[element]
[TagAttr, ., DIRECTIVE]
[TagAttr]
[ALLOWED_DIRECTIVES, ., contains, (, directive, )]
[ALLOWED_DIRECTIVES]
[directive]
[parent, ., getDirectives, (, )]
[parent]
[directives, ==, null]
[directives]
[null]
[directives]
[Sets, ., newHashSet, (, )]
[Sets]
[directives, ., add, (, directive, )]
[directives]
[directive]
[parent, ., setDirectives, (, directives, )]
[parent]
[directives]
[IR, ., exprResult, (, IR, ., string, (, directive, ), )]
[IR]
[IR, ., string, (, directive, )]
[IR]
[directive]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[createNode, (, Token, ., REGEXP, ,, element, )]
[Token, ., REGEXP]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[getStringAttribute, (, element, ,, TagAttr, ., BODY, )]
[element]
[TagAttr, ., BODY]
[TagAttr]
[node, ., addChildToBack, (, IR, ., string, (, body, ), )]
[node]
[IR, ., string, (, body, )]
[IR]
[body]
[getStringAttribute, (, element, ,, TagAttr, ., FLAGS, )]
[element]
[TagAttr, ., FLAGS]
[TagAttr]
[!, (, flags, ., equals, (, "", ), )]
[(, flags, ., equals, (, "", ), )]
[flags, ., equals, (, "", )]
[flags]
[""]
[node, ., addChildToBack, (, IR, ., string, (, flags, ), )]
[node]
[IR, ., string, (, flags, )]
[IR]
[flags]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[createNode, (, Token, ., RETURN, ,, element, )]
[Token, ., RETURN]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., hasChildren, (, )]
[element]
[insertExprResultState]
[false]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[insertExprResultState]
[true]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., SWITCH, ,, element, )]
[Token, ., SWITCH]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[1]
[i, <, element, ., childrenSize, (, )]
[i]
[element, ., childrenSize, (, )]
[element]
[++, i]
[i]
[child]
[element, ., getChild, (, i, )]
[element]
[i]
[transformElement, (, child, ,, node, )]
[child]
[node]
[insertExprResultState]
[true]
[parent, ., addChildToBack, (, createNode, (, Token, ., THIS, ,, element, ), )]
[parent]
[createNode, (, Token, ., THIS, ,, element, )]
[Token, ., THIS]
[Token]
[element]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[createNode, (, Token, ., THROW, ,, element, )]
[Token, ., THROW]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[insertExprResultState]
[false]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[insertExprResultState]
[true]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[createNode, (, Token, ., TRY, ,, element, )]
[Token, ., TRY]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[IR, ., block, (, )]
[IR]
[node, ., addChildToBack, (, block, )]
[node]
[block]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[child, ., getType, (, ), ==, TagType, ., CatchClause]
[child, ., getType, (, )]
[child]
[TagType, ., CatchClause]
[TagType]
[transformElement, (, child, ,, block, )]
[child]
[block]
[nodeIndex, ++]
[nodeIndex]
[element, ., childrenSize, (, ), ==, 3]
[element, ., childrenSize, (, )]
[element]
[3]
[child]
[element, ., getChild, (, 2, )]
[element]
[2]
[transformElement, (, child, ,, node, )]
[child]
[node]
[createNode, (, Token, ., TYPEOF, ,, element, )]
[Token, ., TYPEOF]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[element, ., getChild, (, 0, )]
[element]
[0]
[node]
[getStringAttribute, (, element, ,, TagAttr, ., OP, )]
[element]
[TagAttr, ., OP]
[TagAttr]
[Operator, ., getNodeTypeForUnaryOp, (, op, )]
[Operator]
[op]
[createNode, (, type, ,, element, )]
[type]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, )]
[element]
[node]
[createNode, (, Token, ., VAR, ,, element, )]
[Token, ., VAR]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[transformAllChildren, (, element, ,, node, ,, false, )]
[element]
[node]
[false]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., WHILE, ,, element, )]
[Token, ., WHILE]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[child]
[node]
[insertExprResultState]
[true]
[Preconditions, ., checkState, (, insertExprResultState, ==, true, )]
[Preconditions]
[insertExprResultState, ==, true]
[insertExprResultState]
[true]
[insertExprResultState]
[false]
[createNode, (, Token, ., WITH, ,, element, )]
[Token, ., WITH]
[Token]
[element]
[parent, ., addChildToBack, (, node, )]
[parent]
[node]
[element, ., getChild, (, 0, )]
[element]
[0]
[transformElement, (, child, ,, node, )]
[child]
[node]
[child]
[element, ., getChild, (, 1, )]
[element]
[1]
[transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[child]
[node]
[insertExprResultState]
[true]
[new, Node, (, type, ,, nodeIndex, ,, -, 1, )]
[type]
[nodeIndex]
[-, 1]
[1]
[node, ., setLineno, (, nodeIndex, )]
[node]
[nodeIndex]
[Maps, ., newHashMap, (, )]
[Maps]
[Operator, ., values, (, )]
[Operator]
[lookup, ., put, (, op, ., getName, (, ), ,, op, )]
[lookup]
[op, ., getName, (, )]
[op]
[op]
[this, ., name]
[this]
[this, ., name]
[this]
[name]
[lookup, ., get, (, name, )]
[lookup]
[name]
[get, (, name, )]
[name]
[op, ==, null]
[op]
[null]
[Token, ., ERROR]
[Token]
[op]
[ASSIGN]
[type]
[Token, ., ASSIGN]
[Token]
[ASSIGN_BITOR]
[type]
[Token, ., ASSIGN_BITOR]
[Token]
[ASSIGN_BITXOR]
[type]
[Token, ., ASSIGN_BITXOR]
[Token]
[ASSIGN_BITAND]
[type]
[Token, ., ASSIGN_BITAND]
[Token]
[ASSIGN_LSH]
[type]
[Token, ., ASSIGN_LSH]
[Token]
[ASSIGN_RSH]
[type]
[Token, ., ASSIGN_RSH]
[Token]
[ASSIGN_URSH]
[type]
[Token, ., ASSIGN_URSH]
[Token]
[ASSIGN_ADD]
[type]
[Token, ., ASSIGN_ADD]
[Token]
[ASSIGN_SUB]
[type]
[Token, ., ASSIGN_SUB]
[Token]
[ASSIGN_MUL]
[type]
[Token, ., ASSIGN_MUL]
[Token]
[ASSIGN_DIV]
[type]
[Token, ., ASSIGN_DIV]
[Token]
[ASSIGN_MOD]
[type]
[Token, ., ASSIGN_MOD]
[Token]
[new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", )]
["", +, "Invalid type of assign expression."]
[""]
["Invalid type of assign expression."]
[type]
[get, (, name, )]
[name]
[op]
[BITOR]
[type]
[Token, ., BITOR]
[Token]
[BITXOR]
[type]
[Token, ., BITXOR]
[Token]
[BITAND]
[type]
[Token, ., BITAND]
[Token]
[EQ]
[type]
[Token, ., EQ]
[Token]
[NE]
[type]
[Token, ., NE]
[Token]
[LT]
[type]
[Token, ., LT]
[Token]
[LE]
[type]
[Token, ., LE]
[Token]
[GT]
[type]
[Token, ., GT]
[Token]
[GE]
[type]
[Token, ., GE]
[Token]
[LSH]
[type]
[Token, ., LSH]
[Token]
[RSH]
[type]
[Token, ., RSH]
[Token]
[URSH]
[type]
[Token, ., URSH]
[Token]
[ADD]
[type]
[Token, ., ADD]
[Token]
[SUB]
[type]
[Token, ., SUB]
[Token]
[MUL]
[type]
[Token, ., MUL]
[Token]
[DIV]
[type]
[Token, ., DIV]
[Token]
[MOD]
[type]
[Token, ., MOD]
[Token]
[SHEQ]
[type]
[Token, ., SHEQ]
[Token]
[SHNE]
[type]
[Token, ., SHNE]
[Token]
[COMMA]
[type]
[Token, ., COMMA]
[Token]
[INSTANCEOF]
[type]
[Token, ., INSTANCEOF]
[Token]
[IN]
[type]
[Token, ., IN]
[Token]
[new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", )]
["", +, "Invalid type of binary expression."]
[""]
["Invalid type of binary expression."]
[type]
[get, (, name, )]
[name]
[op, ==, null]
[op]
[null]
[Token, ., ERROR]
[Token]
[op]
[DEC]
[type]
[Token, ., DEC]
[Token]
[INC]
[type]
[Token, ., INC]
[Token]
[new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", )]
["", +, "Invalid type of count expression."]
[""]
["Invalid type of count expression."]
[type]
[new, String, (, name, )]
[name]
[name, ., equals, (, "+", ), ||, name, ., equals, (, "-", )]
[name, ., equals, (, "+", )]
[name]
["+"]
[name, ., equals, (, "-", )]
[name]
["-"]
[realName]
["_unary"]
[get, (, realName, )]
[realName]
[op]
[NOT]
[type]
[Token, ., NOT]
[Token]
[BITNOT]
[type]
[Token, ., BITNOT]
[Token]
[POS]
[type]
[Token, ., POS]
[Token]
[NEG]
[type]
[Token, ., NEG]
[Token]
[VOID]
[type]
[Token, ., VOID]
[Token]
[new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", )]
["", +, "Invalid type of unary expression."]
[""]
["Invalid type of unary expression."]
[type]
["="]
["|="]
["^="]
["&="]
["<<="]
[">>="]
[">>>="]
["+="]
["-="]
["*="]
["/="]
["%="]
["|"]
["^"]
["&"]
["=="]
["!="]
["<"]
["<="]
[">"]
[">="]
["<<"]
[">>"]
[">>>"]
["+"]
["-"]
["*"]
["/"]
["%"]
["==="]
["!=="]
[","]
["instanceof"]
["in"]
["--"]
["++"]
["!"]
["~"]
["+_unary"]
["-_unary"]
["void"]
[new, HashMap, <, String, ,, Type, >, (, )]
[Type, ., values, (, )]
[Type]
[lookup, ., put, (, type, ., getName, (, ), ,, type, )]
[lookup]
[type, ., getName, (, )]
[type]
[type]
[this, ., name]
[this]
[this, ., name]
[this]
[name]
[lookup, ., get, (, name, )]
[lookup]
[name]
["boolean"]
["null"]
["number"]
["string"]
