[DiagnosticType, ., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", )]
[DiagnosticType]
["UNSUPPORTED_DEFINE_SIGNATURE"]
["Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported."]
["Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms "]
["Only define(function() ...), define(OBJECT_LITERAL) and define("]
["['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms "]
["are currently supported."]
[DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", )]
[DiagnosticType]
["NON_TOP_LEVEL_STATEMENT_DEFINE"]
["The define function must be called as a top-level statement."]
[DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", )]
[DiagnosticType]
["REQUIREJS_PLUGINS_NOT_SUPPORTED"]
["Plugins in define requirements are not supported: {0}"]
["__alias"]
[0]
[this, ., compiler]
[this]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, TransformAMDModulesCallback, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, TransformAMDModulesCallback, (, )]
[t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, )]
[t]
[n]
[UNSUPPORTED_DEFINE_SIGNATURE_ERROR]
["exports", ., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, ), ||, "module", ., equals, (, moduleName, )]
["exports", ., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, )]
["exports", ., equals, (, moduleName, )]
["exports"]
[moduleName]
["require", ., equals, (, moduleName, )]
["require"]
[moduleName]
["module", ., equals, (, moduleName, )]
["module"]
[moduleName]
[n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), )]
[n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null]
[n, ., isCall, (, )]
[n]
[n, ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, )]
[n]
[null]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
["define", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), )]
["define"]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[define, !=, null, &&, !, define, ., isGlobal, (, )]
[define, !=, null]
[define]
[null]
[!, define, ., isGlobal, (, )]
[define, ., isGlobal, (, )]
[define]
[!, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), )]
[(, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), )]
[parent, ., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, )]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., getParent, (, ), ., isScript, (, )]
[parent, ., getParent, (, )]
[parent]
[t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, )]
[t]
[n]
[NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR]
[parent, ., getParent, (, )]
[parent]
[null]
[null]
[n, ., getChildCount, (, ), -, 1]
[n, ., getChildCount, (, )]
[n]
[1]
[defineArity, ==, 0]
[defineArity]
[0]
[unsupportedDefineError, (, t, ,, n, )]
[t]
[n]
[defineArity, ==, 1]
[defineArity]
[1]
[callback]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[callback, ., isObjectLit, (, )]
[callback]
[handleDefineObjectLiteral, (, parent, ,, callback, ,, script, )]
[parent]
[callback]
[script]
[defineArity, ==, 2]
[defineArity]
[2]
[requiresNode]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[callback]
[n, ., getChildAtIndex, (, 2, )]
[n]
[2]
[defineArity, >=, 3]
[defineArity]
[3]
[unsupportedDefineError, (, t, ,, n, )]
[t]
[n]
[!, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), )]
[!, callback, ., isFunction, (, )]
[callback, ., isFunction, (, )]
[callback]
[(, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), )]
[requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, )]
[requiresNode, !=, null]
[requiresNode]
[null]
[!, requiresNode, ., isArrayLit, (, )]
[requiresNode, ., isArrayLit, (, )]
[requiresNode]
[unsupportedDefineError, (, t, ,, n, )]
[t]
[n]
[handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, )]
[t]
[n]
[script]
[requiresNode]
[callback]
[callback, ., getChildAtIndex, (, 2, )]
[callback]
[2]
[NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), )]
[NodeTraversal]
[compiler]
[callbackBlock]
[new, DefineCallbackReturnCallback, (, )]
[moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, )]
[parent]
[script]
[callbackBlock]
[compiler, ., reportCodeChange, (, )]
[compiler]
[onlyExport, ., getParent, (, ), ., removeChild, (, onlyExport, )]
[onlyExport, ., getParent, (, )]
[onlyExport]
[onlyExport]
[script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), )]
[script]
[parent]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, )]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), )]
[IR]
[IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, )]
[IR]
[IR, ., name, (, "exports", )]
[IR]
["exports"]
[onlyExport]
[onlyExport]
[compiler, ., reportCodeChange, (, )]
[compiler]
[callback, ., getChildAtIndex, (, 1, ), ., children, (, ), ., iterator, (, )]
[callback, ., getChildAtIndex, (, 1, ), ., children, (, )]
[callback, ., getChildAtIndex, (, 1, )]
[callback]
[1]
[requiresNode, !=, null, ?, requiresNode, ., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, )]
[requiresNode, !=, null]
[requiresNode]
[null]
[requiresNode, ., children, (, ), ., iterator, (, )]
[requiresNode, ., children, (, )]
[requiresNode]
[Iterators, ., <, Node, >, emptyIterator, (, )]
[Iterators]
[paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, )]
[paramList, ., hasNext, (, )]
[paramList]
[requires, ., hasNext, (, )]
[requires]
[paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null]
[paramList, ., hasNext, (, )]
[paramList]
[paramList, ., next, (, )]
[paramList]
[null]
[requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null]
[requires, ., hasNext, (, )]
[requires]
[requires, ., next, (, )]
[requires]
[null]
[handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode, )]
[t]
[defineNode]
[script]
[callback]
[aliasNode]
[modNode]
[null]
[modNode, !=, null]
[modNode]
[null]
[moduleName]
[handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, )]
[t]
[script]
[modNode, ., getString, (, )]
[modNode]
[modNode]
[isVirtualModuleName, (, moduleName, )]
[moduleName]
[aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :, null]
[aliasNode, !=, null]
[aliasNode]
[null]
[aliasNode, ., getString, (, )]
[aliasNode]
[null]
[t, ., getScope, (, )]
[t]
[aliasName, !=, null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, )]
[aliasName, !=, null]
[aliasName]
[null]
[globalScope, ., isDeclared, (, aliasName, ,, true, )]
[globalScope]
[aliasName]
[true]
[true]
[aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex]
[aliasName, +, VAR_RENAME_SUFFIX]
[aliasName]
[VAR_RENAME_SUFFIX]
[renameIndex]
[!, globalScope, ., isDeclared, (, renamed, ,, true, )]
[globalScope, ., isDeclared, (, renamed, ,, true, )]
[globalScope]
[renamed]
[true]
[NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), )]
[NodeTraversal]
[compiler]
[callback]
[new, RenameCallback, (, aliasName, ,, renamed, )]
[aliasName]
[renamed]
[aliasName]
[renamed]
[renameIndex, ++]
[renameIndex]
[moduleName, !=, null]
[moduleName]
[null]
[IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), )]
[IR]
[IR, ., name, (, "require", )]
[IR]
["require"]
[IR, ., string, (, moduleName, )]
[IR]
[moduleName]
[call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[call]
[Node, ., FREE_CALL]
[Node]
[true]
[aliasName, !=, null]
[aliasName]
[null]
[requireNode]
[IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, )]
[IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, )]
[IR]
[IR, ., name, (, aliasName, )]
[IR]
[aliasName]
[call]
[aliasNode]
[requireNode]
[IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, )]
[IR, ., exprResult, (, call, )]
[IR]
[call]
[modNode]
[isVirtualModuleName, (, aliasName, )]
[aliasName]
[requireNode]
[IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, )]
[IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), )]
[IR]
[IR, ., name, (, aliasName, )]
[IR]
[aliasName]
[IR, ., nullNode, (, )]
[IR]
[aliasNode]
[script, ., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), )]
[script]
[requireNode]
[defineNode, ., getParent, (, )]
[defineNode]
[moduleName, ., contains, (, "!", )]
[moduleName]
["!"]
[t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, )]
[t]
[modNode]
[REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING]
[moduleName]
[moduleName, ., indexOf, (, '?', )]
[moduleName]
['?']
[condition, >, 0]
[condition]
[0]
[moduleName, ., contains, (, ":", )]
[moduleName]
[":"]
[null]
[handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, )]
[t]
[script]
[moduleName, ., substring, (, condition, +, 1, )]
[moduleName]
[condition, +, 1]
[condition]
[1]
[modNode]
[moduleName]
[null]
[moduleName]
[script, ., getIndexOfChild, (, defineParent, )]
[script]
[defineParent]
[script, ., removeChild, (, defineParent, )]
[script]
[defineParent]
[callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, )]
[callbackBlock, ., getParent, (, )]
[callbackBlock]
[callbackBlock]
[script, ., getChildAtIndex, (, curIndex, )]
[script]
[curIndex]
[before, !=, null]
[before]
[null]
[script, ., addChildBefore, (, callbackBlock, ,, before, )]
[script]
[callbackBlock]
[before]
[script, ., addChildToBack, (, callbackBlock, )]
[script]
[callbackBlock]
[NodeUtil, ., tryMergeBlock, (, callbackBlock, )]
[NodeUtil]
[callbackBlock]
[n, ., isReturn, (, ), &&, n, ., hasChildren, (, )]
[n, ., isReturn, (, )]
[n]
[n, ., hasChildren, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., removeChild, (, retVal, )]
[n]
[retVal]
[parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), )]
[parent]
[n]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, )]
[IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), )]
[IR]
[IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, )]
[IR]
[IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), )]
[IR]
[IR, ., name, (, "module", )]
[IR]
["module"]
[IR, ., string, (, "exports", )]
[IR]
["exports"]
[retVal]
[n]
[this, ., from]
[this]
[from]
[this, ., to]
[this]
[to]
[n, ., isName, (, ), &&, from, ., equals, (, n, ., getString, (, ), )]
[n, ., isName, (, )]
[n]
[from, ., equals, (, n, ., getString, (, ), )]
[from]
[n, ., getString, (, )]
[n]
[n, ., setString, (, to, )]
[n]
[to]
[n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, )]
[n]
[Node, ., ORIGINALNAME_PROP]
[Node]
[from]
