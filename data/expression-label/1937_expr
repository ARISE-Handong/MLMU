[new, Node, (, Token, ., EMPTY, )]
[Token, ., EMPTY]
[Token]
[Preconditions, ., checkState, (, name, ., isName, (, ), )]
[Preconditions]
[name, ., isName, (, )]
[name]
[Preconditions, ., checkState, (, params, ., isParamList, (, ), )]
[Preconditions]
[params, ., isParamList, (, )]
[params]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[new, Node, (, Token, ., FUNCTION, ,, name, ,, params, ,, body, )]
[Token, ., FUNCTION]
[Token]
[name]
[params]
[body]
[new, Node, (, Token, ., PARAM_LIST, )]
[Token, ., PARAM_LIST]
[Token]
[Preconditions, ., checkState, (, param, ., isName, (, ), )]
[Preconditions]
[param, ., isName, (, )]
[param]
[new, Node, (, Token, ., PARAM_LIST, ,, param, )]
[Token, ., PARAM_LIST]
[Token]
[param]
[paramList, (, )]
[params]
[Preconditions, ., checkState, (, param, ., isName, (, ), )]
[Preconditions]
[param, ., isName, (, )]
[param]
[paramList, ., addChildToBack, (, param, )]
[paramList]
[param]
[paramList]
[paramList, (, )]
[params]
[Preconditions, ., checkState, (, param, ., isName, (, ), )]
[Preconditions]
[param, ., isName, (, )]
[param]
[paramList, ., addChildToBack, (, param, )]
[paramList]
[param]
[paramList]
[new, Node, (, Token, ., BLOCK, )]
[Token, ., BLOCK]
[Token]
[block]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), )]
[Preconditions]
[mayBeStatement, (, stmt, )]
[stmt]
[new, Node, (, Token, ., BLOCK, ,, stmt, )]
[Token, ., BLOCK]
[Token]
[stmt]
[block]
[block, (, )]
[stmts]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), )]
[Preconditions]
[mayBeStatement, (, stmt, )]
[stmt]
[block, ., addChildToBack, (, stmt, )]
[block]
[stmt]
[block]
[block, (, )]
[stmts]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), )]
[Preconditions]
[mayBeStatement, (, stmt, )]
[stmt]
[paramList, ., addChildToBack, (, stmt, )]
[paramList]
[stmt]
[paramList]
[new, Node, (, Token, ., BLOCK, ,, stmt, )]
[Token, ., BLOCK]
[Token]
[stmt]
[new, Node, (, Token, ., SCRIPT, )]
[Token, ., SCRIPT]
[Token]
[block]
[script, (, )]
[stmts]
[Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), )]
[Preconditions]
[mayBeStatementNoReturn, (, stmt, )]
[stmt]
[block, ., addChildToBack, (, stmt, )]
[block]
[stmt]
[block]
[script, (, )]
[stmts]
[Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), )]
[Preconditions]
[mayBeStatementNoReturn, (, stmt, )]
[stmt]
[paramList, ., addChildToBack, (, stmt, )]
[paramList]
[stmt]
[paramList]
[Preconditions, ., checkState, (, name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), )]
[Preconditions]
[name, ., isName, (, ), &&, !, name, ., hasChildren, (, )]
[name, ., isName, (, )]
[name]
[!, name, ., hasChildren, (, )]
[name, ., hasChildren, (, )]
[name]
[Preconditions, ., checkState, (, mayBeExpression, (, value, ), )]
[Preconditions]
[mayBeExpression, (, value, )]
[value]
[name, ., addChildToFront, (, value, )]
[name]
[value]
[var, (, name, )]
[name]
[Preconditions, ., checkState, (, name, ., isName, (, ), )]
[Preconditions]
[name, ., isName, (, )]
[name]
[new, Node, (, Token, ., VAR, ,, name, )]
[Token, ., VAR]
[Token]
[name]
[new, Node, (, Token, ., RETURN, )]
[Token, ., RETURN]
[Token]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[new, Node, (, Token, ., RETURN, ,, expr, )]
[Token, ., RETURN]
[Token]
[expr]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[new, Node, (, Token, ., THROW, ,, expr, )]
[Token, ., THROW]
[Token]
[expr]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[new, Node, (, Token, ., EXPR_RESULT, ,, expr, )]
[Token, ., EXPR_RESULT]
[Token]
[expr]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[Preconditions, ., checkState, (, then, ., isBlock, (, ), )]
[Preconditions]
[then, ., isBlock, (, )]
[then]
[new, Node, (, Token, ., IF, ,, cond, ,, then, )]
[Token, ., IF]
[Token]
[cond]
[then]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[Preconditions, ., checkState, (, then, ., isBlock, (, ), )]
[Preconditions]
[then, ., isBlock, (, )]
[then]
[Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), )]
[Preconditions]
[elseNode, ., isBlock, (, )]
[elseNode]
[new, Node, (, Token, ., IF, ,, cond, ,, then, ,, elseNode, )]
[Token, ., IF]
[Token]
[cond]
[then]
[elseNode]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[new, Node, (, Token, ., DO, ,, body, ,, cond, )]
[Token, ., DO]
[Token]
[body]
[cond]
[Preconditions, ., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), )]
[Preconditions]
[target, ., isVar, (, ), ||, mayBeExpression, (, target, )]
[target, ., isVar, (, )]
[target]
[mayBeExpression, (, target, )]
[target]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[new, Node, (, Token, ., FOR, ,, target, ,, cond, ,, body, )]
[Token, ., FOR]
[Token]
[target]
[cond]
[body]
[Preconditions, ., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), )]
[Preconditions]
[init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, )]
[init, ., isVar, (, )]
[init]
[mayBeExpressionOrEmpty, (, init, )]
[init]
[Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), )]
[Preconditions]
[mayBeExpressionOrEmpty, (, cond, )]
[cond]
[Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), )]
[Preconditions]
[mayBeExpressionOrEmpty, (, incr, )]
[incr]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[new, Node, (, Token, ., FOR, ,, init, ,, cond, ,, incr, ,, body, )]
[Token, ., FOR]
[Token]
[init]
[cond]
[incr]
[body]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[new, Node, (, Token, ., SWITCH, ,, cond, )]
[Token, ., SWITCH]
[Token]
[cond]
[cases]
[Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), )]
[Preconditions]
[caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, )]
[caseNode, ., isCase, (, )]
[caseNode]
[caseNode, ., isDefaultCase, (, )]
[caseNode]
[switchNode, ., addChildToBack, (, caseNode, )]
[switchNode]
[caseNode]
[switchNode]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, )]
[body]
[Node, ., SYNTHETIC_BLOCK_PROP]
[Node]
[true]
[new, Node, (, Token, ., CASE, ,, expr, ,, body, )]
[Token, ., CASE]
[Token]
[expr]
[body]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, )]
[body]
[Node, ., SYNTHETIC_BLOCK_PROP]
[Node]
[true]
[new, Node, (, Token, ., DEFAULT_CASE, ,, body, )]
[Token, ., DEFAULT_CASE]
[Token]
[body]
[Preconditions, ., checkState, (, name, ., isLabelName, (, ), )]
[Preconditions]
[name, ., isLabelName, (, )]
[name]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), )]
[Preconditions]
[mayBeStatement, (, stmt, )]
[stmt]
[new, Node, (, Token, ., LABEL, ,, name, ,, stmt, )]
[Token, ., LABEL]
[Token]
[name]
[stmt]
[block]
[Preconditions, ., checkState, (, !, name, ., isEmpty, (, ), )]
[Preconditions]
[!, name, ., isEmpty, (, )]
[name, ., isEmpty, (, )]
[name]
[Node, ., newString, (, Token, ., LABEL_NAME, ,, name, )]
[Node]
[Token, ., LABEL_NAME]
[Token]
[name]
[Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), )]
[Preconditions]
[tryBody, ., isBlock, (, )]
[tryBody]
[Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), )]
[Preconditions]
[finallyBody, ., isBlock, (, )]
[finallyBody]
[block, (, ), ., copyInformationFrom, (, tryBody, )]
[block, (, )]
[tryBody]
[new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ,, finallyBody, )]
[Token, ., TRY]
[Token]
[tryBody]
[catchBody]
[finallyBody]
[Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), )]
[Preconditions]
[tryBody, ., isBlock, (, )]
[tryBody]
[Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), )]
[Preconditions]
[catchNode, ., isCatch, (, )]
[catchNode]
[blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, )]
[blockUnchecked, (, catchNode, )]
[catchNode]
[catchNode]
[new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, )]
[Token, ., TRY]
[Token]
[tryBody]
[catchBody]
[Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), )]
[Preconditions]
[finallyBody, ., isBlock, (, )]
[finallyBody]
[tryCatch, (, tryBody, ,, catchNode, )]
[tryBody]
[catchNode]
[tryNode, ., addChildToBack, (, finallyBody, )]
[tryNode]
[finallyBody]
[tryNode]
[Preconditions, ., checkState, (, expr, ., isName, (, ), )]
[Preconditions]
[expr, ., isName, (, )]
[expr]
[Preconditions, ., checkState, (, body, ., isBlock, (, ), )]
[Preconditions]
[body, ., isBlock, (, )]
[body]
[new, Node, (, Token, ., CATCH, ,, expr, ,, body, )]
[Token, ., CATCH]
[Token]
[expr]
[body]
[new, Node, (, Token, ., BREAK, )]
[Token, ., BREAK]
[Token]
[Preconditions, ., checkState, (, name, ., isLabelName, (, ), )]
[Preconditions]
[name, ., isLabelName, (, )]
[name]
[new, Node, (, Token, ., BREAK, ,, name, )]
[Token, ., BREAK]
[Token]
[name]
[new, Node, (, Token, ., CONTINUE, )]
[Token, ., CONTINUE]
[Token]
[Preconditions, ., checkState, (, name, ., isLabelName, (, ), )]
[Preconditions]
[name, ., isLabelName, (, )]
[name]
[new, Node, (, Token, ., CONTINUE, ,, name, )]
[Token, ., CONTINUE]
[Token]
[name]
[new, Node, (, Token, ., CALL, ,, target, )]
[Token, ., CALL]
[Token]
[target]
[args]
[Preconditions, ., checkState, (, mayBeExpression, (, arg, ), )]
[Preconditions]
[mayBeExpression, (, arg, )]
[arg]
[call, ., addChildToBack, (, arg, )]
[call]
[arg]
[call]
[new, Node, (, Token, ., NEW, ,, target, )]
[Token, ., NEW]
[Token]
[target]
[args]
[Preconditions, ., checkState, (, mayBeExpression, (, arg, ), )]
[Preconditions]
[mayBeExpression, (, arg, )]
[arg]
[newcall, ., addChildToBack, (, arg, )]
[newcall]
[arg]
[newcall]
[Node, ., newString, (, Token, ., NAME, ,, name, )]
[Node]
[Token, ., NAME]
[Token]
[name]
[Preconditions, ., checkState, (, mayBeExpression, (, target, ), )]
[Preconditions]
[mayBeExpression, (, target, )]
[target]
[Preconditions, ., checkState, (, prop, ., isString, (, ), )]
[Preconditions]
[prop, ., isString, (, )]
[prop]
[new, Node, (, Token, ., GETPROP, ,, target, ,, prop, )]
[Token, ., GETPROP]
[Token]
[target]
[prop]
[Preconditions, ., checkState, (, mayBeExpression, (, target, ), )]
[Preconditions]
[mayBeExpression, (, target, )]
[target]
[Preconditions, ., checkState, (, mayBeExpression, (, elem, ), )]
[Preconditions]
[mayBeExpression, (, elem, )]
[elem]
[new, Node, (, Token, ., GETELEM, ,, target, ,, elem, )]
[Token, ., GETELEM]
[Token]
[target]
[elem]
[Preconditions, ., checkState, (, isAssignmentTarget, (, target, ), )]
[Preconditions]
[isAssignmentTarget, (, target, )]
[target]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[new, Node, (, Token, ., ASSIGN, ,, target, ,, expr, )]
[Token, ., ASSIGN]
[Token]
[target]
[expr]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), )]
[Preconditions]
[mayBeExpression, (, cond, )]
[cond]
[Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), )]
[Preconditions]
[mayBeExpression, (, trueval, )]
[trueval]
[Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), )]
[Preconditions]
[mayBeExpression, (, falseval, )]
[falseval]
[new, Node, (, Token, ., HOOK, ,, cond, ,, trueval, ,, falseval, )]
[Token, ., HOOK]
[Token]
[cond]
[trueval]
[falseval]
[binaryOp, (, Token, ., COMMA, ,, expr1, ,, expr2, )]
[Token, ., COMMA]
[Token]
[expr1]
[expr2]
[binaryOp, (, Token, ., AND, ,, expr1, ,, expr2, )]
[Token, ., AND]
[Token]
[expr1]
[expr2]
[binaryOp, (, Token, ., OR, ,, expr1, ,, expr2, )]
[Token, ., OR]
[Token]
[expr1]
[expr2]
[unaryOp, (, Token, ., NOT, ,, expr1, )]
[Token, ., NOT]
[Token]
[expr1]
[binaryOp, (, Token, ., EQ, ,, expr1, ,, expr2, )]
[Token, ., EQ]
[Token]
[expr1]
[expr2]
[binaryOp, (, Token, ., SHEQ, ,, expr1, ,, expr2, )]
[Token, ., SHEQ]
[Token]
[expr1]
[expr2]
[unaryOp, (, Token, ., VOID, ,, expr1, )]
[Token, ., VOID]
[Token]
[expr1]
[unaryOp, (, Token, ., NEG, ,, expr1, )]
[Token, ., NEG]
[Token]
[expr1]
[unaryOp, (, Token, ., POS, ,, expr1, )]
[Token, ., POS]
[Token]
[expr1]
[binaryOp, (, Token, ., ADD, ,, expr1, ,, expr2, )]
[Token, ., ADD]
[Token]
[expr1]
[expr2]
[binaryOp, (, Token, ., SUB, ,, expr1, ,, expr2, )]
[Token, ., SUB]
[Token]
[expr1]
[expr2]
[new, Node, (, Token, ., OBJECTLIT, )]
[Token, ., OBJECTLIT]
[Token]
[propdefs]
[Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), )]
[Preconditions]
[propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, )]
[propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, )]
[propdef, ., isStringKey, (, )]
[propdef]
[propdef, ., isGetterDef, (, )]
[propdef]
[propdef, ., isSetterDef, (, )]
[propdef]
[Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), )]
[Preconditions]
[propdef, ., hasOneChild, (, )]
[propdef]
[objectlit, ., addChildToBack, (, propdef, )]
[objectlit]
[propdef]
[objectlit]
[Preconditions, ., checkState, (, string, ., isStringKey, (, ), )]
[Preconditions]
[string, ., isStringKey, (, )]
[string]
[Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), )]
[Preconditions]
[!, string, ., hasChildren, (, )]
[string, ., hasChildren, (, )]
[string]
[Preconditions, ., checkState, (, mayBeExpression, (, value, ), )]
[Preconditions]
[mayBeExpression, (, value, )]
[value]
[string, ., addChildToFront, (, value, )]
[string]
[value]
[string]
[new, Node, (, Token, ., ARRAYLIT, )]
[Token, ., ARRAYLIT]
[Token]
[exprs]
[Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), )]
[Preconditions]
[mayBeExpressionOrEmpty, (, expr, )]
[expr]
[arraylit, ., addChildToBack, (, expr, )]
[arraylit]
[expr]
[arraylit]
[Preconditions, ., checkState, (, expr, ., isString, (, ), )]
[Preconditions]
[expr, ., isString, (, )]
[expr]
[new, Node, (, Token, ., REGEXP, ,, expr, )]
[Token, ., REGEXP]
[Token]
[expr]
[Preconditions, ., checkState, (, expr, ., isString, (, ), )]
[Preconditions]
[expr, ., isString, (, )]
[expr]
[Preconditions, ., checkState, (, flags, ., isString, (, ), )]
[Preconditions]
[flags, ., isString, (, )]
[flags]
[new, Node, (, Token, ., REGEXP, ,, expr, ,, flags, )]
[Token, ., REGEXP]
[Token]
[expr]
[flags]
[Node, ., newString, (, s, )]
[Node]
[s]
[Node, ., newString, (, Token, ., STRING_KEY, ,, s, )]
[Node]
[Token, ., STRING_KEY]
[Token]
[s]
[Node, ., newNumber, (, d, )]
[Node]
[d]
[new, Node, (, Token, ., THIS, )]
[Token, ., THIS]
[Token]
[new, Node, (, Token, ., TRUE, )]
[Token, ., TRUE]
[Token]
[new, Node, (, Token, ., FALSE, )]
[Token, ., FALSE]
[Token]
[new, Node, (, Token, ., NULL, )]
[Token, ., NULL]
[Token]
[Preconditions, ., checkState, (, mayBeExpression, (, expr1, ), )]
[Preconditions]
[mayBeExpression, (, expr1, )]
[expr1]
[Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), )]
[Preconditions]
[mayBeExpression, (, expr2, )]
[expr2]
[new, Node, (, token, ,, expr1, ,, expr2, )]
[token]
[expr1]
[expr2]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), )]
[Preconditions]
[mayBeExpression, (, expr, )]
[expr]
[new, Node, (, token, ,, expr, )]
[token]
[expr]
[n, ., isEmpty, (, ), ||, mayBeExpression, (, n, )]
[n, ., isEmpty, (, )]
[n]
[mayBeExpression, (, n, )]
[n]
[n, ., isName, (, ), ||, n, ., isGetProp, (, ), ||, n, ., isGetElem, (, )]
[n, ., isName, (, ), ||, n, ., isGetProp, (, )]
[n, ., isName, (, )]
[n]
[n, ., isGetProp, (, )]
[n]
[n, ., isGetElem, (, )]
[n]
[n, ., getType, (, )]
[n]
[Token, ., EMPTY]
[Token]
[Token, ., FUNCTION]
[Token]
[true]
[Token, ., BLOCK]
[Token]
[Token, ., BREAK]
[Token]
[Token, ., CONST]
[Token]
[Token, ., CONTINUE]
[Token]
[Token, ., DEBUGGER]
[Token]
[Token, ., DO]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[Token, ., FOR]
[Token]
[Token, ., IF]
[Token]
[Token, ., LABEL]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., THROW]
[Token]
[Token, ., TRY]
[Token]
[Token, ., VAR]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., WITH]
[Token]
[true]
[false]
[!, mayBeStatementNoReturn, (, n, )]
[mayBeStatementNoReturn, (, n, )]
[n]
[n, ., isReturn, (, )]
[n]
[true]
[n, ., getType, (, )]
[n]
[Token, ., FUNCTION]
[Token]
[true]
[Token, ., ADD]
[Token]
[Token, ., AND]
[Token]
[Token, ., ARRAYLIT]
[Token]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., CALL]
[Token]
[Token, ., COMMA]
[Token]
[Token, ., DEC]
[Token]
[Token, ., DELPROP]
[Token]
[Token, ., DIV]
[Token]
[Token, ., EQ]
[Token]
[Token, ., FALSE]
[Token]
[Token, ., GE]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[Token, ., GT]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., IN]
[Token]
[Token, ., INC]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., LE]
[Token]
[Token, ., LSH]
[Token]
[Token, ., LT]
[Token]
[Token, ., MOD]
[Token]
[Token, ., MUL]
[Token]
[Token, ., NAME]
[Token]
[Token, ., NE]
[Token]
[Token, ., NEG]
[Token]
[Token, ., NEW]
[Token]
[Token, ., NOT]
[Token]
[Token, ., NUMBER]
[Token]
[Token, ., NULL]
[Token]
[Token, ., OBJECTLIT]
[Token]
[Token, ., OR]
[Token]
[Token, ., POS]
[Token]
[Token, ., REGEXP]
[Token]
[Token, ., RSH]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., STRING]
[Token]
[Token, ., SUB]
[Token]
[Token, ., THIS]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., TRUE]
[Token]
[Token, ., URSH]
[Token]
[Token, ., VOID]
[Token]
[true]
[false]
