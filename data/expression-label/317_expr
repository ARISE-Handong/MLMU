[0x8000001]
[new, double, [, arr, ., length, ]]
[arr, ., length]
[arr]
[0]
[i, <, arr, ., length]
[i]
[arr, ., length]
[arr]
[i, ++]
[i]
[newArr, [, i, ]]
[newArr]
[i]
[arr, [, i, ], *, val]
[arr, [, i, ]]
[arr]
[i]
[val]
[newArr]
[0]
[i, <, arr, ., length]
[i]
[arr, ., length]
[arr]
[i, ++]
[i]
[arr, [, i, ]]
[arr]
[i]
[val]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[a, ., clone, (, )]
[a]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[i, ++]
[i]
[result, [, i, ]]
[result]
[i]
[b, [, i, ]]
[b]
[i]
[result]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[a, ., clone, (, )]
[a]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[i, ++]
[i]
[result, [, i, ]]
[result]
[i]
[b, [, i, ]]
[b]
[i]
[result]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[a, ., clone, (, )]
[a]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[i, ++]
[i]
[result, [, i, ]]
[result]
[i]
[b, [, i, ]]
[b]
[i]
[result]
[a, ., length, !=, b, ., length]
[a, ., length]
[a]
[b, ., length]
[b]
[new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[a, ., length]
[a]
[b, ., length]
[b]
[a, ., clone, (, )]
[a]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[i, ++]
[i]
[result, [, i, ]]
[result]
[i]
[b, [, i, ]]
[b]
[i]
[result]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[sum]
[FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], )]
[FastMath]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[sum]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[sum]
[FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], )]
[FastMath]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[sum]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[sum]
[dp, *, dp]
[dp]
[dp]
[FastMath, ., sqrt, (, sum, )]
[FastMath]
[sum]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[sum]
[dp, *, dp]
[dp]
[dp]
[FastMath, ., sqrt, (, sum, )]
[FastMath]
[sum]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[max]
[FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), )]
[FastMath]
[max]
[FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], )]
[FastMath]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[max]
[0]
[0]
[i, <, p1, ., length]
[i]
[p1, ., length]
[p1]
[i, ++]
[i]
[max]
[FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), )]
[FastMath]
[max]
[FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], )]
[FastMath]
[p1, [, i, ], -, p2, [, i, ]]
[p1, [, i, ]]
[p1]
[i]
[p2, [, i, ]]
[p2]
[i]
[max]
[val, [, 0, ]]
[val]
[0]
[val, ., length]
[val]
[1]
[i, <, max]
[i]
[max]
[i, ++]
[i]
[dir]
[INCREASING]
[comp]
[previous, ., compareTo, (, val, [, i, ], )]
[previous]
[val, [, i, ]]
[val]
[i]
[strict]
[comp, >=, 0]
[comp]
[0]
[false]
[comp, >, 0]
[comp]
[0]
[false]
[DECREASING]
[comp]
[val, [, i, ], ., compareTo, (, previous, )]
[val, [, i, ]]
[val]
[i]
[previous]
[strict]
[comp, >=, 0]
[comp]
[0]
[false]
[comp, >, 0]
[comp]
[0]
[false]
[new, MathInternalError, (, )]
[previous]
[val, [, i, ]]
[val]
[i]
[true]
[checkOrder, (, val, ,, dir, ,, strict, ,, false, )]
[val]
[dir]
[strict]
[false]
[val, [, 0, ]]
[val]
[0]
[val, ., length]
[val]
[index]
[1]
[index, <, max]
[index]
[max]
[index, ++]
[index]
[dir]
[INCREASING]
[strict]
[val, [, index, ], <=, previous]
[val, [, index, ]]
[val]
[index]
[previous]
[val, [, index, ], <, previous]
[val, [, index, ]]
[val]
[index]
[previous]
[DECREASING]
[strict]
[val, [, index, ], >=, previous]
[val, [, index, ]]
[val]
[index]
[previous]
[val, [, index, ], >, previous]
[val, [, index, ]]
[val]
[index]
[previous]
[new, MathInternalError, (, )]
[previous]
[val, [, index, ]]
[val]
[index]
[index, ==, max]
[index]
[max]
[true]
[abort]
[new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,, dir, ,, strict, )]
[val, [, index, ]]
[val]
[index]
[previous]
[index]
[dir]
[strict]
[false]
[checkOrder, (, val, ,, dir, ,, strict, ,, true, )]
[val]
[dir]
[strict]
[true]
[checkOrder, (, val, ,, OrderDirection, ., INCREASING, ,, true, )]
[val]
[OrderDirection, ., INCREASING]
[OrderDirection]
[true]
[MathUtils, ., checkNotNull, (, in, )]
[MathUtils]
[in]
[1]
[i, <, in, ., length]
[i]
[in, ., length]
[in]
[i, ++]
[i]
[in, [, i, ], ., length, !=, in, [, 0, ], ., length]
[in, [, i, ], ., length]
[in, [, i, ]]
[in]
[i]
[in, [, 0, ], ., length]
[in, [, 0, ]]
[in]
[0]
[new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in, [, 0, ], ., length, )]
[LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS]
[LocalizedFormats]
[in, [, i, ], ., length]
[in, [, i, ]]
[in]
[i]
[in, [, 0, ], ., length]
[in, [, 0, ]]
[in]
[0]
[0]
[i, <, in, ., length]
[i]
[in, ., length]
[in]
[i, ++]
[i]
[in, [, i, ], <=, 0]
[in, [, i, ]]
[in]
[i]
[0]
[new, NotStrictlyPositiveException, (, in, [, i, ], )]
[in, [, i, ]]
[in]
[i]
[0]
[i, <, in, ., length]
[i]
[in, ., length]
[in]
[i, ++]
[i]
[in, [, i, ], <, 0]
[in, [, i, ]]
[in]
[i]
[0]
[new, NotPositiveException, (, in, [, i, ], )]
[in, [, i, ]]
[in]
[i]
[0]
[i, <, in, ., length]
[i]
[in, ., length]
[in]
[i, ++]
[i]
[0]
[j, <, in, [, i, ], ., length]
[j]
[in, [, i, ], ., length]
[in, [, i, ]]
[in]
[i]
[j, ++]
[j]
[in, [, i, ], [, j, ], <, 0]
[in, [, i, ], [, j, ]]
[in, [, i, ]]
[in]
[i]
[j]
[0]
[new, NotPositiveException, (, in, [, i, ], [, j, ], )]
[in, [, i, ], [, j, ]]
[in, [, i, ]]
[in]
[i]
[j]
[3.834e-20]
[1.304e+19]
[0]
[0]
[0]
[0]
[0]
[v, ., length]
[v]
[rgiant, /, floatn]
[rgiant]
[floatn]
[0]
[i, <, v, ., length]
[i]
[v, ., length]
[v]
[i, ++]
[i]
[Math, ., abs, (, v, [, i, ], )]
[Math]
[v, [, i, ]]
[v]
[i]
[xabs, <, rdwarf, ||, xabs, >, agiant]
[xabs, <, rdwarf]
[xabs]
[rdwarf]
[xabs, >, agiant]
[xabs]
[agiant]
[xabs, >, rdwarf]
[xabs]
[rdwarf]
[xabs, >, x1max]
[xabs]
[x1max]
[x1max, /, xabs]
[x1max]
[xabs]
[s1]
[1, +, s1, *, r, *, r]
[1]
[s1, *, r, *, r]
[s1, *, r]
[s1]
[r]
[r]
[x1max]
[xabs]
[xabs, /, x1max]
[xabs]
[x1max]
[s1]
[r, *, r]
[r]
[r]
[xabs, >, x3max]
[xabs]
[x3max]
[x3max, /, xabs]
[x3max]
[xabs]
[s3]
[1, +, s3, *, r, *, r]
[1]
[s3, *, r, *, r]
[s3, *, r]
[s3]
[r]
[r]
[x3max]
[xabs]
[xabs, !=, 0]
[xabs]
[0]
[xabs, /, x3max]
[xabs]
[x3max]
[s3]
[r, *, r]
[r]
[r]
[s2]
[xabs, *, xabs]
[xabs]
[xabs]
[s1, !=, 0]
[s1]
[0]
[norm]
[x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, )]
[x1max]
[Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, )]
[Math]
[s1, +, (, s2, /, x1max, ), /, x1max]
[s1]
[(, s2, /, x1max, ), /, x1max]
[(, s2, /, x1max, )]
[s2, /, x1max]
[s2]
[x1max]
[x1max]
[s2, ==, 0]
[s2]
[0]
[norm]
[x3max, *, Math, ., sqrt, (, s3, )]
[x3max]
[Math, ., sqrt, (, s3, )]
[Math]
[s3]
[s2, >=, x3max]
[s2]
[x3max]
[norm]
[Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), )]
[Math]
[s2, *, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), )]
[s2]
[(, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), )]
[1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, )]
[1]
[(, x3max, /, s2, ), *, (, x3max, *, s3, )]
[(, x3max, /, s2, )]
[x3max, /, s2]
[x3max]
[s2]
[(, x3max, *, s3, )]
[x3max, *, s3]
[x3max]
[s3]
[norm]
[Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), ), )]
[Math]
[x3max, *, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), )]
[x3max]
[(, (, s2, /, x3max, ), +, (, x3max, *, s3, ), )]
[(, s2, /, x3max, ), +, (, x3max, *, s3, )]
[(, s2, /, x3max, )]
[s2, /, x3max]
[s2]
[x3max]
[(, x3max, *, s3, )]
[x3max, *, s3]
[x3max]
[s3]
[norm]
[sortInPlace, (, x, ,, OrderDirection, ., INCREASING, ,, yList, )]
[x]
[OrderDirection, ., INCREASING]
[OrderDirection]
[yList]
[x, ==, null]
[x]
[null]
[new, NullArgumentException, (, )]
[yList, ., length]
[yList]
[x, ., length]
[x]
[0]
[j, <, yListLen]
[j]
[yListLen]
[j, ++]
[j]
[yList, [, j, ]]
[yList]
[j]
[y, ==, null]
[y]
[null]
[new, NullArgumentException, (, )]
[y, ., length, !=, len]
[y, ., length]
[y]
[len]
[new, DimensionMismatchException, (, y, ., length, ,, len, )]
[y, ., length]
[y]
[len]
[new, ArrayList, <, Pair, <, Double, ,, Integer, >, >, (, len, )]
[len]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,, i, ), )]
[list]
[new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,, i, )]
[x, [, i, ]]
[x]
[i]
[i]
[dir, ==, MathArrays, ., OrderDirection, ., INCREASING, ?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o1, ., getKey, (, ), ., compareTo, (, o2, ., getKey, (, ), ), ;, }, }, :, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o2, ., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }]
[dir, ==, MathArrays, ., OrderDirection, ., INCREASING]
[dir]
[MathArrays, ., OrderDirection, ., INCREASING]
[MathArrays, ., OrderDirection]
[MathArrays]
[new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o1, ., getKey, (, ), ., compareTo, (, o2, ., getKey, (, ), ), ;, }, }]
[o1, ., getKey, (, ), ., compareTo, (, o2, ., getKey, (, ), )]
[o1, ., getKey, (, )]
[o1]
[o2, ., getKey, (, )]
[o2]
[new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o2, ., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }]
[o2, ., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), )]
[o2, ., getKey, (, )]
[o2]
[o1, ., getKey, (, )]
[o1]
[Collections, ., sort, (, list, ,, comp, )]
[Collections]
[list]
[comp]
[new, int, [, len, ]]
[len]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[list, ., get, (, i, )]
[list]
[i]
[x, [, i, ]]
[x]
[i]
[e, ., getKey, (, )]
[e]
[indices, [, i, ]]
[indices]
[i]
[e, ., getValue, (, )]
[e]
[0]
[j, <, yListLen]
[j]
[yListLen]
[j, ++]
[j]
[yList, [, j, ]]
[yList]
[j]
[yInPlace, ., clone, (, )]
[yInPlace]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[yInPlace, [, i, ]]
[yInPlace]
[i]
[yOrig, [, indices, [, i, ], ]]
[yOrig]
[indices, [, i, ]]
[indices]
[i]
[copyOf, (, source, ,, source, ., length, )]
[source]
[source, ., length]
[source]
[copyOf, (, source, ,, source, ., length, )]
[source]
[source, ., length]
[source]
[new, int, [, len, ]]
[len]
[System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), )]
[System]
[source]
[0]
[output]
[0]
[FastMath, ., min, (, len, ,, source, ., length, )]
[FastMath]
[len]
[source, ., length]
[source]
[output]
[new, double, [, len, ]]
[len]
[System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), )]
[System]
[source]
[0]
[output]
[0]
[FastMath, ., min, (, len, ,, source, ., length, )]
[FastMath]
[len]
[source, ., length]
[source]
[output]
[a, ., length]
[a]
[len, !=, b, ., length]
[len]
[b, ., length]
[b]
[new, DimensionMismatchException, (, len, ,, b, ., length, )]
[len]
[b, ., length]
[b]
[len, ==, 1]
[len]
[1]
[a, [, 0, ], *, b, [, 0, ]]
[a, [, 0, ]]
[a]
[0]
[b, [, 0, ]]
[b]
[0]
[new, double, [, len, ]]
[len]
[0]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[a, [, i, ]]
[a]
[i]
[SPLIT_FACTOR, *, ai]
[SPLIT_FACTOR]
[ai]
[ca, -, (, ca, -, ai, )]
[ca]
[(, ca, -, ai, )]
[ca, -, ai]
[ca]
[ai]
[ai, -, aHigh]
[ai]
[aHigh]
[b, [, i, ]]
[b]
[i]
[SPLIT_FACTOR, *, bi]
[SPLIT_FACTOR]
[bi]
[cb, -, (, cb, -, bi, )]
[cb]
[(, cb, -, bi, )]
[cb, -, bi]
[cb]
[bi]
[bi, -, bHigh]
[bi]
[bHigh]
[prodHigh, [, i, ]]
[prodHigh]
[i]
[ai, *, bi]
[ai]
[bi]
[aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, )]
[aLow, *, bLow]
[aLow]
[bLow]
[(, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, )]
[(, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow]
[(, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, )]
[(, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh]
[(, prodHigh, [, i, ], -, aHigh, *, bHigh, )]
[prodHigh, [, i, ], -, aHigh, *, bHigh]
[prodHigh, [, i, ]]
[prodHigh]
[i]
[aHigh, *, bHigh]
[aHigh]
[bHigh]
[aLow, *, bHigh]
[aLow]
[bHigh]
[aHigh, *, bLow]
[aHigh]
[bLow]
[prodLowSum]
[prodLow]
[prodHigh, [, 0, ]]
[prodHigh]
[0]
[prodHigh, [, 1, ]]
[prodHigh]
[1]
[prodHighCur, +, prodHighNext]
[prodHighCur]
[prodHighNext]
[sHighPrev, -, prodHighNext]
[sHighPrev]
[prodHighNext]
[(, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, )]
[(, prodHighNext, -, (, sHighPrev, -, sPrime, ), )]
[prodHighNext, -, (, sHighPrev, -, sPrime, )]
[prodHighNext]
[(, sHighPrev, -, sPrime, )]
[sHighPrev, -, sPrime]
[sHighPrev]
[sPrime]
[(, prodHighCur, -, sPrime, )]
[prodHighCur, -, sPrime]
[prodHighCur]
[sPrime]
[len, -, 1]
[len]
[1]
[1]
[i, <, lenMinusOne]
[i]
[lenMinusOne]
[i, ++]
[i]
[prodHighNext]
[prodHigh, [, i, +, 1, ]]
[prodHigh]
[i, +, 1]
[i]
[1]
[sHighPrev, +, prodHighNext]
[sHighPrev]
[prodHighNext]
[sPrime]
[sHighCur, -, prodHighNext]
[sHighCur]
[prodHighNext]
[sLowSum]
[(, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, )]
[(, prodHighNext, -, (, sHighCur, -, sPrime, ), )]
[prodHighNext, -, (, sHighCur, -, sPrime, )]
[prodHighNext]
[(, sHighCur, -, sPrime, )]
[sHighCur, -, sPrime]
[sHighCur]
[sPrime]
[(, sHighPrev, -, sPrime, )]
[sHighPrev, -, sPrime]
[sHighPrev]
[sPrime]
[sHighPrev]
[sHighCur]
[sHighPrev, +, (, prodLowSum, +, sLowSum, )]
[sHighPrev]
[(, prodLowSum, +, sLowSum, )]
[prodLowSum, +, sLowSum]
[prodLowSum]
[sLowSum]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[result]
[0]
[0]
[i, <, len]
[i]
[len]
[++, i]
[i]
[result]
[a, [, i, ], *, b, [, i, ]]
[a, [, i, ]]
[a]
[i]
[b, [, i, ]]
[b]
[i]
[result]
[SPLIT_FACTOR, *, a1]
[SPLIT_FACTOR]
[a1]
[ca1, -, (, ca1, -, a1, )]
[ca1]
[(, ca1, -, a1, )]
[ca1, -, a1]
[ca1]
[a1]
[a1, -, a1High]
[a1]
[a1High]
[SPLIT_FACTOR, *, b1]
[SPLIT_FACTOR]
[b1]
[cb1, -, (, cb1, -, b1, )]
[cb1]
[(, cb1, -, b1, )]
[cb1, -, b1]
[cb1]
[b1]
[b1, -, b1High]
[b1]
[b1High]
[a1, *, b1]
[a1]
[b1]
[a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[a1Low, *, b1Low]
[a1Low]
[b1Low]
[(, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, )]
[(, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High]
[(, prod1High, -, a1High, *, b1High, )]
[prod1High, -, a1High, *, b1High]
[prod1High]
[a1High, *, b1High]
[a1High]
[b1High]
[a1Low, *, b1High]
[a1Low]
[b1High]
[a1High, *, b1Low]
[a1High]
[b1Low]
[SPLIT_FACTOR, *, a2]
[SPLIT_FACTOR]
[a2]
[ca2, -, (, ca2, -, a2, )]
[ca2]
[(, ca2, -, a2, )]
[ca2, -, a2]
[ca2]
[a2]
[a2, -, a2High]
[a2]
[a2High]
[SPLIT_FACTOR, *, b2]
[SPLIT_FACTOR]
[b2]
[cb2, -, (, cb2, -, b2, )]
[cb2]
[(, cb2, -, b2, )]
[cb2, -, b2]
[cb2]
[b2]
[b2, -, b2High]
[b2]
[b2High]
[a2, *, b2]
[a2]
[b2]
[a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[a2Low, *, b2Low]
[a2Low]
[b2Low]
[(, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, )]
[(, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High]
[(, prod2High, -, a2High, *, b2High, )]
[prod2High, -, a2High, *, b2High]
[prod2High]
[a2High, *, b2High]
[a2High]
[b2High]
[a2Low, *, b2High]
[a2Low]
[b2High]
[a2High, *, b2Low]
[a2High]
[b2Low]
[prod1High, +, prod2High]
[prod1High]
[prod2High]
[s12High, -, prod2High]
[s12High]
[prod2High]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[(, prod2High, -, (, s12High, -, s12Prime, ), )]
[prod2High, -, (, s12High, -, s12Prime, )]
[prod2High]
[(, s12High, -, s12Prime, )]
[s12High, -, s12Prime]
[s12High]
[s12Prime]
[(, prod1High, -, s12Prime, )]
[prod1High, -, s12Prime]
[prod1High]
[s12Prime]
[s12High, +, (, prod1Low, +, prod2Low, +, s12Low, )]
[s12High]
[(, prod1Low, +, prod2Low, +, s12Low, )]
[prod1Low, +, prod2Low, +, s12Low]
[prod1Low, +, prod2Low]
[prod1Low]
[prod2Low]
[s12Low]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[result]
[a1, *, b1, +, a2, *, b2]
[a1, *, b1]
[a1]
[b1]
[a2, *, b2]
[a2]
[b2]
[result]
[SPLIT_FACTOR, *, a1]
[SPLIT_FACTOR]
[a1]
[ca1, -, (, ca1, -, a1, )]
[ca1]
[(, ca1, -, a1, )]
[ca1, -, a1]
[ca1]
[a1]
[a1, -, a1High]
[a1]
[a1High]
[SPLIT_FACTOR, *, b1]
[SPLIT_FACTOR]
[b1]
[cb1, -, (, cb1, -, b1, )]
[cb1]
[(, cb1, -, b1, )]
[cb1, -, b1]
[cb1]
[b1]
[b1, -, b1High]
[b1]
[b1High]
[a1, *, b1]
[a1]
[b1]
[a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[a1Low, *, b1Low]
[a1Low]
[b1Low]
[(, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, )]
[(, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High]
[(, prod1High, -, a1High, *, b1High, )]
[prod1High, -, a1High, *, b1High]
[prod1High]
[a1High, *, b1High]
[a1High]
[b1High]
[a1Low, *, b1High]
[a1Low]
[b1High]
[a1High, *, b1Low]
[a1High]
[b1Low]
[SPLIT_FACTOR, *, a2]
[SPLIT_FACTOR]
[a2]
[ca2, -, (, ca2, -, a2, )]
[ca2]
[(, ca2, -, a2, )]
[ca2, -, a2]
[ca2]
[a2]
[a2, -, a2High]
[a2]
[a2High]
[SPLIT_FACTOR, *, b2]
[SPLIT_FACTOR]
[b2]
[cb2, -, (, cb2, -, b2, )]
[cb2]
[(, cb2, -, b2, )]
[cb2, -, b2]
[cb2]
[b2]
[b2, -, b2High]
[b2]
[b2High]
[a2, *, b2]
[a2]
[b2]
[a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[a2Low, *, b2Low]
[a2Low]
[b2Low]
[(, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, )]
[(, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High]
[(, prod2High, -, a2High, *, b2High, )]
[prod2High, -, a2High, *, b2High]
[prod2High]
[a2High, *, b2High]
[a2High]
[b2High]
[a2Low, *, b2High]
[a2Low]
[b2High]
[a2High, *, b2Low]
[a2High]
[b2Low]
[SPLIT_FACTOR, *, a3]
[SPLIT_FACTOR]
[a3]
[ca3, -, (, ca3, -, a3, )]
[ca3]
[(, ca3, -, a3, )]
[ca3, -, a3]
[ca3]
[a3]
[a3, -, a3High]
[a3]
[a3High]
[SPLIT_FACTOR, *, b3]
[SPLIT_FACTOR]
[b3]
[cb3, -, (, cb3, -, b3, )]
[cb3]
[(, cb3, -, b3, )]
[cb3, -, b3]
[cb3]
[b3]
[b3, -, b3High]
[b3]
[b3High]
[a3, *, b3]
[a3]
[b3]
[a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[a3Low, *, b3Low]
[a3Low]
[b3Low]
[(, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[(, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low]
[(, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, )]
[(, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High]
[(, prod3High, -, a3High, *, b3High, )]
[prod3High, -, a3High, *, b3High]
[prod3High]
[a3High, *, b3High]
[a3High]
[b3High]
[a3Low, *, b3High]
[a3Low]
[b3High]
[a3High, *, b3Low]
[a3High]
[b3Low]
[prod1High, +, prod2High]
[prod1High]
[prod2High]
[s12High, -, prod2High]
[s12High]
[prod2High]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[(, prod2High, -, (, s12High, -, s12Prime, ), )]
[prod2High, -, (, s12High, -, s12Prime, )]
[prod2High]
[(, s12High, -, s12Prime, )]
[s12High, -, s12Prime]
[s12High]
[s12Prime]
[(, prod1High, -, s12Prime, )]
[prod1High, -, s12Prime]
[prod1High]
[s12Prime]
[s12High, +, prod3High]
[s12High]
[prod3High]
[s123High, -, prod3High]
[s123High]
[prod3High]
[(, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[(, prod3High, -, (, s123High, -, s123Prime, ), )]
[prod3High, -, (, s123High, -, s123Prime, )]
[prod3High]
[(, s123High, -, s123Prime, )]
[s123High, -, s123Prime]
[s123High]
[s123Prime]
[(, s12High, -, s123Prime, )]
[s12High, -, s123Prime]
[s12High]
[s123Prime]
[s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, )]
[s123High]
[(, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, )]
[prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low]
[prod1Low, +, prod2Low, +, prod3Low, +, s12Low]
[prod1Low, +, prod2Low, +, prod3Low]
[prod1Low, +, prod2Low]
[prod1Low]
[prod2Low]
[prod3Low]
[s12Low]
[s123Low]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[result]
[a1, *, b1, +, a2, *, b2, +, a3, *, b3]
[a1, *, b1, +, a2, *, b2]
[a1, *, b1]
[a1]
[b1]
[a2, *, b2]
[a2]
[b2]
[a3, *, b3]
[a3]
[b3]
[result]
[SPLIT_FACTOR, *, a1]
[SPLIT_FACTOR]
[a1]
[ca1, -, (, ca1, -, a1, )]
[ca1]
[(, ca1, -, a1, )]
[ca1, -, a1]
[ca1]
[a1]
[a1, -, a1High]
[a1]
[a1High]
[SPLIT_FACTOR, *, b1]
[SPLIT_FACTOR]
[b1]
[cb1, -, (, cb1, -, b1, )]
[cb1]
[(, cb1, -, b1, )]
[cb1, -, b1]
[cb1]
[b1]
[b1, -, b1High]
[b1]
[b1High]
[a1, *, b1]
[a1]
[b1]
[a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[a1Low, *, b1Low]
[a1Low]
[b1Low]
[(, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low]
[(, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, )]
[(, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High]
[(, prod1High, -, a1High, *, b1High, )]
[prod1High, -, a1High, *, b1High]
[prod1High]
[a1High, *, b1High]
[a1High]
[b1High]
[a1Low, *, b1High]
[a1Low]
[b1High]
[a1High, *, b1Low]
[a1High]
[b1Low]
[SPLIT_FACTOR, *, a2]
[SPLIT_FACTOR]
[a2]
[ca2, -, (, ca2, -, a2, )]
[ca2]
[(, ca2, -, a2, )]
[ca2, -, a2]
[ca2]
[a2]
[a2, -, a2High]
[a2]
[a2High]
[SPLIT_FACTOR, *, b2]
[SPLIT_FACTOR]
[b2]
[cb2, -, (, cb2, -, b2, )]
[cb2]
[(, cb2, -, b2, )]
[cb2, -, b2]
[cb2]
[b2]
[b2, -, b2High]
[b2]
[b2High]
[a2, *, b2]
[a2]
[b2]
[a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[a2Low, *, b2Low]
[a2Low]
[b2Low]
[(, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low]
[(, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, )]
[(, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High]
[(, prod2High, -, a2High, *, b2High, )]
[prod2High, -, a2High, *, b2High]
[prod2High]
[a2High, *, b2High]
[a2High]
[b2High]
[a2Low, *, b2High]
[a2Low]
[b2High]
[a2High, *, b2Low]
[a2High]
[b2Low]
[SPLIT_FACTOR, *, a3]
[SPLIT_FACTOR]
[a3]
[ca3, -, (, ca3, -, a3, )]
[ca3]
[(, ca3, -, a3, )]
[ca3, -, a3]
[ca3]
[a3]
[a3, -, a3High]
[a3]
[a3High]
[SPLIT_FACTOR, *, b3]
[SPLIT_FACTOR]
[b3]
[cb3, -, (, cb3, -, b3, )]
[cb3]
[(, cb3, -, b3, )]
[cb3, -, b3]
[cb3]
[b3]
[b3, -, b3High]
[b3]
[b3High]
[a3, *, b3]
[a3]
[b3]
[a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[a3Low, *, b3Low]
[a3Low]
[b3Low]
[(, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[(, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low]
[(, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, )]
[(, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High]
[(, prod3High, -, a3High, *, b3High, )]
[prod3High, -, a3High, *, b3High]
[prod3High]
[a3High, *, b3High]
[a3High]
[b3High]
[a3Low, *, b3High]
[a3Low]
[b3High]
[a3High, *, b3Low]
[a3High]
[b3Low]
[SPLIT_FACTOR, *, a4]
[SPLIT_FACTOR]
[a4]
[ca4, -, (, ca4, -, a4, )]
[ca4]
[(, ca4, -, a4, )]
[ca4, -, a4]
[ca4]
[a4]
[a4, -, a4High]
[a4]
[a4High]
[SPLIT_FACTOR, *, b4]
[SPLIT_FACTOR]
[b4]
[cb4, -, (, cb4, -, b4, )]
[cb4]
[(, cb4, -, b4, )]
[cb4, -, b4]
[cb4]
[b4]
[b4, -, b4High]
[b4]
[b4High]
[a4, *, b4]
[a4]
[b4]
[a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, )]
[a4Low, *, b4Low]
[a4Low]
[b4Low]
[(, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, )]
[(, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low]
[(, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, )]
[(, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High]
[(, prod4High, -, a4High, *, b4High, )]
[prod4High, -, a4High, *, b4High]
[prod4High]
[a4High, *, b4High]
[a4High]
[b4High]
[a4Low, *, b4High]
[a4Low]
[b4High]
[a4High, *, b4Low]
[a4High]
[b4Low]
[prod1High, +, prod2High]
[prod1High]
[prod2High]
[s12High, -, prod2High]
[s12High]
[prod2High]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[(, prod2High, -, (, s12High, -, s12Prime, ), )]
[prod2High, -, (, s12High, -, s12Prime, )]
[prod2High]
[(, s12High, -, s12Prime, )]
[s12High, -, s12Prime]
[s12High]
[s12Prime]
[(, prod1High, -, s12Prime, )]
[prod1High, -, s12Prime]
[prod1High]
[s12Prime]
[s12High, +, prod3High]
[s12High]
[prod3High]
[s123High, -, prod3High]
[s123High]
[prod3High]
[(, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[(, prod3High, -, (, s123High, -, s123Prime, ), )]
[prod3High, -, (, s123High, -, s123Prime, )]
[prod3High]
[(, s123High, -, s123Prime, )]
[s123High, -, s123Prime]
[s123High]
[s123Prime]
[(, s12High, -, s123Prime, )]
[s12High, -, s123Prime]
[s12High]
[s123Prime]
[s123High, +, prod4High]
[s123High]
[prod4High]
[s1234High, -, prod4High]
[s1234High]
[prod4High]
[(, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, )]
[(, prod4High, -, (, s1234High, -, s1234Prime, ), )]
[prod4High, -, (, s1234High, -, s1234Prime, )]
[prod4High]
[(, s1234High, -, s1234Prime, )]
[s1234High, -, s1234Prime]
[s1234High]
[s1234Prime]
[(, s123High, -, s1234Prime, )]
[s123High, -, s1234Prime]
[s123High]
[s1234Prime]
[s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, )]
[s1234High]
[(, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, )]
[prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low]
[prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low]
[prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low]
[prod1Low, +, prod2Low, +, prod3Low, +, prod4Low]
[prod1Low, +, prod2Low, +, prod3Low]
[prod1Low, +, prod2Low]
[prod1Low]
[prod2Low]
[prod3Low]
[prod4Low]
[s12Low]
[s123Low]
[s1234Low]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[result]
[a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4]
[a1, *, b1, +, a2, *, b2, +, a3, *, b3]
[a1, *, b1, +, a2, *, b2]
[a1, *, b1]
[a1]
[b1]
[a2, *, b2]
[a2]
[b2]
[a3, *, b3]
[a3]
[b3]
[a4, *, b4]
[a4]
[b4]
[result]
[(, x, ==, null, ), ||, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[!, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, x, ==, null, ), ^, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[x, ., length, !=, y, ., length]
[x, ., length]
[x]
[y, ., length]
[y]
[false]
[0]
[i, <, x, ., length]
[i]
[x, ., length]
[x]
[++, i]
[i]
[!, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], )]
[Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], )]
[Precision]
[x, [, i, ]]
[x]
[i]
[y, [, i, ]]
[y]
[i]
[false]
[true]
[(, x, ==, null, ), ||, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[!, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, x, ==, null, ), ^, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[x, ., length, !=, y, ., length]
[x, ., length]
[x]
[y, ., length]
[y]
[false]
[0]
[i, <, x, ., length]
[i]
[x, ., length]
[x]
[++, i]
[i]
[!, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], )]
[Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], )]
[Precision]
[x, [, i, ]]
[x]
[i]
[y, [, i, ]]
[y]
[i]
[false]
[true]
[(, x, ==, null, ), ||, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[!, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, x, ==, null, ), ^, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[x, ., length, !=, y, ., length]
[x, ., length]
[x]
[y, ., length]
[y]
[false]
[0]
[i, <, x, ., length]
[i]
[x, ., length]
[x]
[++, i]
[i]
[!, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], )]
[Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], )]
[Precision]
[x, [, i, ]]
[x]
[i]
[y, [, i, ]]
[y]
[i]
[false]
[true]
[(, x, ==, null, ), ||, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[!, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[(, x, ==, null, ), ^, (, y, ==, null, )]
[(, x, ==, null, )]
[x, ==, null]
[x]
[null]
[(, y, ==, null, )]
[y, ==, null]
[y]
[null]
[x, ., length, !=, y, ., length]
[x, ., length]
[x]
[y, ., length]
[y]
[false]
[0]
[i, <, x, ., length]
[i]
[x, ., length]
[x]
[++, i]
[i]
[!, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], )]
[Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], )]
[Precision]
[x, [, i, ]]
[x]
[i]
[y, [, i, ]]
[y]
[i]
[false]
[true]
[Double, ., isInfinite, (, normalizedSum, )]
[Double]
[normalizedSum]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, )]
[LocalizedFormats, ., NORMALIZE_INFINITE]
[LocalizedFormats]
[Double, ., isNaN, (, normalizedSum, )]
[Double]
[normalizedSum]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, )]
[LocalizedFormats, ., NORMALIZE_NAN]
[LocalizedFormats]
[0d]
[values, ., length]
[values]
[new, double, [, len, ]]
[len]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[Double, ., isInfinite, (, values, [, i, ], )]
[Double]
[values, [, i, ]]
[values]
[i]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, )]
[LocalizedFormats, ., INFINITE_ARRAY_ELEMENT]
[LocalizedFormats]
[values, [, i, ]]
[values]
[i]
[i]
[!, Double, ., isNaN, (, values, [, i, ], )]
[Double, ., isNaN, (, values, [, i, ], )]
[Double]
[values, [, i, ]]
[values]
[i]
[sum]
[values, [, i, ]]
[values]
[i]
[sum, ==, 0]
[sum]
[0]
[new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, )]
[LocalizedFormats, ., ARRAY_SUMS_TO_ZERO]
[LocalizedFormats]
[0]
[i, <, len]
[i]
[len]
[i, ++]
[i]
[Double, ., isNaN, (, values, [, i, ], )]
[Double]
[values, [, i, ]]
[values]
[i]
[out, [, i, ]]
[out]
[i]
[Double, ., NaN]
[Double]
[out, [, i, ]]
[out]
[i]
[values, [, i, ], *, normalizedSum, /, sum]
[values, [, i, ], *, normalizedSum]
[values, [, i, ]]
[values]
[i]
[normalizedSum]
[sum]
[out]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, )]
[Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, )]
[Array]
[field, ., getRuntimeClass, (, )]
[field]
[length]
[Arrays, ., fill, (, array, ,, field, ., getZero, (, ), )]
[Arrays]
[array]
[field, ., getZero, (, )]
[field]
[array]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[columns, <, 0]
[columns]
[0]
[buildArray, (, field, ,, 0, )]
[field]
[0]
[array]
[(, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, )]
[Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, )]
[Array]
[dummyRow, ., getClass, (, )]
[dummyRow]
[rows]
[array]
[(, T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,, columns, }, )]
[Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,, columns, }, )]
[Array]
[field, ., getRuntimeClass, (, )]
[field]
[new, int, [, ], {, rows, ,, columns, }]
[{, rows, ,, columns, }]
[rows]
[columns]
[0]
[i, <, rows]
[i]
[rows]
[++, i]
[i]
[Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), )]
[Arrays]
[array, [, i, ]]
[array]
[i]
[field, ., getZero, (, )]
[field]
[array]
[MathUtils, ., checkNotNull, (, x, )]
[MathUtils]
[x]
[MathUtils, ., checkNotNull, (, h, )]
[MathUtils]
[h]
[x, ., length]
[x]
[h, ., length]
[h]
[xLen, ==, 0, ||, hLen, ==, 0]
[xLen, ==, 0]
[xLen]
[0]
[hLen, ==, 0]
[hLen]
[0]
[new, NoDataException, (, )]
[xLen, +, hLen, -, 1]
[xLen, +, hLen]
[xLen]
[hLen]
[1]
[new, double, [, totalLength, ]]
[totalLength]
[0]
[n, <, totalLength]
[n]
[totalLength]
[n, ++]
[n]
[0]
[FastMath, ., max, (, 0, ,, n, +, 1, -, xLen, )]
[FastMath]
[0]
[n, +, 1, -, xLen]
[n, +, 1]
[n]
[1]
[xLen]
[n, -, k]
[n]
[k]
[k, <, hLen, &&, j, >=, 0]
[k, <, hLen]
[k]
[hLen]
[j, >=, 0]
[j]
[0]
[yn]
[x, [, j, --, ], *, h, [, k, ++, ]]
[x, [, j, --, ]]
[x]
[j, --]
[j]
[h, [, k, ++, ]]
[h]
[k, ++]
[k]
[y, [, n, ]]
[y]
[n]
[yn]
[y]
[shuffle, (, list, ,, start, ,, pos, ,, new, Well19937c, (, ), )]
[list]
[start]
[pos]
[new, Well19937c, (, )]
[pos]
[TAIL]
[list, ., length, -, 1]
[list, ., length]
[list]
[1]
[i, >=, start]
[i]
[start]
[i, --]
[i]
[i, ==, start]
[i]
[start]
[target]
[start]
[target]
[new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, )]
[new, UniformIntegerDistribution, (, rng, ,, start, ,, i, )]
[rng]
[start]
[i]
[list, [, target, ]]
[list]
[target]
[list, [, target, ]]
[list]
[target]
[list, [, i, ]]
[list]
[i]
[list, [, i, ]]
[list]
[i]
[temp]
[HEAD]
[0]
[i, <=, start]
[i]
[start]
[i, ++]
[i]
[i, ==, start]
[i]
[start]
[target]
[start]
[target]
[new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, )]
[new, UniformIntegerDistribution, (, rng, ,, i, ,, start, )]
[rng]
[i]
[start]
[list, [, target, ]]
[list]
[target]
[list, [, target, ]]
[list]
[target]
[list, [, i, ]]
[list]
[i]
[list, [, i, ]]
[list]
[i]
[temp]
[new, MathInternalError, (, )]
[shuffle, (, list, ,, 0, ,, Position, ., TAIL, ,, rng, )]
[list]
[0]
[Position, ., TAIL]
[Position]
[rng]
[shuffle, (, list, ,, new, Well19937c, (, ), )]
[list]
[new, Well19937c, (, )]
