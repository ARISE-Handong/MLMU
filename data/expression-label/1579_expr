[new, LinkedHashMap, <, String, ,, Var, >, (, )]
[new, Predicate, <, Var, >, (, ), {, @, Override, public, boolean, apply, (, Var, var, ), {, return, var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, ), ;, }, }]
[var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, ), &&, !, var, ., isExtern, (, )]
[var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null, &&, var, ., getParentNode, (, ), ., isVar, (, )]
[var, ., getParentNode, (, ), !=, null, &&, var, ., getType, (, ), ==, null]
[var, ., getParentNode, (, ), !=, null]
[var, ., getParentNode, (, )]
[var]
[null]
[var, ., getType, (, ), ==, null]
[var, ., getType, (, )]
[var]
[null]
[var, ., getParentNode, (, ), ., isVar, (, )]
[var, ., getParentNode, (, )]
[var]
[!, var, ., isExtern, (, )]
[var, ., isExtern, (, )]
[var]
[false]
[false]
[this, ., name]
[this]
[name]
[this, ., nameNode]
[this]
[nameNode]
[this, ., type]
[this]
[type]
[this, ., scope]
[this]
[scope]
[this, ., index]
[this]
[index]
[this, ., input]
[this]
[input]
[this, ., typeInferred]
[this]
[inferred]
[name]
[nameNode]
[input]
[nameNode, ., getStaticSourceFile, (, )]
[nameNode]
[this]
[nameNode, ==, null, ?, null, :, this]
[nameNode, ==, null]
[nameNode]
[null]
[null]
[this]
[nameNode, ==, null, ?, null, :, nameNode, ., getParent, (, )]
[nameNode, ==, null]
[nameNode]
[null]
[null]
[nameNode, ., getParent, (, )]
[nameNode]
[NodeUtil, ., isFunctionExpression, (, getParentNode, (, ), )]
[NodeUtil]
[getParentNode, (, )]
[scope]
[scope, ., isGlobal, (, )]
[scope]
[scope, ., isLocal, (, )]
[scope]
[input, ==, null, ||, input, ., isExtern, (, )]
[input, ==, null]
[input]
[null]
[input, ., isExtern, (, )]
[input]
[nameNode, !=, null, &&, NodeUtil, ., isConstantName, (, nameNode, )]
[nameNode, !=, null]
[nameNode]
[null]
[NodeUtil, ., isConstantName, (, nameNode, )]
[NodeUtil]
[nameNode]
[getJSDocInfo, (, )]
[info, !=, null, &&, info, ., isDefine, (, )]
[info, !=, null]
[info]
[null]
[info, ., isDefine, (, )]
[info]
[NodeUtil, ., getRValueOfLValue, (, nameNode, )]
[NodeUtil]
[nameNode]
[type]
[nameNode]
[nameNode, ==, null, ?, null, :, NodeUtil, ., getBestJSDocInfo, (, nameNode, )]
[nameNode, ==, null]
[nameNode]
[null]
[null]
[NodeUtil, ., getBestJSDocInfo, (, nameNode, )]
[NodeUtil]
[nameNode]
[Preconditions, ., checkState, (, isTypeInferred, (, ), )]
[Preconditions]
[isTypeInferred, (, )]
[this, ., type]
[this]
[type]
[type, !=, null]
[type]
[null]
[type]
[type, ., resolve, (, errorReporter, ,, scope, )]
[type]
[errorReporter]
[scope]
[typeInferred]
[input, ==, null]
[input]
[null]
["<non-file>"]
[input, ., getName, (, )]
[input]
[getJSDocInfo, (, )]
[info, !=, null, &&, info, ., isNoShadow, (, )]
[info, !=, null]
[info]
[null]
[info, ., isNoShadow, (, )]
[info]
[!, (, other, instanceof, Var, )]
[(, other, instanceof, Var, )]
[other, instanceof, Var]
[other]
[false]
[(, Var, ), other]
[other]
[otherVar, ., nameNode, ==, nameNode]
[otherVar, ., nameNode]
[otherVar]
[nameNode]
[nameNode, ., hashCode, (, )]
[nameNode]
["Scope.Var ", +, name, +, "{", +, type, +, "}"]
["Scope.Var ", +, name, +, "{", +, type]
["Scope.Var ", +, name, +, "{"]
["Scope.Var ", +, name]
["Scope.Var "]
[name]
["{"]
[type]
["}"]
[markedEscaped]
[true]
[markedEscaped]
[markedAssignedExactlyOnce]
[true]
[markedAssignedExactlyOnce]
[false]
["arguments"]
[null]
[null]
[scope]
[-, 1]
[1]
[null]
[!, (, other, instanceof, Arguments, )]
[(, other, instanceof, Arguments, )]
[other, instanceof, Arguments]
[other]
[false]
[(, Arguments, ), other]
[other]
[otherVar, ., scope, ., getRootNode, (, ), ==, scope, ., getRootNode, (, )]
[otherVar, ., scope, ., getRootNode, (, )]
[otherVar, ., scope]
[otherVar]
[scope, ., getRootNode, (, )]
[scope]
[System, ., identityHashCode, (, this, )]
[System]
[this]
[Preconditions, ., checkNotNull, (, parent, )]
[Preconditions]
[parent]
[Preconditions, ., checkArgument, (, rootNode, !=, parent, ., rootNode, )]
[Preconditions]
[rootNode, !=, parent, ., rootNode]
[rootNode]
[parent, ., rootNode]
[parent]
[this, ., parent]
[this]
[parent]
[this, ., rootNode]
[this]
[rootNode]
[this, ., isBottom]
[this]
[false]
[this, ., depth]
[this]
[parent, ., depth, +, 1]
[parent, ., depth]
[parent]
[1]
[this, ., parent]
[this]
[null]
[this, ., rootNode]
[this]
[rootNode]
[this, ., isBottom]
[this]
[isBottom]
[this, ., depth]
[this]
[0]
[new, Scope, (, rootNode, ,, false, )]
[rootNode]
[false]
[new, Scope, (, rootNode, ,, true, )]
[rootNode]
[true]
[depth]
[isBottom]
[rootNode]
[parent]
[this]
[result, ., getParent, (, ), !=, null]
[result, ., getParent, (, )]
[result]
[null]
[result]
[result, ., getParent, (, )]
[result]
[result]
[parent]
[isGlobal, (, )]
[ObjectType, ., cast, (, rootNode, ., getJSType, (, ), )]
[ObjectType]
[rootNode, ., getJSType, (, )]
[rootNode]
[Preconditions, ., checkState, (, rootNode, ., isFunction, (, ), )]
[Preconditions]
[rootNode, ., isFunction, (, )]
[rootNode]
[rootNode, ., getJSType, (, )]
[rootNode]
[nodeType, !=, null, &&, nodeType, ., isFunctionType, (, )]
[nodeType, !=, null]
[nodeType]
[null]
[nodeType, ., isFunctionType, (, )]
[nodeType]
[nodeType, ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, )]
[nodeType, ., toMaybeFunctionType, (, )]
[nodeType]
[parent, ., getTypeOfThis, (, )]
[parent]
[declare, (, name, ,, nameNode, ,, type, ,, input, ,, true, )]
[name]
[nameNode]
[type]
[input]
[true]
[Preconditions, ., checkState, (, name, !=, null, &&, name, ., length, (, ), >, 0, )]
[Preconditions]
[name, !=, null, &&, name, ., length, (, ), >, 0]
[name, !=, null]
[name]
[null]
[name, ., length, (, ), >, 0]
[name, ., length, (, )]
[name]
[0]
[Preconditions, ., checkState, (, vars, ., get, (, name, ), ==, null, )]
[Preconditions]
[vars, ., get, (, name, ), ==, null]
[vars, ., get, (, name, )]
[vars]
[name]
[null]
[new, Var, (, inferred, ,, name, ,, nameNode, ,, type, ,, this, ,, vars, ., size, (, ), ,, input, )]
[inferred]
[name]
[nameNode]
[type]
[this]
[vars, ., size, (, )]
[vars]
[input]
[vars, ., put, (, name, ,, var, )]
[vars]
[name]
[var]
[var]
[Preconditions, ., checkState, (, var, ., scope, ==, this, )]
[Preconditions]
[var, ., scope, ==, this]
[var, ., scope]
[var]
[this]
[Preconditions, ., checkState, (, vars, ., get, (, var, ., name, ), ==, var, )]
[Preconditions]
[vars, ., get, (, var, ., name, ), ==, var]
[vars, ., get, (, var, ., name, )]
[vars]
[var, ., name]
[var]
[var]
[vars, ., remove, (, var, ., name, )]
[vars]
[var, ., name]
[var]
[getVar, (, name, )]
[name]
[vars, ., get, (, name, )]
[vars]
[name]
[vars, ., get, (, name, )]
[vars]
[name]
[var, !=, null]
[var]
[null]
[var]
[parent, !=, null]
[parent]
[null]
[parent, ., getVar, (, name, )]
[parent]
[name]
[null]
[arguments, ==, null]
[arguments]
[null]
[arguments]
[new, Arguments, (, this, )]
[this]
[arguments]
[this]
[scope, ., vars, ., containsKey, (, name, )]
[scope, ., vars]
[scope]
[name]
[true]
[scope, ., parent, !=, null, &&, recurse]
[scope, ., parent, !=, null]
[scope, ., parent]
[scope]
[null]
[recurse]
[scope, ., parent, ., isDeclared, (, name, ,, recurse, )]
[scope, ., parent]
[scope]
[name]
[recurse]
[false]
[vars, ., values, (, ), ., iterator, (, )]
[vars, ., values, (, )]
[vars]
[vars, ., values, (, )]
[vars]
[ImmutableList, ., of, (, var, )]
[ImmutableList]
[var]
[var, ., scope]
[var]
[Collections, ., unmodifiableCollection, (, vars, ., values, (, ), )]
[Collections]
[vars, ., values, (, )]
[vars]
[vars, ., size, (, )]
[vars]
[parent, ==, null]
[parent]
[null]
[!, isGlobal, (, )]
[isGlobal, (, )]
[Iterators, ., filter, (, getVars, (, ), ,, DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES, )]
[Iterators]
[getVars, (, )]
[DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES]
