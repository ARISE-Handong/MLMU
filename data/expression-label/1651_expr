[new, ArrayList, <, Node, >, (, )]
[new, ArrayList, <, Node, >, (, )]
[new, HashSet, <, String, >, (, )]
[new, HashMap, <, String, ,, String, >, (, )]
[0]
[Sets, ., newHashSet, (, )]
[Sets]
[ArrayListMultimap, ., create, (, )]
[ArrayListMultimap]
[this, ., oldName]
[this]
[name]
[this, ., newName]
[this]
[null]
[this, ., count]
[this]
[0]
[this, ., orderOfOccurrence]
[this]
[assignmentCount, ++]
[assignmentCount]
[Preconditions, ., checkState, (, this, ., newName, ==, null, )]
[Preconditions]
[this, ., newName, ==, null]
[this, ., newName]
[this]
[null]
[this, ., newName]
[this]
[newName]
[new, HashMap, <, String, ,, Assignment, >, (, )]
["L "]
[this, ., compiler]
[this]
[compiler]
[this, ., prefix]
[this]
[prefix, ==, null, ?, "", :, prefix]
[prefix, ==, null]
[prefix]
[null]
[""]
[prefix]
[this, ., localRenamingOnly]
[this]
[localRenamingOnly]
[this, ., preserveFunctionExpressionNames]
[this]
[preserveFunctionExpressionNames]
[generatePseudoNames]
[this, ., pseudoNameMap]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., pseudoNameMap]
[this]
[null]
[this, ., prevUsedRenameMap]
[this]
[prevUsedRenameMap]
[this, ., reservedCharacters]
[this]
[reservedCharacters]
[this, ., shouldShadow]
[this]
[shouldShadow]
[reservedNames, ==, null]
[reservedNames]
[null]
[this, ., reservedNames]
[this]
[Sets, ., newHashSet, (, )]
[Sets]
[this, ., reservedNames]
[this]
[Sets, ., newHashSet, (, reservedNames, )]
[Sets]
[reservedNames]
[isExternsPass_]
[isExterns]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScope, (, ), ., getVars, (, )]
[t, ., getScope, (, )]
[t]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[current, ., isBleedingFunction, (, )]
[current]
[localBleedingFunctions, ., add, (, current, )]
[localBleedingFunctions]
[current]
[localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent, (, ), ,, current, )]
[localBleedingFunctionsPerScope]
[t, ., getScope, (, ), ., getParent, (, )]
[t, ., getScope, (, )]
[t]
[current]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[name, ., length, (, ), ==, 0]
[name, ., length, (, )]
[name]
[0]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[(, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), )]
[(, var, !=, null, ), &&, var, ., isLocal, (, )]
[(, var, !=, null, )]
[var, !=, null]
[var]
[null]
[var, ., isLocal, (, )]
[var]
[(, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), )]
[!, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, )]
[!, var, ., scope, ., getParent, (, ), ., isGlobal, (, )]
[var, ., scope, ., getParent, (, ), ., isGlobal, (, )]
[var, ., scope, ., getParent, (, )]
[var, ., scope]
[var]
[!, var, ., isBleedingFunction, (, )]
[var, ., isBleedingFunction, (, )]
[var]
[!, local, &&, localRenamingOnly]
[!, local]
[local]
[localRenamingOnly]
[reservedNames, ., add, (, name, )]
[reservedNames]
[name]
[preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), )]
[preserveFunctionExpressionNames, &&, var, !=, null]
[preserveFunctionExpressionNames]
[var, !=, null]
[var]
[null]
[NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), )]
[NodeUtil]
[var, ., getParentNode, (, )]
[var]
[reservedNames, ., add, (, name, )]
[reservedNames]
[name]
[!, okToRenameVar, (, name, ,, local, )]
[okToRenameVar, (, name, ,, local, )]
[name]
[local]
[local]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, )]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter]
[MakeDeclaredNamesUnique]
[name]
[!, newName, ., equals, (, name, )]
[newName, ., equals, (, name, )]
[newName]
[name]
[n, ., setString, (, newName, )]
[n]
[newName]
[isExternsPass_]
[!, local]
[local]
[externNames, ., add, (, name, )]
[externNames]
[name]
[pseudoNameMap, !=, null]
[pseudoNameMap]
[null]
[recordPseudoName, (, n, )]
[n]
[local]
[LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, )]
[LOCAL_VAR_PREFIX]
[getLocalVarIndex, (, var, )]
[var]
[incCount, (, tempName, )]
[tempName]
[localNameNodes, ., add, (, n, )]
[localNameNodes]
[n]
[n, ., setString, (, tempName, )]
[n]
[tempName]
[var, !=, null]
[var]
[null]
[incCount, (, name, )]
[name]
[globalNameNodes, ., add, (, n, )]
[globalNameNodes]
[n]
[assignments, ., get, (, name, )]
[assignments]
[name]
[s, ==, null]
[s]
[null]
[s]
[new, Assignment, (, name, )]
[name]
[assignments, ., put, (, name, ,, s, )]
[assignments]
[name]
[s]
[s, ., count, ++]
[s, ., count]
[s]
[new, Comparator, <, Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }]
[a1, ., count, !=, a2, ., count]
[a1, ., count]
[a1]
[a2, ., count]
[a2]
[a2, ., count, -, a1, ., count]
[a2, ., count]
[a2]
[a1, ., count]
[a1]
[ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, )]
[ORDER_OF_OCCURRENCE_COMPARATOR]
[a1]
[a2]
[new, Comparator, <, Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return, a1, ., orderOfOccurrence, -, a2, ., orderOfOccurrence, ;, }, }]
[a1, ., orderOfOccurrence, -, a2, ., orderOfOccurrence]
[a1, ., orderOfOccurrence]
[a1]
[a2, ., orderOfOccurrence]
[a2]
[assignmentLog]
[new, StringBuilder, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, ProcessVars, (, true, )]
[true]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessVars, (, false, )]
[false]
[reservedNames, ., addAll, (, externNames, )]
[reservedNames]
[externNames]
[new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, )]
[FREQUENCY_COMPARATOR]
[varsByFrequency, ., addAll, (, assignments, ., values, (, ), )]
[varsByFrequency]
[assignments, ., values, (, )]
[assignments]
[shouldShadow]
[new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, )]
[new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, )]
[compiler]
[assignments]
[varsByFrequency]
[pseudoNameMap]
[externs]
[root]
[prevUsedRenameMap, !=, null]
[prevUsedRenameMap]
[null]
[reusePreviouslyUsedVariableMap, (, )]
[assignNames, (, varsByFrequency, )]
[varsByFrequency]
[false]
[globalNameNodes]
[getNewGlobalName, (, n, )]
[n]
[newName, !=, null]
[newName]
[null]
[n, ., setString, (, newName, )]
[n]
[newName]
[changed]
[true]
[0]
[localNameNodes]
[getNewLocalName, (, n, )]
[n]
[newName, !=, null]
[newName]
[null]
[n, ., setString, (, newName, )]
[n]
[newName]
[changed]
[true]
[count, ++]
[count]
[changed]
[compiler, ., reportCodeChange, (, )]
[compiler]
[compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, )]
[compiler]
["JS var assignments:\n", +, assignmentLog]
["JS var assignments:\n"]
[assignmentLog]
[assignmentLog]
[null]
[n, ., getString, (, )]
[n]
[assignments, ., get, (, oldName, )]
[assignments]
[oldName]
[a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, )]
[a, ., newName, !=, null]
[a, ., newName]
[a]
[null]
[!, a, ., newName, ., equals, (, oldName, )]
[a, ., newName, ., equals, (, oldName, )]
[a, ., newName]
[a]
[oldName]
[pseudoNameMap, !=, null]
[pseudoNameMap]
[null]
[pseudoNameMap, ., get, (, n, )]
[pseudoNameMap]
[n]
[a, ., newName]
[a]
[null]
[n, ., getString, (, )]
[n]
[assignments, ., get, (, oldTempName, )]
[assignments]
[oldTempName]
[!, a, ., newName, ., equals, (, oldTempName, )]
[a, ., newName, ., equals, (, oldTempName, )]
[a, ., newName]
[a]
[oldTempName]
[pseudoNameMap, !=, null]
[pseudoNameMap]
[null]
[pseudoNameMap, ., get, (, n, )]
[pseudoNameMap]
[n]
[a, ., newName]
[a]
[null]
[pseudoNameMap, ., put, (, n, ,, '$', +, n, ., getString, (, ), +, "$$", )]
[pseudoNameMap]
[n]
['$', +, n, ., getString, (, ), +, "$$"]
['$', +, n, ., getString, (, )]
['$']
[n, ., getString, (, )]
[n]
["$$"]
[assignments, ., values, (, )]
[assignments]
[prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, )]
[prevUsedRenameMap]
[a, ., oldName]
[a]
[prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, )]
[prevNewName, ==, null]
[prevNewName]
[null]
[reservedNames, ., contains, (, prevNewName, )]
[reservedNames]
[prevNewName]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), )]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, )]
[a, ., oldName]
[a]
[LOCAL_VAR_PREFIX]
[(, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), )]
[!, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, )]
[!, externNames, ., contains, (, a, ., oldName, )]
[externNames, ., contains, (, a, ., oldName, )]
[externNames]
[a, ., oldName]
[a]
[prevNewName, ., startsWith, (, prefix, )]
[prevNewName]
[prefix]
[reservedNames, ., add, (, prevNewName, )]
[reservedNames]
[prevNewName]
[finalizeNameAssignment, (, a, ,, prevNewName, )]
[a]
[prevNewName]
[new, NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, )]
[reservedNames]
[prefix]
[reservedCharacters]
[prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[prefix, ., isEmpty, (, )]
[prefix]
[globalNameGenerator]
[new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[reservedNames]
[""]
[reservedCharacters]
[new, ArrayList, <, Assignment, >, (, )]
[new, ArrayList, <, String, >, (, )]
[varsToRename]
[a, ., newName, !=, null]
[a, ., newName]
[a]
[null]
[externNames, ., contains, (, a, ., oldName, )]
[externNames]
[a, ., oldName]
[a]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, )]
[a, ., oldName]
[a]
[LOCAL_VAR_PREFIX]
[newName]
[localNameGenerator, ., generateNextName, (, )]
[localNameGenerator]
[finalizeNameAssignment, (, a, ,, newName, )]
[a]
[newName]
[newName]
[globalNameGenerator, ., generateNextName, (, )]
[globalNameGenerator]
[pendingAssignments, ., add, (, a, )]
[pendingAssignments]
[a]
[generatedNamesForAssignments, ., add, (, newName, )]
[generatedNamesForAssignments]
[newName]
[reservedNames, ., add, (, newName, )]
[reservedNames]
[newName]
[generatedNamesForAssignments, ., size, (, )]
[generatedNamesForAssignments]
[0]
[i, <, numPendingAssignments]
[i]
[numPendingAssignments]
[new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, )]
[ORDER_OF_OCCURRENCE_COMPARATOR]
[generatedNamesForAssignments, ., get, (, i, ), ., length, (, )]
[generatedNamesForAssignments, ., get, (, i, )]
[generatedNamesForAssignments]
[i]
[i]
[j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len]
[j, <, numPendingAssignments]
[j]
[numPendingAssignments]
[generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len]
[generatedNamesForAssignments, ., get, (, j, ), ., length, (, )]
[generatedNamesForAssignments, ., get, (, j, )]
[generatedNamesForAssignments]
[j]
[len]
[j, ++]
[j]
[varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), )]
[varsByOrderOfOccurrence]
[pendingAssignments, ., get, (, j, )]
[pendingAssignments]
[j]
[varsByOrderOfOccurrence]
[finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i, ), )]
[a]
[generatedNamesForAssignments, ., get, (, i, )]
[generatedNamesForAssignments]
[i]
[++, i]
[i]
[a, ., setNewName, (, newName, )]
[a]
[newName]
[renameMap, ., put, (, a, ., oldName, ,, newName, )]
[renameMap]
[a, ., oldName]
[a]
[newName]
[assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, ), ., append, (, '\n', )]
[assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, )]
[assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", )]
[assignmentLog, ., append, (, a, ., oldName, )]
[assignmentLog]
[a, ., oldName]
[a]
[" => "]
[newName]
['\n']
[new, VariableMap, (, ImmutableMap, ., copyOf, (, renameMap, ), )]
[ImmutableMap, ., copyOf, (, renameMap, )]
[ImmutableMap]
[renameMap]
[!, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ,, isLocal, )]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, ,, isLocal, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[isLocal]
[v, ., index]
[v]
[v, ., scope, ., getParent, (, )]
[v, ., scope]
[v]
[s, ==, null]
[s]
[null]
[new, IllegalArgumentException, (, "Var is not local", )]
["Var is not local"]
[s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, )]
[s, ., getParent, (, ), !=, null]
[s, ., getParent, (, )]
[s]
[null]
[localBleedingFunctions, ., contains, (, v, )]
[localBleedingFunctions]
[v]
[s, ., getParent, (, ), !=, null]
[s, ., getParent, (, )]
[s]
[null]
[isBleedingIntoScope]
[num]
[localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +, 1]
[localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, )]
[localBleedingFunctionsPerScope, ., get, (, s, )]
[localBleedingFunctionsPerScope]
[s]
[v]
[1]
[isBleedingIntoScope]
[false]
[num]
[localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, )]
[localBleedingFunctionsPerScope, ., get, (, s, )]
[localBleedingFunctionsPerScope]
[s]
[num]
[s, ., getVarCount, (, )]
[s]
[s]
[s, ., getParent, (, )]
[s]
[num]
