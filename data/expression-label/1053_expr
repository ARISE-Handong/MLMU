[506071142274883745L]
[key, ==, null]
[key]
[null]
[this, ., centerBlock]
[this]
[block]
[(, RectangleEdge, ), key]
[key]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[this, ., topBlock]
[this]
[block]
[edge, ==, RectangleEdge, ., BOTTOM]
[edge]
[RectangleEdge, ., BOTTOM]
[RectangleEdge]
[this, ., bottomBlock]
[this]
[block]
[edge, ==, RectangleEdge, ., LEFT]
[edge]
[RectangleEdge, ., LEFT]
[RectangleEdge]
[this, ., leftBlock]
[this]
[block]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[this, ., rightBlock]
[this]
[block]
[container, ., toContentConstraint, (, constraint, )]
[container]
[constraint]
[null]
[contentConstraint, ., getWidthConstraintType, (, )]
[contentConstraint]
[contentConstraint, ., getHeightConstraintType, (, )]
[contentConstraint]
[w, ==, LengthConstraintType, ., NONE]
[w]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[contentSize]
[arrangeNN, (, container, ,, g2, )]
[container]
[g2]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[new, RuntimeException, (, "Not implemented.", )]
["Not implemented."]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[new, RuntimeException, (, "Not implemented.", )]
["Not implemented."]
[w, ==, LengthConstraintType, ., FIXED]
[w]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[contentSize]
[arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), )]
[container]
[g2]
[constraint, ., getWidth, (, )]
[constraint]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[contentSize]
[arrangeFF, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[contentSize]
[arrangeFR, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[w, ==, LengthConstraintType, ., RANGE]
[w]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[new, RuntimeException, (, "Not implemented.", )]
["Not implemented."]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[new, RuntimeException, (, "Not implemented.", )]
["Not implemented."]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[contentSize]
[arrangeRR, (, container, ,, constraint, ., getWidthRange, (, ), ,, constraint, ., getHeightRange, (, ), ,, g2, )]
[container]
[constraint, ., getWidthRange, (, )]
[constraint]
[constraint, ., getHeightRange, (, )]
[constraint]
[g2]
[new, Size2D, (, container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, container, ., calculateTotalHeight, (, contentSize, ., getHeight, (, ), ), )]
[container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), )]
[container]
[contentSize, ., getWidth, (, )]
[contentSize]
[container, ., calculateTotalHeight, (, contentSize, ., getHeight, (, ), )]
[container]
[contentSize, ., getHeight, (, )]
[contentSize]
[new, double, [, 5, ]]
[5]
[new, double, [, 5, ]]
[5]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[this, ., topBlock]
[this]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[w, [, 0, ]]
[w]
[0]
[size, ., width]
[size]
[h, [, 0, ]]
[h]
[0]
[size, ., height]
[size]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[this, ., bottomBlock]
[this]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[w, [, 1, ]]
[w]
[1]
[size, ., width]
[size]
[h, [, 1, ]]
[h]
[1]
[size, ., height]
[size]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[this, ., leftBlock]
[this]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[w, [, 2, ]]
[w]
[2]
[size, ., width]
[size]
[h, [, 2, ]]
[h]
[2]
[size, ., height]
[size]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[this, ., rightBlock]
[this]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[w, [, 3, ]]
[w]
[3]
[size, ., width]
[size]
[h, [, 3, ]]
[h]
[3]
[size, ., height]
[size]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], )]
[Math]
[h, [, 2, ]]
[h]
[2]
[h, [, 3, ]]
[h]
[3]
[h, [, 3, ]]
[h]
[3]
[h, [, 2, ]]
[h]
[2]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[this, ., centerBlock]
[this]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[w, [, 4, ]]
[w]
[4]
[size, ., width]
[size]
[h, [, 4, ]]
[h]
[4]
[size, ., height]
[size]
[Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), )]
[Math]
[w, [, 0, ]]
[w]
[0]
[Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], )]
[Math]
[w, [, 1, ]]
[w]
[1]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ]]
[w, [, 2, ], +, w, [, 4, ]]
[w, [, 2, ]]
[w]
[2]
[w, [, 4, ]]
[w]
[4]
[w, [, 3, ]]
[w]
[3]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), )]
[Math]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], )]
[Math]
[h, [, 3, ]]
[h]
[3]
[h, [, 4, ]]
[h]
[4]
[h, [, 0, ], +, h, [, 1, ], +, centerHeight]
[h, [, 0, ], +, h, [, 1, ]]
[h, [, 0, ]]
[h]
[0]
[h, [, 1, ]]
[h]
[1]
[centerHeight]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), )]
[this, ., topBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], )]
[0.0]
[0.0]
[width]
[h, [, 0, ]]
[h]
[0]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), )]
[this, ., bottomBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], )]
[0.0]
[height, -, h, [, 1, ]]
[height]
[h, [, 1, ]]
[h]
[1]
[width]
[h, [, 1, ]]
[h]
[1]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, centerHeight, ), )]
[this, ., leftBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, centerHeight, )]
[0.0]
[h, [, 0, ]]
[h]
[0]
[w, [, 2, ]]
[w]
[2]
[centerHeight]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, centerHeight, ), )]
[this, ., rightBlock]
[this]
[new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, centerHeight, )]
[width, -, w, [, 3, ]]
[width]
[w, [, 3, ]]
[w]
[3]
[h, [, 0, ]]
[h]
[0]
[w, [, 3, ]]
[w]
[3]
[centerHeight]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, centerHeight, ), )]
[this, ., centerBlock]
[this]
[new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, centerHeight, )]
[w, [, 2, ]]
[w]
[2]
[h, [, 0, ]]
[h]
[0]
[width, -, w, [, 2, ], -, w, [, 3, ]]
[width, -, w, [, 2, ]]
[width]
[w, [, 2, ]]
[w]
[2]
[w, [, 3, ]]
[w]
[3]
[centerHeight]
[new, Size2D, (, width, ,, height, )]
[width]
[height]
[arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), )]
[container]
[g2]
[constraint, ., getWidth, (, )]
[constraint]
[constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), )]
[constraint, ., getHeightRange, (, )]
[constraint]
[size1, ., getHeight, (, )]
[size1]
[size1]
[constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), )]
[constraint, ., getHeightRange, (, )]
[constraint]
[size1, ., getHeight, (, )]
[size1]
[constraint, ., toFixedHeight, (, h, )]
[constraint]
[h]
[arrange, (, container, ,, g2, ,, c2, )]
[container]
[g2]
[c2]
[new, double, [, 5, ]]
[5]
[new, double, [, 5, ]]
[5]
[new, RectangleConstraint, (, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, )]
[width]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[0.0]
[null]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[this, ., topBlock, ., arrange, (, g2, ,, c1, )]
[this, ., topBlock]
[this]
[g2]
[c1]
[w, [, 0, ]]
[w]
[0]
[size, ., width]
[size]
[h, [, 0, ]]
[h]
[0]
[size, ., height]
[size]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[this, ., bottomBlock, ., arrange, (, g2, ,, c1, )]
[this, ., bottomBlock]
[this]
[g2]
[c1]
[w, [, 1, ]]
[w]
[1]
[size, ., width]
[size]
[h, [, 1, ]]
[h]
[1]
[size, ., height]
[size]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, )]
[0.0]
[new, Range, (, 0.0, ,, width, )]
[0.0]
[width]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[0.0]
[null]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[this, ., leftBlock, ., arrange, (, g2, ,, c2, )]
[this, ., leftBlock]
[this]
[g2]
[c2]
[w, [, 2, ]]
[w]
[2]
[size, ., width]
[size]
[h, [, 2, ]]
[h]
[2]
[size, ., height]
[size]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[Math, ., max, (, width, -, w, [, 2, ], ,, 0.0, )]
[Math]
[width, -, w, [, 2, ]]
[width]
[w, [, 2, ]]
[w]
[2]
[0.0]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, )]
[0.0]
[new, Range, (, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, )]
[Math, ., min, (, w, [, 2, ], ,, maxW, )]
[Math]
[w, [, 2, ]]
[w]
[2]
[maxW]
[maxW]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[0.0]
[null]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[this, ., rightBlock, ., arrange, (, g2, ,, c3, )]
[this, ., rightBlock]
[this]
[g2]
[c3]
[w, [, 3, ]]
[w]
[3]
[size, ., width]
[size]
[h, [, 3, ]]
[h]
[3]
[size, ., height]
[size]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], )]
[Math]
[h, [, 2, ]]
[h]
[2]
[h, [, 3, ]]
[h]
[3]
[h, [, 3, ]]
[h]
[3]
[h, [, 2, ]]
[h]
[2]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[new, RectangleConstraint, (, width, -, w, [, 2, ], -, w, [, 3, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, )]
[width, -, w, [, 2, ], -, w, [, 3, ]]
[width, -, w, [, 2, ]]
[width]
[w, [, 2, ]]
[w]
[2]
[w, [, 3, ]]
[w]
[3]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[0.0]
[null]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[this, ., centerBlock, ., arrange, (, g2, ,, c4, )]
[this, ., centerBlock]
[this]
[g2]
[c4]
[w, [, 4, ]]
[w]
[4]
[size, ., width]
[size]
[h, [, 4, ]]
[h]
[4]
[size, ., height]
[size]
[h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), )]
[h, [, 0, ], +, h, [, 1, ]]
[h, [, 0, ]]
[h]
[0]
[h, [, 1, ]]
[h]
[1]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), )]
[Math]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], )]
[Math]
[h, [, 3, ]]
[h]
[3]
[h, [, 4, ]]
[h]
[4]
[arrange, (, container, ,, g2, ,, new, RectangleConstraint, (, width, ,, height, ), )]
[container]
[g2]
[new, RectangleConstraint, (, width, ,, height, )]
[width]
[height]
[new, double, [, 5, ]]
[5]
[new, double, [, 5, ]]
[5]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[new, RectangleConstraint, (, widthRange, ,, heightRange, )]
[widthRange]
[heightRange]
[this, ., topBlock, ., arrange, (, g2, ,, c1, )]
[this, ., topBlock]
[this]
[g2]
[c1]
[w, [, 0, ]]
[w]
[0]
[size, ., width]
[size]
[h, [, 0, ]]
[h]
[0]
[size, ., height]
[size]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[Range, ., shift, (, heightRange, ,, -, h, [, 0, ], ,, false, )]
[Range]
[heightRange]
[-, h, [, 0, ]]
[h, [, 0, ]]
[h]
[0]
[false]
[new, RectangleConstraint, (, widthRange, ,, heightRange2, )]
[widthRange]
[heightRange2]
[this, ., bottomBlock, ., arrange, (, g2, ,, c2, )]
[this, ., bottomBlock]
[this]
[g2]
[c2]
[w, [, 1, ]]
[w]
[1]
[size, ., width]
[size]
[h, [, 1, ]]
[h]
[1]
[size, ., height]
[size]
[Range, ., shift, (, heightRange, ,, -, (, h, [, 0, ], +, h, [, 1, ], ), )]
[Range]
[heightRange]
[-, (, h, [, 0, ], +, h, [, 1, ], )]
[(, h, [, 0, ], +, h, [, 1, ], )]
[h, [, 0, ], +, h, [, 1, ]]
[h, [, 0, ]]
[h]
[0]
[h, [, 1, ]]
[h]
[1]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[new, RectangleConstraint, (, widthRange, ,, heightRange3, )]
[widthRange]
[heightRange3]
[this, ., leftBlock, ., arrange, (, g2, ,, c3, )]
[this, ., leftBlock]
[this]
[g2]
[c3]
[w, [, 2, ]]
[w]
[2]
[size, ., width]
[size]
[h, [, 2, ]]
[h]
[2]
[size, ., height]
[size]
[Range, ., shift, (, widthRange, ,, -, w, [, 2, ], ,, false, )]
[Range]
[widthRange]
[-, w, [, 2, ]]
[w, [, 2, ]]
[w]
[2]
[false]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[new, RectangleConstraint, (, widthRange2, ,, heightRange3, )]
[widthRange2]
[heightRange3]
[this, ., rightBlock, ., arrange, (, g2, ,, c4, )]
[this, ., rightBlock]
[this]
[g2]
[c4]
[w, [, 3, ]]
[w]
[3]
[size, ., width]
[size]
[h, [, 3, ]]
[h]
[3]
[size, ., height]
[size]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], )]
[Math]
[h, [, 2, ]]
[h]
[2]
[h, [, 3, ]]
[h]
[3]
[h, [, 3, ]]
[h]
[3]
[h, [, 2, ]]
[h]
[2]
[Range, ., shift, (, widthRange, ,, -, (, w, [, 2, ], +, w, [, 3, ], ), ,, false, )]
[Range]
[widthRange]
[-, (, w, [, 2, ], +, w, [, 3, ], )]
[(, w, [, 2, ], +, w, [, 3, ], )]
[w, [, 2, ], +, w, [, 3, ]]
[w, [, 2, ]]
[w]
[2]
[w, [, 3, ]]
[w]
[3]
[false]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[new, RectangleConstraint, (, widthRange3, ,, heightRange3, )]
[widthRange3]
[heightRange3]
[this, ., centerBlock, ., arrange, (, g2, ,, c5, )]
[this, ., centerBlock]
[this]
[g2]
[c5]
[w, [, 4, ]]
[w]
[4]
[size, ., width]
[size]
[h, [, 4, ]]
[h]
[4]
[size, ., height]
[size]
[Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), )]
[Math]
[w, [, 0, ]]
[w]
[0]
[Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], )]
[Math]
[w, [, 1, ]]
[w]
[1]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ]]
[w, [, 2, ], +, w, [, 4, ]]
[w, [, 2, ]]
[w]
[2]
[w, [, 4, ]]
[w]
[4]
[w, [, 3, ]]
[w]
[3]
[h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), )]
[h, [, 0, ], +, h, [, 1, ]]
[h, [, 0, ]]
[h]
[0]
[h, [, 1, ]]
[h]
[1]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), )]
[Math]
[h, [, 2, ]]
[h]
[2]
[Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], )]
[Math]
[h, [, 3, ]]
[h]
[3]
[h, [, 4, ]]
[h]
[4]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), )]
[this, ., topBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], )]
[0.0]
[0.0]
[width]
[h, [, 0, ]]
[h]
[0]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), )]
[this, ., bottomBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], )]
[0.0]
[height, -, h, [, 1, ]]
[height]
[h, [, 1, ]]
[h]
[1]
[width]
[h, [, 1, ]]
[h]
[1]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), )]
[this, ., leftBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], )]
[0.0]
[h, [, 0, ]]
[h]
[0]
[w, [, 2, ]]
[w]
[2]
[h, [, 2, ]]
[h]
[2]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), )]
[this, ., rightBlock]
[this]
[new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], )]
[width, -, w, [, 3, ]]
[width]
[w, [, 3, ]]
[w]
[3]
[h, [, 0, ]]
[h]
[0]
[w, [, 3, ]]
[w]
[3]
[h, [, 3, ]]
[h]
[3]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, [, 0, ], -, h, [, 1, ], ), )]
[this, ., centerBlock]
[this]
[new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, [, 0, ], -, h, [, 1, ], )]
[w, [, 2, ]]
[w]
[2]
[h, [, 0, ]]
[h]
[0]
[width, -, w, [, 2, ], -, w, [, 3, ]]
[width, -, w, [, 2, ]]
[width]
[w, [, 2, ]]
[w]
[2]
[w, [, 3, ]]
[w]
[3]
[height, -, h, [, 0, ], -, h, [, 1, ]]
[height, -, h, [, 0, ]]
[height]
[h, [, 0, ]]
[h]
[0]
[h, [, 1, ]]
[h]
[1]
[new, Size2D, (, width, ,, height, )]
[width]
[height]
[new, double, [, 5, ]]
[5]
[new, double, [, 5, ]]
[5]
[w, [, 0, ]]
[w]
[0]
[constraint, ., getWidth, (, )]
[constraint]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,, LengthConstraintType, ., RANGE, )]
[w, [, 0, ]]
[w]
[0]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[0.0]
[new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), )]
[0.0]
[constraint, ., getHeight, (, )]
[constraint]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[this, ., topBlock, ., arrange, (, g2, ,, c1, )]
[this, ., topBlock]
[this]
[g2]
[c1]
[h, [, 0, ]]
[h]
[0]
[size, ., height]
[size]
[w, [, 1, ]]
[w]
[1]
[w, [, 0, ]]
[w]
[0]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,, LengthConstraintType, ., RANGE, )]
[w, [, 0, ]]
[w]
[0]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[0.0]
[new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -, h, [, 0, ], )]
[0.0]
[constraint, ., getHeight, (, ), -, h, [, 0, ]]
[constraint, ., getHeight, (, )]
[constraint]
[h, [, 0, ]]
[h]
[0]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[this, ., bottomBlock, ., arrange, (, g2, ,, c2, )]
[this, ., bottomBlock]
[this]
[g2]
[c2]
[h, [, 1, ]]
[h]
[1]
[size, ., height]
[size]
[h, [, 2, ]]
[h]
[2]
[constraint, ., getHeight, (, ), -, h, [, 1, ], -, h, [, 0, ]]
[constraint, ., getHeight, (, ), -, h, [, 1, ]]
[constraint, ., getHeight, (, )]
[constraint]
[h, [, 1, ]]
[h]
[1]
[h, [, 0, ]]
[h]
[0]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, )]
[0.0]
[new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), )]
[0.0]
[constraint, ., getWidth, (, )]
[constraint]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[h, [, 2, ]]
[h]
[2]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[this, ., leftBlock, ., arrange, (, g2, ,, c3, )]
[this, ., leftBlock]
[this]
[g2]
[c3]
[w, [, 2, ]]
[w]
[2]
[size, ., width]
[size]
[h, [, 3, ]]
[h]
[3]
[h, [, 2, ]]
[h]
[2]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, )]
[0.0]
[new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), )]
[0.0]
[Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, )]
[Math]
[constraint, ., getWidth, (, ), -, w, [, 2, ]]
[constraint, ., getWidth, (, )]
[constraint]
[w, [, 2, ]]
[w]
[2]
[0.0]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[h, [, 2, ]]
[h]
[2]
[null]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[this, ., rightBlock, ., arrange, (, g2, ,, c4, )]
[this, ., rightBlock]
[this]
[g2]
[c4]
[w, [, 3, ]]
[w]
[3]
[size, ., width]
[size]
[h, [, 4, ]]
[h]
[4]
[h, [, 2, ]]
[h]
[2]
[w, [, 4, ]]
[w]
[4]
[constraint, ., getWidth, (, ), -, w, [, 3, ], -, w, [, 2, ]]
[constraint, ., getWidth, (, ), -, w, [, 3, ]]
[constraint, ., getWidth, (, )]
[constraint]
[w, [, 3, ]]
[w]
[3]
[w, [, 2, ]]
[w]
[2]
[new, RectangleConstraint, (, w, [, 4, ], ,, h, [, 4, ], )]
[w, [, 4, ]]
[w]
[4]
[h, [, 4, ]]
[h]
[4]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[this, ., centerBlock, ., arrange, (, g2, ,, c5, )]
[this, ., centerBlock]
[this]
[g2]
[c5]
[this, ., topBlock, !=, null]
[this, ., topBlock]
[this]
[null]
[this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, [, 0, ], ), )]
[this, ., topBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, [, 0, ], )]
[0.0]
[0.0]
[w, [, 0, ]]
[w]
[0]
[h, [, 0, ]]
[h]
[0]
[this, ., bottomBlock, !=, null]
[this, ., bottomBlock]
[this]
[null]
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, [, 1, ], ,, h, [, 1, ], ), )]
[this, ., bottomBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, [, 1, ], ,, h, [, 1, ], )]
[0.0]
[h, [, 0, ], +, h, [, 2, ]]
[h, [, 0, ]]
[h]
[0]
[h, [, 2, ]]
[h]
[2]
[w, [, 1, ]]
[w]
[1]
[h, [, 1, ]]
[h]
[1]
[this, ., leftBlock, !=, null]
[this, ., leftBlock]
[this]
[null]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), )]
[this, ., leftBlock]
[this]
[new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], )]
[0.0]
[h, [, 0, ]]
[h]
[0]
[w, [, 2, ]]
[w]
[2]
[h, [, 2, ]]
[h]
[2]
[this, ., rightBlock, !=, null]
[this, ., rightBlock]
[this]
[null]
[this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), )]
[this, ., rightBlock]
[this]
[new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], )]
[w, [, 2, ], +, w, [, 4, ]]
[w, [, 2, ]]
[w]
[2]
[w, [, 4, ]]
[w]
[4]
[h, [, 0, ]]
[h]
[0]
[w, [, 3, ]]
[w]
[3]
[h, [, 3, ]]
[h]
[3]
[this, ., centerBlock, !=, null]
[this, ., centerBlock]
[this]
[null]
[this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, [, 4, ], ,, h, [, 4, ], ), )]
[this, ., centerBlock]
[this]
[new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, [, 4, ], ,, h, [, 4, ], )]
[w, [, 2, ]]
[w]
[2]
[h, [, 0, ]]
[h]
[0]
[w, [, 4, ]]
[w]
[4]
[h, [, 4, ]]
[h]
[4]
[new, Size2D, (, constraint, ., getWidth, (, ), ,, constraint, ., getHeight, (, ), )]
[constraint, ., getWidth, (, )]
[constraint]
[constraint, ., getHeight, (, )]
[constraint]
[this, ., centerBlock]
[this]
[null]
[this, ., topBlock]
[this]
[null]
[this, ., bottomBlock]
[this]
[null]
[this, ., leftBlock]
[this]
[null]
[this, ., rightBlock]
[this]
[null]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, BorderArrangement, )]
[(, obj, instanceof, BorderArrangement, )]
[obj, instanceof, BorderArrangement]
[obj]
[false]
[(, BorderArrangement, ), obj]
[obj]
[!, ObjectUtilities, ., equal, (, this, ., topBlock, ,, that, ., topBlock, )]
[ObjectUtilities, ., equal, (, this, ., topBlock, ,, that, ., topBlock, )]
[ObjectUtilities]
[this, ., topBlock]
[this]
[that, ., topBlock]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, )]
[ObjectUtilities, ., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, )]
[ObjectUtilities]
[this, ., bottomBlock]
[this]
[that, ., bottomBlock]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., leftBlock, ,, that, ., leftBlock, )]
[ObjectUtilities, ., equal, (, this, ., leftBlock, ,, that, ., leftBlock, )]
[ObjectUtilities]
[this, ., leftBlock]
[this]
[that, ., leftBlock]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., rightBlock, ,, that, ., rightBlock, )]
[ObjectUtilities, ., equal, (, this, ., rightBlock, ,, that, ., rightBlock, )]
[ObjectUtilities]
[this, ., rightBlock]
[this]
[that, ., rightBlock]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., centerBlock, ,, that, ., centerBlock, )]
[ObjectUtilities, ., equal, (, this, ., centerBlock, ,, that, ., centerBlock, )]
[ObjectUtilities]
[this, ., centerBlock]
[this]
[that, ., centerBlock]
[that]
[false]
[true]
