[7288197941165002400L]
[8]
[1, <<, SIZE_L]
[1]
[SIZE_L]
[SIZE, >, >, 1]
[SIZE]
[1]
[SIZE, -, 1, <<, 2]
[SIZE, -, 1]
[SIZE]
[1]
[2]
[0x9e3779b9]
[new, int, [, SIZE, ]]
[SIZE]
[new, int, [, SIZE, ]]
[SIZE]
[new, int, [, 8, ]]
[8]
[setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), )]
[System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, )]
[System, ., currentTimeMillis, (, )]
[System]
[System, ., identityHashCode, (, this, )]
[System]
[this]
[setSeed, (, seed, )]
[seed]
[setSeed, (, seed, )]
[seed]
[setSeed, (, new, int, [, ], {, seed, }, )]
[new, int, [, ], {, seed, }]
[{, seed, }]
[seed]
[setSeed, (, new, int, [, ], {, (, int, ), (, seed, >, >, >, 32, ), ,, (, int, ), (, seed, &, 0xffffffffL, ), }, )]
[new, int, [, ], {, (, int, ), (, seed, >, >, >, 32, ), ,, (, int, ), (, seed, &, 0xffffffffL, ), }]
[{, (, int, ), (, seed, >, >, >, 32, ), ,, (, int, ), (, seed, &, 0xffffffffL, ), }]
[(, int, ), (, seed, >, >, >, 32, )]
[(, seed, >, >, >, 32, )]
[seed, >, >, >, 32]
[seed]
[32]
[(, int, ), (, seed, &, 0xffffffffL, )]
[(, seed, &, 0xffffffffL, )]
[seed, &, 0xffffffffL]
[seed]
[0xffffffffL]
[seed, ==, null]
[seed]
[null]
[setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), )]
[System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, )]
[System, ., currentTimeMillis, (, )]
[System]
[System, ., identityHashCode, (, this, )]
[System]
[this]
[seed, ., length]
[seed]
[rsl, ., length]
[rsl]
[System, ., arraycopy, (, seed, ,, 0, ,, rsl, ,, 0, ,, Math, ., min, (, seedLen, ,, rslLen, ), )]
[System]
[seed]
[0]
[rsl]
[0]
[Math, ., min, (, seedLen, ,, rslLen, )]
[Math]
[seedLen]
[rslLen]
[seedLen, <, rslLen]
[seedLen]
[rslLen]
[seedLen]
[j, <, rslLen]
[j]
[rslLen]
[j, ++]
[j]
[rsl, [, j, -, seedLen, ]]
[rsl]
[j, -, seedLen]
[j]
[seedLen]
[rsl, [, j, ]]
[rsl]
[j]
[(, int, ), (, 0x6c078965L, *, (, k, ^, k, >, >, 30, ), +, j, &, 0xffffffffL, )]
[(, 0x6c078965L, *, (, k, ^, k, >, >, 30, ), +, j, &, 0xffffffffL, )]
[0x6c078965L, *, (, k, ^, k, >, >, 30, ), +, j, &, 0xffffffffL]
[0x6c078965L, *, (, k, ^, k, >, >, 30, ), +, j]
[0x6c078965L, *, (, k, ^, k, >, >, 30, )]
[0x6c078965L]
[(, k, ^, k, >, >, 30, )]
[k, ^, k, >, >, 30]
[k]
[k, >, >, 30]
[k]
[30]
[j]
[0xffffffffL]
[initState, (, )]
[count, <, 0]
[count]
[0]
[isaac, (, )]
[count]
[SIZE, -, 1]
[SIZE]
[1]
[rsl, [, count, --, ], >, >, >, 32, -, bits]
[rsl, [, count, --, ]]
[rsl]
[count, --]
[count]
[32, -, bits]
[32]
[bits]
[isaacI]
[0]
[isaacJ]
[H_SIZE]
[isaacB]
[++, isaacC]
[isaacC]
[isaacI, <, H_SIZE]
[isaacI]
[H_SIZE]
[isaac2, (, )]
[isaacJ]
[0]
[isaacJ, <, H_SIZE]
[isaacJ]
[H_SIZE]
[isaac2, (, )]
[isaacX]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[isaacA]
[isaacA, <<, 13]
[isaacA]
[13]
[isaacA]
[mem, [, isaacJ, ++, ]]
[mem]
[isaacJ, ++]
[isaacJ]
[isaac3, (, )]
[isaacX]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[isaacA]
[isaacA, >, >, >, 6]
[isaacA]
[6]
[isaacA]
[mem, [, isaacJ, ++, ]]
[mem]
[isaacJ, ++]
[isaacJ]
[isaac3, (, )]
[isaacX]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[isaacA]
[isaacA, <<, 2]
[isaacA]
[2]
[isaacA]
[mem, [, isaacJ, ++, ]]
[mem]
[isaacJ, ++]
[isaacJ]
[isaac3, (, )]
[isaacX]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[isaacA]
[isaacA, >, >, >, 16]
[isaacA]
[16]
[isaacA]
[mem, [, isaacJ, ++, ]]
[mem]
[isaacJ, ++]
[isaacJ]
[isaac3, (, )]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[mem, [, (, isaacX, &, MASK, ), >, >, 2, ], +, isaacA, +, isaacB]
[mem, [, (, isaacX, &, MASK, ), >, >, 2, ], +, isaacA]
[mem, [, (, isaacX, &, MASK, ), >, >, 2, ]]
[mem]
[(, isaacX, &, MASK, ), >, >, 2]
[(, isaacX, &, MASK, )]
[isaacX, &, MASK]
[isaacX]
[MASK]
[2]
[isaacA]
[isaacB]
[isaacB]
[mem, [, (, mem, [, isaacI, ], >, >, SIZE_L, &, MASK, ), >, >, 2, ], +, isaacX]
[mem, [, (, mem, [, isaacI, ], >, >, SIZE_L, &, MASK, ), >, >, 2, ]]
[mem]
[(, mem, [, isaacI, ], >, >, SIZE_L, &, MASK, ), >, >, 2]
[(, mem, [, isaacI, ], >, >, SIZE_L, &, MASK, )]
[mem, [, isaacI, ], >, >, SIZE_L, &, MASK]
[mem, [, isaacI, ], >, >, SIZE_L]
[mem, [, isaacI, ]]
[mem]
[isaacI]
[SIZE_L]
[MASK]
[2]
[isaacX]
[rsl, [, isaacI, ++, ]]
[rsl]
[isaacI, ++]
[isaacI]
[isaacB]
[isaacA]
[0]
[isaacB]
[0]
[isaacC]
[0]
[0]
[j, <, arr, ., length]
[j]
[arr, ., length]
[arr]
[j, ++]
[j]
[arr, [, j, ]]
[arr]
[j]
[GLD_RATIO]
[0]
[j, <, 4]
[j]
[4]
[j, ++]
[j]
[shuffle, (, )]
[0]
[j, <, SIZE]
[j]
[SIZE]
[j]
[8]
[arr, [, 0, ]]
[arr]
[0]
[rsl, [, j, ]]
[rsl]
[j]
[arr, [, 1, ]]
[arr]
[1]
[rsl, [, j, +, 1, ]]
[rsl]
[j, +, 1]
[j]
[1]
[arr, [, 2, ]]
[arr]
[2]
[rsl, [, j, +, 2, ]]
[rsl]
[j, +, 2]
[j]
[2]
[arr, [, 3, ]]
[arr]
[3]
[rsl, [, j, +, 3, ]]
[rsl]
[j, +, 3]
[j]
[3]
[arr, [, 4, ]]
[arr]
[4]
[rsl, [, j, +, 4, ]]
[rsl]
[j, +, 4]
[j]
[4]
[arr, [, 5, ]]
[arr]
[5]
[rsl, [, j, +, 5, ]]
[rsl]
[j, +, 5]
[j]
[5]
[arr, [, 6, ]]
[arr]
[6]
[rsl, [, j, +, 6, ]]
[rsl]
[j, +, 6]
[j]
[6]
[arr, [, 7, ]]
[arr]
[7]
[rsl, [, j, +, 7, ]]
[rsl]
[j, +, 7]
[j]
[7]
[shuffle, (, )]
[setState, (, j, )]
[j]
[0]
[j, <, SIZE]
[j]
[SIZE]
[j]
[8]
[arr, [, 0, ]]
[arr]
[0]
[mem, [, j, ]]
[mem]
[j]
[arr, [, 1, ]]
[arr]
[1]
[mem, [, j, +, 1, ]]
[mem]
[j, +, 1]
[j]
[1]
[arr, [, 2, ]]
[arr]
[2]
[mem, [, j, +, 2, ]]
[mem]
[j, +, 2]
[j]
[2]
[arr, [, 3, ]]
[arr]
[3]
[mem, [, j, +, 3, ]]
[mem]
[j, +, 3]
[j]
[3]
[arr, [, 4, ]]
[arr]
[4]
[mem, [, j, +, 4, ]]
[mem]
[j, +, 4]
[j]
[4]
[arr, [, 5, ]]
[arr]
[5]
[mem, [, j, +, 5, ]]
[mem]
[j, +, 5]
[j]
[5]
[arr, [, 6, ]]
[arr]
[6]
[mem, [, j, +, 6, ]]
[mem]
[j, +, 6]
[j]
[6]
[arr, [, 7, ]]
[arr]
[7]
[mem, [, j, +, 7, ]]
[mem]
[j, +, 7]
[j]
[7]
[shuffle, (, )]
[setState, (, j, )]
[j]
[isaac, (, )]
[count]
[SIZE, -, 1]
[SIZE]
[1]
[clear, (, )]
[arr, [, 0, ]]
[arr]
[0]
[arr, [, 1, ], <<, 11]
[arr, [, 1, ]]
[arr]
[1]
[11]
[arr, [, 3, ]]
[arr]
[3]
[arr, [, 0, ]]
[arr]
[0]
[arr, [, 1, ]]
[arr]
[1]
[arr, [, 2, ]]
[arr]
[2]
[arr, [, 1, ]]
[arr]
[1]
[arr, [, 2, ], >, >, >, 2]
[arr, [, 2, ]]
[arr]
[2]
[2]
[arr, [, 4, ]]
[arr]
[4]
[arr, [, 1, ]]
[arr]
[1]
[arr, [, 2, ]]
[arr]
[2]
[arr, [, 3, ]]
[arr]
[3]
[arr, [, 2, ]]
[arr]
[2]
[arr, [, 3, ], <<, 8]
[arr, [, 3, ]]
[arr]
[3]
[8]
[arr, [, 5, ]]
[arr]
[5]
[arr, [, 2, ]]
[arr]
[2]
[arr, [, 3, ]]
[arr]
[3]
[arr, [, 4, ]]
[arr]
[4]
[arr, [, 3, ]]
[arr]
[3]
[arr, [, 4, ], >, >, >, 16]
[arr, [, 4, ]]
[arr]
[4]
[16]
[arr, [, 6, ]]
[arr]
[6]
[arr, [, 3, ]]
[arr]
[3]
[arr, [, 4, ]]
[arr]
[4]
[arr, [, 5, ]]
[arr]
[5]
[arr, [, 4, ]]
[arr]
[4]
[arr, [, 5, ], <<, 10]
[arr, [, 5, ]]
[arr]
[5]
[10]
[arr, [, 7, ]]
[arr]
[7]
[arr, [, 4, ]]
[arr]
[4]
[arr, [, 5, ]]
[arr]
[5]
[arr, [, 6, ]]
[arr]
[6]
[arr, [, 5, ]]
[arr]
[5]
[arr, [, 6, ], >, >, >, 4]
[arr, [, 6, ]]
[arr]
[6]
[4]
[arr, [, 0, ]]
[arr]
[0]
[arr, [, 5, ]]
[arr]
[5]
[arr, [, 6, ]]
[arr]
[6]
[arr, [, 7, ]]
[arr]
[7]
[arr, [, 6, ]]
[arr]
[6]
[arr, [, 7, ], <<, 8]
[arr, [, 7, ]]
[arr]
[7]
[8]
[arr, [, 1, ]]
[arr]
[1]
[arr, [, 6, ]]
[arr]
[6]
[arr, [, 7, ]]
[arr]
[7]
[arr, [, 0, ]]
[arr]
[0]
[arr, [, 7, ]]
[arr]
[7]
[arr, [, 0, ], >, >, >, 9]
[arr, [, 0, ]]
[arr]
[0]
[9]
[arr, [, 2, ]]
[arr]
[2]
[arr, [, 7, ]]
[arr]
[7]
[arr, [, 0, ]]
[arr]
[0]
[arr, [, 1, ]]
[arr]
[1]
[mem, [, start, ]]
[mem]
[start]
[arr, [, 0, ]]
[arr]
[0]
[mem, [, start, +, 1, ]]
[mem]
[start, +, 1]
[start]
[1]
[arr, [, 1, ]]
[arr]
[1]
[mem, [, start, +, 2, ]]
[mem]
[start, +, 2]
[start]
[2]
[arr, [, 2, ]]
[arr]
[2]
[mem, [, start, +, 3, ]]
[mem]
[start, +, 3]
[start]
[3]
[arr, [, 3, ]]
[arr]
[3]
[mem, [, start, +, 4, ]]
[mem]
[start, +, 4]
[start]
[4]
[arr, [, 4, ]]
[arr]
[4]
[mem, [, start, +, 5, ]]
[mem]
[start, +, 5]
[start]
[5]
[arr, [, 5, ]]
[arr]
[5]
[mem, [, start, +, 6, ]]
[mem]
[start, +, 6]
[start]
[6]
[arr, [, 6, ]]
[arr]
[6]
[mem, [, start, +, 7, ]]
[mem]
[start, +, 7]
[start]
[7]
[arr, [, 7, ]]
[arr]
[7]
