[Assert, ., assertSame, (, type, ,, assertValidResolve, (, type, ), )]
[Assert]
[type]
[assertValidResolve, (, type, )]
[type]
[type]
[assertValidResolve, (, type, ,, MapBasedScope, ., emptyScope, (, ), )]
[type]
[MapBasedScope, ., emptyScope, (, )]
[MapBasedScope]
[TestErrorReporter, ., forNoExpectedReports, (, )]
[TestErrorReporter]
[type, ., resolve, (, t, ,, scope, )]
[type]
[t]
[scope]
[assertTypeEquals, (, "JSType#resolve should not affect object equality", ,, type, ,, resolvedType, )]
["JSType#resolve should not affect object equality"]
[type]
[resolvedType]
[resolvedType]
[assertTypeNotEquals, (, "", ,, a, ,, b, )]
[""]
[a]
[b]
[Assert, ., assertFalse, (, message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Type: ", +, b, +, "\n", ,, a, ., isEquivalentTo, (, b, ), )]
[Assert]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Type: ", +, b, +, "\n"]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Type: ", +, b]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Type: "]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", )]
[message]
[(, message, ., isEmpty, (, ), ?, "", :, "\n", )]
[message, ., isEmpty, (, ), ?, "", :, "\n"]
[message, ., isEmpty, (, )]
[message]
[""]
["\n"]
["Type: "]
[b]
["\n"]
[a, ., isEquivalentTo, (, b, )]
[a]
[b]
[Assert, ., assertFalse, (, message, +, " Equals is not symmetric.\n", +, "Type: ", +, b, +, "\n", ,, b, ., isEquivalentTo, (, a, ), )]
[Assert]
[message, +, " Equals is not symmetric.\n", +, "Type: ", +, b, +, "\n"]
[message, +, " Equals is not symmetric.\n", +, "Type: ", +, b]
[message, +, " Equals is not symmetric.\n", +, "Type: "]
[message, +, " Equals is not symmetric.\n"]
[message]
[" Equals is not symmetric.\n"]
["Type: "]
[b]
["\n"]
[b, ., isEquivalentTo, (, a, )]
[b]
[a]
[assertTypeEquals, (, "", ,, a, ,, b, )]
[""]
[a]
[b]
[Assert, ., assertTrue, (, "Both types must be null, or both must be non-null ", +, a, +, ",", +, b, ,, (, a, ==, null, ), ==, (, b, ==, null, ), )]
[Assert]
["Both types must be null, or both must be non-null ", +, a, +, ",", +, b]
["Both types must be null, or both must be non-null ", +, a, +, ","]
["Both types must be null, or both must be non-null ", +, a]
["Both types must be null, or both must be non-null "]
[a]
[","]
[b]
[(, a, ==, null, ), ==, (, b, ==, null, )]
[(, a, ==, null, )]
[a, ==, null]
[a]
[null]
[(, b, ==, null, )]
[b, ==, null]
[b]
[null]
[a, ==, null]
[a]
[null]
[Assert, ., assertTrue, (, message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: ", +, a, +, "\n", +, "Actual  : ", +, b, ,, a, ., isEquivalentTo, (, b, ), )]
[Assert]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: ", +, a, +, "\n", +, "Actual  : ", +, b]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: ", +, a, +, "\n", +, "Actual  : "]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: ", +, a, +, "\n"]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: ", +, a]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", ), +, "Expected: "]
[message, +, (, message, ., isEmpty, (, ), ?, "", :, "\n", )]
[message]
[(, message, ., isEmpty, (, ), ?, "", :, "\n", )]
[message, ., isEmpty, (, ), ?, "", :, "\n"]
[message, ., isEmpty, (, )]
[message]
[""]
["\n"]
["Expected: "]
[a]
["\n"]
["Actual  : "]
[b]
[a, ., isEquivalentTo, (, b, )]
[a]
[b]
[Assert, ., assertTrue, (, message, +, " Equals is not symmetric.\n", +, "Expected: ", +, b, +, "\n", +, "Actual  : ", +, a, ,, b, ., isEquivalentTo, (, a, ), )]
[Assert]
[message, +, " Equals is not symmetric.\n", +, "Expected: ", +, b, +, "\n", +, "Actual  : ", +, a]
[message, +, " Equals is not symmetric.\n", +, "Expected: ", +, b, +, "\n", +, "Actual  : "]
[message, +, " Equals is not symmetric.\n", +, "Expected: ", +, b, +, "\n"]
[message, +, " Equals is not symmetric.\n", +, "Expected: ", +, b]
[message, +, " Equals is not symmetric.\n", +, "Expected: "]
[message, +, " Equals is not symmetric.\n"]
[message]
[" Equals is not symmetric.\n"]
["Expected: "]
[b]
["\n"]
["Actual  : "]
[a]
[b, ., isEquivalentTo, (, a, )]
[b]
[a]
[Assert, ., assertEquals, (, Iterables, ., size, (, a, ), ,, Iterables, ., size, (, b, ), )]
[Assert]
[Iterables, ., size, (, a, )]
[Iterables]
[a]
[Iterables, ., size, (, b, )]
[Iterables]
[b]
[a, ., iterator, (, )]
[a]
[b, ., iterator, (, )]
[b]
[aIterator, ., hasNext, (, )]
[aIterator]
[assertTypeEquals, (, aIterator, ., next, (, ), ,, bIterator, ., next, (, ), )]
[aIterator, ., next, (, )]
[aIterator]
[bIterator, ., next, (, )]
[bIterator]
[Assert, ., assertTrue, (, a, ., isEquivalentTo, (, b, ), )]
[Assert]
[a, ., isEquivalentTo, (, b, )]
[a]
[b]
[Assert, ., assertTrue, (, a, ., isEquivalentTo, (, a, ), )]
[Assert]
[a, ., isEquivalentTo, (, a, )]
[a]
[a]
[Assert, ., assertTrue, (, b, ., isEquivalentTo, (, b, ), )]
[Assert]
[b, ., isEquivalentTo, (, b, )]
[b]
[b]
[Assert, ., assertTrue, (, b, ., isEquivalentTo, (, a, ), )]
[Assert]
[b, ., isEquivalentTo, (, a, )]
[b]
[a]
[Assert, ., assertTrue, (, a, ., isSubtype, (, b, ), )]
[Assert]
[a, ., isSubtype, (, b, )]
[a]
[b]
[Assert, ., assertTrue, (, a, ., isSubtype, (, a, ), )]
[Assert]
[a, ., isSubtype, (, a, )]
[a]
[a]
[Assert, ., assertTrue, (, b, ., isSubtype, (, b, ), )]
[Assert]
[b, ., isSubtype, (, b, )]
[b]
[b]
[Assert, ., assertTrue, (, b, ., isSubtype, (, a, ), )]
[Assert]
[b, ., isSubtype, (, a, )]
[b]
[a]
[assertTypeEquals, (, a, ,, a, ., getGreatestSubtype, (, b, ), )]
[a]
[a, ., getGreatestSubtype, (, b, )]
[a]
[b]
[assertTypeEquals, (, a, ,, a, ., getGreatestSubtype, (, a, ), )]
[a]
[a, ., getGreatestSubtype, (, a, )]
[a]
[a]
[assertTypeEquals, (, a, ,, b, ., getGreatestSubtype, (, b, ), )]
[a]
[b, ., getGreatestSubtype, (, b, )]
[b]
[b]
[assertTypeEquals, (, a, ,, b, ., getGreatestSubtype, (, a, ), )]
[a]
[b, ., getGreatestSubtype, (, a, )]
[b]
[a]
[assertTypeEquals, (, a, ,, a, ., getLeastSupertype, (, b, ), )]
[a]
[a, ., getLeastSupertype, (, b, )]
[a]
[b]
[assertTypeEquals, (, a, ,, a, ., getLeastSupertype, (, a, ), )]
[a]
[a, ., getLeastSupertype, (, a, )]
[a]
[a]
[assertTypeEquals, (, a, ,, b, ., getLeastSupertype, (, b, ), )]
[a]
[b, ., getLeastSupertype, (, b, )]
[b]
[b]
[assertTypeEquals, (, a, ,, b, ., getLeastSupertype, (, a, ), )]
[a]
[b, ., getLeastSupertype, (, a, )]
[b]
[a]
[Assert, ., assertTrue, (, a, ., canCastTo, (, b, ), )]
[Assert]
[a, ., canCastTo, (, b, )]
[a]
[b]
[Assert, ., assertTrue, (, a, ., canCastTo, (, a, ), )]
[Assert]
[a, ., canCastTo, (, a, )]
[a]
[a]
[Assert, ., assertTrue, (, b, ., canCastTo, (, b, ), )]
[Assert]
[b, ., canCastTo, (, b, )]
[b]
[b]
[Assert, ., assertTrue, (, b, ., canCastTo, (, a, ), )]
[Assert]
[b, ., canCastTo, (, a, )]
[b]
[a]
