[1L]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[this, ., compiler]
[this]
[compiler]
[this, ., functionListExtractor]
[this]
[new, FunctionListExtractor, (, functionMap, )]
[functionMap]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, functionListExtractor, )]
[NodeTraversal]
[compiler]
[root]
[functionListExtractor]
[new, FunctionExpressionNamer, (, functionMap, )]
[functionMap]
[new, AnonymousFunctionNamingCallback, (, namer, )]
[namer]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, )]
[NodeTraversal]
[compiler]
[root]
[namingCallback]
[functionMap, ., keySet, (, )]
[functionMap]
[functionMap, ., get, (, f, )]
[functionMap]
[f]
[record, !=, null]
[record]
[null]
[record, ., id]
[record]
[-, 1]
[1]
[functionMap, ., get, (, f, )]
[functionMap]
[f]
[record, ==, null]
[record]
[null]
[null]
[record, ., name]
[record]
[str, ., isEmpty, (, )]
[str]
[str]
["<anonymous>"]
[record, ., parent]
[record]
[parent, !=, null]
[parent]
[null]
[str]
[getFunctionName, (, parent, ), +, "::", +, str]
[getFunctionName, (, parent, ), +, "::"]
[getFunctionName, (, parent, )]
[parent]
["::"]
[str]
[str]
[str, ., replaceAll, (, "::this\\.", ,, ".", )]
[str]
["::this\\."]
["."]
[str]
[str, ., replaceAll, (, "\\.\\.", ,, ".", )]
[str]
["\\.\\."]
["."]
[str]
[str, ., replaceFirst, (, "^(<anonymous>::)*", ,, "", )]
[str]
["^(<anonymous>::)*"]
[""]
[str]
[1L]
[this, ., id]
[this]
[id]
[this, ., parent]
[this]
[parent]
[this, ., name]
[this]
[name]
[0]
[this, ., functionMap]
[this]
[functionMap]
[n, ., isFunction, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[functionNameNode, ., getString, (, )]
[functionNameNode]
[t, ., getEnclosingFunction, (, )]
[t]
[functionMap, ., put, (, n, ,, new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, ), )]
[functionMap]
[n]
[new, FunctionRecord, (, nextId, ,, enclosingFunction, ,, functionName, )]
[nextId]
[enclosingFunction]
[functionName]
[nextId, ++]
[nextId]
['.']
[new, NodeNameExtractor, (, DELIMITER, )]
[DELIMITER]
[this, ., functionMap]
[this]
[functionMap]
[extractor, ., getName, (, node, )]
[extractor]
[node]
[functionMap, ., get, (, fnNode, )]
[functionMap]
[fnNode]
[(, record, !=, null, )]
[record, !=, null]
[record]
[null]
[(, record, ., name, ., isEmpty, (, ), )]
[record, ., name, ., isEmpty, (, )]
[record, ., name]
[record]
[record, ., name]
[record]
[name]
[lhs, +, DELIMITER, +, rhs]
[lhs, +, DELIMITER]
[lhs]
[DELIMITER]
[rhs]
