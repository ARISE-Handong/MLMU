[(, c, &, 0xDFD0, ), !=, 0]
[(, c, &, 0xDFD0, )]
[c, &, 0xDFD0]
[c]
[0xDFD0]
[0]
[false]
[c, ==, '\n', ||, c, ==, '\r', ||, c, ==, 0x2028, ||, c, ==, 0x2029]
[c, ==, '\n', ||, c, ==, '\r', ||, c, ==, 0x2028]
[c, ==, '\n', ||, c, ==, '\r']
[c, ==, '\n']
[c]
['\n']
[c, ==, '\r']
[c]
['\r']
[c, ==, 0x2028]
[c]
[0x2028]
[c, ==, 0x2029]
[c]
[0x2029]
[Double, ., longBitsToDouble, (, 0x7ff8000000000000L, )]
[Double]
[0x7ff8000000000000L]
[Double, ., longBitsToDouble, (, 0x8000000000000000L, )]
[Double]
[0x8000000000000000L]
[@, SuppressWarnings, (, "fallthrough", )]
["fallthrough"]
['9']
['a']
['A']
[s, ., length, (, )]
[s]
[radix, <, 10]
[radix]
[10]
[digitMax]
[(, char, ), (, '0', +, radix, -, 1, )]
[(, '0', +, radix, -, 1, )]
['0', +, radix, -, 1]
['0', +, radix]
['0']
[radix]
[1]
[radix, >, 10]
[radix]
[10]
[lowerCaseBound]
[(, char, ), (, 'a', +, radix, -, 10, )]
[(, 'a', +, radix, -, 10, )]
['a', +, radix, -, 10]
['a', +, radix]
['a']
[radix]
[10]
[upperCaseBound]
[(, char, ), (, 'A', +, radix, -, 10, )]
[(, 'A', +, radix, -, 10, )]
['A', +, radix, -, 10]
['A', +, radix]
['A']
[radix]
[10]
[0.0]
[end]
[start]
[end, <, len]
[end]
[len]
[end, ++]
[end]
[s, ., charAt, (, end, )]
[s]
[end]
['0', <=, c, &&, c, <=, digitMax]
['0', <=, c]
['0']
[c]
[c, <=, digitMax]
[c]
[digitMax]
[newDigit]
[c, -, '0']
[c]
['0']
['a', <=, c, &&, c, <, lowerCaseBound]
['a', <=, c]
['a']
[c]
[c, <, lowerCaseBound]
[c]
[lowerCaseBound]
[newDigit]
[c, -, 'a', +, 10]
[c, -, 'a']
[c]
['a']
[10]
['A', <=, c, &&, c, <, upperCaseBound]
['A', <=, c]
['A']
[c]
[c, <, upperCaseBound]
[c]
[upperCaseBound]
[newDigit]
[c, -, 'A', +, 10]
[c, -, 'A']
[c]
['A']
[10]
[sum]
[sum, *, radix, +, newDigit]
[sum, *, radix]
[sum]
[radix]
[newDigit]
[start, ==, end]
[start]
[end]
[NaN]
[sum, >=, 9007199254740992.0]
[sum]
[9007199254740992.0]
[radix, ==, 10]
[radix]
[10]
[Double, ., valueOf, (, s, ., substring, (, start, ,, end, ), ), ., doubleValue, (, )]
[Double, ., valueOf, (, s, ., substring, (, start, ,, end, ), )]
[Double]
[s, ., substring, (, start, ,, end, )]
[s]
[start]
[end]
[NaN]
[radix, ==, 2, ||, radix, ==, 4, ||, radix, ==, 8, ||, radix, ==, 16, ||, radix, ==, 32]
[radix, ==, 2, ||, radix, ==, 4, ||, radix, ==, 8, ||, radix, ==, 16]
[radix, ==, 2, ||, radix, ==, 4, ||, radix, ==, 8]
[radix, ==, 2, ||, radix, ==, 4]
[radix, ==, 2]
[radix]
[2]
[radix, ==, 4]
[radix]
[4]
[radix, ==, 8]
[radix]
[8]
[radix, ==, 16]
[radix]
[16]
[radix, ==, 32]
[radix]
[32]
[1]
[0]
[0]
[1]
[2]
[3]
[4]
[SKIP_LEADING_ZEROS]
[53]
[0.0]
[false]
[false]
[bitShiftInChar, ==, 1]
[bitShiftInChar]
[1]
[start, ==, end]
[start]
[end]
[digit]
[s, ., charAt, (, start, ++, )]
[s]
[start, ++]
[start]
['0', <=, digit, &&, digit, <=, '9']
['0', <=, digit]
['0']
[digit]
[digit, <=, '9']
[digit]
['9']
[digit]
['0']
['a', <=, digit, &&, digit, <=, 'z']
['a', <=, digit]
['a']
[digit]
[digit, <=, 'z']
[digit]
['z']
[digit]
['a', -, 10]
['a']
[10]
[digit]
['A', -, 10]
['A']
[10]
[bitShiftInChar]
[radix]
[bitShiftInChar]
[1]
[(, digit, &, bitShiftInChar, ), !=, 0]
[(, digit, &, bitShiftInChar, )]
[digit, &, bitShiftInChar]
[digit]
[bitShiftInChar]
[0]
[state]
[SKIP_LEADING_ZEROS]
[bit]
[--, exactBitsLimit]
[exactBitsLimit]
[sum]
[1.0]
[state]
[FIRST_EXACT_53_BITS]
[FIRST_EXACT_53_BITS]
[sum]
[2.0]
[bit]
[sum]
[1.0]
[--, exactBitsLimit]
[exactBitsLimit]
[exactBitsLimit, ==, 0]
[exactBitsLimit]
[0]
[bit53]
[bit]
[state]
[AFTER_BIT_53]
[AFTER_BIT_53]
[bit54]
[bit]
[factor]
[2.0]
[state]
[ZEROS_AFTER_54]
[ZEROS_AFTER_54]
[bit]
[state]
[MIXED_AFTER_54]
[MIXED_AFTER_54]
[factor]
[2]
[state]
[SKIP_LEADING_ZEROS]
[sum]
[0.0]
[FIRST_EXACT_53_BITS]
[AFTER_BIT_53]
[ZEROS_AFTER_54]
[bit54, &, bit53]
[bit54]
[bit53]
[sum]
[1.0]
[sum]
[factor]
[MIXED_AFTER_54]
[bit54]
[sum]
[1.0]
[sum]
[factor]
[sum]
[escapeString, (, s, ,, '"', )]
[s]
['"']
[!, (, escapeQuote, ==, '"', ||, escapeQuote, ==, '\'', )]
[(, escapeQuote, ==, '"', ||, escapeQuote, ==, '\'', )]
[escapeQuote, ==, '"', ||, escapeQuote, ==, '\'']
[escapeQuote, ==, '"']
[escapeQuote]
['"']
[escapeQuote, ==, '\'']
[escapeQuote]
['\'']
[new, IllegalStateException, (, "unexpected quote char:", +, escapeQuote, )]
["unexpected quote char:", +, escapeQuote]
["unexpected quote char:"]
[escapeQuote]
[null]
[0]
[s, ., length, (, )]
[s]
[i, !=, L]
[i]
[L]
[++, i]
[i]
[s, ., charAt, (, i, )]
[s]
[i]
[' ', <=, c, &&, c, <=, '~', &&, c, !=, escapeQuote, &&, c, !=, '\\']
[' ', <=, c, &&, c, <=, '~', &&, c, !=, escapeQuote]
[' ', <=, c, &&, c, <=, '~']
[' ', <=, c]
[' ']
[c]
[c, <=, '~']
[c]
['~']
[c, !=, escapeQuote]
[c]
[escapeQuote]
[c, !=, '\\']
[c]
['\\']
[sb, !=, null]
[sb]
[null]
[sb, ., append, (, (, char, ), c, )]
[sb]
[(, char, ), c]
[c]
[sb, ==, null]
[sb]
[null]
[sb]
[new, StringBuffer, (, L, +, 3, )]
[L, +, 3]
[L]
[3]
[sb, ., append, (, s, )]
[sb]
[s]
[sb, ., setLength, (, i, )]
[sb]
[i]
[-, 1]
[1]
[c]
['\b']
[escape]
['b']
['\f']
[escape]
['f']
['\n']
[escape]
['n']
['\r']
[escape]
['r']
['\t']
[escape]
['t']
[0xb]
[escape]
['v']
[' ']
[escape]
[' ']
['\\']
[escape]
['\\']
[escape, >=, 0]
[escape]
[0]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[sb, ., append, (, (, char, ), escape, )]
[sb]
[(, char, ), escape]
[escape]
[c, ==, escapeQuote]
[c]
[escapeQuote]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[sb, ., append, (, escapeQuote, )]
[sb]
[escapeQuote]
[c, <, 256]
[c]
[256]
[sb, ., append, (, "\\x", )]
[sb]
["\\x"]
[hexSize]
[2]
[sb, ., append, (, "\\u", )]
[sb]
["\\u"]
[hexSize]
[4]
[(, hexSize, -, 1, ), *, 4]
[(, hexSize, -, 1, )]
[hexSize, -, 1]
[hexSize]
[1]
[4]
[shift, >=, 0]
[shift]
[0]
[shift]
[4]
[0xf, &, (, c, >, >, shift, )]
[0xf]
[(, c, >, >, shift, )]
[c, >, >, shift]
[c]
[shift]
[(, digit, <, 10, ), ?, '0', +, digit, :, 'a', -, 10, +, digit]
[(, digit, <, 10, )]
[digit, <, 10]
[digit]
[10]
['0', +, digit]
['0']
[digit]
['a', -, 10, +, digit]
['a', -, 10]
['a']
[10]
[digit]
[sb, ., append, (, (, char, ), hc, )]
[sb]
[(, char, ), hc]
[hc]
[(, sb, ==, null, ), ?, s, :, sb, ., toString, (, )]
[(, sb, ==, null, )]
[sb, ==, null]
[sb]
[null]
[s]
[sb, ., toString, (, )]
[sb]
[s, ., length, (, )]
[s]
[L, ==, 0]
[L]
[0]
[false]
[!, Character, ., isJavaIdentifierStart, (, s, ., charAt, (, 0, ), )]
[Character, ., isJavaIdentifierStart, (, s, ., charAt, (, 0, ), )]
[Character]
[s, ., charAt, (, 0, )]
[s]
[0]
[false]
[1]
[i, !=, L]
[i]
[L]
[++, i]
[i]
[!, Character, ., isJavaIdentifierPart, (, s, ., charAt, (, i, ), )]
[Character, ., isJavaIdentifierPart, (, s, ., charAt, (, i, ), )]
[Character]
[s, ., charAt, (, i, )]
[s]
[i]
[false]
[!, TokenStream, ., isKeyword, (, s, )]
[TokenStream, ., isKeyword, (, s, )]
[TokenStream]
[s]
[10]
[str, ., length, (, )]
[str]
[1, <=, len, &&, len, <=, MAX_VALUE_LENGTH]
[1, <=, len]
[1]
[len]
[len, <=, MAX_VALUE_LENGTH]
[len]
[MAX_VALUE_LENGTH]
[str, ., charAt, (, 0, )]
[str]
[0]
[c]
['0']
[c, ==, 0]
[c]
[0]
[(, len, ==, 1, ), ?, 0L, :, -, 1L]
[(, len, ==, 1, )]
[len, ==, 1]
[len]
[1]
[0L]
[-, 1L]
[1L]
[1, <=, c, &&, c, <=, 9]
[1, <=, c]
[1]
[c]
[c, <=, 9]
[c]
[9]
[c]
[1]
[i, !=, len]
[i]
[len]
[++, i]
[i]
[c]
[str, ., charAt, (, i, ), -, '0']
[str, ., charAt, (, i, )]
[str]
[i]
['0']
[!, (, 0, <=, c, &&, c, <=, 9, )]
[(, 0, <=, c, &&, c, <=, 9, )]
[0, <=, c, &&, c, <=, 9]
[0, <=, c]
[0]
[c]
[c, <=, 9]
[c]
[9]
[-, 1]
[1]
[v]
[10, *, v, +, c]
[10, *, v]
[10]
[v]
[c]
[(, v, >, >, >, 32, ), ==, 0]
[(, v, >, >, >, 32, )]
[v, >, >, >, 32]
[v]
[32]
[0]
[v]
[-, 1]
[1]
[s, ., equals, (, "__proto__", ), ||, s, ., equals, (, "__parent__", )]
[s, ., equals, (, "__proto__", )]
[s]
["__proto__"]
[s, ., equals, (, "__parent__", )]
[s]
["__parent__"]
[getMessage, (, messageId, ,, null, )]
[messageId]
[null]
[{, arg1, }]
[arg1]
[getMessage, (, messageId, ,, arguments, )]
[messageId]
[arguments]
["rhino_ast.java.com.google.javascript.rhino.Messages"]
[Locale, ., getDefault, (, )]
[Locale]
[ResourceBundle, ., getBundle, (, defaultResource, ,, locale, )]
[ResourceBundle]
[defaultResource]
[locale]
[formatString]
[rb, ., getString, (, messageId, )]
[rb]
[messageId]
[new, RuntimeException, (, "no message resource found for message property ", +, messageId, )]
["no message resource found for message property ", +, messageId]
["no message resource found for message property "]
[messageId]
[new, MessageFormat, (, formatString, )]
[formatString]
[formatter, ., format, (, arguments, )]
[formatter]
[arguments]
