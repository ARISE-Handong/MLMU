["TightenTypes pass appears to be stuck in an infinite loop."]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newIdentityHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., compiler]
[this]
[compiler]
[topScope]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[Sets, ., newHashSet, (, )]
[Sets]
[topScope]
[new, ConcreteScope, (, null, )]
[null]
[topScope, ., initForExternRoot, (, externRoot, )]
[topScope]
[externRoot]
[topScope, ., initForScopeRoot, (, jsRoot, )]
[topScope]
[jsRoot]
[1000]
[0]
[Sets, ., newHashSet, (, topScope, )]
[Sets]
[topScope]
[Lists, ., newArrayList, (, topScope, )]
[Lists]
[topScope]
[changed]
[false]
[0]
[i, <, workList, ., size, (, )]
[i]
[workList, ., size, (, )]
[workList]
[++, i]
[i]
[workList, ., get, (, i, )]
[workList]
[i]
[scope, ., getActions, (, )]
[scope]
[action, ., getAssignments, (, scope, )]
[action]
[scope]
[assign, ., slot, ., addConcreteType, (, assign, ., type, )]
[assign, ., slot]
[assign]
[assign, ., type]
[assign]
[changed]
[true]
[assign, ., slot, ., getScope, (, )]
[assign, ., slot]
[assign]
[(, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, )]
[(, varScope, !=, scope, )]
[varScope, !=, scope]
[varScope]
[scope]
[!, workSet, ., contains, (, varScope, )]
[workSet, ., contains, (, varScope, )]
[workSet]
[varScope]
[workSet, ., add, (, varScope, )]
[workSet]
[varScope]
[workList, ., add, (, varScope, )]
[workList]
[varScope]
[Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, )]
[Preconditions]
[++, iterations, !=, maxIterations]
[++, iterations]
[iterations]
[maxIterations]
[NON_HALTING_ERROR_MSG]
[changed]
[this, ., parent]
[this]
[parent]
[this, ., slots]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., actions]
[this]
[Lists, ., newArrayList, (, )]
[Lists]
[null]
[parent]
[slots, ., get, (, name, )]
[slots]
[name]
[getOwnSlot, (, name, )]
[name]
[var, !=, null]
[var]
[null]
[var]
[parent, !=, null]
[parent]
[null]
[parent, ., getSlot, (, name, )]
[parent]
[name]
[null]
[slots, ., values, (, )]
[slots]
[slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, )]
[slots]
[ConcreteFunctionType, ., THIS_SLOT_NAME]
[ConcreteFunctionType]
[(, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE]
[(, thisVar, !=, null, )]
[thisVar, !=, null]
[thisVar]
[null]
[thisVar, ., getType, (, )]
[thisVar]
[ConcreteType, ., NONE]
[ConcreteType]
[slots, ., put, (, name, ,, new, ConcreteSlot, (, this, ,, name, ), )]
[slots]
[name]
[new, ConcreteSlot, (, this, ,, name, )]
[this]
[name]
[new, ConcreteSlot, (, this, ,, name, )]
[this]
[name]
[var, ., addConcreteType, (, type, )]
[var]
[type]
[slots, ., put, (, name, ,, var, )]
[slots]
[name]
[var]
[actions]
[Preconditions, ., checkNotNull, (, decl, )]
[Preconditions]
[decl]
[decl, ., isFunction, (, )]
[decl]
[decl]
[decl, ., getLastChild, (, )]
[decl]
[Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), )]
[Preconditions]
[decl, ., isBlock, (, )]
[decl]
[NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, false, ), )]
[NodeTraversal]
[compiler]
[decl]
[new, CreateScope, (, this, ,, false, )]
[this]
[false]
[Preconditions, ., checkNotNull, (, decl, )]
[Preconditions]
[decl]
[Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), )]
[Preconditions]
[decl, ., isBlock, (, )]
[decl]
[NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, true, ), )]
[NodeTraversal]
[compiler]
[decl]
[new, CreateScope, (, this, ,, true, )]
[this]
[true]
[actions, ., add, (, action, )]
[actions]
[action]
[getTypeOfThis, (, ), ., toString, (, ), +, " ", +, getSlots, (, )]
[getTypeOfThis, (, ), ., toString, (, ), +, " "]
[getTypeOfThis, (, ), ., toString, (, )]
[getTypeOfThis, (, )]
[" "]
[getSlots, (, )]
[this, ., scope]
[this]
[scope]
[this, ., name]
[this]
[name]
[this, ., type]
[this]
[ConcreteType, ., NONE]
[ConcreteType]
[scope]
[name]
[type]
[true]
[null]
[null]
[this, ., type]
[this]
[this, ., type]
[this]
[origType, ., unionWith, (, type, )]
[origType]
[type]
[!, this, ., type, ., equals, (, origType, )]
[this, ., type, ., equals, (, origType, )]
[this, ., type]
[this]
[origType]
[getName, (, ), +, ": ", +, getType, (, )]
[getName, (, ), +, ": "]
[getName, (, )]
[": "]
[getType, (, )]
[this, ., slot]
[this]
[slot]
[this, ., type]
[this]
[type]
[Preconditions, ., checkNotNull, (, slot, )]
[Preconditions]
[slot]
[Preconditions, ., checkNotNull, (, type, )]
[Preconditions]
[type]
[this, ., slot]
[this]
[slot]
[this, ., expression]
[this]
[expr]
[Preconditions, ., checkNotNull, (, slot, )]
[Preconditions]
[slot]
[Preconditions, ., checkNotNull, (, expr, )]
[Preconditions]
[expr]
[Lists, ., newArrayList, (, new, Assignment, (, slot, ,, inferConcreteType, (, scope, ,, expression, ), ), )]
[Lists]
[new, Assignment, (, slot, ,, inferConcreteType, (, scope, ,, expression, ), )]
[slot]
[inferConcreteType, (, scope, ,, expression, )]
[scope]
[expression]
[this, ., receiver]
[this]
[receiver]
[this, ., propName]
[this]
[receiver, ., getNext, (, ), ., getString, (, )]
[receiver, ., getNext, (, )]
[receiver]
[this, ., expression]
[this]
[expr]
[Preconditions, ., checkNotNull, (, receiver, )]
[Preconditions]
[receiver]
[Preconditions, ., checkNotNull, (, propName, )]
[Preconditions]
[propName]
[Preconditions, ., checkNotNull, (, expr, )]
[Preconditions]
[expr]
[inferConcreteType, (, scope, ,, receiver, )]
[scope]
[receiver]
[inferConcreteType, (, scope, ,, expression, )]
[scope]
[expression]
[Lists, ., newArrayList, (, )]
[Lists]
[recvType, ., getPropertySlots, (, propName, )]
[recvType]
[propName]
[assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, ), )]
[assigns]
[new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, )]
[(, ConcreteSlot, ), prop]
[prop]
[exprType]
[assigns]
[false]
[false]
[null]
[this, ., receiver]
[this]
[receiver]
[this, ., firstArgument]
[this]
[firstArgument]
[this, ., propName]
[this]
[propName]
[this]
[Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", )]
[Preconditions]
[!, (, isCallFunction, &&, isNew, )]
[(, isCallFunction, &&, isNew, )]
[isCallFunction, &&, isNew]
[isCallFunction]
[isNew]
["A function call cannot be of the form: new Object.call()"]
[isNewCall]
[isNew]
[this]
[Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", )]
[Preconditions]
[!, isNewCall]
[isNewCall]
["A function call cannot be of the form: new Object.call()"]
[isCallFunction]
[true]
[this]
[isCallFunction]
[new, NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, )]
[receiver]
[propName]
[firstArgument]
[new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,, firstArgument, )]
[isNewCall]
[receiver]
[propName]
[firstArgument]
[Lists, ., newArrayList, (, )]
[Lists]
[recvType, ., getFunctions, (, )]
[recvType]
[assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), )]
[assigns]
[new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, )]
[(, ConcreteSlot, ), fType, ., getCallSlot, (, )]
[fType, ., getCallSlot, (, )]
[fType]
[fType]
[assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), )]
[assigns]
[new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, )]
[(, ConcreteSlot, ), fType, ., getThisSlot, (, )]
[fType, ., getThisSlot, (, )]
[fType]
[thisType]
[0]
[i, <, argTypes, ., size, (, )]
[i]
[argTypes, ., size, (, )]
[argTypes]
[++, i]
[i]
[(, ConcreteSlot, ), fType, ., getParameterSlot, (, i, )]
[fType, ., getParameterSlot, (, i, )]
[fType]
[i]
[variable, !=, null]
[variable]
[null]
[assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), ), )]
[assigns]
[new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), )]
[variable]
[argTypes, ., get, (, i, )]
[argTypes]
[i]
[assigns]
[this, ., receiver]
[this]
[receiver]
[this, ., thisType]
[this]
[thisType]
[this, ., argTypes]
[this]
[argTypes]
[getFunctionCallAssignments, (, inferConcreteType, (, scope, ,, receiver, ), ,, thisType, ,, argTypes, )]
[inferConcreteType, (, scope, ,, receiver, )]
[scope]
[receiver]
[thisType]
[argTypes]
[this, ., isNewCall]
[this]
[isNewCall]
[this, ., receiver]
[this]
[receiver]
[this, ., propName]
[this]
[propName]
[this, ., firstArgument]
[this]
[firstArgument]
[Preconditions, ., checkNotNull, (, receiver, )]
[Preconditions]
[receiver]
[ConcreteType, ., NONE]
[ConcreteType]
[inferConcreteType, (, scope, ,, receiver, )]
[scope]
[receiver]
[propName, !=, null]
[propName]
[null]
[thisType]
[recvType]
[recvType]
[thisType, ., getPropertyType, (, propName, )]
[thisType]
[propName]
[recvType, ., isAll, (, )]
[recvType]
[new, AssertionError, (, "Found call on all type, which makes tighten types useless.", )]
["Found call on all type, which makes tighten types useless."]
[isNewCall]
[thisType]
[ConcreteType, ., NONE]
[ConcreteType]
[recvType, ., getFunctionInstanceTypes, (, )]
[recvType]
[thisType]
[thisType, ., unionWith, (, instType, )]
[thisType]
[instType]
[allInstantiatedTypes, ., add, (, thisType, )]
[allInstantiatedTypes]
[thisType]
[added]
[typeIntersectionMemos, ., clear, (, )]
[typeIntersectionMemos]
[Lists, ., newArrayList, (, )]
[Lists]
[firstArgument]
[arg, !=, null]
[arg]
[null]
[arg]
[arg, ., getNext, (, )]
[arg]
[argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), )]
[argTypes]
[inferConcreteType, (, scope, ,, arg, )]
[scope]
[arg]
[getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, )]
[recvType]
[thisType]
[argTypes]
[this, ., receiver]
[this]
[receiver]
[this, ., propName]
[this]
[propName]
[this, ., firstArgument]
[this]
[firstArgument]
[Preconditions, ., checkNotNull, (, receiver, )]
[Preconditions]
[receiver]
[(, firstArgument, !=, null, ), ?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, )]
[(, firstArgument, !=, null, )]
[firstArgument, !=, null]
[firstArgument]
[null]
[inferConcreteType, (, scope, ,, firstArgument, )]
[scope]
[firstArgument]
[getTopScope, (, ), ., getTypeOfThis, (, )]
[getTopScope, (, )]
[inferConcreteType, (, scope, ,, receiver, )]
[scope]
[receiver]
[recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, )]
[recvType, instanceof, ConcreteInstanceType]
[recvType]
[(, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, )]
[(, (, ConcreteInstanceType, ), recvType, )]
[(, ConcreteInstanceType, ), recvType]
[recvType]
[recvType]
[thisType, ., getPropertyType, (, propName, )]
[thisType]
[propName]
[Lists, ., newArrayList, (, )]
[Lists]
[firstArgument, ., getNext, (, )]
[firstArgument]
[arg, !=, null]
[arg]
[null]
[arg]
[arg, ., getNext, (, )]
[arg]
[argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), )]
[argTypes]
[inferConcreteType, (, scope, ,, arg, )]
[scope]
[arg]
[getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, )]
[recvType]
[thisType]
[argTypes]
[this, ., scope]
[this]
[scope]
[this, ., inExterns]
[this]
[inExterns]
[n, ., getType, (, )]
[n]
[Token, ., VAR]
[Token]
[name]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null]
[name]
[null]
[name]
[name, ., getNext, (, )]
[name]
[inExterns]
[scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType, (, name, ,, scope, ), )]
[scope]
[name, ., getString, (, )]
[name]
[n]
[createType, (, name, ,, scope, )]
[name]
[scope]
[scope, ., declareSlot, (, name, ., getString, (, ), ,, n, )]
[scope]
[name, ., getString, (, )]
[name]
[n]
[name, ., getFirstChild, (, ), !=, null]
[name, ., getFirstChild, (, )]
[name]
[null]
[addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), )]
[createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, )]
[name]
[name, ., getFirstChild, (, )]
[name]
[n]
[Token, ., GETPROP]
[Token]
[inExterns]
[inferConcreteType, (, getTopScope, (, ), ,, n, )]
[getTopScope, (, )]
[n]
[type, ., isNone, (, )]
[type]
[(, ConcreteScope, ), inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), ), ., getScope, (, )]
[inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), ), ., getScope, (, )]
[inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), )]
[getTopScope, (, )]
[n, ., getFirstChild, (, )]
[n]
[scope, !=, null]
[scope]
[null]
[type]
[createType, (, n, ., getJSType, (, ), )]
[n, ., getJSType, (, )]
[n]
[type, ., isNone, (, ), ||, type, ., isAll, (, )]
[type, ., isNone, (, )]
[type]
[type, ., isAll, (, )]
[type]
[type]
[createUnionWithSubTypes, (, type, )]
[type]
[n, ., getLastChild, (, )]
[n]
[scope, ., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, )]
[scope]
[nameNode, ., getString, (, )]
[nameNode]
[n]
[type]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[!, n, ., getJSType, (, ), ., isNoObjectType, (, )]
[n, ., getJSType, (, ), ., isNoObjectType, (, )]
[n, ., getJSType, (, )]
[n]
[createConcreteFunction, (, n, ,, scope, )]
[n]
[scope]
[scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, )]
[scope]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[n]
[type]
[inExterns, &&, type, ., getInstanceType, (, ), !=, null]
[inExterns]
[type, ., getInstanceType, (, ), !=, null]
[type, ., getInstanceType, (, )]
[type]
[null]
[allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), )]
[allInstantiatedTypes]
[type, ., getInstanceType, (, )]
[type]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, )]
[n]
[inExterns]
[lhs, ., isGetProp, (, )]
[lhs]
[inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), )]
[getTopScope, (, )]
[lhs, ., getFirstChild, (, )]
[lhs]
[scope]
[(, ConcreteScope, ), type, ., getScope, (, )]
[type, ., getScope, (, )]
[type]
[scope]
[getTopScope, (, )]
[scope, ==, null]
[scope]
[null]
[inferConcreteType, (, getTopScope, (, ), ,, n, )]
[getTopScope, (, )]
[n]
[type, ., isNone, (, ), ||, type, ., isAll, (, )]
[type, ., isNone, (, )]
[type]
[type, ., isAll, (, )]
[type]
[type, ., isFunction, (, )]
[type]
[lhs, ., getJSType, (, )]
[lhs]
[lhsType, ==, null]
[lhsType]
[null]
[lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, )]
[lhsType, ., restrictByNotNullOrUndefined, (, )]
[lhsType]
[funType, ==, null]
[funType]
[null]
[createType, (, funType, ., getReturnType, (, ), )]
[funType, ., getReturnType, (, )]
[funType]
[retType]
[createUnionWithSubTypes, (, retType, )]
[retType]
[type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, )]
[type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, )]
[type, ., toFunction, (, ), ., getReturnSlot, (, )]
[type, ., toFunction, (, )]
[type]
[retType]
[(, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, )]
[(, (, ConcreteScope, ), type, ., getScope, (, ), )]
[(, ConcreteScope, ), type, ., getScope, (, )]
[type, ., getScope, (, )]
[type]
[ConcreteFunctionType, ., RETURN_SLOT_NAME]
[ConcreteFunctionType]
[n]
[newret]
[scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, )]
[scope]
[lhs, ., getLastChild, (, ), ., getString, (, )]
[lhs, ., getLastChild, (, )]
[lhs]
[n]
[type]
[addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, ), )]
[createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, )]
[lhs]
[n, ., getLastChild, (, )]
[n]
[n]
[Token, ., NEW]
[Token]
[Token, ., CALL]
[Token]
[n, ., getFirstChild, (, )]
[n]
[receiver, ., isGetProp, (, )]
[receiver]
[receiver, ., getFirstChild, (, )]
[receiver]
["call", ., equals, (, first, ., getNext, (, ), ., getString, (, ), )]
["call"]
[first, ., getNext, (, ), ., getString, (, )]
[first, ., getNext, (, )]
[first]
[first, ., isGetProp, (, )]
[first]
[addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (, )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), )]
[first]
[receiver, ., getNext, (, )]
[receiver]
[first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, )]
[first, ., getFirstChild, (, ), ., getNext, (, )]
[first, ., getFirstChild, (, )]
[first]
[addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setIsCallFunction, (, )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), )]
[first]
[receiver, ., getNext, (, )]
[receiver]
[addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), ), ., build, (, ), )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), ), ., build, (, )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), )]
[new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), )]
[first]
[receiver, ., getNext, (, )]
[receiver]
[first, ., getNext, (, ), ., getString, (, )]
[first, ., getNext, (, )]
[first]
[addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), )]
[new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, )]
[new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall, (, n, ., isNew, (, ), )]
[new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), )]
[receiver]
[receiver, ., getNext, (, )]
[receiver]
[n, ., isNew, (, )]
[n]
[Token, ., NAME]
[Token]
[parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isCatch, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, ), ), )]
[scope]
[n, ., getString, (, )]
[n]
[n]
[createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, ), )]
[createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, )]
[createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), )]
[getTypeRegistry, (, ), ., getType, (, "Error", )]
[getTypeRegistry, (, )]
["Error"]
[Token, ., RETURN]
[Token]
[n, ., getFirstChild, (, ), !=, null]
[n, ., getFirstChild, (, )]
[n]
[null]
[addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,, n, ., getFirstChild, (, ), ), )]
[new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,, n, ., getFirstChild, (, ), )]
[(, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, )]
[scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, )]
[scope]
[ConcreteFunctionType, ., RETURN_SLOT_NAME]
[ConcreteFunctionType]
[n, ., getFirstChild, (, )]
[n]
[getImplicitActions, (, n, )]
[n]
[actions, !=, null]
[actions]
[null]
[actions]
[addAction, (, action, )]
[action]
[Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", )]
[Preconditions]
[!, inExterns]
[inExterns]
["Unexpected action in externs."]
[scope, ., addAction, (, action, )]
[scope]
[action]
[Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs.", )]
[Preconditions]
[!, inExterns]
[inExterns]
["Unexpected action in externs."]
[actions]
[scope, ., addAction, (, action, )]
[scope]
[action]
[lhs, ., getType, (, )]
[lhs]
[Token, ., NAME]
[Token]
[(, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), )]
[scope, ., getSlot, (, lhs, ., getString, (, ), )]
[scope]
[lhs, ., getString, (, )]
[lhs]
[Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), )]
[Preconditions]
[var, !=, null]
[var]
[null]
["Type tightener could not find variable with name %s"]
[lhs, ., getString, (, )]
[lhs]
[Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), )]
[Lists]
[new, VariableAssignAction, (, var, ,, rhs, )]
[var]
[rhs]
[Token, ., GETPROP]
[Token]
[lhs, ., getFirstChild, (, )]
[lhs]
[Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), )]
[Lists]
[new, PropertyAssignAction, (, receiver, ,, rhs, )]
[receiver]
[rhs]
[Token, ., GETELEM]
[Token]
[Lists, ., newArrayList, (, )]
[Lists]
[new, AssertionError, (, "Bad LHS for assignment: ", +, parent, ., toStringTree, (, ), )]
["Bad LHS for assignment: ", +, parent, ., toStringTree, (, )]
["Bad LHS for assignment: "]
[parent, ., toStringTree, (, )]
[parent]
[Lists, ., newArrayList, (, )]
[Lists]
[fun, !=, null]
[fun]
[null]
[thisType]
[createType, (, jsThisType, )]
[jsThisType]
[fun, ., getParameters, (, )]
[fun]
[argTypes, ., add, (, createType, (, arg, ,, scope, ), )]
[argTypes]
[createType, (, arg, ,, scope, )]
[arg]
[scope]
[thisType]
[ConcreteType, ., NONE]
[ConcreteType]
[new, ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, )]
[receiver]
[thisType]
[argTypes]
[n, ., getJSType, (, ), !=, null]
[n, ., getJSType, (, )]
[n]
[null]
[n, ., getJSType, (, )]
[n]
[getTypeRegistry, (, ), ., getNativeType, (, UNKNOWN_TYPE, )]
[getTypeRegistry, (, )]
[UNKNOWN_TYPE]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[n, ., getFirstChild, (, )]
[n]
[!, inExterns, &&, receiver, ., isGetProp, (, )]
[!, inExterns]
[inExterns]
[receiver, ., isGetProp, (, )]
[receiver]
[getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), )]
[n]
[receiver, ., getJSType, (, )]
[receiver]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, )]
[n]
[!, inExterns, &&, lhs, ., isGetProp, (, )]
[!, inExterns]
[inExterns]
[lhs, ., isGetProp, (, )]
[lhs]
[getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ., getLastChild, (, ), )]
[lhs, ., getFirstChild, (, ), ., getJSType, (, )]
[lhs, ., getFirstChild, (, )]
[lhs]
[lhs, ., getLastChild, (, ), ., getString, (, )]
[lhs, ., getLastChild, (, )]
[lhs]
[n, ., getLastChild, (, )]
[n]
[null]
[n, ., getFirstChild, (, )]
[n]
[recvType, ., isUnionType, (, )]
[recvType]
[Lists, ., newArrayList, (, )]
[Lists]
[recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[recvType, ., toMaybeUnionType, (, )]
[recvType]
[actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), )]
[actions]
[getImplicitActionsFromCall, (, n, ,, alt, )]
[n]
[alt]
[actions]
[!, (, recvType, ., isFunctionType, (, ), )]
[(, recvType, ., isFunctionType, (, ), )]
[recvType, ., isFunctionType, (, )]
[recvType]
[Lists, ., <, Action, >, newArrayList, (, )]
[Lists]
[ObjectType, ., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), )]
[ObjectType]
[getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, receiver, ., getFirstChild, (, ), )]
[receiver, ., getFirstChild, (, )]
[receiver]
[receiver, ., getLastChild, (, ), ., getString, (, )]
[receiver, ., getLastChild, (, )]
[receiver]
[objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null]
[objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), )]
[objType, !=, null]
[objType]
[null]
[(, objType, ., isPropertyInExterns, (, prop, ), )]
[objType, ., isPropertyInExterns, (, prop, )]
[objType]
[prop]
[(, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null]
[(, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, )]
[(, recvType, ., toMaybeFunctionType, (, ), )]
[recvType, ., toMaybeFunctionType, (, )]
[recvType]
[null]
[Lists, ., newArrayList, (, )]
[Lists]
[(, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator, (, )]
[(, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, )]
[(, recvType, ., toMaybeFunctionType, (, ), )]
[recvType, ., toMaybeFunctionType, (, )]
[recvType]
[n, ., children, (, ), ., iterator, (, )]
[n, ., children, (, )]
[n]
[argumentIter, ., next, (, )]
[argumentIter]
[paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, )]
[paramIter, ., hasNext, (, )]
[paramIter]
[argumentIter, ., hasNext, (, )]
[argumentIter]
[argumentIter, ., next, (, )]
[argumentIter]
[paramIter, ., next, (, )]
[paramIter]
[arg, ., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, )]
[arg, ., getJSType, (, ), !=, null]
[arg, ., getJSType, (, )]
[arg]
[null]
[arg, ., getJSType, (, ), ., isFunctionType, (, )]
[arg, ., getJSType, (, )]
[arg]
[actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType, (, ), ), )]
[actions]
[getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType, (, ), )]
[arg]
[arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, )]
[arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, )]
[arg, ., getJSType, (, ), ., toMaybeFunctionType, (, )]
[arg, ., getJSType, (, )]
[arg]
[param, ., getJSType, (, )]
[param]
[actions]
[Lists, ., <, Action, >, newArrayList, (, )]
[Lists]
[paramType, ., isUnionType, (, )]
[paramType]
[Lists, ., newArrayList, (, )]
[Lists]
[paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[paramType, ., toMaybeUnionType, (, )]
[paramType]
[actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), )]
[actions]
[getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, )]
[arg]
[thisType]
[paramAlt]
[actions]
[paramType, ., isFunctionType, (, )]
[paramType]
[Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), ), )]
[Lists]
[createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), )]
[arg]
[thisType]
[paramType, ., toMaybeFunctionType, (, )]
[paramType]
[Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, null, ), )]
[Lists]
[createExternFunctionCall, (, arg, ,, thisType, ,, null, )]
[arg]
[thisType]
[null]
[Lists, ., newArrayList, (, )]
[Lists]
[jsType, ., isUnionType, (, )]
[jsType]
[false]
[jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[jsType, ., toMaybeUnionType, (, )]
[jsType]
[ObjectType, ., cast, (, alt, )]
[ObjectType]
[alt]
[altObj, !=, null]
[altObj]
[null]
[actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), )]
[actions]
[getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, )]
[altObj]
[prop]
[fnNode]
[altObj, ., hasProperty, (, prop, )]
[altObj]
[prop]
[found]
[true]
[found]
[actions]
[ObjectType, ., cast, (, jsType, )]
[ObjectType]
[jsType]
[objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, )]
[objType, !=, null, &&, !, objType, ., isUnknownType, (, )]
[objType, !=, null]
[objType]
[null]
[!, objType, ., isUnknownType, (, )]
[objType, ., isUnknownType, (, )]
[objType]
[objType, ., hasProperty, (, prop, )]
[objType]
[prop]
[getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, )]
[objType]
[prop]
[fnNode]
[getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, )]
[getTypeRegistry, (, )]
[prop]
[actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), )]
[actions]
[getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, )]
[type]
[prop]
[fnNode]
[actions]
[jsType, ., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, )]
[jsType, ., getPropertyType, (, prop, )]
[jsType]
[prop]
[jsType, ., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, )]
[jsType, ., isPropertyInExterns, (, prop, )]
[jsType]
[prop]
[propType, ., isFunctionType, (, )]
[propType]
[jsType]
[jsType, ., isFunctionPrototypeType, (, )]
[jsType]
[thisType]
[thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, )]
[thisType, ., getOwnerFunction, (, )]
[thisType]
[propType, ., toMaybeFunctionType, (, )]
[propType]
[createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, )]
[fnNode]
[thisType]
[callType]
[Lists, ., <, Action, >, newArrayList, (, action, )]
[Lists]
[action]
[Lists, ., <, Action, >, newArrayList, (, )]
[Lists]
[Preconditions, ., checkNotNull, (, name, )]
[Preconditions]
[name]
[Preconditions, ., checkArgument, (, name, ., isName, (, ), )]
[Preconditions]
[name, ., isName, (, )]
[name]
[name, ., getJSType, (, ), ==, null]
[name, ., getJSType, (, )]
[name]
[null]
[ConcreteType, ., ALL]
[ConcreteType]
[(, name, ., getFirstChild, (, ), !=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), )]
[(, name, ., getFirstChild, (, ), !=, null, )]
[name, ., getFirstChild, (, ), !=, null]
[name, ., getFirstChild, (, )]
[name]
[null]
[(, name, ., getFirstChild, (, ), ., isFunction, (, ), )]
[name, ., getFirstChild, (, ), ., isFunction, (, )]
[name, ., getFirstChild, (, )]
[name]
[createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, )]
[name, ., getFirstChild, (, )]
[name]
[scope]
[createType, (, name, ., getJSType, (, ), )]
[name, ., getJSType, (, )]
[name]
[jsType, ., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, )]
[jsType, ., isUnknownType, (, )]
[jsType]
[jsType, ., isEmptyType, (, )]
[jsType]
[ConcreteType, ., ALL]
[ConcreteType]
[jsType, ., isUnionType, (, )]
[jsType]
[ConcreteType, ., NONE]
[ConcreteType]
[jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[jsType, ., toMaybeUnionType, (, )]
[jsType]
[type]
[type, ., unionWith, (, createType, (, alt, ), )]
[type]
[createType, (, alt, )]
[alt]
[type]
[jsType, ., isFunctionType, (, )]
[jsType]
[getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null]
[getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), )]
[jsType, ., toMaybeFunctionType, (, )]
[jsType]
[null]
[getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), )]
[jsType, ., toMaybeFunctionType, (, )]
[jsType]
[ConcreteType, ., ALL]
[ConcreteType]
[jsType, ., isObject, (, )]
[jsType]
[createConcreteInstance, (, jsType, ., toObjectType, (, ), )]
[jsType, ., toObjectType, (, )]
[jsType]
[ConcreteType, ., NONE]
[ConcreteType]
[ConcreteType, ., NONE]
[ConcreteType]
[jsType, ., isUnionType, (, )]
[jsType]
[jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[jsType, ., toMaybeUnionType, (, )]
[jsType]
[ret]
[ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), )]
[ret]
[createTypeWithSubTypes, (, alt, )]
[alt]
[ObjectType, ., cast, (, jsType, )]
[ObjectType]
[jsType]
[instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, )]
[instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null]
[instType, !=, null]
[instType]
[null]
[instType, ., getConstructor, (, ), !=, null]
[instType, ., getConstructor, (, )]
[instType]
[null]
[instType, ., getConstructor, (, ), ., isInterface, (, )]
[instType, ., getConstructor, (, )]
[instType]
[getTypeRegistry, (, ), ., getDirectImplementors, (, instType, )]
[getTypeRegistry, (, )]
[instType]
[implementors]
[ret]
[ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), )]
[ret]
[createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), )]
[implementor, ., getInstanceType, (, )]
[implementor]
[ret]
[ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), )]
[ret]
[createUnionWithSubTypes, (, createType, (, jsType, ), )]
[createType, (, jsType, )]
[jsType]
[ret]
[Preconditions, ., checkNotNull, (, scope, )]
[Preconditions]
[scope]
[Preconditions, ., checkNotNull, (, expr, )]
[Preconditions]
[expr]
[expr, ., getType, (, )]
[expr]
[Token, ., NAME]
[Token]
[scope, ., getSlot, (, expr, ., getString, (, ), )]
[scope]
[expr, ., getString, (, )]
[expr]
[slot, !=, null]
[slot]
[null]
[ret]
[slot, ., getType, (, )]
[slot]
[ret]
[ConcreteType, ., ALL]
[ConcreteType]
[Token, ., THIS]
[Token]
[ret]
[scope, ., getTypeOfThis, (, )]
[scope]
[Token, ., ASSIGN]
[Token]
[ret]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[scope]
[expr, ., getLastChild, (, )]
[expr]
[Token, ., COMMA]
[Token]
[ret]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[scope]
[expr, ., getLastChild, (, )]
[expr]
[Token, ., AND]
[Token]
[ret]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[scope]
[expr, ., getLastChild, (, )]
[expr]
[Token, ., OR]
[Token]
[ret]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), )]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), )]
[scope]
[expr, ., getFirstChild, (, )]
[expr]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[scope]
[expr, ., getLastChild, (, )]
[expr]
[Token, ., HOOK]
[Token]
[ret]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), )]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), )]
[scope]
[expr, ., getFirstChild, (, ), ., getNext, (, )]
[expr, ., getFirstChild, (, )]
[expr]
[inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[scope]
[expr, ., getLastChild, (, )]
[expr]
[Token, ., GETPROP]
[Token]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), )]
[scope]
[expr, ., getFirstChild, (, )]
[expr]
[recvType, ., isAll, (, )]
[recvType]
[ret]
[recvType]
[expr, ., getLastChild, (, )]
[expr]
[prop, ., getString, (, )]
[prop]
[recvType, ., getPropertyType, (, propName, )]
[recvType]
[propName]
["prototype", ., equals, (, propName, )]
["prototype"]
[propName]
[recvType, ., getFunctions, (, )]
[recvType]
[type]
[type, ., unionWith, (, funType, ., getPrototypeType, (, ), )]
[type]
[funType, ., getPrototypeType, (, )]
[funType]
[compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[propName]
[recvType, ., getSuperclassTypes, (, )]
[recvType]
[type]
[type, ., unionWith, (, superType, ., getPrototypeType, (, ), )]
[type]
[superType, ., getPrototypeType, (, )]
[superType]
["call", ., equals, (, propName, )]
["call"]
[propName]
[type]
[recvType]
[ret]
[type]
[Token, ., GETELEM]
[Token]
[ret]
[ConcreteType, ., ALL]
[ConcreteType]
[Token, ., CALL]
[Token]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), )]
[scope]
[expr, ., getFirstChild, (, )]
[expr]
[targetType, ., isAll, (, )]
[targetType]
[ret]
[targetType]
[ret]
[ConcreteType, ., NONE]
[ConcreteType]
[targetType, ., getFunctions, (, )]
[targetType]
[ret]
[ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), )]
[ret]
[funType, ., getReturnSlot, (, ), ., getType, (, )]
[funType, ., getReturnSlot, (, )]
[funType]
[Token, ., NEW]
[Token]
[inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), )]
[scope]
[expr, ., getFirstChild, (, )]
[expr]
[constructorType, ., isAll, (, )]
[constructorType]
[new, AssertionError, (, "Attempted new call on all type!", )]
["Attempted new call on all type!"]
[ret]
[ConcreteType, ., NONE]
[ConcreteType]
[constructorType, ., getFunctionInstanceTypes, (, )]
[constructorType]
[ret]
[ret, ., unionWith, (, instType, )]
[ret]
[instType]
[allInstantiatedTypes, ., add, (, ret, )]
[allInstantiatedTypes]
[ret]
[Token, ., FUNCTION]
[Token]
[ret]
[createConcreteFunction, (, expr, ,, scope, )]
[expr]
[scope]
[Token, ., OBJECTLIT]
[Token]
[(, expr, ., getJSType, (, ), !=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, )]
[(, expr, ., getJSType, (, ), !=, null, )]
[expr, ., getJSType, (, ), !=, null]
[expr, ., getJSType, (, )]
[expr]
[null]
[!, expr, ., getJSType, (, ), ., isUnknownType, (, )]
[expr, ., getJSType, (, ), ., isUnknownType, (, )]
[expr, ., getJSType, (, )]
[expr]
[expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, )]
[expr, ., getJSType, (, )]
[expr]
[createConcreteInstance, (, exprType, ., toObjectType, (, ), )]
[exprType, ., toObjectType, (, )]
[exprType]
[allInstantiatedTypes, ., add, (, inst, )]
[allInstantiatedTypes]
[inst]
[ret]
[inst]
[ret]
[ConcreteType, ., ALL]
[ConcreteType]
[Token, ., ARRAYLIT]
[Token]
[(, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, )]
[getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, )]
[getTypeRegistry, (, )]
[JSTypeNative, ., ARRAY_TYPE]
[JSTypeNative]
[createConcreteInstance, (, arrayType, )]
[arrayType]
[allInstantiatedTypes, ., add, (, inst, )]
[allInstantiatedTypes]
[inst]
[ret]
[inst]
[ret]
[ConcreteType, ., NONE]
[ConcreteType]
[createTypeIntersection, (, ret, ,, expr, ., getJSType, (, ), )]
[ret]
[expr, ., getJSType, (, )]
[expr]
[new, ConcreteJSTypePair, (, concreteType, ,, jsType, )]
[concreteType]
[jsType]
[typeIntersectionMemos, ., get, (, key, )]
[typeIntersectionMemos]
[key]
[ret, !=, null]
[ret]
[null]
[ret]
[jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, )]
[jsType, ==, null, ||, jsType, ., isUnknownType, (, )]
[jsType, ==, null]
[jsType]
[null]
[jsType, ., isUnknownType, (, )]
[jsType]
[concreteType, ., isNone, (, )]
[concreteType]
[ret]
[concreteType]
[concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, )]
[concreteType, ., isUnion, (, )]
[concreteType]
[concreteType, ., isSingleton, (, )]
[concreteType]
[ret]
[concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), )]
[concreteType]
[createTypeWithSubTypes, (, jsType, )]
[jsType]
[Preconditions, ., checkState, (, concreteType, ., isAll, (, ), )]
[Preconditions]
[concreteType, ., isAll, (, )]
[concreteType]
[ret]
[createTypeWithSubTypes, (, jsType, )]
[jsType]
[ret]
[ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), )]
[ret]
[ConcreteType, ., createForTypes, (, allInstantiatedTypes, )]
[ConcreteType]
[allInstantiatedTypes]
[concreteType, ., getFunctions, (, )]
[concreteType]
[ret]
[ret, ., unionWith, (, functionType, )]
[ret]
[functionType]
[concreteType, ., getPrototypeTypes, (, )]
[concreteType]
[ret]
[ret, ., unionWith, (, prototype, )]
[ret]
[prototype]
[concreteType, ., getInstances, (, )]
[concreteType]
[!, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, )]
[!, instance, ., instanceType, ., isInstanceType, (, )]
[instance, ., instanceType, ., isInstanceType, (, )]
[instance, ., instanceType]
[instance]
[!, instance, ., isFunctionPrototype, (, )]
[instance, ., isFunctionPrototype, (, )]
[instance]
[ret]
[ret, ., unionWith, (, instance, )]
[ret]
[instance]
[typeIntersectionMemos, ., put, (, key, ,, ret, )]
[typeIntersectionMemos]
[key]
[ret]
[ret]
[functionFromDeclaration, ., get, (, decl, )]
[functionFromDeclaration]
[decl]
[funType, ==, null]
[funType]
[null]
[functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), )]
[functionFromDeclaration]
[decl]
[funType]
[new, ConcreteFunctionType, (, this, ,, decl, ,, parent, )]
[this]
[decl]
[parent]
[decl, ., getJSType, (, ), !=, null]
[decl, ., getJSType, (, )]
[decl]
[null]
[functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, )]
[functionFromJSType]
[decl, ., getJSType, (, ), ., toMaybeFunctionType, (, )]
[decl, ., getJSType, (, )]
[decl]
[funType]
[funType]
[Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), )]
[Preconditions]
[!, instanceType, ., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, )]
[!, instanceType, ., isFunctionType, (, )]
[instanceType, ., isFunctionType, (, )]
[instanceType]
[instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, )]
[instanceType]
[getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, )]
[getTypeRegistry, (, )]
[U2U_CONSTRUCTOR_TYPE]
[instanceFromJSType, ., get, (, instanceType, )]
[instanceFromJSType]
[instanceType]
[instType, ==, null]
[instType]
[null]
[instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), )]
[instanceFromJSType]
[instanceType]
[instType]
[new, ConcreteInstanceType, (, this, ,, instanceType, )]
[this]
[instanceType]
[instType]
[functionFromDeclaration, ., get, (, decl, )]
[functionFromDeclaration]
[decl]
[functionFromJSType, ., get, (, functionType, )]
[functionFromJSType]
[functionType]
[instanceFromJSType, ., get, (, instanceType, )]
[instanceFromJSType]
[instanceType]
[new, ConcreteScope, (, (, ConcreteScope, ), parent, )]
[(, ConcreteScope, ), parent]
[parent]
[scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, )]
[scope]
[ConcreteFunctionType, ., CALL_SLOT_NAME]
[ConcreteFunctionType]
[decl]
[scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, )]
[scope]
[ConcreteFunctionType, ., THIS_SLOT_NAME]
[ConcreteFunctionType]
[decl]
[scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, )]
[scope]
[ConcreteFunctionType, ., RETURN_SLOT_NAME]
[ConcreteFunctionType]
[decl]
[decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, )]
[decl, ., getFirstChild, (, ), ., getNext, (, )]
[decl, ., getFirstChild, (, )]
[decl]
[n, !=, null]
[n]
[null]
[n]
[n, ., getNext, (, )]
[n]
[scope, ., declareSlot, (, n, ., getString, (, ), ,, n, )]
[scope]
[n, ., getString, (, )]
[n]
[n]
[scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), )]
[scope]
[decl, ., getLastChild, (, )]
[decl]
[scope]
[null]
[instanceType, ., getImplicitPrototype, (, )]
[instanceType]
[implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, )]
[implicitProto, !=, null]
[implicitProto]
[null]
[!, implicitProto, ., isUnknownType, (, )]
[implicitProto, ., isUnknownType, (, )]
[implicitProto]
[createConcreteInstance, (, implicitProto, )]
[implicitProto]
[parentScope]
[(, ConcreteScope, ), prototype, ., getScope, (, )]
[prototype, ., getScope, (, )]
[prototype]
[new, ConcreteScope, (, parentScope, )]
[parentScope]
[instanceType, ., getOwnPropertyNames, (, )]
[instanceType]
[scope, ., declareSlot, (, propName, ,, null, )]
[scope]
[propName]
[null]
[scope]
[null]
[type, ., isInstance, (, )]
[type]
[set]
[getSubTypes, (, type, ., toInstance, (, ), )]
[type, ., toInstance, (, )]
[type]
[ConcreteType, ., createForTypes, (, set, ), ., unionWith, (, type, )]
[ConcreteType, ., createForTypes, (, set, )]
[ConcreteType]
[set]
[type]
[type, ., getConstructorType, (, ), ==, null]
[type, ., getConstructorType, (, )]
[type]
[null]
[null]
[Sets, ., newHashSet, (, )]
[Sets]
[getSubTypes, (, type, ., getConstructorType, (, ), ., getJSType, (, ), ,, set, )]
[type, ., getConstructorType, (, ), ., getJSType, (, )]
[type, ., getConstructorType, (, )]
[type]
[set]
[set]
[type, ., getSubTypes, (, ), !=, null]
[type, ., getSubTypes, (, )]
[type]
[null]
[type, ., getSubTypes, (, )]
[type]
[createType, (, sub, )]
[sub]
[concrete, ., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null]
[concrete, ., isFunction, (, )]
[concrete]
[concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null]
[concrete, ., toFunction, (, ), ., getInstanceType, (, )]
[concrete, ., toFunction, (, )]
[concrete]
[null]
[concrete]
[concrete, ., toFunction, (, ), ., getInstanceType, (, )]
[concrete, ., toFunction, (, )]
[concrete]
[!, set, ., contains, (, concrete, )]
[set, ., contains, (, concrete, )]
[set]
[concrete]
[set, ., add, (, concrete, )]
[set]
[concrete]
[!, getSubTypes, (, sub, ,, set, )]
[getSubTypes, (, sub, ,, set, )]
[sub]
[set]
[false]
[set, ., clear, (, )]
[set]
[set, ., add, (, ConcreteType, ., ALL, )]
[set]
[ConcreteType, ., ALL]
[ConcreteType]
[false]
[true]
[this, ., concrete]
[this]
[concrete]
[this, ., jstype]
[this]
[jstype]
[this, ., hashcode]
[this]
[concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, )]
[concrete, ., hashCode, (, )]
[concrete]
[getJSTypeHashCode, (, )]
[jstype, !=, null, ?, jstype, ., hashCode, (, ), :, 0]
[jstype, !=, null]
[jstype]
[null]
[jstype, ., hashCode, (, )]
[jstype]
[0]
[jsType, ==, null, ||, jstype, ==, null]
[jsType, ==, null]
[jsType]
[null]
[jstype, ==, null]
[jstype]
[null]
[jstype, ==, jsType]
[jstype]
[jsType]
[jsType, ., equals, (, this, ., jstype, )]
[jsType]
[this, ., jstype]
[this]
[o, instanceof, ConcreteJSTypePair]
[o]
[(, ConcreteJSTypePair, ), o]
[o]
[(, pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), )]
[pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, )]
[pair, ., concrete, ., equals, (, this, ., concrete, )]
[pair, ., concrete]
[pair]
[this, ., concrete]
[this]
[equalsJSType, (, pair, ., jstype, )]
[pair, ., jstype]
[pair]
[true]
[false]
[hashcode]
