[0]
[1]
[null]
[timePeriod]
[timeUnit]
[limit]
[timePeriod, <=, 0]
[timePeriod]
[0]
[new, IllegalArgumentException, (, "Time period must be greater 0!", )]
["Time period must be greater 0!"]
[period]
[timePeriod]
[unit]
[timeUnit]
[service, !=, null]
[service]
[null]
[executorService]
[service]
[ownExecutor]
[false]
[new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, )]
[THREAD_POOL_SIZE]
[s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, )]
[s]
[false]
[s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, )]
[s]
[false]
[executorService]
[s]
[ownExecutor]
[true]
[setLimit, (, limit, )]
[limit]
[limit]
[this, ., limit]
[this]
[limit]
[!, shutdown]
[shutdown]
[ownExecutor]
[getExecutorService, (, ), ., shutdownNow, (, )]
[getExecutorService, (, )]
[task, !=, null]
[task]
[null]
[task, ., cancel, (, false, )]
[task]
[false]
[shutdown]
[true]
[shutdown]
[isShutdown, (, )]
[new, IllegalStateException, (, "TimedSemaphore is shut down!", )]
["TimedSemaphore is shut down!"]
[task, ==, null]
[task]
[null]
[task]
[startTimer, (, )]
[false]
[canPass]
[getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, )]
[getLimit, (, ), <=, NO_LIMIT]
[getLimit, (, )]
[NO_LIMIT]
[acquireCount, <, getLimit, (, )]
[acquireCount]
[getLimit, (, )]
[!, canPass]
[canPass]
[wait, (, )]
[acquireCount, ++]
[acquireCount]
[!, canPass]
[canPass]
[lastCallsPerPeriod]
[acquireCount]
[getLimit, (, ), -, getAcquireCount, (, )]
[getLimit, (, )]
[getAcquireCount, (, )]
[periodCount, ==, 0, ?, 0, :, (, double, ), totalAcquireCount, /, (, double, ), periodCount]
[periodCount, ==, 0]
[periodCount]
[0]
[0]
[(, double, ), totalAcquireCount, /, (, double, ), periodCount]
[(, double, ), totalAcquireCount]
[totalAcquireCount]
[(, double, ), periodCount]
[periodCount]
[period]
[unit]
[executorService]
[getExecutorService, (, ), ., scheduleAtFixedRate, (, new, Runnable, (, ), {, @, Override, public, void, run, (, ), {, endOfPeriod, (, ), ;, }, }, ,, getPeriod, (, ), ,, getPeriod, (, ), ,, getUnit, (, ), )]
[getExecutorService, (, )]
[new, Runnable, (, ), {, @, Override, public, void, run, (, ), {, endOfPeriod, (, ), ;, }, }]
[endOfPeriod, (, )]
[getPeriod, (, )]
[getPeriod, (, )]
[getUnit, (, )]
[lastCallsPerPeriod]
[acquireCount]
[totalAcquireCount]
[acquireCount]
[periodCount, ++]
[periodCount]
[acquireCount]
[0]
[notifyAll, (, )]
