[DiagnosticType, ., error, (, "JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE", ,, "Message with id = {0} could not be found in replacement bundle", )]
[DiagnosticType]
["JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE"]
["Message with id = {0} could not be found in replacement bundle"]
[compiler]
[checkDuplicatedMessages]
[style]
[bundle, ., idGenerator, (, )]
[bundle]
[this, ., bundle]
[this]
[bundle]
[this, ., strictReplacement]
[this]
[strictReplacement]
[(, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null, )]
[bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null]
[bundle, ., getMessage, (, message1, ., getId, (, ), )]
[bundle]
[message1, ., getId, (, )]
[message1]
[null]
[(, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, )]
[bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null]
[bundle, ., getMessage, (, message2, ., getId, (, ), )]
[bundle]
[message2, ., getId, (, )]
[message2]
[null]
[isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, )]
[isSecondMessageTranslated, &&, !, isFirstMessageTranslated]
[isSecondMessageTranslated]
[!, isFirstMessageTranslated]
[isFirstMessageTranslated]
[callNode, ., getChildAtIndex, (, 2, )]
[callNode]
[2]
[callNode, ., getChildAtIndex, (, 1, )]
[callNode]
[1]
[callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), )]
[callNode, ., getParent, (, )]
[callNode]
[callNode]
[replacementNode, ., detachFromParent, (, )]
[replacementNode]
[bundle, ., getMessage, (, message, ., getId, (, ), )]
[bundle]
[message, ., getId, (, )]
[message]
[replacement, ==, null]
[replacement]
[null]
[strictReplacement]
[compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), )]
[compiler]
[JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), )]
[JSError]
[message, ., getSourceName, (, )]
[message]
[definition, ., getMessageNode, (, )]
[definition]
[BUNDLE_DOES_NOT_HAVE_THE_MESSAGE]
[message, ., getId, (, )]
[message]
[replacement]
[message]
[definition, ., getMessageNode, (, )]
[definition]
[newValue]
[getNewValueNode, (, replacement, ,, msgNode, )]
[replacement]
[msgNode]
[compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), )]
[compiler]
[JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), )]
[JSError]
[message, ., getSourceName, (, )]
[message]
[e, ., getNode, (, )]
[e]
[MESSAGE_TREE_MALFORMED]
[e, ., getMessage, (, )]
[e]
[newValue]
[msgNode]
[newValue, !=, msgNode]
[newValue]
[msgNode]
[newValue, ., copyInformationFromForTree, (, msgNode, )]
[newValue]
[msgNode]
[definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, )]
[definition, ., getMessageParentNode, (, )]
[definition]
[msgNode]
[newValue]
[compiler, ., reportCodeChange, (, )]
[compiler]
[origValueNode, ., getType, (, )]
[origValueNode]
[Token, ., FUNCTION]
[Token]
[updateFunctionNode, (, message, ,, origValueNode, )]
[message]
[origValueNode]
[origValueNode]
[Token, ., STRING]
[Token]
[message, ., toString, (, )]
[message]
[!, origValueNode, ., getString, (, ), ., equals, (, newString, )]
[origValueNode, ., getString, (, ), ., equals, (, newString, )]
[origValueNode, ., getString, (, )]
[origValueNode]
[newString]
[origValueNode, ., setString, (, newString, )]
[origValueNode]
[newString]
[compiler, ., reportCodeChange, (, )]
[compiler]
[origValueNode]
[Token, ., ADD]
[Token]
[IR, ., string, (, message, ., toString, (, ), )]
[IR]
[message, ., toString, (, )]
[message]
[Token, ., CALL]
[Token]
[replaceCallNode, (, message, ,, origValueNode, )]
[message]
[origValueNode]
[new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, ), ,, origValueNode, )]
["Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, )]
["Expected FUNCTION, STRING, or ADD node; found: "]
[origValueNode, ., getType, (, )]
[origValueNode]
[origValueNode]
[checkNode, (, functionNode, ,, Token, ., FUNCTION, )]
[functionNode]
[Token, ., FUNCTION]
[Token]
[functionNode, ., getFirstChild, (, )]
[functionNode]
[checkNode, (, nameNode, ,, Token, ., NAME, )]
[nameNode]
[Token, ., NAME]
[Token]
[nameNode, ., getNext, (, )]
[nameNode]
[checkNode, (, argListNode, ,, Token, ., PARAM_LIST, )]
[argListNode]
[Token, ., PARAM_LIST]
[Token]
[argListNode, ., getNext, (, )]
[argListNode]
[checkNode, (, oldBlockNode, ,, Token, ., BLOCK, )]
[oldBlockNode]
[Token, ., BLOCK]
[Token]
[message, ., parts, (, ), ., iterator, (, )]
[message, ., parts, (, )]
[message]
[iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (, "", )]
[iterator, ., hasNext, (, )]
[iterator]
[constructAddOrStringNode, (, iterator, ,, argListNode, )]
[iterator]
[argListNode]
[IR, ., string, (, "", )]
[IR]
[""]
[IR, ., block, (, IR, ., returnNode, (, valueNode, ), )]
[IR]
[IR, ., returnNode, (, valueNode, )]
[IR]
[valueNode]
[newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null]
[newBlockNode, ., checkTreeEquals, (, oldBlockNode, )]
[newBlockNode]
[oldBlockNode]
[null]
[newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, )]
[newBlockNode]
[oldBlockNode]
[functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, )]
[functionNode]
[oldBlockNode]
[newBlockNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[partsIterator, ., next, (, )]
[partsIterator]
[null]
[part, instanceof, JsMessage, ., PlaceholderReference]
[part]
[(, JsMessage, ., PlaceholderReference, ), part]
[part]
[argListNode, ., children, (, )]
[argListNode]
[node, ., isName, (, )]
[node]
[node, ., getString, (, )]
[node]
[arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), )]
[arg]
[phRef, ., getName, (, )]
[phRef]
[partNode]
[IR, ., name, (, arg, )]
[IR]
[arg]
[partNode, ==, null]
[partNode]
[null]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, )]
["Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, )]
["Unrecognized message placeholder referenced: "]
[phRef, ., getName, (, )]
[phRef]
[argListNode]
[partNode]
[IR, ., string, (, part, ., toString, (, ), )]
[IR]
[part, ., toString, (, )]
[part]
[partsIterator, ., hasNext, (, )]
[partsIterator]
[IR, ., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), )]
[IR]
[partNode]
[constructAddOrStringNode, (, partsIterator, ,, argListNode, )]
[partsIterator]
[argListNode]
[partNode]
[checkNode, (, callNode, ,, Token, ., CALL, )]
[callNode]
[Token, ., CALL]
[Token]
[callNode, ., getFirstChild, (, )]
[callNode]
[checkNode, (, getPropNode, ,, Token, ., GETPROP, )]
[getPropNode]
[Token, ., GETPROP]
[Token]
[getPropNode, ., getNext, (, )]
[getPropNode]
[checkStringExprNode, (, stringExprNode, )]
[stringExprNode]
[stringExprNode, ., getNext, (, )]
[stringExprNode]
[constructStringExprNode, (, message, ., parts, (, ), ., iterator, (, ), ,, objLitNode, )]
[message, ., parts, (, ), ., iterator, (, )]
[message, ., parts, (, )]
[message]
[objLitNode]
[parts, ., next, (, )]
[parts]
[null]
[part, instanceof, JsMessage, ., PlaceholderReference]
[part]
[(, JsMessage, ., PlaceholderReference, ), part]
[part]
[objLitNode, ==, null]
[objLitNode]
[null]
[new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, )]
["Empty placeholder value map ", +, "for a translated message with placeholders."]
["Empty placeholder value map "]
["for a translated message with placeholders."]
[objLitNode]
[objLitNode, ., getFirstChild, (, )]
[objLitNode]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[key, ., getString, (, ), ., equals, (, phRef, ., getName, (, ), )]
[key, ., getString, (, )]
[key]
[phRef, ., getName, (, )]
[phRef]
[key, ., getFirstChild, (, )]
[key]
[partNode]
[valueNode, ., cloneTree, (, )]
[valueNode]
[partNode, ==, null]
[partNode]
[null]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, )]
["Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, )]
["Unrecognized message placeholder referenced: "]
[phRef, ., getName, (, )]
[phRef]
[objLitNode]
[partNode]
[IR, ., string, (, part, ., toString, (, ), )]
[IR]
[part, ., toString, (, )]
[part]
[parts, ., hasNext, (, )]
[parts]
[IR, ., add, (, partNode, ,, constructStringExprNode, (, parts, ,, objLitNode, ), )]
[IR]
[partNode]
[constructStringExprNode, (, parts, ,, objLitNode, )]
[parts]
[objLitNode]
[partNode]
[node, ==, null]
[node]
[null]
[new, IllegalArgumentException, (, "Expected a string; found: null", )]
["Expected a string; found: null"]
[node, ., getType, (, )]
[node]
[Token, ., STRING]
[Token]
[Token, ., ADD]
[Token]
[node, ., getFirstChild, (, )]
[node]
[checkStringExprNode, (, c, )]
[c]
[checkStringExprNode, (, c, ., getNext, (, ), )]
[c, ., getNext, (, )]
[c]
[new, IllegalArgumentException, (, "Expected a string; found: ", +, node, ., getType, (, ), )]
["Expected a string; found: ", +, node, ., getType, (, )]
["Expected a string; found: "]
[node, ., getType, (, )]
[node]
