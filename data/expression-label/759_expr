[UnknownFunctionContents, ., get, (, )]
[UnknownFunctionContents]
[null]
[false]
[null]
[null]
[null]
[null]
[false]
[false]
[false]
[false]
[null]
[ImmutableList, ., of, (, )]
[ImmutableList]
[DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", )]
[DiagnosticType]
["JSC_EXTENDS_WITHOUT_TYPEDEF"]
["@extends used without @constructor or @interface for {0}"]
[DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", )]
[DiagnosticType]
["JSC_EXTENDS_NON_OBJECT"]
["{0} @extends non-object type {1}"]
[DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", )]
[DiagnosticType]
["JSC_RESOLVED_TAG_EMPTY"]
["Could not resolve type in {0} tag of {1}"]
[DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", )]
[DiagnosticType]
["JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR"]
["@implements used without @constructor or @interface for {0}"]
[DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", )]
[DiagnosticType]
["JSC_CONSTRUCTOR_REQUIRED"]
["{0} used without @constructor for {1}"]
[DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", )]
[DiagnosticType]
["JSC_VAR_ARGS_MUST_BE_LAST"]
["variable length argument must be last"]
[DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", )]
[DiagnosticType]
["JSC_OPTIONAL_ARG_AT_END"]
["optional arguments must be at the end"]
[DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", )]
[DiagnosticType]
["JSC_INEXISTANT_PARAM"]
["parameter {0} does not appear in {1}''s parameter list"]
[DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", )]
[DiagnosticType]
["JSC_TYPE_REDEFINITION"]
["attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}"]
["attempted re-definition of type {0}\n", +, "found   : {1}\n"]
["attempted re-definition of type {0}\n"]
["found   : {1}\n"]
["expected: {2}"]
[DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", )]
[DiagnosticType]
["JSC_TEMPLATE_TYPE_DUPLICATED"]
["Only one parameter type must be the template type"]
[DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", )]
[DiagnosticType]
["JSC_TEMPLATE_TYPE_EXPECTED"]
["The template type must be a parameter type"]
[DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +, "Actual type: {0}", )]
[DiagnosticType]
["JSC_THIS_TYPE_NON_OBJECT"]
["@this type of a function must be an object\n", +, "Actual type: {0}"]
["@this type of a function must be an object\n"]
["Actual type: {0}"]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objectType, ==, null]
[objectType]
[null]
[reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), )]
[EXTENDS_NON_OBJECT]
[fnName]
[type, ., toString, (, )]
[type]
[false]
[objectType, ., isEmptyType, (, )]
[objectType]
[reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, )]
[RESOLVED_TAG_EMPTY]
["@extends"]
[fnName]
[false]
[objectType, ., isUnknownType, (, )]
[objectType]
[hasMoreTagsToResolve, (, objectType, )]
[objectType]
[true]
[reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, )]
[RESOLVED_TAG_EMPTY]
["@extends"]
[fnName]
[false]
[true]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objectType, ==, null]
[objectType]
[null]
[reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, )]
[BAD_IMPLEMENTED_TYPE]
[fnName]
[false]
[objectType, ., isEmptyType, (, )]
[objectType]
[reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, )]
[RESOLVED_TAG_EMPTY]
["@implements"]
[fnName]
[false]
[objectType, ., isUnknownType, (, )]
[objectType]
[hasMoreTagsToResolve, (, objectType, )]
[objectType]
[true]
[reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, )]
[RESOLVED_TAG_EMPTY]
["@implements"]
[fnName]
[false]
[true]
[Preconditions, ., checkNotNull, (, errorRoot, )]
[Preconditions]
[errorRoot]
[this, ., fnName]
[this]
[fnName, ==, null, ?, "", :, fnName]
[fnName, ==, null]
[fnName]
[null]
[""]
[fnName]
[this, ., codingConvention]
[this]
[compiler, ., getCodingConvention, (, )]
[compiler]
[this, ., typeRegistry]
[this]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[this, ., errorRoot]
[this]
[errorRoot]
[this, ., sourceName]
[this]
[sourceName]
[this, ., compiler]
[this]
[compiler]
[this, ., scope]
[this]
[scope]
[contents, !=, null]
[contents]
[null]
[this, ., contents]
[this]
[contents]
[this]
[oldType, ==, null]
[oldType]
[null]
[this]
[returnType]
[oldType, ., getReturnType, (, )]
[oldType]
[returnTypeInferred]
[oldType, ., isReturnTypeInferred, (, )]
[oldType]
[paramsParent, ==, null]
[paramsParent]
[null]
[parametersNode]
[oldType, ., getParametersNode, (, )]
[oldType]
[parametersNode, ==, null]
[parametersNode]
[null]
[parametersNode]
[new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, )]
[new, FunctionParamBuilder, (, typeRegistry, )]
[typeRegistry]
[new, FunctionParamBuilder, (, typeRegistry, )]
[typeRegistry]
[oldType, ., getParameters, (, ), ., iterator, (, )]
[oldType, ., getParameters, (, )]
[oldType]
[false]
[false]
[paramsParent, ., getFirstChild, (, )]
[paramsParent]
[currentParam, !=, null]
[currentParam]
[null]
[currentParam]
[currentParam, ., getNext, (, )]
[currentParam]
[oldParams, ., hasNext, (, )]
[oldParams]
[oldParams, ., next, (, )]
[oldParams]
[paramBuilder, ., newParameterFromNode, (, oldParam, )]
[paramBuilder]
[oldParam]
[oldParamsListHitOptArgs]
[oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, )]
[oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, )]
[oldParamsListHitOptArgs]
[oldParam, ., isVarArgs, (, )]
[oldParam]
[oldParam, ., isOptionalArg, (, )]
[oldParam]
[currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, )]
[currentParam, ., getNext, (, ), !=, null]
[currentParam, ., getNext, (, )]
[currentParam]
[null]
[newParam, ., isVarArgs, (, )]
[newParam]
[newParam, ., setVarArgs, (, false, )]
[newParam]
[false]
[newParam, ., setOptionalArg, (, true, )]
[newParam]
[true]
[warnedAboutArgList]
[addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), )]
[paramBuilder]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[warnedAboutArgList]
[codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs]
[codingConvention, ., isOptionalParameter, (, currentParam, )]
[codingConvention]
[currentParam]
[oldParamsListHitOptArgs]
[codingConvention, ., isVarArgsParameter, (, currentParam, )]
[codingConvention]
[currentParam]
[oldParams, ., hasNext, (, )]
[oldParams]
[paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), )]
[paramBuilder]
[oldParams, ., next, (, )]
[oldParams]
[parametersNode]
[paramBuilder, ., build, (, )]
[paramBuilder]
[this]
[info, !=, null, &&, info, ., hasReturnType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasReturnType, (, )]
[info]
[returnType]
[info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getReturnType, (, )]
[info]
[scope]
[typeRegistry]
[returnTypeInferred]
[false]
[this]
[info, !=, null]
[info]
[null]
[isConstructor]
[info, ., isConstructor, (, )]
[info]
[makesStructs]
[info, ., makesStructs, (, )]
[info]
[makesDicts]
[info, ., makesDicts, (, )]
[info]
[isInterface]
[info, ., isInterface, (, )]
[info]
[makesStructs, &&, !, isConstructor]
[makesStructs]
[!, isConstructor]
[isConstructor]
[reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, )]
[CONSTRUCTOR_REQUIRED]
["@struct"]
[fnName]
[makesDicts, &&, !, isConstructor]
[makesDicts]
[!, isConstructor]
[isConstructor]
[reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, )]
[CONSTRUCTOR_REQUIRED]
["@dict"]
[fnName]
[info, ., hasBaseType, (, )]
[info]
[isConstructor]
[info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getBaseType, (, )]
[info]
[scope]
[typeRegistry]
[maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), )]
[maybeBaseType, !=, null]
[maybeBaseType]
[null]
[maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), )]
[maybeBaseType]
[new, ExtendedTypeValidator, (, )]
[baseType]
[(, ObjectType, ), maybeBaseType]
[maybeBaseType]
[reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, )]
[EXTENDS_WITHOUT_TYPEDEF]
[fnName]
[info, ., getImplementedInterfaceCount, (, ), >, 0]
[info, ., getImplementedInterfaceCount, (, )]
[info]
[0]
[isConstructor]
[implementedInterfaces]
[Lists, ., newArrayList, (, )]
[Lists]
[info, ., getImplementedInterfaces, (, )]
[info]
[t, ., evaluate, (, scope, ,, typeRegistry, )]
[t]
[scope]
[typeRegistry]
[maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), )]
[maybeInterType, !=, null]
[maybeInterType]
[null]
[maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), )]
[maybeInterType]
[new, ImplementedTypeValidator, (, )]
[implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, )]
[implementedInterfaces]
[(, ObjectType, ), maybeInterType]
[maybeInterType]
[isInterface]
[reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, )]
[TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE]
[TypeCheck]
[fnName]
[reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, )]
[CONSTRUCTOR_REQUIRED]
["@implements"]
[fnName]
[isInterface]
[extendedInterfaces]
[Lists, ., newArrayList, (, )]
[Lists]
[info, ., getExtendedInterfaces, (, )]
[info]
[t, ., evaluate, (, scope, ,, typeRegistry, )]
[t]
[scope]
[typeRegistry]
[maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), )]
[maybeInterfaceType, !=, null]
[maybeInterfaceType]
[null]
[maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), )]
[maybeInterfaceType]
[new, ExtendedTypeValidator, (, )]
[extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, )]
[extendedInterfaces]
[(, ObjectType, ), maybeInterfaceType]
[maybeInterfaceType]
[this]
[inferThisType, (, info, )]
[info]
[thisType, ==, null]
[thisType]
[null]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objType, !=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), )]
[objType, !=, null]
[objType]
[null]
[(, info, ==, null, ||, !, info, ., hasType, (, ), )]
[info, ==, null, ||, !, info, ., hasType, (, )]
[info, ==, null]
[info]
[null]
[!, info, ., hasType, (, )]
[info, ., hasType, (, )]
[info]
[thisType]
[objType]
[this]
[null]
[info, !=, null, &&, info, ., hasThisType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasThisType, (, )]
[info]
[maybeThisType]
[info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, )]
[info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getThisType, (, )]
[info]
[scope]
[typeRegistry]
[maybeThisType, !=, null]
[maybeThisType]
[null]
[thisType]
[maybeThisType]
[this]
[IR, ., paramList, (, )]
[IR]
[info, ., getParameterNames, (, )]
[info]
[lp, ., addChildToBack, (, IR, ., name, (, name, ), )]
[lp]
[IR, ., name, (, name, )]
[IR]
[name]
[inferParameterTypes, (, lp, ,, info, )]
[lp]
[info]
[argsParent, ==, null]
[argsParent]
[null]
[info, ==, null]
[info]
[null]
[this]
[inferParameterTypes, (, info, )]
[info]
[null]
[parametersNode, !=, null]
[parametersNode]
[null]
[oldParameterType]
[parametersNode, ., getFirstChild, (, )]
[parametersNode]
[new, FunctionParamBuilder, (, typeRegistry, )]
[typeRegistry]
[false]
[(, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), )]
[(, info, ==, null, )]
[info, ==, null]
[info]
[null]
[Sets, ., <, String, >, newHashSet, (, )]
[Sets]
[Sets, ., newHashSet, (, info, ., getParameterNames, (, ), )]
[Sets]
[info, ., getParameterNames, (, )]
[info]
[false]
[false]
[argsParent, ., children, (, )]
[argsParent]
[arg, ., getString, (, )]
[arg]
[allJsDocParams, ., remove, (, argumentName, )]
[allJsDocParams]
[argumentName]
[null]
[isOptionalParameter, (, arg, ,, info, )]
[arg]
[info]
[isVarArgs]
[isVarArgsParameter, (, arg, ,, info, )]
[arg]
[info]
[info, !=, null, &&, info, ., hasParameterType, (, argumentName, )]
[info, !=, null]
[info]
[null]
[info, ., hasParameterType, (, argumentName, )]
[info]
[argumentName]
[parameterType]
[info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, )]
[info, ., getParameterType, (, argumentName, )]
[info]
[argumentName]
[scope]
[typeRegistry]
[oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null]
[oldParameterType, !=, null]
[oldParameterType]
[null]
[oldParameterType, ., getJSType, (, ), !=, null]
[oldParameterType, ., getJSType, (, )]
[oldParameterType]
[null]
[parameterType]
[oldParameterType, ., getJSType, (, )]
[oldParameterType]
[isOptionalParam]
[oldParameterType, ., isOptionalArg, (, )]
[oldParameterType]
[isVarArgs]
[oldParameterType, ., isVarArgs, (, )]
[oldParameterType]
[parameterType]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[warnedAboutArgList]
[addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, )]
[builder]
[parameterType]
[warnedAboutArgList]
[isOptionalParam]
[isVarArgs]
[oldParameterType, !=, null]
[oldParameterType]
[null]
[oldParameterType]
[oldParameterType, ., getNext, (, )]
[oldParameterType]
[!, isVarArgs]
[isVarArgs]
[oldParameterType, !=, null, &&, !, isVarArgs]
[oldParameterType, !=, null]
[oldParameterType]
[null]
[!, isVarArgs]
[isVarArgs]
[builder, ., newParameterFromNode, (, oldParameterType, )]
[builder]
[oldParameterType]
[oldParameterType]
[oldParameterType, ., getNext, (, )]
[oldParameterType]
[allJsDocParams]
[reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, )]
[INEXISTANT_PARAM]
[inexistentName]
[fnName]
[parametersNode]
[builder, ., build, (, )]
[builder]
[this]
[codingConvention, ., isOptionalParameter, (, param, )]
[codingConvention]
[param]
[true]
[param, ., getString, (, )]
[param]
[info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, )]
[info, !=, null, &&, info, ., hasParameterType, (, paramName, )]
[info, !=, null]
[info]
[null]
[info, ., hasParameterType, (, paramName, )]
[info]
[paramName]
[info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, )]
[info, ., getParameterType, (, paramName, )]
[info]
[paramName]
[codingConvention, ., isVarArgsParameter, (, param, )]
[codingConvention]
[param]
[true]
[param, ., getString, (, )]
[param]
[info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, )]
[info, !=, null, &&, info, ., hasParameterType, (, paramName, )]
[info, !=, null]
[info]
[null]
[info, ., hasParameterType, (, paramName, )]
[info]
[paramName]
[info, ., getParameterType, (, paramName, ), ., isVarArgs, (, )]
[info, ., getParameterType, (, paramName, )]
[info]
[paramName]
[info, !=, null]
[info]
[null]
[templateTypeNames]
[info, ., getTemplateTypeNames, (, )]
[info]
[typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, )]
[typeRegistry]
[templateTypeNames]
[this]
[false]
[isOptional]
[!, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList]
[!, builder, ., addOptionalParams, (, paramType, )]
[builder, ., addOptionalParams, (, paramType, )]
[builder]
[paramType]
[!, warnedAboutArgList]
[warnedAboutArgList]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, )]
[VAR_ARGS_MUST_BE_LAST]
[emittedWarning]
[true]
[isVarArgs]
[!, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList]
[!, builder, ., addVarArgs, (, paramType, )]
[builder, ., addVarArgs, (, paramType, )]
[builder]
[paramType]
[!, warnedAboutArgList]
[warnedAboutArgList]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, )]
[VAR_ARGS_MUST_BE_LAST]
[emittedWarning]
[true]
[!, builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList]
[!, builder, ., addRequiredParams, (, paramType, )]
[builder, ., addRequiredParams, (, paramType, )]
[builder]
[paramType]
[!, warnedAboutArgList]
[warnedAboutArgList]
[builder, ., hasVarArgs, (, )]
[builder]
[reportWarning, (, VAR_ARGS_MUST_BE_LAST, )]
[VAR_ARGS_MUST_BE_LAST]
[reportWarning, (, OPTIONAL_ARG_AT_END, )]
[OPTIONAL_ARG_AT_END]
[emittedWarning]
[true]
[emittedWarning]
[returnType, ==, null]
[returnType]
[null]
[!, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, )]
[!, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, )]
[!, contents, ., mayHaveNonEmptyReturns, (, )]
[contents, ., mayHaveNonEmptyReturns, (, )]
[contents]
[!, contents, ., mayHaveSingleThrow, (, )]
[contents, ., mayHaveSingleThrow, (, )]
[contents]
[!, contents, ., mayBeFromExterns, (, )]
[contents, ., mayBeFromExterns, (, )]
[contents]
[returnType]
[typeRegistry, ., getNativeType, (, VOID_TYPE, )]
[typeRegistry]
[VOID_TYPE]
[returnTypeInferred]
[true]
[returnType, ==, null]
[returnType]
[null]
[returnType]
[typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[typeRegistry]
[UNKNOWN_TYPE]
[parametersNode, ==, null]
[parametersNode]
[null]
[new, IllegalStateException, (, "All Function types must have params and a return type", )]
["All Function types must have params and a return type"]
[isConstructor]
[fnType]
[getOrCreateConstructor, (, )]
[isInterface]
[fnType]
[typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), )]
[typeRegistry]
[fnName]
[contents, ., getSourceNode, (, )]
[contents]
[getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, )]
[getScopeDeclaredIn, (, ), ., isGlobal, (, )]
[getScopeDeclaredIn, (, )]
[!, fnName, ., isEmpty, (, )]
[fnName, ., isEmpty, (, )]
[fnName]
[typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), )]
[typeRegistry]
[fnName]
[fnType, ., getInstanceType, (, )]
[fnType]
[maybeSetBaseType, (, fnType, )]
[fnType]
[fnType]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), )]
[new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, )]
[new, FunctionBuilder, (, typeRegistry, )]
[typeRegistry]
[fnName]
[contents, ., getSourceNode, (, )]
[contents]
[parametersNode]
[returnType]
[returnTypeInferred]
[thisType]
[templateTypeNames]
[maybeSetBaseType, (, fnType, )]
[fnType]
[implementedInterfaces, !=, null]
[implementedInterfaces]
[null]
[fnType, ., setImplementedInterfaces, (, implementedInterfaces, )]
[fnType]
[implementedInterfaces]
[extendedInterfaces, !=, null]
[extendedInterfaces]
[null]
[fnType, ., setExtendedInterfaces, (, extendedInterfaces, )]
[fnType]
[extendedInterfaces]
[typeRegistry, ., clearTemplateTypeNames, (, )]
[typeRegistry]
[fnType]
[!, fnType, ., isInterface, (, ), &&, baseType, !=, null]
[!, fnType, ., isInterface, (, )]
[fnType, ., isInterface, (, )]
[fnType]
[baseType, !=, null]
[baseType]
[null]
[fnType, ., setPrototypeBasedOn, (, baseType, )]
[fnType]
[baseType]
[typeRegistry, ., createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, )]
[typeRegistry]
[fnName]
[contents, ., getSourceNode, (, )]
[contents]
[parametersNode]
[returnType]
[null]
[typeRegistry, ., getType, (, fnName, )]
[typeRegistry]
[fnName]
[makesStructs]
[fnType, ., setStruct, (, )]
[fnType]
[makesDicts]
[fnType, ., setDict, (, )]
[fnType]
[existingType, !=, null]
[existingType]
[null]
[existingType, ., isInstanceType, (, )]
[existingType]
[isInstanceObject, ||, fnName, ., equals, (, "Function", )]
[isInstanceObject]
[fnName, ., equals, (, "Function", )]
[fnName]
["Function"]
[isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, )]
[isInstanceObject]
[existingType, ., toObjectType, (, ), ., getConstructor, (, )]
[existingType, ., toObjectType, (, )]
[existingType]
[typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, )]
[typeRegistry]
[FUNCTION_FUNCTION_TYPE]
[existingFn, ., getSource, (, ), ==, null]
[existingFn, ., getSource, (, )]
[existingFn]
[null]
[existingFn, ., setSource, (, contents, ., getSourceNode, (, ), )]
[existingFn]
[contents, ., getSourceNode, (, )]
[contents]
[!, existingFn, ., hasEqualCallType, (, fnType, )]
[existingFn, ., hasEqualCallType, (, fnType, )]
[existingFn]
[fnType]
[reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), )]
[TYPE_REDEFINITION]
[fnName]
[fnType, ., toString, (, )]
[fnType]
[existingFn, ., toString, (, )]
[existingFn]
[existingFn]
[maybeSetBaseType, (, fnType, )]
[fnType]
[getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, )]
[getScopeDeclaredIn, (, ), ., isGlobal, (, )]
[getScopeDeclaredIn, (, )]
[!, fnName, ., isEmpty, (, )]
[fnName, ., isEmpty, (, )]
[fnName]
[typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), )]
[typeRegistry]
[fnName]
[fnType, ., getInstanceType, (, )]
[fnType]
[fnType]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, warning, ,, args, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, errorRoot, ,, warning, ,, args, )]
[JSError]
[sourceName]
[errorRoot]
[warning]
[args]
[compiler, ., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, error, ,, args, ), )]
[compiler]
[JSError, ., make, (, sourceName, ,, errorRoot, ,, error, ,, args, )]
[JSError]
[sourceName]
[errorRoot]
[error]
[args]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, )]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, )]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, )]
[info, ., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, )]
[info, ., getParameterCount, (, ), >, 0]
[info, ., getParameterCount, (, )]
[info]
[0]
[info, ., hasReturnType, (, )]
[info]
[info, ., hasThisType, (, )]
[info]
[info, ., isConstructor, (, )]
[info]
[info, ., isInterface, (, )]
[info]
[fnName, ., indexOf, (, ".", )]
[fnName]
["."]
[dotIndex, !=, -, 1]
[dotIndex]
[-, 1]
[1]
[fnName, ., substring, (, 0, ,, dotIndex, )]
[fnName]
[0]
[dotIndex]
[scope, ., getVar, (, rootVarName, )]
[scope]
[rootVarName]
[rootVar, !=, null]
[rootVar]
[null]
[rootVar, ., getScope, (, )]
[rootVar]
[scope]
[Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, ), )]
[Preconditions]
[objectType, ., isUnknownType, (, )]
[objectType]
[objectType, ., getImplicitPrototype, (, ), !=, null]
[objectType, ., getImplicitPrototype, (, )]
[objectType]
[null]
[objectType, ., getImplicitPrototype, (, ), ., isResolved, (, )]
[objectType, ., getImplicitPrototype, (, )]
[objectType]
[false]
[true]
[objectType, ., getConstructor, (, )]
[objectType]
[ctor, !=, null]
[ctor]
[null]
[ctor, ., getExtendedInterfaces, (, )]
[ctor]
[!, interfaceType, ., isResolved, (, )]
[interfaceType, ., isResolved, (, )]
[interfaceType]
[true]
[false]
[new, UnknownFunctionContents, (, )]
[singleton]
[null]
[true]
[true]
[true]
[ImmutableList, ., of, (, )]
[ImmutableList]
[ImmutableSet, ., of, (, )]
[ImmutableSet]
[ImmutableMultiset, ., of, (, )]
[ImmutableMultiset]
[false]
[HashMultiset, ., create, (, )]
[HashMultiset]
[this, ., n]
[this]
[n]
[n]
[n, ., isFromExterns, (, )]
[n]
[hasNonEmptyReturns]
[hasNonEmptyReturns]
[true]
[n, ., getLastChild, (, )]
[n]
[block, ., hasOneChild, (, ), &&, block, ., getFirstChild, (, ), ., isThrow, (, )]
[block, ., hasOneChild, (, )]
[block]
[block, ., getFirstChild, (, ), ., isThrow, (, )]
[block, ., getFirstChild, (, )]
[block]
[escapedVarNames, ==, null, ?, ImmutableList, ., <, String, >, of, (, ), :, escapedVarNames]
[escapedVarNames, ==, null]
[escapedVarNames]
[null]
[ImmutableList, ., <, String, >, of, (, )]
[ImmutableList]
[escapedVarNames]
[escapedVarNames, ==, null]
[escapedVarNames]
[null]
[escapedVarNames]
[Sets, ., newHashSet, (, )]
[Sets]
[escapedVarNames, ., add, (, name, )]
[escapedVarNames]
[name]
[escapedQualifiedNames, ==, null, ?, ImmutableSet, ., <, String, >, of, (, ), :, escapedQualifiedNames]
[escapedQualifiedNames, ==, null]
[escapedQualifiedNames]
[null]
[ImmutableSet, ., <, String, >, of, (, )]
[ImmutableSet]
[escapedQualifiedNames]
[escapedQualifiedNames, ==, null]
[escapedQualifiedNames]
[null]
[escapedQualifiedNames]
[Sets, ., newHashSet, (, )]
[Sets]
[escapedQualifiedNames, ., add, (, name, )]
[escapedQualifiedNames]
[name]
[assignedVarNames]
[assignedVarNames, ., add, (, name, )]
[assignedVarNames]
[name]
