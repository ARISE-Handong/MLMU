[Logger, ., getLogger, (, AliasStrings, ., class, ., getName, (, ), )]
[Logger]
[AliasStrings, ., class, ., getName, (, )]
[AliasStrings, ., class]
["$$S_"]
[null]
[Maps, ., newTreeMap, (, )]
[Maps]
[new, LinkedHashSet, <, String, >, (, )]
[new, HashMap, <, JSModule, ,, Node, >, (, )]
[~, 0L]
[0L]
[this, ., compiler]
[this]
[compiler]
[this, ., moduleGraph]
[this]
[moduleGraph]
[this, ., aliasableStrings]
[this]
[strings]
[blacklistRegex, ., length, (, ), !=, 0]
[blacklistRegex, ., length, (, )]
[blacklistRegex]
[0]
[this, ., blacklist]
[this]
[Pattern, ., compile, (, blacklistRegex, ), ., matcher, (, "", )]
[Pattern, ., compile, (, blacklistRegex, )]
[Pattern]
[blacklistRegex]
[""]
[this, ., blacklist]
[this]
[null]
[this, ., outputStringUsage]
[this]
[outputStringUsage]
[logger, ., fine, (, "Aliasing common strings", )]
[logger]
["Aliasing common strings"]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[replaceStringsWithAliases, (, )]
[addAliasDeclarationNodes, (, )]
[outputStringUsage]
[outputStringUsage, (, )]
[n, ., isString, (, ), &&, !, parent, ., isGetProp, (, ), &&, !, parent, ., isRegExp, (, )]
[n, ., isString, (, ), &&, !, parent, ., isGetProp, (, )]
[n, ., isString, (, )]
[n]
[!, parent, ., isGetProp, (, )]
[parent, ., isGetProp, (, )]
[parent]
[!, parent, ., isRegExp, (, )]
[parent, ., isRegExp, (, )]
[parent]
[n, ., getString, (, )]
[n]
["undefined", ., equals, (, str, )]
["undefined"]
[str]
[blacklist, !=, null, &&, blacklist, ., reset, (, str, ), ., find, (, )]
[blacklist, !=, null]
[blacklist]
[null]
[blacklist, ., reset, (, str, ), ., find, (, )]
[blacklist, ., reset, (, str, )]
[blacklist]
[str]
[aliasableStrings, ==, null, ||, aliasableStrings, ., contains, (, str, )]
[aliasableStrings, ==, null]
[aliasableStrings]
[null]
[aliasableStrings, ., contains, (, str, )]
[aliasableStrings]
[str]
[new, StringOccurrence, (, n, ,, parent, )]
[n]
[parent]
[getOrCreateStringInfo, (, str, )]
[str]
[info, ., occurrences, ., add, (, occurrence, )]
[info, ., occurrences]
[info]
[occurrence]
[info, ., numOccurrences, ++]
[info, ., numOccurrences]
[info]
[t, ., inGlobalScope, (, ), ||, isInThrowExpression, (, n, )]
[t, ., inGlobalScope, (, )]
[t]
[isInThrowExpression, (, n, )]
[n]
[info, ., numOccurrencesInfrequentlyExecuted, ++]
[info, ., numOccurrencesInfrequentlyExecuted]
[info]
[t, ., getModule, (, )]
[t]
[info, ., numOccurrences, !=, 1]
[info, ., numOccurrences]
[info]
[1]
[module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl, &&, !, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, )]
[module, !=, null, &&, info, ., moduleToContainDecl, !=, null, &&, module, !=, info, ., moduleToContainDecl]
[module, !=, null, &&, info, ., moduleToContainDecl, !=, null]
[module, !=, null]
[module]
[null]
[info, ., moduleToContainDecl, !=, null]
[info, ., moduleToContainDecl]
[info]
[null]
[module, !=, info, ., moduleToContainDecl]
[module]
[info, ., moduleToContainDecl]
[info]
[!, moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, )]
[moduleGraph, ., dependsOn, (, module, ,, info, ., moduleToContainDecl, )]
[moduleGraph]
[module]
[info, ., moduleToContainDecl]
[info]
[module]
[moduleGraph, ., getDeepestCommonDependency, (, module, ,, info, ., moduleToContainDecl, )]
[moduleGraph]
[module]
[info, ., moduleToContainDecl]
[info]
[moduleVarParentMap, ., get, (, module, )]
[moduleVarParentMap]
[module]
[varParent, ==, null]
[varParent]
[null]
[varParent]
[compiler, ., getNodeForCodeInsertion, (, module, )]
[compiler]
[module]
[moduleVarParentMap, ., put, (, module, ,, varParent, )]
[moduleVarParentMap]
[module]
[varParent]
[info, ., moduleToContainDecl]
[info]
[module]
[info, ., parentForNewVarDecl]
[info]
[varParent]
[info, ., siblingToInsertVarDeclBefore]
[info]
[varParent, ., getFirstChild, (, )]
[varParent]
[stringInfoMap, ., get, (, string, )]
[stringInfoMap]
[string]
[info, ==, null]
[info]
[null]
[info]
[new, StringInfo, (, stringInfoMap, ., size, (, ), )]
[stringInfoMap, ., size, (, )]
[stringInfoMap]
[stringInfoMap, ., put, (, string, ,, info, )]
[stringInfoMap]
[string]
[info]
[info]
[n, ., getAncestors, (, )]
[n]
[ancestor, ., getType, (, )]
[ancestor]
[Token, ., THROW]
[Token]
[true]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[Token, ., FOR]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., CASE]
[Token]
[Token, ., DEFAULT_CASE]
[Token]
[Token, ., BLOCK]
[Token]
[Token, ., SCRIPT]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., TRY]
[Token]
[Token, ., CATCH]
[Token]
[Token, ., RETURN]
[Token]
[Token, ., EXPR_RESULT]
[Token]
[false]
[false]
[stringInfoMap, ., entrySet, (, )]
[stringInfoMap]
[entry, ., getKey, (, )]
[entry]
[entry, ., getValue, (, )]
[entry]
[shouldReplaceWithAlias, (, literal, ,, info, )]
[literal]
[info]
[info, ., occurrences]
[info]
[replaceStringWithAliasName, (, occurrence, ,, info, ., getVariableName, (, literal, ), ,, info, )]
[occurrence]
[info, ., getVariableName, (, literal, )]
[info]
[literal]
[info]
[stringInfoMap, ., entrySet, (, )]
[stringInfoMap]
[entry, ., getValue, (, )]
[entry]
[!, info, ., isAliased]
[info, ., isAliased]
[info]
[info, ., getVariableName, (, entry, ., getKey, (, ), )]
[info]
[entry, ., getKey, (, )]
[entry]
[IR, ., var, (, IR, ., name, (, alias, ), ,, IR, ., string, (, entry, ., getKey, (, ), ), )]
[IR]
[IR, ., name, (, alias, )]
[IR]
[alias]
[IR, ., string, (, entry, ., getKey, (, ), )]
[IR]
[entry, ., getKey, (, )]
[entry]
[info, ., siblingToInsertVarDeclBefore, ==, null]
[info, ., siblingToInsertVarDeclBefore]
[info]
[null]
[info, ., parentForNewVarDecl, ., addChildToFront, (, var, )]
[info, ., parentForNewVarDecl]
[info]
[var]
[info, ., parentForNewVarDecl, ., addChildBefore, (, var, ,, info, ., siblingToInsertVarDeclBefore, )]
[info, ., parentForNewVarDecl]
[info]
[var]
[info, ., siblingToInsertVarDeclBefore]
[info]
[compiler, ., reportCodeChange, (, )]
[compiler]
[info, ., numOccurrences, >, info, ., numOccurrencesInfrequentlyExecuted]
[info, ., numOccurrences]
[info]
[info, ., numOccurrencesInfrequentlyExecuted]
[info]
[true]
[2, +, str, ., length, (, )]
[2]
[str, ., length, (, )]
[str]
[info, ., numOccurrences, *, sizeOfLiteral]
[info, ., numOccurrences]
[info]
[sizeOfLiteral]
[3]
[6, +, sizeOfVariable, +, sizeOfLiteral, +, info, ., numOccurrences, *, sizeOfVariable]
[6, +, sizeOfVariable, +, sizeOfLiteral]
[6, +, sizeOfVariable]
[6]
[sizeOfVariable]
[sizeOfLiteral]
[info, ., numOccurrences, *, sizeOfVariable]
[info, ., numOccurrences]
[info]
[sizeOfVariable]
[sizeOfAliases, <, sizeOfStrings]
[sizeOfAliases]
[sizeOfStrings]
[occurrence, ., parent, ., replaceChild, (, occurrence, ., node, ,, IR, ., name, (, name, ), )]
[occurrence, ., parent]
[occurrence]
[occurrence, ., node]
[occurrence]
[IR, ., name, (, name, )]
[IR]
[name]
[info, ., isAliased]
[info]
[true]
[compiler, ., reportCodeChange, (, )]
[compiler]
[new, StringBuilder, (, "Strings used more than once:\n", )]
["Strings used more than once:\n"]
[stringInfoMap, ., entrySet, (, )]
[stringInfoMap]
[stringInfoEntry, ., getValue, (, )]
[stringInfoEntry]
[info, ., numOccurrences, >, 1]
[info, ., numOccurrences]
[info]
[1]
[sb, ., append, (, info, ., numOccurrences, )]
[sb]
[info, ., numOccurrences]
[info]
[sb, ., append, (, ": ", )]
[sb]
[": "]
[sb, ., append, (, stringInfoEntry, ., getKey, (, ), )]
[sb]
[stringInfoEntry, ., getKey, (, )]
[stringInfoEntry]
[sb, ., append, (, '\n', )]
[sb]
['\n']
[logger, ., fine, (, sb, ., toString, (, ), )]
[logger]
[sb, ., toString, (, )]
[sb]
[this, ., node]
[this]
[node]
[this, ., parent]
[this]
[parent]
[this, ., id]
[this]
[id]
[this, ., occurrences]
[this]
[new, ArrayList, <, StringOccurrence, >, (, )]
[this, ., isAliased]
[this]
[false]
[aliasName, ==, null]
[aliasName]
[null]
[aliasName]
[encodeStringAsIdentifier, (, STRING_ALIAS_PREFIX, ,, stringLiteral, )]
[STRING_ALIAS_PREFIX]
[stringLiteral]
[aliasName]
[20]
[s, ., length, (, )]
[s]
[Math, ., min, (, length, ,, MAX_LIMIT, )]
[Math]
[length]
[MAX_LIMIT]
[new, StringBuilder, (, )]
[sb, ., append, (, prefix, )]
[sb]
[prefix]
[false]
[0]
[i, <, limit]
[i]
[limit]
[i, ++]
[i]
[s, ., charAt, (, i, )]
[s]
[i]
[protectHex]
[(, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'a', &&, ch, <=, 'f', )]
[(, ch, >=, '0', &&, ch, <=, '9', )]
[ch, >=, '0', &&, ch, <=, '9']
[ch, >=, '0']
[ch]
['0']
[ch, <=, '9']
[ch]
['9']
[(, ch, >=, 'a', &&, ch, <=, 'f', )]
[ch, >=, 'a', &&, ch, <=, 'f']
[ch, >=, 'a']
[ch]
['a']
[ch, <=, 'f']
[ch]
['f']
[sb, ., append, (, '_', )]
[sb]
['_']
[protectHex]
[false]
[(, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', ), ||, (, ch, >=, 'a', &&, ch, <=, 'z', )]
[(, ch, >=, '0', &&, ch, <=, '9', ), ||, (, ch, >=, 'A', &&, ch, <=, 'Z', )]
[(, ch, >=, '0', &&, ch, <=, '9', )]
[ch, >=, '0', &&, ch, <=, '9']
[ch, >=, '0']
[ch]
['0']
[ch, <=, '9']
[ch]
['9']
[(, ch, >=, 'A', &&, ch, <=, 'Z', )]
[ch, >=, 'A', &&, ch, <=, 'Z']
[ch, >=, 'A']
[ch]
['A']
[ch, <=, 'Z']
[ch]
['Z']
[(, ch, >=, 'a', &&, ch, <=, 'z', )]
[ch, >=, 'a', &&, ch, <=, 'z']
[ch, >=, 'a']
[ch]
['a']
[ch, <=, 'z']
[ch]
['z']
[sb, ., append, (, ch, )]
[sb]
[ch]
[sb, ., append, (, '$', )]
[sb]
['$']
[sb, ., append, (, Integer, ., toHexString, (, ch, ), )]
[sb]
[Integer, ., toHexString, (, ch, )]
[Integer]
[ch]
[protectHex]
[true]
[length, ==, limit]
[length]
[limit]
[sb, ., toString, (, )]
[sb]
[new, CRC32, (, )]
[crc32, ., update, (, s, ., getBytes, (, ), )]
[crc32]
[s, ., getBytes, (, )]
[s]
[crc32, ., getValue, (, ), &, unitTestHashReductionMask]
[crc32, ., getValue, (, )]
[crc32]
[unitTestHashReductionMask]
[sb, ., append, (, '_', )]
[sb]
['_']
[sb, ., append, (, Long, ., toHexString, (, hash, ), )]
[sb]
[Long, ., toHexString, (, hash, )]
[Long]
[hash]
[sb, ., toString, (, )]
[sb]
[!, usedHashedAliases, ., add, (, encoded, )]
[usedHashedAliases, ., add, (, encoded, )]
[usedHashedAliases]
[encoded]
[encoded]
["_", +, id]
["_"]
[id]
[encoded]
