[factory]
[factory]
[x]
[factory]
[x]
[factory]
[x]
[factory]
[x]
[round, (, 0, )]
[0]
[d]
[round, (, 0, )]
[0]
[factory]
[s]
[round, (, 0, )]
[0]
[factory]
[sign]
[nans]
[new, DfpDec, (, getField, (, ), )]
[getField, (, )]
[new, DfpDec, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, DfpDec, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, DfpDec, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[new, DfpDec, (, getField, (, ), ,, x, )]
[getField, (, )]
[x]
[getField, (, ), ., getRadixDigits, (, ), !=, d, ., getField, (, ), ., getRadixDigits, (, )]
[getField, (, ), ., getRadixDigits, (, )]
[getField, (, )]
[d, ., getField, (, ), ., getRadixDigits, (, )]
[d, ., getField, (, )]
[d]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[getField, (, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
["newInstance"]
[d]
[result]
[new, DfpDec, (, d, )]
[d]
[new, DfpDec, (, getField, (, ), ,, s, )]
[getField, (, )]
[s]
[new, DfpDec, (, getField, (, ), ,, sign, ,, nans, )]
[getField, (, )]
[sign]
[nans]
[getRadixDigits, (, ), *, 4, -, 3]
[getRadixDigits, (, ), *, 4]
[getRadixDigits, (, )]
[4]
[3]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[msb, ==, 0]
[msb]
[0]
[0]
[mant, ., length, *, 4]
[mant, ., length]
[mant]
[4]
[1000]
[lsbthreshold, >, msb]
[lsbthreshold]
[msb]
[lsbthreshold]
[10]
[cmaxdigits, --]
[cmaxdigits]
[getDecimalDigits, (, )]
[cmaxdigits, -, digits]
[cmaxdigits]
[digits]
[lsbshift, /, 4]
[lsbshift]
[4]
[lsbthreshold]
[1]
[0]
[i, <, lsbshift, %, 4]
[i]
[lsbshift, %, 4]
[lsbshift]
[4]
[i, ++]
[i]
[lsbthreshold]
[10]
[mant, [, lsd, ]]
[mant]
[lsd]
[lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3]
[lsbthreshold, <=, 1]
[lsbthreshold]
[1]
[digits, ==, 4, *, mant, ., length, -, 3]
[digits]
[4, *, mant, ., length, -, 3]
[4, *, mant, ., length]
[4]
[mant, ., length]
[mant]
[3]
[super, ., round, (, in, )]
[super]
[in]
[in]
[lsbthreshold, ==, 1]
[lsbthreshold]
[1]
[n]
[(, mant, [, lsd, -, 1, ], /, 1000, ), %, 10]
[(, mant, [, lsd, -, 1, ], /, 1000, )]
[mant, [, lsd, -, 1, ], /, 1000]
[mant, [, lsd, -, 1, ]]
[mant]
[lsd, -, 1]
[lsd]
[1]
[1000]
[10]
[mant, [, lsd, -, 1, ]]
[mant]
[lsd, -, 1]
[lsd]
[1]
[1000]
[discarded]
[mant, [, lsd, -, 1, ]]
[mant]
[lsd, -, 1]
[lsd]
[1]
[n]
[(, lsb, *, 10, /, lsbthreshold, ), %, 10]
[(, lsb, *, 10, /, lsbthreshold, )]
[lsb, *, 10, /, lsbthreshold]
[lsb, *, 10]
[lsb]
[10]
[lsbthreshold]
[10]
[discarded]
[lsb, %, (, lsbthreshold, /, 10, )]
[lsb]
[(, lsbthreshold, /, 10, )]
[lsbthreshold, /, 10]
[lsbthreshold]
[10]
[0]
[i, <, lsd]
[i]
[lsd]
[i, ++]
[i]
[discarded]
[mant, [, i, ]]
[mant]
[i]
[mant, [, i, ]]
[mant]
[i]
[0]
[mant, [, lsd, ]]
[mant]
[lsd]
[lsb, /, lsbthreshold, *, lsbthreshold]
[lsb, /, lsbthreshold]
[lsb]
[lsbthreshold]
[lsbthreshold]
[getField, (, ), ., getRoundingMode, (, )]
[getField, (, )]
[ROUND_DOWN]
[inc]
[false]
[ROUND_UP]
[inc]
[(, n, !=, 0, ), ||, (, discarded, !=, 0, )]
[(, n, !=, 0, )]
[n, !=, 0]
[n]
[0]
[(, discarded, !=, 0, )]
[discarded, !=, 0]
[discarded]
[0]
[ROUND_HALF_UP]
[inc]
[n, >=, 5]
[n]
[5]
[ROUND_HALF_DOWN]
[inc]
[n, >, 5]
[n]
[5]
[ROUND_HALF_EVEN]
[inc]
[(, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, )]
[(, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, )]
[(, n, >, 5, )]
[n, >, 5]
[n]
[5]
[(, n, ==, 5, &&, discarded, !=, 0, )]
[n, ==, 5, &&, discarded, !=, 0]
[n, ==, 5]
[n]
[5]
[discarded, !=, 0]
[discarded]
[0]
[(, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, )]
[n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1]
[n, ==, 5, &&, discarded, ==, 0]
[n, ==, 5]
[n]
[5]
[discarded, ==, 0]
[discarded]
[0]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1]
[(, (, lsb, /, lsbthreshold, ), &, 1, )]
[(, lsb, /, lsbthreshold, ), &, 1]
[(, lsb, /, lsbthreshold, )]
[lsb, /, lsbthreshold]
[lsb]
[lsbthreshold]
[1]
[1]
[ROUND_HALF_ODD]
[inc]
[(, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, )]
[(, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, )]
[(, n, >, 5, )]
[n, >, 5]
[n]
[5]
[(, n, ==, 5, &&, discarded, !=, 0, )]
[n, ==, 5, &&, discarded, !=, 0]
[n, ==, 5]
[n]
[5]
[discarded, !=, 0]
[discarded]
[0]
[(, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, )]
[n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0]
[n, ==, 5, &&, discarded, ==, 0]
[n, ==, 5]
[n]
[5]
[discarded, ==, 0]
[discarded]
[0]
[(, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0]
[(, (, lsb, /, lsbthreshold, ), &, 1, )]
[(, lsb, /, lsbthreshold, ), &, 1]
[(, lsb, /, lsbthreshold, )]
[lsb, /, lsbthreshold]
[lsb]
[lsbthreshold]
[1]
[0]
[ROUND_CEIL]
[inc]
[(, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, )]
[(, sign, ==, 1, )]
[sign, ==, 1]
[sign]
[1]
[(, n, !=, 0, ||, discarded, !=, 0, )]
[n, !=, 0, ||, discarded, !=, 0]
[n, !=, 0]
[n]
[0]
[discarded, !=, 0]
[discarded]
[0]
[ROUND_FLOOR]
[inc]
[(, sign, ==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, )]
[(, sign, ==, -, 1, )]
[sign, ==, -, 1]
[sign]
[-, 1]
[1]
[(, n, !=, 0, ||, discarded, !=, 0, )]
[n, !=, 0, ||, discarded, !=, 0]
[n, !=, 0]
[n]
[0]
[discarded, !=, 0]
[discarded]
[0]
[inc]
[lsbthreshold]
[lsd]
[i, <, mant, ., length]
[i]
[mant, ., length]
[mant]
[i, ++]
[i]
[mant, [, i, ], +, rh]
[mant, [, i, ]]
[mant]
[i]
[rh]
[rh]
[r, /, RADIX]
[r]
[RADIX]
[mant, [, i, ]]
[mant]
[i]
[r, %, RADIX]
[r]
[RADIX]
[rh, !=, 0]
[rh]
[0]
[shiftRight, (, )]
[mant, [, mant, ., length, -, 1, ]]
[mant]
[mant, ., length, -, 1]
[mant, ., length]
[mant]
[1]
[rh]
[exp, <, MIN_EXP]
[exp]
[MIN_EXP]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, )]
[getField, (, )]
[DfpField, ., FLAG_UNDERFLOW]
[DfpField]
[DfpField, ., FLAG_UNDERFLOW]
[DfpField]
[exp, >, MAX_EXP]
[exp]
[MAX_EXP]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, )]
[getField, (, )]
[DfpField, ., FLAG_OVERFLOW]
[DfpField]
[DfpField, ., FLAG_OVERFLOW]
[DfpField]
[n, !=, 0, ||, discarded, !=, 0]
[n, !=, 0]
[n]
[0]
[discarded, !=, 0]
[discarded]
[0]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[getField, (, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[0]
["nextAfter"]
[getField, (, ), ., getRadixDigits, (, ), !=, x, ., getField, (, ), ., getRadixDigits, (, )]
[getField, (, ), ., getRadixDigits, (, )]
[getField, (, )]
[x, ., getField, (, ), ., getRadixDigits, (, )]
[x, ., getField, (, )]
[x]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[getField, (, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[result, ., nans]
[result]
[QNAN]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, )]
[DfpField, ., FLAG_INVALID]
[DfpField]
[trapName]
[x]
[result]
[false]
[this, ., lessThan, (, x, )]
[this]
[x]
[up]
[true]
[equals, (, x, )]
[x]
[newInstance, (, x, )]
[x]
[lessThan, (, getZero, (, ), )]
[getZero, (, )]
[up]
[!, up]
[up]
[up]
[inc]
[power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, )]
[intLog10, (, ), -, getDecimalDigits, (, ), +, 1]
[intLog10, (, ), -, getDecimalDigits, (, )]
[intLog10, (, )]
[getDecimalDigits, (, )]
[1]
[inc]
[copysign, (, inc, ,, this, )]
[inc]
[this]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[inc]
[power10K, (, MIN_EXP, -, mant, ., length, -, 1, )]
[MIN_EXP, -, mant, ., length, -, 1]
[MIN_EXP, -, mant, ., length]
[MIN_EXP]
[mant, ., length]
[mant]
[1]
[inc, ., equals, (, getZero, (, ), )]
[inc]
[getZero, (, )]
[result]
[copysign, (, newInstance, (, getZero, (, ), ), ,, this, )]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[this]
[result]
[add, (, inc, )]
[inc]
[inc]
[power10, (, intLog10, (, ), )]
[intLog10, (, )]
[inc]
[copysign, (, inc, ,, this, )]
[inc]
[this]
[this, ., equals, (, inc, )]
[this]
[inc]
[inc]
[inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), )]
[inc]
[power10, (, getDecimalDigits, (, ), )]
[getDecimalDigits, (, )]
[inc]
[inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), )]
[inc]
[power10, (, getDecimalDigits, (, ), -, 1, )]
[getDecimalDigits, (, ), -, 1]
[getDecimalDigits, (, )]
[1]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[inc]
[power10K, (, MIN_EXP, -, mant, ., length, -, 1, )]
[MIN_EXP, -, mant, ., length, -, 1]
[MIN_EXP, -, mant, ., length]
[MIN_EXP]
[mant, ., length]
[mant]
[1]
[inc, ., equals, (, getZero, (, ), )]
[inc]
[getZero, (, )]
[result]
[copysign, (, newInstance, (, getZero, (, ), ), ,, this, )]
[newInstance, (, getZero, (, ), )]
[getZero, (, )]
[this]
[result]
[subtract, (, inc, )]
[inc]
[result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE]
[result, ., classify, (, ), ==, INFINITE]
[result, ., classify, (, )]
[result]
[INFINITE]
[this, ., classify, (, ), !=, INFINITE]
[this, ., classify, (, )]
[this]
[INFINITE]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[getField, (, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[trapName]
[x]
[result]
[result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false]
[result, ., equals, (, getZero, (, ), )]
[result]
[getZero, (, )]
[this, ., equals, (, getZero, (, ), ), ==, false]
[this, ., equals, (, getZero, (, ), )]
[this]
[getZero, (, )]
[false]
[getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[getField, (, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[result]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, )]
[DfpField, ., FLAG_INEXACT]
[DfpField]
[trapName]
[x]
[result]
[result]
