[Logger, ., getLogger, (, SymbolTable, ., class, ., getName, (, ), )]
[Logger]
[SymbolTable, ., class, ., getName, (, )]
[SymbolTable, ., class]
["*global*"]
[HashBasedTable, ., create, (, )]
[HashBasedTable]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[Lists, ., newArrayList, (, )]
[Lists]
[null]
[this, ., registry]
[this]
[registry]
[Collections, ., unmodifiableCollection, (, symbol, ., references, ., values, (, ), )]
[Collections]
[symbol, ., references, ., values, (, )]
[symbol, ., references]
[symbol]
[ImmutableList, ., copyOf, (, symbol, ., references, ., values, (, ), )]
[ImmutableList]
[symbol, ., references, ., values, (, )]
[symbol, ., references]
[symbol]
[Collections, ., unmodifiableCollection, (, symbols, ., values, (, ), )]
[Collections]
[symbols, ., values, (, )]
[symbols]
[Lists, ., newArrayList, (, symbols, ., values, (, ), )]
[Lists]
[symbols, ., values, (, )]
[symbols]
[Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), )]
[Collections]
[sortedSymbols]
[getNaturalSymbolOrdering, (, )]
[sortedSymbols]
[SYMBOL_ORDERING]
[slot, ., scope]
[slot]
[Collections, ., unmodifiableList, (, docInfos, )]
[Collections]
[docInfos]
[declareSymbol, (, name, ,, null, ,, true, ,, scope, ,, declNode, ,, null, )]
[name]
[null]
[true]
[scope]
[declNode]
[null]
[n, ., getParent, (, )]
[n]
[n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, )]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, ), ., isFunction, (, )]
[n, ., getParent, (, )]
[n]
[current]
[current, ., getParent, (, )]
[current]
[current, !=, null]
[current]
[null]
[current]
[current, ., getParent, (, )]
[current]
[scopes, ., containsKey, (, current, )]
[scopes]
[current]
[scopes, ., get, (, current, )]
[scopes]
[current]
[null]
[getScopeInFunction, (, sym, )]
[sym]
[scope, !=, null]
[scope]
[null]
[scope, ., getSlot, (, paramName, )]
[scope]
[paramName]
[param, !=, null, &&, param, ., scope, ==, scope]
[param, !=, null]
[param]
[null]
[param, ., scope, ==, scope]
[param, ., scope]
[param]
[scope]
[param]
[null]
[sym, ., getFunctionType, (, )]
[sym]
[type, ==, null]
[type]
[null]
[null]
[type, ., getSource, (, )]
[type]
[functionNode, ==, null]
[functionNode]
[null]
[null]
[scopes, ., get, (, functionNode, )]
[scopes]
[functionNode]
[scope, ., getSymbolForScope, (, ), ==, null]
[scope, ., getSymbolForScope, (, )]
[scope]
[null]
[scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), )]
[scope]
[findSymbolForScope, (, scope, )]
[scope]
[scope, ., getSymbolForScope, (, )]
[scope]
[scope, ., getRootNode, (, )]
[scope]
[rootNode, ., getParent, (, ), ==, null]
[rootNode, ., getParent, (, )]
[rootNode]
[null]
[globalScope, ., getSlot, (, GLOBAL_THIS, )]
[globalScope]
[GLOBAL_THIS]
[!, rootNode, ., isFunction, (, )]
[rootNode, ., isFunction, (, )]
[rootNode]
[null]
[NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), )]
[NodeUtil]
[NodeUtil, ., getBestLValue, (, rootNode, )]
[NodeUtil]
[rootNode]
[name, ==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, )]
[name, ==, null]
[name]
[null]
[null]
[scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, )]
[scope, ., getParentScope, (, )]
[scope]
[name]
[getAllSymbolsForType, (, sym, ., getType, (, ), )]
[sym, ., getType, (, )]
[sym]
[globalScope]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), )]
[Preconditions]
[fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, )]
[fn, ., isConstructor, (, )]
[fn]
[fn, ., isInterface, (, )]
[fn]
[fn, ., getInstanceType, (, )]
[fn]
[getSymbolForName, (, fn, ., getSource, (, ), ,, instanceType, ., getReferenceName, (, ), )]
[fn, ., getSource, (, )]
[fn]
[instanceType, ., getReferenceName, (, )]
[instanceType]
[getSymbolForName, (, null, ,, enumType, ., getElementsType, (, ), ., getReferenceName, (, ), )]
[null]
[enumType, ., getElementsType, (, ), ., getReferenceName, (, )]
[enumType, ., getElementsType, (, )]
[enumType]
[sym, ., getFunctionType, (, )]
[sym]
[fn, !=, null, &&, fn, ., isNominalConstructor, (, )]
[fn, !=, null]
[fn]
[null]
[fn, ., isNominalConstructor, (, )]
[fn]
[getSymbolForInstancesOf, (, fn, )]
[fn]
[null]
[Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), )]
[Preconditions]
[fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, )]
[fn, ., isConstructor, (, )]
[fn]
[fn, ., isInterface, (, )]
[fn]
[fn, ., getPrototype, (, )]
[fn]
[getSymbolForName, (, fn, ., getSource, (, ), ,, pType, ., getReferenceName, (, ), )]
[fn, ., getSource, (, )]
[fn]
[pType, ., getReferenceName, (, )]
[pType]
[name, ==, null, ||, globalScope, ==, null]
[name, ==, null]
[name]
[null]
[globalScope, ==, null]
[globalScope]
[null]
[null]
[source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, )]
[source, ==, null]
[source]
[null]
[globalScope]
[getEnclosingScope, (, source, )]
[source]
[scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, )]
[scope, ==, null]
[scope]
[null]
[null]
[scope, ., getQualifiedSlot, (, name, )]
[scope]
[name]
[type, ==, null]
[type]
[null]
[ImmutableList, ., of, (, )]
[ImmutableList]
[type, ., toMaybeUnionType, (, )]
[type]
[unionType, !=, null]
[unionType]
[null]
[Lists, ., newArrayListWithExpectedSize, (, 2, )]
[Lists]
[2]
[unionType, ., getAlternates, (, )]
[unionType]
[getSymbolForTypeHelper, (, alt, ,, true, )]
[alt]
[true]
[altSym, !=, null]
[altSym]
[null]
[result, ., add, (, altSym, )]
[result]
[altSym]
[result]
[getSymbolForTypeHelper, (, type, ,, true, )]
[type]
[true]
[result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result, )]
[result, ==, null]
[result]
[null]
[ImmutableList, ., <, Symbol, >, of, (, )]
[ImmutableList]
[ImmutableList, ., of, (, result, )]
[ImmutableList]
[result]
[type, ==, null]
[type]
[null]
[null]
[type, ., isGlobalThisType, (, )]
[type]
[globalScope, ., getSlot, (, GLOBAL_THIS, )]
[globalScope]
[GLOBAL_THIS]
[type, ., isNominalConstructor, (, )]
[type]
[linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), )]
[linkToCtor]
[globalScope, ., getSlot, (, "Function", )]
[globalScope]
["Function"]
[getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), )]
[type, ., toMaybeFunctionType, (, )]
[type]
[type, ., isFunctionPrototypeType, (, )]
[type]
[(, (, ObjectType, ), type, ), ., getOwnerFunction, (, )]
[(, (, ObjectType, ), type, )]
[(, ObjectType, ), type]
[type]
[!, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, )]
[!, ownerFn, ., isConstructor, (, )]
[ownerFn, ., isConstructor, (, )]
[ownerFn]
[!, ownerFn, ., isInterface, (, )]
[ownerFn, ., isInterface, (, )]
[ownerFn]
[null]
[linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, )]
[linkToCtor]
[getSymbolDeclaredBy, (, ownerFn, )]
[ownerFn]
[getSymbolForInstancesOf, (, ownerFn, )]
[ownerFn]
[type, ., isInstanceType, (, )]
[type]
[(, (, ObjectType, ), type, ), ., getConstructor, (, )]
[(, (, ObjectType, ), type, )]
[(, ObjectType, ), type]
[type]
[linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, )]
[linkToCtor]
[getSymbolDeclaredBy, (, ownerFn, )]
[ownerFn]
[getSymbolForInstancesOf, (, ownerFn, )]
[ownerFn]
[type, ., isFunctionType, (, )]
[type]
[linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", )]
[linkToCtor]
[globalScope, ., getSlot, (, "Function", )]
[globalScope]
["Function"]
[globalScope, ., getQualifiedSlot, (, "Function.prototype", )]
[globalScope]
["Function.prototype"]
[type, ., autoboxesTo, (, ), !=, null]
[type, ., autoboxesTo, (, )]
[type]
[null]
[getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, )]
[type, ., autoboxesTo, (, )]
[type]
[linkToCtor]
[null]
[new, StringBuilder, (, )]
[getAllSymbols, (, )]
[toDebugString, (, builder, ,, symbol, )]
[builder]
[symbol]
[builder, ., toString, (, )]
[builder]
[symbol, ., scope]
[symbol]
[scope, ., isGlobalScope, (, )]
[scope]
[builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), )]
[builder]
[String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), )]
[String]
["'%s' : in global scope:\n"]
[symbol, ., getName, (, )]
[symbol]
[scope, ., getRootNode, (, ), !=, null]
[scope, ., getRootNode, (, )]
[scope]
[null]
[builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), )]
[builder]
[String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), )]
[String]
["'%s' : in scope %s:%d\n"]
[symbol, ., getName, (, )]
[symbol]
[scope, ., getRootNode, (, ), ., getSourceFileName, (, )]
[scope, ., getRootNode, (, )]
[scope]
[scope, ., getRootNode, (, ), ., getLineno, (, )]
[scope, ., getRootNode, (, )]
[scope]
[scope, ., getSymbolForScope, (, ), !=, null]
[scope, ., getSymbolForScope, (, )]
[scope]
[null]
[builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), )]
[builder]
[String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), )]
[String]
["'%s' : in scope %s\n"]
[symbol, ., getName, (, )]
[symbol]
[scope, ., getSymbolForScope, (, ), ., getName, (, )]
[scope, ., getSymbolForScope, (, )]
[scope]
[builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), ), )]
[builder]
[String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), )]
[String]
["'%s' : in unknown scope\n"]
[symbol, ., getName, (, )]
[symbol]
[0]
[getReferences, (, symbol, )]
[symbol]
[builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), ), )]
[builder]
[String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), )]
[String]
["  Ref %d: %s:%d\n"]
[refCount]
[ref, ., getNode, (, ), ., getSourceFileName, (, )]
[ref, ., getNode, (, )]
[ref]
[ref, ., getNode, (, ), ., getLineno, (, )]
[ref, ., getNode, (, )]
[ref]
[refCount, ++]
[refCount]
[scopes]
[createScopeFrom, (, scope, )]
[scope]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom, (, t, ., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, p, ), {, }, }, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom, (, t, ., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, p, ), {, }, }]
[createScopeFrom, (, t, ., getScope, (, ), )]
[t, ., getScope, (, )]
[t]
[Collections, ., unmodifiableCollection, (, scopes, ., values, (, ), )]
[Collections]
[scopes, ., values, (, )]
[scopes]
[Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING, )]
[Sets]
[LEXICAL_SCOPE_ORDERING]
[getAllScopes, (, )]
[scope, ., isLexicalScope, (, )]
[scope]
[scopes, ., add, (, scope, )]
[scopes]
[scope]
[scopes]
[addAnonymousFunctionsInScope, (, scope, )]
[scope]
[getSymbolForScope, (, scope, )]
[scope]
[sym, ==, null]
[sym]
[null]
[scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null]
[scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, )]
[scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null]
[scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, )]
[scope, ., isLexicalScope, (, )]
[scope]
[!, scope, ., isGlobalScope, (, )]
[scope, ., isGlobalScope, (, )]
[scope]
[scope, ., getRootNode, (, ), !=, null]
[scope, ., getRootNode, (, )]
[scope]
[null]
[!, scope, ., getRootNode, (, ), ., isFromExterns, (, )]
[scope, ., getRootNode, (, ), ., isFromExterns, (, )]
[scope, ., getRootNode, (, )]
[scope]
[scope, ., getParentScope, (, ), !=, null]
[scope, ., getParentScope, (, )]
[scope]
[null]
[scope, ., getParentScope, (, )]
[scope]
[parent, ., innerAnonFunctionsWithNames, ++]
[parent, ., innerAnonFunctionsWithNames]
[parent]
["function%", +, count]
["function%"]
[count]
[scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), ), )]
[scope]
[declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), )]
[parent]
[innerName]
[scope, ., getRootNode, (, )]
[scope]
[otherSymbolTable, ., getAllSymbols, (, )]
[otherSymbolTable]
[otherSymbol, ., getName, (, )]
[otherSymbol]
[createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), )]
[otherSymbolTable, ., getScope, (, otherSymbol, )]
[otherSymbolTable]
[otherSymbol]
[findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, )]
[otherSymbolTable]
[otherSymbol]
[null]
[decl, !=, null]
[decl]
[null]
[decl, ., getNode, (, )]
[decl]
[mySymbol]
[isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, )]
[name]
[declNode]
[myScope]
[mySymbol, ==, null]
[mySymbol]
[null]
[mySymbol]
[copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, )]
[otherSymbol]
[declNode]
[myScope]
[mySymbol]
[myScope, ., getOwnSlot, (, name, )]
[myScope]
[name]
[mySymbol, !=, null]
[mySymbol]
[null]
[otherSymbolTable, ., getReferences, (, otherSymbol, )]
[otherSymbolTable]
[otherSymbol]
[isGoodRefToAdd, (, otherRef, )]
[otherRef]
[mySymbol, ., defineReferenceAt, (, otherRef, ., getNode, (, ), )]
[mySymbol]
[otherRef, ., getNode, (, )]
[otherRef]
[symbols, ., get, (, declNode, ,, name, )]
[symbols]
[declNode]
[name]
[sym, ==, null]
[sym]
[null]
[scope, ., ownSymbols, ., get, (, name, )]
[scope, ., ownSymbols]
[scope]
[name]
[sym]
[slot, ., getDeclaration, (, )]
[slot]
[isGoodRefToAdd, (, decl, )]
[decl]
[decl]
[otherSymbolTable, ., getReferences, (, slot, )]
[otherSymbolTable]
[slot]
[isGoodRefToAdd, (, ref, )]
[ref]
[ref]
[null]
[ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), )]
[ref, !=, null, &&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null]
[ref, !=, null, &&, ref, ., getNode, (, ), !=, null]
[ref, !=, null]
[ref]
[null]
[ref, ., getNode, (, ), !=, null]
[ref, ., getNode, (, )]
[ref]
[null]
[ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null]
[ref, ., getNode, (, ), ., getStaticSourceFile, (, )]
[ref, ., getNode, (, )]
[ref]
[null]
[!, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), )]
[Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), )]
[Compiler, ., SYNTHETIC_EXTERNS]
[Compiler]
[ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, )]
[ref, ., getNode, (, ), ., getStaticSourceFile, (, )]
[ref, ., getNode, (, )]
[ref]
[copySymbolTo, (, sym, ,, sym, ., getDeclaration, (, ), ., getNode, (, ), ,, scope, )]
[sym]
[sym, ., getDeclaration, (, ), ., getNode, (, )]
[sym, ., getDeclaration, (, )]
[sym]
[scope]
[Preconditions, ., checkNotNull, (, declNode, )]
[Preconditions]
[declNode]
[declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,, sym, ., getJSDocInfo, (, ), )]
[sym, ., getName, (, )]
[sym]
[sym, ., getType, (, )]
[sym]
[sym, ., isTypeInferred, (, )]
[sym]
[scope]
[declNode]
[sym, ., getJSDocInfo, (, )]
[sym]
[new, Symbol, (, name, ,, type, ,, inferred, ,, scope, )]
[name]
[type]
[inferred]
[scope]
[symbols, ., put, (, declNode, ,, name, ,, symbol, )]
[symbols]
[declNode]
[name]
[symbol]
[Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, )]
[Preconditions]
[replacedSymbol, ==, null]
[replacedSymbol]
[null]
["Found duplicate symbol %s in global index. Type %s"]
[name]
[type]
[replacedSymbol]
[scope, ., ownSymbols, ., put, (, name, ,, symbol, )]
[scope, ., ownSymbols]
[scope]
[name]
[symbol]
[Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, )]
[Preconditions]
[replacedSymbol, ==, null]
[replacedSymbol]
[null]
["Found duplicate symbol %s in its scope. Type %s"]
[name]
[type]
[symbol]
[addSymbol, (, name, ,, type, ,, inferred, ,, scope, ,, declNode, )]
[name]
[type]
[inferred]
[scope]
[declNode]
[symbol, ., setJSDocInfo, (, info, )]
[symbol]
[info]
[symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), )]
[symbol]
[symbol, ., defineReferenceAt, (, declNode, )]
[symbol]
[declNode]
[symbol]
[getScope, (, s, )]
[s]
[scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s]
[scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), )]
[scope, ., ownSymbols]
[scope]
[s, ., getName, (, )]
[s]
[s]
[new, IllegalStateException, (, "Symbol not found in scope ", +, s, )]
["Symbol not found in scope ", +, s]
["Symbol not found in scope "]
[s]
[symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), ), !=, s]
[symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), )]
[symbols]
[s, ., getDeclaration, (, ), ., getNode, (, )]
[s, ., getDeclaration, (, )]
[s]
[s, ., getName, (, )]
[s]
[s]
[new, IllegalStateException, (, "Symbol not found in table ", +, s, )]
["Symbol not found in table ", +, s]
["Symbol not found in table "]
[s]
[getAllSymbolsSorted, (, )]
[symbol, ., getName, (, )]
[symbol]
[qName, ., indexOf, (, '.', )]
[qName]
['.']
[rootIndex, ==, -, 1]
[rootIndex]
[-, 1]
[1]
[symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), )]
[symbol, ., scope]
[symbol]
[qName, ., substring, (, 0, ,, rootIndex, )]
[qName]
[0]
[rootIndex]
[root, ==, null]
[root]
[null]
[getReferences, (, symbol, )]
[symbol]
[ref, ., getNode, (, )]
[ref]
[!, currentNode, ., isQualifiedName, (, )]
[currentNode, ., isQualifiedName, (, )]
[currentNode]
[currentNode, ., isGetProp, (, )]
[currentNode]
[currentNode]
[currentNode, ., getFirstChild, (, )]
[currentNode]
[currentNode, ., getQualifiedName, (, )]
[currentNode]
[name, !=, null]
[name]
[null]
[isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, )]
[name]
[currentNode]
[root, ., scope]
[root]
[namespace, ==, null]
[namespace]
[null]
[namespace]
[root, ., scope, ., getQualifiedSlot, (, name, )]
[root, ., scope]
[root]
[name]
[namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, )]
[namespace, ==, null]
[namespace]
[null]
[root, ., scope, ., isGlobalScope, (, )]
[root, ., scope]
[root]
[namespace]
[declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, )]
[name]
[registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[registry]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[true]
[root, ., scope]
[root]
[currentNode]
[null]
[namespace, !=, null]
[namespace]
[null]
[namespace, ., defineReferenceAt, (, currentNode, )]
[namespace]
[currentNode]
[Lists, ., newArrayList, (, )]
[Lists]
[getAllSymbols, (, )]
[needsPropertyScope, (, sym, )]
[sym]
[types, ., add, (, sym, )]
[types]
[sym]
[Collections, ., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), )]
[Collections]
[types]
[Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), )]
[Collections]
[getNaturalSymbolOrdering, (, )]
[types]
[createPropertyScopeFor, (, s, )]
[s]
[pruneOrphanedNames, (, )]
[ObjectType, ., cast, (, sym, ., getType, (, ), )]
[ObjectType]
[sym, ., getType, (, )]
[sym]
[type, ==, null]
[type]
[null]
[false]
[type, ., getReferenceName, (, ), ==, null]
[type, ., getReferenceName, (, )]
[type]
[null]
[true]
[sym, ., getName, (, ), ., equals, (, type, ., getReferenceName, (, ), )]
[sym, ., getName, (, )]
[sym]
[type, ., getReferenceName, (, )]
[type]
[true]
[type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), )]
[type, ., isEnumType, (, )]
[type]
[sym, ., getName, (, ), ., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), )]
[sym, ., getName, (, )]
[sym]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, )]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, )]
[type, ., toMaybeEnumType, (, )]
[type]
[true]
[false]
[getAllSymbolsSorted, (, )]
[s, ., isProperty, (, )]
[s]
[s, ., getName, (, )]
[s]
[-, 1]
[1]
[-, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), )]
[-, 1]
[1]
[(, dot, =, currentName, ., lastIndexOf, (, '.', ), )]
[dot]
[currentName, ., lastIndexOf, (, '.', )]
[currentName]
['.']
[currentName]
[currentName, ., substring, (, 0, ,, dot, )]
[currentName]
[0]
[dot]
[s, ., scope, ., getQualifiedSlot, (, currentName, )]
[s, ., scope]
[s]
[currentName]
[owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), )]
[owner, !=, null, &&, owner, ., getType, (, ), !=, null]
[owner, !=, null]
[owner]
[null]
[owner, ., getType, (, ), !=, null]
[owner, ., getType, (, )]
[owner]
[null]
[(, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), )]
[owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, )]
[owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, )]
[owner, ., getType, (, ), ., isNominalConstructor, (, )]
[owner, ., getType, (, )]
[owner]
[owner, ., getType, (, ), ., isFunctionPrototypeType, (, )]
[owner, ., getType, (, )]
[owner]
[owner, ., getType, (, ), ., isEnumType, (, )]
[owner, ., getType, (, )]
[owner]
[removeSymbol, (, s, )]
[s]
[(, new, PropertyRefCollector, (, compiler, ), ), ., process, (, externs, ,, root, )]
[(, new, PropertyRefCollector, (, compiler, ), )]
[new, PropertyRefCollector, (, compiler, )]
[compiler]
[externs]
[root]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[getAllSymbolsSorted, (, )]
[sym, ., getJSDocInfo, (, )]
[sym]
[info, ==, null]
[info]
[null]
[info, ., getMarkers, (, )]
[info]
[marker, ., getNameNode, (, )]
[marker]
[pos, ==, null]
[pos]
[null]
[pos, ., getItem, (, )]
[pos]
[paramNode, ., getString, (, )]
[paramNode]
[getParameterInFunction, (, sym, ,, name, )]
[sym]
[name]
[param, ==, null]
[param]
[null]
[marker, ., getType, (, )]
[marker]
[null]
[typePos, !=, null]
[typePos]
[null]
[type]
[typePos, ., getItem, (, ), ., getJSType, (, )]
[typePos, ., getItem, (, )]
[typePos]
[sym, ., docScope, ==, null]
[sym, ., docScope]
[sym]
[null]
[sym, ., docScope]
[sym]
[new, SymbolScope, (, null, ,, null, ,, null, ,, sym, )]
[null]
[null]
[null]
[sym]
[isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, )]
[name]
[paramNode]
[sym, ., docScope]
[sym]
[existingSymbol, ==, null]
[existingSymbol]
[null]
[declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, )]
[name]
[type]
[type, ==, null]
[type]
[null]
[sym, ., docScope]
[sym]
[paramNode]
[null]
[param, ., defineReferenceAt, (, paramNode, )]
[param]
[paramNode]
[s, ., propertyScope, !=, null]
[s, ., propertyScope]
[s]
[null]
[null]
[s, ., getType, (, ), ==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, )]
[s, ., getType, (, ), ==, null]
[s, ., getType, (, )]
[s]
[null]
[null]
[s, ., getType, (, ), ., toObjectType, (, )]
[s, ., getType, (, )]
[s]
[type, ==, null]
[type]
[null]
[type, ., getParentScope, (, )]
[type]
[proto, !=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null]
[proto, !=, null, &&, proto, !=, type]
[proto, !=, null]
[proto]
[null]
[proto, !=, type]
[proto]
[type]
[proto, ., getConstructor, (, ), !=, null]
[proto, ., getConstructor, (, )]
[proto]
[null]
[getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), )]
[proto, ., getConstructor, (, )]
[proto]
[parentSymbol, !=, null]
[parentSymbol]
[null]
[createPropertyScopeFor, (, parentSymbol, )]
[parentSymbol]
[parentPropertyScope]
[parentSymbol, ., getPropertyScope, (, )]
[parentSymbol]
[type]
[type, ., getOwnPropertyNames, (, )]
[type]
[instanceType, ., isFunctionPrototypeType, (, )]
[instanceType]
[instanceType]
[instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, )]
[instanceType, ., getOwnerFunction, (, )]
[instanceType]
[Sets, ., newHashSet, (, propNames, )]
[Sets]
[propNames]
[Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), )]
[Iterables]
[set]
[instanceType, ., getOwnPropertyNames, (, )]
[instanceType]
[propNames]
[set]
[s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, ), )]
[s]
[new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, )]
[null]
[parentPropertyScope]
[type]
[s]
[propNames]
[instanceType, ., getSlot, (, propName, )]
[instanceType]
[propName]
[newProp, ., getDeclaration, (, ), ==, null]
[newProp, ., getDeclaration, (, )]
[newProp]
[null]
[symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, )]
[symbols]
[newProp, ., getDeclaration, (, ), ., getNode, (, )]
[newProp, ., getDeclaration, (, )]
[newProp]
[s, ., getName, (, ), +, ".", +, propName]
[s, ., getName, (, ), +, "."]
[s, ., getName, (, )]
[s]
["."]
[propName]
[oldProp, !=, null]
[oldProp]
[null]
[removeSymbol, (, oldProp, )]
[oldProp]
[symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null]
[symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), )]
[symbols]
[newProp, ., getDeclaration, (, ), ., getNode, (, )]
[newProp, ., getDeclaration, (, )]
[newProp]
[newProp, ., getName, (, )]
[newProp]
[null]
[logger, ., warning, (, "Found duplicate symbol ", +, newProp, )]
[logger]
["Found duplicate symbol ", +, newProp]
["Found duplicate symbol "]
[newProp]
[copySymbolTo, (, newProp, ,, s, ., propertyScope, )]
[newProp]
[s, ., propertyScope]
[s]
[oldProp, !=, null]
[oldProp]
[null]
[newSym, ., getJSDocInfo, (, ), ==, null]
[newSym, ., getJSDocInfo, (, )]
[newSym]
[null]
[newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), )]
[newSym]
[oldProp, ., getJSDocInfo, (, )]
[oldProp]
[newSym, ., setPropertyScope, (, oldProp, ., propertyScope, )]
[newSym]
[oldProp, ., propertyScope]
[oldProp]
[oldProp, ., references, ., values, (, )]
[oldProp, ., references]
[oldProp]
[newSym, ., defineReferenceAt, (, ref, ., getNode, (, ), )]
[newSym]
[ref, ., getNode, (, )]
[ref]
[(, new, ThisRefCollector, (, compiler, ), ), ., process, (, externs, ,, root, )]
[(, new, ThisRefCollector, (, compiler, ), )]
[new, ThisRefCollector, (, compiler, )]
[compiler]
[externs]
[root]
[otherScope, ., getRootNode, (, )]
[otherScope]
[scopes, ., get, (, otherScopeRoot, )]
[scopes]
[otherScopeRoot]
[myScope, ==, null]
[myScope]
[null]
[otherScope, ., getParentScope, (, )]
[otherScope]
[otherScopeParent, ==, null]
[otherScopeParent]
[null]
[Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", )]
[Preconditions]
[globalScope, ==, null]
[globalScope]
[null]
["Global scopes found at different roots"]
[myScope]
[new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, )]
[otherScopeRoot]
[otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, )]
[otherScopeParent, ==, null]
[otherScopeParent]
[null]
[null]
[createScopeFrom, (, otherScopeParent, )]
[otherScopeParent]
[otherScope, ., getTypeOfThis, (, )]
[otherScope]
[null]
[scopes, ., put, (, otherScopeRoot, ,, myScope, )]
[scopes]
[otherScopeRoot]
[myScope]
[myScope, ., isGlobalScope, (, )]
[myScope]
[globalScope]
[myScope]
[myScope]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[null]
[null]
[null]
[null]
[name]
[type]
[inferred]
[this, ., scope]
[this]
[scope]
[declaration]
[JSType, ., toMaybeFunctionType, (, getType, (, ), )]
[JSType]
[getType, (, )]
[references, ., get, (, n, )]
[references]
[n]
[result, ==, null]
[result]
[null]
[result]
[new, Reference, (, this, ,, n, )]
[this]
[n]
[references, ., put, (, n, ,, result, )]
[references]
[n]
[result]
[result]
[Preconditions, ., checkState, (, this, ., declaration, ==, null, )]
[Preconditions]
[this, ., declaration, ==, null]
[this, ., declaration]
[this]
[null]
[this, ., declaration]
[this]
[ref]
[scope, ., isGlobalScope, (, )]
[scope]
[getDeclarationNode, (, )]
[n, ==, null, ?, false, :, n, ., isFromExterns, (, )]
[n, ==, null]
[n]
[null]
[false]
[n, ., isFromExterns, (, )]
[n]
[declaration, ==, null, ?, null, :, declaration, ., getNode, (, )]
[declaration, ==, null]
[declaration]
[null]
[null]
[declaration, ., getNode, (, )]
[declaration]
[getDeclarationNode, (, )]
[n, ==, null, ?, null, :, n, ., getSourceFileName, (, )]
[n, ==, null]
[n]
[null]
[null]
[n, ., getSourceFileName, (, )]
[n]
[propertyScope]
[this, ., propertyScope]
[this]
[scope]
[scope, !=, null]
[scope]
[null]
[this, ., propertyScope, ., setSymbolForScope, (, this, )]
[this, ., propertyScope]
[this]
[this]
[docInfo]
[this, ., docInfo]
[this]
[info]
[scope, ., isPropertyScope, (, )]
[scope]
[scope, ., isLexicalScope, (, )]
[scope]
[scope, ., isDocScope, (, )]
[scope]
[getDeclarationNode, (, )]
[n, ==, null, ?, -, 1, :, n, ., getLineno, (, )]
[n, ==, null]
[n]
[null]
[-, 1]
[1]
[n, ., getLineno, (, )]
[n]
[getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +, lineNo]
[getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":"]
[getName, (, ), +, "@", +, getSourceFileName, (, )]
[getName, (, ), +, "@"]
[getName, (, )]
["@"]
[getSourceFileName, (, )]
[":"]
[lineNo]
[symbol]
[node]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[0]
[this, ., rootNode]
[this]
[rootNode]
[this, ., parent]
[this]
[parent]
[this, ., typeOfThis]
[this]
[typeOfThis]
[this, ., scopeDepth]
[this]
[parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, )]
[parent, ==, null]
[parent]
[null]
[0]
[(, parent, ., getScopeDepth, (, ), +, 1, )]
[parent, ., getScopeDepth, (, ), +, 1]
[parent, ., getScopeDepth, (, )]
[parent]
[1]
[this, ., mySymbol]
[this]
[mySymbol]
[mySymbol]
[this, ., mySymbol]
[this]
[sym]
[Iterables, ., indexOf, (, ownSymbols, ., values, (, ), ,, Predicates, ., equalTo, (, sym, ), )]
[Iterables]
[ownSymbols, ., values, (, )]
[ownSymbols]
[Predicates, ., equalTo, (, sym, )]
[Predicates]
[sym]
[rootNode]
[parent]
[getSlot, (, name, )]
[name]
[fullyNamedSym, !=, null]
[fullyNamedSym]
[null]
[fullyNamedSym]
[name, ., lastIndexOf, (, ".", )]
[name]
["."]
[dot, !=, -, 1]
[dot]
[-, 1]
[1]
[getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), )]
[name, ., substring, (, 0, ,, dot, )]
[name]
[0]
[dot]
[owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null]
[owner, !=, null]
[owner]
[null]
[owner, ., getPropertyScope, (, ), !=, null]
[owner, ., getPropertyScope, (, )]
[owner]
[null]
[owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), )]
[owner, ., getPropertyScope, (, )]
[owner]
[name, ., substring, (, dot, +, 1, )]
[name]
[dot, +, 1]
[dot]
[1]
[null]
[getOwnSlot, (, name, )]
[name]
[own, !=, null]
[own]
[null]
[own]
[parent, ==, null, ?, null, :, parent, ., getSlot, (, name, )]
[parent, ==, null]
[parent]
[null]
[null]
[parent, ., getSlot, (, name, )]
[parent]
[name]
[ancestor, !=, null]
[ancestor]
[null]
[ancestor]
[null]
[ownSymbols, ., get, (, name, )]
[ownSymbols]
[name]
[typeOfThis]
[getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null]
[getParentScope, (, ), ==, null]
[getParentScope, (, )]
[null]
[getRootNode, (, ), !=, null]
[getRootNode, (, )]
[null]
[getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this]
[getRootNode, (, ), ==, null, &&, mySymbol, !=, null]
[getRootNode, (, ), ==, null]
[getRootNode, (, )]
[null]
[mySymbol, !=, null]
[mySymbol]
[null]
[mySymbol, ., docScope, ==, this]
[mySymbol, ., docScope]
[mySymbol]
[this]
[getRootNode, (, ), ==, null, &&, !, isDocScope, (, )]
[getRootNode, (, ), ==, null]
[getRootNode, (, )]
[null]
[!, isDocScope, (, )]
[isDocScope, (, )]
[getRootNode, (, ), !=, null]
[getRootNode, (, )]
[null]
[scopeDepth]
[getRootNode, (, )]
[n, !=, null]
[n]
[null]
["Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, )]
["Scope@", +, n, ., getSourceFileName, (, ), +, ":"]
["Scope@", +, n, ., getSourceFileName, (, )]
["Scope@"]
[n, ., getSourceFileName, (, )]
[n]
[":"]
[n, ., getLineno, (, )]
[n]
["PropertyScope@", +, getSymbolForScope, (, )]
["PropertyScope@"]
[getSymbolForScope, (, )]
[this, ., compiler]
[this]
[compiler]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[this]
[ownerSymbol, !=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=, null]
[ownerSymbol, !=, null]
[ownerSymbol]
[null]
[ownerSymbol, ., getPropertyScope, (, ), !=, null]
[ownerSymbol, ., getPropertyScope, (, )]
[ownerSymbol]
[null]
[ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, )]
[ownerSymbol, ., getPropertyScope, (, )]
[ownerSymbol]
[propName]
[prop, !=, null]
[prop]
[null]
[prop, ., defineReferenceAt, (, n, )]
[prop]
[n]
[true]
[false]
[name, !=, null]
[name]
[null]
[getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, )]
[getEnclosingScope, (, n, )]
[n]
[name]
[lexicalSym, !=, null]
[lexicalSym]
[null]
[lexicalSym, ., defineReferenceAt, (, n, )]
[lexicalSym]
[n]
[true]
[false]
[name, !=, null]
[name]
[null]
[getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, )]
[getEnclosingScope, (, n, )]
[n]
[name]
[lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n]
[lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, )]
[lexicalSym, !=, null]
[lexicalSym]
[null]
[lexicalSym, ., isLexicalVariable, (, )]
[lexicalSym]
[lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n]
[lexicalSym, ., getDeclaration, (, ), ., getNode, (, )]
[lexicalSym, ., getDeclaration, (, )]
[lexicalSym]
[n]
[removeSymbol, (, lexicalSym, )]
[lexicalSym]
[owner, ., isGlobalThisType, (, )]
[owner]
[globalScope, ., getSlot, (, propName, )]
[globalScope]
[propName]
[sym, !=, null]
[sym]
[null]
[sym, ., defineReferenceAt, (, n, )]
[sym]
[n]
[true]
[owner, ., isNominalConstructor, (, )]
[owner]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), )]
[n]
[propName]
[getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), )]
[owner, ., toMaybeFunctionType, (, )]
[owner]
[owner, ., isEnumType, (, )]
[owner]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), ), )]
[n]
[propName]
[getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), )]
[owner, ., toMaybeEnumType, (, )]
[owner]
[false]
[getAllSymbolsForType, (, owner, )]
[owner]
[maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), )]
[n]
[propName]
[getSymbolForInstancesOf, (, ctor, )]
[ctor]
[defined]
[true]
[defined]
[false]
[n, ., isGetProp, (, )]
[n]
[n, ., getFirstChild, (, ), ., getJSType, (, )]
[n, ., getFirstChild, (, )]
[n]
[owner, !=, null]
[owner]
[null]
[maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner, )]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[owner]
[defined]
[tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, )]
[n, ., getQualifiedName, (, )]
[n]
[n]
[tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, )]
[n, ., getQualifiedName, (, )]
[n]
[n]
[n, ., isStringKey, (, )]
[n]
[parent, ., getJSType, (, )]
[parent]
[owner, !=, null]
[owner]
[null]
[maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, )]
[n]
[n, ., getString, (, )]
[n]
[owner]
[defined]
[tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, )]
[NodeUtil, ., getBestLValueName, (, n, )]
[NodeUtil]
[n]
[n]
[tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, )]
[NodeUtil, ., getBestLValueName, (, n, )]
[NodeUtil]
[n]
[n]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., compiler]
[this]
[compiler]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[this]
[null]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, )]
[t, ., getScopeRoot, (, ), ., getLastChild, (, )]
[t, ., getScopeRoot, (, )]
[t]
[firstInputRoot, !=, null]
[firstInputRoot]
[null]
[symbol]
[addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, )]
[GLOBAL_THIS]
[registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, )]
[registry]
[JSTypeNative, ., GLOBAL_THIS]
[JSTypeNative]
[false]
[globalScope]
[firstInputRoot]
[symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), )]
[symbol]
[new, Reference, (, symbol, ,, firstInputRoot, )]
[symbol]
[firstInputRoot]
[scopes, ., get, (, t, ., getScopeRoot, (, ), )]
[scopes]
[t, ., getScopeRoot, (, )]
[t]
[Preconditions, ., checkNotNull, (, scope, )]
[Preconditions]
[scope]
[getSymbolForScope, (, scope, )]
[scope]
[scopeSymbol, !=, null]
[scopeSymbol]
[null]
[scopeSymbol, ., getPropertyScope, (, )]
[scopeSymbol]
[propScope, !=, null]
[propScope]
[null]
[symbol]
[propScope, ., getOwnSlot, (, "this", )]
[propScope]
["this"]
[symbol, ==, null]
[symbol]
[null]
[t, ., getScopeRoot, (, ), ., getJSType, (, )]
[t, ., getScopeRoot, (, )]
[t]
[rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, )]
[rootType, ==, null]
[rootType]
[null]
[null]
[rootType, ., toMaybeFunctionType, (, )]
[rootType]
[fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, )]
[fnType, ==, null]
[fnType]
[null]
[null]
[fnType, ., getTypeOfThis, (, )]
[fnType]
[symbol]
[addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), )]
["this"]
[type]
[false]
[scope]
[t, ., getScopeRoot, (, )]
[t]
[thisStack, ., add, (, symbol, )]
[thisStack]
[symbol]
[thisStack, ., remove, (, thisStack, ., size, (, ), -, 1, )]
[thisStack]
[thisStack, ., size, (, ), -, 1]
[thisStack, ., size, (, )]
[thisStack]
[1]
[!, n, ., isThis, (, )]
[n, ., isThis, (, )]
[n]
[thisStack, ., get, (, thisStack, ., size, (, ), -, 1, )]
[thisStack]
[thisStack, ., size, (, ), -, 1]
[thisStack, ., size, (, )]
[thisStack]
[1]
[symbol, !=, null]
[symbol]
[null]
[symbol, ., defineReferenceAt, (, n, )]
[symbol]
[n]
[symbol, ., getDeclaration, (, ), ==, null]
[symbol, ., getDeclaration, (, )]
[symbol]
[null]
[symbol, ., setDeclaration, (, ref, )]
[symbol]
[ref]
[this, ., typeRegistry]
[this]
[registry]
[n, ., getJSDocInfo, (, ), !=, null]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[n, ., getJSDocInfo, (, )]
[n]
[docInfos, ., add, (, info, )]
[docInfos]
[info]
[info, ., getTypeNodes, (, )]
[info]
[scopes, ., get, (, t, ., getScopeRoot, (, ), )]
[scopes]
[t, ., getScopeRoot, (, )]
[t]
[visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,, typeAst, )]
[scope, ==, null, ?, globalScope, :, scope]
[scope, ==, null]
[scope]
[null]
[globalScope]
[scope]
[typeAst]
[n, ., isString, (, )]
[n]
[scope, ., getSlot, (, n, ., getString, (, ), )]
[scope]
[n, ., getString, (, )]
[n]
[symbol, ==, null]
[symbol]
[null]
[typeRegistry, ., getType, (, n, ., getString, (, ), )]
[typeRegistry]
[n, ., getString, (, )]
[n]
[type, ==, null, ?, null, :, type, ., autoboxesTo, (, )]
[type, ==, null]
[type]
[null]
[null]
[type, ., autoboxesTo, (, )]
[type]
[symbol]
[autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, )]
[autobox, ==, null]
[autobox]
[null]
[null]
[getSymbolForTypeHelper, (, autobox, ,, true, )]
[autobox]
[true]
[symbol, !=, null]
[symbol]
[null]
[symbol, ., defineReferenceAt, (, n, )]
[symbol]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[visitTypeNode, (, scope, ,, child, )]
[scope]
[child]
[Ordering, ., natural, (, ), ., nullsFirst, (, )]
[Ordering, ., natural, (, )]
[Ordering]
[new, Ordering, <, Node, >, (, ), {, @, Override, public, int, compare, (, Node, a, ,, Node, b, ), {, int, result, =, SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, ), ;, }, }]
[SOURCE_NAME_ORDERING, ., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), )]
[SOURCE_NAME_ORDERING]
[a, ., getSourceFileName, (, )]
[a]
[b, ., getSourceFileName, (, )]
[b]
[result, !=, 0]
[result]
[0]
[result]
[a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, )]
[a, ., getSourcePosition, (, )]
[a]
[b, ., getSourcePosition, (, )]
[b]
[new, Ordering, <, SymbolScope, >, (, ), {, @, Override, public, int, compare, (, SymbolScope, a, ,, SymbolScope, b, ), {, Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, ), ), ;, }, }]
[Preconditions, ., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", )]
[Preconditions]
[a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, )]
[a, ., isLexicalScope, (, )]
[a]
[b, ., isLexicalScope, (, )]
[b]
["We can only sort lexical scopes"]
[NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, ), )]
[NODE_ORDERING]
[a, ., getRootNode, (, )]
[a]
[b, ., getRootNode, (, )]
[b]
[new, Ordering, <, Symbol, >, (, ), {, @, Override, public, int, compare, (, Symbol, a, ,, Symbol, b, ), {, SymbolScope, scopeA, =, getScope, (, a, ), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (, b, ., getName, (, ), ), ;, }, }]
[getScope, (, a, )]
[a]
[getScope, (, b, )]
[b]
[getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, )]
[getLexicalScopeDepth, (, scopeA, )]
[scopeA]
[getLexicalScopeDepth, (, scopeB, )]
[scopeB]
[result, !=, 0]
[result]
[0]
[result]
[a, ., getName, (, ), ., compareTo, (, b, ., getName, (, ), )]
[a, ., getName, (, )]
[a]
[b, ., getName, (, )]
[b]
[scope, ., isLexicalScope, (, ), ||, scope, ., isDocScope, (, )]
[scope, ., isLexicalScope, (, )]
[scope]
[scope, ., isDocScope, (, )]
[scope]
[scope, ., getScopeDepth, (, )]
[scope]
[Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), )]
[Preconditions]
[scope, ., isPropertyScope, (, )]
[scope]
[scope, ., getSymbolForScope, (, )]
[scope]
[Preconditions, ., checkNotNull, (, sym, )]
[Preconditions]
[sym]
[getLexicalScopeDepth, (, getScope, (, sym, ), ), +, 1]
[getLexicalScopeDepth, (, getScope, (, sym, ), )]
[getScope, (, sym, )]
[sym]
[1]
