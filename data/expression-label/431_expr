[DiagnosticType, ., error, (, "JSC_UNDEFINED_VARIABLE", ,, "variable {0} is undeclared", )]
[DiagnosticType]
["JSC_UNDEFINED_VARIABLE"]
["variable {0} is undeclared"]
[DiagnosticType, ., error, (, "JSC_VIOLATED_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}", )]
[DiagnosticType]
["JSC_VIOLATED_MODULE_DEPENDENCY"]
["module {0} cannot reference {2}, defined in ", +, "module {1}, since {1} loads after {0}"]
["module {0} cannot reference {2}, defined in "]
["module {1}, since {1} loads after {0}"]
[DiagnosticType, ., warning, (, "JSC_MISSING_MODULE_DEPENDENCY", ,, "missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}", )]
[DiagnosticType]
["JSC_MISSING_MODULE_DEPENDENCY"]
["missing module dependency; module {0} should depend ", +, "on module {1} because it references {2}"]
["missing module dependency; module {0} should depend "]
["on module {1} because it references {2}"]
[DiagnosticType, ., disabled, (, "JSC_STRICT_MODULE_DEPENDENCY", ,, "module {0} cannot reference {2}, defined in ", +, "module {1}", )]
[DiagnosticType]
["JSC_STRICT_MODULE_DEPENDENCY"]
["module {0} cannot reference {2}, defined in ", +, "module {1}"]
["module {0} cannot reference {2}, defined in "]
["module {1}"]
[DiagnosticType, ., warning, (, "JSC_NAME_REFERENCE_IN_EXTERNS", ,, "accessing name {0} in externs has no effect", )]
[DiagnosticType]
["JSC_NAME_REFERENCE_IN_EXTERNS"]
["accessing name {0} in externs has no effect"]
[DiagnosticType, ., warning, (, "JSC_UNDEFINED_EXTERN_VAR_ERROR", ,, "name {0} is not undefined in the externs.", )]
[DiagnosticType]
["JSC_UNDEFINED_EXTERN_VAR_ERROR"]
["name {0} is not undefined in the externs."]
[null]
[Sets, ., newHashSet, (, )]
[Sets]
[compiler]
[false]
[this, ., compiler]
[this]
[compiler]
[this, ., strictExternCheck]
[this]
[compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), ), ==, CheckLevel, ., ERROR]
[compiler, ., getErrorLevel, (, JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, ), )]
[compiler]
[JSError, ., make, (, "", ,, 0, ,, 0, ,, UNDEFINED_EXTERN_VAR_ERROR, )]
[JSError]
[""]
[0]
[0]
[UNDEFINED_EXTERN_VAR_ERROR]
[CheckLevel, ., ERROR]
[CheckLevel]
[this, ., sanityCheck]
[this]
[sanityCheck]
[!, sanityCheck]
[sanityCheck]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, NameRefInExternsCheck, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, NameRefInExternsCheck, (, )]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[this]
[varsToDeclareInExterns]
[createSynthesizedExternVar, (, varName, )]
[varName]
[Preconditions, ., checkState, (, scriptRoot, ., isScript, (, ), )]
[Preconditions]
[scriptRoot, ., isScript, (, )]
[scriptRoot]
[new, NodeTraversal, (, compiler, ,, this, )]
[compiler]
[this]
[t, ., traverseWithScope, (, scriptRoot, ,, SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, ), )]
[t]
[scriptRoot]
[SyntacticScopeCreator, ., generateUntypedTopScope, (, compiler, )]
[SyntacticScopeCreator]
[compiler]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[varName, ., isEmpty, (, )]
[varName]
[Preconditions, ., checkState, (, parent, ., isFunction, (, ), )]
[Preconditions]
[parent, ., isFunction, (, )]
[parent]
[Preconditions, ., checkState, (, NodeUtil, ., isFunctionExpression, (, parent, ), )]
[Preconditions]
[NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil]
[parent]
[(, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), ), &&, varsToDeclareInExterns, ., contains, (, varName, )]
[(, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), )]
[parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, )]
[parent, ., isVar, (, )]
[parent]
[NodeUtil, ., isFunctionDeclaration, (, parent, )]
[NodeUtil]
[parent]
[varsToDeclareInExterns, ., contains, (, varName, )]
[varsToDeclareInExterns]
[varName]
[createSynthesizedExternVar, (, varName, )]
[varName]
[n, ., addSuppression, (, "duplicate", )]
[n]
["duplicate"]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, varName, )]
[scope]
[varName]
[var, ==, null]
[var]
[null]
[NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil]
[parent]
[!, strictExternCheck, ||, !, t, ., getInput, (, ), ., isExtern, (, )]
[!, strictExternCheck]
[strictExternCheck]
[!, t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, ), ., isExtern, (, )]
[t, ., getInput, (, )]
[t]
[t, ., report, (, n, ,, UNDEFINED_VAR_ERROR, ,, varName, )]
[t]
[n]
[UNDEFINED_VAR_ERROR]
[varName]
[sanityCheck]
[new, IllegalStateException, (, "Unexpected variable ", +, varName, )]
["Unexpected variable ", +, varName]
["Unexpected variable "]
[varName]
[createSynthesizedExternVar, (, varName, )]
[varName]
[scope, ., getGlobalScope, (, ), ., declare, (, varName, ,, n, ,, null, ,, getSynthesizedExternsInput, (, ), )]
[scope, ., getGlobalScope, (, )]
[scope]
[varName]
[n]
[null]
[getSynthesizedExternsInput, (, )]
[t, ., getInput, (, )]
[t]
[var, ., input]
[var]
[currInput, ==, varInput, ||, currInput, ==, null, ||, varInput, ==, null]
[currInput, ==, varInput, ||, currInput, ==, null]
[currInput, ==, varInput]
[currInput]
[varInput]
[currInput, ==, null]
[currInput]
[null]
[varInput, ==, null]
[varInput]
[null]
[currInput, ., getModule, (, )]
[currInput]
[varInput, ., getModule, (, )]
[varInput]
[compiler, ., getModuleGraph, (, )]
[compiler]
[!, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null, &&, currModule, !=, null]
[!, sanityCheck, &&, varModule, !=, currModule, &&, varModule, !=, null]
[!, sanityCheck, &&, varModule, !=, currModule]
[!, sanityCheck]
[sanityCheck]
[varModule, !=, currModule]
[varModule]
[currModule]
[varModule, !=, null]
[varModule]
[null]
[currModule, !=, null]
[currModule]
[null]
[moduleGraph, ., dependsOn, (, currModule, ,, varModule, )]
[moduleGraph]
[currModule]
[varModule]
[scope, ., isGlobal, (, )]
[scope]
[moduleGraph, ., dependsOn, (, varModule, ,, currModule, )]
[moduleGraph]
[varModule]
[currModule]
[t, ., report, (, n, ,, VIOLATED_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, )]
[t]
[n]
[VIOLATED_MODULE_DEP_ERROR]
[currModule, ., getName, (, )]
[currModule]
[varModule, ., getName, (, )]
[varModule]
[varName]
[t, ., report, (, n, ,, MISSING_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, )]
[t]
[n]
[MISSING_MODULE_DEP_ERROR]
[currModule, ., getName, (, )]
[currModule]
[varModule, ., getName, (, )]
[varModule]
[varName]
[t, ., report, (, n, ,, STRICT_MODULE_DEP_ERROR, ,, currModule, ., getName, (, ), ,, varModule, ., getName, (, ), ,, varName, )]
[t]
[n]
[STRICT_MODULE_DEP_ERROR]
[currModule, ., getName, (, )]
[currModule]
[varModule, ., getName, (, )]
[varModule]
[varName]
[IR, ., name, (, varName, )]
[IR]
[varName]
[compiler, ., getCodingConvention, (, ), ., isConstant, (, varName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[varName]
[nameNode, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[nameNode]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[getSynthesizedExternsRoot, (, ), ., addChildToBack, (, IR, ., var, (, nameNode, ), )]
[getSynthesizedExternsRoot, (, )]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[varsToDeclareInExterns, ., remove, (, varName, )]
[varsToDeclareInExterns]
[varName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., isName, (, )]
[n]
[parent, ., getType, (, )]
[parent]
[Token, ., VAR]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., PARAM_LIST]
[Token]
[Token, ., GETPROP]
[Token]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, n, ., getString, (, ), )]
[scope]
[n, ., getString, (, )]
[n]
[var, ==, null]
[var]
[null]
[t, ., report, (, n, ,, UNDEFINED_EXTERN_VAR_ERROR, ,, n, ., getString, (, ), )]
[t]
[n]
[UNDEFINED_EXTERN_VAR_ERROR]
[n, ., getString, (, )]
[n]
[varsToDeclareInExterns, ., add, (, n, ., getString, (, ), )]
[varsToDeclareInExterns]
[n, ., getString, (, )]
[n]
[t, ., report, (, n, ,, NAME_REFERENCE_IN_EXTERNS_ERROR, ,, n, ., getString, (, ), )]
[t]
[n]
[NAME_REFERENCE_IN_EXTERNS_ERROR]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, )]
[t]
[scope, ., getVar, (, n, ., getString, (, ), )]
[scope]
[n, ., getString, (, )]
[n]
[var, ==, null]
[var]
[null]
[varsToDeclareInExterns, ., add, (, n, ., getString, (, ), )]
[varsToDeclareInExterns]
[n, ., getString, (, )]
[n]
[compiler, ., getSynthesizedExternsInput, (, )]
[compiler]
[synthesizedExternsRoot, ==, null]
[synthesizedExternsRoot]
[null]
[getSynthesizedExternsInput, (, )]
[synthesizedExternsRoot]
[synthesizedExterns, ., getAstRoot, (, compiler, )]
[synthesizedExterns]
[compiler]
[synthesizedExternsRoot]
