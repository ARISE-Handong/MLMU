[new, ArrayList, <, Vector2D, >, (, )]
[0]
[i, <, samples]
[i]
[samples]
[i, ++]
[i]
[generator, ., nextVector, (, )]
[generator]
[new, Vector2D, (, vector, )]
[vector]
[points, ., add, (, point, )]
[points]
[point]
[points]
[normalize, (, points, )]
[points]
[new, ArrayList, <, Vector2D, >, (, )]
[points]
[FastMath, ., pow, (, p, ., getX, (, ), ,, 2, ), +, FastMath, ., pow, (, p, ., getY, (, ), ,, 2, )]
[FastMath, ., pow, (, p, ., getX, (, ), ,, 2, )]
[FastMath]
[p, ., getX, (, )]
[p]
[2]
[FastMath, ., pow, (, p, ., getY, (, ), ,, 2, )]
[FastMath]
[p, ., getY, (, )]
[p]
[2]
[criteria, <, 1.0]
[criteria]
[1.0]
[circlePoints, ., add, (, p, )]
[circlePoints]
[p]
[circlePoints]
[new, ArrayList, <, Vector2D, >, (, )]
[0]
[i, <, samples]
[i]
[samples]
[i, ++]
[i]
[generator, ., nextVector, (, )]
[generator]
[new, Vector2D, (, vector, )]
[vector]
[points, ., add, (, point, )]
[points]
[point]
[normalize, (, points, )]
[points]
[Double, ., MAX_VALUE]
[Double]
[Double, ., MIN_VALUE]
[Double]
[input]
[minX]
[FastMath, ., min, (, minX, ,, p, ., getX, (, ), )]
[FastMath]
[minX]
[p, ., getX, (, )]
[p]
[maxX]
[FastMath, ., max, (, maxX, ,, p, ., getX, (, ), )]
[FastMath]
[maxX]
[p, ., getX, (, )]
[p]
[FastMath, ., abs, (, minX, ), <, 0.1]
[FastMath, ., abs, (, minX, )]
[FastMath]
[minX]
[0.1]
[minX]
[minY]
[0.0]
[maxX]
[maxY]
[1.0]
[minX]
[minY]
[-, FastMath, ., sqrt, (, 3, )]
[FastMath, ., sqrt, (, 3, )]
[FastMath]
[3]
[maxX]
[maxY]
[FastMath, ., sqrt, (, 3, )]
[FastMath]
[3]
[maxX, -, minX]
[maxX]
[minX]
[maxY, -, minY]
[maxY]
[minY]
[new, ArrayList, <, Vector2D, >, (, )]
[input]
[p, ., toArray, (, )]
[p]
[arr, [, 0, ]]
[arr]
[0]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2]
[(, arr, [, 0, ], -, minX, ), /, rangeX]
[(, arr, [, 0, ], -, minX, )]
[arr, [, 0, ], -, minX]
[arr, [, 0, ]]
[arr]
[0]
[minX]
[rangeX]
[2]
[1]
[arr, [, 1, ]]
[arr]
[1]
[(, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1]
[(, arr, [, 1, ], -, minY, ), /, rangeY, *, 2]
[(, arr, [, 1, ], -, minY, ), /, rangeY]
[(, arr, [, 1, ], -, minY, )]
[arr, [, 1, ], -, minY]
[arr, [, 1, ]]
[arr]
[1]
[minY]
[rangeY]
[2]
[1]
[points, ., add, (, new, Vector2D, (, arr, ), )]
[points]
[new, Vector2D, (, arr, )]
[arr]
[points]
[@, SuppressWarnings, (, "serial", )]
["serial"]
[setTitle, (, "Commons-Math: Pseudo/Quasi-random examples", )]
["Commons-Math: Pseudo/Quasi-random examples"]
[setSize, (, 800, ,, 800, )]
[800]
[800]
[setLayout, (, new, GridBagLayout, (, ), )]
[new, GridBagLayout, (, )]
[new, int, [, ], {, 256, ,, 1000, ,, 2500, ,, 1000, }]
[{, 256, ,, 1000, ,, 2500, ,, 1000, }]
[256]
[1000]
[2500]
[1000]
[new, ArrayList, <, Pair, <, String, ,, RandomVectorGenerator, >, >, (, )]
[generators, ., add, (, new, Pair, <, String, ,, RandomVectorGenerator, >, (, "Uncorrelated\nUniform(JDK)", ,, new, UncorrelatedRandomVectorGenerator, (, 2, ,, new, UniformRandomGenerator, (, new, JDKRandomGenerator, (, ), ), ), ), )]
[generators]
[new, Pair, <, String, ,, RandomVectorGenerator, >, (, "Uncorrelated\nUniform(JDK)", ,, new, UncorrelatedRandomVectorGenerator, (, 2, ,, new, UniformRandomGenerator, (, new, JDKRandomGenerator, (, ), ), ), )]
["Uncorrelated\nUniform(JDK)"]
[new, UncorrelatedRandomVectorGenerator, (, 2, ,, new, UniformRandomGenerator, (, new, JDKRandomGenerator, (, ), ), )]
[2]
[new, UniformRandomGenerator, (, new, JDKRandomGenerator, (, ), )]
[new, JDKRandomGenerator, (, )]
[generators, ., add, (, new, Pair, <, String, ,, RandomVectorGenerator, >, (, "Independent\nRandom(MT)", ,, new, RandomVectorGenerator, (, ), {, RandomGenerator, [, ], rngs, =, new, RandomGenerator, [, ], {, new, MersenneTwister, (, 0, ), ,, new, MersenneTwister, (, 1, ), }, ;, public, double, [, ], nextVector, (, ), {, final, double, [, ], vector, =, new, double, [, 2, ], ;, vector, [, 0, ], =, rngs, [, 0, ], ., nextDouble, (, ), ;, vector, [, 1, ], =, rngs, [, 1, ], ., nextDouble, (, ), ;, return, vector, ;, }, }, ), )]
[generators]
[new, Pair, <, String, ,, RandomVectorGenerator, >, (, "Independent\nRandom(MT)", ,, new, RandomVectorGenerator, (, ), {, RandomGenerator, [, ], rngs, =, new, RandomGenerator, [, ], {, new, MersenneTwister, (, 0, ), ,, new, MersenneTwister, (, 1, ), }, ;, public, double, [, ], nextVector, (, ), {, final, double, [, ], vector, =, new, double, [, 2, ], ;, vector, [, 0, ], =, rngs, [, 0, ], ., nextDouble, (, ), ;, vector, [, 1, ], =, rngs, [, 1, ], ., nextDouble, (, ), ;, return, vector, ;, }, }, )]
["Independent\nRandom(MT)"]
[new, RandomVectorGenerator, (, ), {, RandomGenerator, [, ], rngs, =, new, RandomGenerator, [, ], {, new, MersenneTwister, (, 0, ), ,, new, MersenneTwister, (, 1, ), }, ;, public, double, [, ], nextVector, (, ), {, final, double, [, ], vector, =, new, double, [, 2, ], ;, vector, [, 0, ], =, rngs, [, 0, ], ., nextDouble, (, ), ;, vector, [, 1, ], =, rngs, [, 1, ], ., nextDouble, (, ), ;, return, vector, ;, }, }]
[new, RandomGenerator, [, ], {, new, MersenneTwister, (, 0, ), ,, new, MersenneTwister, (, 1, ), }]
[{, new, MersenneTwister, (, 0, ), ,, new, MersenneTwister, (, 1, ), }]
[new, MersenneTwister, (, 0, )]
[0]
[new, MersenneTwister, (, 1, )]
[1]
[new, double, [, 2, ]]
[2]
[vector, [, 0, ]]
[vector]
[0]
[rngs, [, 0, ], ., nextDouble, (, )]
[rngs, [, 0, ]]
[rngs]
[0]
[vector, [, 1, ]]
[vector]
[1]
[rngs, [, 1, ], ., nextDouble, (, )]
[rngs, [, 1, ]]
[rngs]
[1]
[vector]
[generators, ., add, (, new, Pair, <, String, ,, RandomVectorGenerator, >, (, "HaltonSequence", ,, new, HaltonSequenceGenerator, (, 2, ), ), )]
[generators]
[new, Pair, <, String, ,, RandomVectorGenerator, >, (, "HaltonSequence", ,, new, HaltonSequenceGenerator, (, 2, ), )]
["HaltonSequence"]
[new, HaltonSequenceGenerator, (, 2, )]
[2]
[generators, ., add, (, new, Pair, <, String, ,, RandomVectorGenerator, >, (, "SobolSequence", ,, new, SobolSequenceGenerator, (, 2, ), ), )]
[generators]
[new, Pair, <, String, ,, RandomVectorGenerator, >, (, "SobolSequence", ,, new, SobolSequenceGenerator, (, 2, ), )]
["SobolSequence"]
[new, SobolSequenceGenerator, (, 2, )]
[2]
[new, GridBagConstraints, (, )]
[c, ., fill]
[c]
[GridBagConstraints, ., VERTICAL]
[GridBagConstraints]
[c, ., gridx]
[c]
[1]
[c, ., gridy]
[c]
[0]
[c, ., insets]
[c]
[new, Insets, (, 2, ,, 2, ,, 2, ,, 2, )]
[2]
[2]
[2]
[2]
[generators]
[new, JTextArea, (, pair, ., getFirst, (, ), )]
[pair, ., getFirst, (, )]
[pair]
[text, ., setEditable, (, false, )]
[text]
[false]
[text, ., setOpaque, (, false, )]
[text]
[false]
[add, (, text, ,, c, )]
[text]
[c]
[c, ., gridx, ++]
[c, ., gridx]
[c]
[++, c, ., gridy]
[c, ., gridy]
[c]
[c, ., gridx]
[c]
[0]
[0]
[type, <, 4]
[type]
[4]
[type, ++]
[type]
[new, JLabel, (, "n=", +, String, ., valueOf, (, datasets, [, type, ], ), )]
["n=", +, String, ., valueOf, (, datasets, [, type, ], )]
["n="]
[String, ., valueOf, (, datasets, [, type, ], )]
[String]
[datasets, [, type, ]]
[datasets]
[type]
[text, ., setOpaque, (, false, )]
[text]
[false]
[add, (, text, ,, c, )]
[text]
[c]
[c, ., gridy, ++]
[c, ., gridy]
[c]
[c, ., gridy]
[c]
[saveY]
[0]
[type, <, 4]
[type]
[4]
[type, ++]
[type]
[c, ., gridx]
[c]
[1]
[generators]
[null]
[datasets, [, type, ]]
[datasets]
[type]
[type]
[0]
[points]
[makeRandom, (, samples, ,, pair, ., getValue, (, ), )]
[samples]
[pair, ., getValue, (, )]
[pair]
[1]
[points]
[makeRandom, (, samples, ,, pair, ., getValue, (, ), )]
[samples]
[pair, ., getValue, (, )]
[pair]
[2]
[points]
[makeRandom, (, samples, ,, pair, ., getValue, (, ), )]
[samples]
[pair, ., getValue, (, )]
[pair]
[3]
[points]
[makeCircle, (, samples, ,, pair, ., getValue, (, ), )]
[samples]
[pair, ., getValue, (, )]
[pair]
[add, (, new, Plot, (, points, ), ,, c, )]
[new, Plot, (, points, )]
[points]
[c]
[c, ., gridx, ++]
[c, ., gridx]
[c]
[c, ., gridy, ++]
[c, ., gridy]
[c]
[@, SuppressWarnings, (, "serial", )]
["serial"]
[10]
[this, ., points]
[this]
[points]
[super, ., paintComponent, (, g, )]
[super]
[g]
[(, Graphics2D, ), g]
[g]
[g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, )]
[g2]
[RenderingHints, ., KEY_ANTIALIASING]
[RenderingHints]
[RenderingHints, ., VALUE_ANTIALIAS_ON]
[RenderingHints]
[getWidth, (, )]
[getHeight, (, )]
[g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, )]
[g2]
[0]
[0]
[w]
[h]
[g2, ., setPaint, (, Color, ., black, )]
[g2]
[Color, ., black]
[Color]
[g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, )]
[g2]
[0]
[0]
[w, -, 1]
[w]
[1]
[h, -, 1]
[h]
[1]
[points]
[transform, (, point, ,, w, ,, h, )]
[point]
[w]
[h]
[p, ., toArray, (, )]
[p]
[g2, ., draw, (, new, Rectangle2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 2, ,, 2, ), )]
[g2]
[new, Rectangle2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 2, ,, 2, )]
[arr, [, 0, ], -, 1]
[arr, [, 0, ]]
[arr]
[0]
[1]
[arr, [, 1, ], -, 1]
[arr, [, 1, ]]
[arr]
[1]
[1]
[2]
[2]
[new, Dimension, (, 140, ,, 140, )]
[140]
[140]
[point, ., toArray, (, )]
[point]
[new, Vector2D, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }, )]
[new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[{, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, )]
[PAD]
[(, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, )]
[(, arr, [, 0, ], +, 1, ), /, 2.0]
[(, arr, [, 0, ], +, 1, )]
[arr, [, 0, ], +, 1]
[arr, [, 0, ]]
[arr]
[0]
[1]
[2.0]
[(, width, -, 2, *, PAD, )]
[width, -, 2, *, PAD]
[width]
[2, *, PAD]
[2]
[PAD]
[height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, )]
[height, -, PAD]
[height]
[PAD]
[(, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, )]
[(, arr, [, 1, ], +, 1, ), /, 2.0]
[(, arr, [, 1, ], +, 1, )]
[arr, [, 1, ], +, 1]
[arr, [, 1, ]]
[arr]
[1]
[1]
[2.0]
[(, height, -, 2, *, PAD, )]
[height, -, 2, *, PAD]
[height]
[2, *, PAD]
[2]
[PAD]
[ExampleUtils, ., showExampleFrame, (, new, Display, (, ), )]
[ExampleUtils]
[new, Display, (, )]
