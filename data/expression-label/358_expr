[DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", )]
[DiagnosticType]
["DEPS_PARSE_WARNING"]
["{0}\n{1}"]
[DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", )]
[DiagnosticType]
["DEPS_PARSE_ERROR"]
["{0}\n{1}"]
[false]
[1L]
[message]
[this, ., fatal]
[this]
[fatal]
[fatal]
[Pattern, ., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", )]
[Pattern]
["\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*"]
[STRING_LITERAL_PATTERN, ., matcher, (, "", )]
[STRING_LITERAL_PATTERN]
[""]
[this, ., errorManager]
[this]
[errorManager]
[this, ., shortcutMode]
[this]
[mode]
[parseSucceeded]
[this, ., filePath]
[this]
[filePath]
[parseSucceeded]
[true]
[new, BufferedReader, (, fileContents, )]
[fileContents]
[null]
[lineNum]
[0]
[false]
[null, !=, (, line, =, lineBuffer, ., readLine, (, ), )]
[null]
[(, line, =, lineBuffer, ., readLine, (, ), )]
[line]
[lineBuffer, ., readLine, (, )]
[lineBuffer]
[++, lineNum]
[lineNum]
[line]
[inMultilineComment]
[revisedLine, ., indexOf, (, "*/", )]
[revisedLine]
["*/"]
[endOfComment, !=, -, 1]
[endOfComment]
[-, 1]
[1]
[revisedLine]
[revisedLine, ., substring, (, endOfComment, +, 2, )]
[revisedLine]
[endOfComment, +, 2]
[endOfComment]
[2]
[inMultilineComment]
[false]
[revisedLine]
[""]
[!, inMultilineComment]
[inMultilineComment]
[true]
[revisedLine, ., indexOf, (, "//", )]
[revisedLine]
["//"]
[revisedLine, ., indexOf, (, "/*", )]
[revisedLine]
["/*"]
[startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, )]
[startOfLineComment, !=, -, 1]
[startOfLineComment]
[-, 1]
[1]
[(, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, )]
[startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment]
[startOfMultilineComment, ==, -, 1]
[startOfMultilineComment]
[-, 1]
[1]
[startOfLineComment, <, startOfMultilineComment]
[startOfLineComment]
[startOfMultilineComment]
[revisedLine]
[revisedLine, ., substring, (, 0, ,, startOfLineComment, )]
[revisedLine]
[0]
[startOfLineComment]
[startOfMultilineComment, !=, -, 1]
[startOfMultilineComment]
[-, 1]
[1]
[revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, )]
[revisedLine]
["*/"]
[startOfMultilineComment, +, 2]
[startOfMultilineComment]
[2]
[endOfMultilineComment, ==, -, 1]
[endOfMultilineComment]
[-, 1]
[1]
[revisedLine]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, )]
[revisedLine]
[0]
[startOfMultilineComment]
[inMultilineComment]
[true]
[revisedLine]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (, endOfMultilineComment, +, 2, )]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, )]
[revisedLine]
[0]
[startOfMultilineComment]
[revisedLine, ., substring, (, endOfMultilineComment, +, 2, )]
[revisedLine]
[endOfMultilineComment, +, 2]
[endOfMultilineComment]
[2]
[!, revisedLine, ., isEmpty, (, )]
[revisedLine, ., isEmpty, (, )]
[revisedLine]
[!, parseLine, (, revisedLine, ), &&, shortcutMode]
[!, parseLine, (, revisedLine, )]
[parseLine, (, revisedLine, )]
[revisedLine]
[shortcutMode]
[errorManager, ., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), )]
[errorManager]
[e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING]
[e, ., isFatal, (, )]
[e]
[CheckLevel, ., ERROR]
[CheckLevel]
[CheckLevel, ., WARNING]
[CheckLevel]
[JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, )]
[JSError]
[filePath]
[lineNum]
[0]
[e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING]
[e, ., isFatal, (, )]
[e]
[PARSE_ERROR]
[PARSE_WARNING]
[e, ., getMessage, (, )]
[e]
[line]
[parseSucceeded]
[parseSucceeded, &&, !, e, ., isFatal, (, )]
[parseSucceeded]
[!, e, ., isFatal, (, )]
[e, ., isFatal, (, )]
[e]
[errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), )]
[errorManager]
[CheckLevel, ., ERROR]
[CheckLevel]
[JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, )]
[JSError]
[filePath]
[0]
[0]
[PARSE_ERROR]
["Error reading file: ", +, filePath]
["Error reading file: "]
[filePath]
[parseSucceeded]
[false]
[valueMatcher, ., reset, (, jsStringLiteral, )]
[valueMatcher]
[jsStringLiteral]
[!, valueMatcher, ., matches, (, )]
[valueMatcher, ., matches, (, )]
[valueMatcher]
[new, ParseException, (, "Syntax error in JS String literal", ,, true, )]
["Syntax error in JS String literal"]
[true]
[valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, )]
[valueMatcher, ., group, (, 1, ), !=, null]
[valueMatcher, ., group, (, 1, )]
[valueMatcher]
[1]
[null]
[valueMatcher, ., group, (, 1, )]
[valueMatcher]
[1]
[valueMatcher, ., group, (, 2, )]
[valueMatcher]
[2]
[Lists, ., newArrayList, (, )]
[Lists]
[input, ., indexOf, (, '[', )]
[input]
['[']
[input, ., lastIndexOf, (, ']', )]
[input]
[']']
[(, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, )]
[(, indexStart, ==, -, 1, )]
[indexStart, ==, -, 1]
[indexStart]
[-, 1]
[1]
[(, indexEnd, ==, -, 1, )]
[indexEnd, ==, -, 1]
[indexEnd]
[-, 1]
[1]
[new, ParseException, (, "Syntax error when parsing JS array", ,, true, )]
["Syntax error when parsing JS array"]
[true]
[input, ., substring, (, indexStart, +, 1, ,, indexEnd, )]
[input]
[indexStart, +, 1]
[indexStart]
[1]
[indexEnd]
[!, innerValues, ., trim, (, ), ., isEmpty, (, )]
[innerValues, ., trim, (, ), ., isEmpty, (, )]
[innerValues, ., trim, (, )]
[innerValues]
[valueMatcher, ., reset, (, innerValues, )]
[valueMatcher]
[innerValues]
[!, valueMatcher, ., lookingAt, (, )]
[valueMatcher, ., lookingAt, (, )]
[valueMatcher]
[new, ParseException, (, "Syntax error in JS String literal", ,, true, )]
["Syntax error in JS String literal"]
[true]
[results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), )]
[results]
[valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, )]
[valueMatcher, ., group, (, 1, ), !=, null]
[valueMatcher, ., group, (, 1, )]
[valueMatcher]
[1]
[null]
[valueMatcher, ., group, (, 1, )]
[valueMatcher]
[1]
[valueMatcher, ., group, (, 2, )]
[valueMatcher]
[2]
[valueMatcher, ., hitEnd, (, )]
[valueMatcher]
[innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=, ',']
[innerValues, ., charAt, (, valueMatcher, ., end, (, ), )]
[innerValues]
[valueMatcher, ., end, (, )]
[valueMatcher]
[',']
[new, ParseException, (, "Missing comma in string array", ,, true, )]
["Missing comma in string array"]
[true]
[valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, ), )]
[valueMatcher]
[valueMatcher, ., end, (, ), +, 1]
[valueMatcher, ., end, (, )]
[valueMatcher]
[1]
[valueMatcher, ., regionEnd, (, )]
[valueMatcher]
[results]
