[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }]
[x]
[f, ., length, -, 1]
[f, ., length]
[f]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[r]
[f, [, i, ], ., value, (, r, )]
[f, [, i, ]]
[f]
[i]
[r]
[r]
[new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, t, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, }]
[t]
[f, ., length, -, 1]
[f, ., length]
[f]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[r]
[f, [, i, ], ., value, (, r, )]
[f, [, i, ]]
[f]
[i]
[r]
[r]
[t]
[f, ., length, -, 1]
[f, ., length]
[f]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[r]
[f, [, i, ], ., value, (, r, )]
[f, [, i, ]]
[f]
[i]
[r]
[r]
[new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }, ;, }, }]
[x]
[f, ., length, -, 1]
[f, ., length]
[f]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[r]
[f, [, i, ], ., value, (, r, )]
[f, [, i, ]]
[f]
[i]
[r]
[r]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, p, =, 1, ;, double, r, =, x, ;, for, (, int, i, =, f, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, p, *=, f, [, i, ], ., derivative, (, ), ., value, (, r, ), ;, r, =, f, [, i, ], ., value, (, r, ), ;, }, return, p, ;, }, }]
[1]
[x]
[f, ., length, -, 1]
[f, ., length]
[f]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[p]
[f, [, i, ], ., derivative, (, ), ., value, (, r, )]
[f, [, i, ], ., derivative, (, )]
[f, [, i, ]]
[f]
[i]
[r]
[r]
[f, [, i, ], ., value, (, r, )]
[f, [, i, ]]
[f]
[i]
[r]
[p]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }]
[f, [, 0, ], ., value, (, x, )]
[f, [, 0, ]]
[f]
[0]
[x]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, x, )]
[f, [, i, ]]
[f]
[i]
[x]
[r]
[new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., add, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }]
[f, [, 0, ], ., value, (, t, )]
[f, [, 0, ]]
[f]
[0]
[t]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, t, )]
[f, [, i, ]]
[f]
[i]
[t]
[r]
[f, [, 0, ], ., value, (, t, )]
[f, [, 0, ]]
[f]
[0]
[t]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[r, ., add, (, f, [, i, ], ., value, (, t, ), )]
[r]
[f, [, i, ], ., value, (, t, )]
[f, [, i, ]]
[f]
[i]
[t]
[r]
[new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }, }, ;, }, }]
[f, [, 0, ], ., value, (, x, )]
[f, [, 0, ]]
[f]
[0]
[x]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, x, )]
[f, [, i, ]]
[f]
[i]
[x]
[r]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, +=, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, }, return, r, ;, }, }]
[f, [, 0, ], ., derivative, (, ), ., value, (, x, )]
[f, [, 0, ], ., derivative, (, )]
[f, [, 0, ]]
[f]
[0]
[x]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., derivative, (, ), ., value, (, x, )]
[f, [, i, ], ., derivative, (, )]
[f, [, i, ]]
[f]
[i]
[x]
[r]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, }]
[f, [, 0, ], ., value, (, x, )]
[f, [, 0, ]]
[f]
[0]
[x]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, x, )]
[f, [, i, ]]
[f]
[i]
[x]
[r]
[new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, t, ), {, double, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, t, ), ;, }, return, r, ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, DerivativeStructure, r, =, f, [, 0, ], ., value, (, t, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, =, r, ., multiply, (, f, [, i, ], ., value, (, t, ), ), ;, }, return, r, ;, }, }]
[f, [, 0, ], ., value, (, t, )]
[f, [, 0, ]]
[f]
[0]
[t]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, t, )]
[f, [, i, ]]
[f]
[i]
[t]
[r]
[f, [, 0, ], ., value, (, t, )]
[f, [, 0, ]]
[f]
[0]
[t]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[r, ., multiply, (, f, [, i, ], ., value, (, t, ), )]
[r]
[f, [, i, ], ., value, (, t, )]
[f, [, i, ]]
[f]
[i]
[t]
[r]
[new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, r, =, f, [, 0, ], ., value, (, x, ), ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, i, ++, ), {, r, *=, f, [, i, ], ., value, (, x, ), ;, }, return, r, ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }, ;, }, }]
[f, [, 0, ], ., value, (, x, )]
[f, [, 0, ]]
[f]
[0]
[x]
[1]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[r]
[f, [, i, ], ., value, (, x, )]
[f, [, i, ]]
[f]
[i]
[x]
[r]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, double, prod, =, f, [, i, ], ., derivative, (, ), ., value, (, x, ), ;, for, (, int, j, =, 0, ;, j, <, f, ., length, ;, j, ++, ), {, if, (, i, !=, j, ), {, prod, *=, f, [, j, ], ., value, (, x, ), ;, }, }, sum, +=, prod, ;, }, return, sum, ;, }, }]
[0]
[0]
[i, <, f, ., length]
[i]
[f, ., length]
[f]
[i, ++]
[i]
[f, [, i, ], ., derivative, (, ), ., value, (, x, )]
[f, [, i, ], ., derivative, (, )]
[f, [, i, ]]
[f]
[i]
[x]
[0]
[j, <, f, ., length]
[j]
[f, ., length]
[f]
[j, ++]
[j]
[i, !=, j]
[i]
[j]
[prod]
[f, [, j, ], ., value, (, x, )]
[f, [, j, ]]
[f]
[j]
[x]
[sum]
[prod]
[sum]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, combiner, ., value, (, f, ., value, (, x, ), ,, g, ., value, (, x, ), ), ;, }, }]
[combiner, ., value, (, f, ., value, (, x, ), ,, g, ., value, (, x, ), )]
[combiner]
[f, ., value, (, x, )]
[f]
[x]
[g, ., value, (, x, )]
[g]
[x]
[new, MultivariateFunction, (, ), {, public, double, value, (, double, [, ], point, ), {, double, result, =, combiner, ., value, (, initialValue, ,, f, ., value, (, point, [, 0, ], ), ), ;, for, (, int, i, =, 1, ;, i, <, point, ., length, ;, i, ++, ), {, result, =, combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], ), ), ;, }, return, result, ;, }, }]
[combiner, ., value, (, initialValue, ,, f, ., value, (, point, [, 0, ], ), )]
[combiner]
[initialValue]
[f, ., value, (, point, [, 0, ], )]
[f]
[point, [, 0, ]]
[point]
[0]
[1]
[i, <, point, ., length]
[i]
[point, ., length]
[point]
[i, ++]
[i]
[result]
[combiner, ., value, (, result, ,, f, ., value, (, point, [, i, ], ), )]
[combiner]
[result]
[f, ., value, (, point, [, i, ], )]
[f]
[point, [, i, ]]
[point]
[i]
[result]
[collector, (, combiner, ,, new, Identity, (, ), ,, initialValue, )]
[combiner]
[new, Identity, (, )]
[initialValue]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (, fixed, ,, x, ), ;, }, }]
[f, ., value, (, fixed, ,, x, )]
[f]
[fixed]
[x]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), {, return, f, ., value, (, x, ,, fixed, ), ;, }, }]
[f, ., value, (, x, ,, fixed, )]
[f]
[x]
[fixed]
[n, <=, 0]
[n]
[0]
[new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, Integer, ., valueOf, (, n, ), )]
[LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES]
[LocalizedFormats]
[Integer, ., valueOf, (, n, )]
[Integer]
[n]
[min, >=, max]
[min]
[max]
[new, NumberIsTooLargeException, (, min, ,, max, ,, false, )]
[min]
[max]
[false]
[new, double, [, n, ]]
[n]
[(, max, -, min, ), /, n]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[s, [, i, ]]
[s]
[i]
[f, ., value, (, min, +, i, *, h, )]
[f]
[min, +, i, *, h]
[min]
[i, *, h]
[i]
[h]
[s]
[new, DifferentiableUnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (, x, ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, }]
[f, ., value, (, x, )]
[f]
[x]
[new, UnivariateFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, ), ;, }, }]
[f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), ), ., getPartialDerivative, (, 1, )]
[f, ., value, (, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, ), )]
[f]
[new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, )]
[1]
[1]
[0]
[x]
[1]
[new, UnivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, x, ), {, return, f, ., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, NumberIsTooLargeException, {, switch, (, t, ., getOrder, (, ), ), {, case, 0, :, return, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value, (, t, ., getValue, (, ), ), ), ;, case, 1, :, {, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, f, ., value, (, t, ., getValue, (, ), ), ;, final, double, fPrime, =, f, ., derivative, (, ), ., value, (, t, ., getValue, (, ), ), ;, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, derivatives, [, i, +, 1, ], =, fPrime, *, t, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, ), ;, }, default, :, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,, true, ), ;, }, }, }]
[f, ., value, (, x, )]
[f]
[x]
[t, ., getOrder, (, )]
[t]
[0]
[new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, 0, ,, f, ., value, (, t, ., getValue, (, ), ), )]
[t, ., getFreeParameters, (, )]
[t]
[0]
[f, ., value, (, t, ., getValue, (, ), )]
[f]
[t, ., getValue, (, )]
[t]
[1]
[t, ., getFreeParameters, (, )]
[t]
[new, double, [, parameters, +, 1, ]]
[parameters, +, 1]
[parameters]
[1]
[derivatives, [, 0, ]]
[derivatives]
[0]
[f, ., value, (, t, ., getValue, (, ), )]
[f]
[t, ., getValue, (, )]
[t]
[f, ., derivative, (, ), ., value, (, t, ., getValue, (, ), )]
[f, ., derivative, (, )]
[f]
[t, ., getValue, (, )]
[t]
[new, int, [, parameters, ]]
[parameters]
[0]
[i, <, parameters]
[i]
[parameters]
[++, i]
[i]
[orders, [, i, ]]
[orders]
[i]
[1]
[derivatives, [, i, +, 1, ]]
[derivatives]
[i, +, 1]
[i]
[1]
[fPrime, *, t, ., getPartialDerivative, (, orders, )]
[fPrime]
[t, ., getPartialDerivative, (, orders, )]
[t]
[orders]
[orders, [, i, ]]
[orders]
[i]
[0]
[new, DerivativeStructure, (, parameters, ,, 1, ,, derivatives, )]
[parameters]
[1]
[derivatives]
[new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, 1, ,, true, )]
[t, ., getOrder, (, )]
[t]
[1]
[true]
[new, DifferentiableMultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return, f, ., value, (, x, ), ;, }, public, MultivariateFunction, partialDerivative, (, final, int, k, ), {, return, new, MultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }, ;, }, public, MultivariateVectorFunction, gradient, (, ), {, return, new, MultivariateVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }, }, ;, }, }]
[f, ., value, (, x, )]
[f]
[x]
[new, MultivariateFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, i, ==, k, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], ), ;, }, else, {, dsX, [, i, ], =, new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], ), ;, }, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, return, y, ., getPartialDerivative, (, 1, ), ;, }, }]
[x, ., length]
[x]
[new, DerivativeStructure, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[i, ==, k]
[i]
[k]
[dsX, [, i, ]]
[dsX]
[i]
[new, DerivativeStructure, (, 1, ,, 1, ,, 0, ,, x, [, i, ], )]
[1]
[1]
[0]
[x, [, i, ]]
[x]
[i]
[dsX, [, i, ]]
[dsX]
[i]
[new, DerivativeStructure, (, 1, ,, 1, ,, x, [, i, ], )]
[1]
[1]
[x, [, i, ]]
[x]
[i]
[f, ., value, (, dsX, )]
[f]
[dsX]
[y, ., getPartialDerivative, (, 1, )]
[y]
[1]
[new, MultivariateVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, y, =, f, ., value, (, dsX, ), ;, final, double, [, ], gradient, =, new, double, [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, gradient, [, i, ], =, y, ., getPartialDerivative, (, orders, ), ;, orders, [, i, ], =, 0, ;, }, return, gradient, ;, }, }]
[x, ., length]
[x]
[new, DerivativeStructure, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[dsX, [, i, ]]
[dsX]
[i]
[new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], )]
[n]
[1]
[i]
[x, [, i, ]]
[x]
[i]
[f, ., value, (, dsX, )]
[f]
[dsX]
[new, double, [, n, ]]
[n]
[new, int, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[orders, [, i, ]]
[orders]
[i]
[1]
[gradient, [, i, ]]
[gradient]
[i]
[y, ., getPartialDerivative, (, orders, )]
[y]
[orders]
[orders, [, i, ]]
[orders]
[i]
[0]
[gradient]
[new, MultivariateDifferentiableFunction, (, ), {, public, double, value, (, final, double, [, ], x, ), {, return, f, ., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, value, =, f, ., value, (, point, ), ;, final, double, [, ], gradient, =, f, ., gradient, (, ), ., value, (, point, ), ;, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, value, ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, return, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, }]
[f, ., value, (, x, )]
[f]
[x]
[t, [, 0, ], ., getFreeParameters, (, )]
[t, [, 0, ]]
[t]
[0]
[t, [, 0, ], ., getOrder, (, )]
[t, [, 0, ]]
[t]
[0]
[t, ., length]
[t]
[order, >, 1]
[order]
[1]
[new, NumberIsTooLargeException, (, order, ,, 1, ,, true, )]
[order]
[1]
[true]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[t, [, i, ], ., getFreeParameters, (, ), !=, parameters]
[t, [, i, ], ., getFreeParameters, (, )]
[t, [, i, ]]
[t]
[i]
[parameters]
[new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, )]
[t, [, i, ], ., getFreeParameters, (, )]
[t, [, i, ]]
[t]
[i]
[parameters]
[t, [, i, ], ., getOrder, (, ), !=, order]
[t, [, i, ], ., getOrder, (, )]
[t, [, i, ]]
[t]
[i]
[order]
[new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, )]
[t, [, i, ], ., getOrder, (, )]
[t, [, i, ]]
[t]
[i]
[order]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[point, [, i, ]]
[point]
[i]
[t, [, i, ], ., getValue, (, )]
[t, [, i, ]]
[t]
[i]
[f, ., value, (, point, )]
[f]
[point]
[f, ., gradient, (, ), ., value, (, point, )]
[f, ., gradient, (, )]
[f]
[point]
[new, double, [, parameters, +, 1, ]]
[parameters, +, 1]
[parameters]
[1]
[derivatives, [, 0, ]]
[derivatives]
[0]
[value]
[new, int, [, parameters, ]]
[parameters]
[0]
[i, <, parameters]
[i]
[parameters]
[++, i]
[i]
[orders, [, i, ]]
[orders]
[i]
[1]
[0]
[j, <, n]
[j]
[n]
[++, j]
[j]
[derivatives, [, i, +, 1, ]]
[derivatives]
[i, +, 1]
[i]
[1]
[gradient, [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, )]
[gradient, [, j, ]]
[gradient]
[j]
[t, [, j, ], ., getPartialDerivative, (, orders, )]
[t, [, j, ]]
[t]
[j]
[orders]
[orders, [, i, ]]
[orders]
[i]
[0]
[new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, )]
[parameters]
[order]
[derivatives]
[new, DifferentiableMultivariateVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return, f, ., value, (, x, ), ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length, ], [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }, ;, }, }]
[f, ., value, (, x, )]
[f]
[x]
[new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ], value, (, final, double, [, ], x, ), {, final, int, n, =, x, ., length, ;, final, DerivativeStructure, [, ], dsX, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dsX, [, i, ], =, new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], ), ;, }, final, DerivativeStructure, [, ], y, =, f, ., value, (, dsX, ), ;, final, double, [, ], [, ], jacobian, =, new, double, [, y, ., length, ], [, n, ], ;, final, int, [, ], orders, =, new, int, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, y, ., length, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobian, [, i, ], [, j, ], =, y, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, jacobian, ;, }, }]
[x, ., length]
[x]
[new, DerivativeStructure, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[dsX, [, i, ]]
[dsX]
[i]
[new, DerivativeStructure, (, n, ,, 1, ,, i, ,, x, [, i, ], )]
[n]
[1]
[i]
[x, [, i, ]]
[x]
[i]
[f, ., value, (, dsX, )]
[f]
[dsX]
[new, double, [, y, ., length, ], [, n, ]]
[y, ., length]
[y]
[n]
[new, int, [, n, ]]
[n]
[0]
[i, <, y, ., length]
[i]
[y, ., length]
[y]
[++, i]
[i]
[0]
[j, <, n]
[j]
[n]
[++, j]
[j]
[orders, [, j, ]]
[orders]
[j]
[1]
[jacobian, [, i, ], [, j, ]]
[jacobian, [, i, ]]
[jacobian]
[i]
[j]
[y, [, i, ], ., getPartialDerivative, (, orders, )]
[y, [, i, ]]
[y]
[i]
[orders]
[orders, [, j, ]]
[orders]
[j]
[0]
[jacobian]
[new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], x, ), {, return, f, ., value, (, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], t, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, final, int, parameters, =, t, [, 0, ], ., getFreeParameters, (, ), ;, final, int, order, =, t, [, 0, ], ., getOrder, (, ), ;, final, int, n, =, t, ., length, ;, if, (, order, >, 1, ), {, throw, new, NumberIsTooLargeException, (, order, ,, 1, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, if, (, t, [, i, ], ., getFreeParameters, (, ), !=, parameters, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, ), ;, }, if, (, t, [, i, ], ., getOrder, (, ), !=, order, ), {, throw, new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, ), ;, }, }, final, double, [, ], point, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, point, [, i, ], =, t, [, i, ], ., getValue, (, ), ;, }, final, double, [, ], value, =, f, ., value, (, point, ), ;, final, double, [, ], [, ], jacobian, =, f, ., jacobian, (, ), ., value, (, point, ), ;, final, DerivativeStructure, [, ], merged, =, new, DerivativeStructure, [, value, ., length, ], ;, for, (, int, k, =, 0, ;, k, <, merged, ., length, ;, ++, k, ), {, final, double, [, ], derivatives, =, new, double, [, parameters, +, 1, ], ;, derivatives, [, 0, ], =, value, [, k, ], ;, final, int, [, ], orders, =, new, int, [, parameters, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ;, ++, i, ), {, orders, [, i, ], =, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, derivatives, [, i, +, 1, ], +=, jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, ), ;, }, orders, [, i, ], =, 0, ;, }, merged, [, k, ], =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, }, return, merged, ;, }, }]
[f, ., value, (, x, )]
[f]
[x]
[t, [, 0, ], ., getFreeParameters, (, )]
[t, [, 0, ]]
[t]
[0]
[t, [, 0, ], ., getOrder, (, )]
[t, [, 0, ]]
[t]
[0]
[t, ., length]
[t]
[order, >, 1]
[order]
[1]
[new, NumberIsTooLargeException, (, order, ,, 1, ,, true, )]
[order]
[1]
[true]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[t, [, i, ], ., getFreeParameters, (, ), !=, parameters]
[t, [, i, ], ., getFreeParameters, (, )]
[t, [, i, ]]
[t]
[i]
[parameters]
[new, DimensionMismatchException, (, t, [, i, ], ., getFreeParameters, (, ), ,, parameters, )]
[t, [, i, ], ., getFreeParameters, (, )]
[t, [, i, ]]
[t]
[i]
[parameters]
[t, [, i, ], ., getOrder, (, ), !=, order]
[t, [, i, ], ., getOrder, (, )]
[t, [, i, ]]
[t]
[i]
[order]
[new, DimensionMismatchException, (, t, [, i, ], ., getOrder, (, ), ,, order, )]
[t, [, i, ], ., getOrder, (, )]
[t, [, i, ]]
[t]
[i]
[order]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[point, [, i, ]]
[point]
[i]
[t, [, i, ], ., getValue, (, )]
[t, [, i, ]]
[t]
[i]
[f, ., value, (, point, )]
[f]
[point]
[f, ., jacobian, (, ), ., value, (, point, )]
[f, ., jacobian, (, )]
[f]
[point]
[new, DerivativeStructure, [, value, ., length, ]]
[value, ., length]
[value]
[0]
[k, <, merged, ., length]
[k]
[merged, ., length]
[merged]
[++, k]
[k]
[new, double, [, parameters, +, 1, ]]
[parameters, +, 1]
[parameters]
[1]
[derivatives, [, 0, ]]
[derivatives]
[0]
[value, [, k, ]]
[value]
[k]
[new, int, [, parameters, ]]
[parameters]
[0]
[i, <, parameters]
[i]
[parameters]
[++, i]
[i]
[orders, [, i, ]]
[orders]
[i]
[1]
[0]
[j, <, n]
[j]
[n]
[++, j]
[j]
[derivatives, [, i, +, 1, ]]
[derivatives]
[i, +, 1]
[i]
[1]
[jacobian, [, k, ], [, j, ], *, t, [, j, ], ., getPartialDerivative, (, orders, )]
[jacobian, [, k, ], [, j, ]]
[jacobian, [, k, ]]
[jacobian]
[k]
[j]
[t, [, j, ], ., getPartialDerivative, (, orders, )]
[t, [, j, ]]
[t]
[j]
[orders]
[orders, [, i, ]]
[orders]
[i]
[0]
[merged, [, k, ]]
[merged]
[k]
[new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, )]
[parameters]
[order]
[derivatives]
[merged]
