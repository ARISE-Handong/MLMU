[this, ., oldName]
[this]
[name]
[this, ., newName]
[this]
[null]
[this, ., prototypeCount]
[this]
[0]
[this, ., objLitCount]
[this]
[0]
[this, ., refCount]
[this]
[0]
[prototypeCount, +, objLitCount, +, refCount]
[prototypeCount, +, objLitCount]
[prototypeCount]
[objLitCount]
[refCount]
[this, ., prototypeCount, >, 0, &&, this, ., objLitCount, ==, 0]
[this, ., prototypeCount, >, 0]
[this, ., prototypeCount]
[this]
[0]
[this, ., objLitCount, ==, 0]
[this, ., objLitCount]
[this]
[0]
[canRenamePrototypeProperty, (, )]
[this, ., objLitCount, >, 0, &&, this, ., prototypeCount, ==, 0]
[this, ., objLitCount, >, 0]
[this, ., objLitCount]
[this]
[0]
[this, ., prototypeCount, ==, 0]
[this, ., prototypeCount]
[this]
[0]
[canRenameObjLitProperty, (, )]
[canRenamePrototypeProperty, (, ), &&, canRenameObjLitProperty, (, )]
[canRenamePrototypeProperty, (, )]
[canRenameObjLitProperty, (, )]
[compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[oldName]
[false]
[compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[oldName]
[true]
[aggressiveRenaming]
[true]
[0]
[oldName, ., length, (, )]
[oldName]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[oldName, ., charAt, (, i, )]
[oldName]
[i]
[Character, ., isUpperCase, (, ch, ), ||, !, Character, ., isLetter, (, ch, )]
[Character, ., isUpperCase, (, ch, )]
[Character]
[ch]
[!, Character, ., isLetter, (, ch, )]
[Character, ., isLetter, (, ch, )]
[Character]
[ch]
[true]
[false]
[compiler, ., getCodingConvention, (, ), ., isExported, (, oldName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[oldName]
[false]
[compiler, ., getCodingConvention, (, ), ., isPrivate, (, oldName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[oldName]
[true]
[false]
[new, Comparator, <, Property, >, (, ), {, @, Override, public, int, compare, (, Property, a1, ,, Property, a2, ), {, int, n1, =, a1, ., count, (, ), ;, int, n2, =, a2, ., count, (, ), ;, if, (, n1, !=, n2, ), {, return, n2, -, n1, ;, }, return, a1, ., oldName, ., compareTo, (, a2, ., oldName, ), ;, }, }]
[a1, ., count, (, )]
[a1]
[a2, ., count, (, )]
[a2]
[n1, !=, n2]
[n1]
[n2]
[n2, -, n1]
[n2]
[n1]
[a1, ., oldName, ., compareTo, (, a2, ., oldName, )]
[a1, ., oldName]
[a1]
[a2, ., oldName]
[a2]
[new, HashSet, <, Node, >, (, )]
[new, HashMap, <, String, ,, Property, >, (, )]
[new, HashSet, <, String, >, (, Arrays, ., asList, (, "indexOf", ,, "lastIndexOf", ,, "toString", ,, "valueOf", ), )]
[Arrays, ., asList, (, "indexOf", ,, "lastIndexOf", ,, "toString", ,, "valueOf", )]
[Arrays]
["indexOf"]
["lastIndexOf"]
["toString"]
["valueOf"]
[new, HashSet, <, Node, >, (, )]
[this, ., compiler]
[this]
[compiler]
[this, ., aggressiveRenaming]
[this]
[aggressiveRenaming]
[this, ., reservedCharacters]
[this]
[reservedCharacters]
[this, ., prevUsedRenameMap]
[this]
[prevUsedRenameMap]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExternedProperties, (, ), )]
[NodeTraversal]
[compiler]
[externs]
[new, ProcessExternedProperties, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessProperties, (, )]
[new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, )]
[FREQUENCY_COMPARATOR]
[properties, ., entrySet, (, ), ., iterator, (, )]
[properties, ., entrySet, (, )]
[properties]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, ), ., getValue, (, )]
[it, ., next, (, )]
[it]
[a, ., canRename, (, ), &&, !, reservedNames, ., contains, (, a, ., oldName, )]
[a, ., canRename, (, )]
[a]
[!, reservedNames, ., contains, (, a, ., oldName, )]
[reservedNames, ., contains, (, a, ., oldName, )]
[reservedNames]
[a, ., oldName]
[a]
[propsByFrequency, ., add, (, a, )]
[propsByFrequency]
[a]
[it, ., remove, (, )]
[it]
[reservedNames, ., add, (, a, ., oldName, )]
[reservedNames]
[a, ., oldName]
[a]
[prevUsedRenameMap, !=, null]
[prevUsedRenameMap]
[null]
[reusePrototypeNames, (, propsByFrequency, )]
[propsByFrequency]
[new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, )]
[reservedNames]
[""]
[reservedCharacters]
[new, StringBuilder, (, )]
[propsByFrequency]
[a, ., newName, ==, null]
[a, ., newName]
[a]
[null]
[a, ., newName]
[a]
[nameGen, ., generateNextName, (, )]
[nameGen]
[reservedNames, ., add, (, a, ., newName, )]
[reservedNames]
[a, ., newName]
[a]
[debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a, ., newName, ), ., append, (, '\n', )]
[debug, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, a, ., newName, )]
[debug, ., append, (, a, ., oldName, ), ., append, (, " => ", )]
[debug, ., append, (, a, ., oldName, )]
[debug]
[a, ., oldName]
[a]
[" => "]
[a, ., newName]
[a]
['\n']
[compiler, ., addToDebugLog, (, "JS property assignments:\n", +, debug, )]
[compiler]
["JS property assignments:\n", +, debug]
["JS property assignments:\n"]
[debug]
[false]
[stringNodes]
[n, ., getString, (, )]
[n]
[properties, ., get, (, oldName, )]
[properties]
[oldName]
[a, !=, null, &&, a, ., newName, !=, null]
[a, !=, null]
[a]
[null]
[a, ., newName, !=, null]
[a, ., newName]
[a]
[null]
[n, ., setString, (, a, ., newName, )]
[n]
[a, ., newName]
[a]
[changed]
[changed, ||, !, a, ., newName, ., equals, (, oldName, )]
[changed]
[!, a, ., newName, ., equals, (, oldName, )]
[a, ., newName, ., equals, (, oldName, )]
[a, ., newName]
[a]
[oldName]
[changed]
[compiler, ., reportCodeChange, (, )]
[compiler]
[compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, )]
[compiler]
[LifeCycleStage, ., NORMALIZED_OBFUSCATED]
[LifeCycleStage]
[properties]
[prevUsedRenameMap, ., lookupNewName, (, prop, ., oldName, )]
[prevUsedRenameMap]
[prop, ., oldName]
[prop]
[prevName, !=, null]
[prevName]
[null]
[reservedNames, ., contains, (, prevName, )]
[reservedNames]
[prevName]
[prop, ., newName]
[prop]
[prevName]
[reservedNames, ., add, (, prevName, )]
[reservedNames]
[prevName]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[dest, ., isString, (, )]
[dest]
[reservedNames, ., add, (, dest, ., getString, (, ), )]
[reservedNames]
[dest, ., getString, (, )]
[dest]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[dest, ., isString, (, )]
[dest]
[dest, ., getString, (, )]
[dest]
[s, ., equals, (, "prototype", )]
[s]
["prototype"]
[processPrototypeParent, (, parent, ,, t, ., getInput, (, ), )]
[parent]
[t, ., getInput, (, )]
[t]
[markPropertyAccessCandidate, (, dest, ,, t, ., getInput, (, ), )]
[dest]
[t, ., getInput, (, )]
[t]
[Token, ., OBJECTLIT]
[Token]
[!, prototypeObjLits, ., contains, (, n, )]
[prototypeObjLits, ., contains, (, n, )]
[prototypeObjLits]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[TokenStream, ., isJSIdentifier, (, child, ., getString, (, ), )]
[TokenStream]
[child, ., getString, (, )]
[child]
[markObjLitPropertyCandidate, (, child, ,, t, ., getInput, (, ), )]
[child]
[t, ., getInput, (, )]
[t]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[dest, ., isString, (, )]
[dest]
[markPrototypePropertyCandidate, (, dest, ,, input, )]
[dest]
[input]
[Token, ., ASSIGN]
[Token]
[Token, ., CALL]
[Token]
[n, ., isAssign, (, )]
[n]
[map]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[map]
[n, ., getLastChild, (, )]
[n]
[map, ., isObjectLit, (, )]
[map]
[prototypeObjLits, ., add, (, map, )]
[prototypeObjLits]
[map]
[map, ., getFirstChild, (, )]
[map]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[TokenStream, ., isJSIdentifier, (, key, ., getString, (, ), )]
[TokenStream]
[key, ., getString, (, )]
[key]
[markPrototypePropertyCandidate, (, key, ,, input, )]
[key]
[input]
[stringNodes, ., add, (, n, )]
[stringNodes]
[n]
[getProperty, (, n, ., getString, (, ), ), ., prototypeCount, ++]
[getProperty, (, n, ., getString, (, ), ), ., prototypeCount]
[getProperty, (, n, ., getString, (, ), )]
[n, ., getString, (, )]
[n]
[stringNodes, ., add, (, n, )]
[stringNodes]
[n]
[getProperty, (, n, ., getString, (, ), ), ., objLitCount, ++]
[getProperty, (, n, ., getString, (, ), ), ., objLitCount]
[getProperty, (, n, ., getString, (, ), )]
[n, ., getString, (, )]
[n]
[stringNodes, ., add, (, n, )]
[stringNodes]
[n]
[getProperty, (, n, ., getString, (, ), ), ., refCount, ++]
[getProperty, (, n, ., getString, (, ), ), ., refCount]
[getProperty, (, n, ., getString, (, ), )]
[n, ., getString, (, )]
[n]
[properties, ., get, (, name, )]
[properties]
[name]
[prop, ==, null]
[prop]
[null]
[prop]
[new, Property, (, name, )]
[name]
[properties, ., put, (, name, ,, prop, )]
[properties]
[name]
[prop]
[prop]
[ImmutableMap, ., builder, (, )]
[ImmutableMap]
[properties, ., values, (, )]
[properties]
[p, ., newName, !=, null]
[p, ., newName]
[p]
[null]
[map, ., put, (, p, ., oldName, ,, p, ., newName, )]
[map]
[p, ., oldName]
[p]
[p, ., newName]
[p]
[new, VariableMap, (, map, ., build, (, ), )]
[map, ., build, (, )]
[map]
