[factor, <, 0, ||, factor, >, 1]
[factor, <, 0]
[factor]
[0]
[factor, >, 1]
[factor]
[1]
[new, IllegalArgumentException, (, )]
[new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, )]
[random]
[0.0]
[noise]
[1e-9]
[new, ArrayList, <, Vector2D, >, (, )]
[2.0, *, FastMath, ., PI]
[2.0]
[FastMath, ., PI]
[FastMath]
[range, /, (, samples, /, 2.0, +, 1, )]
[range]
[(, samples, /, 2.0, +, 1, )]
[samples, /, 2.0, +, 1]
[samples, /, 2.0]
[samples]
[2.0]
[1]
[0]
[angle, <, range]
[angle]
[range]
[angle]
[step]
[new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), )]
[FastMath, ., cos, (, angle, )]
[FastMath]
[angle]
[FastMath, ., sin, (, angle, )]
[FastMath]
[angle]
[outerCircle, ., scalarMultiply, (, factor, )]
[outerCircle]
[factor]
[points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), )]
[points]
[outerCircle, ., add, (, generateNoiseVector, (, dist, ), )]
[outerCircle]
[generateNoiseVector, (, dist, )]
[dist]
[points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), )]
[points]
[innerCircle, ., add, (, generateNoiseVector, (, dist, ), )]
[innerCircle]
[generateNoiseVector, (, dist, )]
[dist]
[shuffle]
[Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[Collections]
[points]
[new, RandomAdaptor, (, random, )]
[random]
[points]
[new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, )]
[random]
[0.0]
[noise]
[1e-9]
[samples, /, 2]
[samples]
[2]
[samples, -, nSamplesOut]
[samples]
[nSamplesOut]
[new, ArrayList, <, Vector2D, >, (, )]
[FastMath, ., PI]
[FastMath]
[range, /, (, nSamplesOut, /, 2.0, )]
[range]
[(, nSamplesOut, /, 2.0, )]
[nSamplesOut, /, 2.0]
[nSamplesOut]
[2.0]
[0]
[angle, <, range]
[angle]
[range]
[angle]
[step]
[new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), )]
[FastMath, ., cos, (, angle, )]
[FastMath]
[angle]
[FastMath, ., sin, (, angle, )]
[FastMath]
[angle]
[points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), )]
[points]
[outerCircle, ., add, (, generateNoiseVector, (, dist, ), )]
[outerCircle]
[generateNoiseVector, (, dist, )]
[dist]
[step]
[range, /, (, nSamplesIn, /, 2.0, )]
[range]
[(, nSamplesIn, /, 2.0, )]
[nSamplesIn, /, 2.0]
[nSamplesIn]
[2.0]
[0]
[angle, <, range]
[angle]
[range]
[angle]
[step]
[new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, )]
[1, -, FastMath, ., cos, (, angle, )]
[1]
[FastMath, ., cos, (, angle, )]
[FastMath]
[angle]
[1, -, FastMath, ., sin, (, angle, ), -, 0.5]
[1, -, FastMath, ., sin, (, angle, )]
[1]
[FastMath, ., sin, (, angle, )]
[FastMath]
[angle]
[0.5]
[points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), )]
[points]
[innerCircle, ., add, (, generateNoiseVector, (, dist, ), )]
[innerCircle]
[generateNoiseVector, (, dist, )]
[dist]
[shuffle]
[Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[Collections]
[points]
[new, RandomAdaptor, (, random, )]
[random]
[points]
[new, NormalDistribution, (, random, ,, 0.0, ,, clusterStd, ,, 1e-9, )]
[random]
[0.0]
[clusterStd]
[1e-9]
[max, -, min]
[max]
[min]
[new, Vector2D, [, centers, ]]
[centers]
[0]
[i, <, centers]
[i]
[centers]
[i, ++]
[i]
[random, ., nextDouble, (, ), *, range, +, min]
[random, ., nextDouble, (, ), *, range]
[random, ., nextDouble, (, )]
[random]
[range]
[min]
[random, ., nextDouble, (, ), *, range, +, min]
[random, ., nextDouble, (, ), *, range]
[random, ., nextDouble, (, )]
[random]
[range]
[min]
[centerPoints, [, i, ]]
[centerPoints]
[i]
[new, Vector2D, (, x, ,, y, )]
[x]
[y]
[new, int, [, centers, ]]
[centers]
[samples, /, centers]
[samples]
[centers]
[Arrays, ., fill, (, nSamplesPerCenter, ,, count, )]
[Arrays]
[nSamplesPerCenter]
[count]
[0]
[i, <, samples, %, centers]
[i]
[samples, %, centers]
[samples]
[centers]
[i, ++]
[i]
[nSamplesPerCenter, [, i, ], ++]
[nSamplesPerCenter, [, i, ]]
[nSamplesPerCenter]
[i]
[new, ArrayList, <, Vector2D, >, (, )]
[0]
[i, <, centers]
[i]
[centers]
[i, ++]
[i]
[0]
[j, <, nSamplesPerCenter, [, i, ]]
[j]
[nSamplesPerCenter, [, i, ]]
[nSamplesPerCenter]
[i]
[j, ++]
[j]
[new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), )]
[dist, ., sample, (, )]
[dist]
[dist, ., sample, (, )]
[dist]
[points, ., add, (, point, ., add, (, centerPoints, [, i, ], ), )]
[points]
[point, ., add, (, centerPoints, [, i, ], )]
[point]
[centerPoints, [, i, ]]
[centerPoints]
[i]
[shuffle]
[Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), )]
[Collections]
[points]
[new, RandomAdaptor, (, random, )]
[random]
[points]
[new, SobolSequenceGenerator, (, 2, )]
[2]
[generator, ., skipTo, (, 999999, )]
[generator]
[999999]
[new, ArrayList, <, Vector2D, >, (, )]
[0]
[i, <, samples]
[i]
[samples]
[i, ++]
[i]
[generator, ., nextVector, (, )]
[generator]
[vector, [, 0, ]]
[vector]
[0]
[vector, [, 0, ], *, 2, -, 1]
[vector, [, 0, ], *, 2]
[vector, [, 0, ]]
[vector]
[0]
[2]
[1]
[vector, [, 1, ]]
[vector]
[1]
[vector, [, 1, ], *, 2, -, 1]
[vector, [, 1, ], *, 2]
[vector, [, 1, ]]
[vector]
[1]
[2]
[1]
[new, Vector2D, (, vector, )]
[vector]
[points, ., add, (, point, )]
[points]
[point]
[points]
[new, Vector2D, (, distribution, ., sample, (, ), ,, distribution, ., sample, (, ), )]
[distribution, ., sample, (, )]
[distribution]
[distribution, ., sample, (, )]
[distribution]
[maxX, -, minX]
[maxX]
[minX]
[maxY, -, minY]
[maxY]
[minY]
[new, ArrayList, <, DoublePoint, >, (, )]
[input]
[p, ., toArray, (, )]
[p]
[arr, [, 0, ]]
[arr]
[0]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2]
[(, arr, [, 0, ], -, minX, ), /, rangeX]
[(, arr, [, 0, ], -, minX, )]
[arr, [, 0, ], -, minX]
[arr, [, 0, ]]
[arr]
[0]
[minX]
[rangeX]
[2]
[1]
[arr, [, 1, ]]
[arr]
[1]
[(, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1]
[(, arr, [, 1, ], -, minY, ), /, rangeY, *, 2]
[(, arr, [, 1, ], -, minY, ), /, rangeY]
[(, arr, [, 1, ], -, minY, )]
[arr, [, 1, ], -, minY]
[arr, [, 1, ]]
[arr]
[1]
[minY]
[rangeY]
[2]
[1]
[points, ., add, (, new, DoublePoint, (, arr, ), )]
[points]
[new, DoublePoint, (, arr, )]
[arr]
[points]
[@, SuppressWarnings, (, "serial", )]
["serial"]
[setTitle, (, "Commons-Math: Cluster algorithm comparison", )]
["Commons-Math: Cluster algorithm comparison"]
[setSize, (, 800, ,, 800, )]
[800]
[800]
[setLayout, (, new, GridBagLayout, (, ), )]
[new, GridBagLayout, (, )]
[1500]
[new, Well19937c, (, 0, )]
[0]
[new, ArrayList, <, List, <, DoublePoint, >, >, (, )]
[datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), )]
[datasets]
[normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, )]
[makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, )]
[nSamples]
[true]
[0.04]
[0.5]
[rng]
[-, 1]
[1]
[1]
[-, 1]
[1]
[1]
[datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), )]
[datasets]
[normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, )]
[makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, )]
[nSamples]
[true]
[0.04]
[rng]
[-, 1]
[1]
[2]
[-, 1]
[1]
[1]
[datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), )]
[datasets]
[normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, )]
[makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, )]
[nSamples]
[3]
[1.0]
[-, 10]
[10]
[10]
[true]
[rng]
[-, 12]
[12]
[12]
[-, 12]
[12]
[12]
[datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), )]
[datasets]
[normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, )]
[makeRandom, (, nSamples, )]
[nSamples]
[-, 1]
[1]
[1]
[-, 1]
[1]
[1]
[new, ArrayList, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, (, )]
[algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), ), )]
[algorithms]
[new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), )]
["KMeans\n(k=2)"]
[new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, )]
[2]
[algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), ), )]
[algorithms]
[new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), )]
["KMeans\n(k=3)"]
[new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, )]
[3]
[algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), ), )]
[algorithms]
[new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), )]
["FuzzyKMeans\n(k=3, fuzzy=2)"]
[new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, )]
[3]
[2]
[algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), ), )]
[algorithms]
[new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), )]
["FuzzyKMeans\n(k=3, fuzzy=10)"]
[new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, )]
[3]
[10]
[algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), ), )]
[algorithms]
[new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), )]
["DBSCAN\n(eps=.1, min=3)"]
[new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, )]
[0.1]
[3]
[new, GridBagConstraints, (, )]
[c, ., fill]
[c]
[GridBagConstraints, ., VERTICAL]
[GridBagConstraints]
[c, ., gridx]
[c]
[0]
[c, ., gridy]
[c]
[0]
[c, ., insets]
[c]
[new, Insets, (, 2, ,, 2, ,, 2, ,, 2, )]
[2]
[2]
[2]
[2]
[algorithms]
[new, JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), )]
["<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", )]
["<html><body>"]
[pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", )]
[pair, ., getFirst, (, )]
[pair]
["\n"]
["<br>"]
[add, (, text, ,, c, )]
[text]
[c]
[c, ., gridx, ++]
[c, ., gridx]
[c]
[c, ., gridy, ++]
[c, ., gridy]
[c]
[datasets]
[c, ., gridx]
[c]
[0]
[algorithms]
[System, ., currentTimeMillis, (, )]
[System]
[pair, ., getSecond, (, ), ., cluster, (, dataset, )]
[pair, ., getSecond, (, )]
[pair]
[dataset]
[System, ., currentTimeMillis, (, )]
[System]
[add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, )]
[new, ClusterPlot, (, clusters, ,, end, -, start, )]
[clusters]
[end, -, start]
[end]
[start]
[c]
[c, ., gridx, ++]
[c, ., gridx]
[c]
[c, ., gridy, ++]
[c, ., gridy]
[c]
[@, SuppressWarnings, (, "serial", )]
["serial"]
[10]
[this, ., clusters]
[this]
[clusters]
[this, ., duration]
[this]
[duration]
[super, ., paintComponent, (, g, )]
[super]
[g]
[(, Graphics2D, ), g]
[g]
[g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, )]
[g2]
[RenderingHints, ., KEY_ANTIALIASING]
[RenderingHints]
[RenderingHints, ., VALUE_ANTIALIAS_ON]
[RenderingHints]
[getWidth, (, )]
[getHeight, (, )]
[g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, )]
[g2]
[0]
[0]
[w]
[h]
[g2, ., setPaint, (, Color, ., black, )]
[g2]
[Color, ., black]
[Color]
[g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, )]
[g2]
[0]
[0]
[w, -, 1]
[w]
[1]
[h, -, 1]
[h]
[1]
[0]
[new, Color, [, ], {, Color, ., red, ,, Color, ., blue, ,, Color, ., green, ., darker, (, ), }]
[{, Color, ., red, ,, Color, ., blue, ,, Color, ., green, ., darker, (, ), }]
[Color, ., red]
[Color]
[Color, ., blue]
[Color]
[Color, ., green, ., darker, (, )]
[Color, ., green]
[Color]
[clusters]
[g2, ., setPaint, (, colors, [, index, ++, ], )]
[g2]
[colors, [, index, ++, ]]
[colors]
[index, ++]
[index]
[cluster, ., getPoints, (, )]
[cluster]
[transform, (, point, ,, w, ,, h, )]
[point]
[w]
[h]
[p, ., getPoint, (, )]
[p]
[g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), )]
[g2]
[new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, )]
[arr, [, 0, ], -, 1]
[arr, [, 0, ]]
[arr]
[0]
[1]
[arr, [, 1, ], -, 1]
[arr, [, 1, ]]
[arr]
[1]
[1]
[3]
[3]
[cluster, instanceof, CentroidCluster]
[cluster]
[transform, (, (, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter, (, ), ,, w, ,, h, )]
[(, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter, (, )]
[(, (, CentroidCluster, <, ?, >, ), cluster, )]
[(, CentroidCluster, <, ?, >, ), cluster]
[cluster]
[w]
[h]
[p, ., getPoint, (, )]
[p]
[new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, )]
[arr, [, 0, ], -, 4]
[arr, [, 0, ]]
[arr]
[0]
[4]
[arr, [, 1, ], -, 4]
[arr, [, 1, ]]
[arr]
[1]
[4]
[8]
[8]
[g2, ., fill, (, s, )]
[g2]
[s]
[g2, ., setPaint, (, Color, ., black, )]
[g2]
[Color, ., black]
[Color]
[g2, ., draw, (, s, )]
[g2]
[s]
[g2, ., setPaint, (, Color, ., black, )]
[g2]
[Color, ., black]
[Color]
[g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,, h, -, 5, )]
[g2]
[String, ., format, (, "%.2f s", ,, duration, /, 1e3, )]
[String]
["%.2f s"]
[duration, /, 1e3]
[duration]
[1e3]
[w, -, 40]
[w]
[40]
[h, -, 5]
[h]
[5]
[new, Dimension, (, 150, ,, 150, )]
[150]
[150]
[point, ., getPoint, (, )]
[point]
[new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }, )]
[new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[{, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, ), }]
[PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, )]
[PAD]
[(, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, )]
[(, arr, [, 0, ], +, 1, ), /, 2.0]
[(, arr, [, 0, ], +, 1, )]
[arr, [, 0, ], +, 1]
[arr, [, 0, ]]
[arr]
[0]
[1]
[2.0]
[(, width, -, 2, *, PAD, )]
[width, -, 2, *, PAD]
[width]
[2, *, PAD]
[2]
[PAD]
[height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, )]
[height, -, PAD]
[height]
[PAD]
[(, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *, PAD, )]
[(, arr, [, 1, ], +, 1, ), /, 2.0]
[(, arr, [, 1, ], +, 1, )]
[arr, [, 1, ], +, 1]
[arr, [, 1, ]]
[arr]
[1]
[1]
[2.0]
[(, height, -, 2, *, PAD, )]
[height, -, 2, *, PAD]
[height]
[2, *, PAD]
[2]
[PAD]
[ExampleUtils, ., showExampleFrame, (, new, Display, (, ), )]
[ExampleUtils]
[new, Display, (, )]
