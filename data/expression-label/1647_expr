[iConverters]
[converters]
[iSelectEntries]
[new, Entry, [, 1, <<, 4, ]]
[1, <<, 4]
[1]
[4]
[iSelectEntries]
[entries, ., length]
[entries]
[type, ==, null, ?, 0, :, type, ., hashCode, (, ), &, (, length, -, 1, )]
[type, ==, null]
[type]
[null]
[0]
[type, ., hashCode, (, ), &, (, length, -, 1, )]
[type, ., hashCode, (, )]
[type]
[(, length, -, 1, )]
[length, -, 1]
[length]
[1]
[(, e, =, entries, [, index, ], ), !=, null]
[(, e, =, entries, [, index, ], )]
[e]
[entries, [, index, ]]
[entries]
[index]
[null]
[e, ., iType, ==, type]
[e, ., iType]
[e]
[type]
[e, ., iConverter]
[e]
[++, index, >=, length]
[++, index]
[index]
[length]
[index]
[0]
[selectSlow, (, this, ,, type, )]
[this]
[type]
[e]
[new, Entry, (, type, ,, converter, )]
[type]
[converter]
[entries]
[(, Entry, [, ], ), entries, ., clone, (, )]
[entries, ., clone, (, )]
[entries]
[entries, [, index, ]]
[entries]
[index]
[e]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[entries, [, i, ], ==, null]
[entries, [, i, ]]
[entries]
[i]
[null]
[iSelectEntries]
[entries]
[converter]
[length, <<, 1]
[length]
[1]
[new, Entry, [, newLength, ]]
[newLength]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[e]
[entries, [, i, ]]
[entries]
[i]
[type]
[e, ., iType]
[e]
[index]
[type, ==, null, ?, 0, :, type, ., hashCode, (, ), &, (, newLength, -, 1, )]
[type, ==, null]
[type]
[null]
[0]
[type, ., hashCode, (, ), &, (, newLength, -, 1, )]
[type, ., hashCode, (, )]
[type]
[(, newLength, -, 1, )]
[newLength, -, 1]
[newLength]
[1]
[newEntries, [, index, ], !=, null]
[newEntries, [, index, ]]
[newEntries]
[index]
[null]
[++, index, >=, newLength]
[++, index]
[index]
[newLength]
[index]
[0]
[newEntries, [, index, ]]
[newEntries]
[index]
[e]
[iSelectEntries]
[newEntries]
[converter]
[iConverters, ., length]
[iConverters]
[System, ., arraycopy, (, iConverters, ,, 0, ,, converters, ,, 0, ,, iConverters, ., length, )]
[System]
[iConverters]
[0]
[converters]
[0]
[iConverters, ., length]
[iConverters]
[iConverters]
[converters, ., length]
[converters]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[converters, [, i, ]]
[converters]
[i]
[converter, ., equals, (, existing, )]
[converter]
[existing]
[removed, !=, null]
[removed]
[null]
[removed, [, 0, ]]
[removed]
[0]
[null]
[this]
[converter, ., getSupportedType, (, ), ==, existing, ., getSupportedType, (, )]
[converter, ., getSupportedType, (, )]
[converter]
[existing, ., getSupportedType, (, )]
[existing]
[new, Converter, [, length, ]]
[length]
[0]
[j, <, length]
[j]
[length]
[j, ++]
[j]
[j, !=, i]
[j]
[i]
[copy, [, j, ]]
[copy]
[j]
[converters, [, j, ]]
[converters]
[j]
[copy, [, j, ]]
[copy]
[j]
[converter]
[removed, !=, null]
[removed]
[null]
[removed, [, 0, ]]
[removed]
[0]
[existing]
[new, ConverterSet, (, copy, )]
[copy]
[new, Converter, [, length, +, 1, ]]
[length, +, 1]
[length]
[1]
[System, ., arraycopy, (, converters, ,, 0, ,, copy, ,, 0, ,, length, )]
[System]
[converters]
[0]
[copy]
[0]
[length]
[copy, [, length, ]]
[copy]
[length]
[converter]
[removed, !=, null]
[removed]
[null]
[removed, [, 0, ]]
[removed]
[0]
[null]
[new, ConverterSet, (, copy, )]
[copy]
[iConverters]
[converters, ., length]
[converters]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[converter, ., equals, (, converters, [, i, ], )]
[converter]
[converters, [, i, ]]
[converters]
[i]
[remove, (, i, ,, removed, )]
[i]
[removed]
[removed, !=, null]
[removed]
[null]
[removed, [, 0, ]]
[removed]
[0]
[null]
[this]
[iConverters]
[converters, ., length]
[converters]
[index, >=, length]
[index]
[length]
[new, IndexOutOfBoundsException, (, )]
[removed, !=, null]
[removed]
[null]
[removed, [, 0, ]]
[removed]
[0]
[converters, [, index, ]]
[converters]
[index]
[new, Converter, [, length, -, 1, ]]
[length, -, 1]
[length]
[1]
[0]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[i, !=, index]
[i]
[index]
[copy, [, j, ++, ]]
[copy]
[j, ++]
[j]
[converters, [, i, ]]
[converters]
[i]
[new, ConverterSet, (, copy, )]
[copy]
[set, ., iConverters]
[set]
[converters, ., length]
[converters]
[length]
[--, i, >=, 0]
[--, i]
[i]
[0]
[converter]
[converters, [, i, ]]
[converters]
[i]
[converter, ., getSupportedType, (, )]
[converter]
[supportedType, ==, type]
[supportedType]
[type]
[converter]
[supportedType, ==, null, ||, (, type, !=, null, &&, !, supportedType, ., isAssignableFrom, (, type, ), )]
[supportedType, ==, null]
[supportedType]
[null]
[(, type, !=, null, &&, !, supportedType, ., isAssignableFrom, (, type, ), )]
[type, !=, null, &&, !, supportedType, ., isAssignableFrom, (, type, )]
[type, !=, null]
[type]
[null]
[!, supportedType, ., isAssignableFrom, (, type, )]
[supportedType, ., isAssignableFrom, (, type, )]
[supportedType]
[type]
[set]
[set, ., remove, (, i, ,, null, )]
[set]
[i]
[null]
[converters]
[set, ., iConverters]
[set]
[length]
[converters, ., length]
[converters]
[type, ==, null, ||, length, ==, 0]
[type, ==, null]
[type]
[null]
[length, ==, 0]
[length]
[0]
[null]
[length, ==, 1]
[length]
[1]
[converters, [, 0, ]]
[converters]
[0]
[length]
[--, i, >=, 0]
[--, i]
[i]
[0]
[converter]
[converters, [, i, ]]
[converters]
[i]
[converter, ., getSupportedType, (, )]
[converter]
[length]
[--, j, >=, 0]
[--, j]
[j]
[0]
[j, !=, i, &&, converters, [, j, ], ., getSupportedType, (, ), ., isAssignableFrom, (, supportedType, )]
[j, !=, i]
[j]
[i]
[converters, [, j, ], ., getSupportedType, (, ), ., isAssignableFrom, (, supportedType, )]
[converters, [, j, ], ., getSupportedType, (, )]
[converters, [, j, ]]
[converters]
[j]
[supportedType]
[set]
[set, ., remove, (, j, ,, null, )]
[set]
[j]
[null]
[converters]
[set, ., iConverters]
[set]
[length]
[converters, ., length]
[converters]
[i]
[length, -, 1]
[length]
[1]
[length, ==, 1]
[length]
[1]
[converters, [, 0, ]]
[converters]
[0]
[new, StringBuilder, (, )]
[msg, ., append, (, "Unable to find best converter for type \"", )]
[msg]
["Unable to find best converter for type \""]
[msg, ., append, (, type, ., getName, (, ), )]
[msg]
[type, ., getName, (, )]
[type]
[msg, ., append, (, "\" from remaining set: ", )]
[msg]
["\" from remaining set: "]
[0]
[i, <, length]
[i]
[length]
[i, ++]
[i]
[converter]
[converters, [, i, ]]
[converters]
[i]
[converter, ., getSupportedType, (, )]
[converter]
[msg, ., append, (, converter, ., getClass, (, ), ., getName, (, ), )]
[msg]
[converter, ., getClass, (, ), ., getName, (, )]
[converter, ., getClass, (, )]
[converter]
[msg, ., append, (, '[', )]
[msg]
['[']
[msg, ., append, (, supportedType, ==, null, ?, null, :, supportedType, ., getName, (, ), )]
[msg]
[supportedType, ==, null, ?, null, :, supportedType, ., getName, (, )]
[supportedType, ==, null]
[supportedType]
[null]
[null]
[supportedType, ., getName, (, )]
[supportedType]
[msg, ., append, (, "], ", )]
[msg]
["], "]
[new, IllegalStateException, (, msg, ., toString, (, ), )]
[msg, ., toString, (, )]
[msg]
[iType]
[type]
[iConverter]
[converter]
