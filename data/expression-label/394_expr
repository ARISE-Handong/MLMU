[new, Annotation, (, ), {, }]
[new, Annotation, (, ), {, }]
[null]
[new, Annotation, (, ), {, }]
[new, Annotation, (, ), {, }]
[this, ., graph]
[this]
[graph]
[this, ., start]
[this]
[a]
[this, ., end]
[this]
[b]
[this, ., nodePredicate]
[this]
[nodePredicate]
[this, ., edgePredicate]
[this]
[edgePredicate]
[this, ., inclusive]
[this]
[inclusive]
[graph]
[a]
[b]
[nodePredicate]
[edgePredicate]
[true]
[setUp, (, )]
[checkAllPathsWithoutBackEdges, (, start, ,, end, )]
[start]
[end]
[tearDown, (, )]
[result]
[setUp, (, )]
[checkSomePathsWithoutBackEdges, (, start, ,, end, )]
[start]
[end]
[tearDown, (, )]
[result]
[graph, ., pushNodeAnnotations, (, )]
[graph]
[graph, ., pushEdgeAnnotations, (, )]
[graph]
[discoverBackEdges, (, this, ., start, )]
[this, ., start]
[this]
[graph, ., popNodeAnnotations, (, )]
[graph]
[graph, ., popEdgeAnnotations, (, )]
[graph]
[u, ., setAnnotation, (, GRAY, )]
[u]
[GRAY]
[u, ., getOutEdges, (, )]
[u]
[ignoreEdge, (, e, )]
[e]
[e, ., getDestination, (, )]
[e]
[v, ., getAnnotation, (, ), ==, WHITE]
[v, ., getAnnotation, (, )]
[v]
[WHITE]
[discoverBackEdges, (, v, )]
[v]
[v, ., getAnnotation, (, ), ==, GRAY]
[v, ., getAnnotation, (, )]
[v]
[GRAY]
[e, ., setAnnotation, (, BACK_EDGE, )]
[e]
[BACK_EDGE]
[u, ., setAnnotation, (, BLACK, )]
[u]
[BLACK]
[!, edgePredicate, ., apply, (, e, )]
[edgePredicate, ., apply, (, e, )]
[edgePredicate]
[e]
[nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), )]
[nodePredicate, ., apply, (, a, ., getValue, (, ), )]
[nodePredicate]
[a, ., getValue, (, )]
[a]
[(, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), )]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, )]
[inclusive]
[(, a, !=, start, &&, a, !=, end, )]
[a, !=, start, &&, a, !=, end]
[a, !=, start]
[a]
[start]
[a, !=, end]
[a]
[end]
[true]
[a, ==, b]
[a]
[b]
[false]
[a, ., getOutEdges, (, )]
[a]
[e, ., getAnnotation, (, ), ==, VISITED_EDGE]
[e, ., getAnnotation, (, )]
[e]
[VISITED_EDGE]
[e, ., setAnnotation, (, VISITED_EDGE, )]
[e]
[VISITED_EDGE]
[ignoreEdge, (, e, )]
[e]
[e, ., getAnnotation, (, ), ==, BACK_EDGE]
[e, ., getAnnotation, (, )]
[e]
[BACK_EDGE]
[e, ., getDestination, (, )]
[e]
[!, checkAllPathsWithoutBackEdges, (, next, ,, b, )]
[checkAllPathsWithoutBackEdges, (, next, ,, b, )]
[next]
[b]
[false]
[true]
[nodePredicate, ., apply, (, a, ., getValue, (, ), ), &&, (, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), )]
[nodePredicate, ., apply, (, a, ., getValue, (, ), )]
[nodePredicate]
[a, ., getValue, (, )]
[a]
[(, inclusive, ||, (, a, !=, start, &&, a, !=, end, ), )]
[inclusive, ||, (, a, !=, start, &&, a, !=, end, )]
[inclusive]
[(, a, !=, start, &&, a, !=, end, )]
[a, !=, start, &&, a, !=, end]
[a, !=, start]
[a]
[start]
[a, !=, end]
[a]
[end]
[true]
[a, ==, b]
[a]
[b]
[false]
[a, ., getOutEdges, (, )]
[a]
[e, ., getAnnotation, (, ), ==, VISITED_EDGE]
[e, ., getAnnotation, (, )]
[e]
[VISITED_EDGE]
[e, ., setAnnotation, (, VISITED_EDGE, )]
[e]
[VISITED_EDGE]
[ignoreEdge, (, e, )]
[e]
[e, ., getAnnotation, (, ), ==, BACK_EDGE]
[e, ., getAnnotation, (, )]
[e]
[BACK_EDGE]
[e, ., getDestination, (, )]
[e]
[checkSomePathsWithoutBackEdges, (, next, ,, b, )]
[next]
[b]
[true]
[false]
