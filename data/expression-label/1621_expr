[optimizer, ==, null, ||, generator, ==, null]
[optimizer, ==, null]
[optimizer]
[null]
[generator, ==, null]
[generator]
[null]
[new, NullArgumentException, (, )]
[starts, <, 1]
[starts]
[1]
[new, NotStrictlyPositiveException, (, starts, )]
[starts]
[this, ., optimizer]
[this]
[optimizer]
[this, ., starts]
[this]
[starts]
[this, ., generator]
[this]
[generator]
[optimizer, ., getConvergenceChecker, (, )]
[optimizer]
[maxEvaluations]
[totalEvaluations]
[optima, ==, null]
[optima]
[null]
[new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, )]
[LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET]
[LocalizedFormats]
[optima, ., clone, (, )]
[optima]
[optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -, min, ), )]
[maxEval]
[f]
[goal]
[min]
[max]
[min, +, 0.5, *, (, max, -, min, )]
[min]
[0.5, *, (, max, -, min, )]
[0.5]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[null]
[optima]
[new, UnivariatePointValuePair, [, starts, ]]
[starts]
[totalEvaluations]
[0]
[0]
[i, <, starts]
[i]
[starts]
[++, i]
[i]
[(, i, ==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, )]
[(, i, ==, 0, )]
[i, ==, 0]
[i]
[0]
[startValue]
[min, +, generator, ., nextDouble, (, ), *, (, max, -, min, )]
[min]
[generator, ., nextDouble, (, ), *, (, max, -, min, )]
[generator, ., nextDouble, (, )]
[generator]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[optima, [, i, ]]
[optima]
[i]
[optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, )]
[optimizer]
[maxEval, -, totalEvaluations]
[maxEval]
[totalEvaluations]
[f]
[goal]
[min]
[max]
[s]
[lastException]
[mue]
[optima, [, i, ]]
[optima]
[i]
[null]
[totalEvaluations]
[optimizer, ., getEvaluations, (, )]
[optimizer]
[sortPairs, (, goal, )]
[goal]
[optima, [, 0, ], ==, null]
[optima, [, 0, ]]
[optima]
[0]
[null]
[lastException]
[optima, [, 0, ]]
[optima]
[0]
[Arrays, ., sort, (, optima, ,, new, Comparator, <, UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }, )]
[Arrays]
[optima]
[new, Comparator, <, UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, ), ;, }, }]
[o1, ==, null]
[o1]
[null]
[(, o2, ==, null, ), ?, 0, :, 1]
[(, o2, ==, null, )]
[o2, ==, null]
[o2]
[null]
[0]
[1]
[o2, ==, null]
[o2]
[null]
[-, 1]
[1]
[o1, ., getValue, (, )]
[o1]
[o2, ., getValue, (, )]
[o2]
[(, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,, v1, )]
[(, goal, ==, GoalType, ., MINIMIZE, )]
[goal, ==, GoalType, ., MINIMIZE]
[goal]
[GoalType, ., MINIMIZE]
[GoalType]
[Double, ., compare, (, v1, ,, v2, )]
[Double]
[v1]
[v2]
[Double, ., compare, (, v2, ,, v1, )]
[Double]
[v2]
[v1]
