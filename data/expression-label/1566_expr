[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, return, (, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, ), ||, n, ., isDec, (, ), ;, }, }]
[(, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, ), ||, n, ., isDec, (, )]
[(, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ||, n, ., isInc, (, )]
[(, NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), )]
[NodeUtil, ., isAssignmentOp, (, n, ), &&, n, ., getFirstChild, (, ), ., isName, (, )]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., isInc, (, )]
[n]
[n, ., isDec, (, )]
[n]
[this, ., compiler]
[this]
[compiler]
[Preconditions, ., checkNotNull, (, externs, )]
[Preconditions]
[externs]
[Preconditions, ., checkNotNull, (, root, )]
[Preconditions]
[root]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[t, ., getScope, (, )]
[t]
[scope, ., isGlobal, (, )]
[scope]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, t, ., getScope, (, ), ., getVarCount, (, )]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE]
[LiveVariablesAnalysis]
[t, ., getScope, (, ), ., getVarCount, (, )]
[t, ., getScope, (, )]
[t]
[t, ., getScopeRoot, (, ), ., getLastChild, (, )]
[t, ., getScopeRoot, (, )]
[t]
[NodeUtil, ., containsFunction, (, fnBlock, )]
[NodeUtil]
[fnBlock]
[!, NodeUtil, ., has, (, fnBlock, ,, matchRemovableAssigns, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[NodeUtil, ., has, (, fnBlock, ,, matchRemovableAssigns, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[NodeUtil]
[fnBlock]
[matchRemovableAssigns]
[Predicates, ., <, Node, >, alwaysTrue, (, )]
[Predicates]
[t, ., getControlFlowGraph, (, )]
[t]
[liveness]
[new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, )]
[cfg]
[scope]
[compiler]
[liveness, ., analyze, (, )]
[liveness]
[tryRemoveDeadAssignments, (, t, ,, cfg, )]
[t]
[cfg]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[nodes]
[cfgNode, ., getAnnotation, (, )]
[cfgNode]
[cfgNode, ., getValue, (, )]
[cfgNode]
[n, ==, null]
[n]
[null]
[n, ., getType, (, )]
[n]
[Token, ., IF]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, )]
[t]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[state]
[Token, ., FOR]
[Token]
[!, NodeUtil, ., isForIn, (, n, )]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[tryRemoveAssignment, (, t, ,, NodeUtil, ., getConditionExpression, (, n, ), ,, state, )]
[t]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[state]
[Token, ., SWITCH]
[Token]
[Token, ., CASE]
[Token]
[Token, ., RETURN]
[Token]
[n, ., hasChildren, (, )]
[n]
[tryRemoveAssignment, (, t, ,, n, ., getFirstChild, (, ), ,, state, )]
[t]
[n, ., getFirstChild, (, )]
[n]
[state]
[tryRemoveAssignment, (, t, ,, n, ,, state, )]
[t]
[n]
[state]
[tryRemoveAssignment, (, t, ,, n, ,, n, ,, state, )]
[t]
[n]
[n]
[state]
[n, ., getParent, (, )]
[n]
[NodeUtil, ., isAssignmentOp, (, n, ), ||, n, ., isInc, (, ), ||, n, ., isDec, (, )]
[NodeUtil, ., isAssignmentOp, (, n, ), ||, n, ., isInc, (, )]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[n, ., isInc, (, )]
[n]
[n, ., isDec, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[lhs, ., getNext, (, )]
[lhs]
[rhs, !=, null]
[rhs]
[null]
[tryRemoveAssignment, (, t, ,, rhs, ,, exprRoot, ,, state, )]
[t]
[rhs]
[exprRoot]
[state]
[rhs]
[lhs, ., getNext, (, )]
[lhs]
[t, ., getScope, (, )]
[t]
[!, lhs, ., isName, (, )]
[lhs, ., isName, (, )]
[lhs]
[lhs, ., getString, (, )]
[lhs]
[!, scope, ., isDeclared, (, name, ,, false, )]
[scope, ., isDeclared, (, name, ,, false, )]
[scope]
[name]
[false]
[scope, ., getVar, (, name, )]
[scope]
[name]
[liveness, ., getEscapedLocals, (, ), ., contains, (, var, )]
[liveness, ., getEscapedLocals, (, )]
[liveness]
[var]
[rhs, !=, null, &&, rhs, ., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name, ), &&, n, ., isAssign, (, )]
[rhs, !=, null, &&, rhs, ., isName, (, ), &&, rhs, ., getString, (, ), ., equals, (, var, ., name, )]
[rhs, !=, null, &&, rhs, ., isName, (, )]
[rhs, !=, null]
[rhs]
[null]
[rhs, ., isName, (, )]
[rhs]
[rhs, ., getString, (, ), ., equals, (, var, ., name, )]
[rhs, ., getString, (, )]
[rhs]
[var, ., name]
[var]
[n, ., isAssign, (, )]
[n]
[n, ., removeChild, (, rhs, )]
[n]
[rhs]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, )]
[n, ., getParent, (, )]
[n]
[n]
[rhs]
[compiler, ., reportCodeChange, (, )]
[compiler]
[state, ., getOut, (, ), ., isLive, (, var, )]
[state, ., getOut, (, )]
[state]
[var]
[state, ., getIn, (, ), ., isLive, (, var, ), &&, isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, )]
[state, ., getIn, (, ), ., isLive, (, var, )]
[state, ., getIn, (, )]
[state]
[var]
[isVariableStillLiveWithinExpression, (, n, ,, exprRoot, ,, var, ., name, )]
[n]
[exprRoot]
[var, ., name]
[var]
[n, ., isAssign, (, )]
[n]
[n, ., removeChild, (, rhs, )]
[n]
[rhs]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, rhs, )]
[n, ., getParent, (, )]
[n]
[n]
[rhs]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[n, ., removeChild, (, rhs, )]
[n]
[rhs]
[n, ., removeChild, (, lhs, )]
[n]
[lhs]
[new, Node, (, NodeUtil, ., getOpFromAssignmentOp, (, n, ), ,, lhs, ,, rhs, )]
[NodeUtil, ., getOpFromAssignmentOp, (, n, )]
[NodeUtil]
[n]
[lhs]
[rhs]
[parent, ., replaceChild, (, n, ,, op, )]
[parent]
[n]
[op]
[n, ., isInc, (, ), ||, n, ., isDec, (, )]
[n, ., isInc, (, )]
[n]
[n, ., isDec, (, )]
[n]
[parent, ., isExprResult, (, )]
[parent]
[parent, ., replaceChild, (, n, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, n, ), ), )]
[parent]
[n]
[IR, ., voidNode, (, IR, ., number, (, 0, ), ., srcref, (, n, ), )]
[IR]
[IR, ., number, (, 0, ), ., srcref, (, n, )]
[IR, ., number, (, 0, )]
[IR]
[0]
[n]
[n, ., isComma, (, ), &&, n, !=, parent, ., getLastChild, (, )]
[n, ., isComma, (, )]
[n]
[n, !=, parent, ., getLastChild, (, )]
[n]
[parent, ., getLastChild, (, )]
[parent]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), &&, NodeUtil, ., getConditionExpression, (, parent, ), !=, n]
[parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, )]
[parent, ., isFor, (, )]
[parent]
[!, NodeUtil, ., isForIn, (, parent, )]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[NodeUtil, ., getConditionExpression, (, parent, ), !=, n]
[NodeUtil, ., getConditionExpression, (, parent, )]
[NodeUtil]
[parent]
[n]
[parent, ., replaceChild, (, n, ,, IR, ., empty, (, ), )]
[parent]
[n]
[IR, ., empty, (, )]
[IR]
[Preconditions, ., checkState, (, false, ,, "Unknown statement", )]
[Preconditions]
[false]
["Unknown statement"]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c, ., getNext, (, )]
[c]
[!, ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph, ., isEnteringNewCfgNode, (, c, )]
[ControlFlowGraph]
[c]
[tryRemoveAssignment, (, t, ,, c, ,, exprRoot, ,, state, )]
[t]
[c]
[exprRoot]
[state]
[c]
[next]
[n, !=, exprRoot]
[n]
[exprRoot]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[n, ., getParent, (, ), ., getType, (, )]
[n, ., getParent, (, )]
[n]
[Token, ., OR]
[Token]
[Token, ., AND]
[Token]
[n, ., getNext, (, ), !=, null]
[n, ., getNext, (, )]
[n]
[null]
[state]
[isVariableReadBeforeKill, (, n, ., getNext, (, ), ,, variable, )]
[n, ., getNext, (, )]
[n]
[variable]
[state, ==, VariableLiveness, ., KILL]
[state]
[VariableLiveness, ., KILL]
[VariableLiveness]
[state]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[Token, ., HOOK]
[Token]
[n, ., getNext, (, ), !=, null, &&, n, ., getNext, (, ), ., getNext, (, ), !=, null]
[n, ., getNext, (, ), !=, null]
[n, ., getNext, (, )]
[n]
[null]
[n, ., getNext, (, ), ., getNext, (, ), !=, null]
[n, ., getNext, (, ), ., getNext, (, )]
[n, ., getNext, (, )]
[n]
[null]
[state]
[checkHookBranchReadBeforeKill, (, n, ., getNext, (, ), ,, n, ., getNext, (, ), ., getNext, (, ), ,, variable, )]
[n, ., getNext, (, )]
[n]
[n, ., getNext, (, ), ., getNext, (, )]
[n, ., getNext, (, )]
[n]
[variable]
[n, ., getNext, (, )]
[n]
[sibling, !=, null]
[sibling]
[null]
[sibling]
[sibling, ., getNext, (, )]
[sibling]
[state]
[isVariableReadBeforeKill, (, sibling, ,, variable, )]
[sibling]
[variable]
[state, !=, VariableLiveness, ., MAYBE_LIVE]
[state]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[state, ==, VariableLiveness, ., READ]
[state]
[VariableLiveness, ., READ]
[VariableLiveness]
[true]
[state, ==, VariableLiveness, ., KILL]
[state]
[VariableLiveness, ., KILL]
[VariableLiveness]
[false]
[n]
[n, ., getParent, (, )]
[n]
[false]
[ControlFlowGraph, ., isEnteringNewCfgNode, (, n, )]
[ControlFlowGraph]
[n]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[n, ., isName, (, ), &&, variable, ., equals, (, n, ., getString, (, ), )]
[n, ., isName, (, )]
[n]
[variable, ., equals, (, n, ., getString, (, ), )]
[variable]
[n, ., getString, (, )]
[n]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, n, ., getParent, (, ), )]
[NodeUtil]
[n]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, n, ., getParent, (, ), ., isAssign, (, ), )]
[Preconditions]
[n, ., getParent, (, ), ., isAssign, (, )]
[n, ., getParent, (, )]
[n]
[n, ., getNext, (, )]
[n]
[isVariableReadBeforeKill, (, rhs, ,, variable, )]
[rhs]
[variable]
[state, ==, VariableLiveness, ., READ]
[state]
[VariableLiveness, ., READ]
[VariableLiveness]
[state]
[VariableLiveness, ., KILL]
[VariableLiveness]
[VariableLiveness, ., READ]
[VariableLiveness]
[n, ., getType, (, )]
[n]
[Token, ., OR]
[Token]
[Token, ., AND]
[Token]
[isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, )]
[n, ., getFirstChild, (, )]
[n]
[variable]
[isVariableReadBeforeKill, (, n, ., getLastChild, (, ), ,, variable, )]
[n, ., getLastChild, (, )]
[n]
[variable]
[v1, !=, VariableLiveness, ., MAYBE_LIVE]
[v1]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[v1]
[v2, ==, VariableLiveness, ., READ]
[v2]
[VariableLiveness, ., READ]
[VariableLiveness]
[VariableLiveness, ., READ]
[VariableLiveness]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[Token, ., HOOK]
[Token]
[isVariableReadBeforeKill, (, n, ., getFirstChild, (, ), ,, variable, )]
[n, ., getFirstChild, (, )]
[n]
[variable]
[first, !=, VariableLiveness, ., MAYBE_LIVE]
[first]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[first]
[checkHookBranchReadBeforeKill, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, n, ., getLastChild, (, ), ,, variable, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[variable]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[isVariableReadBeforeKill, (, child, ,, variable, )]
[child]
[variable]
[state, !=, VariableLiveness, ., MAYBE_LIVE]
[state]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[state]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
[isVariableReadBeforeKill, (, trueCase, ,, variable, )]
[trueCase]
[variable]
[isVariableReadBeforeKill, (, falseCase, ,, variable, )]
[falseCase]
[variable]
[v1, ==, VariableLiveness, ., READ, ||, v2, ==, VariableLiveness, ., READ]
[v1, ==, VariableLiveness, ., READ]
[v1]
[VariableLiveness, ., READ]
[VariableLiveness]
[v2, ==, VariableLiveness, ., READ]
[v2]
[VariableLiveness, ., READ]
[VariableLiveness]
[VariableLiveness, ., READ]
[VariableLiveness]
[v1, ==, VariableLiveness, ., KILL, &&, v2, ==, VariableLiveness, ., KILL]
[v1, ==, VariableLiveness, ., KILL]
[v1]
[VariableLiveness, ., KILL]
[VariableLiveness]
[v2, ==, VariableLiveness, ., KILL]
[v2]
[VariableLiveness, ., KILL]
[VariableLiveness]
[VariableLiveness, ., KILL]
[VariableLiveness]
[VariableLiveness, ., MAYBE_LIVE]
[VariableLiveness]
