[CHEBYSHEV_COEFFICIENTS]
[new, ArrayList, <, BigFraction, >, (, )]
[CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[CHEBYSHEV_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, )]
[CHEBYSHEV_COEFFICIENTS]
[BigFraction, ., ZERO]
[BigFraction]
[CHEBYSHEV_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[CHEBYSHEV_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[HERMITE_COEFFICIENTS]
[new, ArrayList, <, BigFraction, >, (, )]
[HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[HERMITE_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, )]
[HERMITE_COEFFICIENTS]
[BigFraction, ., ZERO]
[BigFraction]
[HERMITE_COEFFICIENTS, ., add, (, BigFraction, ., TWO, )]
[HERMITE_COEFFICIENTS]
[BigFraction, ., TWO]
[BigFraction]
[LAGUERRE_COEFFICIENTS]
[new, ArrayList, <, BigFraction, >, (, )]
[LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[LAGUERRE_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[LAGUERRE_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[LAGUERRE_COEFFICIENTS, ., add, (, BigFraction, ., MINUS_ONE, )]
[LAGUERRE_COEFFICIENTS]
[BigFraction, ., MINUS_ONE]
[BigFraction]
[LEGENDRE_COEFFICIENTS]
[new, ArrayList, <, BigFraction, >, (, )]
[LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[LEGENDRE_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ZERO, )]
[LEGENDRE_COEFFICIENTS]
[BigFraction, ., ZERO]
[BigFraction]
[LEGENDRE_COEFFICIENTS, ., add, (, BigFraction, ., ONE, )]
[LEGENDRE_COEFFICIENTS]
[BigFraction, ., ONE]
[BigFraction]
[JACOBI_COEFFICIENTS]
[new, HashMap, <, JacobiKey, ,, List, <, BigFraction, >, >, (, )]
[buildPolynomial, (, degree, ,, CHEBYSHEV_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }, }, )]
[degree]
[CHEBYSHEV_COEFFICIENTS]
[new, RecurrenceCoefficientsGenerator, (, ), {, private, final, BigFraction, [, ], coeffs, =, {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, BigFraction, ., ONE, }, ;, public, BigFraction, [, ], generate, (, int, k, ), {, return, coeffs, ;, }, }]
[{, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, BigFraction, ., ONE, }]
[BigFraction, ., ZERO]
[BigFraction]
[BigFraction, ., TWO]
[BigFraction]
[BigFraction, ., ONE]
[BigFraction]
[coeffs]
[buildPolynomial, (, degree, ,, HERMITE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }, ;, }, }, )]
[degree]
[HERMITE_COEFFICIENTS]
[new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }, ;, }, }]
[new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }]
[{, BigFraction, ., ZERO, ,, BigFraction, ., TWO, ,, new, BigFraction, (, 2, *, k, ), }]
[BigFraction, ., ZERO]
[BigFraction]
[BigFraction, ., TWO]
[BigFraction]
[new, BigFraction, (, 2, *, k, )]
[2, *, k]
[2]
[k]
[buildPolynomial, (, degree, ,, LAGUERRE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, )]
[degree]
[LAGUERRE_COEFFICIENTS]
[new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }]
[k, +, 1]
[k]
[1]
[new, BigFraction, [, ], {, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }]
[{, new, BigFraction, (, 2, *, k, +, 1, ,, kP1, ), ,, new, BigFraction, (, -, 1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }]
[new, BigFraction, (, 2, *, k, +, 1, ,, kP1, )]
[2, *, k, +, 1]
[2, *, k]
[2]
[k]
[1]
[kP1]
[new, BigFraction, (, -, 1, ,, kP1, )]
[-, 1]
[1]
[kP1]
[new, BigFraction, (, k, ,, kP1, )]
[k]
[kP1]
[buildPolynomial, (, degree, ,, LEGENDRE_COEFFICIENTS, ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }, )]
[degree]
[LEGENDRE_COEFFICIENTS]
[new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, final, int, kP1, =, k, +, 1, ;, return, new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }, ;, }, }]
[k, +, 1]
[k]
[1]
[new, BigFraction, [, ], {, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }]
[{, BigFraction, ., ZERO, ,, new, BigFraction, (, k, +, kP1, ,, kP1, ), ,, new, BigFraction, (, k, ,, kP1, ), }]
[BigFraction, ., ZERO]
[BigFraction]
[new, BigFraction, (, k, +, kP1, ,, kP1, )]
[k, +, kP1]
[k]
[kP1]
[kP1]
[new, BigFraction, (, k, ,, kP1, )]
[k]
[kP1]
[new, JacobiKey, (, v, ,, w, )]
[v]
[w]
[!, JACOBI_COEFFICIENTS, ., containsKey, (, key, )]
[JACOBI_COEFFICIENTS, ., containsKey, (, key, )]
[JACOBI_COEFFICIENTS]
[key]
[new, ArrayList, <, BigFraction, >, (, )]
[JACOBI_COEFFICIENTS, ., put, (, key, ,, list, )]
[JACOBI_COEFFICIENTS]
[key]
[list]
[list, ., add, (, BigFraction, ., ONE, )]
[list]
[BigFraction, ., ONE]
[BigFraction]
[list, ., add, (, new, BigFraction, (, v, -, w, ,, 2, ), )]
[list]
[new, BigFraction, (, v, -, w, ,, 2, )]
[v, -, w]
[v]
[w]
[2]
[list, ., add, (, new, BigFraction, (, 2, +, v, +, w, ,, 2, ), )]
[list]
[new, BigFraction, (, 2, +, v, +, w, ,, 2, )]
[2, +, v, +, w]
[2, +, v]
[2]
[v]
[w]
[2]
[buildPolynomial, (, degree, ,, JACOBI_COEFFICIENTS, ., get, (, key, ), ,, new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }, )]
[degree]
[JACOBI_COEFFICIENTS, ., get, (, key, )]
[JACOBI_COEFFICIENTS]
[key]
[new, RecurrenceCoefficientsGenerator, (, ), {, public, BigFraction, [, ], generate, (, int, k, ), {, k, ++, ;, final, int, kvw, =, k, +, v, +, w, ;, final, int, twoKvw, =, kvw, +, k, ;, final, int, twoKvwM1, =, twoKvw, -, 1, ;, final, int, twoKvwM2, =, twoKvw, -, 2, ;, final, int, den, =, 2, *, k, *, kvw, *, twoKvwM2, ;, return, new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }, ;, }, }]
[k, ++]
[k]
[k, +, v, +, w]
[k, +, v]
[k]
[v]
[w]
[kvw, +, k]
[kvw]
[k]
[twoKvw, -, 1]
[twoKvw]
[1]
[twoKvw, -, 2]
[twoKvw]
[2]
[2, *, k, *, kvw, *, twoKvwM2]
[2, *, k, *, kvw]
[2, *, k]
[2]
[k]
[kvw]
[twoKvwM2]
[new, BigFraction, [, ], {, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }]
[{, new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, ), ,, new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, ), ,, new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, ), }]
[new, BigFraction, (, twoKvwM1, *, (, v, *, v, -, w, *, w, ), ,, den, )]
[twoKvwM1, *, (, v, *, v, -, w, *, w, )]
[twoKvwM1]
[(, v, *, v, -, w, *, w, )]
[v, *, v, -, w, *, w]
[v, *, v]
[v]
[v]
[w, *, w]
[w]
[w]
[den]
[new, BigFraction, (, twoKvwM1, *, twoKvw, *, twoKvwM2, ,, den, )]
[twoKvwM1, *, twoKvw, *, twoKvwM2]
[twoKvwM1, *, twoKvw]
[twoKvwM1]
[twoKvw]
[twoKvwM2]
[den]
[new, BigFraction, (, 2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw, ,, den, )]
[2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, ), *, twoKvw]
[2, *, (, k, +, v, -, 1, ), *, (, k, +, w, -, 1, )]
[2, *, (, k, +, v, -, 1, )]
[2]
[(, k, +, v, -, 1, )]
[k, +, v, -, 1]
[k, +, v]
[k]
[v]
[1]
[(, k, +, w, -, 1, )]
[k, +, w, -, 1]
[k, +, w]
[k]
[w]
[1]
[twoKvw]
[den]
[this, ., v]
[this]
[v]
[this, ., w]
[this]
[w]
[(, v, <<, 16, ), ^, w]
[(, v, <<, 16, )]
[v, <<, 16]
[v]
[16]
[w]
[(, key, ==, null, ), ||, !, (, key, instanceof, JacobiKey, )]
[(, key, ==, null, )]
[key, ==, null]
[key]
[null]
[!, (, key, instanceof, JacobiKey, )]
[(, key, instanceof, JacobiKey, )]
[key, instanceof, JacobiKey]
[key]
[false]
[(, JacobiKey, ), key]
[key]
[(, v, ==, otherK, ., v, ), &&, (, w, ==, otherK, ., w, )]
[(, v, ==, otherK, ., v, )]
[v, ==, otherK, ., v]
[v]
[otherK, ., v]
[otherK]
[(, w, ==, otherK, ., w, )]
[w, ==, otherK, ., w]
[w]
[otherK, ., w]
[otherK]
[coefficients, ., length]
[coefficients]
[new, double, [, dp1, ]]
[dp1]
[new, int, [, dp1, ], [, dp1, ]]
[dp1]
[dp1]
[0]
[i, <, dp1]
[i]
[dp1]
[i, ++]
[i]
[0]
[j, <=, i]
[j]
[i]
[j, ++]
[j]
[coeff, [, i, ], [, j, ]]
[coeff, [, i, ]]
[coeff]
[i]
[j]
[(, int, ), CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, )]
[CombinatoricsUtils, ., binomialCoefficient, (, i, ,, j, )]
[CombinatoricsUtils]
[i]
[j]
[0]
[i, <, dp1]
[i]
[dp1]
[i, ++]
[i]
[newCoefficients, [, 0, ]]
[newCoefficients]
[0]
[coefficients, [, i, ], *, FastMath, ., pow, (, shift, ,, i, )]
[coefficients, [, i, ]]
[coefficients]
[i]
[FastMath, ., pow, (, shift, ,, i, )]
[FastMath]
[shift]
[i]
[dp1, -, 1]
[dp1]
[1]
[0]
[i, <, d]
[i]
[d]
[i, ++]
[i]
[i]
[j, <, d]
[j]
[d]
[j, ++]
[j]
[newCoefficients, [, i, +, 1, ]]
[newCoefficients]
[i, +, 1]
[i]
[1]
[coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ], *, FastMath, ., pow, (, shift, ,, j, -, i, )]
[coeff, [, j, +, 1, ], [, j, -, i, ], *, coefficients, [, j, +, 1, ]]
[coeff, [, j, +, 1, ], [, j, -, i, ]]
[coeff, [, j, +, 1, ]]
[coeff]
[j, +, 1]
[j]
[1]
[j, -, i]
[j]
[i]
[coefficients, [, j, +, 1, ]]
[coefficients]
[j, +, 1]
[j]
[1]
[FastMath, ., pow, (, shift, ,, j, -, i, )]
[FastMath]
[shift]
[j, -, i]
[j]
[i]
[newCoefficients]
[(, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), ), -, 1]
[(, int, ), FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), )]
[FastMath, ., floor, (, FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), ), )]
[FastMath]
[FastMath, ., sqrt, (, 2, *, coefficients, ., size, (, ), )]
[FastMath]
[2, *, coefficients, ., size, (, )]
[2]
[coefficients, ., size, (, )]
[coefficients]
[1]
[PolynomialsUtils, ., class]
[degree, >, maxDegree]
[degree]
[maxDegree]
[computeUpToDegree, (, degree, ,, maxDegree, ,, generator, ,, coefficients, )]
[degree]
[maxDegree]
[generator]
[coefficients]
[degree, *, (, degree, +, 1, ), /, 2]
[degree, *, (, degree, +, 1, )]
[degree]
[(, degree, +, 1, )]
[degree, +, 1]
[degree]
[1]
[2]
[new, double, [, degree, +, 1, ]]
[degree, +, 1]
[degree]
[1]
[0]
[i, <=, degree]
[i]
[degree]
[++, i]
[i]
[a, [, i, ]]
[a]
[i]
[coefficients, ., get, (, start, +, i, ), ., doubleValue, (, )]
[coefficients, ., get, (, start, +, i, )]
[coefficients]
[start, +, i]
[start]
[i]
[new, PolynomialFunction, (, a, )]
[a]
[(, maxDegree, -, 1, ), *, maxDegree, /, 2]
[(, maxDegree, -, 1, ), *, maxDegree]
[(, maxDegree, -, 1, )]
[maxDegree, -, 1]
[maxDegree]
[1]
[maxDegree]
[2]
[maxDegree]
[k, <, degree]
[k]
[degree]
[++, k]
[k]
[startK]
[startK]
[k]
[generator, ., generate, (, k, )]
[generator]
[k]
[coefficients, ., get, (, startK, )]
[coefficients]
[startK]
[coefficients, ., get, (, startKm1, )]
[coefficients]
[startKm1]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), )]
[coefficients]
[ck, ., multiply, (, ai, [, 0, ], ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), )]
[ck, ., multiply, (, ai, [, 0, ], )]
[ck]
[ai, [, 0, ]]
[ai]
[0]
[ckm1, ., multiply, (, ai, [, 2, ], )]
[ckm1]
[ai, [, 2, ]]
[ai]
[2]
[1]
[i, <, k]
[i]
[k]
[++, i]
[i]
[ck]
[ck]
[coefficients, ., get, (, startK, +, i, )]
[coefficients]
[startK, +, i]
[startK]
[i]
[ckm1]
[coefficients, ., get, (, startKm1, +, i, )]
[coefficients]
[startKm1, +, i]
[startKm1]
[i]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), ), )]
[coefficients]
[ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), ., subtract, (, ckm1, ., multiply, (, ai, [, 2, ], ), )]
[ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), )]
[ck, ., multiply, (, ai, [, 0, ], )]
[ck]
[ai, [, 0, ]]
[ai]
[0]
[ckPrev, ., multiply, (, ai, [, 1, ], )]
[ckPrev]
[ai, [, 1, ]]
[ai]
[1]
[ckm1, ., multiply, (, ai, [, 2, ], )]
[ckm1]
[ai, [, 2, ]]
[ai]
[2]
[ck]
[ck]
[coefficients, ., get, (, startK, +, k, )]
[coefficients]
[startK, +, k]
[startK]
[k]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), ), )]
[coefficients]
[ck, ., multiply, (, ai, [, 0, ], ), ., add, (, ckPrev, ., multiply, (, ai, [, 1, ], ), )]
[ck, ., multiply, (, ai, [, 0, ], )]
[ck]
[ai, [, 0, ]]
[ai]
[0]
[ckPrev, ., multiply, (, ai, [, 1, ], )]
[ckPrev]
[ai, [, 1, ]]
[ai]
[1]
[coefficients, ., add, (, ck, ., multiply, (, ai, [, 1, ], ), )]
[coefficients]
[ck, ., multiply, (, ai, [, 1, ], )]
[ck]
[ai, [, 1, ]]
[ai]
[1]
