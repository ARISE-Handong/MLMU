["pow"]
[new, Dfp, [, 2, ]]
[2]
[true]
[0]
[0]
[buf]
[new, char, [, a, ., length, (, ), ]]
[a, ., length, (, )]
[a]
[0]
[i, <, buf, ., length]
[i]
[buf, ., length]
[buf]
[i, ++]
[i]
[buf, [, i, ]]
[buf]
[i]
[a, ., charAt, (, i, )]
[a]
[i]
[buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9']
[buf, [, i, ], >=, '1']
[buf, [, i, ]]
[buf]
[i]
['1']
[buf, [, i, ], <=, '9']
[buf, [, i, ]]
[buf]
[i]
['9']
[leading]
[false]
[buf, [, i, ], ==, '.']
[buf, [, i, ]]
[buf]
[i]
['.']
[sig]
[(, 400, -, sig, ), %, 4]
[(, 400, -, sig, )]
[400, -, sig]
[400]
[sig]
[4]
[leading]
[false]
[sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4]
[sig]
[(, field, ., getRadixDigits, (, ), /, 2, ), *, 4]
[(, field, ., getRadixDigits, (, ), /, 2, )]
[field, ., getRadixDigits, (, ), /, 2]
[field, ., getRadixDigits, (, )]
[field]
[2]
[4]
[sp]
[i]
[buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading]
[buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9']
[buf, [, i, ], >=, '0']
[buf, [, i, ]]
[buf]
[i]
['0']
[buf, [, i, ], <=, '9']
[buf, [, i, ]]
[buf]
[i]
['9']
[!, leading]
[leading]
[sig, ++]
[sig]
[result, [, 0, ]]
[result]
[0]
[field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), )]
[field]
[new, String, (, buf, ,, 0, ,, sp, )]
[buf]
[0]
[sp]
[0]
[i, <, buf, ., length]
[i]
[buf, ., length]
[buf]
[i, ++]
[i]
[buf, [, i, ]]
[buf]
[i]
[a, ., charAt, (, i, )]
[a]
[i]
[buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp]
[buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9']
[buf, [, i, ], >=, '0']
[buf, [, i, ]]
[buf]
[i]
['0']
[buf, [, i, ], <=, '9']
[buf, [, i, ]]
[buf]
[i]
['9']
[i, <, sp]
[i]
[sp]
[buf, [, i, ]]
[buf]
[i]
['0']
[result, [, 1, ]]
[result]
[1]
[field, ., newDfp, (, new, String, (, buf, ), )]
[field]
[new, String, (, buf, )]
[buf]
[result]
[new, Dfp, [, 2, ]]
[2]
[a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), )]
[a]
[a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, )]
[a]
[a, ., getRadixDigits, (, ), /, 2]
[a, ., getRadixDigits, (, )]
[a]
[2]
[result, [, 0, ]]
[result]
[0]
[a, ., add, (, shift, ), ., subtract, (, shift, )]
[a, ., add, (, shift, )]
[a]
[shift]
[shift]
[result, [, 1, ]]
[result]
[1]
[a, ., subtract, (, result, [, 0, ], )]
[a]
[result, [, 0, ]]
[result]
[0]
[result]
[new, Dfp, [, 2, ]]
[2]
[result, [, 1, ]]
[result]
[1]
[a, [, 0, ], ., getZero, (, )]
[a, [, 0, ]]
[a]
[0]
[result, [, 0, ]]
[result]
[0]
[a, [, 0, ], ., multiply, (, b, [, 0, ], )]
[a, [, 0, ]]
[a]
[0]
[b, [, 0, ]]
[b]
[0]
[result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], )]
[result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE]
[result, [, 0, ], ., classify, (, )]
[result, [, 0, ]]
[result]
[0]
[Dfp, ., INFINITE]
[Dfp]
[result, [, 0, ], ., equals, (, result, [, 1, ], )]
[result, [, 0, ]]
[result]
[0]
[result, [, 1, ]]
[result]
[1]
[result]
[result, [, 1, ]]
[result]
[1]
[a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), )]
[a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), )]
[a, [, 0, ], ., multiply, (, b, [, 1, ], )]
[a, [, 0, ]]
[a]
[0]
[b, [, 1, ]]
[b]
[1]
[a, [, 1, ], ., multiply, (, b, [, 0, ], )]
[a, [, 1, ]]
[a]
[1]
[b, [, 0, ]]
[b]
[0]
[a, [, 1, ], ., multiply, (, b, [, 1, ], )]
[a, [, 1, ]]
[a]
[1]
[b, [, 1, ]]
[b]
[1]
[result]
[result]
[new, Dfp, [, 2, ]]
[2]
[result, [, 0, ]]
[result]
[0]
[a, [, 0, ], ., divide, (, b, [, 0, ], )]
[a, [, 0, ]]
[a]
[0]
[b, [, 0, ]]
[b]
[0]
[result, [, 1, ]]
[result]
[1]
[a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), )]
[a, [, 1, ], ., multiply, (, b, [, 0, ], )]
[a, [, 1, ]]
[a]
[1]
[b, [, 0, ]]
[b]
[0]
[a, [, 0, ], ., multiply, (, b, [, 1, ], )]
[a, [, 0, ]]
[a]
[0]
[b, [, 1, ]]
[b]
[1]
[result, [, 1, ]]
[result]
[1]
[result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), ), )]
[result, [, 1, ]]
[result]
[1]
[b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), )]
[b, [, 0, ], ., multiply, (, b, [, 0, ], )]
[b, [, 0, ]]
[b]
[0]
[b, [, 0, ]]
[b]
[0]
[b, [, 0, ], ., multiply, (, b, [, 1, ], )]
[b, [, 0, ]]
[b]
[0]
[b, [, 1, ]]
[b]
[1]
[result]
[false]
[new, Dfp, [, 2, ]]
[2]
[new, Dfp, [, 2, ]]
[2]
[result, [, 0, ]]
[result]
[0]
[base, [, 0, ], ., getOne, (, )]
[base, [, 0, ]]
[base]
[0]
[result, [, 1, ]]
[result]
[1]
[base, [, 0, ], ., getZero, (, )]
[base, [, 0, ]]
[base]
[0]
[a, ==, 0]
[a]
[0]
[result, [, 0, ], ., add, (, result, [, 1, ], )]
[result, [, 0, ]]
[result]
[0]
[result, [, 1, ]]
[result]
[1]
[a, <, 0]
[a]
[0]
[invert]
[true]
[a]
[-, a]
[a]
[r, [, 0, ]]
[r]
[0]
[new, Dfp, (, base, [, 0, ], )]
[base, [, 0, ]]
[base]
[0]
[r, [, 1, ]]
[r]
[1]
[new, Dfp, (, base, [, 1, ], )]
[base, [, 1, ]]
[base]
[1]
[1]
[true]
[prevtrial]
[trial]
[trial]
[trial, *, 2]
[trial]
[2]
[trial, >, a]
[trial]
[a]
[r]
[splitMult, (, r, ,, r, )]
[r]
[r]
[trial]
[prevtrial]
[a]
[trial]
[result]
[splitMult, (, result, ,, r, )]
[result]
[r]
[a, >=, 1]
[a]
[1]
[result, [, 0, ]]
[result]
[0]
[result, [, 0, ], ., add, (, result, [, 1, ], )]
[result, [, 0, ]]
[result]
[0]
[result, [, 1, ]]
[result]
[1]
[invert]
[result, [, 0, ]]
[result]
[0]
[base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], )]
[base, [, 0, ], ., getOne, (, )]
[base, [, 0, ]]
[base]
[0]
[result, [, 0, ]]
[result]
[0]
[result, [, 0, ]]
[result]
[0]
[false]
[base, ., getOne, (, )]
[base]
[a, ==, 0]
[a]
[0]
[result]
[a, <, 0]
[a]
[0]
[invert]
[true]
[a]
[-, a]
[a]
[new, Dfp, (, base, )]
[base]
[1]
[prevr]
[new, Dfp, (, r, )]
[r]
[prevtrial]
[trial]
[r]
[r, ., multiply, (, r, )]
[r]
[r]
[trial]
[trial, *, 2]
[trial]
[2]
[a, >, trial]
[a]
[trial]
[r]
[prevr]
[trial]
[prevtrial]
[a]
[a, -, trial]
[a]
[trial]
[result]
[result, ., multiply, (, r, )]
[result]
[r]
[a, >=, 1]
[a]
[1]
[invert]
[result]
[base, ., getOne, (, ), ., divide, (, result, )]
[base, ., getOne, (, )]
[base]
[result]
[base, ., newInstance, (, result, )]
[base]
[result]
[a, ., rint, (, )]
[a]
[a, ., subtract, (, inta, )]
[a]
[inta]
[inta, ., intValue, (, )]
[inta]
[ia, >, 2147483646]
[ia]
[2147483646]
[a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, )]
[a]
[(, byte, ), 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[ia, <, -, 2147483646]
[ia]
[-, 2147483646]
[2147483646]
[a, ., newInstance, (, )]
[a]
[splitPow, (, a, ., getField, (, ), ., getESplit, (, ), ,, ia, )]
[a, ., getField, (, ), ., getESplit, (, )]
[a, ., getField, (, )]
[a]
[ia]
[expInternal, (, fraca, )]
[fraca]
[einta, ., multiply, (, efraca, )]
[einta]
[efraca]
[a, ., getOne, (, )]
[a]
[a, ., getOne, (, )]
[a]
[a, ., getOne, (, )]
[a]
[new, Dfp, (, y, )]
[y]
[1]
[i, <, 90]
[i]
[90]
[i, ++]
[i]
[x]
[x, ., multiply, (, a, )]
[x]
[a]
[fact]
[fact, ., divide, (, i, )]
[fact]
[i]
[y]
[y, ., add, (, x, ., multiply, (, fact, ), )]
[y]
[x, ., multiply, (, fact, )]
[x]
[fact]
[y, ., equals, (, py, )]
[y]
[py]
[py]
[new, Dfp, (, y, )]
[y]
[y]
[0]
[a, ., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, )]
[a, ., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), )]
[a, ., equals, (, a, ., getZero, (, ), )]
[a]
[a, ., getZero, (, )]
[a]
[a, ., lessThan, (, a, ., getZero, (, ), )]
[a]
[a, ., getZero, (, )]
[a]
[a, ., isNaN, (, )]
[a]
[a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[a, ., getField, (, )]
[a]
[DfpField, ., FLAG_INVALID]
[DfpField]
[a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), )]
[a]
[DfpField, ., FLAG_INVALID]
[DfpField]
["ln"]
[a]
[a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[a]
[(, byte, ), 1]
[1]
[Dfp, ., QNAN]
[Dfp]
[a, ., classify, (, ), ==, Dfp, ., INFINITE]
[a, ., classify, (, )]
[a]
[Dfp, ., INFINITE]
[Dfp]
[a]
[x]
[new, Dfp, (, a, )]
[a]
[lr]
[x, ., log10K, (, )]
[x]
[x]
[x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), )]
[x]
[pow, (, a, ., newInstance, (, 10000, ), ,, lr, )]
[a, ., newInstance, (, 10000, )]
[a]
[10000]
[lr]
[ix]
[x, ., floor, (, ), ., intValue, (, )]
[x, ., floor, (, )]
[x]
[ix, >, 2]
[ix]
[2]
[ix]
[1]
[p2, ++]
[p2]
[split, (, x, )]
[x]
[new, Dfp, [, 2, ]]
[2]
[spy, [, 0, ]]
[spy]
[0]
[pow, (, a, ., getTwo, (, ), ,, p2, )]
[a, ., getTwo, (, )]
[a]
[p2]
[spx, [, 0, ]]
[spx]
[0]
[spx, [, 0, ], ., divide, (, spy, [, 0, ], )]
[spx, [, 0, ]]
[spx]
[0]
[spy, [, 0, ]]
[spy]
[0]
[spx, [, 1, ]]
[spx]
[1]
[spx, [, 1, ], ., divide, (, spy, [, 0, ], )]
[spx, [, 1, ]]
[spx]
[1]
[spy, [, 0, ]]
[spy]
[0]
[spy, [, 0, ]]
[spy]
[0]
[a, ., newInstance, (, "1.33333", )]
[a]
["1.33333"]
[spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], )]
[spx, [, 0, ], ., add, (, spx, [, 1, ], )]
[spx, [, 0, ]]
[spx]
[0]
[spx, [, 1, ]]
[spx]
[1]
[spy, [, 0, ]]
[spy]
[0]
[spx, [, 0, ]]
[spx]
[0]
[spx, [, 0, ], ., divide, (, 2, )]
[spx, [, 0, ]]
[spx]
[0]
[2]
[spx, [, 1, ]]
[spx]
[1]
[spx, [, 1, ], ., divide, (, 2, )]
[spx, [, 1, ]]
[spx]
[1]
[2]
[p2, ++]
[p2]
[logInternal, (, spx, )]
[spx]
[spx, [, 0, ]]
[spx]
[0]
[a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, ), )]
[a]
[new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, )]
[new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, )]
[new, StringBuilder, (, )]
[p2, +, 4, *, lr]
[p2]
[4, *, lr]
[4]
[lr]
[spx, [, 1, ]]
[spx]
[1]
[a, ., getZero, (, )]
[a]
[spy]
[splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, )]
[a, ., getField, (, ), ., getLn2Split, (, )]
[a, ., getField, (, )]
[a]
[spx]
[spz, [, 0, ]]
[spz]
[0]
[spz, [, 0, ], ., add, (, spy, [, 0, ], )]
[spz, [, 0, ]]
[spz]
[0]
[spy, [, 0, ]]
[spy]
[0]
[spz, [, 1, ]]
[spz]
[1]
[spz, [, 1, ], ., add, (, spy, [, 1, ], )]
[spz, [, 1, ]]
[spz]
[1]
[spy, [, 1, ]]
[spy]
[1]
[spx, [, 0, ]]
[spx]
[0]
[a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, ), )]
[a]
[new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, )]
[new, StringBuilder, (, ), ., append, (, 4, *, lr, )]
[new, StringBuilder, (, )]
[4, *, lr]
[4]
[lr]
[spx, [, 1, ]]
[spx]
[1]
[a, ., getZero, (, )]
[a]
[spy]
[splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, )]
[a, ., getField, (, ), ., getLn5Split, (, )]
[a, ., getField, (, )]
[a]
[spx]
[spz, [, 0, ]]
[spz]
[0]
[spz, [, 0, ], ., add, (, spy, [, 0, ], )]
[spz, [, 0, ]]
[spz]
[0]
[spy, [, 0, ]]
[spy]
[0]
[spz, [, 1, ]]
[spz]
[1]
[spz, [, 1, ], ., add, (, spy, [, 1, ], )]
[spz, [, 1, ]]
[spz]
[1]
[spy, [, 1, ]]
[spy]
[1]
[a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1, ], ), )]
[a]
[spz, [, 0, ], ., add, (, spz, [, 1, ], )]
[spz, [, 0, ]]
[spz]
[0]
[spz, [, 1, ]]
[spz]
[1]
[a, [, 0, ], ., divide, (, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), )]
[a, [, 0, ], ., divide, (, 4, )]
[a, [, 0, ]]
[a]
[0]
[4]
[a, [, 1, ], ., divide, (, 4, )]
[a, [, 1, ]]
[a]
[1]
[4]
[t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), )]
[t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), )]
[t]
[a, [, 0, ], ., newInstance, (, "-0.25", )]
[a, [, 0, ]]
[a]
[0]
["-0.25"]
[t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), )]
[t]
[a, [, 0, ], ., newInstance, (, "0.25", )]
[a, [, 0, ]]
[a]
[0]
["0.25"]
[new, Dfp, (, x, )]
[x]
[new, Dfp, (, x, )]
[x]
[new, Dfp, (, y, )]
[y]
[1]
[0]
[i, <, 10000]
[i]
[10000]
[i, ++]
[i]
[num]
[num, ., multiply, (, x, )]
[num]
[x]
[num]
[num, ., multiply, (, x, )]
[num]
[x]
[den]
[den, +, 2]
[den]
[2]
[t]
[num, ., divide, (, den, )]
[num]
[den]
[y]
[y, ., add, (, t, )]
[y]
[t]
[y, ., equals, (, py, )]
[y]
[py]
[py]
[new, Dfp, (, y, )]
[y]
[y]
[y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), )]
[y]
[a, [, 0, ], ., getTwo, (, )]
[a, [, 0, ]]
[a]
[0]
[split, (, y, )]
[y]
[x, ., getField, (, ), ., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, )]
[x, ., getField, (, ), ., getRadixDigits, (, )]
[x, ., getField, (, )]
[x]
[y, ., getField, (, ), ., getRadixDigits, (, )]
[y, ., getField, (, )]
[y]
[x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[x, ., getField, (, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[x, ., newInstance, (, x, ., getZero, (, ), )]
[x]
[x, ., getZero, (, )]
[x]
[result, ., nans]
[result]
[Dfp, ., QNAN]
[Dfp]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[POW_TRAP]
[x]
[result]
[x, ., getZero, (, )]
[x]
[x, ., getOne, (, )]
[x]
[x, ., getTwo, (, )]
[x]
[false]
[y, ., equals, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, one, )]
[x]
[one]
[y, ., equals, (, one, )]
[y]
[one]
[x, ., isNaN, (, )]
[x]
[x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[x, ., getField, (, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[POW_TRAP]
[x]
[x]
[x]
[x, ., isNaN, (, ), ||, y, ., isNaN, (, )]
[x, ., isNaN, (, )]
[x]
[y, ., isNaN, (, )]
[y]
[x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[x, ., getField, (, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[POW_TRAP]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., QNAN]
[Dfp]
[x, ., equals, (, zero, )]
[x]
[zero]
[Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (, zero, )]
[Dfp, ., copysign, (, one, ,, x, )]
[Dfp]
[one]
[x]
[zero]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), )]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, )]
[y, ., classify, (, ), ==, Dfp, ., FINITE]
[y, ., classify, (, )]
[y]
[Dfp, ., FINITE]
[Dfp]
[y, ., rint, (, ), ., equals, (, y, )]
[y, ., rint, (, )]
[y]
[y]
[!, y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, )]
[y]
[two]
[zero]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, zero, ., negate, (, ), )]
[x]
[zero, ., negate, (, )]
[zero]
[x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), )]
[x]
[x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, )]
[x]
[(, byte, ), -, 1]
[-, 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), )]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[x, ., lessThan, (, zero, )]
[x]
[zero]
[x]
[x, ., negate, (, )]
[x]
[invert]
[true]
[x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE]
[x, ., greaterThan, (, one, )]
[x]
[one]
[y, ., classify, (, ), ==, Dfp, ., INFINITE]
[y, ., classify, (, )]
[y]
[Dfp, ., INFINITE]
[Dfp]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[y]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE]
[x, ., lessThan, (, one, )]
[x]
[one]
[y, ., classify, (, ), ==, Dfp, ., INFINITE]
[y, ., classify, (, )]
[y]
[Dfp, ., INFINITE]
[Dfp]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), )]
[x]
[Dfp, ., copysign, (, y, ,, one, )]
[Dfp]
[y]
[one]
[x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE]
[x, ., equals, (, one, )]
[x]
[one]
[y, ., classify, (, ), ==, Dfp, ., INFINITE]
[y, ., classify, (, )]
[y]
[Dfp, ., INFINITE]
[Dfp]
[x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[x, ., getField, (, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[POW_TRAP]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., QNAN]
[Dfp]
[x, ., classify, (, ), ==, Dfp, ., INFINITE]
[x, ., classify, (, )]
[x]
[Dfp, ., INFINITE]
[Dfp]
[invert]
[y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, )]
[y, ., classify, (, ), ==, Dfp, ., FINITE]
[y, ., classify, (, )]
[y]
[Dfp, ., FINITE]
[Dfp]
[y, ., rint, (, ), ., equals, (, y, )]
[y, ., rint, (, )]
[y]
[y]
[!, y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, )]
[y]
[two]
[zero]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), )]
[x]
[x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, )]
[x]
[(, byte, ), -, 1]
[-, 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[x, ., newInstance, (, zero, ., negate, (, ), )]
[x]
[zero, ., negate, (, )]
[zero]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), )]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., INFINITE]
[Dfp]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[y, ., greaterThan, (, zero, )]
[y]
[zero]
[x]
[x, ., newInstance, (, zero, )]
[x]
[zero]
[invert, &&, !, y, ., rint, (, ), ., equals, (, y, )]
[invert]
[!, y, ., rint, (, ), ., equals, (, y, )]
[y, ., rint, (, ), ., equals, (, y, )]
[y, ., rint, (, )]
[y]
[y]
[x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[x, ., getField, (, )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), )]
[x]
[DfpField, ., FLAG_INVALID]
[DfpField]
[POW_TRAP]
[x]
[x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[x]
[(, byte, ), 1]
[1]
[Dfp, ., QNAN]
[Dfp]
[y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), )]
[y, ., lessThan, (, x, ., newInstance, (, 100000000, ), )]
[y]
[x, ., newInstance, (, 100000000, )]
[x]
[100000000]
[y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), )]
[y]
[x, ., newInstance, (, -, 100000000, )]
[x]
[-, 100000000]
[100000000]
[y, ., rint, (, )]
[y]
[ui]
[u, ., intValue, (, )]
[u]
[y, ., subtract, (, u, )]
[y]
[u]
[v, ., unequal, (, zero, )]
[v]
[zero]
[v, ., multiply, (, log, (, x, ), )]
[v]
[log, (, x, )]
[x]
[a, ., divide, (, x, ., getField, (, ), ., getLn2, (, ), ), ., rint, (, )]
[a, ., divide, (, x, ., getField, (, ), ., getLn2, (, ), )]
[a]
[x, ., getField, (, ), ., getLn2, (, )]
[x, ., getField, (, )]
[x]
[a, ., subtract, (, b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), )]
[a]
[b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), )]
[b]
[x, ., getField, (, ), ., getLn2, (, )]
[x, ., getField, (, )]
[x]
[r]
[splitPow, (, split, (, x, ), ,, ui, )]
[split, (, x, )]
[x]
[ui]
[r]
[r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), )]
[r]
[pow, (, two, ,, b, ., intValue, (, ), )]
[two]
[b, ., intValue, (, )]
[b]
[r]
[r, ., multiply, (, exp, (, c, ), )]
[r]
[exp, (, c, )]
[c]
[r]
[splitPow, (, split, (, x, ), ,, ui, )]
[split, (, x, )]
[x]
[ui]
[r]
[exp, (, log, (, x, ), ., multiply, (, y, ), )]
[log, (, x, ), ., multiply, (, y, )]
[log, (, x, )]
[x]
[y]
[invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, )]
[invert, &&, y, ., rint, (, ), ., equals, (, y, )]
[invert]
[y, ., rint, (, ), ., equals, (, y, )]
[y, ., rint, (, )]
[y]
[y]
[!, y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, ), ., equals, (, zero, )]
[y, ., remainder, (, two, )]
[y]
[two]
[zero]
[r]
[r, ., negate, (, )]
[r]
[x, ., newInstance, (, r, )]
[x]
[r]
[a, [, 0, ], ., add, (, a, [, 1, ], )]
[a, [, 0, ]]
[a]
[0]
[a, [, 1, ]]
[a]
[1]
[c]
[c]
[c, ., multiply, (, c, )]
[c]
[c]
[y]
[a, [, 0, ], ., getOne, (, )]
[a, [, 0, ]]
[a]
[0]
[new, Dfp, (, y, )]
[y]
[3]
[i, <, 90]
[i]
[90]
[i]
[2]
[x]
[x, ., multiply, (, c, )]
[x]
[c]
[x]
[x, ., negate, (, )]
[x]
[fact]
[fact, ., divide, (, (, i, -, 1, ), *, i, )]
[fact]
[(, i, -, 1, ), *, i]
[(, i, -, 1, )]
[i, -, 1]
[i]
[1]
[i]
[y]
[y, ., add, (, x, ., multiply, (, fact, ), )]
[y]
[x, ., multiply, (, fact, )]
[x]
[fact]
[y, ., equals, (, py, )]
[y]
[py]
[py]
[new, Dfp, (, y, )]
[y]
[y]
[a, [, 0, ], ., getOne, (, )]
[a, [, 0, ]]
[a]
[0]
[one]
[one]
[a, [, 0, ], ., add, (, a, [, 1, ], )]
[a, [, 0, ]]
[a]
[0]
[a, [, 1, ]]
[a]
[1]
[c]
[c, ., multiply, (, c, )]
[c]
[c]
[one]
[new, Dfp, (, y, )]
[y]
[2]
[i, <, 90]
[i]
[90]
[i]
[2]
[x]
[x, ., multiply, (, c, )]
[x]
[c]
[x]
[x, ., negate, (, )]
[x]
[fact]
[fact, ., divide, (, (, i, -, 1, ), *, i, )]
[fact]
[(, i, -, 1, ), *, i]
[(, i, -, 1, )]
[i, -, 1]
[i]
[1]
[i]
[y]
[y, ., add, (, x, ., multiply, (, fact, ), )]
[y]
[x, ., multiply, (, fact, )]
[x]
[fact]
[y, ., equals, (, py, )]
[y]
[py]
[py]
[new, Dfp, (, y, )]
[y]
[y]
[a, ., getField, (, ), ., getPi, (, )]
[a, ., getField, (, )]
[a]
[a, ., getField, (, ), ., getZero, (, )]
[a, ., getField, (, )]
[a]
[false]
[a, ., remainder, (, pi, ., multiply, (, 2, ), )]
[a]
[pi, ., multiply, (, 2, )]
[pi]
[2]
[x, ., lessThan, (, zero, )]
[x]
[zero]
[x]
[x, ., negate, (, )]
[x]
[neg]
[true]
[x, ., greaterThan, (, pi, ., divide, (, 2, ), )]
[x]
[pi, ., divide, (, 2, )]
[pi]
[2]
[x]
[pi, ., subtract, (, x, )]
[pi]
[x]
[x, ., lessThan, (, pi, ., divide, (, 4, ), )]
[x]
[pi, ., divide, (, 4, )]
[pi]
[4]
[new, Dfp, [, 2, ]]
[2]
[c, [, 0, ]]
[c]
[0]
[x]
[c, [, 1, ]]
[c]
[1]
[zero]
[y]
[sinInternal, (, split, (, x, ), )]
[split, (, x, )]
[x]
[new, Dfp, [, 2, ]]
[2]
[a, ., getField, (, ), ., getPiSplit, (, )]
[a, ., getField, (, )]
[a]
[c, [, 0, ]]
[c]
[0]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, )]
[piSplit, [, 0, ], ., divide, (, 2, )]
[piSplit, [, 0, ]]
[piSplit]
[0]
[2]
[x]
[c, [, 1, ]]
[c]
[1]
[piSplit, [, 1, ], ., divide, (, 2, )]
[piSplit, [, 1, ]]
[piSplit]
[1]
[2]
[y]
[cosInternal, (, c, )]
[c]
[neg]
[y]
[y, ., negate, (, )]
[y]
[a, ., newInstance, (, y, )]
[a]
[y]
[a, ., getField, (, ), ., getPi, (, )]
[a, ., getField, (, )]
[a]
[a, ., getField, (, ), ., getZero, (, )]
[a, ., getField, (, )]
[a]
[false]
[a, ., remainder, (, pi, ., multiply, (, 2, ), )]
[a]
[pi, ., multiply, (, 2, )]
[pi]
[2]
[x, ., lessThan, (, zero, )]
[x]
[zero]
[x]
[x, ., negate, (, )]
[x]
[x, ., greaterThan, (, pi, ., divide, (, 2, ), )]
[x]
[pi, ., divide, (, 2, )]
[pi]
[2]
[x]
[pi, ., subtract, (, x, )]
[pi]
[x]
[neg]
[true]
[x, ., lessThan, (, pi, ., divide, (, 4, ), )]
[x]
[pi, ., divide, (, 4, )]
[pi]
[4]
[new, Dfp, [, 2, ]]
[2]
[c, [, 0, ]]
[c]
[0]
[x]
[c, [, 1, ]]
[c]
[1]
[zero]
[y]
[cosInternal, (, c, )]
[c]
[new, Dfp, [, 2, ]]
[2]
[a, ., getField, (, ), ., getPiSplit, (, )]
[a, ., getField, (, )]
[a]
[c, [, 0, ]]
[c]
[0]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, )]
[piSplit, [, 0, ], ., divide, (, 2, )]
[piSplit, [, 0, ]]
[piSplit]
[0]
[2]
[x]
[c, [, 1, ]]
[c]
[1]
[piSplit, [, 1, ], ., divide, (, 2, )]
[piSplit, [, 1, ]]
[piSplit]
[1]
[2]
[y]
[sinInternal, (, c, )]
[c]
[neg]
[y]
[y, ., negate, (, )]
[y]
[a, ., newInstance, (, y, )]
[a]
[y]
[sin, (, a, ), ., divide, (, cos, (, a, ), )]
[sin, (, a, )]
[a]
[cos, (, a, )]
[a]
[new, Dfp, (, a, )]
[a]
[new, Dfp, (, y, )]
[y]
[new, Dfp, (, y, )]
[y]
[3]
[i, <, 90]
[i]
[90]
[i]
[2]
[x]
[x, ., multiply, (, a, )]
[x]
[a]
[x]
[x, ., multiply, (, a, )]
[x]
[a]
[x]
[x, ., negate, (, )]
[x]
[y]
[y, ., add, (, x, ., divide, (, i, ), )]
[y]
[x, ., divide, (, i, )]
[x]
[i]
[y, ., equals, (, py, )]
[y]
[py]
[py]
[new, Dfp, (, y, )]
[y]
[y]
[a, ., getField, (, ), ., getZero, (, )]
[a, ., getField, (, )]
[a]
[a, ., getField, (, ), ., getOne, (, )]
[a, ., getField, (, )]
[a]
[a, ., getField, (, ), ., getSqr2Split, (, )]
[a, ., getField, (, )]
[a]
[a, ., getField, (, ), ., getPiSplit, (, )]
[a, ., getField, (, )]
[a]
[false]
[false]
[false]
[sqr2Split, [, 0, ], ., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], )]
[sqr2Split, [, 0, ], ., subtract, (, one, )]
[sqr2Split, [, 0, ]]
[sqr2Split]
[0]
[one]
[sqr2Split, [, 1, ]]
[sqr2Split]
[1]
[new, Dfp, (, a, )]
[a]
[x, ., lessThan, (, zero, )]
[x]
[zero]
[neg]
[true]
[x]
[x, ., negate, (, )]
[x]
[x, ., greaterThan, (, one, )]
[x]
[one]
[recp]
[true]
[x]
[one, ., divide, (, x, )]
[one]
[x]
[x, ., greaterThan, (, ty, )]
[x]
[ty]
[new, Dfp, [, 2, ]]
[2]
[sub]
[true]
[sty, [, 0, ]]
[sty]
[0]
[sqr2Split, [, 0, ], ., subtract, (, one, )]
[sqr2Split, [, 0, ]]
[sqr2Split]
[0]
[one]
[sty, [, 1, ]]
[sty]
[1]
[sqr2Split, [, 1, ]]
[sqr2Split]
[1]
[split, (, x, )]
[x]
[splitMult, (, xs, ,, sty, )]
[xs]
[sty]
[ds, [, 0, ]]
[ds]
[0]
[ds, [, 0, ], ., add, (, one, )]
[ds, [, 0, ]]
[ds]
[0]
[one]
[xs, [, 0, ]]
[xs]
[0]
[xs, [, 0, ], ., subtract, (, sty, [, 0, ], )]
[xs, [, 0, ]]
[xs]
[0]
[sty, [, 0, ]]
[sty]
[0]
[xs, [, 1, ]]
[xs]
[1]
[xs, [, 1, ], ., subtract, (, sty, [, 1, ], )]
[xs, [, 1, ]]
[xs]
[1]
[sty, [, 1, ]]
[sty]
[1]
[xs]
[splitDiv, (, xs, ,, ds, )]
[xs]
[ds]
[x]
[xs, [, 0, ], ., add, (, xs, [, 1, ], )]
[xs, [, 0, ]]
[xs]
[0]
[xs, [, 1, ]]
[xs]
[1]
[atanInternal, (, x, )]
[x]
[sub]
[y]
[y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), )]
[y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), )]
[y]
[piSplit, [, 0, ], ., divide, (, 8, )]
[piSplit, [, 0, ]]
[piSplit]
[0]
[8]
[piSplit, [, 1, ], ., divide, (, 8, )]
[piSplit, [, 1, ]]
[piSplit]
[1]
[8]
[recp]
[y]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide, (, 2, ), )]
[piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, )]
[piSplit, [, 0, ], ., divide, (, 2, )]
[piSplit, [, 0, ]]
[piSplit]
[0]
[2]
[y]
[piSplit, [, 1, ], ., divide, (, 2, )]
[piSplit, [, 1, ]]
[piSplit]
[1]
[2]
[neg]
[y]
[y, ., negate, (, )]
[y]
[a, ., newInstance, (, y, )]
[a]
[y]
[atan, (, a, ., divide, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ), )]
[a, ., divide, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), )]
[a]
[a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, )]
[a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), )]
[a, ., getOne, (, )]
[a]
[a, ., multiply, (, a, )]
[a]
[a]
[false]
[a, ., lessThan, (, a, ., getZero, (, ), )]
[a]
[a, ., getZero, (, )]
[a]
[negative]
[true]
[a]
[Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), )]
[Dfp]
[a]
[a, ., getOne, (, )]
[a]
[result]
[atan, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (, a, ), )]
[a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (, a, )]
[a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, )]
[a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), )]
[a, ., getOne, (, )]
[a]
[a, ., multiply, (, a, )]
[a]
[a]
[a]
[negative]
[result]
[a, ., getField, (, ), ., getPi, (, ), ., subtract, (, result, )]
[a, ., getField, (, ), ., getPi, (, )]
[a, ., getField, (, )]
[a]
[result]
[a, ., newInstance, (, result, )]
[a]
[result]
