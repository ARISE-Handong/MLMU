[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, !, input, ., isFunction, (, ), ;, }, }]
[!, input, ., isFunction, (, )]
[input, ., isFunction, (, )]
[input]
[this, ., compiler]
[this]
[compiler]
[this, ., locationAbstractionIdentifier]
[this]
[locationAbstractionMode]
[compiler]
[LocationAbstractionMode, ., DEGENERATE]
[LocationAbstractionMode]
[locationAbstractionIdentifier]
[DEGENERATE]
[locationAbstraction]
[new, DegenerateLocationAbstraction, (, )]
[VISIBILITY_BASED]
[locationAbstraction]
[createVisibilityAbstraction, (, externs, ,, root, )]
[externs]
[root]
[new, IllegalStateException, (, "Unrecognized location abstraction ", +, "identifier: ", +, locationAbstractionIdentifier, )]
["Unrecognized location abstraction ", +, "identifier: ", +, locationAbstractionIdentifier]
["Unrecognized location abstraction ", +, "identifier: "]
["Unrecognized location abstraction "]
["identifier: "]
[locationAbstractionIdentifier]
[new, VariableVisibilityAnalysis, (, compiler, )]
[compiler]
[variableVisibility, ., process, (, externs, ,, root, )]
[variableVisibility]
[externs]
[root]
[new, VariableUseDeclarationMap, (, compiler, )]
[compiler]
[variableMap, ., mapUses, (, root, )]
[variableMap]
[root]
[new, VisibilityLocationAbstraction, (, compiler, ,, variableVisibility, ,, variableMap, )]
[compiler]
[variableVisibility]
[variableMap]
[Preconditions, ., checkNotNull, (, locationAbstraction, )]
[Preconditions]
[locationAbstraction]
[Preconditions, ., checkArgument, (, !, nodeHasAncestor, (, destination, ,, source, ), )]
[Preconditions]
[!, nodeHasAncestor, (, destination, ,, source, )]
[nodeHasAncestor, (, destination, ,, source, )]
[destination]
[source]
[isPure, (, source, )]
[source]
[true]
[nodeHasCall, (, source, )]
[source]
[false]
[locationAbstraction, ., calculateLocationSummary, (, source, )]
[locationAbstraction]
[source]
[sourceLocationSummary, ., getModSet, (, )]
[sourceLocationSummary]
[!, sourceModSet, ., isEmpty, (, ), &&, !, nodesHaveSameControlFlow, (, source, ,, destination, )]
[!, sourceModSet, ., isEmpty, (, )]
[sourceModSet, ., isEmpty, (, )]
[sourceModSet]
[!, nodesHaveSameControlFlow, (, source, ,, destination, )]
[nodesHaveSameControlFlow, (, source, ,, destination, )]
[source]
[destination]
[false]
[sourceLocationSummary, ., getRefSet, (, )]
[sourceLocationSummary]
[environment, ., calculateEnvironment, (, )]
[environment]
[environmentNodes]
[nodeHasCall, (, environmentNode, )]
[environmentNode]
[false]
[locationAbstraction, ., calculateLocationSummary, (, environmentNodes, )]
[locationAbstraction]
[environmentNodes]
[environmentLocationSummary, ., getModSet, (, )]
[environmentLocationSummary]
[environmentLocationSummary, ., getRefSet, (, )]
[environmentLocationSummary]
[!, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, ), &&, !, environmentModSet, ., intersectsLocation, (, sourceModSet, )]
[!, environmentModSet, ., intersectsLocation, (, sourceRefSet, ), &&, !, environmentRefSet, ., intersectsLocation, (, sourceModSet, )]
[!, environmentModSet, ., intersectsLocation, (, sourceRefSet, )]
[environmentModSet, ., intersectsLocation, (, sourceRefSet, )]
[environmentModSet]
[sourceRefSet]
[!, environmentRefSet, ., intersectsLocation, (, sourceModSet, )]
[environmentRefSet, ., intersectsLocation, (, sourceModSet, )]
[environmentRefSet]
[sourceModSet]
[!, environmentModSet, ., intersectsLocation, (, sourceModSet, )]
[environmentModSet, ., intersectsLocation, (, sourceModSet, )]
[environmentModSet]
[sourceModSet]
[true]
[false]
[false]
[closestControlDependentAncestor, (, node1, )]
[node1]
[closestControlDependentAncestor, (, node2, )]
[node2]
[node1DeepestControlDependentBlock, ==, node2DeepestControlDependentBlock]
[node1DeepestControlDependentBlock]
[node2DeepestControlDependentBlock]
[node2DeepestControlDependentBlock, !=, null]
[node2DeepestControlDependentBlock]
[null]
[node2DeepestControlDependentBlock, ., isCase, (, )]
[node2DeepestControlDependentBlock]
[false]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, int, nodeType, =, input, ., getType, (, ), ;, return, nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE, ;, }, }]
[input, ., getType, (, )]
[input]
[nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK, ||, nodeType, ==, Token, ., CONTINUE]
[nodeType, ==, Token, ., RETURN, ||, nodeType, ==, Token, ., BREAK]
[nodeType, ==, Token, ., RETURN]
[nodeType]
[Token, ., RETURN]
[Token]
[nodeType, ==, Token, ., BREAK]
[nodeType]
[Token, ., BREAK]
[Token]
[nodeType, ==, Token, ., CONTINUE]
[nodeType]
[Token, ., CONTINUE]
[Token]
[!, NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, )]
[NodeUtil, ., has, (, node2DeepestControlDependentBlock, ,, isEarlyExitPredicate, ,, NOT_FUNCTION_PREDICATE, )]
[NodeUtil]
[node2DeepestControlDependentBlock]
[isEarlyExitPredicate]
[NOT_FUNCTION_PREDICATE]
[true]
[false]
[child, ., getParent, (, )]
[child]
[parent, ==, null]
[parent]
[null]
[false]
[Lists, ., newArrayList, (, parent, ., children, (, ), )]
[Lists]
[parent, ., children, (, )]
[parent]
[siblings, ., indexOf, (, child, )]
[siblings]
[child]
[parent, ., getType, (, )]
[parent]
[Token, ., IF]
[Token]
[Token, ., HOOK]
[Token]
[(, indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2, )]
[indexOfChildInParent, ==, 1, ||, indexOfChildInParent, ==, 2]
[indexOfChildInParent, ==, 1]
[indexOfChildInParent]
[1]
[indexOfChildInParent, ==, 2]
[indexOfChildInParent]
[2]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[true]
[Token, ., FOR]
[Token]
[indexOfChildInParent, !=, 0]
[indexOfChildInParent]
[0]
[Token, ., SWITCH]
[Token]
[indexOfChildInParent, >, 0]
[indexOfChildInParent]
[0]
[Token, ., AND]
[Token]
[true]
[Token, ., OR]
[Token]
[true]
[Token, ., FUNCTION]
[Token]
[true]
[false]
[isControlDependentChild, (, node, )]
[node]
[node]
[node, ., getAncestors, (, )]
[node]
[isControlDependentChild, (, ancestor, )]
[ancestor]
[ancestor]
[null]
[node, ., getAncestors, (, )]
[node]
[ancestor, ==, possibleAncestor]
[ancestor]
[possibleAncestor]
[true]
[false]
[NodeUtil, ., has, (, node, ,, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, ., isCall, (, ), ||, input, ., isNew, (, ), ;, }, }, ,, NOT_FUNCTION_PREDICATE, )]
[NodeUtil]
[node]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, ., isCall, (, ), ||, input, ., isNew, (, ), ;, }, }]
[input, ., isCall, (, ), ||, input, ., isNew, (, )]
[input, ., isCall, (, )]
[input]
[input, ., isNew, (, )]
[input]
[NOT_FUNCTION_PREDICATE]
[null]
[null]
[this, ., environment]
[this]
[environment]
[environment]
[this, ., modSet]
[this]
[modSet]
[this, ., refSet]
[this]
[refSet]
[modSet]
[refSet]
[getBottomLocation, (, )]
[getBottomLocation, (, )]
[nodes]
[calculateLocationSummary, (, node, )]
[node]
[modAccumulator]
[modAccumulator, ., join, (, nodeLocationSummary, ., getModSet, (, ), )]
[modAccumulator]
[nodeLocationSummary, ., getModSet, (, )]
[nodeLocationSummary]
[refAccumulator]
[refAccumulator, ., join, (, nodeLocationSummary, ., getRefSet, (, ), )]
[refAccumulator]
[nodeLocationSummary, ., getRefSet, (, )]
[nodeLocationSummary]
[new, LocationSummary, (, modAccumulator, ,, refAccumulator, )]
[modAccumulator]
[refAccumulator]
[new, DegenerateEffectLocation, (, )]
[new, DegenerateEffectLocation, (, )]
[NO_LOCATION]
[new, LocationSummary, (, calculateModSet, (, node, ), ,, calculateRefSet, (, node, ), )]
[calculateModSet, (, node, )]
[node]
[calculateRefSet, (, node, )]
[node]
[NodeUtil, ., canBeSideEffected, (, node, )]
[NodeUtil]
[node]
[EVERY_LOCATION]
[NO_LOCATION]
[NodeUtil, ., mayHaveSideEffects, (, node, )]
[NodeUtil]
[node]
[EVERY_LOCATION]
[NO_LOCATION]
[otherLocation, ==, EVERY_LOCATION]
[otherLocation]
[EVERY_LOCATION]
[otherLocation]
[this]
[this, ==, EVERY_LOCATION, &&, otherLocation, ==, EVERY_LOCATION]
[this, ==, EVERY_LOCATION]
[this]
[EVERY_LOCATION]
[otherLocation, ==, EVERY_LOCATION]
[otherLocation]
[EVERY_LOCATION]
[this, ==, NO_LOCATION]
[this]
[NO_LOCATION]
[0]
[0xFFFFFFFF]
[1, <<, 1]
[1]
[1]
[1, <<, 2]
[1]
[2]
[1, <<, 3]
[1]
[3]
[1, <<, 4]
[1]
[4]
[this, ., compiler]
[this]
[compiler]
[this, ., variableVisibilityAnalysis]
[this]
[variableVisibilityAnalysis]
[this, ., variableUseMap]
[this]
[variableUseMap]
[VISIBILITY_LOCATION_NONE]
[VISIBILITY_LOCATION_NONE]
[findStorageLocationReferences, (, node, )]
[node]
[reference, ., isName, (, )]
[reference]
[effectMask]
[effectMaskForVariableReference, (, reference, )]
[reference]
[effectMask]
[HEAP_LOCATION_MASK]
[storageNodeIsLValue, (, reference, )]
[reference]
[visibilityModLocations]
[effectMask]
[storageNodeIsRValue, (, reference, )]
[reference]
[visibilityRefLocations]
[effectMask]
[new, VisibilityBasedEffectLocation, (, visibilityModLocations, )]
[visibilityModLocations]
[new, VisibilityBasedEffectLocation, (, visibilityRefLocations, )]
[visibilityRefLocations]
[new, LocationSummary, (, modSet, ,, refSet, )]
[modSet]
[refSet]
[Sets, ., newHashSet, (, )]
[Sets]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, ., add, (, n, ), ;, }, }, }, )]
[NodeTraversal]
[compiler]
[root]
[new, AbstractShallowCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), ), ), {, references, ., add, (, n, ), ;, }, }, }]
[NodeUtil, ., isGet, (, n, ), ||, (, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), )]
[NodeUtil, ., isGet, (, n, )]
[NodeUtil]
[n]
[(, n, ., isName, (, ), &&, !, parent, ., isFunction, (, ), )]
[n, ., isName, (, ), &&, !, parent, ., isFunction, (, )]
[n, ., isName, (, )]
[n]
[!, parent, ., isFunction, (, )]
[parent, ., isFunction, (, )]
[parent]
[references, ., add, (, n, )]
[references]
[n]
[references]
[Preconditions, ., checkArgument, (, variableReference, ., isName, (, ), )]
[Preconditions]
[variableReference, ., isName, (, )]
[variableReference]
[VISIBILITY_LOCATION_NONE]
[variableUseMap, ., findDeclaringNameNodeForUse, (, variableReference, )]
[variableUseMap]
[variableReference]
[declaringNameNode, !=, null]
[declaringNameNode]
[null]
[variableVisibilityAnalysis, ., getVariableVisibility, (, declaringNameNode, )]
[variableVisibilityAnalysis]
[declaringNameNode]
[visibility]
[LOCAL]
[effectMask]
[LOCAL_VARIABLE_LOCATION_MASK]
[CAPTURED_LOCAL]
[effectMask]
[CAPTURED_LOCAL_VARIABLE_LOCATION_MASK]
[PARAMETER]
[effectMask]
[HEAP_LOCATION_MASK]
[GLOBAL]
[effectMask]
[GLOBAL_VARIABLE_LOCATION_MASK]
[new, IllegalStateException, (, "Unrecognized variable", +, " visibility: ", +, visibility, )]
["Unrecognized variable", +, " visibility: ", +, visibility]
["Unrecognized variable", +, " visibility: "]
["Unrecognized variable"]
[" visibility: "]
[visibility]
[effectMask]
[UNKNOWN_LOCATION_MASK]
[effectMask]
[new, VisibilityBasedEffectLocation, (, VISIBILITY_LOCATION_NONE, )]
[VISIBILITY_LOCATION_NONE]
[node, ., isName, (, ), ||, NodeUtil, ., isGet, (, node, )]
[node, ., isName, (, )]
[node]
[NodeUtil, ., isGet, (, node, )]
[NodeUtil]
[node]
[Preconditions, ., checkArgument, (, isStorageNode, (, node, ), )]
[Preconditions]
[isStorageNode, (, node, )]
[node]
[node, ., getParent, (, )]
[node]
[storageNodeIsLValue, (, node, )]
[node]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, !, parent, ., isAssign, (, )]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[!, parent, ., isAssign, (, )]
[parent, ., isAssign, (, )]
[parent]
[(, nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, ), )]
[nonSimpleAssign, ||, parent, ., isDec, (, ), ||, parent, ., isInc, (, )]
[nonSimpleAssign, ||, parent, ., isDec, (, )]
[nonSimpleAssign]
[parent, ., isDec, (, )]
[parent]
[parent, ., isInc, (, )]
[parent]
[true]
[Preconditions, ., checkArgument, (, isStorageNode, (, node, ), )]
[Preconditions]
[isStorageNode, (, node, )]
[node]
[NodeUtil, ., isLValue, (, node, )]
[NodeUtil]
[node]
[VISIBILITY_LOCATION_NONE]
[this, ., visibilityMask]
[this]
[visibilityMask]
[Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, )]
[Preconditions]
[otherLocation, instanceof, VisibilityBasedEffectLocation]
[otherLocation]
[(, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask]
[(, (, VisibilityBasedEffectLocation, ), otherLocation, )]
[(, VisibilityBasedEffectLocation, ), otherLocation]
[otherLocation]
[(, visibilityMask, &, otherMask, ), >, 0]
[(, visibilityMask, &, otherMask, )]
[visibilityMask, &, otherMask]
[visibilityMask]
[otherMask]
[0]
[visibilityMask, ==, VISIBILITY_LOCATION_NONE]
[visibilityMask]
[VISIBILITY_LOCATION_NONE]
[Preconditions, ., checkArgument, (, otherLocation, instanceof, VisibilityBasedEffectLocation, )]
[Preconditions]
[otherLocation, instanceof, VisibilityBasedEffectLocation]
[otherLocation]
[(, (, VisibilityBasedEffectLocation, ), otherLocation, ), ., visibilityMask]
[(, (, VisibilityBasedEffectLocation, ), otherLocation, )]
[(, VisibilityBasedEffectLocation, ), otherLocation]
[otherLocation]
[visibilityMask, |, otherMask]
[visibilityMask]
[otherMask]
[new, VisibilityBasedEffectLocation, (, joinedMask, )]
[joinedMask]
[this, ., compiler]
[this]
[compiler]
[referencesByNameNode]
[Maps, ., newHashMap, (, )]
[Maps]
[new, ReferenceCollectingCallback, (, compiler, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, )]
[compiler]
[ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR]
[ReferenceCollectingCallback]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, )]
[NodeTraversal]
[compiler]
[root]
[callback]
[callback, ., getAllSymbols, (, )]
[callback]
[callback, ., getReferences, (, variable, )]
[callback]
[variable]
[referenceCollection, ., references]
[referenceCollection]
[reference, ., getNode, (, )]
[reference]
[referencesByNameNode, ., put, (, referenceNameNode, ,, variable, ., getNameNode, (, ), )]
[referencesByNameNode]
[referenceNameNode]
[variable, ., getNameNode, (, )]
[variable]
[Preconditions, ., checkArgument, (, usingNameNode, ., isName, (, ), )]
[Preconditions]
[usingNameNode, ., isName, (, )]
[usingNameNode]
[referencesByNameNode, ., get, (, usingNameNode, )]
[referencesByNameNode]
[usingNameNode]
