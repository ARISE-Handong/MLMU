[2, *, FastMath, ., ulp, (, 1d, )]
[2]
[FastMath, ., ulp, (, 1d, )]
[FastMath]
[1d]
[rel]
[abs]
[FastMath, ., sqrt, (, rel, )]
[FastMath]
[rel]
[FastMath, ., sqrt, (, abs, )]
[FastMath]
[abs]
[checker]
[checker]
[rel, <, MIN_RELATIVE_TOLERANCE]
[rel]
[MIN_RELATIVE_TOLERANCE]
[new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, )]
[rel]
[MIN_RELATIVE_TOLERANCE]
[true]
[abs, <=, 0]
[abs]
[0]
[new, NotStrictlyPositiveException, (, abs, )]
[abs]
[relativeThreshold]
[rel]
[absoluteThreshold]
[abs]
[line]
[new, LineSearch, (, lineRel, ,, lineAbs, )]
[lineRel]
[lineAbs]
[rel]
[abs]
[null]
[rel]
[abs]
[lineRel]
[lineAbs]
[null]
[getGoalType, (, )]
[getStartPoint, (, )]
[guess, ., length]
[guess]
[new, double, [, n, ], [, n, ]]
[n]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[direc, [, i, ], [, i, ]]
[direc, [, i, ]]
[direc]
[i]
[i]
[1]
[getConvergenceChecker, (, )]
[guess]
[computeObjectiveValue, (, x, )]
[x]
[x, ., clone, (, )]
[x]
[0]
[true]
[++, iter]
[iter]
[fVal]
[0]
[0]
[0]
[0]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[MathArrays, ., copyOf, (, direc, [, i, ], )]
[MathArrays]
[direc, [, i, ]]
[direc]
[i]
[fX2]
[fVal]
[line, ., search, (, x, ,, d, )]
[line]
[x]
[d]
[fVal]
[optimum, ., getValue, (, )]
[optimum]
[alphaMin]
[optimum, ., getPoint, (, )]
[optimum]
[newPointAndDirection, (, x, ,, d, ,, alphaMin, )]
[x]
[d]
[alphaMin]
[x]
[result, [, 0, ]]
[result]
[0]
[(, fX2, -, fVal, ), >, delta]
[(, fX2, -, fVal, )]
[fX2, -, fVal]
[fX2]
[fVal]
[delta]
[delta]
[fX2, -, fVal]
[fX2]
[fVal]
[bigInd]
[i]
[2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, )]
[2, *, (, fX, -, fVal, )]
[2]
[(, fX, -, fVal, )]
[fX, -, fVal]
[fX]
[fVal]
[(, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, )]
[relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold]
[relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), )]
[relativeThreshold]
[(, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), )]
[FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, )]
[FastMath, ., abs, (, fX, )]
[FastMath]
[fX]
[FastMath, ., abs, (, fVal, )]
[FastMath]
[fVal]
[absoluteThreshold]
[new, PointValuePair, (, x1, ,, fX, )]
[x1]
[fX]
[new, PointValuePair, (, x, ,, fVal, )]
[x]
[fVal]
[!, stop, &&, checker, !=, null]
[!, stop]
[stop]
[checker, !=, null]
[checker]
[null]
[stop]
[checker, ., converged, (, iter, ,, previous, ,, current, )]
[checker]
[iter]
[previous]
[current]
[stop]
[goal, ==, GoalType, ., MINIMIZE]
[goal]
[GoalType, ., MINIMIZE]
[GoalType]
[(, fVal, <, fX, ), ?, current, :, previous]
[(, fVal, <, fX, )]
[fVal, <, fX]
[fVal]
[fX]
[current]
[previous]
[(, fVal, >, fX, ), ?, current, :, previous]
[(, fVal, >, fX, )]
[fVal, >, fX]
[fVal]
[fX]
[current]
[previous]
[new, double, [, n, ]]
[n]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[d, [, i, ]]
[d]
[i]
[x, [, i, ], -, x1, [, i, ]]
[x, [, i, ]]
[x]
[i]
[x1, [, i, ]]
[x1]
[i]
[x2, [, i, ]]
[x2]
[i]
[2, *, x, [, i, ], -, x1, [, i, ]]
[2, *, x, [, i, ]]
[2]
[x, [, i, ]]
[x]
[i]
[x1, [, i, ]]
[x1]
[i]
[x1]
[x, ., clone, (, )]
[x]
[fX2]
[computeObjectiveValue, (, x2, )]
[x2]
[fX, >, fX2]
[fX]
[fX2]
[2, *, (, fX, +, fX2, -, 2, *, fVal, )]
[2]
[(, fX, +, fX2, -, 2, *, fVal, )]
[fX, +, fX2, -, 2, *, fVal]
[fX, +, fX2]
[fX]
[fX2]
[2, *, fVal]
[2]
[fVal]
[fX, -, fVal, -, delta]
[fX, -, fVal]
[fX]
[fVal]
[delta]
[t]
[temp, *, temp]
[temp]
[temp]
[temp]
[fX, -, fX2]
[fX]
[fX2]
[t]
[delta, *, temp, *, temp]
[delta, *, temp]
[delta]
[temp]
[temp]
[t, <, 0.0]
[t]
[0.0]
[line, ., search, (, x, ,, d, )]
[line]
[x]
[d]
[fVal]
[optimum, ., getValue, (, )]
[optimum]
[alphaMin]
[optimum, ., getPoint, (, )]
[optimum]
[newPointAndDirection, (, x, ,, d, ,, alphaMin, )]
[x]
[d]
[alphaMin]
[x]
[result, [, 0, ]]
[result]
[0]
[n, -, 1]
[n]
[1]
[direc, [, bigInd, ]]
[direc]
[bigInd]
[direc, [, lastInd, ]]
[direc]
[lastInd]
[direc, [, lastInd, ]]
[direc]
[lastInd]
[result, [, 1, ]]
[result]
[1]
[p, ., length]
[p]
[new, double, [, n, ]]
[n]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[nD, [, i, ]]
[nD]
[i]
[d, [, i, ], *, optimum]
[d, [, i, ]]
[d]
[i]
[optimum]
[nP, [, i, ]]
[nP]
[i]
[p, [, i, ], +, nD, [, i, ]]
[p, [, i, ]]
[p]
[i]
[nD, [, i, ]]
[nD]
[i]
[new, double, [, 2, ], [, ]]
[2]
[result, [, 0, ]]
[result]
[0]
[nP]
[result, [, 1, ]]
[result]
[1]
[nD]
[result]
[1e-15]
[Double, ., MIN_VALUE]
[Double]
[new, BracketFinder, (, )]
[REL_TOL_UNUSED]
[ABS_TOL_UNUSED]
[new, SimpleUnivariateValueChecker, (, rel, ,, abs, )]
[rel]
[abs]
[p, ., length]
[p]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, alpha, ), {, final, double, [, ], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[x, [, i, ]]
[x]
[i]
[p, [, i, ], +, alpha, *, d, [, i, ]]
[p, [, i, ]]
[p]
[i]
[alpha, *, d, [, i, ]]
[alpha]
[d, [, i, ]]
[d]
[i]
[PowellOptimizer, ., this, ., computeObjectiveValue, (, x, )]
[PowellOptimizer, ., this]
[x]
[obj]
[PowellOptimizer, ., this, ., getGoalType, (, )]
[PowellOptimizer, ., this]
[bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, )]
[bracket]
[f]
[goal]
[0]
[1]
[optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,, bracket, ., getMid, (, ), )]
[Integer, ., MAX_VALUE]
[Integer]
[f]
[goal]
[bracket, ., getLo, (, )]
[bracket]
[bracket, ., getHi, (, )]
[bracket]
[bracket, ., getMid, (, )]
[bracket]
