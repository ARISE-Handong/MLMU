[Maps, ., newHashMap, (, )]
[Maps]
[new, SimpleSubGraph, <, N, ,, E, >, (, this, )]
[this]
[new, LinkedDirectedGraph, <, N, ,, E, >, (, false, ,, false, )]
[false]
[false]
[new, LinkedDirectedGraph, <, N, ,, E, >, (, true, ,, false, )]
[true]
[false]
[new, LinkedDirectedGraph, <, N, ,, E, >, (, false, ,, true, )]
[false]
[true]
[new, LinkedDirectedGraph, <, N, ,, E, >, (, true, ,, true, )]
[true]
[true]
[this, ., useNodeAnnotations]
[this]
[useNodeAnnotations]
[this, ., useEdgeAnnotations]
[this]
[useEdgeAnnotations]
[getNodeOrFail, (, srcValue, )]
[srcValue]
[getNodeOrFail, (, destValue, )]
[destValue]
[useEdgeAnnotations, ?, new, AnnotatedLinkedDirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, ), :, new, LinkedDirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[useEdgeAnnotations]
[new, AnnotatedLinkedDirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[src]
[edgeValue]
[dest]
[new, LinkedDirectedGraphEdge, <, N, ,, E, >, (, src, ,, edgeValue, ,, dest, )]
[src]
[edgeValue]
[dest]
[src, ., getOutEdges, (, ), ., add, (, edge, )]
[src, ., getOutEdges, (, )]
[src]
[edge]
[dest, ., getInEdges, (, ), ., add, (, edge, )]
[dest, ., getInEdges, (, )]
[dest]
[edge]
[disconnectInDirection, (, n1, ,, n2, )]
[n1]
[n2]
[disconnectInDirection, (, n2, ,, n1, )]
[n2]
[n1]
[getNodeOrFail, (, srcValue, )]
[srcValue]
[getNodeOrFail, (, destValue, )]
[destValue]
[getDirectedGraphEdges, (, srcValue, ,, destValue, )]
[srcValue]
[destValue]
[src, ., getOutEdges, (, ), ., remove, (, edge, )]
[src, ., getOutEdges, (, )]
[src]
[edge]
[dest, ., getInEdges, (, ), ., remove, (, edge, )]
[dest, ., getInEdges, (, )]
[dest]
[edge]
[Collections, ., <, DiGraphNode, <, N, ,, E, >, >, unmodifiableCollection, (, nodes, ., values, (, ), )]
[Collections]
[nodes, ., values, (, )]
[nodes]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[getDirectedGraphNode, (, nodeValue, )]
[nodeValue]
[getNodeOrFail, (, nodeValue, )]
[nodeValue]
[Collections, ., <, DiGraphEdge, <, N, ,, E, >, >, unmodifiableList, (, node, ., getInEdges, (, ), )]
[Collections]
[node, ., getInEdges, (, )]
[node]
[getNodeOrFail, (, nodeValue, )]
[nodeValue]
[Collections, ., <, DiGraphEdge, <, N, ,, E, >, >, unmodifiableList, (, node, ., getOutEdges, (, ), )]
[Collections]
[node, ., getOutEdges, (, )]
[node]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[node, ==, null]
[node]
[null]
[node]
[useNodeAnnotations, ?, new, AnnotatedLinkedDirectedGraphNode, <, N, ,, E, >, (, nodeValue, ), :, new, LinkedDirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[useNodeAnnotations]
[new, AnnotatedLinkedDirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[nodeValue]
[new, LinkedDirectedGraphNode, <, N, ,, E, >, (, nodeValue, )]
[nodeValue]
[nodes, ., put, (, nodeValue, ,, node, )]
[nodes]
[nodeValue]
[node]
[node]
[getDirectedGraphEdges, (, n1, ,, n2, )]
[n1]
[n2]
[getDirectedGraphEdges, (, n2, ,, n1, )]
[n2]
[n1]
[forwardEdges, ., size, (, ), +, backwardEdges, ., size, (, )]
[forwardEdges, ., size, (, )]
[forwardEdges]
[backwardEdges, ., size, (, )]
[backwardEdges]
[Lists, ., newArrayListWithCapacity, (, totalSize, )]
[Lists]
[totalSize]
[edges, ., addAll, (, forwardEdges, )]
[edges]
[forwardEdges]
[edges, ., addAll, (, backwardEdges, )]
[edges]
[backwardEdges]
[edges]
[getNodeOrFail, (, n1, )]
[n1]
[getNodeOrFail, (, n2, )]
[n2]
[dNode1, ., getOutEdges, (, )]
[dNode1]
[outEdge, ., getDestination, (, ), ==, dNode2]
[outEdge, ., getDestination, (, )]
[outEdge]
[dNode2]
[outEdge]
[dNode2, ., getOutEdges, (, )]
[dNode2]
[outEdge, ., getDestination, (, ), ==, dNode1]
[outEdge, ., getDestination, (, )]
[outEdge]
[dNode1]
[outEdge]
[null]
[createDirectedGraphNode, (, value, )]
[value]
[getNodeOrFail, (, n1, )]
[n1]
[getNodeOrFail, (, n2, )]
[n2]
[Lists, ., newArrayList, (, )]
[Lists]
[dNode1, ., getOutEdges, (, )]
[dNode1]
[outEdge, ., getDestination, (, ), ==, dNode2]
[outEdge, ., getDestination, (, )]
[outEdge]
[dNode2]
[edges, ., add, (, outEdge, )]
[edges]
[outEdge]
[edges]
[isConnectedInDirection, (, n1, ,, Predicates, ., <, E, >, alwaysTrue, (, ), ,, n2, )]
[n1]
[Predicates, ., <, E, >, alwaysTrue, (, )]
[Predicates]
[n2]
[isConnectedInDirection, (, n1, ,, Predicates, ., equalTo, (, edgeValue, ), ,, n2, )]
[n1]
[Predicates, ., equalTo, (, edgeValue, )]
[Predicates]
[edgeValue]
[n2]
[getNodeOrFail, (, n1, )]
[n1]
[getNodeOrFail, (, n2, )]
[n2]
[dNode1, ., getOutEdges, (, )]
[dNode1]
[outEdge, ., getDestination, (, ), ==, dNode2, &&, edgeMatcher, ., apply, (, outEdge, ., getValue, (, ), )]
[outEdge, ., getDestination, (, ), ==, dNode2]
[outEdge, ., getDestination, (, )]
[outEdge]
[dNode2]
[edgeMatcher, ., apply, (, outEdge, ., getValue, (, ), )]
[edgeMatcher]
[outEdge, ., getValue, (, )]
[outEdge]
[true]
[false]
[getDirectedPredNodes, (, nodes, ., get, (, nodeValue, ), )]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[getDirectedSuccNodes, (, nodes, ., get, (, nodeValue, ), )]
[nodes, ., get, (, nodeValue, )]
[nodes]
[nodeValue]
[dNode, ==, null]
[dNode]
[null]
[new, IllegalArgumentException, (, dNode, +, " is null", )]
[dNode, +, " is null"]
[dNode]
[" is null"]
[Lists, ., newArrayList, (, )]
[Lists]
[dNode, ., getInEdges, (, )]
[dNode]
[nodeList, ., add, (, edge, ., getSource, (, ), )]
[nodeList]
[edge, ., getSource, (, )]
[edge]
[nodeList]
[dNode, ==, null]
[dNode]
[null]
[new, IllegalArgumentException, (, dNode, +, " is null", )]
[dNode, +, " is null"]
[dNode]
[" is null"]
[Lists, ., newArrayList, (, )]
[Lists]
[dNode, ., getOutEdges, (, )]
[dNode]
[nodeList, ., add, (, edge, ., getDestination, (, ), )]
[nodeList]
[edge, ., getDestination, (, )]
[edge]
[nodeList]
[Lists, ., newArrayList, (, )]
[Lists]
[nodes, ., values, (, )]
[nodes]
[node, ., getOutEdges, (, )]
[node]
[edgeList, ., add, (, (, LinkedDirectedGraphEdge, <, N, ,, E, >, ), edge, )]
[edgeList]
[(, LinkedDirectedGraphEdge, <, N, ,, E, >, ), edge]
[edge]
[edgeList]
[Lists, ., newArrayListWithCapacity, (, nodes, ., size, (, ), )]
[Lists]
[nodes, ., size, (, )]
[nodes]
[nodes, ., values, (, )]
[nodes]
[nodeList, ., add, (, node, )]
[nodeList]
[node]
[nodeList]
["LinkedGraph"]
[true]
[Collections, ., <, GraphNode, <, N, ,, E, >, >, unmodifiableCollection, (, nodes, ., values, (, ), )]
[Collections]
[nodes, ., values, (, )]
[nodes]
[getDirectedGraphNode, (, value, )]
[value]
[getNeighborNodes, (, node, )]
[node]
[Lists, ., newArrayList, (, )]
[Lists]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), node, ), ., neighborIterator, (, )]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), node, )]
[(, LinkedDirectedGraphNode, <, N, ,, E, >, ), node]
[node]
[i, ., hasNext, (, )]
[i]
[result, ., add, (, i, ., next, (, ), )]
[result]
[i, ., next, (, )]
[i]
[result]
[nodes, ., get, (, value, )]
[nodes]
[value]
[Preconditions, ., checkNotNull, (, node, )]
[Preconditions]
[node]
[node, ., neighborIterator, (, )]
[node]
[Lists, ., newArrayList, (, )]
[Lists]
[nodes, ., values, (, )]
[nodes]
[node, ., getOutEdges, (, )]
[node]
[result, ., add, (, edge, )]
[result]
[edge]
[Collections, ., unmodifiableList, (, result, )]
[Collections]
[result]
[getNodeOrFail, (, value, )]
[value]
[node, ., getInEdges, (, ), ., size, (, ), +, node, ., getOutEdges, (, ), ., size, (, )]
[node, ., getInEdges, (, ), ., size, (, )]
[node, ., getInEdges, (, )]
[node]
[node, ., getOutEdges, (, ), ., size, (, )]
[node, ., getOutEdges, (, )]
[node]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., value]
[this]
[nodeValue]
[value]
[new, UnsupportedOperationException, (, "Graph initialized with node annotations turned off", )]
["Graph initialized with node annotations turned off"]
[new, UnsupportedOperationException, (, "Graph initialized with node annotations turned off", )]
["Graph initialized with node annotations turned off"]
["white"]
["LDN", +, hashCode, (, )]
["LDN"]
[hashCode, (, )]
[value, !=, null, ?, value, ., toString, (, ), :, "null"]
[value, !=, null]
[value]
[null]
[value, ., toString, (, )]
[value]
["null"]
[getLabel, (, )]
[inEdgeList]
[outEdgeList]
[new, NeighborIterator, (, )]
[inEdgeList, ., iterator, (, )]
[inEdgeList]
[outEdgeList, ., iterator, (, )]
[outEdgeList]
[in, ., hasNext, (, ), ||, out, ., hasNext, (, )]
[in, ., hasNext, (, )]
[in]
[out, ., hasNext, (, )]
[out]
[!, in, ., hasNext, (, )]
[in, ., hasNext, (, )]
[in]
[isOut, ?, out, :, in]
[isOut]
[out]
[in]
[curIterator, ., next, (, )]
[curIterator]
[isOut, ?, s, ., getDestination, (, ), :, s, ., getSource, (, )]
[isOut]
[s, ., getDestination, (, )]
[s]
[s, ., getSource, (, )]
[s]
[new, UnsupportedOperationException, (, "Remove not supported.", )]
["Remove not supported."]
[nodeValue]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, A, ), annotation]
[annotation]
[annotation]
[data]
[this, ., value]
[this]
[edgeValue]
[this, ., sourceNode]
[this]
[sourceNode]
[this, ., destNode]
[this]
[destNode]
[sourceNode]
[destNode]
[destNode]
[node]
[sourceNode]
[node]
[value]
[new, UnsupportedOperationException, (, "Graph initialized with edge annotations turned off", )]
["Graph initialized with edge annotations turned off"]
[new, UnsupportedOperationException, (, "Graph initialized with edge annotations turned off", )]
["Graph initialized with edge annotations turned off"]
["black"]
[value, !=, null, ?, value, ., toString, (, ), :, "null"]
[value, !=, null]
[value]
[null]
[value, ., toString, (, )]
[value]
["null"]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), sourceNode, ), ., getId, (, )]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), sourceNode, )]
[(, LinkedDirectedGraphNode, <, N, ,, E, >, ), sourceNode]
[sourceNode]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), destNode, ), ., getId, (, )]
[(, (, LinkedDirectedGraphNode, <, N, ,, E, >, ), destNode, )]
[(, LinkedDirectedGraphNode, <, N, ,, E, >, ), destNode]
[destNode]
[sourceNode, ., toString, (, ), +, " -> ", +, destNode, ., toString, (, )]
[sourceNode, ., toString, (, ), +, " -> "]
[sourceNode, ., toString, (, )]
[sourceNode]
[" -> "]
[destNode, ., toString, (, )]
[destNode]
[sourceNode]
[destNode]
[sourceNode]
[edgeValue]
[destNode]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, A, ), annotation]
[annotation]
[annotation]
[data]
