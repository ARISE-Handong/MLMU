["goog.scope"]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_USED_IMPROPERLY"]
["The call to goog.scope must be alone in a single statement."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS"]
["The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters."]
["The call to goog.scope must take only a single parameter.  It must"]
[" be an anonymous function that itself takes no parameters."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_REFERENCES_THIS"]
["The body of a goog.scope function cannot reference 'this'."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_USES_RETURN"]
["The body of a goog.scope function cannot use 'return'."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_USES_THROW"]
["The body of a goog.scope function cannot use 'throw'."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_ALIAS_REDEFINED"]
["The alias {0} is assigned a value more than once."]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", )]
[DiagnosticType]
["JSC_GOOG_SCOPE_NON_ALIAS_LOCAL"]
["The local variable {0} is in a goog.scope and is not an alias."]
[this, ., compiler]
[this]
[compiler]
[this, ., preprocessorSymbolTable]
[this]
[preprocessorSymbolTable]
[this, ., transformationHandler]
[this]
[transformationHandler]
[hotSwapScript, (, root, ,, null, )]
[root]
[null]
[new, Traversal, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, traversal, )]
[NodeTraversal]
[compiler]
[root]
[traversal]
[!, traversal, ., hasErrors, (, )]
[traversal, ., hasErrors, (, )]
[traversal]
[traversal, ., getAliasUsages, (, )]
[traversal]
[aliasUsage, ., applyAlias, (, )]
[aliasUsage]
[traversal, ., getAliasDefinitionsInOrder, (, )]
[traversal]
[aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, )]
[aliasDefinition, ., getParent, (, ), ., isVar, (, )]
[aliasDefinition, ., getParent, (, )]
[aliasDefinition]
[aliasDefinition, ., getParent, (, ), ., hasOneChild, (, )]
[aliasDefinition, ., getParent, (, )]
[aliasDefinition]
[aliasDefinition, ., getParent, (, ), ., detachFromParent, (, )]
[aliasDefinition, ., getParent, (, )]
[aliasDefinition]
[aliasDefinition, ., detachFromParent, (, )]
[aliasDefinition]
[traversal, ., getScopeCalls, (, )]
[traversal]
[scopeCall, ., getParent, (, )]
[scopeCall]
[scopeCall, ., getLastChild, (, ), ., getLastChild, (, )]
[scopeCall, ., getLastChild, (, )]
[scopeCall]
[scopeClosureBlock, ., detachFromParent, (, )]
[scopeClosureBlock]
[expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, )]
[expressionWithScopeCall, ., getParent, (, )]
[expressionWithScopeCall]
[expressionWithScopeCall]
[scopeClosureBlock]
[NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, )]
[NodeUtil]
[scopeClosureBlock]
[traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0]
[traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0]
[traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0]
[traversal, ., getAliasUsages, (, ), ., size, (, )]
[traversal, ., getAliasUsages, (, )]
[traversal]
[0]
[traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0]
[traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, )]
[traversal, ., getAliasDefinitionsInOrder, (, )]
[traversal]
[0]
[traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0]
[traversal, ., getScopeCalls, (, ), ., size, (, )]
[traversal, ., getScopeCalls, (, )]
[traversal]
[0]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., aliasReference]
[this]
[aliasReference]
[this, ., aliasDefinition]
[this]
[aliasDefinition]
[aliasReference, ., getParent, (, ), ., replaceChild, (, aliasReference, ,, aliasDefinition, ., cloneTree, (, ), )]
[aliasReference, ., getParent, (, )]
[aliasReference]
[aliasReference]
[aliasDefinition, ., cloneTree, (, )]
[aliasDefinition]
[this, ., typeReference]
[this]
[typeReference]
[this, ., aliasDefinition]
[this]
[aliasDefinition]
[this, ., aliasName]
[this]
[aliasName]
[typeReference, ., getString, (, )]
[typeReference]
[Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), )]
[Preconditions]
[aliasDefinition, ., getQualifiedName, (, )]
[aliasDefinition]
[Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), )]
[Preconditions]
[typeName, ., startsWith, (, aliasName, )]
[typeName]
[aliasName]
[typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, ), )]
[typeReference]
[typeName, ., replaceFirst, (, aliasName, ,, aliasExpanded, )]
[typeName]
[aliasName]
[aliasExpanded]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[Sets, ., newHashSet, (, )]
[Sets]
[false]
[false]
[null]
[aliasDefinitionsInOrder]
[aliasUsages]
[scopeCalls]
[hasErrors]
[n, ., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[n, ., isCall, (, )]
[n]
[SCOPING_METHOD_NAME, ., equals, (, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[SCOPING_METHOD_NAME]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[t, ., getCurrentNode, (, ), ., getParent, (, )]
[t, ., getCurrentNode, (, )]
[t]
[n, !=, null, &&, isCallToScopeMethod, (, n, )]
[n, !=, null]
[n]
[null]
[isCallToScopeMethod, (, n, )]
[n]
[transformation]
[transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), )]
[transformationHandler]
[n, ., getSourceFileName, (, )]
[n]
[getSourceRegion, (, n, )]
[n]
[findAliases, (, t, )]
[t]
[t, ., getScopeDepth, (, ), >, 2]
[t, ., getScopeDepth, (, )]
[t]
[2]
[findNamespaceShadows, (, t, )]
[t]
[t, ., getScopeDepth, (, ), ==, 2]
[t, ., getScopeDepth, (, )]
[t]
[2]
[renameNamespaceShadows, (, t, )]
[t]
[aliases, ., clear, (, )]
[aliases]
[forbiddenLocals, ., clear, (, )]
[forbiddenLocals]
[transformation]
[null]
[hasNamespaceShadows]
[false]
[n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, )]
[n, ., isFunction, (, )]
[n]
[t, ., inGlobalScope, (, )]
[t]
[parent, ==, null, ||, !, isCallToScopeMethod, (, parent, )]
[parent, ==, null]
[parent]
[null]
[!, isCallToScopeMethod, (, parent, )]
[isCallToScopeMethod, (, parent, )]
[parent]
[false]
[true]
[n]
[null]
[next, !=, null, ||, testNode, ., isScript, (, )]
[next, !=, null]
[next]
[null]
[testNode, ., isScript, (, )]
[testNode]
[next]
[testNode, ., getNext, (, )]
[testNode]
[testNode]
[testNode, ., getParent, (, )]
[testNode]
[next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, )]
[next, ==, null]
[next]
[null]
[Integer, ., MAX_VALUE]
[Integer]
[next, ., getLineno, (, )]
[next]
[next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, )]
[next, ==, null]
[next]
[null]
[Integer, ., MAX_VALUE]
[Integer]
[next, ., getCharno, (, )]
[next]
[new, SourcePosition, <, AliasTransformation, >, (, ), {, }]
[pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,, endChar, )]
[pos]
[n, ., getLineno, (, )]
[n]
[n, ., getCharno, (, )]
[n]
[endLine]
[endChar]
[pos]
[compiler, ., report, (, t, ., makeError, (, n, ,, error, ,, arguments, ), )]
[compiler]
[t, ., makeError, (, n, ,, error, ,, arguments, )]
[t]
[n]
[error]
[arguments]
[hasErrors]
[true]
[t, ., getScope, (, )]
[t]
[scope, ., getVarIterable, (, )]
[scope]
[v, ., getNode, (, )]
[v]
[n, ., getType, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[parent, ., isVar, (, ), &&, n, ., hasChildren, (, )]
[parent, ., isVar, (, )]
[parent]
[n, ., hasChildren, (, )]
[n]
[n, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getString, (, )]
[n]
[scope, ., getVar, (, name, )]
[scope]
[name]
[aliases, ., put, (, name, ,, aliasVar, )]
[aliases]
[name]
[aliasVar]
[aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, )]
[aliasVar, ., getInitialValue, (, )]
[aliasVar]
[transformation, ., addAlias, (, name, ,, qualifiedName, )]
[transformation]
[name]
[qualifiedName]
[qualifiedName, ., indexOf, (, ".", )]
[qualifiedName]
["."]
[rootIndex, !=, -, 1]
[rootIndex]
[-, 1]
[1]
[qualifiedName, ., substring, (, 0, ,, rootIndex, )]
[qualifiedName]
[0]
[rootIndex]
[!, aliases, ., containsKey, (, qNameRoot, )]
[aliases, ., containsKey, (, qNameRoot, )]
[aliases]
[qNameRoot]
[forbiddenLocals, ., add, (, qNameRoot, )]
[forbiddenLocals]
[qNameRoot]
[v, ., isBleedingFunction, (, )]
[v]
[parent, ., getType, (, ), ==, Token, ., LP]
[parent, ., getType, (, )]
[parent]
[Token, ., LP]
[Token]
[report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,, n, ., getString, (, ), )]
[t]
[n]
[GOOG_SCOPE_NON_ALIAS_LOCAL]
[n, ., getString, (, )]
[n]
[hasNamespaceShadows]
[t, ., getScope, (, )]
[t]
[scope, ., getVarIterable, (, )]
[scope]
[forbiddenLocals, ., contains, (, v, ., getName, (, ), )]
[forbiddenLocals]
[v, ., getName, (, )]
[v]
[hasNamespaceShadows]
[true]
[hasNamespaceShadows]
[new, MakeDeclaredNamesUnique, ., WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,, forbiddenLocals, )]
[new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, )]
[forbiddenLocals]
[forbiddenLocals]
[renamer, ., addDeclaredName, (, s, )]
[renamer]
[s]
[new, MakeDeclaredNamesUnique, (, renamer, )]
[renamer]
[NodeTraversal, ., traverse, (, compiler, ,, t, ., getScopeRoot, (, ), ,, uniquifier, )]
[NodeTraversal]
[compiler]
[t, ., getScopeRoot, (, )]
[t]
[uniquifier]
[preprocessorSymbolTable, !=, null]
[preprocessorSymbolTable]
[null]
[preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), )]
[preprocessorSymbolTable]
[n, ., getFirstChild, (, )]
[n]
[!, parent, ., isExprResult, (, )]
[parent, ., isExprResult, (, )]
[parent]
[report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, )]
[t]
[n]
[GOOG_SCOPE_USED_IMPROPERLY]
[n, ., getChildCount, (, ), !=, 2]
[n, ., getChildCount, (, )]
[n]
[2]
[report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, )]
[t]
[n]
[GOOG_SCOPE_HAS_BAD_PARAMETERS]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[!, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, )]
[!, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null]
[!, anonymousFnNode, ., isFunction, (, )]
[anonymousFnNode, ., isFunction, (, )]
[anonymousFnNode]
[NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null]
[NodeUtil, ., getFunctionName, (, anonymousFnNode, )]
[NodeUtil]
[anonymousFnNode]
[null]
[NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, )]
[NodeUtil, ., getFunctionParameters, (, anonymousFnNode, )]
[NodeUtil]
[anonymousFnNode]
[report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, )]
[t]
[anonymousFnNode]
[GOOG_SCOPE_HAS_BAD_PARAMETERS]
[scopeCalls, ., add, (, n, )]
[scopeCalls]
[n]
[isCallToScopeMethod, (, n, )]
[n]
[validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), )]
[t]
[n]
[n, ., getParent, (, )]
[n]
[t, ., getScopeDepth, (, ), <, 2]
[t, ., getScopeDepth, (, )]
[t]
[2]
[n, ., getType, (, )]
[n]
[null]
[type, ==, Token, ., NAME]
[type]
[Token, ., NAME]
[Token]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getString, (, )]
[n]
[lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, )]
[lexicalVar, !=, null]
[lexicalVar]
[null]
[lexicalVar, ==, aliases, ., get, (, name, )]
[lexicalVar]
[aliases, ., get, (, name, )]
[aliases]
[name]
[aliasVar]
[lexicalVar]
[t, ., getScopeDepth, (, ), ==, 2]
[t, ., getScopeDepth, (, )]
[t]
[2]
[aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, )]
[aliasVar, !=, null]
[aliasVar]
[null]
[NodeUtil, ., isLValue, (, n, )]
[NodeUtil]
[n]
[aliasVar, ., getNode, (, ), ==, n]
[aliasVar, ., getNode, (, )]
[aliasVar]
[n]
[aliasDefinitionsInOrder, ., add, (, n, )]
[aliasDefinitionsInOrder]
[n]
[report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), )]
[t]
[n]
[GOOG_SCOPE_ALIAS_REDEFINED]
[n, ., getString, (, )]
[n]
[type, ==, Token, ., RETURN]
[type]
[Token, ., RETURN]
[Token]
[report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, )]
[t]
[n]
[GOOG_SCOPE_USES_RETURN]
[type, ==, Token, ., THIS]
[type]
[Token, ., THIS]
[Token]
[report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, )]
[t]
[n]
[GOOG_SCOPE_REFERENCES_THIS]
[type, ==, Token, ., THROW]
[type]
[Token, ., THROW]
[Token]
[report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, )]
[t]
[n]
[GOOG_SCOPE_USES_THROW]
[t, ., getScopeDepth, (, ), >=, 2]
[t, ., getScopeDepth, (, )]
[t]
[2]
[aliasVar, !=, null]
[aliasVar]
[null]
[aliasVar, ., getInitialValue, (, )]
[aliasVar]
[aliasUsages, ., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), )]
[aliasUsages]
[new, AliasedNode, (, n, ,, aliasedNode, )]
[n]
[aliasedNode]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null]
[info]
[null]
[info, ., getTypeNodes, (, )]
[info]
[fixTypeNode, (, node, )]
[node]
[typeNode, ., isString, (, )]
[typeNode]
[typeNode, ., getString, (, )]
[typeNode]
[name, ., indexOf, (, '.', )]
[name]
['.']
[endIndex, ==, -, 1]
[endIndex]
[-, 1]
[1]
[endIndex]
[name, ., length, (, )]
[name]
[name, ., substring, (, 0, ,, endIndex, )]
[name]
[0]
[endIndex]
[aliases, ., get, (, baseName, )]
[aliases]
[baseName]
[aliasVar, !=, null]
[aliasVar]
[null]
[aliasVar, ., getInitialValue, (, )]
[aliasVar]
[aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), )]
[aliasUsages]
[new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, )]
[typeNode]
[aliasedNode]
[baseName]
[typeNode, ., getFirstChild, (, )]
[typeNode]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[fixTypeNode, (, child, )]
[child]
