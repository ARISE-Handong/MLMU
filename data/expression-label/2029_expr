[10.0]
[Math, ., log, (, 10.0, )]
[Math]
[10.0]
[1E-100]
[null]
[label]
[createLogTickUnits, (, Locale, ., getDefault, (, ), )]
[Locale, ., getDefault, (, )]
[Locale]
[setDefaultAutoRange, (, new, Range, (, 0.01, ,, 1.0, ), )]
[new, Range, (, 0.01, ,, 1.0, )]
[0.01]
[1.0]
[this, ., tickUnit]
[this]
[new, NumberTickUnit, (, 1.0, ,, new, DecimalFormat, (, "0.#", ), ,, 9, )]
[1.0]
[new, DecimalFormat, (, "0.#", )]
["0.#"]
[9]
[this, ., base]
[this]
[base, <=, 1.0]
[base]
[1.0]
[new, IllegalArgumentException, (, "Requires 'base' > 1.0.", )]
["Requires 'base' > 1.0."]
[this, ., base]
[this]
[base]
[this, ., baseLog]
[this]
[Math, ., log, (, base, )]
[Math]
[base]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., smallestValue]
[this]
[value, <=, 0.0]
[value]
[0.0]
[new, IllegalArgumentException, (, "Requires 'value' > 0.0.", )]
["Requires 'value' > 0.0."]
[this, ., smallestValue]
[this]
[value]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., tickUnit]
[this]
[setTickUnit, (, unit, ,, true, ,, true, )]
[unit]
[true]
[true]
[unit, ==, null]
[unit]
[null]
[new, IllegalArgumentException, (, "Null 'unit' argument.", )]
["Null 'unit' argument."]
[this, ., tickUnit]
[this]
[unit]
[turnOffAutoSelect]
[setAutoTickUnitSelection, (, false, ,, false, )]
[false]
[false]
[notify]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[this, ., numberFormatOverride]
[this]
[this, ., numberFormatOverride]
[this]
[formatter]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[new, AxisChangeEvent, (, this, )]
[this]
[Math, ., log, (, value, ), /, this, ., baseLog]
[Math, ., log, (, value, )]
[Math]
[value]
[this, ., baseLog]
[this]
[Math, ., pow, (, this, ., base, ,, log, )]
[Math]
[this, ., base]
[this]
[log]
[getRange, (, )]
[calculateLog, (, range, ., getLowerBound, (, ), )]
[range, ., getLowerBound, (, )]
[range]
[calculateLog, (, range, ., getUpperBound, (, ), )]
[range, ., getUpperBound, (, )]
[range]
[0.0]
[0.0]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[min]
[area, ., getX, (, )]
[area]
[max]
[area, ., getMaxX, (, )]
[area]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[min]
[area, ., getMaxY, (, )]
[area]
[max]
[area, ., getY, (, )]
[area]
[0.0]
[isInverted, (, )]
[log]
[axisMax, -, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[axisMax]
[(, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[(, java2DValue, -, min, ), /, (, max, -, min, )]
[(, java2DValue, -, min, )]
[java2DValue, -, min]
[java2DValue]
[min]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[(, axisMax, -, axisMin, )]
[axisMax, -, axisMin]
[axisMax]
[axisMin]
[log]
[axisMin, +, (, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[axisMin]
[(, java2DValue, -, min, ), /, (, max, -, min, ), *, (, axisMax, -, axisMin, )]
[(, java2DValue, -, min, ), /, (, max, -, min, )]
[(, java2DValue, -, min, )]
[java2DValue, -, min]
[java2DValue]
[min]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[(, axisMax, -, axisMin, )]
[axisMax, -, axisMin]
[axisMax]
[axisMin]
[calculateValue, (, log, )]
[log]
[getRange, (, )]
[calculateLog, (, range, ., getLowerBound, (, ), )]
[range, ., getLowerBound, (, )]
[range]
[calculateLog, (, range, ., getUpperBound, (, ), )]
[range, ., getUpperBound, (, )]
[range]
[value]
[calculateLog, (, value, )]
[value]
[0.0]
[0.0]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[min]
[area, ., getX, (, )]
[area]
[max]
[area, ., getMaxX, (, )]
[area]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[max]
[area, ., getMinY, (, )]
[area]
[min]
[area, ., getMaxY, (, )]
[area]
[isInverted, (, )]
[max, -, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[max]
[(, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[(, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), )]
[(, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[(, value, -, axisMin, )]
[value, -, axisMin]
[value]
[axisMin]
[(, axisMax, -, axisMin, )]
[axisMax, -, axisMin]
[axisMax]
[axisMin]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[min, +, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[min]
[(, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, )]
[(, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), )]
[(, value, -, axisMin, ), /, (, axisMax, -, axisMin, )]
[(, value, -, axisMin, )]
[value, -, axisMin]
[value]
[axisMin]
[(, axisMax, -, axisMin, )]
[axisMax, -, axisMin]
[axisMax]
[axisMin]
[(, max, -, min, )]
[max, -, min]
[max]
[min]
[isAutoRange, (, )]
[autoAdjustRange, (, )]
[getPlot, (, )]
[plot, ==, null]
[plot]
[null]
[plot, instanceof, ValueAxisPlot]
[plot]
[(, ValueAxisPlot, ), plot]
[plot]
[vap, ., getDataRange, (, this, )]
[vap]
[this]
[r, ==, null]
[r]
[null]
[r]
[getDefaultAutoRange, (, )]
[r, ., getUpperBound, (, )]
[r]
[Math, ., max, (, r, ., getLowerBound, (, ), ,, this, ., smallestValue, )]
[Math]
[r, ., getLowerBound, (, )]
[r]
[this, ., smallestValue]
[this]
[upper, -, lower]
[upper]
[lower]
[getFixedAutoRange, (, )]
[fixedAutoRange, >, 0.0]
[fixedAutoRange]
[0.0]
[lower]
[Math, ., max, (, upper, -, fixedAutoRange, ,, this, ., smallestValue, )]
[Math]
[upper, -, fixedAutoRange]
[upper]
[fixedAutoRange]
[this, ., smallestValue]
[this]
[getAutoRangeMinimumSize, (, )]
[range, <, minRange]
[range]
[minRange]
[(, minRange, -, range, ), /, 2]
[(, minRange, -, range, )]
[minRange, -, range]
[minRange]
[range]
[2]
[upper]
[upper, +, expand]
[upper]
[expand]
[lower]
[lower, -, expand]
[lower]
[expand]
[calculateLog, (, upper, )]
[upper]
[calculateLog, (, lower, )]
[lower]
[logUpper, -, logLower]
[logUpper]
[logLower]
[logUpper]
[logUpper, +, getUpperMargin, (, ), *, logRange]
[logUpper]
[getUpperMargin, (, ), *, logRange]
[getUpperMargin, (, )]
[logRange]
[logLower]
[logLower, -, getLowerMargin, (, ), *, logRange]
[logLower]
[getLowerMargin, (, ), *, logRange]
[getLowerMargin, (, )]
[logRange]
[upper]
[calculateValue, (, logUpper, )]
[logUpper]
[lower]
[calculateValue, (, logLower, )]
[logLower]
[setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, )]
[new, Range, (, lower, ,, upper, )]
[lower]
[upper]
[false]
[false]
[null]
[!, isVisible, (, )]
[isVisible, (, )]
[state]
[new, AxisState, (, cursor, )]
[cursor]
[refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, )]
[g2]
[state]
[dataArea]
[edge]
[state, ., setTicks, (, ticks, )]
[state]
[ticks]
[state]
[state]
[drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, )]
[g2]
[cursor]
[plotArea]
[dataArea]
[edge]
[plotState]
[state]
[drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, )]
[getLabel, (, )]
[g2]
[plotArea]
[dataArea]
[edge]
[state]
[plotState]
[createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, )]
[cursor]
[state]
[dataArea]
[edge]
[plotState]
[state]
[new, java, ., util, ., ArrayList, (, )]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[result]
[refreshTicksHorizontal, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[result]
[refreshTicksVertical, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[result]
[getRange, (, )]
[new, ArrayList, (, )]
[getTickLabelFont, (, )]
[g2, ., setFont, (, tickLabelFont, )]
[g2]
[tickLabelFont]
[edge, ==, RectangleEdge, ., TOP]
[edge]
[RectangleEdge, ., TOP]
[RectangleEdge]
[textAnchor]
[TextAnchor, ., BOTTOM_CENTER]
[TextAnchor]
[textAnchor]
[TextAnchor, ., TOP_CENTER]
[TextAnchor]
[isAutoTickUnitSelection, (, )]
[selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[this, ., tickUnit, ., getMinorTickCount, (, )]
[this, ., tickUnit]
[this]
[Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), )]
[Math]
[calculateLog, (, getLowerBound, (, ), )]
[getLowerBound, (, )]
[Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), )]
[Math]
[calculateLog, (, getUpperBound, (, ), )]
[getUpperBound, (, )]
[start]
[current, <=, end]
[current]
[end]
[calculateValue, (, current, )]
[current]
[range, ., contains, (, v, )]
[range]
[v]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), )]
[ticks]
[new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, )]
[TickType, ., MAJOR]
[TickType]
[v]
[createTickLabel, (, v, )]
[v]
[textAnchor]
[TextAnchor, ., CENTER]
[TextAnchor]
[0.0]
[Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), )]
[Math]
[this, ., base]
[this]
[current, +, this, ., tickUnit, ., getSize, (, )]
[current]
[this, ., tickUnit, ., getSize, (, )]
[this, ., tickUnit]
[this]
[1]
[i, <, minorTickCount]
[i]
[minorTickCount]
[i, ++]
[i]
[v, +, i, *, (, (, next, -, v, ), /, minorTickCount, )]
[v]
[i, *, (, (, next, -, v, ), /, minorTickCount, )]
[i]
[(, (, next, -, v, ), /, minorTickCount, )]
[(, next, -, v, ), /, minorTickCount]
[(, next, -, v, )]
[next, -, v]
[next]
[v]
[minorTickCount]
[range, ., contains, (, minorV, )]
[range]
[minorV]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), )]
[ticks]
[new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, )]
[TickType, ., MINOR]
[TickType]
[minorV]
[""]
[textAnchor]
[TextAnchor, ., CENTER]
[TextAnchor]
[0.0]
[current]
[current, +, this, ., tickUnit, ., getSize, (, )]
[current]
[this, ., tickUnit, ., getSize, (, )]
[this, ., tickUnit]
[this]
[ticks]
[getRange, (, )]
[new, ArrayList, (, )]
[getTickLabelFont, (, )]
[g2, ., setFont, (, tickLabelFont, )]
[g2]
[tickLabelFont]
[edge, ==, RectangleEdge, ., RIGHT]
[edge]
[RectangleEdge, ., RIGHT]
[RectangleEdge]
[textAnchor]
[TextAnchor, ., CENTER_LEFT]
[TextAnchor]
[textAnchor]
[TextAnchor, ., CENTER_RIGHT]
[TextAnchor]
[isAutoTickUnitSelection, (, )]
[selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[this, ., tickUnit, ., getMinorTickCount, (, )]
[this, ., tickUnit]
[this]
[Math, ., floor, (, calculateLog, (, getLowerBound, (, ), ), )]
[Math]
[calculateLog, (, getLowerBound, (, ), )]
[getLowerBound, (, )]
[Math, ., ceil, (, calculateLog, (, getUpperBound, (, ), ), )]
[Math]
[calculateLog, (, getUpperBound, (, ), )]
[getUpperBound, (, )]
[start]
[current, <=, end]
[current]
[end]
[calculateValue, (, current, )]
[current]
[range, ., contains, (, v, )]
[range]
[v]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), )]
[ticks]
[new, NumberTick, (, TickType, ., MAJOR, ,, v, ,, createTickLabel, (, v, ), ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, )]
[TickType, ., MAJOR]
[TickType]
[v]
[createTickLabel, (, v, )]
[v]
[textAnchor]
[TextAnchor, ., CENTER]
[TextAnchor]
[0.0]
[Math, ., pow, (, this, ., base, ,, current, +, this, ., tickUnit, ., getSize, (, ), )]
[Math]
[this, ., base]
[this]
[current, +, this, ., tickUnit, ., getSize, (, )]
[current]
[this, ., tickUnit, ., getSize, (, )]
[this, ., tickUnit]
[this]
[1]
[i, <, minorTickCount]
[i]
[minorTickCount]
[i, ++]
[i]
[v, +, i, *, (, (, next, -, v, ), /, minorTickCount, )]
[v]
[i, *, (, (, next, -, v, ), /, minorTickCount, )]
[i]
[(, (, next, -, v, ), /, minorTickCount, )]
[(, next, -, v, ), /, minorTickCount]
[(, next, -, v, )]
[next, -, v]
[next]
[v]
[minorTickCount]
[range, ., contains, (, minorV, )]
[range]
[minorV]
[ticks, ., add, (, new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, ), )]
[ticks]
[new, NumberTick, (, TickType, ., MINOR, ,, minorV, ,, "", ,, textAnchor, ,, TextAnchor, ., CENTER, ,, 0.0, )]
[TickType, ., MINOR]
[TickType]
[minorV]
[""]
[textAnchor]
[TextAnchor, ., CENTER]
[TextAnchor]
[0.0]
[current]
[current, +, this, ., tickUnit, ., getSize, (, )]
[current]
[this, ., tickUnit, ., getSize, (, )]
[this, ., tickUnit]
[this]
[ticks]
[RectangleEdge, ., isTopOrBottom, (, edge, )]
[RectangleEdge]
[edge]
[selectHorizontalAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[RectangleEdge, ., isLeftOrRight, (, edge, )]
[RectangleEdge]
[edge]
[selectVerticalAutoTickUnit, (, g2, ,, dataArea, ,, edge, )]
[g2]
[dataArea]
[edge]
[estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), )]
[g2]
[getTickUnit, (, )]
[getStandardTickUnits, (, )]
[tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), )]
[tickUnits]
[getTickUnit, (, )]
[exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, )]
[unit1, ., getSize, (, )]
[unit1]
[dataArea]
[edge]
[(, tickLabelWidth, /, unit1Width, ), *, unit1, ., getSize, (, )]
[(, tickLabelWidth, /, unit1Width, )]
[tickLabelWidth, /, unit1Width]
[tickLabelWidth]
[unit1Width]
[unit1, ., getSize, (, )]
[unit1]
[(, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[tickUnits, ., getCeilingTickUnit, (, guess, )]
[tickUnits]
[guess]
[exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, )]
[unit2, ., getSize, (, )]
[unit2]
[dataArea]
[edge]
[tickLabelWidth]
[estimateMaximumTickLabelWidth, (, g2, ,, unit2, )]
[g2]
[unit2]
[tickLabelWidth, >, unit2Width]
[tickLabelWidth]
[unit2Width]
[unit2]
[(, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, )]
[tickUnits, ., getLargerTickUnit, (, unit2, )]
[tickUnits]
[unit2]
[setTickUnit, (, unit2, ,, false, ,, false, )]
[unit2]
[false]
[false]
[valueToJava2D, (, calculateValue, (, 1.0, ), ,, area, ,, edge, )]
[calculateValue, (, 1.0, )]
[1.0]
[area]
[edge]
[valueToJava2D, (, calculateValue, (, length, +, 1.0, ), ,, area, ,, edge, )]
[calculateValue, (, length, +, 1.0, )]
[length, +, 1.0]
[length]
[1.0]
[area]
[edge]
[Math, ., abs, (, l, -, one, )]
[Math]
[l, -, one]
[l]
[one]
[estimateMaximumTickLabelHeight, (, g2, )]
[g2]
[getStandardTickUnits, (, )]
[tickUnits, ., getCeilingTickUnit, (, getTickUnit, (, ), )]
[tickUnits]
[getTickUnit, (, )]
[exponentLengthToJava2D, (, unit1, ., getSize, (, ), ,, dataArea, ,, edge, )]
[unit1, ., getSize, (, )]
[unit1]
[dataArea]
[edge]
[(, tickLabelHeight, /, unitHeight, ), *, unit1, ., getSize, (, )]
[(, tickLabelHeight, /, unitHeight, )]
[tickLabelHeight, /, unitHeight]
[tickLabelHeight]
[unitHeight]
[unit1, ., getSize, (, )]
[unit1]
[(, NumberTickUnit, ), tickUnits, ., getCeilingTickUnit, (, guess, )]
[tickUnits, ., getCeilingTickUnit, (, guess, )]
[tickUnits]
[guess]
[exponentLengthToJava2D, (, unit2, ., getSize, (, ), ,, dataArea, ,, edge, )]
[unit2, ., getSize, (, )]
[unit2]
[dataArea]
[edge]
[tickLabelHeight]
[estimateMaximumTickLabelHeight, (, g2, )]
[g2]
[tickLabelHeight, >, unit2Height]
[tickLabelHeight]
[unit2Height]
[unit2]
[(, NumberTickUnit, ), tickUnits, ., getLargerTickUnit, (, unit2, )]
[tickUnits, ., getLargerTickUnit, (, unit2, )]
[tickUnits]
[unit2]
[setTickUnit, (, unit2, ,, false, ,, false, )]
[unit2]
[false]
[false]
[getTickLabelInsets, (, )]
[tickLabelInsets, ., getTop, (, ), +, tickLabelInsets, ., getBottom, (, )]
[tickLabelInsets, ., getTop, (, )]
[tickLabelInsets]
[tickLabelInsets, ., getBottom, (, )]
[tickLabelInsets]
[getTickLabelFont, (, )]
[g2, ., getFontRenderContext, (, )]
[g2]
[result]
[tickLabelFont, ., getLineMetrics, (, "123", ,, frc, ), ., getHeight, (, )]
[tickLabelFont, ., getLineMetrics, (, "123", ,, frc, )]
[tickLabelFont]
["123"]
[frc]
[result]
[getTickLabelInsets, (, )]
[tickLabelInsets, ., getLeft, (, ), +, tickLabelInsets, ., getRight, (, )]
[tickLabelInsets, ., getLeft, (, )]
[tickLabelInsets]
[tickLabelInsets, ., getRight, (, )]
[tickLabelInsets]
[isVerticalTickLabels, (, )]
[g2, ., getFontRenderContext, (, )]
[g2]
[getTickLabelFont, (, ), ., getLineMetrics, (, "0", ,, frc, )]
[getTickLabelFont, (, )]
["0"]
[frc]
[result]
[lm, ., getHeight, (, )]
[lm]
[g2, ., getFontMetrics, (, getTickLabelFont, (, ), )]
[g2]
[getTickLabelFont, (, )]
[getRange, (, )]
[range, ., getLowerBound, (, )]
[range]
[range, ., getUpperBound, (, )]
[range]
[""]
[""]
[getNumberFormatOverride, (, )]
[formatter, !=, null]
[formatter]
[null]
[lowerStr]
[formatter, ., format, (, lower, )]
[formatter]
[lower]
[upperStr]
[formatter, ., format, (, upper, )]
[formatter]
[upper]
[lowerStr]
[unit, ., valueToString, (, lower, )]
[unit]
[lower]
[upperStr]
[unit, ., valueToString, (, upper, )]
[unit]
[upper]
[fm, ., stringWidth, (, lowerStr, )]
[fm]
[lowerStr]
[fm, ., stringWidth, (, upperStr, )]
[fm]
[upperStr]
[result]
[Math, ., max, (, w1, ,, w2, )]
[Math]
[w1]
[w2]
[result]
[getRange, (, )]
[range, ., getLowerBound, (, )]
[range]
[range, ., getUpperBound, (, )]
[range]
[calculateLog, (, start, )]
[start]
[calculateLog, (, end, )]
[end]
[log2, -, log1]
[log2]
[log1]
[null]
[isInverted, (, )]
[log1, +, length, *, (, 1, -, upperPercent, )]
[log1]
[length, *, (, 1, -, upperPercent, )]
[length]
[(, 1, -, upperPercent, )]
[1, -, upperPercent]
[1]
[upperPercent]
[log1, +, length, *, (, 1, -, lowerPercent, )]
[log1]
[length, *, (, 1, -, lowerPercent, )]
[length]
[(, 1, -, lowerPercent, )]
[1, -, lowerPercent]
[1]
[lowerPercent]
[adjusted]
[new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), )]
[calculateValue, (, logA, )]
[logA]
[calculateValue, (, logB, )]
[logB]
[log1, +, length, *, lowerPercent]
[log1]
[length, *, lowerPercent]
[length]
[lowerPercent]
[log1, +, length, *, upperPercent]
[log1]
[length, *, upperPercent]
[length]
[upperPercent]
[adjusted]
[new, Range, (, calculateValue, (, logA, ), ,, calculateValue, (, logB, ), )]
[calculateValue, (, logA, )]
[logA]
[calculateValue, (, logB, )]
[logB]
[setRange, (, adjusted, )]
[adjusted]
[getRange, (, )]
[range, ., getLowerBound, (, )]
[range]
[range, ., getUpperBound, (, )]
[range]
[calculateLog, (, lower, )]
[lower]
[calculateLog, (, upper, )]
[upper]
[log2, -, log1]
[log2]
[log1]
[length, *, percent]
[length]
[percent]
[log1]
[log1, +, adj]
[log1]
[adj]
[log2]
[log2, +, adj]
[log2]
[adj]
[setRange, (, calculateValue, (, log1, ), ,, calculateValue, (, log2, ), )]
[calculateValue, (, log1, )]
[log1]
[calculateValue, (, log2, )]
[log2]
[this, ., numberFormatOverride, !=, null]
[this, ., numberFormatOverride]
[this]
[null]
[this, ., numberFormatOverride, ., format, (, value, )]
[this, ., numberFormatOverride]
[this]
[value]
[this, ., tickUnit, ., valueToString, (, value, )]
[this, ., tickUnit]
[this]
[value]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, LogAxis, )]
[(, obj, instanceof, LogAxis, )]
[obj, instanceof, LogAxis]
[obj]
[false]
[(, LogAxis, ), obj]
[obj]
[this, ., base, !=, that, ., base]
[this, ., base]
[this]
[that, ., base]
[that]
[false]
[this, ., smallestValue, !=, that, ., smallestValue]
[this, ., smallestValue]
[this]
[that, ., smallestValue]
[that]
[false]
[super, ., equals, (, obj, )]
[super]
[obj]
[193]
[Double, ., doubleToLongBits, (, this, ., base, )]
[Double]
[this, ., base]
[this]
[result]
[37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), )]
[37, *, result]
[37]
[result]
[(, int, ), (, temp, ^, (, temp, >, >, >, 32, ), )]
[(, temp, ^, (, temp, >, >, >, 32, ), )]
[temp, ^, (, temp, >, >, >, 32, )]
[temp]
[(, temp, >, >, >, 32, )]
[temp, >, >, >, 32]
[temp]
[32]
[temp]
[Double, ., doubleToLongBits, (, this, ., smallestValue, )]
[Double]
[this, ., smallestValue]
[this]
[result]
[37, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), )]
[37, *, result]
[37]
[result]
[(, int, ), (, temp, ^, (, temp, >, >, >, 32, ), )]
[(, temp, ^, (, temp, >, >, >, 32, ), )]
[temp, ^, (, temp, >, >, >, 32, )]
[temp]
[(, temp, >, >, >, 32, )]
[temp, >, >, >, 32]
[temp]
[32]
[this, ., numberFormatOverride, !=, null]
[this, ., numberFormatOverride]
[this]
[null]
[result]
[37, *, result, +, this, ., numberFormatOverride, ., hashCode, (, )]
[37, *, result]
[37]
[result]
[this, ., numberFormatOverride, ., hashCode, (, )]
[this, ., numberFormatOverride]
[this]
[result]
[37, *, result, +, this, ., tickUnit, ., hashCode, (, )]
[37, *, result]
[37]
[result]
[this, ., tickUnit, ., hashCode, (, )]
[this, ., tickUnit]
[this]
[result]
[new, TickUnits, (, )]
[new, LogFormat, (, )]
[units, ., add, (, new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, ), )]
[units]
[new, NumberTickUnit, (, 0.05, ,, numberFormat, ,, 2, )]
[0.05]
[numberFormat]
[2]
[units, ., add, (, new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, ), )]
[units]
[new, NumberTickUnit, (, 0.1, ,, numberFormat, ,, 10, )]
[0.1]
[numberFormat]
[10]
[units, ., add, (, new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, ), )]
[units]
[new, NumberTickUnit, (, 0.2, ,, numberFormat, ,, 2, )]
[0.2]
[numberFormat]
[2]
[units, ., add, (, new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, ), )]
[units]
[new, NumberTickUnit, (, 0.5, ,, numberFormat, ,, 5, )]
[0.5]
[numberFormat]
[5]
[units, ., add, (, new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, ), )]
[units]
[new, NumberTickUnit, (, 1, ,, numberFormat, ,, 10, )]
[1]
[numberFormat]
[10]
[units, ., add, (, new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, ), )]
[units]
[new, NumberTickUnit, (, 2, ,, numberFormat, ,, 10, )]
[2]
[numberFormat]
[10]
[units, ., add, (, new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, ), )]
[units]
[new, NumberTickUnit, (, 3, ,, numberFormat, ,, 15, )]
[3]
[numberFormat]
[15]
[units, ., add, (, new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, ), )]
[units]
[new, NumberTickUnit, (, 4, ,, numberFormat, ,, 20, )]
[4]
[numberFormat]
[20]
[units, ., add, (, new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, ), )]
[units]
[new, NumberTickUnit, (, 5, ,, numberFormat, ,, 25, )]
[5]
[numberFormat]
[25]
[units, ., add, (, new, NumberTickUnit, (, 6, ,, numberFormat, ), )]
[units]
[new, NumberTickUnit, (, 6, ,, numberFormat, )]
[6]
[numberFormat]
[units, ., add, (, new, NumberTickUnit, (, 7, ,, numberFormat, ), )]
[units]
[new, NumberTickUnit, (, 7, ,, numberFormat, )]
[7]
[numberFormat]
[units, ., add, (, new, NumberTickUnit, (, 8, ,, numberFormat, ), )]
[units]
[new, NumberTickUnit, (, 8, ,, numberFormat, )]
[8]
[numberFormat]
[units, ., add, (, new, NumberTickUnit, (, 9, ,, numberFormat, ), )]
[units]
[new, NumberTickUnit, (, 9, ,, numberFormat, )]
[9]
[numberFormat]
[units, ., add, (, new, NumberTickUnit, (, 10, ,, numberFormat, ), )]
[units]
[new, NumberTickUnit, (, 10, ,, numberFormat, )]
[10]
[numberFormat]
[units]
