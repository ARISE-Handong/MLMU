["COMPILED"]
["goog.LOCALE"]
[DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", )]
[DiagnosticType]
["JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK"]
["TightenTypes requires type checking. Please use --check_types."]
[DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", )]
[DiagnosticType]
["JSC_CANNOT_USE_PROTOTYPE_AND_VAR"]
["Rename prototypes and inline variables cannot be used together"]
[DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", )]
[DiagnosticType]
["JSC_REPORT_PATH_IO_ERROR"]
["Error writing compiler report to {0}"]
[DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", )]
[DiagnosticType]
["JSC_NAME_REF_GRAPH_FILE_ERROR"]
["Error \"{1}\" writing name reference graph to \"{0}\"."]
[DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", )]
[DiagnosticType]
["JSC_NAME_REF_REPORT_FILE_ERROR"]
["Error \"{1}\" writing name reference report to \"{0}\"."]
[java, ., util, ., regex, ., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", )]
[java, ., util, ., regex, ., Pattern]
[java, ., util, ., regex]
[java, ., util]
[java]
["^[a-zA-Z0-9$_]+$"]
[null]
[null]
[null]
[null]
[new, CrossModuleMethodMotion, ., IdGenerator, (, )]
[null]
[null]
[null]
[null]
[null]
[null]
[null]
[options]
[new, State, (, cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, )]
[cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, )]
[cssNames, ==, null]
[cssNames]
[null]
[null]
[Maps, ., newHashMap, (, cssNames, )]
[Maps]
[cssNames]
[exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, )]
[exportedNames, ==, null]
[exportedNames]
[null]
[null]
[Collections, ., unmodifiableSet, (, exportedNames, )]
[Collections]
[exportedNames]
[crossModuleIdGenerator]
[variableMap]
[propertyMap]
[anonymousFunctionNameMap]
[stringMap]
[functionNames]
[idGeneratorMap]
[this, ., cssNames]
[this]
[state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, )]
[state, ., cssNames, ==, null]
[state, ., cssNames]
[state]
[null]
[null]
[Maps, ., newHashMap, (, state, ., cssNames, )]
[Maps]
[state, ., cssNames]
[state]
[this, ., exportedNames]
[this]
[state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, )]
[state, ., exportedNames, ==, null]
[state, ., exportedNames]
[state]
[null]
[null]
[Sets, ., newHashSet, (, state, ., exportedNames, )]
[Sets]
[state, ., exportedNames]
[state]
[this, ., crossModuleIdGenerator]
[this]
[state, ., crossModuleIdGenerator]
[state]
[this, ., variableMap]
[this]
[state, ., variableMap]
[state]
[this, ., propertyMap]
[this]
[state, ., propertyMap]
[state]
[this, ., anonymousFunctionNameMap]
[this]
[state, ., anonymousFunctionNameMap]
[state]
[this, ., stringMap]
[this]
[state, ., stringMap]
[state]
[this, ., functionNames]
[this]
[state, ., functionNames]
[state]
[this, ., idGeneratorMap]
[this]
[state, ., idGeneratorMap]
[state]
[namespaceForChecks]
[preprocessorSymbolTable]
[options, ., ideMode]
[options]
[compiler, ., getRoot, (, )]
[compiler]
[preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root]
[preprocessorSymbolTable, ==, null]
[preprocessorSymbolTable]
[null]
[preprocessorSymbolTable, ., getRootNode, (, ), !=, root]
[preprocessorSymbolTable, ., getRootNode, (, )]
[preprocessorSymbolTable]
[root]
[preprocessorSymbolTable]
[new, PreprocessorSymbolTable, (, root, )]
[root]
[Lists, ., newArrayList, (, )]
[Lists]
[checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), )]
[checks]
[createEmptyPass, (, "beforeStandardChecks", )]
["beforeStandardChecks"]
[options, ., closurePass]
[options]
[checks, ., add, (, closureGoogScopeAliases, )]
[checks]
[closureGoogScopeAliases]
[checks, ., add, (, closureRewriteGoogClass, )]
[checks]
[closureRewriteGoogClass]
[options, ., nameAnonymousFunctionsOnly]
[options]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., MAPPED]
[AnonymousFunctionNamingPolicy]
[checks, ., add, (, nameMappedAnonymousFunctions, )]
[checks]
[nameMappedAnonymousFunctions]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., UNMAPPED]
[AnonymousFunctionNamingPolicy]
[checks, ., add, (, nameUnmappedAnonymousFunctions, )]
[checks]
[nameUnmappedAnonymousFunctions]
[checks]
[options, ., jqueryPass]
[options]
[checks, ., add, (, jqueryAliases, )]
[checks]
[jqueryAliases]
[checks, ., add, (, checkSideEffects, )]
[checks]
[checkSideEffects]
[options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, )]
[options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options, ., checkSuspiciousCode]
[options]
[options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options]
[DiagnosticGroups, ., GLOBAL_THIS]
[DiagnosticGroups]
[options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, )]
[options]
[DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT]
[DiagnosticGroups]
[checks, ., add, (, suspiciousCode, )]
[checks]
[suspiciousCode]
[options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, )]
[options, ., checkControlStructures]
[options]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, )]
[options]
[DiagnosticGroups, ., ES5_STRICT]
[DiagnosticGroups]
[checks, ., add, (, checkControlStructures, )]
[checks]
[checkControlStructures]
[options, ., checkRequires, ., isOn, (, )]
[options, ., checkRequires]
[options]
[checks, ., add, (, checkRequires, )]
[checks]
[checkRequires]
[options, ., checkProvides, ., isOn, (, )]
[options, ., checkProvides]
[options]
[checks, ., add, (, checkProvides, )]
[checks]
[checkProvides]
[options, ., generateExports]
[options]
[checks, ., add, (, generateExports, )]
[checks]
[generateExports]
[options, ., exportTestFunctions]
[options]
[checks, ., add, (, exportTestFunctions, )]
[checks]
[exportTestFunctions]
[options, ., closurePass]
[options]
[checks, ., add, (, closurePrimitives, )]
[checks]
[closurePrimitives]
[options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, )]
[options, ., closurePass]
[options]
[options, ., checkMissingGetCssNameLevel, ., isOn, (, )]
[options, ., checkMissingGetCssNameLevel]
[options]
[checks, ., add, (, closureCheckGetCssName, )]
[checks]
[closureCheckGetCssName]
[options, ., syntheticBlockStartMarker, !=, null]
[options, ., syntheticBlockStartMarker]
[options]
[null]
[checks, ., add, (, createSyntheticBlocks, )]
[checks]
[createSyntheticBlocks]
[checks, ., add, (, checkVars, )]
[checks]
[checkVars]
[options, ., computeFunctionSideEffects]
[options]
[checks, ., add, (, checkRegExp, )]
[checks]
[checkRegExp]
[options, ., aggressiveVarCheck, ., isOn, (, )]
[options, ., aggressiveVarCheck]
[options]
[checks, ., add, (, checkVariableReferences, )]
[checks]
[checkVariableReferences]
[options, ., processObjectPropertyString]
[options]
[checks, ., add, (, objectPropertyStringPreprocess, )]
[checks]
[objectPropertyStringPreprocess]
[options, ., checkTypes, ||, options, ., inferTypes]
[options, ., checkTypes]
[options]
[options, ., inferTypes]
[options]
[checks, ., add, (, resolveTypes, )]
[checks]
[resolveTypes]
[checks, ., add, (, inferTypes, )]
[checks]
[inferTypes]
[options, ., checkTypes]
[options]
[checks, ., add, (, checkTypes, )]
[checks]
[checkTypes]
[checks, ., add, (, inferJsDocInfo, )]
[checks]
[inferJsDocInfo]
[!, options, ., ideMode, &&, !, options, ., saveDataStructures]
[!, options, ., ideMode]
[options, ., ideMode]
[options]
[!, options, ., saveDataStructures]
[options, ., saveDataStructures]
[options]
[checks, ., add, (, clearTypedScopePass, )]
[checks]
[clearTypedScopePass]
[options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), )]
[options, ., checkUnreachableCode, ., isOn, (, )]
[options, ., checkUnreachableCode]
[options]
[(, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), )]
[options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, )]
[options, ., checkTypes]
[options]
[options, ., checkMissingReturn, ., isOn, (, )]
[options, ., checkMissingReturn]
[options]
[checks, ., add, (, checkControlFlow, )]
[checks]
[checkControlFlow]
[options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), )]
[options, ., checkTypes]
[options]
[(, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), )]
[options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, )]
[options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, )]
[options]
[DiagnosticGroups, ., ACCESS_CONTROLS]
[DiagnosticGroups]
[options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, )]
[options]
[DiagnosticGroups, ., CONSTANT_PROPERTY]
[DiagnosticGroups]
[checks, ., add, (, checkAccessControls, )]
[checks]
[checkAccessControls]
[options, ., checkGlobalNamesLevel, ., isOn, (, )]
[options, ., checkGlobalNamesLevel]
[options]
[checks, ., add, (, checkGlobalNames, )]
[checks]
[checkGlobalNames]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja]
[options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, )]
[options]
[DiagnosticGroups, ., ES5_STRICT]
[DiagnosticGroups]
[options, ., checkCaja]
[options]
[checks, ., add, (, checkStrictMode, )]
[checks]
[checkStrictMode]
[options, ., closurePass]
[options]
[checks, ., add, (, closureReplaceGetCssName, )]
[checks]
[closureReplaceGetCssName]
[options, ., replaceMessagesWithChromeI18n]
[options]
[checks, ., add, (, replaceMessagesForChrome, )]
[checks]
[replaceMessagesForChrome]
[options, ., messageBundle, !=, null]
[options, ., messageBundle]
[options]
[null]
[checks, ., add, (, replaceMessages, )]
[checks]
[replaceMessages]
[options, ., getTweakProcessing, (, ), ., isOn, (, )]
[options, ., getTweakProcessing, (, )]
[options]
[checks, ., add, (, processTweaks, )]
[checks]
[processTweaks]
[checks, ., add, (, processDefines, )]
[checks]
[processDefines]
[options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation]
[options, ., instrumentationTemplate, !=, null]
[options, ., instrumentationTemplate]
[options]
[null]
[options, ., recordFunctionInformation]
[options]
[checks, ., add, (, computeFunctionNames, )]
[checks]
[computeFunctionNames]
[options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, )]
[options, ., nameReferenceGraphPath, !=, null]
[options, ., nameReferenceGraphPath]
[options]
[null]
[!, options, ., nameReferenceGraphPath, ., isEmpty, (, )]
[options, ., nameReferenceGraphPath, ., isEmpty, (, )]
[options, ., nameReferenceGraphPath]
[options]
[checks, ., add, (, printNameReferenceGraph, )]
[checks]
[printNameReferenceGraph]
[options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, )]
[options, ., nameReferenceReportPath, !=, null]
[options, ., nameReferenceReportPath]
[options]
[null]
[!, options, ., nameReferenceReportPath, ., isEmpty, (, )]
[options, ., nameReferenceReportPath, ., isEmpty, (, )]
[options, ., nameReferenceReportPath]
[options]
[checks, ., add, (, printNameReferenceReport, )]
[checks]
[printNameReferenceReport]
[checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), )]
[checks]
[createEmptyPass, (, "afterStandardChecks", )]
["afterStandardChecks"]
[assertAllOneTimePasses, (, checks, )]
[checks]
[checks]
[Lists, ., newArrayList, (, )]
[Lists]
[passes, ., add, (, garbageCollectChecks, )]
[passes]
[garbageCollectChecks]
[options, ., runtimeTypeCheck]
[options]
[passes, ., add, (, runtimeTypeCheck, )]
[passes]
[runtimeTypeCheck]
[passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), )]
[passes]
[createEmptyPass, (, "beforeStandardOptimizations", )]
["beforeStandardOptimizations"]
[options, ., replaceIdGenerators]
[options]
[passes, ., add, (, replaceIdGenerators, )]
[passes]
[replaceIdGenerators]
[options, ., optimizeArgumentsArray]
[options]
[passes, ., add, (, optimizeArgumentsArray, )]
[passes]
[optimizeArgumentsArray]
[options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, )]
[options, ., closurePass]
[options]
[(, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, )]
[options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts]
[options, ., removeAbstractMethods]
[options]
[options, ., removeClosureAsserts]
[options]
[passes, ., add, (, closureCodeRemoval, )]
[passes]
[closureCodeRemoval]
[options, ., collapseProperties]
[options]
[passes, ., add, (, collapseProperties, )]
[passes]
[collapseProperties]
[!, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, )]
[options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, )]
[options, ., replaceStringsFunctionDescriptions]
[options]
[passes, ., add, (, replaceStrings, )]
[passes]
[replaceStrings]
[options, ., tightenTypes]
[options]
[passes, ., add, (, tightenTypesBuilder, )]
[passes]
[tightenTypesBuilder]
[options, ., disambiguateProperties]
[options]
[passes, ., add, (, disambiguateProperties, )]
[passes]
[disambiguateProperties]
[options, ., computeFunctionSideEffects]
[options]
[passes, ., add, (, markPureFunctions, )]
[passes]
[markPureFunctions]
[options, ., markNoSideEffectCalls]
[options]
[passes, ., add, (, markNoSideEffectCalls, )]
[passes]
[markNoSideEffectCalls]
[options, ., chainCalls]
[options]
[passes, ., add, (, chainCalls, )]
[passes]
[chainCalls]
[passes, ., add, (, checkConsts, )]
[passes]
[checkConsts]
[options, ., ignoreCajaProperties]
[options]
[passes, ., add, (, ignoreCajaProperties, )]
[passes]
[ignoreCajaProperties]
[assertAllOneTimePasses, (, passes, )]
[passes]
[options, ., smartNameRemoval, ||, options, ., reportPath, !=, null]
[options, ., smartNameRemoval]
[options]
[options, ., reportPath, !=, null]
[options, ., reportPath]
[options]
[null]
[passes, ., addAll, (, getCodeRemovingPasses, (, ), )]
[passes]
[getCodeRemovingPasses, (, )]
[passes, ., add, (, smartNamePass, )]
[passes]
[smartNamePass]
[options, ., closurePass]
[options]
[passes, ., add, (, closureOptimizePrimitives, )]
[passes]
[closureOptimizePrimitives]
[options, ., crossModuleCodeMotion]
[options]
[passes, ., add, (, crossModuleCodeMotion, )]
[passes]
[crossModuleCodeMotion]
[options, ., devirtualizePrototypeMethods]
[options]
[passes, ., add, (, devirtualizePrototypeMethods, )]
[passes]
[devirtualizePrototypeMethods]
[options, ., customPasses, !=, null]
[options, ., customPasses]
[options]
[null]
[passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), )]
[passes]
[getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, )]
[CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP]
[CustomPassExecutionTime]
[passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), )]
[passes]
[createEmptyPass, (, "beforeMainOptimizations", )]
["beforeMainOptimizations"]
[passes, ., addAll, (, getMainOptimizationLoop, (, ), )]
[passes]
[getMainOptimizationLoop, (, )]
[options, ., specializeInitialModule]
[options]
[options, ., crossModuleCodeMotion]
[options]
[passes, ., add, (, crossModuleCodeMotion, )]
[passes]
[crossModuleCodeMotion]
[options, ., crossModuleMethodMotion]
[options]
[passes, ., add, (, crossModuleMethodMotion, )]
[passes]
[crossModuleMethodMotion]
[passes, ., add, (, specializeInitialModule, )]
[passes]
[specializeInitialModule]
[passes, ., addAll, (, getMainOptimizationLoop, (, ), )]
[passes]
[getMainOptimizationLoop, (, )]
[passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), )]
[passes]
[createEmptyPass, (, "beforeModuleMotion", )]
["beforeModuleMotion"]
[options, ., crossModuleCodeMotion]
[options]
[passes, ., add, (, crossModuleCodeMotion, )]
[passes]
[crossModuleCodeMotion]
[options, ., crossModuleMethodMotion]
[options]
[passes, ., add, (, crossModuleMethodMotion, )]
[passes]
[crossModuleMethodMotion]
[passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), )]
[passes]
[createEmptyPass, (, "afterModuleMotion", )]
["afterModuleMotion"]
[options, ., customPasses, !=, null]
[options, ., customPasses]
[options]
[null]
[passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), )]
[passes]
[getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, )]
[CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP]
[CustomPassExecutionTime]
[options, ., flowSensitiveInlineVariables]
[options]
[passes, ., add, (, flowSensitiveInlineVariables, )]
[passes]
[flowSensitiveInlineVariables]
[options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars]
[options, ., removeUnusedVars]
[options]
[options, ., removeUnusedLocalVars]
[options]
[passes, ., add, (, removeUnusedVars, )]
[passes]
[removeUnusedVars]
[options, ., smartNameRemoval]
[options]
[passes, ., add, (, smartNamePass2, )]
[passes]
[smartNamePass2]
[options, ., collapseAnonymousFunctions]
[options]
[passes, ., add, (, collapseAnonymousFunctions, )]
[passes]
[collapseAnonymousFunctions]
[options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null]
[options, ., moveFunctionDeclarations]
[options]
[options, ., renamePrefixNamespace, !=, null]
[options, ., renamePrefixNamespace]
[options]
[null]
[passes, ., add, (, moveFunctionDeclarations, )]
[passes]
[moveFunctionDeclarations]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., MAPPED]
[AnonymousFunctionNamingPolicy]
[passes, ., add, (, nameMappedAnonymousFunctions, )]
[passes]
[nameMappedAnonymousFunctions]
[options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, )]
[options, ., extractPrototypeMemberDeclarations]
[options]
[(, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, )]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., HEURISTIC]
[PropertyRenamingPolicy]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[PropertyRenamingPolicy]
[passes, ., add, (, extractPrototypeMemberDeclarations, )]
[passes]
[extractPrototypeMemberDeclarations]
[options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, )]
[options, ., ambiguateProperties]
[options]
[(, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, )]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., ALL_UNQUOTED]
[PropertyRenamingPolicy]
[passes, ., add, (, ambiguateProperties, )]
[passes]
[ambiguateProperties]
[options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., OFF]
[PropertyRenamingPolicy]
[passes, ., add, (, renameProperties, )]
[passes]
[renameProperties]
[options, ., reserveRawExports]
[options]
[passes, ., add, (, gatherRawExports, )]
[passes]
[gatherRawExports]
[options, ., convertToDottedProperties]
[options]
[passes, ., add, (, convertToDottedProperties, )]
[passes]
[convertToDottedProperties]
[options, ., rewriteFunctionExpressions]
[options]
[passes, ., add, (, rewriteFunctionExpressions, )]
[passes]
[rewriteFunctionExpressions]
[!, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings]
[!, options, ., aliasableStrings, ., isEmpty, (, )]
[options, ., aliasableStrings, ., isEmpty, (, )]
[options, ., aliasableStrings]
[options]
[options, ., aliasAllStrings]
[options]
[passes, ., add, (, aliasStrings, )]
[passes]
[aliasStrings]
[options, ., aliasExternals]
[options]
[passes, ., add, (, aliasExternals, )]
[passes]
[aliasExternals]
[options, ., aliasKeywords]
[options]
[passes, ., add, (, aliasKeywords, )]
[passes]
[aliasKeywords]
[passes, ., add, (, markUnnormalized, )]
[passes]
[markUnnormalized]
[options, ., coalesceVariableNames]
[options]
[passes, ., add, (, coalesceVariableNames, )]
[passes]
[coalesceVariableNames]
[options, ., foldConstants]
[options]
[passes, ., add, (, peepholeOptimizations, )]
[passes]
[peepholeOptimizations]
[options, ., collapseVariableDeclarations]
[options]
[passes, ., add, (, exploitAssign, )]
[passes]
[exploitAssign]
[passes, ., add, (, collapseVariableDeclarations, )]
[passes]
[collapseVariableDeclarations]
[passes, ., add, (, denormalize, )]
[passes]
[denormalize]
[options, ., instrumentationTemplate, !=, null]
[options, ., instrumentationTemplate]
[options]
[null]
[passes, ., add, (, instrumentFunctions, )]
[passes]
[instrumentFunctions]
[options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL]
[options, ., variableRenaming]
[options]
[VariableRenamingPolicy, ., ALL]
[VariableRenamingPolicy]
[passes, ., add, (, invertContextualRenaming, )]
[passes]
[invertContextualRenaming]
[options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF]
[options, ., variableRenaming]
[options]
[VariableRenamingPolicy, ., OFF]
[VariableRenamingPolicy]
[passes, ., add, (, renameVars, )]
[passes]
[renameVars]
[options, ., groupVariableDeclarations]
[options]
[passes, ., add, (, groupVariableDeclarations, )]
[passes]
[groupVariableDeclarations]
[options, ., processObjectPropertyString]
[options]
[passes, ., add, (, objectPropertyStringPostprocess, )]
[passes]
[objectPropertyStringPostprocess]
[options, ., labelRenaming]
[options]
[passes, ., add, (, renameLabels, )]
[passes]
[renameLabels]
[options, ., foldConstants]
[options]
[passes, ., add, (, latePeepholeOptimizations, )]
[passes]
[latePeepholeOptimizations]
[options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., UNMAPPED]
[AnonymousFunctionNamingPolicy]
[passes, ., add, (, nameUnmappedAnonymousFunctions, )]
[passes]
[nameUnmappedAnonymousFunctions]
[passes, ., add, (, stripSideEffectProtection, )]
[passes]
[stripSideEffectProtection]
[options, ., renamePrefixNamespace, !=, null]
[options, ., renamePrefixNamespace]
[options]
[null]
[!, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, )]
[GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, )]
[GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, )]
[GLOBAL_SYMBOL_NAMESPACE_PATTERN]
[options, ., renamePrefixNamespace]
[options]
[new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, )]
["Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace]
["Illegal character in renamePrefixNamespace name: "]
[options, ., renamePrefixNamespace]
[options]
[passes, ., add, (, rescopeGlobalSymbols, )]
[passes]
[rescopeGlobalSymbols]
[passes, ., add, (, sanityCheckAst, )]
[passes]
[sanityCheckAst]
[passes, ., add, (, sanityCheckVars, )]
[passes]
[sanityCheckVars]
[passes]
[Lists, ., newArrayList, (, )]
[Lists]
[options, ., inlineGetters]
[options]
[passes, ., add, (, inlineSimpleMethods, )]
[passes]
[inlineSimpleMethods]
[passes, ., addAll, (, getCodeRemovingPasses, (, ), )]
[passes]
[getCodeRemovingPasses, (, )]
[options, ., inlineFunctions, ||, options, ., inlineLocalFunctions]
[options, ., inlineFunctions]
[options]
[options, ., inlineLocalFunctions]
[options]
[passes, ., add, (, inlineFunctions, )]
[passes]
[inlineFunctions]
[options, ., inlineProperties]
[options]
[passes, ., add, (, inlineProperties, )]
[passes]
[inlineProperties]
[options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns]
[options, ., optimizeCalls, ||, options, ., optimizeParameters]
[options, ., optimizeCalls]
[options]
[options, ., optimizeParameters]
[options]
[options, ., optimizeReturns]
[options]
[options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars]
[options, ., removeUnusedVars]
[options]
[options, ., removeUnusedLocalVars]
[options]
[options, ., deadAssignmentElimination]
[options]
[passes, ., add, (, deadAssignmentsElimination, )]
[passes]
[deadAssignmentsElimination]
[!, runOptimizeCalls]
[runOptimizeCalls]
[passes, ., add, (, removeUnusedVars, )]
[passes]
[removeUnusedVars]
[runOptimizeCalls]
[passes, ., add, (, optimizeCallsAndRemoveUnusedVars, )]
[passes]
[optimizeCallsAndRemoveUnusedVars]
[assertAllLoopablePasses, (, passes, )]
[passes]
[passes]
[Lists, ., newArrayList, (, )]
[Lists]
[options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, )]
[options, ., collapseObjectLiterals]
[options]
[!, isInliningForbidden, (, )]
[isInliningForbidden, (, )]
[passes, ., add, (, collapseObjectLiterals, )]
[passes]
[collapseObjectLiterals]
[options, ., inlineVariables, ||, options, ., inlineLocalVariables]
[options, ., inlineVariables]
[options]
[options, ., inlineLocalVariables]
[options]
[passes, ., add, (, inlineVariables, )]
[passes]
[inlineVariables]
[options, ., inlineConstantVars]
[options]
[passes, ., add, (, inlineConstants, )]
[passes]
[inlineConstants]
[options, ., foldConstants]
[options]
[passes, ., add, (, minimizeExitPoints, )]
[passes]
[minimizeExitPoints]
[passes, ., add, (, peepholeOptimizations, )]
[passes]
[peepholeOptimizations]
[options, ., removeDeadCode]
[options]
[passes, ., add, (, removeUnreachableCode, )]
[passes]
[removeUnreachableCode]
[options, ., removeUnusedPrototypeProperties]
[options]
[passes, ., add, (, removeUnusedPrototypeProperties, )]
[passes]
[removeUnusedPrototypeProperties]
[options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, )]
[options, ., removeUnusedClassProperties]
[options]
[!, isInliningForbidden, (, )]
[isInliningForbidden, (, )]
[passes, ., add, (, removeUnusedClassProperties, )]
[passes]
[removeUnusedClassProperties]
[assertAllLoopablePasses, (, passes, )]
[passes]
[passes]
[new, HotSwapPassFactory, (, "checkSideEffects", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }]
["checkSideEffects"]
[true]
[options, ., protectHiddenSideEffects, &&, !, options, ., ideMode]
[options, ., protectHiddenSideEffects]
[options]
[!, options, ., ideMode]
[options, ., ideMode]
[options]
[new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, )]
[compiler]
[options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF]
[options, ., checkSuspiciousCode]
[options]
[CheckLevel, ., WARNING]
[CheckLevel]
[CheckLevel, ., OFF]
[CheckLevel]
[protectHiddenSideEffects]
[new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CheckSideEffects, ., StripProtection, (, compiler, ), ;, }, }]
["stripSideEffectProtection"]
[true]
[new, CheckSideEffects, ., StripProtection, (, compiler, )]
[compiler]
[new, HotSwapPassFactory, (, "suspiciousCode", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (, compiler, ,, sharedCallbacks, ), ;, }, }]
["suspiciousCode"]
[true]
[Lists, ., newArrayList, (, )]
[Lists]
[options, ., checkSuspiciousCode]
[options]
[sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), )]
[sharedCallbacks]
[new, CheckSuspiciousCode, (, )]
[options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options]
[DiagnosticGroups, ., GLOBAL_THIS]
[DiagnosticGroups]
[sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), )]
[sharedCallbacks]
[new, CheckGlobalThis, (, compiler, )]
[compiler]
[options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, )]
[options]
[DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT]
[DiagnosticGroups]
[sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), )]
[sharedCallbacks]
[new, CheckDebuggerStatement, (, compiler, )]
[compiler]
[combineChecks, (, compiler, ,, sharedCallbacks, )]
[compiler]
[sharedCallbacks]
[passes]
[Preconditions, ., checkState, (, pass, ., isOneTimePass, (, ), )]
[Preconditions]
[pass, ., isOneTimePass, (, )]
[pass]
[passes]
[Preconditions, ., checkState, (, !, pass, ., isOneTimePass, (, ), )]
[Preconditions]
[!, pass, ., isOneTimePass, (, )]
[pass, ., isOneTimePass, (, )]
[pass]
[new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ControlStructureCheck, (, compiler, ), ;, }, }]
["checkControlStructures"]
[true]
[new, ControlStructureCheck, (, compiler, )]
[compiler]
[new, HotSwapPassFactory, (, "checkRequires", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (, compiler, ,, options, ., checkRequires, ), ;, }, }]
["checkRequires"]
[true]
[new, CheckRequiresForConstructors, (, compiler, ,, options, ., checkRequires, )]
[compiler]
[options, ., checkRequires]
[options]
[new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (, compiler, ,, options, ., checkProvides, ), ;, }, }]
["checkProvides"]
[true]
[new, CheckProvides, (, compiler, ,, options, ., checkProvides, )]
[compiler]
[options, ., checkProvides]
[options]
[DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", )]
[DiagnosticType]
["JSC_GENERATE_EXPORTS_ERROR"]
["Exports can only be generated if export symbol/property ", +, "functions are set."]
["Exports can only be generated if export symbol/property "]
["functions are set."]
[new, PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }]
["generateExports"]
[true]
[compiler, ., getCodingConvention, (, )]
[compiler]
[convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null]
[convention, ., getExportSymbolFunction, (, ), !=, null]
[convention, ., getExportSymbolFunction, (, )]
[convention]
[null]
[convention, ., getExportPropertyFunction, (, ), !=, null]
[convention, ., getExportPropertyFunction, (, )]
[convention]
[null]
[new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[compiler]
[convention, ., getExportSymbolFunction, (, )]
[convention]
[convention, ., getExportPropertyFunction, (, )]
[convention]
[new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, )]
[compiler]
[GENERATE_EXPORTS_ERROR]
[new, PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }]
["exportTestFunctions"]
[true]
[compiler, ., getCodingConvention, (, )]
[compiler]
[convention, ., getExportSymbolFunction, (, ), !=, null]
[convention, ., getExportSymbolFunction, (, )]
[convention]
[null]
[new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[compiler]
[convention, ., getExportSymbolFunction, (, )]
[convention]
[convention, ., getExportPropertyFunction, (, )]
[convention]
[new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, )]
[compiler]
[GENERATE_EXPORTS_ERROR]
[new, PassFactory, (, "gatherRawExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =, new, GatherRawExports, (, compiler, ), ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }]
["gatherRawExports"]
[true]
[new, GatherRawExports, (, compiler, )]
[compiler]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[exportedNames, ==, null]
[exportedNames]
[null]
[exportedNames]
[Sets, ., newHashSet, (, )]
[Sets]
[exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), )]
[exportedNames]
[pass, ., getExportedVariableNames, (, )]
[pass]
[@, SuppressWarnings, (, "deprecation", )]
["deprecation"]
[new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, ), ;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }]
["closurePrimitives"]
[true]
[maybeInitializePreprocessorSymbolTable, (, compiler, )]
[compiler]
[new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, )]
[compiler]
[preprocessorSymbolTable]
[options, ., brokenClosureRequiresLevel]
[options]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass, ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[exportedNames]
[pass, ., getExportedVariableNames, (, )]
[pass]
[pass, ., hotSwapScript, (, scriptRoot, ,, originalRoot, )]
[pass]
[scriptRoot]
[originalRoot]
[new, PassFactory, (, "jqueryAliases", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExpandJqueryAliases, (, compiler, ), ;, }, }]
["jqueryAliases"]
[true]
[new, ExpandJqueryAliases, (, compiler, )]
[compiler]
[new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }]
["replaceMessages"]
[true]
[new, ReplaceMessages, (, compiler, ,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, )]
[compiler]
[options, ., messageBundle]
[options]
[true]
[JsMessage, ., Style, ., getFromParams, (, true, ,, false, )]
[JsMessage, ., Style]
[JsMessage]
[true]
[false]
[false]
[new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }]
["replaceMessages"]
[true]
[new, ReplaceMessagesForChrome, (, compiler, ,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), )]
[compiler]
[new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, )]
[options, ., tcProjectId]
[options]
[true]
[JsMessage, ., Style, ., getFromParams, (, true, ,, false, )]
[JsMessage, ., Style]
[JsMessage]
[true]
[false]
[new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }]
["closureGoogScopeAliases"]
[true]
[maybeInitializePreprocessorSymbolTable, (, compiler, )]
[compiler]
[new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), )]
[compiler]
[preprocessorSymbolTable]
[options, ., getAliasTransformationHandler, (, )]
[options]
[new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClosureRewriteClass, (, compiler, ), ;, }, }]
["closureRewriteGoogClass"]
[true]
[new, ClosureRewriteClass, (, compiler, )]
[compiler]
[new, PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }]
["closureCheckGetCssName"]
[true]
[options, ., checkMissingGetCssNameBlacklist]
[options]
[Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", )]
[Preconditions]
[blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, )]
[blacklist, !=, null]
[blacklist]
[null]
[!, blacklist, ., isEmpty, (, )]
[blacklist, ., isEmpty, (, )]
[blacklist]
["Not checking use of goog.getCssName because of empty blacklist."]
[new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, )]
[compiler]
[options, ., checkMissingGetCssNameLevel]
[options]
[blacklist]
[new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (, options, ., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }]
["closureReplaceGetCssName"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Integer, >, newCssNames, =, null, ;, if, (, options, ., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }]
[null]
[options, ., gatherCssNames]
[options]
[newCssNames]
[Maps, ., newHashMap, (, )]
[Maps]
[new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, )]
[compiler]
[newCssNames]
[options, ., cssRenamingWhitelist]
[options]
[pass, ., process, (, externs, ,, jsRoot, )]
[pass]
[externs]
[jsRoot]
[cssNames]
[newCssNames]
[new, PassFactory, (, "createSyntheticBlocks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,, options, ., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }]
["createSyntheticBlocks"]
[true]
[new, CreateSyntheticBlocks, (, compiler, ,, options, ., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, )]
[compiler]
[options, ., syntheticBlockStartMarker]
[options]
[options, ., syntheticBlockEndMarker]
[options]
[new, PassFactory, (, "peepholeOptimizations", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }]
["peepholeOptimizations"]
[false]
[false]
[new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), )]
[compiler]
[new, PeepholeSubstituteAlternateSyntax, (, late, )]
[late]
[new, PeepholeReplaceKnownMethods, (, late, )]
[late]
[new, PeepholeRemoveDeadCode, (, )]
[new, PeepholeFoldConstants, (, late, )]
[late]
[new, PeepholeCollectPropertyAssignments, (, )]
[new, PassFactory, (, "latePeepholeOptimizations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }, }]
["latePeepholeOptimizations"]
[true]
[true]
[new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), )]
[compiler]
[new, StatementFusion, (, )]
[new, PeepholeRemoveDeadCode, (, )]
[new, PeepholeSubstituteAlternateSyntax, (, late, )]
[late]
[new, PeepholeReplaceKnownMethods, (, late, )]
[late]
[new, PeepholeFoldConstants, (, late, )]
[late]
[new, ReorderConstantExpression, (, )]
[new, HotSwapPassFactory, (, "checkVars", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ), ;, }, }]
["checkVars"]
[true]
[new, VarCheck, (, compiler, )]
[compiler]
[new, PassFactory, (, "checkRegExp", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =, new, CheckRegExp, (, compiler, ), ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }]
["checkRegExp"]
[true]
[new, CheckRegExp, (, compiler, )]
[compiler]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, pass, ., process, (, externs, ,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), )]
[compiler]
[pass, ., isGlobalRegExpPropertiesUsed, (, )]
[pass]
[new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (, compiler, ,, options, ., aggressiveVarCheck, ), ;, }, }]
["checkVariableReferences"]
[true]
[new, VariableReferenceCheck, (, compiler, ,, options, ., aggressiveVarCheck, )]
[compiler]
[options, ., aggressiveVarCheck]
[options]
[new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPreprocess, (, compiler, ), ;, }, }]
["ObjectPropertyStringPreprocess"]
[true]
[new, ObjectPropertyStringPreprocess, (, compiler, )]
[compiler]
[new, HotSwapPassFactory, (, "resolveTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalTypeResolver, (, compiler, ), ;, }, }]
["resolveTypes"]
[true]
[new, GlobalTypeResolver, (, compiler, )]
[compiler]
[new, PassFactory, (, "clearTypedScopePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClearTypedScope, (, ), ;, }, }]
["clearTypedScopePass"]
[true]
[new, ClearTypedScope, (, )]
[new, HotSwapPassFactory, (, "inferTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (, compiler, ), ., inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }]
["inferTypes"]
[true]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (, compiler, ), ., inferAllScopes, (, scriptRoot, ), ;, }, }]
[Preconditions, ., checkNotNull, (, topScope, )]
[Preconditions]
[topScope]
[Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), )]
[Preconditions]
[getTypedScopeCreator, (, )]
[makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, )]
[makeTypeInference, (, compiler, )]
[compiler]
[externs]
[root]
[makeTypeInference, (, compiler, ), ., inferAllScopes, (, scriptRoot, )]
[makeTypeInference, (, compiler, )]
[compiler]
[scriptRoot]
[new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, ), ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }]
["inferJsDocInfo"]
[true]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, ), ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }]
[Preconditions, ., checkNotNull, (, topScope, )]
[Preconditions]
[topScope]
[Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), )]
[Preconditions]
[getTypedScopeCreator, (, )]
[makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, )]
[makeInferJsDocInfo, (, compiler, )]
[compiler]
[externs]
[root]
[makeInferJsDocInfo, (, compiler, ), ., hotSwapScript, (, scriptRoot, ,, originalRoot, )]
[makeInferJsDocInfo, (, compiler, )]
[compiler]
[scriptRoot]
[originalRoot]
[new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, ), ., check, (, scriptRoot, ,, false, ), ;, }, }, ;, }, }]
["checkTypes"]
[true]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, ), ., check, (, scriptRoot, ,, false, ), ;, }, }]
[Preconditions, ., checkNotNull, (, topScope, )]
[Preconditions]
[topScope]
[Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), )]
[Preconditions]
[getTypedScopeCreator, (, )]
[makeTypeCheck, (, compiler, )]
[compiler]
[check, ., process, (, externs, ,, root, )]
[check]
[externs]
[root]
[compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), )]
[compiler, ., getErrorManager, (, )]
[compiler]
[check, ., getTypedPercent, (, )]
[check]
[makeTypeCheck, (, compiler, ), ., check, (, scriptRoot, ,, false, )]
[makeTypeCheck, (, compiler, )]
[compiler]
[scriptRoot]
[false]
[new, HotSwapPassFactory, (, "checkControlFlow", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =, Lists, ., newArrayList, (, ), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }]
["checkControlFlow"]
[true]
[Lists, ., newArrayList, (, )]
[Lists]
[options, ., checkUnreachableCode, ., isOn, (, )]
[options, ., checkUnreachableCode]
[options]
[callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), )]
[callbacks]
[new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, )]
[compiler]
[options, ., checkUnreachableCode]
[options]
[options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes]
[options, ., checkMissingReturn, ., isOn, (, )]
[options, ., checkMissingReturn]
[options]
[options, ., checkTypes]
[options]
[callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), )]
[callbacks]
[new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, )]
[compiler]
[options, ., checkMissingReturn]
[options]
[combineChecks, (, compiler, ,, callbacks, )]
[compiler]
[callbacks]
[new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckAccessControls, (, compiler, ), ;, }, }]
["checkAccessControls"]
[true]
[new, CheckAccessControls, (, compiler, )]
[compiler]
[Preconditions, ., checkArgument, (, callbacks, ., size, (, ), >, 0, )]
[Preconditions]
[callbacks, ., size, (, ), >, 0]
[callbacks, ., size, (, )]
[callbacks]
[0]
[callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], )]
[callbacks]
[new, Callback, [, callbacks, ., size, (, ), ]]
[callbacks, ., size, (, )]
[callbacks]
[new, CombinedCompilerPass, (, compiler, ,, array, )]
[compiler]
[array]
[this, ., compiler]
[this]
[compiler]
[topScope, ==, null]
[topScope]
[null]
[regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), )]
[compiler]
[root, ., getParent, (, )]
[root]
[compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[topScope]
[patchGlobalTypedScope, (, compiler, ,, scriptRoot, )]
[compiler]
[scriptRoot]
[clearTypedScope, (, )]
[new, PassFactory, (, "checkGlobalNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }]
["checkGlobalNames"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }]
[namespaceForChecks]
[new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, )]
[compiler]
[externs]
[jsRoot]
[new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, )]
[new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, )]
[new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, )]
[compiler]
[options, ., checkGlobalNamesLevel]
[options]
[namespaceForChecks]
[externs]
[jsRoot]
[new, PassFactory, (, "checkStrictMode", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !, options, ., checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }]
["checkStrictMode"]
[true]
[new, StrictModeCheck, (, compiler, ,, !, options, ., checkSymbols, ,, !, options, ., checkCaja, )]
[compiler]
[!, options, ., checkSymbols]
[options, ., checkSymbols]
[options]
[!, options, ., checkCaja]
[options, ., checkCaja]
[options]
[new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }]
["processTweaks"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, ), ;, }, }]
[new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, )]
[new, ProcessTweaks, (, compiler, ,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), )]
[compiler]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, )]
[options, ., getTweakProcessing, (, )]
[options]
[options, ., getTweakReplacements, (, )]
[options]
[externs]
[jsRoot]
[new, PassFactory, (, "processDefines", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }]
["processDefines"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, Map, <, String, ,, Node, >, replacements, =, getAdditionalReplacements, (, options, ), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }]
[getAdditionalReplacements, (, options, )]
[options]
[replacements, ., putAll, (, options, ., getDefineReplacements, (, ), )]
[replacements]
[options, ., getDefineReplacements, (, )]
[options]
[new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, )]
[new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, )]
[new, ProcessDefines, (, compiler, ,, replacements, )]
[compiler]
[replacements]
[namespaceForChecks]
[externs]
[jsRoot]
[new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (, null, ,, null, ), ;, }, }, ;, }, }]
["garbageCollectChecks"]
[true]
[new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, namespaceForChecks, =, null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (, null, ,, null, ), ;, }, }]
[namespaceForChecks]
[null]
[process, (, null, ,, null, )]
[null]
[null]
[new, PassFactory, (, "checkConsts", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConstCheck, (, compiler, ), ;, }, }]
["checkConsts"]
[true]
[new, ConstCheck, (, compiler, )]
[compiler]
[new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (, functionNames, =, new, FunctionNames, (, compiler, ), ), ), ;, }, }]
["computeFunctionNames"]
[true]
[(, (, functionNames, =, new, FunctionNames, (, compiler, ), ), )]
[(, functionNames, =, new, FunctionNames, (, compiler, ), )]
[functionNames]
[new, FunctionNames, (, compiler, )]
[compiler]
[new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, IgnoreCajaProperties, (, compiler, ), ;, }, }]
["ignoreCajaProperties"]
[true]
[new, IgnoreCajaProperties, (, compiler, )]
[compiler]
[new, PassFactory, (, "runtimeTypeCheck", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (, compiler, ,, options, ., runtimeTypeCheckLogFunction, ), ;, }, }]
["runtimeTypeCheck"]
[true]
[new, RuntimeTypeCheck, (, compiler, ,, options, ., runtimeTypeCheckLogFunction, )]
[compiler]
[options, ., runtimeTypeCheckLogFunction]
[options]
[new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }]
["replaceIdGenerators"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceIdGenerators, pass, =, new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }]
[new, ReplaceIdGenerators, (, compiler, ,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, )]
[compiler]
[options, ., idGenerators]
[options]
[options, ., generatePseudoNames]
[options]
[options, ., idGeneratorsMapSerialized]
[options]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[idGeneratorMap]
[pass, ., getSerializedIdMappings, (, )]
[pass]
[new, PassFactory, (, "replaceStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }, }]
["replaceStrings"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReplaceStrings, pass, =, new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }]
[new, ReplaceStrings, (, compiler, ,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, )]
[compiler]
[options, ., replaceStringsPlaceholderToken]
[options]
[options, ., replaceStringsFunctionDescriptions]
[options]
[options, ., replaceStringsReservedStrings]
[options]
[options, ., replaceStringsInputMap]
[options]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[stringMap]
[pass, ., getStringMap, (, )]
[pass]
[new, PassFactory, (, "optimizeArgumentsArray", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, OptimizeArgumentsArray, (, compiler, ), ;, }, }]
["optimizeArgumentsArray"]
[true]
[new, OptimizeArgumentsArray, (, compiler, )]
[compiler]
[new, PassFactory, (, "closureCodeRemoval", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,, options, ., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }]
["closureCodeRemoval"]
[true]
[new, ClosureCodeRemoval, (, compiler, ,, options, ., removeAbstractMethods, ,, options, ., removeClosureAsserts, )]
[compiler]
[options, ., removeAbstractMethods]
[options]
[options, ., removeClosureAsserts]
[options]
[new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureOptimizePrimitives, (, compiler, ), ;, }, }]
["closureOptimizePrimitives"]
[true]
[new, ClosureOptimizePrimitives, (, compiler, )]
[compiler]
[new, PassFactory, (, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (, compiler, ,, options, ., renamePrefixNamespace, ), ;, }, }]
["rescopeGlobalSymbols"]
[true]
[new, RescopeGlobalSymbols, (, compiler, ,, options, ., renamePrefixNamespace, )]
[compiler]
[options, ., renamePrefixNamespace]
[options]
[new, PassFactory, (, "collapseProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,, options, ., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }]
["collapseProperties"]
[true]
[new, CollapseProperties, (, compiler, ,, options, ., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), )]
[compiler]
[options, ., collapsePropertiesOnExternTypes]
[options]
[!, isInliningForbidden, (, )]
[isInliningForbidden, (, )]
[new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ), ;, }, }]
["collapseObjectLiterals"]
[false]
[new, InlineObjectLiterals, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), )]
[compiler]
[compiler, ., getUniqueNameIdSupplier, (, )]
[compiler]
[new, PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }]
["tightenTypes"]
[true]
[!, options, ., checkTypes]
[options, ., checkTypes]
[options]
[new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, )]
[compiler]
[TIGHTEN_TYPES_WITHOUT_TYPE_CHECK]
[tightenTypes]
[new, TightenTypes, (, compiler, )]
[compiler]
[tightenTypes]
[new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }]
["disambiguateProperties"]
[true]
[tightenTypes, ==, null]
[tightenTypes]
[null]
[DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, )]
[DisambiguateProperties]
[compiler]
[options, ., propertyInvalidationErrors]
[options]
[DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, )]
[DisambiguateProperties]
[compiler]
[tightenTypes]
[options, ., propertyInvalidationErrors]
[options]
[new, PassFactory, (, "chainCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ChainCalls, (, compiler, ), ;, }, }]
["chainCalls"]
[true]
[new, ChainCalls, (, compiler, )]
[compiler]
[new, PassFactory, (, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DevirtualizePrototypeMethods, (, compiler, ), ;, }, }]
["devirtualizePrototypeMethods"]
[true]
[new, DevirtualizePrototypeMethods, (, compiler, )]
[compiler]
[new, PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, ), ;, if, (, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }]
["optimizeCalls_and_removeUnusedVars"]
[false]
[new, OptimizeCalls, (, compiler, )]
[compiler]
[options, ., optimizeReturns]
[options]
[passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), )]
[passes]
[new, OptimizeReturns, (, compiler, )]
[compiler]
[options, ., optimizeParameters]
[options]
[passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), )]
[passes]
[new, OptimizeParameters, (, compiler, )]
[compiler]
[options, ., optimizeCalls]
[options]
[options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars]
[options, ., removeUnusedLocalVars]
[options]
[!, options, ., removeUnusedVars]
[options, ., removeUnusedVars]
[options]
[options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., OFF]
[AnonymousFunctionNamingPolicy]
[passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), )]
[passes]
[new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, )]
[compiler]
[!, removeOnlyLocals]
[removeOnlyLocals]
[preserveAnonymousFunctionNames]
[true]
[passes]
[new, PassFactory, (, "markPureFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (, compiler, ,, options, ., debugFunctionSideEffectsPath, ,, false, ), ;, }, }]
["markPureFunctions"]
[true]
[new, PureFunctionIdentifier, ., Driver, (, compiler, ,, options, ., debugFunctionSideEffectsPath, ,, false, )]
[compiler]
[options, ., debugFunctionSideEffectsPath]
[options]
[false]
[new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MarkNoSideEffectCalls, (, compiler, ), ;, }, }]
["markNoSideEffectCalls"]
[true]
[new, MarkNoSideEffectCalls, (, compiler, )]
[compiler]
[new, PassFactory, (, "inlineVariables", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), ), {, return, new, ErrorPass, (, compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (, compiler, ,, mode, ,, true, ), ;, }, }, }]
["inlineVariables"]
[false]
[isInliningForbidden, (, )]
[new, ErrorPass, (, compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, )]
[compiler]
[CANNOT_USE_PROTOTYPE_AND_VAR]
[options, ., inlineVariables]
[options]
[mode]
[InlineVariables, ., Mode, ., ALL]
[InlineVariables, ., Mode]
[InlineVariables]
[options, ., inlineLocalVariables]
[options]
[mode]
[InlineVariables, ., Mode, ., LOCALS_ONLY]
[InlineVariables, ., Mode]
[InlineVariables]
[new, IllegalStateException, (, "No variable inlining option set.", )]
["No variable inlining option set."]
[new, InlineVariables, (, compiler, ,, mode, ,, true, )]
[compiler]
[mode]
[true]
[new, PassFactory, (, "inlineConstants", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }]
["inlineConstants"]
[false]
[new, InlineVariables, (, compiler, ,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,, true, )]
[compiler]
[InlineVariables, ., Mode, ., CONSTANTS_ONLY]
[InlineVariables, ., Mode]
[InlineVariables]
[true]
[new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MinimizeExitPoints, (, compiler, ), ;, }, }]
["minimizeExitPoints"]
[false]
[new, MinimizeExitPoints, (, compiler, )]
[compiler]
[new, PassFactory, (, "removeUnreachableCode", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (, compiler, ,, true, ), ;, }, }]
["removeUnreachableCode"]
[false]
[new, UnreachableCodeElimination, (, compiler, ,, true, )]
[compiler]
[true]
[new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }]
["removeUnusedPrototypeProperties"]
[false]
[new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, )]
[compiler]
[options, ., removeUnusedPrototypePropertiesInExterns]
[options]
[!, options, ., removeUnusedVars]
[options, ., removeUnusedVars]
[options]
[new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedClassProperties, (, compiler, ), ;, }, }]
["removeUnusedClassProperties"]
[false]
[new, RemoveUnusedClassProperties, (, compiler, )]
[compiler]
[new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }, ;, }, }]
["smartNamePass"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }]
[new, NameAnalyzer, (, compiler, ,, false, )]
[compiler]
[false]
[na, ., process, (, externs, ,, root, )]
[na]
[externs]
[root]
[options, ., reportPath]
[options]
[reportPath, !=, null]
[reportPath]
[null]
[Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, )]
[Files]
[na, ., getHtmlReport, (, )]
[na]
[new, File, (, reportPath, )]
[reportPath]
[Charsets, ., UTF_8]
[Charsets]
[compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), )]
[compiler]
[JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, )]
[JSError]
[REPORT_PATH_IO_ERROR]
[reportPath]
[options, ., smartNameRemoval]
[options]
[na, ., removeUnreferenced, (, )]
[na]
[new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }]
["smartNamePass"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnalyzer, na, =, new, NameAnalyzer, (, compiler, ,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }]
[new, NameAnalyzer, (, compiler, ,, false, )]
[compiler]
[false]
[na, ., process, (, externs, ,, root, )]
[na]
[externs]
[root]
[na, ., removeUnreferenced, (, )]
[na]
[new, PassFactory, (, "inlineSimpleMethods", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineSimpleMethods, (, compiler, ), ;, }, }]
["inlineSimpleMethods"]
[false]
[new, InlineSimpleMethods, (, compiler, )]
[compiler]
[new, PassFactory, (, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DeadAssignmentsElimination, (, compiler, ), ;, }, }]
["deadAssignmentsElimination"]
[false]
[new, DeadAssignmentsElimination, (, compiler, )]
[compiler]
[new, PassFactory, (, "inlineFunctions", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }]
["inlineFunctions"]
[false]
[!, isInliningForbidden, (, )]
[isInliningForbidden, (, )]
[new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, )]
[compiler]
[compiler, ., getUniqueNameIdSupplier, (, )]
[compiler]
[options, ., inlineFunctions]
[options]
[options, ., inlineLocalFunctions]
[options]
[enableBlockInlining]
[options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[options, ., assumeStrictThis, (, )]
[options]
[options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[options, ., getLanguageIn, (, )]
[options]
[LanguageMode, ., ECMASCRIPT5_STRICT]
[LanguageMode]
[true]
[new, PassFactory, (, "inlineProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineProperties, (, compiler, ), ;, }, }]
["inlineProperties"]
[false]
[new, InlineProperties, (, compiler, )]
[compiler]
[new, PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }]
["removeUnusedVars"]
[false]
[options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars]
[options, ., removeUnusedLocalVars]
[options]
[!, options, ., removeUnusedVars]
[options, ., removeUnusedVars]
[options]
[options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., OFF]
[AnonymousFunctionNamingPolicy]
[new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, )]
[compiler]
[!, removeOnlyLocals]
[removeOnlyLocals]
[preserveAnonymousFunctionNames]
[false]
[new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (, compiler, ,, compiler, ., getModuleGraph, (, ), ), ;, }, }]
["crossModuleCodeMotion"]
[false]
[new, CrossModuleCodeMotion, (, compiler, ,, compiler, ., getModuleGraph, (, ), )]
[compiler]
[compiler, ., getModuleGraph, (, )]
[compiler]
[new, PassFactory, (, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }]
["crossModuleMethodMotion"]
[false]
[new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, )]
[compiler]
[crossModuleIdGenerator]
[options, ., removeUnusedPrototypePropertiesInExterns]
[options]
[new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }]
["specializeInitialModule"]
[true]
[new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, )]
[compiler]
[devirtualizePrototypeMethods]
[inlineFunctions]
[removeUnusedPrototypeProperties]
[new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FlowSensitiveInlineVariables, (, compiler, ), ;, }, }]
["flowSensitiveInlineVariables"]
[true]
[new, FlowSensitiveInlineVariables, (, compiler, )]
[compiler]
[new, PassFactory, (, "coalesceVariableNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (, compiler, ,, options, ., generatePseudoNames, ), ;, }, }]
["coalesceVariableNames"]
[true]
[new, CoalesceVariableNames, (, compiler, ,, options, ., generatePseudoNames, )]
[compiler]
[options, ., generatePseudoNames]
[options]
[new, PassFactory, (, "exploitAssign", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, ExploitAssigns, (, ), ), ;, }, }]
["exploitAssign"]
[true]
[new, PeepholeOptimizationsPass, (, compiler, ,, new, ExploitAssigns, (, ), )]
[compiler]
[new, ExploitAssigns, (, )]
[new, PassFactory, (, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseVariableDeclarations, (, compiler, ), ;, }, }]
["collapseVariableDeclarations"]
[true]
[new, CollapseVariableDeclarations, (, compiler, )]
[compiler]
[new, PassFactory, (, "groupVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GroupVariableDeclarations, (, compiler, ), ;, }, }]
["groupVariableDeclarations"]
[true]
[new, GroupVariableDeclarations, (, compiler, )]
[compiler]
[new, PassFactory, (, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,, Pattern, ., USE_GLOBAL_TEMP, ), ;, }, }]
["extractPrototypeMemberDeclarations"]
[true]
[new, ExtractPrototypeMemberDeclarations, (, compiler, ,, Pattern, ., USE_GLOBAL_TEMP, )]
[compiler]
[Pattern, ., USE_GLOBAL_TEMP]
[Pattern]
[new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FunctionRewriter, (, compiler, ), ;, }, }]
["rewriteFunctionExpressions"]
[true]
[new, FunctionRewriter, (, compiler, )]
[compiler]
[new, PassFactory, (, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseAnonymousFunctions, (, compiler, ), ;, }, }]
["collapseAnonymousFunctions"]
[true]
[new, CollapseAnonymousFunctions, (, compiler, )]
[compiler]
[new, PassFactory, (, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MoveFunctionDeclarations, (, compiler, ), ;, }, }]
["moveFunctionDeclarations"]
[true]
[new, MoveFunctionDeclarations, (, compiler, )]
[compiler]
[new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, NameAnonymousFunctions, (, compiler, ), ;, }, }]
["nameAnonymousFunctions"]
[true]
[new, NameAnonymousFunctions, (, compiler, )]
[compiler]
[new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }]
["nameAnonymousFunctions"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameAnonymousFunctionsMapped, naf, =, new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }]
[new, NameAnonymousFunctionsMapped, (, compiler, ,, options, ., inputAnonymousFunctionNamingMap, )]
[compiler]
[options, ., inputAnonymousFunctionNamingMap]
[options]
[naf, ., process, (, externs, ,, root, )]
[naf]
[externs]
[root]
[anonymousFunctionNameMap]
[naf, ., getFunctionMap, (, )]
[naf]
[new, PassFactory, (, "aliasExternals", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }]
["aliasExternals"]
[true]
[new, AliasExternals, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, )]
[compiler]
[compiler, ., getModuleGraph, (, )]
[compiler]
[options, ., unaliasableGlobals]
[options]
[options, ., aliasableGlobals]
[options]
[new, PassFactory, (, "aliasStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }]
["aliasStrings"]
[true]
[new, AliasStrings, (, compiler, ,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, )]
[compiler]
[compiler, ., getModuleGraph, (, )]
[compiler]
[options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings]
[options, ., aliasAllStrings]
[options]
[null]
[options, ., aliasableStrings]
[options]
[options, ., aliasStringsBlacklist]
[options]
[options, ., outputJsStringUsage]
[options]
[new, PassFactory, (, "aliasKeywords", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasKeywords, (, compiler, ), ;, }, }]
["aliasKeywords"]
[true]
[new, AliasKeywords, (, compiler, )]
[compiler]
[new, PassFactory, (, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPostprocess, (, compiler, ), ;, }, }]
["ObjectPropertyStringPostprocess"]
[true]
[new, ObjectPropertyStringPostprocess, (, compiler, )]
[compiler]
[new, PassFactory, (, "ambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }]
["ambiguateProperties"]
[true]
[new, AmbiguateProperties, (, compiler, ,, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), )]
[compiler]
[options, ., anonymousFunctionNaming, ., getReservedCharacters, (, )]
[options, ., anonymousFunctionNaming]
[options]
[new, PassFactory, (, "markUnnormalized", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., RAW, ), ;, }, }, ;, }, }]
["markUnnormalized"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., RAW, ), ;, }, }]
[compiler, ., setLifeCycleStage, (, LifeCycleStage, ., RAW, )]
[compiler]
[LifeCycleStage, ., RAW]
[LifeCycleStage]
[new, PassFactory, (, "denormalize", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, Denormalize, (, compiler, ), ;, }, }]
["denormalize"]
[true]
[new, Denormalize, (, compiler, )]
[compiler]
[new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, ), ;, }, }]
["invertContextualRenaming"]
[true]
[MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, )]
[MakeDeclaredNamesUnique]
[compiler]
[new, PassFactory, (, "renameProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =, options, ., inputPropertyMap, ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,, externs, ,, root, ), ;, }, }, ;, }, }]
["renameProperties"]
[true]
[options, ., inputPropertyMap]
[options]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, propertyMap, =, runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,, externs, ,, root, ), ;, }, }]
[propertyMap]
[runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,, externs, ,, root, )]
[compiler]
[prevPropertyMap]
[externs]
[root]
[options, ., anonymousFunctionNaming, ., getReservedCharacters, (, )]
[options, ., anonymousFunctionNaming]
[options]
[options, ., propertyRenaming]
[options]
[HEURISTIC]
[new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, )]
[compiler]
[false]
[reservedChars]
[prevPropertyMap]
[rproto, ., process, (, externs, ,, root, )]
[rproto]
[externs]
[root]
[rproto, ., getPropertyMap, (, )]
[rproto]
[AGGRESSIVE_HEURISTIC]
[new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, )]
[compiler]
[true]
[reservedChars]
[prevPropertyMap]
[rproto2, ., process, (, externs, ,, root, )]
[rproto2]
[externs]
[root]
[rproto2, ., getPropertyMap, (, )]
[rproto2]
[ALL_UNQUOTED]
[new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, )]
[compiler]
[options, ., propertyAffinity]
[options]
[options, ., generatePseudoNames]
[options]
[prevPropertyMap]
[reservedChars]
[rprop, ., process, (, externs, ,, root, )]
[rprop]
[externs]
[root]
[rprop, ., getPropertyMap, (, )]
[rprop]
[new, IllegalStateException, (, "Unrecognized property renaming policy", )]
["Unrecognized property renaming policy"]
[new, PassFactory, (, "renameVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =, options, ., inputVariableMap, ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (, compiler, ,, prevVariableMap, ,, externs, ,, root, ), ;, }, }, ;, }, }]
["renameVars"]
[true]
[options, ., inputVariableMap]
[options]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, variableMap, =, runVariableRenaming, (, compiler, ,, prevVariableMap, ,, externs, ,, root, ), ;, }, }]
[variableMap]
[runVariableRenaming, (, compiler, ,, prevVariableMap, ,, externs, ,, root, )]
[compiler]
[prevVariableMap]
[externs]
[root]
[options, ., anonymousFunctionNaming, ., getReservedCharacters, (, )]
[options, ., anonymousFunctionNaming]
[options]
[options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF]
[options, ., anonymousFunctionNaming]
[options]
[AnonymousFunctionNamingPolicy, ., OFF]
[AnonymousFunctionNamingPolicy]
[Sets, ., newHashSet, (, )]
[Sets]
[exportedNames, !=, null]
[exportedNames]
[null]
[reservedNames, ., addAll, (, exportedNames, )]
[reservedNames]
[exportedNames]
[reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), )]
[reservedNames]
[ParserRunner, ., getReservedVars, (, )]
[ParserRunner]
[new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, )]
[compiler]
[options, ., renamePrefix]
[options]
[options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL]
[options, ., variableRenaming]
[options]
[VariableRenamingPolicy, ., LOCAL]
[VariableRenamingPolicy]
[preserveAnonymousFunctionNames]
[options, ., generatePseudoNames]
[options]
[options, ., shadowVariables]
[options]
[prevVariableMap]
[reservedChars]
[reservedNames]
[rn, ., process, (, externs, ,, root, )]
[rn]
[externs]
[root]
[rn, ., getVariableMap, (, )]
[rn]
[new, PassFactory, (, "renameLabels", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RenameLabels, (, compiler, ), ;, }, }]
["renameLabels"]
[true]
[new, RenameLabels, (, compiler, )]
[compiler]
[new, PassFactory, (, "convertToDottedProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConvertToDottedProperties, (, compiler, ), ;, }, }]
["convertToDottedProperties"]
[true]
[new, ConvertToDottedProperties, (, compiler, )]
[compiler]
[new, PassFactory, (, "sanityCheckAst", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AstValidator, (, ), ;, }, }]
["sanityCheckAst"]
[true]
[new, AstValidator, (, )]
[new, PassFactory, (, "sanityCheckVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ,, true, ), ;, }, }]
["sanityCheckVars"]
[true]
[new, VarCheck, (, compiler, ,, true, )]
[compiler]
[true]
[new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, ), ), ;, }, }, }, ;, }, }]
["instrumentFunctions"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, try, {, FileReader, templateFile, =, new, FileReader, (, options, ., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, ), ), ;, }, }, }]
[new, FileReader, (, options, ., instrumentationTemplate, )]
[options, ., instrumentationTemplate]
[options]
[(, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, )]
[(, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), )]
[new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, )]
[compiler]
[functionNames]
[options, ., instrumentationTemplate]
[options]
[options, ., appNameStr]
[options]
[templateFile]
[externs]
[root]
[compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, ), )]
[compiler]
[JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, )]
[JSError]
[AbstractCompiler, ., READ_ERROR]
[AbstractCompiler]
[options, ., instrumentationTemplate]
[options]
[new, PassFactory, (, name, ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, ), ;, }, }]
[name]
[true]
[runInSerial, (, )]
[new, PassFactory, (, "runCustomPasses", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, options, ., customPasses, ., get, (, executionTime, ), ), ;, }, }]
["runCustomPasses"]
[true]
[runInSerial, (, options, ., customPasses, ., get, (, executionTime, ), )]
[options, ., customPasses, ., get, (, executionTime, )]
[options, ., customPasses]
[options]
[executionTime]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., HEURISTIC]
[PropertyRenamingPolicy]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[PropertyRenamingPolicy]
[runInSerial, (, Lists, ., newArrayList, (, passes, ), )]
[Lists, ., newArrayList, (, passes, )]
[Lists]
[passes]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,, root, ), ;, }, }, }]
[passes]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[Maps, ., newHashMap, (, )]
[Maps]
[options, ., markAsCompiled, ||, options, ., closurePass]
[options, ., markAsCompiled]
[options]
[options, ., closurePass]
[options]
[additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), )]
[additionalReplacements]
[COMPILED_CONSTANT_NAME]
[IR, ., trueNode, (, )]
[IR]
[options, ., closurePass, &&, options, ., locale, !=, null]
[options, ., closurePass]
[options]
[options, ., locale, !=, null]
[options, ., locale]
[options]
[null]
[additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), )]
[additionalReplacements]
[CLOSURE_LOCALE_CONSTANT_NAME]
[IR, ., string, (, options, ., locale, )]
[IR]
[options, ., locale]
[options]
[additionalReplacements]
[new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }, ;, }, }]
["printNameReferenceGraph"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }]
[new, NameReferenceGraphConstruction, (, compiler, )]
[compiler]
[gc, ., process, (, externs, ,, jsRoot, )]
[gc]
[externs]
[jsRoot]
[options, ., nameReferenceGraphPath]
[options]
[Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, )]
[Files]
[DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), )]
[DotFormatter]
[gc, ., getNameReferenceGraph, (, )]
[gc]
[new, File, (, graphFileName, )]
[graphFileName]
[Charsets, ., UTF_8]
[Charsets]
[compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, ), )]
[compiler]
[JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, )]
[JSError]
[NAME_REF_GRAPH_FILE_ERROR]
[e, ., getMessage, (, )]
[e]
[graphFileName]
[new, PassFactory, (, "printNameReferenceReport", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, ), ), ;, }, }, }, ;, }, }]
["printNameReferenceReport"]
[true]
[new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, jsRoot, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, ), ), ;, }, }, }]
[new, NameReferenceGraphConstruction, (, compiler, )]
[compiler]
[options, ., nameReferenceReportPath]
[options]
[new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), )]
[gc, ., getNameReferenceGraph, (, )]
[gc]
[Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, )]
[Files]
[report, ., getHtmlReport, (, )]
[report]
[new, File, (, reportFileName, )]
[reportFileName]
[Charsets, ., UTF_8]
[Charsets]
[compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, ), )]
[compiler]
[JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, )]
[JSError]
[NAME_REF_REPORT_FILE_ERROR]
[e, ., getMessage, (, )]
[e]
[reportFileName]
[name]
[isOneTimePass]
[this, ., create, (, compiler, )]
[this]
[compiler]
