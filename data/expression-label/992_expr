[4543632485478613800L]
[HorizontalAlignment, ., CENTER]
[HorizontalAlignment]
[VerticalAlignment, ., CENTER]
[VerticalAlignment]
[2.0]
[2.0]
[this, ., horizontalAlignment]
[this]
[hAlign]
[this, ., verticalAlignment]
[this]
[vAlign]
[this, ., horizontalGap]
[this]
[hGap]
[this, ., verticalGap]
[this]
[vGap]
[constraint, ., getWidthConstraintType, (, )]
[constraint]
[constraint, ., getHeightConstraintType, (, )]
[constraint]
[w, ==, LengthConstraintType, ., NONE]
[w]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[arrangeNN, (, container, ,, g2, )]
[container]
[g2]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[arrangeNF, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[new, RuntimeException, (, "Not implemented.", )]
["Not implemented."]
[w, ==, LengthConstraintType, ., FIXED]
[w]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[arrangeFN, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[arrangeFF, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[arrangeFR, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[w, ==, LengthConstraintType, ., RANGE]
[w]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[h, ==, LengthConstraintType, ., NONE]
[h]
[LengthConstraintType, ., NONE]
[LengthConstraintType]
[arrangeRN, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., FIXED]
[h]
[LengthConstraintType, ., FIXED]
[LengthConstraintType]
[arrangeRF, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[h, ==, LengthConstraintType, ., RANGE]
[h]
[LengthConstraintType, ., RANGE]
[LengthConstraintType]
[arrangeRR, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[new, RuntimeException, (, "Unrecognised constraint type.", )]
["Unrecognised constraint type."]
[container, ., getBlocks, (, )]
[container]
[constraint, ., getWidth, (, )]
[constraint]
[0.0]
[0.0]
[0.0]
[new, ArrayList, (, )]
[0]
[i, <, blocks, ., size, (, )]
[i]
[blocks, ., size, (, )]
[blocks]
[i, ++]
[i]
[(, Block, ), blocks, ., get, (, i, )]
[blocks, ., get, (, i, )]
[blocks]
[i]
[block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[block]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[x, +, size, ., width, <=, width]
[x, +, size, ., width]
[x]
[size, ., width]
[size]
[width]
[itemsInRow, ., add, (, block, )]
[itemsInRow]
[block]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, ), )]
[block]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, )]
[x]
[y]
[size, ., width]
[size]
[size, ., height]
[size]
[x]
[x, +, size, ., width, +, this, ., horizontalGap]
[x, +, size, ., width]
[x]
[size, ., width]
[size]
[this, ., horizontalGap]
[this]
[maxHeight]
[Math, ., max, (, maxHeight, ,, size, ., height, )]
[Math]
[maxHeight]
[size, ., height]
[size]
[itemsInRow, ., isEmpty, (, )]
[itemsInRow]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, ), )]
[block]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, )]
[x]
[y]
[Math, ., min, (, size, ., width, ,, width, -, x, )]
[Math]
[size, ., width]
[size]
[width, -, x]
[width]
[x]
[size, ., height]
[size]
[x]
[0.0]
[y]
[y, +, size, ., height, +, this, ., verticalGap]
[y, +, size, ., height]
[y]
[size, ., height]
[size]
[this, ., verticalGap]
[this]
[itemsInRow, ., clear, (, )]
[itemsInRow]
[x]
[0.0]
[y]
[y, +, maxHeight, +, this, ., verticalGap]
[y, +, maxHeight]
[y]
[maxHeight]
[this, ., verticalGap]
[this]
[maxHeight]
[size, ., height]
[size]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), )]
[block]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, )]
[x]
[y]
[Math, ., min, (, size, ., width, ,, width, )]
[Math]
[size, ., width]
[size]
[width]
[size, ., height]
[size]
[x]
[size, ., width, +, this, ., horizontalGap]
[size, ., width]
[size]
[this, ., horizontalGap]
[this]
[itemsInRow, ., add, (, block, )]
[itemsInRow]
[block]
[new, Size2D, (, constraint, ., getWidth, (, ), ,, y, +, maxHeight, )]
[constraint, ., getWidth, (, )]
[constraint]
[y, +, maxHeight]
[y]
[maxHeight]
[arrangeFN, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, )]
[constraint, ., getHeightRange, (, )]
[constraint]
[s, ., height]
[s]
[s]
[constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), )]
[constraint]
[constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), )]
[constraint, ., getHeightRange, (, )]
[constraint]
[s, ., getHeight, (, )]
[s]
[arrangeFF, (, container, ,, g2, ,, c, )]
[container]
[g2]
[c]
[arrangeFN, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[arrangeNN, (, container, ,, g2, )]
[container]
[g2]
[constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, )]
[constraint, ., getWidthRange, (, )]
[constraint]
[s1, ., width]
[s1]
[s1]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), )]
[constraint]
[constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[constraint, ., getWidthRange, (, )]
[constraint]
[arrangeFR, (, container, ,, g2, ,, c, )]
[container]
[g2]
[c]
[arrangeNF, (, container, ,, g2, ,, constraint, )]
[container]
[g2]
[constraint]
[constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, )]
[constraint, ., getWidthRange, (, )]
[constraint]
[s, ., width]
[s]
[s]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), )]
[constraint]
[constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), )]
[constraint, ., getWidthRange, (, )]
[constraint]
[s, ., getWidth, (, )]
[s]
[arrangeFF, (, container, ,, g2, ,, c, )]
[container]
[g2]
[c]
[arrangeNN, (, container, ,, g2, )]
[container]
[g2]
[constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, )]
[constraint, ., getWidthRange, (, )]
[constraint]
[s1, ., width]
[s1]
[s1]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), )]
[constraint]
[constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[constraint, ., getWidthRange, (, )]
[constraint]
[arrangeFN, (, container, ,, g2, ,, c, )]
[container]
[g2]
[c]
[0.0]
[0.0]
[0.0]
[container, ., getBlocks, (, )]
[container]
[blocks, ., size, (, )]
[blocks]
[blockCount, >, 0]
[blockCount]
[0]
[new, Size2D, [, blocks, ., size, (, ), ]]
[blocks, ., size, (, )]
[blocks]
[0]
[i, <, blocks, ., size, (, )]
[i]
[blocks, ., size, (, )]
[blocks]
[i, ++]
[i]
[(, Block, ), blocks, ., get, (, i, )]
[blocks, ., get, (, i, )]
[blocks]
[i]
[sizes, [, i, ]]
[sizes]
[i]
[block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, )]
[block]
[g2]
[RectangleConstraint, ., NONE]
[RectangleConstraint]
[width]
[width, +, sizes, [, i, ], ., getWidth, (, )]
[width]
[sizes, [, i, ], ., getWidth, (, )]
[sizes, [, i, ]]
[sizes]
[i]
[maxHeight]
[Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, )]
[Math]
[sizes, [, i, ], ., height]
[sizes, [, i, ]]
[sizes]
[i]
[maxHeight]
[block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), )]
[block]
[new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, )]
[x]
[0.0]
[sizes, [, i, ], ., width]
[sizes, [, i, ]]
[sizes]
[i]
[sizes, [, i, ], ., height]
[sizes, [, i, ]]
[sizes]
[i]
[x]
[x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap]
[x, +, sizes, [, i, ], ., width]
[x]
[sizes, [, i, ], ., width]
[sizes, [, i, ]]
[sizes]
[i]
[this, ., horizontalGap]
[this]
[blockCount, >, 1]
[blockCount]
[1]
[width]
[width, +, this, ., horizontalGap, *, (, blockCount, -, 1, )]
[width]
[this, ., horizontalGap, *, (, blockCount, -, 1, )]
[this, ., horizontalGap]
[this]
[(, blockCount, -, 1, )]
[blockCount, -, 1]
[blockCount]
[1]
[this, ., verticalAlignment, !=, VerticalAlignment, ., TOP]
[this, ., verticalAlignment]
[this]
[VerticalAlignment, ., TOP]
[VerticalAlignment]
[0]
[i, <, blocks, ., size, (, )]
[i]
[blocks, ., size, (, )]
[blocks]
[i, ++]
[i]
[this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER]
[this, ., verticalAlignment]
[this]
[VerticalAlignment, ., CENTER]
[VerticalAlignment]
[this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM]
[this, ., verticalAlignment]
[this]
[VerticalAlignment, ., BOTTOM]
[VerticalAlignment]
[new, Size2D, (, width, ,, maxHeight, )]
[width]
[maxHeight]
[arrangeNN, (, container, ,, g2, )]
[container]
[g2]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, FlowArrangement, )]
[(, obj, instanceof, FlowArrangement, )]
[obj, instanceof, FlowArrangement]
[obj]
[false]
[(, FlowArrangement, ), obj]
[obj]
[this, ., horizontalAlignment, !=, that, ., horizontalAlignment]
[this, ., horizontalAlignment]
[this]
[that, ., horizontalAlignment]
[that]
[false]
[this, ., verticalAlignment, !=, that, ., verticalAlignment]
[this, ., verticalAlignment]
[this]
[that, ., verticalAlignment]
[that]
[false]
[this, ., horizontalGap, !=, that, ., horizontalGap]
[this, ., horizontalGap]
[this]
[that, ., horizontalGap]
[that]
[false]
[this, ., verticalGap, !=, that, ., verticalGap]
[this, ., verticalGap]
[this]
[that, ., verticalGap]
[that]
[false]
[true]
