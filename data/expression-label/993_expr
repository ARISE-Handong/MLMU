[-, 6341668077370231153L]
[6341668077370231153L]
[this, ., list]
[this]
[new, ArrayList, (, )]
[this, ., type]
[this]
[HistogramType, ., FREQUENCY]
[HistogramType]
[this, ., type]
[this]
[type, ==, null]
[type]
[null]
[new, IllegalArgumentException, (, "Null 'type' argument", )]
["Null 'type' argument"]
[this, ., type]
[this]
[type]
[fireDatasetChanged, (, new, DatasetChangeInfo, (, ), )]
[new, DatasetChangeInfo, (, )]
[getMinimum, (, values, )]
[values]
[getMaximum, (, values, )]
[values]
[addSeries, (, key, ,, values, ,, bins, ,, minimum, ,, maximum, )]
[key]
[values]
[bins]
[minimum]
[maximum]
[key, ==, null]
[key]
[null]
[new, IllegalArgumentException, (, "Null 'key' argument.", )]
["Null 'key' argument."]
[values, ==, null]
[values]
[null]
[new, IllegalArgumentException, (, "Null 'values' argument.", )]
["Null 'values' argument."]
[bins, <, 1]
[bins]
[1]
[new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", )]
["The 'bins' value must be at least 1."]
[(, maximum, -, minimum, ), /, bins]
[(, maximum, -, minimum, )]
[maximum, -, minimum]
[maximum]
[minimum]
[bins]
[minimum]
[new, ArrayList, (, bins, )]
[bins]
[0]
[i, <, bins]
[i]
[bins]
[i, ++]
[i]
[i, ==, bins, -, 1]
[i]
[bins, -, 1]
[bins]
[1]
[bin]
[new, HistogramBin, (, lower, ,, maximum, )]
[lower]
[maximum]
[upper]
[minimum, +, (, i, +, 1, ), *, binWidth]
[minimum]
[(, i, +, 1, ), *, binWidth]
[(, i, +, 1, )]
[i, +, 1]
[i]
[1]
[binWidth]
[bin]
[new, HistogramBin, (, lower, ,, upper, )]
[lower]
[upper]
[lower]
[upper]
[binList, ., add, (, bin, )]
[binList]
[bin]
[0]
[i, <, values, ., length]
[i]
[values, ., length]
[values]
[i, ++]
[i]
[bins, -, 1]
[bins]
[1]
[values, [, i, ], <, maximum]
[values, [, i, ]]
[values]
[i]
[maximum]
[(, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, )]
[(, values, [, i, ], -, minimum, )]
[values, [, i, ], -, minimum]
[values, [, i, ]]
[values]
[i]
[minimum]
[(, maximum, -, minimum, )]
[maximum, -, minimum]
[maximum]
[minimum]
[fraction, <, 0.0]
[fraction]
[0.0]
[fraction]
[0.0]
[binIndex]
[(, int, ), (, fraction, *, bins, )]
[(, fraction, *, bins, )]
[fraction, *, bins]
[fraction]
[bins]
[binIndex, >=, bins]
[binIndex]
[bins]
[binIndex]
[bins, -, 1]
[bins]
[1]
[(, HistogramBin, ), binList, ., get, (, binIndex, )]
[binList, ., get, (, binIndex, )]
[binList]
[binIndex]
[bin, ., incrementCount, (, )]
[bin]
[new, HashMap, (, )]
[map, ., put, (, "key", ,, key, )]
[map]
["key"]
[key]
[map, ., put, (, "bins", ,, binList, )]
[map]
["bins"]
[binList]
[map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), )]
[map]
["values.length"]
[new, Integer, (, values, ., length, )]
[values, ., length]
[values]
[map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), )]
[map]
["bin width"]
[new, Double, (, binWidth, )]
[binWidth]
[this, ., list, ., add, (, map, )]
[this, ., list]
[this]
[map]
[values, ==, null, ||, values, ., length, <, 1]
[values, ==, null]
[values]
[null]
[values, ., length, <, 1]
[values, ., length]
[values]
[1]
[new, IllegalArgumentException, (, "Null or zero length 'values' argument.", )]
["Null or zero length 'values' argument."]
[Double, ., MAX_VALUE]
[Double]
[0]
[i, <, values, ., length]
[i]
[values, ., length]
[values]
[i, ++]
[i]
[values, [, i, ], <, min]
[values, [, i, ]]
[values]
[i]
[min]
[min]
[values, [, i, ]]
[values]
[i]
[min]
[values, ==, null, ||, values, ., length, <, 1]
[values, ==, null]
[values]
[null]
[values, ., length, <, 1]
[values, ., length]
[values]
[1]
[new, IllegalArgumentException, (, "Null or zero length 'values' argument.", )]
["Null or zero length 'values' argument."]
[-, Double, ., MAX_VALUE]
[Double, ., MAX_VALUE]
[Double]
[0]
[i, <, values, ., length]
[i]
[values, ., length]
[values]
[i, ++]
[i]
[values, [, i, ], >, max]
[values, [, i, ]]
[values]
[i]
[max]
[max]
[values, [, i, ]]
[values]
[i]
[max]
[(, Map, ), this, ., list, ., get, (, series, )]
[this, ., list, ., get, (, series, )]
[this, ., list]
[this]
[series]
[(, List, ), map, ., get, (, "bins", )]
[map, ., get, (, "bins", )]
[map]
["bins"]
[(, Map, ), this, ., list, ., get, (, series, )]
[this, ., list, ., get, (, series, )]
[this, ., list]
[this]
[series]
[(, (, Integer, ), map, ., get, (, "values.length", ), ), ., intValue, (, )]
[(, (, Integer, ), map, ., get, (, "values.length", ), )]
[(, Integer, ), map, ., get, (, "values.length", )]
[map, ., get, (, "values.length", )]
[map]
["values.length"]
[(, Map, ), this, ., list, ., get, (, series, )]
[this, ., list, ., get, (, series, )]
[this, ., list]
[this]
[series]
[(, (, Double, ), map, ., get, (, "bin width", ), ), ., doubleValue, (, )]
[(, (, Double, ), map, ., get, (, "bin width", ), )]
[(, Double, ), map, ., get, (, "bin width", )]
[map, ., get, (, "bin width", )]
[map]
["bin width"]
[this, ., list, ., size, (, )]
[this, ., list]
[this]
[(, Map, ), this, ., list, ., get, (, series, )]
[this, ., list, ., get, (, series, )]
[this, ., list]
[this]
[series]
[(, Comparable, ), map, ., get, (, "key", )]
[map, ., get, (, "key", )]
[map]
["key"]
[getBins, (, series, ), ., size, (, )]
[getBins, (, series, )]
[series]
[getBins, (, series, )]
[series]
[(, HistogramBin, ), bins, ., get, (, item, )]
[bins, ., get, (, item, )]
[bins]
[item]
[(, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2.]
[(, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), )]
[bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, )]
[bin, ., getStartBoundary, (, )]
[bin]
[bin, ., getEndBoundary, (, )]
[bin]
[2.]
[new, Double, (, x, )]
[x]
[getBins, (, series, )]
[series]
[(, HistogramBin, ), bins, ., get, (, item, )]
[bins, ., get, (, item, )]
[bins]
[item]
[getTotal, (, series, )]
[series]
[getBinWidth, (, series, )]
[series]
[this, ., type, ==, HistogramType, ., FREQUENCY]
[this, ., type]
[this]
[HistogramType, ., FREQUENCY]
[HistogramType]
[new, Double, (, bin, ., getCount, (, ), )]
[bin, ., getCount, (, )]
[bin]
[this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY]
[this, ., type]
[this]
[HistogramType, ., RELATIVE_FREQUENCY]
[HistogramType]
[new, Double, (, bin, ., getCount, (, ), /, total, )]
[bin, ., getCount, (, ), /, total]
[bin, ., getCount, (, )]
[bin]
[total]
[this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1]
[this, ., type]
[this]
[HistogramType, ., SCALE_AREA_TO_1]
[HistogramType]
[new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total, ), )]
[bin, ., getCount, (, ), /, (, binWidth, *, total, )]
[bin, ., getCount, (, )]
[bin]
[(, binWidth, *, total, )]
[binWidth, *, total]
[binWidth]
[total]
[new, IllegalStateException, (, )]
[getBins, (, series, )]
[series]
[(, HistogramBin, ), bins, ., get, (, item, )]
[bins, ., get, (, item, )]
[bins]
[item]
[new, Double, (, bin, ., getStartBoundary, (, ), )]
[bin, ., getStartBoundary, (, )]
[bin]
[getBins, (, series, )]
[series]
[(, HistogramBin, ), bins, ., get, (, item, )]
[bins, ., get, (, item, )]
[bins]
[item]
[new, Double, (, bin, ., getEndBoundary, (, ), )]
[bin, ., getEndBoundary, (, )]
[bin]
[getY, (, series, ,, item, )]
[series]
[item]
[getY, (, series, ,, item, )]
[series]
[item]
[obj, ==, this]
[obj]
[this]
[true]
[!, (, obj, instanceof, HistogramDataset, )]
[(, obj, instanceof, HistogramDataset, )]
[obj, instanceof, HistogramDataset]
[obj]
[false]
[(, HistogramDataset, ), obj]
[obj]
[!, ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, )]
[ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, )]
[ObjectUtilities]
[this, ., type]
[this]
[that, ., type]
[that]
[false]
[!, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list, )]
[ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list, )]
[ObjectUtilities]
[this, ., list]
[this]
[that, ., list]
[that]
[false]
[true]
[(, HistogramDataset, ), super, ., clone, (, )]
[super, ., clone, (, )]
[super]
[getSeriesCount, (, )]
[clone, ., list]
[clone]
[new, java, ., util, ., ArrayList, (, seriesCount, )]
[seriesCount]
[0]
[i, <, seriesCount]
[i]
[seriesCount]
[i, ++]
[i]
[clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get, (, i, ), ), )]
[clone, ., list]
[clone]
[new, HashMap, (, (, Map, ), this, ., list, ., get, (, i, ), )]
[(, Map, ), this, ., list, ., get, (, i, )]
[this, ., list, ., get, (, i, )]
[this, ., list]
[this]
[i]
[clone]
