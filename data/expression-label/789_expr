[Logger, ., getLogger, (, CrossModuleCodeMotion, ., class, ., getName, (, ), )]
[Logger]
[CrossModuleCodeMotion, ., class, ., getName, (, )]
[CrossModuleCodeMotion, ., class]
[new, HashMap, <, JSModule, ,, Node, >, (, )]
[new, LinkedHashMap, <, Var, ,, NamedInfo, >, (, )]
[this, ., compiler]
[this]
[compiler]
[this, ., graph]
[this]
[graph]
[logger, ., fine, (, "Moving functions + variable into deeper modules", )]
[logger]
["Moving functions + variable into deeper modules"]
[graph, !=, null, &&, graph, ., getModuleCount, (, ), >, 1]
[graph, !=, null]
[graph]
[null]
[graph, ., getModuleCount, (, ), >, 1]
[graph, ., getModuleCount, (, )]
[graph]
[1]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[moveCode, (, )]
[namedInfo, ., values, (, )]
[namedInfo]
[info, ., deepestModule]
[info]
[info, ., allowMove, &&, deepestDependency, !=, null]
[info, ., allowMove]
[info]
[deepestDependency, !=, null]
[deepestDependency]
[null]
[info, ., declarationIterator, (, )]
[info]
[compiler, ., getModuleGraph, (, )]
[compiler]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[decl, ., module, !=, null, &&, moduleGraph, ., dependsOn, (, deepestDependency, ,, decl, ., module, )]
[decl, ., module, !=, null]
[decl, ., module]
[decl]
[null]
[moduleGraph, ., dependsOn, (, deepestDependency, ,, decl, ., module, )]
[moduleGraph]
[deepestDependency]
[decl, ., module]
[decl]
[moduleVarParentMap, ., get, (, deepestDependency, )]
[moduleVarParentMap]
[deepestDependency]
[destParent, ==, null]
[destParent]
[null]
[destParent]
[compiler, ., getNodeForCodeInsertion, (, deepestDependency, )]
[compiler]
[deepestDependency]
[moduleVarParentMap, ., put, (, deepestDependency, ,, destParent, )]
[moduleVarParentMap]
[deepestDependency]
[destParent]
[decl, ., node, ., getParent, (, )]
[decl, ., node]
[decl]
[Preconditions, ., checkState, (, !, declParent, ., isVar, (, ), ||, declParent, ., hasOneChild, (, ), ,, "AST not normalized.", )]
[Preconditions]
[!, declParent, ., isVar, (, ), ||, declParent, ., hasOneChild, (, )]
[!, declParent, ., isVar, (, )]
[declParent, ., isVar, (, )]
[declParent]
[declParent, ., hasOneChild, (, )]
[declParent]
["AST not normalized."]
[declParent, ., detachFromParent, (, )]
[declParent]
[destParent, ., addChildToFront, (, declParent, )]
[destParent]
[declParent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[true]
[null]
[null]
[new, ArrayDeque, <, Declaration, >, (, )]
[!, allowMove]
[allowMove]
[deepestModule, ==, null]
[deepestModule]
[null]
[deepestModule]
[m]
[deepestModule]
[graph, ., getDeepestCommonDependencyInclusive, (, m, ,, deepestModule, )]
[graph]
[m]
[deepestModule]
[declModule, !=, null, &&, d, ., module, !=, declModule]
[declModule, !=, null]
[declModule]
[null]
[d, ., module, !=, declModule]
[d, ., module]
[d]
[declModule]
[false]
[declarations, ., push, (, d, )]
[declarations]
[d]
[declModule]
[d, ., module]
[d]
[true]
[declarations, ., iterator, (, )]
[declarations]
[this, ., module]
[this]
[module]
[this, ., node]
[this]
[node]
[n, ., getAncestors, (, )]
[n]
[ancestor, ., getType, (, )]
[ancestor]
[Token, ., DO]
[Token]
[Token, ., FOR]
[Token]
[Token, ., HOOK]
[Token]
[Token, ., IF]
[Token]
[Token, ., SWITCH]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., FUNCTION]
[Token]
[true]
[false]
[namedInfo, ., get, (, v, )]
[namedInfo]
[v]
[info, ==, null]
[info]
[null]
[info]
[new, NamedInfo, (, )]
[namedInfo, ., put, (, v, ,, info, )]
[namedInfo]
[v]
[info]
[info]
[false]
[t, ., getScope, (, ), ., getRootNode, (, )]
[t, ., getScope, (, )]
[t]
[rootNode, ., isFunction, (, )]
[rootNode]
[rootNode, ., getFirstChild, (, ), ., getString, (, )]
[rootNode, ., getFirstChild, (, )]
[rootNode]
[rootNode, ., getParent, (, )]
[rootNode]
[scopeFuncName, ., equals, (, name, )]
[scopeFuncName]
[name]
[recursive]
[true]
[scopeFuncParent, ., isName, (, ), &&, scopeFuncParent, ., getString, (, ), ., equals, (, name, )]
[scopeFuncParent, ., isName, (, )]
[scopeFuncParent]
[scopeFuncParent, ., getString, (, ), ., equals, (, name, )]
[scopeFuncParent, ., getString, (, )]
[scopeFuncParent]
[name]
[recursive]
[true]
[t, ., getScope, (, )]
[t]
[s, ., getParent, (, ), !=, null]
[s, ., getParent, (, )]
[s]
[null]
[s]
[s, ., getParent, (, )]
[s]
[s, ., getRootNode, (, )]
[s]
[curRoot, ., getParent, (, ), ., isAssign, (, )]
[curRoot, ., getParent, (, )]
[curRoot]
[curRoot, ., getParent, (, ), ., getFirstChild, (, )]
[curRoot, ., getParent, (, )]
[curRoot]
[owner, ., isGetProp, (, )]
[owner]
[owner]
[owner, ., getFirstChild, (, )]
[owner]
[owner, ., isName, (, ), &&, owner, ., getString, (, ), ., equals, (, name, )]
[owner, ., isName, (, )]
[owner]
[owner, ., getString, (, ), ., equals, (, name, )]
[owner, ., getString, (, )]
[owner]
[name]
[recursive]
[true]
[!, recursive]
[recursive]
[info, ., addUsedModule, (, t, ., getModule, (, ), )]
[info]
[t, ., getModule, (, )]
[t]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[name, ., isEmpty, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, name, )]
[name, ., isEmpty, (, )]
[name]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[v, ==, null, ||, !, v, ., isGlobal, (, )]
[v, ==, null]
[v]
[null]
[!, v, ., isGlobal, (, )]
[v, ., isGlobal, (, )]
[v]
[getNamedInfo, (, v, )]
[v]
[info, ., allowMove]
[info]
[maybeProcessDeclaration, (, t, ,, n, ,, parent, ,, info, )]
[t]
[n]
[parent]
[info]
[hasConditionalAncestor, (, parent, ., getParent, (, ), )]
[parent, ., getParent, (, )]
[parent]
[info, ., allowMove]
[info]
[false]
[processReference, (, t, ,, info, ,, name, )]
[t]
[info]
[name]
[parent, ., getParent, (, )]
[parent]
[parent, ., getType, (, )]
[parent]
[Token, ., VAR]
[Token]
[canMoveValue, (, name, ., getFirstChild, (, ), )]
[name, ., getFirstChild, (, )]
[name]
[info, ., addDeclaration, (, new, Declaration, (, t, ., getModule, (, ), ,, name, ,, parent, ,, gramps, ), )]
[info]
[new, Declaration, (, t, ., getModule, (, ), ,, name, ,, parent, ,, gramps, )]
[t, ., getModule, (, )]
[t]
[name]
[parent]
[gramps]
[false]
[Token, ., FUNCTION]
[Token]
[NodeUtil, ., isFunctionDeclaration, (, parent, )]
[NodeUtil]
[parent]
[info, ., addDeclaration, (, new, Declaration, (, t, ., getModule, (, ), ,, name, ,, parent, ,, gramps, ), )]
[info]
[new, Declaration, (, t, ., getModule, (, ), ,, name, ,, parent, ,, gramps, )]
[t, ., getModule, (, )]
[t]
[name]
[parent]
[gramps]
[false]
[Token, ., ASSIGN]
[Token]
[Token, ., GETPROP]
[Token]
[name]
[name, ., getAncestors, (, )]
[name]
[current, ., isGetProp, (, )]
[current]
[current, ., isAssign, (, ), &&, current, ., getFirstChild, (, ), ==, child]
[current, ., isAssign, (, )]
[current]
[current, ., getFirstChild, (, ), ==, child]
[current, ., getFirstChild, (, )]
[current]
[child]
[current, ., getParent, (, )]
[current]
[currentParent, ., isExprResult, (, ), &&, canMoveValue, (, current, ., getLastChild, (, ), )]
[currentParent, ., isExprResult, (, )]
[currentParent]
[canMoveValue, (, current, ., getLastChild, (, ), )]
[current, ., getLastChild, (, )]
[current]
[info, ., addDeclaration, (, new, Declaration, (, t, ., getModule, (, ), ,, current, ,, currentParent, ,, currentParent, ., getParent, (, ), ), )]
[info]
[new, Declaration, (, t, ., getModule, (, ), ,, current, ,, currentParent, ,, currentParent, ., getParent, (, ), )]
[t, ., getModule, (, )]
[t]
[current]
[currentParent]
[currentParent, ., getParent, (, )]
[currentParent]
[false]
[child]
[current]
[false]
[Token, ., CALL]
[Token]
[NodeUtil, ., isExprCall, (, gramps, )]
[NodeUtil]
[gramps]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, parent, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[parent]
[relationship, !=, null, &&, name, ., getString, (, ), ., equals, (, relationship, ., subclassName, )]
[relationship, !=, null]
[relationship]
[null]
[name, ., getString, (, ), ., equals, (, relationship, ., subclassName, )]
[name, ., getString, (, )]
[name]
[relationship, ., subclassName]
[relationship]
[info, ., addDeclaration, (, new, Declaration, (, t, ., getModule, (, ), ,, parent, ,, gramps, ,, gramps, ., getParent, (, ), ), )]
[info]
[new, Declaration, (, t, ., getModule, (, ), ,, parent, ,, gramps, ,, gramps, ., getParent, (, ), )]
[t, ., getModule, (, )]
[t]
[parent]
[gramps]
[gramps, ., getParent, (, )]
[gramps]
[false]
[false]
[n, ==, null, ||, NodeUtil, ., isLiteralValue, (, n, ,, true, ), ||, n, ., isFunction, (, )]
[n, ==, null, ||, NodeUtil, ., isLiteralValue, (, n, ,, true, )]
[n, ==, null]
[n]
[null]
[NodeUtil, ., isLiteralValue, (, n, ,, true, )]
[NodeUtil]
[n]
[true]
[n, ., isFunction, (, )]
[n]
[true]
[n, ., isCall, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[functionName, ., isName, (, ), &&, (, functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., STUB_METHOD_NAME, ), ||, functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., UNSTUB_METHOD_NAME, ), )]
[functionName, ., isName, (, )]
[functionName]
[(, functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., STUB_METHOD_NAME, ), ||, functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., UNSTUB_METHOD_NAME, ), )]
[functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., STUB_METHOD_NAME, ), ||, functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., UNSTUB_METHOD_NAME, )]
[functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., STUB_METHOD_NAME, )]
[functionName, ., getString, (, )]
[functionName]
[CrossModuleMethodMotion, ., STUB_METHOD_NAME]
[CrossModuleMethodMotion]
[functionName, ., getString, (, ), ., equals, (, CrossModuleMethodMotion, ., UNSTUB_METHOD_NAME, )]
[functionName, ., getString, (, )]
[functionName]
[CrossModuleMethodMotion, ., UNSTUB_METHOD_NAME]
[CrossModuleMethodMotion]
[n, ., isArrayLit, (, ), ||, n, ., isObjectLit, (, )]
[n, ., isArrayLit, (, )]
[n]
[n, ., isObjectLit, (, )]
[n]
[n, ., isObjectLit, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[!, canMoveValue, (, isObjectLit, ?, child, ., getFirstChild, (, ), :, child, )]
[canMoveValue, (, isObjectLit, ?, child, ., getFirstChild, (, ), :, child, )]
[isObjectLit, ?, child, ., getFirstChild, (, ), :, child]
[isObjectLit]
[child, ., getFirstChild, (, )]
[child]
[child]
[false]
[true]
[false]
