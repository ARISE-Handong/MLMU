[Logger, ., getLogger, (, UnreachableCodeElimination, ., class, ., getName, (, ), )]
[Logger]
[UnreachableCodeElimination, ., class, ., getName, (, )]
[UnreachableCodeElimination, ., class]
[this, ., compiler]
[this]
[compiler]
[this, ., removeNoOpStatements]
[this]
[removeNoOpStatements]
[t, ., getScope, (, )]
[t]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, false, )]
[compiler]
[false]
[false]
[cfa, ., process, (, null, ,, scope, ., getRootNode, (, ), )]
[cfa]
[null]
[scope, ., getRootNode, (, )]
[scope]
[cfa, ., getCfg, (, )]
[cfa]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, ), ., compute, (, cfg, ., getEntry, (, ), ., getValue, (, ), )]
[new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, cfg, )]
[cfg]
[cfg, ., getEntry, (, ), ., getValue, (, )]
[cfg, ., getEntry, (, )]
[cfg]
[scope, ., getRootNode, (, )]
[scope]
[scope, ., isLocal, (, )]
[scope]
[root]
[root, ., getLastChild, (, )]
[root]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, EliminationPass, (, cfg, ), )]
[NodeTraversal]
[compiler]
[root]
[new, EliminationPass, (, cfg, )]
[cfg]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[this, ., cfg]
[this]
[cfg]
[parent, ==, null]
[parent]
[null]
[n, ., isFunction, (, ), ||, n, ., isScript, (, )]
[n, ., isFunction, (, )]
[n]
[n, ., isScript, (, )]
[n]
[cfg, ., getDirectedGraphNode, (, n, )]
[cfg]
[n]
[gNode, ==, null]
[gNode]
[null]
[gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ||, (, removeNoOpStatements, &&, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), )]
[gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE]
[gNode, ., getAnnotation, (, )]
[gNode]
[GraphReachability, ., REACHABLE]
[GraphReachability]
[(, removeNoOpStatements, &&, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, ), )]
[removeNoOpStatements, &&, !, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, )]
[removeNoOpStatements]
[!, NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, )]
[NodeUtil, ., mayHaveSideEffects, (, n, ,, compiler, )]
[NodeUtil]
[n]
[compiler]
[removeDeadExprStatementSafely, (, n, )]
[n]
[tryRemoveUnconditionalBranching, (, n, )]
[n]
[@, SuppressWarnings, (, "fallthrough", )]
["fallthrough"]
[n, ==, null]
[n]
[null]
[n]
[cfg, ., getDirectedGraphNode, (, n, )]
[cfg]
[n]
[gNode, ==, null]
[gNode]
[null]
[n]
[n, ., getType, (, )]
[n]
[Token, ., RETURN]
[Token]
[n, ., hasChildren, (, )]
[n]
[Token, ., BREAK]
[Token]
[Token, ., CONTINUE]
[Token]
[gNode, ., getOutEdges, (, )]
[gNode]
[outEdges, ., size, (, ), ==, 1, &&, (, n, ., getNext, (, ), ==, null, ||, n, ., getNext, (, ), ., isFunction, (, ), )]
[outEdges, ., size, (, ), ==, 1]
[outEdges, ., size, (, )]
[outEdges]
[1]
[(, n, ., getNext, (, ), ==, null, ||, n, ., getNext, (, ), ., isFunction, (, ), )]
[n, ., getNext, (, ), ==, null, ||, n, ., getNext, (, ), ., isFunction, (, )]
[n, ., getNext, (, ), ==, null]
[n, ., getNext, (, )]
[n]
[null]
[n, ., getNext, (, ), ., isFunction, (, )]
[n, ., getNext, (, )]
[n]
[Preconditions, ., checkState, (, outEdges, ., get, (, 0, ), ., getValue, (, ), ==, Branch, ., UNCOND, )]
[Preconditions]
[outEdges, ., get, (, 0, ), ., getValue, (, ), ==, Branch, ., UNCOND]
[outEdges, ., get, (, 0, ), ., getValue, (, )]
[outEdges, ., get, (, 0, )]
[outEdges]
[0]
[Branch, ., UNCOND]
[Branch]
[computeFollowing, (, n, )]
[n]
[outEdges, ., get, (, 0, ), ., getDestination, (, ), ., getValue, (, )]
[outEdges, ., get, (, 0, ), ., getDestination, (, )]
[outEdges, ., get, (, 0, )]
[outEdges]
[0]
[nextCfgNode, ==, fallThrough]
[nextCfgNode]
[fallThrough]
[removeDeadExprStatementSafely, (, n, )]
[n]
[fallThrough]
[n]
[ControlFlowAnalysis, ., computeFollowNode, (, n, )]
[ControlFlowAnalysis]
[n]
[next, !=, null, &&, next, ., isBlock, (, )]
[next, !=, null]
[next]
[null]
[next, ., isBlock, (, )]
[next]
[next, ., hasChildren, (, )]
[next]
[next]
[next, ., getFirstChild, (, )]
[next]
[next]
[computeFollowing, (, next, )]
[next]
[next]
[n, ., getParent, (, )]
[n]
[n, ., isEmpty, (, ), ||, (, n, ., isBlock, (, ), &&, !, n, ., hasChildren, (, ), )]
[n, ., isEmpty, (, )]
[n]
[(, n, ., isBlock, (, ), &&, !, n, ., hasChildren, (, ), )]
[n, ., isBlock, (, ), &&, !, n, ., hasChildren, (, )]
[n, ., isBlock, (, )]
[n]
[!, n, ., hasChildren, (, )]
[n, ., hasChildren, (, )]
[n]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[n, ., getType, (, )]
[n]
[Token, ., DO]
[Token]
[Token, ., BLOCK]
[Token]
[parent, ., isTry, (, )]
[parent]
[NodeUtil, ., isTryCatchNodeContainer, (, n, )]
[NodeUtil]
[n]
[Token, ., CATCH]
[Token]
[parent, ., getParent, (, )]
[parent]
[NodeUtil, ., maybeAddFinally, (, tryNode, )]
[NodeUtil]
[tryNode]
[n, ., isVar, (, ), &&, !, n, ., getFirstChild, (, ), ., hasChildren, (, )]
[n, ., isVar, (, )]
[n]
[!, n, ., getFirstChild, (, ), ., hasChildren, (, )]
[n, ., getFirstChild, (, ), ., hasChildren, (, )]
[n, ., getFirstChild, (, )]
[n]
[NodeUtil, ., redeclareVarsInsideBranch, (, n, )]
[NodeUtil]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[logger, ., isLoggable, (, Level, ., FINE, )]
[logger]
[Level, ., FINE]
[Level]
[logger, ., fine, (, "Removing ", +, n, ., toString, (, ), )]
[logger]
["Removing ", +, n, ., toString, (, )]
["Removing "]
[n, ., toString, (, )]
[n]
[NodeUtil, ., removeChild, (, n, ., getParent, (, ), ,, n, )]
[NodeUtil]
[n, ., getParent, (, )]
[n]
[n]
