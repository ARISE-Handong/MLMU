[Sets, ., newHashSet, (, )]
[Sets]
[Preconditions, ., checkNotNull, (, compiler, )]
[Preconditions]
[compiler]
[Preconditions, ., checkNotNull, (, safeNameIdSupplier, )]
[Preconditions]
[safeNameIdSupplier]
[this, ., compiler]
[this]
[compiler]
[this, ., safeNameIdSupplier]
[this]
[safeNameIdSupplier]
[this, ., allowDecomposition]
[this]
[allowDecomposition]
[this, ., assumeStrictThis]
[this]
[assumeStrictThis]
[this, ., assumeMinimumCapture]
[this]
[assumeMinimumCapture]
[this, ., callNode]
[this]
[callNode]
[this, ., module]
[this]
[module]
[this, ., mode]
[this]
[mode]
[InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST]
[InlineCostEstimator]
[1]
[2]
[NodeUtil, ., getFunctionBody, (, fnNode, )]
[NodeUtil]
[fnNode]
[!, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, )]
[compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, fnNode, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[fnNode]
[false]
[fnNode, ., getFirstChild, (, ), ., getString, (, )]
[fnNode, ., getFirstChild, (, )]
[fnNode]
[Preconditions, ., checkState, (, fnRecursionName, !=, null, )]
[Preconditions]
[fnRecursionName, !=, null]
[fnRecursionName]
[null]
[NodeUtil, ., isNameReferenced, (, block, ,, "arguments", ,, NodeUtil, ., MATCH_NOT_FUNCTION, )]
[NodeUtil]
[block]
["arguments"]
[NodeUtil, ., MATCH_NOT_FUNCTION]
[NodeUtil]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), ), ;, }, return, false, ;, }, }]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), ), ||, (, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), )]
[n, ., getString, (, ), ., equals, (, "eval", ), ||, (, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), )]
[n, ., getString, (, ), ., equals, (, "eval", )]
[n, ., getString, (, )]
[n]
["eval"]
[(, !, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, ), )]
[!, fnName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnName, )]
[!, fnName, ., isEmpty, (, )]
[fnName, ., isEmpty, (, )]
[fnName]
[n, ., getString, (, ), ., equals, (, fnName, )]
[n, ., getString, (, )]
[n]
[fnName]
[(, !, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, ), )]
[!, fnRecursionName, ., isEmpty, (, ), &&, n, ., getString, (, ), ., equals, (, fnRecursionName, )]
[!, fnRecursionName, ., isEmpty, (, )]
[fnRecursionName, ., isEmpty, (, )]
[fnRecursionName]
[n, ., getString, (, ), ., equals, (, fnRecursionName, )]
[n, ., getString, (, )]
[n]
[fnRecursionName]
[false]
[!, referencesArguments, &&, !, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[!, referencesArguments]
[referencesArguments]
[!, NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[NodeUtil, ., has, (, block, ,, p, ,, Predicates, ., <, Node, >, alwaysTrue, (, ), )]
[NodeUtil]
[block]
[p]
[Predicates, ., <, Node, >, alwaysTrue, (, )]
[Predicates]
[!, isSupportedCallType, (, callNode, )]
[isSupportedCallType, (, callNode, )]
[callNode]
[CanInlineResult, ., NO]
[CanInlineResult]
[containsFunctions]
[!, assumeMinimumCapture, &&, !, t, ., inGlobalScope, (, )]
[!, assumeMinimumCapture]
[assumeMinimumCapture]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[CanInlineResult, ., NO]
[CanInlineResult]
[NodeUtil, ., isWithinLoop, (, callNode, )]
[NodeUtil]
[callNode]
[CanInlineResult, ., NO]
[CanInlineResult]
[referencesThis, &&, !, NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[referencesThis]
[!, NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[NodeUtil]
[callNode]
[CanInlineResult, ., NO]
[CanInlineResult]
[mode, ==, InliningMode, ., DIRECT]
[mode]
[InliningMode, ., DIRECT]
[InliningMode]
[canInlineReferenceDirectly, (, callNode, ,, fnNode, )]
[callNode]
[fnNode]
[canInlineReferenceAsStatementBlock, (, t, ,, callNode, ,, fnNode, ,, needAliases, )]
[t]
[callNode]
[fnNode]
[needAliases]
[!, callNode, ., getFirstChild, (, ), ., isName, (, )]
[callNode, ., getFirstChild, (, ), ., isName, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[NodeUtil]
[callNode]
[!, assumeStrictThis]
[assumeStrictThis]
[callNode, ., getFirstChild, (, ), ., getNext, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[thisValue, ==, null, ||, !, thisValue, ., isThis, (, )]
[thisValue, ==, null]
[thisValue]
[null]
[!, thisValue, ., isThis, (, )]
[thisValue, ., isThis, (, )]
[thisValue]
[false]
[NodeUtil, ., isFunctionObjectApply, (, callNode, )]
[NodeUtil]
[callNode]
[false]
[true]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[mode, ==, InliningMode, ., DIRECT]
[mode]
[InliningMode, ., DIRECT]
[InliningMode]
[inlineReturnValue, (, callNode, ,, fnNode, )]
[callNode]
[fnNode]
[inlineFunction, (, callNode, ,, fnNode, ,, fnName, )]
[callNode]
[fnNode]
[fnName]
[fnNode, ., getLastChild, (, )]
[fnNode]
[callNode, ., getParent, (, )]
[callNode]
[FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, )]
[FunctionArgumentInjector]
[fnNode]
[callNode]
[this, ., safeNameIdSupplier]
[this]
[!, block, ., hasChildren, (, )]
[block, ., hasChildren, (, )]
[block]
[block]
[newExpression]
[NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[NodeUtil]
[srcLocation]
[block, ., getFirstChild, (, )]
[block]
[Preconditions, ., checkArgument, (, returnNode, ., isReturn, (, ), )]
[Preconditions]
[returnNode, ., isReturn, (, )]
[returnNode]
[returnNode, ., cloneTree, (, )]
[returnNode]
[FunctionArgumentInjector, ., inject, (, null, ,, safeReturnNode, ,, null, ,, argMap, )]
[FunctionArgumentInjector]
[null]
[safeReturnNode]
[null]
[argMap]
[Preconditions, ., checkArgument, (, safeReturnNode, ==, inlineResult, )]
[Preconditions]
[safeReturnNode, ==, inlineResult]
[safeReturnNode]
[inlineResult]
[newExpression]
[safeReturnNode, ., removeFirstChild, (, )]
[safeReturnNode]
[callParentNode, ., replaceChild, (, callNode, ,, newExpression, )]
[callParentNode]
[callNode]
[newExpression]
[newExpression]
[new, IllegalStateException, (, "unexpected", )]
["unexpected"]
[injector, ., getDecomposer, (, ), ., moveExpression, (, callNode, )]
[injector, ., getDecomposer, (, )]
[injector]
[callNode]
[injector, ., classifyCallSite, (, callNode, )]
[injector]
[callNode]
[Preconditions, ., checkState, (, this, !=, callSiteType, )]
[Preconditions]
[this, !=, callSiteType]
[this]
[callSiteType]
[callSiteType, ., prepare, (, injector, ,, callNode, )]
[callSiteType]
[injector]
[callNode]
[injector, ., getDecomposer, (, ), ., maybeExposeExpression, (, callNode, )]
[injector, ., getDecomposer, (, )]
[injector]
[callNode]
[injector, ., classifyCallSite, (, callNode, )]
[injector]
[callNode]
[Preconditions, ., checkState, (, this, !=, callSiteType, )]
[Preconditions]
[this, !=, callSiteType]
[this]
[callSiteType]
[callSiteType, ., prepare, (, injector, ,, callNode, )]
[callSiteType]
[injector]
[callNode]
[callNode, ., getParent, (, )]
[callNode]
[parent, ., getParent, (, )]
[parent]
[NodeUtil, ., isExprCall, (, parent, )]
[NodeUtil]
[parent]
[CallSiteType, ., SIMPLE_CALL]
[CallSiteType]
[NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), )]
[NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, ), &&, parent, ., getFirstChild, (, ), ., isName, (, )]
[NodeUtil, ., isExprAssign, (, grandParent, ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, )]
[NodeUtil, ., isExprAssign, (, grandParent, )]
[NodeUtil]
[grandParent]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, )]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, callNode, ,, parent, )]
[NodeUtil]
[callNode]
[parent]
[parent, ., getFirstChild, (, ), ., isName, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[!, NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), )]
[NodeUtil, ., isConstantName, (, parent, ., getFirstChild, (, ), )]
[NodeUtil]
[parent, ., getFirstChild, (, )]
[parent]
[CallSiteType, ., SIMPLE_ASSIGNMENT]
[CallSiteType]
[parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, ), &&, grandParent, ., hasOneChild, (, )]
[parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, ), &&, grandParent, ., isVar, (, )]
[parent, ., isName, (, ), &&, !, NodeUtil, ., isConstantName, (, parent, )]
[parent, ., isName, (, )]
[parent]
[!, NodeUtil, ., isConstantName, (, parent, )]
[NodeUtil, ., isConstantName, (, parent, )]
[NodeUtil]
[parent]
[grandParent, ., isVar, (, )]
[grandParent]
[grandParent, ., hasOneChild, (, )]
[grandParent]
[CallSiteType, ., VAR_DECL_SIMPLE_ASSIGNMENT]
[CallSiteType]
[ExpressionDecomposer, ., findExpressionRoot, (, callNode, )]
[ExpressionDecomposer]
[callNode]
[expressionRoot, !=, null]
[expressionRoot]
[null]
[new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, )]
[compiler]
[safeNameIdSupplier]
[knownConstants]
[decomposer, ., canExposeExpression, (, callNode, )]
[decomposer]
[callNode]
[type, ==, DecompositionType, ., MOVABLE]
[type]
[DecompositionType, ., MOVABLE]
[DecompositionType]
[CallSiteType, ., EXPRESSION]
[CallSiteType]
[type, ==, DecompositionType, ., DECOMPOSABLE]
[type]
[DecompositionType, ., DECOMPOSABLE]
[DecompositionType]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[CallSiteType]
[Preconditions, ., checkState, (, type, ==, DecompositionType, ., UNDECOMPOSABLE, )]
[Preconditions]
[type, ==, DecompositionType, ., UNDECOMPOSABLE]
[type]
[DecompositionType, ., UNDECOMPOSABLE]
[DecompositionType]
[CallSiteType, ., UNSUPPORTED]
[CallSiteType]
[new, ExpressionDecomposer, (, compiler, ,, safeNameIdSupplier, ,, knownConstants, )]
[compiler]
[safeNameIdSupplier]
[knownConstants]
[classifyCallSite, (, callNode, )]
[callNode]
[callSiteType, ., prepare, (, this, ,, callNode, )]
[callSiteType]
[this]
[callNode]
[callNode, ., getParent, (, )]
[callNode]
[parent, ., getParent, (, )]
[parent]
[classifyCallSite, (, callNode, )]
[callNode]
[Preconditions, ., checkArgument, (, callSiteType, !=, CallSiteType, ., UNSUPPORTED, )]
[Preconditions]
[callSiteType, !=, CallSiteType, ., UNSUPPORTED]
[callSiteType]
[CallSiteType, ., UNSUPPORTED]
[CallSiteType]
[NodeUtil, ., isWithinLoop, (, callNode, )]
[NodeUtil]
[callNode]
[null]
[true]
[callSiteType]
[SIMPLE_ASSIGNMENT]
[resultName]
[parent, ., getFirstChild, (, ), ., getString, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[VAR_DECL_SIMPLE_ASSIGNMENT]
[resultName]
[parent, ., getString, (, )]
[parent]
[SIMPLE_CALL]
[resultName]
[null]
[needsDefaultReturnResult]
[false]
[EXPRESSION]
[new, IllegalStateException, (, "Movable expressions must be moved before inlining.", )]
["Movable expressions must be moved before inlining."]
[DECOMPOSABLE_EXPRESSION]
[new, IllegalStateException, (, "Decomposable expressions must be decomposed before inlining.", )]
["Decomposable expressions must be decomposed before inlining."]
[new, IllegalStateException, (, "Unexpected call site type.", )]
["Unexpected call site type."]
[new, FunctionToBlockMutator, (, compiler, ,, this, ., safeNameIdSupplier, )]
[compiler]
[this, ., safeNameIdSupplier]
[this]
[mutator, ., mutate, (, fnName, ,, fnNode, ,, callNode, ,, resultName, ,, needsDefaultReturnResult, ,, isCallInLoop, )]
[mutator]
[fnName]
[fnNode]
[callNode]
[resultName]
[needsDefaultReturnResult]
[isCallInLoop]
[grandParent, ., getParent, (, )]
[grandParent]
[callSiteType]
[VAR_DECL_SIMPLE_ASSIGNMENT]
[parent, ., removeChild, (, parent, ., getFirstChild, (, ), )]
[parent]
[parent, ., getFirstChild, (, )]
[parent]
[Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, null, )]
[Preconditions]
[parent, ., getFirstChild, (, ), ==, null]
[parent, ., getFirstChild, (, )]
[parent]
[null]
[greatGrandParent, ., addChildAfter, (, newBlock, ,, grandParent, )]
[greatGrandParent]
[newBlock]
[grandParent]
[SIMPLE_ASSIGNMENT]
[Preconditions, ., checkState, (, grandParent, ., isExprResult, (, ), )]
[Preconditions]
[grandParent, ., isExprResult, (, )]
[grandParent]
[greatGrandParent, ., replaceChild, (, grandParent, ,, newBlock, )]
[greatGrandParent]
[grandParent]
[newBlock]
[SIMPLE_CALL]
[Preconditions, ., checkState, (, parent, ., isExprResult, (, ), )]
[Preconditions]
[parent, ., isExprResult, (, )]
[parent]
[grandParent, ., replaceChild, (, parent, ,, newBlock, )]
[grandParent]
[parent]
[newBlock]
[new, IllegalStateException, (, "Unexpected call site type.", )]
["Unexpected call site type."]
[newBlock]
[NodeUtil, ., getFunctionBody, (, fnNode, )]
[NodeUtil]
[fnNode]
[!, block, ., hasChildren, (, )]
[block, ., hasChildren, (, )]
[block]
[true]
[block, ., hasOneChild, (, )]
[block]
[block, ., getFirstChild, (, ), ., isReturn, (, ), &&, block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[block, ., getFirstChild, (, ), ., isReturn, (, )]
[block, ., getFirstChild, (, )]
[block]
[block, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null]
[block, ., getFirstChild, (, ), ., getFirstChild, (, )]
[block, ., getFirstChild, (, )]
[block]
[null]
[true]
[false]
[classifyCallSite, (, callNode, )]
[callNode]
[callSiteType, ==, CallSiteType, ., UNSUPPORTED]
[callSiteType]
[CallSiteType, ., UNSUPPORTED]
[CallSiteType]
[CanInlineResult, ., NO]
[CanInlineResult]
[!, allowDecomposition, &&, (, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, )]
[!, allowDecomposition]
[allowDecomposition]
[(, callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION, )]
[callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION]
[callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[callSiteType]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[CallSiteType]
[callSiteType, ==, CallSiteType, ., EXPRESSION]
[callSiteType]
[CallSiteType, ., EXPRESSION]
[CallSiteType]
[CanInlineResult, ., NO]
[CanInlineResult]
[!, callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, )]
[callMeetsBlockInliningRequirements, (, t, ,, callNode, ,, fnNode, ,, namesToAlias, )]
[t]
[callNode]
[fnNode]
[namesToAlias]
[CanInlineResult, ., NO]
[CanInlineResult]
[callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION, ||, callSiteType, ==, CallSiteType, ., EXPRESSION]
[callSiteType, ==, CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[callSiteType]
[CallSiteType, ., DECOMPOSABLE_EXPRESSION]
[CallSiteType]
[callSiteType, ==, CallSiteType, ., EXPRESSION]
[callSiteType]
[CallSiteType, ., EXPRESSION]
[CallSiteType]
[CanInlineResult, ., AFTER_PREPARATION]
[CanInlineResult]
[CanInlineResult, ., YES]
[CanInlineResult]
[this, ., assumeMinimumCapture]
[this]
[NodeUtil, ., has, (, NodeUtil, ., getFunctionBody, (, fnNode, ), ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[NodeUtil]
[NodeUtil, ., getFunctionBody, (, fnNode, )]
[NodeUtil]
[fnNode]
[new, NodeUtil, ., MatchDeclaration, (, )]
[new, NodeUtil, ., MatchShallowStatement, (, )]
[false]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[t, ., getScopeRoot, (, )]
[t]
[fnCaller, ., getLastChild, (, )]
[fnCaller]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, n, ., isName, (, ), ), {, return, n, ., getString, (, ), ., equals, (, "eval", ), ;, }, if, (, !, assumeMinimumCapture, &&, n, ., isFunction, (, ), ), {, return, n, !=, fnNode, ;, }, return, false, ;, }, }]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., equals, (, "eval", )]
[n, ., getString, (, )]
[n]
["eval"]
[!, assumeMinimumCapture, &&, n, ., isFunction, (, )]
[!, assumeMinimumCapture]
[assumeMinimumCapture]
[n, ., isFunction, (, )]
[n]
[n, !=, fnNode]
[n]
[fnNode]
[false]
[forbidTemps]
[NodeUtil, ., has, (, fnCallerBody, ,, match, ,, NodeUtil, ., MATCH_NOT_FUNCTION, )]
[NodeUtil]
[fnCallerBody]
[match]
[NodeUtil, ., MATCH_NOT_FUNCTION]
[NodeUtil]
[fnContainsVars, &&, forbidTemps]
[fnContainsVars]
[forbidTemps]
[false]
[forbidTemps]
[FunctionArgumentInjector, ., getFunctionCallParameterMap, (, fnNode, ,, callNode, ,, this, ., safeNameIdSupplier, )]
[FunctionArgumentInjector]
[fnNode]
[callNode]
[this, ., safeNameIdSupplier]
[this]
[!, args, ., isEmpty, (, )]
[args, ., isEmpty, (, )]
[args]
[hasArgs]
[Sets, ., newHashSet, (, namesToAlias, )]
[Sets]
[namesToAlias]
[FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, fnNode, ,, args, ,, allNamesToAlias, ,, compiler, ., getCodingConvention, (, ), )]
[FunctionArgumentInjector]
[fnNode]
[args]
[allNamesToAlias]
[compiler, ., getCodingConvention, (, )]
[compiler]
[!, allNamesToAlias, ., isEmpty, (, )]
[allNamesToAlias, ., isEmpty, (, )]
[allNamesToAlias]
[false]
[true]
[!, isDirectCallNodeReplacementPossible, (, fnNode, )]
[isDirectCallNodeReplacementPossible, (, fnNode, )]
[fnNode]
[CanInlineResult, ., NO]
[CanInlineResult]
[fnNode, ., getLastChild, (, )]
[fnNode]
[callNode, ., getFirstChild, (, ), ., getNext, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[!, callNode, ., getFirstChild, (, ), ., isName, (, )]
[callNode, ., getFirstChild, (, ), ., isName, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[NodeUtil, ., isFunctionObjectCall, (, callNode, )]
[NodeUtil]
[callNode]
[cArg, ==, null, ||, !, cArg, ., isThis, (, )]
[cArg, ==, null]
[cArg]
[null]
[!, cArg, ., isThis, (, )]
[cArg, ., isThis, (, )]
[cArg]
[CanInlineResult, ., NO]
[CanInlineResult]
[cArg]
[cArg, ., getNext, (, )]
[cArg]
[Preconditions, ., checkState, (, !, NodeUtil, ., isFunctionObjectApply, (, callNode, ), )]
[Preconditions]
[!, NodeUtil, ., isFunctionObjectApply, (, callNode, )]
[NodeUtil, ., isFunctionObjectApply, (, callNode, )]
[NodeUtil]
[callNode]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, )]
[NodeUtil, ., getFunctionParameters, (, fnNode, )]
[NodeUtil]
[fnNode]
[cArg, !=, null, ||, fnParam, !=, null]
[cArg, !=, null]
[cArg]
[null]
[fnParam, !=, null]
[fnParam]
[null]
[fnParam, !=, null]
[fnParam]
[null]
[cArg, !=, null]
[cArg]
[null]
[NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, ), &&, NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1]
[NodeUtil, ., mayEffectMutableState, (, cArg, ,, compiler, )]
[NodeUtil]
[cArg]
[compiler]
[NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), ), >, 1]
[NodeUtil, ., getNameReferenceCount, (, block, ,, fnParam, ., getString, (, ), )]
[NodeUtil]
[block]
[fnParam, ., getString, (, )]
[fnParam]
[1]
[CanInlineResult, ., NO]
[CanInlineResult]
[fnParam]
[fnParam, ., getNext, (, )]
[fnParam]
[cArg, !=, null]
[cArg]
[null]
[NodeUtil, ., mayHaveSideEffects, (, cArg, ,, compiler, )]
[NodeUtil]
[cArg]
[compiler]
[CanInlineResult, ., NO]
[CanInlineResult]
[cArg]
[cArg, ., getNext, (, )]
[cArg]
[CanInlineResult, ., YES]
[CanInlineResult]
[refs, ., size, (, )]
[refs]
[referenceCount, ==, 0]
[referenceCount]
[0]
[true]
[0]
[isRemovable, &&, fnModule, !=, null]
[isRemovable]
[fnModule, !=, null]
[fnModule]
[null]
[compiler, ., getModuleGraph, (, )]
[compiler]
[refs]
[ref, ., mode, ==, InliningMode, ., BLOCK]
[ref, ., mode]
[ref]
[InliningMode, ., BLOCK]
[InliningMode]
[referencesUsingBlockInlining, ++]
[referencesUsingBlockInlining]
[checkModules, &&, ref, ., module, !=, null]
[checkModules]
[ref, ., module, !=, null]
[ref, ., module]
[ref]
[null]
[ref, ., module, !=, fnModule, &&, !, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, )]
[ref, ., module, !=, fnModule]
[ref, ., module]
[ref]
[fnModule]
[!, moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, )]
[moduleGraph, ., dependsOn, (, ref, ., module, ,, fnModule, )]
[moduleGraph]
[ref, ., module]
[ref]
[fnModule]
[isRemovable]
[false]
[checkModules]
[false]
[referenceCount, -, referencesUsingBlockInlining]
[referenceCount]
[referencesUsingBlockInlining]
[referenceCount, ==, 1, &&, isRemovable, &&, referencesUsingDirectInlining, ==, 1]
[referenceCount, ==, 1, &&, isRemovable]
[referenceCount, ==, 1]
[referenceCount]
[1]
[isRemovable]
[referencesUsingDirectInlining, ==, 1]
[referencesUsingDirectInlining]
[1]
[true]
[estimateCallCost, (, fnNode, ,, referencesThis, )]
[fnNode]
[referencesThis]
[callCost, *, referenceCount]
[callCost]
[referenceCount]
[inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., DIRECT, )]
[fnNode]
[namesToAlias]
[InliningMode, ., DIRECT]
[InliningMode]
[inlineCostDelta, (, fnNode, ,, namesToAlias, ,, InliningMode, ., BLOCK, )]
[fnNode]
[namesToAlias]
[InliningMode, ., BLOCK]
[InliningMode]
[doesLowerCost, (, fnNode, ,, overallCallCost, ,, referencesUsingDirectInlining, ,, costDeltaDirect, ,, referencesUsingBlockInlining, ,, costDeltaBlock, ,, isRemovable, )]
[fnNode]
[overallCallCost]
[referencesUsingDirectInlining]
[costDeltaDirect]
[referencesUsingBlockInlining]
[costDeltaBlock]
[isRemovable]
[directInlines, +, blockInlines, -, (, removable, ?, 1, :, 0, )]
[directInlines, +, blockInlines]
[directInlines]
[blockInlines]
[(, removable, ?, 1, :, 0, )]
[removable, ?, 1, :, 0]
[removable]
[1]
[0]
[fnInstanceCount, ==, 0]
[fnInstanceCount]
[0]
[blockInlines, >, 0, &&, costDeltaBlock, >, 0]
[blockInlines, >, 0]
[blockInlines]
[0]
[costDeltaBlock, >, 0]
[costDeltaBlock]
[0]
[false]
[true]
[(, directInlines, *, costDeltaDirect, ), +, (, blockInlines, *, costDeltaBlock, )]
[(, directInlines, *, costDeltaDirect, )]
[directInlines, *, costDeltaDirect]
[directInlines]
[costDeltaDirect]
[(, blockInlines, *, costDeltaBlock, )]
[blockInlines, *, costDeltaBlock]
[blockInlines]
[costDeltaBlock]
[(, callCost, -, costDelta, ), /, fnInstanceCount]
[(, callCost, -, costDelta, )]
[callCost, -, costDelta]
[callCost]
[costDelta]
[fnInstanceCount]
[InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, ), <=, threshold]
[InlineCostEstimator, ., getCost, (, fnNode, ,, threshold, +, 1, )]
[InlineCostEstimator]
[fnNode]
[threshold, +, 1]
[threshold]
[1]
[threshold]
[NodeUtil, ., getFunctionParameters, (, fnNode, )]
[NodeUtil]
[fnNode]
[argsNode, ., getChildCount, (, )]
[argsNode]
[NAME_COST_ESTIMATE, +, PAREN_COST]
[NAME_COST_ESTIMATE]
[PAREN_COST]
[numArgs, >, 0]
[numArgs]
[0]
[callCost]
[(, numArgs, *, NAME_COST_ESTIMATE, ), +, (, (, numArgs, -, 1, ), *, COMMA_COST, )]
[(, numArgs, *, NAME_COST_ESTIMATE, )]
[numArgs, *, NAME_COST_ESTIMATE]
[numArgs]
[NAME_COST_ESTIMATE]
[(, (, numArgs, -, 1, ), *, COMMA_COST, )]
[(, numArgs, -, 1, ), *, COMMA_COST]
[(, numArgs, -, 1, )]
[numArgs, -, 1]
[numArgs]
[1]
[COMMA_COST]
[referencesThis]
[callCost]
[5, +, 5]
[5]
[5]
[callCost]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getChildCount, (, )]
[NodeUtil, ., getFunctionParameters, (, fnNode, )]
[NodeUtil]
[fnNode]
[(, paramCount, >, 1, ), ?, paramCount, -, 1, :, 0]
[(, paramCount, >, 1, )]
[paramCount, >, 1]
[paramCount]
[1]
[paramCount, -, 1]
[paramCount]
[1]
[0]
[15, +, commaCount, +, (, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, )]
[15, +, commaCount]
[15]
[commaCount]
[(, paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST, )]
[paramCount, *, InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST]
[paramCount]
[InlineCostEstimator, ., ESTIMATED_IDENTIFIER_COST]
[InlineCostEstimator]
[fnNode, ., getLastChild, (, )]
[fnNode]
[!, block, ., hasChildren, (, )]
[block, ., hasChildren, (, )]
[block]
[-, costDeltaFunctionOverhead]
[costDeltaFunctionOverhead]
[mode, ==, InliningMode, ., DIRECT]
[mode]
[InliningMode, ., DIRECT]
[InliningMode]
[-, (, costDeltaFunctionOverhead, +, 7, )]
[(, costDeltaFunctionOverhead, +, 7, )]
[costDeltaFunctionOverhead, +, 7]
[costDeltaFunctionOverhead]
[7]
[namesToAlias, ., size, (, )]
[namesToAlias]
[4]
[2]
[3]
[3]
[NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[NodeUtil]
[block]
[Token, ., RETURN]
[Token]
[new, NodeUtil, ., MatchShallowStatement, (, )]
[(, returnCount, >, 0, ), ?, returnCount, -, 1, :, 0]
[(, returnCount, >, 0, )]
[returnCount, >, 0]
[returnCount]
[0]
[returnCount, -, 1]
[returnCount]
[1]
[0]
[(, returnCount, >, 0, ), ?, INLINE_BLOCK_OVERHEAD, :, 0]
[(, returnCount, >, 0, )]
[returnCount, >, 0]
[returnCount]
[0]
[INLINE_BLOCK_OVERHEAD]
[0]
[baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD, +, aliasCount, *, PER_ALIAS_OVERHEAD]
[baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD, +, resultCount, *, PER_RETURN_RESULT_OVERHEAD]
[baseOverhead, +, returnCount, *, PER_RETURN_OVERHEAD]
[baseOverhead]
[returnCount, *, PER_RETURN_OVERHEAD]
[returnCount]
[PER_RETURN_OVERHEAD]
[resultCount, *, PER_RETURN_RESULT_OVERHEAD]
[resultCount]
[PER_RETURN_RESULT_OVERHEAD]
[aliasCount, *, PER_ALIAS_OVERHEAD]
[aliasCount]
[PER_ALIAS_OVERHEAD]
[(, overhead, -, costDeltaFunctionOverhead, )]
[overhead, -, costDeltaFunctionOverhead]
[overhead]
[costDeltaFunctionOverhead]
[Preconditions, ., checkState, (, this, ., knownConstants, ., isEmpty, (, ), )]
[Preconditions]
[this, ., knownConstants, ., isEmpty, (, )]
[this, ., knownConstants]
[this]
[this, ., knownConstants]
[this]
[knownConstants]
