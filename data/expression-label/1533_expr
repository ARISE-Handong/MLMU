[n, ., getParent, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[null]
[NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., hasChildren, (, )]
[n]
[new, VarDefinition, (, n, ,, isExtern, )]
[n]
[isExtern]
[parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isFunction, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[!, NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil]
[parent]
[new, NamedFunctionDefinition, (, parent, ,, isExtern, )]
[parent]
[isExtern]
[!, n, ., getString, (, ), ., equals, (, "", )]
[n, ., getString, (, ), ., equals, (, "", )]
[n, ., getString, (, )]
[n]
[""]
[new, FunctionExpressionDefinition, (, parent, ,, isExtern, )]
[parent]
[isExtern]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[new, AssignmentDefinition, (, parent, ,, isExtern, )]
[parent]
[isExtern]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, )]
[parent]
[n]
[n, ., getFirstChild, (, )]
[n]
[isExtern]
[parent, ., isParamList, (, )]
[parent]
[parent, ., getParent, (, )]
[parent]
[new, FunctionArgumentDefinition, (, function, ,, n, ,, isExtern, )]
[function]
[n]
[isExtern]
[null]
[n, ., getParent, (, )]
[n]
[parent, ==, null]
[parent]
[null]
[false]
[NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[NodeUtil, ., isVarDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., hasChildren, (, )]
[n]
[true]
[parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isFunction, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[!, NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil, ., isFunctionExpression, (, parent, )]
[NodeUtil]
[parent]
[true]
[!, n, ., getString, (, ), ., equals, (, "", )]
[n, ., getString, (, ), ., equals, (, "", )]
[n, ., getString, (, )]
[n]
[""]
[true]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[true]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[true]
[parent, ., isParamList, (, )]
[parent]
[true]
[false]
[this, ., isExtern]
[this]
[isExtern]
[!, isExtern]
[isExtern]
[performRemove, (, )]
[new, IllegalStateException, (, "Attempt to remove() an extern", +, " definition.", )]
["Attempt to remove() an extern", +, " definition."]
["Attempt to remove() an extern"]
[" definition."]
[isExtern]
[ImmutableSet, ., of, (, Token, ., NAME, ,, Token, ., GETPROP, ,, Token, ., GETELEM, )]
[ImmutableSet]
[Token, ., NAME]
[Token]
[Token, ., GETPROP]
[Token]
[Token, ., GETELEM]
[Token]
[inExterns]
[Preconditions, ., checkNotNull, (, lValue, )]
[Preconditions]
[lValue]
[Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), )]
[Preconditions]
[ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), )]
[ALLOWED_TYPES]
[lValue, ., getType, (, )]
[lValue]
["Unexpected lValue type %s"]
[Token, ., name, (, lValue, ., getType, (, ), )]
[Token]
[lValue, ., getType, (, )]
[lValue]
[this, ., lValue]
[this]
[lValue]
[lValue]
[null]
[lValue]
[inExterns]
[new, IllegalArgumentException, (, "Can't remove an UnknownDefinition", )]
["Can't remove an UnknownDefinition"]
[lValue]
[true]
[new, IllegalArgumentException, (, "Can't remove external name-only definition", )]
["Can't remove external name-only definition"]
[argumentName]
[inExterns]
[Preconditions, ., checkArgument, (, function, ., isFunction, (, ), )]
[Preconditions]
[function, ., isFunction, (, )]
[function]
[Preconditions, ., checkArgument, (, argumentName, ., isName, (, ), )]
[Preconditions]
[argumentName, ., isName, (, )]
[argumentName]
[new, IllegalArgumentException, (, "Can't remove a FunctionArgumentDefinition", )]
["Can't remove a FunctionArgumentDefinition"]
[inExterns]
[Preconditions, ., checkArgument, (, node, ., isFunction, (, ), )]
[Preconditions]
[node, ., isFunction, (, )]
[node]
[function]
[node]
[function, ., getFirstChild, (, )]
[function]
[function]
[node]
[inExterns]
[function, ., detachFromParent, (, )]
[function]
[node]
[inExterns]
[Preconditions, ., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), )]
[Preconditions]
[NodeUtil, ., isFunctionExpression, (, node, )]
[NodeUtil]
[node]
[function, ., replaceChild, (, function, ., getFirstChild, (, ), ,, IR, ., name, (, "", ), )]
[function]
[function, ., getFirstChild, (, )]
[function]
[IR, ., name, (, "", )]
[IR]
[""]
[inExterns]
[Preconditions, ., checkArgument, (, node, ., isAssign, (, ), )]
[Preconditions]
[node, ., isAssign, (, )]
[node]
[assignment]
[node]
[assignment, ., getParent, (, )]
[assignment]
[assignment, ., getLastChild, (, )]
[assignment]
[assignment, ., removeChild, (, last, )]
[assignment]
[last]
[parent, ., replaceChild, (, assignment, ,, last, )]
[parent]
[assignment]
[last]
[assignment, ., getFirstChild, (, )]
[assignment]
[assignment, ., getLastChild, (, )]
[assignment]
[isExtern]
[this, ., literal]
[this]
[lit]
[this, ., name]
[this]
[name]
[this, ., value]
[this]
[value]
[literal, ., removeChild, (, name, )]
[literal]
[name]
[name, ., getType, (, )]
[name]
[Token, ., SETTER_DEF]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., STRING_KEY]
[Token]
[IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (, name, ., getString, (, ), ), )]
[IR]
[IR, ., objectlit, (, )]
[IR]
[IR, ., string, (, name, ., getString, (, ), )]
[IR]
[name, ., getString, (, )]
[name]
[new, IllegalStateException, (, "unexpected", )]
["unexpected"]
[value]
[inExterns]
[Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), )]
[Preconditions]
[NodeUtil, ., isVarDeclaration, (, node, )]
[NodeUtil]
[node]
[Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), )]
[Preconditions]
[node, ., hasChildren, (, )]
[node]
["VAR Declaration of %sshould be assigned a value."]
[node, ., getString, (, )]
[node]
[name]
[node]
[name, ., getParent, (, )]
[name]
[Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", )]
[Preconditions]
[var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, )]
[var, ., getFirstChild, (, )]
[var]
[var, ., getLastChild, (, )]
[var]
["AST should be normalized first"]
[var, ., getParent, (, )]
[var]
[name, ., removeFirstChild, (, )]
[name]
[Preconditions, ., checkState, (, !, parent, ., isFor, (, ), )]
[Preconditions]
[!, parent, ., isFor, (, )]
[parent, ., isFor, (, )]
[parent]
[parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), )]
[parent]
[var]
[NodeUtil, ., newExpr, (, rValue, )]
[NodeUtil]
[rValue]
[name]
[name, ., getFirstChild, (, )]
[name]
