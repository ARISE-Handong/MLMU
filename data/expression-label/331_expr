[SymbolType, ., PROPERTY]
[SymbolType]
[SymbolType, ., VAR]
[SymbolType]
[ImmutableSet, ., of, (, "length", ,, "toString", ,, "valueOf", )]
[ImmutableSet]
["length"]
["toString"]
["valueOf"]
[LinkedDirectedGraph, ., createWithoutAnnotations, (, )]
[LinkedDirectedGraph]
[new, NameInfo, (, "[global]", )]
["[global]"]
[new, NameInfo, (, "[extern]", )]
["[extern]"]
[new, NameInfo, (, "[anonymous]", )]
["[anonymous]"]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., compiler]
[this]
[compiler]
[this, ., moduleGraph]
[this]
[moduleGraph]
[this, ., canModifyExterns]
[this]
[canModifyExterns]
[this, ., anchorUnusedVars]
[this]
[anchorUnusedVars]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[firstModule]
[moduleGraph, ., getRootModule, (, )]
[moduleGraph]
[firstModule]
[null]
[globalNode, ., markReference, (, null, )]
[globalNode]
[null]
[externNode, ., markReference, (, null, )]
[externNode]
[null]
[symbolGraph, ., createNode, (, globalNode, )]
[symbolGraph]
[globalNode]
[symbolGraph, ., createNode, (, externNode, )]
[symbolGraph]
[externNode]
[IMPLICITLY_USED_PROPERTIES]
[getNameInfoForName, (, property, ,, PROPERTY, )]
[property]
[PROPERTY]
[moduleGraph, ==, null]
[moduleGraph]
[null]
[symbolGraph, ., connect, (, externNode, ,, null, ,, nameInfo, )]
[symbolGraph]
[externNode]
[null]
[nameInfo]
[moduleGraph, ., getAllModules, (, )]
[moduleGraph]
[symbolGraph, ., connect, (, externNode, ,, module, ,, nameInfo, )]
[symbolGraph]
[externNode]
[module]
[nameInfo]
[!, canModifyExterns]
[canModifyExterns]
[NodeTraversal, ., traverse, (, compiler, ,, externRoot, ,, new, ProcessExternProperties, (, ), )]
[NodeTraversal]
[compiler]
[externRoot]
[new, ProcessExternProperties, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, ProcessProperties, (, )]
[FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), )]
[FixedPointGraphTraversal]
[new, PropagateReferences, (, )]
[t, ., computeFixedPoint, (, symbolGraph, ,, Sets, ., newHashSet, (, externNode, ,, globalNode, ), )]
[t]
[symbolGraph]
[Sets, ., newHashSet, (, externNode, ,, globalNode, )]
[Sets]
[externNode]
[globalNode]
[Lists, ., newArrayList, (, propertyNameInfo, ., values, (, ), )]
[Lists]
[propertyNameInfo, ., values, (, )]
[propertyNameInfo]
[result, ., addAll, (, varNameInfo, ., values, (, ), )]
[result]
[varNameInfo, ., values, (, )]
[varNameInfo]
[result]
[type, ==, PROPERTY, ?, propertyNameInfo, :, varNameInfo]
[type, ==, PROPERTY]
[type]
[PROPERTY]
[propertyNameInfo]
[varNameInfo]
[map, ., containsKey, (, name, )]
[map]
[name]
[map, ., get, (, name, )]
[map]
[name]
[new, NameInfo, (, name, )]
[name]
[map, ., put, (, name, ,, nameInfo, )]
[map]
[name]
[nameInfo]
[symbolGraph, ., createNode, (, nameInfo, )]
[symbolGraph]
[nameInfo]
[nameInfo]
[new, Stack, <, NameContext, >, (, )]
[t, ., getCurrentNode, (, )]
[t]
[n, ., isFunction, (, )]
[n]
[getPrototypePropertyNameFromRValue, (, n, )]
[n]
[propName, !=, null]
[propName]
[null]
[symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (, ), ), )]
[symbolStack]
[new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, t, ., getScope, (, ), )]
[getNameInfoForName, (, propName, ,, PROPERTY, )]
[propName]
[PROPERTY]
[t, ., getScope, (, )]
[t]
[isGlobalFunctionDeclaration, (, t, ,, n, )]
[t]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., isName, (, ), ?, parent, ., getString, (, ), :, n, ., getFirstChild, (, ), ., getString, (, )]
[parent, ., isName, (, )]
[parent]
[parent, ., getString, (, )]
[parent]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, ), ), )]
[symbolStack]
[new, NameContext, (, getNameInfoForName, (, name, ,, VAR, ), ,, t, ., getScope, (, ), )]
[getNameInfoForName, (, name, ,, VAR, )]
[name]
[VAR]
[t, ., getScope, (, )]
[t]
[symbolStack, ., push, (, new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), ), )]
[symbolStack]
[new, NameContext, (, anonymousNode, ,, t, ., getScope, (, ), )]
[anonymousNode]
[t, ., getScope, (, )]
[t]
[Preconditions, ., checkState, (, t, ., inGlobalScope, (, ), )]
[Preconditions]
[t, ., inGlobalScope, (, )]
[t]
[symbolStack, ., push, (, new, NameContext, (, globalNode, ,, t, ., getScope, (, ), ), )]
[symbolStack]
[new, NameContext, (, globalNode, ,, t, ., getScope, (, ), )]
[globalNode]
[t, ., getScope, (, )]
[t]
[symbolStack, ., pop, (, )]
[symbolStack]
[processNonFunctionPrototypeAssign, (, n, ,, parent, )]
[n]
[parent]
[propName, !=, null]
[propName]
[null]
[symbolStack, ., push, (, new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, ), )]
[symbolStack]
[new, NameContext, (, getNameInfoForName, (, propName, ,, PROPERTY, ), ,, null, )]
[getNameInfoForName, (, propName, ,, PROPERTY, )]
[propName]
[PROPERTY]
[null]
[true]
[n, ., isGetProp, (, )]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., isQualifiedName, (, )]
[n]
[propName, ., equals, (, "prototype", )]
[propName]
["prototype"]
[processPrototypeRef, (, t, ,, n, )]
[t]
[n]
[compiler, ., getCodingConvention, (, ), ., isExported, (, propName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[propName]
[addGlobalUseOfSymbol, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, )]
[propName]
[t, ., getModule, (, )]
[t]
[PROPERTY]
[n, ., getParent, (, ), ., isAssign, (, ), &&, n, ., getNext, (, ), !=, null]
[n, ., getParent, (, ), ., isAssign, (, )]
[n, ., getParent, (, )]
[n]
[n, ., getNext, (, ), !=, null]
[n, ., getNext, (, )]
[n]
[null]
[getPrototypePropertyNameFromRValue, (, n, )]
[n]
[rValueName, !=, null]
[rValueName]
[null]
[addSymbolUse, (, propName, ,, t, ., getModule, (, ), ,, PROPERTY, )]
[propName]
[t, ., getModule, (, )]
[t]
[PROPERTY]
[n, ., isObjectLit, (, )]
[n]
[NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[NodeUtil]
[NodeUtil, ., getBestLValue, (, n, )]
[NodeUtil]
[n]
[lValueName, !=, null, &&, lValueName, ., endsWith, (, ".prototype", )]
[lValueName, !=, null]
[lValueName]
[null]
[lValueName, ., endsWith, (, ".prototype", )]
[lValueName]
[".prototype"]
[n, ., getFirstChild, (, )]
[n]
[propNameNode, !=, null]
[propNameNode]
[null]
[propNameNode]
[propNameNode, ., getNext, (, )]
[propNameNode]
[!, propNameNode, ., isQuotedString, (, )]
[propNameNode, ., isQuotedString, (, )]
[propNameNode]
[addSymbolUse, (, propNameNode, ., getString, (, ), ,, t, ., getModule, (, ), ,, PROPERTY, )]
[propNameNode, ., getString, (, )]
[propNameNode]
[t, ., getModule, (, )]
[t]
[PROPERTY]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[t, ., getScope, (, ), ., getVar, (, name, )]
[t, ., getScope, (, )]
[t]
[name]
[var, !=, null]
[var]
[null]
[var, ., isGlobal, (, )]
[var]
[var, ., getInitialValue, (, ), !=, null, &&, var, ., getInitialValue, (, ), ., isFunction, (, )]
[var, ., getInitialValue, (, ), !=, null]
[var, ., getInitialValue, (, )]
[var]
[null]
[var, ., getInitialValue, (, ), ., isFunction, (, )]
[var, ., getInitialValue, (, )]
[var]
[t, ., inGlobalScope, (, )]
[t]
[!, processGlobalFunctionDeclaration, (, t, ,, n, ,, var, )]
[processGlobalFunctionDeclaration, (, t, ,, n, ,, var, )]
[t]
[n]
[var]
[addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, )]
[name]
[t, ., getModule, (, )]
[t]
[VAR]
[addSymbolUse, (, name, ,, t, ., getModule, (, ), ,, VAR, )]
[name]
[t, ., getModule, (, )]
[t]
[VAR]
[var, ., getScope, (, ), !=, t, ., getScope, (, )]
[var, ., getScope, (, )]
[var]
[t, ., getScope, (, )]
[t]
[symbolStack, ., size, (, ), -, 1]
[symbolStack, ., size, (, )]
[symbolStack]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[symbolStack, ., get, (, i, )]
[symbolStack]
[i]
[context, ., scope, ==, var, ., getScope, (, )]
[context, ., scope]
[context]
[var, ., getScope, (, )]
[var]
[context, ., name, ., readClosureVariables]
[context, ., name]
[context]
[true]
[processNonFunctionPrototypeAssign, (, n, ,, parent, ), !=, null]
[processNonFunctionPrototypeAssign, (, n, ,, parent, )]
[n]
[parent]
[null]
[symbolStack, ., pop, (, )]
[symbolStack]
[getNameInfoForName, (, name, ,, type, )]
[name]
[type]
[null]
[symbolStack, ., size, (, ), -, 1]
[symbolStack, ., size, (, )]
[symbolStack]
[1]
[i, >=, 0]
[i]
[0]
[i, --]
[i]
[def]
[symbolStack, ., get, (, i, ), ., name]
[symbolStack, ., get, (, i, )]
[symbolStack]
[i]
[def, !=, anonymousNode]
[def]
[anonymousNode]
[!, def, ., equals, (, info, )]
[def, ., equals, (, info, )]
[def]
[info]
[symbolGraph, ., connect, (, def, ,, module, ,, info, )]
[symbolGraph]
[def]
[module]
[info]
[isAssignRValue, (, n, ,, parent, ), &&, !, n, ., isFunction, (, )]
[isAssignRValue, (, n, ,, parent, )]
[n]
[parent]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[getPrototypePropertyNameFromRValue, (, n, )]
[n]
[null]
[t, ., getScope, (, )]
[t]
[!, (, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, )]
[(, s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n, )]
[s, ., isGlobal, (, ), ||, s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n]
[s, ., isGlobal, (, )]
[s]
[s, ., getDepth, (, ), ==, 1, &&, s, ., getRootNode, (, ), ==, n]
[s, ., getDepth, (, ), ==, 1]
[s, ., getDepth, (, )]
[s]
[1]
[s, ., getRootNode, (, ), ==, n]
[s, ., getRootNode, (, )]
[s]
[n]
[false]
[NodeUtil, ., isFunctionDeclaration, (, n, ), ||, n, ., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (, )]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., isFunction, (, ), &&, n, ., getParent, (, ), ., isName, (, )]
[n, ., isFunction, (, )]
[n]
[n, ., getParent, (, ), ., isName, (, )]
[n, ., getParent, (, )]
[n]
[parent, !=, null, &&, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), !=, n]
[parent, !=, null, &&, parent, ., isAssign, (, )]
[parent, !=, null]
[parent]
[null]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), !=, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[NodeUtil, ., getBestLValue, (, rValue, )]
[NodeUtil]
[rValue]
[lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null, ||, !, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), )]
[lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null, ||, lValue, ., getParent, (, ), ., getParent, (, ), ==, null]
[lValue, ==, null, ||, lValue, ., getParent, (, ), ==, null]
[lValue, ==, null]
[lValue]
[null]
[lValue, ., getParent, (, ), ==, null]
[lValue, ., getParent, (, )]
[lValue]
[null]
[lValue, ., getParent, (, ), ., getParent, (, ), ==, null]
[lValue, ., getParent, (, ), ., getParent, (, )]
[lValue, ., getParent, (, )]
[lValue]
[null]
[!, (, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), )]
[(, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), ), )]
[NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ||, NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), )]
[NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[NodeUtil]
[lValue]
[lValue, ., getParent, (, )]
[lValue]
[NodeUtil, ., isExprAssign, (, lValue, ., getParent, (, ), ., getParent, (, ), )]
[NodeUtil]
[lValue, ., getParent, (, ), ., getParent, (, )]
[lValue, ., getParent, (, )]
[lValue]
[null]
[NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rValue, ), )]
[NodeUtil]
[NodeUtil, ., getBestLValue, (, rValue, )]
[NodeUtil]
[rValue]
[lValueName, ==, null]
[lValueName]
[null]
[null]
[lValueName, ., lastIndexOf, (, '.', )]
[lValueName]
['.']
[lastDot, ==, -, 1]
[lastDot]
[-, 1]
[1]
[null]
[lValueName, ., substring, (, 0, ,, lastDot, )]
[lValueName]
[0]
[lastDot]
[!, firstPart, ., endsWith, (, ".prototype", )]
[firstPart, ., endsWith, (, ".prototype", )]
[firstPart]
[".prototype"]
[null]
[lValueName, ., substring, (, lastDot, +, 1, )]
[lValueName]
[lastDot, +, 1]
[lastDot]
[1]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[nameNode, ., getParent, (, )]
[nameNode]
[isGlobalFunctionDeclaration, (, t, ,, parent, ), ||, firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, )]
[isGlobalFunctionDeclaration, (, t, ,, parent, )]
[t]
[parent]
[firstChild, !=, null, &&, isGlobalFunctionDeclaration, (, t, ,, firstChild, )]
[firstChild, !=, null]
[firstChild]
[null]
[isGlobalFunctionDeclaration, (, t, ,, firstChild, )]
[t]
[firstChild]
[nameNode, ., getString, (, )]
[nameNode]
[getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, ), ., add, (, new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), ), )]
[getNameInfoForName, (, name, ,, VAR, ), ., getDeclarations, (, )]
[getNameInfoForName, (, name, ,, VAR, )]
[name]
[VAR]
[new, GlobalFunction, (, nameNode, ,, v, ,, t, ., getModule, (, ), )]
[nameNode]
[v]
[t, ., getModule, (, )]
[t]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ||, anchorUnusedVars]
[compiler, ., getCodingConvention, (, ), ., isExported, (, name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[anchorUnusedVars]
[addGlobalUseOfSymbol, (, name, ,, t, ., getModule, (, ), ,, VAR, )]
[name]
[t, ., getModule, (, )]
[t]
[VAR]
[true]
[false]
[NodeUtil, ., getRootOfQualifiedName, (, ref, )]
[NodeUtil]
[ref]
[ref, ., getParent, (, )]
[ref]
[n, ., getType, (, )]
[n]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, ., getParent, (, )]
[parent]
[dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, ), &&, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, )]
[dest, ., isString, (, ), &&, NodeUtil, ., isExprAssign, (, grandParent, )]
[dest, ., isString, (, )]
[dest]
[NodeUtil, ., isExprAssign, (, grandParent, )]
[NodeUtil]
[grandParent]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[dest, ., getString, (, )]
[dest]
[new, AssignmentProperty, (, grandParent, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), )]
[grandParent]
[maybeGetVar, (, t, ,, root, )]
[t]
[root]
[t, ., getModule, (, )]
[t]
[getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, )]
[getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, )]
[getNameInfoForName, (, name, ,, PROPERTY, )]
[name]
[PROPERTY]
[prop]
[true]
[Token, ., ASSIGN]
[Token]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[map, ., isObjectLit, (, )]
[map]
[map, ., getFirstChild, (, )]
[map]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[key, ., getString, (, )]
[key]
[new, LiteralProperty, (, key, ,, key, ., getFirstChild, (, ), ,, map, ,, n, ,, maybeGetVar, (, t, ,, root, ), ,, t, ., getModule, (, ), )]
[key]
[key, ., getFirstChild, (, )]
[key]
[map]
[n]
[maybeGetVar, (, t, ,, root, )]
[t]
[root]
[t, ., getModule, (, )]
[t]
[getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, ), ., add, (, prop, )]
[getNameInfoForName, (, name, ,, PROPERTY, ), ., getDeclarations, (, )]
[getNameInfoForName, (, name, ,, PROPERTY, )]
[name]
[PROPERTY]
[prop]
[true]
[false]
[maybeName, ., isName, (, ), ?, t, ., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), ), :, null]
[maybeName, ., isName, (, )]
[maybeName]
[t, ., getScope, (, ), ., getVar, (, maybeName, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[maybeName, ., getString, (, )]
[maybeName]
[null]
[symbolGraph, ., connect, (, globalNode, ,, module, ,, getNameInfoForName, (, name, ,, type, ), )]
[symbolGraph]
[globalNode]
[module]
[getNameInfoForName, (, name, ,, type, )]
[name]
[type]
[n, ., isGetProp, (, )]
[n]
[symbolGraph, ., connect, (, externNode, ,, firstModule, ,, getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,, PROPERTY, ), )]
[symbolGraph]
[externNode]
[firstModule]
[getNameInfoForName, (, n, ., getLastChild, (, ), ., getString, (, ), ,, PROPERTY, )]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[PROPERTY]
[start, ., isReferenced, (, )]
[start]
[start, ., getDeepestCommonModuleRef, (, )]
[start]
[startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, )]
[startModule, !=, null]
[startModule]
[null]
[moduleGraph, ., dependsOn, (, startModule, ,, edge, )]
[moduleGraph]
[startModule]
[edge]
[dest, ., markReference, (, startModule, )]
[dest]
[startModule]
[dest, ., markReference, (, edge, )]
[dest]
[edge]
[false]
[nameNode, ., getParent, (, )]
[nameNode]
[Preconditions, ., checkState, (, parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, ), )]
[Preconditions]
[parent, ., isVar, (, ), ||, NodeUtil, ., isFunctionDeclaration, (, parent, )]
[parent, ., isVar, (, )]
[parent]
[NodeUtil, ., isFunctionDeclaration, (, parent, )]
[NodeUtil]
[parent]
[this, ., nameNode]
[this]
[nameNode]
[this, ., var]
[this]
[var]
[this, ., module]
[this]
[module]
[var]
[nameNode, ., getParent, (, )]
[nameNode]
[parent, ., isFunction, (, ), ||, parent, ., hasOneChild, (, )]
[parent, ., isFunction, (, )]
[parent]
[parent, ., hasOneChild, (, )]
[parent]
[NodeUtil, ., removeChild, (, parent, ., getParent, (, ), ,, parent, )]
[NodeUtil]
[parent, ., getParent, (, )]
[parent]
[parent]
[Preconditions, ., checkState, (, parent, ., isVar, (, ), )]
[Preconditions]
[parent, ., isVar, (, )]
[parent]
[parent, ., removeChild, (, nameNode, )]
[parent]
[nameNode]
[module]
[nameNode, ., getParent, (, )]
[nameNode]
[parent, ., isFunction, (, )]
[parent]
[parent]
[nameNode, ., getChildAtIndex, (, 1, )]
[nameNode]
[1]
[this, ., exprNode]
[this]
[node]
[this, ., rootVar]
[this]
[rootVar]
[this, ., module]
[this]
[module]
[rootVar]
[NodeUtil, ., removeChild, (, exprNode, ., getParent, (, ), ,, exprNode, )]
[NodeUtil]
[exprNode, ., getParent, (, )]
[exprNode]
[exprNode]
[getAssignNode, (, ), ., getFirstChild, (, ), ., getFirstChild, (, )]
[getAssignNode, (, ), ., getFirstChild, (, )]
[getAssignNode, (, )]
[getAssignNode, (, ), ., getLastChild, (, )]
[getAssignNode, (, )]
[exprNode, ., getFirstChild, (, )]
[exprNode]
[module]
[this, ., key]
[this]
[key]
[this, ., value]
[this]
[value]
[this, ., map]
[this]
[map]
[this, ., assign]
[this]
[assign]
[this, ., rootVar]
[this]
[rootVar]
[this, ., module]
[this]
[module]
[rootVar]
[map, ., removeChild, (, key, )]
[map]
[key]
[assign, ., getFirstChild, (, )]
[assign]
[value]
[module]
[this, ., name]
[this]
[name]
[this, ., scope]
[this]
[scope]
[false]
[new, ArrayDeque, <, Symbol, >, (, )]
[null]
[false]
[this, ., name]
[this]
[name]
[name]
[referenced]
[readClosureVariables]
[false]
[!, referenced]
[referenced]
[referenced]
[true]
[hasChanged]
[true]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[deepestCommonModuleRef]
[deepestCommonModuleRef, ==, null]
[deepestCommonModuleRef]
[null]
[deepestCommonModuleRef]
[module]
[deepestCommonModuleRef]
[moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, )]
[moduleGraph]
[deepestCommonModuleRef]
[module]
[originalDeepestCommon, !=, deepestCommonModuleRef]
[originalDeepestCommon]
[deepestCommonModuleRef]
[hasChanged]
[true]
[hasChanged]
[deepestCommonModuleRef]
[declarations]
