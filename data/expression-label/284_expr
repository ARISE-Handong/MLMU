[1L]
[29]
[30]
[32]
[36]
[37]
[38]
[39]
[40]
[42]
[43]
[46]
[47]
[48]
[49]
[50]
[51]
[52]
[53]
[54]
[55]
[55]
[0x1]
[0x2]
[propType]
[VAR_ARGS_NAME]
["var_args_name"]
[JSDOC_INFO_PROP]
["jsdoc_info"]
[INCRDECR_PROP]
["incrdecr"]
[QUOTED_PROP]
["quoted"]
[OPT_ARG_NAME]
["opt_arg"]
[SYNTHETIC_BLOCK_PROP]
["synthetic"]
[EMPTY_BLOCK]
["empty_block"]
[ORIGINALNAME_PROP]
["originalname"]
[SIDE_EFFECT_FLAGS]
["side_effect_flags"]
[IS_CONSTANT_NAME]
["is_constant_name"]
[IS_NAMESPACE]
["is_namespace"]
[IS_DISPATCHER]
["is_dispatcher"]
[DIRECTIVES]
["directives"]
[DIRECT_EVAL]
["direct_eval"]
[FREE_CALL]
["free_call"]
[STATIC_SOURCE_FILE]
["source_file"]
[INPUT_ID]
["input_id"]
[LENGTH]
["length"]
[SLASH_V]
["slash_v"]
[INFERRED_FUNCTION]
["inferred"]
[new, IllegalStateException, (, "unexpect prop id ", +, propType, )]
["unexpect prop id ", +, propType]
["unexpect prop id "]
[propType]
[1L]
[Token, ., NUMBER]
[Token]
[this, ., number]
[this]
[number]
[Token, ., NUMBER]
[Token]
[lineno]
[charno]
[this, ., number]
[this]
[number]
[this, ., number]
[this]
[this, ., number]
[this]
[d]
[super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, )]
[super]
[node]
[compareJsType]
[recurse]
[equivalent]
[getDouble, (, )]
[(, (, NumberNode, ), node, ), ., getDouble, (, )]
[(, (, NumberNode, ), node, )]
[(, NumberNode, ), node]
[node]
[thisValue, ==, thatValue]
[thisValue]
[thatValue]
[(, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, )]
[(, thisValue, !=, 0.0, )]
[thisValue, !=, 0.0]
[thisValue]
[0.0]
[(, 1, /, thisValue, ==, 1, /, thatValue, )]
[1, /, thisValue, ==, 1, /, thatValue]
[1, /, thisValue]
[1]
[thisValue]
[1, /, thatValue]
[1]
[thatValue]
[false]
[1L]
[type]
[null, ==, str]
[null]
[str]
[new, IllegalArgumentException, (, "StringNode: str is null", )]
["StringNode: str is null"]
[this, ., str]
[this]
[str]
[type]
[lineno]
[charno]
[null, ==, str]
[null]
[str]
[new, IllegalArgumentException, (, "StringNode: str is null", )]
["StringNode: str is null"]
[this, ., str]
[this]
[str]
[this, ., str]
[this]
[null, ==, str]
[null]
[str]
[new, IllegalArgumentException, (, "StringNode: str is null", )]
["StringNode: str is null"]
[this, ., str]
[this]
[str]
[(, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, ), )]
[super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, )]
[super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, )]
[super]
[node]
[compareJsType]
[recurse]
[this, ., str, ., equals, (, (, (, StringNode, ), node, ), ., str, )]
[this, ., str]
[this]
[(, (, StringNode, ), node, ), ., str]
[(, (, StringNode, ), node, )]
[(, StringNode, ), node]
[node]
[getBooleanProp, (, QUOTED_PROP, )]
[QUOTED_PROP]
[putBooleanProp, (, QUOTED_PROP, ,, true, )]
[QUOTED_PROP]
[true]
[1L]
[this, ., propType]
[this]
[propType]
[this, ., next]
[this]
[next]
[propType]
[next]
[1L]
[propType]
[next]
[this, ., objectValue]
[this]
[objectValue]
[new, UnsupportedOperationException, (, )]
[objectValue]
[objectValue, ==, null, ?, "null", :, objectValue, ., toString, (, )]
[objectValue, ==, null]
[objectValue]
[null]
["null"]
[objectValue, ., toString, (, )]
[objectValue]
[new, ObjectPropListItem, (, getType, (, ), ,, objectValue, ,, next, )]
[getType, (, )]
[objectValue]
[next]
[1L]
[propType]
[next]
[this, ., intValue]
[this]
[intValue]
[intValue]
[new, UnsupportedOperationException, (, )]
[String, ., valueOf, (, intValue, )]
[String]
[intValue]
[new, IntPropListItem, (, getType, (, ), ,, intValue, ,, next, )]
[getType, (, )]
[intValue]
[next]
[type]
[nodeType]
[parent]
[null]
[sourcePosition]
[-, 1]
[1]
[Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", )]
[Preconditions]
[child, ., parent, ==, null]
[child, ., parent]
[child]
[null]
["new child has existing parent"]
[Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", )]
[Preconditions]
[child, ., next, ==, null]
[child, ., next]
[child]
[null]
["new child has existing sibling"]
[type]
[nodeType]
[parent]
[null]
[first]
[last]
[child]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[this]
[sourcePosition]
[-, 1]
[1]
[Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", )]
[Preconditions]
[left, ., parent, ==, null]
[left, ., parent]
[left]
[null]
["first new child has existing parent"]
[Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", )]
[Preconditions]
[left, ., next, ==, null]
[left, ., next]
[left]
[null]
["first new child has existing sibling"]
[Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", )]
[Preconditions]
[right, ., parent, ==, null]
[right, ., parent]
[right]
[null]
["second new child has existing parent"]
[Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", )]
[Preconditions]
[right, ., next, ==, null]
[right, ., next]
[right]
[null]
["second new child has existing sibling"]
[type]
[nodeType]
[parent]
[null]
[first]
[left]
[last]
[right]
[left, ., next]
[left]
[right]
[left, ., parent]
[left]
[this]
[right, ., next]
[right]
[null]
[right, ., parent]
[right]
[this]
[sourcePosition]
[-, 1]
[1]
[Preconditions, ., checkArgument, (, left, ., parent, ==, null, )]
[Preconditions]
[left, ., parent, ==, null]
[left, ., parent]
[left]
[null]
[Preconditions, ., checkArgument, (, left, ., next, ==, null, )]
[Preconditions]
[left, ., next, ==, null]
[left, ., next]
[left]
[null]
[Preconditions, ., checkArgument, (, mid, ., parent, ==, null, )]
[Preconditions]
[mid, ., parent, ==, null]
[mid, ., parent]
[mid]
[null]
[Preconditions, ., checkArgument, (, mid, ., next, ==, null, )]
[Preconditions]
[mid, ., next, ==, null]
[mid, ., next]
[mid]
[null]
[Preconditions, ., checkArgument, (, right, ., parent, ==, null, )]
[Preconditions]
[right, ., parent, ==, null]
[right, ., parent]
[right]
[null]
[Preconditions, ., checkArgument, (, right, ., next, ==, null, )]
[Preconditions]
[right, ., next, ==, null]
[right, ., next]
[right]
[null]
[type]
[nodeType]
[parent]
[null]
[first]
[left]
[last]
[right]
[left, ., next]
[left]
[mid]
[left, ., parent]
[left]
[this]
[mid, ., next]
[mid]
[right]
[mid, ., parent]
[mid]
[this]
[right, ., next]
[right]
[null]
[right, ., parent]
[right]
[this]
[sourcePosition]
[-, 1]
[1]
[Preconditions, ., checkArgument, (, left, ., parent, ==, null, )]
[Preconditions]
[left, ., parent, ==, null]
[left, ., parent]
[left]
[null]
[Preconditions, ., checkArgument, (, left, ., next, ==, null, )]
[Preconditions]
[left, ., next, ==, null]
[left, ., next]
[left]
[null]
[Preconditions, ., checkArgument, (, mid, ., parent, ==, null, )]
[Preconditions]
[mid, ., parent, ==, null]
[mid, ., parent]
[mid]
[null]
[Preconditions, ., checkArgument, (, mid, ., next, ==, null, )]
[Preconditions]
[mid, ., next, ==, null]
[mid, ., next]
[mid]
[null]
[Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, )]
[Preconditions]
[mid2, ., parent, ==, null]
[mid2, ., parent]
[mid2]
[null]
[Preconditions, ., checkArgument, (, mid2, ., next, ==, null, )]
[Preconditions]
[mid2, ., next, ==, null]
[mid2, ., next]
[mid2]
[null]
[Preconditions, ., checkArgument, (, right, ., parent, ==, null, )]
[Preconditions]
[right, ., parent, ==, null]
[right, ., parent]
[right]
[null]
[Preconditions, ., checkArgument, (, right, ., next, ==, null, )]
[Preconditions]
[right, ., next, ==, null]
[right, ., next]
[right]
[null]
[type]
[nodeType]
[parent]
[null]
[first]
[left]
[last]
[right]
[left, ., next]
[left]
[mid]
[left, ., parent]
[left]
[this]
[mid, ., next]
[mid]
[mid2]
[mid, ., parent]
[mid]
[this]
[mid2, ., next]
[mid2]
[right]
[mid2, ., parent]
[mid2]
[this]
[right, ., next]
[right]
[null]
[right, ., parent]
[right]
[this]
[sourcePosition]
[-, 1]
[1]
[type]
[nodeType]
[parent]
[null]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[nodeType]
[child]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[nodeType]
[left]
[right]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[nodeType]
[left]
[mid]
[right]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[nodeType]
[left]
[mid]
[mid2]
[right]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[nodeType]
[children]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[this, ., type]
[this]
[nodeType]
[parent]
[null]
[children, ., length, !=, 0]
[children, ., length]
[children]
[0]
[this, ., first]
[this]
[children, [, 0, ]]
[children]
[0]
[this, ., last]
[this]
[children, [, children, ., length, -, 1, ]]
[children]
[children, ., length, -, 1]
[children, ., length]
[children]
[1]
[1]
[i, <, children, ., length]
[i]
[children, ., length]
[children]
[i, ++]
[i]
[null, !=, children, [, i, -, 1, ], ., next]
[null]
[children, [, i, -, 1, ], ., next]
[children, [, i, -, 1, ]]
[children]
[i, -, 1]
[i]
[1]
[new, IllegalArgumentException, (, "duplicate child", )]
["duplicate child"]
[children, [, i, -, 1, ], ., next]
[children, [, i, -, 1, ]]
[children]
[i, -, 1]
[i]
[1]
[children, [, i, ]]
[children]
[i]
[Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, )]
[Preconditions]
[children, [, i, -, 1, ], ., parent, ==, null]
[children, [, i, -, 1, ], ., parent]
[children, [, i, -, 1, ]]
[children]
[i, -, 1]
[i]
[1]
[null]
[children, [, i, -, 1, ], ., parent]
[children, [, i, -, 1, ]]
[children]
[i, -, 1]
[i]
[1]
[this]
[Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, )]
[Preconditions]
[children, [, children, ., length, -, 1, ], ., parent, ==, null]
[children, [, children, ., length, -, 1, ], ., parent]
[children, [, children, ., length, -, 1, ]]
[children]
[children, ., length, -, 1]
[children, ., length]
[children]
[1]
[null]
[children, [, children, ., length, -, 1, ], ., parent]
[children, [, children, ., length, -, 1, ]]
[children]
[children, ., length, -, 1]
[children, ., length]
[children]
[1]
[this]
[null, !=, this, ., last, ., next]
[null]
[this, ., last, ., next]
[this, ., last]
[this]
[new, IllegalArgumentException, (, "duplicate child", )]
["duplicate child"]
[new, NumberNode, (, number, )]
[number]
[new, NumberNode, (, number, ,, lineno, ,, charno, )]
[number]
[lineno]
[charno]
[new, StringNode, (, Token, ., STRING, ,, str, )]
[Token, ., STRING]
[Token]
[str]
[new, StringNode, (, type, ,, str, )]
[type]
[str]
[new, StringNode, (, Token, ., STRING, ,, str, ,, lineno, ,, charno, )]
[Token, ., STRING]
[Token]
[str]
[lineno]
[charno]
[new, StringNode, (, type, ,, str, ,, lineno, ,, charno, )]
[type]
[str]
[lineno]
[charno]
[type]
[this, ., type]
[this]
[type]
[first, !=, null]
[first]
[null]
[first]
[last]
[next]
[child, ==, first]
[child]
[first]
[null]
[first]
[n, ., next, !=, child]
[n, ., next]
[n]
[child]
[n]
[n, ., next]
[n]
[n, ==, null]
[n]
[null]
[new, RuntimeException, (, "node is not a child", )]
["node is not a child"]
[n]
[first]
[i, >, 0]
[i]
[0]
[n]
[n, ., next]
[n]
[i, --]
[i]
[n]
[first]
[0]
[n, !=, null]
[n]
[null]
[child, ==, n]
[child]
[n]
[i]
[n]
[n, ., next]
[n]
[i, ++]
[i]
[-, 1]
[1]
[this]
[n, ., next, !=, null]
[n, ., next]
[n]
[null]
[n]
[n, ., next]
[n]
[n]
[Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[Preconditions]
[child, ., parent, ==, null]
[child, ., parent]
[child]
[null]
[Preconditions, ., checkArgument, (, child, ., next, ==, null, )]
[Preconditions]
[child, ., next, ==, null]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[this]
[child, ., next]
[child]
[first]
[first]
[child]
[last, ==, null]
[last]
[null]
[last]
[child]
[Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[Preconditions]
[child, ., parent, ==, null]
[child, ., parent]
[child]
[null]
[Preconditions, ., checkArgument, (, child, ., next, ==, null, )]
[Preconditions]
[child, ., next, ==, null]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[this]
[child, ., next]
[child]
[null]
[last, ==, null]
[last]
[null]
[first]
[last]
[child]
[last, ., next]
[last]
[child]
[last]
[child]
[children]
[child, !=, null]
[child]
[null]
[child]
[child, ., next]
[child]
[Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[Preconditions]
[child, ., parent, ==, null]
[child, ., parent]
[child]
[null]
[child, ., parent]
[child]
[this]
[children, ., getLastSibling, (, )]
[children]
[lastSib, ., next]
[lastSib]
[first]
[first]
[children]
[last, ==, null]
[last]
[null]
[last]
[lastSib]
[addChildrenAfter, (, children, ,, getLastChild, (, ), )]
[children]
[getLastChild, (, )]
[Preconditions, ., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", )]
[Preconditions]
[node, !=, null, &&, node, ., parent, ==, this]
[node, !=, null]
[node]
[null]
[node, ., parent, ==, this]
[node, ., parent]
[node]
[this]
["The existing child node of the parent should not be null."]
[Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[Preconditions]
[newChild, ., next, ==, null]
[newChild, ., next]
[newChild]
[null]
["The new child node has siblings."]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[Preconditions]
[newChild, ., parent, ==, null]
[newChild, ., parent]
[newChild]
[null]
["The new child node already has a parent."]
[first, ==, node]
[first]
[node]
[newChild, ., parent]
[newChild]
[this]
[newChild, ., next]
[newChild]
[first]
[first]
[newChild]
[getChildBefore, (, node, )]
[node]
[addChildAfter, (, newChild, ,, prev, )]
[newChild]
[prev]
[Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[Preconditions]
[newChild, ., next, ==, null]
[newChild, ., next]
[newChild]
[null]
["The new child node has siblings."]
[addChildrenAfter, (, newChild, ,, node, )]
[newChild]
[node]
[Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., parent, ==, this, )]
[Preconditions]
[node, ==, null, ||, node, ., parent, ==, this]
[node, ==, null]
[node]
[null]
[node, ., parent, ==, this]
[node, ., parent]
[node]
[this]
[children]
[child, !=, null]
[child]
[null]
[child]
[child, ., next]
[child]
[Preconditions, ., checkArgument, (, child, ., parent, ==, null, )]
[Preconditions]
[child, ., parent, ==, null]
[child, ., parent]
[child]
[null]
[child, ., parent]
[child]
[this]
[children, ., getLastSibling, (, )]
[children]
[node, !=, null]
[node]
[null]
[node, ., next]
[node]
[node, ., next]
[node]
[children]
[lastSibling, ., next]
[lastSibling]
[oldNext]
[node, ==, last]
[node]
[last]
[last]
[lastSibling]
[first, !=, null]
[first]
[null]
[lastSibling, ., next]
[lastSibling]
[first]
[last]
[lastSibling]
[first]
[children]
[getChildBefore, (, child, )]
[child]
[prev, ==, null]
[prev]
[null]
[first]
[first, ., next]
[first]
[prev, ., next]
[prev]
[child, ., next]
[child]
[child, ==, last]
[child]
[last]
[last]
[prev]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[null]
[Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[Preconditions]
[newChild, ., next, ==, null]
[newChild, ., next]
[newChild]
[null]
["The new child node has siblings."]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[Preconditions]
[newChild, ., parent, ==, null]
[newChild, ., parent]
[newChild]
[null]
["The new child node already has a parent."]
[newChild, ., copyInformationFrom, (, child, )]
[newChild]
[child]
[newChild, ., next]
[newChild]
[child, ., next]
[child]
[newChild, ., parent]
[newChild]
[this]
[child, ==, first]
[child]
[first]
[first]
[newChild]
[getChildBefore, (, child, )]
[child]
[prev, ., next]
[prev]
[newChild]
[child, ==, last]
[child]
[last]
[last]
[newChild]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[null]
[Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", )]
[Preconditions]
[prevChild, ., parent, ==, this]
[prevChild, ., parent]
[prevChild]
[this]
["prev is not a child of this node."]
[Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", )]
[Preconditions]
[newChild, ., next, ==, null]
[newChild, ., next]
[newChild]
[null]
["The new child node has siblings."]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", )]
[Preconditions]
[newChild, ., parent, ==, null]
[newChild, ., parent]
[newChild]
[null]
["The new child node already has a parent."]
[newChild, ., copyInformationFrom, (, prevChild, )]
[newChild]
[prevChild]
[prevChild, ., next]
[prevChild]
[newChild, ., next]
[newChild]
[child, ., next]
[child]
[newChild, ., parent]
[newChild]
[this]
[prevChild, ., next]
[prevChild]
[newChild]
[child, ==, last]
[child]
[last]
[last]
[newChild]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[null]
[propListHead]
[x, !=, null, &&, propType, !=, x, ., getType, (, )]
[x, !=, null]
[x]
[null]
[propType, !=, x, ., getType, (, )]
[propType]
[x, ., getType, (, )]
[x]
[x]
[x, ., getNext, (, )]
[x]
[x]
[Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", )]
[Preconditions]
[this, ., propListHead, ==, null]
[this, ., propListHead]
[this]
[null]
["Node has existing properties."]
[this, ., propListHead]
[this]
[other, ., propListHead]
[other]
[this]
[removeProp, (, propListHead, ,, propType, )]
[propListHead]
[propType]
[result, !=, propListHead]
[result]
[propListHead]
[propListHead]
[result]
[item, ==, null]
[item]
[null]
[null]
[item, ., getType, (, ), ==, propType]
[item, ., getType, (, )]
[item]
[propType]
[item, ., getNext, (, )]
[item]
[removeProp, (, item, ., getNext, (, ), ,, propType, )]
[item, ., getNext, (, )]
[item]
[propType]
[result, !=, item, ., getNext, (, )]
[result]
[item, ., getNext, (, )]
[item]
[item, ., chain, (, result, )]
[item]
[result]
[item]
[lookupProperty, (, propType, )]
[propType]
[item, ==, null]
[item]
[null]
[null]
[item, ., getObjectValue, (, )]
[item]
[getIntProp, (, propType, ), !=, 0]
[getIntProp, (, propType, )]
[propType]
[0]
[lookupProperty, (, propType, )]
[propType]
[item, ==, null]
[item]
[null]
[0]
[item, ., getIntValue, (, )]
[item]
[lookupProperty, (, propType, )]
[propType]
[item, ==, null]
[item]
[null]
[new, IllegalStateException, (, "missing prop: ", +, propType, )]
["missing prop: ", +, propType]
["missing prop: "]
[propType]
[item, ., getIntValue, (, )]
[item]
[removeProp, (, propType, )]
[propType]
[value, !=, null]
[value]
[null]
[propListHead]
[createProp, (, propType, ,, value, ,, propListHead, )]
[propType]
[value]
[propListHead]
[putIntProp, (, propType, ,, value, ?, 1, :, 0, )]
[propType]
[value, ?, 1, :, 0]
[value]
[1]
[0]
[removeProp, (, propType, )]
[propType]
[value, !=, 0]
[value]
[0]
[propListHead]
[createProp, (, propType, ,, value, ,, propListHead, )]
[propType]
[value]
[propListHead]
[new, ObjectPropListItem, (, propType, ,, value, ,, next, )]
[propType]
[value]
[next]
[new, IntPropListItem, (, propType, ,, value, ,, next, )]
[propType]
[value]
[next]
[0]
[propListHead]
[x, !=, null]
[x]
[null]
[x]
[x, ., getNext, (, )]
[x]
[count, ++]
[count]
[new, int, [, count, ]]
[count]
[propListHead]
[x, !=, null]
[x]
[null]
[x]
[x, ., getNext, (, )]
[x]
[count, --]
[count]
[keys, [, count, ]]
[keys]
[count]
[x, ., getType, (, )]
[x]
[Arrays, ., sort, (, keys, )]
[Arrays]
[keys]
[keys]
[this, ., getType, (, ), ==, Token, ., NUMBER]
[this, ., getType, (, )]
[this]
[Token, ., NUMBER]
[Token]
[new, IllegalStateException, (, "Number node not created with Node.newNumber", )]
["Number node not created with Node.newNumber"]
[new, UnsupportedOperationException, (, this, +, " is not a number node", )]
[this, +, " is not a number node"]
[this]
[" is not a number node"]
[this, ., getType, (, ), ==, Token, ., NUMBER]
[this, ., getType, (, )]
[this]
[Token, ., NUMBER]
[Token]
[new, IllegalStateException, (, "Number node not created with Node.newNumber", )]
["Number node not created with Node.newNumber"]
[new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[this, +, " is not a string node"]
[this]
[" is not a string node"]
[this, ., getType, (, ), ==, Token, ., STRING]
[this, ., getType, (, )]
[this]
[Token, ., STRING]
[Token]
[new, IllegalStateException, (, "String node not created with Node.newString", )]
["String node not created with Node.newString"]
[new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[this, +, " is not a string node"]
[this]
[" is not a string node"]
[this, ., getType, (, ), ==, Token, ., STRING]
[this, ., getType, (, )]
[this]
[Token, ., STRING]
[Token]
[new, IllegalStateException, (, "String node not created with Node.newString", )]
["String node not created with Node.newString"]
[new, UnsupportedOperationException, (, this, +, " is not a string node", )]
[this, +, " is not a string node"]
[this]
[" is not a string node"]
[toString, (, true, ,, true, ,, true, )]
[true]
[true]
[true]
[new, StringBuilder, (, )]
[toString, (, sb, ,, printSource, ,, printAnnotations, ,, printType, )]
[sb]
[printSource]
[printAnnotations]
[printType]
[sb, ., toString, (, )]
[sb]
[sb, ., append, (, Token, ., name, (, type, ), )]
[sb]
[Token, ., name, (, type, )]
[Token]
[type]
[this, instanceof, StringNode]
[this]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[sb, ., append, (, getString, (, ), )]
[sb]
[getString, (, )]
[type, ==, Token, ., FUNCTION]
[type]
[Token, ., FUNCTION]
[Token]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME]
[first, ==, null]
[first]
[null]
[first, ., getType, (, ), !=, Token, ., NAME]
[first, ., getType, (, )]
[first]
[Token, ., NAME]
[Token]
[sb, ., append, (, "<invalid>", )]
[sb]
["<invalid>"]
[sb, ., append, (, first, ., getString, (, ), )]
[sb]
[first, ., getString, (, )]
[first]
[type, ==, Token, ., NUMBER]
[type]
[Token, ., NUMBER]
[Token]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[sb, ., append, (, getDouble, (, ), )]
[sb]
[getDouble, (, )]
[printSource]
[getLineno, (, )]
[lineno, !=, -, 1]
[lineno]
[-, 1]
[1]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[sb, ., append, (, lineno, )]
[sb]
[lineno]
[printAnnotations]
[getSortedPropTypes, (, )]
[0]
[i, <, keys, ., length]
[i]
[keys, ., length]
[keys]
[i, ++]
[i]
[keys, [, i, ]]
[keys]
[i]
[lookupProperty, (, type, )]
[type]
[sb, ., append, (, " [", )]
[sb]
[" ["]
[sb, ., append, (, propToString, (, type, ), )]
[sb]
[propToString, (, type, )]
[type]
[sb, ., append, (, ": ", )]
[sb]
[": "]
[type]
[value]
[x, ., toString, (, )]
[x]
[sb, ., append, (, value, )]
[sb]
[value]
[sb, ., append, (, ']', )]
[sb]
[']']
[printType]
[jsType, !=, null]
[jsType]
[null]
[jsType, ., toString, (, )]
[jsType]
[jsTypeString, !=, null]
[jsTypeString]
[null]
[sb, ., append, (, " : ", )]
[sb]
[" : "]
[sb, ., append, (, jsTypeString, )]
[sb]
[jsTypeString]
[toStringTreeImpl, (, )]
[new, StringBuilder, (, )]
[appendStringTree, (, s, )]
[s]
[s, ., toString, (, )]
[s]
[new, RuntimeException, (, "Should not happen\n", +, e, )]
["Should not happen\n", +, e]
["Should not happen\n"]
[e]
[toStringTreeHelper, (, this, ,, 0, ,, appendable, )]
[this]
[0]
[appendable]
[0]
[i, !=, level]
[i]
[level]
[++, i]
[i]
[sb, ., append, (, "    ", )]
[sb]
["    "]
[sb, ., append, (, n, ., toString, (, ), )]
[sb]
[n, ., toString, (, )]
[n]
[sb, ., append, (, '\n', )]
[sb]
['\n']
[n, ., getFirstChild, (, )]
[n]
[cursor, !=, null]
[cursor]
[null]
[cursor]
[cursor, ., getNext, (, )]
[cursor]
[toStringTreeHelper, (, cursor, ,, level, +, 1, ,, sb, )]
[cursor]
[level, +, 1]
[level]
[1]
[sb]
[12]
[(, 1, <<, COLUMN_BITS, ), -, 1]
[(, 1, <<, COLUMN_BITS, )]
[1, <<, COLUMN_BITS]
[1]
[COLUMN_BITS]
[1]
[MAX_COLUMN_NUMBER]
[this, ., putProp, (, STATIC_SOURCE_FILE, ,, file, )]
[this]
[STATIC_SOURCE_FILE]
[file]
[this, ., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (, name, ,, false, ), )]
[this]
[STATIC_SOURCE_FILE]
[new, SimpleSourceFile, (, name, ,, false, )]
[name]
[false]
[getStaticSourceFile, (, )]
[file, ==, null, ?, null, :, file, ., getName, (, )]
[file, ==, null]
[file]
[null]
[null]
[file, ., getName, (, )]
[file]
[(, (, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[(, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, )]
[this, ., getProp, (, STATIC_SOURCE_FILE, )]
[this]
[STATIC_SOURCE_FILE]
[this, ., putProp, (, INPUT_ID, ,, inputId, )]
[this]
[INPUT_ID]
[inputId]
[(, (, InputId, ), this, ., getProp, (, INPUT_ID, ), )]
[(, InputId, ), this, ., getProp, (, INPUT_ID, )]
[this, ., getProp, (, INPUT_ID, )]
[this]
[INPUT_ID]
[getStaticSourceFile, (, )]
[file, ==, null, ?, false, :, file, ., isExtern, (, )]
[file, ==, null]
[file]
[null]
[false]
[file, ., isExtern, (, )]
[file]
[getIntProp, (, LENGTH, )]
[LENGTH]
[putIntProp, (, LENGTH, ,, length, )]
[LENGTH]
[length]
[extractLineno, (, sourcePosition, )]
[sourcePosition]
[extractCharno, (, sourcePosition, )]
[sourcePosition]
[getStaticSourceFile, (, )]
[file, ==, null]
[file]
[null]
[-, 1]
[1]
[getLineno, (, )]
[lineno, ==, -, 1]
[lineno]
[-, 1]
[1]
[-, 1]
[1]
[file, ., getLineOffset, (, lineno, ), +, getCharno, (, )]
[file, ., getLineOffset, (, lineno, )]
[file]
[lineno]
[getCharno, (, )]
[sourcePosition]
[getCharno, (, )]
[charno, ==, -, 1]
[charno]
[-, 1]
[1]
[charno]
[0]
[sourcePosition]
[mergeLineCharNo, (, lineno, ,, charno, )]
[lineno]
[charno]
[sourcePosition]
[mergeLineCharNo, (, getLineno, (, ), ,, charno, )]
[getLineno, (, )]
[charno]
[this, ., sourcePosition]
[this]
[sourcePosition]
[this, ., sourcePosition]
[this]
[sourcePosition]
[getFirstChild, (, )]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., setSourceEncodedPositionForTree, (, sourcePosition, )]
[child]
[sourcePosition]
[lineno, <, 0, ||, charno, <, 0]
[lineno, <, 0]
[lineno]
[0]
[charno, <, 0]
[charno]
[0]
[-, 1]
[1]
[(, charno, &, ~, COLUMN_MASK, ), !=, 0]
[(, charno, &, ~, COLUMN_MASK, )]
[charno, &, ~, COLUMN_MASK]
[charno]
[~, COLUMN_MASK]
[COLUMN_MASK]
[0]
[lineno, <<, COLUMN_BITS, |, COLUMN_MASK]
[lineno, <<, COLUMN_BITS]
[lineno]
[COLUMN_BITS]
[COLUMN_MASK]
[lineno, <<, COLUMN_BITS, |, (, charno, &, COLUMN_MASK, )]
[lineno, <<, COLUMN_BITS]
[lineno]
[COLUMN_BITS]
[(, charno, &, COLUMN_MASK, )]
[charno, &, COLUMN_MASK]
[charno]
[COLUMN_MASK]
[lineCharNo, ==, -, 1]
[lineCharNo]
[-, 1]
[1]
[-, 1]
[1]
[lineCharNo, >, >, >, COLUMN_BITS]
[lineCharNo]
[COLUMN_BITS]
[lineCharNo, ==, -, 1]
[lineCharNo]
[-, 1]
[1]
[-, 1]
[1]
[lineCharNo, &, COLUMN_MASK]
[lineCharNo]
[COLUMN_MASK]
[first, ==, null]
[first]
[null]
[Collections, ., emptySet, (, )]
[Collections]
[new, SiblingNodeIterable, (, first, )]
[first]
[new, SiblingNodeIterable, (, this, )]
[this]
[this, ., start]
[this]
[start]
[this, ., current]
[this]
[start]
[this, ., used]
[this]
[false]
[!, used]
[used]
[used]
[true]
[this]
[(, new, SiblingNodeIterable, (, start, ), ), ., iterator, (, )]
[(, new, SiblingNodeIterable, (, start, ), )]
[new, SiblingNodeIterable, (, start, )]
[start]
[current, !=, null]
[current]
[null]
[current, ==, null]
[current]
[null]
[new, NoSuchElementException, (, )]
[current]
[current]
[current, ., getNext, (, )]
[current]
[new, UnsupportedOperationException, (, )]
[propListHead]
[parent]
[Preconditions, ., checkArgument, (, level, >=, 0, )]
[Preconditions]
[level, >=, 0]
[level]
[0]
[this]
[node, !=, null, &&, level, --, >, 0]
[node, !=, null]
[node]
[null]
[level, --, >, 0]
[level, --]
[level]
[0]
[node]
[node, ., getParent, (, )]
[node]
[node]
[new, AncestorIterable, (, this, ., getParent, (, ), )]
[this, ., getParent, (, )]
[this]
[this, ., cur]
[this]
[cur]
[new, Iterator, <, Node, >, (, ), {, @, Override, public, boolean, hasNext, (, ), {, return, cur, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =, cur, ., getParent, (, ), ;, return, n, ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }]
[cur, !=, null]
[cur]
[null]
[!, hasNext, (, )]
[hasNext, (, )]
[new, NoSuchElementException, (, )]
[cur]
[cur]
[cur, ., getParent, (, )]
[cur]
[n]
[new, UnsupportedOperationException, (, )]
[first, !=, null, &&, first, ==, last]
[first, !=, null]
[first]
[null]
[first, ==, last]
[first]
[last]
[first, !=, null, &&, first, !=, last]
[first, !=, null]
[first]
[null]
[first, !=, last]
[first]
[last]
[0]
[first]
[n, !=, null]
[n]
[null]
[n]
[n, ., next]
[n]
[c, ++]
[c]
[c]
[first]
[n, !=, null]
[n]
[null]
[n]
[n, ., getNext, (, )]
[n]
[child, ==, n]
[child]
[n]
[true]
[false]
[checkTreeEqualsImpl, (, node2, )]
[node2]
[diff, !=, null]
[diff]
[null]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, )]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: "]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, )]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: "]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, )]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n"]
["Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, )]
["Node tree inequality:", +, "\nTree1:\n"]
["Node tree inequality:"]
["\nTree1:\n"]
[toStringTree, (, )]
["\n\nTree2:\n"]
[node2, ., toStringTree, (, )]
[node2]
["\n\nSubtree1: "]
[diff, ., nodeA, ., toStringTree, (, )]
[diff, ., nodeA]
[diff]
["\n\nSubtree2: "]
[diff, ., nodeB, ., toStringTree, (, )]
[diff, ., nodeB]
[diff]
[null]
[!, isEquivalentTo, (, node2, ,, false, ,, false, )]
[isEquivalentTo, (, node2, ,, false, ,, false, )]
[node2]
[false]
[false]
[new, NodeMismatch, (, this, ,, node2, )]
[this]
[node2]
[null]
[n]
[first]
[n2]
[node2, ., first]
[node2]
[res, ==, null, &&, n, !=, null]
[res, ==, null]
[res]
[null]
[n, !=, null]
[n]
[null]
[n]
[n, ., next]
[n]
[n2]
[n2, ., next]
[n2]
[node2, ==, null]
[node2]
[null]
[new, IllegalStateException, (, )]
[res]
[n, ., checkTreeEqualsImpl, (, n2, )]
[n]
[n2]
[res, !=, null]
[res]
[null]
[res]
[res]
[!, isEquivalentTo, (, node2, ,, true, ,, false, )]
[isEquivalentTo, (, node2, ,, true, ,, false, )]
[node2]
[true]
[false]
[new, NodeMismatch, (, this, ,, node2, )]
[this]
[node2]
[null]
[n]
[first]
[n2]
[node2, ., first]
[node2]
[res, ==, null, &&, n, !=, null]
[res, ==, null]
[res]
[null]
[n, !=, null]
[n]
[null]
[n]
[n, ., next]
[n]
[n2]
[n2, ., next]
[n2]
[res]
[n, ., checkTreeTypeAwareEqualsImpl, (, n2, )]
[n]
[n2]
[res, !=, null]
[res]
[null]
[res]
[res]
[isEquivalentTo, (, node, ,, false, ,, true, )]
[node]
[false]
[true]
[isEquivalentTo, (, node, ,, true, ,, true, )]
[node]
[true]
[true]
[type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass, (, )]
[type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, )]
[type, !=, node, ., getType, (, )]
[type]
[node, ., getType, (, )]
[node]
[getChildCount, (, ), !=, node, ., getChildCount, (, )]
[getChildCount, (, )]
[node, ., getChildCount, (, )]
[node]
[this, ., getClass, (, ), !=, node, ., getClass, (, )]
[this, ., getClass, (, )]
[this]
[node, ., getClass, (, )]
[node]
[false]
[compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), )]
[compareJsType]
[!, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), )]
[JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), )]
[JSType]
[jsType]
[node, ., getJSType, (, )]
[node]
[false]
[type, ==, Token, ., INC, ||, type, ==, Token, ., DEC]
[type, ==, Token, ., INC]
[type]
[Token, ., INC]
[Token]
[type, ==, Token, ., DEC]
[type]
[Token, ., DEC]
[Token]
[this, ., getIntProp, (, INCRDECR_PROP, )]
[this]
[INCRDECR_PROP]
[node, ., getIntProp, (, INCRDECR_PROP, )]
[node]
[INCRDECR_PROP]
[post1, !=, post2]
[post1]
[post2]
[false]
[type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY]
[type, ==, Token, ., STRING]
[type]
[Token, ., STRING]
[Token]
[type, ==, Token, ., STRING_KEY]
[type]
[Token, ., STRING_KEY]
[Token]
[type, ==, Token, ., STRING_KEY]
[type]
[Token, ., STRING_KEY]
[Token]
[this, ., getIntProp, (, QUOTED_PROP, )]
[this]
[QUOTED_PROP]
[node, ., getIntProp, (, QUOTED_PROP, )]
[node]
[QUOTED_PROP]
[quoted1, !=, quoted2]
[quoted1]
[quoted2]
[false]
[this, ., getIntProp, (, SLASH_V, )]
[this]
[SLASH_V]
[node, ., getIntProp, (, SLASH_V, )]
[node]
[SLASH_V]
[slashV1, !=, slashV2]
[slashV1]
[slashV2]
[false]
[type, ==, Token, ., CALL]
[type]
[Token, ., CALL]
[Token]
[this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, )]
[this, ., getBooleanProp, (, FREE_CALL, )]
[this]
[FREE_CALL]
[node, ., getBooleanProp, (, FREE_CALL, )]
[node]
[FREE_CALL]
[false]
[recurse]
[n]
[first]
[n2]
[node, ., first]
[node]
[n, !=, null]
[n]
[null]
[n]
[n, ., next]
[n]
[n2]
[n2, ., next]
[n2]
[!, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, )]
[n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, )]
[n]
[n2]
[compareJsType]
[true]
[false]
[true]
[type, ==, Token, ., NAME]
[type]
[Token, ., NAME]
[Token]
[getString, (, )]
[name, ., isEmpty, (, ), ?, null, :, name]
[name, ., isEmpty, (, )]
[name]
[null]
[name]
[type, ==, Token, ., GETPROP]
[type]
[Token, ., GETPROP]
[Token]
[getFirstChild, (, ), ., getQualifiedName, (, )]
[getFirstChild, (, )]
[left, ==, null]
[left]
[null]
[null]
[left, +, ".", +, getLastChild, (, ), ., getString, (, )]
[left, +, "."]
[left]
["."]
[getLastChild, (, ), ., getString, (, )]
[getLastChild, (, )]
[type, ==, Token, ., THIS]
[type]
[Token, ., THIS]
[Token]
["this"]
[null]
[getType, (, )]
[Token, ., NAME]
[Token]
[getString, (, ), ., isEmpty, (, ), ?, false, :, true]
[getString, (, ), ., isEmpty, (, )]
[getString, (, )]
[false]
[true]
[Token, ., THIS]
[Token]
[true]
[Token, ., GETPROP]
[Token]
[getFirstChild, (, ), ., isQualifiedName, (, )]
[getFirstChild, (, )]
[false]
[getType, (, )]
[Token, ., NAME]
[Token]
[getString, (, ), ., isEmpty, (, ), ?, false, :, true]
[getString, (, ), ., isEmpty, (, )]
[getString, (, )]
[false]
[true]
[Token, ., GETPROP]
[Token]
[getFirstChild, (, ), ., isUnscopedQualifiedName, (, )]
[getFirstChild, (, )]
[false]
[Preconditions, ., checkState, (, parent, !=, null, )]
[Preconditions]
[parent, !=, null]
[parent]
[null]
[parent, ., removeChild, (, this, )]
[parent]
[this]
[this]
[first]
[child, !=, null]
[child]
[null]
[removeChild, (, child, )]
[child]
[child]
[first]
[first]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., parent]
[child]
[null]
[first]
[null]
[last]
[null]
[children]
[first]
[child, !=, null]
[child]
[null]
[child, ., getNext, (, )]
[child]
[child, ., parent]
[child]
[null]
[child, ., next]
[child]
[null]
[child]
[nextChild]
[first]
[null]
[last]
[null]
[Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", )]
[Preconditions]
[prev, ., parent, ==, this]
[prev, ., parent]
[prev]
[this]
["prev is not a child of this node."]
[Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", )]
[Preconditions]
[prev, ., next, !=, null]
[prev, ., next]
[prev]
[null]
["no next sibling."]
[prev, ., next]
[prev]
[prev, ., next]
[prev]
[child, ., next]
[child]
[child, ==, last]
[child]
[last]
[last]
[prev]
[child, ., next]
[child]
[null]
[child, ., parent]
[child]
[null]
[child]
[result]
[(, Node, ), super, ., clone, (, )]
[super, ., clone, (, )]
[super]
[result, ., next]
[result]
[null]
[result, ., first]
[result]
[null]
[result, ., last]
[result]
[null]
[result, ., parent]
[result]
[null]
[new, RuntimeException, (, e, ., getMessage, (, ), )]
[e, ., getMessage, (, )]
[e]
[result]
[cloneNode, (, )]
[getFirstChild, (, )]
[n2, !=, null]
[n2]
[null]
[n2]
[n2, ., getNext, (, )]
[n2]
[n2, ., cloneTree, (, )]
[n2]
[n2clone, ., parent]
[n2clone]
[result]
[result, ., last, !=, null]
[result, ., last]
[result]
[null]
[result, ., last, ., next]
[result, ., last]
[result]
[n2clone]
[result, ., first, ==, null]
[result, ., first]
[result]
[null]
[result, ., first]
[result]
[n2clone]
[result, ., last]
[result]
[n2clone]
[result]
[getProp, (, ORIGINALNAME_PROP, ), ==, null]
[getProp, (, ORIGINALNAME_PROP, )]
[ORIGINALNAME_PROP]
[null]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), )]
[ORIGINALNAME_PROP]
[other, ., getProp, (, ORIGINALNAME_PROP, )]
[other]
[ORIGINALNAME_PROP]
[getProp, (, STATIC_SOURCE_FILE, ), ==, null]
[getProp, (, STATIC_SOURCE_FILE, )]
[STATIC_SOURCE_FILE]
[null]
[putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[STATIC_SOURCE_FILE]
[other, ., getProp, (, STATIC_SOURCE_FILE, )]
[other]
[STATIC_SOURCE_FILE]
[sourcePosition]
[other, ., sourcePosition]
[other]
[this]
[copyInformationFrom, (, other, )]
[other]
[getFirstChild, (, )]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., copyInformationFromForTree, (, other, )]
[child]
[other]
[this]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), )]
[ORIGINALNAME_PROP]
[other, ., getProp, (, ORIGINALNAME_PROP, )]
[other]
[ORIGINALNAME_PROP]
[putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[STATIC_SOURCE_FILE]
[other, ., getProp, (, STATIC_SOURCE_FILE, )]
[other]
[STATIC_SOURCE_FILE]
[sourcePosition]
[other, ., sourcePosition]
[other]
[this]
[useSourceInfoFrom, (, other, )]
[other]
[useSourceInfoFrom, (, other, )]
[other]
[getFirstChild, (, )]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., useSourceInfoFromForTree, (, other, )]
[child]
[other]
[this]
[useSourceInfoFromForTree, (, other, )]
[other]
[getProp, (, ORIGINALNAME_PROP, ), ==, null]
[getProp, (, ORIGINALNAME_PROP, )]
[ORIGINALNAME_PROP]
[null]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), )]
[ORIGINALNAME_PROP]
[other, ., getProp, (, ORIGINALNAME_PROP, )]
[other]
[ORIGINALNAME_PROP]
[getProp, (, STATIC_SOURCE_FILE, ), ==, null]
[getProp, (, STATIC_SOURCE_FILE, )]
[STATIC_SOURCE_FILE]
[null]
[putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), )]
[STATIC_SOURCE_FILE]
[other, ., getProp, (, STATIC_SOURCE_FILE, )]
[other]
[STATIC_SOURCE_FILE]
[sourcePosition]
[other, ., sourcePosition]
[other]
[this]
[useSourceInfoIfMissingFrom, (, other, )]
[other]
[getFirstChild, (, )]
[child, !=, null]
[child]
[null]
[child]
[child, ., getNext, (, )]
[child]
[child, ., useSourceInfoIfMissingFromForTree, (, other, )]
[child]
[other]
[this]
[jsType]
[this, ., jsType]
[this]
[jsType]
[new, FileLevelJsDocBuilder, (, )]
[getJSDocInfo, (, )]
[jsDocInfo, ==, null]
[jsDocInfo]
[null]
[jsDocInfo]
[new, JSDocInfo, (, false, )]
[false]
[jsDocInfo, ., getLicense, (, )]
[jsDocInfo]
[license, ==, null]
[license]
[null]
[license]
[""]
[jsDocInfo, ., setLicense, (, license, +, fileLevelComment, )]
[jsDocInfo]
[license, +, fileLevelComment]
[license]
[fileLevelComment]
[setJSDocInfo, (, jsDocInfo, )]
[jsDocInfo]
[(, JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, )]
[getProp, (, JSDOC_INFO_PROP, )]
[JSDOC_INFO_PROP]
[putProp, (, JSDOC_INFO_PROP, ,, info, )]
[JSDOC_INFO_PROP]
[info]
[this]
[putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, )]
[VAR_ARGS_NAME]
[varArgs]
[getBooleanProp, (, VAR_ARGS_NAME, )]
[VAR_ARGS_NAME]
[putBooleanProp, (, OPT_ARG_NAME, ,, optionalArg, )]
[OPT_ARG_NAME]
[optionalArg]
[getBooleanProp, (, OPT_ARG_NAME, )]
[OPT_ARG_NAME]
[putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,, val, )]
[SYNTHETIC_BLOCK_PROP]
[val]
[getBooleanProp, (, SYNTHETIC_BLOCK_PROP, )]
[SYNTHETIC_BLOCK_PROP]
[putProp, (, DIRECTIVES, ,, val, )]
[DIRECTIVES]
[val]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[(, Set, <, String, >, ), getProp, (, DIRECTIVES, )]
[getProp, (, DIRECTIVES, )]
[DIRECTIVES]
[getJSDocInfo, (, ), ==, null]
[getJSDocInfo, (, )]
[null]
[setJSDocInfo, (, new, JSDocInfo, (, false, ), )]
[new, JSDocInfo, (, false, )]
[false]
[getJSDocInfo, (, ), ., addSuppression, (, warning, )]
[getJSDocInfo, (, )]
[warning]
[putBooleanProp, (, EMPTY_BLOCK, ,, val, )]
[EMPTY_BLOCK]
[val]
[getBooleanProp, (, EMPTY_BLOCK, )]
[EMPTY_BLOCK]
[1]
[2]
[4]
[8]
[16]
[31]
[0]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED]
[FLAG_GLOBAL_STATE_UNMODIFIED]
[FLAG_THIS_UNMODIFIED]
[FLAG_ARGUMENTS_UNMODIFIED]
[FLAG_NO_THROWS]
[Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), )]
[Preconditions]
[getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW]
[getType, (, ), ==, Token, ., CALL]
[getType, (, )]
[Token, ., CALL]
[Token]
[getType, (, ), ==, Token, ., NEW]
[getType, (, )]
[Token, ., NEW]
[Token]
["setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), )]
["setIsNoSideEffectsCall only supports CALL and NEW nodes, got "]
[Token, ., name, (, getType, (, ), )]
[Token]
[getType, (, )]
[putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, )]
[SIDE_EFFECT_FLAGS]
[flags]
[setSideEffectFlags, (, flags, ., valueOf, (, ), )]
[flags, ., valueOf, (, )]
[flags]
[getIntProp, (, SIDE_EFFECT_FLAGS, )]
[SIDE_EFFECT_FLAGS]
[Node, ., SIDE_EFFECTS_ALL]
[Node]
[this, ., value]
[this]
[value]
[value]
[value]
[Node, ., SIDE_EFFECTS_ALL]
[Node]
[value]
[Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS]
[Node, ., NO_SIDE_EFFECTS]
[Node]
[Node, ., FLAG_LOCAL_RESULTS]
[Node]
[value, ==, Node, ., SIDE_EFFECTS_ALL]
[value]
[Node, ., SIDE_EFFECTS_ALL]
[Node]
[value]
[Node, ., NO_SIDE_EFFECTS]
[Node]
[removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, )]
[Node, ., FLAG_GLOBAL_STATE_UNMODIFIED]
[Node]
[removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, )]
[Node, ., FLAG_ARGUMENTS_UNMODIFIED]
[Node]
[removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, )]
[Node, ., FLAG_THIS_UNMODIFIED]
[Node]
[removeFlag, (, Node, ., FLAG_NO_THROWS, )]
[Node, ., FLAG_NO_THROWS]
[Node]
[removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, )]
[Node, ., FLAG_THIS_UNMODIFIED]
[Node]
[removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, )]
[Node, ., FLAG_ARGUMENTS_UNMODIFIED]
[Node]
[removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, )]
[Node, ., FLAG_LOCAL_RESULTS]
[Node]
[value]
[~, flag]
[flag]
[areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, )]
[getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS]
[getSideEffectFlags, (, )]
[Node, ., NO_SIDE_EFFECTS]
[Node]
[Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS]
[Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED]
[Node, ., FLAG_GLOBAL_STATE_UNMODIFIED]
[Node]
[Node, ., FLAG_ARGUMENTS_UNMODIFIED]
[Node]
[Node, ., FLAG_NO_THROWS]
[Node]
[areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, )]
[getSideEffectFlags, (, )]
[NO_SIDE_EFFECTS]
[areBitFlagsSet, (, getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, )]
[getSideEffectFlags, (, )]
[FLAG_LOCAL_RESULTS]
[(, value, &, flags, ), ==, flags]
[(, value, &, flags, )]
[value, &, flags]
[value]
[flags]
[flags]
[false]
[new, IllegalStateException, (, "not a StringNode", )]
["not a StringNode"]
[this, ., nodeA]
[this]
[nodeA]
[this, ., nodeB]
[this]
[nodeB]
[object, instanceof, NodeMismatch]
[object]
[(, NodeMismatch, ), object]
[object]
[that, ., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this, ., nodeB, )]
[that, ., nodeA, ., equals, (, this, ., nodeA, )]
[that, ., nodeA]
[that]
[this, ., nodeA]
[this]
[that, ., nodeB, ., equals, (, this, ., nodeB, )]
[that, ., nodeB]
[that]
[this, ., nodeB]
[this]
[false]
[Objects, ., hashCode, (, nodeA, ,, nodeB, )]
[Objects]
[nodeA]
[nodeB]
[this, ., getType, (, ), ==, Token, ., ADD]
[this, ., getType, (, )]
[this]
[Token, ., ADD]
[Token]
[this, ., getType, (, ), ==, Token, ., AND]
[this, ., getType, (, )]
[this]
[Token, ., AND]
[Token]
[this, ., getType, (, ), ==, Token, ., ARRAYLIT]
[this, ., getType, (, )]
[this]
[Token, ., ARRAYLIT]
[Token]
[this, ., getType, (, ), ==, Token, ., ASSIGN]
[this, ., getType, (, )]
[this]
[Token, ., ASSIGN]
[Token]
[this, ., getType, (, ), ==, Token, ., ASSIGN_ADD]
[this, ., getType, (, )]
[this]
[Token, ., ASSIGN_ADD]
[Token]
[this, ., getType, (, ), ==, Token, ., BLOCK]
[this, ., getType, (, )]
[this]
[Token, ., BLOCK]
[Token]
[this, ., getType, (, ), ==, Token, ., BREAK]
[this, ., getType, (, )]
[this]
[Token, ., BREAK]
[Token]
[this, ., getType, (, ), ==, Token, ., CALL]
[this, ., getType, (, )]
[this]
[Token, ., CALL]
[Token]
[this, ., getType, (, ), ==, Token, ., CASE]
[this, ., getType, (, )]
[this]
[Token, ., CASE]
[Token]
[this, ., getType, (, ), ==, Token, ., CAST]
[this, ., getType, (, )]
[this]
[Token, ., CAST]
[Token]
[this, ., getType, (, ), ==, Token, ., CATCH]
[this, ., getType, (, )]
[this]
[Token, ., CATCH]
[Token]
[this, ., getType, (, ), ==, Token, ., COMMA]
[this, ., getType, (, )]
[this]
[Token, ., COMMA]
[Token]
[this, ., getType, (, ), ==, Token, ., CONTINUE]
[this, ., getType, (, )]
[this]
[Token, ., CONTINUE]
[Token]
[this, ., getType, (, ), ==, Token, ., DEBUGGER]
[this, ., getType, (, )]
[this]
[Token, ., DEBUGGER]
[Token]
[this, ., getType, (, ), ==, Token, ., DEC]
[this, ., getType, (, )]
[this]
[Token, ., DEC]
[Token]
[this, ., getType, (, ), ==, Token, ., DEFAULT_CASE]
[this, ., getType, (, )]
[this]
[Token, ., DEFAULT_CASE]
[Token]
[this, ., getType, (, ), ==, Token, ., DELPROP]
[this, ., getType, (, )]
[this]
[Token, ., DELPROP]
[Token]
[this, ., getType, (, ), ==, Token, ., DO]
[this, ., getType, (, )]
[this]
[Token, ., DO]
[Token]
[this, ., getType, (, ), ==, Token, ., EMPTY]
[this, ., getType, (, )]
[this]
[Token, ., EMPTY]
[Token]
[this, ., getType, (, ), ==, Token, ., EXPR_RESULT]
[this, ., getType, (, )]
[this]
[Token, ., EXPR_RESULT]
[Token]
[this, ., getType, (, ), ==, Token, ., FALSE]
[this, ., getType, (, )]
[this]
[Token, ., FALSE]
[Token]
[this, ., getType, (, ), ==, Token, ., FOR]
[this, ., getType, (, )]
[this]
[Token, ., FOR]
[Token]
[this, ., getType, (, ), ==, Token, ., FUNCTION]
[this, ., getType, (, )]
[this]
[Token, ., FUNCTION]
[Token]
[this, ., getType, (, ), ==, Token, ., GETTER_DEF]
[this, ., getType, (, )]
[this]
[Token, ., GETTER_DEF]
[Token]
[this, ., getType, (, ), ==, Token, ., GETELEM]
[this, ., getType, (, )]
[this]
[Token, ., GETELEM]
[Token]
[this, ., getType, (, ), ==, Token, ., GETPROP]
[this, ., getType, (, )]
[this]
[Token, ., GETPROP]
[Token]
[this, ., getType, (, ), ==, Token, ., HOOK]
[this, ., getType, (, )]
[this]
[Token, ., HOOK]
[Token]
[this, ., getType, (, ), ==, Token, ., IF]
[this, ., getType, (, )]
[this]
[Token, ., IF]
[Token]
[this, ., getType, (, ), ==, Token, ., IN]
[this, ., getType, (, )]
[this]
[Token, ., IN]
[Token]
[this, ., getType, (, ), ==, Token, ., INC]
[this, ., getType, (, )]
[this]
[Token, ., INC]
[Token]
[this, ., getType, (, ), ==, Token, ., INSTANCEOF]
[this, ., getType, (, )]
[this]
[Token, ., INSTANCEOF]
[Token]
[this, ., getType, (, ), ==, Token, ., LABEL]
[this, ., getType, (, )]
[this]
[Token, ., LABEL]
[Token]
[this, ., getType, (, ), ==, Token, ., LABEL_NAME]
[this, ., getType, (, )]
[this]
[Token, ., LABEL_NAME]
[Token]
[this, ., getType, (, ), ==, Token, ., NAME]
[this, ., getType, (, )]
[this]
[Token, ., NAME]
[Token]
[this, ., getType, (, ), ==, Token, ., NE]
[this, ., getType, (, )]
[this]
[Token, ., NE]
[Token]
[this, ., getType, (, ), ==, Token, ., NEW]
[this, ., getType, (, )]
[this]
[Token, ., NEW]
[Token]
[this, ., getType, (, ), ==, Token, ., NOT]
[this, ., getType, (, )]
[this]
[Token, ., NOT]
[Token]
[this, ., getType, (, ), ==, Token, ., NULL]
[this, ., getType, (, )]
[this]
[Token, ., NULL]
[Token]
[this, ., getType, (, ), ==, Token, ., NUMBER]
[this, ., getType, (, )]
[this]
[Token, ., NUMBER]
[Token]
[this, ., getType, (, ), ==, Token, ., OBJECTLIT]
[this, ., getType, (, )]
[this]
[Token, ., OBJECTLIT]
[Token]
[this, ., getType, (, ), ==, Token, ., OR]
[this, ., getType, (, )]
[this]
[Token, ., OR]
[Token]
[this, ., getType, (, ), ==, Token, ., PARAM_LIST]
[this, ., getType, (, )]
[this]
[Token, ., PARAM_LIST]
[Token]
[this, ., getType, (, ), ==, Token, ., REGEXP]
[this, ., getType, (, )]
[this]
[Token, ., REGEXP]
[Token]
[this, ., getType, (, ), ==, Token, ., RETURN]
[this, ., getType, (, )]
[this]
[Token, ., RETURN]
[Token]
[this, ., getType, (, ), ==, Token, ., SCRIPT]
[this, ., getType, (, )]
[this]
[Token, ., SCRIPT]
[Token]
[this, ., getType, (, ), ==, Token, ., SETTER_DEF]
[this, ., getType, (, )]
[this]
[Token, ., SETTER_DEF]
[Token]
[this, ., getType, (, ), ==, Token, ., STRING]
[this, ., getType, (, )]
[this]
[Token, ., STRING]
[Token]
[this, ., getType, (, ), ==, Token, ., STRING_KEY]
[this, ., getType, (, )]
[this]
[Token, ., STRING_KEY]
[Token]
[this, ., getType, (, ), ==, Token, ., SWITCH]
[this, ., getType, (, )]
[this]
[Token, ., SWITCH]
[Token]
[this, ., getType, (, ), ==, Token, ., THIS]
[this, ., getType, (, )]
[this]
[Token, ., THIS]
[Token]
[this, ., getType, (, ), ==, Token, ., THROW]
[this, ., getType, (, )]
[this]
[Token, ., THROW]
[Token]
[this, ., getType, (, ), ==, Token, ., TRUE]
[this, ., getType, (, )]
[this]
[Token, ., TRUE]
[Token]
[this, ., getType, (, ), ==, Token, ., TRY]
[this, ., getType, (, )]
[this]
[Token, ., TRY]
[Token]
[this, ., getType, (, ), ==, Token, ., TYPEOF]
[this, ., getType, (, )]
[this]
[Token, ., TYPEOF]
[Token]
[this, ., getType, (, ), ==, Token, ., VAR]
[this, ., getType, (, )]
[this]
[Token, ., VAR]
[Token]
[this, ., getType, (, ), ==, Token, ., VOID]
[this, ., getType, (, )]
[this]
[Token, ., VOID]
[Token]
[this, ., getType, (, ), ==, Token, ., WHILE]
[this, ., getType, (, )]
[this]
[Token, ., WHILE]
[Token]
[this, ., getType, (, ), ==, Token, ., WITH]
[this, ., getType, (, )]
[this]
[Token, ., WITH]
[Token]
