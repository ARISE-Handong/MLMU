[DiagnosticType, ., error, (, "JSC_NODE_TRAVERSAL_ERROR", ,, "{0}", )]
[DiagnosticType]
["JSC_NODE_TRAVERSAL_ERROR"]
["{0}"]
[new, ArrayDeque, <, Scope, >, (, )]
[new, ArrayDeque, <, Node, >, (, )]
[new, LinkedList, <, ControlFlowGraph, <, Node, >, >, (, )]
[true]
[true]
[parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, )]
[parent, ==, null, ||, !, parent, ., isFunction, (, )]
[parent, ==, null]
[parent]
[null]
[!, parent, ., isFunction, (, )]
[parent, ., isFunction, (, )]
[parent]
[n, ==, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ==, null, ||, NodeUtil, ., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (, parent, )]
[parent, ==, null, ||, NodeUtil, ., isControlStructure, (, parent, )]
[parent, ==, null]
[parent]
[null]
[NodeUtil, ., isControlStructure, (, parent, )]
[NodeUtil]
[parent]
[NodeUtil, ., isStatementBlock, (, parent, )]
[NodeUtil]
[parent]
[nodeTypes]
[true]
[this, ., nodeTypes]
[this]
[nodeTypes]
[this, ., include]
[this]
[include]
[include, ==, nodeTypes, ., contains, (, n, ., getType, (, ), )]
[include]
[nodeTypes, ., contains, (, n, ., getType, (, ), )]
[nodeTypes]
[n, ., getType, (, )]
[n]
[compiler]
[cb]
[new, SyntacticScopeCreator, (, compiler, )]
[compiler]
[this, ., callback]
[this]
[cb]
[cb, instanceof, ScopedCallback]
[cb]
[this, ., scopeCallback]
[this]
[(, ScopedCallback, ), cb]
[cb]
[this, ., compiler]
[this]
[compiler]
[this, ., inputId]
[this]
[null]
[this, ., sourceName]
[this]
[""]
[this, ., scopeCreator]
[this]
[scopeCreator]
[unexpectedException, ., getMessage, (, )]
[unexpectedException]
[inputId, !=, null]
[inputId]
[null]
[message]
[unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), )]
[unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, )]
[unexpectedException, ., getMessage, (, ), +, "\n"]
[unexpectedException, ., getMessage, (, )]
[unexpectedException]
["\n"]
[formatNodeContext, (, "Node", ,, curNode, )]
["Node"]
[curNode]
[(, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), )]
[curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), )]
[curNode, ==, null]
[curNode]
[null]
[""]
[formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), )]
["Parent"]
[curNode, ., getParent, (, )]
[curNode]
[compiler, ., throwInternalError, (, message, ,, unexpectedException, )]
[compiler]
[message]
[unexpectedException]
[n, ==, null]
[n]
[null]
["  ", +, label, +, ": NULL"]
["  ", +, label]
["  "]
[label]
[": NULL"]
["  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, )]
["  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): "]
["  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, )]
["  ", +, label, +, "("]
["  ", +, label]
["  "]
[label]
["("]
[n, ., toString, (, false, ,, false, ,, false, )]
[n]
[false]
[false]
[false]
["): "]
[formatNodePosition, (, n, )]
[n]
[inputId]
[NodeUtil, ., getInputId, (, root, )]
[NodeUtil]
[root]
[sourceName]
[""]
[curNode]
[root]
[pushScope, (, root, )]
[root]
[traverseBranch, (, root, ,, null, )]
[root]
[null]
[popScope, (, )]
[throwUnexpectedException, (, unexpectedException, )]
[unexpectedException]
[traverseRoots, (, Lists, ., newArrayList, (, roots, ), )]
[Lists, ., newArrayList, (, roots, )]
[Lists]
[roots]
[roots, ., isEmpty, (, )]
[roots]
[roots, ., get, (, 0, ), ., getParent, (, )]
[roots, ., get, (, 0, )]
[roots]
[0]
[Preconditions, ., checkState, (, scopeRoot, !=, null, )]
[Preconditions]
[scopeRoot, !=, null]
[scopeRoot]
[null]
[inputId]
[NodeUtil, ., getInputId, (, scopeRoot, )]
[NodeUtil]
[scopeRoot]
[sourceName]
[""]
[curNode]
[scopeRoot]
[pushScope, (, scopeRoot, )]
[scopeRoot]
[roots]
[Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot, )]
[Preconditions]
[root, ., getParent, (, ), ==, scopeRoot]
[root, ., getParent, (, )]
[root]
[scopeRoot]
[traverseBranch, (, root, ,, scopeRoot, )]
[root]
[scopeRoot]
[popScope, (, )]
[throwUnexpectedException, (, unexpectedException, )]
[unexpectedException]
["[source unknown]"]
[getBestSourceFileName, (, n, )]
[n]
[sourceFileName, ==, null]
[sourceFileName]
[null]
[MISSING_SOURCE, +, "\n"]
[MISSING_SOURCE]
["\n"]
[n, ., getLineno, (, )]
[n]
[n, ., getCharno, (, )]
[n]
[compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, )]
[compiler]
[sourceFileName]
[lineNumber]
[src, ==, null]
[src]
[null]
[src]
[MISSING_SOURCE]
[sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n"]
[sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src]
[sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n"]
[sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber]
[sourceFileName, +, ":", +, lineNumber, +, ":"]
[sourceFileName, +, ":", +, lineNumber]
[sourceFileName, +, ":"]
[sourceFileName]
[":"]
[lineNumber]
[":"]
[columnNumber]
["\n"]
[src]
["\n"]
[Preconditions, ., checkState, (, s, ., isGlobal, (, ), )]
[Preconditions]
[s, ., isGlobal, (, )]
[s]
[inputId]
[null]
[sourceName]
[""]
[curNode]
[root]
[pushScope, (, s, )]
[s]
[traverseBranch, (, root, ,, null, )]
[root]
[null]
[popScope, (, )]
[s, ., getRootNode, (, )]
[s]
[n, ., isFunction, (, )]
[n]
[inputId, ==, null]
[inputId]
[null]
[inputId]
[NodeUtil, ., getInputId, (, n, )]
[NodeUtil]
[n]
[sourceName]
[getSourceName, (, n, )]
[n]
[curNode]
[n]
[pushScope, (, s, )]
[s]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[args, ., getNext, (, )]
[args]
[traverseBranch, (, args, ,, n, )]
[args]
[n]
[traverseBranch, (, body, ,, n, )]
[body]
[n]
[popScope, (, )]
[traverseWithScope, (, n, ,, s, )]
[n]
[s]
[Preconditions, ., checkNotNull, (, parent, )]
[Preconditions]
[parent]
[refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope]
[refinedScope, !=, null]
[refinedScope]
[null]
[getScope, (, ), !=, refinedScope]
[getScope, (, )]
[refinedScope]
[curNode]
[node]
[pushScope, (, refinedScope, )]
[refinedScope]
[traverseBranch, (, node, ,, parent, )]
[node]
[parent]
[popScope, (, )]
[traverseBranch, (, node, ,, parent, )]
[node]
[parent]
[(, Compiler, ), compiler]
[compiler]
[curNode]
[cur, !=, null]
[cur]
[null]
[cur, ., getLineno, (, )]
[cur]
[line, >=, 0]
[line]
[0]
[line]
[cur]
[cur, ., getParent, (, )]
[cur]
[0]
[sourceName]
[compiler, ., getInput, (, inputId, )]
[compiler]
[inputId]
[getInput, (, )]
[input, ==, null, ?, null, :, input, ., getModule, (, )]
[input, ==, null]
[input]
[null]
[null]
[input, ., getModule, (, )]
[input]
[curNode]
[new, NodeTraversal, (, compiler, ,, cb, )]
[compiler]
[cb]
[t, ., traverse, (, root, )]
[t]
[root]
[new, NodeTraversal, (, compiler, ,, cb, )]
[compiler]
[cb]
[t, ., traverseRoots, (, roots, )]
[t]
[roots]
[new, NodeTraversal, (, compiler, ,, cb, )]
[compiler]
[cb]
[t, ., traverseRoots, (, roots, )]
[t]
[roots]
[@, SuppressWarnings, (, "fallthrough", )]
["fallthrough"]
[n, ., getType, (, )]
[n]
[type, ==, Token, ., SCRIPT]
[type]
[Token, ., SCRIPT]
[Token]
[inputId]
[n, ., getInputId, (, )]
[n]
[sourceName]
[getSourceName, (, n, )]
[n]
[curNode]
[n]
[!, callback, ., shouldTraverse, (, this, ,, n, ,, parent, )]
[callback, ., shouldTraverse, (, this, ,, n, ,, parent, )]
[callback]
[this]
[n]
[parent]
[type]
[Token, ., FUNCTION]
[Token]
[traverseFunction, (, n, ,, parent, )]
[n]
[parent]
[n, ., getFirstChild, (, )]
[n]
[child, !=, null]
[child]
[null]
[child, ., getNext, (, )]
[child]
[traverseBranch, (, child, ,, n, )]
[child]
[n]
[child]
[next]
[curNode]
[n]
[callback, ., visit, (, this, ,, n, ,, parent, )]
[callback]
[this]
[n]
[parent]
[Preconditions, ., checkState, (, n, ., getChildCount, (, ), ==, 3, )]
[Preconditions]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[Preconditions, ., checkState, (, n, ., isFunction, (, ), )]
[Preconditions]
[n, ., isFunction, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[(, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, )]
[(, parent, !=, null, )]
[parent, !=, null]
[parent]
[null]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[!, isFunctionExpression]
[isFunctionExpression]
[traverseBranch, (, fnName, ,, n, )]
[fnName]
[n]
[curNode]
[n]
[pushScope, (, n, )]
[n]
[isFunctionExpression]
[traverseBranch, (, fnName, ,, n, )]
[fnName]
[n]
[fnName, ., getNext, (, )]
[fnName]
[args, ., getNext, (, )]
[args]
[traverseBranch, (, args, ,, n, )]
[args]
[n]
[Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, )]
[Preconditions]
[body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, )]
[body, ., getNext, (, ), ==, null]
[body, ., getNext, (, )]
[body]
[null]
[body, ., isBlock, (, )]
[body]
[body]
[traverseBranch, (, body, ,, n, )]
[body]
[n]
[popScope, (, )]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[scopes, ., size, (, ), +, scopeRoots, ., size, (, ), <, 2]
[scopes, ., size, (, ), +, scopeRoots, ., size, (, )]
[scopes, ., size, (, )]
[scopes]
[scopeRoots, ., size, (, )]
[scopeRoots]
[2]
[null]
[scopeRoots, ., isEmpty, (, )]
[scopeRoots]
[scopes, ., peek, (, ), ., getRootNode, (, )]
[scopes, ., peek, (, )]
[scopes]
[scopeRoots, ., peek, (, )]
[scopeRoots]
[Preconditions, ., checkState, (, curNode, !=, null, )]
[Preconditions]
[curNode, !=, null]
[curNode]
[null]
[scopeRoots, ., push, (, node, )]
[scopeRoots]
[node]
[cfgs, ., push, (, null, )]
[cfgs]
[null]
[scopeCallback, !=, null]
[scopeCallback]
[null]
[scopeCallback, ., enterScope, (, this, )]
[scopeCallback]
[this]
[Preconditions, ., checkState, (, curNode, !=, null, )]
[Preconditions]
[curNode, !=, null]
[curNode]
[null]
[scopes, ., push, (, s, )]
[scopes]
[s]
[cfgs, ., push, (, null, )]
[cfgs]
[null]
[scopeCallback, !=, null]
[scopeCallback]
[null]
[scopeCallback, ., enterScope, (, this, )]
[scopeCallback]
[this]
[scopeCallback, !=, null]
[scopeCallback]
[null]
[scopeCallback, ., exitScope, (, this, )]
[scopeCallback]
[this]
[scopeRoots, ., isEmpty, (, )]
[scopeRoots]
[scopes, ., pop, (, )]
[scopes]
[scopeRoots, ., pop, (, )]
[scopeRoots]
[cfgs, ., pop, (, )]
[cfgs]
[scopes, ., isEmpty, (, ), ?, null, :, scopes, ., peek, (, )]
[scopes, ., isEmpty, (, )]
[scopes]
[null]
[scopes, ., peek, (, )]
[scopes]
[scopeRoots, ., isEmpty, (, )]
[scopeRoots]
[scope]
[scopeRoots, ., descendingIterator, (, )]
[scopeRoots]
[it, ., hasNext, (, )]
[it]
[scope]
[scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, )]
[scopeCreator]
[it, ., next, (, )]
[it]
[scope]
[scopes, ., push, (, scope, )]
[scopes]
[scope]
[scopeRoots, ., clear, (, )]
[scopeRoots]
[scope]
[cfgs, ., peek, (, ), ==, null]
[cfgs, ., peek, (, )]
[cfgs]
[null]
[new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, )]
[compiler]
[false]
[true]
[cfa, ., process, (, null, ,, getScopeRoot, (, ), )]
[cfa]
[null]
[getScopeRoot, (, )]
[cfgs, ., pop, (, )]
[cfgs]
[cfgs, ., push, (, cfa, ., getCfg, (, ), )]
[cfgs]
[cfa, ., getCfg, (, )]
[cfa]
[cfgs, ., peek, (, )]
[cfgs]
[scopeRoots, ., isEmpty, (, )]
[scopeRoots]
[scopes, ., peek, (, ), ., getRootNode, (, )]
[scopes, ., peek, (, )]
[scopes]
[scopeRoots, ., peek, (, )]
[scopeRoots]
[getScopeDepth, (, ), <=, 1]
[getScopeDepth, (, )]
[1]
[scopes, ., size, (, ), +, scopeRoots, ., size, (, )]
[scopes, ., size, (, )]
[scopes]
[scopeRoots, ., size, (, )]
[scopeRoots]
[!, (, scopes, ., isEmpty, (, ), &&, scopeRoots, ., isEmpty, (, ), )]
[(, scopes, ., isEmpty, (, ), &&, scopeRoots, ., isEmpty, (, ), )]
[scopes, ., isEmpty, (, ), &&, scopeRoots, ., isEmpty, (, )]
[scopes, ., isEmpty, (, )]
[scopes]
[scopeRoots, ., isEmpty, (, )]
[scopeRoots]
[JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,, arguments, )]
[JSError]
[getBestSourceFileName, (, n, )]
[n]
[n]
[diagnosticType]
[arguments]
[compiler, ., report, (, error, )]
[compiler]
[error]
[n, ., getSourceFileName, (, )]
[n]
[name, ==, null, ?, "", :, name]
[name, ==, null]
[name]
[null]
[""]
[name]
[inputId]
[JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, level, ,, type, ,, arguments, )]
[JSError]
[getBestSourceFileName, (, n, )]
[n]
[n]
[level]
[type]
[arguments]
[JSError, ., make, (, getBestSourceFileName, (, n, ), ,, n, ,, type, ,, arguments, )]
[JSError]
[getBestSourceFileName, (, n, )]
[n]
[n]
[type]
[arguments]
[n, ==, null, ?, sourceName, :, n, ., getSourceFileName, (, )]
[n, ==, null]
[n]
[null]
[sourceName]
[n, ., getSourceFileName, (, )]
[n]
