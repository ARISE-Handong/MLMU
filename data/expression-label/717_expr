[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[Preconditions, ., checkArgument, (, compiler, !=, null, )]
[Preconditions]
[compiler, !=, null]
[compiler]
[null]
[Preconditions, ., checkArgument, (, safeNameIdSupplier, !=, null, )]
[Preconditions]
[safeNameIdSupplier, !=, null]
[safeNameIdSupplier]
[null]
[this, ., compiler]
[this]
[compiler]
[this, ., inlineGlobalFunctions]
[this]
[inlineGlobalFunctions]
[this, ., inlineLocalFunctions]
[this]
[inlineLocalFunctions]
[this, ., blockFunctionInliningEnabled]
[this]
[blockFunctionInliningEnabled]
[this, ., assumeMinimumCapture]
[this]
[assumeMinimumCapture]
[this, ., injector]
[this]
[new, FunctionInjector, (, compiler, ,, safeNameIdSupplier, ,, true, ,, assumeStrictThis, ,, assumeMinimumCapture, )]
[compiler]
[safeNameIdSupplier]
[true]
[assumeStrictThis]
[assumeMinimumCapture]
[fns, ., get, (, fnName, )]
[fns]
[fnName]
[fs, ==, null]
[fs]
[null]
[fs]
[new, FunctionState, (, )]
[fns, ., put, (, fnName, ,, fs, )]
[fns]
[fnName]
[fs]
[fs]
[this, ., specializationState]
[this]
[specializationState]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidateFunctions, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindCandidateFunctions, (, )]
[fns, ., isEmpty, (, )]
[fns]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindCandidatesReferences, (, fns, ,, anonFns, ), )]
[NodeTraversal]
[compiler]
[root]
[new, FindCandidatesReferences, (, fns, ,, anonFns, )]
[fns]
[anonFns]
[trimCanidatesNotMeetingMinimumRequirements, (, )]
[fns, ., isEmpty, (, )]
[fns]
[Sets, ., newHashSet, (, fns, ., keySet, (, ), )]
[Sets]
[fns, ., keySet, (, )]
[fns]
[injector, ., setKnownConstants, (, fnNames, )]
[injector]
[fnNames]
[trimCanidatesUsingOnCost, (, )]
[fns, ., isEmpty, (, )]
[fns]
[resolveInlineConflicts, (, )]
[decomposeExpressions, (, fnNames, )]
[fnNames]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector, ,, specializationState, ), ), )]
[NodeTraversal]
[compiler]
[root]
[new, CallVisitor, (, fns, ,, anonFns, ,, new, Inline, (, injector, ,, specializationState, ), )]
[fns]
[anonFns]
[new, Inline, (, injector, ,, specializationState, )]
[injector]
[specializationState]
[removeInlinedFunctions, (, )]
[0]
[inlineLocalFunctions, ||, nodeTraversal, ., inGlobalScope, (, )]
[inlineLocalFunctions]
[nodeTraversal, ., inGlobalScope, (, )]
[nodeTraversal]
[(, t, ., inGlobalScope, (, ), &&, inlineGlobalFunctions, ), ||, (, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, )]
[(, t, ., inGlobalScope, (, ), &&, inlineGlobalFunctions, )]
[t, ., inGlobalScope, (, ), &&, inlineGlobalFunctions]
[t, ., inGlobalScope, (, )]
[t]
[inlineGlobalFunctions]
[(, !, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions, )]
[!, t, ., inGlobalScope, (, ), &&, inlineLocalFunctions]
[!, t, ., inGlobalScope, (, )]
[t, ., inGlobalScope, (, )]
[t]
[inlineLocalFunctions]
[findNamedFunctions, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[findFunctionExpressions, (, t, ,, n, )]
[t]
[n]
[!, NodeUtil, ., isStatement, (, n, )]
[NodeUtil, ., isStatement, (, n, )]
[NodeUtil]
[n]
[n, ., getType, (, )]
[n]
[Token, ., VAR]
[Token]
[Preconditions, ., checkState, (, n, ., hasOneChild, (, ), )]
[Preconditions]
[n, ., hasOneChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[nameNode, ., isName, (, ), &&, nameNode, ., hasChildren, (, ), &&, nameNode, ., getFirstChild, (, ), ., isFunction, (, )]
[nameNode, ., isName, (, ), &&, nameNode, ., hasChildren, (, )]
[nameNode, ., isName, (, )]
[nameNode]
[nameNode, ., hasChildren, (, )]
[nameNode]
[nameNode, ., getFirstChild, (, ), ., isFunction, (, )]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[maybeAddFunction, (, new, FunctionVar, (, n, ), ,, t, ., getModule, (, ), )]
[new, FunctionVar, (, n, )]
[n]
[t, ., getModule, (, )]
[t]
[Token, ., FUNCTION]
[Token]
[Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, ), )]
[Preconditions]
[NodeUtil, ., isStatementBlock, (, parent, ), ||, parent, ., isLabel, (, )]
[NodeUtil, ., isStatementBlock, (, parent, )]
[NodeUtil]
[parent]
[parent, ., isLabel, (, )]
[parent]
[!, NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[new, NamedFunction, (, n, )]
[n]
[maybeAddFunction, (, fn, ,, t, ., getModule, (, ), )]
[fn]
[t, ., getModule, (, )]
[t]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[null]
[n, ., getFirstChild, (, ), ., isFunction, (, )]
[n, ., getFirstChild, (, )]
[n]
[fnNode]
[n, ., getFirstChild, (, )]
[n]
[NodeUtil, ., isFunctionObjectCall, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[fnIdentifingNode, ., isFunction, (, )]
[fnIdentifingNode]
[fnNode]
[fnIdentifingNode]
[fnNode, !=, null]
[fnNode]
[null]
[new, FunctionExpression, (, fnNode, ,, callsSeen, ++, )]
[fnNode]
[callsSeen, ++]
[callsSeen]
[maybeAddFunction, (, fn, ,, t, ., getModule, (, ), )]
[fn]
[t, ., getModule, (, )]
[t]
[anonFns, ., put, (, fnNode, ,, fn, ., getName, (, ), )]
[anonFns]
[fnNode]
[fn, ., getName, (, )]
[fn]
[fn, ., getName, (, )]
[fn]
[getOrCreateFunctionState, (, name, )]
[name]
[fs, ., hasExistingFunctionDefinition, (, )]
[fs]
[fs, ., setInline, (, false, )]
[fs]
[false]
[fs, ., canInline, (, )]
[fs]
[fs, ., setFn, (, fn, )]
[fs]
[fn]
[injector, ., isDirectCallNodeReplacementPossible, (, fn, ., getFunctionNode, (, ), )]
[injector]
[fn, ., getFunctionNode, (, )]
[fn]
[fs, ., inlineDirectly, (, true, )]
[fs]
[true]
[!, isCandidateFunction, (, fn, )]
[isCandidateFunction, (, fn, )]
[fn]
[fs, ., setInline, (, false, )]
[fs]
[false]
[fs, ., canInline, (, )]
[fs]
[fs, ., setModule, (, module, )]
[fs]
[module]
[fn, ., getFunctionNode, (, )]
[fn]
[FunctionArgumentInjector, ., findModifiedParameters, (, fnNode, )]
[FunctionArgumentInjector]
[fnNode]
[!, namesToAlias, ., isEmpty, (, )]
[namesToAlias, ., isEmpty, (, )]
[namesToAlias]
[fs, ., inlineDirectly, (, false, )]
[fs]
[false]
[fs, ., setNamesToAlias, (, namesToAlias, )]
[fs]
[namesToAlias]
[NodeUtil, ., getFunctionBody, (, fnNode, )]
[NodeUtil]
[fnNode]
[NodeUtil, ., referencesThis, (, block, )]
[NodeUtil]
[block]
[fs, ., setReferencesThis, (, true, )]
[fs]
[true]
[NodeUtil, ., containsFunction, (, block, )]
[NodeUtil]
[block]
[fs, ., setHasInnerFunctions, (, true, )]
[fs]
[true]
[!, assumeMinimumCapture, &&, hasLocalNames, (, fnNode, )]
[!, assumeMinimumCapture]
[assumeMinimumCapture]
[hasLocalNames, (, fnNode, )]
[fnNode]
[fs, ., setInline, (, false, )]
[fs]
[false]
[fs, ., canInline, (, ), &&, !, fs, ., canInlineDirectly, (, )]
[fs, ., canInline, (, )]
[fs]
[!, fs, ., canInlineDirectly, (, )]
[fs, ., canInlineDirectly, (, )]
[fs]
[!, blockFunctionInliningEnabled]
[blockFunctionInliningEnabled]
[fs, ., setInline, (, false, )]
[fs]
[false]
[NodeUtil, ., getFunctionBody, (, fnNode, )]
[NodeUtil]
[fnNode]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., hasChildren, (, ), ||, NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[NodeUtil, ., getFunctionParameters, (, fnNode, ), ., hasChildren, (, )]
[NodeUtil, ., getFunctionParameters, (, fnNode, )]
[NodeUtil]
[fnNode]
[NodeUtil, ., has, (, block, ,, new, NodeUtil, ., MatchDeclaration, (, ), ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[NodeUtil]
[block]
[new, NodeUtil, ., MatchDeclaration, (, )]
[new, NodeUtil, ., MatchShallowStatement, (, )]
[(, t, ., inGlobalScope, (, ), ), ?, null, :, t, ., getScopeRoot, (, )]
[(, t, ., inGlobalScope, (, ), )]
[t, ., inGlobalScope, (, )]
[t]
[null]
[t, ., getScopeRoot, (, )]
[t]
[fn, ., getName, (, )]
[fn]
[compiler, ., getCodingConvention, (, ), ., isExported, (, fnName, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[fnName]
[false]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, )]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME]
[RenameProperties]
[fnName]
[false]
[specializationState, !=, null, &&, !, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), )]
[specializationState, !=, null]
[specializationState]
[null]
[!, specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), )]
[specializationState, ., canFixupFunction, (, fn, ., getFunctionNode, (, ), )]
[specializationState]
[fn, ., getFunctionNode, (, )]
[fn]
[false]
[fn, ., getFunctionNode, (, )]
[fn]
[injector, ., doesFunctionMeetMinimumRequirements, (, fnName, ,, fnNode, )]
[injector]
[fnName]
[fnNode]
[this, ., functionMap]
[this]
[fns]
[this, ., anonFunctionMap]
[this]
[anonFns]
[this, ., callback]
[this]
[callback]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[n, ., getFirstChild, (, )]
[n]
[null]
[child, ., isName, (, )]
[child]
[name]
[child, ., getString, (, )]
[child]
[child, ., isFunction, (, )]
[child]
[name]
[anonFunctionMap, ., get, (, child, )]
[anonFunctionMap]
[child]
[NodeUtil, ., isFunctionObjectCall, (, n, )]
[NodeUtil]
[n]
[Preconditions, ., checkState, (, NodeUtil, ., isGet, (, child, ), )]
[Preconditions]
[NodeUtil, ., isGet, (, child, )]
[NodeUtil]
[child]
[child, ., getFirstChild, (, )]
[child]
[fnIdentifingNode, ., isName, (, )]
[fnIdentifingNode]
[name]
[fnIdentifingNode, ., getString, (, )]
[fnIdentifingNode]
[fnIdentifingNode, ., isFunction, (, )]
[fnIdentifingNode]
[name]
[anonFunctionMap, ., get, (, fnIdentifingNode, )]
[anonFunctionMap]
[fnIdentifingNode]
[name, !=, null]
[name]
[null]
[functionMap, ., get, (, name, )]
[functionMap]
[name]
[fs, !=, null]
[fs]
[null]
[callback, ., visitCallSite, (, t, ,, n, ,, parent, ,, fs, )]
[callback]
[t]
[n]
[parent]
[fs]
[name, ., getParent, (, )]
[name]
[Preconditions, ., checkState, (, name, ., isName, (, ), )]
[Preconditions]
[name, ., isName, (, )]
[name]
[parent, ., isVar, (, ), ||, parent, ., isFunction, (, )]
[parent, ., isVar, (, )]
[parent]
[parent, ., isFunction, (, )]
[parent]
[true]
[parent, ., isCall, (, ), &&, parent, ., getFirstChild, (, ), ==, name]
[parent, ., isCall, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, name]
[parent, ., getFirstChild, (, )]
[parent]
[name]
[true]
[NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, ), &&, name, ., getNext, (, ), ., getString, (, ), ., equals, (, "call", )]
[NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild, (, ), &&, name, ., getNext, (, ), ., isString, (, )]
[NodeUtil, ., isGet, (, parent, ), &&, name, ==, parent, ., getFirstChild, (, )]
[NodeUtil, ., isGet, (, parent, )]
[NodeUtil]
[parent]
[name, ==, parent, ., getFirstChild, (, )]
[name]
[parent, ., getFirstChild, (, )]
[parent]
[name, ., getNext, (, ), ., isString, (, )]
[name, ., getNext, (, )]
[name]
[name, ., getNext, (, ), ., getString, (, ), ., equals, (, "call", )]
[name, ., getNext, (, ), ., getString, (, )]
[name, ., getNext, (, )]
[name]
["call"]
[name, ., getAncestor, (, 2, )]
[name]
[2]
[gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent]
[gramps, ., isCall, (, )]
[gramps]
[gramps, ., getFirstChild, (, ), ==, parent]
[gramps, ., getFirstChild, (, )]
[gramps]
[parent]
[true]
[false]
[fns]
[anonFns]
[null]
[this, ., callback]
[this]
[this]
[super, ., visit, (, t, ,, n, ,, parent, )]
[super]
[t]
[n]
[parent]
[n, ., isName, (, )]
[n]
[checkNameUsage, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[maybeAddReference, (, t, ,, fs, ,, callNode, ,, t, ., getModule, (, ), )]
[t]
[fs]
[callNode]
[t, ., getModule, (, )]
[t]
[!, fs, ., canInline, (, )]
[fs, ., canInline, (, )]
[fs]
[false]
[fs, ., canInlineDirectly, (, ), ?, InliningMode, ., DIRECT, :, InliningMode, ., BLOCK]
[fs, ., canInlineDirectly, (, )]
[fs]
[InliningMode, ., DIRECT]
[InliningMode]
[InliningMode, ., BLOCK]
[InliningMode]
[referenceAdded]
[maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, )]
[t]
[fs]
[callNode]
[module]
[mode]
[!, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT, &&, blockFunctionInliningEnabled]
[!, referenceAdded, &&, mode, ==, InliningMode, ., DIRECT]
[!, referenceAdded]
[referenceAdded]
[mode, ==, InliningMode, ., DIRECT]
[mode]
[InliningMode, ., DIRECT]
[InliningMode]
[blockFunctionInliningEnabled]
[mode]
[InliningMode, ., BLOCK]
[InliningMode]
[referenceAdded]
[maybeAddReferenceUsingMode, (, t, ,, fs, ,, callNode, ,, module, ,, mode, )]
[t]
[fs]
[callNode]
[module]
[mode]
[!, referenceAdded]
[referenceAdded]
[fs, ., setRemove, (, false, )]
[fs]
[false]
[specializationState, !=, null]
[specializationState]
[null]
[getContainingFunction, (, t, )]
[t]
[containingFunction, !=, null, &&, !, specializationState, ., canFixupFunction, (, containingFunction, )]
[containingFunction, !=, null]
[containingFunction]
[null]
[!, specializationState, ., canFixupFunction, (, containingFunction, )]
[specializationState, ., canFixupFunction, (, containingFunction, )]
[specializationState]
[containingFunction]
[false]
[injector, ., canInlineReferenceToFunction, (, t, ,, callNode, ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getNamesToAlias, (, ), ,, mode, ,, fs, ., getReferencesThis, (, ), ,, fs, ., hasInnerFunctions, (, ), )]
[injector]
[t]
[callNode]
[fs, ., getFn, (, ), ., getFunctionNode, (, )]
[fs, ., getFn, (, )]
[fs]
[fs, ., getNamesToAlias, (, )]
[fs]
[mode]
[fs, ., getReferencesThis, (, )]
[fs]
[fs, ., hasInnerFunctions, (, )]
[fs]
[result, !=, CanInlineResult, ., NO]
[result]
[CanInlineResult, ., NO]
[CanInlineResult]
[(, result, ==, CanInlineResult, ., AFTER_PREPARATION, )]
[result, ==, CanInlineResult, ., AFTER_PREPARATION]
[result]
[CanInlineResult, ., AFTER_PREPARATION]
[CanInlineResult]
[fs, ., addReference, (, new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, ), )]
[fs]
[new, Reference, (, callNode, ,, module, ,, mode, ,, decompose, )]
[callNode]
[module]
[mode]
[decompose]
[true]
[false]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[isCandidateUsage, (, n, )]
[n]
[n, ., getString, (, )]
[n]
[fns, ., get, (, name, )]
[fns]
[name]
[fs, ==, null]
[fs]
[null]
[parent, ., isNew, (, )]
[parent]
[parent, ., getFirstChild, (, )]
[parent]
[target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, )]
[target, ., isName, (, )]
[target]
[target, ., getString, (, ), ., equals, (, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, )]
[target, ., getString, (, )]
[target]
[ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING]
[ObjectPropertyStringPreprocess]
[fs, ., setInline, (, false, )]
[fs]
[false]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[fs, ., setInline, (, false, )]
[fs]
[false]
[fs, ., setRemove, (, false, )]
[fs]
[false]
[this, ., injector]
[this]
[injector]
[this, ., specializationState]
[this]
[specializationState]
[Preconditions, ., checkState, (, fs, ., hasExistingFunctionDefinition, (, ), )]
[Preconditions]
[fs, ., hasExistingFunctionDefinition, (, )]
[fs]
[fs, ., canInline, (, )]
[fs]
[fs, ., getReference, (, callNode, )]
[fs]
[callNode]
[ref, !=, null]
[ref]
[null]
[specializationState, !=, null]
[specializationState]
[null]
[getContainingFunction, (, t, )]
[t]
[containingFunction, !=, null]
[containingFunction]
[null]
[specializationState, ., reportSpecializedFunction, (, containingFunction, )]
[specializationState]
[containingFunction]
[inlineFunction, (, t, ,, callNode, ,, fs, ,, ref, ., mode, )]
[t]
[callNode]
[fs]
[ref, ., mode]
[ref]
[ref, ., inlined]
[ref]
[true]
[fs, ., getFn, (, )]
[fs]
[fn, ., getName, (, )]
[fn]
[fs, ., getSafeFnNode, (, )]
[fs]
[injector, ., inline, (, t, ,, callNode, ,, fnName, ,, fnNode, ,, mode, )]
[injector]
[t]
[callNode]
[fnName]
[fnNode]
[mode]
[t, ., getCompiler, (, ), ., reportCodeChange, (, )]
[t, ., getCompiler, (, )]
[t]
[t, ., getCompiler, (, ), ., addToDebugLog, (, "Inlined function: ", +, fn, ., getName, (, ), )]
[t, ., getCompiler, (, )]
[t]
["Inlined function: ", +, fn, ., getName, (, )]
["Inlined function: "]
[fn, ., getName, (, )]
[fn]
[i]
[fns, ., entrySet, (, ), ., iterator, (, )]
[fns, ., entrySet, (, )]
[fns]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, ), ., getValue, (, )]
[i, ., next, (, )]
[i]
[!, fs, ., hasExistingFunctionDefinition, (, ), ||, !, fs, ., canInline, (, )]
[!, fs, ., hasExistingFunctionDefinition, (, )]
[fs, ., hasExistingFunctionDefinition, (, )]
[fs]
[!, fs, ., canInline, (, )]
[fs, ., canInline, (, )]
[fs]
[i, ., remove, (, )]
[i]
[i]
[fns, ., entrySet, (, ), ., iterator, (, )]
[fns, ., entrySet, (, )]
[fns]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, ), ., getValue, (, )]
[i, ., next, (, )]
[i]
[fs, ., hasReferences, (, )]
[fs]
[mimimizeCost, (, fs, )]
[fs]
[!, lowersCost]
[lowersCost]
[i, ., remove, (, )]
[i]
[!, fs, ., canRemove, (, )]
[fs, ., canRemove, (, )]
[fs]
[i, ., remove, (, )]
[i]
[!, inliningLowersCost, (, fs, )]
[inliningLowersCost, (, fs, )]
[fs]
[fs, ., hasBlockInliningReferences, (, )]
[fs]
[fs, ., setRemove, (, false, )]
[fs]
[false]
[fs, ., removeBlockInliningReferences, (, )]
[fs]
[!, fs, ., hasReferences, (, ), ||, !, inliningLowersCost, (, fs, )]
[!, fs, ., hasReferences, (, )]
[fs, ., hasReferences, (, )]
[fs]
[!, inliningLowersCost, (, fs, )]
[inliningLowersCost, (, fs, )]
[fs]
[false]
[false]
[true]
[injector, ., inliningLowersCost, (, fs, ., getModule, (, ), ,, fs, ., getFn, (, ), ., getFunctionNode, (, ), ,, fs, ., getReferences, (, ), ,, fs, ., getNamesToAlias, (, ), ,, fs, ., canRemove, (, ), ,, fs, ., getReferencesThis, (, ), )]
[injector]
[fs, ., getModule, (, )]
[fs]
[fs, ., getFn, (, ), ., getFunctionNode, (, )]
[fs, ., getFn, (, )]
[fs]
[fs, ., getReferences, (, )]
[fs]
[fs, ., getNamesToAlias, (, )]
[fs]
[fs, ., canRemove, (, )]
[fs]
[fs, ., getReferencesThis, (, )]
[fs]
[fns, ., values, (, )]
[fns]
[resolveInlineConflictsForFunction, (, fs, )]
[fs]
[!, fs, ., hasReferences, (, ), ||, !, fs, ., canInline, (, )]
[!, fs, ., hasReferences, (, )]
[fs, ., hasReferences, (, )]
[fs]
[!, fs, ., canInline, (, )]
[fs, ., canInline, (, )]
[fs]
[fs, ., getFn, (, ), ., getFunctionNode, (, )]
[fs, ., getFn, (, )]
[fs]
[findCalledFunctions, (, fnNode, )]
[fnNode]
[!, names, ., isEmpty, (, )]
[names, ., isEmpty, (, )]
[names]
[names]
[fns, ., get, (, name, )]
[fns]
[name]
[fsCalled, !=, null, &&, fsCalled, ., canRemove, (, )]
[fsCalled, !=, null]
[fsCalled]
[null]
[fsCalled, ., canRemove, (, )]
[fsCalled]
[fsCalled, ., setRemove, (, false, )]
[fsCalled]
[false]
[!, mimimizeCost, (, fsCalled, )]
[mimimizeCost, (, fsCalled, )]
[fsCalled]
[fsCalled, ., setInline, (, false, )]
[fsCalled]
[false]
[fs, ., setSafeFnNode, (, fs, ., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree, (, ), )]
[fs]
[fs, ., getFn, (, ), ., getFunctionNode, (, ), ., cloneTree, (, )]
[fs, ., getFn, (, ), ., getFunctionNode, (, )]
[fs, ., getFn, (, )]
[fs]
[Sets, ., newHashSet, (, )]
[Sets]
[findCalledFunctions, (, NodeUtil, ., getFunctionBody, (, node, ), ,, changed, )]
[NodeUtil, ., getFunctionBody, (, node, )]
[NodeUtil]
[node]
[changed]
[changed]
[Preconditions, ., checkArgument, (, changed, !=, null, )]
[Preconditions]
[changed, !=, null]
[changed]
[null]
[node, ., isName, (, )]
[node]
[isCandidateUsage, (, node, )]
[node]
[changed, ., add, (, node, ., getString, (, ), )]
[changed]
[node, ., getString, (, )]
[node]
[node, ., getFirstChild, (, )]
[node]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[findCalledFunctions, (, c, ,, changed, )]
[c]
[changed]
[new, ExpressionDecomposer, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, fnNames, )]
[compiler]
[compiler, ., getUniqueNameIdSupplier, (, )]
[compiler]
[fnNames]
[fns, ., values, (, )]
[fns]
[fs, ., canInline, (, )]
[fs]
[fs, ., getReferences, (, )]
[fs]
[ref, ., requiresDecomposition]
[ref]
[injector, ., maybePrepareCall, (, ref, ., callNode, )]
[injector]
[ref, ., callNode]
[ref]
[fns, ., values, (, )]
[fns]
[fs, ., canRemove, (, )]
[fs]
[fs, ., getFn, (, )]
[fs]
[Preconditions, ., checkState, (, fs, ., canInline, (, ), )]
[Preconditions]
[fs, ., canInline, (, )]
[fs]
[Preconditions, ., checkState, (, fn, !=, null, )]
[Preconditions]
[fn, !=, null]
[fn]
[null]
[verifyAllReferencesInlined, (, fs, )]
[fs]
[specializationState, !=, null]
[specializationState]
[null]
[specializationState, ., reportRemovedFunction, (, fn, ., getFunctionNode, (, ), ,, fn, ., getDeclaringBlock, (, ), )]
[specializationState]
[fn, ., getFunctionNode, (, )]
[fn]
[fn, ., getDeclaringBlock, (, )]
[fn]
[fn, ., remove, (, )]
[fn]
[compiler, ., reportCodeChange, (, )]
[compiler]
[fs, ., getReferences, (, )]
[fs]
[!, ref, ., inlined]
[ref, ., inlined]
[ref]
[new, IllegalStateException, (, "Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, ), )]
["Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  ", +, ref, ., callNode, ., getParent, (, ), ., toStringTree, (, )]
["Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, ), +, "\n parent:  "]
["Call site missed.\n call: ", +, ref, ., callNode, ., toStringTree, (, )]
["Call site missed.\n call: "]
[ref, ., callNode, ., toStringTree, (, )]
[ref, ., callNode]
[ref]
["\n parent:  "]
[ref, ., callNode, ., getParent, (, ), ., toStringTree, (, )]
[ref, ., callNode, ., getParent, (, )]
[ref, ., callNode]
[ref]
[null]
[null]
[true]
[true]
[false]
[false]
[false]
[null]
[null]
[null]
[(, fn, !=, null, )]
[fn, !=, null]
[fn]
[null]
[this, ., referencesThis]
[this]
[referencesThis]
[this, ., referencesThis]
[this]
[this, ., hasInnerFunctions]
[this]
[hasInnerFunctions]
[hasInnerFunctions]
[i]
[getReferencesInternal, (, ), ., entrySet, (, ), ., iterator, (, )]
[getReferencesInternal, (, ), ., entrySet, (, )]
[getReferencesInternal, (, )]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[entry, ., getValue, (, ), ., mode, ==, InliningMode, ., BLOCK]
[entry, ., getValue, (, ), ., mode]
[entry, ., getValue, (, )]
[entry]
[InliningMode, ., BLOCK]
[InliningMode]
[i, ., remove, (, )]
[i]
[getReferencesInternal, (, ), ., values, (, )]
[getReferencesInternal, (, )]
[r, ., mode, ==, InliningMode, ., BLOCK]
[r, ., mode]
[r]
[InliningMode, ., BLOCK]
[InliningMode]
[true]
[false]
[fn]
[Preconditions, ., checkState, (, this, ., fn, ==, null, )]
[Preconditions]
[this, ., fn, ==, null]
[this, ., fn]
[this]
[null]
[this, ., fn]
[this]
[fn]
[(, safeFnNode, !=, null, ), ?, safeFnNode, :, fn, ., getFunctionNode, (, )]
[(, safeFnNode, !=, null, )]
[safeFnNode, !=, null]
[safeFnNode]
[null]
[safeFnNode]
[fn, ., getFunctionNode, (, )]
[fn]
[this, ., safeFnNode]
[this]
[safeFnNode]
[inline]
[this, ., inline]
[this]
[inline]
[inline, ==, false]
[inline]
[false]
[references]
[null]
[remove]
[false]
[remove]
[this, ., remove]
[this]
[remove]
[inlineDirectly]
[this, ., inlineDirectly]
[this]
[directReplacement]
[(, references, !=, null, &&, !, references, ., isEmpty, (, ), )]
[references, !=, null, &&, !, references, ., isEmpty, (, )]
[references, !=, null]
[references]
[null]
[!, references, ., isEmpty, (, )]
[references, ., isEmpty, (, )]
[references]
[references, ==, null]
[references]
[null]
[Collections, ., emptyMap, (, )]
[Collections]
[references]
[references, ==, null]
[references]
[null]
[references]
[Maps, ., newHashMap, (, )]
[Maps]
[references, ., put, (, ref, ., callNode, ,, ref, )]
[references]
[ref, ., callNode]
[ref]
[ref]
[getReferencesInternal, (, ), ., values, (, )]
[getReferencesInternal, (, )]
[getReferencesInternal, (, ), ., get, (, n, )]
[getReferencesInternal, (, )]
[n]
[namesToAlias, ==, null]
[namesToAlias]
[null]
[Collections, ., emptySet, (, )]
[Collections]
[Collections, ., unmodifiableSet, (, namesToAlias, )]
[Collections]
[namesToAlias]
[namesToAlias]
[names]
[this, ., module]
[this]
[module]
[module]
[this, ., fn]
[this]
[fn]
[fn, ., getFirstChild, (, ), ., getString, (, )]
[fn, ., getFirstChild, (, )]
[fn]
[fn]
[NodeUtil, ., removeChild, (, fn, ., getParent, (, ), ,, fn, )]
[NodeUtil]
[fn, ., getParent, (, )]
[fn]
[fn]
[fn, ., getParent, (, )]
[fn]
[this, ., var]
[this]
[var]
[var, ., getFirstChild, (, ), ., getString, (, )]
[var, ., getFirstChild, (, )]
[var]
[var, ., getFirstChild, (, ), ., getFirstChild, (, )]
[var, ., getFirstChild, (, )]
[var]
[NodeUtil, ., removeChild, (, var, ., getParent, (, ), ,, var, )]
[NodeUtil]
[var, ., getParent, (, )]
[var]
[var]
[var, ., getParent, (, )]
[var]
[this, ., fn]
[this]
[fn]
[this, ., fakeName]
[this]
[String, ., valueOf, (, index, )]
[String]
[index]
[fakeName]
[fn]
[null]
[false]
[callNode]
[module]
[mode]
[this, ., requiresDecomposition]
[this]
[decompose]
