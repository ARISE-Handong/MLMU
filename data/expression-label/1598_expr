[5546345482340108586L]
[new, FixedDateTimeZone, (, "UTC", ,, "UTC", ,, 0, ,, 0, )]
["UTC"]
["UTC"]
[0]
[0]
[(, 86400, *, 1000, ), -, 1]
[(, 86400, *, 1000, )]
[86400, *, 1000]
[86400]
[1000]
[1]
[setProvider0, (, null, )]
[null]
[setNameProvider0, (, null, )]
[null]
[cDefault]
[zone, ==, null]
[zone]
[null]
[DateTimeZone, ., class]
[zone]
[cDefault]
[zone, ==, null]
[zone]
[null]
[null]
[System, ., getProperty, (, "user.timezone", )]
[System]
["user.timezone"]
[id, !=, null]
[id]
[null]
[temp]
[forID, (, id, )]
[id]
[temp, ==, null]
[temp]
[null]
[temp]
[forTimeZone, (, TimeZone, ., getDefault, (, ), )]
[TimeZone, ., getDefault, (, )]
[TimeZone]
[temp, ==, null]
[temp]
[null]
[temp]
[UTC]
[cDefault]
[zone]
[temp]
[zone]
[System, ., getSecurityManager, (, )]
[System]
[sm, !=, null]
[sm]
[null]
[sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setDefault", ), )]
[sm]
[new, JodaTimePermission, (, "DateTimeZone.setDefault", )]
["DateTimeZone.setDefault"]
[zone, ==, null]
[zone]
[null]
[new, IllegalArgumentException, (, "The datetime zone must not be null", )]
["The datetime zone must not be null"]
[DateTimeZone, ., class]
[cDefault]
[zone]
[id, ==, null]
[id]
[null]
[getDefault, (, )]
[id, ., equals, (, "UTC", )]
[id]
["UTC"]
[DateTimeZone, ., UTC]
[DateTimeZone]
[cProvider, ., getZone, (, id, )]
[cProvider]
[id]
[zone, !=, null]
[zone]
[null]
[zone]
[id, ., startsWith, (, "+", ), ||, id, ., startsWith, (, "-", )]
[id, ., startsWith, (, "+", )]
[id]
["+"]
[id, ., startsWith, (, "-", )]
[id]
["-"]
[parseOffset, (, id, )]
[id]
[offset, ==, 0L]
[offset]
[0L]
[DateTimeZone, ., UTC]
[DateTimeZone]
[id]
[printOffset, (, offset, )]
[offset]
[fixedOffsetZone, (, id, ,, offset, )]
[id]
[offset]
[new, IllegalArgumentException, (, "The datetime zone id '", +, id, +, "' is not recognised", )]
["The datetime zone id '", +, id, +, "' is not recognised"]
["The datetime zone id '", +, id]
["The datetime zone id '"]
[id]
["' is not recognised"]
[forOffsetHoursMinutes, (, hoursOffset, ,, 0, )]
[hoursOffset]
[0]
[hoursOffset, ==, 0, &&, minutesOffset, ==, 0]
[hoursOffset, ==, 0]
[hoursOffset]
[0]
[minutesOffset, ==, 0]
[minutesOffset]
[0]
[DateTimeZone, ., UTC]
[DateTimeZone]
[hoursOffset, <, -, 23, ||, hoursOffset, >, 23]
[hoursOffset, <, -, 23]
[hoursOffset]
[-, 23]
[23]
[hoursOffset, >, 23]
[hoursOffset]
[23]
[new, IllegalArgumentException, (, "Hours out of range: ", +, hoursOffset, )]
["Hours out of range: ", +, hoursOffset]
["Hours out of range: "]
[hoursOffset]
[minutesOffset, <, -, 59, ||, minutesOffset, >, 59]
[minutesOffset, <, -, 59]
[minutesOffset]
[-, 59]
[59]
[minutesOffset, >, 59]
[minutesOffset]
[59]
[new, IllegalArgumentException, (, "Minutes out of range: ", +, minutesOffset, )]
["Minutes out of range: ", +, minutesOffset]
["Minutes out of range: "]
[minutesOffset]
[hoursOffset, >, 0, &&, minutesOffset, <, 0]
[hoursOffset, >, 0]
[hoursOffset]
[0]
[minutesOffset, <, 0]
[minutesOffset]
[0]
[new, IllegalArgumentException, (, "Positive hours must not have negative minutes: ", +, minutesOffset, )]
["Positive hours must not have negative minutes: ", +, minutesOffset]
["Positive hours must not have negative minutes: "]
[minutesOffset]
[0]
[hoursOffset, *, 60]
[hoursOffset]
[60]
[hoursInMinutes, <, 0]
[hoursInMinutes]
[0]
[minutesOffset]
[hoursInMinutes, -, Math, ., abs, (, minutesOffset, )]
[hoursInMinutes]
[Math, ., abs, (, minutesOffset, )]
[Math]
[minutesOffset]
[minutesOffset]
[hoursInMinutes, +, minutesOffset]
[hoursInMinutes]
[minutesOffset]
[offset]
[FieldUtils, ., safeMultiply, (, minutesOffset, ,, DateTimeConstants, ., MILLIS_PER_MINUTE, )]
[FieldUtils]
[minutesOffset]
[DateTimeConstants, ., MILLIS_PER_MINUTE]
[DateTimeConstants]
[new, IllegalArgumentException, (, "Offset is too large", )]
["Offset is too large"]
[forOffsetMillis, (, offset, )]
[offset]
[millisOffset, <, -, MAX_MILLIS, ||, millisOffset, >, MAX_MILLIS]
[millisOffset, <, -, MAX_MILLIS]
[millisOffset]
[-, MAX_MILLIS]
[MAX_MILLIS]
[millisOffset, >, MAX_MILLIS]
[millisOffset]
[MAX_MILLIS]
[new, IllegalArgumentException, (, "Millis out of range: ", +, millisOffset, )]
["Millis out of range: ", +, millisOffset]
["Millis out of range: "]
[millisOffset]
[printOffset, (, millisOffset, )]
[millisOffset]
[fixedOffsetZone, (, id, ,, millisOffset, )]
[id]
[millisOffset]
[zone, ==, null]
[zone]
[null]
[getDefault, (, )]
[zone, ., getID, (, )]
[zone]
[id, ., equals, (, "UTC", )]
[id]
["UTC"]
[DateTimeZone, ., UTC]
[DateTimeZone]
[null]
[getConvertedId, (, id, )]
[id]
[convId, !=, null]
[convId]
[null]
[dtz]
[cProvider, ., getZone, (, convId, )]
[cProvider]
[convId]
[dtz, ==, null]
[dtz]
[null]
[dtz]
[cProvider, ., getZone, (, id, )]
[cProvider]
[id]
[dtz, !=, null]
[dtz]
[null]
[dtz]
[convId, ==, null]
[convId]
[null]
[convId]
[zone, ., getID, (, )]
[zone]
[convId, ., startsWith, (, "GMT+", ), ||, convId, ., startsWith, (, "GMT-", )]
[convId, ., startsWith, (, "GMT+", )]
[convId]
["GMT+"]
[convId, ., startsWith, (, "GMT-", )]
[convId]
["GMT-"]
[convId]
[convId, ., substring, (, 3, )]
[convId]
[3]
[parseOffset, (, convId, )]
[convId]
[offset, ==, 0L]
[offset]
[0L]
[DateTimeZone, ., UTC]
[DateTimeZone]
[convId]
[printOffset, (, offset, )]
[offset]
[fixedOffsetZone, (, convId, ,, offset, )]
[convId]
[offset]
[new, IllegalArgumentException, (, "The datetime zone id '", +, id, +, "' is not recognised", )]
["The datetime zone id '", +, id, +, "' is not recognised"]
["The datetime zone id '", +, id]
["The datetime zone id '"]
[id]
["' is not recognised"]
[offset, ==, 0]
[offset]
[0]
[DateTimeZone, ., UTC]
[DateTimeZone]
[iFixedOffsetCache, ==, null]
[iFixedOffsetCache]
[null]
[iFixedOffsetCache]
[new, HashMap, <, String, ,, SoftReference, <, DateTimeZone, >, >, (, )]
[iFixedOffsetCache, ., get, (, id, )]
[iFixedOffsetCache]
[id]
[ref, !=, null]
[ref]
[null]
[zone]
[ref, ., get, (, )]
[ref]
[zone, !=, null]
[zone]
[null]
[zone]
[zone]
[new, FixedDateTimeZone, (, id, ,, null, ,, offset, ,, offset, )]
[id]
[null]
[offset]
[offset]
[iFixedOffsetCache, ., put, (, id, ,, new, SoftReference, <, DateTimeZone, >, (, zone, ), )]
[iFixedOffsetCache]
[id]
[new, SoftReference, <, DateTimeZone, >, (, zone, )]
[zone]
[zone]
[cAvailableIDs]
[cProvider]
[System, ., getSecurityManager, (, )]
[System]
[sm, !=, null]
[sm]
[null]
[sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setProvider", ), )]
[sm]
[new, JodaTimePermission, (, "DateTimeZone.setProvider", )]
["DateTimeZone.setProvider"]
[setProvider0, (, provider, )]
[provider]
[provider, ==, null]
[provider]
[null]
[provider]
[getDefaultProvider, (, )]
[provider, ., getAvailableIDs, (, )]
[provider]
[ids, ==, null, ||, ids, ., size, (, ), ==, 0]
[ids, ==, null]
[ids]
[null]
[ids, ., size, (, ), ==, 0]
[ids, ., size, (, )]
[ids]
[0]
[new, IllegalArgumentException, (, "The provider doesn't have any available ids", )]
["The provider doesn't have any available ids"]
[!, ids, ., contains, (, "UTC", )]
[ids, ., contains, (, "UTC", )]
[ids]
["UTC"]
[new, IllegalArgumentException, (, "The provider doesn't support UTC", )]
["The provider doesn't support UTC"]
[!, UTC, ., equals, (, provider, ., getZone, (, "UTC", ), )]
[UTC, ., equals, (, provider, ., getZone, (, "UTC", ), )]
[UTC]
[provider, ., getZone, (, "UTC", )]
[provider]
["UTC"]
[new, IllegalArgumentException, (, "Invalid UTC zone provided", )]
["Invalid UTC zone provided"]
[cProvider]
[provider]
[cAvailableIDs]
[ids]
[null]
[System, ., getProperty, (, "org.joda.time.DateTimeZone.Provider", )]
[System]
["org.joda.time.DateTimeZone.Provider"]
[providerClass, !=, null]
[providerClass]
[null]
[provider]
[(, Provider, ), Class, ., forName, (, providerClass, ), ., newInstance, (, )]
[Class, ., forName, (, providerClass, ), ., newInstance, (, )]
[Class, ., forName, (, providerClass, )]
[Class]
[providerClass]
[new, RuntimeException, (, ex, )]
[ex]
[provider, ==, null]
[provider]
[null]
[provider]
[new, ZoneInfoProvider, (, "org/joda/time/tz/data", )]
["org/joda/time/tz/data"]
[ex, ., printStackTrace, (, )]
[ex]
[provider, ==, null]
[provider]
[null]
[provider]
[new, UTCProvider, (, )]
[provider]
[cNameProvider]
[System, ., getSecurityManager, (, )]
[System]
[sm, !=, null]
[sm]
[null]
[sm, ., checkPermission, (, new, JodaTimePermission, (, "DateTimeZone.setNameProvider", ), )]
[sm]
[new, JodaTimePermission, (, "DateTimeZone.setNameProvider", )]
["DateTimeZone.setNameProvider"]
[setNameProvider0, (, nameProvider, )]
[nameProvider]
[nameProvider, ==, null]
[nameProvider]
[null]
[nameProvider]
[getDefaultNameProvider, (, )]
[cNameProvider]
[nameProvider]
[null]
[System, ., getProperty, (, "org.joda.time.DateTimeZone.NameProvider", )]
[System]
["org.joda.time.DateTimeZone.NameProvider"]
[providerClass, !=, null]
[providerClass]
[null]
[nameProvider]
[(, NameProvider, ), Class, ., forName, (, providerClass, ), ., newInstance, (, )]
[Class, ., forName, (, providerClass, ), ., newInstance, (, )]
[Class, ., forName, (, providerClass, )]
[Class]
[providerClass]
[new, RuntimeException, (, ex, )]
[ex]
[nameProvider, ==, null]
[nameProvider]
[null]
[nameProvider]
[new, DefaultNameProvider, (, )]
[nameProvider]
[cZoneIdConversion]
[map, ==, null]
[map]
[null]
[map]
[new, HashMap, <, String, ,, String, >, (, )]
[map, ., put, (, "GMT", ,, "UTC", )]
[map]
["GMT"]
["UTC"]
[map, ., put, (, "WET", ,, "WET", )]
[map]
["WET"]
["WET"]
[map, ., put, (, "CET", ,, "CET", )]
[map]
["CET"]
["CET"]
[map, ., put, (, "MET", ,, "CET", )]
[map]
["MET"]
["CET"]
[map, ., put, (, "ECT", ,, "CET", )]
[map]
["ECT"]
["CET"]
[map, ., put, (, "EET", ,, "EET", )]
[map]
["EET"]
["EET"]
[map, ., put, (, "MIT", ,, "Pacific/Apia", )]
[map]
["MIT"]
["Pacific/Apia"]
[map, ., put, (, "HST", ,, "Pacific/Honolulu", )]
[map]
["HST"]
["Pacific/Honolulu"]
[map, ., put, (, "AST", ,, "America/Anchorage", )]
[map]
["AST"]
["America/Anchorage"]
[map, ., put, (, "PST", ,, "America/Los_Angeles", )]
[map]
["PST"]
["America/Los_Angeles"]
[map, ., put, (, "MST", ,, "America/Denver", )]
[map]
["MST"]
["America/Denver"]
[map, ., put, (, "PNT", ,, "America/Phoenix", )]
[map]
["PNT"]
["America/Phoenix"]
[map, ., put, (, "CST", ,, "America/Chicago", )]
[map]
["CST"]
["America/Chicago"]
[map, ., put, (, "EST", ,, "America/New_York", )]
[map]
["EST"]
["America/New_York"]
[map, ., put, (, "IET", ,, "America/Indiana/Indianapolis", )]
[map]
["IET"]
["America/Indiana/Indianapolis"]
[map, ., put, (, "PRT", ,, "America/Puerto_Rico", )]
[map]
["PRT"]
["America/Puerto_Rico"]
[map, ., put, (, "CNT", ,, "America/St_Johns", )]
[map]
["CNT"]
["America/St_Johns"]
[map, ., put, (, "AGT", ,, "America/Argentina/Buenos_Aires", )]
[map]
["AGT"]
["America/Argentina/Buenos_Aires"]
[map, ., put, (, "BET", ,, "America/Sao_Paulo", )]
[map]
["BET"]
["America/Sao_Paulo"]
[map, ., put, (, "ART", ,, "Africa/Cairo", )]
[map]
["ART"]
["Africa/Cairo"]
[map, ., put, (, "CAT", ,, "Africa/Harare", )]
[map]
["CAT"]
["Africa/Harare"]
[map, ., put, (, "EAT", ,, "Africa/Addis_Ababa", )]
[map]
["EAT"]
["Africa/Addis_Ababa"]
[map, ., put, (, "NET", ,, "Asia/Yerevan", )]
[map]
["NET"]
["Asia/Yerevan"]
[map, ., put, (, "PLT", ,, "Asia/Karachi", )]
[map]
["PLT"]
["Asia/Karachi"]
[map, ., put, (, "IST", ,, "Asia/Kolkata", )]
[map]
["IST"]
["Asia/Kolkata"]
[map, ., put, (, "BST", ,, "Asia/Dhaka", )]
[map]
["BST"]
["Asia/Dhaka"]
[map, ., put, (, "VST", ,, "Asia/Ho_Chi_Minh", )]
[map]
["VST"]
["Asia/Ho_Chi_Minh"]
[map, ., put, (, "CTT", ,, "Asia/Shanghai", )]
[map]
["CTT"]
["Asia/Shanghai"]
[map, ., put, (, "JST", ,, "Asia/Tokyo", )]
[map]
["JST"]
["Asia/Tokyo"]
[map, ., put, (, "ACT", ,, "Australia/Darwin", )]
[map]
["ACT"]
["Australia/Darwin"]
[map, ., put, (, "AET", ,, "Australia/Sydney", )]
[map]
["AET"]
["Australia/Sydney"]
[map, ., put, (, "SST", ,, "Pacific/Guadalcanal", )]
[map]
["SST"]
["Pacific/Guadalcanal"]
[map, ., put, (, "NST", ,, "Pacific/Auckland", )]
[map]
["NST"]
["Pacific/Auckland"]
[cZoneIdConversion]
[map]
[map, ., get, (, id, )]
[map]
[id]
[new, BaseChronology, (, ), {, private, static, final, long, serialVersionUID, =, -, 3128740902654445468L, ;, public, DateTimeZone, getZone, (, ), {, return, null, ;, }, public, Chronology, withUTC, (, ), {, return, this, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, return, this, ;, }, public, String, toString, (, ), {, return, getClass, (, ), ., getName, (, ), ;, }, }]
[-, 3128740902654445468L]
[3128740902654445468L]
[null]
[this]
[this]
[getClass, (, ), ., getName, (, )]
[getClass, (, )]
[-, (, int, ), offsetFormatter, (, ), ., withChronology, (, chrono, ), ., parseMillis, (, str, )]
[(, int, ), offsetFormatter, (, ), ., withChronology, (, chrono, ), ., parseMillis, (, str, )]
[offsetFormatter, (, ), ., withChronology, (, chrono, ), ., parseMillis, (, str, )]
[offsetFormatter, (, ), ., withChronology, (, chrono, )]
[offsetFormatter, (, )]
[chrono]
[str]
[new, StringBuffer, (, )]
[offset, >=, 0]
[offset]
[0]
[buf, ., append, (, '+', )]
[buf]
['+']
[buf, ., append, (, '-', )]
[buf]
['-']
[offset]
[-, offset]
[offset]
[offset, /, DateTimeConstants, ., MILLIS_PER_HOUR]
[offset]
[DateTimeConstants, ., MILLIS_PER_HOUR]
[DateTimeConstants]
[FormatUtils, ., appendPaddedInteger, (, buf, ,, hours, ,, 2, )]
[FormatUtils]
[buf]
[hours]
[2]
[offset]
[hours, *, (, int, ), DateTimeConstants, ., MILLIS_PER_HOUR]
[hours]
[(, int, ), DateTimeConstants, ., MILLIS_PER_HOUR]
[DateTimeConstants, ., MILLIS_PER_HOUR]
[DateTimeConstants]
[offset, /, DateTimeConstants, ., MILLIS_PER_MINUTE]
[offset]
[DateTimeConstants, ., MILLIS_PER_MINUTE]
[DateTimeConstants]
[buf, ., append, (, ':', )]
[buf]
[':']
[FormatUtils, ., appendPaddedInteger, (, buf, ,, minutes, ,, 2, )]
[FormatUtils]
[buf]
[minutes]
[2]
[offset]
[minutes, *, DateTimeConstants, ., MILLIS_PER_MINUTE]
[minutes]
[DateTimeConstants, ., MILLIS_PER_MINUTE]
[DateTimeConstants]
[offset, ==, 0]
[offset]
[0]
[buf, ., toString, (, )]
[buf]
[offset, /, DateTimeConstants, ., MILLIS_PER_SECOND]
[offset]
[DateTimeConstants, ., MILLIS_PER_SECOND]
[DateTimeConstants]
[buf, ., append, (, ':', )]
[buf]
[':']
[FormatUtils, ., appendPaddedInteger, (, buf, ,, seconds, ,, 2, )]
[FormatUtils]
[buf]
[seconds]
[2]
[offset]
[seconds, *, DateTimeConstants, ., MILLIS_PER_SECOND]
[seconds]
[DateTimeConstants, ., MILLIS_PER_SECOND]
[DateTimeConstants]
[offset, ==, 0]
[offset]
[0]
[buf, ., toString, (, )]
[buf]
[buf, ., append, (, '.', )]
[buf]
['.']
[FormatUtils, ., appendPaddedInteger, (, buf, ,, offset, ,, 3, )]
[FormatUtils]
[buf]
[offset]
[3]
[buf, ., toString, (, )]
[buf]
[cOffsetFormatter, ==, null]
[cOffsetFormatter]
[null]
[cOffsetFormatter]
[new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (, null, ,, true, ,, 2, ,, 4, ), ., toFormatter, (, )]
[new, DateTimeFormatterBuilder, (, ), ., appendTimeZoneOffset, (, null, ,, true, ,, 2, ,, 4, )]
[new, DateTimeFormatterBuilder, (, )]
[null]
[true]
[2]
[4]
[cOffsetFormatter]
[id, ==, null]
[id]
[null]
[new, IllegalArgumentException, (, "Id must not be null", )]
["Id must not be null"]
[iID]
[id]
[iID]
[getShortName, (, instant, ,, null, )]
[instant]
[null]
[locale, ==, null]
[locale]
[null]
[locale]
[Locale, ., getDefault, (, )]
[Locale]
[getNameKey, (, instant, )]
[instant]
[nameKey, ==, null]
[nameKey]
[null]
[iID]
[cNameProvider, ., getShortName, (, locale, ,, iID, ,, nameKey, )]
[cNameProvider]
[locale]
[iID]
[nameKey]
[name, !=, null]
[name]
[null]
[name]
[printOffset, (, getOffset, (, instant, ), )]
[getOffset, (, instant, )]
[instant]
[getName, (, instant, ,, null, )]
[instant]
[null]
[locale, ==, null]
[locale]
[null]
[locale]
[Locale, ., getDefault, (, )]
[Locale]
[getNameKey, (, instant, )]
[instant]
[nameKey, ==, null]
[nameKey]
[null]
[iID]
[cNameProvider, ., getName, (, locale, ,, iID, ,, nameKey, )]
[cNameProvider]
[locale]
[iID]
[nameKey]
[name, !=, null]
[name]
[null]
[name]
[printOffset, (, getOffset, (, instant, ), )]
[getOffset, (, instant, )]
[instant]
[instant, ==, null]
[instant]
[null]
[getOffset, (, DateTimeUtils, ., currentTimeMillis, (, ), )]
[DateTimeUtils, ., currentTimeMillis, (, )]
[DateTimeUtils]
[getOffset, (, instant, ., getMillis, (, ), )]
[instant, ., getMillis, (, )]
[instant]
[getOffset, (, instant, ), ==, getStandardOffset, (, instant, )]
[getOffset, (, instant, )]
[instant]
[getStandardOffset, (, instant, )]
[instant]
[getOffset, (, instantLocal, )]
[instantLocal]
[instantLocal, -, offsetLocal]
[instantLocal]
[offsetLocal]
[getOffset, (, instantAdjusted, )]
[instantAdjusted]
[offsetLocal, !=, offsetAdjusted]
[offsetLocal]
[offsetAdjusted]
[(, offsetLocal, -, offsetAdjusted, ), <, 0]
[(, offsetLocal, -, offsetAdjusted, )]
[offsetLocal, -, offsetAdjusted]
[offsetLocal]
[offsetAdjusted]
[0]
[nextTransition, (, instantAdjusted, )]
[instantAdjusted]
[nextTransition, (, instantLocal, -, offsetAdjusted, )]
[instantLocal, -, offsetAdjusted]
[instantLocal]
[offsetAdjusted]
[nextLocal, !=, nextAdjusted]
[nextLocal]
[nextAdjusted]
[offsetLocal]
[offsetLocal, >=, 0]
[offsetLocal]
[0]
[previousTransition, (, instantAdjusted, )]
[instantAdjusted]
[prev, <, instantAdjusted]
[prev]
[instantAdjusted]
[getOffset, (, prev, )]
[prev]
[offsetPrev, -, offsetLocal]
[offsetPrev]
[offsetLocal]
[instantAdjusted, -, prev, <=, diff]
[instantAdjusted, -, prev]
[instantAdjusted]
[prev]
[diff]
[offsetPrev]
[offsetAdjusted]
[getOffset, (, instantUTC, )]
[instantUTC]
[instantUTC, +, offset]
[instantUTC]
[offset]
[(, instantUTC, ^, instantLocal, ), <, 0, &&, (, instantUTC, ^, offset, ), >=, 0]
[(, instantUTC, ^, instantLocal, ), <, 0]
[(, instantUTC, ^, instantLocal, )]
[instantUTC, ^, instantLocal]
[instantUTC]
[instantLocal]
[0]
[(, instantUTC, ^, offset, ), >=, 0]
[(, instantUTC, ^, offset, )]
[instantUTC, ^, offset]
[instantUTC]
[offset]
[0]
[new, ArithmeticException, (, "Adding time zone offset caused overflow", )]
["Adding time zone offset caused overflow"]
[instantLocal]
[getOffset, (, originalInstantUTC, )]
[originalInstantUTC]
[instantLocal, -, offsetOriginal]
[instantLocal]
[offsetOriginal]
[getOffset, (, instantUTC, )]
[instantUTC]
[offsetLocalFromOriginal, ==, offsetOriginal]
[offsetLocalFromOriginal]
[offsetOriginal]
[instantUTC]
[convertLocalToUTC, (, instantLocal, ,, strict, )]
[instantLocal]
[strict]
[getOffset, (, instantLocal, )]
[instantLocal]
[getOffset, (, instantLocal, -, offsetLocal, )]
[instantLocal, -, offsetLocal]
[instantLocal]
[offsetLocal]
[offsetLocal, !=, offset]
[offsetLocal]
[offset]
[strict, ||, offsetLocal, <, 0]
[strict]
[offsetLocal, <, 0]
[offsetLocal]
[0]
[nextTransition, (, instantLocal, -, offsetLocal, )]
[instantLocal, -, offsetLocal]
[instantLocal]
[offsetLocal]
[nextLocal, ==, (, instantLocal, -, offsetLocal, )]
[nextLocal]
[(, instantLocal, -, offsetLocal, )]
[instantLocal, -, offsetLocal]
[instantLocal]
[offsetLocal]
[nextLocal]
[Long, ., MAX_VALUE]
[Long]
[nextTransition, (, instantLocal, -, offset, )]
[instantLocal, -, offset]
[instantLocal]
[offset]
[nextAdjusted, ==, (, instantLocal, -, offset, )]
[nextAdjusted]
[(, instantLocal, -, offset, )]
[instantLocal, -, offset]
[instantLocal]
[offset]
[nextAdjusted]
[Long, ., MAX_VALUE]
[Long]
[nextLocal, !=, nextAdjusted]
[nextLocal]
[nextAdjusted]
[strict]
[new, IllegalInstantException, (, instantLocal, ,, getID, (, ), )]
[instantLocal]
[getID, (, )]
[offset]
[offsetLocal]
[instantLocal, -, offset]
[instantLocal]
[offset]
[(, instantLocal, ^, instantUTC, ), <, 0, &&, (, instantLocal, ^, offset, ), <, 0]
[(, instantLocal, ^, instantUTC, ), <, 0]
[(, instantLocal, ^, instantUTC, )]
[instantLocal, ^, instantUTC]
[instantLocal]
[instantUTC]
[0]
[(, instantLocal, ^, offset, ), <, 0]
[(, instantLocal, ^, offset, )]
[instantLocal, ^, offset]
[instantLocal]
[offset]
[0]
[new, ArithmeticException, (, "Subtracting time zone offset caused overflow", )]
["Subtracting time zone offset caused overflow"]
[instantUTC]
[newZone, ==, null]
[newZone]
[null]
[newZone]
[DateTimeZone, ., getDefault, (, )]
[DateTimeZone]
[newZone, ==, this]
[newZone]
[this]
[oldInstant]
[convertUTCToLocal, (, oldInstant, )]
[oldInstant]
[newZone, ., convertLocalToUTC, (, instantLocal, ,, false, ,, oldInstant, )]
[newZone]
[instantLocal]
[false]
[oldInstant]
[isFixed, (, )]
[false]
[localDateTime, ., toDateTime, (, this, )]
[localDateTime]
[this]
[false]
[true]
[instant, -, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR]
[instant]
[3, *, DateTimeConstants, ., MILLIS_PER_HOUR]
[3]
[DateTimeConstants, ., MILLIS_PER_HOUR]
[DateTimeConstants]
[instant, +, 3, *, DateTimeConstants, ., MILLIS_PER_HOUR]
[instant]
[3, *, DateTimeConstants, ., MILLIS_PER_HOUR]
[3]
[DateTimeConstants, ., MILLIS_PER_HOUR]
[DateTimeConstants]
[getOffset, (, instantBefore, )]
[instantBefore]
[getOffset, (, instantAfter, )]
[instantAfter]
[offsetBefore, <=, offsetAfter]
[offsetBefore]
[offsetAfter]
[instant]
[offsetBefore, -, offsetAfter]
[offsetBefore]
[offsetAfter]
[nextTransition, (, instantBefore, )]
[instantBefore]
[transition, -, diff]
[transition]
[diff]
[transition, +, diff]
[transition]
[diff]
[instant, <, overlapStart, ||, instant, >=, overlapEnd]
[instant, <, overlapStart]
[instant]
[overlapStart]
[instant, >=, overlapEnd]
[instant]
[overlapEnd]
[instant]
[instant, -, overlapStart]
[instant]
[overlapStart]
[afterStart, >=, diff]
[afterStart]
[diff]
[earlierOrLater, ?, instant, :, instant, -, diff]
[earlierOrLater]
[instant]
[instant, -, diff]
[instant]
[diff]
[earlierOrLater, ?, instant, +, diff, :, instant]
[earlierOrLater]
[instant, +, diff]
[instant]
[diff]
[instant]
[java, ., util, ., TimeZone, ., getTimeZone, (, iID, )]
[java, ., util, ., TimeZone]
[java, ., util]
[java]
[iID]
[57, +, getID, (, ), ., hashCode, (, )]
[57]
[getID, (, ), ., hashCode, (, )]
[getID, (, )]
[getID, (, )]
[new, Stub, (, iID, )]
[iID]
[-, 6471952376487863581L]
[6471952376487863581L]
[iID]
[id]
[out, ., writeUTF, (, iID, )]
[out]
[iID]
[iID]
[in, ., readUTF, (, )]
[in]
[forID, (, iID, )]
[iID]
