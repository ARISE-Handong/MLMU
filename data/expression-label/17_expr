[buildTree, (, lower, ,, upper, )]
[lower]
[upper]
[tree]
[boundary]
[Double, ., isInfinite, (, lower, ), &&, (, lower, <, 0, )]
[Double, ., isInfinite, (, lower, )]
[Double]
[lower]
[(, lower, <, 0, )]
[lower, <, 0]
[lower]
[0]
[Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, )]
[Double, ., isInfinite, (, upper, )]
[Double]
[upper]
[(, upper, >, 0, )]
[upper, >, 0]
[upper]
[0]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, ), ., wholeHyperplane, (, )]
[new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, )]
[new, Vector1D, (, upper, )]
[upper]
[true]
[new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, )]
[upperCut]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[Boolean, ., FALSE]
[Boolean]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[null]
[new, OrientedPoint, (, new, Vector1D, (, lower, ), ,, false, ), ., wholeHyperplane, (, )]
[new, OrientedPoint, (, new, Vector1D, (, lower, ), ,, false, )]
[new, Vector1D, (, lower, )]
[lower]
[false]
[Double, ., isInfinite, (, upper, ), &&, (, upper, >, 0, )]
[Double, ., isInfinite, (, upper, )]
[Double]
[upper]
[(, upper, >, 0, )]
[upper, >, 0]
[upper]
[0]
[new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, )]
[lowerCut]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[Boolean, ., FALSE]
[Boolean]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[null]
[new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, ), ., wholeHyperplane, (, )]
[new, OrientedPoint, (, new, Vector1D, (, upper, ), ,, true, )]
[new, Vector1D, (, upper, )]
[upper]
[true]
[new, BSPTree, <, Euclidean1D, >, (, lowerCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, ), ,, null, )]
[lowerCut]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[Boolean, ., FALSE]
[Boolean]
[new, BSPTree, <, Euclidean1D, >, (, upperCut, ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, ), ,, new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, ), ,, null, )]
[upperCut]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., FALSE, )]
[Boolean, ., FALSE]
[Boolean]
[new, BSPTree, <, Euclidean1D, >, (, Boolean, ., TRUE, )]
[Boolean, ., TRUE]
[Boolean]
[null]
[null]
[new, IntervalsSet, (, tree, )]
[tree]
[getTree, (, false, ), ., getCut, (, ), ==, null]
[getTree, (, false, ), ., getCut, (, )]
[getTree, (, false, )]
[false]
[null]
[setBarycenter, (, Vector1D, ., NaN, )]
[Vector1D, ., NaN]
[Vector1D]
[setSize, (, (, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, 0, )]
[(, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, 0]
[(, (, Boolean, ), getTree, (, false, ), ., getAttribute, (, ), )]
[(, Boolean, ), getTree, (, false, ), ., getAttribute, (, )]
[getTree, (, false, ), ., getAttribute, (, )]
[getTree, (, false, )]
[false]
[Double, ., POSITIVE_INFINITY]
[Double]
[0]
[0.0]
[0.0]
[asList, (, )]
[size]
[interval, ., getSize, (, )]
[interval]
[sum]
[interval, ., getSize, (, ), *, interval, ., getBarycenter, (, )]
[interval, ., getSize, (, )]
[interval]
[interval, ., getBarycenter, (, )]
[interval]
[setSize, (, size, )]
[size]
[Double, ., isInfinite, (, size, )]
[Double]
[size]
[setBarycenter, (, Vector1D, ., NaN, )]
[Vector1D, ., NaN]
[Vector1D]
[size, >=, Precision, ., SAFE_MIN]
[size]
[Precision, ., SAFE_MIN]
[Precision]
[setBarycenter, (, new, Vector1D, (, sum, /, size, ), )]
[new, Vector1D, (, sum, /, size, )]
[sum, /, size]
[sum]
[size]
[setBarycenter, (, (, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), ., getHyperplane, (, ), ), ., getLocation, (, ), )]
[(, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), ., getHyperplane, (, ), ), ., getLocation, (, )]
[(, (, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), ., getHyperplane, (, ), )]
[(, OrientedPoint, ), getTree, (, false, ), ., getCut, (, ), ., getHyperplane, (, )]
[getTree, (, false, ), ., getCut, (, ), ., getHyperplane, (, )]
[getTree, (, false, ), ., getCut, (, )]
[getTree, (, false, )]
[false]
[getTree, (, false, )]
[false]
[Double, ., POSITIVE_INFINITY]
[Double]
[node, ., getCut, (, ), !=, null]
[node, ., getCut, (, )]
[node]
[null]
[(, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[inf]
[op, ., getLocation, (, ), ., getX, (, )]
[op, ., getLocation, (, )]
[op]
[node]
[op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, )]
[op, ., isDirect, (, )]
[op]
[node, ., getMinus, (, )]
[node]
[node, ., getPlus, (, )]
[node]
[(, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., NEGATIVE_INFINITY, :, inf]
[(, (, Boolean, ), node, ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[Double, ., NEGATIVE_INFINITY]
[Double]
[inf]
[getTree, (, false, )]
[false]
[Double, ., NEGATIVE_INFINITY]
[Double]
[node, ., getCut, (, ), !=, null]
[node, ., getCut, (, )]
[node]
[null]
[(, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[sup]
[op, ., getLocation, (, ), ., getX, (, )]
[op, ., getLocation, (, )]
[op]
[node]
[op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, )]
[op, ., isDirect, (, )]
[op]
[node, ., getPlus, (, )]
[node]
[node, ., getMinus, (, )]
[node]
[(, (, Boolean, ), node, ., getAttribute, (, ), ), ?, Double, ., POSITIVE_INFINITY, :, sup]
[(, (, Boolean, ), node, ., getAttribute, (, ), )]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[Double, ., POSITIVE_INFINITY]
[Double]
[sup]
[new, ArrayList, <, Interval, >, (, )]
[recurseList, (, getTree, (, false, ), ,, list, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, )]
[getTree, (, false, )]
[false]
[list]
[Double, ., NEGATIVE_INFINITY]
[Double]
[Double, ., POSITIVE_INFINITY]
[Double]
[list]
[node, ., getCut, (, ), ==, null]
[node, ., getCut, (, )]
[node]
[null]
[(, Boolean, ), node, ., getAttribute, (, )]
[node, ., getAttribute, (, )]
[node]
[list, ., add, (, new, Interval, (, lower, ,, upper, ), )]
[list]
[new, Interval, (, lower, ,, upper, )]
[lower]
[upper]
[(, OrientedPoint, ), node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, ), ., getHyperplane, (, )]
[node, ., getCut, (, )]
[node]
[op, ., getLocation, (, )]
[op]
[loc, ., getX, (, )]
[loc]
[op, ., isDirect, (, ), ?, node, ., getMinus, (, ), :, node, ., getPlus, (, )]
[op, ., isDirect, (, )]
[op]
[node, ., getMinus, (, )]
[node]
[node, ., getPlus, (, )]
[node]
[op, ., isDirect, (, ), ?, node, ., getPlus, (, ), :, node, ., getMinus, (, )]
[op, ., isDirect, (, )]
[op]
[node, ., getPlus, (, )]
[node]
[node, ., getMinus, (, )]
[node]
[recurseList, (, low, ,, list, ,, lower, ,, x, )]
[low]
[list]
[lower]
[x]
[(, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, ), &&, (, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, )]
[(, checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE, )]
[checkPoint, (, low, ,, loc, ), ==, Location, ., INSIDE]
[checkPoint, (, low, ,, loc, )]
[low]
[loc]
[Location, ., INSIDE]
[Location]
[(, checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE, )]
[checkPoint, (, high, ,, loc, ), ==, Location, ., INSIDE]
[checkPoint, (, high, ,, loc, )]
[high]
[loc]
[Location, ., INSIDE]
[Location]
[x]
[list, ., remove, (, list, ., size, (, ), -, 1, ), ., getInf, (, )]
[list, ., remove, (, list, ., size, (, ), -, 1, )]
[list]
[list, ., size, (, ), -, 1]
[list, ., size, (, )]
[list]
[1]
[recurseList, (, high, ,, list, ,, x, ,, upper, )]
[high]
[list]
[x]
[upper]
