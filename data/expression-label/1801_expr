[20121229L]
[dimension]
[dimension]
[data]
[new, double, [, dimension, ]]
[dimension]
[d]
[true]
[MathUtils, ., checkNotNull, (, d, )]
[MathUtils]
[d]
[data]
[copyArray, ?, d, ., clone, (, ), :, d]
[copyArray]
[d, ., clone, (, )]
[d]
[d]
[rowDimension, !=, columnDimension]
[rowDimension]
[columnDimension]
[new, DimensionMismatchException, (, rowDimension, ,, columnDimension, )]
[rowDimension]
[columnDimension]
[new, DiagonalMatrix, (, rowDimension, )]
[rowDimension]
[new, DiagonalMatrix, (, data, )]
[data]
[MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, )]
[MatrixUtils]
[this]
[m]
[getRowDimension, (, )]
[new, double, [, dim, ]]
[dim]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[outData, [, i, ]]
[outData]
[i]
[data, [, i, ], +, m, ., data, [, i, ]]
[data, [, i, ]]
[data]
[i]
[m, ., data, [, i, ]]
[m, ., data]
[m]
[i]
[new, DiagonalMatrix, (, outData, ,, false, )]
[outData]
[false]
[MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m, )]
[MatrixUtils]
[this]
[m]
[getRowDimension, (, )]
[new, double, [, dim, ]]
[dim]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[outData, [, i, ]]
[outData]
[i]
[data, [, i, ], -, m, ., data, [, i, ]]
[data, [, i, ]]
[data]
[i]
[m, ., data, [, i, ]]
[m, ., data]
[m]
[i]
[new, DiagonalMatrix, (, outData, ,, false, )]
[outData]
[false]
[MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, )]
[MatrixUtils]
[this]
[m]
[getRowDimension, (, )]
[new, double, [, dim, ]]
[dim]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[outData, [, i, ]]
[outData]
[i]
[data, [, i, ], *, m, ., data, [, i, ]]
[data, [, i, ]]
[data]
[i]
[m, ., data, [, i, ]]
[m, ., data]
[m]
[i]
[new, DiagonalMatrix, (, outData, ,, false, )]
[outData]
[false]
[m, instanceof, DiagonalMatrix]
[m]
[multiply, (, (, DiagonalMatrix, ), m, )]
[(, DiagonalMatrix, ), m]
[m]
[MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, )]
[MatrixUtils]
[this]
[m]
[m, ., getRowDimension, (, )]
[m]
[m, ., getColumnDimension, (, )]
[m]
[new, double, [, nRows, ], [, nCols, ]]
[nRows]
[nCols]
[0]
[r, <, nRows]
[r]
[nRows]
[r, ++]
[r]
[0]
[c, <, nCols]
[c]
[nCols]
[c, ++]
[c]
[product, [, r, ], [, c, ]]
[product, [, r, ]]
[product]
[r]
[c]
[data, [, r, ], *, m, ., getEntry, (, r, ,, c, )]
[data, [, r, ]]
[data]
[r]
[m, ., getEntry, (, r, ,, c, )]
[m]
[r]
[c]
[new, Array2DRowRealMatrix, (, product, ,, false, )]
[product]
[false]
[getRowDimension, (, )]
[new, double, [, dim, ], [, dim, ]]
[dim]
[dim]
[0]
[i, <, dim]
[i]
[dim]
[i, ++]
[i]
[out, [, i, ], [, i, ]]
[out, [, i, ]]
[out]
[i]
[i]
[data, [, i, ]]
[data]
[i]
[out]
[data]
[MatrixUtils, ., checkMatrixIndex, (, this, ,, row, ,, column, )]
[MatrixUtils]
[this]
[row]
[column]
[row, ==, column, ?, data, [, row, ], :, 0]
[row, ==, column]
[row]
[column]
[data, [, row, ]]
[data]
[row]
[0]
[row, ==, column]
[row]
[column]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, )]
[MatrixUtils]
[this]
[row]
[data, [, row, ]]
[data]
[row]
[value]
[ensureZero, (, value, )]
[value]
[row, ==, column]
[row]
[column]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, )]
[MatrixUtils]
[this]
[row]
[data, [, row, ]]
[data]
[row]
[increment]
[ensureZero, (, increment, )]
[increment]
[row, ==, column]
[row]
[column]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, )]
[MatrixUtils]
[this]
[row]
[data, [, row, ]]
[data]
[row]
[factor]
[data, ., length]
[data]
[data, ., length]
[data]
[multiply, (, new, DiagonalMatrix, (, v, ,, false, ), ), ., getDataRef, (, )]
[multiply, (, new, DiagonalMatrix, (, v, ,, false, ), )]
[new, DiagonalMatrix, (, v, ,, false, )]
[v]
[false]
[operate, (, v, )]
[v]
[v, instanceof, ArrayRealVector]
[v]
[vectorData]
[(, (, ArrayRealVector, ), v, ), ., getDataRef, (, )]
[(, (, ArrayRealVector, ), v, )]
[(, ArrayRealVector, ), v]
[v]
[vectorData]
[v, ., toArray, (, )]
[v]
[MatrixUtils, ., createRealVector, (, preMultiply, (, vectorData, ), )]
[MatrixUtils]
[preMultiply, (, vectorData, )]
[vectorData]
[!, Precision, ., equals, (, 0.0, ,, value, ,, 1, )]
[Precision, ., equals, (, 0.0, ,, value, ,, 1, )]
[Precision]
[0.0]
[value]
[1]
[new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,, true, )]
[FastMath, ., abs, (, value, )]
[FastMath]
[value]
[0]
[true]
