[0.3]
[2]
[1e-12]
[5204927143605193821L]
[this, ., bandwidth]
[this]
[DEFAULT_BANDWIDTH]
[this, ., robustnessIters]
[this]
[DEFAULT_ROBUSTNESS_ITERS]
[this, ., accuracy]
[this]
[DEFAULT_ACCURACY]
[bandwidth]
[robustnessIters]
[DEFAULT_ACCURACY]
[bandwidth, <, 0, ||, bandwidth, >, 1]
[bandwidth, <, 0]
[bandwidth]
[0]
[bandwidth, >, 1]
[bandwidth]
[1]
[new, OutOfRangeException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidth, ,, 0, ,, 1, )]
[LocalizedFormats, ., BANDWIDTH]
[LocalizedFormats]
[bandwidth]
[0]
[1]
[this, ., bandwidth]
[this]
[bandwidth]
[robustnessIters, <, 0]
[robustnessIters]
[0]
[new, NotPositiveException, (, LocalizedFormats, ., ROBUSTNESS_ITERATIONS, ,, robustnessIters, )]
[LocalizedFormats, ., ROBUSTNESS_ITERATIONS]
[LocalizedFormats]
[robustnessIters]
[this, ., robustnessIters]
[this]
[robustnessIters]
[this, ., accuracy]
[this]
[accuracy]
[new, SplineInterpolator, (, ), ., interpolate, (, xval, ,, smooth, (, xval, ,, yval, ), )]
[new, SplineInterpolator, (, )]
[xval]
[smooth, (, xval, ,, yval, )]
[xval]
[yval]
[xval, ., length, !=, yval, ., length]
[xval, ., length]
[xval]
[yval, ., length]
[yval]
[new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, )]
[xval, ., length]
[xval]
[yval, ., length]
[yval]
[xval, ., length]
[xval]
[n, ==, 0]
[n]
[0]
[new, NoDataException, (, )]
[checkAllFiniteReal, (, xval, )]
[xval]
[checkAllFiniteReal, (, yval, )]
[yval]
[checkAllFiniteReal, (, weights, )]
[weights]
[MathArrays, ., checkOrder, (, xval, )]
[MathArrays]
[xval]
[n, ==, 1]
[n]
[1]
[new, double, [, ], {, yval, [, 0, ], }]
[{, yval, [, 0, ], }]
[yval, [, 0, ]]
[yval]
[0]
[n, ==, 2]
[n]
[2]
[new, double, [, ], {, yval, [, 0, ], ,, yval, [, 1, ], }]
[{, yval, [, 0, ], ,, yval, [, 1, ], }]
[yval, [, 0, ]]
[yval]
[0]
[yval, [, 1, ]]
[yval]
[1]
[(, int, ), (, bandwidth, *, n, )]
[(, bandwidth, *, n, )]
[bandwidth, *, n]
[bandwidth]
[n]
[bandwidthInPoints, <, 2]
[bandwidthInPoints]
[2]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., BANDWIDTH, ,, bandwidthInPoints, ,, 2, ,, true, )]
[LocalizedFormats, ., BANDWIDTH]
[LocalizedFormats]
[bandwidthInPoints]
[2]
[true]
[new, double, [, n, ]]
[n]
[new, double, [, n, ]]
[n]
[new, double, [, n, ]]
[n]
[new, double, [, n, ]]
[n]
[Arrays, ., fill, (, robustnessWeights, ,, 1, )]
[Arrays]
[robustnessWeights]
[1]
[0]
[iter, <=, robustnessIters]
[iter]
[robustnessIters]
[++, iter]
[iter]
[{, 0, ,, bandwidthInPoints, -, 1, }]
[0]
[bandwidthInPoints, -, 1]
[bandwidthInPoints]
[1]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[xval, [, i, ]]
[xval]
[i]
[i, >, 0]
[i]
[0]
[updateBandwidthInterval, (, xval, ,, weights, ,, i, ,, bandwidthInterval, )]
[xval]
[weights]
[i]
[bandwidthInterval]
[bandwidthInterval, [, 0, ]]
[bandwidthInterval]
[0]
[bandwidthInterval, [, 1, ]]
[bandwidthInterval]
[1]
[xval, [, i, ], -, xval, [, ileft, ], >, xval, [, iright, ], -, xval, [, i, ]]
[xval, [, i, ], -, xval, [, ileft, ]]
[xval, [, i, ]]
[xval]
[i]
[xval, [, ileft, ]]
[xval]
[ileft]
[xval, [, iright, ], -, xval, [, i, ]]
[xval, [, iright, ]]
[xval]
[iright]
[xval, [, i, ]]
[xval]
[i]
[edge]
[ileft]
[edge]
[iright]
[0]
[0]
[0]
[0]
[0]
[FastMath, ., abs, (, 1.0, /, (, xval, [, edge, ], -, x, ), )]
[FastMath]
[1.0, /, (, xval, [, edge, ], -, x, )]
[1.0]
[(, xval, [, edge, ], -, x, )]
[xval, [, edge, ], -, x]
[xval, [, edge, ]]
[xval]
[edge]
[x]
[ileft]
[k, <=, iright]
[k]
[iright]
[++, k]
[k]
[xval, [, k, ]]
[xval]
[k]
[yval, [, k, ]]
[yval]
[k]
[(, k, <, i, ), ?, x, -, xk, :, xk, -, x]
[(, k, <, i, )]
[k, <, i]
[k]
[i]
[x, -, xk]
[x]
[xk]
[xk, -, x]
[xk]
[x]
[tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ], *, weights, [, k, ]]
[tricube, (, dist, *, denom, ), *, robustnessWeights, [, k, ]]
[tricube, (, dist, *, denom, )]
[dist, *, denom]
[dist]
[denom]
[robustnessWeights, [, k, ]]
[robustnessWeights]
[k]
[weights, [, k, ]]
[weights]
[k]
[xk, *, w]
[xk]
[w]
[sumWeights]
[w]
[sumX]
[xkw]
[sumXSquared]
[xk, *, xkw]
[xk]
[xkw]
[sumY]
[yk, *, w]
[yk]
[w]
[sumXY]
[yk, *, xkw]
[yk]
[xkw]
[sumX, /, sumWeights]
[sumX]
[sumWeights]
[sumY, /, sumWeights]
[sumY]
[sumWeights]
[sumXY, /, sumWeights]
[sumXY]
[sumWeights]
[sumXSquared, /, sumWeights]
[sumXSquared]
[sumWeights]
[FastMath, ., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX, ), ), <, accuracy]
[FastMath, ., sqrt, (, FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX, ), )]
[FastMath]
[FastMath, ., abs, (, meanXSquared, -, meanX, *, meanX, )]
[FastMath]
[meanXSquared, -, meanX, *, meanX]
[meanXSquared]
[meanX, *, meanX]
[meanX]
[meanX]
[accuracy]
[beta]
[0]
[beta]
[(, meanXY, -, meanX, *, meanY, ), /, (, meanXSquared, -, meanX, *, meanX, )]
[(, meanXY, -, meanX, *, meanY, )]
[meanXY, -, meanX, *, meanY]
[meanXY]
[meanX, *, meanY]
[meanX]
[meanY]
[(, meanXSquared, -, meanX, *, meanX, )]
[meanXSquared, -, meanX, *, meanX]
[meanXSquared]
[meanX, *, meanX]
[meanX]
[meanX]
[meanY, -, beta, *, meanX]
[meanY]
[beta, *, meanX]
[beta]
[meanX]
[res, [, i, ]]
[res]
[i]
[beta, *, x, +, alpha]
[beta, *, x]
[beta]
[x]
[alpha]
[residuals, [, i, ]]
[residuals]
[i]
[FastMath, ., abs, (, yval, [, i, ], -, res, [, i, ], )]
[FastMath]
[yval, [, i, ], -, res, [, i, ]]
[yval, [, i, ]]
[yval]
[i]
[res, [, i, ]]
[res]
[i]
[iter, ==, robustnessIters]
[iter]
[robustnessIters]
[System, ., arraycopy, (, residuals, ,, 0, ,, sortedResiduals, ,, 0, ,, n, )]
[System]
[residuals]
[0]
[sortedResiduals]
[0]
[n]
[Arrays, ., sort, (, sortedResiduals, )]
[Arrays]
[sortedResiduals]
[sortedResiduals, [, n, /, 2, ]]
[sortedResiduals]
[n, /, 2]
[n]
[2]
[FastMath, ., abs, (, medianResidual, ), <, accuracy]
[FastMath, ., abs, (, medianResidual, )]
[FastMath]
[medianResidual]
[accuracy]
[0]
[i, <, n]
[i]
[n]
[++, i]
[i]
[residuals, [, i, ], /, (, 6, *, medianResidual, )]
[residuals, [, i, ]]
[residuals]
[i]
[(, 6, *, medianResidual, )]
[6, *, medianResidual]
[6]
[medianResidual]
[arg, >=, 1]
[arg]
[1]
[robustnessWeights, [, i, ]]
[robustnessWeights]
[i]
[0]
[1, -, arg, *, arg]
[1]
[arg, *, arg]
[arg]
[arg]
[robustnessWeights, [, i, ]]
[robustnessWeights]
[i]
[w, *, w]
[w]
[w]
[res]
[xval, ., length, !=, yval, ., length]
[xval, ., length]
[xval]
[yval, ., length]
[yval]
[new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, )]
[xval, ., length]
[xval]
[yval, ., length]
[yval]
[new, double, [, xval, ., length, ]]
[xval, ., length]
[xval]
[Arrays, ., fill, (, unitWeights, ,, 1.0, )]
[Arrays]
[unitWeights]
[1.0]
[smooth, (, xval, ,, yval, ,, unitWeights, )]
[xval]
[yval]
[unitWeights]
[bandwidthInterval, [, 0, ]]
[bandwidthInterval]
[0]
[bandwidthInterval, [, 1, ]]
[bandwidthInterval]
[1]
[nextNonzero, (, weights, ,, right, )]
[weights]
[right]
[nextRight, <, xval, ., length, &&, xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ]]
[nextRight, <, xval, ., length]
[nextRight]
[xval, ., length]
[xval]
[xval, [, nextRight, ], -, xval, [, i, ], <, xval, [, i, ], -, xval, [, left, ]]
[xval, [, nextRight, ], -, xval, [, i, ]]
[xval, [, nextRight, ]]
[xval]
[nextRight]
[xval, [, i, ]]
[xval]
[i]
[xval, [, i, ], -, xval, [, left, ]]
[xval, [, i, ]]
[xval]
[i]
[xval, [, left, ]]
[xval]
[left]
[nextNonzero, (, weights, ,, bandwidthInterval, [, 0, ], )]
[weights]
[bandwidthInterval, [, 0, ]]
[bandwidthInterval]
[0]
[bandwidthInterval, [, 0, ]]
[bandwidthInterval]
[0]
[nextLeft]
[bandwidthInterval, [, 1, ]]
[bandwidthInterval]
[1]
[nextRight]
[i, +, 1]
[i]
[1]
[j, <, weights, ., length, &&, weights, [, j, ], ==, 0]
[j, <, weights, ., length]
[j]
[weights, ., length]
[weights]
[weights, [, j, ], ==, 0]
[weights, [, j, ]]
[weights]
[j]
[0]
[++, j]
[j]
[j]
[FastMath, ., abs, (, x, )]
[FastMath]
[x]
[absX, >=, 1.0]
[absX]
[1.0]
[0.0]
[1, -, absX, *, absX, *, absX]
[1]
[absX, *, absX, *, absX]
[absX, *, absX]
[absX]
[absX]
[absX]
[tmp, *, tmp, *, tmp]
[tmp, *, tmp]
[tmp]
[tmp]
[tmp]
[0]
[i, <, values, ., length]
[i]
[values, ., length]
[values]
[i, ++]
[i]
[MathUtils, ., checkFinite, (, values, [, i, ], )]
[MathUtils]
[values, [, i, ]]
[values]
[i]
