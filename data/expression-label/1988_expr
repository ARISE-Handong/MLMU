[this, ., compiler]
[this]
[compiler]
[this, ., safeNameIdSupplier]
[this]
[safeNameIdSupplier]
[fnNode, ., cloneTree, (, )]
[fnNode]
[makeLocalNamesUnique, (, newFnNode, ,, isCallInLoop, )]
[newFnNode]
[isCallInLoop]
[rewriteFunctionDeclarations, (, newFnNode, ., getLastChild, (, ), )]
[newFnNode, ., getLastChild, (, )]
[newFnNode]
[FunctionArgumentInjector, ., findModifiedParameters, (, newFnNode, )]
[FunctionArgumentInjector]
[newFnNode]
[FunctionArgumentInjector, ., getFunctionCallParameterMap, (, newFnNode, ,, callNode, ,, this, ., safeNameIdSupplier, )]
[FunctionArgumentInjector]
[newFnNode]
[callNode]
[this, ., safeNameIdSupplier]
[this]
[!, args, ., isEmpty, (, )]
[args, ., isEmpty, (, )]
[args]
[hasArgs]
[FunctionArgumentInjector, ., maybeAddTempsForCallArguments, (, newFnNode, ,, args, ,, namesToAlias, ,, compiler, ., getCodingConvention, (, ), )]
[FunctionArgumentInjector]
[newFnNode]
[args]
[namesToAlias]
[compiler, ., getCodingConvention, (, )]
[compiler]
[NodeUtil, ., getFunctionBody, (, newFnNode, )]
[NodeUtil]
[newFnNode]
[newBlock, ., detachFromParent, (, )]
[newBlock]
[hasArgs]
[aliasAndInlineArguments, (, newBlock, ,, args, ,, namesToAlias, )]
[newBlock]
[args]
[namesToAlias]
[Preconditions, ., checkState, (, newBlock, ==, inlineResult, )]
[Preconditions]
[newBlock, ==, inlineResult]
[newBlock]
[inlineResult]
[isCallInLoop]
[fixUnitializedVarDeclarations, (, newBlock, )]
[newBlock]
[getLabelNameForFunction, (, fnName, )]
[fnName]
[replaceReturns, (, newBlock, ,, resultName, ,, labelName, ,, needsDefaultResult, )]
[newBlock]
[resultName]
[labelName]
[needsDefaultResult]
[Preconditions, ., checkState, (, injectableBlock, !=, null, )]
[Preconditions]
[injectableBlock, !=, null]
[injectableBlock]
[null]
[injectableBlock]
[n, ., isFunction, (, )]
[n]
[NodeUtil, ., isFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[IR, ., name, (, fnNameNode, ., getString, (, ), ), ., srcref, (, fnNameNode, )]
[IR, ., name, (, fnNameNode, ., getString, (, ), )]
[IR]
[fnNameNode, ., getString, (, )]
[fnNameNode]
[fnNameNode]
[IR, ., var, (, name, ), ., srcref, (, n, )]
[IR, ., var, (, name, )]
[IR]
[name]
[n]
[fnNameNode, ., setString, (, "", )]
[fnNameNode]
[""]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, var, )]
[n, ., getParent, (, )]
[n]
[n]
[var]
[name, ., addChildToFront, (, n, )]
[name]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[next]
[next]
[c, ., getNext, (, )]
[c]
[rewriteFunctionDeclarations, (, c, )]
[c]
[NodeUtil, ., isLoopStructure, (, n, )]
[NodeUtil]
[n]
[n, ., isVar, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[!, name, ., hasChildren, (, )]
[name, ., hasChildren, (, )]
[name]
[name]
[name, ., addChildToBack, (, NodeUtil, ., newUndefinedNode, (, srcLocation, ), )]
[name]
[NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[NodeUtil]
[srcLocation]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[fixUnitializedVarDeclarations, (, c, )]
[c]
[compiler, ., getUniqueNameIdSupplier, (, )]
[compiler]
[NodeTraversal, ., traverse, (, compiler, ,, fnNode, ,, new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), ), )]
[NodeTraversal]
[compiler]
[fnNode]
[new, MakeDeclaredNamesUnique, (, new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, ), )]
[new, InlineRenamer, (, idSupplier, ,, "inline_", ,, isCallInLoop, )]
[idSupplier]
["inline_"]
[isCallInLoop]
[new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, ), ., process, (, null, ,, fnNode, )]
[new, RenameLabels, (, compiler, ,, new, LabelNameSupplier, (, idSupplier, ), ,, false, )]
[compiler]
[new, LabelNameSupplier, (, idSupplier, )]
[idSupplier]
[false]
[null]
[fnNode]
[this, ., idSupplier]
[this]
[idSupplier]
["JSCompiler_inline_label_", +, idSupplier, ., get, (, )]
["JSCompiler_inline_label_"]
[idSupplier, ., get, (, )]
[idSupplier]
[(, fnName, ==, null, ||, fnName, ., isEmpty, (, ), ), ?, "anon", :, fnName]
[(, fnName, ==, null, ||, fnName, ., isEmpty, (, ), )]
[fnName, ==, null, ||, fnName, ., isEmpty, (, )]
[fnName, ==, null]
[fnName]
[null]
[fnName, ., isEmpty, (, )]
[fnName]
["anon"]
[fnName]
["JSCompiler_inline_label_", +, name, +, "_", +, safeNameIdSupplier, ., get, (, )]
["JSCompiler_inline_label_", +, name, +, "_"]
["JSCompiler_inline_label_", +, name]
["JSCompiler_inline_label_"]
[name]
["_"]
[safeNameIdSupplier, ., get, (, )]
[safeNameIdSupplier]
["JSCompiler_inline_this_", +, safeNameIdSupplier, ., get, (, )]
["JSCompiler_inline_this_"]
[safeNameIdSupplier, ., get, (, )]
[safeNameIdSupplier]
[namesToAlias, ==, null, ||, namesToAlias, ., isEmpty, (, )]
[namesToAlias, ==, null]
[namesToAlias]
[null]
[namesToAlias, ., isEmpty, (, )]
[namesToAlias]
[FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, argMap, )]
[FunctionArgumentInjector]
[compiler]
[fnTemplateRoot]
[null]
[argMap]
[Preconditions, ., checkState, (, result, ==, fnTemplateRoot, )]
[Preconditions]
[result, ==, fnTemplateRoot]
[result]
[fnTemplateRoot]
[result]
[Maps, ., newHashMap, (, argMap, )]
[Maps]
[argMap]
[Lists, ., newLinkedList, (, )]
[Lists]
[argMap, ., entrySet, (, )]
[argMap]
[entry, ., getKey, (, )]
[entry]
[namesToAlias, ., contains, (, name, )]
[namesToAlias]
[name]
[name, ., equals, (, THIS_MARKER, )]
[name]
[THIS_MARKER]
[NodeUtil, ., referencesThis, (, fnTemplateRoot, )]
[NodeUtil]
[fnTemplateRoot]
[entry, ., getValue, (, )]
[entry]
[!, value, ., isThis, (, ), &&, (, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), )]
[!, value, ., isThis, (, )]
[value, ., isThis, (, )]
[value]
[(, referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, ), )]
[referencesThis, ||, NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, )]
[referencesThis]
[NodeUtil, ., mayHaveSideEffects, (, value, ,, compiler, )]
[NodeUtil]
[value]
[compiler]
[getUniqueThisName, (, )]
[entry, ., getValue, (, ), ., cloneTree, (, )]
[entry, ., getValue, (, )]
[entry]
[NodeUtil, ., newVarNode, (, newName, ,, newValue, ), ., copyInformationFromForTree, (, newValue, )]
[NodeUtil, ., newVarNode, (, newName, ,, newValue, )]
[NodeUtil]
[newName]
[newValue]
[newValue]
[newVars, ., add, (, 0, ,, newNode, )]
[newVars]
[0]
[newNode]
[newArgMap, ., put, (, THIS_MARKER, ,, IR, ., name, (, newName, ), ., srcrefTree, (, newValue, ), )]
[newArgMap]
[THIS_MARKER]
[IR, ., name, (, newName, ), ., srcrefTree, (, newValue, )]
[IR, ., name, (, newName, )]
[IR]
[newName]
[newValue]
[entry, ., getValue, (, ), ., cloneTree, (, )]
[entry, ., getValue, (, )]
[entry]
[NodeUtil, ., newVarNode, (, name, ,, newValue, ), ., copyInformationFromForTree, (, newValue, )]
[NodeUtil, ., newVarNode, (, name, ,, newValue, )]
[NodeUtil]
[name]
[newValue]
[newValue]
[newVars, ., add, (, 0, ,, newNode, )]
[newVars]
[0]
[newNode]
[newArgMap, ., remove, (, name, )]
[newArgMap]
[name]
[FunctionArgumentInjector, ., inject, (, compiler, ,, fnTemplateRoot, ,, null, ,, newArgMap, )]
[FunctionArgumentInjector]
[compiler]
[fnTemplateRoot]
[null]
[newArgMap]
[Preconditions, ., checkState, (, result, ==, fnTemplateRoot, )]
[Preconditions]
[result, ==, fnTemplateRoot]
[result]
[fnTemplateRoot]
[newVars]
[fnTemplateRoot, ., addChildToFront, (, n, )]
[fnTemplateRoot]
[n]
[result]
[Preconditions, ., checkNotNull, (, block, )]
[Preconditions]
[block]
[Preconditions, ., checkNotNull, (, labelName, )]
[Preconditions]
[labelName]
[block]
[false]
[NodeUtil, ., getNodeTypeReferenceCount, (, block, ,, Token, ., RETURN, ,, new, NodeUtil, ., MatchShallowStatement, (, ), )]
[NodeUtil]
[block]
[Token, ., RETURN]
[Token]
[new, NodeUtil, ., MatchShallowStatement, (, )]
[returnCount, >, 0]
[returnCount]
[0]
[hasReturnAtExit]
[hasReturnAtExit, (, block, )]
[block]
[hasReturnAtExit]
[convertLastReturnToStatement, (, block, ,, resultName, )]
[block]
[resultName]
[returnCount, --]
[returnCount]
[returnCount, >, 0]
[returnCount]
[0]
[replaceReturnWithBreak, (, block, ,, null, ,, resultName, ,, labelName, )]
[block]
[null]
[resultName]
[labelName]
[IR, ., labelName, (, labelName, ), ., srcref, (, block, )]
[IR, ., labelName, (, labelName, )]
[IR]
[labelName]
[block]
[IR, ., label, (, name, ,, block, ), ., srcref, (, block, )]
[IR, ., label, (, name, ,, block, )]
[IR]
[name]
[block]
[block]
[IR, ., block, (, ), ., srcref, (, block, )]
[IR, ., block, (, )]
[IR]
[block]
[newRoot, ., addChildrenToBack, (, label, )]
[newRoot]
[label]
[root]
[newRoot]
[resultMustBeSet, &&, !, hasReturnAtExit, &&, resultName, !=, null]
[resultMustBeSet, &&, !, hasReturnAtExit]
[resultMustBeSet]
[!, hasReturnAtExit]
[hasReturnAtExit]
[resultName, !=, null]
[resultName]
[null]
[addDummyAssignment, (, block, ,, resultName, )]
[block]
[resultName]
[root]
[Preconditions, ., checkArgument, (, node, ., isBlock, (, ), )]
[Preconditions]
[node, ., isBlock, (, )]
[node]
[node]
[NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[NodeUtil]
[srcLocation]
[createAssignStatementNode, (, resultName, ,, retVal, )]
[resultName]
[retVal]
[resultNode, ., copyInformationFromForTree, (, node, )]
[resultNode]
[node]
[node, ., addChildrenToBack, (, resultNode, )]
[node]
[resultNode]
[block, ., getLastChild, (, )]
[block]
[Preconditions, ., checkArgument, (, ret, ., isReturn, (, ), )]
[Preconditions]
[ret, ., isReturn, (, )]
[ret]
[getReplacementReturnStatement, (, ret, ,, resultName, )]
[ret]
[resultName]
[resultNode, ==, null]
[resultNode]
[null]
[block, ., removeChild, (, ret, )]
[block]
[ret]
[resultNode, ., copyInformationFromForTree, (, ret, )]
[resultNode]
[ret]
[block, ., replaceChild, (, ret, ,, resultNode, )]
[block]
[ret]
[resultNode]
[IR, ., name, (, name, )]
[IR]
[name]
[IR, ., assign, (, nameNode, ,, expression, )]
[IR]
[nameNode]
[expression]
[NodeUtil, ., newExpr, (, assign, )]
[NodeUtil]
[assign]
[null]
[null]
[node, ., hasChildren, (, )]
[node]
[retVal]
[node, ., getFirstChild, (, ), ., cloneTree, (, )]
[node, ., getFirstChild, (, )]
[node]
[resultName, ==, null]
[resultName]
[null]
[retVal, !=, null]
[retVal]
[null]
[resultNode]
[NodeUtil, ., newExpr, (, retVal, )]
[NodeUtil]
[retVal]
[retVal, ==, null]
[retVal]
[null]
[node]
[retVal]
[NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[NodeUtil]
[srcLocation]
[resultNode]
[createAssignStatementNode, (, resultName, ,, retVal, )]
[resultName]
[retVal]
[resultNode]
[(, block, ., getLastChild, (, ), ., isReturn, (, ), )]
[block, ., getLastChild, (, ), ., isReturn, (, )]
[block, ., getLastChild, (, )]
[block]
[current, ., isFunction, (, ), ||, current, ., isExprResult, (, )]
[current, ., isFunction, (, )]
[current]
[current, ., isExprResult, (, )]
[current]
[current]
[current, ., isReturn, (, )]
[current]
[Preconditions, ., checkState, (, NodeUtil, ., isStatementBlock, (, parent, ), )]
[Preconditions]
[NodeUtil, ., isStatementBlock, (, parent, )]
[NodeUtil]
[parent]
[getReplacementReturnStatement, (, current, ,, resultName, )]
[current]
[resultName]
[IR, ., breakNode, (, IR, ., labelName, (, labelName, ), )]
[IR]
[IR, ., labelName, (, labelName, )]
[IR]
[labelName]
[breakNode, ., copyInformationFromForTree, (, current, )]
[breakNode]
[current]
[parent, ., replaceChild, (, current, ,, breakNode, )]
[parent]
[current]
[breakNode]
[resultNode, !=, null]
[resultNode]
[null]
[resultNode, ., copyInformationFromForTree, (, current, )]
[resultNode]
[current]
[parent, ., addChildBefore, (, resultNode, ,, breakNode, )]
[parent]
[resultNode]
[breakNode]
[current]
[breakNode]
[current, ., getFirstChild, (, )]
[current]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[c]
[replaceReturnWithBreak, (, c, ,, current, ,, resultName, ,, labelName, )]
[c]
[current]
[resultName]
[labelName]
[current]
