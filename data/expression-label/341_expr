[12324121189002L]
[(, Chronology, ), null]
[null]
[iChronology]
[DateTimeUtils, ., getChronology, (, chrono, ), ., withUTC, (, )]
[DateTimeUtils, ., getChronology, (, chrono, )]
[DateTimeUtils]
[chrono]
[iTypes]
[new, DateTimeFieldType, [, 0, ]]
[0]
[iValues]
[new, int, [, 0, ]]
[0]
[type]
[value]
[null]
[chronology]
[DateTimeUtils, ., getChronology, (, chronology, ), ., withUTC, (, )]
[DateTimeUtils, ., getChronology, (, chronology, )]
[DateTimeUtils]
[chronology]
[iChronology]
[chronology]
[type, ==, null]
[type]
[null]
[new, IllegalArgumentException, (, "The field type must not be null", )]
["The field type must not be null"]
[iTypes]
[new, DateTimeFieldType, [, ], {, type, }]
[{, type, }]
[type]
[iValues]
[new, int, [, ], {, value, }]
[{, value, }]
[value]
[chronology, ., validate, (, this, ,, iValues, )]
[chronology]
[this]
[iValues]
[types]
[values]
[null]
[chronology]
[DateTimeUtils, ., getChronology, (, chronology, ), ., withUTC, (, )]
[DateTimeUtils, ., getChronology, (, chronology, )]
[DateTimeUtils]
[chronology]
[iChronology]
[chronology]
[types, ==, null]
[types]
[null]
[new, IllegalArgumentException, (, "Types array must not be null", )]
["Types array must not be null"]
[values, ==, null]
[values]
[null]
[new, IllegalArgumentException, (, "Values array must not be null", )]
["Values array must not be null"]
[values, ., length, !=, types, ., length]
[values, ., length]
[values]
[types, ., length]
[types]
[new, IllegalArgumentException, (, "Values array must be the same length as the types array", )]
["Values array must be the same length as the types array"]
[types, ., length, ==, 0]
[types, ., length]
[types]
[0]
[iTypes]
[types]
[iValues]
[values]
[0]
[i, <, types, ., length]
[i]
[types, ., length]
[types]
[i, ++]
[i]
[types, [, i, ], ==, null]
[types, [, i, ]]
[types]
[i]
[null]
[new, IllegalArgumentException, (, "Types array must not contain null: index ", +, i, )]
["Types array must not contain null: index ", +, i]
["Types array must not contain null: index "]
[i]
[null]
[0]
[i, <, types, ., length]
[i]
[types, ., length]
[types]
[i, ++]
[i]
[types, [, i, ]]
[types]
[i]
[loopType, ., getDurationType, (, ), ., getField, (, iChronology, )]
[loopType, ., getDurationType, (, )]
[loopType]
[iChronology]
[i, >, 0]
[i]
[0]
[lastUnitField, ., compareTo, (, loopUnitField, )]
[lastUnitField]
[loopUnitField]
[compare, <, 0]
[compare]
[0]
[new, IllegalArgumentException, (, "Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, ), )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < "]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, )]
["Types array must be in order largest-smallest: "]
[types, [, i, -, 1, ], ., getName, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[" < "]
[loopType, ., getName, (, )]
[loopType]
[compare, ==, 0]
[compare]
[0]
[types, [, i, -, 1, ], ., getRangeDurationType, (, ), ==, null]
[types, [, i, -, 1, ], ., getRangeDurationType, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[null]
[loopType, ., getRangeDurationType, (, ), ==, null]
[loopType, ., getRangeDurationType, (, )]
[loopType]
[null]
[new, IllegalArgumentException, (, "Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and ", +, loopType, ., getName, (, ), )]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and ", +, loopType, ., getName, (, )]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and "]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, )]
["Types array must not contain duplicate: "]
[types, [, i, -, 1, ], ., getName, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[" and "]
[loopType, ., getName, (, )]
[loopType]
[loopType, ., getRangeDurationType, (, ), ==, null]
[loopType, ., getRangeDurationType, (, )]
[loopType]
[null]
[new, IllegalArgumentException, (, "Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, ), )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < "]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, )]
["Types array must be in order largest-smallest: "]
[types, [, i, -, 1, ], ., getName, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[" < "]
[loopType, ., getName, (, )]
[loopType]
[types, [, i, -, 1, ], ., getRangeDurationType, (, ), ., getField, (, iChronology, )]
[types, [, i, -, 1, ], ., getRangeDurationType, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[iChronology]
[loopType, ., getRangeDurationType, (, ), ., getField, (, iChronology, )]
[loopType, ., getRangeDurationType, (, )]
[loopType]
[iChronology]
[lastRangeField, ., compareTo, (, loopRangeField, ), <, 0]
[lastRangeField, ., compareTo, (, loopRangeField, )]
[lastRangeField]
[loopRangeField]
[0]
[new, IllegalArgumentException, (, "Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, ), )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < ", +, loopType, ., getName, (, )]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " < "]
["Types array must be in order largest-smallest: ", +, types, [, i, -, 1, ], ., getName, (, )]
["Types array must be in order largest-smallest: "]
[types, [, i, -, 1, ], ., getName, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[" < "]
[loopType, ., getName, (, )]
[loopType]
[lastRangeField, ., compareTo, (, loopRangeField, ), ==, 0]
[lastRangeField, ., compareTo, (, loopRangeField, )]
[lastRangeField]
[loopRangeField]
[0]
[new, IllegalArgumentException, (, "Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and ", +, loopType, ., getName, (, ), )]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and ", +, loopType, ., getName, (, )]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, ), +, " and "]
["Types array must not contain duplicate: ", +, types, [, i, -, 1, ], ., getName, (, )]
["Types array must not contain duplicate: "]
[types, [, i, -, 1, ], ., getName, (, )]
[types, [, i, -, 1, ]]
[types]
[i, -, 1]
[i]
[1]
[" and "]
[loopType, ., getName, (, )]
[loopType]
[lastUnitField]
[loopUnitField]
[iTypes]
[(, DateTimeFieldType, [, ], ), types, ., clone, (, )]
[types, ., clone, (, )]
[types]
[chronology, ., validate, (, this, ,, values, )]
[chronology]
[this]
[values]
[iValues]
[(, int, [, ], ), values, ., clone, (, )]
[values, ., clone, (, )]
[values]
[partial, ==, null]
[partial]
[null]
[new, IllegalArgumentException, (, "The partial must not be null", )]
["The partial must not be null"]
[iChronology]
[DateTimeUtils, ., getChronology, (, partial, ., getChronology, (, ), ), ., withUTC, (, )]
[DateTimeUtils, ., getChronology, (, partial, ., getChronology, (, ), )]
[DateTimeUtils]
[partial, ., getChronology, (, )]
[partial]
[iTypes]
[new, DateTimeFieldType, [, partial, ., size, (, ), ]]
[partial, ., size, (, )]
[partial]
[iValues]
[new, int, [, partial, ., size, (, ), ]]
[partial, ., size, (, )]
[partial]
[0]
[i, <, partial, ., size, (, )]
[i]
[partial, ., size, (, )]
[partial]
[i, ++]
[i]
[iTypes, [, i, ]]
[iTypes]
[i]
[partial, ., getFieldType, (, i, )]
[partial]
[i]
[iValues, [, i, ]]
[iValues]
[i]
[partial, ., getValue, (, i, )]
[partial]
[i]
[iChronology]
[partial, ., iChronology]
[partial]
[iTypes]
[partial, ., iTypes]
[partial]
[iValues]
[values]
[iChronology]
[chronology]
[iTypes]
[types]
[iValues]
[values]
[iTypes, ., length]
[iTypes]
[iChronology]
[iTypes, [, index, ], ., getField, (, chrono, )]
[iTypes, [, index, ]]
[iTypes]
[index]
[chrono]
[iTypes, [, index, ]]
[iTypes]
[index]
[(, DateTimeFieldType, [, ], ), iTypes, ., clone, (, )]
[iTypes, ., clone, (, )]
[iTypes]
[iValues, [, index, ]]
[iValues]
[index]
[(, int, [, ], ), iValues, ., clone, (, )]
[iValues, ., clone, (, )]
[iValues]
[newChronology]
[DateTimeUtils, ., getChronology, (, newChronology, )]
[DateTimeUtils]
[newChronology]
[newChronology]
[newChronology, ., withUTC, (, )]
[newChronology]
[newChronology, ==, getChronology, (, )]
[newChronology]
[getChronology, (, )]
[this]
[new, Partial, (, newChronology, ,, iTypes, ,, iValues, )]
[newChronology]
[iTypes]
[iValues]
[newChronology, ., validate, (, newPartial, ,, iValues, )]
[newChronology]
[newPartial]
[iValues]
[newPartial]
[fieldType, ==, null]
[fieldType]
[null]
[new, IllegalArgumentException, (, "The field type must not be null", )]
["The field type must not be null"]
[indexOf, (, fieldType, )]
[fieldType]
[index, ==, -, 1]
[index]
[-, 1]
[1]
[new, DateTimeFieldType, [, iTypes, ., length, +, 1, ]]
[iTypes, ., length, +, 1]
[iTypes, ., length]
[iTypes]
[1]
[new, int, [, newTypes, ., length, ]]
[newTypes, ., length]
[newTypes]
[0]
[fieldType, ., getDurationType, (, ), ., getField, (, iChronology, )]
[fieldType, ., getDurationType, (, )]
[fieldType]
[iChronology]
[unitField, ., isSupported, (, )]
[unitField]
[i, <, iTypes, ., length]
[i]
[iTypes, ., length]
[iTypes]
[i, ++]
[i]
[iTypes, [, i, ]]
[iTypes]
[i]
[loopType, ., getDurationType, (, ), ., getField, (, iChronology, )]
[loopType, ., getDurationType, (, )]
[loopType]
[iChronology]
[loopUnitField, ., isSupported, (, )]
[loopUnitField]
[unitField, ., compareTo, (, loopUnitField, )]
[unitField]
[loopUnitField]
[compare, >, 0]
[compare]
[0]
[compare, ==, 0]
[compare]
[0]
[fieldType, ., getRangeDurationType, (, ), ==, null]
[fieldType, ., getRangeDurationType, (, )]
[fieldType]
[null]
[fieldType, ., getRangeDurationType, (, ), ., getField, (, iChronology, )]
[fieldType, ., getRangeDurationType, (, )]
[fieldType]
[iChronology]
[loopType, ., getRangeDurationType, (, ), ., getField, (, iChronology, )]
[loopType, ., getRangeDurationType, (, )]
[loopType]
[iChronology]
[rangeField, ., compareTo, (, loopRangeField, ), >, 0]
[rangeField, ., compareTo, (, loopRangeField, )]
[rangeField]
[loopRangeField]
[0]
[System, ., arraycopy, (, iTypes, ,, 0, ,, newTypes, ,, 0, ,, i, )]
[System]
[iTypes]
[0]
[newTypes]
[0]
[i]
[System, ., arraycopy, (, iValues, ,, 0, ,, newValues, ,, 0, ,, i, )]
[System]
[iValues]
[0]
[newValues]
[0]
[i]
[newTypes, [, i, ]]
[newTypes]
[i]
[fieldType]
[newValues, [, i, ]]
[newValues]
[i]
[value]
[System, ., arraycopy, (, iTypes, ,, i, ,, newTypes, ,, i, +, 1, ,, newTypes, ., length, -, i, -, 1, )]
[System]
[iTypes]
[i]
[newTypes]
[i, +, 1]
[i]
[1]
[newTypes, ., length, -, i, -, 1]
[newTypes, ., length, -, i]
[newTypes, ., length]
[newTypes]
[i]
[1]
[System, ., arraycopy, (, iValues, ,, i, ,, newValues, ,, i, +, 1, ,, newValues, ., length, -, i, -, 1, )]
[System]
[iValues]
[i]
[newValues]
[i, +, 1]
[i]
[1]
[newValues, ., length, -, i, -, 1]
[newValues, ., length, -, i]
[newValues, ., length]
[newValues]
[i]
[1]
[new, Partial, (, newTypes, ,, newValues, ,, iChronology, )]
[newTypes]
[newValues]
[iChronology]
[iChronology, ., validate, (, newPartial, ,, newValues, )]
[iChronology]
[newPartial]
[newValues]
[newPartial]
[value, ==, getValue, (, index, )]
[value]
[getValue, (, index, )]
[index]
[this]
[getValues, (, )]
[newValues]
[getField, (, index, ), ., set, (, this, ,, index, ,, newValues, ,, value, )]
[getField, (, index, )]
[index]
[this]
[index]
[newValues]
[value]
[new, Partial, (, this, ,, newValues, )]
[this]
[newValues]
[indexOf, (, fieldType, )]
[fieldType]
[index, !=, -, 1]
[index]
[-, 1]
[1]
[new, DateTimeFieldType, [, size, (, ), -, 1, ]]
[size, (, ), -, 1]
[size, (, )]
[1]
[new, int, [, size, (, ), -, 1, ]]
[size, (, ), -, 1]
[size, (, )]
[1]
[System, ., arraycopy, (, iTypes, ,, 0, ,, newTypes, ,, 0, ,, index, )]
[System]
[iTypes]
[0]
[newTypes]
[0]
[index]
[System, ., arraycopy, (, iTypes, ,, index, +, 1, ,, newTypes, ,, index, ,, newTypes, ., length, -, index, )]
[System]
[iTypes]
[index, +, 1]
[index]
[1]
[newTypes]
[index]
[newTypes, ., length, -, index]
[newTypes, ., length]
[newTypes]
[index]
[System, ., arraycopy, (, iValues, ,, 0, ,, newValues, ,, 0, ,, index, )]
[System]
[iValues]
[0]
[newValues]
[0]
[index]
[System, ., arraycopy, (, iValues, ,, index, +, 1, ,, newValues, ,, index, ,, newValues, ., length, -, index, )]
[System]
[iValues]
[index, +, 1]
[index]
[1]
[newValues]
[index]
[newValues, ., length, -, index]
[newValues, ., length]
[newValues]
[index]
[new, Partial, (, iChronology, ,, newTypes, ,, newValues, )]
[iChronology]
[newTypes]
[newValues]
[iChronology, ., validate, (, newPartial, ,, newValues, )]
[iChronology]
[newPartial]
[newValues]
[newPartial]
[this]
[indexOfSupported, (, fieldType, )]
[fieldType]
[value, ==, getValue, (, index, )]
[value]
[getValue, (, index, )]
[index]
[this]
[getValues, (, )]
[newValues]
[getField, (, index, ), ., set, (, this, ,, index, ,, newValues, ,, value, )]
[getField, (, index, )]
[index]
[this]
[index]
[newValues]
[value]
[new, Partial, (, this, ,, newValues, )]
[this]
[newValues]
[indexOfSupported, (, fieldType, )]
[fieldType]
[amount, ==, 0]
[amount]
[0]
[this]
[getValues, (, )]
[newValues]
[getField, (, index, ), ., add, (, this, ,, index, ,, newValues, ,, amount, )]
[getField, (, index, )]
[index]
[this]
[index]
[newValues]
[amount]
[new, Partial, (, this, ,, newValues, )]
[this]
[newValues]
[indexOfSupported, (, fieldType, )]
[fieldType]
[amount, ==, 0]
[amount]
[0]
[this]
[getValues, (, )]
[newValues]
[getField, (, index, ), ., addWrapPartial, (, this, ,, index, ,, newValues, ,, amount, )]
[getField, (, index, )]
[index]
[this]
[index]
[newValues]
[amount]
[new, Partial, (, this, ,, newValues, )]
[this]
[newValues]
[period, ==, null, ||, scalar, ==, 0]
[period, ==, null]
[period]
[null]
[scalar, ==, 0]
[scalar]
[0]
[this]
[getValues, (, )]
[0]
[i, <, period, ., size, (, )]
[i]
[period, ., size, (, )]
[period]
[i, ++]
[i]
[period, ., getFieldType, (, i, )]
[period]
[i]
[indexOf, (, fieldType, )]
[fieldType]
[index, >=, 0]
[index]
[0]
[newValues]
[getField, (, index, ), ., add, (, this, ,, index, ,, newValues, ,, FieldUtils, ., safeMultiply, (, period, ., getValue, (, i, ), ,, scalar, ), )]
[getField, (, index, )]
[index]
[this]
[index]
[newValues]
[FieldUtils, ., safeMultiply, (, period, ., getValue, (, i, ), ,, scalar, )]
[FieldUtils]
[period, ., getValue, (, i, )]
[period]
[i]
[scalar]
[new, Partial, (, this, ,, newValues, )]
[this]
[newValues]
[withPeriodAdded, (, period, ,, 1, )]
[period]
[1]
[withPeriodAdded, (, period, ,, -, 1, )]
[period]
[-, 1]
[1]
[new, Property, (, this, ,, indexOfSupported, (, type, ), )]
[this]
[indexOfSupported, (, type, )]
[type]
[DateTimeUtils, ., getInstantMillis, (, instant, )]
[DateTimeUtils]
[instant]
[DateTimeUtils, ., getInstantChronology, (, instant, )]
[DateTimeUtils]
[instant]
[0]
[i, <, iTypes, ., length]
[i]
[iTypes, ., length]
[iTypes]
[i, ++]
[i]
[iTypes, [, i, ], ., getField, (, chrono, ), ., get, (, millis, )]
[iTypes, [, i, ], ., getField, (, chrono, )]
[iTypes, [, i, ]]
[iTypes]
[i]
[chrono]
[millis]
[value, !=, iValues, [, i, ]]
[value]
[iValues, [, i, ]]
[iValues]
[i]
[false]
[true]
[partial, ==, null]
[partial]
[null]
[new, IllegalArgumentException, (, "The partial must not be null", )]
["The partial must not be null"]
[0]
[i, <, iTypes, ., length]
[i]
[iTypes, ., length]
[iTypes]
[i, ++]
[i]
[partial, ., get, (, iTypes, [, i, ], )]
[partial]
[iTypes, [, i, ]]
[iTypes]
[i]
[value, !=, iValues, [, i, ]]
[value]
[iValues, [, i, ]]
[iValues]
[i]
[false]
[true]
[iFormatter]
[f, ==, null]
[f]
[null]
[size, (, ), ==, 0]
[size, (, )]
[0]
[null]
[f]
[new, DateTimeFormatter, [, 2, ]]
[2]
[new, ArrayList, <, DateTimeFieldType, >, (, Arrays, ., asList, (, iTypes, ), )]
[Arrays, ., asList, (, iTypes, )]
[Arrays]
[iTypes]
[f, [, 0, ]]
[f]
[0]
[ISODateTimeFormat, ., forFields, (, list, ,, true, ,, false, )]
[ISODateTimeFormat]
[list]
[true]
[false]
[list, ., size, (, ), ==, 0]
[list, ., size, (, )]
[list]
[0]
[f, [, 1, ]]
[f]
[1]
[f, [, 0, ]]
[f]
[0]
[iFormatter]
[f]
[f, [, 0, ]]
[f]
[0]
[iFormatter]
[f, ==, null]
[f]
[null]
[getFormatter, (, )]
[f]
[iFormatter]
[f, ==, null]
[f]
[null]
[toStringList, (, )]
[f, [, 1, ]]
[f]
[1]
[f1, ==, null]
[f1]
[null]
[toStringList, (, )]
[f1, ., print, (, this, )]
[f1]
[this]
[size, (, )]
[new, StringBuilder, (, 20, *, size, )]
[20, *, size]
[20]
[size]
[buf, ., append, (, '[', )]
[buf]
['[']
[0]
[i, <, size]
[i]
[size]
[i, ++]
[i]
[i, >, 0]
[i]
[0]
[buf, ., append, (, ',', ), ., append, (, ' ', )]
[buf, ., append, (, ',', )]
[buf]
[',']
[' ']
[buf, ., append, (, iTypes, [, i, ], ., getName, (, ), )]
[buf]
[iTypes, [, i, ], ., getName, (, )]
[iTypes, [, i, ]]
[iTypes]
[i]
[buf, ., append, (, '=', )]
[buf]
['=']
[buf, ., append, (, iValues, [, i, ], )]
[buf]
[iValues, [, i, ]]
[iValues]
[i]
[buf, ., append, (, ']', )]
[buf]
[']']
[buf, ., toString, (, )]
[buf]
[pattern, ==, null]
[pattern]
[null]
[toString, (, )]
[DateTimeFormat, ., forPattern, (, pattern, ), ., print, (, this, )]
[DateTimeFormat, ., forPattern, (, pattern, )]
[DateTimeFormat]
[pattern]
[this]
[pattern, ==, null]
[pattern]
[null]
[toString, (, )]
[DateTimeFormat, ., forPattern, (, pattern, ), ., withLocale, (, locale, ), ., print, (, this, )]
[DateTimeFormat, ., forPattern, (, pattern, ), ., withLocale, (, locale, )]
[DateTimeFormat, ., forPattern, (, pattern, )]
[DateTimeFormat]
[pattern]
[locale]
[this]
[53278362873888L]
[iPartial]
[partial]
[iFieldIndex]
[fieldIndex]
[iPartial, ., getField, (, iFieldIndex, )]
[iPartial]
[iFieldIndex]
[iPartial]
[iPartial]
[iPartial, ., getValue, (, iFieldIndex, )]
[iPartial]
[iFieldIndex]
[iPartial, ., getValues, (, )]
[iPartial]
[newValues]
[getField, (, ), ., add, (, iPartial, ,, iFieldIndex, ,, newValues, ,, valueToAdd, )]
[getField, (, )]
[iPartial]
[iFieldIndex]
[newValues]
[valueToAdd]
[new, Partial, (, iPartial, ,, newValues, )]
[iPartial]
[newValues]
[iPartial, ., getValues, (, )]
[iPartial]
[newValues]
[getField, (, ), ., addWrapField, (, iPartial, ,, iFieldIndex, ,, newValues, ,, valueToAdd, )]
[getField, (, )]
[iPartial]
[iFieldIndex]
[newValues]
[valueToAdd]
[new, Partial, (, iPartial, ,, newValues, )]
[iPartial]
[newValues]
[iPartial, ., getValues, (, )]
[iPartial]
[newValues]
[getField, (, ), ., set, (, iPartial, ,, iFieldIndex, ,, newValues, ,, value, )]
[getField, (, )]
[iPartial]
[iFieldIndex]
[newValues]
[value]
[new, Partial, (, iPartial, ,, newValues, )]
[iPartial]
[newValues]
[iPartial, ., getValues, (, )]
[iPartial]
[newValues]
[getField, (, ), ., set, (, iPartial, ,, iFieldIndex, ,, newValues, ,, text, ,, locale, )]
[getField, (, )]
[iPartial]
[iFieldIndex]
[newValues]
[text]
[locale]
[new, Partial, (, iPartial, ,, newValues, )]
[iPartial]
[newValues]
[setCopy, (, text, ,, null, )]
[text]
[null]
[setCopy, (, getMaximumValue, (, ), )]
[getMaximumValue, (, )]
[setCopy, (, getMinimumValue, (, ), )]
[getMinimumValue, (, )]
