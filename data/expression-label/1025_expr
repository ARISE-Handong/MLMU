["[singleton]"]
[DiagnosticType, ., error, (, "JSC_MODULE_DEPENDENCY_ERROR", ,, "Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order.", )]
[DiagnosticType]
["JSC_MODULE_DEPENDENCY_ERROR"]
["Bad dependency: {0} -> {1}. ", +, "Modules must be listed in dependency order."]
["Bad dependency: {0} -> {1}. "]
["Modules must be listed in dependency order."]
[DiagnosticType, ., error, (, "JSC_MISSING_ENTRY_ERROR", ,, "required entry point \"{0}\" never provided", )]
[DiagnosticType]
["JSC_MISSING_ENTRY_ERROR"]
["required entry point \"{0}\" never provided"]
["com.google.javascript.jscomp.parsing.ParserConfig"]
[null]
[null]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[null]
[0]
[true]
[new, StringBuilder, (, )]
[new, ClosureCodingConvention, (, )]
[null]
[RhinoErrorReporter, ., forOldRhino, (, this, )]
[RhinoErrorReporter]
[this]
[RhinoErrorReporter, ., forNewRhino, (, this, )]
[RhinoErrorReporter]
[this]
[DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of optimization iterations: {0}", )]
[DiagnosticType]
["JSC_OPTIMIZE_LOOP_ERROR"]
["Exceeded max number of optimization iterations: {0}"]
[DiagnosticType, ., error, (, "JSC_OPTIMIZE_LOOP_ERROR", ,, "Exceeded max number of code motion iterations: {0}", )]
[DiagnosticType]
["JSC_OPTIMIZE_LOOP_ERROR"]
["Exceeded max number of code motion iterations: {0}"]
[(, 1, <<, 21, )]
[1, <<, 21]
[1]
[21]
[Executors, ., newCachedThreadPool, (, new, ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (, null, ,, r, ,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }, )]
[Executors]
[new, ThreadFactory, (, ), {, @, Override, public, Thread, newThread, (, Runnable, r, ), {, return, new, Thread, (, null, ,, r, ,, "jscompiler", ,, COMPILER_STACK_SIZE, ), ;, }, }]
[new, Thread, (, null, ,, r, ,, "jscompiler", ,, COMPILER_STACK_SIZE, )]
[null]
[r]
["jscompiler"]
[COMPILER_STACK_SIZE]
[null]
[true]
[Logger, ., getLogger, (, "com.google.javascript.jscomp", )]
[Logger]
["com.google.javascript.jscomp"]
[null]
[0.0]
[(, PrintStream, ), null]
[null]
[addChangeHandler, (, recentChange, )]
[recentChange]
[outStream]
[stream]
[setErrorManager, (, errorManager, )]
[errorManager]
[Preconditions, ., checkNotNull, (, errorManager, ,, "the error manager cannot be null", )]
[Preconditions]
[errorManager]
["the error manager cannot be null"]
[this, ., errorManager]
[this]
[errorManager]
[options, ., shouldColorizeErrorOutput, (, )]
[options]
[options, ., errorFormat, ., toFormatter, (, this, ,, colorize, )]
[options, ., errorFormat]
[options]
[this]
[colorize]
[this, ., options]
[this]
[options]
[errorManager, ==, null]
[errorManager]
[null]
[outStream, ==, null]
[outStream]
[null]
[setErrorManager, (, new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, ), )]
[new, LoggerErrorManager, (, createMessageFormatter, (, ), ,, logger, )]
[createMessageFormatter, (, )]
[logger]
[new, PrintStreamErrorManager, (, createMessageFormatter, (, ), ,, outStream, )]
[createMessageFormatter, (, )]
[outStream]
[printer, ., setSummaryDetailLevel, (, options, ., summaryDetailLevel, )]
[printer]
[options, ., summaryDetailLevel]
[options]
[setErrorManager, (, printer, )]
[printer]
[options, ., enables, (, DiagnosticGroups, ., CHECK_TYPES, )]
[options]
[DiagnosticGroups, ., CHECK_TYPES]
[DiagnosticGroups]
[options, ., checkTypes]
[options]
[true]
[options, ., disables, (, DiagnosticGroups, ., CHECK_TYPES, )]
[options]
[DiagnosticGroups, ., CHECK_TYPES]
[DiagnosticGroups]
[options, ., checkTypes]
[options]
[false]
[!, options, ., checkTypes]
[options, ., checkTypes]
[options]
[options, ., setWarningLevel, (, DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ), ,, CheckLevel, ., OFF, )]
[options]
[DiagnosticGroup, ., forType, (, RhinoErrorReporter, ., TYPE_PARSE_ERROR, )]
[DiagnosticGroup]
[RhinoErrorReporter, ., TYPE_PARSE_ERROR]
[RhinoErrorReporter]
[CheckLevel, ., OFF]
[CheckLevel]
[options, ., checkGlobalThisLevel, ., isOn, (, ), &&, !, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options, ., checkGlobalThisLevel, ., isOn, (, )]
[options, ., checkGlobalThisLevel]
[options]
[!, options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options, ., disables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[options]
[DiagnosticGroups, ., GLOBAL_THIS]
[DiagnosticGroups]
[options, ., setWarningLevel, (, DiagnosticGroups, ., GLOBAL_THIS, ,, options, ., checkGlobalThisLevel, )]
[options]
[DiagnosticGroups, ., GLOBAL_THIS]
[DiagnosticGroups]
[options, ., checkGlobalThisLevel]
[options]
[options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[options, ., getLanguageIn, (, )]
[options]
[LanguageMode, ., ECMASCRIPT5_STRICT]
[LanguageMode]
[options, ., setWarningLevel, (, DiagnosticGroups, ., ES5_STRICT, ,, CheckLevel, ., ERROR, )]
[options]
[DiagnosticGroups, ., ES5_STRICT]
[DiagnosticGroups]
[CheckLevel, ., ERROR]
[CheckLevel]
[Lists, ., newArrayList, (, )]
[Lists]
[guards, ., add, (, new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), ), )]
[guards]
[new, SuppressDocWarningsGuard, (, getDiagnosticGroups, (, ), ., getRegisteredGroups, (, ), )]
[getDiagnosticGroups, (, ), ., getRegisteredGroups, (, )]
[getDiagnosticGroups, (, )]
[guards, ., add, (, options, ., getWarningsGuard, (, ), )]
[guards]
[options, ., getWarningsGuard, (, )]
[options]
[new, ComposeWarningsGuard, (, guards, )]
[guards]
[!, options, ., checkSymbols, &&, !, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, )]
[!, options, ., checkSymbols]
[options, ., checkSymbols]
[options]
[!, composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, )]
[composedGuards, ., enables, (, DiagnosticGroups, ., CHECK_VARIABLES, )]
[composedGuards]
[DiagnosticGroups, ., CHECK_VARIABLES]
[DiagnosticGroups]
[composedGuards, ., addGuard, (, new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, ), )]
[composedGuards]
[new, DiagnosticGroupWarningsGuard, (, DiagnosticGroups, ., CHECK_VARIABLES, ,, CheckLevel, ., OFF, )]
[DiagnosticGroups, ., CHECK_VARIABLES]
[DiagnosticGroups]
[CheckLevel, ., OFF]
[CheckLevel]
[this, ., warningsGuard]
[this]
[composedGuards]
[init, (, Lists, ., <, JSSourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, ), ,, options, )]
[Lists, ., <, JSSourceFile, >, newArrayList, (, externs, )]
[Lists]
[externs]
[Lists, ., <, JSSourceFile, >, newArrayList, (, inputs, )]
[Lists]
[inputs]
[options]
[new, JSModule, (, SINGLETON_MODULE_NAME, )]
[SINGLETON_MODULE_NAME]
[inputs]
[module, ., add, (, input, )]
[module]
[input]
[initModules, (, externs, ,, Lists, ., newArrayList, (, module, ), ,, options, )]
[externs]
[Lists, ., newArrayList, (, module, )]
[Lists]
[module]
[options]
[initModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, )]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, )]
[Lists]
[externs]
[Lists, ., <, JSModule, >, newArrayList, (, modules, )]
[Lists]
[modules]
[options]
[initOptions, (, options, )]
[options]
[checkFirstModule, (, modules, )]
[modules]
[fillEmptyModules, (, modules, )]
[modules]
[this, ., externs]
[this]
[makeCompilerInput, (, externs, ,, true, )]
[externs]
[true]
[this, ., modules]
[this]
[modules]
[modules, ., size, (, ), >, 1]
[modules, ., size, (, )]
[modules]
[1]
[this, ., moduleGraph]
[this]
[new, JSModuleGraph, (, modules, )]
[modules]
[report, (, JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,, e, ., getDependentModule, (, ), ., getName, (, ), ), )]
[JSError, ., make, (, MODULE_DEPENDENCY_ERROR, ,, e, ., getModule, (, ), ., getName, (, ), ,, e, ., getDependentModule, (, ), ., getName, (, ), )]
[JSError]
[MODULE_DEPENDENCY_ERROR]
[e, ., getModule, (, ), ., getName, (, )]
[e, ., getModule, (, )]
[e]
[e, ., getDependentModule, (, ), ., getName, (, )]
[e, ., getDependentModule, (, )]
[e]
[this, ., moduleGraph]
[this]
[null]
[this, ., inputs]
[this]
[getAllInputsFromModules, (, modules, )]
[modules]
[initBasedOnOptions, (, )]
[initInputsByIdMap, (, )]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[sourceMap]
[options, ., sourceMapFormat, ., getInstance, (, )]
[options, ., sourceMapFormat]
[options]
[sourceMap, ., setPrefixMappings, (, options, ., sourceMapLocationMappings, )]
[sourceMap]
[options, ., sourceMapLocationMappings]
[options]
[Lists, ., newArrayList, (, )]
[Lists]
[files]
[inputs, ., add, (, new, CompilerInput, (, file, ,, isExtern, ), )]
[inputs]
[new, CompilerInput, (, file, ,, isExtern, )]
[file]
[isExtern]
[inputs]
[DiagnosticType, ., error, (, "JSC_EMPTY_MODULE_LIST_ERROR", ,, "At least one module must be provided", )]
[DiagnosticType]
["JSC_EMPTY_MODULE_LIST_ERROR"]
["At least one module must be provided"]
[DiagnosticType, ., error, (, "JSC_EMPTY_ROOT_MODULE_ERROR", ,, "Root module '{0}' must contain at least one source code input", )]
[DiagnosticType]
["JSC_EMPTY_ROOT_MODULE_ERROR"]
["Root module '{0}' must contain at least one source code input"]
[modules, ., isEmpty, (, )]
[modules]
[report, (, JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, ), )]
[JSError, ., make, (, EMPTY_MODULE_LIST_ERROR, )]
[JSError]
[EMPTY_MODULE_LIST_ERROR]
[modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, ), &&, modules, ., size, (, ), >, 1]
[modules, ., get, (, 0, ), ., getInputs, (, ), ., isEmpty, (, )]
[modules, ., get, (, 0, ), ., getInputs, (, )]
[modules, ., get, (, 0, )]
[modules]
[0]
[modules, ., size, (, ), >, 1]
[modules, ., size, (, )]
[modules]
[1]
[report, (, JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, ), ), )]
[JSError, ., make, (, EMPTY_ROOT_MODULE_ERROR, ,, modules, ., get, (, 0, ), ., getName, (, ), )]
[JSError]
[EMPTY_ROOT_MODULE_ERROR]
[modules, ., get, (, 0, ), ., getName, (, )]
[modules, ., get, (, 0, )]
[modules]
[0]
["[", +, moduleName, +, "]"]
["[", +, moduleName]
["["]
[moduleName]
["]"]
[modules]
[module, ., getInputs, (, ), ., isEmpty, (, )]
[module, ., getInputs, (, )]
[module]
[module, ., add, (, SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,, "", ), )]
[module]
[SourceFile, ., fromCode, (, createFillFileName, (, module, ., getName, (, ), ), ,, "", )]
[SourceFile]
[createFillFileName, (, module, ., getName, (, ), )]
[module, ., getName, (, )]
[module]
[""]
[inputs]
[getAllInputsFromModules, (, modules, )]
[modules]
[initInputsByIdMap, (, )]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newHashMap, (, )]
[Maps]
[modules]
[module, ., getInputs, (, )]
[module]
[input, ., getName, (, )]
[input]
[inputs, ., add, (, input, )]
[inputs]
[input]
[inputMap, ., put, (, inputName, ,, module, )]
[inputMap]
[inputName]
[module]
[inputs]
[DiagnosticType, ., error, (, "JSC_DUPLICATE_INPUT", ,, "Duplicate input: {0}", )]
[DiagnosticType]
["JSC_DUPLICATE_INPUT"]
["Duplicate input: {0}"]
[DiagnosticType, ., error, (, "JSC_DUPLICATE_EXTERN_INPUT", ,, "Duplicate extern input: {0}", )]
[DiagnosticType]
["JSC_DUPLICATE_EXTERN_INPUT"]
["Duplicate extern input: {0}"]
[inputsById]
[new, HashMap, <, InputId, ,, CompilerInput, >, (, )]
[externs]
[input, ., getInputId, (, )]
[input]
[putCompilerInput, (, id, ,, input, )]
[id]
[input]
[previous, !=, null]
[previous]
[null]
[report, (, JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), ), )]
[JSError, ., make, (, DUPLICATE_EXTERN_INPUT, ,, input, ., getName, (, ), )]
[JSError]
[DUPLICATE_EXTERN_INPUT]
[input, ., getName, (, )]
[input]
[inputs]
[input, ., getInputId, (, )]
[input]
[putCompilerInput, (, id, ,, input, )]
[id]
[input]
[previous, !=, null]
[previous]
[null]
[report, (, JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), ), )]
[JSError, ., make, (, DUPLICATE_INPUT, ,, input, ., getName, (, ), )]
[JSError]
[DUPLICATE_INPUT]
[input, ., getName, (, )]
[input]
[compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,, options, )]
[Lists, ., newArrayList, (, extern, )]
[Lists]
[extern]
[Lists, ., newArrayList, (, input, )]
[Lists]
[input]
[options]
[compile, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, input, ), ,, options, )]
[Lists, ., newArrayList, (, extern, )]
[Lists]
[extern]
[Lists, ., newArrayList, (, input, )]
[Lists]
[input]
[options]
[compileModules, (, Lists, ., newArrayList, (, extern, ), ,, Lists, ., newArrayList, (, modules, ), ,, options, )]
[Lists, ., newArrayList, (, extern, )]
[Lists]
[extern]
[Lists, ., newArrayList, (, modules, )]
[Lists]
[modules]
[options]
[compile, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, SourceFile, >, newArrayList, (, inputs, ), ,, options, )]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, )]
[Lists]
[externs]
[Lists, ., <, SourceFile, >, newArrayList, (, inputs, )]
[Lists]
[inputs]
[options]
[Preconditions, ., checkState, (, jsRoot, ==, null, )]
[Preconditions]
[jsRoot, ==, null]
[jsRoot]
[null]
[init, (, externs, ,, inputs, ,, options, )]
[externs]
[inputs]
[options]
[hasErrors, (, )]
[getResult, (, )]
[compile, (, )]
[newTracer, (, "generateReport", )]
["generateReport"]
[errorManager, ., generateReport, (, )]
[errorManager]
[stopTracer, (, t, ,, "generateReport", )]
[t]
["generateReport"]
[compileModules, (, Lists, ., <, SourceFile, >, newArrayList, (, externs, ), ,, Lists, ., <, JSModule, >, newArrayList, (, modules, ), ,, options, )]
[Lists, ., <, SourceFile, >, newArrayList, (, externs, )]
[Lists]
[externs]
[Lists, ., <, JSModule, >, newArrayList, (, modules, )]
[Lists]
[modules]
[options]
[Preconditions, ., checkState, (, jsRoot, ==, null, )]
[Preconditions]
[jsRoot, ==, null]
[jsRoot]
[null]
[initModules, (, externs, ,, modules, ,, options, )]
[externs]
[modules]
[options]
[hasErrors, (, )]
[getResult, (, )]
[compile, (, )]
[newTracer, (, "generateReport", )]
["generateReport"]
[errorManager, ., generateReport, (, )]
[errorManager]
[stopTracer, (, t, ,, "generateReport", )]
[t]
["generateReport"]
[runInCompilerThread, (, new, Callable, <, Result, >, (, ), {, @, Override, public, Result, call, (, ), throws, Exception, {, compileInternal, (, ), ;, return, getResult, (, ), ;, }, }, )]
[new, Callable, <, Result, >, (, ), {, @, Override, public, Result, call, (, ), throws, Exception, {, compileInternal, (, ), ;, return, getResult, (, ), ;, }, }]
[compileInternal, (, )]
[getResult, (, )]
[useThreads]
[false]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[options, !=, null, &&, options, ., tracer, ., isOn, (, )]
[options, !=, null]
[options]
[null]
[options, ., tracer, ., isOn, (, )]
[options, ., tracer]
[options]
[null]
[new, Throwable, [, 1, ]]
[1]
[new, Callable, <, T, >, (, ), {, @, Override, public, T, call, (, ), {, try, {, compilerThread, =, Thread, ., currentThread, (, ), ;, if, (, dumpTraceReport, ), {, Tracer, ., initCurrentThreadTrace, (, ), ;, }, return, callable, ., call, (, ), ;, }, catch, (, Throwable, e, ), {, exception, [, 0, ], =, e, ;, }, finally, {, compilerThread, =, null, ;, if, (, dumpTraceReport, ), {, Tracer, ., logAndClearCurrentThreadTrace, (, ), ;, tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, ), ;, }, }, return, null, ;, }, }]
[compilerThread]
[Thread, ., currentThread, (, )]
[Thread]
[dumpTraceReport]
[Tracer, ., initCurrentThreadTrace, (, )]
[Tracer]
[callable, ., call, (, )]
[callable]
[exception, [, 0, ]]
[exception]
[0]
[e]
[compilerThread]
[null]
[dumpTraceReport]
[Tracer, ., logAndClearCurrentThreadTrace, (, )]
[Tracer]
[tracker, ., outputTracerReport, (, outStream, ==, null, ?, System, ., out, :, outStream, )]
[tracker]
[outStream, ==, null, ?, System, ., out, :, outStream]
[outStream, ==, null]
[outStream]
[null]
[System, ., out]
[System]
[outStream]
[null]
[Preconditions, ., checkState, (, compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, ), ,, "Please do not share the Compiler across threads", )]
[Preconditions]
[compilerThread, ==, null, ||, compilerThread, ==, Thread, ., currentThread, (, )]
[compilerThread, ==, null]
[compilerThread]
[null]
[compilerThread, ==, Thread, ., currentThread, (, )]
[compilerThread]
[Thread, ., currentThread, (, )]
[Thread]
["Please do not share the Compiler across threads"]
[useThreads, &&, compilerThread, ==, null]
[useThreads]
[compilerThread, ==, null]
[compilerThread]
[null]
[result]
[compilerExecutor, ., submit, (, bootCompilerThread, ), ., get, (, )]
[compilerExecutor, ., submit, (, bootCompilerThread, )]
[compilerExecutor]
[bootCompilerThread]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[result]
[callable, ., call, (, )]
[callable]
[exception, [, 0, ]]
[exception]
[0]
[e]
[exception, [, 0, ], !=, null]
[exception, [, 0, ]]
[exception]
[0]
[null]
[new, RuntimeException, (, exception, [, 0, ], )]
[exception, [, 0, ]]
[exception]
[0]
[result]
[setProgress, (, 0.0, ,, null, )]
[0.0]
[null]
[parse, (, )]
[setProgress, (, 0.15, ,, "parse", )]
[0.15]
["parse"]
[hasErrors, (, )]
[!, precheck, (, )]
[precheck, (, )]
[options, ., nameAnonymousFunctionsOnly]
[options]
[check, (, )]
[!, options, ., skipAllPasses]
[options, ., skipAllPasses]
[options]
[check, (, )]
[hasErrors, (, )]
[options, ., isExternExportsEnabled, (, ), ||, options, ., externExportsPath, !=, null]
[options, ., isExternExportsEnabled, (, )]
[options]
[options, ., externExportsPath, !=, null]
[options, ., externExportsPath]
[options]
[null]
[externExports, (, )]
[!, options, ., ideMode]
[options, ., ideMode]
[options]
[optimize, (, )]
[options, ., recordFunctionInformation]
[options]
[recordFunctionInformation, (, )]
[options, ., devMode, ==, DevMode, ., START_AND_END]
[options, ., devMode]
[options]
[DevMode, ., START_AND_END]
[DevMode]
[runSanityCheck, (, )]
[setProgress, (, 1.0, ,, "recordFunctionInformation", )]
[1.0]
["recordFunctionInformation"]
[parseInputs, (, )]
[passes, ==, null]
[passes]
[null]
[passes]
[createPassConfigInternal, (, )]
[passes]
[new, DefaultPassConfig, (, options, )]
[options]
[Preconditions, ., checkNotNull, (, passes, )]
[Preconditions]
[passes]
[this, ., passes, !=, null]
[this, ., passes]
[this]
[null]
[new, IllegalStateException, (, "this.passes has already been assigned", )]
["this.passes has already been assigned"]
[this, ., passes]
[this]
[passes]
[true]
[runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_CHECKS, )]
[CustomPassExecutionTime, ., BEFORE_CHECKS]
[CustomPassExecutionTime]
[new, PhaseOptimizer, (, this, ,, tracker, ,, new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, ), )]
[this]
[tracker]
[new, PhaseOptimizer, ., ProgressRange, (, getProgress, (, ), ,, 1.0, )]
[getProgress, (, )]
[1.0]
[options, ., devMode, ==, DevMode, ., EVERY_PASS]
[options, ., devMode]
[options]
[DevMode, ., EVERY_PASS]
[DevMode]
[phaseOptimizer, ., setSanityCheck, (, sanityCheck, )]
[phaseOptimizer]
[sanityCheck]
[phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getChecks, (, ), )]
[phaseOptimizer]
[getPassConfig, (, ), ., getChecks, (, )]
[getPassConfig, (, )]
[phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, )]
[phaseOptimizer]
[externsRoot]
[jsRoot]
[hasErrors, (, )]
[options, ., nameAnonymousFunctionsOnly]
[options]
[options, ., removeTryCatchFinally]
[options]
[removeTryCatchFinally, (, )]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, ), ||, !, options, ., stripNamePrefixes, ., isEmpty, (, )]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, ), ||, !, options, ., stripTypePrefixes, ., isEmpty, (, )]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, ), ||, !, options, ., stripNameSuffixes, ., isEmpty, (, )]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ||, !, options, ., stripTypes, ., isEmpty, (, )]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, )]
[options, ., getTweakProcessing, (, )]
[options]
[!, options, ., stripTypes, ., isEmpty, (, )]
[options, ., stripTypes, ., isEmpty, (, )]
[options, ., stripTypes]
[options]
[!, options, ., stripNameSuffixes, ., isEmpty, (, )]
[options, ., stripNameSuffixes, ., isEmpty, (, )]
[options, ., stripNameSuffixes]
[options]
[!, options, ., stripTypePrefixes, ., isEmpty, (, )]
[options, ., stripTypePrefixes, ., isEmpty, (, )]
[options, ., stripTypePrefixes]
[options]
[!, options, ., stripNamePrefixes, ., isEmpty, (, )]
[options, ., stripNamePrefixes, ., isEmpty, (, )]
[options, ., stripNamePrefixes]
[options]
[stripCode, (, options, ., stripTypes, ,, options, ., stripNameSuffixes, ,, options, ., stripTypePrefixes, ,, options, ., stripNamePrefixes, )]
[options, ., stripTypes]
[options]
[options, ., stripNameSuffixes]
[options]
[options, ., stripTypePrefixes]
[options]
[options, ., stripNamePrefixes]
[options]
[runCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS, )]
[CustomPassExecutionTime, ., BEFORE_OPTIMIZATIONS]
[CustomPassExecutionTime]
[logger, ., fine, (, "Creating extern file for exports", )]
[logger]
["Creating extern file for exports"]
[startPass, (, "externExports", )]
["externExports"]
[new, ExternExportsPass, (, this, )]
[this]
[process, (, pass, )]
[pass]
[externExports]
[pass, ., getGeneratedExterns, (, )]
[pass]
[endPass, (, )]
[p, ., process, (, externsRoot, ,, jsRoot, )]
[p]
[externsRoot]
[jsRoot]
[new, PassFactory, (, "sanityCheck", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SanityCheck, (, compiler, ), ;, }, }]
["sanityCheck"]
[false]
[new, SanityCheck, (, compiler, )]
[compiler]
[options, ., devMode, ==, DevMode, ., EVERY_PASS]
[options, ., devMode]
[options]
[DevMode, ., EVERY_PASS]
[DevMode]
[runSanityCheck, (, )]
[sanityCheck, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, )]
[sanityCheck, ., create, (, this, )]
[sanityCheck]
[this]
[externsRoot]
[jsRoot]
[logger, ., fine, (, "Remove try/catch/finally", )]
[logger]
["Remove try/catch/finally"]
[startPass, (, "removeTryCatchFinally", )]
["removeTryCatchFinally"]
[new, RemoveTryCatch, (, this, )]
[this]
[process, (, r, )]
[r]
[endPass, (, )]
[logger, ., fine, (, "Strip code", )]
[logger]
["Strip code"]
[startPass, (, "stripCode", )]
["stripCode"]
[new, StripCode, (, this, ,, stripTypes, ,, stripNameSuffixes, ,, stripTypePrefixes, ,, stripNamePrefixes, )]
[this]
[stripTypes]
[stripNameSuffixes]
[stripTypePrefixes]
[stripNamePrefixes]
[options, ., getTweakProcessing, (, ), ., shouldStrip, (, )]
[options, ., getTweakProcessing, (, )]
[options]
[r, ., enableTweakStripping, (, )]
[r]
[process, (, r, )]
[r]
[endPass, (, )]
[options, ., customPasses, !=, null]
[options, ., customPasses]
[options]
[null]
[newTracer, (, "runCustomPasses", )]
["runCustomPasses"]
[options, ., customPasses, ., get, (, executionTime, )]
[options, ., customPasses]
[options]
[executionTime]
[process, (, p, )]
[p]
[stopTracer, (, t, ,, "runCustomPasses", )]
[t]
["runCustomPasses"]
[null]
[null]
[Preconditions, ., checkState, (, currentTracer, ==, null, )]
[Preconditions]
[currentTracer, ==, null]
[currentTracer]
[null]
[currentPassName]
[passName]
[currentTracer]
[newTracer, (, passName, )]
[passName]
[Preconditions, ., checkState, (, currentTracer, !=, null, ,, "Tracer should not be null at the end of a pass.", )]
[Preconditions]
[currentTracer, !=, null]
[currentTracer]
[null]
["Tracer should not be null at the end of a pass."]
[stopTracer, (, currentTracer, ,, currentPassName, )]
[currentTracer]
[currentPassName]
[currentPassName]
[currentPassName]
[null]
[currentTracer]
[null]
[maybeSanityCheck, (, )]
[passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", )]
[passName]
[(, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", )]
[recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, ""]
[recentChange, ., hasCodeChanged, (, )]
[recentChange]
[" on recently changed AST"]
[""]
[options, ., tracer, ., isOn, (, )]
[options, ., tracer]
[options]
[tracker, ., recordPassStart, (, passName, )]
[tracker]
[passName]
[new, Tracer, (, "Compiler", ,, comment, )]
["Compiler"]
[comment]
[t, ., stop, (, )]
[t]
[options, ., tracer, ., isOn, (, )]
[options, ., tracer]
[options]
[tracker, ., recordPassStop, (, passName, ,, result, )]
[tracker]
[passName]
[result]
[getPassConfig, (, ), ., getIntermediateState, (, )]
[getPassConfig, (, )]
[new, Result, (, getErrors, (, ), ,, getWarnings, (, ), ,, debugLog, ., toString, (, ), ,, state, ., variableMap, ,, state, ., propertyMap, ,, state, ., anonymousFunctionNameMap, ,, state, ., stringMap, ,, functionInformationMap, ,, sourceMap, ,, externExports, ,, state, ., cssNames, ,, state, ., idGeneratorMap, )]
[getErrors, (, )]
[getWarnings, (, )]
[debugLog, ., toString, (, )]
[debugLog]
[state, ., variableMap]
[state]
[state, ., propertyMap]
[state]
[state, ., anonymousFunctionNameMap]
[state]
[state, ., stringMap]
[state]
[functionInformationMap]
[sourceMap]
[externExports]
[state, ., cssNames]
[state]
[state, ., idGeneratorMap]
[state]
[getErrors, (, )]
[errorManager, ., getErrors, (, )]
[errorManager]
[errorManager, ., getWarnings, (, )]
[errorManager]
[externAndJsRoot]
[uniqueNameId, ++]
[uniqueNameId]
[uniqueNameId]
[0]
[this]
[new, Supplier, <, String, >, (, ), {, @, Override, public, String, get, (, ), {, return, String, ., valueOf, (, self, ., nextUniqueNameId, (, ), ), ;, }, }]
[String, ., valueOf, (, self, ., nextUniqueNameId, (, ), )]
[String]
[self, ., nextUniqueNameId, (, )]
[self]
[options, ., ambiguateProperties, ||, options, ., disambiguateProperties]
[options, ., ambiguateProperties]
[options]
[options, ., disambiguateProperties]
[options]
[n1, ., isEquivalentToTyped, (, n2, )]
[n1]
[n2]
[n1, ., isEquivalentTo, (, n2, )]
[n1]
[n2]
[inputsById, ., get, (, id, )]
[inputsById]
[id]
[getInput, (, id, )]
[id]
[input, ==, null]
[input]
[null]
[Preconditions, ., checkState, (, input, ., isExtern, (, ), ,, "Not an extern input: %s", ,, input, ., getName, (, ), )]
[Preconditions]
[input, ., isExtern, (, )]
[input]
["Not an extern input: %s"]
[input, ., getName, (, )]
[input]
[inputsById, ., remove, (, id, )]
[inputsById]
[id]
[externs, ., remove, (, input, )]
[externs]
[input]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[root, !=, null]
[root]
[null]
[root, ., detachFromParent, (, )]
[root]
[new, SyntheticAst, (, name, )]
[name]
[inputsById, ., containsKey, (, ast, ., getInputId, (, ), )]
[inputsById]
[ast, ., getInputId, (, )]
[ast]
[new, IllegalArgumentException, (, "Conflicting externs name: ", +, name, )]
["Conflicting externs name: ", +, name]
["Conflicting externs name: "]
[name]
[new, CompilerInput, (, ast, ,, true, )]
[ast]
[true]
[putCompilerInput, (, input, ., getInputId, (, ), ,, input, )]
[input, ., getInputId, (, )]
[input]
[input]
[externsRoot, ., addChildToFront, (, ast, ., getAstRoot, (, this, ), )]
[externsRoot]
[ast, ., getAstRoot, (, this, )]
[ast]
[this]
[externs, ., add, (, 0, ,, input, )]
[externs]
[0]
[input]
[input]
[input, ., setCompiler, (, this, )]
[input]
[this]
[inputsById, ., put, (, id, ,, input, )]
[inputsById]
[id]
[input]
[ast, ., getInputId, (, )]
[ast]
[Preconditions, ., checkState, (, getInput, (, id, ), ==, null, ,, "Duplicate input %s", ,, id, ., getIdName, (, ), )]
[Preconditions]
[getInput, (, id, ), ==, null]
[getInput, (, id, )]
[id]
[null]
["Duplicate input %s"]
[id, ., getIdName, (, )]
[id]
[putCompilerInput, (, id, ,, new, CompilerInput, (, ast, ), )]
[id]
[new, CompilerInput, (, ast, )]
[ast]
[getInput, (, ast, ., getInputId, (, ), )]
[ast, ., getInputId, (, )]
[ast]
[Preconditions, ., checkNotNull, (, oldInput, ,, "No input to replace: %s", ,, ast, ., getInputId, (, ), ., getIdName, (, ), )]
[Preconditions]
[oldInput]
["No input to replace: %s"]
[ast, ., getInputId, (, ), ., getIdName, (, )]
[ast, ., getInputId, (, )]
[ast]
[ast, ., getAstRoot, (, this, )]
[ast]
[this]
[newRoot, ==, null]
[newRoot]
[null]
[false]
[oldInput, ., getAstRoot, (, this, )]
[oldInput]
[this]
[oldRoot, !=, null]
[oldRoot]
[null]
[oldRoot, ., getParent, (, ), ., replaceChild, (, oldRoot, ,, newRoot, )]
[oldRoot, ., getParent, (, )]
[oldRoot]
[oldRoot]
[newRoot]
[getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, )]
[getRoot, (, ), ., getLastChild, (, )]
[getRoot, (, )]
[newRoot]
[new, CompilerInput, (, ast, )]
[ast]
[putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, )]
[ast, ., getInputId, (, )]
[ast]
[newInput]
[oldInput, ., getModule, (, )]
[oldInput]
[module, !=, null]
[module]
[null]
[module, ., addAfter, (, newInput, ,, oldInput, )]
[module]
[newInput]
[oldInput]
[module, ., remove, (, oldInput, )]
[module]
[oldInput]
[Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), ), )]
[Preconditions]
[newInput, ., getInputId, (, ), ., equals, (, oldInput, ., getInputId, (, ), )]
[newInput, ., getInputId, (, )]
[newInput]
[oldInput, ., getInputId, (, )]
[oldInput]
[newInput, ., getAstRoot, (, this, ), ., getInputId, (, )]
[newInput, ., getAstRoot, (, this, )]
[newInput]
[this]
[Preconditions, ., checkState, (, newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, ), )]
[Preconditions]
[newInput, ., getInputId, (, ), ., equals, (, inputIdOnAst, )]
[newInput, ., getInputId, (, )]
[newInput]
[inputIdOnAst]
[inputs, ., remove, (, oldInput, )]
[inputs]
[oldInput]
[true]
[getInput, (, ast, ., getInputId, (, ), )]
[ast, ., getInputId, (, )]
[ast]
[oldInput, !=, null]
[oldInput]
[null]
[new, IllegalStateException, (, "Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, ), )]
["Input already exists: ", +, ast, ., getInputId, (, ), ., getIdName, (, )]
["Input already exists: "]
[ast, ., getInputId, (, ), ., getIdName, (, )]
[ast, ., getInputId, (, )]
[ast]
[ast, ., getAstRoot, (, this, )]
[ast]
[this]
[newRoot, ==, null]
[newRoot]
[null]
[false]
[getRoot, (, ), ., getLastChild, (, ), ., addChildToBack, (, newRoot, )]
[getRoot, (, ), ., getLastChild, (, )]
[getRoot, (, )]
[newRoot]
[new, CompilerInput, (, ast, )]
[ast]
[moduleGraph, ==, null, &&, !, modules, ., isEmpty, (, )]
[moduleGraph, ==, null]
[moduleGraph]
[null]
[!, modules, ., isEmpty, (, )]
[modules, ., isEmpty, (, )]
[modules]
[modules, ., get, (, 0, ), ., add, (, newInput, )]
[modules, ., get, (, 0, )]
[modules]
[0]
[newInput]
[putCompilerInput, (, ast, ., getInputId, (, ), ,, newInput, )]
[ast, ., getInputId, (, )]
[ast]
[newInput]
[true]
[moduleGraph]
[moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph]
[moduleGraph, ==, null]
[moduleGraph]
[null]
[new, JSModuleGraph, (, modules, )]
[modules]
[moduleGraph]
[typeRegistry, ==, null]
[typeRegistry]
[null]
[typeRegistry]
[new, JSTypeRegistry, (, oldErrorReporter, ,, options, ., looseTypes, )]
[oldErrorReporter]
[options, ., looseTypes]
[options]
[typeRegistry]
[getPassConfig, (, ), ., getTypedScopeCreator, (, )]
[getPassConfig, (, )]
[@, SuppressWarnings, (, "unchecked", )]
["unchecked"]
[getPassConfig, (, ), ., getBasePassConfig, (, )]
[getPassConfig, (, )]
[Preconditions, ., checkState, (, passes, instanceof, DefaultPassConfig, ,, "PassConfigs must eventually delegate to the DefaultPassConfig", )]
[Preconditions]
[passes, instanceof, DefaultPassConfig]
[passes]
["PassConfigs must eventually delegate to the DefaultPassConfig"]
[(, DefaultPassConfig, ), passes]
[passes]
[new, SymbolTable, (, getTypeRegistry, (, ), )]
[getTypeRegistry, (, )]
[getTypedScopeCreator, (, )]
[typedScopeCreator, !=, null]
[typedScopeCreator]
[null]
[symbolTable, ., addScopes, (, typedScopeCreator, ., getAllMemoizedScopes, (, ), )]
[symbolTable]
[typedScopeCreator, ., getAllMemoizedScopes, (, )]
[typedScopeCreator]
[symbolTable, ., addSymbolsFrom, (, typedScopeCreator, )]
[symbolTable]
[typedScopeCreator]
[symbolTable, ., findScopes, (, this, ,, externsRoot, ,, jsRoot, )]
[symbolTable]
[this]
[externsRoot]
[jsRoot]
[ensureDefaultPassConfig, (, ), ., getGlobalNamespace, (, )]
[ensureDefaultPassConfig, (, )]
[globalNamespace, !=, null]
[globalNamespace]
[null]
[symbolTable, ., addSymbolsFrom, (, globalNamespace, )]
[symbolTable]
[globalNamespace]
[new, ReferenceCollectingCallback, (, this, ,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, )]
[this]
[ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR]
[ReferenceCollectingCallback]
[NodeTraversal, ., traverse, (, this, ,, getRoot, (, ), ,, refCollector, )]
[NodeTraversal]
[this]
[getRoot, (, )]
[refCollector]
[symbolTable, ., addSymbolsFrom, (, refCollector, )]
[symbolTable]
[refCollector]
[ensureDefaultPassConfig, (, ), ., getPreprocessorSymbolTable, (, )]
[ensureDefaultPassConfig, (, )]
[preprocessorSymbolTable, !=, null]
[preprocessorSymbolTable]
[null]
[symbolTable, ., addSymbolsFrom, (, preprocessorSymbolTable, )]
[symbolTable]
[preprocessorSymbolTable]
[symbolTable, ., fillNamespaceReferences, (, )]
[symbolTable]
[symbolTable, ., fillPropertyScopes, (, )]
[symbolTable]
[symbolTable, ., fillThisReferences, (, this, ,, externsRoot, ,, jsRoot, )]
[symbolTable]
[this]
[externsRoot]
[jsRoot]
[symbolTable, ., fillPropertySymbols, (, this, ,, externsRoot, ,, jsRoot, )]
[symbolTable]
[this]
[externsRoot]
[jsRoot]
[symbolTable, ., fillJSDocInfo, (, this, ,, externsRoot, ,, jsRoot, )]
[symbolTable]
[this]
[externsRoot]
[jsRoot]
[symbolTable]
[getPassConfig, (, ), ., getTopScope, (, )]
[getPassConfig, (, )]
[abstractInterpreter, ==, null]
[abstractInterpreter]
[null]
[new, SemanticReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), )]
[getCodingConvention, (, )]
[getTypeRegistry, (, )]
[options, ., closurePass]
[options]
[interpreter]
[new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, ), ., getFirst, (, )]
[new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), ), ., append, (, interpreter, )]
[new, ClosureReverseAbstractInterpreter, (, getCodingConvention, (, ), ,, getTypeRegistry, (, ), )]
[getCodingConvention, (, )]
[getTypeRegistry, (, )]
[interpreter]
[abstractInterpreter]
[interpreter]
[abstractInterpreter]
[typeValidator, ==, null]
[typeValidator]
[null]
[typeValidator]
[new, TypeValidator, (, this, )]
[this]
[typeValidator]
[options, ., devMode, !=, DevMode, ., OFF]
[options, ., devMode]
[options]
[DevMode, ., OFF]
[DevMode]
[externsRoot, !=, null]
[externsRoot]
[null]
[externsRoot, ., detachChildren, (, )]
[externsRoot]
[jsRoot, !=, null]
[jsRoot]
[null]
[jsRoot, ., detachChildren, (, )]
[jsRoot]
[jsRoot]
[IR, ., block, (, )]
[IR]
[jsRoot, ., setIsSyntheticBlock, (, true, )]
[jsRoot]
[true]
[externsRoot]
[IR, ., block, (, )]
[IR]
[externsRoot, ., setIsSyntheticBlock, (, true, )]
[externsRoot]
[true]
[externAndJsRoot]
[IR, ., block, (, externsRoot, ,, jsRoot, )]
[IR]
[externsRoot]
[jsRoot]
[externAndJsRoot, ., setIsSyntheticBlock, (, true, )]
[externAndJsRoot]
[true]
[options, ., tracer, ., isOn, (, )]
[options, ., tracer]
[options]
[tracker]
[new, PerformanceTracker, (, jsRoot, ,, options, ., tracer, )]
[jsRoot]
[options, ., tracer]
[options]
[addChangeHandler, (, tracker, ., getCodeChangeHandler, (, ), )]
[tracker, ., getCodeChangeHandler, (, )]
[tracker]
[newTracer, (, "parseInputs", )]
["parseInputs"]
[externs]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[hasErrors, (, )]
[null]
[externsRoot, ., addChildToBack, (, n, )]
[externsRoot]
[n]
[options, ., transformAMDToCJSModules, ||, options, ., processCommonJSModules]
[options, ., transformAMDToCJSModules]
[options]
[options, ., processCommonJSModules]
[options]
[processAMDAndCommonJSModules, (, )]
[hoistExterns, (, externsRoot, )]
[externsRoot]
[false]
[options, ., dependencyOptions, ., needsManagement, (, )]
[options, ., dependencyOptions]
[options]
[inputs]
[input, ., getProvides, (, )]
[input]
[getTypeRegistry, (, ), ., forwardDeclareType, (, provide, )]
[getTypeRegistry, (, )]
[provide]
[inputs]
[(, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, ), ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, )]
[(, moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph, )]
[moduleGraph, ==, null, ?, new, JSModuleGraph, (, modules, ), :, moduleGraph]
[moduleGraph, ==, null]
[moduleGraph]
[null]
[new, JSModuleGraph, (, modules, )]
[modules]
[moduleGraph]
[options, ., dependencyOptions]
[options]
[inputs]
[staleInputs]
[true]
[report, (, JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), ), )]
[JSError, ., make, (, JSModule, ., CIRCULAR_DEPENDENCY_ERROR, ,, e, ., getMessage, (, ), )]
[JSError]
[JSModule, ., CIRCULAR_DEPENDENCY_ERROR]
[JSModule]
[e, ., getMessage, (, )]
[e]
[hasErrors, (, )]
[null]
[report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage, (, ), ), )]
[JSError, ., make, (, MISSING_ENTRY_ERROR, ,, e, ., getMessage, (, ), )]
[JSError]
[MISSING_ENTRY_ERROR]
[e, ., getMessage, (, )]
[e]
[hasErrors, (, )]
[null]
[hoistNoCompileFiles, (, )]
[staleInputs]
[repartitionInputs, (, )]
[inputs]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[n, ==, null]
[n]
[null]
[devMode]
[runSanityCheck, (, )]
[hasErrors, (, )]
[null]
[options, ., sourceMapOutputPath, !=, null, ||, options, ., nameReferenceReportPath, !=, null]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[options, ., nameReferenceReportPath, !=, null]
[options, ., nameReferenceReportPath]
[options]
[null]
[new, SourceInformationAnnotator, (, input, ., getName, (, ), ,, options, ., devMode, !=, DevMode, ., OFF, )]
[input, ., getName, (, )]
[input]
[options, ., devMode, !=, DevMode, ., OFF]
[options, ., devMode]
[options]
[DevMode, ., OFF]
[DevMode]
[NodeTraversal, ., traverse, (, this, ,, n, ,, sia, )]
[NodeTraversal]
[this]
[n]
[sia]
[jsRoot, ., addChildToBack, (, n, )]
[jsRoot]
[n]
[hasErrors, (, )]
[null]
[externAndJsRoot]
[stopTracer, (, tracer, ,, "parseInputs", )]
[tracer]
["parseInputs"]
[false]
[inputs]
[options, ., dependencyOptions, ., needsManagement, (, )]
[options, ., dependencyOptions]
[options]
[!, input, ., getProvides, (, ), ., isEmpty, (, ), ||, !, input, ., getRequires, (, ), ., isEmpty, (, )]
[!, input, ., getProvides, (, ), ., isEmpty, (, )]
[input, ., getProvides, (, ), ., isEmpty, (, )]
[input, ., getProvides, (, )]
[input]
[!, input, ., getRequires, (, ), ., isEmpty, (, )]
[input, ., getRequires, (, ), ., isEmpty, (, )]
[input, ., getRequires, (, )]
[input]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[n, ==, null]
[n]
[null]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null, &&, info, ., isExterns, (, )]
[info, !=, null]
[info]
[null]
[info, ., isExterns, (, )]
[info]
[externsRoot, ., addChildToBack, (, n, )]
[externsRoot]
[n]
[input, ., setIsExtern, (, true, )]
[input]
[true]
[input, ., getModule, (, ), ., remove, (, input, )]
[input, ., getModule, (, )]
[input]
[input]
[externs, ., add, (, input, )]
[externs]
[input]
[staleInputs]
[true]
[staleInputs]
[repartitionInputs, (, )]
[false]
[inputs]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[n, ==, null]
[n]
[null]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null, &&, info, ., isNoCompile, (, )]
[info, !=, null]
[info]
[null]
[info, ., isNoCompile, (, )]
[info]
[input, ., getModule, (, ), ., remove, (, input, )]
[input, ., getModule, (, )]
[input]
[input]
[staleInputs]
[true]
[staleInputs]
[repartitionInputs, (, )]
[fillEmptyModules, (, modules, )]
[modules]
[rebuildInputsFromModules, (, )]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[inputs]
[input, ., setCompiler, (, this, )]
[input]
[this]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[root, ==, null]
[root]
[null]
[options, ., transformAMDToCJSModules]
[options]
[new, TransformAMDToCJSModule, (, this, ), ., process, (, null, ,, root, )]
[new, TransformAMDToCJSModule, (, this, )]
[this]
[null]
[root]
[options, ., processCommonJSModules]
[options]
[new, ProcessCommonJSModules, (, this, ,, options, ., commonJSModulePathPrefix, )]
[this]
[options, ., commonJSModulePathPrefix]
[options]
[cjs, ., process, (, null, ,, root, )]
[cjs]
[null]
[root]
[cjs, ., getModule, (, )]
[cjs]
[m, !=, null]
[m]
[null]
[modulesByName, ., put, (, m, ., getName, (, ), ,, m, )]
[modulesByName]
[m, ., getName, (, )]
[m]
[m]
[modulesByInput, ., put, (, input, ,, m, )]
[modulesByInput]
[input]
[m]
[options, ., processCommonJSModules]
[options]
[Lists, ., newArrayList, (, modulesByName, ., values, (, ), )]
[Lists]
[modulesByName, ., values, (, )]
[modulesByName]
[!, modules, ., isEmpty, (, )]
[modules, ., isEmpty, (, )]
[modules]
[this, ., modules]
[this]
[modules]
[this, ., moduleGraph]
[this]
[new, JSModuleGraph, (, this, ., modules, )]
[this, ., modules]
[this]
[modules]
[module, ., getInputs, (, )]
[module]
[input, ., getRequires, (, )]
[input]
[modulesByName, ., get, (, require, )]
[modulesByName]
[require]
[dependency, ==, null]
[dependency]
[null]
[report, (, JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, ), )]
[JSError, ., make, (, MISSING_ENTRY_ERROR, ,, require, )]
[JSError]
[MISSING_ENTRY_ERROR]
[require]
[module, ., addDependency, (, dependency, )]
[module]
[dependency]
[modules]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., moduleGraph, ., manageDependencies, (, options, ., dependencyOptions, ,, inputs, )]
[this, ., moduleGraph]
[this]
[options, ., dependencyOptions]
[options]
[inputs]
[modules, ., add, (, modulesByInput, ., get, (, input, ), )]
[modules]
[modulesByInput, ., get, (, input, )]
[modulesByInput]
[input]
[new, JSModule, (, "root", )]
["root"]
[modules]
[m, ., addDependency, (, root, )]
[m]
[root]
[modules, ., add, (, 0, ,, root, )]
[modules]
[0]
[root]
[new, SortedDependencies, <, JSModule, >, (, modules, )]
[modules]
[modules]
[sorter, ., getDependenciesOf, (, modules, ,, true, )]
[sorter]
[modules]
[true]
[this, ., modules]
[this]
[modules]
[this, ., moduleGraph]
[this]
[new, JSModuleGraph, (, modules, )]
[modules]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[initCompilerOptionsIfTesting, (, )]
[addToDebugLog, (, "Parsing: ", +, file, ., getName, (, ), )]
["Parsing: ", +, file, ., getName, (, )]
["Parsing: "]
[file, ., getName, (, )]
[file]
[new, JsAst, (, file, ), ., getAstRoot, (, this, )]
[new, JsAst, (, file, )]
[file]
[this]
[0]
[new, CompilerInput, (, SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, ), )]
[SourceFile, ., fromCode, (, " [synthetic:", +, (, ++, syntheticCodeId, ), +, "] ", ,, js, )]
[SourceFile]
[" [synthetic:", +, (, ++, syntheticCodeId, ), +, "] "]
[" [synthetic:", +, (, ++, syntheticCodeId, )]
[" [synthetic:"]
[(, ++, syntheticCodeId, )]
[++, syntheticCodeId]
[syntheticCodeId]
["] "]
[js]
[putCompilerInput, (, input, ., getInputId, (, ), ,, input, )]
[input, ., getInputId, (, )]
[input]
[input]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[new, CompilerOptions, (, )]
[options, ==, null]
[options]
[null]
[initOptions, (, newCompilerOptions, (, ), )]
[newCompilerOptions, (, )]
[initCompilerOptionsIfTesting, (, )]
[parse, (, SourceFile, ., fromCode, (, fileName, ,, js, ), )]
[SourceFile, ., fromCode, (, fileName, ,, js, )]
[SourceFile]
[fileName]
[js]
[initCompilerOptionsIfTesting, (, )]
[new, CompilerInput, (, SourceFile, ., fromCode, (, "[testcode]", ,, js, ), )]
[SourceFile, ., fromCode, (, "[testcode]", ,, js, )]
[SourceFile]
["[testcode]"]
[js]
[inputsById, ==, null]
[inputsById]
[null]
[inputsById]
[Maps, ., newHashMap, (, )]
[Maps]
[putCompilerInput, (, input, ., getInputId, (, ), ,, input, )]
[input, ., getInputId, (, )]
[input]
[input]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[defaultErrorReporter]
[runInCompilerThread, (, new, Callable, <, String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,, "toSource", ), ;, }, }, }, )]
[new, Callable, <, String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSource", ), ;, try, {, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, if, (, jsRoot, !=, null, ), {, int, i, =, 0, ;, for, (, Node, scriptNode, =, jsRoot, ., getFirstChild, (, ), ;, scriptNode, !=, null, ;, scriptNode, =, scriptNode, ., getNext, (, ), ), {, toSource, (, cb, ,, i, ++, ,, scriptNode, ), ;, }, }, return, cb, ., toString, (, ), ;, }, finally, {, stopTracer, (, tracer, ,, "toSource", ), ;, }, }, }]
[newTracer, (, "toSource", )]
["toSource"]
[new, CodeBuilder, (, )]
[jsRoot, !=, null]
[jsRoot]
[null]
[0]
[jsRoot, ., getFirstChild, (, )]
[jsRoot]
[scriptNode, !=, null]
[scriptNode]
[null]
[scriptNode]
[scriptNode, ., getNext, (, )]
[scriptNode]
[toSource, (, cb, ,, i, ++, ,, scriptNode, )]
[cb]
[i, ++]
[i]
[scriptNode]
[cb, ., toString, (, )]
[cb]
[stopTracer, (, tracer, ,, "toSource", )]
[tracer]
["toSource"]
[runInCompilerThread, (, new, Callable, <, String, [, ], >, (, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSourceArray", ), ;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", ), ;, }, }, }, )]
[new, Callable, <, String, [, ], >, (, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, Tracer, tracer, =, newTracer, (, "toSourceArray", ), ;, try, {, int, numInputs, =, inputs, ., size, (, ), ;, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, finally, {, stopTracer, (, tracer, ,, "toSourceArray", ), ;, }, }, }]
[newTracer, (, "toSourceArray", )]
["toSourceArray"]
[inputs, ., size, (, )]
[inputs]
[new, String, [, numInputs, ]]
[numInputs]
[new, CodeBuilder, (, )]
[0]
[i, <, numInputs]
[i]
[numInputs]
[i, ++]
[i]
[inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, )]
[inputs, ., get, (, i, )]
[inputs]
[i]
[Compiler, ., this]
[cb, ., reset, (, )]
[cb]
[toSource, (, cb, ,, i, ,, scriptNode, )]
[cb]
[i]
[scriptNode]
[sources, [, i, ]]
[sources]
[i]
[cb, ., toString, (, )]
[cb]
[sources]
[stopTracer, (, tracer, ,, "toSourceArray", )]
[tracer]
["toSourceArray"]
[runInCompilerThread, (, new, Callable, <, String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;, }, }, )]
[new, Callable, <, String, >, (, ), {, @, Override, public, String, call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, "", ;, }, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), ), ;, }, toSource, (, cb, ,, i, ,, scriptNode, ), ;, }, return, cb, ., toString, (, ), ;, }, }]
[module, ., getInputs, (, )]
[module]
[inputs, ., size, (, )]
[inputs]
[numInputs, ==, 0]
[numInputs]
[0]
[""]
[new, CodeBuilder, (, )]
[0]
[i, <, numInputs]
[i]
[numInputs]
[i, ++]
[i]
[inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, )]
[inputs, ., get, (, i, )]
[inputs]
[i]
[Compiler, ., this]
[scriptNode, ==, null]
[scriptNode]
[null]
[new, IllegalArgumentException, (, "Bad module: ", +, module, ., getName, (, ), )]
["Bad module: ", +, module, ., getName, (, )]
["Bad module: "]
[module, ., getName, (, )]
[module]
[toSource, (, cb, ,, i, ,, scriptNode, )]
[cb]
[i]
[scriptNode]
[cb, ., toString, (, )]
[cb]
[runInCompilerThread, (, new, Callable, <, String, [, ], >, (, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }, )]
[new, Callable, <, String, [, ], >, (, ), {, @, Override, public, String, [, ], call, (, ), throws, Exception, {, List, <, CompilerInput, >, inputs, =, module, ., getInputs, (, ), ;, int, numInputs, =, inputs, ., size, (, ), ;, if, (, numInputs, ==, 0, ), {, return, new, String, [, 0, ], ;, }, String, [, ], sources, =, new, String, [, numInputs, ], ;, CodeBuilder, cb, =, new, CodeBuilder, (, ), ;, for, (, int, i, =, 0, ;, i, <, numInputs, ;, i, ++, ), {, Node, scriptNode, =, inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, ), ;, if, (, scriptNode, ==, null, ), {, throw, new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), ), ;, }, cb, ., reset, (, ), ;, toSource, (, cb, ,, i, ,, scriptNode, ), ;, sources, [, i, ], =, cb, ., toString, (, ), ;, }, return, sources, ;, }, }]
[module, ., getInputs, (, )]
[module]
[inputs, ., size, (, )]
[inputs]
[numInputs, ==, 0]
[numInputs]
[0]
[new, String, [, 0, ]]
[0]
[new, String, [, numInputs, ]]
[numInputs]
[new, CodeBuilder, (, )]
[0]
[i, <, numInputs]
[i]
[numInputs]
[i, ++]
[i]
[inputs, ., get, (, i, ), ., getAstRoot, (, Compiler, ., this, )]
[inputs, ., get, (, i, )]
[inputs]
[i]
[Compiler, ., this]
[scriptNode, ==, null]
[scriptNode]
[null]
[new, IllegalArgumentException, (, "Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, ), )]
["Bad module input: ", +, inputs, ., get, (, i, ), ., getName, (, )]
["Bad module input: "]
[inputs, ., get, (, i, ), ., getName, (, )]
[inputs, ., get, (, i, )]
[inputs]
[i]
[cb, ., reset, (, )]
[cb]
[toSource, (, cb, ,, i, ,, scriptNode, )]
[cb]
[i]
[scriptNode]
[sources, [, i, ]]
[sources]
[i]
[cb, ., toString, (, )]
[cb]
[sources]
[runInCompilerThread, (, new, Callable, <, Void, >, (, ), {, @, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }, }, )]
[new, Callable, <, Void, >, (, ), {, @, Override, public, Void, call, (, ), throws, Exception, {, if, (, options, ., printInputDelimiter, ), {, if, (, (, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", ), ), {, cb, ., append, (, "\n", ), ;, }, Preconditions, ., checkState, (, root, ., isScript, (, ), ), ;, String, delimiter, =, options, ., inputDelimiter, ;, String, inputName, =, root, ., getInputId, (, ), ., getIdName, (, ), ;, String, sourceName, =, root, ., getSourceFileName, (, ), ;, Preconditions, ., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), ), ;, delimiter, =, delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), ), ;, cb, ., append, (, delimiter, ), ., append, (, "\n", ), ;, }, if, (, root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null, ), {, cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", ), ;, }, if, (, options, ., sourceMapOutputPath, !=, null, ), {, sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), ), ;, }, String, code, =, toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, ), ;, if, (, !, code, ., isEmpty, (, ), ), {, cb, ., append, (, code, ), ;, int, length, =, code, ., length, (, ), ;, char, lastChar, =, code, ., charAt, (, length, -, 1, ), ;, char, secondLastChar, =, length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0', ;, boolean, hasSemiColon, =, lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', ), ;, if, (, !, hasSemiColon, ), {, cb, ., append, (, ";", ), ;, }, }, return, null, ;, }, }]
[options, ., printInputDelimiter]
[options]
[(, cb, ., getLength, (, ), >, 0, ), &&, !, cb, ., endsWith, (, "\n", )]
[(, cb, ., getLength, (, ), >, 0, )]
[cb, ., getLength, (, ), >, 0]
[cb, ., getLength, (, )]
[cb]
[0]
[!, cb, ., endsWith, (, "\n", )]
[cb, ., endsWith, (, "\n", )]
[cb]
["\n"]
[cb, ., append, (, "\n", )]
[cb]
["\n"]
[Preconditions, ., checkState, (, root, ., isScript, (, ), )]
[Preconditions]
[root, ., isScript, (, )]
[root]
[options, ., inputDelimiter]
[options]
[root, ., getInputId, (, ), ., getIdName, (, )]
[root, ., getInputId, (, )]
[root]
[root, ., getSourceFileName, (, )]
[root]
[Preconditions, ., checkState, (, sourceName, !=, null, )]
[Preconditions]
[sourceName, !=, null]
[sourceName]
[null]
[Preconditions, ., checkState, (, !, sourceName, ., isEmpty, (, ), )]
[Preconditions]
[!, sourceName, ., isEmpty, (, )]
[sourceName, ., isEmpty, (, )]
[sourceName]
[delimiter]
[delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), ), ., replaceAll, (, "%num%", ,, String, ., valueOf, (, inputSeqNum, ), )]
[delimiter, ., replaceAll, (, "%name%", ,, Matcher, ., quoteReplacement, (, inputName, ), )]
[delimiter]
["%name%"]
[Matcher, ., quoteReplacement, (, inputName, )]
[Matcher]
[inputName]
["%num%"]
[String, ., valueOf, (, inputSeqNum, )]
[String]
[inputSeqNum]
[cb, ., append, (, delimiter, ), ., append, (, "\n", )]
[cb, ., append, (, delimiter, )]
[cb]
[delimiter]
["\n"]
[root, ., getJSDocInfo, (, ), !=, null, &&, root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null]
[root, ., getJSDocInfo, (, ), !=, null]
[root, ., getJSDocInfo, (, )]
[root]
[null]
[root, ., getJSDocInfo, (, ), ., getLicense, (, ), !=, null]
[root, ., getJSDocInfo, (, ), ., getLicense, (, )]
[root, ., getJSDocInfo, (, )]
[root]
[null]
[cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), ), ., append, (, "*/\n", )]
[cb, ., append, (, "/*\n", ), ., append, (, root, ., getJSDocInfo, (, ), ., getLicense, (, ), )]
[cb, ., append, (, "/*\n", )]
[cb]
["/*\n"]
[root, ., getJSDocInfo, (, ), ., getLicense, (, )]
[root, ., getJSDocInfo, (, )]
[root]
["*/\n"]
[options, ., sourceMapOutputPath, !=, null]
[options, ., sourceMapOutputPath]
[options]
[null]
[sourceMap, ., setStartingPosition, (, cb, ., getLineIndex, (, ), ,, cb, ., getColumnIndex, (, ), )]
[sourceMap]
[cb, ., getLineIndex, (, )]
[cb]
[cb, ., getColumnIndex, (, )]
[cb]
[toSource, (, root, ,, sourceMap, ,, inputSeqNum, ==, 0, )]
[root]
[sourceMap]
[inputSeqNum, ==, 0]
[inputSeqNum]
[0]
[!, code, ., isEmpty, (, )]
[code, ., isEmpty, (, )]
[code]
[cb, ., append, (, code, )]
[cb]
[code]
[code, ., length, (, )]
[code]
[code, ., charAt, (, length, -, 1, )]
[code]
[length, -, 1]
[length]
[1]
[length, >=, 2, ?, code, ., charAt, (, length, -, 2, ), :, '\0']
[length, >=, 2]
[length]
[2]
[code, ., charAt, (, length, -, 2, )]
[code]
[length, -, 2]
[length]
[2]
['\0']
[lastChar, ==, ';', ||, (, lastChar, ==, '\n', &&, secondLastChar, ==, ';', )]
[lastChar, ==, ';']
[lastChar]
[';']
[(, lastChar, ==, '\n', &&, secondLastChar, ==, ';', )]
[lastChar, ==, '\n', &&, secondLastChar, ==, ';']
[lastChar, ==, '\n']
[lastChar]
['\n']
[secondLastChar, ==, ';']
[secondLastChar]
[';']
[!, hasSemiColon]
[hasSemiColon]
[cb, ., append, (, ";", )]
[cb]
[";"]
[null]
[initCompilerOptionsIfTesting, (, )]
[toSource, (, n, ,, null, ,, true, )]
[n]
[null]
[true]
[new, CodePrinter, ., Builder, (, n, )]
[n]
[builder, ., setCompilerOptions, (, options, )]
[builder]
[options]
[builder, ., setSourceMap, (, sourceMap, )]
[builder]
[sourceMap]
[builder, ., setTagAsStrict, (, firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, )]
[builder]
[firstOutput, &&, options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[firstOutput]
[options, ., getLanguageOut, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[options, ., getLanguageOut, (, )]
[options]
[LanguageMode, ., ECMASCRIPT5_STRICT]
[LanguageMode]
[builder, ., build, (, )]
[builder]
[new, StringBuilder, (, )]
[0]
[0]
[sb, ., setLength, (, 0, )]
[sb]
[0]
[sb, ., append, (, str, )]
[sb]
[str]
[-, 1]
[1]
[index]
[(, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), ), >=, 0]
[(, index, =, str, ., indexOf, (, '\n', ,, index, +, 1, ), )]
[index]
[str, ., indexOf, (, '\n', ,, index, +, 1, )]
[str]
['\n']
[index, +, 1]
[index]
[1]
[0]
[++, lineCount]
[lineCount]
[lastIndex]
[index]
[lastIndex, ==, -, 1]
[lastIndex]
[-, 1]
[1]
[colCount]
[str, ., length, (, )]
[str]
[colCount]
[str, ., length, (, ), -, (, lastIndex, +, 1, )]
[str, ., length, (, )]
[str]
[(, lastIndex, +, 1, )]
[lastIndex, +, 1]
[lastIndex]
[1]
[this]
[sb, ., toString, (, )]
[sb]
[sb, ., length, (, )]
[sb]
[lineCount]
[colCount]
[(, sb, ., length, (, ), >, suffix, ., length, (, ), ), &&, suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (, ), ), )]
[(, sb, ., length, (, ), >, suffix, ., length, (, ), )]
[sb, ., length, (, ), >, suffix, ., length, (, )]
[sb, ., length, (, )]
[sb]
[suffix, ., length, (, )]
[suffix]
[suffix, ., equals, (, sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (, ), ), )]
[suffix]
[sb, ., substring, (, sb, ., length, (, ), -, suffix, ., length, (, ), )]
[sb]
[sb, ., length, (, ), -, suffix, ., length, (, )]
[sb, ., length, (, )]
[sb]
[suffix, ., length, (, )]
[suffix]
[normalize, (, )]
[new, PhaseOptimizer, (, this, ,, tracker, ,, null, )]
[this]
[tracker]
[null]
[options, ., devMode, ==, DevMode, ., EVERY_PASS]
[options, ., devMode]
[options]
[DevMode, ., EVERY_PASS]
[DevMode]
[phaseOptimizer, ., setSanityCheck, (, sanityCheck, )]
[phaseOptimizer]
[sanityCheck]
[phaseOptimizer, ., consume, (, getPassConfig, (, ), ., getOptimizations, (, ), )]
[phaseOptimizer]
[getPassConfig, (, ), ., getOptimizations, (, )]
[getPassConfig, (, )]
[phaseOptimizer, ., process, (, externsRoot, ,, jsRoot, )]
[phaseOptimizer]
[externsRoot]
[jsRoot]
[options, ., cssRenamingMap]
[options]
[map]
[options, ., cssRenamingMap]
[options]
[(, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (, this, ), ., process, (, externsRoot, ,, jsRoot, )]
[(, new, DefaultPassConfig, (, options, ), ), ., processDefines, ., create, (, this, )]
[(, new, DefaultPassConfig, (, options, ), ), ., processDefines]
[(, new, DefaultPassConfig, (, options, ), )]
[new, DefaultPassConfig, (, options, )]
[options]
[this]
[externsRoot]
[jsRoot]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., HEURISTIC]
[PropertyRenamingPolicy]
[options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[options, ., propertyRenaming]
[options]
[PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC]
[PropertyRenamingPolicy]
[logger, ., fine, (, "Computing Control Flow Graph", )]
[logger]
["Computing Control Flow Graph"]
[newTracer, (, "computeCFG", )]
["computeCFG"]
[new, ControlFlowAnalysis, (, this, ,, true, ,, false, )]
[this]
[true]
[false]
[process, (, cfa, )]
[cfa]
[stopTracer, (, tracer, ,, "computeCFG", )]
[tracer]
["computeCFG"]
[cfa, ., getCfg, (, )]
[cfa]
[logger, ., fine, (, "Normalizing", )]
[logger]
["Normalizing"]
[startPass, (, "normalize", )]
["normalize"]
[process, (, new, Normalize, (, this, ,, false, ), )]
[new, Normalize, (, this, ,, false, )]
[this]
[false]
[endPass, (, )]
[new, PrepareAst, (, this, )]
[this]
[pass, ., process, (, null, ,, root, )]
[pass]
[null]
[root]
[logger, ., fine, (, "Recording function information", )]
[logger]
["Recording function information"]
[startPass, (, "recordFunctionInformation", )]
["recordFunctionInformation"]
[new, RecordFunctionInformation, (, this, ,, getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames, )]
[this]
[getPassConfig, (, ), ., getIntermediateState, (, ), ., functionNames]
[getPassConfig, (, ), ., getIntermediateState, (, )]
[getPassConfig, (, )]
[process, (, recordFunctionInfoPass, )]
[recordFunctionInfoPass]
[functionInformationMap]
[recordFunctionInfoPass, ., getMap, (, )]
[recordFunctionInfoPass]
[endPass, (, )]
[new, CodeChangeHandler, ., RecentChange, (, )]
[Lists, ., <, CodeChangeHandler, >, newArrayList, (, )]
[Lists]
["{SyntheticVarsDeclar}"]
[null]
[codeChangeHandlers, ., add, (, handler, )]
[codeChangeHandlers]
[handler]
[codeChangeHandlers, ., remove, (, handler, )]
[codeChangeHandlers]
[handler]
[codeChangeHandlers]
[handler, ., reportChange, (, )]
[handler]
[options, ., getCodingConvention, (, )]
[options]
[convention]
[convention, !=, null, ?, convention, :, defaultCodingConvention]
[convention, !=, null]
[convention]
[null]
[convention]
[defaultCodingConvention]
[convention]
[options, ., ideMode]
[options]
[options, ., getLanguageIn, (, )]
[options]
[ECMASCRIPT5]
[ECMASCRIPT5_STRICT]
[true]
[ECMASCRIPT3]
[false]
[new, IllegalStateException, (, "unexpected language mode", )]
["unexpected language mode"]
[options, ., getLanguageIn, (, )]
[options]
[options, ., acceptConstKeyword]
[options]
[parserConfig, ==, null]
[parserConfig]
[null]
[options, ., getLanguageIn, (, )]
[options]
[ECMASCRIPT3]
[mode]
[Config, ., LanguageMode, ., ECMASCRIPT3]
[Config, ., LanguageMode]
[Config]
[ECMASCRIPT5]
[mode]
[Config, ., LanguageMode, ., ECMASCRIPT5]
[Config, ., LanguageMode]
[Config]
[ECMASCRIPT5_STRICT]
[mode]
[Config, ., LanguageMode, ., ECMASCRIPT5_STRICT]
[Config, ., LanguageMode]
[Config]
[new, IllegalStateException, (, "unexpected language mode", )]
["unexpected language mode"]
[parserConfig]
[ParserRunner, ., createConfig, (, isIdeMode, (, ), ,, mode, ,, acceptConstKeyword, (, ), ,, options, ., extraAnnotationNames, )]
[ParserRunner]
[isIdeMode, (, )]
[mode]
[acceptConstKeyword, (, )]
[options, ., extraAnnotationNames]
[options]
[parserConfig]
[options, ., checkTypes]
[options]
[new, DiagnosticGroups, (, )]
[error, ., getDefaultLevel, (, )]
[error]
[warningsGuard, !=, null]
[warningsGuard]
[null]
[warningsGuard, ., level, (, error, )]
[warningsGuard]
[error]
[newLevel, !=, null]
[newLevel]
[null]
[level]
[newLevel]
[level, ., isOn, (, )]
[level]
[getOptions, (, ), ., errorHandler, !=, null]
[getOptions, (, ), ., errorHandler]
[getOptions, (, )]
[null]
[getOptions, (, ), ., errorHandler, ., report, (, level, ,, error, )]
[getOptions, (, ), ., errorHandler]
[getOptions, (, )]
[level]
[error]
[errorManager, ., report, (, level, ,, error, )]
[errorManager]
[level]
[error]
[Preconditions, ., checkNotNull, (, options, )]
[Preconditions]
[options]
[warningsGuard, ., level, (, error, )]
[warningsGuard]
[error]
["INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n", +, message]
["INTERNAL COMPILER ERROR.\n", +, "Please report this problem.\n"]
["INTERNAL COMPILER ERROR.\n"]
["Please report this problem.\n"]
[message]
[new, RuntimeException, (, finalMessage, ,, cause, )]
[finalMessage]
[cause]
[cause, !=, null]
[cause]
[null]
[e, ., setStackTrace, (, cause, ., getStackTrace, (, ), )]
[e]
[cause, ., getStackTrace, (, )]
[cause]
[e]
[errorManager, ., getErrorCount, (, )]
[errorManager]
[errorManager, ., getWarningCount, (, )]
[errorManager]
[!, isIdeMode, (, ), &&, getErrorCount, (, ), >, 0]
[!, isIdeMode, (, )]
[isIdeMode, (, )]
[getErrorCount, (, ), >, 0]
[getErrorCount, (, )]
[0]
[hasHaltingErrors, (, )]
[debugLog, ., append, (, str, )]
[debugLog]
[str]
[debugLog, ., append, (, '\n', )]
[debugLog]
['\n']
[logger, ., fine, (, str, )]
[logger]
[str]
[sourceName, !=, null]
[sourceName]
[null]
[inputsById, ., get, (, new, InputId, (, sourceName, ), )]
[inputsById]
[new, InputId, (, sourceName, )]
[sourceName]
[input, !=, null]
[input]
[null]
[input, ., getSourceFile, (, )]
[input]
[null]
[lineNumber, <, 1]
[lineNumber]
[1]
[null]
[getSourceFileByName, (, sourceName, )]
[sourceName]
[input, !=, null]
[input]
[null]
[input, ., getLine, (, lineNumber, )]
[input]
[lineNumber]
[null]
[lineNumber, <, 1]
[lineNumber]
[1]
[null]
[getSourceFileByName, (, sourceName, )]
[sourceName]
[input, !=, null]
[input]
[null]
[input, ., getRegion, (, lineNumber, )]
[input]
[lineNumber]
[null]
[module, ==, null]
[module]
[null]
[inputs, ., isEmpty, (, )]
[inputs]
[new, IllegalStateException, (, "No inputs", )]
["No inputs"]
[inputs, ., get, (, 0, ), ., getAstRoot, (, this, )]
[inputs, ., get, (, 0, )]
[inputs]
[0]
[this]
[module, ., getInputs, (, )]
[module]
[moduleInputs, ., size, (, ), >, 0]
[moduleInputs, ., size, (, )]
[moduleInputs]
[0]
[moduleInputs, ., get, (, 0, ), ., getAstRoot, (, this, )]
[moduleInputs, ., get, (, 0, )]
[moduleInputs]
[0]
[this]
[new, IllegalStateException, (, "Root module has no inputs", )]
["Root module has no inputs"]
[sourceMap]
[getPassConfig, (, ), ., getIntermediateState, (, ), ., variableMap]
[getPassConfig, (, ), ., getIntermediateState, (, )]
[getPassConfig, (, )]
[getPassConfig, (, ), ., getIntermediateState, (, ), ., propertyMap]
[getPassConfig, (, ), ., getIntermediateState, (, )]
[getPassConfig, (, )]
[options]
[functionInformationMap]
[logger, ., setLevel, (, level, )]
[logger]
[level]
[jsRoot, !=, null]
[jsRoot]
[null]
[new, ControlFlowAnalysis, (, this, ,, true, ,, false, )]
[this]
[true]
[false]
[cfa, ., process, (, null, ,, jsRoot, )]
[cfa]
[null]
[jsRoot]
[DotFormatter, ., toDot, (, jsRoot, ,, cfa, ., getCfg, (, ), )]
[DotFormatter]
[jsRoot]
[cfa, ., getCfg, (, )]
[cfa]
[""]
[options, ==, null]
[options]
[null]
[initOptions, (, newCompilerOptions, (, ), )]
[newCompilerOptions, (, )]
[errorManager]
[Collections, ., <, CompilerInput, >, unmodifiableList, (, inputs, )]
[Collections]
[inputs]
[Collections, ., unmodifiableMap, (, inputsById, )]
[Collections]
[inputsById]
[Collections, ., <, CompilerInput, >, unmodifiableList, (, externs, )]
[Collections]
[externs]
[1L]
[new, IntermediateState, (, )]
[state, ., externsRoot]
[state]
[externsRoot]
[state, ., jsRoot]
[state]
[jsRoot]
[state, ., externs]
[state]
[externs]
[state, ., inputs]
[state]
[inputs]
[state, ., modules]
[state]
[modules]
[state, ., passConfigState]
[state]
[getPassConfig, (, ), ., getIntermediateState, (, )]
[getPassConfig, (, )]
[state, ., typeRegistry]
[state]
[typeRegistry]
[state, ., lifeCycleStage]
[state]
[getLifeCycleStage, (, )]
[state, ., injectedLibraries]
[state]
[Maps, ., newLinkedHashMap, (, injectedLibraries, )]
[Maps]
[injectedLibraries]
[state]
[externsRoot]
[state, ., externsRoot]
[state]
[jsRoot]
[state, ., jsRoot]
[state]
[externs]
[state, ., externs]
[state]
[inputs]
[state, ., inputs]
[state]
[modules]
[state, ., modules]
[state]
[passes]
[createPassConfigInternal, (, )]
[getPassConfig, (, ), ., setIntermediateState, (, state, ., passConfigState, )]
[getPassConfig, (, )]
[state, ., passConfigState]
[state]
[typeRegistry]
[state, ., typeRegistry]
[state]
[setLifeCycleStage, (, state, ., lifeCycleStage, )]
[state, ., lifeCycleStage]
[state]
[injectedLibraries, ., clear, (, )]
[injectedLibraries]
[injectedLibraries, ., putAll, (, state, ., injectedLibraries, )]
[injectedLibraries]
[state, ., injectedLibraries]
[state]
[inputs]
[externs]
[hasRegExpGlobalReferences]
[hasRegExpGlobalReferences]
[references]
[Preconditions, ., checkState, (, collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, ), )]
[Preconditions]
[collectionRoot, ., isScript, (, ), ||, collectionRoot, ., isBlock, (, )]
[collectionRoot, ., isScript, (, )]
[collectionRoot]
[collectionRoot, ., isBlock, (, )]
[collectionRoot]
[globalRefMap, ==, null]
[globalRefMap]
[null]
[globalRefMap]
[new, GlobalVarReferenceMap, (, getInputsInOrder, (, ), ,, getExternsInOrder, (, ), )]
[getInputsInOrder, (, )]
[getExternsInOrder, (, )]
[globalRefMap, ., updateGlobalVarReferences, (, refMapPatch, ,, collectionRoot, )]
[globalRefMap]
[refMapPatch]
[collectionRoot]
[globalRefMap]
[synthesizedExternsInput, ==, null]
[synthesizedExternsInput]
[null]
[synthesizedExternsInput]
[newExternInput, (, SYNTHETIC_EXTERNS, )]
[SYNTHETIC_EXTERNS]
[synthesizedExternsInput]
[progress]
[lastPassName]
[this, ., lastPassName]
[this]
[passName]
[newProgress, >, 1.0]
[newProgress]
[1.0]
[progress]
[1.0]
[progress]
[newProgress]
[this, ., getInput, (, ast, ., getInputId, (, ), )]
[this]
[ast, ., getInputId, (, )]
[ast]
[!, replaceIncrementalSourceAst, (, ast, )]
[replaceIncrementalSourceAst, (, ast, )]
[ast]
[input, ., getAstRoot, (, this, )]
[input]
[this]
[processNewScript, (, ast, ,, originalRoot, )]
[ast]
[originalRoot]
[!, addNewSourceAst, (, ast, )]
[addNewSourceAst, (, ast, )]
[ast]
[new, Node, (, Token, ., SCRIPT, )]
[Token, ., SCRIPT]
[Token]
[ast, ., getInputId, (, )]
[ast]
[emptyScript, ., setInputId, (, inputId, )]
[emptyScript]
[inputId]
[emptyScript, ., setStaticSourceFile, (, SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", ), )]
[emptyScript]
[SourceFile, ., fromCode, (, inputId, ., getIdName, (, ), ,, "", )]
[SourceFile]
[inputId, ., getIdName, (, )]
[inputId]
[""]
[processNewScript, (, ast, ,, emptyScript, )]
[ast]
[emptyScript]
[ast, ., getAstRoot, (, this, )]
[ast]
[this]
[Preconditions, ., checkNotNull, (, js, )]
[Preconditions]
[js]
[runHotSwap, (, originalRoot, ,, js, ,, this, ., getCleanupPassConfig, (, ), )]
[originalRoot]
[js]
[this, ., getCleanupPassConfig, (, )]
[this]
[runHotSwapPass, (, null, ,, null, ,, ensureDefaultPassConfig, (, ), ., garbageCollectChecks, )]
[null]
[null]
[ensureDefaultPassConfig, (, ), ., garbageCollectChecks]
[ensureDefaultPassConfig, (, )]
[this, ., getTypeRegistry, (, ), ., clearNamedTypes, (, )]
[this, ., getTypeRegistry, (, )]
[this]
[this, ., removeSyntheticVarsInput, (, )]
[this]
[runHotSwap, (, originalRoot, ,, js, ,, this, ., ensureDefaultPassConfig, (, ), )]
[originalRoot]
[js]
[this, ., ensureDefaultPassConfig, (, )]
[this]
[passConfig, ., getChecks, (, )]
[passConfig]
[runHotSwapPass, (, originalRoot, ,, js, ,, passFactory, )]
[originalRoot]
[js]
[passFactory]
[passFactory, ., getHotSwapPass, (, this, )]
[passFactory]
[this]
[pass, !=, null]
[pass]
[null]
[logger, ., info, (, "Performing HotSwap for pass ", +, passFactory, ., getName, (, ), )]
[logger]
["Performing HotSwap for pass ", +, passFactory, ., getName, (, )]
["Performing HotSwap for pass "]
[passFactory, ., getName, (, )]
[passFactory]
[pass, ., hotSwapScript, (, js, ,, originalRoot, )]
[pass]
[js]
[originalRoot]
[new, CleanupPasses, (, getOptions, (, ), )]
[getOptions, (, )]
[Compiler, ., SYNTHETIC_EXTERNS]
[Compiler]
[removeExternInput, (, new, InputId, (, sourceName, ), )]
[new, InputId, (, sourceName, )]
[sourceName]
[injectedLibraries, ., containsKey, (, resourceName, )]
[injectedLibraries]
[resourceName]
[null]
["base", ., equals, (, resourceName, )]
["base"]
[resourceName]
[!, isBase]
[isBase]
[ensureLibraryInjected, (, "base", )]
["base"]
[loadLibraryCode, (, resourceName, ), ., removeChildren, (, )]
[loadLibraryCode, (, resourceName, )]
[resourceName]
[firstChild, ., getLastSibling, (, )]
[firstChild]
[getNodeForCodeInsertion, (, null, )]
[null]
[isBase]
[parent, ., addChildrenToFront, (, firstChild, )]
[parent]
[firstChild]
[parent, ., addChildrenAfter, (, firstChild, ,, injectedLibraries, ., get, (, "base", ), )]
[parent]
[firstChild]
[injectedLibraries, ., get, (, "base", )]
[injectedLibraries]
["base"]
[reportCodeChange, (, )]
[injectedLibraries, ., put, (, resourceName, ,, lastChild, )]
[injectedLibraries]
[resourceName]
[lastChild]
[lastChild]
[originalCode]
[CharStreams, ., toString, (, new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), ), ,, Charsets, ., UTF_8, ), )]
[CharStreams]
[new, InputStreamReader, (, Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), ), ,, Charsets, ., UTF_8, )]
[Compiler, ., class, ., getResourceAsStream, (, String, ., format, (, "js/%s.js", ,, resourceName, ), )]
[Compiler, ., class]
[String, ., format, (, "js/%s.js", ,, resourceName, )]
[String]
["js/%s.js"]
[resourceName]
[Charsets, ., UTF_8]
[Charsets]
[new, RuntimeException, (, e, )]
[e]
[Normalize, ., parseAndNormalizeSyntheticCode, (, this, ,, originalCode, ,, String, ., format, (, "jscomp_%s_", ,, resourceName, ), )]
[Normalize]
[this]
[originalCode]
[String, ., format, (, "jscomp_%s_", ,, resourceName, )]
[String]
["jscomp_%s_"]
[resourceName]
[ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, )]
[ResourceBundle]
[CONFIG_RESOURCE]
[config, ., getString, (, "compiler.version", )]
[config]
["compiler.version"]
[ResourceBundle, ., getBundle, (, CONFIG_RESOURCE, )]
[ResourceBundle]
[CONFIG_RESOURCE]
[config, ., getString, (, "compiler.date", )]
[config]
["compiler.date"]
[null]
