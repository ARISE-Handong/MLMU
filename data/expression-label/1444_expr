[this, ., compiler]
[this]
[compiler]
[this, ., counter]
[this]
[0]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, Traversal, (, ), )]
[NodeTraversal]
[compiler]
[root]
[new, Traversal, (, )]
[n, ., isFor, (, ), &&, n, ., getChildCount, (, ), ==, 3]
[n, ., isFor, (, )]
[n]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[n, ., getLastChild, (, )]
[n]
[n, ., removeChild, (, body, )]
[n]
[body]
[n, ., getFirstChild, (, )]
[n]
[n, ., removeChild, (, key, )]
[n]
[key]
[IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, )]
[IR]
["JSCompiler_IgnoreCajaProperties_", +, counter, ++]
["JSCompiler_IgnoreCajaProperties_"]
[counter, ++]
[counter]
[n, ., addChildToFront, (, IR, ., var, (, tmp, ), )]
[n]
[IR, ., var, (, tmp, )]
[IR]
[tmp]
[key, ., isVar, (, )]
[key]
[ifBody]
[IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, )]
[IR]
[key]
[IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), )]
[IR]
[IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), )]
[IR]
[key, ., getFirstChild, (, ), ., cloneNode, (, )]
[key, ., getFirstChild, (, )]
[key]
[tmp, ., cloneTree, (, )]
[tmp]
[body]
[ifBody]
[IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,, body, )]
[IR]
[IR, ., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), ), )]
[IR]
[IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), )]
[IR]
[key]
[tmp, ., cloneTree, (, )]
[tmp]
[body]
[IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), )]
[IR]
[IR, ., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, )]
[IR]
[IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), )]
[IR]
[IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), )]
[IR]
[IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), )]
[IR]
[tmp, ., cloneTree, (, )]
[tmp]
[IR, ., string, (, "match", )]
[IR]
["match"]
[IR, ., regexp, (, IR, ., string, (, "___$", ), )]
[IR]
[IR, ., string, (, "___$", )]
[IR]
["___$"]
[ifBody]
[n, ., addChildToBack, (, newBody, )]
[n]
[newBody]
[compiler, ., reportCodeChange, (, )]
[compiler]
