[new, BigFraction, (, 2, )]
[2]
[new, BigFraction, (, 1, )]
[1]
[new, BigFraction, (, 0, )]
[0]
[new, BigFraction, (, -, 1, )]
[-, 1]
[1]
[new, BigFraction, (, 4, ,, 5, )]
[4]
[5]
[new, BigFraction, (, 1, ,, 5, )]
[1]
[5]
[new, BigFraction, (, 1, ,, 2, )]
[1]
[2]
[new, BigFraction, (, 1, ,, 4, )]
[1]
[4]
[new, BigFraction, (, 1, ,, 3, )]
[1]
[3]
[new, BigFraction, (, 3, ,, 5, )]
[3]
[5]
[new, BigFraction, (, 3, ,, 4, )]
[3]
[4]
[new, BigFraction, (, 2, ,, 5, )]
[2]
[5]
[new, BigFraction, (, 2, ,, 4, )]
[2]
[4]
[new, BigFraction, (, 2, ,, 3, )]
[2]
[3]
[-, 5630213147331578515L]
[5630213147331578515L]
[BigInteger, ., valueOf, (, 100, )]
[BigInteger]
[100]
[num]
[BigInteger, ., ONE]
[BigInteger]
[MathUtils, ., checkNotNull, (, num, ,, LocalizedFormats, ., NUMERATOR, )]
[MathUtils]
[num]
[LocalizedFormats, ., NUMERATOR]
[LocalizedFormats]
[MathUtils, ., checkNotNull, (, den, ,, LocalizedFormats, ., DENOMINATOR, )]
[MathUtils]
[den]
[LocalizedFormats, ., DENOMINATOR]
[LocalizedFormats]
[BigInteger, ., ZERO, ., equals, (, den, )]
[BigInteger, ., ZERO]
[BigInteger]
[den]
[new, ZeroException, (, LocalizedFormats, ., ZERO_DENOMINATOR, )]
[LocalizedFormats, ., ZERO_DENOMINATOR]
[LocalizedFormats]
[BigInteger, ., ZERO, ., equals, (, num, )]
[BigInteger, ., ZERO]
[BigInteger]
[num]
[numerator]
[BigInteger, ., ZERO]
[BigInteger]
[denominator]
[BigInteger, ., ONE]
[BigInteger]
[num, ., gcd, (, den, )]
[num]
[den]
[BigInteger, ., ONE, ., compareTo, (, gcd, ), <, 0]
[BigInteger, ., ONE, ., compareTo, (, gcd, )]
[BigInteger, ., ONE]
[BigInteger]
[gcd]
[0]
[num]
[num, ., divide, (, gcd, )]
[num]
[gcd]
[den]
[den, ., divide, (, gcd, )]
[den]
[gcd]
[BigInteger, ., ZERO, ., compareTo, (, den, ), >, 0]
[BigInteger, ., ZERO, ., compareTo, (, den, )]
[BigInteger, ., ZERO]
[BigInteger]
[den]
[0]
[num]
[num, ., negate, (, )]
[num]
[den]
[den, ., negate, (, )]
[den]
[numerator]
[num]
[denominator]
[den]
[Double, ., isNaN, (, value, )]
[Double]
[value]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_VALUE_CONVERSION, )]
[LocalizedFormats, ., NAN_VALUE_CONVERSION]
[LocalizedFormats]
[Double, ., isInfinite, (, value, )]
[Double]
[value]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_VALUE_CONVERSION, )]
[LocalizedFormats, ., INFINITE_VALUE_CONVERSION]
[LocalizedFormats]
[Double, ., doubleToLongBits, (, value, )]
[Double]
[value]
[bits, &, 0x8000000000000000L]
[bits]
[0x8000000000000000L]
[bits, &, 0x7ff0000000000000L]
[bits]
[0x7ff0000000000000L]
[bits, &, 0x000fffffffffffffL]
[bits]
[0x000fffffffffffffL]
[exponent, !=, 0]
[exponent]
[0]
[m]
[0x0010000000000000L]
[sign, !=, 0]
[sign]
[0]
[m]
[-, m]
[m]
[(, (, int, ), (, exponent, >, >, 52, ), ), -, 1075]
[(, (, int, ), (, exponent, >, >, 52, ), )]
[(, int, ), (, exponent, >, >, 52, )]
[(, exponent, >, >, 52, )]
[exponent, >, >, 52]
[exponent]
[52]
[1075]
[(, (, m, &, 0x001ffffffffffffeL, ), !=, 0, ), &&, (, (, m, &, 0x1, ), ==, 0, )]
[(, (, m, &, 0x001ffffffffffffeL, ), !=, 0, )]
[(, m, &, 0x001ffffffffffffeL, ), !=, 0]
[(, m, &, 0x001ffffffffffffeL, )]
[m, &, 0x001ffffffffffffeL]
[m]
[0x001ffffffffffffeL]
[0]
[(, (, m, &, 0x1, ), ==, 0, )]
[(, m, &, 0x1, ), ==, 0]
[(, m, &, 0x1, )]
[m, &, 0x1]
[m]
[0x1]
[0]
[m]
[m, >, >, 1]
[m]
[1]
[++, k]
[k]
[k, <, 0]
[k]
[0]
[numerator]
[BigInteger, ., valueOf, (, m, )]
[BigInteger]
[m]
[denominator]
[BigInteger, ., ZERO, ., flipBit, (, -, k, )]
[BigInteger, ., ZERO]
[BigInteger]
[-, k]
[k]
[numerator]
[BigInteger, ., valueOf, (, m, ), ., multiply, (, BigInteger, ., ZERO, ., flipBit, (, k, ), )]
[BigInteger, ., valueOf, (, m, )]
[BigInteger]
[m]
[BigInteger, ., ZERO, ., flipBit, (, k, )]
[BigInteger, ., ZERO]
[BigInteger]
[k]
[denominator]
[BigInteger, ., ONE]
[BigInteger]
[value]
[epsilon]
[Integer, ., MAX_VALUE]
[Integer]
[maxIterations]
[Integer, ., MAX_VALUE]
[Integer]
[value]
[(, long, ), FastMath, ., floor, (, r0, )]
[FastMath, ., floor, (, r0, )]
[FastMath]
[r0]
[a0, >, overflow]
[a0]
[overflow]
[new, FractionConversionException, (, value, ,, a0, ,, 1l, )]
[value]
[a0]
[1l]
[FastMath, ., abs, (, a0, -, value, ), <, epsilon]
[FastMath, ., abs, (, a0, -, value, )]
[FastMath]
[a0, -, value]
[a0]
[value]
[epsilon]
[numerator]
[BigInteger, ., valueOf, (, a0, )]
[BigInteger]
[a0]
[denominator]
[BigInteger, ., ONE]
[BigInteger]
[1]
[0]
[a0]
[1]
[0]
[1]
[0]
[false]
[++, n]
[n]
[1.0, /, (, r0, -, a0, )]
[1.0]
[(, r0, -, a0, )]
[r0, -, a0]
[r0]
[a0]
[(, long, ), FastMath, ., floor, (, r1, )]
[FastMath, ., floor, (, r1, )]
[FastMath]
[r1]
[p2]
[(, a1, *, p1, ), +, p0]
[(, a1, *, p1, )]
[a1, *, p1]
[a1]
[p1]
[p0]
[q2]
[(, a1, *, q1, ), +, q0]
[(, a1, *, q1, )]
[a1, *, q1]
[a1]
[q1]
[q0]
[(, p2, >, overflow, ), ||, (, q2, >, overflow, )]
[(, p2, >, overflow, )]
[p2, >, overflow]
[p2]
[overflow]
[(, q2, >, overflow, )]
[q2, >, overflow]
[q2]
[overflow]
[new, FractionConversionException, (, value, ,, p2, ,, q2, )]
[value]
[p2]
[q2]
[(, double, ), p2, /, (, double, ), q2]
[(, double, ), p2]
[p2]
[(, double, ), q2]
[q2]
[(, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, ), &&, (, q2, <, maxDenominator, )]
[(, n, <, maxIterations, ), &&, (, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, )]
[(, n, <, maxIterations, )]
[n, <, maxIterations]
[n]
[maxIterations]
[(, FastMath, ., abs, (, convergent, -, value, ), >, epsilon, )]
[FastMath, ., abs, (, convergent, -, value, ), >, epsilon]
[FastMath, ., abs, (, convergent, -, value, )]
[FastMath]
[convergent, -, value]
[convergent]
[value]
[epsilon]
[(, q2, <, maxDenominator, )]
[q2, <, maxDenominator]
[q2]
[maxDenominator]
[p0]
[p1]
[p1]
[p2]
[q0]
[q1]
[q1]
[q2]
[a0]
[a1]
[r0]
[r1]
[stop]
[true]
[!, stop]
[stop]
[n, >=, maxIterations]
[n]
[maxIterations]
[new, FractionConversionException, (, value, ,, maxIterations, )]
[value]
[maxIterations]
[q2, <, maxDenominator]
[q2]
[maxDenominator]
[numerator]
[BigInteger, ., valueOf, (, p2, )]
[BigInteger]
[p2]
[denominator]
[BigInteger, ., valueOf, (, q2, )]
[BigInteger]
[q2]
[numerator]
[BigInteger, ., valueOf, (, p1, )]
[BigInteger]
[p1]
[denominator]
[BigInteger, ., valueOf, (, q1, )]
[BigInteger]
[q1]
[value]
[0]
[maxDenominator]
[100]
[BigInteger, ., valueOf, (, num, )]
[BigInteger]
[num]
[BigInteger, ., ONE]
[BigInteger]
[BigInteger, ., valueOf, (, num, )]
[BigInteger]
[num]
[BigInteger, ., valueOf, (, den, )]
[BigInteger]
[den]
[BigInteger, ., valueOf, (, num, )]
[BigInteger]
[num]
[BigInteger, ., ONE]
[BigInteger]
[BigInteger, ., valueOf, (, num, )]
[BigInteger]
[num]
[BigInteger, ., valueOf, (, den, )]
[BigInteger]
[den]
[numerator, ==, 0]
[numerator]
[0]
[ZERO]
[new, BigFraction, (, numerator, ,, denominator, )]
[numerator]
[denominator]
[(, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0, ), ?, this, :, negate, (, )]
[(, BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0, )]
[BigInteger, ., ZERO, ., compareTo, (, numerator, ), <=, 0]
[BigInteger, ., ZERO, ., compareTo, (, numerator, )]
[BigInteger, ., ZERO]
[BigInteger]
[numerator]
[0]
[this]
[negate, (, )]
[MathUtils, ., checkNotNull, (, bg, )]
[MathUtils]
[bg]
[new, BigFraction, (, numerator, ., add, (, denominator, ., multiply, (, bg, ), ), ,, denominator, )]
[numerator, ., add, (, denominator, ., multiply, (, bg, ), )]
[numerator]
[denominator, ., multiply, (, bg, )]
[denominator]
[bg]
[denominator]
[add, (, BigInteger, ., valueOf, (, i, ), )]
[BigInteger, ., valueOf, (, i, )]
[BigInteger]
[i]
[add, (, BigInteger, ., valueOf, (, l, ), )]
[BigInteger, ., valueOf, (, l, )]
[BigInteger]
[l]
[fraction, ==, null]
[fraction]
[null]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, )]
[LocalizedFormats, ., FRACTION]
[LocalizedFormats]
[ZERO, ., equals, (, fraction, )]
[ZERO]
[fraction]
[this]
[null]
[null]
[denominator, ., equals, (, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[num]
[numerator, ., add, (, fraction, ., numerator, )]
[numerator]
[fraction, ., numerator]
[fraction]
[den]
[denominator]
[num]
[(, numerator, ., multiply, (, fraction, ., denominator, ), ), ., add, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), )]
[(, numerator, ., multiply, (, fraction, ., denominator, ), )]
[numerator, ., multiply, (, fraction, ., denominator, )]
[numerator]
[fraction, ., denominator]
[fraction]
[(, fraction, ., numerator, ), ., multiply, (, denominator, )]
[(, fraction, ., numerator, )]
[fraction, ., numerator]
[fraction]
[denominator]
[den]
[denominator, ., multiply, (, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[new, BigFraction, (, num, ,, den, )]
[num]
[den]
[new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), )]
[new, BigDecimal, (, numerator, )]
[numerator]
[new, BigDecimal, (, denominator, )]
[denominator]
[new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), ,, roundingMode, )]
[new, BigDecimal, (, numerator, )]
[numerator]
[new, BigDecimal, (, denominator, )]
[denominator]
[roundingMode]
[new, BigDecimal, (, numerator, ), ., divide, (, new, BigDecimal, (, denominator, ), ,, scale, ,, roundingMode, )]
[new, BigDecimal, (, numerator, )]
[numerator]
[new, BigDecimal, (, denominator, )]
[denominator]
[scale]
[roundingMode]
[numerator, ., multiply, (, object, ., denominator, )]
[numerator]
[object, ., denominator]
[object]
[denominator, ., multiply, (, object, ., numerator, )]
[denominator]
[object, ., numerator]
[object]
[nOd, ., compareTo, (, dOn, )]
[nOd]
[dOn]
[bg, ==, null]
[bg]
[null]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, )]
[LocalizedFormats, ., FRACTION]
[LocalizedFormats]
[BigInteger, ., ZERO, ., equals, (, bg, )]
[BigInteger, ., ZERO]
[BigInteger]
[bg]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, )]
[LocalizedFormats, ., ZERO_DENOMINATOR]
[LocalizedFormats]
[new, BigFraction, (, numerator, ,, denominator, ., multiply, (, bg, ), )]
[numerator]
[denominator, ., multiply, (, bg, )]
[denominator]
[bg]
[divide, (, BigInteger, ., valueOf, (, i, ), )]
[BigInteger, ., valueOf, (, i, )]
[BigInteger]
[i]
[divide, (, BigInteger, ., valueOf, (, l, ), )]
[BigInteger, ., valueOf, (, l, )]
[BigInteger]
[l]
[fraction, ==, null]
[fraction]
[null]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, )]
[LocalizedFormats, ., FRACTION]
[LocalizedFormats]
[BigInteger, ., ZERO, ., equals, (, fraction, ., numerator, )]
[BigInteger, ., ZERO]
[BigInteger]
[fraction, ., numerator]
[fraction]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, )]
[LocalizedFormats, ., ZERO_DENOMINATOR]
[LocalizedFormats]
[multiply, (, fraction, ., reciprocal, (, ), )]
[fraction, ., reciprocal, (, )]
[fraction]
[numerator, ., doubleValue, (, ), /, denominator, ., doubleValue, (, )]
[numerator, ., doubleValue, (, )]
[numerator]
[denominator, ., doubleValue, (, )]
[denominator]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Double, ., MAX_VALUE, )]
[Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), )]
[Math]
[numerator, ., bitLength, (, )]
[numerator]
[denominator, ., bitLength, (, )]
[denominator]
[FastMath, ., getExponent, (, Double, ., MAX_VALUE, )]
[FastMath]
[Double, ., MAX_VALUE]
[Double]
[result]
[numerator, ., shiftRight, (, shift, ), ., doubleValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., doubleValue, (, )]
[numerator, ., shiftRight, (, shift, ), ., doubleValue, (, )]
[numerator, ., shiftRight, (, shift, )]
[numerator]
[shift]
[denominator, ., shiftRight, (, shift, ), ., doubleValue, (, )]
[denominator, ., shiftRight, (, shift, )]
[denominator]
[shift]
[result]
[false]
[this, ==, other]
[this]
[other]
[ret]
[true]
[other, instanceof, BigFraction]
[other]
[(, (, BigFraction, ), other, ), ., reduce, (, )]
[(, (, BigFraction, ), other, )]
[(, BigFraction, ), other]
[other]
[this, ., reduce, (, )]
[this]
[ret]
[thisOne, ., numerator, ., equals, (, rhs, ., numerator, ), &&, thisOne, ., denominator, ., equals, (, rhs, ., denominator, )]
[thisOne, ., numerator, ., equals, (, rhs, ., numerator, )]
[thisOne, ., numerator]
[thisOne]
[rhs, ., numerator]
[rhs]
[thisOne, ., denominator, ., equals, (, rhs, ., denominator, )]
[thisOne, ., denominator]
[thisOne]
[rhs, ., denominator]
[rhs]
[ret]
[numerator, ., floatValue, (, ), /, denominator, ., floatValue, (, )]
[numerator, ., floatValue, (, )]
[numerator]
[denominator, ., floatValue, (, )]
[denominator]
[Double, ., isNaN, (, result, )]
[Double]
[result]
[Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), ), -, FastMath, ., getExponent, (, Float, ., MAX_VALUE, )]
[Math, ., max, (, numerator, ., bitLength, (, ), ,, denominator, ., bitLength, (, ), )]
[Math]
[numerator, ., bitLength, (, )]
[numerator]
[denominator, ., bitLength, (, )]
[denominator]
[FastMath, ., getExponent, (, Float, ., MAX_VALUE, )]
[FastMath]
[Float, ., MAX_VALUE]
[Float]
[result]
[numerator, ., shiftRight, (, shift, ), ., floatValue, (, ), /, denominator, ., shiftRight, (, shift, ), ., floatValue, (, )]
[numerator, ., shiftRight, (, shift, ), ., floatValue, (, )]
[numerator, ., shiftRight, (, shift, )]
[numerator]
[shift]
[denominator, ., shiftRight, (, shift, ), ., floatValue, (, )]
[denominator, ., shiftRight, (, shift, )]
[denominator]
[shift]
[result]
[denominator]
[denominator, ., intValue, (, )]
[denominator]
[denominator, ., longValue, (, )]
[denominator]
[numerator]
[numerator, ., intValue, (, )]
[numerator]
[numerator, ., longValue, (, )]
[numerator]
[37, *, (, 37, *, 17, +, numerator, ., hashCode, (, ), ), +, denominator, ., hashCode, (, )]
[37, *, (, 37, *, 17, +, numerator, ., hashCode, (, ), )]
[37]
[(, 37, *, 17, +, numerator, ., hashCode, (, ), )]
[37, *, 17, +, numerator, ., hashCode, (, )]
[37, *, 17]
[37]
[17]
[numerator, ., hashCode, (, )]
[numerator]
[denominator, ., hashCode, (, )]
[denominator]
[numerator, ., divide, (, denominator, ), ., intValue, (, )]
[numerator, ., divide, (, denominator, )]
[numerator]
[denominator]
[numerator, ., divide, (, denominator, ), ., longValue, (, )]
[numerator, ., divide, (, denominator, )]
[numerator]
[denominator]
[bg, ==, null]
[bg]
[null]
[new, NullArgumentException, (, )]
[new, BigFraction, (, bg, ., multiply, (, numerator, ), ,, denominator, )]
[bg, ., multiply, (, numerator, )]
[bg]
[numerator]
[denominator]
[multiply, (, BigInteger, ., valueOf, (, i, ), )]
[BigInteger, ., valueOf, (, i, )]
[BigInteger]
[i]
[multiply, (, BigInteger, ., valueOf, (, l, ), )]
[BigInteger, ., valueOf, (, l, )]
[BigInteger]
[l]
[fraction, ==, null]
[fraction]
[null]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, )]
[LocalizedFormats, ., FRACTION]
[LocalizedFormats]
[numerator, ., equals, (, BigInteger, ., ZERO, ), ||, fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, )]
[numerator, ., equals, (, BigInteger, ., ZERO, )]
[numerator]
[BigInteger, ., ZERO]
[BigInteger]
[fraction, ., numerator, ., equals, (, BigInteger, ., ZERO, )]
[fraction, ., numerator]
[fraction]
[BigInteger, ., ZERO]
[BigInteger]
[ZERO]
[new, BigFraction, (, numerator, ., multiply, (, fraction, ., numerator, ), ,, denominator, ., multiply, (, fraction, ., denominator, ), )]
[numerator, ., multiply, (, fraction, ., numerator, )]
[numerator]
[fraction, ., numerator]
[fraction]
[denominator, ., multiply, (, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[new, BigFraction, (, numerator, ., negate, (, ), ,, denominator, )]
[numerator, ., negate, (, )]
[numerator]
[denominator]
[multiply, (, ONE_HUNDRED, ), ., doubleValue, (, )]
[multiply, (, ONE_HUNDRED, )]
[ONE_HUNDRED]
[exponent, <, 0]
[exponent]
[0]
[new, BigFraction, (, denominator, ., pow, (, -, exponent, ), ,, numerator, ., pow, (, -, exponent, ), )]
[denominator, ., pow, (, -, exponent, )]
[denominator]
[-, exponent]
[exponent]
[numerator, ., pow, (, -, exponent, )]
[numerator]
[-, exponent]
[exponent]
[new, BigFraction, (, numerator, ., pow, (, exponent, ), ,, denominator, ., pow, (, exponent, ), )]
[numerator, ., pow, (, exponent, )]
[numerator]
[exponent]
[denominator, ., pow, (, exponent, )]
[denominator]
[exponent]
[exponent, <, 0]
[exponent]
[0]
[new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, ), )]
[ArithmeticUtils, ., pow, (, denominator, ,, -, exponent, )]
[ArithmeticUtils]
[denominator]
[-, exponent]
[exponent]
[ArithmeticUtils, ., pow, (, numerator, ,, -, exponent, )]
[ArithmeticUtils]
[numerator]
[-, exponent]
[exponent]
[new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), )]
[ArithmeticUtils, ., pow, (, numerator, ,, exponent, )]
[ArithmeticUtils]
[numerator]
[exponent]
[ArithmeticUtils, ., pow, (, denominator, ,, exponent, )]
[ArithmeticUtils]
[denominator]
[exponent]
[exponent, ., compareTo, (, BigInteger, ., ZERO, ), <, 0]
[exponent, ., compareTo, (, BigInteger, ., ZERO, )]
[exponent]
[BigInteger, ., ZERO]
[BigInteger]
[0]
[exponent, ., negate, (, )]
[exponent]
[new, BigFraction, (, ArithmeticUtils, ., pow, (, denominator, ,, eNeg, ), ,, ArithmeticUtils, ., pow, (, numerator, ,, eNeg, ), )]
[ArithmeticUtils, ., pow, (, denominator, ,, eNeg, )]
[ArithmeticUtils]
[denominator]
[eNeg]
[ArithmeticUtils, ., pow, (, numerator, ,, eNeg, )]
[ArithmeticUtils]
[numerator]
[eNeg]
[new, BigFraction, (, ArithmeticUtils, ., pow, (, numerator, ,, exponent, ), ,, ArithmeticUtils, ., pow, (, denominator, ,, exponent, ), )]
[ArithmeticUtils, ., pow, (, numerator, ,, exponent, )]
[ArithmeticUtils]
[numerator]
[exponent]
[ArithmeticUtils, ., pow, (, denominator, ,, exponent, )]
[ArithmeticUtils]
[denominator]
[exponent]
[FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, ), /, FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, )]
[FastMath, ., pow, (, numerator, ., doubleValue, (, ), ,, exponent, )]
[FastMath]
[numerator, ., doubleValue, (, )]
[numerator]
[exponent]
[FastMath, ., pow, (, denominator, ., doubleValue, (, ), ,, exponent, )]
[FastMath]
[denominator, ., doubleValue, (, )]
[denominator]
[exponent]
[new, BigFraction, (, denominator, ,, numerator, )]
[denominator]
[numerator]
[numerator, ., gcd, (, denominator, )]
[numerator]
[denominator]
[new, BigFraction, (, numerator, ., divide, (, gcd, ), ,, denominator, ., divide, (, gcd, ), )]
[numerator, ., divide, (, gcd, )]
[numerator]
[gcd]
[denominator, ., divide, (, gcd, )]
[denominator]
[gcd]
[bg, ==, null]
[bg]
[null]
[new, NullArgumentException, (, )]
[new, BigFraction, (, numerator, ., subtract, (, denominator, ., multiply, (, bg, ), ), ,, denominator, )]
[numerator, ., subtract, (, denominator, ., multiply, (, bg, ), )]
[numerator]
[denominator, ., multiply, (, bg, )]
[denominator]
[bg]
[denominator]
[subtract, (, BigInteger, ., valueOf, (, i, ), )]
[BigInteger, ., valueOf, (, i, )]
[BigInteger]
[i]
[subtract, (, BigInteger, ., valueOf, (, l, ), )]
[BigInteger, ., valueOf, (, l, )]
[BigInteger]
[l]
[fraction, ==, null]
[fraction]
[null]
[new, NullArgumentException, (, LocalizedFormats, ., FRACTION, )]
[LocalizedFormats, ., FRACTION]
[LocalizedFormats]
[ZERO, ., equals, (, fraction, )]
[ZERO]
[fraction]
[this]
[null]
[null]
[denominator, ., equals, (, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[num]
[numerator, ., subtract, (, fraction, ., numerator, )]
[numerator]
[fraction, ., numerator]
[fraction]
[den]
[denominator]
[num]
[(, numerator, ., multiply, (, fraction, ., denominator, ), ), ., subtract, (, (, fraction, ., numerator, ), ., multiply, (, denominator, ), )]
[(, numerator, ., multiply, (, fraction, ., denominator, ), )]
[numerator, ., multiply, (, fraction, ., denominator, )]
[numerator]
[fraction, ., denominator]
[fraction]
[(, fraction, ., numerator, ), ., multiply, (, denominator, )]
[(, fraction, ., numerator, )]
[fraction, ., numerator]
[fraction]
[denominator]
[den]
[denominator, ., multiply, (, fraction, ., denominator, )]
[denominator]
[fraction, ., denominator]
[fraction]
[new, BigFraction, (, num, ,, den, )]
[num]
[den]
[null]
[BigInteger, ., ONE, ., equals, (, denominator, )]
[BigInteger, ., ONE]
[BigInteger]
[denominator]
[str]
[numerator, ., toString, (, )]
[numerator]
[BigInteger, ., ZERO, ., equals, (, numerator, )]
[BigInteger, ., ZERO]
[BigInteger]
[numerator]
[str]
["0"]
[str]
[numerator, +, " / ", +, denominator]
[numerator, +, " / "]
[numerator]
[" / "]
[denominator]
[str]
[BigFractionField, ., getInstance, (, )]
[BigFractionField]
