[new, IdentifyConstants, (, )]
[this, ., compiler]
[this]
[compiler]
[this, ., mode]
[this]
[mode]
[this, ., inlineAllStrings]
[this]
[inlineAllStrings]
[new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), )]
[compiler]
[new, InliningBehavior, (, )]
[getFilterForMode, (, )]
[callback, ., process, (, externs, ,, root, )]
[callback]
[externs]
[root]
[mode]
[ALL]
[Predicates, ., <, Var, >, alwaysTrue, (, )]
[Predicates]
[LOCALS_ONLY]
[new, IdentifyLocals, (, )]
[CONSTANTS_ONLY]
[new, IdentifyConstants, (, )]
[new, IllegalStateException, (, )]
[var, ., isConst, (, )]
[var]
[var, ., scope, ., isLocal, (, )]
[var, ., scope]
[var]
[this, ., alias]
[this]
[alias]
[this, ., refInfo]
[this]
[refInfo]
[Sets, ., newHashSet, (, )]
[Sets]
[Maps, ., newHashMap, (, )]
[Maps]
[collectAliasCandidates, (, t, ,, referenceMap, )]
[t]
[referenceMap]
[doInlinesForScope, (, t, ,, referenceMap, )]
[t]
[referenceMap]
[mode, !=, Mode, ., CONSTANTS_ONLY]
[mode]
[Mode, ., CONSTANTS_ONLY]
[Mode]
[t, ., getScope, (, ), ., getVars, (, )]
[t, ., getScope, (, )]
[t]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[referenceMap, ., getReferences, (, v, )]
[referenceMap]
[v]
[referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, )]
[referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, )]
[referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2]
[referenceInfo, !=, null]
[referenceInfo]
[null]
[referenceInfo, ., references, ., size, (, ), >=, 2]
[referenceInfo, ., references, ., size, (, )]
[referenceInfo, ., references]
[referenceInfo]
[2]
[referenceInfo, ., isWellDefined, (, )]
[referenceInfo]
[referenceInfo, ., isAssignedOnceInLifetime, (, )]
[referenceInfo]
[referenceInfo, ., getInitializingReference, (, )]
[referenceInfo]
[init, ., getAssignedValue, (, )]
[init]
[value, !=, null, &&, value, ., isName, (, )]
[value, !=, null]
[value]
[null]
[value, ., isName, (, )]
[value]
[aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,, referenceInfo, ), )]
[aliasCandidates]
[value]
[new, AliasCandidate, (, v, ,, referenceInfo, )]
[v]
[referenceInfo]
[maybeEscapedOrModifiedArguments, (, t, ., getScope, (, ), ,, referenceMap, )]
[t, ., getScope, (, )]
[t]
[referenceMap]
[t, ., getScope, (, ), ., getVars, (, )]
[t, ., getScope, (, )]
[t]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[referenceMap, ., getReferences, (, v, )]
[referenceMap]
[v]
[referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, )]
[referenceInfo, ==, null]
[referenceInfo]
[null]
[isVarInlineForbidden, (, v, )]
[v]
[isInlineableDeclaredConstant, (, v, ,, referenceInfo, )]
[v]
[referenceInfo]
[referenceInfo, ., getInitializingReferenceForConstants, (, )]
[referenceInfo]
[init, ., getAssignedValue, (, )]
[init]
[inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, )]
[v]
[value]
[referenceInfo, ., references]
[referenceInfo]
[staleVars, ., add, (, v, )]
[staleVars]
[v]
[mode, ==, Mode, ., CONSTANTS_ONLY]
[mode]
[Mode, ., CONSTANTS_ONLY]
[Mode]
[inlineNonConstants, (, v, ,, referenceInfo, ,, maybeModifiedArguments, )]
[v]
[referenceInfo]
[maybeModifiedArguments]
[scope, ., isLocal, (, )]
[scope]
[scope, ., getArgumentsVar, (, )]
[scope]
[referenceMap, ., getReferences, (, arguments, )]
[referenceMap]
[arguments]
[refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, )]
[refs, !=, null]
[refs]
[null]
[!, refs, ., references, ., isEmpty, (, )]
[refs, ., references, ., isEmpty, (, )]
[refs, ., references]
[refs]
[refs, ., references]
[refs]
[ref, ., getNode, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[!, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), )]
[(, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), )]
[NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, )]
[NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, )]
[NodeUtil, ., isGet, (, refParent, )]
[NodeUtil]
[refParent]
[refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, )]
[refNode]
[ref, ., getParent, (, ), ., getFirstChild, (, )]
[ref, ., getParent, (, )]
[ref]
[!, isLValue, (, refParent, )]
[isLValue, (, refParent, )]
[refParent]
[true]
[false]
[n, ., getParent, (, )]
[n]
[(, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), )]
[parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[parent, ., isInc, (, ), ||, parent, ., isDec, (, )]
[parent, ., isInc, (, )]
[parent]
[parent, ., isDec, (, )]
[parent]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n]
[NodeUtil, ., isAssignmentOp, (, parent, )]
[NodeUtil]
[parent]
[parent, ., getFirstChild, (, ), ==, n]
[parent, ., getFirstChild, (, )]
[parent]
[n]
[referenceInfo, ., references, ., size, (, )]
[referenceInfo, ., references]
[referenceInfo]
[referenceInfo, ., references, ., get, (, 0, )]
[referenceInfo, ., references]
[referenceInfo]
[0]
[referenceInfo, ., getInitializingReference, (, )]
[referenceInfo]
[(, declaration, ==, init, ), ?, 2, :, 3]
[(, declaration, ==, init, )]
[declaration, ==, init]
[declaration]
[init]
[2]
[3]
[refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, )]
[refCount, >, 1]
[refCount]
[1]
[isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, )]
[v]
[referenceInfo]
[init, !=, null]
[init]
[null]
[value]
[init, ., getAssignedValue, (, )]
[init]
[declaration, ., getNode, (, )]
[declaration]
[value]
[NodeUtil, ., newUndefinedNode, (, srcLocation, )]
[NodeUtil]
[srcLocation]
[Preconditions, ., checkNotNull, (, value, )]
[Preconditions]
[value]
[inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, )]
[v]
[value]
[referenceInfo, ., references]
[referenceInfo]
[staleVars, ., add, (, v, )]
[staleVars]
[v]
[refCount, ==, firstRefAfterInit]
[refCount]
[firstRefAfterInit]
[referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, )]
[referenceInfo, ., references]
[referenceInfo]
[firstRefAfterInit, -, 1]
[firstRefAfterInit]
[1]
[canInline, (, declaration, ,, init, ,, reference, )]
[declaration]
[init]
[reference]
[inline, (, v, ,, declaration, ,, init, ,, reference, )]
[v]
[declaration]
[init]
[reference]
[staleVars, ., add, (, v, )]
[staleVars]
[v]
[declaration, !=, init, &&, refCount, ==, 2]
[declaration, !=, init]
[declaration]
[init]
[refCount, ==, 2]
[refCount]
[2]
[isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, )]
[isValidDeclaration, (, declaration, )]
[declaration]
[isValidInitialization, (, init, )]
[init]
[init, ., getAssignedValue, (, )]
[init]
[Preconditions, ., checkNotNull, (, value, )]
[Preconditions]
[value]
[inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, )]
[v]
[value]
[referenceInfo, ., references]
[referenceInfo]
[staleVars, ., add, (, v, )]
[staleVars]
[v]
[!, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, )]
[!, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, )]
[!, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, )]
[!, maybeModifiedArguments]
[maybeModifiedArguments]
[!, staleVars, ., contains, (, v, )]
[staleVars, ., contains, (, v, )]
[staleVars]
[v]
[referenceInfo, ., isWellDefined, (, )]
[referenceInfo]
[referenceInfo, ., isAssignedOnceInLifetime, (, )]
[referenceInfo]
[referenceInfo, ., references]
[referenceInfo]
[1]
[i, <, refs, ., size, (, )]
[i]
[refs, ., size, (, )]
[refs]
[i, ++]
[i]
[refs, ., get, (, i, ), ., getNode, (, )]
[refs, ., get, (, i, )]
[refs]
[i]
[aliasCandidates, ., containsKey, (, nameNode, )]
[aliasCandidates]
[nameNode]
[aliasCandidates, ., get, (, nameNode, )]
[aliasCandidates]
[nameNode]
[!, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, )]
[!, staleVars, ., contains, (, candidate, ., alias, )]
[staleVars, ., contains, (, candidate, ., alias, )]
[staleVars]
[candidate, ., alias]
[candidate]
[!, isVarInlineForbidden, (, candidate, ., alias, )]
[isVarInlineForbidden, (, candidate, ., alias, )]
[candidate, ., alias]
[candidate]
[aliasInit]
[candidate, ., refInfo, ., getInitializingReference, (, )]
[candidate, ., refInfo]
[candidate]
[aliasInit, ., getAssignedValue, (, )]
[aliasInit]
[Preconditions, ., checkNotNull, (, value, )]
[Preconditions]
[value]
[inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, )]
[candidate, ., alias]
[candidate]
[value]
[candidate, ., refInfo, ., references]
[candidate, ., refInfo]
[candidate]
[staleVars, ., add, (, candidate, ., alias, )]
[staleVars]
[candidate, ., alias]
[candidate]
[root, ., getFirstChild, (, )]
[root]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[blacklistVarReferencesInTree, (, c, ,, scope, )]
[c]
[scope]
[root, ., isName, (, )]
[root]
[staleVars, ., add, (, scope, ., getVar, (, root, ., getString, (, ), ), )]
[staleVars]
[scope, ., getVar, (, root, ., getString, (, ), )]
[scope]
[root, ., getString, (, )]
[root]
[var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (, var, )]
[var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, )]
[var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, )]
[var, ., isExtern, (, )]
[var]
[compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[var, ., name]
[var]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, )]
[RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME]
[RenameProperties]
[var, ., name]
[var]
[staleVars, ., contains, (, var, )]
[staleVars]
[var]
[init, ., getAssignedValue, (, )]
[init]
[Preconditions, ., checkState, (, value, !=, null, )]
[Preconditions]
[value, !=, null]
[value]
[null]
[NodeUtil, ., isFunctionDeclaration, (, value, )]
[NodeUtil]
[value]
[inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), )]
[v]
[reference]
[value, ., detachFromParent, (, )]
[value]
[declaration, !=, init]
[declaration]
[init]
[init, ., getGrandparent, (, )]
[init]
[Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), )]
[Preconditions]
[expressRoot, ., isExprResult, (, )]
[expressRoot]
[NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, )]
[NodeUtil]
[expressRoot, ., getParent, (, )]
[expressRoot]
[expressRoot]
[!, isFunctionDeclaration]
[isFunctionDeclaration]
[removeDeclaration, (, declaration, )]
[declaration]
[compiler, ., reportCodeChange, (, )]
[compiler]
[refSet, ., get, (, 0, )]
[refSet]
[0]
[1]
[i, <, refSet, ., size, (, )]
[i]
[refSet, ., size, (, )]
[refSet]
[i, ++]
[i]
[inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), )]
[v]
[refSet, ., get, (, i, )]
[refSet]
[i]
[value, ., cloneTree, (, )]
[value]
[removeDeclaration, (, decl, )]
[decl]
[null]
[refSet]
[r, ., getNode, (, ), ==, v, ., getNameNode, (, )]
[r, ., getNode, (, )]
[r]
[v, ., getNameNode, (, )]
[v]
[decl]
[r]
[inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, ), )]
[v]
[r]
[value, ., cloneTree, (, )]
[value]
[removeDeclaration, (, decl, )]
[decl]
[declaration, ., getParent, (, )]
[declaration]
[declaration, ., getGrandparent, (, )]
[declaration]
[varNode, ., removeChild, (, declaration, ., getNode, (, ), )]
[varNode]
[declaration, ., getNode, (, )]
[declaration]
[!, varNode, ., hasChildren, (, )]
[varNode, ., hasChildren, (, )]
[varNode]
[Preconditions, ., checkState, (, varNode, ., isVar, (, ), )]
[Preconditions]
[varNode, ., isVar, (, )]
[varNode]
[NodeUtil, ., removeChild, (, grandparent, ,, varNode, )]
[NodeUtil]
[grandparent]
[varNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[ref, ., isSimpleAssignmentToName, (, )]
[ref]
[ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, )]
[ref, ., getGrandparent, (, )]
[ref]
[ref, ., getParent, (, )]
[ref]
[value]
[ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, )]
[ref, ., getParent, (, )]
[ref]
[ref, ., getNode, (, )]
[ref]
[value]
[blacklistVarReferencesInTree, (, value, ,, v, ., scope, )]
[value]
[v, ., scope]
[v]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, identifyConstants, ., apply, (, var, )]
[identifyConstants, ., apply, (, var, )]
[identifyConstants]
[var]
[false]
[!, refInfo, ., isAssignedOnceInLifetime, (, )]
[refInfo, ., isAssignedOnceInLifetime, (, )]
[refInfo]
[false]
[refInfo, ., getInitializingReferenceForConstants, (, )]
[refInfo]
[init, ==, null]
[init]
[null]
[false]
[init, ., getAssignedValue, (, )]
[init]
[value, ==, null]
[value]
[null]
[false]
[!, NodeUtil, ., isImmutableValue, (, value, )]
[NodeUtil, ., isImmutableValue, (, value, )]
[NodeUtil]
[value]
[false]
[!, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,, refInfo, ., references, )]
[!, value, ., isString, (, )]
[value, ., isString, (, )]
[value]
[isStringWorthInlining, (, var, ,, refInfo, ., references, )]
[var]
[refInfo, ., references]
[refInfo]
[!, inlineAllStrings, &&, !, var, ., isDefine, (, )]
[!, inlineAllStrings]
[inlineAllStrings]
[!, var, ., isDefine, (, )]
[var, ., isDefine, (, )]
[var]
[var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, )]
[var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, )]
[var, ., getInitialValue, (, ), ., getString, (, )]
[var, ., getInitialValue, (, )]
[var]
["''", ., length, (, )]
["''"]
["var xx=;", ., length, (, ), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, )]
["var xx=;", ., length, (, ), +, len]
["var xx=;", ., length, (, )]
["var xx=;"]
[len]
[4, *, (, refs, ., size, (, ), -, 1, )]
[4]
[(, refs, ., size, (, ), -, 1, )]
[refs, ., size, (, ), -, 1]
[refs, ., size, (, )]
[refs]
[1]
[(, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, )]
[(, len, -, 1, )]
[len, -, 1]
[len]
[1]
[(, refs, ., size, (, ), -, 1, )]
[refs, ., size, (, ), -, 1]
[refs, ., size, (, )]
[refs]
[1]
[noInlineBytes, >=, inlineBytes]
[noInlineBytes]
[inlineBytes]
[true]
[!, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, )]
[!, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, )]
[!, isValidDeclaration, (, declaration, )]
[isValidDeclaration, (, declaration, )]
[declaration]
[!, isValidInitialization, (, initialization, )]
[isValidInitialization, (, initialization, )]
[initialization]
[!, isValidReference, (, reference, )]
[isValidReference, (, reference, )]
[reference]
[false]
[declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, )]
[declaration, !=, initialization]
[declaration]
[initialization]
[!, initialization, ., getGrandparent, (, ), ., isExprResult, (, )]
[initialization, ., getGrandparent, (, ), ., isExprResult, (, )]
[initialization, ., getGrandparent, (, )]
[initialization]
[false]
[declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, )]
[declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, )]
[declaration, ., getBasicBlock, (, )]
[declaration]
[initialization, ., getBasicBlock, (, )]
[initialization]
[declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, )]
[declaration, ., getBasicBlock, (, )]
[declaration]
[reference, ., getBasicBlock, (, )]
[reference]
[false]
[initialization, ., getAssignedValue, (, )]
[initialization]
[Preconditions, ., checkState, (, value, !=, null, )]
[Preconditions]
[value, !=, null]
[value]
[null]
[value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, )]
[value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, )]
[value, ., isGetProp, (, )]
[value]
[reference, ., getParent, (, ), ., isCall, (, )]
[reference, ., getParent, (, )]
[reference]
[reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, )]
[reference, ., getParent, (, ), ., getFirstChild, (, )]
[reference, ., getParent, (, )]
[reference]
[reference, ., getNode, (, )]
[reference]
[false]
[value, ., isFunction, (, )]
[value]
[reference, ., getParent, (, )]
[reference]
[reference, ., getParent, (, ), ., isCall, (, )]
[reference, ., getParent, (, )]
[reference]
[compiler, ., getCodingConvention, (, )]
[compiler]
[convention, ., getClassesDefinedByCall, (, callNode, )]
[convention]
[callNode]
[relationship, !=, null]
[relationship]
[null]
[false]
[convention, ., getSingletonGetterClassName, (, callNode, ), !=, null]
[convention, ., getSingletonGetterClassName, (, callNode, )]
[convention]
[callNode]
[null]
[false]
[canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,, reference, )]
[canMoveAggressively, (, value, )]
[value]
[canMoveModerately, (, initialization, ,, reference, )]
[initialization]
[reference]
[NodeUtil, ., isLiteralValue, (, value, ,, true, ), ||, value, ., isFunction, (, )]
[NodeUtil, ., isLiteralValue, (, value, ,, true, )]
[NodeUtil]
[value]
[true]
[value, ., isFunction, (, )]
[value]
[initialization, ., getParent, (, ), ., isVar, (, )]
[initialization, ., getParent, (, )]
[initialization]
[it]
[NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), )]
[NodeIterators, ., LocalVarMotion]
[NodeIterators]
[initialization, ., getNode, (, )]
[initialization]
[initialization, ., getParent, (, )]
[initialization]
[initialization, ., getGrandparent, (, )]
[initialization]
[initialization, ., getParent, (, ), ., isAssign, (, )]
[initialization, ., getParent, (, )]
[initialization]
[Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), )]
[Preconditions]
[initialization, ., getGrandparent, (, ), ., isExprResult, (, )]
[initialization, ., getGrandparent, (, )]
[initialization]
[it]
[NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), )]
[NodeIterators, ., LocalVarMotion]
[NodeIterators]
[initialization, ., getNode, (, )]
[initialization]
[initialization, ., getParent, (, )]
[initialization]
[initialization, ., getGrandparent, (, )]
[initialization]
[initialization, ., getGrandparent, (, ), ., getParent, (, )]
[initialization, ., getGrandparent, (, )]
[initialization]
[new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, ), )]
["Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, )]
["Unexpected initialization parent "]
[initialization, ., getParent, (, ), ., toStringTree, (, )]
[initialization, ., getParent, (, )]
[initialization]
[reference, ., getNode, (, )]
[reference]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[curNode, ==, targetName]
[curNode]
[targetName]
[true]
[false]
[(, declaration, ., getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), )]
[(, declaration, ., getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), )]
[declaration, ., getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, )]
[declaration, ., getParent, (, ), ., isVar, (, )]
[declaration, ., getParent, (, )]
[declaration]
[!, declaration, ., getGrandparent, (, ), ., isFor, (, )]
[declaration, ., getGrandparent, (, ), ., isFor, (, )]
[declaration, ., getGrandparent, (, )]
[declaration]
[NodeUtil, ., isFunctionDeclaration, (, declaration, ., getParent, (, ), )]
[NodeUtil]
[declaration, ., getParent, (, )]
[declaration]
[initialization, ==, null]
[initialization]
[null]
[false]
[initialization, ., isDeclaration, (, )]
[initialization]
[!, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null]
[!, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), )]
[NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), )]
[NodeUtil]
[initialization, ., getParent, (, )]
[initialization]
[initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null]
[initialization, ., getNode, (, ), ., getFirstChild, (, )]
[initialization, ., getNode, (, )]
[initialization]
[null]
[false]
[initialization, ., getParent, (, )]
[initialization]
[Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, ), )]
[Preconditions]
[parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, )]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[initialization, ., getNode, (, )]
[initialization]
[initialization, ., getAssignedValue, (, )]
[initialization]
[n, ., isFunction, (, )]
[n]
[compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, n, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[n]
[true]
[!, reference, ., isDeclaration, (, ), &&, !, reference, ., isLvalue, (, )]
[!, reference, ., isDeclaration, (, )]
[reference, ., isDeclaration, (, )]
[reference]
[!, reference, ., isLvalue, (, )]
[reference, ., isLvalue, (, )]
[reference]
[refInfo, ., references]
[refInfo]
[1]
[refSet, ., get, (, 0, )]
[refSet]
[0]
[!, isValidDeclaration, (, refDecl, )]
[isValidDeclaration, (, refDecl, )]
[refDecl]
[false]
[refInfo, ., isNeverAssigned, (, )]
[refInfo]
[!, isNeverAssigned]
[isNeverAssigned]
[refInfo, ., getInitializingReference, (, )]
[refInfo]
[!, isValidInitialization, (, refInit, )]
[isValidInitialization, (, refInit, )]
[refInit]
[false]
[refDecl, !=, refInit]
[refDecl]
[refInit]
[Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), )]
[Preconditions]
[refInit, ==, refSet, ., get, (, 1, )]
[refInit]
[refSet, ., get, (, 1, )]
[refSet]
[1]
[startingReadRef]
[2]
[!, refInfo, ., isWellDefined, (, )]
[refInfo, ., isWellDefined, (, )]
[refInfo]
[false]
[refInit, ., getAssignedValue, (, )]
[refInit]
[Preconditions, ., checkNotNull, (, value, )]
[Preconditions]
[value]
[NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), )]
[NodeUtil, ., isImmutableValue, (, value, )]
[NodeUtil]
[value]
[(, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), )]
[!, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, )]
[!, value, ., isString, (, )]
[value, ., isString, (, )]
[value]
[isStringWorthInlining, (, v, ,, refInfo, ., references, )]
[v]
[refInfo, ., references]
[refInfo]
[value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, )]
[value, ., isThis, (, )]
[value]
[!, refInfo, ., isEscaped, (, )]
[refInfo, ., isEscaped, (, )]
[refInfo]
[!, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias]
[!, isImmutableValueWorthInlining]
[isImmutableValueWorthInlining]
[!, isInlinableThisAlias]
[isInlinableThisAlias]
[false]
[startingReadRef]
[i, <, refSet, ., size, (, )]
[i]
[refSet, ., size, (, )]
[refSet]
[i, ++]
[i]
[refSet, ., get, (, i, )]
[refSet]
[i]
[!, isValidReference, (, ref, )]
[isValidReference, (, ref, )]
[ref]
[false]
[true]
