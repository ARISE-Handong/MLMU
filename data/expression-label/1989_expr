[true]
[true]
[DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", )]
[DiagnosticType]
["JSC_CATCH_BLOCK_VAR_ERROR"]
["The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name."]
["The use of scope variable {0} is not allowed within a catch block "]
["with a catch exception of the same name."]
[this, ., compiler]
[this]
[compiler]
[this, ., assertOnChange]
[this]
[assertOnChange]
[compiler, ., parseSyntheticCode, (, code, )]
[compiler]
[code]
[NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), )]
[NodeTraversal]
[compiler]
[js]
[new, Normalize, ., NormalizeStatements, (, compiler, ,, false, )]
[compiler]
[false]
[NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, ), ), )]
[NodeTraversal]
[compiler]
[js]
[new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, ), )]
[new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, )]
[compiler, ., getUniqueNameIdSupplier, (, )]
[compiler]
[prefix]
[js]
[compiler, ., parseTestCode, (, code, )]
[compiler]
[code]
[NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), )]
[NodeTraversal]
[compiler]
[js]
[new, Normalize, ., NormalizeStatements, (, compiler, ,, false, )]
[compiler]
[false]
[NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), )]
[NodeTraversal]
[compiler]
[js]
[new, MakeDeclaredNamesUnique, (, )]
[js]
[assertOnChange]
[new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, )]
["Normalize constraints violated:\n", +, changeDescription]
["Normalize constraints violated:\n"]
[changeDescription]
[compiler, ., reportCodeChange, (, )]
[compiler]
[new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), ), ., traverseRoots, (, externs, ,, root, )]
[new, NodeTraversal, (, compiler, ,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), )]
[compiler]
[new, NormalizeStatements, (, compiler, ,, assertOnChange, )]
[compiler]
[assertOnChange]
[externs]
[root]
[MAKE_LOCAL_NAMES_UNIQUE]
[new, MakeDeclaredNamesUnique, (, )]
[new, NodeTraversal, (, compiler, ,, renamer, )]
[compiler]
[renamer]
[t, ., traverseRoots, (, externs, ,, root, )]
[t]
[externs]
[root]
[removeDuplicateDeclarations, (, externs, ,, root, )]
[externs]
[root]
[new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, )]
[new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, )]
[compiler]
[assertOnChange]
[externs]
[root]
[new, FindExposeAnnotations, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, )]
[NodeTraversal]
[compiler]
[root]
[findExposeAnnotations]
[!, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, )]
[findExposeAnnotations, ., exposedProperties, ., isEmpty, (, )]
[findExposeAnnotations, ., exposedProperties]
[findExposeAnnotations]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), )]
[NodeTraversal]
[compiler]
[root]
[new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, )]
[findExposeAnnotations, ., exposedProperties]
[findExposeAnnotations]
[!, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, )]
[compiler]
[LifeCycleStage, ., NORMALIZED]
[LifeCycleStage]
[Sets, ., newHashSet, (, )]
[Sets]
[NodeUtil, ., isExprAssign, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[assign, ., getFirstChild, (, )]
[assign]
[lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, )]
[lhs, ., isGetProp, (, )]
[lhs]
[isMarkedExpose, (, assign, )]
[assign]
[exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), )]
[exposedProperties]
[lhs, ., getLastChild, (, ), ., getString, (, )]
[lhs, ., getLastChild, (, )]
[lhs]
[n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, )]
[n, ., isStringKey, (, )]
[n]
[isMarkedExpose, (, n, )]
[n]
[exposedProperties, ., add, (, n, ., getString, (, ), )]
[exposedProperties]
[n, ., getString, (, )]
[n]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null, &&, info, ., isExpose, (, )]
[info, !=, null]
[info]
[null]
[info, ., isExpose, (, )]
[info]
[this, ., exposedProperties]
[this]
[exposedProperties]
[n, ., isGetProp, (, )]
[n]
[n, ., getLastChild, (, ), ., getString, (, )]
[n, ., getLastChild, (, )]
[n]
[exposedProperties, ., contains, (, propName, )]
[exposedProperties]
[propName]
[n, ., removeFirstChild, (, )]
[n]
[n, ., removeFirstChild, (, )]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), )]
[n, ., getParent, (, )]
[n]
[n]
[IR, ., getelem, (, obj, ,, prop, )]
[IR]
[obj]
[prop]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., isStringKey, (, )]
[n]
[n, ., getString, (, )]
[n]
[exposedProperties, ., contains, (, propName, )]
[exposedProperties]
[propName]
[n, ., setQuotedString, (, )]
[n]
[compiler, ., reportCodeChange, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[this, ., assertOnChange]
[this]
[forbidChanges]
[new, NodeTraversal, (, compiler, ,, this, ), ., traverseRoots, (, externs, ,, root, )]
[new, NodeTraversal, (, compiler, ,, this, )]
[compiler]
[this]
[externs]
[root]
[n, ., isName, (, )]
[n]
[n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, )]
[n]
[null]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getString, (, )]
[n]
[var, !=, null]
[var]
[null]
[info]
[var, ., getJSDocInfo, (, )]
[var]
[(, info, !=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[(, info, !=, null, &&, info, ., isConstant, (, ), )]
[info, !=, null, &&, info, ., isConstant, (, )]
[info, !=, null]
[info]
[null]
[info, ., isConstant, (, )]
[info]
[NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[n]
[parent]
[n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[n]
[Node, ., IS_CONSTANT_NAME]
[Node]
[shouldBeConstant, &&, !, isMarkedConstant]
[shouldBeConstant]
[!, isMarkedConstant]
[isMarkedConstant]
[assertOnChange]
[n, ., getString, (, )]
[n]
[new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), )]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, )]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:"]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n"]
["Unexpected const change.\n", +, "  name: ", +, name]
["Unexpected const change.\n", +, "  name: "]
["Unexpected const change.\n"]
["  name: "]
[name]
["\n"]
["  parent:"]
[n, ., getParent, (, ), ., toStringTree, (, )]
[n, ., getParent, (, )]
[n]
[n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[n]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[this, ., compiler]
[this]
[compiler]
[this, ., checkUserDeclarations]
[this]
[checkUserDeclarations]
[root, ., getParent, (, )]
[root]
[Preconditions, ., checkState, (, externsAndJs, !=, null, )]
[Preconditions]
[externsAndJs, !=, null]
[externsAndJs]
[null]
[Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), )]
[Preconditions]
[externsAndJs, ., hasChild, (, externs, )]
[externsAndJs]
[externs]
[NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[NodeTraversal]
[compiler]
[Lists, ., newArrayList, (, externs, ,, root, )]
[Lists]
[externs]
[root]
[this]
[Maps, ., newHashMap, (, )]
[Maps]
[n, ., isName, (, )]
[n]
[n, ., getString, (, )]
[n]
[n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, )]
[n]
[n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[n]
[Node, ., IS_CONSTANT_NAME]
[Node]
[checkUserDeclarations]
[false]
[compiler, ., getCodingConvention, (, )]
[compiler]
[NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, )]
[NodeUtil, ., isConstantName, (, n, )]
[NodeUtil]
[n]
[NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, )]
[NodeUtil]
[convention]
[n]
[parent]
[expectedConst]
[true]
[expectedConst]
[false]
[null]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getString, (, )]
[n]
[var, !=, null]
[var]
[null]
[info]
[var, ., getJSDocInfo, (, )]
[var]
[info, !=, null, &&, info, ., isConstant, (, )]
[info, !=, null]
[info]
[null]
[info, ., isConstant, (, )]
[info]
[expectedConst]
[true]
[expectedConst]
[false]
[expectedConst]
[Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, )]
[Preconditions]
[expectedConst, ==, isConst]
[expectedConst]
[isConst]
["The name %s is not annotated as constant."]
[name]
[Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, )]
[Preconditions]
[expectedConst, ==, isConst]
[expectedConst]
[isConst]
["The name %s should not be annotated as constant."]
[name]
[constantMap, ., get, (, name, )]
[constantMap]
[name]
[value, ==, null]
[value]
[null]
[constantMap, ., put, (, name, ,, isConst, )]
[constantMap]
[name]
[isConst]
[Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name, )]
[Preconditions]
[value, ., booleanValue, (, ), ==, isConst]
[value, ., booleanValue, (, )]
[value]
[isConst]
["The name %s is not consistently annotated as constant."]
[name]
[this, ., compiler]
[this]
[compiler]
[this, ., assertOnChange]
[this]
[assertOnChange]
[assertOnChange]
[new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, )]
["Normalize constraints violated:\n", +, changeDescription]
["Normalize constraints violated:\n"]
[changeDescription]
[compiler, ., reportCodeChange, (, )]
[compiler]
[doStatementNormalizations, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[true]
[n, ., getType, (, )]
[n]
[Token, ., WHILE]
[Token]
[CONVERT_WHILE_TO_FOR]
[n, ., getFirstChild, (, )]
[n]
[n, ., setType, (, Token, ., FOR, )]
[n]
[Token, ., FOR]
[Token]
[IR, ., empty, (, )]
[IR]
[empty, ., copyInformationFrom, (, n, )]
[empty]
[n]
[n, ., addChildBefore, (, empty, ,, expr, )]
[n]
[empty]
[expr]
[n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, )]
[n]
[empty, ., cloneNode, (, )]
[empty]
[expr]
[reportCodeChange, (, "WHILE node", )]
["WHILE node"]
[Token, ., FUNCTION]
[Token]
[normalizeFunctionDeclaration, (, n, )]
[n]
[Token, ., NAME]
[Token]
[Token, ., STRING]
[Token]
[Token, ., STRING_KEY]
[Token]
[Token, ., GETTER_DEF]
[Token]
[Token, ., SETTER_DEF]
[Token]
[!, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, )]
[compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[annotateConstantsByConvention, (, n, ,, parent, )]
[n]
[parent]
[Token, ., CAST]
[Token]
[parent, ., replaceChild, (, n, ,, n, ., removeFirstChild, (, ), )]
[parent]
[n]
[n, ., removeFirstChild, (, )]
[n]
[Preconditions, ., checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), )]
[Preconditions]
[n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, )]
[n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, )]
[n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, )]
[n, ., isName, (, ), ||, n, ., isString, (, )]
[n, ., isName, (, )]
[n]
[n, ., isString, (, )]
[n]
[n, ., isStringKey, (, )]
[n]
[n, ., isGetterDef, (, )]
[n]
[n, ., isSetterDef, (, )]
[n]
[NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[NodeUtil]
[n]
[parent]
[isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, )]
[isObjLitKey]
[(, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, )]
[parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n]
[parent, ., isGetProp, (, )]
[parent]
[parent, ., getLastChild, (, ), ==, n]
[parent, ., getLastChild, (, )]
[parent]
[n]
[n, ., isName, (, ), ||, isProperty]
[n, ., isName, (, )]
[n]
[isProperty]
[n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[n]
[Node, ., IS_CONSTANT_NAME]
[Node]
[!, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[!, isMarkedConstant]
[isMarkedConstant]
[NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[n]
[parent]
[assertOnChange]
[n, ., getString, (, )]
[n]
[new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), )]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, )]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:"]
["Unexpected const change.\n", +, "  name: ", +, name, +, "\n"]
["Unexpected const change.\n", +, "  name: ", +, name]
["Unexpected const change.\n", +, "  name: "]
["Unexpected const change.\n"]
["  name: "]
[name]
["\n"]
["  parent:"]
[n, ., getParent, (, ), ., toStringTree, (, )]
[n, ., getParent, (, )]
[n]
[n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[n]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[Preconditions, ., checkState, (, n, ., isFunction, (, ), )]
[Preconditions]
[n, ., isFunction, (, )]
[n]
[!, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, )]
[!, NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[!, NodeUtil, ., isHoistedFunctionDeclaration, (, n, )]
[NodeUtil, ., isHoistedFunctionDeclaration, (, n, )]
[NodeUtil]
[n]
[rewriteFunctionDeclaration, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[oldNameNode, ., cloneNode, (, )]
[oldNameNode]
[IR, ., var, (, fnNameNode, ), ., srcref, (, n, )]
[IR, ., var, (, fnNameNode, )]
[IR]
[fnNameNode]
[n]
[oldNameNode, ., setString, (, "", )]
[oldNameNode]
[""]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, var, )]
[parent]
[n]
[var]
[fnNameNode, ., addChildToFront, (, n, )]
[fnNameNode]
[n]
[reportCodeChange, (, "Function declaration", )]
["Function declaration"]
[n, ., isLabel, (, )]
[n]
[normalizeLabels, (, n, )]
[n]
[NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, )]
[NodeUtil, ., isStatementBlock, (, n, )]
[NodeUtil]
[n]
[n, ., isLabel, (, )]
[n]
[extractForInitializer, (, n, ,, null, ,, null, )]
[n]
[null]
[null]
[NodeUtil, ., isStatementBlock, (, n, )]
[NodeUtil]
[n]
[splitVarDeclarations, (, n, )]
[n]
[n, ., isFunction, (, )]
[n]
[moveNamedFunctions, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Preconditions, ., checkArgument, (, n, ., isLabel, (, ), )]
[Preconditions]
[n, ., isLabel, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[last, ., getType, (, )]
[last]
[Token, ., LABEL]
[Token]
[Token, ., BLOCK]
[Token]
[Token, ., FOR]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[IR, ., block, (, )]
[IR]
[block, ., copyInformationFrom, (, last, )]
[block]
[last]
[n, ., replaceChild, (, last, ,, block, )]
[n]
[last]
[block]
[block, ., addChildToFront, (, last, )]
[block]
[last]
[reportCodeChange, (, "LABEL normalization", )]
["LABEL normalization"]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[next]
[next]
[c, ., getNext, (, )]
[c]
[(, before, ==, null, ), ?, c, :, before]
[(, before, ==, null, )]
[before, ==, null]
[before]
[null]
[c]
[before]
[(, before, ==, null, ), ?, n, :, beforeParent]
[(, before, ==, null, )]
[before, ==, null]
[before]
[null]
[n]
[beforeParent]
[c, ., getType, (, )]
[c]
[Token, ., LABEL]
[Token]
[extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, )]
[c]
[insertBefore]
[insertBeforeParent]
[Token, ., FOR]
[Token]
[NodeUtil, ., isForIn, (, c, )]
[NodeUtil]
[c]
[c, ., getFirstChild, (, )]
[c]
[first, ., isVar, (, )]
[first]
[first]
[newStatement, ., getFirstChild, (, ), ., cloneNode, (, )]
[newStatement, ., getFirstChild, (, )]
[newStatement]
[first, ., getParent, (, ), ., replaceChild, (, first, ,, name, )]
[first, ., getParent, (, )]
[first]
[first]
[name]
[insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, )]
[insertBeforeParent]
[newStatement]
[insertBefore]
[reportCodeChange, (, "FOR-IN var declaration", )]
["FOR-IN var declaration"]
[!, c, ., getFirstChild, (, ), ., isEmpty, (, )]
[c, ., getFirstChild, (, ), ., isEmpty, (, )]
[c, ., getFirstChild, (, )]
[c]
[c, ., getFirstChild, (, )]
[c]
[IR, ., empty, (, )]
[IR]
[empty, ., copyInformationFrom, (, c, )]
[empty]
[c]
[c, ., replaceChild, (, init, ,, empty, )]
[c]
[init]
[empty]
[init, ., isVar, (, )]
[init]
[newStatement]
[init]
[newStatement]
[NodeUtil, ., newExpr, (, init, )]
[NodeUtil]
[init]
[insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, )]
[insertBeforeParent]
[newStatement]
[insertBefore]
[reportCodeChange, (, "FOR initializer", )]
["FOR initializer"]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[next]
[next]
[c, ., getNext, (, )]
[c]
[c, ., isVar, (, )]
[c]
[assertOnChange, &&, !, c, ., hasChildren, (, )]
[assertOnChange]
[!, c, ., hasChildren, (, )]
[c, ., hasChildren, (, )]
[c]
[new, IllegalStateException, (, "Empty VAR node.", )]
["Empty VAR node."]
[c, ., getFirstChild, (, ), !=, c, ., getLastChild, (, )]
[c, ., getFirstChild, (, )]
[c]
[c, ., getLastChild, (, )]
[c]
[c, ., getFirstChild, (, )]
[c]
[c, ., removeChild, (, name, )]
[c]
[name]
[IR, ., var, (, name, ), ., srcref, (, n, )]
[IR, ., var, (, name, )]
[IR]
[name]
[n]
[n, ., addChildBefore, (, newVar, ,, c, )]
[n]
[newVar]
[c]
[reportCodeChange, (, "VAR with multiple children", )]
["VAR with multiple children"]
[Preconditions, ., checkState, (, functionBody, ., getParent, (, ), ., isFunction, (, ), )]
[Preconditions]
[functionBody, ., getParent, (, ), ., isFunction, (, )]
[functionBody, ., getParent, (, )]
[functionBody]
[null]
[functionBody, ., getFirstChild, (, )]
[functionBody]
[current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, )]
[current, !=, null]
[current]
[null]
[NodeUtil, ., isFunctionDeclaration, (, current, )]
[NodeUtil]
[current]
[previous]
[current]
[current]
[current, ., getNext, (, )]
[current]
[previous]
[current, !=, null]
[current]
[null]
[current, ., getNext, (, )]
[current]
[NodeUtil, ., isFunctionDeclaration, (, current, )]
[NodeUtil]
[current]
[Preconditions, ., checkNotNull, (, previous, )]
[Preconditions]
[previous]
[functionBody, ., removeChildAfter, (, previous, )]
[functionBody]
[previous]
[insertAfter]
[addToFront, (, functionBody, ,, current, ,, insertAfter, )]
[functionBody]
[current]
[insertAfter]
[reportCodeChange, (, "Move function declaration not at top of function", )]
["Move function declaration not at top of function"]
[previous]
[current]
[current]
[next]
[after, ==, null]
[after]
[null]
[parent, ., addChildToFront, (, newChild, )]
[parent]
[newChild]
[parent, ., addChildAfter, (, newChild, ,, after, )]
[parent]
[newChild]
[after]
[newChild]
[new, ScopeTicklingCallback, (, )]
[new, SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), )]
[compiler]
[new, DuplicateDeclarationHandler, (, )]
[new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, )]
[compiler]
[tickler]
[scopeCreator]
[t, ., traverseRoots, (, externs, ,, root, )]
[t]
[externs]
[root]
[Sets, ., newHashSet, (, )]
[Sets]
[Preconditions, ., checkState, (, n, ., isName, (, ), )]
[Preconditions]
[n, ., isName, (, )]
[n]
[n, ., getParent, (, )]
[n]
[s, ., getVar, (, name, )]
[s]
[name]
[v, !=, null, &&, s, ., isGlobal, (, )]
[v, !=, null]
[v]
[null]
[s, ., isGlobal, (, )]
[s]
[v, ., isExtern, (, ), &&, !, input, ., isExtern, (, )]
[v, ., isExtern, (, )]
[v]
[!, input, ., isExtern, (, )]
[input, ., isExtern, (, )]
[input]
[hasOkDuplicateDeclaration, ., add, (, v, )]
[hasOkDuplicateDeclaration]
[v]
[v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, )]
[v, !=, null]
[v]
[null]
[v, ., getParentNode, (, ), ., isCatch, (, )]
[v, ., getParentNode, (, )]
[v]
[name]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, )]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter]
[MakeDeclaredNamesUnique]
[name]
[compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), )]
[compiler]
[JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, )]
[JSError]
[input, ., getName, (, )]
[input]
[n]
[CATCH_BLOCK_VAR_ERROR]
[name]
[v, !=, null, &&, parent, ., isFunction, (, )]
[v, !=, null]
[v]
[null]
[parent, ., isFunction, (, )]
[parent]
[v, ., getParentNode, (, ), ., isVar, (, )]
[v, ., getParentNode, (, )]
[v]
[s, ., undeclare, (, v, )]
[s]
[v]
[s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, )]
[s]
[name]
[n]
[n, ., getJSType, (, )]
[n]
[v, ., input]
[v]
[replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, ), )]
[v, ., getNameNode, (, )]
[v]
[v, ., getParentNode, (, )]
[v]
[v, ., getParentNode, (, ), ., getParent, (, )]
[v, ., getParentNode, (, )]
[v]
[parent, ., isVar, (, )]
[parent]
[Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), )]
[Preconditions]
[parent, ., hasOneChild, (, )]
[parent]
[replaceVarWithAssignment, (, n, ,, parent, ,, parent, ., getParent, (, ), )]
[n]
[parent]
[parent, ., getParent, (, )]
[parent]
[n, ., hasChildren, (, )]
[n]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., removeChild, (, value, )]
[n]
[value]
[IR, ., assign, (, n, ,, value, )]
[IR]
[n]
[value]
[replacement, ., copyInformationFrom, (, parent, )]
[replacement]
[parent]
[gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), )]
[gramps]
[parent]
[NodeUtil, ., newExpr, (, replacement, )]
[NodeUtil]
[replacement]
[NodeUtil, ., isStatementBlock, (, gramps, )]
[NodeUtil]
[gramps]
[gramps, ., removeChild, (, parent, )]
[gramps]
[parent]
[gramps, ., isFor, (, )]
[gramps]
[parent, ., removeChild, (, n, )]
[parent]
[n]
[gramps, ., replaceChild, (, parent, ,, n, )]
[gramps]
[parent]
[n]
[Preconditions, ., checkState, (, gramps, ., isLabel, (, ), )]
[Preconditions]
[gramps, ., isLabel, (, )]
[gramps]
[new, IllegalStateException, (, "Unexpected LABEL", )]
["Unexpected LABEL"]
[reportCodeChange, (, "Duplicate VAR declaration", )]
["Duplicate VAR declaration"]
[t, ., getScope, (, )]
[t]
[true]
