[@, SuppressWarnings, (, {, "unchecked", }, )]
[{, "unchecked", }]
["unchecked"]
[null]
[@, SuppressWarnings, (, "deprecation", )]
["deprecation"]
[context, ., getDeclaredFields, (, )]
[context]
[fields]
[field, ., isAnnotationPresent, (, Spy, ., class, ), &&, !, field, ., isAnnotationPresent, (, InjectMocks, ., class, )]
[field, ., isAnnotationPresent, (, Spy, ., class, )]
[field]
[Spy, ., class]
[!, field, ., isAnnotationPresent, (, InjectMocks, ., class, )]
[field, ., isAnnotationPresent, (, InjectMocks, ., class, )]
[field]
[InjectMocks, ., class]
[assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, )]
[Spy, ., class]
[field]
[Mock, ., class]
[org, ., mockito, ., MockitoAnnotations, ., Mock, ., class]
[Captor, ., class]
[field, ., setAccessible, (, true, )]
[field]
[true]
[instance]
[field, ., get, (, testInstance, )]
[field]
[testInstance]
[assertNotInterface, (, instance, ,, field, ., getType, (, ), )]
[instance]
[field, ., getType, (, )]
[field]
[new, MockUtil, (, ), ., isMock, (, instance, )]
[new, MockUtil, (, )]
[instance]
[Mockito, ., reset, (, instance, )]
[Mockito]
[instance]
[instance, !=, null]
[instance]
[null]
[field, ., set, (, testInstance, ,, Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ), )]
[field]
[testInstance]
[Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), )]
[Mockito]
[instance, ., getClass, (, )]
[instance]
[withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), )]
[withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, )]
[withSettings, (, ), ., spiedInstance, (, instance, )]
[withSettings, (, )]
[instance]
[Mockito, ., CALLS_REAL_METHODS]
[Mockito]
[field, ., getName, (, )]
[field]
[field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), )]
[field]
[testInstance]
[newSpyInstance, (, testInstance, ,, field, )]
[testInstance]
[field]
[new, MockitoException, (, "Unable to initialize @Spy annotated field '", +, field, ., getName, (, ), +, "'.\n", +, e, ., getMessage, (, ), ,, e, )]
["Unable to initialize @Spy annotated field '", +, field, ., getName, (, ), +, "'.\n", +, e, ., getMessage, (, )]
["Unable to initialize @Spy annotated field '", +, field, ., getName, (, ), +, "'.\n"]
["Unable to initialize @Spy annotated field '", +, field, ., getName, (, )]
["Unable to initialize @Spy annotated field '"]
[field, ., getName, (, )]
[field]
["'.\n"]
[e, ., getMessage, (, )]
[e]
[e]
[type]
[testInstance, !=, null, ?, testInstance, ., getClass, (, ), :, type]
[testInstance, !=, null]
[testInstance]
[null]
[testInstance, ., getClass, (, )]
[testInstance]
[type]
[type, ., isInterface, (, )]
[type]
[new, MockitoException, (, "Type '", +, type, ., getSimpleName, (, ), +, "' is an interface and it cannot be spied on.", )]
["Type '", +, type, ., getSimpleName, (, ), +, "' is an interface and it cannot be spied on."]
["Type '", +, type, ., getSimpleName, (, )]
["Type '"]
[type, ., getSimpleName, (, )]
[type]
["' is an interface and it cannot be spied on."]
[withSettings, (, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), )]
[withSettings, (, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, )]
[withSettings, (, )]
[Mockito, ., CALLS_REAL_METHODS]
[Mockito]
[field, ., getName, (, )]
[field]
[field, ., getType, (, )]
[field]
[type, ., isInterface, (, )]
[type]
[Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), )]
[Mockito]
[type]
[settings, ., useConstructor, (, )]
[settings]
[!, Modifier, ., isStatic, (, type, ., getModifiers, (, ), )]
[Modifier, ., isStatic, (, type, ., getModifiers, (, ), )]
[Modifier]
[type, ., getModifiers, (, )]
[type]
[type, ., getEnclosingClass, (, )]
[type]
[enclosing, !=, null]
[enclosing]
[null]
[!, enclosing, ., isInstance, (, testInstance, )]
[enclosing, ., isInstance, (, testInstance, )]
[enclosing]
[testInstance]
[new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", )]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'."]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, )]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '"]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', "]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, )]
["@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '"]
["@Spy annotation can only initialize inner classes declared in the test. "]
["Inner class: '"]
[type, ., getSimpleName, (, )]
[type]
["', "]
["outer class: '"]
[enclosing, ., getSimpleName, (, )]
[enclosing]
["'."]
[Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, ), )]
[Mockito]
[type]
[settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, )]
[settings, ., useConstructor, (, )]
[settings]
[testInstance]
[constructor]
[type, ., getDeclaredConstructor, (, )]
[type]
[new, MockitoException, (, "Please ensure that the type '", +, type, ., getSimpleName, (, ), +, "' has 0-arg constructor.", )]
["Please ensure that the type '", +, type, ., getSimpleName, (, ), +, "' has 0-arg constructor."]
["Please ensure that the type '", +, type, ., getSimpleName, (, )]
["Please ensure that the type '"]
[type, ., getSimpleName, (, )]
[type]
["' has 0-arg constructor."]
[Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), )]
[Modifier]
[constructor, ., getModifiers, (, )]
[constructor]
[constructor, ., setAccessible, (, true, )]
[constructor]
[true]
[Mockito, ., mock, (, type, ,, settings, ., spiedInstance, (, constructor, ., newInstance, (, ), ), )]
[Mockito]
[type]
[settings, ., spiedInstance, (, constructor, ., newInstance, (, ), )]
[settings]
[constructor, ., newInstance, (, )]
[constructor]
[Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), )]
[Mockito]
[type]
[settings, ., useConstructor, (, )]
[settings]
[undesiredAnnotations]
[field, ., isAnnotationPresent, (, u, )]
[field]
[u]
[new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, annotation, ., getClass, (, ), ., getSimpleName, (, ), )]
[new, Reporter, (, )]
[annotation, ., getSimpleName, (, )]
[annotation]
[annotation, ., getClass, (, ), ., getSimpleName, (, )]
[annotation, ., getClass, (, )]
[annotation]
