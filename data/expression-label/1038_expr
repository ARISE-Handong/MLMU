[0.577215664901532860606512090082]
[607.0, /, 128.0]
[607.0]
[128.0]
[10e-15]
[{, 0.99999999999999709182, ,, 57.156235665862923517, ,, -, 59.597960355475491248, ,, 14.136097974741747174, ,, -, 0.49191381609762019978, ,, .33994649984811888699e-4, ,, .46523628927048575665e-4, ,, -, .98374475304879564677e-4, ,, .15808870322491248884e-3, ,, -, .21026444172410488319e-3, ,, .21743961811521264320e-3, ,, -, .16431810653676389022e-3, ,, .84418223983852743293e-4, ,, -, .26190838401581408670e-4, ,, .36899182659531622704e-5, ,, }]
[0.99999999999999709182]
[57.156235665862923517]
[-, 59.597960355475491248]
[59.597960355475491248]
[14.136097974741747174]
[-, 0.49191381609762019978]
[0.49191381609762019978]
[.33994649984811888699e-4]
[.46523628927048575665e-4]
[-, .98374475304879564677e-4]
[.98374475304879564677e-4]
[.15808870322491248884e-3]
[-, .21026444172410488319e-3]
[.21026444172410488319e-3]
[.21743961811521264320e-3]
[-, .16431810653676389022e-3]
[.16431810653676389022e-3]
[.84418223983852743293e-4]
[-, .26190838401581408670e-4]
[.26190838401581408670e-4]
[.36899182659531622704e-5]
[0.5, *, FastMath, ., log, (, 2.0, *, FastMath, ., PI, )]
[0.5]
[FastMath, ., log, (, 2.0, *, FastMath, ., PI, )]
[FastMath]
[2.0, *, FastMath, ., PI]
[2.0]
[FastMath, ., PI]
[FastMath]
[2.506628274631000502]
[49]
[1e-5]
[.611609510448141581788E-08]
[.624730830116465516210E-08]
[.203610414066806987300E+00]
[.266205348428949217746E-01]
[.493944979382446875238E-03]
[-, .851419432440314906588E-05]
[.851419432440314906588E-05]
[-, .643045481779353022248E-05]
[.643045481779353022248E-05]
[.992641840672773722196E-06]
[-, .607761895722825260739E-07]
[.607761895722825260739E-07]
[.195755836614639731882E-09]
[.6116095104481415817861E-08]
[.6871674113067198736152E-08]
[.6820161668496170657918E-09]
[.4686843322948848031080E-10]
[.1572833027710446286995E-11]
[-, .1249441572276366213222E-12]
[.1249441572276366213222E-12]
[.4343529937408594255178E-14]
[.3056961078365221025009E+00]
[.5464213086042296536016E-01]
[.4956830093825887312020E-02]
[.2692369466186361192876E-03]
[-, .422784335098467139393487909917598E+00]
[.422784335098467139393487909917598E+00]
[.577215664901532860606512090082402E+00]
[-, .655878071520253881077019515145390E+00]
[.655878071520253881077019515145390E+00]
[-, .420026350340952355290039348754298E-01]
[.420026350340952355290039348754298E-01]
[.166538611382291489501700795102105E+00]
[-, .421977345555443367482083012891874E-01]
[.421977345555443367482083012891874E-01]
[-, .962197152787697356211492167234820E-02]
[.962197152787697356211492167234820E-02]
[.721894324666309954239501034044657E-02]
[-, .116516759185906511211397108401839E-02]
[.116516759185906511211397108401839E-02]
[-, .215241674114950972815729963053648E-03]
[.215241674114950972815729963053648E-03]
[.128050282388116186153198626328164E-03]
[-, .201348547807882386556893914210218E-04]
[.201348547807882386556893914210218E-04]
[-, .125049348214267065734535947383309E-05]
[.125049348214267065734535947383309E-05]
[.113302723198169588237412962033074E-05]
[-, .205633841697760710345015413002057E-06]
[.205633841697760710345015413002057E-06]
[Double, ., isNaN, (, x, ), ||, (, x, <=, 0.0, )]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[(, x, <=, 0.0, )]
[x, <=, 0.0]
[x]
[0.0]
[ret]
[Double, ., NaN]
[Double]
[x, <, 0.5]
[x]
[0.5]
[logGamma1p, (, x, ), -, FastMath, ., log, (, x, )]
[logGamma1p, (, x, )]
[x]
[FastMath, ., log, (, x, )]
[FastMath]
[x]
[x, <=, 2.5]
[x]
[2.5]
[logGamma1p, (, (, x, -, 0.5, ), -, 0.5, )]
[(, x, -, 0.5, ), -, 0.5]
[(, x, -, 0.5, )]
[x, -, 0.5]
[x]
[0.5]
[0.5]
[x, <=, 8.0]
[x]
[8.0]
[(, int, ), FastMath, ., floor, (, x, -, 1.5, )]
[FastMath, ., floor, (, x, -, 1.5, )]
[FastMath]
[x, -, 1.5]
[x]
[1.5]
[1.0]
[1]
[i, <=, n]
[i]
[n]
[i, ++]
[i]
[prod]
[x, -, i]
[x]
[i]
[logGamma1p, (, x, -, (, n, +, 1, ), ), +, FastMath, ., log, (, prod, )]
[logGamma1p, (, x, -, (, n, +, 1, ), )]
[x, -, (, n, +, 1, )]
[x]
[(, n, +, 1, )]
[n, +, 1]
[n]
[1]
[FastMath, ., log, (, prod, )]
[FastMath]
[prod]
[lanczos, (, x, )]
[x]
[x, +, LANCZOS_G, +, .5]
[x, +, LANCZOS_G]
[x]
[LANCZOS_G]
[.5]
[ret]
[(, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI, +, FastMath, ., log, (, sum, /, x, )]
[(, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp, +, HALF_LOG_2_PI]
[(, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), ), -, tmp]
[(, (, x, +, .5, ), *, FastMath, ., log, (, tmp, ), )]
[(, x, +, .5, ), *, FastMath, ., log, (, tmp, )]
[(, x, +, .5, )]
[x, +, .5]
[x]
[.5]
[FastMath, ., log, (, tmp, )]
[FastMath]
[tmp]
[tmp]
[HALF_LOG_2_PI]
[FastMath, ., log, (, sum, /, x, )]
[FastMath]
[sum, /, x]
[sum]
[x]
[ret]
[regularizedGammaP, (, a, ,, x, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, )]
[a]
[x]
[DEFAULT_EPSILON]
[Integer, ., MAX_VALUE]
[Integer]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, )]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, )]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, )]
[Double, ., isNaN, (, a, )]
[Double]
[a]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[(, a, <=, 0.0, )]
[a, <=, 0.0]
[a]
[0.0]
[(, x, <, 0.0, )]
[x, <, 0.0]
[x]
[0.0]
[ret]
[Double, ., NaN]
[Double]
[x, ==, 0.0]
[x]
[0.0]
[ret]
[0.0]
[x, >=, a, +, 1]
[x]
[a, +, 1]
[a]
[1]
[ret]
[1.0, -, regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[1.0]
[regularizedGammaQ, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[a]
[x]
[epsilon]
[maxIterations]
[0.0]
[1.0, /, a]
[1.0]
[a]
[an]
[FastMath, ., abs, (, an, /, sum, ), >, epsilon, &&, n, <, maxIterations, &&, sum, <, Double, ., POSITIVE_INFINITY]
[FastMath, ., abs, (, an, /, sum, ), >, epsilon, &&, n, <, maxIterations]
[FastMath, ., abs, (, an, /, sum, ), >, epsilon]
[FastMath, ., abs, (, an, /, sum, )]
[FastMath]
[an, /, sum]
[an]
[sum]
[epsilon]
[n, <, maxIterations]
[n]
[maxIterations]
[sum, <, Double, ., POSITIVE_INFINITY]
[sum]
[Double, ., POSITIVE_INFINITY]
[Double]
[n]
[n, +, 1.0]
[n]
[1.0]
[an]
[an, *, (, x, /, (, a, +, n, ), )]
[an]
[(, x, /, (, a, +, n, ), )]
[x, /, (, a, +, n, )]
[x]
[(, a, +, n, )]
[a, +, n]
[a]
[n]
[sum]
[sum, +, an]
[sum]
[an]
[n, >=, maxIterations]
[n]
[maxIterations]
[new, MaxCountExceededException, (, maxIterations, )]
[maxIterations]
[Double, ., isInfinite, (, sum, )]
[Double]
[sum]
[ret]
[1.0]
[ret]
[FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, sum]
[FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), )]
[FastMath]
[-, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, )]
[-, x, +, (, a, *, FastMath, ., log, (, x, ), )]
[-, x]
[x]
[(, a, *, FastMath, ., log, (, x, ), )]
[a, *, FastMath, ., log, (, x, )]
[a]
[FastMath, ., log, (, x, )]
[FastMath]
[x]
[logGamma, (, a, )]
[a]
[sum]
[ret]
[regularizedGammaQ, (, a, ,, x, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, )]
[a]
[x]
[DEFAULT_EPSILON]
[Integer, ., MAX_VALUE]
[Integer]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, ), ||, (, x, <, 0.0, )]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, ), ||, (, a, <=, 0.0, )]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, x, )]
[Double, ., isNaN, (, a, )]
[Double]
[a]
[Double, ., isNaN, (, x, )]
[Double]
[x]
[(, a, <=, 0.0, )]
[a, <=, 0.0]
[a]
[0.0]
[(, x, <, 0.0, )]
[x, <, 0.0]
[x]
[0.0]
[ret]
[Double, ., NaN]
[Double]
[x, ==, 0.0]
[x]
[0.0]
[ret]
[1.0]
[x, <, a, +, 1.0]
[x]
[a, +, 1.0]
[a]
[1.0]
[ret]
[1.0, -, regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[1.0]
[regularizedGammaP, (, a, ,, x, ,, epsilon, ,, maxIterations, )]
[a]
[x]
[epsilon]
[maxIterations]
[new, ContinuedFraction, (, ), {, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, (, (, 2.0, *, n, ), +, 1.0, ), -, a, +, x, ;, }, @, Override, protected, double, getB, (, int, n, ,, double, x, ), {, return, n, *, (, a, -, n, ), ;, }, }]
[(, (, 2.0, *, n, ), +, 1.0, ), -, a, +, x]
[(, (, 2.0, *, n, ), +, 1.0, ), -, a]
[(, (, 2.0, *, n, ), +, 1.0, )]
[(, 2.0, *, n, ), +, 1.0]
[(, 2.0, *, n, )]
[2.0, *, n]
[2.0]
[n]
[1.0]
[a]
[x]
[n, *, (, a, -, n, )]
[n]
[(, a, -, n, )]
[a, -, n]
[a]
[n]
[ret]
[1.0, /, cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, )]
[1.0]
[cf, ., evaluate, (, x, ,, epsilon, ,, maxIterations, )]
[cf]
[x]
[epsilon]
[maxIterations]
[ret]
[FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), ), *, ret]
[FastMath, ., exp, (, -, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, ), )]
[FastMath]
[-, x, +, (, a, *, FastMath, ., log, (, x, ), ), -, logGamma, (, a, )]
[-, x, +, (, a, *, FastMath, ., log, (, x, ), )]
[-, x]
[x]
[(, a, *, FastMath, ., log, (, x, ), )]
[a, *, FastMath, ., log, (, x, )]
[a]
[FastMath, ., log, (, x, )]
[FastMath]
[x]
[logGamma, (, a, )]
[a]
[ret]
[ret]
[x, >, 0, &&, x, <=, S_LIMIT]
[x, >, 0]
[x]
[0]
[x, <=, S_LIMIT]
[x]
[S_LIMIT]
[-, GAMMA, -, 1, /, x]
[-, GAMMA]
[GAMMA]
[1, /, x]
[1]
[x]
[x, >=, C_LIMIT]
[x]
[C_LIMIT]
[1, /, (, x, *, x, )]
[1]
[(, x, *, x, )]
[x, *, x]
[x]
[x]
[FastMath, ., log, (, x, ), -, 0.5, /, x, -, inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), )]
[FastMath, ., log, (, x, ), -, 0.5, /, x]
[FastMath, ., log, (, x, )]
[FastMath]
[x]
[0.5, /, x]
[0.5]
[x]
[inv, *, (, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), )]
[inv]
[(, (, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, ), )]
[(, 1.0, /, 12, ), +, inv, *, (, 1.0, /, 120, -, inv, /, 252, )]
[(, 1.0, /, 12, )]
[1.0, /, 12]
[1.0]
[12]
[inv, *, (, 1.0, /, 120, -, inv, /, 252, )]
[inv]
[(, 1.0, /, 120, -, inv, /, 252, )]
[1.0, /, 120, -, inv, /, 252]
[1.0, /, 120]
[1.0]
[120]
[inv, /, 252]
[inv]
[252]
[digamma, (, x, +, 1, ), -, 1, /, x]
[digamma, (, x, +, 1, )]
[x, +, 1]
[x]
[1]
[1, /, x]
[1]
[x]
[x, >, 0, &&, x, <=, S_LIMIT]
[x, >, 0]
[x]
[0]
[x, <=, S_LIMIT]
[x]
[S_LIMIT]
[1, /, (, x, *, x, )]
[1]
[(, x, *, x, )]
[x, *, x]
[x]
[x]
[x, >=, C_LIMIT]
[x]
[C_LIMIT]
[1, /, (, x, *, x, )]
[1]
[(, x, *, x, )]
[x, *, x]
[x]
[x]
[1, /, x, +, inv, /, 2, +, inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), )]
[1, /, x, +, inv, /, 2]
[1, /, x]
[1]
[x]
[inv, /, 2]
[inv]
[2]
[inv, /, x, *, (, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), )]
[inv, /, x]
[inv]
[x]
[(, 1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, ), )]
[1.0, /, 6, -, inv, *, (, 1.0, /, 30, +, inv, /, 42, )]
[1.0, /, 6]
[1.0]
[6]
[inv, *, (, 1.0, /, 30, +, inv, /, 42, )]
[inv]
[(, 1.0, /, 30, +, inv, /, 42, )]
[1.0, /, 30, +, inv, /, 42]
[1.0, /, 30]
[1.0]
[30]
[inv, /, 42]
[inv]
[42]
[trigamma, (, x, +, 1, ), +, 1, /, (, x, *, x, )]
[trigamma, (, x, +, 1, )]
[x, +, 1]
[x]
[1]
[1, /, (, x, *, x, )]
[1]
[(, x, *, x, )]
[x, *, x]
[x]
[x]
[0.0]
[LANCZOS, ., length, -, 1]
[LANCZOS, ., length]
[LANCZOS]
[1]
[i, >, 0]
[i]
[0]
[--, i]
[i]
[sum]
[sum, +, (, LANCZOS, [, i, ], /, (, x, +, i, ), )]
[sum]
[(, LANCZOS, [, i, ], /, (, x, +, i, ), )]
[LANCZOS, [, i, ], /, (, x, +, i, )]
[LANCZOS, [, i, ]]
[LANCZOS]
[i]
[(, x, +, i, )]
[x, +, i]
[x]
[i]
[sum, +, LANCZOS, [, 0, ]]
[sum]
[LANCZOS, [, 0, ]]
[LANCZOS]
[0]
[x, <, -, 0.5]
[x]
[-, 0.5]
[0.5]
[new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, )]
[x]
[-, 0.5]
[0.5]
[true]
[x, >, 1.5]
[x]
[1.5]
[new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, )]
[x]
[1.5]
[true]
[x, <=, 0.5, ?, x, :, (, x, -, 0.5, ), -, 0.5]
[x, <=, 0.5]
[x]
[0.5]
[x]
[(, x, -, 0.5, ), -, 0.5]
[(, x, -, 0.5, )]
[x, -, 0.5]
[x]
[0.5]
[0.5]
[t, <, 0.0]
[t]
[0.0]
[INV_GAMMA1P_M1_A0, +, t, *, INV_GAMMA1P_M1_A1]
[INV_GAMMA1P_M1_A0]
[t, *, INV_GAMMA1P_M1_A1]
[t]
[INV_GAMMA1P_M1_A1]
[INV_GAMMA1P_M1_B8]
[b]
[INV_GAMMA1P_M1_B7, +, t, *, b]
[INV_GAMMA1P_M1_B7]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B6, +, t, *, b]
[INV_GAMMA1P_M1_B6]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B5, +, t, *, b]
[INV_GAMMA1P_M1_B5]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B4, +, t, *, b]
[INV_GAMMA1P_M1_B4]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B3, +, t, *, b]
[INV_GAMMA1P_M1_B3]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B2, +, t, *, b]
[INV_GAMMA1P_M1_B2]
[t, *, b]
[t]
[b]
[b]
[INV_GAMMA1P_M1_B1, +, t, *, b]
[INV_GAMMA1P_M1_B1]
[t, *, b]
[t]
[b]
[b]
[1.0, +, t, *, b]
[1.0]
[t, *, b]
[t]
[b]
[INV_GAMMA1P_M1_C13, +, t, *, (, a, /, b, )]
[INV_GAMMA1P_M1_C13]
[t, *, (, a, /, b, )]
[t]
[(, a, /, b, )]
[a, /, b]
[a]
[b]
[c]
[INV_GAMMA1P_M1_C12, +, t, *, c]
[INV_GAMMA1P_M1_C12]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C11, +, t, *, c]
[INV_GAMMA1P_M1_C11]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C10, +, t, *, c]
[INV_GAMMA1P_M1_C10]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C9, +, t, *, c]
[INV_GAMMA1P_M1_C9]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C8, +, t, *, c]
[INV_GAMMA1P_M1_C8]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C7, +, t, *, c]
[INV_GAMMA1P_M1_C7]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C6, +, t, *, c]
[INV_GAMMA1P_M1_C6]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C5, +, t, *, c]
[INV_GAMMA1P_M1_C5]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C4, +, t, *, c]
[INV_GAMMA1P_M1_C4]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C3, +, t, *, c]
[INV_GAMMA1P_M1_C3]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C2, +, t, *, c]
[INV_GAMMA1P_M1_C2]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C1, +, t, *, c]
[INV_GAMMA1P_M1_C1]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C, +, t, *, c]
[INV_GAMMA1P_M1_C]
[t, *, c]
[t]
[c]
[x, >, 0.5]
[x]
[0.5]
[ret]
[t, *, c, /, x]
[t, *, c]
[t]
[c]
[x]
[ret]
[x, *, (, (, c, +, 0.5, ), +, 0.5, )]
[x]
[(, (, c, +, 0.5, ), +, 0.5, )]
[(, c, +, 0.5, ), +, 0.5]
[(, c, +, 0.5, )]
[c, +, 0.5]
[c]
[0.5]
[0.5]
[INV_GAMMA1P_M1_P6]
[p]
[INV_GAMMA1P_M1_P5, +, t, *, p]
[INV_GAMMA1P_M1_P5]
[t, *, p]
[t]
[p]
[p]
[INV_GAMMA1P_M1_P4, +, t, *, p]
[INV_GAMMA1P_M1_P4]
[t, *, p]
[t]
[p]
[p]
[INV_GAMMA1P_M1_P3, +, t, *, p]
[INV_GAMMA1P_M1_P3]
[t, *, p]
[t]
[p]
[p]
[INV_GAMMA1P_M1_P2, +, t, *, p]
[INV_GAMMA1P_M1_P2]
[t, *, p]
[t]
[p]
[p]
[INV_GAMMA1P_M1_P1, +, t, *, p]
[INV_GAMMA1P_M1_P1]
[t, *, p]
[t]
[p]
[p]
[INV_GAMMA1P_M1_P0, +, t, *, p]
[INV_GAMMA1P_M1_P0]
[t, *, p]
[t]
[p]
[INV_GAMMA1P_M1_Q4]
[q]
[INV_GAMMA1P_M1_Q3, +, t, *, q]
[INV_GAMMA1P_M1_Q3]
[t, *, q]
[t]
[q]
[q]
[INV_GAMMA1P_M1_Q2, +, t, *, q]
[INV_GAMMA1P_M1_Q2]
[t, *, q]
[t]
[q]
[q]
[INV_GAMMA1P_M1_Q1, +, t, *, q]
[INV_GAMMA1P_M1_Q1]
[t, *, q]
[t]
[q]
[q]
[1.0, +, t, *, q]
[1.0]
[t, *, q]
[t]
[q]
[INV_GAMMA1P_M1_C13, +, (, p, /, q, ), *, t]
[INV_GAMMA1P_M1_C13]
[(, p, /, q, ), *, t]
[(, p, /, q, )]
[p, /, q]
[p]
[q]
[t]
[c]
[INV_GAMMA1P_M1_C12, +, t, *, c]
[INV_GAMMA1P_M1_C12]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C11, +, t, *, c]
[INV_GAMMA1P_M1_C11]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C10, +, t, *, c]
[INV_GAMMA1P_M1_C10]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C9, +, t, *, c]
[INV_GAMMA1P_M1_C9]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C8, +, t, *, c]
[INV_GAMMA1P_M1_C8]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C7, +, t, *, c]
[INV_GAMMA1P_M1_C7]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C6, +, t, *, c]
[INV_GAMMA1P_M1_C6]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C5, +, t, *, c]
[INV_GAMMA1P_M1_C5]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C4, +, t, *, c]
[INV_GAMMA1P_M1_C4]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C3, +, t, *, c]
[INV_GAMMA1P_M1_C3]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C2, +, t, *, c]
[INV_GAMMA1P_M1_C2]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C1, +, t, *, c]
[INV_GAMMA1P_M1_C1]
[t, *, c]
[t]
[c]
[c]
[INV_GAMMA1P_M1_C0, +, t, *, c]
[INV_GAMMA1P_M1_C0]
[t, *, c]
[t]
[c]
[x, >, 0.5]
[x]
[0.5]
[ret]
[(, t, /, x, ), *, (, (, c, -, 0.5, ), -, 0.5, )]
[(, t, /, x, )]
[t, /, x]
[t]
[x]
[(, (, c, -, 0.5, ), -, 0.5, )]
[(, c, -, 0.5, ), -, 0.5]
[(, c, -, 0.5, )]
[c, -, 0.5]
[c]
[0.5]
[0.5]
[ret]
[x, *, c]
[x]
[c]
[ret]
[x, <, -, 0.5]
[x]
[-, 0.5]
[0.5]
[new, NumberIsTooSmallException, (, x, ,, -, 0.5, ,, true, )]
[x]
[-, 0.5]
[0.5]
[true]
[x, >, 1.5]
[x]
[1.5]
[new, NumberIsTooLargeException, (, x, ,, 1.5, ,, true, )]
[x]
[1.5]
[true]
[-, FastMath, ., log1p, (, invGamma1pm1, (, x, ), )]
[FastMath, ., log1p, (, invGamma1pm1, (, x, ), )]
[FastMath]
[invGamma1pm1, (, x, )]
[x]
[(, x, ==, FastMath, ., rint, (, x, ), ), &&, (, x, <=, 0.0, )]
[(, x, ==, FastMath, ., rint, (, x, ), )]
[x, ==, FastMath, ., rint, (, x, )]
[x]
[FastMath, ., rint, (, x, )]
[FastMath]
[x]
[(, x, <=, 0.0, )]
[x, <=, 0.0]
[x]
[0.0]
[Double, ., NaN]
[Double]
[FastMath, ., abs, (, x, )]
[FastMath]
[x]
[absX, <=, 20.0]
[absX]
[20.0]
[x, >=, 1.0]
[x]
[1.0]
[1.0]
[x]
[t, >, 2.5]
[t]
[2.5]
[t]
[t, -, 1.0]
[t]
[1.0]
[prod]
[t]
[ret]
[prod, /, (, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), )]
[prod]
[(, 1.0, +, invGamma1pm1, (, t, -, 1.0, ), )]
[1.0, +, invGamma1pm1, (, t, -, 1.0, )]
[1.0]
[invGamma1pm1, (, t, -, 1.0, )]
[t, -, 1.0]
[t]
[1.0]
[x]
[x]
[t, <, -, 0.5]
[t]
[-, 0.5]
[0.5]
[t]
[t, +, 1.0]
[t]
[1.0]
[prod]
[t]
[ret]
[1.0, /, (, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), )]
[1.0]
[(, prod, *, (, 1.0, +, invGamma1pm1, (, t, ), ), )]
[prod, *, (, 1.0, +, invGamma1pm1, (, t, ), )]
[prod]
[(, 1.0, +, invGamma1pm1, (, t, ), )]
[1.0, +, invGamma1pm1, (, t, )]
[1.0]
[invGamma1pm1, (, t, )]
[t]
[absX, +, LANCZOS_G, +, 0.5]
[absX, +, LANCZOS_G]
[absX]
[LANCZOS_G]
[0.5]
[SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, ), *, lanczos, (, absX, )]
[SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, ), *, FastMath, ., exp, (, -, y, )]
[SQRT_TWO_PI, /, x, *, FastMath, ., pow, (, y, ,, absX, +, 0.5, )]
[SQRT_TWO_PI, /, x]
[SQRT_TWO_PI]
[x]
[FastMath, ., pow, (, y, ,, absX, +, 0.5, )]
[FastMath]
[y]
[absX, +, 0.5]
[absX]
[0.5]
[FastMath, ., exp, (, -, y, )]
[FastMath]
[-, y]
[y]
[lanczos, (, absX, )]
[absX]
[x, >, 0.0]
[x]
[0.0]
[ret]
[gammaAbs]
[ret]
[-, FastMath, ., PI, /, (, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, )]
[-, FastMath, ., PI]
[FastMath, ., PI]
[FastMath]
[(, x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs, )]
[x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, ), *, gammaAbs]
[x, *, FastMath, ., sin, (, FastMath, ., PI, *, x, )]
[x]
[FastMath, ., sin, (, FastMath, ., PI, *, x, )]
[FastMath]
[FastMath, ., PI, *, x]
[FastMath, ., PI]
[FastMath]
[x]
[gammaAbs]
[ret]
