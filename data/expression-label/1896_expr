[DiagnosticType, ., warning, (, "JSC_BAD_REPLACEMENT_CONFIGURATION", ,, "Bad replacement configuration.", )]
[DiagnosticType]
["JSC_BAD_REPLACEMENT_CONFIGURATION"]
["Bad replacement configuration."]
["`"]
["?"]
["*"]
[Maps, ., newHashMap, (, )]
[Maps]
[HashMultimap, ., create, (, )]
[HashMultimap]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[0]
[this, ., name]
[this]
[name]
[this, ., parameter]
[this]
[parameter]
[Lists, ., newLinkedList, (, )]
[Lists]
[this, ., original]
[this]
[original]
[this, ., replacement]
[this]
[replacement]
[replacementLocations, ., add, (, new, Location, (, n, ., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ), )]
[replacementLocations]
[new, Location, (, n, ., getSourceFileName, (, ), ,, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), )]
[n, ., getSourceFileName, (, )]
[n]
[n, ., getLineno, (, )]
[n]
[n, ., getCharno, (, )]
[n]
[this, ., sourceFile]
[this]
[sourceFile]
[this, ., line]
[this]
[line]
[this, ., column]
[this]
[column]
[this, ., compiler]
[this]
[compiler]
[this, ., placeholderToken]
[this]
[placeholderToken, ., isEmpty, (, ), ?, DEFAULT_PLACEHOLDER_TOKEN, :, placeholderToken]
[placeholderToken, ., isEmpty, (, )]
[placeholderToken]
[DEFAULT_PLACEHOLDER_TOKEN]
[placeholderToken]
[this, ., registry]
[this]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[blacklisted]
[previousMappings, !=, null]
[previousMappings]
[null]
[previousMappings, ., getOriginalNameToNewNameMap, (, ), ., keySet, (, )]
[previousMappings, ., getOriginalNameToNewNameMap, (, )]
[previousMappings]
[reservedNames]
[Iterables, ., concat, (, blacklisted, ,, previous, )]
[Iterables]
[blacklisted]
[previous]
[initMapping, (, previousMappings, ,, blacklisted, )]
[previousMappings]
[blacklisted]
[this, ., nameGenerator]
[this]
[createNameGenerator, (, reservedNames, )]
[reservedNames]
[parseConfiguration, (, functionsToInspect, )]
[functionsToInspect]
[previousVarMap, ., getOriginalNameToNewNameMap, (, )]
[previousVarMap]
[previous, ., entrySet, (, )]
[previous]
[entry, ., getKey, (, )]
[entry]
[!, reservedNames, ., contains, (, key, )]
[reservedNames, ., contains, (, key, )]
[reservedNames]
[key]
[entry, ., getValue, (, )]
[entry]
[results, ., put, (, value, ,, new, Result, (, value, ,, key, ), )]
[results]
[value]
[new, Result, (, value, ,, key, )]
[value]
[key]
[new, Predicate, <, Result, >, (, ), {, @, Override, public, boolean, apply, (, Result, result, ), {, return, !, result, ., replacementLocations, ., isEmpty, (, ), ;, }, }]
[!, result, ., replacementLocations, ., isEmpty, (, )]
[result, ., replacementLocations, ., isEmpty, (, )]
[result, ., replacementLocations]
[result]
[ImmutableList, ., copyOf, (, Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, ), )]
[ImmutableList]
[Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, )]
[Iterables]
[results, ., values, (, )]
[results]
[USED_RESULTS]
[ImmutableMap, ., builder, (, )]
[ImmutableMap]
[Iterables, ., filter, (, results, ., values, (, ), ,, USED_RESULTS, )]
[Iterables]
[results, ., values, (, )]
[results]
[USED_RESULTS]
[map, ., put, (, result, ., replacement, ,, result, ., original, )]
[map]
[result, ., replacement]
[result]
[result, ., original]
[result]
[new, VariableMap, (, map, ., build, (, ), )]
[map, ., build, (, )]
[map]
[stringMap]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[n, ., getType, (, )]
[n]
[Token, ., NEW]
[Token]
[Token, ., CALL]
[Token]
[n, ., getFirstChild, (, )]
[n]
[calledFn, ., getQualifiedName, (, )]
[calledFn]
[name, !=, null]
[name]
[null]
[findMatching, (, name, )]
[name]
[config, !=, null]
[config]
[null]
[doSubstitutions, (, t, ,, config, ,, n, )]
[t]
[config]
[n]
[NodeUtil, ., isGet, (, calledFn, )]
[NodeUtil]
[calledFn]
[calledFn, ., getLastChild, (, )]
[calledFn]
[rhs, ., isName, (, ), ||, rhs, ., isString, (, )]
[rhs, ., isName, (, )]
[rhs]
[rhs, ., isString, (, )]
[rhs]
[rhs, ., getString, (, )]
[rhs]
[methods, ., get, (, methodName, )]
[methods]
[methodName]
[classes, !=, null]
[classes]
[null]
[calledFn, ., getFirstChild, (, )]
[calledFn]
[lhs, ., getJSType, (, ), !=, null]
[lhs, ., getJSType, (, )]
[lhs]
[null]
[lhs, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, )]
[lhs, ., getJSType, (, )]
[lhs]
[findMatchingClass, (, type, ,, classes, )]
[type]
[classes]
[config, !=, null]
[config]
[null]
[doSubstitutions, (, t, ,, config, ,, n, )]
[t]
[config]
[n]
[functions, ., get, (, name, )]
[functions]
[name]
[config, ==, null]
[config]
[null]
[name]
[name, ., replace, (, '$', ,, '.', )]
[name]
['$']
['.']
[config]
[functions, ., get, (, name, )]
[functions]
[name]
[config]
[!, callClassType, ., isNoObjectType, (, ), &&, !, callClassType, ., isUnknownType, (, )]
[!, callClassType, ., isNoObjectType, (, )]
[callClassType, ., isNoObjectType, (, )]
[callClassType]
[!, callClassType, ., isUnknownType, (, )]
[callClassType, ., isUnknownType, (, )]
[callClassType]
[declarationNames]
[getClassFromDeclarationName, (, declarationName, )]
[declarationName]
[registry, ., getType, (, className, )]
[registry]
[className]
[methodClassType, !=, null, &&, callClassType, ., isSubtype, (, methodClassType, )]
[methodClassType, !=, null]
[methodClassType]
[null]
[callClassType, ., isSubtype, (, methodClassType, )]
[callClassType]
[methodClassType]
[functions, ., get, (, declarationName, )]
[functions]
[declarationName]
[null]
[Preconditions, ., checkState, (, n, ., isNew, (, ), ||, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isNew, (, ), ||, n, ., isCall, (, )]
[n, ., isNew, (, )]
[n]
[n, ., isCall, (, )]
[n]
[config, ., parameter, !=, Config, ., REPLACE_ALL_VALUE]
[config, ., parameter]
[config]
[Config, ., REPLACE_ALL_VALUE]
[Config]
[n, ., getChildAtIndex, (, config, ., parameter, )]
[n]
[config, ., parameter]
[config]
[arg, !=, null]
[arg]
[null]
[replaceExpression, (, t, ,, arg, ,, n, )]
[t]
[arg]
[n]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[firstParam]
[arg, !=, null]
[arg]
[null]
[arg]
[arg, ., getNext, (, )]
[arg]
[arg]
[replaceExpression, (, t, ,, arg, ,, n, )]
[t]
[arg]
[n]
[null]
[expr, ., getType, (, )]
[expr]
[Token, ., STRING]
[Token]
[key]
[expr, ., getString, (, )]
[expr]
[replacementString]
[getReplacement, (, key, )]
[key]
[replacement]
[IR, ., string, (, replacementString, )]
[IR]
[replacementString]
[Token, ., ADD]
[Token]
[new, StringBuilder, (, )]
[IR, ., string, (, "", )]
[IR]
[""]
[replacement]
[buildReplacement, (, expr, ,, keyNode, ,, keyBuilder, )]
[expr]
[keyNode]
[keyBuilder]
[key]
[keyBuilder, ., toString, (, )]
[keyBuilder]
[replacementString]
[getReplacement, (, key, )]
[key]
[keyNode, ., setString, (, replacementString, )]
[keyNode]
[replacementString]
[Token, ., NAME]
[Token]
[t, ., getScope, (, ), ., getVar, (, expr, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[expr, ., getString, (, )]
[expr]
[var, !=, null, &&, var, ., isConst, (, )]
[var, !=, null]
[var]
[null]
[var, ., isConst, (, )]
[var]
[var, ., getInitialValue, (, )]
[var]
[value, !=, null, &&, value, ., isString, (, )]
[value, !=, null]
[value]
[null]
[value, ., isString, (, )]
[value]
[key]
[value, ., getString, (, )]
[value]
[replacementString]
[getReplacement, (, key, )]
[key]
[replacement]
[IR, ., string, (, replacementString, )]
[IR]
[replacementString]
[expr]
[expr]
[Preconditions, ., checkNotNull, (, key, )]
[Preconditions]
[key]
[Preconditions, ., checkNotNull, (, replacementString, )]
[Preconditions]
[replacementString]
[recordReplacement, (, expr, ,, key, ,, replacementString, )]
[expr]
[key]
[replacementString]
[parent, ., replaceChild, (, expr, ,, replacement, )]
[parent]
[expr]
[replacement]
[compiler, ., reportCodeChange, (, )]
[compiler]
[replacement]
[results, ., get, (, key, )]
[results]
[key]
[result, !=, null]
[result]
[null]
[result, ., replacement]
[result]
[nameGenerator, ., generateNextName, (, )]
[nameGenerator]
[result]
[new, Result, (, key, ,, replacement, )]
[key]
[replacement]
[results, ., put, (, key, ,, result, )]
[results]
[key]
[result]
[replacement]
[results, ., get, (, key, )]
[results]
[key]
[Preconditions, ., checkState, (, result, !=, null, )]
[Preconditions]
[result, !=, null]
[result]
[null]
[result, ., addLocation, (, n, )]
[result]
[n]
[expr, ., getType, (, )]
[expr]
[Token, ., ADD]
[Token]
[expr, ., getFirstChild, (, )]
[expr]
[left, ., getNext, (, )]
[left]
[prefix]
[buildReplacement, (, left, ,, prefix, ,, keyBuilder, )]
[left]
[prefix]
[keyBuilder]
[buildReplacement, (, right, ,, prefix, ,, keyBuilder, )]
[right]
[prefix]
[keyBuilder]
[Token, ., STRING]
[Token]
[keyBuilder, ., append, (, expr, ., getString, (, ), )]
[keyBuilder]
[expr, ., getString, (, )]
[expr]
[prefix]
[keyBuilder, ., append, (, placeholderToken, )]
[keyBuilder]
[placeholderToken]
[prefix]
[IR, ., add, (, prefix, ,, IR, ., string, (, placeholderToken, ), )]
[IR]
[prefix]
[IR, ., string, (, placeholderToken, )]
[IR]
[placeholderToken]
[IR, ., add, (, prefix, ,, expr, ., cloneTree, (, ), )]
[IR]
[prefix]
[expr, ., cloneTree, (, )]
[expr]
[fullDeclarationName, ., split, (, "\\.prototype\\.", )]
[fullDeclarationName]
["\\.prototype\\."]
[Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, )]
[Preconditions]
[parts, ., length, ==, 1, ||, parts, ., length, ==, 2]
[parts, ., length, ==, 1]
[parts, ., length]
[parts]
[1]
[parts, ., length, ==, 2]
[parts, ., length]
[parts]
[2]
[parts, ., length, ==, 2]
[parts, ., length]
[parts]
[2]
[parts, [, 1, ]]
[parts]
[1]
[null]
[fullDeclarationName, ., split, (, "\\.prototype\\.", )]
[fullDeclarationName]
["\\.prototype\\."]
[Preconditions, ., checkState, (, parts, ., length, ==, 1, ||, parts, ., length, ==, 2, )]
[Preconditions]
[parts, ., length, ==, 1, ||, parts, ., length, ==, 2]
[parts, ., length, ==, 1]
[parts, ., length]
[parts]
[1]
[parts, ., length, ==, 2]
[parts, ., length]
[parts]
[2]
[parts, ., length, ==, 2]
[parts, ., length]
[parts]
[2]
[parts, [, 0, ]]
[parts]
[0]
[null]
[functionsToInspect]
[parseConfiguration, (, function, )]
[function]
[functions, ., put, (, config, ., name, ,, config, )]
[functions]
[config, ., name]
[config]
[config]
[getMethodFromDeclarationName, (, config, ., name, )]
[config, ., name]
[config]
[method, !=, null]
[method]
[null]
[methods, ., put, (, method, ,, config, ., name, )]
[methods]
[method]
[config, ., name]
[config]
[function, ., indexOf, (, '(', )]
[function]
['(']
[function, ., indexOf, (, ')', )]
[function]
[')']
[Preconditions, ., checkState, (, first, !=, -, 1, &&, last, !=, -, 1, )]
[Preconditions]
[first, !=, -, 1, &&, last, !=, -, 1]
[first, !=, -, 1]
[first]
[-, 1]
[1]
[last, !=, -, 1]
[last]
[-, 1]
[1]
[function, ., substring, (, 0, ,, first, )]
[function]
[0]
[first]
[function, ., substring, (, first, +, 1, ,, last, )]
[function]
[first, +, 1]
[first]
[1]
[last]
[0]
[-, 1]
[1]
[params, ., split, (, ",", )]
[params]
[","]
[parts]
[paramCount, ++]
[paramCount]
[param, ., equals, (, REPLACE_ALL_MARKER, )]
[param]
[REPLACE_ALL_MARKER]
[Preconditions, ., checkState, (, paramCount, ==, 1, &&, parts, ., length, ==, 1, )]
[Preconditions]
[paramCount, ==, 1, &&, parts, ., length, ==, 1]
[paramCount, ==, 1]
[paramCount]
[1]
[parts, ., length, ==, 1]
[parts, ., length]
[parts]
[1]
[replacementParameter]
[Config, ., REPLACE_ALL_VALUE]
[Config]
[param, ., equals, (, REPLACE_ONE_MARKER, )]
[param]
[REPLACE_ONE_MARKER]
[Preconditions, ., checkState, (, replacementParameter, ==, -, 1, )]
[Preconditions]
[replacementParameter, ==, -, 1]
[replacementParameter]
[-, 1]
[1]
[replacementParameter]
[paramCount]
[Preconditions, ., checkState, (, param, ., isEmpty, (, ), ,, "Unknown marker", ,, param, )]
[Preconditions]
[param, ., isEmpty, (, )]
[param]
["Unknown marker"]
[param]
[Preconditions, ., checkState, (, replacementParameter, !=, -, 1, )]
[Preconditions]
[replacementParameter, !=, -, 1]
[replacementParameter]
[-, 1]
[1]
[new, Config, (, name, ,, replacementParameter, )]
[name]
[replacementParameter]
[""]
[new, char, [, 0, ]]
[0]
[new, NameGenerator, (, ImmutableSet, ., copyOf, (, reserved, ), ,, namePrefix, ,, reservedChars, )]
[ImmutableSet, ., copyOf, (, reserved, )]
[ImmutableSet]
[reserved]
[namePrefix]
[reservedChars]
