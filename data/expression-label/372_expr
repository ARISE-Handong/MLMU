[new, Comparator, <, Var, >, (, ), {, @, Override, public, int, compare, (, Var, v1, ,, Var, v2, ), {, return, v1, ., index, -, v2, ., index, ;, }, }]
[v1, ., index, -, v2, ., index]
[v1, ., index]
[v1]
[v2, ., index]
[v2]
[Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), )]
[Preconditions]
[!, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, )]
[compiler, ., getLifeCycleStage, (, )]
[compiler]
[this, ., compiler]
[this]
[compiler]
[colorings]
[Lists, ., newLinkedList, (, )]
[Lists]
[this, ., usePseudoNames]
[this]
[usePseudoNames]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[scope, ., isGlobal, (, )]
[scope]
[false]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, scope, ., getVarCount, (, )]
[LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE]
[LiveVariablesAnalysis]
[scope, ., getVarCount, (, )]
[scope]
[false]
[true]
[t, ., getScope, (, )]
[t]
[!, shouldOptimizeScope, (, scope, )]
[shouldOptimizeScope, (, scope, )]
[scope]
[t, ., getControlFlowGraph, (, )]
[t]
[new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, )]
[cfg]
[scope]
[compiler]
[scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (, ), ==, 2]
[scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (, )]
[scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, )]
[scope, ., getRootNode, (, ), ., getFirstChild, (, )]
[scope, ., getRootNode, (, )]
[scope]
[2]
[liveness, ., markAllParametersEscaped, (, )]
[liveness]
[liveness, ., analyze, (, )]
[liveness]
[computeVariableNamesInterferenceGraph, (, t, ,, cfg, ,, liveness, ., getEscapedLocals, (, ), )]
[t]
[cfg]
[liveness, ., getEscapedLocals, (, )]
[liveness]
[new, GreedyGraphColoring, <, Var, ,, Void, >, (, interferenceGraph, ,, coloringTieBreaker, )]
[interferenceGraph]
[coloringTieBreaker]
[coloring, ., color, (, )]
[coloring]
[colorings, ., push, (, coloring, )]
[colorings]
[coloring]
[!, shouldOptimizeScope, (, t, ., getScope, (, ), )]
[shouldOptimizeScope, (, t, ., getScope, (, ), )]
[t, ., getScope, (, )]
[t]
[colorings, ., pop, (, )]
[colorings]
[colorings, ., isEmpty, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, )]
[colorings, ., isEmpty, (, ), ||, !, n, ., isName, (, )]
[colorings, ., isEmpty, (, )]
[colorings]
[!, n, ., isName, (, )]
[n, ., isName, (, )]
[n]
[parent, ., isFunction, (, )]
[parent]
[t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), )]
[t, ., getScope, (, )]
[t]
[n, ., getString, (, )]
[n]
[colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, var, )]
[colorings, ., peek, (, ), ., getGraph, (, )]
[colorings, ., peek, (, )]
[colorings]
[var]
[vNode, ==, null]
[vNode]
[null]
[colorings, ., peek, (, ), ., getPartitionSuperNode, (, var, )]
[colorings, ., peek, (, )]
[colorings]
[var]
[!, usePseudoNames]
[usePseudoNames]
[vNode, ., getValue, (, ), ., equals, (, coalescedVar, )]
[vNode, ., getValue, (, )]
[vNode]
[coalescedVar]
[n, ., setString, (, coalescedVar, ., name, )]
[n]
[coalescedVar, ., name]
[coalescedVar]
[compiler, ., reportCodeChange, (, )]
[compiler]
[parent, ., isVar, (, )]
[parent]
[removeVarDeclaration, (, n, )]
[n]
[null]
[Sets, ., newTreeSet, (, )]
[Sets]
[t, ., getScope, (, ), ., getVars, (, )]
[t, ., getScope, (, )]
[t]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar, ), !=, null, &&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), )]
[colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar, ), !=, null]
[colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar, )]
[colorings, ., peek, (, ), ., getGraph, (, )]
[colorings, ., peek, (, )]
[colorings]
[iVar]
[null]
[coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), )]
[coalescedVar]
[colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, )]
[colorings, ., peek, (, )]
[colorings]
[iVar]
[allMergedNames, ., add, (, iVar, ., name, )]
[allMergedNames]
[iVar, ., name]
[iVar]
[allMergedNames, ., size, (, ), ==, 1]
[allMergedNames, ., size, (, )]
[allMergedNames]
[1]
[pseudoName]
[Joiner, ., on, (, "_", ), ., join, (, allMergedNames, )]
[Joiner, ., on, (, "_", )]
[Joiner]
["_"]
[allMergedNames]
[t, ., getScope, (, ), ., isDeclared, (, pseudoName, ,, true, )]
[t, ., getScope, (, )]
[t]
[pseudoName]
[true]
[pseudoName]
["$"]
[n, ., setString, (, pseudoName, )]
[n]
[pseudoName]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), &&, parent, ., isVar, (, )]
[!, vNode, ., getValue, (, ), ., equals, (, coalescedVar, )]
[vNode, ., getValue, (, ), ., equals, (, coalescedVar, )]
[vNode, ., getValue, (, )]
[vNode]
[coalescedVar]
[parent, ., isVar, (, )]
[parent]
[removeVarDeclaration, (, n, )]
[n]
[LinkedUndirectedGraph, ., create, (, )]
[LinkedUndirectedGraph]
[t, ., getScope, (, )]
[t]
[scope, ., getVars, (, )]
[scope]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[!, escaped, ., contains, (, v, )]
[escaped, ., contains, (, v, )]
[escaped]
[v]
[!, v, ., getParentNode, (, ), ., isFunction, (, )]
[v, ., getParentNode, (, ), ., isFunction, (, )]
[v, ., getParentNode, (, )]
[v]
[interferenceGraph, ., createNode, (, v, )]
[interferenceGraph]
[v]
[scope, ., getVars, (, )]
[scope]
[i1, ., hasNext, (, )]
[i1]
[i1, ., next, (, )]
[i1]
[scope, ., getVars, (, )]
[scope]
[i2, ., hasNext, (, )]
[i2]
[i2, ., next, (, )]
[i2]
[v1, ., index, >=, v2, ., index]
[v1, ., index]
[v1]
[v2, ., index]
[v2]
[!, interferenceGraph, ., hasNode, (, v1, ), ||, !, interferenceGraph, ., hasNode, (, v2, )]
[!, interferenceGraph, ., hasNode, (, v1, )]
[interferenceGraph, ., hasNode, (, v1, )]
[interferenceGraph]
[v1]
[!, interferenceGraph, ., hasNode, (, v2, )]
[interferenceGraph, ., hasNode, (, v2, )]
[interferenceGraph]
[v2]
[v1, ., getParentNode, (, ), ., isParamList, (, ), &&, v2, ., getParentNode, (, ), ., isParamList, (, )]
[v1, ., getParentNode, (, ), ., isParamList, (, )]
[v1, ., getParentNode, (, )]
[v1]
[v2, ., getParentNode, (, ), ., isParamList, (, )]
[v2, ., getParentNode, (, )]
[v2]
[interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, )]
[interferenceGraph]
[v1]
[null]
[v2]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[cfg, ., isImplicitReturn, (, cfgNode, )]
[cfg]
[cfgNode]
[cfgNode, ., getAnnotation, (, )]
[cfgNode]
[(, state, ., getIn, (, ), ., isLive, (, v1, ), &&, state, ., getIn, (, ), ., isLive, (, v2, ), ), ||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive, (, v2, ), )]
[(, state, ., getIn, (, ), ., isLive, (, v1, ), &&, state, ., getIn, (, ), ., isLive, (, v2, ), )]
[state, ., getIn, (, ), ., isLive, (, v1, ), &&, state, ., getIn, (, ), ., isLive, (, v2, )]
[state, ., getIn, (, ), ., isLive, (, v1, )]
[state, ., getIn, (, )]
[state]
[v1]
[state, ., getIn, (, ), ., isLive, (, v2, )]
[state, ., getIn, (, )]
[state]
[v2]
[(, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive, (, v2, ), )]
[state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive, (, v2, )]
[state, ., getOut, (, ), ., isLive, (, v1, )]
[state, ., getOut, (, )]
[state]
[v1]
[state, ., getOut, (, ), ., isLive, (, v2, )]
[state, ., getOut, (, )]
[state]
[v2]
[interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, )]
[interferenceGraph]
[v1]
[null]
[v2]
[cfg, ., getDirectedGraphNodes, (, )]
[cfg]
[cfg, ., isImplicitReturn, (, cfgNode, )]
[cfg]
[cfgNode]
[cfgNode, ., getAnnotation, (, )]
[cfgNode]
[state, ., getOut, (, ), ., isLive, (, v1, )]
[state, ., getOut, (, )]
[state]
[v1]
[state, ., getOut, (, ), ., isLive, (, v2, )]
[state, ., getOut, (, )]
[state]
[v2]
[new, CombinedLiveRangeChecker, (, new, LiveRangeChecker, (, v1, ,, v2OutLive, ?, null, :, v2, ), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), )]
[new, LiveRangeChecker, (, v1, ,, v2OutLive, ?, null, :, v2, )]
[v1]
[v2OutLive, ?, null, :, v2]
[v2OutLive]
[null]
[v2]
[new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, )]
[v2]
[v1OutLive, ?, null, :, v1]
[v1OutLive]
[null]
[v1]
[NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, )]
[NodeTraversal]
[compiler]
[cfgNode, ., getValue, (, )]
[cfgNode]
[checker]
[checker, ., connectIfCrossed, (, interferenceGraph, )]
[checker]
[interferenceGraph]
[interferenceGraph]
[this, ., callback1]
[this]
[callback1]
[this, ., callback2]
[this]
[callback2]
[LiveRangeChecker, ., shouldVisit, (, n, )]
[LiveRangeChecker]
[n]
[callback1, ., visit, (, t, ,, n, ,, parent, )]
[callback1]
[t]
[n]
[parent]
[callback2, ., visit, (, t, ,, n, ,, parent, )]
[callback2]
[t]
[n]
[parent]
[callback1, ., crossed, ||, callback2, ., crossed]
[callback1, ., crossed]
[callback1]
[callback2, ., crossed]
[callback2]
[callback1, ., getDef, (, )]
[callback1]
[callback2, ., getDef, (, )]
[callback2]
[interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, )]
[interferenceGraph]
[v1]
[null]
[v2]
[true]
[false]
[name, ., getParent, (, )]
[name]
[var, ., getParent, (, )]
[var]
[NodeUtil, ., isForIn, (, parent, )]
[NodeUtil]
[parent]
[var, ., removeChild, (, name, )]
[var]
[name]
[parent, ., replaceChild, (, var, ,, name, )]
[parent]
[var]
[name]
[var, ., hasOneChild, (, )]
[var]
[name, ., hasChildren, (, )]
[name]
[name, ., removeFirstChild, (, )]
[name]
[var, ., removeChild, (, name, )]
[var]
[name]
[IR, ., assign, (, name, ,, value, ), ., srcref, (, name, )]
[IR, ., assign, (, name, ,, value, )]
[IR]
[name]
[value]
[name]
[!, parent, ., isFor, (, )]
[parent, ., isFor, (, )]
[parent]
[assign]
[NodeUtil, ., newExpr, (, assign, )]
[NodeUtil]
[assign]
[parent, ., replaceChild, (, var, ,, assign, )]
[parent]
[var]
[assign]
[NodeUtil, ., removeChild, (, parent, ,, var, )]
[NodeUtil]
[parent]
[var]
[!, name, ., hasChildren, (, )]
[name, ., hasChildren, (, )]
[name]
[var, ., removeChild, (, name, )]
[var]
[name]
[false]
[false]
[this, ., def]
[this]
[def]
[this, ., use]
[this]
[use]
[def]
[(, n, ., isName, (, ), ||, (, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), )]
[n, ., isName, (, ), ||, (, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), )]
[n, ., isName, (, )]
[n]
[(, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), )]
[n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., hasChildren, (, )]
[n]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[!, defFound, &&, isAssignTo, (, def, ,, n, ,, parent, )]
[!, defFound]
[defFound]
[isAssignTo, (, def, ,, n, ,, parent, )]
[def]
[n]
[parent]
[defFound]
[true]
[defFound, &&, (, use, ==, null, ||, isReadFrom, (, use, ,, n, ), )]
[defFound]
[(, use, ==, null, ||, isReadFrom, (, use, ,, n, ), )]
[use, ==, null, ||, isReadFrom, (, use, ,, n, )]
[use, ==, null]
[use]
[null]
[isReadFrom, (, use, ,, n, )]
[use]
[n]
[crossed]
[true]
[n, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, n, ., getString, (, ), ), &&, parent, !=, null]
[n, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, n, ., getString, (, ), )]
[n, ., isName, (, )]
[n]
[var, ., getName, (, ), ., equals, (, n, ., getString, (, ), )]
[var, ., getName, (, )]
[var]
[n, ., getString, (, )]
[n]
[parent, !=, null]
[parent]
[null]
[parent, ., isParamList, (, )]
[parent]
[true]
[parent, ., isVar, (, )]
[parent]
[n, ., hasChildren, (, )]
[n]
[false]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (, n, )]
[name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), )]
[name, !=, null, &&, name, ., isName, (, )]
[name, !=, null]
[name]
[null]
[name, ., isName, (, )]
[name]
[var, ., getName, (, ), ., equals, (, name, ., getString, (, ), )]
[var, ., getName, (, )]
[var]
[name, ., getString, (, )]
[name]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), )]
[name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), )]
[name, !=, null, &&, name, ., isName, (, )]
[name, !=, null]
[name]
[null]
[name, ., isName, (, )]
[name]
[var, ., getName, (, ), ., equals, (, name, ., getString, (, ), )]
[var, ., getName, (, )]
[var]
[name, ., getString, (, )]
[name]
[!, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), )]
[NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), )]
[NodeUtil]
[name]
[name, ., getParent, (, )]
[name]
