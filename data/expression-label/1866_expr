["JSCompiler_prototypeAlias"]
[this, ., globalOverhead]
[this]
[globalOverHead]
[this, ., perExtractionOverhead]
[this]
[perExtractionOverhead]
[this, ., perMemberOverhead]
[this]
[perMemberOverhead]
["var t;", ., length, (, )]
["var t;"]
["t=y.prototype;", ., length, (, )]
["t=y.prototype;"]
["t.y=", ., length, (, ), -, "x[p].y=", ., length, (, )]
["t.y=", ., length, (, )]
["t.y="]
["x[p].y=", ., length, (, )]
["x[p].y="]
[0]
["(function(t){})(y.prototype);", ., length, (, )]
["(function(t){})(y.prototype);"]
["t.y=", ., length, (, ), -, "x.prototype.y=", ., length, (, )]
["t.y=", ., length, (, )]
["t.y="]
["x.prototype.y=", ., length, (, )]
["x.prototype.y="]
[this, ., compiler]
[this]
[compiler]
[this, ., pattern]
[this]
[pattern]
[new, GatherExtractionInfo, (, )]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, extractionInfo, )]
[NodeTraversal]
[compiler]
[root]
[extractionInfo]
[extractionInfo, ., shouldExtract, (, )]
[extractionInfo]
[doExtraction, (, extractionInfo, )]
[extractionInfo]
[compiler, ., reportCodeChange, (, )]
[compiler]
[pattern, ==, Pattern, ., USE_GLOBAL_TEMP]
[pattern]
[Pattern, ., USE_GLOBAL_TEMP]
[Pattern]
[compiler, ., getNodeForCodeInsertion, (, null, )]
[compiler]
[null]
[NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, )]
[NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, )]
[NodeUtil]
[prototypeAlias]
[null]
[injectionPoint]
[injectionPoint, ., addChildrenToFront, (, var, )]
[injectionPoint]
[var]
[info, ., instances]
[info]
[extractInstance, (, instance, )]
[instance]
[instance, ., declarations, ., getFirst, (, )]
[instance, ., declarations]
[instance]
[first, ., qualifiedClassName]
[first]
[pattern, ==, Pattern, ., USE_GLOBAL_TEMP]
[pattern]
[Pattern, ., USE_GLOBAL_TEMP]
[Pattern]
[new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, )]
[new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), )]
[first, ., node, ., getType, (, )]
[first, ., node]
[first]
[IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), )]
[IR]
[IR, ., name, (, prototypeAlias, )]
[IR]
[prototypeAlias]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[className, +, ".prototype"]
[className]
[".prototype"]
[instance, ., parent]
[instance]
[className, +, ".prototype"]
[className]
[".prototype"]
[first, ., node]
[first]
[instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, )]
[instance, ., parent]
[instance]
[stmt]
[first, ., node]
[first]
[pattern, ==, Pattern, ., USE_ANON_FUNCTION]
[pattern]
[Pattern, ., USE_ANON_FUNCTION]
[Pattern]
[IR, ., block, (, )]
[IR]
[IR, ., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, )]
[IR]
[IR, ., name, (, "", )]
[IR]
[""]
[IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), )]
[IR]
[IR, ., name, (, prototypeAlias, )]
[IR]
[prototypeAlias]
[block]
[IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), )]
[IR]
[func]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[className, +, ".prototype"]
[className]
[".prototype"]
[instance, ., parent]
[instance]
[className, +, ".prototype"]
[className]
[".prototype"]
[call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, )]
[call]
[Node, ., FREE_CALL]
[Node]
[1]
[new, Node, (, first, ., node, ., getType, (, ), ,, call, )]
[first, ., node, ., getType, (, )]
[first, ., node]
[first]
[call]
[stmt, ., copyInformationFromForTree, (, first, ., node, )]
[stmt]
[first, ., node]
[first]
[instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, )]
[instance, ., parent]
[instance]
[stmt]
[first, ., node]
[first]
[instance, ., declarations]
[instance]
[block, ., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), )]
[block]
[declar, ., node, ., detachFromParent, (, )]
[declar, ., node]
[declar]
[instance, ., declarations]
[instance]
[replacePrototypeMemberDeclaration, (, declar, )]
[declar]
[declar, ., node, ., getFirstChild, (, )]
[declar, ., node]
[declar]
[assignment, ., getFirstChild, (, )]
[assignment]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[prototypeAlias, +, ".", +, declar, ., memberName]
[prototypeAlias, +, "."]
[prototypeAlias]
["."]
[declar, ., memberName]
[declar]
[declar, ., node]
[declar]
[declar, ., memberName]
[declar]
[declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, )]
[declar, ., lhs, ., getFirstChild, (, )]
[declar, ., lhs]
[declar]
[accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, )]
[accessNode]
[Node, ., ORIGINALNAME_PROP]
[Node]
["?"]
[originalName, !=, null]
[originalName]
[null]
[className]
[originalName, ., toString, (, )]
[originalName]
[NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", )]
[NodeUtil]
[name, ., getFirstChild, (, )]
[name]
[lhs]
[className, +, ".prototype"]
[className]
[".prototype"]
[assignment, ., replaceChild, (, lhs, ,, name, )]
[assignment]
[lhs]
[name]
[Lists, ., newLinkedList, (, )]
[Lists]
[pattern, ., globalOverhead]
[pattern]
[!, n, ., isScript, (, ), &&, !, n, ., isBlock, (, )]
[!, n, ., isScript, (, )]
[n, ., isScript, (, )]
[n]
[!, n, ., isBlock, (, )]
[n, ., isBlock, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[cur, !=, null]
[cur]
[null]
[cur]
[cur, ., getNext, (, )]
[cur]
[PrototypeMemberDeclaration, ., extractDeclaration, (, cur, )]
[PrototypeMemberDeclaration]
[cur]
[prototypeMember, ==, null]
[prototypeMember]
[null]
[new, ExtractionInstance, (, prototypeMember, ,, n, )]
[prototypeMember]
[n]
[cur]
[instance, ., declarations, ., getLast, (, ), ., node]
[instance, ., declarations, ., getLast, (, )]
[instance, ., declarations]
[instance]
[instance, ., isFavorable, (, )]
[instance]
[instances, ., add, (, instance, )]
[instances]
[instance]
[totalDelta]
[instance, ., delta]
[instance]
[totalDelta, <, 0]
[totalDelta]
[0]
[Lists, ., newLinkedList, (, )]
[Lists]
[0]
[this, ., parent]
[this]
[parent]
[declarations, ., add, (, head, )]
[declarations]
[head]
[delta]
[pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead]
[pattern, ., perExtractionOverhead]
[pattern]
[pattern, ., perMemberOverhead]
[pattern]
[head, ., node, ., getNext, (, )]
[head, ., node]
[head]
[cur, !=, null]
[cur]
[null]
[cur]
[cur, ., getNext, (, )]
[cur]
[cur, ., isFunction, (, )]
[cur]
[PrototypeMemberDeclaration, ., extractDeclaration, (, cur, )]
[PrototypeMemberDeclaration]
[cur]
[prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, )]
[prototypeMember, ==, null]
[prototypeMember]
[null]
[!, head, ., isSameClass, (, prototypeMember, )]
[head, ., isSameClass, (, prototypeMember, )]
[head]
[prototypeMember]
[declarations, ., add, (, prototypeMember, )]
[declarations]
[prototypeMember]
[delta]
[pattern, ., perMemberOverhead]
[pattern]
[delta, <=, 0]
[delta]
[0]
[this, ., lhs]
[this]
[lhs]
[this, ., memberName]
[this]
[NodeUtil, ., getPrototypePropertyName, (, lhs, )]
[NodeUtil]
[lhs]
[this, ., node]
[this]
[node]
[this, ., qualifiedClassName]
[this]
[NodeUtil, ., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, )]
[NodeUtil, ., getPrototypeClassName, (, lhs, )]
[NodeUtil]
[lhs]
[qualifiedClassName, ., equals, (, other, ., qualifiedClassName, )]
[qualifiedClassName]
[other, ., qualifiedClassName]
[other]
[!, NodeUtil, ., isPrototypePropertyDeclaration, (, n, )]
[NodeUtil, ., isPrototypePropertyDeclaration, (, n, )]
[NodeUtil]
[n]
[null]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[new, PrototypeMemberDeclaration, (, lhs, ,, n, )]
[lhs]
[n]
