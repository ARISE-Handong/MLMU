[ImmutableList, ., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", )]
[ImmutableList]
["deadAssignmentsElimination"]
["inlineFunctions"]
["removeUnusedPrototypeProperties"]
["removeUnreachableCode"]
["removeUnusedVars"]
["minimizeExitPoints"]
["inlineVariables"]
["collapseObjectLiterals"]
["peepholeOptimizations"]
[100]
["Fixed point loop exceeded the maximum number of iterations."]
[Logger, ., getLogger, (, PhaseOptimizer, ., class, ., getName, (, ), )]
[Logger]
[PhaseOptimizer, ., class, ., getName, (, )]
[PhaseOptimizer, ., class]
[Lists, ., newArrayList, (, )]
[Lists]
[new, CodeChangeHandler, ., RecentChange, (, )]
[false]
[null]
[null]
[null]
[0.0]
[0.0]
[false]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., compiler]
[this]
[compiler]
[this, ., tracker]
[this]
[tracker]
[this, ., progressRange]
[this]
[progressRange]
[compiler, ., addChangeHandler, (, recentChange, )]
[compiler]
[recentChange]
[randomizeLoops]
[true]
[loopsRun]
[loopsRun, ., clear, (, )]
[loopsRun]
[new, Loop, (, )]
[false]
[factories]
[factory, ., isOneTimePass, (, )]
[factory]
[isCurrentLoopPopulated]
[passes, ., add, (, currentLoop, )]
[passes]
[currentLoop]
[currentLoop]
[new, Loop, (, )]
[isCurrentLoopPopulated]
[false]
[addOneTimePass, (, factory, )]
[factory]
[currentLoop, ., addLoopedPass, (, factory, )]
[currentLoop]
[factory]
[isCurrentLoopPopulated]
[true]
[isCurrentLoopPopulated]
[passes, ., add, (, currentLoop, )]
[passes]
[currentLoop]
[passes, ., add, (, new, NamedPass, (, factory, ), )]
[passes]
[new, NamedPass, (, factory, )]
[factory]
[new, Loop, (, )]
[passes, ., add, (, loop, )]
[passes]
[loop]
[loop]
[this, ., sanityCheck]
[this]
[sanityCheck]
[progress]
[0.0]
[progressStep]
[0.0]
[progressRange, !=, null]
[progressRange]
[null]
[progressStep]
[(, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, )]
[(, progressRange, ., maxValue, -, progressRange, ., initialValue, )]
[progressRange, ., maxValue, -, progressRange, ., initialValue]
[progressRange, ., maxValue]
[progressRange]
[progressRange, ., initialValue]
[progressRange]
[passes, ., size, (, )]
[passes]
[progress]
[progressRange, ., initialValue]
[progressRange]
[passes]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[hasHaltingErrors, (, )]
[Preconditions, ., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, )]
[Preconditions]
[currentTracer, ==, null, &&, currentPassName, ==, null]
[currentTracer, ==, null]
[currentTracer]
[null]
[currentPassName, ==, null]
[currentPassName]
[null]
[currentPassName]
[passName]
[currentTracer]
[newTracer, (, passName, )]
[passName]
[Preconditions, ., checkState, (, currentTracer, !=, null, &&, currentPassName, !=, null, )]
[Preconditions]
[currentTracer, !=, null, &&, currentPassName, !=, null]
[currentTracer, !=, null]
[currentTracer]
[null]
[currentPassName, !=, null]
[currentPassName]
[null]
[currentPassName]
[progressRange, ==, null]
[progressRange]
[null]
[compiler, ., setProgress, (, -, 1, ,, currentPassName, )]
[compiler]
[-, 1]
[1]
[currentPassName]
[progress]
[progressStep]
[compiler, ., setProgress, (, progress, ,, currentPassName, )]
[compiler]
[progress]
[currentPassName]
[stopTracer, (, currentTracer, ,, currentPassName, )]
[currentTracer]
[currentPassName]
[currentPassName]
[null]
[currentTracer]
[null]
[maybeSanityCheck, (, externs, ,, root, )]
[externs]
[root]
[new, RuntimeException, (, "Sanity check failed for ", +, passToCheck, ,, e, )]
["Sanity check failed for ", +, passToCheck]
["Sanity check failed for "]
[passToCheck]
[e]
[sanityCheck, !=, null]
[sanityCheck]
[null]
[sanityCheck, ., create, (, compiler, ), ., process, (, externs, ,, root, )]
[sanityCheck, ., create, (, compiler, )]
[sanityCheck]
[compiler]
[externs]
[root]
[compiler, ., hasHaltingErrors, (, )]
[compiler]
[passName, +, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", )]
[passName]
[(, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", )]
[recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, ""]
[recentChange, ., hasCodeChanged, (, )]
[recentChange]
[" on recently changed AST"]
[""]
[tracker, !=, null]
[tracker]
[null]
[tracker, ., recordPassStart, (, passName, )]
[tracker]
[passName]
[new, Tracer, (, "JSCompiler", ,, comment, )]
["JSCompiler"]
[comment]
[t, ., stop, (, )]
[t]
[tracker, !=, null]
[tracker]
[null]
[tracker, ., recordPassStop, (, passName, ,, result, )]
[tracker]
[passName]
[result]
[this, ., name]
[this]
[factory, ., getName, (, )]
[factory]
[this, ., factory]
[this]
[factory]
[logger, ., fine, (, name, )]
[logger]
[name]
[startPass, (, name, )]
[name]
[factory, ., create, (, compiler, ), ., process, (, externs, ,, root, )]
[factory, ., create, (, compiler, )]
[factory]
[compiler]
[externs]
[root]
[endPass, (, externs, ,, root, )]
[externs]
[root]
[Lists, ., newArrayList, (, )]
[Lists]
[Sets, ., newHashSet, (, )]
[Sets]
[factory, ., getName, (, )]
[factory]
[Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, )]
[Preconditions]
[!, myNames, ., contains, (, name, )]
[myNames, ., contains, (, name, )]
[myNames]
[name]
["Already a pass with name '%s' in this loop"]
[name]
[myNames, ., add, (, name, )]
[myNames]
[name]
[myPasses, ., add, (, new, NamedPass, (, factory, ), )]
[myPasses]
[new, NamedPass, (, factory, )]
[factory]
[Lists, ., newArrayList, (, )]
[Lists]
[myPasses]
[order, ., add, (, pass, ., name, )]
[order]
[pass, ., name]
[pass]
[order]
[Preconditions, ., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", )]
[Preconditions]
[!, loopMutex]
[loopMutex]
["Nested loops are forbidden"]
[loopMutex]
[true]
[randomizeLoops]
[randomizePasses, (, )]
[optimizePasses, (, )]
[new, HashSet, <, NamedPass, >, (, )]
[new, HashSet, <, NamedPass, >, (, )]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[State]
[0]
[true]
[count, ++, >, MAX_LOOPS]
[count, ++]
[count]
[MAX_LOOPS]
[compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, )]
[compiler]
[OPTIMIZE_LOOP_ERROR]
[null]
[lastIterMadeChanges]
[false]
[myPasses]
[recentChange, ., reset, (, )]
[recentChange]
[(, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), )]
[(, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), )]
[s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, )]
[s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[s]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[State]
[!, runInPrevIter, ., contains, (, pass, )]
[runInPrevIter, ., contains, (, pass, )]
[runInPrevIter]
[pass]
[(, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), )]
[s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, )]
[s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER]
[s]
[State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER]
[State]
[madeChanges, ., contains, (, pass, )]
[madeChanges]
[pass]
[pass, ., process, (, externs, ,, root, )]
[pass]
[externs]
[root]
[runInPrevIter, ., add, (, pass, )]
[runInPrevIter]
[pass]
[hasHaltingErrors, (, )]
[recentChange, ., hasCodeChanged, (, )]
[recentChange]
[madeChanges, ., add, (, pass, )]
[madeChanges]
[pass]
[lastIterMadeChanges]
[true]
[madeChanges, ., remove, (, pass, )]
[madeChanges]
[pass]
[runInPrevIter, ., remove, (, pass, )]
[runInPrevIter]
[pass]
[s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[s]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[State]
[lastIterMadeChanges]
[s]
[State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER]
[State]
[!, lastIterMadeChanges]
[lastIterMadeChanges]
[s]
[State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[State]
[loopMutex]
[false]
[Collections, ., shuffle, (, myPasses, )]
[Collections]
[myPasses]
[Lists, ., newArrayList, (, )]
[Lists]
[OPTIMAL_ORDER]
[myPasses]
[pass, ., name, ., equals, (, passName, )]
[pass, ., name]
[pass]
[passName]
[optimalPasses, ., add, (, pass, )]
[optimalPasses]
[pass]
[myPasses, ., removeAll, (, optimalPasses, )]
[myPasses]
[optimalPasses]
[myPasses, ., addAll, (, optimalPasses, )]
[myPasses]
[optimalPasses]
[this, ., initialValue]
[this]
[initialValue]
[this, ., maxValue]
[this]
[maxValue]
