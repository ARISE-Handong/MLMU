[DiagnosticType, ., warning, (, "JSC_MISSING_RETURN_STATEMENT", ,, "Missing return statement. Function expected to return {0}.", )]
[DiagnosticType]
["JSC_MISSING_RETURN_STATEMENT"]
["Missing return statement. Function expected to return {0}."]
[new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply, (, Node, input, ), {, return, input, !=, null, &&, input, ., isReturn, (, ), ;, }, }]
[input, !=, null, &&, input, ., isReturn, (, )]
[input, !=, null]
[input]
[null]
[input, ., isReturn, (, )]
[input]
[new, Predicate, <, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, >, (, ), {, @, Override, public, boolean, apply, (, DiGraphEdge, <, Node, ,, ControlFlowGraph, ., Branch, >, input, ), {, Branch, branch, =, input, ., getValue, (, ), ;, if, (, branch, ==, Branch, ., ON_EX, ), {, return, false, ;, }, else, if, (, branch, ., isConditional, (, ), ), {, Node, condition, =, NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, ), ;, }, }, }, return, true, ;, }, }]
[input, ., getValue, (, )]
[input]
[branch, ==, Branch, ., ON_EX]
[branch]
[Branch, ., ON_EX]
[Branch]
[false]
[branch, ., isConditional, (, )]
[branch]
[NodeUtil, ., getConditionExpression, (, input, ., getSource, (, ), ., getValue, (, ), )]
[NodeUtil]
[input, ., getSource, (, ), ., getValue, (, )]
[input, ., getSource, (, )]
[input]
[condition, !=, null]
[condition]
[null]
[NodeUtil, ., getImpureBooleanValue, (, condition, )]
[NodeUtil]
[condition]
[val, !=, TernaryValue, ., UNKNOWN]
[val]
[TernaryValue, ., UNKNOWN]
[TernaryValue]
[val, ., toBoolean, (, true, ), ==, (, Branch, ., ON_TRUE, ==, branch, )]
[val, ., toBoolean, (, true, )]
[val]
[true]
[(, Branch, ., ON_TRUE, ==, branch, )]
[Branch, ., ON_TRUE, ==, branch]
[Branch, ., ON_TRUE]
[Branch]
[branch]
[true]
[this, ., compiler]
[this]
[compiler]
[this, ., level]
[this]
[level]
[explicitReturnExpected, (, t, ., getScopeRoot, (, ), )]
[t, ., getScopeRoot, (, )]
[t]
[returnType, ==, null]
[returnType]
[null]
[fastAllPathsReturnCheck, (, t, ., getControlFlowGraph, (, ), )]
[t, ., getControlFlowGraph, (, )]
[t]
[new, CheckPathsBetweenNodes, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ,, t, ., getControlFlowGraph, (, ), ., getEntry, (, ), ,, t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, ), ,, IS_RETURN, ,, GOES_THROUGH_TRUE_CONDITION_PREDICATE, )]
[t, ., getControlFlowGraph, (, )]
[t]
[t, ., getControlFlowGraph, (, ), ., getEntry, (, )]
[t, ., getControlFlowGraph, (, )]
[t]
[t, ., getControlFlowGraph, (, ), ., getImplicitReturn, (, )]
[t, ., getControlFlowGraph, (, )]
[t]
[IS_RETURN]
[GOES_THROUGH_TRUE_CONDITION_PREDICATE]
[!, test, ., allPathsSatisfyPredicate, (, )]
[test, ., allPathsSatisfyPredicate, (, )]
[test]
[compiler, ., report, (, t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), ), )]
[compiler]
[t, ., makeError, (, t, ., getScopeRoot, (, ), ,, level, ,, MISSING_RETURN_STATEMENT, ,, returnType, ., toString, (, ), )]
[t]
[t, ., getScopeRoot, (, )]
[t]
[level]
[MISSING_RETURN_STATEMENT]
[returnType, ., toString, (, )]
[returnType]
[cfg, ., getImplicitReturn, (, ), ., getInEdges, (, )]
[cfg, ., getImplicitReturn, (, )]
[cfg]
[!, s, ., getSource, (, ), ., getValue, (, ), ., isReturn, (, )]
[s, ., getSource, (, ), ., getValue, (, ), ., isReturn, (, )]
[s, ., getSource, (, ), ., getValue, (, )]
[s, ., getSource, (, )]
[s]
[false]
[true]
[true]
[JSType, ., toMaybeFunctionType, (, scope, ., getJSType, (, ), )]
[JSType]
[scope, ., getJSType, (, )]
[scope]
[scopeType, ==, null]
[scopeType]
[null]
[null]
[isEmptyFunction, (, scope, )]
[scope]
[null]
[scopeType, ., getReturnType, (, )]
[scopeType]
[returnType, ==, null]
[returnType]
[null]
[null]
[!, isVoidOrUnknown, (, returnType, )]
[isVoidOrUnknown, (, returnType, )]
[returnType]
[returnType]
[null]
[function, ., getChildCount, (, ), ==, 3, &&, !, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, )]
[function, ., getChildCount, (, ), ==, 3]
[function, ., getChildCount, (, )]
[function]
[3]
[!, function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, )]
[function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ., hasChildren, (, )]
[function, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, )]
[function, ., getFirstChild, (, ), ., getNext, (, )]
[function, ., getFirstChild, (, )]
[function]
[compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., VOID_TYPE, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[JSTypeNative, ., VOID_TYPE]
[JSTypeNative]
[voidType, ., isSubtype, (, returnType, )]
[voidType]
[returnType]
