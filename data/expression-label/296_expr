[!, matrix, ., isSquare, (, )]
[matrix, ., isSquare, (, )]
[matrix]
[new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), )]
[matrix, ., getRowDimension, (, )]
[matrix]
[matrix, ., getColumnDimension, (, )]
[matrix]
[matrix, ., getColumnDimension, (, )]
[matrix]
[field]
[matrix, ., getField, (, )]
[matrix]
[lu]
[matrix, ., getData, (, )]
[matrix]
[pivot]
[new, int, [, m, ]]
[m]
[cachedL]
[null]
[cachedU]
[null]
[cachedP]
[null]
[0]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[pivot, [, row, ]]
[pivot]
[row]
[row]
[even]
[true]
[singular]
[false]
[0]
[col, <, m]
[col]
[m]
[col, ++]
[col]
[field, ., getZero, (, )]
[field]
[0]
[row, <, col]
[row]
[col]
[row, ++]
[row]
[lu, [, row, ]]
[lu]
[row]
[sum]
[luRow, [, col, ]]
[luRow]
[col]
[0]
[i, <, row]
[i]
[row]
[i, ++]
[i]
[sum]
[sum, ., subtract, (, luRow, [, i, ], ., multiply, (, lu, [, i, ], [, col, ], ), )]
[sum]
[luRow, [, i, ], ., multiply, (, lu, [, i, ], [, col, ], )]
[luRow, [, i, ]]
[luRow]
[i]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[luRow, [, col, ]]
[luRow]
[col]
[sum]
[col]
[col]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[lu, [, row, ]]
[lu]
[row]
[sum]
[luRow, [, col, ]]
[luRow]
[col]
[0]
[i, <, col]
[i]
[col]
[i, ++]
[i]
[sum]
[sum, ., subtract, (, luRow, [, i, ], ., multiply, (, lu, [, i, ], [, col, ], ), )]
[sum]
[luRow, [, i, ], ., multiply, (, lu, [, i, ], [, col, ], )]
[luRow, [, i, ]]
[luRow]
[i]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[luRow, [, col, ]]
[luRow]
[col]
[sum]
[lu, [, nonZero, ], [, col, ], ., equals, (, field, ., getZero, (, ), )]
[lu, [, nonZero, ], [, col, ]]
[lu, [, nonZero, ]]
[lu]
[nonZero]
[col]
[field, ., getZero, (, )]
[field]
[++, nonZero]
[nonZero]
[nonZero, >=, m]
[nonZero]
[m]
[singular]
[true]
[nonZero, !=, col]
[nonZero]
[col]
[field, ., getZero, (, )]
[field]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[tmp]
[lu, [, nonZero, ], [, i, ]]
[lu, [, nonZero, ]]
[lu]
[nonZero]
[i]
[lu, [, nonZero, ], [, i, ]]
[lu, [, nonZero, ]]
[lu]
[nonZero]
[i]
[lu, [, col, ], [, i, ]]
[lu, [, col, ]]
[lu]
[col]
[i]
[lu, [, col, ], [, i, ]]
[lu, [, col, ]]
[lu]
[col]
[i]
[tmp]
[pivot, [, nonZero, ]]
[pivot]
[nonZero]
[pivot, [, nonZero, ]]
[pivot]
[nonZero]
[pivot, [, col, ]]
[pivot]
[col]
[pivot, [, col, ]]
[pivot]
[col]
[temp]
[even]
[!, even]
[even]
[lu, [, col, ], [, col, ]]
[lu, [, col, ]]
[lu]
[col]
[col]
[col, +, 1]
[col]
[1]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[lu, [, row, ]]
[lu]
[row]
[luRow, [, col, ]]
[luRow]
[col]
[luRow, [, col, ], ., divide, (, luDiag, )]
[luRow, [, col, ]]
[luRow]
[col]
[luDiag]
[(, cachedL, ==, null, ), &&, !, singular]
[(, cachedL, ==, null, )]
[cachedL, ==, null]
[cachedL]
[null]
[!, singular]
[singular]
[pivot, ., length]
[pivot]
[cachedL]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, m, )]
[field]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[lu, [, i, ]]
[lu]
[i]
[0]
[j, <, i]
[j]
[i]
[++, j]
[j]
[cachedL, ., setEntry, (, i, ,, j, ,, luI, [, j, ], )]
[cachedL]
[i]
[j]
[luI, [, j, ]]
[luI]
[j]
[cachedL, ., setEntry, (, i, ,, i, ,, field, ., getOne, (, ), )]
[cachedL]
[i]
[i]
[field, ., getOne, (, )]
[field]
[cachedL]
[(, cachedU, ==, null, ), &&, !, singular]
[(, cachedU, ==, null, )]
[cachedU, ==, null]
[cachedU]
[null]
[!, singular]
[singular]
[pivot, ., length]
[pivot]
[cachedU]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, m, )]
[field]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[lu, [, i, ]]
[lu]
[i]
[i]
[j, <, m]
[j]
[m]
[++, j]
[j]
[cachedU, ., setEntry, (, i, ,, j, ,, luI, [, j, ], )]
[cachedU]
[i]
[j]
[luI, [, j, ]]
[luI]
[j]
[cachedU]
[(, cachedP, ==, null, ), &&, !, singular]
[(, cachedP, ==, null, )]
[cachedP, ==, null]
[cachedP]
[null]
[!, singular]
[singular]
[pivot, ., length]
[pivot]
[cachedP]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, m, )]
[field]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[cachedP, ., setEntry, (, i, ,, pivot, [, i, ], ,, field, ., getOne, (, ), )]
[cachedP]
[i]
[pivot, [, i, ]]
[pivot]
[i]
[field, ., getOne, (, )]
[field]
[cachedP]
[pivot, ., clone, (, )]
[pivot]
[singular]
[field, ., getZero, (, )]
[field]
[pivot, ., length]
[pivot]
[even, ?, field, ., getOne, (, ), :, field, ., getZero, (, ), ., subtract, (, field, ., getOne, (, ), )]
[even]
[field, ., getOne, (, )]
[field]
[field, ., getZero, (, ), ., subtract, (, field, ., getOne, (, ), )]
[field, ., getZero, (, )]
[field]
[field, ., getOne, (, )]
[field]
[0]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[determinant]
[determinant, ., multiply, (, lu, [, i, ], [, i, ], )]
[determinant]
[lu, [, i, ], [, i, ]]
[lu, [, i, ]]
[lu]
[i]
[i]
[determinant]
[new, Solver, <, T, >, (, field, ,, lu, ,, pivot, ,, singular, )]
[field]
[lu]
[pivot]
[singular]
[this, ., field]
[this]
[field]
[this, ., lu]
[this]
[lu]
[this, ., pivot]
[this]
[pivot]
[this, ., singular]
[this]
[singular]
[!, singular]
[singular]
[solve, (, (, ArrayFieldVector, <, T, >, ), b, )]
[(, ArrayFieldVector, <, T, >, ), b]
[b]
[pivot, ., length]
[pivot]
[b, ., getDimension, (, ), !=, m]
[b, ., getDimension, (, )]
[b]
[m]
[new, DimensionMismatchException, (, b, ., getDimension, (, ), ,, m, )]
[b, ., getDimension, (, )]
[b]
[m]
[singular]
[new, SingularMatrixException, (, )]
[MathArrays, ., buildArray, (, field, ,, m, )]
[MathArrays]
[field]
[m]
[0]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[bp, [, row, ]]
[bp]
[row]
[b, ., getEntry, (, pivot, [, row, ], )]
[b]
[pivot, [, row, ]]
[pivot]
[row]
[0]
[col, <, m]
[col]
[m]
[col, ++]
[col]
[bp, [, col, ]]
[bp]
[col]
[col, +, 1]
[col]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[bp, [, i, ], ., subtract, (, bpCol, ., multiply, (, lu, [, i, ], [, col, ], ), )]
[bp, [, i, ]]
[bp]
[i]
[bpCol, ., multiply, (, lu, [, i, ], [, col, ], )]
[bpCol]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[m, -, 1]
[m]
[1]
[col, >=, 0]
[col]
[0]
[col, --]
[col]
[bp, [, col, ]]
[bp]
[col]
[bp, [, col, ], ., divide, (, lu, [, col, ], [, col, ], )]
[bp, [, col, ]]
[bp]
[col]
[lu, [, col, ], [, col, ]]
[lu, [, col, ]]
[lu]
[col]
[col]
[bp, [, col, ]]
[bp]
[col]
[0]
[i, <, col]
[i]
[col]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[bp, [, i, ], ., subtract, (, bpCol, ., multiply, (, lu, [, i, ], [, col, ], ), )]
[bp, [, i, ]]
[bp]
[i]
[bpCol, ., multiply, (, lu, [, i, ], [, col, ], )]
[bpCol]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[new, ArrayFieldVector, <, T, >, (, field, ,, bp, ,, false, )]
[field]
[bp]
[false]
[pivot, ., length]
[pivot]
[b, ., getDimension, (, )]
[b]
[length, !=, m]
[length]
[m]
[new, DimensionMismatchException, (, length, ,, m, )]
[length]
[m]
[singular]
[new, SingularMatrixException, (, )]
[MathArrays, ., buildArray, (, field, ,, m, )]
[MathArrays]
[field]
[m]
[0]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[bp, [, row, ]]
[bp]
[row]
[b, ., getEntry, (, pivot, [, row, ], )]
[b]
[pivot, [, row, ]]
[pivot]
[row]
[0]
[col, <, m]
[col]
[m]
[col, ++]
[col]
[bp, [, col, ]]
[bp]
[col]
[col, +, 1]
[col]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[bp, [, i, ], ., subtract, (, bpCol, ., multiply, (, lu, [, i, ], [, col, ], ), )]
[bp, [, i, ]]
[bp]
[i]
[bpCol, ., multiply, (, lu, [, i, ], [, col, ], )]
[bpCol]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[m, -, 1]
[m]
[1]
[col, >=, 0]
[col]
[0]
[col, --]
[col]
[bp, [, col, ]]
[bp]
[col]
[bp, [, col, ], ., divide, (, lu, [, col, ], [, col, ], )]
[bp, [, col, ]]
[bp]
[col]
[lu, [, col, ], [, col, ]]
[lu, [, col, ]]
[lu]
[col]
[col]
[bp, [, col, ]]
[bp]
[col]
[0]
[i, <, col]
[i]
[col]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[bp, [, i, ], ., subtract, (, bpCol, ., multiply, (, lu, [, i, ], [, col, ], ), )]
[bp, [, i, ]]
[bp]
[i]
[bpCol, ., multiply, (, lu, [, i, ], [, col, ], )]
[bpCol]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[new, ArrayFieldVector, <, T, >, (, bp, ,, false, )]
[bp]
[false]
[pivot, ., length]
[pivot]
[b, ., getRowDimension, (, ), !=, m]
[b, ., getRowDimension, (, )]
[b]
[m]
[new, DimensionMismatchException, (, b, ., getRowDimension, (, ), ,, m, )]
[b, ., getRowDimension, (, )]
[b]
[m]
[singular]
[new, SingularMatrixException, (, )]
[b, ., getColumnDimension, (, )]
[b]
[MathArrays, ., buildArray, (, field, ,, m, ,, nColB, )]
[MathArrays]
[field]
[m]
[nColB]
[0]
[row, <, m]
[row]
[m]
[row, ++]
[row]
[bp, [, row, ]]
[bp]
[row]
[pivot, [, row, ]]
[pivot]
[row]
[0]
[col, <, nColB]
[col]
[nColB]
[col, ++]
[col]
[bpRow, [, col, ]]
[bpRow]
[col]
[b, ., getEntry, (, pRow, ,, col, )]
[b]
[pRow]
[col]
[0]
[col, <, m]
[col]
[m]
[col, ++]
[col]
[bp, [, col, ]]
[bp]
[col]
[col, +, 1]
[col]
[1]
[i, <, m]
[i]
[m]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[0]
[j, <, nColB]
[j]
[nColB]
[j, ++]
[j]
[bpI, [, j, ]]
[bpI]
[j]
[bpI, [, j, ], ., subtract, (, bpCol, [, j, ], ., multiply, (, luICol, ), )]
[bpI, [, j, ]]
[bpI]
[j]
[bpCol, [, j, ], ., multiply, (, luICol, )]
[bpCol, [, j, ]]
[bpCol]
[j]
[luICol]
[m, -, 1]
[m]
[1]
[col, >=, 0]
[col]
[0]
[col, --]
[col]
[bp, [, col, ]]
[bp]
[col]
[lu, [, col, ], [, col, ]]
[lu, [, col, ]]
[lu]
[col]
[col]
[0]
[j, <, nColB]
[j]
[nColB]
[j, ++]
[j]
[bpCol, [, j, ]]
[bpCol]
[j]
[bpCol, [, j, ], ., divide, (, luDiag, )]
[bpCol, [, j, ]]
[bpCol]
[j]
[luDiag]
[0]
[i, <, col]
[i]
[col]
[i, ++]
[i]
[bp, [, i, ]]
[bp]
[i]
[lu, [, i, ], [, col, ]]
[lu, [, i, ]]
[lu]
[i]
[col]
[0]
[j, <, nColB]
[j]
[nColB]
[j, ++]
[j]
[bpI, [, j, ]]
[bpI]
[j]
[bpI, [, j, ], ., subtract, (, bpCol, [, j, ], ., multiply, (, luICol, ), )]
[bpI, [, j, ]]
[bpI]
[j]
[bpCol, [, j, ], ., multiply, (, luICol, )]
[bpCol, [, j, ]]
[bpCol]
[j]
[luICol]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, bp, ,, false, )]
[field]
[bp]
[false]
[pivot, ., length]
[pivot]
[field, ., getOne, (, )]
[field]
[new, Array2DRowFieldMatrix, <, T, >, (, field, ,, m, ,, m, )]
[field]
[m]
[m]
[0]
[i, <, m]
[i]
[m]
[++, i]
[i]
[identity, ., setEntry, (, i, ,, i, ,, one, )]
[identity]
[i]
[i]
[one]
[solve, (, identity, )]
[identity]
