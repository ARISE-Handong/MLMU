[new, ArrayList, <, String, >, (, )]
[in, ., readLine, (, )]
[in]
[line, !=, null]
[line]
[null]
[line]
[in, ., readLine, (, )]
[in]
[lines, ., add, (, line, )]
[lines]
[line]
[findLineNumbers, (, "Data", ,, lines, )]
["Data"]
[lines]
[index, ==, null]
[index]
[null]
[new, AssertionError, (, "could not find line indices for data", )]
["could not find line indices for data"]
[this, ., numObservations]
[this]
[index, [, 1, ], -, index, [, 0, ], +, 1]
[index, [, 1, ], -, index, [, 0, ]]
[index, [, 1, ]]
[index]
[1]
[index, [, 0, ]]
[index]
[0]
[1]
[this, ., x]
[this]
[new, double, [, this, ., numObservations, ]]
[this, ., numObservations]
[this]
[this, ., y]
[this]
[new, double, [, this, ., numObservations, ]]
[this, ., numObservations]
[this]
[0]
[i, <, this, ., numObservations]
[i]
[this, ., numObservations]
[this]
[i, ++]
[i]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, )]
[lines]
[index, [, 0, ], +, i, -, 1]
[index, [, 0, ], +, i]
[index, [, 0, ]]
[index]
[0]
[i]
[1]
[line, ., trim, (, ), ., split, (, " ++", )]
[line, ., trim, (, )]
[line]
[" ++"]
[this, ., y, [, i, ]]
[this, ., y]
[this]
[i]
[Double, ., parseDouble, (, tokens, [, 0, ], )]
[Double]
[tokens, [, 0, ]]
[tokens]
[0]
[this, ., x, [, i, ]]
[this, ., x]
[this]
[i]
[Double, ., parseDouble, (, tokens, [, 1, ], )]
[Double]
[tokens, [, 1, ]]
[tokens]
[1]
[index]
[findLineNumbers, (, "Starting Values", ,, lines, )]
["Starting Values"]
[lines]
[index, ==, null]
[index]
[null]
[new, AssertionError, (, "could not find line indices for starting values", )]
["could not find line indices for starting values"]
[this, ., numParameters]
[this]
[index, [, 1, ], -, index, [, 0, ], +, 1]
[index, [, 1, ], -, index, [, 0, ]]
[index, [, 1, ]]
[index]
[1]
[index, [, 0, ]]
[index]
[0]
[1]
[null]
[this, ., a]
[this]
[new, double, [, numParameters, ]]
[numParameters]
[this, ., sigA]
[this]
[new, double, [, numParameters, ]]
[numParameters]
[0]
[i, <, numParameters]
[i]
[numParameters]
[i, ++]
[i]
[lines, ., get, (, index, [, 0, ], +, i, -, 1, )]
[lines]
[index, [, 0, ], +, i, -, 1]
[index, [, 0, ], +, i]
[index, [, 0, ]]
[index]
[0]
[i]
[1]
[line, ., trim, (, ), ., split, (, " ++", )]
[line, ., trim, (, )]
[line]
[" ++"]
[start, ==, null]
[start]
[null]
[start]
[new, double, [, tokens, ., length, -, 4, ], [, numParameters, ]]
[tokens, ., length, -, 4]
[tokens, ., length]
[tokens]
[4]
[numParameters]
[2]
[j, <, tokens, ., length, -, 2]
[j]
[tokens, ., length, -, 2]
[tokens, ., length]
[tokens]
[2]
[j, ++]
[j]
[start, [, j, -, 2, ], [, i, ]]
[start, [, j, -, 2, ]]
[start]
[j, -, 2]
[j]
[2]
[i]
[Double, ., parseDouble, (, tokens, [, j, ], )]
[Double]
[tokens, [, j, ]]
[tokens]
[j]
[this, ., a, [, i, ]]
[this, ., a]
[this]
[i]
[Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], )]
[Double]
[tokens, [, tokens, ., length, -, 2, ]]
[tokens]
[tokens, ., length, -, 2]
[tokens, ., length]
[tokens]
[2]
[this, ., sigA, [, i, ]]
[this, ., sigA]
[this]
[i]
[Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], )]
[Double]
[tokens, [, tokens, ., length, -, 1, ]]
[tokens]
[tokens, ., length, -, 1]
[tokens, ., length]
[tokens]
[1]
[start, ==, null]
[start]
[null]
[new, IOException, (, "could not find starting values", )]
["could not find starting values"]
[this, ., numStartingPoints]
[this]
[start, ., length]
[start]
[this, ., startingValues]
[this]
[start]
[Double, ., NaN]
[Double]
[null]
[lines]
[line, ., contains, (, "Dataset Name:", )]
[line]
["Dataset Name:"]
[dummyString]
[line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, )]
[line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), )]
[line]
[line, ., indexOf, (, "Dataset Name:", ), +, 13]
[line, ., indexOf, (, "Dataset Name:", )]
[line]
["Dataset Name:"]
[13]
[line, ., indexOf, (, "(", )]
[line]
["("]
[line, ., contains, (, "Residual Sum of Squares", )]
[line]
["Residual Sum of Squares"]
[line, ., split, (, " ++", )]
[line]
[" ++"]
[dummyDouble]
[Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), )]
[Double]
[tokens, [, 4, ], ., trim, (, )]
[tokens, [, 4, ]]
[tokens]
[4]
[Double, ., isNaN, (, dummyDouble, )]
[Double]
[dummyDouble]
[new, IOException, (, "could not find certified value of residual sum of squares", )]
["could not find certified value of residual sum of squares"]
[this, ., residualSumOfSquares]
[this]
[dummyDouble]
[dummyString, ==, null]
[dummyString]
[null]
[new, IOException, (, "could not find dataset name", )]
["could not find dataset name"]
[this, ., name]
[this]
[dummyString]
[this, ., problem]
[this]
[new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], a, ), {, DerivativeStructure, [, ], dsA, =, new, DerivativeStructure, [, a, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, ), ;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], a, ), {, final, int, n, =, getNumObservations, (, ), ;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return, yhat, ;, }, }]
[new, DerivativeStructure, [, a, ., length, ]]
[a, ., length]
[a]
[0]
[i, <, a, ., length]
[i]
[a, ., length]
[a]
[++, i]
[i]
[dsA, [, i, ]]
[dsA]
[i]
[new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], )]
[a, ., length]
[a]
[0]
[a, [, i, ]]
[a]
[i]
[getNumObservations, (, )]
[new, double, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[yhat, [, i, ]]
[yhat]
[i]
[getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, )]
[getModelValue, (, getX, (, i, ), ,, dsA, )]
[getX, (, i, )]
[i]
[dsA]
[yhat]
[getNumObservations, (, )]
[new, DerivativeStructure, [, n, ]]
[n]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[yhat, [, i, ]]
[yhat]
[i]
[getModelValue, (, getX, (, i, ), ,, a, )]
[getX, (, i, )]
[i]
[a]
[yhat]
[name]
[numObservations]
[new, double, [, ], [, ], {, MathArrays, ., copyOf, (, x, ), ,, MathArrays, ., copyOf, (, y, ), }]
[{, MathArrays, ., copyOf, (, x, ), ,, MathArrays, ., copyOf, (, y, ), }]
[MathArrays, ., copyOf, (, x, )]
[MathArrays]
[x]
[MathArrays, ., copyOf, (, y, )]
[MathArrays]
[y]
[x, [, i, ]]
[x]
[i]
[y, [, i, ]]
[y]
[i]
[numParameters]
[MathArrays, ., copyOf, (, a, )]
[MathArrays]
[a]
[a, [, i, ]]
[a]
[i]
[MathArrays, ., copyOf, (, sigA, )]
[MathArrays]
[sigA]
[sigA, [, i, ]]
[sigA]
[i]
[residualSumOfSquares]
[numStartingPoints]
[MathArrays, ., copyOf, (, startingValues, [, i, ], )]
[MathArrays]
[startingValues, [, i, ]]
[startingValues]
[i]
[problem]
[lines]
[text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", )]
[text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", )]
[text, ., contains, (, key, ), &&, text, ., contains, (, "lines", )]
[text, ., contains, (, key, )]
[text]
[key]
[text, ., contains, (, "lines", )]
[text]
["lines"]
[text, ., contains, (, "to", )]
[text]
["to"]
[text, ., contains, (, ")", )]
[text]
[")"]
[flag]
[new, int, [, 2, ]]
[2]
[text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), )]
[text]
[text, ., indexOf, (, "lines", ), +, 5]
[text, ., indexOf, (, "lines", )]
[text]
["lines"]
[5]
[text, ., indexOf, (, "to", )]
[text]
["to"]
[numbers, [, 0, ]]
[numbers]
[0]
[Integer, ., parseInt, (, from, ., trim, (, ), )]
[Integer]
[from, ., trim, (, )]
[from]
[text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), )]
[text]
[text, ., indexOf, (, "to", ), +, 2]
[text, ., indexOf, (, "to", )]
[text]
["to"]
[2]
[text, ., indexOf, (, ")", )]
[text]
[")"]
[numbers, [, 1, ]]
[numbers]
[1]
[Integer, ., parseInt, (, to, ., trim, (, ), )]
[Integer]
[to, ., trim, (, )]
[to]
[numbers]
[null]
