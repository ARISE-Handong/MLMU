["goog.getMsg"]
["goog.getMsgWithFallback"]
[DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", )]
[DiagnosticType]
["JSC_MSG_HAS_NO_DESCRIPTION"]
["Message {0} has no description. Add @desc JsDoc tag."]
[DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", )]
[DiagnosticType]
["JSC_MSG_HAS_NO_TEXT"]
["Message value of {0} is just an empty string. ", +, "Empty messages are forbidden."]
["Message value of {0} is just an empty string. "]
["Empty messages are forbidden."]
[DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", )]
[DiagnosticType]
["JSC_MSG_TREE_MALFORMED"]
["Message parse tree malformed. {0}"]
[DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", )]
[DiagnosticType]
["JSC_MSG_HAS_NO_VALUE"]
["message node {0} has no value"]
[DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", )]
[DiagnosticType]
["JSC_MSG_KEY_DUPLICATED"]
["duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}"]
["duplicate message variable name found for {0}, "]
["initial definition {1}:{2}"]
[DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", )]
[DiagnosticType]
["JSC_MSG_ORPHANED_NODE"]
[MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable"]
[MSG_FUNCTION_NAME]
["() function could be used only with MSG_* property or variable"]
[DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, )]
[DiagnosticType]
["JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX"]
["message not initialized using ", +, MSG_FUNCTION_NAME]
["message not initialized using "]
[MSG_FUNCTION_NAME]
[DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), )]
[DiagnosticType]
["JSC_MSG_BAD_FALLBACK_SYNTAX"]
[String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, )]
[String]
["Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)"]
["Bad syntax. "]
["Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)"]
[MSG_FALLBACK_FUNCTION_NAME]
[DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", )]
[DiagnosticType]
["JSC_MSG_FALLBACK_ARG_ERROR"]
["Could not find message entry for fallback argument {0}"]
["{$"]
["}"]
["MSG_"]
[Pattern, ., compile, (, "MSG_UNNAMED_\\d+", )]
[Pattern]
["MSG_UNNAMED_\\d+"]
[Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", )]
[Pattern]
["[a-z][a-zA-Z\\d]*[_\\d]*"]
["@hidden"]
["_HELP"]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[Maps, ., newHashMap, (, )]
[Maps]
[this, ., compiler]
[this]
[compiler]
[this, ., needToCheckDuplications]
[this]
[needToCheckDuplications]
[this, ., style]
[this]
[style]
[this, ., idGenerator]
[this]
[idGenerator]
[checkLevel]
[(, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING]
[(, style, ==, JsMessage, ., Style, ., CLOSURE, )]
[style, ==, JsMessage, ., Style, ., CLOSURE]
[style]
[JsMessage, ., Style, ., CLOSURE]
[JsMessage, ., Style]
[JsMessage]
[CheckLevel, ., ERROR]
[CheckLevel]
[CheckLevel, ., WARNING]
[CheckLevel]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[NodeTraversal]
[compiler]
[root]
[this]
[googMsgNodes, ., entrySet, (, )]
[googMsgNodes]
[compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), )]
[compiler]
[JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, )]
[JSError]
[msgNode, ., getValue, (, )]
[msgNode]
[msgNode, ., getKey, (, )]
[msgNode]
[checkLevel]
[MESSAGE_NODE_IS_ORPHANED]
[node, ., getType, (, )]
[node]
[Token, ., NAME]
[Token]
[(, parent, !=, null, ), &&, (, parent, ., isVar, (, ), )]
[(, parent, !=, null, )]
[parent, !=, null]
[parent]
[null]
[(, parent, ., isVar, (, ), )]
[parent, ., isVar, (, )]
[parent]
[messageKey]
[node, ., getString, (, )]
[node]
[isVar]
[true]
[msgNode]
[node, ., getFirstChild, (, )]
[node]
[msgNodeParent]
[node]
[Token, ., ASSIGN]
[Token]
[isVar]
[false]
[node, ., getFirstChild, (, )]
[node]
[!, getProp, ., isGetProp, (, )]
[getProp, ., isGetProp, (, )]
[getProp]
[getProp, ., getLastChild, (, )]
[getProp]
[messageKey]
[propNode, ., getString, (, )]
[propNode]
[msgNode]
[node, ., getLastChild, (, )]
[node]
[msgNodeParent]
[node]
[Token, ., CALL]
[Token]
[node, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[node, ., getFirstChild, (, )]
[node]
[MSG_FUNCTION_NAME, ., equals, (, fnName, )]
[MSG_FUNCTION_NAME]
[fnName]
[googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), )]
[googMsgNodes]
[node]
[traversal, ., getSourceName, (, )]
[traversal]
[MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, )]
[MSG_FALLBACK_FUNCTION_NAME]
[fnName]
[visitFallbackFunctionCall, (, traversal, ,, node, )]
[traversal]
[node]
[msgNode, !=, null, &&, msgNode, ., isCall, (, )]
[msgNode, !=, null]
[msgNode]
[null]
[msgNode, ., isCall, (, )]
[msgNode]
[!, isMessageName, (, messageKey, ,, isNewStyleMessage, )]
[isMessageName, (, messageKey, ,, isNewStyleMessage, )]
[messageKey]
[isNewStyleMessage]
[msgNode, ==, null]
[msgNode]
[null]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), )]
[compiler]
[traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, )]
[traversal]
[node]
[MESSAGE_HAS_NO_VALUE]
[messageKey]
[isNewStyleMessage]
[googMsgNodes, ., remove, (, msgNode, )]
[googMsgNodes]
[msgNode]
[style, !=, JsMessage, ., Style, ., LEGACY]
[style]
[JsMessage, ., Style, ., LEGACY]
[JsMessage, ., Style]
[JsMessage]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), )]
[compiler]
[traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, )]
[traversal]
[node]
[checkLevel]
[MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX]
[isUnnamedMessageName, (, messageKey, )]
[messageKey]
[new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, )]
[isUnnamedMsg, ?, null, :, messageKey]
[isUnnamedMsg]
[null]
[messageKey]
[builder, ., setSourceName, (, traversal, ., getSourceName, (, ), )]
[builder]
[traversal, ., getSourceName, (, )]
[traversal]
[isVar]
[extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), )]
[builder]
[node]
[parent]
[parent, ., getParent, (, )]
[parent]
[extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, ), ,, node, )]
[builder]
[node, ., getFirstChild, (, )]
[node]
[node]
[compiler, ., report, (, traversal, ., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), )]
[compiler]
[traversal, ., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), )]
[traversal]
[ex, ., getNode, (, )]
[ex]
[MESSAGE_TREE_MALFORMED]
[ex, ., getMessage, (, )]
[ex]
[builder, ., build, (, idGenerator, )]
[builder]
[idGenerator]
[needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, )]
[needToCheckDuplications, &&, !, isUnnamedMsg]
[needToCheckDuplications]
[!, isUnnamedMsg]
[isUnnamedMsg]
[!, extractedMessage, ., isExternal, (, )]
[extractedMessage, ., isExternal, (, )]
[extractedMessage]
[checkIfMessageDuplicated, (, messageKey, ,, msgNode, )]
[messageKey]
[msgNode]
[trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, )]
[traversal]
[extractedMessage]
[messageKey]
[msgNode]
[isUnnamedMsg]
[extractedMessage, ., isEmpty, (, )]
[extractedMessage]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), )]
[compiler]
[traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, )]
[traversal]
[node]
[MESSAGE_HAS_NO_TEXT]
[messageKey]
[extractedMessage, ., getDesc, (, )]
[extractedMessage]
[isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, )]
[isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), )]
[isNewStyleMessage]
[(, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), )]
[desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, )]
[desc, ==, null]
[desc]
[null]
[desc, ., trim, (, ), ., isEmpty, (, )]
[desc, ., trim, (, )]
[desc]
[!, extractedMessage, ., isExternal, (, )]
[extractedMessage, ., isExternal, (, )]
[extractedMessage]
[compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), )]
[compiler]
[traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, )]
[traversal]
[node]
[MESSAGE_HAS_NO_DESCRIPTION]
[messageKey]
[new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, )]
[node]
[msgNode]
[msgNodeParent]
[processJsMessage, (, extractedMessage, ,, msgDefinition, )]
[extractedMessage]
[msgDefinition]
[!, isUnnamedMessage]
[isUnnamedMessage]
[new, MessageLocation, (, message, ,, msgNode, )]
[message]
[msgNode]
[messageNames, ., put, (, msgName, ,, location, )]
[messageNames]
[msgName]
[location]
[msgNode, ., isName, (, )]
[msgNode]
[t, ., getScope, (, ), ., getVar, (, msgName, )]
[t, ., getScope, (, )]
[t]
[msgName]
[var, !=, null]
[var]
[null]
[unnamedMessages, ., put, (, var, ,, message, )]
[unnamedMessages]
[var]
[message]
[isUnnamedMessageName, (, msgName, )]
[msgName]
[!, isUnnamedMessage]
[isUnnamedMessage]
[messageNames, ., get, (, msgName, )]
[messageNames]
[msgName]
[location, ==, null, ?, null, :, location, ., message]
[location, ==, null]
[location]
[null]
[null]
[location, ., message]
[location]
[t, ., getScope, (, ), ., getVar, (, msgName, )]
[t, ., getScope, (, )]
[t]
[msgName]
[var, !=, null]
[var]
[null]
[unnamedMessages, ., get, (, var, )]
[unnamedMessages]
[var]
[null]
[messageNames, ., containsKey, (, msgName, )]
[messageNames]
[msgName]
[messageNames, ., get, (, msgName, )]
[messageNames]
[msgName]
[compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), ), ), )]
[compiler]
[JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), ), )]
[JSError]
[msgNode]
[MESSAGE_DUPLICATE_KEY]
[msgName]
[location, ., messageNode, ., getSourceFileName, (, )]
[location, ., messageNode]
[location]
[Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), )]
[Integer]
[location, ., messageNode, ., getLineno, (, )]
[location, ., messageNode]
[location]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[valueNode, ., getType, (, )]
[valueNode]
[Token, ., STRING]
[Token]
[Token, ., ADD]
[Token]
[maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, )]
[builder]
[parentNode]
[grandParentNode]
[builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), )]
[builder]
[extractStringFromStringExprNode, (, valueNode, )]
[valueNode]
[Token, ., FUNCTION]
[Token]
[maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, )]
[builder]
[parentNode]
[grandParentNode]
[extractFromFunctionNode, (, builder, ,, valueNode, )]
[builder]
[valueNode]
[Token, ., CALL]
[Token]
[maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, )]
[builder]
[parentNode]
[extractFromCallNode, (, builder, ,, valueNode, )]
[builder]
[valueNode]
[new, MalformedException, (, "Cannot parse value of message ", +, builder, ., getKey, (, ), ,, valueNode, )]
["Cannot parse value of message ", +, builder, ., getKey, (, )]
["Cannot parse value of message "]
[builder, ., getKey, (, )]
[builder]
[valueNode]
[getPropNode, ., getNext, (, )]
[getPropNode]
[maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, )]
[builder]
[assignNode]
[extractFromCallNode, (, builder, ,, callNode, )]
[builder]
[callNode]
[maybeInitMetaDataFromJsDoc, (, builder, ,, varNode, )]
[builder]
[varNode]
[(, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), )]
[(, parentOfVarNode, !=, null, )]
[parentOfVarNode, !=, null]
[parentOfVarNode]
[null]
[maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), )]
[builder]
[parentOfVarNode, ., getChildBefore, (, varNode, )]
[parentOfVarNode]
[varNode]
[maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, ), )]
[builder]
[varNode, ., getNext, (, )]
[varNode]
[(, sibling, !=, null, ), &&, (, sibling, ., isVar, (, ), )]
[(, sibling, !=, null, )]
[sibling, !=, null]
[sibling]
[null]
[(, sibling, ., isVar, (, ), )]
[sibling, ., isVar, (, )]
[sibling]
[sibling, ., getFirstChild, (, )]
[sibling]
[nameNode, ., getString, (, )]
[nameNode]
[name, ., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, )]
[name]
[builder, ., getKey, (, ), +, DESC_SUFFIX]
[builder, ., getKey, (, )]
[builder]
[DESC_SUFFIX]
[nameNode, ., getFirstChild, (, )]
[nameNode]
[extractStringFromStringExprNode, (, valueNode, )]
[valueNode]
[desc, ., startsWith, (, HIDDEN_DESC_PREFIX, )]
[desc]
[HIDDEN_DESC_PREFIX]
[builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), )]
[builder]
[desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, )]
[desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), )]
[desc]
[HIDDEN_DESC_PREFIX, ., length, (, )]
[HIDDEN_DESC_PREFIX]
[builder, ., setIsHidden, (, true, )]
[builder]
[true]
[builder, ., setDesc, (, desc, )]
[builder]
[desc]
[true]
[false]
[false]
[node, ., getJSDocInfo, (, )]
[node]
[info, !=, null]
[info]
[null]
[info, ., getDescription, (, )]
[info]
[desc, !=, null]
[desc]
[null]
[builder, ., setDesc, (, desc, )]
[builder]
[desc]
[messageHasDesc]
[true]
[info, ., isHidden, (, )]
[info]
[builder, ., setIsHidden, (, true, )]
[builder]
[true]
[info, ., getMeaning, (, ), !=, null]
[info, ., getMeaning, (, )]
[info]
[null]
[builder, ., setMeaning, (, info, ., getMeaning, (, ), )]
[builder]
[info, ., getMeaning, (, )]
[info]
[messageHasDesc]
[node, ., getType, (, )]
[node]
[Token, ., STRING]
[Token]
[node, ., getString, (, )]
[node]
[Token, ., ADD]
[Token]
[new, StringBuilder, (, )]
[node, ., children, (, )]
[node]
[sb, ., append, (, extractStringFromStringExprNode, (, child, ), )]
[sb]
[extractStringFromStringExprNode, (, child, )]
[child]
[sb, ., toString, (, )]
[sb]
[new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, )]
["STRING or ADD node expected; found: ", +, getReadableTokenName, (, node, )]
["STRING or ADD node expected; found: "]
[getReadableTokenName, (, node, )]
[node]
[node]
[Sets, ., newHashSet, (, )]
[Sets]
[node, ., children, (, )]
[node]
[fnChild, ., getType, (, )]
[fnChild]
[Token, ., NAME]
[Token]
[Token, ., PARAM_LIST]
[Token]
[fnChild, ., children, (, )]
[fnChild]
[argumentNode, ., isName, (, )]
[argumentNode]
[argumentNode, ., getString, (, )]
[argumentNode]
[phNames, ., contains, (, phName, )]
[phNames]
[phName]
[new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, )]
["Duplicate placeholder name: ", +, phName]
["Duplicate placeholder name: "]
[phName]
[argumentNode]
[phNames, ., add, (, phName, )]
[phNames]
[phName]
[Token, ., BLOCK]
[Token]
[fnChild, ., getFirstChild, (, )]
[fnChild]
[!, returnNode, ., isReturn, (, )]
[returnNode, ., isReturn, (, )]
[returnNode]
[new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, )]
["RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, )]
["RETURN node expected; found: "]
[getReadableTokenName, (, returnNode, )]
[returnNode]
[returnNode]
[returnNode, ., children, (, )]
[returnNode]
[extractFromReturnDescendant, (, builder, ,, child, )]
[builder]
[child]
[builder, ., getPlaceholders, (, )]
[builder]
[!, phNames, ., contains, (, phName, )]
[phNames, ., contains, (, phName, )]
[phNames]
[phName]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, )]
["Unrecognized message placeholder referenced: ", +, phName]
["Unrecognized message placeholder referenced: "]
[phName]
[returnNode]
[new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, ), ,, fnChild, )]
["NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, )]
["NAME, LP, or BLOCK node expected; found: "]
[getReadableTokenName, (, node, )]
[node]
[fnChild]
[node, ., getType, (, )]
[node]
[Token, ., STRING]
[Token]
[builder, ., appendStringPart, (, node, ., getString, (, ), )]
[builder]
[node, ., getString, (, )]
[node]
[Token, ., NAME]
[Token]
[builder, ., appendPlaceholderReference, (, node, ., getString, (, ), )]
[builder]
[node, ., getString, (, )]
[node]
[Token, ., ADD]
[Token]
[node, ., children, (, )]
[node]
[extractFromReturnDescendant, (, builder, ,, child, )]
[builder]
[child]
[new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, )]
["STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, )]
["STRING, NAME, or ADD node expected; found: "]
[getReadableTokenName, (, node, )]
[node]
[node]
[!, node, ., isCall, (, )]
[node, ., isCall, (, )]
[node]
[new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, )]
["Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function."]
["Message must be initialized using ", +, MSG_FUNCTION_NAME]
["Message must be initialized using "]
[MSG_FUNCTION_NAME]
[" function."]
[node]
[node, ., getFirstChild, (, )]
[node]
[!, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), )]
[MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), )]
[MSG_FUNCTION_NAME]
[fnNameNode, ., getQualifiedName, (, )]
[fnNameNode]
[new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, )]
["Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead."]
["Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME]
["Message initialized using unrecognized function. ", +, "Please use "]
["Message initialized using unrecognized function. "]
["Please use "]
[MSG_FUNCTION_NAME]
["() instead."]
[fnNameNode]
[fnNameNode, ., getNext, (, )]
[fnNameNode]
[stringLiteralNode, ==, null]
[stringLiteralNode]
[null]
[new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, )]
["Message string literal expected"]
[stringLiteralNode]
[parseMessageTextNode, (, builder, ,, stringLiteralNode, )]
[builder]
[stringLiteralNode]
[stringLiteralNode, ., getNext, (, )]
[stringLiteralNode]
[Sets, ., newHashSet, (, )]
[Sets]
[objLitNode, !=, null]
[objLitNode]
[null]
[!, objLitNode, ., isObjectLit, (, )]
[objLitNode, ., isObjectLit, (, )]
[objLitNode]
[new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, )]
["OBJLIT node expected"]
[objLitNode]
[objLitNode, ., getFirstChild, (, )]
[objLitNode]
[aNode, !=, null]
[aNode]
[null]
[aNode]
[aNode, ., getNext, (, )]
[aNode]
[!, aNode, ., isStringKey, (, )]
[aNode, ., isStringKey, (, )]
[aNode]
[new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, )]
["STRING_KEY node expected as OBJLIT key"]
[aNode]
[aNode, ., getString, (, )]
[aNode]
[!, isLowerCamelCaseWithNumericSuffixes, (, phName, )]
[isLowerCamelCaseWithNumericSuffixes, (, phName, )]
[phName]
[new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, )]
["Placeholder name not in lowerCamelCase: ", +, phName]
["Placeholder name not in lowerCamelCase: "]
[phName]
[aNode]
[phNames, ., contains, (, phName, )]
[phNames]
[phName]
[new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, )]
["Duplicate placeholder name: ", +, phName]
["Duplicate placeholder name: "]
[phName]
[aNode]
[phNames, ., add, (, phName, )]
[phNames]
[phName]
[builder, ., getPlaceholders, (, )]
[builder]
[usedPlaceholders]
[!, phNames, ., contains, (, phName, )]
[phNames, ., contains, (, phName, )]
[phNames]
[phName]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, )]
["Unrecognized message placeholder referenced: ", +, phName]
["Unrecognized message placeholder referenced: "]
[phName]
[objLitNode]
[phNames]
[!, usedPlaceholders, ., contains, (, phName, )]
[usedPlaceholders, ., contains, (, phName, )]
[usedPlaceholders]
[phName]
[new, MalformedException, (, "Unused message placeholder: ", +, phName, ,, objLitNode, )]
["Unused message placeholder: ", +, phName]
["Unused message placeholder: "]
[phName]
[objLitNode]
[extractStringFromStringExprNode, (, node, )]
[node]
[true]
[value, ., indexOf, (, PH_JS_PREFIX, )]
[value]
[PH_JS_PREFIX]
[phBegin, <, 0]
[phBegin]
[0]
[builder, ., appendStringPart, (, value, )]
[builder]
[value]
[phBegin, >, 0]
[phBegin]
[0]
[builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), )]
[builder]
[value, ., substring, (, 0, ,, phBegin, )]
[value]
[0]
[phBegin]
[value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, )]
[value]
[PH_JS_SUFFIX]
[phBegin]
[phEnd, <, 0]
[phEnd]
[0]
[new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, )]
["Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, )]
["Placeholder incorrectly formatted in: "]
[builder, ., getKey, (, )]
[builder]
[node]
[value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, )]
[value]
[phBegin, +, PH_JS_PREFIX, ., length, (, )]
[phBegin]
[PH_JS_PREFIX, ., length, (, )]
[PH_JS_PREFIX]
[phEnd]
[builder, ., appendPlaceholderReference, (, phName, )]
[builder]
[phName]
[phEnd, +, PH_JS_SUFFIX, ., length, (, )]
[phEnd]
[PH_JS_SUFFIX, ., length, (, )]
[PH_JS_SUFFIX]
[nextPos, <, value, ., length, (, )]
[nextPos]
[value, ., length, (, )]
[value]
[value]
[value, ., substring, (, nextPos, )]
[value]
[nextPos]
[call, ., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, )]
[call, ., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, )]
[call, ., getChildCount, (, ), !=, 3]
[call, ., getChildCount, (, )]
[call]
[3]
[!, call, ., getChildAtIndex, (, 1, ), ., isName, (, )]
[call, ., getChildAtIndex, (, 1, ), ., isName, (, )]
[call, ., getChildAtIndex, (, 1, )]
[call]
[1]
[!, call, ., getChildAtIndex, (, 2, ), ., isName, (, )]
[call, ., getChildAtIndex, (, 2, ), ., isName, (, )]
[call, ., getChildAtIndex, (, 2, )]
[call]
[2]
[compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), )]
[compiler]
[t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, )]
[t]
[call]
[BAD_FALLBACK_SYNTAX]
[call, ., getChildAtIndex, (, 1, )]
[call]
[1]
[getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), )]
[t]
[firstArg, ., getString, (, )]
[firstArg]
[firstMessage, ==, null]
[firstMessage]
[null]
[compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), )]
[compiler]
[t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), )]
[t]
[firstArg]
[FALLBACK_ARG_ERROR]
[firstArg, ., getString, (, )]
[firstArg]
[firstArg, ., getNext, (, )]
[firstArg]
[getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), )]
[t]
[call, ., getChildAtIndex, (, 2, ), ., getString, (, )]
[call, ., getChildAtIndex, (, 2, )]
[call]
[2]
[secondMessage, ==, null]
[secondMessage]
[null]
[compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), )]
[compiler]
[t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), )]
[t]
[secondArg]
[FALLBACK_ARG_ERROR]
[secondArg, ., getString, (, )]
[secondArg]
[processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, )]
[call]
[firstMessage]
[secondMessage]
[identifier, ., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), )]
[identifier, ., startsWith, (, MSG_PREFIX, )]
[identifier]
[MSG_PREFIX]
[(, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), )]
[style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, )]
[style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage]
[style, ==, JsMessage, ., Style, ., CLOSURE]
[style]
[JsMessage, ., Style, ., CLOSURE]
[JsMessage, ., Style]
[JsMessage]
[isNewStyleMessage]
[!, identifier, ., endsWith, (, DESC_SUFFIX, )]
[identifier, ., endsWith, (, DESC_SUFFIX, )]
[identifier]
[DESC_SUFFIX]
[MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), ., matches, (, )]
[MSG_UNNAMED_PATTERN, ., matcher, (, identifier, )]
[MSG_UNNAMED_PATTERN]
[identifier]
[CAMELCASE_PATTERN, ., matcher, (, input, ), ., matches, (, )]
[CAMELCASE_PATTERN, ., matcher, (, input, )]
[CAMELCASE_PATTERN]
[input]
[Token, ., name, (, node, ., getType, (, ), )]
[Token]
[node, ., getType, (, )]
[node]
[input, ., length, (, )]
[input]
[suffixStart, >, 0]
[suffixStart]
[0]
['\0']
[suffixStart]
[numberStart, >, 0]
[numberStart]
[0]
[ch]
[input, ., charAt, (, numberStart, -, 1, )]
[input]
[numberStart, -, 1]
[numberStart]
[1]
[Character, ., isDigit, (, ch, )]
[Character]
[ch]
[numberStart, --]
[numberStart]
[(, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', )]
[(, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart, )]
[(, numberStart, >, 0, )]
[numberStart, >, 0]
[numberStart]
[0]
[(, numberStart, <, suffixStart, )]
[numberStart, <, suffixStart]
[numberStart]
[suffixStart]
[(, ch, ==, '_', )]
[ch, ==, '_']
[ch]
['_']
[suffixStart]
[numberStart, -, 1]
[numberStart]
[1]
[suffixStart, ==, input, ., length, (, )]
[suffixStart]
[input, ., length, (, )]
[input]
[CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, )]
[CaseFormat, ., UPPER_UNDERSCORE]
[CaseFormat]
[CaseFormat, ., LOWER_CAMEL]
[CaseFormat]
[input]
[CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring, (, suffixStart, )]
[CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), )]
[CaseFormat, ., UPPER_UNDERSCORE]
[CaseFormat]
[CaseFormat, ., LOWER_CAMEL]
[CaseFormat]
[input, ., substring, (, 0, ,, suffixStart, )]
[input]
[0]
[suffixStart]
[input, ., substring, (, suffixStart, )]
[input]
[suffixStart]
[node, ==, null]
[node]
[null]
[new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, )]
["Expected node type ", +, type, +, "; found: null"]
["Expected node type ", +, type]
["Expected node type "]
[type]
["; found: null"]
[node]
[node, ., getType, (, ), !=, type]
[node, ., getType, (, )]
[node]
[type]
[new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, ), ,, node, )]
["Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, )]
["Expected node type ", +, type, +, "; found: "]
["Expected node type ", +, type]
["Expected node type "]
[type]
["; found: "]
[node, ., getType, (, )]
[node]
[node]
[1L]
[message]
[this, ., node]
[this]
[node]
[node]
[this, ., message]
[this]
[message]
[this, ., messageNode]
[this]
[messageNode]
