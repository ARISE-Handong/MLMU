[-, 1]
[1]
[Lists, ., newArrayList, (, )]
[Lists]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[Maps, ., newLinkedHashMap, (, )]
[Maps]
[null]
[-, 1]
[1]
[new, FilePosition, (, 0, ,, 0, )]
[0]
[0]
[new, FilePosition, (, 0, ,, 0, )]
[0]
[0]
[mappings, ., clear, (, )]
[mappings]
[lastMapping]
[null]
[sourceFileMap, ., clear, (, )]
[sourceFileMap]
[originalNameMap, ., clear, (, )]
[originalNameMap]
[lastSourceFile]
[null]
[lastSourceFileIndex]
[-, 1]
[1]
[offsetPosition]
[new, FilePosition, (, 0, ,, 0, )]
[0]
[0]
[prefixPosition]
[new, FilePosition, (, 0, ,, 0, )]
[0]
[0]
[0]
[0]
[0]
[i, <, prefix, ., length, (, )]
[i]
[prefix, ., length, (, )]
[prefix]
[++, i]
[i]
[prefix, ., charAt, (, i, ), ==, '\n']
[prefix, ., charAt, (, i, )]
[prefix]
[i]
['\n']
[prefixLine, ++]
[prefixLine]
[prefixIndex]
[0]
[prefixIndex, ++]
[prefixIndex]
[prefixPosition]
[new, FilePosition, (, prefixLine, ,, prefixIndex, )]
[prefixLine]
[prefixIndex]
[Preconditions, ., checkState, (, offsetLine, >=, 0, )]
[Preconditions]
[offsetLine, >=, 0]
[offsetLine]
[0]
[Preconditions, ., checkState, (, offsetIndex, >=, 0, )]
[Preconditions]
[offsetIndex, >=, 0]
[offsetIndex]
[0]
[offsetPosition]
[new, FilePosition, (, offsetLine, ,, offsetIndex, )]
[offsetLine]
[offsetIndex]
[sourceName, ==, null, ||, sourceStartPosition, ., getLine, (, ), <, 0]
[sourceName, ==, null]
[sourceName]
[null]
[sourceStartPosition, ., getLine, (, ), <, 0]
[sourceStartPosition, ., getLine, (, )]
[sourceStartPosition]
[0]
[startPosition]
[endPosition]
[offsetPosition, ., getLine, (, ), !=, 0, ||, offsetPosition, ., getColumn, (, ), !=, 0]
[offsetPosition, ., getLine, (, ), !=, 0]
[offsetPosition, ., getLine, (, )]
[offsetPosition]
[0]
[offsetPosition, ., getColumn, (, ), !=, 0]
[offsetPosition, ., getColumn, (, )]
[offsetPosition]
[0]
[offsetPosition, ., getLine, (, )]
[offsetPosition]
[offsetPosition, ., getColumn, (, )]
[offsetPosition]
[offsetPosition, ., getColumn, (, )]
[offsetPosition]
[startPosition, ., getLine, (, ), >, 0]
[startPosition, ., getLine, (, )]
[startPosition]
[0]
[startOffsetPosition]
[0]
[endPosition, ., getLine, (, ), >, 0]
[endPosition, ., getLine, (, )]
[endPosition]
[0]
[endOffsetPosition]
[0]
[adjustedStart]
[new, FilePosition, (, startPosition, ., getLine, (, ), +, offsetLine, ,, startPosition, ., getColumn, (, ), +, startOffsetPosition, )]
[startPosition, ., getLine, (, ), +, offsetLine]
[startPosition, ., getLine, (, )]
[startPosition]
[offsetLine]
[startPosition, ., getColumn, (, ), +, startOffsetPosition]
[startPosition, ., getColumn, (, )]
[startPosition]
[startOffsetPosition]
[adjustedEnd]
[new, FilePosition, (, endPosition, ., getLine, (, ), +, offsetLine, ,, endPosition, ., getColumn, (, ), +, endOffsetPosition, )]
[endPosition, ., getLine, (, ), +, offsetLine]
[endPosition, ., getLine, (, )]
[endPosition]
[offsetLine]
[endPosition, ., getColumn, (, ), +, endOffsetPosition]
[endPosition, ., getColumn, (, )]
[endPosition]
[endOffsetPosition]
[new, Mapping, (, )]
[mapping, ., sourceFile]
[mapping]
[sourceName]
[mapping, ., originalPosition]
[mapping]
[sourceStartPosition]
[mapping, ., originalName]
[mapping]
[symbolName]
[mapping, ., startPosition]
[mapping]
[adjustedStart]
[mapping, ., endPosition]
[mapping]
[adjustedEnd]
[lastMapping, !=, null]
[lastMapping]
[null]
[lastMapping, ., startPosition, ., getLine, (, )]
[lastMapping, ., startPosition]
[lastMapping]
[lastMapping, ., startPosition, ., getColumn, (, )]
[lastMapping, ., startPosition]
[lastMapping]
[mapping, ., startPosition, ., getLine, (, )]
[mapping, ., startPosition]
[mapping]
[mapping, ., startPosition, ., getColumn, (, )]
[mapping, ., startPosition]
[mapping]
[Preconditions, ., checkState, (, nextLine, >, lastLine, ||, (, nextLine, ==, lastLine, &&, nextColumn, >=, lastColumn, ), ,, "Incorrect source mappings order, previous : (%s,%s)\n", +, "new : (%s,%s)\nnode : %s", ,, lastLine, ,, lastColumn, ,, nextLine, ,, nextColumn, )]
[Preconditions]
[nextLine, >, lastLine, ||, (, nextLine, ==, lastLine, &&, nextColumn, >=, lastColumn, )]
[nextLine, >, lastLine]
[nextLine]
[lastLine]
[(, nextLine, ==, lastLine, &&, nextColumn, >=, lastColumn, )]
[nextLine, ==, lastLine, &&, nextColumn, >=, lastColumn]
[nextLine, ==, lastLine]
[nextLine]
[lastLine]
[nextColumn, >=, lastColumn]
[nextColumn]
[lastColumn]
["Incorrect source mappings order, previous : (%s,%s)\n", +, "new : (%s,%s)\nnode : %s"]
["Incorrect source mappings order, previous : (%s,%s)\n"]
["new : (%s,%s)\nnode : %s"]
[lastLine]
[lastColumn]
[nextLine]
[nextColumn]
[lastMapping]
[mapping]
[mappings, ., add, (, mapping, )]
[mappings]
[mapping]
[addMapping, (, sourceName, ,, symbolName, ,, sourceStartPosition, ,, startPosition, ,, endPosition, )]
[sourceName]
[symbolName]
[sourceStartPosition]
[startPosition]
[endPosition]
[setStartingPosition, (, line, ,, column, )]
[line]
[column]
[new, SourceMapConsumerV3, (, )]
[section, ., parse, (, mapSectionContents, )]
[section]
[mapSectionContents]
[section, ., visitMappings, (, new, ConsumerEntryVisitor, (, ), )]
[section]
[new, ConsumerEntryVisitor, (, )]
[prepMappings, (, )]
[out, ., append, (, "{\n", )]
[out]
["{\n"]
[appendFirstField, (, out, ,, "version", ,, "3", )]
[out]
["version"]
["3"]
[appendField, (, out, ,, "file", ,, escapeString, (, name, ), )]
[out]
["file"]
[escapeString, (, name, )]
[name]
[appendField, (, out, ,, "lineCount", ,, String, ., valueOf, (, maxLine, +, 1, ), )]
[out]
["lineCount"]
[String, ., valueOf, (, maxLine, +, 1, )]
[String]
[maxLine, +, 1]
[maxLine]
[1]
[appendFieldStart, (, out, ,, "mappings", )]
[out]
["mappings"]
[(, new, LineMapper, (, out, ), ), ., appendLineMappings, (, )]
[(, new, LineMapper, (, out, ), )]
[new, LineMapper, (, out, )]
[out]
[appendFieldEnd, (, out, )]
[out]
[appendFieldStart, (, out, ,, "sources", )]
[out]
["sources"]
[out, ., append, (, "[", )]
[out]
["["]
[addSourceNameMap, (, out, )]
[out]
[out, ., append, (, "]", )]
[out]
["]"]
[appendFieldEnd, (, out, )]
[out]
[appendFieldStart, (, out, ,, "names", )]
[out]
["names"]
[out, ., append, (, "[", )]
[out]
["["]
[addSymbolNameMap, (, out, )]
[out]
[out, ., append, (, "]", )]
[out]
["]"]
[appendFieldEnd, (, out, )]
[out]
[out, ., append, (, "\n}\n", )]
[out]
["\n}\n"]
[addNameMap, (, out, ,, sourceFileMap, )]
[out]
[sourceFileMap]
[addNameMap, (, out, ,, originalNameMap, )]
[out]
[originalNameMap]
[0]
[map, ., entrySet, (, )]
[map]
[entry, ., getKey, (, )]
[entry]
[i, !=, 0]
[i]
[0]
[out, ., append, (, ",", )]
[out]
[","]
[out, ., append, (, escapeString, (, key, ), )]
[out]
[escapeString, (, key, )]
[key]
[i, ++]
[i]
[Util, ., escapeString, (, value, )]
[Util]
[value]
[out, ., append, (, "\"", )]
[out]
["\""]
[out, ., append, (, name, )]
[out]
[name]
[out, ., append, (, "\"", )]
[out]
["\""]
[out, ., append, (, ":", )]
[out]
[":"]
[out, ., append, (, value, )]
[out]
[value]
[out, ., append, (, ",\n", )]
[out]
[",\n"]
[out, ., append, (, "\"", )]
[out]
["\""]
[out, ., append, (, name, )]
[out]
[name]
[out, ., append, (, "\"", )]
[out]
["\""]
[out, ., append, (, ":", )]
[out]
[":"]
[out, ., append, (, value, )]
[out]
[value]
[appendField, (, out, ,, name, ,, "", )]
[out]
[name]
[""]
[@, SuppressWarnings, (, "unused", )]
["unused"]
[(, new, MappingTraversal, (, ), ), ., traverse, (, new, UsedMappingCheck, (, ), )]
[(, new, MappingTraversal, (, ), )]
[new, MappingTraversal, (, )]
[new, UsedMappingCheck, (, )]
[0]
[0]
[0]
[0]
[mappings]
[m, ., used]
[m]
[m, ., id]
[m]
[id, ++]
[id]
[m, ., endPosition, ., getLine, (, )]
[m, ., endPosition]
[m]
[maxLine]
[Math, ., max, (, maxLine, ,, endPositionLine, )]
[Math]
[maxLine]
[endPositionLine]
[maxLine, +, prefixPosition, ., getLine, (, )]
[maxLine]
[prefixPosition, ., getLine, (, )]
[prefixPosition]
[UNMAPPED]
[false]
[m, !=, null]
[m]
[null]
[m, ., used]
[m]
[true]
[new, ArrayDeque, <, Mapping, >, (, )]
[mappings]
[!, stack, ., isEmpty, (, ), &&, !, isOverlapped, (, stack, ., peek, (, ), ,, m, )]
[!, stack, ., isEmpty, (, )]
[stack, ., isEmpty, (, )]
[stack]
[!, isOverlapped, (, stack, ., peek, (, ), ,, m, )]
[isOverlapped, (, stack, ., peek, (, ), ,, m, )]
[stack, ., peek, (, )]
[stack]
[m]
[stack, ., pop, (, )]
[stack]
[maybeVisit, (, v, ,, previous, )]
[v]
[previous]
[stack, ., peek, (, )]
[stack]
[maybeVisitParent, (, v, ,, parent, ,, m, )]
[v]
[parent]
[m]
[stack, ., push, (, m, )]
[stack]
[m]
[!, stack, ., isEmpty, (, )]
[stack, ., isEmpty, (, )]
[stack]
[stack, ., pop, (, )]
[stack]
[maybeVisit, (, v, ,, m, )]
[v]
[m]
[p, ., getLine, (, ), +, prefixPosition, ., getLine, (, )]
[p, ., getLine, (, )]
[p]
[prefixPosition, ., getLine, (, )]
[prefixPosition]
[p, ., getLine, (, )]
[p]
[p, ., getColumn, (, )]
[p]
[(, rawLine, !=, 0, ), ?, rawCol, :, rawCol, +, prefixPosition, ., getColumn, (, )]
[(, rawLine, !=, 0, )]
[rawLine, !=, 0]
[rawLine]
[0]
[rawCol]
[rawCol, +, prefixPosition, ., getColumn, (, )]
[rawCol]
[prefixPosition, ., getColumn, (, )]
[prefixPosition]
[m1, ., endPosition, ., getLine, (, )]
[m1, ., endPosition]
[m1]
[m2, ., startPosition, ., getLine, (, )]
[m2, ., startPosition]
[m2]
[m1, ., endPosition, ., getColumn, (, )]
[m1, ., endPosition]
[m1]
[m2, ., startPosition, ., getColumn, (, )]
[m2, ., startPosition]
[m2]
[(, l1, ==, l2, &&, c1, >=, c2, ), ||, l1, >, l2]
[(, l1, ==, l2, &&, c1, >=, c2, )]
[l1, ==, l2, &&, c1, >=, c2]
[l1, ==, l2]
[l1]
[l2]
[c1, >=, c2]
[c1]
[c2]
[l1, >, l2]
[l1]
[l2]
[getAdjustedLine, (, m, ., endPosition, )]
[m, ., endPosition]
[m]
[getAdjustedCol, (, m, ., endPosition, )]
[m, ., endPosition]
[m]
[line, <, nextLine, ||, (, line, ==, nextLine, &&, col, <, nextCol, )]
[line, <, nextLine]
[line]
[nextLine]
[(, line, ==, nextLine, &&, col, <, nextCol, )]
[line, ==, nextLine, &&, col, <, nextCol]
[line, ==, nextLine]
[line]
[nextLine]
[col, <, nextCol]
[col]
[nextCol]
[visit, (, v, ,, m, ,, nextLine, ,, nextCol, )]
[v]
[m]
[nextLine]
[nextCol]
[getAdjustedLine, (, m, ., startPosition, )]
[m, ., startPosition]
[m]
[getAdjustedCol, (, m, ., startPosition, )]
[m, ., startPosition]
[m]
[Preconditions, ., checkState, (, line, <, nextLine, ||, col, <=, nextCol, )]
[Preconditions]
[line, <, nextLine, ||, col, <=, nextCol]
[line, <, nextLine]
[line]
[nextLine]
[col, <=, nextCol]
[col]
[nextCol]
[line, <, nextLine, ||, (, line, ==, nextLine, &&, col, <, nextCol, )]
[line, <, nextLine]
[line]
[nextLine]
[(, line, ==, nextLine, &&, col, <, nextCol, )]
[line, ==, nextLine, &&, col, <, nextCol]
[line, ==, nextLine]
[line]
[nextLine]
[col, <, nextCol]
[col]
[nextCol]
[visit, (, v, ,, parent, ,, nextLine, ,, nextCol, )]
[v]
[parent]
[nextLine]
[nextCol]
[Preconditions, ., checkState, (, line, <=, nextLine, )]
[Preconditions]
[line, <=, nextLine]
[line]
[nextLine]
[Preconditions, ., checkState, (, line, <, nextLine, ||, col, <, nextCol, )]
[Preconditions]
[line, <, nextLine, ||, col, <, nextCol]
[line, <, nextLine]
[line]
[nextLine]
[col, <, nextCol]
[col]
[nextCol]
[line, ==, nextLine, &&, col, ==, nextCol]
[line, ==, nextLine]
[line]
[nextLine]
[col, ==, nextCol]
[col]
[nextCol]
[Preconditions, ., checkState, (, false, )]
[Preconditions]
[false]
[v, ., visit, (, m, ,, line, ,, col, ,, nextLine, ,, nextCol, )]
[v]
[m]
[line]
[col]
[nextLine]
[nextCol]
[line]
[nextLine]
[col]
[nextCol]
[out, ., append, (, "{\n", )]
[out]
["{\n"]
[appendFirstField, (, out, ,, "version", ,, "3", )]
[out]
["version"]
["3"]
[appendField, (, out, ,, "file", ,, escapeString, (, name, ), )]
[out]
["file"]
[escapeString, (, name, )]
[name]
[appendFieldStart, (, out, ,, "sections", )]
[out]
["sections"]
[out, ., append, (, "[\n", )]
[out]
["[\n"]
[true]
[0]
[0]
[sections]
[first]
[first]
[false]
[out, ., append, (, ",\n", )]
[out]
[",\n"]
[out, ., append, (, "{\n", )]
[out]
["{\n"]
[appendFirstField, (, out, ,, "offset", ,, offsetValue, (, section, ., getLine, (, ), ,, section, ., getColumn, (, ), ), )]
[out]
["offset"]
[offsetValue, (, section, ., getLine, (, ), ,, section, ., getColumn, (, ), )]
[section, ., getLine, (, )]
[section]
[section, ., getColumn, (, )]
[section]
[section, ., getSectionType, (, ), ==, SourceMapSection, ., SectionType, ., URL]
[section, ., getSectionType, (, )]
[section]
[SourceMapSection, ., SectionType, ., URL]
[SourceMapSection, ., SectionType]
[SourceMapSection]
[appendField, (, out, ,, "url", ,, escapeString, (, section, ., getSectionValue, (, ), ), )]
[out]
["url"]
[escapeString, (, section, ., getSectionValue, (, ), )]
[section, ., getSectionValue, (, )]
[section]
[section, ., getSectionType, (, ), ==, SourceMapSection, ., SectionType, ., MAP]
[section, ., getSectionType, (, )]
[section]
[SourceMapSection, ., SectionType, ., MAP]
[SourceMapSection, ., SectionType]
[SourceMapSection]
[appendField, (, out, ,, "map", ,, section, ., getSectionValue, (, ), )]
[out]
["map"]
[section, ., getSectionValue, (, )]
[section]
[new, IOException, (, "Unexpected section type", )]
["Unexpected section type"]
[out, ., append, (, "\n}", )]
[out]
["\n}"]
[out, ., append, (, "\n]", )]
[out]
["\n]"]
[appendFieldEnd, (, out, )]
[out]
[out, ., append, (, "\n}\n", )]
[out]
["\n}\n"]
[new, StringBuilder, (, )]
[out, ., append, (, "{\n", )]
[out]
["{\n"]
[appendFirstField, (, out, ,, "line", ,, String, ., valueOf, (, line, ), )]
[out]
["line"]
[String, ., valueOf, (, line, )]
[String]
[line]
[appendField, (, out, ,, "column", ,, String, ., valueOf, (, column, ), )]
[out]
["column"]
[String, ., valueOf, (, column, )]
[String]
[column]
[out, ., append, (, "\n}", )]
[out]
["\n}"]
[out]
[sourceName, !=, lastSourceFile]
[sourceName]
[lastSourceFile]
[lastSourceFile]
[sourceName]
[sourceFileMap, ., get, (, sourceName, )]
[sourceFileMap]
[sourceName]
[index, !=, null]
[index]
[null]
[lastSourceFileIndex]
[index]
[lastSourceFileIndex]
[sourceFileMap, ., size, (, )]
[sourceFileMap]
[sourceFileMap, ., put, (, sourceName, ,, lastSourceFileIndex, )]
[sourceFileMap]
[sourceName]
[lastSourceFileIndex]
[lastSourceFileIndex]
[originalNameMap, ., get, (, symbolName, )]
[originalNameMap]
[symbolName]
[index, !=, null]
[index]
[null]
[originalNameIndex]
[index]
[originalNameIndex]
[originalNameMap, ., size, (, )]
[originalNameMap]
[originalNameMap, ., put, (, symbolName, ,, originalNameIndex, )]
[originalNameMap]
[symbolName]
[originalNameIndex]
[originalNameIndex]
[-, 1]
[1]
[0]
[this, ., out]
[this]
[out]
[(, m, !=, null, ), ?, m, ., id, :, UNMAPPED]
[(, m, !=, null, )]
[m, !=, null]
[m]
[null]
[m, ., id]
[m]
[UNMAPPED]
[previousLine, !=, line]
[previousLine]
[line]
[previousColumn]
[0]
[line, !=, nextLine, ||, col, !=, nextCol]
[line, !=, nextLine]
[line]
[nextLine]
[col, !=, nextCol]
[col]
[nextCol]
[previousLine, ==, line]
[previousLine]
[line]
[out, ., append, (, ',', )]
[out]
[',']
[writeEntry, (, m, ,, col, )]
[m]
[col]
[previousLine]
[line]
[previousColumn]
[col]
[line]
[i, <=, nextLine]
[i]
[nextLine]
[i, ++]
[i]
[i, ==, nextLine]
[i]
[nextLine]
[closeLine, (, false, )]
[false]
[openLine, (, false, )]
[false]
[Base64VLQ, ., encode, (, out, ,, column, -, previousColumn, )]
[Base64VLQ]
[out]
[column, -, previousColumn]
[column]
[previousColumn]
[previousColumn]
[column]
[m, !=, null]
[m]
[null]
[getSourceId, (, m, ., sourceFile, )]
[m, ., sourceFile]
[m]
[Base64VLQ, ., encode, (, out, ,, sourceId, -, previousSourceFileId, )]
[Base64VLQ]
[out]
[sourceId, -, previousSourceFileId]
[sourceId]
[previousSourceFileId]
[previousSourceFileId]
[sourceId]
[m, ., originalPosition, ., getLine, (, )]
[m, ., originalPosition]
[m]
[m, ., originalPosition, ., getColumn, (, )]
[m, ., originalPosition]
[m]
[Base64VLQ, ., encode, (, out, ,, srcline, -, previousSourceLine, )]
[Base64VLQ]
[out]
[srcline, -, previousSourceLine]
[srcline]
[previousSourceLine]
[previousSourceLine]
[srcline]
[Base64VLQ, ., encode, (, out, ,, srcColumn, -, previousSourceColumn, )]
[Base64VLQ]
[out]
[srcColumn, -, previousSourceColumn]
[srcColumn]
[previousSourceColumn]
[previousSourceColumn]
[srcColumn]
[m, ., originalName, !=, null]
[m, ., originalName]
[m]
[null]
[getNameId, (, m, ., originalName, )]
[m, ., originalName]
[m]
[Base64VLQ, ., encode, (, out, ,, (, nameId, -, previousNameId, ), )]
[Base64VLQ]
[out]
[(, nameId, -, previousNameId, )]
[nameId, -, previousNameId]
[nameId]
[previousNameId]
[previousNameId]
[nameId]
[openLine, (, true, )]
[true]
[(, new, MappingTraversal, (, ), ), ., traverse, (, this, )]
[(, new, MappingTraversal, (, ), )]
[new, MappingTraversal, (, )]
[this]
[closeLine, (, true, )]
[true]
[firstEntry]
[out, ., append, (, '\"', )]
[out]
['\"']
[out, ., append, (, ';', )]
[out]
[';']
[finalEntry]
[out, ., append, (, '\"', )]
[out]
['\"']
