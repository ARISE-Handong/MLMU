[numCapturingGroups, (, ), !=, 0]
[numCapturingGroups, (, )]
[0]
[new, StringBuilder, (, )]
[sb, ., append, (, '/', )]
[sb]
['/']
[appendSourceCode, (, sb, )]
[sb]
[sb, ., length, (, ), ==, 1]
[sb, ., length, (, )]
[sb]
[1]
[sb, ., append, (, "(?:)", )]
[sb]
["(?:)"]
[sb, ., append, (, '/', )]
[sb]
['/']
[sb, ., toString, (, )]
[sb]
[new, StringBuilder, (, )]
[appendDebugString, (, sb, )]
[sb]
[sb, ., toString, (, )]
[sb]
[sb, ., append, (, '(', ), ., append, (, getClass, (, ), ., getSimpleName, (, ), )]
[sb, ., append, (, '(', )]
[sb]
['(']
[getClass, (, ), ., getSimpleName, (, )]
[getClass, (, )]
[sb, ., length, (, )]
[sb]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[appendDebugInfo, (, sb, )]
[sb]
[sb, ., length, (, ), ==, len, +, 1]
[sb, ., length, (, )]
[sb]
[len, +, 1]
[len]
[1]
[sb, ., setLength, (, len, )]
[sb]
[len]
[children, (, )]
[sb, ., append, (, ' ', )]
[sb]
[' ']
[child, ., appendDebugString, (, sb, )]
[child]
[sb]
[sb, ., append, (, ')', )]
[sb]
[')']
[0]
[pattern, ., length, (, )]
[pattern]
[this, ., pos]
[this]
[0]
[parse, (, )]
[pos, <, limit]
[pos]
[limit]
[new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), )]
[pattern, ., substring, (, pos, )]
[pattern]
[pos]
[out]
[null]
[null]
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[ch]
['[']
[atom]
[parseCharset, (, )]
['(']
[atom]
[parseParenthetical, (, )]
[')']
['\\']
[atom]
[parseEscape, (, )]
['^']
['$']
[atom]
[new, Anchor, (, ch, )]
[ch]
[++, pos]
[pos]
['.']
[atom]
[DOT_CHARSET]
[++, pos]
[pos]
['|']
[atom]
[Empty, ., INSTANCE]
[Empty]
[pos]
[pos, +, 1]
[pos]
[1]
[end, <, limit]
[end]
[limit]
[pattern, ., charAt, (, end, )]
[pattern]
[end]
['[']
['(']
[')']
['\\']
['^']
['$']
['|']
['.']
['*']
['+']
['?']
['{']
[end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), )]
[end, +, 1, >=, limit]
[end, +, 1]
[end]
[1]
[limit]
[!, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), )]
[isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), )]
[pattern, ., charAt, (, end, +, 1, )]
[pattern]
[end, +, 1]
[end]
[1]
[++, end]
[end]
[atom]
[new, Text, (, pattern, ., substring, (, start, ,, end, ), )]
[pattern, ., substring, (, start, ,, end, )]
[pattern]
[start]
[end]
[pos]
[end]
[pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), )]
[pos, <, limit]
[pos]
[limit]
[isRepetitionStart, (, pattern, ., charAt, (, pos, ), )]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[atom]
[parseRepetition, (, atom, )]
[atom]
[preceder, ==, null]
[preceder]
[null]
[preceder]
[atom]
[preceder]
[new, Concatenation, (, preceder, ,, atom, )]
[preceder]
[atom]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), ==, '|']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['|']
[alternatives, ==, null]
[alternatives]
[null]
[alternatives]
[ImmutableList, ., builder, (, )]
[ImmutableList]
[alternatives, ., add, (, preceder, )]
[alternatives]
[preceder]
[preceder]
[null]
[++, pos]
[pos]
[preceder, ==, null]
[preceder]
[null]
[preceder]
[Empty, ., INSTANCE]
[Empty]
[alternatives, !=, null]
[alternatives]
[null]
[alternatives, ., add, (, preceder, )]
[alternatives]
[preceder]
[new, Alternation, (, alternatives, ., build, (, ), )]
[alternatives, ., build, (, )]
[alternatives]
[preceder]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '(', )]
[Preconditions]
[pattern, ., charAt, (, pos, ), ==, '(']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['(']
[pos]
[++, pos]
[pos]
[true]
[0]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), ==, '?']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['?']
[pos, +, 1, <, limit]
[pos, +, 1]
[pos]
[1]
[limit]
[capturing]
[false]
[pattern, ., charAt, (, pos, +, 1, )]
[pattern]
[pos, +, 1]
[pos]
[1]
[ch]
[':']
[pos]
[2]
['!']
['=']
[pos]
[2]
[type]
[ch]
[new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (, start, ), )]
["Malformed parenthetical: ", +, pattern, ., substring, (, start, )]
["Malformed parenthetical: "]
[pattern, ., substring, (, start, )]
[pattern]
[start]
[parse, (, )]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, ')']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), ==, ')']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[')']
[++, pos]
[pos]
[new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), )]
["Unclosed parenthetical group: ", +, pattern, ., substring, (, start, )]
["Unclosed parenthetical group: "]
[pattern, ., substring, (, start, )]
[pattern]
[start]
[capturing]
[++, numCapturingGroups]
[numCapturingGroups]
[new, CapturingGroup, (, body, )]
[body]
[type, !=, 0]
[type]
[0]
[new, LookaheadAssertion, (, body, ,, type, ==, '=', )]
[body]
[type, ==, '=']
[type]
['=']
[body]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', )]
[Preconditions]
[pattern, ., charAt, (, pos, ), ==, '[']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['[']
[++, pos]
[pos]
[flags, ., indexOf, (, 'i', ), >=, 0]
[flags, ., indexOf, (, 'i', )]
[flags]
['i']
[0]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), ==, '^']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['^']
[inverse]
[++, pos]
[pos]
[CharRanges, ., EMPTY]
[CharRanges]
[CharRanges, ., EMPTY]
[CharRanges]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=, ']']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), !=, ']']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[']']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[ch, ==, '\\']
[ch]
['\\']
[++, pos]
[pos]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, )]
[NAMED_CHAR_GROUPS]
[possibleGroupName]
[group, !=, null]
[group]
[null]
[++, pos]
[pos]
[ranges]
[ranges, ., union, (, group, )]
[ranges]
[group]
[start]
[parseEscapeChar, (, )]
[start]
[ch]
[++, pos]
[pos]
[start]
[pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']']
[pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-']
[pos, +, 1, <, limit]
[pos, +, 1]
[pos]
[1]
[limit]
[pattern, ., charAt, (, pos, ), ==, '-']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['-']
[pattern, ., charAt, (, pos, +, 1, ), !=, ']']
[pattern, ., charAt, (, pos, +, 1, )]
[pattern]
[pos, +, 1]
[pos]
[1]
[']']
[++, pos]
[pos]
[ch]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[ch, ==, '\\']
[ch]
['\\']
[++, pos]
[pos]
[end]
[parseEscapeChar, (, )]
[end]
[ch]
[++, pos]
[pos]
[CharRanges, ., inclusive, (, start, ,, end, )]
[CharRanges]
[start]
[end]
[ranges]
[ranges, ., union, (, range, )]
[ranges]
[range]
[IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, )]
[IE_SPEC_ERRORS, ., contains, (, start, )]
[IE_SPEC_ERRORS]
[start]
[IE_SPEC_ERRORS, ., contains, (, end, )]
[IE_SPEC_ERRORS]
[end]
[ieExplicits]
[ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), )]
[ieExplicits]
[range, ., intersection, (, IE_SPEC_ERRORS, )]
[range]
[IE_SPEC_ERRORS]
[isCaseInsensitive]
[ranges]
[CaseCanonicalize, ., expandToAllMatched, (, ranges, )]
[CaseCanonicalize]
[ranges]
[++, pos]
[pos]
[inverse]
[ranges]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[ranges]
[new, Charset, (, ranges, ,, ieExplicits, )]
[ranges]
[ieExplicits]
[pattern, ., charAt, (, pos, ++, )]
[pattern]
[pos, ++]
[pos]
[ch]
['b']
['\b']
['f']
['\f']
['n']
['\n']
['r']
['\r']
['t']
['\t']
['u']
[parseHex, (, 4, )]
[4]
['v']
['\u000b']
['x']
[parseHex, (, 2, )]
[2]
['0', <=, ch, &&, ch, <=, '7']
['0', <=, ch]
['0']
[ch]
[ch, <=, '7']
[ch]
['7']
[(, char, ), (, ch, -, '0', )]
[(, ch, -, '0', )]
[ch, -, '0']
[ch]
['0']
[Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), )]
[Math]
[limit]
[pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, )]
[pos, +, (, ch, <=, '3', ?, 2, :, 1, )]
[pos]
[(, ch, <=, '3', ?, 2, :, 1, )]
[ch, <=, '3', ?, 2, :, 1]
[ch, <=, '3']
[ch]
['3']
[2]
[1]
[(, ch, ==, '0', ?, 1, :, 0, )]
[ch, ==, '0', ?, 1, :, 0]
[ch, ==, '0']
[ch]
['0']
[1]
[0]
[pos, <, octLimit]
[pos]
[octLimit]
[ch]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['0', <=, ch, &&, ch, <=, '7']
['0', <=, ch]
['0']
[ch]
[ch, <=, '7']
[ch]
['7']
[codeUnit]
[(, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), )]
[(, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), )]
[(, codeUnit, <<, 3, ), +, (, ch, -, '0', )]
[(, codeUnit, <<, 3, )]
[codeUnit, <<, 3]
[codeUnit]
[3]
[(, ch, -, '0', )]
[ch, -, '0']
[ch]
['0']
[++, pos]
[pos]
[codeUnit]
[ch]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', )]
[Preconditions]
[pattern, ., charAt, (, pos, ), ==, '\\']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['\\']
[++, pos]
[pos]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
[ch, ==, 'b', ||, ch, ==, 'B']
[ch, ==, 'b']
[ch]
['b']
[ch, ==, 'B']
[ch]
['B']
[++, pos]
[pos]
[new, WordBoundary, (, ch, )]
[ch]
['1', <=, ch, &&, ch, <=, '9']
['1', <=, ch]
['1']
[ch]
[ch, <=, '9']
[ch]
['9']
[++, pos]
[pos]
[ch, -, '0']
[ch]
['0']
[numCapturingGroups, >=, possibleGroupIndex]
[numCapturingGroups]
[possibleGroupIndex]
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['0', <=, next, &&, next, <=, '9']
['0', <=, next]
['0']
[next]
[next, <=, '9']
[next]
['9']
[possibleGroupIndex, *, 10, +, (, next, -, '0', )]
[possibleGroupIndex, *, 10]
[possibleGroupIndex]
[10]
[(, next, -, '0', )]
[next, -, '0']
[next]
['0']
[numCapturingGroups, >=, twoDigitGroupIndex]
[numCapturingGroups]
[twoDigitGroupIndex]
[++, pos]
[pos]
[possibleGroupIndex]
[twoDigitGroupIndex]
[new, BackReference, (, possibleGroupIndex, )]
[possibleGroupIndex]
[new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch, ), )]
[Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch, )]
[Character]
[possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch]
[possibleGroupIndex, <=, 7]
[possibleGroupIndex]
[7]
[(, char, ), possibleGroupIndex]
[possibleGroupIndex]
[ch]
[NAMED_CHAR_GROUPS, ., get, (, ch, )]
[NAMED_CHAR_GROUPS]
[ch]
[charGroup, !=, null]
[charGroup]
[null]
[++, pos]
[pos]
[new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, )]
[charGroup]
[CharRanges, ., EMPTY]
[CharRanges]
[new, Text, (, "", +, parseEscapeChar, (, ), )]
["", +, parseEscapeChar, (, )]
[""]
[parseEscapeChar, (, )]
[pos, +, n, >, limit]
[pos, +, n]
[pos]
[n]
[limit]
[new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), )]
["Abbreviated hex escape ", +, pattern, ., substring, (, pos, )]
["Abbreviated hex escape "]
[pattern, ., substring, (, pos, )]
[pattern]
[pos]
[0]
[--, n, >=, 0]
[--, n]
[n]
[0]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['0', <=, ch, &&, ch, <=, '9']
['0', <=, ch]
['0']
[ch]
[ch, <=, '9']
[ch]
['9']
[digit]
[ch, -, '0']
[ch]
['0']
['a', <=, ch, &&, ch, <=, 'f']
['a', <=, ch]
['a']
[ch]
[ch, <=, 'f']
[ch]
['f']
[digit]
[ch, +, (, 10, -, 'a', )]
[ch]
[(, 10, -, 'a', )]
[10, -, 'a']
[10]
['a']
['A', <=, ch, &&, ch, <=, 'F']
['A', <=, ch]
['A']
[ch]
[ch, <=, 'F']
[ch]
['F']
[digit]
[ch, +, (, 10, -, 'A', )]
[ch]
[(, 10, -, 'A', )]
[10, -, 'A']
[10]
['A']
[new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), )]
[pattern, ., substring, (, pos, )]
[pattern]
[pos]
[++, pos]
[pos]
[result]
[(, result, <<, 4, ), |, digit]
[(, result, <<, 4, )]
[result, <<, 4]
[result]
[4]
[digit]
[(, char, ), result]
[result]
[ch]
['?']
['*']
['+']
['{']
[true]
[false]
[pos, ==, limit]
[pos]
[limit]
[body]
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['+']
[++, pos]
[pos]
[min]
[1]
[max]
[Integer, ., MAX_VALUE]
[Integer]
['*']
[++, pos]
[pos]
[min]
[0]
[max]
[Integer, ., MAX_VALUE]
[Integer]
['?']
[++, pos]
[pos]
[min]
[0]
[max]
[1]
['{']
[++, pos]
[pos]
[pos]
[pattern, ., indexOf, (, '}', ,, start, )]
[pattern]
['}']
[start]
[end, <, 0]
[end]
[0]
[pos]
[start, -, 1]
[start]
[1]
[body]
[pattern, ., substring, (, start, ,, end, )]
[pattern]
[start]
[end]
[pos]
[end, +, 1]
[end]
[1]
[counts, ., indexOf, (, ',', )]
[counts]
[',']
[min]
[Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, )]
[Integer]
[comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts]
[comma, >=, 0]
[comma]
[0]
[counts, ., substring, (, 0, ,, comma, )]
[counts]
[0]
[comma]
[counts]
[max]
[comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min]
[comma, >=, 0]
[comma]
[0]
[comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE]
[comma, +, 1, !=, counts, ., length, (, )]
[comma, +, 1]
[comma]
[1]
[counts, ., length, (, )]
[counts]
[Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), )]
[Integer]
[counts, ., substring, (, comma, +, 1, )]
[counts]
[comma, +, 1]
[comma]
[1]
[Integer, ., MAX_VALUE]
[Integer]
[min]
[min]
[max]
[-, 1]
[1]
[min, <, 0, ||, min, >, max]
[min, <, 0]
[min]
[0]
[min, >, max]
[min]
[max]
[pos]
[start, -, 1]
[start]
[1]
[body]
[body]
[true]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?']
[pos, <, limit]
[pos]
[limit]
[pattern, ., charAt, (, pos, ), ==, '?']
[pattern, ., charAt, (, pos, )]
[pattern]
[pos]
['?']
[greedy]
[false]
[++, pos]
[pos]
[new, Repetition, (, body, ,, min, ,, max, ,, greedy, )]
[body]
[min]
[max]
[greedy]
[new, Parser, (, ), ., parseTopLevel, (, )]
[new, Parser, (, )]
[flags, ., indexOf, (, 'm', ), >=, 0]
[flags, ., indexOf, (, 'm', )]
[flags]
['m']
[0]
[false]
[!, (, t, instanceof, Concatenation, )]
[(, t, instanceof, Concatenation, )]
[t, instanceof, Concatenation]
[t]
[false]
[(, Concatenation, ), t]
[t]
[c, ., elements, ., isEmpty, (, )]
[c, ., elements]
[c]
[false]
[c, ., elements, ., get, (, 0, )]
[c, ., elements]
[c]
[0]
[c, ., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, )]
[c, ., elements]
[c]
[c, ., elements, ., size, (, ), -, 1]
[c, ., elements, ., size, (, )]
[c, ., elements]
[c]
[1]
[!, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, )]
[(, first, instanceof, Anchor, &&, last, instanceof, Anchor, )]
[first, instanceof, Anchor, &&, last, instanceof, Anchor]
[first, instanceof, Anchor]
[first]
[last, instanceof, Anchor]
[last]
[false]
[(, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (, Anchor, ), last, ), ., type, ==, '$']
[(, (, Anchor, ), first, ), ., type, ==, '^']
[(, (, Anchor, ), first, ), ., type]
[(, (, Anchor, ), first, )]
[(, Anchor, ), first]
[first]
['^']
[(, (, Anchor, ), last, ), ., type, ==, '$']
[(, (, Anchor, ), last, ), ., type]
[(, (, Anchor, ), last, )]
[(, Anchor, ), last]
[last]
['$']
[false]
[false]
[0]
[ImmutableList, ., of, (, )]
[ImmutableList]
[new, Empty, (, )]
[this]
[o, instanceof, Empty]
[o]
[0x7ee06141]
[this, ., type]
[this]
[type]
[this]
[true]
[sb, ., append, (, type, )]
[sb]
[type]
[sb, ., append, (, type, )]
[sb]
[type]
[o, instanceof, Anchor, &&, type, ==, (, (, Anchor, ), o, ), ., type]
[o, instanceof, Anchor]
[o]
[type, ==, (, (, Anchor, ), o, ), ., type]
[type]
[(, (, Anchor, ), o, ), ., type]
[(, (, Anchor, ), o, )]
[(, Anchor, ), o]
[o]
[type, ^, 0xe85317ff]
[type]
[0xe85317ff]
[this, ., type]
[this]
[type]
[this]
[sb, ., append, (, '\\', ), ., append, (, type, )]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[type]
[sb, ., append, (, type, )]
[sb]
[type]
[o, instanceof, WordBoundary, &&, type, ==, (, (, WordBoundary, ), o, ), ., type]
[o, instanceof, WordBoundary]
[o]
[type, ==, (, (, WordBoundary, ), o, ), ., type]
[type]
[(, (, WordBoundary, ), o, ), ., type]
[(, (, WordBoundary, ), o, )]
[(, WordBoundary, ), o]
[o]
[0x5673aa29, ^, type]
[0x5673aa29]
[type]
[Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=, 99, )]
[Preconditions]
[groupIndex, >=, 0, &&, groupIndex, <=, 99]
[groupIndex, >=, 0]
[groupIndex]
[0]
[groupIndex, <=, 99]
[groupIndex]
[99]
[this, ., groupIndex]
[this]
[groupIndex]
[this]
[sb, ., append, (, '\\', ), ., append, (, groupIndex, )]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[groupIndex]
[sb, ., append, (, groupIndex, )]
[sb]
[groupIndex]
[o, instanceof, BackReference, &&, groupIndex, ==, (, (, BackReference, ), o, ), ., groupIndex]
[o, instanceof, BackReference]
[o]
[groupIndex, ==, (, (, BackReference, ), o, ), ., groupIndex]
[groupIndex]
[(, (, BackReference, ), o, ), ., groupIndex]
[(, (, BackReference, ), o, )]
[(, BackReference, ), o]
[o]
[0xff072663, ^, groupIndex]
[0xff072663]
[groupIndex]
[this, ., text]
[this]
[text]
[ch]
['$']
['^']
['*']
['(']
[')']
['+']
['[']
['|']
['.']
['/']
['?']
[sb, ., append, (, '\\', ), ., append, (, ch, )]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[ch]
['{']
['0', <=, next, &&, next, <=, '9']
['0', <=, next]
['0']
[next]
[next, <=, '9']
[next]
['9']
[sb, ., append, (, '\\', )]
[sb]
['\\']
[sb, ., append, (, ch, )]
[sb]
[ch]
[escapeCharOnto, (, ch, ,, sb, )]
[ch]
[sb]
[text, ., length, (, )]
[text]
[n, ==, 0]
[n]
[0]
[Empty, ., INSTANCE]
[Empty]
[flags, ., indexOf, (, 'i', ), >=, 0]
[flags, ., indexOf, (, 'i', )]
[flags]
['i']
[0]
[CaseCanonicalize, ., caseCanonicalize, (, text, )]
[CaseCanonicalize]
[text]
[text, !=, canonicalized]
[text]
[canonicalized]
[new, Text, (, canonicalized, )]
[canonicalized]
[this]
[0]
[text, ., length, (, )]
[text]
[i, <, n]
[i]
[n]
[++, i]
[i]
[CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), )]
[CaseCanonicalize, ., CASE_SENSITIVE]
[CaseCanonicalize]
[text, ., charAt, (, i, )]
[text]
[i]
[true]
[false]
[0]
[text, ., length, (, )]
[text]
[i, <, n]
[i]
[n]
[++, i]
[i]
[escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,, sb, )]
[text, ., charAt, (, i, )]
[text]
[i]
[i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1]
[i, +, 1, <, n]
[i, +, 1]
[i]
[1]
[n]
[text, ., charAt, (, i, +, 1, )]
[text]
[i, +, 1]
[i]
[1]
[-, 1]
[1]
[sb]
[sb, ., append, (, '`', ), ., append, (, text, ), ., append, (, '`', )]
[sb, ., append, (, '`', ), ., append, (, text, )]
[sb, ., append, (, '`', )]
[sb]
['`']
[text]
['`']
[o, instanceof, Text, &&, text, ., equals, (, (, (, Text, ), o, ), ., text, )]
[o, instanceof, Text]
[o]
[text, ., equals, (, (, (, Text, ), o, ), ., text, )]
[text]
[(, (, Text, ), o, ), ., text]
[(, (, Text, ), o, )]
[(, Text, ), o]
[o]
[text, ., hashCode, (, ), ^, 0x617e310]
[text, ., hashCode, (, )]
[text]
[0x617e310]
[this, ., body]
[this]
[body]
[this, ., min]
[this]
[min]
[this, ., max]
[this]
[max]
[this, ., greedy]
[this]
[greedy]
[this, ., body, ., simplify, (, flags, )]
[this, ., body]
[this]
[flags]
[max, ==, 0, &&, !, body, ., hasCapturingGroup, (, )]
[max, ==, 0]
[max]
[0]
[!, body, ., hasCapturingGroup, (, )]
[body, ., hasCapturingGroup, (, )]
[body]
[Empty, ., INSTANCE]
[Empty]
[body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, )]
[body, instanceof, Empty]
[body]
[NEVER_MATCHES, ., equals, (, body, )]
[NEVER_MATCHES]
[body]
[body]
[this, ., min]
[this]
[this, ., max]
[this]
[body, instanceof, Repetition]
[body]
[(, Repetition, ), body]
[body]
[rbody, ., greedy, ==, greedy]
[rbody, ., greedy]
[rbody]
[greedy]
[(, (, long, ), min, ), *, rbody, ., min]
[(, (, long, ), min, )]
[(, long, ), min]
[min]
[rbody, ., min]
[rbody]
[(, (, long, ), max, ), *, rbody, ., max]
[(, (, long, ), max, )]
[(, long, ), max]
[max]
[rbody, ., max]
[rbody]
[lmin, <, Integer, ., MAX_VALUE]
[lmin]
[Integer, ., MAX_VALUE]
[Integer]
[body]
[rbody, ., body]
[rbody]
[min]
[(, int, ), lmin]
[lmin]
[max]
[lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax]
[lmax, >=, Integer, ., MAX_VALUE]
[lmax]
[Integer, ., MAX_VALUE]
[Integer]
[Integer, ., MAX_VALUE]
[Integer]
[(, int, ), lmax]
[lmax]
[min, ==, 1, &&, max, ==, 1]
[min, ==, 1]
[min]
[1]
[max, ==, 1]
[max]
[1]
[body]
[this, ., greedy, ||, min, ==, max]
[this, ., greedy]
[this]
[min, ==, max]
[min]
[max]
[body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, )]
[body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy]
[body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max]
[body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min]
[body, ., equals, (, this, ., body, )]
[body]
[this, ., body]
[this]
[min, ==, this, ., min]
[min]
[this, ., min]
[this]
[max, ==, this, ., max]
[max]
[this, ., max]
[this]
[greedy, ==, this, ., greedy]
[greedy]
[this, ., greedy]
[this]
[this]
[new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (, flags, )]
[new, Repetition, (, body, ,, min, ,, max, ,, greedy, )]
[body]
[min]
[max]
[greedy]
[flags]
[body, ., isCaseSensitive, (, )]
[body]
[body, ., containsAnchor, (, )]
[body]
[body, ., numCapturingGroups, (, )]
[body]
[ImmutableList, ., of, (, body, )]
[ImmutableList]
[body]
[body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, )]
[body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition]
[body, instanceof, Alternation, ||, body, instanceof, Concatenation]
[body, instanceof, Alternation]
[body]
[body, instanceof, Concatenation]
[body]
[body, instanceof, Repetition]
[body]
[(, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, )]
[body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1]
[body, instanceof, Text]
[body]
[(, (, Text, ), body, ), ., text, ., length, (, ), >, 1]
[(, (, Text, ), body, ), ., text, ., length, (, )]
[(, (, Text, ), body, ), ., text]
[(, (, Text, ), body, )]
[(, Text, ), body]
[body]
[1]
[sb, ., append, (, "(?:", )]
[sb]
["(?:"]
[body, ., appendSourceCode, (, sb, )]
[body]
[sb]
[sb, ., append, (, ')', )]
[sb]
[')']
[body, ., appendSourceCode, (, sb, )]
[body]
[sb]
[max, ==, Integer, ., MAX_VALUE]
[max]
[Integer, ., MAX_VALUE]
[Integer]
[min]
[0]
[1]
[1]
[1]
[3, +, numDecimalDigits, (, min, )]
[3]
[numDecimalDigits, (, min, )]
[min]
[min, ==, 0, &&, max, ==, 1]
[min, ==, 0]
[min]
[0]
[max, ==, 1]
[max]
[1]
[1]
[min, ==, max]
[min]
[max]
[min, ==, 1]
[min]
[1]
[0]
[2, +, numDecimalDigits, (, min, )]
[2]
[numDecimalDigits, (, min, )]
[min]
[3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (, max, )]
[3, +, numDecimalDigits, (, min, )]
[3]
[numDecimalDigits, (, min, )]
[min]
[numDecimalDigits, (, max, )]
[max]
[n, <, 0]
[n]
[0]
[new, AssertionError, (, )]
[1]
[n, >=, 10]
[n]
[10]
[++, nDigits]
[nDigits]
[n]
[10]
[nDigits]
[sb, ., length, (, )]
[sb]
[appendBodySourceCode, (, sb, )]
[sb]
[sb, ., length, (, )]
[sb]
[bodyEnd, -, bodyStart]
[bodyEnd]
[bodyStart]
[this, ., min]
[this]
[this, ., max]
[this]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE]
[min, >=, 2]
[min]
[2]
[max, ==, Integer, ., MAX_VALUE]
[max]
[Integer, ., MAX_VALUE]
[Integer]
[max, -, min, <=, 1]
[max, -, min]
[max]
[min]
[1]
[min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min]
[min, ==, max, ||, max, ==, Integer, ., MAX_VALUE]
[min, ==, max]
[min]
[max]
[max, ==, Integer, ., MAX_VALUE]
[max]
[Integer, ., MAX_VALUE]
[Integer]
[min, -, 1]
[min]
[1]
[min]
[min, -, expanded]
[min]
[expanded]
[max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded]
[max, ==, Integer, ., MAX_VALUE]
[max]
[Integer, ., MAX_VALUE]
[Integer]
[max]
[max, -, expanded]
[max]
[expanded]
[suffixLen, (, min, ,, max, )]
[min]
[max]
[suffixLen, (, expandedMin, ,, expandedMax, )]
[expandedMin]
[expandedMax]
[bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, )]
[bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen]
[bodyLen, *, expanded, +, expandedSuffixLen]
[bodyLen, *, expanded]
[bodyLen]
[expanded]
[expandedSuffixLen]
[suffixLen]
[!, body, ., hasCapturingGroup, (, )]
[body, ., hasCapturingGroup, (, )]
[body]
[--, expanded, >=, 0]
[--, expanded]
[expanded]
[0]
[sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, )]
[sb]
[sb]
[bodyStart]
[bodyEnd]
[min]
[expandedMin]
[max]
[expandedMax]
[max, ==, Integer, ., MAX_VALUE]
[max]
[Integer, ., MAX_VALUE]
[Integer]
[min]
[0]
[sb, ., append, (, '*', )]
[sb]
['*']
[1]
[sb, ., append, (, '+', )]
[sb]
['+']
[sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ",}", )]
[sb, ., append, (, '{', ), ., append, (, min, )]
[sb, ., append, (, '{', )]
[sb]
['{']
[min]
[",}"]
[min, ==, 0, &&, max, ==, 1]
[min, ==, 0]
[min]
[0]
[max, ==, 1]
[max]
[1]
[sb, ., append, (, '?', )]
[sb]
['?']
[min, ==, max]
[min]
[max]
[min, !=, 1]
[min]
[1]
[sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, '}', )]
[sb, ., append, (, '{', ), ., append, (, min, )]
[sb, ., append, (, '{', )]
[sb]
['{']
[min]
['}']
[sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ',', ), ., append, (, max, ), ., append, (, '}', )]
[sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ',', ), ., append, (, max, )]
[sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ',', )]
[sb, ., append, (, '{', ), ., append, (, min, )]
[sb, ., append, (, '{', )]
[sb]
['{']
[min]
[',']
[max]
['}']
[!, greedy]
[greedy]
[sb, ., append, (, '?', )]
[sb]
['?']
[sb, ., append, (, " min=", ), ., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, )]
[sb, ., append, (, " min=", ), ., append, (, min, ), ., append, (, ", max=", )]
[sb, ., append, (, " min=", ), ., append, (, min, )]
[sb, ., append, (, " min=", )]
[sb]
[" min="]
[min]
[", max="]
[max]
[!, greedy]
[greedy]
[sb, ., append, (, "  not_greedy", )]
[sb]
["  not_greedy"]
[!, (, o, instanceof, Repetition, )]
[(, o, instanceof, Repetition, )]
[o, instanceof, Repetition]
[o]
[false]
[(, Repetition, ), o]
[o]
[this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==, that, ., greedy]
[this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max]
[this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min]
[this, ., body, ., equals, (, that, ., body, )]
[this, ., body]
[this]
[that, ., body]
[that]
[this, ., min, ==, that, ., min]
[this, ., min]
[this]
[that, ., min]
[that]
[this, ., max, ==, that, ., max]
[this, ., max]
[this]
[that, ., max]
[that]
[this, ., greedy, ==, that, ., greedy]
[this, ., greedy]
[this]
[that, ., greedy]
[that]
[min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), ), )]
[min]
[31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), ), )]
[31]
[(, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), ), )]
[max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), )]
[max]
[31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), )]
[31]
[(, (, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, ), )]
[(, greedy, ?, 1, :, 0, ), +, 31, *, body, ., hashCode, (, )]
[(, greedy, ?, 1, :, 0, )]
[greedy, ?, 1, :, 0]
[greedy]
[1]
[0]
[31, *, body, ., hashCode, (, )]
[31]
[body, ., hashCode, (, )]
[body]
[this, ., alternatives]
[this]
[ImmutableList, ., copyOf, (, alternatives, )]
[ImmutableList]
[alternatives]
[Lists, ., newArrayList, (, )]
[Lists]
[this, ., alternatives]
[this]
[alternative]
[alternative, ., simplify, (, flags, )]
[alternative]
[flags]
[alternative, instanceof, Alternation]
[alternative]
[alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, )]
[alternatives]
[(, (, Alternation, ), alternative, ), ., alternatives]
[(, (, Alternation, ), alternative, )]
[(, Alternation, ), alternative]
[alternative]
[alternatives, ., add, (, alternative, )]
[alternatives]
[alternative]
[null]
[alternatives, ., iterator, (, )]
[alternatives]
[it, ., hasNext, (, )]
[it]
[it, ., next, (, )]
[it]
[alternative, ., equals, (, NEVER_MATCHES, )]
[alternative]
[NEVER_MATCHES]
[alternative, ., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (, )]
[alternative, ., equals, (, last, )]
[alternative]
[last]
[!, alternative, ., hasCapturingGroup, (, )]
[alternative, ., hasCapturingGroup, (, )]
[alternative]
[it, ., remove, (, )]
[it]
[last]
[alternative]
[0]
[alternatives, ., size, (, )]
[alternatives]
[i, <, n]
[i]
[n]
[++, i]
[i]
[alternatives, ., get, (, i, )]
[alternatives]
[i]
[(, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset]
[(, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, )]
[alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1]
[alternative, instanceof, Text]
[alternative]
[(, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1]
[(, (, Text, ), alternative, ), ., text, ., length, (, )]
[(, (, Text, ), alternative, ), ., text]
[(, (, Text, ), alternative, )]
[(, Text, ), alternative]
[alternative]
[1]
[alternative, instanceof, Charset]
[alternative]
[i]
[0]
[end, <, n]
[end]
[n]
[alternatives, ., get, (, end, )]
[alternatives]
[end]
[follower, instanceof, Charset]
[follower]
[++, nCharsets]
[nCharsets]
[!, (, follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1, )]
[(, follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1, )]
[follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1]
[follower, instanceof, Text]
[follower]
[(, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1]
[(, (, Text, ), follower, ), ., text, ., length, (, )]
[(, (, Text, ), follower, ), ., text]
[(, (, Text, ), follower, )]
[(, Text, ), follower]
[follower]
[1]
[++, end]
[end]
[end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, )]
[end, -, i, >=, 3]
[end, -, i]
[end]
[i]
[3]
[(, nCharsets, !=, 0, &&, end, -, i, >=, 2, )]
[nCharsets, !=, 0, &&, end, -, i, >=, 2]
[nCharsets, !=, 0]
[nCharsets]
[0]
[end, -, i, >=, 2]
[end, -, i]
[end]
[i]
[2]
[new, int, [, end, -, i, -, nCharsets, ]]
[end, -, i, -, nCharsets]
[end, -, i]
[end]
[i]
[nCharsets]
[0]
[CharRanges, ., EMPTY]
[CharRanges]
[CharRanges, ., EMPTY]
[CharRanges]
[alternatives, ., subList, (, i, ,, end, )]
[alternatives]
[i]
[end]
[charAlternatives]
[charAlternative, instanceof, Text]
[charAlternative]
[(, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, )]
[(, (, Text, ), charAlternative, ), ., text]
[(, (, Text, ), charAlternative, )]
[(, Text, ), charAlternative]
[charAlternative]
[0]
[members, [, memberIdx, ++, ]]
[members]
[memberIdx, ++]
[memberIdx]
[ch]
[IE_SPEC_ERRORS, ., contains, (, ch, )]
[IE_SPEC_ERRORS]
[ch]
[ieExplicits]
[ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), )]
[ieExplicits]
[CharRanges, ., inclusive, (, ch, ,, ch, )]
[CharRanges]
[ch]
[ch]
[charAlternative, instanceof, Charset]
[charAlternative]
[(, Charset, ), charAlternative]
[charAlternative]
[chars]
[chars, ., union, (, cs, ., ranges, )]
[chars]
[cs, ., ranges]
[cs]
[ieExplicits]
[ieExplicits, ., union, (, cs, ., ieExplicits, )]
[ieExplicits]
[cs, ., ieExplicits]
[cs]
[chars]
[chars, ., union, (, CharRanges, ., withMembers, (, members, ), )]
[chars]
[CharRanges, ., withMembers, (, members, )]
[CharRanges]
[members]
[charAlternatives, ., clear, (, )]
[charAlternatives]
[charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), )]
[charAlternatives]
[new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, )]
[new, Charset, (, chars, ,, ieExplicits, )]
[chars]
[ieExplicits]
[flags]
[n]
[alternatives, ., size, (, )]
[alternatives]
[alternatives, ., size, (, )]
[alternatives]
[0]
[Empty, ., INSTANCE]
[Empty]
[1]
[alternatives, ., get, (, 0, )]
[alternatives]
[0]
[2]
[alternatives, ., get, (, 1, ), instanceof, Empty]
[alternatives, ., get, (, 1, )]
[alternatives]
[1]
[new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true, )]
[alternatives, ., get, (, 0, )]
[alternatives]
[0]
[0]
[1]
[true]
[alternatives, ., get, (, 0, ), instanceof, Empty]
[alternatives, ., get, (, 0, )]
[alternatives]
[0]
[new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false, )]
[alternatives, ., get, (, 1, )]
[alternatives]
[1]
[0]
[1]
[false]
[alternatives, ., equals, (, this, ., alternatives, ), ?, this, :, new, Alternation, (, alternatives, )]
[alternatives, ., equals, (, this, ., alternatives, )]
[alternatives]
[this, ., alternatives]
[this]
[this]
[new, Alternation, (, alternatives, )]
[alternatives]
[alternatives]
[alternative, ., isCaseSensitive, (, )]
[alternative]
[true]
[false]
[alternatives]
[alternative, ., containsAnchor, (, )]
[alternative]
[true]
[false]
[0]
[alternatives]
[n]
[alternative, ., numCapturingGroups, (, )]
[alternative]
[n]
[alternatives]
[0]
[alternatives, ., size, (, )]
[alternatives]
[i, <, n]
[i]
[n]
[++, i]
[i]
[i, !=, 0]
[i]
[0]
[sb, ., append, (, '|', )]
[sb]
['|']
[alternatives, ., get, (, i, ), ., appendSourceCode, (, sb, )]
[alternatives, ., get, (, i, )]
[alternatives]
[i]
[sb]
[this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), )]
[this, ==, o]
[this]
[o]
[(, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, ), )]
[(, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, )]
[(, o, instanceof, Alternation, )]
[o, instanceof, Alternation]
[o]
[alternatives, ., equals, (, (, (, Alternation, ), o, ), ., alternatives, )]
[alternatives]
[(, (, Alternation, ), o, ), ., alternatives]
[(, (, Alternation, ), o, )]
[(, Alternation, ), o]
[o]
[0x51b57cd1, ^, alternatives, ., hashCode, (, )]
[0x51b57cd1]
[alternatives, ., hashCode, (, )]
[alternatives]
[new, LookaheadAssertion, (, Empty, ., INSTANCE, ,, false, )]
[Empty, ., INSTANCE]
[Empty]
[false]
[this, ., body]
[this]
[body]
[this, ., positive]
[this]
[positive]
[body, ., simplify, (, flags, )]
[body]
[flags]
[simpleBody, instanceof, Empty]
[simpleBody]
[positive]
[simpleBody]
[new, LookaheadAssertion, (, simpleBody, ,, positive, )]
[simpleBody]
[positive]
[body, ., isCaseSensitive, (, )]
[body]
[body, ., containsAnchor, (, )]
[body]
[body, ., numCapturingGroups, (, )]
[body]
[ImmutableList, ., of, (, body, )]
[ImmutableList]
[body]
[sb, ., append, (, positive, ?, "(?=", :, "(?!", )]
[sb]
[positive, ?, "(?=", :, "(?!"]
[positive]
["(?="]
["(?!"]
[body, ., appendSourceCode, (, sb, )]
[body]
[sb]
[sb, ., append, (, ')', )]
[sb]
[')']
[sb, ., append, (, positive, ?, "positive", :, "negative", )]
[sb]
[positive, ?, "positive", :, "negative"]
[positive]
["positive"]
["negative"]
[!, (, o, instanceof, LookaheadAssertion, )]
[(, o, instanceof, LookaheadAssertion, )]
[o, instanceof, LookaheadAssertion]
[o]
[false]
[(, LookaheadAssertion, ), o]
[o]
[this, ., positive, ==, that, ., positive, &&, this, ., body, ., equals, (, that, ., body, )]
[this, ., positive, ==, that, ., positive]
[this, ., positive]
[this]
[that, ., positive]
[that]
[this, ., body, ., equals, (, that, ., body, )]
[this, ., body]
[this]
[that, ., body]
[that]
[0x723aba9, ^, body, ., hashCode, (, )]
[0x723aba9]
[body, ., hashCode, (, )]
[body]
[this, ., body]
[this]
[body]
[new, CapturingGroup, (, body, ., simplify, (, flags, ), )]
[body, ., simplify, (, flags, )]
[body]
[flags]
[body, ., isCaseSensitive, (, )]
[body]
[body, ., containsAnchor, (, )]
[body]
[1]
[ImmutableList, ., of, (, body, )]
[ImmutableList]
[body]
[sb, ., append, (, '(', )]
[sb]
['(']
[body, ., appendSourceCode, (, sb, )]
[body]
[sb]
[sb, ., append, (, ')', )]
[sb]
[')']
[o, instanceof, CapturingGroup, &&, body, ., equals, (, (, (, CapturingGroup, ), o, ), ., body, )]
[o, instanceof, CapturingGroup]
[o]
[body, ., equals, (, (, (, CapturingGroup, ), o, ), ., body, )]
[body]
[(, (, CapturingGroup, ), o, ), ., body]
[(, (, CapturingGroup, ), o, )]
[(, CapturingGroup, ), o]
[o]
[0x55781738, ^, body, ., hashCode, (, )]
[0x55781738]
[body, ., hashCode, (, )]
[body]
[CharRanges, ., inclusive, (, '0', ,, '9', )]
[CharRanges]
['0']
['9']
[CharRanges, ., inclusive, (, 'A', ,, 'Z', )]
[CharRanges]
['A']
['Z']
[CharRanges, ., inclusive, (, 'a', ,, 'z', )]
[CharRanges]
['a']
['z']
[UCASE_LETTERS, ., union, (, LCASE_LETTERS, )]
[UCASE_LETTERS]
[LCASE_LETTERS]
[DIGITS, ., union, (, LETTERS, ), ., union, (, CharRanges, ., withMembers, (, '_', ), )]
[DIGITS, ., union, (, LETTERS, )]
[DIGITS]
[LETTERS]
[CharRanges, ., withMembers, (, '_', )]
[CharRanges]
['_']
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[WORD_CHARS]
[CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', )]
[CharRanges]
['\t']
['\n']
['\u000b']
['\u000c']
['\r']
[' ']
['\u00a0']
['\u1680']
['\u180e']
['\u2000']
['\u2001']
['\u2002']
['\u2003']
['\u2004']
['\u2005']
['\u2006']
['\u2007']
['\u2008']
['\u2009']
['\u200a']
['\u2028']
['\u2029']
['\u202f']
['\u205f']
['\u3000']
['\ufeff']
[CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', )]
[CharRanges]
['\t']
['\n']
['\u000b']
['\u000c']
['\r']
[' ']
[SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, )]
[SPACE_CHARS]
[IE_SPACE_CHARS]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, )]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, )]
[ImmutableMap]
['d']
[DIGITS]
['D']
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[DIGITS]
['s']
[SPACE_CHARS]
['S']
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[SPACE_CHARS]
['w']
[WORD_CHARS]
['W']
[INVERSE_WORD_CHARS]
[new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,, CharRanges, ., EMPTY, )]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', )]
[CharRanges]
['\n']
['\r']
['\u2028']
['\u2029']
[CharRanges, ., EMPTY]
[CharRanges]
[this, ., ranges]
[this]
[ranges]
[this, ., ieExplicits]
[this]
[ieExplicits]
[Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ), )]
[Math]
[complexityWordFoldedHelper, (, ranges, )]
[ranges]
[1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), )]
[1]
[complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), )]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[ranges]
[DecomposedCharset, ., complexity, (, ranges, )]
[DecomposedCharset]
[ranges]
[ranges, ., containsAll, (, WORD_CHARS, )]
[ranges]
[WORD_CHARS]
[complexity]
[Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), )]
[Math]
[complexity]
[1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), )]
[1]
[DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), )]
[DecomposedCharset]
[ranges, ., difference, (, WORD_CHARS, )]
[ranges]
[WORD_CHARS]
[ranges, ., containsAll, (, INVERSE_WORD_CHARS, )]
[ranges]
[INVERSE_WORD_CHARS]
[complexity]
[Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), )]
[Math]
[complexity]
[1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), )]
[1]
[DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), )]
[DecomposedCharset]
[ranges, ., difference, (, INVERSE_WORD_CHARS, )]
[ranges]
[INVERSE_WORD_CHARS]
[complexity]
[ranges, ., isEmpty, (, )]
[ranges]
[NEVER_MATCHES]
[ranges]
[flags, ., indexOf, (, 'i', ), >=, 0]
[flags, ., indexOf, (, 'i', )]
[flags]
['i']
[0]
[Sets, ., newLinkedHashSet, (, )]
[Sets]
[options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), )]
[options]
[CaseCanonicalize, ., expandToAllMatched, (, ranges, )]
[CaseCanonicalize]
[ranges]
[options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), )]
[options]
[CaseCanonicalize, ., reduceToMinimum, (, ranges, )]
[CaseCanonicalize]
[ranges]
[ranges, ., intersection, (, LCASE_LETTERS, )]
[ranges]
[LCASE_LETTERS]
[ranges, ., intersection, (, UCASE_LETTERS, )]
[ranges]
[UCASE_LETTERS]
[lcaseLetters, ., shift, (, -, 32, )]
[lcaseLetters]
[-, 32]
[32]
[ucaseLetters, ., shift, (, 32, )]
[ucaseLetters]
[32]
[options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), )]
[options]
[ranges, ., union, (, ucaseLettersToLower, )]
[ranges]
[ucaseLettersToLower]
[options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), )]
[options]
[ranges, ., union, (, lcaseLettersToUpper, )]
[ranges]
[lcaseLettersToUpper]
[options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), )]
[options]
[ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, )]
[ranges, ., union, (, lcaseLettersToUpper, )]
[ranges]
[lcaseLettersToUpper]
[ucaseLettersToLower]
[options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), )]
[options]
[ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, )]
[ranges, ., union, (, ucaseLettersToLower, )]
[ranges]
[ucaseLettersToLower]
[ucaseLetters]
[options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), )]
[options]
[ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, )]
[ranges, ., union, (, lcaseLettersToUpper, )]
[ranges]
[lcaseLettersToUpper]
[lcaseLetters]
[complexityWordFolded, (, ranges, )]
[ranges]
[options]
[complexityWordFolded, (, option, )]
[option]
[complexity, <, bestComplexity]
[complexity]
[bestComplexity]
[bestComplexity]
[complexity]
[best]
[option]
[best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1]
[best, ., getNumRanges, (, ), ==, 1]
[best, ., getNumRanges, (, )]
[best]
[1]
[best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1]
[best, ., end, (, 0, ), -, best, ., start, (, 0, )]
[best, ., end, (, 0, )]
[best]
[0]
[best, ., start, (, 0, )]
[best]
[0]
[1]
[new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (, 0, ), ), )]
[Character, ., toString, (, (, char, ), best, ., start, (, 0, ), )]
[Character]
[(, char, ), best, ., start, (, 0, )]
[best, ., start, (, 0, )]
[best]
[0]
[!, best, ., equals, (, ranges, )]
[best, ., equals, (, ranges, )]
[best]
[ranges]
[new, Charset, (, best, ,, ieExplicits, )]
[best]
[ieExplicits]
[this]
[decompose, (, ), ., ranges]
[decompose, (, )]
[!, withoutNamedGroups, ., equals, (, CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, ), )]
[withoutNamedGroups, ., equals, (, CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, ), )]
[withoutNamedGroups]
[CaseCanonicalize, ., expandToAllMatched, (, withoutNamedGroups, )]
[CaseCanonicalize]
[withoutNamedGroups]
[new, StringBuilder, (, )]
[ranges, ., intersection, (, ieExplicits, )]
[ranges]
[ieExplicits]
[true]
[0]
[null]
[DecomposedCharset, ., complexity, (, ranges, )]
[DecomposedCharset]
[ranges]
[NAMED_CHAR_GROUPS, ., entrySet, (, )]
[NAMED_CHAR_GROUPS]
[namedGroup, ., getValue, (, )]
[namedGroup]
[ranges, ., containsAll, (, group, )]
[ranges]
[group]
[ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, )]
[ranges, ., difference, (, group, )]
[ranges]
[group]
[rangesInterIeExplicits]
[DecomposedCharset, ., complexity, (, withoutGroup, )]
[DecomposedCharset]
[withoutGroup]
[complexity, <, minComplexity]
[complexity]
[minComplexity]
[simplest]
[withoutGroup]
[groupName]
[namedGroup, ., getKey, (, ), ., charValue, (, )]
[namedGroup, ., getKey, (, )]
[namedGroup]
[minComplexity]
[complexity]
[simplest, !=, null]
[simplest]
[null]
[namedGroups, ., append, (, '\\', ), ., append, (, groupName, )]
[namedGroups, ., append, (, '\\', )]
[namedGroups]
['\\']
[groupName]
[ranges]
[simplest]
[new, DecomposedCharset, (, inverted, ,, ranges, ,, namedGroups, ., toString, (, ), )]
[inverted]
[ranges]
[namedGroups, ., toString, (, )]
[namedGroups]
[DOT_CHARSET, ., ranges, ., equals, (, ranges, )]
[DOT_CHARSET, ., ranges]
[DOT_CHARSET]
[ranges]
[sb, ., append, (, '.', )]
[sb]
['.']
[decompose, (, ), ., appendSourceCode, (, sb, )]
[decompose, (, )]
[sb]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, )]
[CharRanges, ., ALL_CODE_UNITS]
[CharRanges]
[ranges]
[!, ieExplicits, ., isEmpty, (, )]
[ieExplicits, ., isEmpty, (, )]
[ieExplicits]
[negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, )]
[negRanges, ., intersection, (, ieExplicits, )]
[negRanges]
[ieExplicits]
[decompose, (, ranges, ,, false, )]
[ranges]
[false]
[ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, )]
[ranges, ., intersection, (, ieExplicits, )]
[ranges]
[ieExplicits]
[decompose, (, negRanges, ,, true, )]
[negRanges]
[true]
[decompose, (, ranges, ,, false, )]
[ranges]
[false]
[decompose, (, negRanges, ,, true, )]
[negRanges]
[true]
[positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :, negative]
[positive, ., complexity, (, ), <=, negative, ., complexity, (, )]
[positive, ., complexity, (, )]
[positive]
[negative, ., complexity, (, )]
[negative]
[positive]
[negative]
[sb, ., append, (, ranges, )]
[sb]
[ranges]
[o, instanceof, Charset, &&, ranges, ., equals, (, (, (, Charset, ), o, ), ., ranges, )]
[o, instanceof, Charset]
[o]
[ranges, ., equals, (, (, (, Charset, ), o, ), ., ranges, )]
[ranges]
[(, (, Charset, ), o, ), ., ranges]
[(, (, Charset, ), o, )]
[(, Charset, ), o]
[o]
[ranges, ., hashCode, (, ), ^, 0xdede2246]
[ranges, ., hashCode, (, )]
[ranges]
[0xdede2246]
[this, ., inverted]
[this]
[inverted]
[this, ., ranges]
[this]
[ranges]
[this, ., namedGroups]
[this]
[namedGroups]
[(, inverted, ?, 1, :, 0, ), +, namedGroups, ., length, (, ), +, complexity, (, ranges, )]
[(, inverted, ?, 1, :, 0, ), +, namedGroups, ., length, (, )]
[(, inverted, ?, 1, :, 0, )]
[inverted, ?, 1, :, 0]
[inverted]
[1]
[0]
[namedGroups, ., length, (, )]
[namedGroups]
[complexity, (, ranges, )]
[ranges]
[ranges, ., isEmpty, (, )]
[ranges]
[!, inverted, &&, namedGroups, ., length, (, ), ==, 2]
[!, inverted]
[inverted]
[namedGroups, ., length, (, ), ==, 2]
[namedGroups, ., length, (, )]
[namedGroups]
[2]
[sb, ., append, (, namedGroups, )]
[sb]
[namedGroups]
[ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0]
[ranges, ., isEmpty, (, )]
[ranges]
[namedGroups, ., length, (, ), ==, 0]
[namedGroups, ., length, (, )]
[namedGroups]
[0]
[sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", )]
[sb]
[inverted, ?, "[\\S\\s]", :, "(?!)"]
[inverted]
["[\\S\\s]"]
["(?!)"]
[sb, ., append, (, '[', )]
[sb]
['[']
[inverted]
[sb, ., append, (, '^', )]
[sb]
['^']
[sb, ., append, (, namedGroups, )]
[sb]
[namedGroups]
[!, inverted, &&, namedGroups, ., length, (, ), ==, 0]
[!, inverted]
[inverted]
[namedGroups, ., length, (, ), ==, 0]
[namedGroups, ., length, (, )]
[namedGroups]
[0]
[false]
[0]
[ranges, ., getNumRanges, (, )]
[ranges]
[i, <, n]
[i]
[n]
[++, i]
[i]
[(, char, ), ranges, ., start, (, i, )]
[ranges, ., start, (, i, )]
[ranges]
[i]
[(, char, ), (, ranges, ., end, (, i, ), -, 1, )]
[(, ranges, ., end, (, i, ), -, 1, )]
[ranges, ., end, (, i, ), -, 1]
[ranges, ., end, (, i, )]
[ranges]
[i]
[1]
[end, -, start]
[end]
[start]
[0]
[start, ==, '-']
[start]
['-']
[emitDashAtEnd]
[true]
[escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==, n, ,, sb, )]
[start]
[rangesStartCharset]
[i, ==, 0]
[i]
[0]
[i, +, 1, ==, n]
[i, +, 1]
[i]
[1]
[n]
[sb]
[1]
[escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, )]
[start]
[rangesStartCharset]
[i, ==, 0]
[i]
[0]
[false]
[sb]
[escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, )]
[end]
[rangesStartCharset]
[false]
[i, +, 1, ==, n]
[i, +, 1]
[i]
[1]
[n]
[sb]
[escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, )]
[start]
[rangesStartCharset]
[i, ==, 0]
[i]
[0]
[false]
[sb]
[sb, ., append, (, '-', )]
[sb]
['-']
[escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, )]
[end]
[rangesStartCharset]
[false]
[true]
[sb]
[emitDashAtEnd]
[sb, ., append, (, '-', )]
[sb]
['-']
[sb, ., append, (, ']', )]
[sb]
[']']
[ch]
['\b']
[sb, ., append, (, "\\b", )]
[sb]
["\\b"]
['^']
[sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", )]
[sb]
[atStart, &&, startIsFlush, ?, "\\^", :, "^"]
[atStart, &&, startIsFlush]
[atStart]
[startIsFlush]
["\\^"]
["^"]
['-']
[sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", )]
[sb]
[atStart, ||, atEnd, ?, "-", :, "\\-"]
[atStart, ||, atEnd]
[atStart]
[atEnd]
["-"]
["\\-"]
['\\']
[']']
[sb, ., append, (, '\\', ), ., append, (, ch, )]
[sb, ., append, (, '\\', )]
[sb]
['\\']
[ch]
[escapeCharOnto, (, ch, ,, sb, )]
[ch]
[sb]
[0]
[0]
[ranges, ., getNumRanges, (, )]
[ranges]
[i, <, n]
[i]
[n]
[++, i]
[i]
[ranges, ., start, (, i, )]
[ranges]
[i]
[ranges, ., end, (, i, ), -, 1]
[ranges, ., end, (, i, )]
[ranges]
[i]
[1]
[start, <, 0x20, ||, start, >=, 0x7f]
[start, <, 0x20]
[start]
[0x20]
[start, >=, 0x7f]
[start]
[0x7f]
[complexity]
[start, >=, 0x100, ?, 6, :, 4]
[start, >=, 0x100]
[start]
[0x100]
[6]
[4]
[++, complexity]
[complexity]
[end, -, start]
[end]
[start]
[0]
[1]
[complexity]
[1]
[end, <, 0x20, ||, end, >=, 0x7f]
[end, <, 0x20]
[end]
[0x20]
[end, >=, 0x7f]
[end]
[0x7f]
[complexity]
[end, >=, 0x100, ?, 6, :, 4]
[end, >=, 0x100]
[end]
[0x100]
[6]
[4]
[++, complexity]
[complexity]
[complexity]
[!, (, o, instanceof, DecomposedCharset, )]
[(, o, instanceof, DecomposedCharset, )]
[o, instanceof, DecomposedCharset]
[o]
[false]
[(, DecomposedCharset, ), o]
[o]
[this, ., inverted]
[this]
[that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (, that, ., namedGroups, )]
[that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, )]
[that, ., inverted]
[that]
[this, ., ranges, ., equals, (, that, ., ranges, )]
[this, ., ranges]
[this]
[that, ., ranges]
[that]
[this, ., namedGroups, ., equals, (, that, ., namedGroups, )]
[this, ., namedGroups]
[this]
[that, ., namedGroups]
[that]
[ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), )]
[ranges, ., hashCode, (, )]
[ranges]
[31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), )]
[31]
[(, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, ), )]
[namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :, 0, )]
[namedGroups, ., hashCode, (, )]
[namedGroups]
[(, inverted, ?, 1, :, 0, )]
[inverted, ?, 1, :, 0]
[inverted]
[1]
[0]
[elements]
[ImmutableList, ., of, (, a, ,, b, )]
[ImmutableList]
[a]
[b]
[this, ., elements]
[this]
[ImmutableList, ., copyOf, (, elements, )]
[ImmutableList]
[elements]
[Lists, ., newArrayList, (, )]
[Lists]
[t, instanceof, Concatenation]
[t]
[(, (, Concatenation, ), t, ), ., elements]
[(, (, Concatenation, ), t, )]
[(, Concatenation, ), t]
[t]
[simplify, (, child, )]
[child]
[t, instanceof, Empty]
[t]
[simplified, ., size, (, ), -, 1]
[simplified, ., size, (, )]
[simplified]
[1]
[lastIndex, >=, 0]
[lastIndex]
[0]
[simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, )]
[simplified, ., get, (, lastIndex, )]
[simplified]
[lastIndex]
[t]
[pairwise, !=, null]
[pairwise]
[null]
[simplified, ., set, (, lastIndex, ,, pairwise, )]
[simplified]
[lastIndex]
[pairwise]
[simplified, ., add, (, t, )]
[simplified]
[t]
[before, instanceof, Text, &&, after, instanceof, Text]
[before, instanceof, Text]
[before]
[after, instanceof, Text]
[after]
[new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, )]
[new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text, ), after, ), ., text, )]
[(, (, Text, ), before, ), ., text, +, (, (, Text, ), after, ), ., text]
[(, (, Text, ), before, ), ., text]
[(, (, Text, ), before, )]
[(, Text, ), before]
[before]
[(, (, Text, ), after, ), ., text]
[(, (, Text, ), after, )]
[(, Text, ), after]
[after]
[flags]
[1]
[1]
[before]
[false]
[before, instanceof, Repetition]
[before]
[(, Repetition, ), before]
[before]
[beforeMin]
[r, ., min]
[r]
[beforeMax]
[r, ., max]
[r]
[beforeBody]
[r, ., body]
[r]
[beforeGreedy]
[r, ., greedy]
[r]
[1]
[1]
[after]
[false]
[after, instanceof, Repetition]
[after]
[(, Repetition, ), after]
[after]
[afterMin]
[r, ., min]
[r]
[afterMax]
[r, ., max]
[r]
[afterBody]
[r, ., body]
[r]
[afterGreedy]
[r, ., greedy]
[r]
[beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, )]
[beforeBody, ., equals, (, afterBody, )]
[beforeBody]
[afterBody]
[!, beforeBody, ., hasCapturingGroup, (, )]
[beforeBody, ., hasCapturingGroup, (, )]
[beforeBody]
[(, (, long, ), beforeMin, ), +, afterMin]
[(, (, long, ), beforeMin, )]
[(, long, ), beforeMin]
[beforeMin]
[afterMin]
[(, (, long, ), beforeMax, ), +, afterMax]
[(, (, long, ), beforeMax, )]
[(, long, ), beforeMax]
[beforeMax]
[afterMax]
[lmin, <, Integer, ., MAX_VALUE]
[lmin]
[Integer, ., MAX_VALUE]
[Integer]
[(, int, ), lmin]
[lmin]
[lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax]
[lmax, >=, Integer, ., MAX_VALUE]
[lmax]
[Integer, ., MAX_VALUE]
[Integer]
[Integer, ., MAX_VALUE]
[Integer]
[(, int, ), lmax]
[lmax]
[new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, )]
[beforeBody]
[min]
[max]
[beforeGreedy, ||, afterGreedy, ||, min, ==, max]
[beforeGreedy, ||, afterGreedy]
[beforeGreedy]
[afterGreedy]
[min, ==, max]
[min]
[max]
[null]
[new, Simplifier, (, )]
[elements]
[s, ., simplify, (, element, ., simplify, (, flags, ), )]
[s]
[element, ., simplify, (, flags, )]
[element]
[flags]
[s, ., simplified, ., size, (, )]
[s, ., simplified]
[s]
[0]
[Empty, ., INSTANCE]
[Empty]
[1]
[s, ., simplified, ., get, (, 0, )]
[s, ., simplified]
[s]
[0]
[new, Concatenation, (, s, ., simplified, )]
[s, ., simplified]
[s]
[elements]
[element, ., isCaseSensitive, (, )]
[element]
[true]
[false]
[elements]
[element, ., containsAnchor, (, )]
[element]
[true]
[false]
[0]
[elements]
[n]
[element, ., numCapturingGroups, (, )]
[element]
[n]
[elements]
[false]
[elements]
[false]
[element, instanceof, Alternation, ||, element, instanceof, Concatenation]
[element, instanceof, Alternation]
[element]
[element, instanceof, Concatenation]
[element]
[parenthesize]
[true]
[parenthesize]
[sb, ., append, (, "(?:", )]
[sb]
["(?:"]
[element, ., appendSourceCode, (, sb, )]
[element]
[sb]
[sb, ., append, (, ')', )]
[sb]
[')']
[sb, ., length, (, )]
[sb]
[element, ., appendSourceCode, (, sb, )]
[element]
[sb]
[digitsMightBleed, &&, sb, ., length, (, ), >, start]
[digitsMightBleed]
[sb, ., length, (, ), >, start]
[sb, ., length, (, )]
[sb]
[start]
[sb, ., charAt, (, start, )]
[sb]
[start]
['0', <=, firstChar, &&, firstChar, <=, '9']
['0', <=, firstChar]
['0']
[firstChar]
[firstChar, <=, '9']
[firstChar]
['9']
[sb, ., charAt, (, start, -, 1, ), ==, '{']
[sb, ., charAt, (, start, -, 1, )]
[sb]
[start, -, 1]
[start]
[1]
['{']
[sb, ., insert, (, start, -, 1, ,, '\\', )]
[sb]
[start, -, 1]
[start]
[1]
['\\']
[sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', )]
[sb, ., insert, (, start, ,, "(?:", )]
[sb]
[start]
["(?:"]
[')']
[digitsMightBleed]
[(, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), ), )]
[(, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), )]
[(, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, )]
[element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10]
[element, instanceof, BackReference]
[element]
[(, (, BackReference, ), element, ), ., groupIndex, <, 10]
[(, (, BackReference, ), element, ), ., groupIndex]
[(, (, BackReference, ), element, )]
[(, BackReference, ), element]
[element]
[10]
[(, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", ), )]
[element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (, "{", )]
[element, instanceof, Text]
[element]
[(, (, Text, ), element, ), ., text, ., endsWith, (, "{", )]
[(, (, Text, ), element, ), ., text]
[(, (, Text, ), element, )]
[(, Text, ), element]
[element]
["{"]
[o, instanceof, Concatenation, &&, elements, ., equals, (, (, (, Concatenation, ), o, ), ., elements, )]
[o, instanceof, Concatenation]
[o]
[elements, ., equals, (, (, (, Concatenation, ), o, ), ., elements, )]
[elements]
[(, (, Concatenation, ), o, ), ., elements]
[(, (, Concatenation, ), o, )]
[(, Concatenation, ), o]
[o]
[0x20997e3e, ^, elements, ., hashCode, (, )]
[0x20997e3e]
[elements, ., hashCode, (, )]
[elements]
[ch]
['\u0000']
[sb, ., append, (, "\\0", )]
[sb]
["\\0"]
['\f']
[sb, ., append, (, "\\f", )]
[sb]
["\\f"]
['\t']
[sb, ., append, (, "\\t", )]
[sb]
["\\t"]
['\n']
[sb, ., append, (, "\\n", )]
[sb]
["\\n"]
['\r']
[sb, ., append, (, "\\r", )]
[sb]
["\\r"]
['\\']
[sb, ., append, (, "\\\\", )]
[sb]
["\\\\"]
[ch, <, 0x20, ||, ch, >=, 0x7f]
[ch, <, 0x20]
[ch]
[0x20]
[ch, >=, 0x7f]
[ch]
[0x7f]
[ch, >=, 0x100]
[ch]
[0x100]
[sb, ., append, (, "\\u", )]
[sb]
["\\u"]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, >, >, 12, ), &, 0xf]
[(, ch, >, >, 12, )]
[ch, >, >, 12]
[ch]
[12]
[0xf]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, >, >, 8, ), &, 0xf]
[(, ch, >, >, 8, )]
[ch, >, >, 8]
[ch]
[8]
[0xf]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, >, >, 4, ), &, 0xf]
[(, ch, >, >, 4, )]
[ch, >, >, 4]
[ch]
[4]
[0xf]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, ), &, 0xf]
[(, ch, )]
[ch]
[0xf]
[sb, ., append, (, "\\x", )]
[sb]
["\\x"]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, >, >, 4, ), &, 0xf]
[(, ch, >, >, 4, )]
[ch, >, >, 4]
[ch]
[4]
[0xf]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), )]
[sb]
["0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, )]
["0123456789abcdef"]
[(, ch, ), &, 0xf]
[(, ch, )]
[ch]
[0xf]
[sb, ., append, (, ch, )]
[sb]
[ch]
