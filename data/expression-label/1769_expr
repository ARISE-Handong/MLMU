[DiagnosticType, ., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", )]
[DiagnosticType]
["JSC_NULL_ARGUMENT_ERROR"]
["method \"{0}\" called without an argument"]
[DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", )]
[DiagnosticType]
["JSC_EXPECTED_OBJECTLIT_ERROR"]
["method \"{0}\" expected an object literal argument"]
[DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", )]
[DiagnosticType]
["JSC_EXPECTED_STRING_ERROR"]
["method \"{0}\" expected an object string argument"]
[DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", )]
[DiagnosticType]
["JSC_INVALID_ARGUMENT_ERROR"]
["method \"{0}\" called with invalid argument"]
[DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", )]
[DiagnosticType]
["JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR"]
["Invalid CSS name map style {0}"]
[DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", )]
[DiagnosticType]
["JSC_TOO_MANY_ARGUMENTS_ERROR"]
["method \"{0}\" called with more than one argument"]
[DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", )]
[DiagnosticType]
["JSC_DUPLICATE_NAMESPACE_ERROR"]
["namespace \"{0}\" cannot be provided twice"]
[DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", )]
[DiagnosticType]
["JSC_FUNCTION_NAMESPACE_ERROR"]
["\"{0}\" cannot be both provided and declared as a function"]
[DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", )]
[DiagnosticType]
["JSC_MISSING_PROVIDE_ERROR"]
["required \"{0}\" namespace never provided"]
[DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", )]
[DiagnosticType]
["JSC_LATE_PROVIDE_ERROR"]
["required \"{0}\" namespace not provided yet"]
[DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", )]
[DiagnosticType]
["JSC_INVALID_PROVIDE_ERROR"]
["\"{0}\" is not a valid JS property name"]
[DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", )]
[DiagnosticType]
["JSC_XMODULE_REQUIRE_ERROR"]
["namespace \"{0}\" provided in module {1} ", +, "but required in module {2}"]
["namespace \"{0}\" provided in module {1} "]
["but required in module {2}"]
[DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", )]
[DiagnosticType]
["JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR"]
["goog.setCssNameMapping only takes an object literal with string values"]
[DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", )]
[DiagnosticType]
["INVALID_CSS_RENAMING_MAP"]
["Invalid entries in css renaming map: {0}"]
[DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", )]
[DiagnosticType]
["JSC_BASE_CLASS_ERROR"]
["incorrect use of goog.base: {0}"]
["goog"]
[Maps, ., newTreeMap, (, )]
[Maps]
[Lists, ., newArrayList, (, )]
[Lists]
[Sets, ., newHashSet, (, )]
[Sets]
[this, ., compiler]
[this]
[compiler]
[this, ., preprocessorSymbolTable]
[this]
[preprocessorSymbolTable]
[this, ., moduleGraph]
[this]
[compiler, ., getModuleGraph, (, )]
[compiler]
[this, ., requiresLevel]
[this]
[requiresLevel]
[providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, ), )]
[providedNames]
[GOOG]
[new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, )]
[GOOG]
[null]
[null]
[false]
[exportedVariables]
[new, NodeTraversal, (, compiler, ,, this, ), ., traverse, (, root, )]
[new, NodeTraversal, (, compiler, ,, this, )]
[compiler]
[this]
[root]
[providedNames, ., values, (, )]
[providedNames]
[pn, ., replace, (, )]
[pn]
[requiresLevel, ., isOn, (, )]
[requiresLevel]
[unrecognizedRequires]
[providedNames, ., get, (, r, ., namespace, )]
[providedNames]
[r, ., namespace]
[r]
[expectedName, !=, null, &&, expectedName, ., firstNode, !=, null]
[expectedName, !=, null]
[expectedName]
[null]
[expectedName, ., firstNode, !=, null]
[expectedName, ., firstNode]
[expectedName]
[null]
[error]
[LATE_PROVIDE_ERROR]
[error]
[MISSING_PROVIDE_ERROR]
[compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, ), )]
[compiler]
[JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, )]
[JSError]
[r, ., inputName]
[r]
[r, ., requireNode]
[r]
[requiresLevel]
[error]
[r, ., namespace]
[r]
[this, ., compiler, ., process, (, this, )]
[this, ., compiler]
[this]
[this]
[n, ., getType, (, )]
[n]
[Token, ., CALL]
[Token]
[parent, ., isExprResult, (, )]
[parent]
[n, ., getFirstChild, (, )]
[n]
[left, ., isGetProp, (, )]
[left]
[left, ., getFirstChild, (, )]
[left]
[name, ., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), )]
[name, ., isName, (, )]
[name]
[GOOG, ., equals, (, name, ., getString, (, ), )]
[GOOG]
[name, ., getString, (, )]
[name]
[name, ., getNext, (, ), ., getString, (, )]
[name, ., getNext, (, )]
[name]
["base", ., equals, (, methodName, )]
["base"]
[methodName]
[processBaseClassCall, (, t, ,, n, )]
[t]
[n]
[!, isExpr]
[isExpr]
["require", ., equals, (, methodName, )]
["require"]
[methodName]
[processRequireCall, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
["provide", ., equals, (, methodName, )]
["provide"]
[methodName]
[processProvideCall, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
["exportSymbol", ., equals, (, methodName, )]
["exportSymbol"]
[methodName]
[left, ., getNext, (, )]
[left]
[arg, ., isString, (, )]
[arg]
[arg, ., getString, (, ), ., indexOf, (, '.', )]
[arg, ., getString, (, )]
[arg]
['.']
[dot, ==, -, 1]
[dot]
[-, 1]
[1]
[exportedVariables, ., add, (, arg, ., getString, (, ), )]
[exportedVariables]
[arg, ., getString, (, )]
[arg]
[exportedVariables, ., add, (, arg, ., getString, (, ), ., substring, (, 0, ,, dot, ), )]
[exportedVariables]
[arg, ., getString, (, ), ., substring, (, 0, ,, dot, )]
[arg, ., getString, (, )]
[arg]
[0]
[dot]
["addDependency", ., equals, (, methodName, )]
["addDependency"]
[methodName]
[compiler, ., getCodingConvention, (, )]
[compiler]
[convention, ., identifyTypeDeclarationCall, (, n, )]
[convention]
[n]
[typeDecls, !=, null]
[typeDecls]
[null]
[typeDecls]
[compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[typeDecl]
[parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, ), )]
[parent]
[n]
[IR, ., number, (, 0, )]
[IR]
[0]
[compiler, ., reportCodeChange, (, )]
[compiler]
["setCssNameMapping", ., equals, (, methodName, )]
["setCssNameMapping"]
[methodName]
[processSetCssNameMapping, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., ASSIGN]
[Token]
[Token, ., NAME]
[Token]
[handleCandidateProvideDefinition, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., EXPR_RESULT]
[Token]
[handleTypedefDefinition, (, t, ,, n, ,, parent, )]
[t]
[n]
[parent]
[Token, ., FUNCTION]
[Token]
[t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, )]
[t, ., inGlobalScope, (, )]
[t]
[!, NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil, ., isFunctionExpression, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., getString, (, )]
[n, ., getFirstChild, (, )]
[n]
[providedNames, ., get, (, name, )]
[providedNames]
[name]
[pn, !=, null]
[pn]
[null]
[compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), )]
[compiler]
[t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, )]
[t]
[n]
[FUNCTION_NAMESPACE_ERROR]
[name]
[Token, ., GETPROP]
[Token]
[n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), )]
[n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, )]
[n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, )]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[!, parent, ., isCall, (, )]
[parent, ., isCall, (, )]
[parent]
[!, parent, ., isAssign, (, )]
[parent, ., isAssign, (, )]
[parent]
["goog.base", ., equals, (, n, ., getQualifiedName, (, ), )]
["goog.base"]
[n, ., getQualifiedName, (, )]
[n]
[reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", )]
[t]
[n]
["May only be called directly."]
[n, ., getFirstChild, (, )]
[n]
[left, ., getNext, (, )]
[left]
[verifyArgument, (, t, ,, left, ,, arg, )]
[t]
[left]
[arg]
[arg, ., getString, (, )]
[arg]
[providedNames, ., get, (, ns, )]
[providedNames]
[ns]
[provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, )]
[provided, ==, null]
[provided]
[null]
[!, provided, ., isExplicitlyProvided, (, )]
[provided, ., isExplicitlyProvided, (, )]
[provided]
[unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), )]
[unrecognizedRequires]
[new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), )]
[n]
[ns]
[t, ., getSourceName, (, )]
[t]
[provided, ., explicitModule]
[provided]
[Preconditions, ., checkNotNull, (, providedModule, )]
[Preconditions]
[providedModule]
[t, ., getModule, (, )]
[t]
[moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, )]
[moduleGraph, !=, null, &&, module, !=, providedModule]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[module, !=, providedModule]
[module]
[providedModule]
[!, moduleGraph, ., dependsOn, (, module, ,, providedModule, )]
[moduleGraph, ., dependsOn, (, module, ,, providedModule, )]
[moduleGraph]
[module]
[providedModule]
[compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), )]
[compiler]
[t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), )]
[t]
[n]
[XMODULE_REQUIRE_ERROR]
[ns]
[providedModule, ., getName, (, )]
[providedModule]
[module, ., getName, (, )]
[module]
[maybeAddToSymbolTable, (, left, )]
[left]
[maybeAddStringNodeToSymbolTable, (, arg, )]
[arg]
[provided, !=, null, ||, requiresLevel, ., isOn, (, )]
[provided, !=, null]
[provided]
[null]
[requiresLevel, ., isOn, (, )]
[requiresLevel]
[parent, ., detachFromParent, (, )]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getFirstChild, (, )]
[n]
[left, ., getNext, (, )]
[left]
[verifyProvide, (, t, ,, left, ,, arg, )]
[t]
[left]
[arg]
[arg, ., getString, (, )]
[arg]
[maybeAddToSymbolTable, (, left, )]
[left]
[maybeAddStringNodeToSymbolTable, (, arg, )]
[arg]
[providedNames, ., containsKey, (, ns, )]
[providedNames]
[ns]
[providedNames, ., get, (, ns, )]
[providedNames]
[ns]
[!, previouslyProvided, ., isExplicitlyProvided, (, )]
[previouslyProvided, ., isExplicitlyProvided, (, )]
[previouslyProvided]
[previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, )]
[previouslyProvided]
[parent]
[t, ., getModule, (, )]
[t]
[true]
[compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), )]
[compiler]
[t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, )]
[t]
[n]
[DUPLICATE_NAMESPACE_ERROR]
[ns]
[registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), )]
[ns]
[parent]
[t, ., getModule, (, )]
[t]
[providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,, true, ), )]
[providedNames]
[ns]
[new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,, true, )]
[ns]
[parent]
[t, ., getModule, (, )]
[t]
[true]
[n, ., getFirstChild, (, ), ., getJSDocInfo, (, )]
[n, ., getFirstChild, (, )]
[n]
[t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, )]
[t, ., inGlobalScope, (, ), &&, info, !=, null]
[t, ., inGlobalScope, (, )]
[t]
[info, !=, null]
[info]
[null]
[info, ., hasTypedefType, (, )]
[info]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null]
[name]
[null]
[providedNames, ., get, (, name, )]
[providedNames]
[name]
[pn, !=, null]
[pn]
[null]
[pn, ., addDefinition, (, n, ,, t, ., getModule, (, ), )]
[pn]
[n]
[t, ., getModule, (, )]
[t]
[t, ., inGlobalScope, (, )]
[t]
[null]
[n, ., isName, (, ), &&, parent, ., isVar, (, )]
[n, ., isName, (, )]
[n]
[parent, ., isVar, (, )]
[parent]
[name]
[n, ., getString, (, )]
[n]
[n, ., isAssign, (, ), &&, parent, ., isExprResult, (, )]
[n, ., isAssign, (, )]
[n]
[parent, ., isExprResult, (, )]
[parent]
[name]
[n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null]
[name]
[null]
[parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, )]
[parent]
[Node, ., IS_NAMESPACE]
[Node]
[processProvideFromPreviousPass, (, t, ,, name, ,, parent, )]
[t]
[name]
[parent]
[providedNames, ., get, (, name, )]
[providedNames]
[name]
[pn, !=, null]
[pn]
[null]
[pn, ., addDefinition, (, parent, ,, t, ., getModule, (, ), )]
[pn]
[parent]
[t, ., getModule, (, )]
[t]
[n, ., getFirstChild, (, )]
[n]
[callee, ., getNext, (, )]
[callee]
[thisArg, ==, null, ||, !, thisArg, ., isThis, (, )]
[thisArg, ==, null]
[thisArg]
[null]
[!, thisArg, ., isThis, (, )]
[thisArg, ., isThis, (, )]
[thisArg]
[reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", )]
[t]
[n]
["First argument must be 'this'."]
[getEnclosingDeclNameNode, (, t, )]
[t]
[enclosingFnNameNode, ==, null]
[enclosingFnNameNode]
[null]
[reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", )]
[t]
[n]
["Could not find enclosing method."]
[enclosingFnNameNode, ., getQualifiedName, (, )]
[enclosingFnNameNode]
[enclosingQname, ., indexOf, (, ".prototype.", ), ==, -, 1]
[enclosingQname, ., indexOf, (, ".prototype.", )]
[enclosingQname]
[".prototype."]
[-, 1]
[1]
[enclosingFnNameNode, ., getParent, (, )]
[enclosingFnNameNode]
[(, enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, )]
[(, enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent, )]
[enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent]
[enclosingParent, ., isAssign, (, )]
[enclosingParent]
[enclosingParent, ., getParent, (, )]
[enclosingParent]
[enclosingParent]
[null]
[maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, )]
[maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, )]
[maybeInheritsExpr, !=, null]
[maybeInheritsExpr]
[null]
[maybeInheritsExpr, ., isExprResult, (, )]
[maybeInheritsExpr]
[maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, )]
[maybeInheritsExpr, ., getFirstChild, (, )]
[maybeInheritsExpr]
[maybeInheritsExpr, ., getFirstChild, (, )]
[maybeInheritsExpr]
["goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, )]
["goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
["goog.inherits"]
[callNode, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[callNode, ., getFirstChild, (, )]
[callNode]
[callNode, ., getLastChild, (, ), ., isQualifiedName, (, )]
[callNode, ., getLastChild, (, )]
[callNode]
[baseClassNode]
[callNode, ., getLastChild, (, )]
[callNode]
[baseClassNode, ==, null]
[baseClassNode]
[null]
[reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", )]
[t]
[n]
["Could not find goog.inherits for base class"]
[n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), )]
[n]
[callee]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), )]
[String]
["%s.call"]
[baseClassNode, ., getQualifiedName, (, )]
[baseClassNode]
[callee]
["goog.base"]
[compiler, ., reportCodeChange, (, )]
[compiler]
[thisArg, ., getNext, (, )]
[thisArg]
[methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, )]
[methodNameNode, ==, null]
[methodNameNode]
[null]
[!, methodNameNode, ., isString, (, )]
[methodNameNode, ., isString, (, )]
[methodNameNode]
[reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", )]
[t]
[n]
["Second argument must name a method."]
[methodNameNode, ., getString, (, )]
[methodNameNode]
[".prototype.", +, methodName]
[".prototype."]
[methodName]
[enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, )]
[enclosingQname, ==, null]
[enclosingQname]
[null]
[!, enclosingQname, ., endsWith, (, ending, )]
[enclosingQname, ., endsWith, (, ending, )]
[enclosingQname]
[ending]
[reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, )]
[t]
[n]
["Enclosing method does not match ", +, methodName]
["Enclosing method does not match "]
[methodName]
[enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, )]
[enclosingFnNameNode, ., getFirstChild, (, )]
[enclosingFnNameNode]
[n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), )]
[n]
[callee]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, )]
[String]
["%s.superClass_.%s.call"]
[className, ., getQualifiedName, (, )]
[className]
[methodName]
[callee]
["goog.base"]
[n, ., removeChild, (, methodNameNode, )]
[n]
[methodNameNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[t, ., getScopeRoot, (, )]
[t]
[NodeUtil, ., isFunctionDeclaration, (, scopeRoot, )]
[NodeUtil]
[scopeRoot]
[scopeRoot, ., getFirstChild, (, )]
[scopeRoot]
[scopeRoot, ., getParent, (, )]
[scopeRoot]
[parent, !=, null]
[parent]
[null]
[parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[parent, ., isAssign, (, )]
[parent]
[parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[parent, ., getLastChild, (, ), ==, scopeRoot]
[parent, ., getLastChild, (, )]
[parent]
[scopeRoot]
[parent, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ., getFirstChild, (, )]
[parent]
[parent, ., isName, (, )]
[parent]
[parent]
[null]
[compiler, ., report, (, t, ., makeError, (, n, ,, BASE_CLASS_ERROR, ,, extraMessage, ), )]
[compiler]
[t, ., makeError, (, n, ,, BASE_CLASS_ERROR, ,, extraMessage, )]
[t]
[n]
[BASE_CLASS_ERROR]
[extraMessage]
[!, providedNames, ., containsKey, (, name, )]
[providedNames, ., containsKey, (, name, )]
[providedNames]
[name]
[new, Node, (, Token, ., EXPR_RESULT, )]
[Token, ., EXPR_RESULT]
[Token]
[expr, ., copyInformationFromForTree, (, parent, )]
[expr]
[parent]
[parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, )]
[parent, ., getParent, (, )]
[parent]
[expr]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[t, ., getModule, (, )]
[t]
[registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, )]
[name]
[expr]
[module]
[new, ProvidedName, (, name, ,, expr, ,, module, ,, true, )]
[name]
[expr]
[module]
[true]
[providedNames, ., put, (, name, ,, provided, )]
[providedNames]
[name]
[provided]
[provided, ., addDefinition, (, parent, ,, module, )]
[provided]
[parent]
[module]
[isNamespacePlaceholder, (, parent, )]
[parent]
[parent, ., getParent, (, ), ., removeChild, (, parent, )]
[parent, ., getParent, (, )]
[parent]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[n, ., getFirstChild, (, )]
[n]
[left, ., getNext, (, )]
[left]
[verifySetCssNameMapping, (, t, ,, left, ,, arg, )]
[t]
[left]
[arg]
[Maps, ., newHashMap, (, )]
[Maps]
[arg, ., getFirstChild, (, )]
[arg]
[key, !=, null]
[key]
[null]
[key]
[key, ., getNext, (, )]
[key]
[key, ., getFirstChild, (, )]
[key]
[!, key, ., isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, )]
[!, key, ., isStringKey, (, ), ||, value, ==, null]
[!, key, ., isStringKey, (, )]
[key, ., isStringKey, (, )]
[key]
[value, ==, null]
[value]
[null]
[!, value, ., isString, (, )]
[value, ., isString, (, )]
[value]
[compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), )]
[compiler]
[t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, )]
[t]
[n]
[NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR]
[cssNames, ., put, (, key, ., getString, (, ), ,, value, ., getString, (, ), )]
[cssNames]
[key, ., getString, (, )]
[key]
[value, ., getString, (, )]
[value]
["BY_PART"]
[arg, ., getNext, (, ), !=, null]
[arg, ., getNext, (, )]
[arg]
[null]
[styleStr]
[arg, ., getNext, (, ), ., getString, (, )]
[arg, ., getNext, (, )]
[arg]
[style]
[CssRenamingMap, ., Style, ., valueOf, (, styleStr, )]
[CssRenamingMap, ., Style]
[CssRenamingMap]
[styleStr]
[compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), )]
[compiler]
[t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, )]
[t]
[n]
[INVALID_STYLE_ERROR]
[styleStr]
[style, ==, CssRenamingMap, ., Style, ., BY_PART]
[style]
[CssRenamingMap, ., Style, ., BY_PART]
[CssRenamingMap, ., Style]
[CssRenamingMap]
[Lists, ., newArrayList, (, )]
[Lists]
[cssNames, ., keySet, (, )]
[cssNames]
[key, ., contains, (, "-", )]
[key]
["-"]
[errors, ., add, (, key, )]
[errors]
[key]
[errors, ., size, (, ), !=, 0]
[errors, ., size, (, )]
[errors]
[0]
[compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), )]
[compiler]
[t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[t]
[n]
[INVALID_CSS_RENAMING_MAP]
[errors, ., toString, (, )]
[errors]
[style, ==, CssRenamingMap, ., Style, ., BY_WHOLE]
[style]
[CssRenamingMap, ., Style, ., BY_WHOLE]
[CssRenamingMap, ., Style]
[CssRenamingMap]
[Lists, ., newArrayList, (, )]
[Lists]
[cssNames, ., entrySet, (, )]
[cssNames]
[b, ., getKey, (, ), ., length, (, ), >, 10]
[b, ., getKey, (, ), ., length, (, )]
[b, ., getKey, (, )]
[b]
[10]
[cssNames, ., entrySet, (, )]
[cssNames]
[cssNames, ., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), )]
[cssNames]
[a, ., getKey, (, ), +, "-", +, b, ., getKey, (, )]
[a, ., getKey, (, ), +, "-"]
[a, ., getKey, (, )]
[a]
["-"]
[b, ., getKey, (, )]
[b]
[combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), )]
[combined, !=, null]
[combined]
[null]
[!, combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), )]
[combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), )]
[combined]
[a, ., getValue, (, ), +, "-", +, b, ., getValue, (, )]
[a, ., getValue, (, ), +, "-"]
[a, ., getValue, (, )]
[a]
["-"]
[b, ., getValue, (, )]
[b]
[errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", )]
[errors]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")"]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, )]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map("]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, )]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map("]
["map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, )]
["map(", +, a, ., getKey, (, ), +, "-"]
["map(", +, a, ., getKey, (, )]
["map("]
[a, ., getKey, (, )]
[a]
["-"]
[b, ., getKey, (, )]
[b]
[") != map("]
[a, ., getKey, (, )]
[a]
[")-map("]
[b, ., getKey, (, )]
[b]
[")"]
[errors, ., size, (, ), !=, 0]
[errors, ., size, (, )]
[errors]
[0]
[compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), )]
[compiler]
[t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[t]
[n]
[INVALID_CSS_RENAMING_MAP]
[errors, ., toString, (, )]
[errors]
[new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value, ), {, if, (, cssNames, ., containsKey, (, value, ), ), {, return, cssNames, ., get, (, value, ), ;, }, else, {, return, value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }]
[cssNames, ., containsKey, (, value, )]
[cssNames]
[value]
[cssNames, ., get, (, value, )]
[cssNames]
[value]
[value]
[style]
[compiler, ., setCssRenamingMap, (, cssRenamingMap, )]
[compiler]
[cssRenamingMap]
[parent, ., getParent, (, ), ., removeChild, (, parent, )]
[parent, ., getParent, (, )]
[parent]
[parent]
[compiler, ., reportCodeChange, (, )]
[compiler]
[!, verifyArgument, (, t, ,, methodName, ,, arg, )]
[verifyArgument, (, t, ,, methodName, ,, arg, )]
[t]
[methodName]
[arg]
[false]
[arg, ., getString, (, ), ., split, (, "\\.", )]
[arg, ., getString, (, )]
[arg]
["\\."]
[!, NodeUtil, ., isValidPropertyName, (, part, )]
[NodeUtil, ., isValidPropertyName, (, part, )]
[NodeUtil]
[part]
[compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), )]
[compiler]
[t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, )]
[t]
[arg]
[INVALID_PROVIDE_ERROR]
[part]
[false]
[true]
[verifyArgument, (, t, ,, methodName, ,, arg, ,, Token, ., STRING, )]
[t]
[methodName]
[arg]
[Token, ., STRING]
[Token]
[null]
[arg, ==, null]
[arg]
[null]
[diagnostic]
[NULL_ARGUMENT_ERROR]
[arg, ., getType, (, ), !=, desiredType]
[arg, ., getType, (, )]
[arg]
[desiredType]
[diagnostic]
[INVALID_ARGUMENT_ERROR]
[arg, ., getNext, (, ), !=, null]
[arg, ., getNext, (, )]
[arg]
[null]
[diagnostic]
[TOO_MANY_ARGUMENTS_ERROR]
[diagnostic, !=, null]
[diagnostic]
[null]
[compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), )]
[compiler]
[t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[t]
[methodName]
[diagnostic]
[methodName, ., getQualifiedName, (, )]
[methodName]
[false]
[true]
[null]
[firstArg, ==, null]
[firstArg]
[null]
[diagnostic]
[NULL_ARGUMENT_ERROR]
[!, firstArg, ., isObjectLit, (, )]
[firstArg, ., isObjectLit, (, )]
[firstArg]
[diagnostic]
[EXPECTED_OBJECTLIT_ERROR]
[firstArg, ., getNext, (, ), !=, null]
[firstArg, ., getNext, (, )]
[firstArg]
[null]
[firstArg, ., getNext, (, )]
[firstArg]
[!, secondArg, ., isString, (, )]
[secondArg, ., isString, (, )]
[secondArg]
[diagnostic]
[EXPECTED_STRING_ERROR]
[secondArg, ., getNext, (, ), !=, null]
[secondArg, ., getNext, (, )]
[secondArg]
[null]
[diagnostic]
[TOO_MANY_ARGUMENTS_ERROR]
[diagnostic, !=, null]
[diagnostic]
[null]
[compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), )]
[compiler]
[t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[t]
[methodName]
[diagnostic]
[methodName, ., getQualifiedName, (, )]
[methodName]
[false]
[true]
[ns, ., indexOf, (, '.', )]
[ns]
['.']
[pos, !=, -, 1]
[pos]
[-, 1]
[1]
[ns, ., substring, (, 0, ,, pos, )]
[ns]
[0]
[pos]
[pos]
[ns, ., indexOf, (, '.', ,, pos, +, 1, )]
[ns]
['.']
[pos, +, 1]
[pos]
[1]
[providedNames, ., containsKey, (, prefixNs, )]
[providedNames]
[prefixNs]
[providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, )]
[providedNames, ., get, (, prefixNs, )]
[providedNames]
[prefixNs]
[node]
[module]
[false]
[providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,, false, ), )]
[providedNames]
[prefixNs]
[new, ProvidedName, (, prefixNs, ,, node, ,, module, ,, false, )]
[prefixNs]
[node]
[module]
[false]
[null]
[null]
[null]
[null]
[null]
[Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), )]
[Preconditions]
[node, ==, null, ||, node, ., isExprResult, (, )]
[node, ==, null]
[node]
[null]
[node, ., isExprResult, (, )]
[node]
[this, ., namespace]
[this]
[namespace]
[this, ., firstNode]
[this]
[node]
[this, ., firstModule]
[this]
[module]
[addProvide, (, node, ,, module, ,, explicit, )]
[node]
[module]
[explicit]
[explicit]
[Preconditions, ., checkState, (, explicitNode, ==, null, )]
[Preconditions]
[explicitNode, ==, null]
[explicitNode]
[null]
[Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), )]
[Preconditions]
[node, ., isExprResult, (, )]
[node]
[explicitNode]
[node]
[explicitModule]
[module]
[updateMinimumModule, (, module, )]
[module]
[explicitNode, !=, null]
[explicitNode]
[null]
[Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), )]
[Preconditions]
[node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, )]
[node, ., isExprResult, (, ), ||, node, ., isFunction, (, )]
[node, ., isExprResult, (, )]
[node]
[node, ., isFunction, (, )]
[node]
[node, ., isVar, (, )]
[node]
[Preconditions, ., checkArgument, (, explicitNode, !=, node, )]
[Preconditions]
[explicitNode, !=, node]
[explicitNode]
[node]
[(, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, )]
[(, candidateDefinition, ==, null, )]
[candidateDefinition, ==, null]
[candidateDefinition]
[null]
[!, node, ., isExprResult, (, )]
[node, ., isExprResult, (, )]
[node]
[candidateDefinition]
[node]
[updateMinimumModule, (, module, )]
[module]
[minimumModule, ==, null]
[minimumModule]
[null]
[minimumModule]
[newModule]
[moduleGraph, !=, null]
[moduleGraph]
[null]
[minimumModule]
[moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, )]
[moduleGraph]
[minimumModule]
[newModule]
[Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", )]
[Preconditions]
[newModule, ==, minimumModule]
[newModule]
[minimumModule]
["Missing module graph"]
[firstNode, ==, null]
[firstNode]
[null]
[replacementNode]
[candidateDefinition]
[candidateDefinition, !=, null, &&, explicitNode, !=, null]
[candidateDefinition, !=, null]
[candidateDefinition]
[null]
[explicitNode, !=, null]
[explicitNode]
[null]
[explicitNode, ., detachFromParent, (, )]
[explicitNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[replacementNode]
[candidateDefinition]
[candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[candidateDefinition, ., isExprResult, (, )]
[candidateDefinition]
[!, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, )]
[candidateDefinition, ., getFirstChild, (, )]
[candidateDefinition]
[candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, )]
[candidateDefinition]
[Node, ., IS_NAMESPACE]
[Node]
[true]
[candidateDefinition, ., getFirstChild, (, )]
[candidateDefinition]
[assignNode, ., getFirstChild, (, )]
[assignNode]
[nameNode, ., isName, (, )]
[nameNode]
[nameNode, ., getNext, (, )]
[nameNode]
[assignNode, ., removeChild, (, nameNode, )]
[assignNode]
[nameNode]
[assignNode, ., removeChild, (, valueNode, )]
[assignNode]
[valueNode]
[nameNode, ., addChildToFront, (, valueNode, )]
[nameNode]
[valueNode]
[IR, ., var, (, nameNode, )]
[IR]
[nameNode]
[varNode, ., copyInformationFrom, (, candidateDefinition, )]
[varNode]
[candidateDefinition]
[candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, )]
[candidateDefinition, ., getParent, (, )]
[candidateDefinition]
[candidateDefinition]
[varNode]
[nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), )]
[nameNode]
[assignNode, ., getJSDocInfo, (, )]
[assignNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[replacementNode]
[varNode]
[replacementNode]
[createDeclarationNode, (, )]
[firstModule, ==, minimumModule]
[firstModule]
[minimumModule]
[firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, )]
[firstNode, ., getParent, (, )]
[firstNode]
[replacementNode]
[firstNode]
[namespace, ., lastIndexOf, (, '.', )]
[namespace]
['.']
[indexOfDot, ==, -, 1]
[indexOfDot]
[-, 1]
[1]
[compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, )]
[compiler, ., getNodeForCodeInsertion, (, minimumModule, )]
[compiler]
[minimumModule]
[replacementNode]
[providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), )]
[providedNames]
[namespace, ., substring, (, 0, ,, indexOfDot, )]
[namespace]
[0]
[indexOfDot]
[Preconditions, ., checkNotNull, (, parentName, )]
[Preconditions]
[parentName]
[Preconditions, ., checkNotNull, (, parentName, ., replacementNode, )]
[Preconditions]
[parentName, ., replacementNode]
[parentName]
[parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, )]
[parentName, ., replacementNode, ., getParent, (, )]
[parentName, ., replacementNode]
[parentName]
[replacementNode]
[parentName, ., replacementNode]
[parentName]
[explicitNode, !=, null]
[explicitNode]
[null]
[explicitNode, ., detachFromParent, (, )]
[explicitNode]
[compiler, ., reportCodeChange, (, )]
[compiler]
[namespace, ., indexOf, (, '.', ), ==, -, 1]
[namespace, ., indexOf, (, '.', )]
[namespace]
['.']
[-, 1]
[1]
[makeVarDeclNode, (, )]
[makeAssignmentExprNode, (, )]
[IR, ., name, (, namespace, )]
[IR]
[namespace]
[name, ., addChildToFront, (, createNamespaceLiteral, (, ), )]
[name]
[createNamespaceLiteral, (, )]
[IR, ., var, (, name, )]
[IR]
[name]
[decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, )]
[decl]
[Node, ., IS_NAMESPACE]
[Node]
[true]
[compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[namespace]
[name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, )]
[name]
[Node, ., IS_CONSTANT_NAME]
[Node]
[true]
[candidateDefinition, ==, null]
[candidateDefinition]
[null]
[name, ., setJSDocInfo, (, createConstantJsDoc, (, ), )]
[name]
[createConstantJsDoc, (, )]
[Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), )]
[Preconditions]
[isNamespacePlaceholder, (, decl, )]
[decl]
[setSourceInfo, (, decl, )]
[decl]
[decl]
[IR, ., objectlit, (, )]
[IR]
[objlit, ., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), )]
[objlit]
[compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, )]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[null]
[objlit]
[IR, ., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), )]
[IR]
[IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), )]
[IR]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[namespace]
[firstNode]
[namespace]
[createNamespaceLiteral, (, )]
[decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, )]
[decl]
[Node, ., IS_NAMESPACE]
[Node]
[true]
[candidateDefinition, ==, null]
[candidateDefinition]
[null]
[decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), )]
[decl, ., getFirstChild, (, )]
[decl]
[createConstantJsDoc, (, )]
[Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), )]
[Preconditions]
[isNamespacePlaceholder, (, decl, )]
[decl]
[setSourceInfo, (, decl, )]
[decl]
[decl]
[new, JSDocInfoBuilder, (, false, )]
[false]
[builder, ., recordConstancy, (, )]
[builder]
[builder, ., build, (, null, )]
[builder]
[null]
[getProvideStringNode, (, )]
[getSourceInfoOffset, (, provideStringNode, )]
[provideStringNode]
[provideStringNode, ==, null, ?, firstNode, :, provideStringNode]
[provideStringNode, ==, null]
[provideStringNode]
[null]
[firstNode]
[provideStringNode]
[newNode, ., copyInformationFromForTree, (, sourceInfoNode, )]
[newNode]
[sourceInfoNode]
[offset, !=, 0]
[offset]
[0]
[newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, )]
[newNode]
[sourceInfoNode, ., getSourcePosition, (, ), +, offset]
[sourceInfoNode, ., getSourcePosition, (, )]
[sourceInfoNode]
[offset]
[provideStringNode, ==, null]
[provideStringNode]
[null]
[0]
[namespace, ., lastIndexOf, (, '.', )]
[namespace]
['.']
[2, +, indexOfLastDot]
[2]
[indexOfLastDot]
[(, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null]
[(, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), )]
[firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, )]
[firstNode, ., getFirstChild, (, ), !=, null]
[firstNode, ., getFirstChild, (, )]
[firstNode]
[null]
[NodeUtil, ., isExprCall, (, firstNode, )]
[NodeUtil]
[firstNode]
[firstNode, ., getFirstChild, (, ), ., getLastChild, (, )]
[firstNode, ., getFirstChild, (, )]
[firstNode]
[null]
[!, n, ., getBooleanProp, (, Node, ., IS_NAMESPACE, )]
[n, ., getBooleanProp, (, Node, ., IS_NAMESPACE, )]
[n]
[Node, ., IS_NAMESPACE]
[Node]
[false]
[null]
[n, ., isExprResult, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[value]
[assign, ., getLastChild, (, )]
[assign]
[n, ., isVar, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[value]
[name, ., getFirstChild, (, )]
[name]
[value, !=, null, &&, value, ., isObjectLit, (, ), &&, !, value, ., hasChildren, (, )]
[value, !=, null, &&, value, ., isObjectLit, (, )]
[value, !=, null]
[value]
[null]
[value, ., isObjectLit, (, )]
[value]
[!, value, ., hasChildren, (, )]
[value, ., hasChildren, (, )]
[value]
[preprocessorSymbolTable, ==, null]
[preprocessorSymbolTable]
[null]
[n, ., getString, (, )]
[n]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, n, ,, name, )]
[NodeUtil]
[compiler, ., getCodingConvention, (, )]
[compiler]
[name]
[n]
[name]
[1]
[1]
[null]
[current]
[syntheticRef]
[current, ., isGetProp, (, )]
[current]
[current]
[current, ., getFirstChild, (, )]
[current]
[current, ., getQualifiedName, (, ), ., length, (, )]
[current, ., getQualifiedName, (, )]
[current]
[current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, )]
[current, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[current, ., getFirstChild, (, )]
[current]
[current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, )]
[current]
[n, ., getSourcePosition, (, ), +, FOR_QUOTE]
[n, ., getSourcePosition, (, )]
[n]
[FOR_QUOTE]
[current, ., setLength, (, fullLen, )]
[current]
[fullLen]
[current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, )]
[current, ., getLastChild, (, )]
[current]
[n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT]
[n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE]
[n, ., getSourcePosition, (, ), +, namespaceLen]
[n, ., getSourcePosition, (, )]
[n]
[namespaceLen]
[FOR_QUOTE]
[FOR_DOT]
[current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), )]
[current, ., getLastChild, (, )]
[current]
[current, ., getLastChild, (, ), ., getString, (, ), ., length, (, )]
[current, ., getLastChild, (, ), ., getString, (, )]
[current, ., getLastChild, (, )]
[current]
[current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, )]
[current]
[n, ., getSourcePosition, (, ), +, FOR_QUOTE]
[n, ., getSourcePosition, (, )]
[n]
[FOR_QUOTE]
[current, ., setLength, (, current, ., getString, (, ), ., length, (, ), )]
[current]
[current, ., getString, (, ), ., length, (, )]
[current, ., getString, (, )]
[current]
[maybeAddToSymbolTable, (, syntheticRef, )]
[syntheticRef]
[preprocessorSymbolTable, !=, null]
[preprocessorSymbolTable]
[null]
[preprocessorSymbolTable, ., addReference, (, n, )]
[preprocessorSymbolTable]
[n]
[this, ., requireNode]
[this]
[requireNode]
[this, ., namespace]
[this]
[namespace]
[this, ., inputName]
[this]
[inputName]
