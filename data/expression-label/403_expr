[isAssignable, (, type, ,, toType, ,, null, )]
[type]
[toType]
[null]
[toType, ==, null, ||, toType, instanceof, Class, <, ?, >]
[toType, ==, null]
[toType]
[null]
[toType, instanceof, Class, <, ?, >]
[toType]
[isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, )]
[type]
[(, Class, <, ?, >, ), toType]
[toType]
[toType, instanceof, ParameterizedType]
[toType]
[isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, )]
[type]
[(, ParameterizedType, ), toType]
[toType]
[typeVarAssigns]
[toType, instanceof, GenericArrayType]
[toType]
[isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, )]
[type]
[(, GenericArrayType, ), toType]
[toType]
[typeVarAssigns]
[toType, instanceof, WildcardType]
[toType]
[isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns, )]
[type]
[(, WildcardType, ), toType]
[toType]
[typeVarAssigns]
[toType, instanceof, TypeVariable, <, ?, >]
[toType]
[isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, )]
[type]
[(, TypeVariable, <, ?, >, ), toType]
[toType]
[typeVarAssigns]
[new, IllegalStateException, (, "found an unhandled type: ", +, toType, )]
["found an unhandled type: ", +, toType]
["found an unhandled type: "]
[toType]
[type, ==, null]
[type]
[null]
[toClass, ==, null, ||, !, toClass, ., isPrimitive, (, )]
[toClass, ==, null]
[toClass]
[null]
[!, toClass, ., isPrimitive, (, )]
[toClass, ., isPrimitive, (, )]
[toClass]
[toClass, ==, null]
[toClass]
[null]
[false]
[toClass, ., equals, (, type, )]
[toClass]
[type]
[true]
[type, instanceof, Class, <, ?, >]
[type]
[ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,, toClass, )]
[ClassUtils]
[(, Class, <, ?, >, ), type]
[type]
[toClass]
[type, instanceof, ParameterizedType]
[type]
[isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,, toClass, )]
[getRawType, (, (, ParameterizedType, ), type, )]
[(, ParameterizedType, ), type]
[type]
[toClass]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[(, (, TypeVariable, <, ?, >, ), type, ), ., getBounds, (, )]
[(, (, TypeVariable, <, ?, >, ), type, )]
[(, TypeVariable, <, ?, >, ), type]
[type]
[isAssignable, (, bound, ,, toClass, )]
[bound]
[toClass]
[true]
[false]
[type, instanceof, GenericArrayType]
[type]
[toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), )]
[toClass, ., equals, (, Object, ., class, )]
[toClass]
[Object, ., class]
[toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), )]
[toClass, ., isArray, (, )]
[toClass]
[isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), )]
[(, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[(, (, GenericArrayType, ), type, )]
[(, GenericArrayType, ), type]
[type]
[toClass, ., getComponentType, (, )]
[toClass]
[type, instanceof, WildcardType]
[type]
[false]
[new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
["found an unhandled type: ", +, type]
["found an unhandled type: "]
[type]
[type, ==, null]
[type]
[null]
[true]
[toParameterizedType, ==, null]
[toParameterizedType]
[null]
[false]
[toParameterizedType, ., equals, (, type, )]
[toParameterizedType]
[type]
[true]
[getRawType, (, toParameterizedType, )]
[toParameterizedType]
[getTypeArguments, (, type, ,, toClass, ,, null, )]
[type]
[toClass]
[null]
[fromTypeVarAssigns, ==, null]
[fromTypeVarAssigns]
[null]
[false]
[fromTypeVarAssigns, ., isEmpty, (, )]
[fromTypeVarAssigns]
[true]
[getTypeArguments, (, toParameterizedType, ,, toClass, ,, typeVarAssigns, )]
[toParameterizedType]
[toClass]
[typeVarAssigns]
[toTypeVarAssigns, ., keySet, (, )]
[toTypeVarAssigns]
[unrollVariableAssignments, (, var, ,, toTypeVarAssigns, )]
[var]
[toTypeVarAssigns]
[unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, )]
[var]
[fromTypeVarAssigns]
[fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), )]
[fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, )]
[fromTypeArg, !=, null]
[fromTypeArg]
[null]
[!, toTypeArg, ., equals, (, fromTypeArg, )]
[toTypeArg, ., equals, (, fromTypeArg, )]
[toTypeArg]
[fromTypeArg]
[!, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), )]
[(, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), )]
[toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, )]
[toTypeArg, instanceof, WildcardType]
[toTypeArg]
[isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, )]
[fromTypeArg]
[toTypeArg]
[typeVarAssigns]
[false]
[true]
[result]
[typeVarAssigns, ., get, (, var, )]
[typeVarAssigns]
[var]
[result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, )]
[result, instanceof, TypeVariable, <, ?, >]
[result]
[!, result, ., equals, (, var, )]
[result, ., equals, (, var, )]
[result]
[var]
[var]
[(, TypeVariable, <, ?, >, ), result]
[result]
[true]
[result]
[type, ==, null]
[type]
[null]
[true]
[toGenericArrayType, ==, null]
[toGenericArrayType]
[null]
[false]
[toGenericArrayType, ., equals, (, type, )]
[toGenericArrayType]
[type]
[true]
[toGenericArrayType, ., getGenericComponentType, (, )]
[toGenericArrayType]
[type, instanceof, Class, <, ?, >]
[type]
[(, Class, <, ?, >, ), type]
[type]
[cls, ., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[cls, ., isArray, (, )]
[cls]
[isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[cls, ., getComponentType, (, )]
[cls]
[toComponentType]
[typeVarAssigns]
[type, instanceof, GenericArrayType]
[type]
[isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[(, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[(, (, GenericArrayType, ), type, )]
[(, GenericArrayType, ), type]
[type]
[toComponentType]
[typeVarAssigns]
[type, instanceof, WildcardType]
[type]
[getImplicitUpperBounds, (, (, WildcardType, ), type, )]
[(, WildcardType, ), type]
[type]
[isAssignable, (, bound, ,, toGenericArrayType, )]
[bound]
[toGenericArrayType]
[true]
[false]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, )]
[(, TypeVariable, <, ?, >, ), type]
[type]
[isAssignable, (, bound, ,, toGenericArrayType, )]
[bound]
[toGenericArrayType]
[true]
[false]
[type, instanceof, ParameterizedType]
[type]
[false]
[new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
["found an unhandled type: ", +, type]
["found an unhandled type: "]
[type]
[type, ==, null]
[type]
[null]
[true]
[toWildcardType, ==, null]
[toWildcardType]
[null]
[false]
[toWildcardType, ., equals, (, type, )]
[toWildcardType]
[type]
[true]
[getImplicitUpperBounds, (, toWildcardType, )]
[toWildcardType]
[getImplicitLowerBounds, (, toWildcardType, )]
[toWildcardType]
[type, instanceof, WildcardType]
[type]
[(, WildcardType, ), type]
[type]
[getImplicitUpperBounds, (, wildcardType, )]
[wildcardType]
[getImplicitLowerBounds, (, wildcardType, )]
[wildcardType]
[toUpperBounds]
[toBound]
[substituteTypeVariables, (, toBound, ,, typeVarAssigns, )]
[toBound]
[typeVarAssigns]
[upperBounds]
[!, isAssignable, (, bound, ,, toBound, ,, typeVarAssigns, )]
[isAssignable, (, bound, ,, toBound, ,, typeVarAssigns, )]
[bound]
[toBound]
[typeVarAssigns]
[false]
[toLowerBounds]
[toBound]
[substituteTypeVariables, (, toBound, ,, typeVarAssigns, )]
[toBound]
[typeVarAssigns]
[lowerBounds]
[!, isAssignable, (, toBound, ,, bound, ,, typeVarAssigns, )]
[isAssignable, (, toBound, ,, bound, ,, typeVarAssigns, )]
[toBound]
[bound]
[typeVarAssigns]
[false]
[true]
[toUpperBounds]
[!, isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, )]
[isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, )]
[type]
[substituteTypeVariables, (, toBound, ,, typeVarAssigns, )]
[toBound]
[typeVarAssigns]
[typeVarAssigns]
[false]
[toLowerBounds]
[!, isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, )]
[isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, )]
[substituteTypeVariables, (, toBound, ,, typeVarAssigns, )]
[toBound]
[typeVarAssigns]
[type]
[typeVarAssigns]
[false]
[true]
[type, ==, null]
[type]
[null]
[true]
[toTypeVariable, ==, null]
[toTypeVariable]
[null]
[false]
[toTypeVariable, ., equals, (, type, )]
[toTypeVariable]
[type]
[true]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, )]
[(, TypeVariable, <, ?, >, ), type]
[type]
[bounds]
[isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, )]
[bound]
[toTypeVariable]
[typeVarAssigns]
[true]
[type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType]
[type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType]
[type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType]
[type, instanceof, Class, <, ?, >]
[type]
[type, instanceof, ParameterizedType]
[type]
[type, instanceof, GenericArrayType]
[type]
[type, instanceof, WildcardType]
[type]
[false]
[new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
["found an unhandled type: ", +, type]
["found an unhandled type: "]
[type]
[type, instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=, null]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[typeVarAssigns, !=, null]
[typeVarAssigns]
[null]
[typeVarAssigns, ., get, (, type, )]
[typeVarAssigns]
[type]
[replacementType, ==, null]
[replacementType]
[null]
[new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, )]
["missing assignment type for type variable ", +, type]
["missing assignment type for type variable "]
[type]
[replacementType]
[type]
[getTypeArguments, (, type, ,, getRawType, (, type, ), ,, null, )]
[type]
[getRawType, (, type, )]
[type]
[null]
[getTypeArguments, (, type, ,, toClass, ,, null, )]
[type]
[toClass]
[null]
[type, instanceof, Class, <, ?, >]
[type]
[getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,, subtypeVarAssigns, )]
[(, Class, <, ?, >, ), type]
[type]
[toClass]
[subtypeVarAssigns]
[type, instanceof, ParameterizedType]
[type]
[getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, )]
[(, ParameterizedType, ), type]
[type]
[toClass]
[subtypeVarAssigns]
[type, instanceof, GenericArrayType]
[type]
[getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, )]
[(, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[(, (, GenericArrayType, ), type, )]
[(, GenericArrayType, ), type]
[type]
[toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass]
[toClass, ., isArray, (, )]
[toClass]
[toClass, ., getComponentType, (, )]
[toClass]
[toClass]
[subtypeVarAssigns]
[type, instanceof, WildcardType]
[type]
[getImplicitUpperBounds, (, (, WildcardType, ), type, )]
[(, WildcardType, ), type]
[type]
[isAssignable, (, bound, ,, toClass, )]
[bound]
[toClass]
[getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, )]
[bound]
[toClass]
[subtypeVarAssigns]
[null]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, )]
[(, TypeVariable, <, ?, >, ), type]
[type]
[isAssignable, (, bound, ,, toClass, )]
[bound]
[toClass]
[getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, )]
[bound]
[toClass]
[subtypeVarAssigns]
[null]
[new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
["found an unhandled type: ", +, type]
["found an unhandled type: "]
[type]
[getRawType, (, parameterizedType, )]
[parameterizedType]
[!, isAssignable, (, cls, ,, toClass, )]
[isAssignable, (, cls, ,, toClass, )]
[cls]
[toClass]
[null]
[parameterizedType, ., getOwnerType, (, )]
[parameterizedType]
[ownerType, instanceof, ParameterizedType]
[ownerType]
[(, ParameterizedType, ), ownerType]
[ownerType]
[typeVarAssigns]
[getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, )]
[parameterizedOwnerType]
[getRawType, (, parameterizedOwnerType, )]
[parameterizedOwnerType]
[subtypeVarAssigns]
[typeVarAssigns]
[subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, )]
[subtypeVarAssigns, ==, null]
[subtypeVarAssigns]
[null]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, )]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, )]
[subtypeVarAssigns]
[parameterizedType, ., getActualTypeArguments, (, )]
[parameterizedType]
[cls, ., getTypeParameters, (, )]
[cls]
[0]
[i, <, typeParams, ., length]
[i]
[typeParams, ., length]
[typeParams]
[i, ++]
[i]
[typeArgs, [, i, ]]
[typeArgs]
[i]
[typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, )]
[typeVarAssigns]
[typeParams, [, i, ]]
[typeParams]
[i]
[typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg]
[typeVarAssigns, ., containsKey, (, typeArg, )]
[typeVarAssigns]
[typeArg]
[typeVarAssigns, ., get, (, typeArg, )]
[typeVarAssigns]
[typeArg]
[typeArg]
[toClass, ., equals, (, cls, )]
[toClass]
[cls]
[typeVarAssigns]
[getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, )]
[getClosestParentType, (, cls, ,, toClass, )]
[cls]
[toClass]
[toClass]
[typeVarAssigns]
[!, isAssignable, (, cls, ,, toClass, )]
[isAssignable, (, cls, ,, toClass, )]
[cls]
[toClass]
[null]
[cls, ., isPrimitive, (, )]
[cls]
[toClass, ., isPrimitive, (, )]
[toClass]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, )]
[cls]
[ClassUtils, ., primitiveToWrapper, (, cls, )]
[ClassUtils]
[cls]
[subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, )]
[subtypeVarAssigns, ==, null]
[subtypeVarAssigns]
[null]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, )]
[new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, )]
[subtypeVarAssigns]
[toClass, ., equals, (, cls, )]
[toClass]
[cls]
[typeVarAssigns]
[getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, )]
[getClosestParentType, (, cls, ,, toClass, )]
[cls]
[toClass]
[toClass]
[typeVarAssigns]
[getRawType, (, superType, )]
[superType]
[!, isAssignable, (, cls, ,, superClass, )]
[isAssignable, (, cls, ,, superClass, )]
[cls]
[superClass]
[null]
[cls, ., equals, (, superClass, )]
[cls]
[superClass]
[getTypeArguments, (, superType, ,, superClass, ,, null, )]
[superType]
[superClass]
[null]
[getClosestParentType, (, cls, ,, superClass, )]
[cls]
[superClass]
[midType, instanceof, Class, <, ?, >]
[midType]
[determineTypeArguments, (, (, Class, <, ?, >, ), midType, ,, superType, )]
[(, Class, <, ?, >, ), midType]
[midType]
[superType]
[(, ParameterizedType, ), midType]
[midType]
[getRawType, (, midParameterizedType, )]
[midParameterizedType]
[determineTypeArguments, (, midClass, ,, superType, )]
[midClass]
[superType]
[mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,, typeVarAssigns, )]
[cls]
[midParameterizedType]
[typeVarAssigns]
[typeVarAssigns]
[parameterizedType, ., getOwnerType, (, )]
[parameterizedType]
[ownerType, instanceof, ParameterizedType]
[ownerType]
[mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, )]
[cls]
[(, ParameterizedType, ), ownerType]
[ownerType]
[typeVarAssigns]
[parameterizedType, ., getActualTypeArguments, (, )]
[parameterizedType]
[getRawType, (, parameterizedType, ), ., getTypeParameters, (, )]
[getRawType, (, parameterizedType, )]
[parameterizedType]
[Arrays, ., asList, (, cls, ., getTypeParameters, (, ), )]
[Arrays]
[cls, ., getTypeParameters, (, )]
[cls]
[0]
[i, <, typeArgs, ., length]
[i]
[typeArgs, ., length]
[typeArgs]
[i, ++]
[i]
[typeVars, [, i, ]]
[typeVars]
[i]
[typeArgs, [, i, ]]
[typeArgs]
[i]
[typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, )]
[typeVarList, ., contains, (, typeArg, )]
[typeVarList]
[typeArg]
[typeVarAssigns, ., containsKey, (, typeVar, )]
[typeVarAssigns]
[typeVar]
[typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (, typeVar, ), )]
[typeVarAssigns]
[(, TypeVariable, <, ?, >, ), typeArg]
[typeArg]
[typeVarAssigns, ., get, (, typeVar, )]
[typeVarAssigns]
[typeVar]
[superClass, ., isInterface, (, )]
[superClass]
[cls, ., getGenericInterfaces, (, )]
[cls]
[null]
[interfaceTypes]
[null]
[midType, instanceof, ParameterizedType]
[midType]
[midClass]
[getRawType, (, (, ParameterizedType, ), midType, )]
[(, ParameterizedType, ), midType]
[midType]
[midType, instanceof, Class, <, ?, >]
[midType]
[midClass]
[(, Class, <, ?, >, ), midType]
[midType]
[new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, )]
["Unexpected generic", +, " interface type found: ", +, midType]
["Unexpected generic", +, " interface type found: "]
["Unexpected generic"]
[" interface type found: "]
[midType]
[isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, )]
[isAssignable, (, midClass, ,, superClass, )]
[midClass]
[superClass]
[isAssignable, (, genericInterface, ,, (, Type, ), midClass, )]
[genericInterface]
[(, Type, ), midClass]
[midClass]
[genericInterface]
[midType]
[genericInterface, !=, null]
[genericInterface]
[null]
[genericInterface]
[cls, ., getGenericSuperclass, (, )]
[cls]
[type, ==, null]
[type]
[null]
[false]
[value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, )]
[value, ==, null]
[value]
[null]
[!, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, )]
[!, (, type, instanceof, Class, <, ?, >, )]
[(, type, instanceof, Class, <, ?, >, )]
[type, instanceof, Class, <, ?, >]
[type]
[!, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, )]
[(, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, )]
[(, (, Class, <, ?, >, ), type, )]
[(, Class, <, ?, >, ), type]
[type]
[isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, )]
[value, ., getClass, (, )]
[value]
[type]
[null]
[bounds, ., length, <, 2]
[bounds, ., length]
[bounds]
[2]
[bounds]
[new, HashSet, <, Type, >, (, bounds, ., length, )]
[bounds, ., length]
[bounds]
[bounds]
[false]
[bounds]
[type1, !=, type2, &&, isAssignable, (, type2, ,, type1, ,, null, )]
[type1, !=, type2]
[type1]
[type2]
[isAssignable, (, type2, ,, type1, ,, null, )]
[type2]
[type1]
[null]
[subtypeFound]
[true]
[!, subtypeFound]
[subtypeFound]
[types, ., add, (, type1, )]
[types]
[type1]
[types, ., toArray, (, new, Type, [, types, ., size, (, ), ], )]
[types]
[new, Type, [, types, ., size, (, ), ]]
[types, ., size, (, )]
[types]
[typeVariable, ., getBounds, (, )]
[typeVariable]
[bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, )]
[bounds, ., length, ==, 0]
[bounds, ., length]
[bounds]
[0]
[new, Type, [, ], {, Object, ., class, }]
[{, Object, ., class, }]
[Object, ., class]
[normalizeUpperBounds, (, bounds, )]
[bounds]
[wildcardType, ., getUpperBounds, (, )]
[wildcardType]
[bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, )]
[bounds, ., length, ==, 0]
[bounds, ., length]
[bounds]
[0]
[new, Type, [, ], {, Object, ., class, }]
[{, Object, ., class, }]
[Object, ., class]
[normalizeUpperBounds, (, bounds, )]
[bounds]
[wildcardType, ., getLowerBounds, (, )]
[wildcardType]
[bounds, ., length, ==, 0, ?, new, Type, [, ], {, null, }, :, bounds]
[bounds, ., length, ==, 0]
[bounds, ., length]
[bounds]
[0]
[new, Type, [, ], {, null, }]
[{, null, }]
[null]
[bounds]
[typeVarAssigns, ., entrySet, (, )]
[typeVarAssigns]
[entry, ., getKey, (, )]
[entry]
[entry, ., getValue, (, )]
[entry]
[getImplicitBounds, (, typeVar, )]
[typeVar]
[!, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, )]
[isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, )]
[type]
[substituteTypeVariables, (, bound, ,, typeVarAssigns, )]
[bound]
[typeVarAssigns]
[typeVarAssigns]
[false]
[true]
[parameterizedType, ., getRawType, (, )]
[parameterizedType]
[!, (, rawType, instanceof, Class, <, ?, >, )]
[(, rawType, instanceof, Class, <, ?, >, )]
[rawType, instanceof, Class, <, ?, >]
[rawType]
[new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, )]
["Wait... What!? Type of rawType: ", +, rawType]
["Wait... What!? Type of rawType: "]
[rawType]
[(, Class, <, ?, >, ), rawType]
[rawType]
[type, instanceof, Class, <, ?, >]
[type]
[(, Class, <, ?, >, ), type]
[type]
[type, instanceof, ParameterizedType]
[type]
[getRawType, (, (, ParameterizedType, ), type, )]
[(, ParameterizedType, ), type]
[type]
[type, instanceof, TypeVariable, <, ?, >]
[type]
[assigningType, ==, null]
[assigningType]
[null]
[null]
[(, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, )]
[(, (, TypeVariable, <, ?, >, ), type, )]
[(, TypeVariable, <, ?, >, ), type]
[type]
[!, (, genericDeclaration, instanceof, Class, <, ?, >, )]
[(, genericDeclaration, instanceof, Class, <, ?, >, )]
[genericDeclaration, instanceof, Class, <, ?, >]
[genericDeclaration]
[null]
[getTypeArguments, (, assigningType, ,, (, Class, <, ?, >, ), genericDeclaration, )]
[assigningType]
[(, Class, <, ?, >, ), genericDeclaration]
[genericDeclaration]
[typeVarAssigns, ==, null]
[typeVarAssigns]
[null]
[null]
[typeVarAssigns, ., get, (, type, )]
[typeVarAssigns]
[type]
[typeArgument, ==, null]
[typeArgument]
[null]
[null]
[getRawType, (, typeArgument, ,, assigningType, )]
[typeArgument]
[assigningType]
[type, instanceof, GenericArrayType]
[type]
[getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, assigningType, )]
[(, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[(, (, GenericArrayType, ), type, )]
[(, GenericArrayType, ), type]
[type]
[assigningType]
[Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, )]
[Array, ., newInstance, (, rawComponentType, ,, 0, )]
[Array]
[rawComponentType]
[0]
[type, instanceof, WildcardType]
[type]
[null]
[new, IllegalArgumentException, (, "unknown type: ", +, type, )]
["unknown type: ", +, type]
["unknown type: "]
[type]
[type, instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, ), type, ), ., isArray, (, )]
[type, instanceof, GenericArrayType]
[type]
[type, instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, ), type, ), ., isArray, (, )]
[type, instanceof, Class, <, ?, >]
[type]
[(, (, Class, <, ?, >, ), type, ), ., isArray, (, )]
[(, (, Class, <, ?, >, ), type, )]
[(, Class, <, ?, >, ), type]
[type]
[type, instanceof, Class, <, ?, >]
[type]
[(, Class, <, ?, >, ), type]
[type]
[clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null]
[clazz, ., isArray, (, )]
[clazz]
[clazz, ., getComponentType, (, )]
[clazz]
[null]
[type, instanceof, GenericArrayType]
[type]
[(, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[(, (, GenericArrayType, ), type, )]
[(, GenericArrayType, ), type]
[type]
[null]
