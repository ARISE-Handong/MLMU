["Gragg-Bulirsch-Stoer"]
[METHOD_NAME]
[minStep]
[maxStep]
[scalAbsoluteTolerance]
[scalRelativeTolerance]
[setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, )]
[true]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, )]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, )]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setInterpolationControl, (, true, ,, -, 1, )]
[true]
[-, 1]
[1]
[METHOD_NAME]
[minStep]
[maxStep]
[vecAbsoluteTolerance]
[vecRelativeTolerance]
[setStabilityCheck, (, true, ,, -, 1, ,, -, 1, ,, -, 1, )]
[true]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setControlFactors, (, -, 1, ,, -, 1, ,, -, 1, ,, -, 1, )]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setOrderControl, (, -, 1, ,, -, 1, ,, -, 1, )]
[-, 1]
[1]
[-, 1]
[1]
[-, 1]
[1]
[setInterpolationControl, (, true, ,, -, 1, )]
[true]
[-, 1]
[1]
[this, ., performTest]
[this]
[performStabilityCheck]
[this, ., maxIter]
[this]
[(, maxNumIter, <=, 0, ), ?, 2, :, maxNumIter]
[(, maxNumIter, <=, 0, )]
[maxNumIter, <=, 0]
[maxNumIter]
[0]
[2]
[maxNumIter]
[this, ., maxChecks]
[this]
[(, maxNumChecks, <=, 0, ), ?, 1, :, maxNumChecks]
[(, maxNumChecks, <=, 0, )]
[maxNumChecks, <=, 0]
[maxNumChecks]
[0]
[1]
[maxNumChecks]
[(, stepsizeReductionFactor, <, 0.0001, ), ||, (, stepsizeReductionFactor, >, 0.9999, )]
[(, stepsizeReductionFactor, <, 0.0001, )]
[stepsizeReductionFactor, <, 0.0001]
[stepsizeReductionFactor]
[0.0001]
[(, stepsizeReductionFactor, >, 0.9999, )]
[stepsizeReductionFactor, >, 0.9999]
[stepsizeReductionFactor]
[0.9999]
[this, ., stabilityReduction]
[this]
[0.5]
[this, ., stabilityReduction]
[this]
[stepsizeReductionFactor]
[(, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, )]
[(, control1, <, 0.0001, )]
[control1, <, 0.0001]
[control1]
[0.0001]
[(, control1, >, 0.9999, )]
[control1, >, 0.9999]
[control1]
[0.9999]
[this, ., stepControl1]
[this]
[0.65]
[this, ., stepControl1]
[this]
[control1]
[(, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, )]
[(, control2, <, 0.0001, )]
[control2, <, 0.0001]
[control2]
[0.0001]
[(, control2, >, 0.9999, )]
[control2, >, 0.9999]
[control2]
[0.9999]
[this, ., stepControl2]
[this]
[0.94]
[this, ., stepControl2]
[this]
[control2]
[(, control3, <, 0.0001, ), ||, (, control3, >, 0.9999, )]
[(, control3, <, 0.0001, )]
[control3, <, 0.0001]
[control3]
[0.0001]
[(, control3, >, 0.9999, )]
[control3, >, 0.9999]
[control3]
[0.9999]
[this, ., stepControl3]
[this]
[0.02]
[this, ., stepControl3]
[this]
[control3]
[(, control4, <, 1.0001, ), ||, (, control4, >, 999.9, )]
[(, control4, <, 1.0001, )]
[control4, <, 1.0001]
[control4]
[1.0001]
[(, control4, >, 999.9, )]
[control4, >, 999.9]
[control4]
[999.9]
[this, ., stepControl4]
[this]
[4.0]
[this, ., stepControl4]
[this]
[control4]
[(, maximalOrder, <=, 6, ), ||, (, maximalOrder, %, 2, !=, 0, )]
[(, maximalOrder, <=, 6, )]
[maximalOrder, <=, 6]
[maximalOrder]
[6]
[(, maximalOrder, %, 2, !=, 0, )]
[maximalOrder, %, 2, !=, 0]
[maximalOrder, %, 2]
[maximalOrder]
[2]
[0]
[this, ., maxOrder]
[this]
[18]
[(, control1, <, 0.0001, ), ||, (, control1, >, 0.9999, )]
[(, control1, <, 0.0001, )]
[control1, <, 0.0001]
[control1]
[0.0001]
[(, control1, >, 0.9999, )]
[control1, >, 0.9999]
[control1]
[0.9999]
[this, ., orderControl1]
[this]
[0.8]
[this, ., orderControl1]
[this]
[control1]
[(, control2, <, 0.0001, ), ||, (, control2, >, 0.9999, )]
[(, control2, <, 0.0001, )]
[control2, <, 0.0001]
[control2]
[0.0001]
[(, control2, >, 0.9999, )]
[control2, >, 0.9999]
[control2]
[0.9999]
[this, ., orderControl2]
[this]
[0.9]
[this, ., orderControl2]
[this]
[control2]
[initializeArrays, (, )]
[super, ., addStepHandler, (, handler, )]
[super]
[handler]
[initializeArrays, (, )]
[super, ., addEventHandler, (, function, ,, maxCheckInterval, ,, convergence, ,, maxIterationCount, ,, solver, )]
[super]
[function]
[maxCheckInterval]
[convergence]
[maxIterationCount]
[solver]
[initializeArrays, (, )]
[maxOrder, /, 2]
[maxOrder]
[2]
[(, sequence, ==, null, ), ||, (, sequence, ., length, !=, size, )]
[(, sequence, ==, null, )]
[sequence, ==, null]
[sequence]
[null]
[(, sequence, ., length, !=, size, )]
[sequence, ., length, !=, size]
[sequence, ., length]
[sequence]
[size]
[sequence]
[new, int, [, size, ]]
[size]
[costPerStep]
[new, int, [, size, ]]
[size]
[coeff]
[new, double, [, size, ], [, ]]
[size]
[costPerTimeUnit]
[new, double, [, size, ]]
[size]
[optimalStep]
[new, double, [, size, ]]
[size]
[0]
[k, <, size]
[k]
[size]
[++, k]
[k]
[sequence, [, k, ]]
[sequence]
[k]
[4, *, k, +, 2]
[4, *, k]
[4]
[k]
[2]
[costPerStep, [, 0, ]]
[costPerStep]
[0]
[sequence, [, 0, ], +, 1]
[sequence, [, 0, ]]
[sequence]
[0]
[1]
[1]
[k, <, size]
[k]
[size]
[++, k]
[k]
[costPerStep, [, k, ]]
[costPerStep]
[k]
[costPerStep, [, k, -, 1, ], +, sequence, [, k, ]]
[costPerStep, [, k, -, 1, ]]
[costPerStep]
[k, -, 1]
[k]
[1]
[sequence, [, k, ]]
[sequence]
[k]
[0]
[k, <, size]
[k]
[size]
[++, k]
[k]
[coeff, [, k, ]]
[coeff]
[k]
[(, k, >, 0, ), ?, new, double, [, k, ], :, null]
[(, k, >, 0, )]
[k, >, 0]
[k]
[0]
[new, double, [, k, ]]
[k]
[null]
[0]
[l, <, k]
[l]
[k]
[++, l]
[l]
[(, (, double, ), sequence, [, k, ], ), /, sequence, [, k, -, l, -, 1, ]]
[(, (, double, ), sequence, [, k, ], )]
[(, double, ), sequence, [, k, ]]
[sequence, [, k, ]]
[sequence]
[k]
[sequence, [, k, -, l, -, 1, ]]
[sequence]
[k, -, l, -, 1]
[k, -, l]
[k]
[l]
[1]
[coeff, [, k, ], [, l, ]]
[coeff, [, k, ]]
[coeff]
[k]
[l]
[1.0, /, (, ratio, *, ratio, -, 1.0, )]
[1.0]
[(, ratio, *, ratio, -, 1.0, )]
[ratio, *, ratio, -, 1.0]
[ratio, *, ratio]
[ratio]
[ratio]
[1.0]
[this, ., useInterpolationError]
[this]
[useInterpolationErrorForControl]
[(, mudifControlParameter, <=, 0, ), ||, (, mudifControlParameter, >=, 7, )]
[(, mudifControlParameter, <=, 0, )]
[mudifControlParameter, <=, 0]
[mudifControlParameter]
[0]
[(, mudifControlParameter, >=, 7, )]
[mudifControlParameter, >=, 7]
[mudifControlParameter]
[7]
[this, ., mudif]
[this]
[4]
[this, ., mudif]
[this]
[mudifControlParameter]
[vecAbsoluteTolerance, ==, null]
[vecAbsoluteTolerance]
[null]
[0]
[i, <, scale, ., length]
[i]
[scale, ., length]
[scale]
[++, i]
[i]
[FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), )]
[FastMath]
[FastMath, ., abs, (, y1, [, i, ], )]
[FastMath]
[y1, [, i, ]]
[y1]
[i]
[FastMath, ., abs, (, y2, [, i, ], )]
[FastMath]
[y2, [, i, ]]
[y2]
[i]
[scale, [, i, ]]
[scale]
[i]
[scalAbsoluteTolerance, +, scalRelativeTolerance, *, yi]
[scalAbsoluteTolerance]
[scalRelativeTolerance, *, yi]
[scalRelativeTolerance]
[yi]
[0]
[i, <, scale, ., length]
[i]
[scale, ., length]
[scale]
[++, i]
[i]
[FastMath, ., max, (, FastMath, ., abs, (, y1, [, i, ], ), ,, FastMath, ., abs, (, y2, [, i, ], ), )]
[FastMath]
[FastMath, ., abs, (, y1, [, i, ], )]
[FastMath]
[y1, [, i, ]]
[y1]
[i]
[FastMath, ., abs, (, y2, [, i, ], )]
[FastMath]
[y2, [, i, ]]
[y2]
[i]
[scale, [, i, ]]
[scale]
[i]
[vecAbsoluteTolerance, [, i, ], +, vecRelativeTolerance, [, i, ], *, yi]
[vecAbsoluteTolerance, [, i, ]]
[vecAbsoluteTolerance]
[i]
[vecRelativeTolerance, [, i, ], *, yi]
[vecRelativeTolerance, [, i, ]]
[vecRelativeTolerance]
[i]
[yi]
[sequence, [, k, ]]
[sequence]
[k]
[step, /, n]
[step]
[n]
[2, *, subStep]
[2]
[subStep]
[t0, +, subStep]
[t0]
[subStep]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[yTmp, [, i, ]]
[yTmp]
[i]
[y0, [, i, ]]
[y0]
[i]
[yEnd, [, i, ]]
[yEnd]
[i]
[y0, [, i, ], +, subStep, *, f, [, 0, ], [, i, ]]
[y0, [, i, ]]
[y0]
[i]
[subStep, *, f, [, 0, ], [, i, ]]
[subStep]
[f, [, 0, ], [, i, ]]
[f, [, 0, ]]
[f]
[0]
[i]
[computeDerivatives, (, t, ,, yEnd, ,, f, [, 1, ], )]
[t]
[yEnd]
[f, [, 1, ]]
[f]
[1]
[1]
[j, <, n]
[j]
[n]
[++, j]
[j]
[2, *, j, ==, n]
[2, *, j]
[2]
[j]
[n]
[System, ., arraycopy, (, yEnd, ,, 0, ,, yMiddle, ,, 0, ,, y0, ., length, )]
[System]
[yEnd]
[0]
[yMiddle]
[0]
[y0, ., length]
[y0]
[t]
[subStep]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[yEnd, [, i, ]]
[yEnd]
[i]
[yEnd, [, i, ]]
[yEnd]
[i]
[yTmp, [, i, ], +, subStep2, *, f, [, j, ], [, i, ]]
[yTmp, [, i, ]]
[yTmp]
[i]
[subStep2, *, f, [, j, ], [, i, ]]
[subStep2]
[f, [, j, ], [, i, ]]
[f, [, j, ]]
[f]
[j]
[i]
[yTmp, [, i, ]]
[yTmp]
[i]
[middle]
[computeDerivatives, (, t, ,, yEnd, ,, f, [, j, +, 1, ], )]
[t]
[yEnd]
[f, [, j, +, 1, ]]
[f]
[j, +, 1]
[j]
[1]
[performTest, &&, (, j, <=, maxChecks, ), &&, (, k, <, maxIter, )]
[performTest, &&, (, j, <=, maxChecks, )]
[performTest]
[(, j, <=, maxChecks, )]
[j, <=, maxChecks]
[j]
[maxChecks]
[(, k, <, maxIter, )]
[k, <, maxIter]
[k]
[maxIter]
[0.0]
[0]
[l, <, scale, ., length]
[l]
[scale, ., length]
[scale]
[++, l]
[l]
[f, [, 0, ], [, l, ], /, scale, [, l, ]]
[f, [, 0, ], [, l, ]]
[f, [, 0, ]]
[f]
[0]
[l]
[scale, [, l, ]]
[scale]
[l]
[initialNorm]
[ratio, *, ratio]
[ratio]
[ratio]
[0.0]
[0]
[l, <, scale, ., length]
[l]
[scale, ., length]
[scale]
[++, l]
[l]
[(, f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], ), /, scale, [, l, ]]
[(, f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ], )]
[f, [, j, +, 1, ], [, l, ], -, f, [, 0, ], [, l, ]]
[f, [, j, +, 1, ], [, l, ]]
[f, [, j, +, 1, ]]
[f]
[j, +, 1]
[j]
[1]
[l]
[f, [, 0, ], [, l, ]]
[f, [, 0, ]]
[f]
[0]
[l]
[scale, [, l, ]]
[scale]
[l]
[deltaNorm]
[ratio, *, ratio]
[ratio]
[ratio]
[deltaNorm, >, 4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, )]
[deltaNorm]
[4, *, FastMath, ., max, (, 1.0e-15, ,, initialNorm, )]
[4]
[FastMath, ., max, (, 1.0e-15, ,, initialNorm, )]
[FastMath]
[1.0e-15]
[initialNorm]
[false]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[yEnd, [, i, ]]
[yEnd]
[i]
[0.5, *, (, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], )]
[0.5]
[(, yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ], )]
[yTmp, [, i, ], +, yEnd, [, i, ], +, subStep, *, f, [, n, ], [, i, ]]
[yTmp, [, i, ], +, yEnd, [, i, ]]
[yTmp, [, i, ]]
[yTmp]
[i]
[yEnd, [, i, ]]
[yEnd]
[i]
[subStep, *, f, [, n, ], [, i, ]]
[subStep]
[f, [, n, ], [, i, ]]
[f, [, n, ]]
[f]
[n]
[i]
[true]
[1]
[j, <, k]
[j]
[k]
[++, j]
[j]
[0]
[i, <, last, ., length]
[i]
[last, ., length]
[last]
[++, i]
[i]
[diag, [, k, -, j, -, 1, ], [, i, ]]
[diag, [, k, -, j, -, 1, ]]
[diag]
[k, -, j, -, 1]
[k, -, j]
[k]
[j]
[1]
[i]
[diag, [, k, -, j, ], [, i, ], +, coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], )]
[diag, [, k, -, j, ], [, i, ]]
[diag, [, k, -, j, ]]
[diag]
[k, -, j]
[k]
[j]
[i]
[coeff, [, k, +, offset, ], [, j, -, 1, ], *, (, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], )]
[coeff, [, k, +, offset, ], [, j, -, 1, ]]
[coeff, [, k, +, offset, ]]
[coeff]
[k, +, offset]
[k]
[offset]
[j, -, 1]
[j]
[1]
[(, diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ], )]
[diag, [, k, -, j, ], [, i, ], -, diag, [, k, -, j, -, 1, ], [, i, ]]
[diag, [, k, -, j, ], [, i, ]]
[diag, [, k, -, j, ]]
[diag]
[k, -, j]
[k]
[j]
[i]
[diag, [, k, -, j, -, 1, ], [, i, ]]
[diag, [, k, -, j, -, 1, ]]
[diag]
[k, -, j, -, 1]
[k, -, j]
[k]
[j]
[1]
[i]
[0]
[i, <, last, ., length]
[i]
[last, ., length]
[last]
[++, i]
[i]
[last, [, i, ]]
[last]
[i]
[diag, [, 0, ], [, i, ], +, coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], )]
[diag, [, 0, ], [, i, ]]
[diag, [, 0, ]]
[diag]
[0]
[i]
[coeff, [, k, +, offset, ], [, k, -, 1, ], *, (, diag, [, 0, ], [, i, ], -, last, [, i, ], )]
[coeff, [, k, +, offset, ], [, k, -, 1, ]]
[coeff, [, k, +, offset, ]]
[coeff]
[k, +, offset]
[k]
[offset]
[k, -, 1]
[k]
[1]
[(, diag, [, 0, ], [, i, ], -, last, [, i, ], )]
[diag, [, 0, ], [, i, ], -, last, [, i, ]]
[diag, [, 0, ], [, i, ]]
[diag, [, 0, ]]
[diag]
[0]
[i]
[last, [, i, ]]
[last]
[i]
[sanityChecks, (, equations, ,, t, )]
[equations]
[t]
[setEquations, (, equations, )]
[equations]
[t, >, equations, ., getTime, (, )]
[t]
[equations, ., getTime, (, )]
[equations]
[equations, ., getCompleteState, (, )]
[equations]
[y0, ., clone, (, )]
[y0]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[new, double, [, sequence, ., length, -, 1, ], [, ]]
[sequence, ., length, -, 1]
[sequence, ., length]
[sequence]
[1]
[new, double, [, sequence, ., length, -, 1, ], [, ]]
[sequence, ., length, -, 1]
[sequence, ., length]
[sequence]
[1]
[0]
[k, <, sequence, ., length, -, 1]
[k]
[sequence, ., length, -, 1]
[sequence, ., length]
[sequence]
[1]
[++, k]
[k]
[diagonal, [, k, ]]
[diagonal]
[k]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[y1Diag, [, k, ]]
[y1Diag]
[k]
[new, double, [, y, ., length, ]]
[y, ., length]
[y]
[new, double, [, sequence, ., length, ], [, ], [, ]]
[sequence, ., length]
[sequence]
[0]
[k, <, sequence, ., length]
[k]
[sequence, ., length]
[sequence]
[++, k]
[k]
[fk, [, k, ]]
[fk]
[k]
[new, double, [, sequence, [, k, ], +, 1, ], [, ]]
[sequence, [, k, ], +, 1]
[sequence, [, k, ]]
[sequence]
[k]
[1]
[fk, [, k, ], [, 0, ]]
[fk, [, k, ]]
[fk]
[k]
[0]
[yDot0]
[0]
[l, <, sequence, [, k, ]]
[l]
[sequence, [, k, ]]
[sequence]
[k]
[++, l]
[l]
[fk, [, k, ], [, l, +, 1, ]]
[fk, [, k, ]]
[fk]
[k]
[l, +, 1]
[l]
[1]
[new, double, [, y0, ., length, ]]
[y0, ., length]
[y0]
[y, !=, y0]
[y]
[y0]
[System, ., arraycopy, (, y0, ,, 0, ,, y, ,, 0, ,, y0, ., length, )]
[System]
[y0]
[0]
[y]
[0]
[y0, ., length]
[y0]
[new, double, [, y0, ., length, ]]
[y0, ., length]
[y0]
[new, double, [, 1, +, 2, *, sequence, ., length, ], [, y0, ., length, ]]
[1, +, 2, *, sequence, ., length]
[1]
[2, *, sequence, ., length]
[2]
[sequence, ., length]
[sequence]
[y0, ., length]
[y0]
[new, double, [, mainSetDimension, ]]
[mainSetDimension]
[rescale, (, y, ,, y, ,, scale, )]
[y]
[y]
[scale]
[(, vecRelativeTolerance, ==, null, ), ?, scalRelativeTolerance, :, vecRelativeTolerance, [, 0, ]]
[(, vecRelativeTolerance, ==, null, )]
[vecRelativeTolerance, ==, null]
[vecRelativeTolerance]
[null]
[scalRelativeTolerance]
[vecRelativeTolerance, [, 0, ]]
[vecRelativeTolerance]
[0]
[FastMath, ., log10, (, FastMath, ., max, (, 1.0e-10, ,, tol, ), )]
[FastMath]
[FastMath, ., max, (, 1.0e-10, ,, tol, )]
[FastMath]
[1.0e-10]
[tol]
[FastMath, ., max, (, 1, ,, FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), ), )]
[FastMath]
[1]
[FastMath, ., min, (, sequence, ., length, -, 2, ,, (, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, ), )]
[FastMath]
[sequence, ., length, -, 2]
[sequence, ., length]
[sequence]
[2]
[(, int, ), FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, )]
[FastMath, ., floor, (, 0.5, -, 0.6, *, log10R, )]
[FastMath]
[0.5, -, 0.6, *, log10R]
[0.5]
[0.6, *, log10R]
[0.6]
[log10R]
[new, GraggBulirschStoerStepInterpolator, (, y, ,, yDot0, ,, y1, ,, yDot1, ,, yMidDots, ,, forward, ,, equations, ., getPrimaryMapper, (, ), ,, equations, ., getSecondaryMappers, (, ), )]
[y]
[yDot0]
[y1]
[yDot1]
[yMidDots]
[forward]
[equations, ., getPrimaryMapper, (, )]
[equations]
[equations, ., getSecondaryMappers, (, )]
[equations]
[interpolator, ., storeTime, (, equations, ., getTime, (, ), )]
[interpolator]
[equations, ., getTime, (, )]
[equations]
[stepStart]
[equations, ., getTime, (, )]
[equations]
[0]
[Double, ., MAX_VALUE]
[Double]
[false]
[true]
[true]
[false]
[initIntegration, (, equations, ., getTime, (, ), ,, y0, ,, t, )]
[equations, ., getTime, (, )]
[equations]
[y0]
[t]
[costPerTimeUnit, [, 0, ]]
[costPerTimeUnit]
[0]
[0]
[isLastStep]
[false]
[false]
[newStep]
[interpolator, ., shift, (, )]
[interpolator]
[!, firstStepAlreadyComputed]
[firstStepAlreadyComputed]
[computeDerivatives, (, stepStart, ,, y, ,, yDot0, )]
[stepStart]
[y]
[yDot0]
[firstTime]
[hNew]
[initializeStep, (, forward, ,, 2, *, targetIter, +, 1, ,, scale, ,, stepStart, ,, y, ,, yDot0, ,, yTmp, ,, yTmpDot, )]
[forward]
[2, *, targetIter, +, 1]
[2, *, targetIter]
[2]
[targetIter]
[1]
[scale]
[stepStart]
[y]
[yDot0]
[yTmp]
[yTmpDot]
[newStep]
[false]
[stepSize]
[hNew]
[(, forward, &&, (, stepStart, +, stepSize, >, t, ), ), ||, (, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), )]
[(, forward, &&, (, stepStart, +, stepSize, >, t, ), )]
[forward, &&, (, stepStart, +, stepSize, >, t, )]
[forward]
[(, stepStart, +, stepSize, >, t, )]
[stepStart, +, stepSize, >, t]
[stepStart, +, stepSize]
[stepStart]
[stepSize]
[t]
[(, (, !, forward, ), &&, (, stepStart, +, stepSize, <, t, ), )]
[(, !, forward, ), &&, (, stepStart, +, stepSize, <, t, )]
[(, !, forward, )]
[!, forward]
[forward]
[(, stepStart, +, stepSize, <, t, )]
[stepStart, +, stepSize, <, t]
[stepStart, +, stepSize]
[stepStart]
[stepSize]
[t]
[stepSize]
[t, -, stepStart]
[t]
[stepStart]
[stepStart, +, stepSize]
[stepStart]
[stepSize]
[isLastStep]
[forward, ?, (, nextT, >=, t, ), :, (, nextT, <=, t, )]
[forward]
[(, nextT, >=, t, )]
[nextT, >=, t]
[nextT]
[t]
[(, nextT, <=, t, )]
[nextT, <=, t]
[nextT]
[t]
[-, 1]
[1]
[true]
[loop]
[++, k]
[k]
[!, tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, )]
[tryStep, (, stepStart, ,, y, ,, stepSize, ,, k, ,, scale, ,, fk, [, k, ], ,, (, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ], ,, (, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ], ,, yTmp, )]
[stepStart]
[y]
[stepSize]
[k]
[scale]
[fk, [, k, ]]
[fk]
[k]
[(, k, ==, 0, ), ?, yMidDots, [, 0, ], :, diagonal, [, k, -, 1, ]]
[(, k, ==, 0, )]
[k, ==, 0]
[k]
[0]
[yMidDots, [, 0, ]]
[yMidDots]
[0]
[diagonal, [, k, -, 1, ]]
[diagonal]
[k, -, 1]
[k]
[1]
[(, k, ==, 0, ), ?, y1, :, y1Diag, [, k, -, 1, ]]
[(, k, ==, 0, )]
[k, ==, 0]
[k]
[0]
[y1]
[y1Diag, [, k, -, 1, ]]
[y1Diag]
[k, -, 1]
[k]
[1]
[yTmp]
[hNew]
[FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), )]
[FastMath]
[filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, )]
[stepSize, *, stabilityReduction]
[stepSize]
[stabilityReduction]
[forward]
[false]
[reject]
[true]
[loop]
[false]
[k, >, 0]
[k]
[0]
[extrapolate, (, 0, ,, k, ,, y1Diag, ,, y1, )]
[0]
[k]
[y1Diag]
[y1]
[rescale, (, y, ,, y1, ,, scale, )]
[y]
[y1]
[scale]
[error]
[0]
[0]
[j, <, mainSetDimension]
[j]
[mainSetDimension]
[++, j]
[j]
[FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], ), /, scale, [, j, ]]
[FastMath, ., abs, (, y1, [, j, ], -, y1Diag, [, 0, ], [, j, ], )]
[FastMath]
[y1, [, j, ], -, y1Diag, [, 0, ], [, j, ]]
[y1, [, j, ]]
[y1]
[j]
[y1Diag, [, 0, ], [, j, ]]
[y1Diag, [, 0, ]]
[y1Diag]
[0]
[j]
[scale, [, j, ]]
[scale]
[j]
[error]
[e, *, e]
[e]
[e]
[error]
[FastMath, ., sqrt, (, error, /, mainSetDimension, )]
[FastMath]
[error, /, mainSetDimension]
[error]
[mainSetDimension]
[(, error, >, 1.0e15, ), ||, (, (, k, >, 1, ), &&, (, error, >, maxError, ), )]
[(, error, >, 1.0e15, )]
[error, >, 1.0e15]
[error]
[1.0e15]
[(, (, k, >, 1, ), &&, (, error, >, maxError, ), )]
[(, k, >, 1, ), &&, (, error, >, maxError, )]
[(, k, >, 1, )]
[k, >, 1]
[k]
[1]
[(, error, >, maxError, )]
[error, >, maxError]
[error]
[maxError]
[hNew]
[FastMath, ., abs, (, filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, ), )]
[FastMath]
[filterStep, (, stepSize, *, stabilityReduction, ,, forward, ,, false, )]
[stepSize, *, stabilityReduction]
[stepSize]
[stabilityReduction]
[forward]
[false]
[reject]
[true]
[loop]
[false]
[maxError]
[FastMath, ., max, (, 4, *, error, ,, 1.0, )]
[FastMath]
[4, *, error]
[4]
[error]
[1.0]
[1.0, /, (, 2, *, k, +, 1, )]
[1.0]
[(, 2, *, k, +, 1, )]
[2, *, k, +, 1]
[2, *, k]
[2]
[k]
[1]
[stepControl2, /, FastMath, ., pow, (, error, /, stepControl1, ,, exp, )]
[stepControl2]
[FastMath, ., pow, (, error, /, stepControl1, ,, exp, )]
[FastMath]
[error, /, stepControl1]
[error]
[stepControl1]
[exp]
[FastMath, ., pow, (, stepControl3, ,, exp, )]
[FastMath]
[stepControl3]
[exp]
[fac]
[FastMath, ., max, (, pow, /, stepControl4, ,, FastMath, ., min, (, 1, /, pow, ,, fac, ), )]
[FastMath]
[pow, /, stepControl4]
[pow]
[stepControl4]
[FastMath, ., min, (, 1, /, pow, ,, fac, )]
[FastMath]
[1, /, pow]
[1]
[pow]
[fac]
[optimalStep, [, k, ]]
[optimalStep]
[k]
[FastMath, ., abs, (, filterStep, (, stepSize, *, fac, ,, forward, ,, true, ), )]
[FastMath]
[filterStep, (, stepSize, *, fac, ,, forward, ,, true, )]
[stepSize, *, fac]
[stepSize]
[fac]
[forward]
[true]
[costPerTimeUnit, [, k, ]]
[costPerTimeUnit]
[k]
[costPerStep, [, k, ], /, optimalStep, [, k, ]]
[costPerStep, [, k, ]]
[costPerStep]
[k]
[optimalStep, [, k, ]]
[optimalStep]
[k]
[k, -, targetIter]
[k]
[targetIter]
[-, 1]
[1]
[(, targetIter, >, 1, ), &&, !, previousRejected]
[(, targetIter, >, 1, )]
[targetIter, >, 1]
[targetIter]
[1]
[!, previousRejected]
[previousRejected]
[error, <=, 1.0]
[error]
[1.0]
[loop]
[false]
[(, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], ), /, (, sequence, [, 0, ], *, sequence, [, 0, ], )]
[(, (, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ], )]
[(, double, ), sequence, [, targetIter, ], *, sequence, [, targetIter, +, 1, ]]
[(, double, ), sequence, [, targetIter, ]]
[sequence, [, targetIter, ]]
[sequence]
[targetIter]
[sequence, [, targetIter, +, 1, ]]
[sequence]
[targetIter, +, 1]
[targetIter]
[1]
[(, sequence, [, 0, ], *, sequence, [, 0, ], )]
[sequence, [, 0, ], *, sequence, [, 0, ]]
[sequence, [, 0, ]]
[sequence]
[0]
[sequence, [, 0, ]]
[sequence]
[0]
[error, >, ratio, *, ratio]
[error]
[ratio, *, ratio]
[ratio]
[ratio]
[reject]
[true]
[loop]
[false]
[targetIter]
[k]
[(, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[(, targetIter, >, 1, )]
[targetIter, >, 1]
[targetIter]
[1]
[(, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit, [, targetIter, -, 1, ]]
[costPerTimeUnit]
[targetIter, -, 1]
[targetIter]
[1]
[orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[orderControl1]
[costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit]
[targetIter]
[--, targetIter]
[targetIter]
[hNew]
[optimalStep, [, targetIter, ]]
[optimalStep]
[targetIter]
[0]
[error, <=, 1.0]
[error]
[1.0]
[loop]
[false]
[(, (, double, ), sequence, [, k, +, 1, ], ), /, sequence, [, 0, ]]
[(, (, double, ), sequence, [, k, +, 1, ], )]
[(, double, ), sequence, [, k, +, 1, ]]
[sequence, [, k, +, 1, ]]
[sequence]
[k, +, 1]
[k]
[1]
[sequence, [, 0, ]]
[sequence]
[0]
[error, >, ratio, *, ratio]
[error]
[ratio, *, ratio]
[ratio]
[ratio]
[reject]
[true]
[loop]
[false]
[(, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[(, targetIter, >, 1, )]
[targetIter, >, 1]
[targetIter]
[1]
[(, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit, [, targetIter, -, 1, ]]
[costPerTimeUnit]
[targetIter, -, 1]
[targetIter]
[1]
[orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[orderControl1]
[costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit]
[targetIter]
[--, targetIter]
[targetIter]
[hNew]
[optimalStep, [, targetIter, ]]
[optimalStep]
[targetIter]
[1]
[error, >, 1.0]
[error]
[1.0]
[reject]
[true]
[(, targetIter, >, 1, ), &&, (, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[(, targetIter, >, 1, )]
[targetIter, >, 1]
[targetIter]
[1]
[(, costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ], )]
[costPerTimeUnit, [, targetIter, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit, [, targetIter, -, 1, ]]
[costPerTimeUnit]
[targetIter, -, 1]
[targetIter]
[1]
[orderControl1, *, costPerTimeUnit, [, targetIter, ]]
[orderControl1]
[costPerTimeUnit, [, targetIter, ]]
[costPerTimeUnit]
[targetIter]
[--, targetIter]
[targetIter]
[hNew]
[optimalStep, [, targetIter, ]]
[optimalStep]
[targetIter]
[loop]
[false]
[(, firstTime, ||, isLastStep, ), &&, (, error, <=, 1.0, )]
[(, firstTime, ||, isLastStep, )]
[firstTime, ||, isLastStep]
[firstTime]
[isLastStep]
[(, error, <=, 1.0, )]
[error, <=, 1.0]
[error]
[1.0]
[loop]
[false]
[!, reject]
[reject]
[computeDerivatives, (, stepStart, +, stepSize, ,, y1, ,, yDot1, )]
[stepStart, +, stepSize]
[stepStart]
[stepSize]
[y1]
[yDot1]
[getMaxStep, (, )]
[!, reject]
[reject]
[1]
[j, <=, k]
[j]
[k]
[++, j]
[j]
[extrapolate, (, 0, ,, j, ,, diagonal, ,, yMidDots, [, 0, ], )]
[0]
[j]
[diagonal]
[yMidDots, [, 0, ]]
[yMidDots]
[0]
[2, *, k, -, mudif, +, 3]
[2, *, k, -, mudif]
[2, *, k]
[2]
[k]
[mudif]
[3]
[0]
[l, <, mu]
[l]
[mu]
[++, l]
[l]
[l, /, 2]
[l]
[2]
[FastMath, ., pow, (, 0.5, *, sequence, [, l2, ], ,, l, )]
[FastMath]
[0.5, *, sequence, [, l2, ]]
[0.5]
[sequence, [, l2, ]]
[sequence]
[l2]
[l]
[fk, [, l2, ], ., length, /, 2]
[fk, [, l2, ], ., length]
[fk, [, l2, ]]
[fk]
[l2]
[2]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[yMidDots, [, l, +, 1, ], [, i, ]]
[yMidDots, [, l, +, 1, ]]
[yMidDots]
[l, +, 1]
[l]
[1]
[i]
[factor, *, fk, [, l2, ], [, middleIndex, +, l, ], [, i, ]]
[factor]
[fk, [, l2, ], [, middleIndex, +, l, ], [, i, ]]
[fk, [, l2, ], [, middleIndex, +, l, ]]
[fk, [, l2, ]]
[fk]
[l2]
[middleIndex, +, l]
[middleIndex]
[l]
[i]
[1]
[j, <=, k, -, l2]
[j]
[k, -, l2]
[k]
[l2]
[++, j]
[j]
[factor]
[FastMath, ., pow, (, 0.5, *, sequence, [, j, +, l2, ], ,, l, )]
[FastMath]
[0.5, *, sequence, [, j, +, l2, ]]
[0.5]
[sequence, [, j, +, l2, ]]
[sequence]
[j, +, l2]
[j]
[l2]
[l]
[middleIndex]
[fk, [, l2, +, j, ], ., length, /, 2]
[fk, [, l2, +, j, ], ., length]
[fk, [, l2, +, j, ]]
[fk]
[l2, +, j]
[l2]
[j]
[2]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[diagonal, [, j, -, 1, ], [, i, ]]
[diagonal, [, j, -, 1, ]]
[diagonal]
[j, -, 1]
[j]
[1]
[i]
[factor, *, fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ]]
[factor]
[fk, [, l2, +, j, ], [, middleIndex, +, l, ], [, i, ]]
[fk, [, l2, +, j, ], [, middleIndex, +, l, ]]
[fk, [, l2, +, j, ]]
[fk]
[l2, +, j]
[l2]
[j]
[middleIndex, +, l]
[middleIndex]
[l]
[i]
[extrapolate, (, l2, ,, j, ,, diagonal, ,, yMidDots, [, l, +, 1, ], )]
[l2]
[j]
[diagonal]
[yMidDots, [, l, +, 1, ]]
[yMidDots]
[l, +, 1]
[l]
[1]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[yMidDots, [, l, +, 1, ], [, i, ]]
[yMidDots, [, l, +, 1, ]]
[yMidDots]
[l, +, 1]
[l]
[1]
[i]
[stepSize]
[(, l, +, 1, ), /, 2]
[(, l, +, 1, )]
[l, +, 1]
[l]
[1]
[2]
[j, <=, k]
[j]
[k]
[++, j]
[j]
[fk, [, j, ], ., length, -, 1]
[fk, [, j, ], ., length]
[fk, [, j, ]]
[fk]
[j]
[1]
[m, >=, 2, *, (, l, +, 1, )]
[m]
[2, *, (, l, +, 1, )]
[2]
[(, l, +, 1, )]
[l, +, 1]
[l]
[1]
[--, m]
[m]
[0]
[i, <, y0, ., length]
[i]
[y0, ., length]
[y0]
[++, i]
[i]
[fk, [, j, ], [, m, ], [, i, ]]
[fk, [, j, ], [, m, ]]
[fk, [, j, ]]
[fk]
[j]
[m]
[i]
[fk, [, j, ], [, m, -, 2, ], [, i, ]]
[fk, [, j, ], [, m, -, 2, ]]
[fk, [, j, ]]
[fk]
[j]
[m, -, 2]
[m]
[2]
[i]
[mu, >=, 0]
[mu]
[0]
[(, GraggBulirschStoerStepInterpolator, ), interpolator]
[interpolator]
[gbsInterpolator, ., computeCoefficients, (, mu, ,, stepSize, )]
[gbsInterpolator]
[mu]
[stepSize]
[useInterpolationError]
[gbsInterpolator, ., estimateError, (, scale, )]
[gbsInterpolator]
[scale]
[hInt]
[FastMath, ., abs, (, stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, ), )]
[FastMath]
[stepSize, /, FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, )]
[stepSize]
[FastMath, ., max, (, FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), ), ,, 0.01, )]
[FastMath]
[FastMath, ., pow, (, interpError, ,, 1.0, /, (, mu, +, 4, ), )]
[FastMath]
[interpError]
[1.0, /, (, mu, +, 4, )]
[1.0]
[(, mu, +, 4, )]
[mu, +, 4]
[mu]
[4]
[0.01]
[interpError, >, 10.0]
[interpError]
[10.0]
[hNew]
[hInt]
[reject]
[true]
[!, reject]
[reject]
[interpolator, ., storeTime, (, stepStart, +, stepSize, )]
[interpolator]
[stepStart, +, stepSize]
[stepStart]
[stepSize]
[stepStart]
[acceptStep, (, interpolator, ,, y1, ,, yDot1, ,, t, )]
[interpolator]
[y1]
[yDot1]
[t]
[interpolator, ., storeTime, (, stepStart, )]
[interpolator]
[stepStart]
[System, ., arraycopy, (, y1, ,, 0, ,, y, ,, 0, ,, y0, ., length, )]
[System]
[y1]
[0]
[y]
[0]
[y0, ., length]
[y0]
[System, ., arraycopy, (, yDot1, ,, 0, ,, yDot0, ,, 0, ,, y0, ., length, )]
[System]
[yDot1]
[0]
[yDot0]
[0]
[y0, ., length]
[y0]
[firstStepAlreadyComputed]
[true]
[k, ==, 1]
[k]
[1]
[optimalIter]
[2]
[previousRejected]
[optimalIter]
[1]
[k, <=, targetIter]
[k]
[targetIter]
[optimalIter]
[k]
[costPerTimeUnit, [, k, -, 1, ], <, orderControl1, *, costPerTimeUnit, [, k, ]]
[costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit]
[k, -, 1]
[k]
[1]
[orderControl1, *, costPerTimeUnit, [, k, ]]
[orderControl1]
[costPerTimeUnit, [, k, ]]
[costPerTimeUnit]
[k]
[optimalIter]
[k, -, 1]
[k]
[1]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit, [, k, ]]
[costPerTimeUnit]
[k]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ]]
[orderControl2]
[costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit]
[k, -, 1]
[k]
[1]
[optimalIter]
[FastMath, ., min, (, k, +, 1, ,, sequence, ., length, -, 2, )]
[FastMath]
[k, +, 1]
[k]
[1]
[sequence, ., length, -, 2]
[sequence, ., length]
[sequence]
[2]
[optimalIter]
[k, -, 1]
[k]
[1]
[(, k, >, 2, ), &&, (, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], )]
[(, k, >, 2, )]
[k, >, 2]
[k]
[2]
[(, costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ], )]
[costPerTimeUnit, [, k, -, 2, ], <, orderControl1, *, costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit, [, k, -, 2, ]]
[costPerTimeUnit]
[k, -, 2]
[k]
[2]
[orderControl1, *, costPerTimeUnit, [, k, -, 1, ]]
[orderControl1]
[costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit]
[k, -, 1]
[k]
[1]
[optimalIter]
[k, -, 2]
[k]
[2]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, optimalIter, ]]
[costPerTimeUnit, [, k, ]]
[costPerTimeUnit]
[k]
[orderControl2, *, costPerTimeUnit, [, optimalIter, ]]
[orderControl2]
[costPerTimeUnit, [, optimalIter, ]]
[costPerTimeUnit]
[optimalIter]
[optimalIter]
[FastMath, ., min, (, k, ,, sequence, ., length, -, 2, )]
[FastMath]
[k]
[sequence, ., length, -, 2]
[sequence, ., length]
[sequence]
[2]
[previousRejected]
[targetIter]
[FastMath, ., min, (, optimalIter, ,, k, )]
[FastMath]
[optimalIter]
[k]
[hNew]
[FastMath, ., min, (, FastMath, ., abs, (, stepSize, ), ,, optimalStep, [, targetIter, ], )]
[FastMath]
[FastMath, ., abs, (, stepSize, )]
[FastMath]
[stepSize]
[optimalStep, [, targetIter, ]]
[optimalStep]
[targetIter]
[optimalIter, <=, k]
[optimalIter]
[k]
[hNew]
[optimalStep, [, optimalIter, ]]
[optimalStep]
[optimalIter]
[(, k, <, targetIter, ), &&, (, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], )]
[(, k, <, targetIter, )]
[k, <, targetIter]
[k]
[targetIter]
[(, costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ], )]
[costPerTimeUnit, [, k, ], <, orderControl2, *, costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit, [, k, ]]
[costPerTimeUnit]
[k]
[orderControl2, *, costPerTimeUnit, [, k, -, 1, ]]
[orderControl2]
[costPerTimeUnit, [, k, -, 1, ]]
[costPerTimeUnit]
[k, -, 1]
[k]
[1]
[hNew]
[filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ], ,, forward, ,, false, )]
[optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ], /, costPerStep, [, k, ]]
[optimalStep, [, k, ], *, costPerStep, [, optimalIter, +, 1, ]]
[optimalStep, [, k, ]]
[optimalStep]
[k]
[costPerStep, [, optimalIter, +, 1, ]]
[costPerStep]
[optimalIter, +, 1]
[optimalIter]
[1]
[costPerStep, [, k, ]]
[costPerStep]
[k]
[forward]
[false]
[hNew]
[filterStep, (, optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ], ,, forward, ,, false, )]
[optimalStep, [, k, ], *, costPerStep, [, optimalIter, ], /, costPerStep, [, k, ]]
[optimalStep, [, k, ], *, costPerStep, [, optimalIter, ]]
[optimalStep, [, k, ]]
[optimalStep]
[k]
[costPerStep, [, optimalIter, ]]
[costPerStep]
[optimalIter]
[costPerStep, [, k, ]]
[costPerStep]
[k]
[forward]
[false]
[targetIter]
[optimalIter]
[newStep]
[true]
[hNew]
[FastMath, ., min, (, hNew, ,, hInt, )]
[FastMath]
[hNew]
[hInt]
[!, forward]
[forward]
[hNew]
[-, hNew]
[hNew]
[firstTime]
[false]
[reject]
[isLastStep]
[false]
[previousRejected]
[true]
[previousRejected]
[false]
[!, isLastStep]
[isLastStep]
[equations, ., setTime, (, stepStart, )]
[equations]
[stepStart]
[equations, ., setCompleteState, (, y, )]
[equations]
[y]
[resetInternalState, (, )]
