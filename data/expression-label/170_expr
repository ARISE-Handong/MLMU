["com.google.javascript.jscomp.parsing.ParserConfig"]
[null]
[null]
[null]
[createConfig, (, isIdeMode, ,, LanguageMode, ., ECMASCRIPT3, ,, false, )]
[isIdeMode]
[LanguageMode, ., ECMASCRIPT3]
[LanguageMode]
[false]
[createConfig, (, isIdeMode, ,, languageMode, ,, acceptConstKeyword, ,, null, )]
[isIdeMode]
[languageMode]
[acceptConstKeyword]
[null]
[initResourceConfig, (, )]
[extraAnnotationNames, ==, null]
[extraAnnotationNames]
[null]
[effectiveAnnotationNames]
[annotationNames]
[effectiveAnnotationNames]
[new, HashSet, <, String, >, (, annotationNames, )]
[annotationNames]
[effectiveAnnotationNames, ., addAll, (, extraAnnotationNames, )]
[effectiveAnnotationNames]
[extraAnnotationNames]
[new, Config, (, effectiveAnnotationNames, ,, suppressionNames, ,, isIdeMode, ,, languageMode, ,, acceptConstKeyword, )]
[effectiveAnnotationNames]
[suppressionNames]
[isIdeMode]
[languageMode]
[acceptConstKeyword]
[initResourceConfig, (, )]
[reservedVars]
[annotationNames, !=, null]
[annotationNames]
[null]
[ResourceBundle, ., getBundle, (, configResource, )]
[ResourceBundle]
[configResource]
[annotationNames]
[extractList, (, config, ., getString, (, "jsdoc.annotations", ), )]
[config, ., getString, (, "jsdoc.annotations", )]
[config]
["jsdoc.annotations"]
[suppressionNames]
[extractList, (, config, ., getString, (, "jsdoc.suppressions", ), )]
[config, ., getString, (, "jsdoc.suppressions", )]
[config]
["jsdoc.suppressions"]
[reservedVars]
[extractList, (, config, ., getString, (, "compiler.reserved.vars", ), )]
[config, ., getString, (, "compiler.reserved.vars", )]
[config]
["compiler.reserved.vars"]
[configProp, ., split, (, ",", )]
[configProp]
[","]
[Sets, ., newHashSet, (, )]
[Sets]
[names]
[trimmedNames, ., add, (, name, ., trim, (, ), )]
[trimmedNames]
[name, ., trim, (, )]
[name]
[ImmutableSet, ., copyOf, (, trimmedNames, )]
[ImmutableSet]
[trimmedNames]
[Context, ., enter, (, )]
[Context]
[cx, ., setErrorReporter, (, errorReporter, )]
[cx]
[errorReporter]
[cx, ., setLanguageVersion, (, Context, ., VERSION_1_5, )]
[cx]
[Context, ., VERSION_1_5]
[Context]
[new, CompilerEnvirons, (, )]
[compilerEnv, ., initFromContext, (, cx, )]
[compilerEnv]
[cx]
[compilerEnv, ., setRecordingComments, (, true, )]
[compilerEnv]
[true]
[compilerEnv, ., setRecordingLocalJsDocComments, (, true, )]
[compilerEnv]
[true]
[compilerEnv, ., setWarnTrailingComma, (, config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3, )]
[compilerEnv]
[config, ., languageMode, ==, LanguageMode, ., ECMASCRIPT3]
[config, ., languageMode]
[config]
[LanguageMode, ., ECMASCRIPT3]
[LanguageMode]
[config, ., isIdeMode, ||, config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3]
[config, ., isIdeMode]
[config]
[config, ., languageMode, !=, LanguageMode, ., ECMASCRIPT3]
[config, ., languageMode]
[config]
[LanguageMode, ., ECMASCRIPT3]
[LanguageMode]
[compilerEnv, ., setReservedKeywordAsIdentifier, (, acceptEs5, )]
[compilerEnv]
[acceptEs5]
[compilerEnv, ., setAllowMemberExprAsFunctionName, (, false, )]
[compilerEnv]
[false]
[compilerEnv, ., setIdeMode, (, config, ., isIdeMode, )]
[compilerEnv]
[config, ., isIdeMode]
[config]
[compilerEnv, ., setRecoverFromErrors, (, config, ., isIdeMode, )]
[compilerEnv]
[config, ., isIdeMode]
[config]
[new, Parser, (, compilerEnv, ,, errorReporter, )]
[compilerEnv]
[errorReporter]
[null]
[astRoot]
[p, ., parse, (, sourceString, ,, sourceFile, ., getName, (, ), ,, 1, )]
[p]
[sourceString]
[sourceFile, ., getName, (, )]
[sourceFile]
[1]
[logger, ., info, (, "Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +, e, ., getMessage, (, ), )]
[logger]
["Error parsing ", +, sourceFile, ., getName, (, ), +, ": ", +, e, ., getMessage, (, )]
["Error parsing ", +, sourceFile, ., getName, (, ), +, ": "]
["Error parsing ", +, sourceFile, ., getName, (, )]
["Error parsing "]
[sourceFile, ., getName, (, )]
[sourceFile]
[": "]
[e, ., getMessage, (, )]
[e]
[Context, ., exit, (, )]
[Context]
[null]
[astRoot, !=, null]
[astRoot]
[null]
[root]
[IRFactory, ., transformTree, (, astRoot, ,, sourceFile, ,, sourceString, ,, config, ,, errorReporter, )]
[IRFactory]
[astRoot]
[sourceFile]
[sourceString]
[config]
[errorReporter]
[root, ., setIsSyntheticBlock, (, true, )]
[root]
[true]
[new, ParseResult, (, root, ,, astRoot, )]
[root]
[astRoot]
[this, ., ast]
[this]
[ast]
[this, ., oldAst]
[this]
[oldAst]
