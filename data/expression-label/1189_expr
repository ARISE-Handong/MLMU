[calculateMean, (, values, ,, true, )]
[values]
[true]
[values, ==, null]
[values]
[null]
[new, IllegalArgumentException, (, "Null 'values' argument.", )]
["Null 'values' argument."]
[0.0]
[0]
[0]
[i, <, values, ., length]
[i]
[values, ., length]
[values]
[i, ++]
[i]
[values, [, i, ], !=, null]
[values, [, i, ]]
[values]
[i]
[null]
[current]
[values, [, i, ], ., doubleValue, (, )]
[values, [, i, ]]
[values]
[i]
[current]
[Double, ., NaN]
[Double]
[includeNullAndNaN, ||, !, Double, ., isNaN, (, current, )]
[includeNullAndNaN]
[!, Double, ., isNaN, (, current, )]
[Double, ., isNaN, (, current, )]
[Double]
[current]
[sum]
[sum, +, current]
[sum]
[current]
[counter, ++]
[counter]
[(, sum, /, counter, )]
[sum, /, counter]
[sum]
[counter]
[result]
[calculateMean, (, values, ,, true, )]
[values]
[true]
[values, ==, null]
[values]
[null]
[new, IllegalArgumentException, (, "Null 'values' argument.", )]
["Null 'values' argument."]
[0]
[0.0]
[values, ., iterator, (, )]
[values]
[iterator, ., hasNext, (, )]
[iterator]
[iterator, ., next, (, )]
[iterator]
[object, ==, null]
[object]
[null]
[includeNullAndNaN]
[Double, ., NaN]
[Double]
[object, instanceof, Number]
[object]
[(, Number, ), object]
[object]
[number, ., doubleValue, (, )]
[number]
[Double, ., isNaN, (, value, )]
[Double]
[value]
[includeNullAndNaN]
[Double, ., NaN]
[Double]
[total]
[total, +, number, ., doubleValue, (, )]
[total]
[number, ., doubleValue, (, )]
[number]
[count]
[count, +, 1]
[count]
[1]
[total, /, count]
[total]
[count]
[calculateMedian, (, values, ,, true, )]
[values]
[true]
[Double, ., NaN]
[Double]
[values, !=, null]
[values]
[null]
[copyAndSort]
[values, ., size, (, )]
[values]
[new, ArrayList, (, itemCount, )]
[itemCount]
[0]
[i, <, itemCount]
[i]
[itemCount]
[i, ++]
[i]
[copy, ., add, (, i, ,, values, ., get, (, i, ), )]
[copy]
[i]
[values, ., get, (, i, )]
[values]
[i]
[Collections, ., sort, (, copy, )]
[Collections]
[copy]
[values]
[copy]
[values, ., size, (, )]
[values]
[count, >, 0]
[count]
[0]
[count, %, 2, ==, 1]
[count, %, 2]
[count]
[2]
[1]
[count, >, 1]
[count]
[1]
[(, Number, ), values, ., get, (, (, count, -, 1, ), /, 2, )]
[values, ., get, (, (, count, -, 1, ), /, 2, )]
[values]
[(, count, -, 1, ), /, 2]
[(, count, -, 1, )]
[count, -, 1]
[count]
[1]
[2]
[result]
[value, ., doubleValue, (, )]
[value]
[(, Number, ), values, ., get, (, 0, )]
[values, ., get, (, 0, )]
[values]
[0]
[result]
[value, ., doubleValue, (, )]
[value]
[(, Number, ), values, ., get, (, count, /, 2, -, 1, )]
[values, ., get, (, count, /, 2, -, 1, )]
[values]
[count, /, 2, -, 1]
[count, /, 2]
[count]
[2]
[1]
[(, Number, ), values, ., get, (, count, /, 2, )]
[values, ., get, (, count, /, 2, )]
[values]
[count, /, 2]
[count]
[2]
[result]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), )]
[value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, )]
[value1, ., doubleValue, (, )]
[value1]
[value2, ., doubleValue, (, )]
[value2]
[2.0]
[result]
[calculateMedian, (, values, ,, start, ,, end, ,, true, )]
[values]
[start]
[end]
[true]
[Double, ., NaN]
[Double]
[copyAndSort]
[new, ArrayList, (, end, -, start, +, 1, )]
[end, -, start, +, 1]
[end, -, start]
[end]
[start]
[1]
[start]
[i, <=, end]
[i]
[end]
[i, ++]
[i]
[working, ., add, (, values, ., get, (, i, ), )]
[working]
[values, ., get, (, i, )]
[values]
[i]
[Collections, ., sort, (, working, )]
[Collections]
[working]
[result]
[calculateMedian, (, working, ,, false, )]
[working]
[false]
[end, -, start, +, 1]
[end, -, start]
[end]
[start]
[1]
[count, >, 0]
[count]
[0]
[count, %, 2, ==, 1]
[count, %, 2]
[count]
[2]
[1]
[count, >, 1]
[count]
[1]
[(, Number, ), values, ., get, (, start, +, (, count, -, 1, ), /, 2, )]
[values, ., get, (, start, +, (, count, -, 1, ), /, 2, )]
[values]
[start, +, (, count, -, 1, ), /, 2]
[start]
[(, count, -, 1, ), /, 2]
[(, count, -, 1, )]
[count, -, 1]
[count]
[1]
[2]
[result]
[value, ., doubleValue, (, )]
[value]
[(, Number, ), values, ., get, (, start, )]
[values, ., get, (, start, )]
[values]
[start]
[result]
[value, ., doubleValue, (, )]
[value]
[(, Number, ), values, ., get, (, start, +, count, /, 2, -, 1, )]
[values, ., get, (, start, +, count, /, 2, -, 1, )]
[values]
[start, +, count, /, 2, -, 1]
[start, +, count, /, 2]
[start]
[count, /, 2]
[count]
[2]
[1]
[(, Number, ), values, ., get, (, start, +, count, /, 2, )]
[values, ., get, (, start, +, count, /, 2, )]
[values]
[start, +, count, /, 2]
[start]
[count, /, 2]
[count]
[2]
[result]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), ), /, 2.0]
[(, value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, ), )]
[value1, ., doubleValue, (, ), +, value2, ., doubleValue, (, )]
[value1, ., doubleValue, (, )]
[value1]
[value2, ., doubleValue, (, )]
[value2]
[2.0]
[result]
[data, ==, null]
[data]
[null]
[new, IllegalArgumentException, (, "Null 'data' array.", )]
["Null 'data' array."]
[data, ., length, ==, 0]
[data, ., length]
[data]
[0]
[new, IllegalArgumentException, (, "Zero length 'data' array.", )]
["Zero length 'data' array."]
[calculateMean, (, data, )]
[data]
[0.0]
[0]
[counter, <, data, ., length]
[counter]
[data, ., length]
[data]
[counter, ++]
[counter]
[data, [, counter, ], ., doubleValue, (, ), -, avg]
[data, [, counter, ], ., doubleValue, (, )]
[data, [, counter, ]]
[data]
[counter]
[avg]
[sum]
[sum, +, diff, *, diff]
[sum]
[diff, *, diff]
[diff]
[diff]
[Math, ., sqrt, (, sum, /, (, data, ., length, -, 1, ), )]
[Math]
[sum, /, (, data, ., length, -, 1, )]
[sum]
[(, data, ., length, -, 1, )]
[data, ., length, -, 1]
[data, ., length]
[data]
[1]
[xData, ==, null]
[xData]
[null]
[new, IllegalArgumentException, (, "Null 'xData' argument.", )]
["Null 'xData' argument."]
[yData, ==, null]
[yData]
[null]
[new, IllegalArgumentException, (, "Null 'yData' argument.", )]
["Null 'yData' argument."]
[xData, ., length, !=, yData, ., length]
[xData, ., length]
[xData]
[yData, ., length]
[yData]
[new, IllegalArgumentException, (, "Statistics.getLinearFit(): array lengths must be equal.", )]
["Statistics.getLinearFit(): array lengths must be equal."]
[new, double, [, 2, ]]
[2]
[result, [, 1, ]]
[result]
[1]
[getSlope, (, xData, ,, yData, )]
[xData]
[yData]
[result, [, 0, ]]
[result]
[0]
[calculateMean, (, yData, ), -, result, [, 1, ], *, calculateMean, (, xData, )]
[calculateMean, (, yData, )]
[yData]
[result, [, 1, ], *, calculateMean, (, xData, )]
[result, [, 1, ]]
[result]
[1]
[calculateMean, (, xData, )]
[xData]
[result]
[xData, ==, null]
[xData]
[null]
[new, IllegalArgumentException, (, "Null 'xData' argument.", )]
["Null 'xData' argument."]
[yData, ==, null]
[yData]
[null]
[new, IllegalArgumentException, (, "Null 'yData' argument.", )]
["Null 'yData' argument."]
[xData, ., length, !=, yData, ., length]
[xData, ., length]
[xData]
[yData, ., length]
[yData]
[new, IllegalArgumentException, (, "Array lengths must be equal.", )]
["Array lengths must be equal."]
[0.0]
[0.0]
[0.0]
[0.0]
[counter]
[0]
[counter, <, xData, ., length]
[counter]
[xData, ., length]
[xData]
[counter, ++]
[counter]
[sx]
[sx, +, xData, [, counter, ], ., doubleValue, (, )]
[sx]
[xData, [, counter, ], ., doubleValue, (, )]
[xData, [, counter, ]]
[xData]
[counter]
[sxx]
[sxx, +, Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, )]
[sxx]
[Math, ., pow, (, xData, [, counter, ], ., doubleValue, (, ), ,, 2, )]
[Math]
[xData, [, counter, ], ., doubleValue, (, )]
[xData, [, counter, ]]
[xData]
[counter]
[2]
[sxy]
[sxy, +, yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, )]
[sxy]
[yData, [, counter, ], ., doubleValue, (, ), *, xData, [, counter, ], ., doubleValue, (, )]
[yData, [, counter, ], ., doubleValue, (, )]
[yData, [, counter, ]]
[yData]
[counter]
[xData, [, counter, ], ., doubleValue, (, )]
[xData, [, counter, ]]
[xData]
[counter]
[sy]
[sy, +, yData, [, counter, ], ., doubleValue, (, )]
[sy]
[yData, [, counter, ], ., doubleValue, (, )]
[yData, [, counter, ]]
[yData]
[counter]
[(, sxy, -, (, sx, *, sy, ), /, counter, ), /, (, sxx, -, (, sx, *, sx, ), /, counter, )]
[(, sxy, -, (, sx, *, sy, ), /, counter, )]
[sxy, -, (, sx, *, sy, ), /, counter]
[sxy]
[(, sx, *, sy, ), /, counter]
[(, sx, *, sy, )]
[sx, *, sy]
[sx]
[sy]
[counter]
[(, sxx, -, (, sx, *, sx, ), /, counter, )]
[sxx, -, (, sx, *, sx, ), /, counter]
[sxx]
[(, sx, *, sx, ), /, counter]
[(, sx, *, sx, )]
[sx, *, sx]
[sx]
[sx]
[counter]
[data1, ==, null]
[data1]
[null]
[new, IllegalArgumentException, (, "Null 'data1' argument.", )]
["Null 'data1' argument."]
[data2, ==, null]
[data2]
[null]
[new, IllegalArgumentException, (, "Null 'data2' argument.", )]
["Null 'data2' argument."]
[data1, ., length, !=, data2, ., length]
[data1, ., length]
[data1]
[data2, ., length]
[data2]
[new, IllegalArgumentException, (, "'data1' and 'data2' arrays must have same length.", )]
["'data1' and 'data2' arrays must have same length."]
[data1, ., length]
[data1]
[0.0]
[0.0]
[0.0]
[0.0]
[0.0]
[0]
[i, <, n]
[i]
[n]
[i, ++]
[i]
[0.0]
[data1, [, i, ], !=, null]
[data1, [, i, ]]
[data1]
[i]
[null]
[x]
[data1, [, i, ], ., doubleValue, (, )]
[data1, [, i, ]]
[data1]
[i]
[0.0]
[data2, [, i, ], !=, null]
[data2, [, i, ]]
[data2]
[i]
[null]
[y]
[data2, [, i, ], ., doubleValue, (, )]
[data2, [, i, ]]
[data2]
[i]
[sumX]
[sumX, +, x]
[sumX]
[x]
[sumY]
[sumY, +, y]
[sumY]
[y]
[sumXY]
[sumXY, +, (, x, *, y, )]
[sumXY]
[(, x, *, y, )]
[x, *, y]
[x]
[y]
[sumX2]
[sumX2, +, (, x, *, x, )]
[sumX2]
[(, x, *, x, )]
[x, *, x]
[x]
[x]
[sumY2]
[sumY2, +, (, y, *, y, )]
[sumY2]
[(, y, *, y, )]
[y, *, y]
[y]
[y]
[(, n, *, sumXY, -, sumX, *, sumY, ), /, Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, )]
[(, n, *, sumXY, -, sumX, *, sumY, )]
[n, *, sumXY, -, sumX, *, sumY]
[n, *, sumXY]
[n]
[sumXY]
[sumX, *, sumY]
[sumX]
[sumY]
[Math, ., pow, (, (, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, ), ,, 0.5, )]
[Math]
[(, n, *, sumX2, -, sumX, *, sumX, ), *, (, n, *, sumY2, -, sumY, *, sumY, )]
[(, n, *, sumX2, -, sumX, *, sumX, )]
[n, *, sumX2, -, sumX, *, sumX]
[n, *, sumX2]
[n]
[sumX2]
[sumX, *, sumX]
[sumX]
[sumX]
[(, n, *, sumY2, -, sumY, *, sumY, )]
[n, *, sumY2, -, sumY, *, sumY]
[n, *, sumY2]
[n]
[sumY2]
[sumY, *, sumY]
[sumY]
[sumY]
[0.5]
[xData, ., length, !=, yData, ., length]
[xData, ., length]
[xData]
[yData, ., length]
[yData]
[new, IllegalArgumentException, (, "Array lengths must be equal.", )]
["Array lengths must be equal."]
[period, >, xData, ., length]
[period]
[xData, ., length]
[xData]
[new, IllegalArgumentException, (, "Period can't be longer than dataset.", )]
["Period can't be longer than dataset."]
[new, double, [, xData, ., length, -, period, ], [, 2, ]]
[xData, ., length, -, period]
[xData, ., length]
[xData]
[period]
[2]
[0]
[i, <, result, ., length]
[i]
[result, ., length]
[result]
[i, ++]
[i]
[result, [, i, ], [, 0, ]]
[result, [, i, ]]
[result]
[i]
[0]
[xData, [, i, +, period, ], ., doubleValue, (, )]
[xData, [, i, +, period, ]]
[xData]
[i, +, period]
[i]
[period]
[0.0]
[0]
[j, <, period]
[j]
[period]
[j, ++]
[j]
[sum]
[yData, [, i, +, j, ], ., doubleValue, (, )]
[yData, [, i, +, j, ]]
[yData]
[i, +, j]
[i]
[j]
[sum]
[sum, /, period]
[sum]
[period]
[result, [, i, ], [, 1, ]]
[result, [, i, ]]
[result]
[i]
[1]
[sum]
[result]
