[DiagnosticType, ., warning, (, "JSC_FUNCTION_LITERAL_UNDEFINED_THIS", ,, "Function literal argument refers to undefined this argument", )]
[DiagnosticType]
["JSC_FUNCTION_LITERAL_UNDEFINED_THIS"]
["Function literal argument refers to undefined this argument"]
[cfg]
[new, LinkedFlowScope, ., FlowScopeJoinOp, (, )]
[this, ., compiler]
[this]
[compiler]
[this, ., registry]
[this]
[compiler, ., getTypeRegistry, (, )]
[compiler]
[this, ., reverseInterpreter]
[this]
[reverseInterpreter]
[this, ., unknownType]
[this]
[registry, ., getNativeObjectType, (, UNKNOWN_TYPE, )]
[registry]
[UNKNOWN_TYPE]
[this, ., syntacticScope]
[this]
[functionScope]
[inferArguments, (, functionScope, )]
[functionScope]
[this, ., functionScope]
[this]
[LinkedFlowScope, ., createEntryLattice, (, functionScope, )]
[LinkedFlowScope]
[functionScope]
[this, ., assertionFunctionsMap]
[this]
[assertionFunctionsMap]
[functionScope, ., getDeclarativelyUnboundVarsWithoutTypes, (, )]
[functionScope]
[varIt, ., hasNext, (, )]
[varIt]
[varIt, ., next, (, )]
[varIt]
[isUnflowable, (, var, )]
[var]
[this, ., functionScope, ., inferSlotType, (, var, ., getName, (, ), ,, getNativeType, (, VOID_TYPE, ), )]
[this, ., functionScope]
[this]
[var, ., getName, (, )]
[var]
[getNativeType, (, VOID_TYPE, )]
[VOID_TYPE]
[this, ., bottomScope]
[this]
[LinkedFlowScope, ., createEntryLattice, (, Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), ), )]
[LinkedFlowScope]
[Scope, ., createLatticeBottom, (, functionScope, ., getRootNode, (, ), )]
[Scope]
[functionScope, ., getRootNode, (, )]
[functionScope]
[functionScope, ., getRootNode, (, )]
[functionScope]
[functionNode, ., getFirstChild, (, ), ., getNext, (, )]
[functionNode, ., getFirstChild, (, )]
[functionNode]
[null]
[NodeUtil, ., isCallOrNewTarget, (, functionNode, )]
[NodeUtil]
[functionNode]
[iifeArgumentNode]
[functionNode, ., getNext, (, )]
[functionNode]
[JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), )]
[JSType]
[functionNode, ., getJSType, (, )]
[functionNode]
[functionType, !=, null]
[functionType]
[null]
[functionType, ., getParametersNode, (, )]
[functionType]
[parameterTypes, !=, null]
[parameterTypes]
[null]
[parameterTypes, ., getFirstChild, (, )]
[parameterTypes]
[astParameters, ., children, (, )]
[astParameters]
[functionScope, ., getVar, (, astParameter, ., getString, (, ), )]
[functionScope]
[astParameter, ., getString, (, )]
[astParameter]
[Preconditions, ., checkNotNull, (, var, )]
[Preconditions]
[var]
[var, ., isTypeInferred, (, ), &&, var, ., getType, (, ), ==, unknownType]
[var, ., isTypeInferred, (, )]
[var]
[var, ., getType, (, ), ==, unknownType]
[var, ., getType, (, )]
[var]
[unknownType]
[null]
[iifeArgumentNode, !=, null]
[iifeArgumentNode]
[null]
[newType]
[iifeArgumentNode, ., getJSType, (, )]
[iifeArgumentNode]
[parameterTypeNode, !=, null]
[parameterTypeNode]
[null]
[newType]
[parameterTypeNode, ., getJSType, (, )]
[parameterTypeNode]
[newType, !=, null]
[newType]
[null]
[var, ., setType, (, newType, )]
[var]
[newType]
[astParameter, ., setJSType, (, newType, )]
[astParameter]
[newType]
[parameterTypeNode, !=, null]
[parameterTypeNode]
[null]
[parameterTypeNode]
[parameterTypeNode, ., getNext, (, )]
[parameterTypeNode]
[iifeArgumentNode, !=, null]
[iifeArgumentNode]
[null]
[iifeArgumentNode]
[iifeArgumentNode, ., getNext, (, )]
[iifeArgumentNode]
[bottomScope]
[functionScope]
[input, ==, bottomScope]
[input]
[bottomScope]
[input]
[input, ., createChildFlowScope, (, )]
[input]
[output]
[traverse, (, n, ,, output, )]
[n]
[output]
[output]
[@, SuppressWarnings, (, {, "fallthrough", ,, "incomplete-switch", }, )]
[{, "fallthrough", ,, "incomplete-switch", }]
["fallthrough"]
["incomplete-switch"]
[flowThrough, (, source, ,, input, )]
[source]
[input]
[null]
[null]
[null]
[getCfg, (, ), ., getOutEdges, (, source, )]
[getCfg, (, )]
[source]
[Lists, ., newArrayListWithCapacity, (, branchEdges, ., size, (, ), )]
[Lists]
[branchEdges, ., size, (, )]
[branchEdges]
[branchEdges]
[branchEdge, ., getValue, (, )]
[branchEdge]
[output]
[branch]
[ON_TRUE]
[NodeUtil, ., isForIn, (, source, )]
[NodeUtil]
[source]
[source, ., getFirstChild, (, )]
[source]
[item, ., getNext, (, )]
[item]
[traverse, (, obj, ,, output, ., createChildFlowScope, (, ), )]
[obj]
[output, ., createChildFlowScope, (, )]
[output]
[item, ., isVar, (, )]
[item]
[item]
[item, ., getFirstChild, (, )]
[item]
[item, ., isName, (, )]
[item]
[getNativeType, (, STRING_TYPE, )]
[STRING_TYPE]
[getJSType, (, obj, ), ., dereference, (, )]
[getJSType, (, obj, )]
[obj]
[objType, ==, null, ?, null, :, objType, ., getIndexType, (, )]
[objType, ==, null]
[objType]
[null]
[null]
[objType, ., getIndexType, (, )]
[objType]
[objIndexType, !=, null, &&, !, objIndexType, ., isUnknownType, (, )]
[objIndexType, !=, null]
[objIndexType]
[null]
[!, objIndexType, ., isUnknownType, (, )]
[objIndexType, ., isUnknownType, (, )]
[objIndexType]
[iterKeyType, ., getGreatestSubtype, (, objIndexType, )]
[iterKeyType]
[objIndexType]
[!, narrowedKeyType, ., isEmptyType, (, )]
[narrowedKeyType, ., isEmptyType, (, )]
[narrowedKeyType]
[iterKeyType]
[narrowedKeyType]
[redeclareSimpleVar, (, informed, ,, item, ,, iterKeyType, )]
[informed]
[item]
[iterKeyType]
[newScope]
[informed]
[ON_FALSE]
[condition, ==, null]
[condition]
[null]
[condition]
[NodeUtil, ., getConditionExpression, (, source, )]
[NodeUtil]
[source]
[condition, ==, null, &&, source, ., isCase, (, )]
[condition, ==, null]
[condition]
[null]
[source, ., isCase, (, )]
[source]
[condition]
[source]
[conditionFlowScope, ==, null]
[conditionFlowScope]
[null]
[conditionFlowScope]
[traverse, (, condition, ., getFirstChild, (, ), ,, output, ., createChildFlowScope, (, ), )]
[condition, ., getFirstChild, (, )]
[condition]
[output, ., createChildFlowScope, (, )]
[output]
[condition, !=, null]
[condition]
[null]
[condition, ., isAnd, (, ), ||, condition, ., isOr, (, )]
[condition, ., isAnd, (, )]
[condition]
[condition, ., isOr, (, )]
[condition]
[conditionOutcomes, ==, null]
[conditionOutcomes]
[null]
[conditionOutcomes]
[condition, ., isAnd, (, ), ?, traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), ), :, traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[condition, ., isAnd, (, )]
[condition]
[traverseAnd, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[condition]
[output, ., createChildFlowScope, (, )]
[output]
[traverseOr, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[condition]
[output, ., createChildFlowScope, (, )]
[output]
[newScope]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, ), ,, branch, ==, Branch, ., ON_TRUE, )]
[reverseInterpreter]
[condition]
[conditionOutcomes, ., getOutcomeFlowScope, (, condition, ., getType, (, ), ,, branch, ==, Branch, ., ON_TRUE, )]
[conditionOutcomes]
[condition, ., getType, (, )]
[condition]
[branch, ==, Branch, ., ON_TRUE]
[branch]
[Branch, ., ON_TRUE]
[Branch]
[branch, ==, Branch, ., ON_TRUE]
[branch]
[Branch, ., ON_TRUE]
[Branch]
[conditionFlowScope, ==, null]
[conditionFlowScope]
[null]
[conditionFlowScope]
[traverse, (, condition, ,, output, ., createChildFlowScope, (, ), )]
[condition]
[output, ., createChildFlowScope, (, )]
[output]
[newScope]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, conditionFlowScope, ,, branch, ==, Branch, ., ON_TRUE, )]
[reverseInterpreter]
[condition]
[conditionFlowScope]
[branch, ==, Branch, ., ON_TRUE]
[branch]
[Branch, ., ON_TRUE]
[Branch]
[result, ., add, (, newScope, ., optimize, (, ), )]
[result]
[newScope, ., optimize, (, )]
[newScope]
[result]
[n, ., getType, (, )]
[n]
[Token, ., ASSIGN]
[Token]
[scope]
[traverseAssign, (, n, ,, scope, )]
[n]
[scope]
[Token, ., NAME]
[Token]
[scope]
[traverseName, (, n, ,, scope, )]
[n]
[scope]
[Token, ., GETPROP]
[Token]
[scope]
[traverseGetProp, (, n, ,, scope, )]
[n]
[scope]
[Token, ., AND]
[Token]
[scope]
[traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, )]
[traverseAnd, (, n, ,, scope, ), ., getJoinedFlowScope, (, )]
[traverseAnd, (, n, ,, scope, )]
[n]
[scope]
[Token, ., OR]
[Token]
[scope]
[traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, ), ., createChildFlowScope, (, )]
[traverseOr, (, n, ,, scope, ), ., getJoinedFlowScope, (, )]
[traverseOr, (, n, ,, scope, )]
[n]
[scope]
[Token, ., HOOK]
[Token]
[scope]
[traverseHook, (, n, ,, scope, )]
[n]
[scope]
[Token, ., OBJECTLIT]
[Token]
[scope]
[traverseObjectLiteral, (, n, ,, scope, )]
[n]
[scope]
[Token, ., CALL]
[Token]
[scope]
[traverseCall, (, n, ,, scope, )]
[n]
[scope]
[Token, ., NEW]
[Token]
[scope]
[traverseNew, (, n, ,, scope, )]
[n]
[scope]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ADD]
[Token]
[scope]
[traverseAdd, (, n, ,, scope, )]
[n]
[scope]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[scope]
[traverse, (, n, ., getFirstChild, (, ), ,, scope, )]
[n, ., getFirstChild, (, )]
[n]
[scope]
[n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), )]
[n]
[getNativeType, (, NUMBER_TYPE, )]
[NUMBER_TYPE]
[Token, ., ARRAYLIT]
[Token]
[scope]
[traverseArrayLiteral, (, n, ,, scope, )]
[n]
[scope]
[Token, ., THIS]
[Token]
[n, ., setJSType, (, scope, ., getTypeOfThis, (, ), )]
[n]
[scope, ., getTypeOfThis, (, )]
[scope]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., URSH]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., DIV]
[Token]
[Token, ., MOD]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., MUL]
[Token]
[Token, ., SUB]
[Token]
[Token, ., DEC]
[Token]
[Token, ., INC]
[Token]
[Token, ., BITNOT]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), )]
[n]
[getNativeType, (, NUMBER_TYPE, )]
[NUMBER_TYPE]
[Token, ., PARAM_LIST]
[Token]
[scope]
[traverse, (, n, ., getFirstChild, (, ), ,, scope, )]
[n, ., getFirstChild, (, )]
[n]
[scope]
[n, ., setJSType, (, getJSType, (, n, ., getFirstChild, (, ), ), )]
[n]
[getJSType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., COMMA]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getJSType, (, n, ., getLastChild, (, ), ), )]
[n]
[getJSType, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[Token, ., TYPEOF]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), )]
[n]
[getNativeType, (, STRING_TYPE, )]
[STRING_TYPE]
[Token, ., DELPROP]
[Token]
[Token, ., LT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GT]
[Token]
[Token, ., GE]
[Token]
[Token, ., NOT]
[Token]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., IN]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), )]
[n]
[getNativeType, (, BOOLEAN_TYPE, )]
[BOOLEAN_TYPE]
[Token, ., GETELEM]
[Token]
[scope]
[traverseGetElem, (, n, ,, scope, )]
[n]
[scope]
[Token, ., EXPR_RESULT]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., getFirstChild, (, ), ., isGetProp, (, )]
[n, ., getFirstChild, (, )]
[n]
[ensurePropertyDeclared, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[Token, ., SWITCH]
[Token]
[scope]
[traverse, (, n, ., getFirstChild, (, ), ,, scope, )]
[n, ., getFirstChild, (, )]
[n]
[scope]
[Token, ., RETURN]
[Token]
[scope]
[traverseReturn, (, n, ,, scope, )]
[n]
[scope]
[Token, ., VAR]
[Token]
[Token, ., THROW]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[Token, ., CATCH]
[Token]
[scope]
[traverseCatch, (, n, ,, scope, )]
[n]
[scope]
[Token, ., CAST]
[Token]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[!, n, ., isFunction, (, )]
[n, ., isFunction, (, )]
[n]
[n, ., getJSDocInfo, (, )]
[n]
[info, !=, null, &&, info, ., hasType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasType, (, )]
[info]
[info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, )]
[info, ., getType, (, )]
[info]
[syntacticScope]
[registry]
[n, ., isQualifiedName, (, ), &&, n, ., getParent, (, ), ., isExprResult, (, )]
[n, ., isQualifiedName, (, )]
[n]
[n, ., getParent, (, ), ., isExprResult, (, )]
[n, ., getParent, (, )]
[n]
[updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, castType, )]
[scope]
[n]
[n, ., getJSType, (, )]
[n]
[castType]
[n, ., setJSType, (, castType, )]
[n]
[castType]
[scope]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., getFirstChild, (, )]
[n]
[retValue, !=, null]
[retValue]
[null]
[functionScope, ., getRootNode, (, ), ., getJSType, (, )]
[functionScope, ., getRootNode, (, )]
[functionScope]
[type, !=, null]
[type]
[null]
[type, ., toMaybeFunctionType, (, )]
[type]
[fnType, !=, null]
[fnType]
[null]
[inferPropertyTypesToMatchConstraint, (, retValue, ., getJSType, (, ), ,, fnType, ., getReturnType, (, ), )]
[retValue, ., getJSType, (, )]
[retValue]
[fnType, ., getReturnType, (, )]
[fnType]
[scope]
[catchNode, ., getFirstChild, (, )]
[catchNode]
[name, ., getString, (, )]
[name]
[name, ., getJSDocInfo, (, )]
[name]
[info, !=, null, &&, info, ., hasType, (, )]
[info, !=, null]
[info]
[null]
[info, ., hasType, (, )]
[info]
[type]
[info, ., getType, (, ), ., evaluate, (, syntacticScope, ,, registry, )]
[info, ., getType, (, )]
[info]
[syntacticScope]
[registry]
[type]
[getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[redeclareSimpleVar, (, scope, ,, name, ,, type, )]
[scope]
[name]
[type]
[name, ., setJSType, (, type, )]
[name]
[type]
[scope]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[left, ., getJSType, (, )]
[left]
[getJSType, (, right, )]
[right]
[n, ., setJSType, (, rightType, )]
[n]
[rightType]
[updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, rightType, )]
[scope]
[left]
[leftType]
[rightType]
[scope]
[Preconditions, ., checkNotNull, (, resultType, )]
[Preconditions]
[resultType]
[left, ., getType, (, )]
[left]
[Token, ., NAME]
[Token]
[left, ., getString, (, )]
[left]
[syntacticScope, ., getVar, (, varName, )]
[syntacticScope]
[varName]
[left, ., hasChildren, (, )]
[left]
[!, isVarDeclaration, ||, var, ==, null, ||, var, ., isTypeInferred, (, )]
[!, isVarDeclaration, ||, var, ==, null]
[!, isVarDeclaration]
[isVarDeclaration]
[var, ==, null]
[var]
[null]
[var, ., isTypeInferred, (, )]
[var]
[redeclareSimpleVar, (, scope, ,, left, ,, resultType, )]
[scope]
[left]
[resultType]
[left, ., setJSType, (, isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null, )]
[left]
[isVarDeclaration, ||, leftType, ==, null, ?, resultType, :, null]
[isVarDeclaration, ||, leftType, ==, null]
[isVarDeclaration]
[leftType, ==, null]
[leftType]
[null]
[resultType]
[null]
[var, !=, null, &&, var, ., isTypeInferred, (, )]
[var, !=, null]
[var]
[null]
[var, ., isTypeInferred, (, )]
[var]
[var, ., getType, (, )]
[var]
[var, ., setType, (, oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, ), )]
[var]
[oldType, ==, null, ?, resultType, :, oldType, ., getLeastSupertype, (, resultType, )]
[oldType, ==, null]
[oldType]
[null]
[resultType]
[oldType, ., getLeastSupertype, (, resultType, )]
[oldType]
[resultType]
[Token, ., GETPROP]
[Token]
[left, ., getQualifiedName, (, )]
[left]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[scope, ., inferQualifiedSlot, (, left, ,, qualifiedName, ,, leftType, ==, null, ?, unknownType, :, leftType, ,, resultType, )]
[scope]
[left]
[qualifiedName]
[leftType, ==, null, ?, unknownType, :, leftType]
[leftType, ==, null]
[leftType]
[null]
[unknownType]
[leftType]
[resultType]
[left, ., setJSType, (, resultType, )]
[left]
[resultType]
[ensurePropertyDefined, (, left, ,, resultType, )]
[left]
[resultType]
[getprop, ., getLastChild, (, ), ., getString, (, )]
[getprop, ., getLastChild, (, )]
[getprop]
[getprop, ., getFirstChild, (, )]
[getprop]
[getJSType, (, obj, )]
[obj]
[ObjectType, ., cast, (, nodeType, ., restrictByNotNullOrUndefined, (, ), )]
[ObjectType]
[nodeType, ., restrictByNotNullOrUndefined, (, )]
[nodeType]
[objectType, ==, null]
[objectType]
[null]
[registry, ., registerPropertyOnType, (, propName, ,, nodeType, )]
[registry]
[propName]
[nodeType]
[nodeType, ., isStruct, (, ), &&, !, objectType, ., hasProperty, (, propName, )]
[nodeType, ., isStruct, (, )]
[nodeType]
[!, objectType, ., hasProperty, (, propName, )]
[objectType, ., hasProperty, (, propName, )]
[objectType]
[propName]
[!, (, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), )]
[(, obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, ), )]
[obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, )]
[obj, ., isThis, (, )]
[obj]
[getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, )]
[getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[syntacticScope, ., getRootNode, (, )]
[syntacticScope]
[ensurePropertyDeclaredHelper, (, getprop, ,, objectType, )]
[getprop]
[objectType]
[!, objectType, ., isPropertyTypeDeclared, (, propName, )]
[objectType, ., isPropertyTypeDeclared, (, propName, )]
[objectType]
[propName]
[objectType, ., hasProperty, (, propName, ), ||, !, objectType, ., isInstanceType, (, )]
[objectType, ., hasProperty, (, propName, )]
[objectType]
[propName]
[!, objectType, ., isInstanceType, (, )]
[objectType, ., isInstanceType, (, )]
[objectType]
["prototype", ., equals, (, propName, )]
["prototype"]
[propName]
[objectType, ., defineDeclaredProperty, (, propName, ,, rightType, ,, getprop, )]
[objectType]
[propName]
[rightType]
[getprop]
[objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, )]
[objectType]
[propName]
[rightType]
[getprop]
[obj, ., isThis, (, ), &&, getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, )]
[obj, ., isThis, (, )]
[obj]
[getJSType, (, syntacticScope, ., getRootNode, (, ), ), ., isConstructor, (, )]
[getJSType, (, syntacticScope, ., getRootNode, (, ), )]
[syntacticScope, ., getRootNode, (, )]
[syntacticScope]
[objectType, ., defineInferredProperty, (, propName, ,, rightType, ,, getprop, )]
[objectType]
[propName]
[rightType]
[getprop]
[registry, ., registerPropertyOnType, (, propName, ,, objectType, )]
[registry]
[propName]
[objectType]
[ObjectType, ., cast, (, getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), )]
[ObjectType]
[getJSType, (, getprop, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, getprop, ., getFirstChild, (, ), )]
[getprop, ., getFirstChild, (, )]
[getprop]
[ownerType, !=, null]
[ownerType]
[null]
[ensurePropertyDeclaredHelper, (, getprop, ,, ownerType, )]
[getprop]
[ownerType]
[getprop, ., getLastChild, (, ), ., getString, (, )]
[getprop, ., getLastChild, (, )]
[getprop]
[getprop, ., getQualifiedName, (, )]
[getprop]
[qName, !=, null]
[qName]
[null]
[syntacticScope, ., getVar, (, qName, )]
[syntacticScope]
[qName]
[var, !=, null, &&, !, var, ., isTypeInferred, (, )]
[var, !=, null]
[var]
[null]
[!, var, ., isTypeInferred, (, )]
[var, ., isTypeInferred, (, )]
[var]
[propName, ., equals, (, "prototype", ), ||, (, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), )]
[propName, ., equals, (, "prototype", )]
[propName]
["prototype"]
[(, !, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), ), )]
[!, objectType, ., hasOwnProperty, (, propName, ), &&, (, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), )]
[!, objectType, ., hasOwnProperty, (, propName, )]
[objectType, ., hasOwnProperty, (, propName, )]
[objectType]
[propName]
[(, !, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), ), )]
[!, objectType, ., isInstanceType, (, ), ||, (, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), )]
[!, objectType, ., isInstanceType, (, )]
[objectType, ., isInstanceType, (, )]
[objectType]
[(, var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, ), )]
[var, ., isExtern, (, ), &&, !, objectType, ., isNativeObjectType, (, )]
[var, ., isExtern, (, )]
[var]
[!, objectType, ., isNativeObjectType, (, )]
[objectType, ., isNativeObjectType, (, )]
[objectType]
[objectType, ., defineDeclaredProperty, (, propName, ,, var, ., getType, (, ), ,, getprop, )]
[objectType]
[propName]
[var, ., getType, (, )]
[var]
[getprop]
[false]
[n, ., getString, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[n, ., getJSType, (, )]
[n]
[value, !=, null]
[value]
[null]
[scope]
[traverse, (, value, ,, scope, )]
[value]
[scope]
[updateScopeForTypeChange, (, scope, ,, n, ,, n, ., getJSType, (, ), ,, getJSType, (, value, ), )]
[scope]
[n]
[n, ., getJSType, (, )]
[n]
[getJSType, (, value, )]
[value]
[scope]
[scope, ., getSlot, (, varName, )]
[scope]
[varName]
[var, !=, null]
[var]
[null]
[var, ., isTypeInferred, (, )]
[var]
[isInferred, &&, isUnflowable, (, syntacticScope, ., getVar, (, varName, ), )]
[isInferred]
[isUnflowable, (, syntacticScope, ., getVar, (, varName, ), )]
[syntacticScope, ., getVar, (, varName, )]
[syntacticScope]
[varName]
[false]
[isInferred, &&, syntacticScope, ., isLocal, (, )]
[isInferred]
[syntacticScope, ., isLocal, (, )]
[syntacticScope]
[syntacticScope, ., getParent, (, ), ., getVar, (, varName, )]
[syntacticScope, ., getParent, (, )]
[syntacticScope]
[varName]
[var, ==, maybeOuterVar, &&, !, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, )]
[var, ==, maybeOuterVar]
[var]
[maybeOuterVar]
[!, maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, )]
[maybeOuterVar, ., isMarkedAssignedExactlyOnce, (, )]
[maybeOuterVar]
[nonLocalInferredSlot]
[true]
[!, unflowable, &&, !, nonLocalInferredSlot]
[!, unflowable]
[unflowable]
[!, nonLocalInferredSlot]
[nonLocalInferredSlot]
[type]
[var, ., getType, (, )]
[var]
[type, ==, null]
[type]
[null]
[type]
[unknownType]
[n, ., setJSType, (, type, )]
[n]
[type]
[scope]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getNativeType, (, ARRAY_TYPE, ), )]
[n]
[getNativeType, (, ARRAY_TYPE, )]
[ARRAY_TYPE]
[scope]
[n, ., getJSType, (, )]
[n]
[Preconditions, ., checkNotNull, (, type, )]
[Preconditions]
[type]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null]
[name]
[null]
[name]
[name, ., getNext, (, )]
[name]
[scope]
[traverse, (, name, ., getFirstChild, (, ), ,, scope, )]
[name, ., getFirstChild, (, )]
[name]
[scope]
[ObjectType, ., cast, (, type, )]
[ObjectType]
[type]
[objectType, ==, null]
[objectType]
[null]
[scope]
[n, ., getJSDocInfo, (, ), !=, null, &&, n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null]
[n, ., getJSDocInfo, (, ), !=, null]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[n, ., getJSDocInfo, (, ), ., getLendsName, (, ), !=, null]
[n, ., getJSDocInfo, (, ), ., getLendsName, (, )]
[n, ., getJSDocInfo, (, )]
[n]
[null]
[objectType, ., hasReferenceName, (, ), &&, !, hasLendsName]
[objectType, ., hasReferenceName, (, )]
[objectType]
[!, hasLendsName]
[hasLendsName]
[scope]
[NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, n, ), )]
[NodeUtil]
[NodeUtil, ., getBestLValue, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, )]
[n]
[name, !=, null]
[name]
[null]
[name]
[name, ., getNext, (, )]
[name]
[name, ., getFirstChild, (, )]
[name]
[NodeUtil, ., getObjectLitKeyName, (, name, )]
[NodeUtil]
[name]
[memberName, !=, null]
[memberName]
[null]
[name, ., getFirstChild, (, ), ., getJSType, (, )]
[name, ., getFirstChild, (, )]
[name]
[NodeUtil, ., getObjectLitKeyTypeFromValueType, (, name, ,, rawValueType, )]
[NodeUtil]
[name]
[rawValueType]
[valueType, ==, null]
[valueType]
[null]
[valueType]
[unknownType]
[objectType, ., defineInferredProperty, (, memberName, ,, valueType, ,, name, )]
[objectType]
[memberName]
[valueType]
[name]
[qObjName, !=, null, &&, name, ., isStringKey, (, )]
[qObjName, !=, null]
[qObjName]
[null]
[name, ., isStringKey, (, )]
[name]
[qObjName, +, ".", +, memberName]
[qObjName, +, "."]
[qObjName]
["."]
[memberName]
[syntacticScope, ., getVar, (, qKeyName, )]
[syntacticScope]
[qKeyName]
[var, ==, null, ?, null, :, var, ., getType, (, )]
[var, ==, null]
[var]
[null]
[null]
[var, ., getType, (, )]
[var]
[var, !=, null, &&, var, ., isTypeInferred, (, )]
[var, !=, null]
[var]
[null]
[var, ., isTypeInferred, (, )]
[var]
[var, ., setType, (, oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, ), )]
[var]
[oldType, ==, null, ?, valueType, :, oldType, ., getLeastSupertype, (, oldType, )]
[oldType, ==, null]
[oldType]
[null]
[valueType]
[oldType, ., getLeastSupertype, (, oldType, )]
[oldType]
[oldType]
[scope, ., inferQualifiedSlot, (, name, ,, qKeyName, ,, oldType, ==, null, ?, unknownType, :, oldType, ,, valueType, )]
[scope]
[name]
[qKeyName]
[oldType, ==, null, ?, unknownType, :, oldType]
[oldType, ==, null]
[oldType]
[null]
[unknownType]
[oldType]
[valueType]
[n, ., setJSType, (, unknownType, )]
[n]
[unknownType]
[scope]
[n, ., getFirstChild, (, )]
[n]
[left, ., getNext, (, )]
[left]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[left, ., getJSType, (, )]
[left]
[right, ., getJSType, (, )]
[right]
[unknownType]
[leftType, !=, null, &&, rightType, !=, null]
[leftType, !=, null]
[leftType]
[null]
[rightType, !=, null]
[rightType]
[null]
[leftType, ., isUnknownType, (, )]
[leftType]
[rightType, ., isUnknownType, (, )]
[rightType]
[leftIsUnknown, &&, rightIsUnknown]
[leftIsUnknown]
[rightIsUnknown]
[type]
[unknownType]
[(, !, leftIsUnknown, &&, leftType, ., isString, (, ), ), ||, (, !, rightIsUnknown, &&, rightType, ., isString, (, ), )]
[(, !, leftIsUnknown, &&, leftType, ., isString, (, ), )]
[!, leftIsUnknown, &&, leftType, ., isString, (, )]
[!, leftIsUnknown]
[leftIsUnknown]
[leftType, ., isString, (, )]
[leftType]
[(, !, rightIsUnknown, &&, rightType, ., isString, (, ), )]
[!, rightIsUnknown, &&, rightType, ., isString, (, )]
[!, rightIsUnknown]
[rightIsUnknown]
[rightType, ., isString, (, )]
[rightType]
[type]
[getNativeType, (, STRING_TYPE, )]
[STRING_TYPE]
[leftIsUnknown, ||, rightIsUnknown]
[leftIsUnknown]
[rightIsUnknown]
[type]
[unknownType]
[isAddedAsNumber, (, leftType, ), &&, isAddedAsNumber, (, rightType, )]
[isAddedAsNumber, (, leftType, )]
[leftType]
[isAddedAsNumber, (, rightType, )]
[rightType]
[type]
[getNativeType, (, NUMBER_TYPE, )]
[NUMBER_TYPE]
[type]
[registry, ., createUnionType, (, STRING_TYPE, ,, NUMBER_TYPE, )]
[registry]
[STRING_TYPE]
[NUMBER_TYPE]
[n, ., setJSType, (, type, )]
[n]
[type]
[n, ., isAssignAdd, (, )]
[n]
[updateScopeForTypeChange, (, scope, ,, left, ,, leftType, ,, type, )]
[scope]
[left]
[leftType]
[type]
[scope]
[type, ., isSubtype, (, registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, ), )]
[type]
[registry, ., createUnionType, (, VOID_TYPE, ,, NULL_TYPE, ,, NUMBER_VALUE_OR_OBJECT_TYPE, ,, BOOLEAN_TYPE, ,, BOOLEAN_OBJECT_TYPE, )]
[registry]
[VOID_TYPE]
[NULL_TYPE]
[NUMBER_VALUE_OR_OBJECT_TYPE]
[BOOLEAN_TYPE]
[BOOLEAN_OBJECT_TYPE]
[n, ., getFirstChild, (, )]
[n]
[condition, ., getNext, (, )]
[condition]
[n, ., getLastChild, (, )]
[n]
[scope]
[traverse, (, condition, ,, scope, )]
[condition]
[scope]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, true, )]
[reverseInterpreter]
[condition]
[scope]
[true]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, condition, ,, scope, ,, false, )]
[reverseInterpreter]
[condition]
[scope]
[false]
[traverse, (, trueNode, ,, trueScope, ., createChildFlowScope, (, ), )]
[trueNode]
[trueScope, ., createChildFlowScope, (, )]
[trueScope]
[traverse, (, falseNode, ,, falseScope, ., createChildFlowScope, (, ), )]
[falseNode]
[falseScope, ., createChildFlowScope, (, )]
[falseScope]
[trueNode, ., getJSType, (, )]
[trueNode]
[falseNode, ., getJSType, (, )]
[falseNode]
[trueType, !=, null, &&, falseType, !=, null]
[trueType, !=, null]
[trueType]
[null]
[falseType, !=, null]
[falseType]
[null]
[n, ., setJSType, (, trueType, ., getLeastSupertype, (, falseType, ), )]
[n]
[trueType, ., getLeastSupertype, (, falseType, )]
[trueType]
[falseType]
[n, ., setJSType, (, null, )]
[n]
[null]
[scope, ., createChildFlowScope, (, )]
[scope]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., getFirstChild, (, )]
[n]
[getJSType, (, left, ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, left, )]
[left]
[functionType, ., isFunctionType, (, )]
[functionType]
[functionType, ., toMaybeFunctionType, (, )]
[functionType]
[n, ., setJSType, (, fnType, ., getReturnType, (, ), )]
[n]
[fnType, ., getReturnType, (, )]
[fnType]
[backwardsInferenceFromCallSite, (, n, ,, fnType, )]
[n]
[fnType]
[functionType, ., isEquivalentTo, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), )]
[functionType]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[CHECKED_UNKNOWN_TYPE]
[n, ., setJSType, (, getNativeType, (, CHECKED_UNKNOWN_TYPE, ), )]
[n]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[CHECKED_UNKNOWN_TYPE]
[scope]
[tightenTypesAfterAssertions, (, scope, ,, n, )]
[scope]
[n]
[scope]
[callNode, ., getFirstChild, (, )]
[callNode]
[left, ., getNext, (, )]
[left]
[assertionFunctionsMap, ., get, (, left, ., getQualifiedName, (, ), )]
[assertionFunctionsMap]
[left, ., getQualifiedName, (, )]
[left]
[assertionFunctionSpec, ==, null, ||, firstParam, ==, null]
[assertionFunctionSpec, ==, null]
[assertionFunctionSpec]
[null]
[firstParam, ==, null]
[firstParam]
[null]
[scope]
[assertionFunctionSpec, ., getAssertedParam, (, firstParam, )]
[assertionFunctionSpec]
[firstParam]
[assertedNode, ==, null]
[assertedNode]
[null]
[scope]
[assertionFunctionSpec, ., getAssertedType, (, callNode, ,, registry, )]
[assertionFunctionSpec]
[callNode]
[registry]
[assertedNode, ., getQualifiedName, (, )]
[assertedNode]
[assertedType, ==, null]
[assertedType]
[null]
[scope]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, assertedNode, ,, scope, ,, true, )]
[reverseInterpreter]
[assertedNode]
[scope]
[true]
[narrowed]
[getJSType, (, assertedNode, ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, assertedNode, )]
[assertedNode]
[getJSType, (, assertedNode, )]
[assertedNode]
[narrowed]
[type, ., getGreatestSubtype, (, assertedType, )]
[type]
[assertedType]
[assertedNodeName, !=, null, &&, type, ., differsFrom, (, narrowed, )]
[assertedNodeName, !=, null]
[assertedNodeName]
[null]
[type, ., differsFrom, (, narrowed, )]
[type]
[narrowed]
[scope]
[narrowScope, (, scope, ,, assertedNode, ,, narrowed, )]
[scope]
[assertedNode]
[narrowed]
[callNode, ., setJSType, (, narrowed, )]
[callNode]
[narrowed]
[scope]
[node, ., isThis, (, )]
[node]
[scope]
[scope]
[scope, ., createChildFlowScope, (, )]
[scope]
[node, ., isGetProp, (, )]
[node]
[scope, ., inferQualifiedSlot, (, node, ,, node, ., getQualifiedName, (, ), ,, getJSType, (, node, ), ,, narrowed, )]
[scope]
[node]
[node, ., getQualifiedName, (, )]
[node]
[getJSType, (, node, )]
[node]
[narrowed]
[redeclareSimpleVar, (, scope, ,, node, ,, narrowed, )]
[scope]
[node]
[narrowed]
[scope]
[inferTemplatedTypesForCall, (, n, ,, fnType, )]
[n]
[fnType]
[updatedFnType]
[fnType]
[n, ., getFirstChild, (, ), ., getJSType, (, ), ., toMaybeFunctionType, (, )]
[n, ., getFirstChild, (, ), ., getJSType, (, )]
[n, ., getFirstChild, (, )]
[n]
[updateTypeOfParameters, (, n, ,, fnType, )]
[n]
[fnType]
[updateBind, (, n, ,, fnType, )]
[n]
[fnType]
[compiler, ., getCodingConvention, (, ), ., describeFunctionBind, (, n, ,, true, )]
[compiler, ., getCodingConvention, (, )]
[compiler]
[n]
[true]
[bind, ==, null]
[bind]
[null]
[getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, )]
[getJSType, (, bind, ., target, ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, bind, ., target, )]
[bind, ., target]
[bind]
[callTargetFn, ==, null]
[callTargetFn]
[null]
[n, ., setJSType, (, callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1, ), )]
[n]
[callTargetFn, ., getBindReturnType, (, bind, ., getBoundParameterCount, (, ), +, 1, )]
[callTargetFn]
[bind, ., getBoundParameterCount, (, ), +, 1]
[bind, ., getBoundParameterCount, (, )]
[bind]
[1]
[0]
[n, ., getChildCount, (, )]
[n]
[fnType, ., getParameters, (, )]
[fnType]
[i, +, 1, >=, childCount]
[i, +, 1]
[i]
[1]
[childCount]
[getJSType, (, iParameter, )]
[iParameter]
[n, ., getChildAtIndex, (, i, +, 1, )]
[n]
[i, +, 1]
[i]
[1]
[getJSType, (, iArgument, )]
[iArgument]
[inferPropertyTypesToMatchConstraint, (, iArgumentType, ,, iParameterType, )]
[iArgumentType]
[iParameterType]
[iParameterType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, )]
[iParameterType, ., restrictByNotNullOrUndefined, (, )]
[iParameterType]
[restrictedParameter, !=, null]
[restrictedParameter]
[null]
[iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, ), &&, iArgument, ., getJSDocInfo, (, ), ==, null]
[iArgument, ., isFunction, (, ), &&, iArgumentType, ., isFunctionType, (, )]
[iArgument, ., isFunction, (, )]
[iArgument]
[iArgumentType, ., isFunctionType, (, )]
[iArgumentType]
[iArgument, ., getJSDocInfo, (, ), ==, null]
[iArgument, ., getJSDocInfo, (, )]
[iArgument]
[null]
[iArgument, ., setJSType, (, restrictedParameter, )]
[iArgument]
[restrictedParameter]
[i, ++]
[i]
[fnType, ., getTemplateKeys, (, ), ., isEmpty, (, )]
[fnType, ., getTemplateKeys, (, )]
[fnType]
[Collections, ., emptyMap, (, )]
[Collections]
[Maps, ., newIdentityHashMap, (, )]
[Maps]
[call, ., getFirstChild, (, )]
[call]
[NodeUtil, ., isGet, (, callTarget, )]
[NodeUtil]
[callTarget]
[callTarget, ., getFirstChild, (, )]
[callTarget]
[maybeResolveTemplatedType, (, fnType, ., getTypeOfThis, (, ), ,, getJSType, (, obj, ), ,, resolvedTypes, )]
[fnType, ., getTypeOfThis, (, )]
[fnType]
[getJSType, (, obj, )]
[obj]
[resolvedTypes]
[call, ., hasMoreThanOneChild, (, )]
[call]
[maybeResolveTemplateTypeFromNodes, (, fnType, ., getParameters, (, ), ,, call, ., getChildAtIndex, (, 1, ), ., siblings, (, ), ,, resolvedTypes, )]
[fnType, ., getParameters, (, )]
[fnType]
[call, ., getChildAtIndex, (, 1, ), ., siblings, (, )]
[call, ., getChildAtIndex, (, 1, )]
[call]
[1]
[resolvedTypes]
[resolvedTypes]
[paramType, ., isTemplateType, (, )]
[paramType]
[resolvedTemplateType, (, resolvedTypes, ,, paramType, ., toMaybeTemplateType, (, ), ,, argType, )]
[resolvedTypes]
[paramType, ., toMaybeTemplateType, (, )]
[paramType]
[argType]
[paramType, ., isUnionType, (, )]
[paramType]
[paramType, ., toMaybeUnionType, (, )]
[paramType]
[unionType, ., getAlternates, (, )]
[unionType]
[maybeResolveTemplatedType, (, alernative, ,, argType, ,, resolvedTypes, )]
[alernative]
[argType]
[resolvedTypes]
[paramType, ., isFunctionType, (, )]
[paramType]
[paramType, ., toMaybeFunctionType, (, )]
[paramType]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeFunctionType, (, )]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, )]
[argType, ., restrictByNotNullOrUndefined, (, )]
[argType]
[argFunctionType, !=, null, &&, argFunctionType, ., isSubtype, (, paramType, )]
[argFunctionType, !=, null]
[argFunctionType]
[null]
[argFunctionType, ., isSubtype, (, paramType, )]
[argFunctionType]
[paramType]
[maybeResolveTemplatedType, (, paramFunctionType, ., getTypeOfThis, (, ), ,, argFunctionType, ., getTypeOfThis, (, ), ,, resolvedTypes, )]
[paramFunctionType, ., getTypeOfThis, (, )]
[paramFunctionType]
[argFunctionType, ., getTypeOfThis, (, )]
[argFunctionType]
[resolvedTypes]
[maybeResolveTemplatedType, (, paramFunctionType, ., getReturnType, (, ), ,, argFunctionType, ., getReturnType, (, ), ,, resolvedTypes, )]
[paramFunctionType, ., getReturnType, (, )]
[paramFunctionType]
[argFunctionType, ., getReturnType, (, )]
[argFunctionType]
[resolvedTypes]
[maybeResolveTemplateTypeFromNodes, (, paramFunctionType, ., getParameters, (, ), ,, argFunctionType, ., getParameters, (, ), ,, resolvedTypes, )]
[paramFunctionType, ., getParameters, (, )]
[paramFunctionType]
[argFunctionType, ., getParameters, (, )]
[argFunctionType]
[resolvedTypes]
[paramType, ., isParameterizedType, (, )]
[paramType]
[paramType, ., toMaybeParameterizedType, (, )]
[paramType]
[paramObjectType, ., getParameterType, (, )]
[paramObjectType]
[Preconditions, ., checkNotNull, (, typeParameter, )]
[Preconditions]
[typeParameter]
[typeParameter, !=, null]
[typeParameter]
[null]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, ), ., toMaybeParameterizedType, (, )]
[argType, ., restrictByNotNullOrUndefined, (, ), ., collapseUnion, (, )]
[argType, ., restrictByNotNullOrUndefined, (, )]
[argType]
[argObjectType, !=, null, &&, argObjectType, ., isSubtype, (, paramType, )]
[argObjectType, !=, null]
[argObjectType]
[null]
[argObjectType, ., isSubtype, (, paramType, )]
[argObjectType]
[paramType]
[argObjectType, ., getParameterType, (, )]
[argObjectType]
[Preconditions, ., checkNotNull, (, argTypeParameter, )]
[Preconditions]
[argTypeParameter]
[maybeResolveTemplatedType, (, typeParameter, ,, argTypeParameter, ,, resolvedTypes, )]
[typeParameter]
[argTypeParameter]
[resolvedTypes]
[maybeResolveTemplateTypeFromNodes, (, declParams, ., iterator, (, ), ,, callParams, ., iterator, (, ), ,, resolvedTypes, )]
[declParams, ., iterator, (, )]
[declParams]
[callParams, ., iterator, (, )]
[callParams]
[resolvedTypes]
[declParams, ., hasNext, (, ), &&, callParams, ., hasNext, (, )]
[declParams, ., hasNext, (, )]
[declParams]
[callParams, ., hasNext, (, )]
[callParams]
[declParams, ., next, (, )]
[declParams]
[maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, )]
[getJSType, (, declParam, )]
[declParam]
[getJSType, (, callParams, ., next, (, ), )]
[callParams, ., next, (, )]
[callParams]
[resolvedTypes]
[declParam, ., isVarArgs, (, )]
[declParam]
[callParams, ., hasNext, (, )]
[callParams]
[maybeResolveTemplatedType, (, getJSType, (, declParam, ), ,, getJSType, (, callParams, ., next, (, ), ), ,, resolvedTypes, )]
[getJSType, (, declParam, )]
[declParam]
[getJSType, (, callParams, ., next, (, ), )]
[callParams, ., next, (, )]
[callParams]
[resolvedTypes]
[map, ., get, (, template, )]
[map]
[template]
[!, resolved, ., isUnknownType, (, )]
[resolved, ., isUnknownType, (, )]
[resolved]
[previous, ==, null]
[previous]
[null]
[map, ., put, (, template, ,, resolved, )]
[map]
[template]
[resolved]
[previous, ., getLeastSupertype, (, resolved, )]
[previous]
[resolved]
[map, ., put, (, template, ,, join, )]
[map]
[template]
[join]
[false]
[registry]
[this, ., registry]
[this]
[registry]
[this, ., replacements]
[this]
[replacements]
[madeChanges]
[true]
[replacements, ., get, (, type, )]
[replacements]
[type]
[replacement, !=, null, ?, replacement, :, registry, ., getNativeType, (, UNKNOWN_TYPE, )]
[replacement, !=, null]
[replacement]
[null]
[replacement]
[registry, ., getNativeType, (, UNKNOWN_TYPE, )]
[registry]
[UNKNOWN_TYPE]
[fnType, ., getTemplateKeys, (, ), ., isEmpty, (, )]
[fnType, ., getTemplateKeys, (, )]
[fnType]
[false]
[inferTemplateTypesFromParameters, (, fnType, ,, n, )]
[fnType]
[n]
[new, TemplateTypeReplacer, (, registry, ,, inferred, )]
[registry]
[inferred]
[n, ., getFirstChild, (, )]
[n]
[fnType, ., visit, (, replacer, ), ., toMaybeFunctionType, (, )]
[fnType, ., visit, (, replacer, )]
[fnType]
[replacer]
[Preconditions, ., checkNotNull, (, replacementFnType, )]
[Preconditions]
[replacementFnType]
[callTarget, ., setJSType, (, replacementFnType, )]
[callTarget]
[replacementFnType]
[n, ., setJSType, (, replacementFnType, ., getReturnType, (, ), )]
[n]
[replacementFnType, ., getReturnType, (, )]
[replacementFnType]
[replacer, ., madeChanges]
[replacer]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., getFirstChild, (, )]
[n]
[constructor, ., getJSType, (, )]
[constructor]
[null]
[constructorType, !=, null]
[constructorType]
[null]
[constructorType]
[constructorType, ., restrictByNotNullOrUndefined, (, )]
[constructorType]
[constructorType, ., isUnknownType, (, )]
[constructorType]
[type]
[unknownType]
[constructorType, ., toMaybeFunctionType, (, )]
[constructorType]
[ct, ==, null, &&, constructorType, instanceof, FunctionType]
[ct, ==, null]
[ct]
[null]
[constructorType, instanceof, FunctionType]
[constructorType]
[ct]
[(, FunctionType, ), constructorType]
[constructorType]
[ct, !=, null, &&, ct, ., isConstructor, (, )]
[ct, !=, null]
[ct]
[null]
[ct, ., isConstructor, (, )]
[ct]
[type]
[ct, ., getInstanceType, (, )]
[ct]
[backwardsInferenceFromCallSite, (, n, ,, ct, )]
[n]
[ct]
[n, ., setJSType, (, type, )]
[n]
[type]
[scope]
[traverseShortCircuitingBinOp, (, n, ,, scope, ,, true, )]
[n]
[scope]
[true]
[n, ., getFirstChild, (, )]
[n]
[el, !=, null]
[el]
[null]
[el]
[el, ., getNext, (, )]
[el]
[scope]
[traverse, (, el, ,, scope, )]
[el]
[scope]
[scope]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[ObjectType, ., cast, (, getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), )]
[ObjectType]
[getJSType, (, n, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, )]
[getJSType, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[objType, !=, null]
[objType]
[null]
[objType, ., getParameterType, (, )]
[objType]
[type, !=, null]
[type]
[null]
[n, ., setJSType, (, type, )]
[n]
[type]
[dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, )]
[n, ., getFirstChild, (, )]
[n]
[scope]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[scope]
[traverseChildren, (, n, ,, scope, )]
[n]
[scope]
[n, ., setJSType, (, getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, ), )]
[n]
[getPropertyType, (, objNode, ., getJSType, (, ), ,, property, ., getString, (, ), ,, n, ,, scope, )]
[objNode, ., getJSType, (, )]
[objNode]
[property, ., getString, (, )]
[property]
[n]
[scope]
[dereferencePointer, (, n, ., getFirstChild, (, ), ,, scope, )]
[n, ., getFirstChild, (, )]
[n]
[scope]
[type, ==, null, ||, constraint, ==, null]
[type, ==, null]
[type]
[null]
[constraint, ==, null]
[constraint]
[null]
[type, ., matchConstraint, (, constraint, )]
[type]
[constraint]
[n, ., isQualifiedName, (, )]
[n]
[getJSType, (, n, )]
[n]
[type, ., restrictByNotNullOrUndefined, (, )]
[type]
[type, !=, narrowed]
[type]
[narrowed]
[scope]
[narrowScope, (, scope, ,, n, ,, narrowed, )]
[scope]
[n]
[narrowed]
[scope]
[null]
[false]
[n, ., getQualifiedName, (, )]
[n]
[scope, ., getSlot, (, qualifiedName, )]
[scope]
[qualifiedName]
[var, !=, null]
[var]
[null]
[var, ., getType, (, )]
[var]
[varType, !=, null]
[varType]
[null]
[!, var, ., isTypeInferred, (, )]
[var, ., isTypeInferred, (, )]
[var]
[isLocallyInferred]
[(, var, !=, syntacticScope, ., getSlot, (, qualifiedName, ), )]
[var, !=, syntacticScope, ., getSlot, (, qualifiedName, )]
[var]
[syntacticScope, ., getSlot, (, qualifiedName, )]
[syntacticScope]
[qualifiedName]
[isDeclared, ||, isLocallyInferred]
[isDeclared]
[isLocallyInferred]
[propertyType]
[varType]
[propertyType, ==, null, &&, objType, !=, null]
[propertyType, ==, null]
[propertyType]
[null]
[objType, !=, null]
[objType]
[null]
[objType, ., findPropertyType, (, propName, )]
[objType]
[propName]
[foundType, !=, null]
[foundType]
[null]
[propertyType]
[foundType]
[(, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), ), &&, qualifiedName, !=, null]
[(, propertyType, ==, null, ||, propertyType, ., isUnknownType, (, ), )]
[propertyType, ==, null, ||, propertyType, ., isUnknownType, (, )]
[propertyType, ==, null]
[propertyType]
[null]
[propertyType, ., isUnknownType, (, )]
[propertyType]
[qualifiedName, !=, null]
[qualifiedName]
[null]
[ObjectType, ., cast, (, registry, ., getType, (, qualifiedName, ), )]
[ObjectType]
[registry, ., getType, (, qualifiedName, )]
[registry]
[qualifiedName]
[regType, !=, null]
[regType]
[null]
[propertyType]
[regType, ., getConstructor, (, )]
[regType]
[propertyType, ==, null]
[propertyType]
[null]
[unknownType]
[propertyType, ., isEquivalentTo, (, unknownType, ), &&, isLocallyInferred]
[propertyType, ., isEquivalentTo, (, unknownType, )]
[propertyType]
[unknownType]
[isLocallyInferred]
[getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[CHECKED_UNKNOWN_TYPE]
[propertyType]
[traverseShortCircuitingBinOp, (, n, ,, scope, ,, false, )]
[n]
[scope]
[false]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[traverseWithinShortCircuitingBinOp, (, left, ,, scope, ., createChildFlowScope, (, ), )]
[left]
[scope, ., createChildFlowScope, (, )]
[scope]
[left, ., getJSType, (, )]
[left]
[reverseInterpreter, ., getPreciserScopeKnowingConditionOutcome, (, left, ,, leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, ), ,, condition, )]
[reverseInterpreter]
[left]
[leftLiterals, ., getOutcomeFlowScope, (, left, ., getType, (, ), ,, condition, )]
[leftLiterals]
[left, ., getType, (, )]
[left]
[condition]
[condition]
[traverseWithinShortCircuitingBinOp, (, right, ,, rightScope, ., createChildFlowScope, (, ), )]
[right]
[rightScope, ., createChildFlowScope, (, )]
[rightScope]
[right, ., getJSType, (, )]
[right]
[leftType, !=, null, &&, rightType, !=, null]
[leftType, !=, null]
[leftType]
[null]
[rightType, !=, null]
[rightType]
[null]
[leftType]
[leftType, ., getRestrictedTypeGivenToBooleanOutcome, (, !, condition, )]
[leftType]
[!, condition]
[condition]
[leftLiterals, ., toBooleanOutcomes, ==, BooleanLiteralSet, ., get, (, !, condition, )]
[leftLiterals, ., toBooleanOutcomes]
[leftLiterals]
[BooleanLiteralSet, ., get, (, !, condition, )]
[BooleanLiteralSet]
[!, condition]
[condition]
[type]
[leftType]
[literals]
[leftLiterals]
[type]
[leftType, ., getLeastSupertype, (, rightType, )]
[leftType]
[rightType]
[literals]
[getBooleanOutcomePair, (, leftLiterals, ,, rightLiterals, ,, condition, )]
[leftLiterals]
[rightLiterals]
[condition]
[literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY, &&, getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, )]
[literals, ., booleanValues, ==, BooleanLiteralSet, ., EMPTY]
[literals, ., booleanValues]
[literals]
[BooleanLiteralSet, ., EMPTY]
[BooleanLiteralSet]
[getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, type, )]
[getNativeType, (, BOOLEAN_TYPE, )]
[BOOLEAN_TYPE]
[type]
[type, ., isUnionType, (, )]
[type]
[type]
[type, ., toMaybeUnionType, (, ), ., getRestrictedUnion, (, getNativeType, (, BOOLEAN_TYPE, ), )]
[type, ., toMaybeUnionType, (, )]
[type]
[getNativeType, (, BOOLEAN_TYPE, )]
[BOOLEAN_TYPE]
[type]
[null]
[literals]
[new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, leftLiterals, ., getJoinedFlowScope, (, ), ,, rightLiterals, ., getJoinedFlowScope, (, ), )]
[BooleanLiteralSet, ., BOTH]
[BooleanLiteralSet]
[BooleanLiteralSet, ., BOTH]
[BooleanLiteralSet]
[leftLiterals, ., getJoinedFlowScope, (, )]
[leftLiterals]
[rightLiterals, ., getJoinedFlowScope, (, )]
[rightLiterals]
[n, ., setJSType, (, type, )]
[n]
[type]
[literals]
[n, ., getType, (, )]
[n]
[Token, ., AND]
[Token]
[traverseAnd, (, n, ,, scope, )]
[n]
[scope]
[Token, ., OR]
[Token]
[traverseOr, (, n, ,, scope, )]
[n]
[scope]
[scope]
[traverse, (, n, ,, scope, )]
[n]
[scope]
[newBooleanOutcomePair, (, n, ., getJSType, (, ), ,, scope, )]
[n, ., getJSType, (, )]
[n]
[scope]
[new, BooleanOutcomePair, (, getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, ), ,, getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, ), ,, left, ., getJoinedFlowScope, (, ), ,, right, ., getJoinedFlowScope, (, ), )]
[getBooleanOutcomes, (, left, ., toBooleanOutcomes, ,, right, ., toBooleanOutcomes, ,, condition, )]
[left, ., toBooleanOutcomes]
[left]
[right, ., toBooleanOutcomes]
[right]
[condition]
[getBooleanOutcomes, (, left, ., booleanValues, ,, right, ., booleanValues, ,, condition, )]
[left, ., booleanValues]
[left]
[right, ., booleanValues]
[right]
[condition]
[left, ., getJoinedFlowScope, (, )]
[left]
[right, ., getJoinedFlowScope, (, )]
[right]
[right, ., union, (, left, ., intersection, (, BooleanLiteralSet, ., get, (, !, condition, ), ), )]
[right]
[left, ., intersection, (, BooleanLiteralSet, ., get, (, !, condition, ), )]
[left]
[BooleanLiteralSet, ., get, (, !, condition, )]
[BooleanLiteralSet]
[!, condition]
[condition]
[null]
[this, ., toBooleanOutcomes]
[this]
[toBooleanOutcomes]
[this, ., booleanValues]
[this]
[booleanValues]
[this, ., leftScope]
[this]
[leftScope]
[this, ., rightScope]
[this]
[rightScope]
[joinedScope, ==, null]
[joinedScope]
[null]
[leftScope, ==, rightScope]
[leftScope]
[rightScope]
[joinedScope]
[rightScope]
[joinedScope]
[join, (, leftScope, ,, rightScope, )]
[leftScope]
[rightScope]
[joinedScope]
[nodeType, ==, Token, ., AND, &&, outcome, ||, nodeType, ==, Token, ., OR, &&, !, outcome]
[nodeType, ==, Token, ., AND, &&, outcome]
[nodeType, ==, Token, ., AND]
[nodeType]
[Token, ., AND]
[Token]
[outcome]
[nodeType, ==, Token, ., OR, &&, !, outcome]
[nodeType, ==, Token, ., OR]
[nodeType]
[Token, ., OR]
[Token]
[!, outcome]
[outcome]
[rightScope]
[getJoinedFlowScope, (, )]
[jsType, ==, null]
[jsType]
[null]
[new, BooleanOutcomePair, (, BooleanLiteralSet, ., BOTH, ,, BooleanLiteralSet, ., BOTH, ,, flowScope, ,, flowScope, )]
[BooleanLiteralSet, ., BOTH]
[BooleanLiteralSet]
[BooleanLiteralSet, ., BOTH]
[BooleanLiteralSet]
[flowScope]
[flowScope]
[new, BooleanOutcomePair, (, jsType, ., getPossibleToBooleanOutcomes, (, ), ,, registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY, ,, flowScope, ,, flowScope, )]
[jsType, ., getPossibleToBooleanOutcomes, (, )]
[jsType]
[registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, ), ?, BooleanLiteralSet, ., BOTH, :, BooleanLiteralSet, ., EMPTY]
[registry, ., getNativeType, (, BOOLEAN_TYPE, ), ., isSubtype, (, jsType, )]
[registry, ., getNativeType, (, BOOLEAN_TYPE, )]
[registry]
[BOOLEAN_TYPE]
[jsType]
[BooleanLiteralSet, ., BOTH]
[BooleanLiteralSet]
[BooleanLiteralSet, ., EMPTY]
[BooleanLiteralSet]
[flowScope]
[flowScope]
[Preconditions, ., checkState, (, nameNode, ., isName, (, ), )]
[Preconditions]
[nameNode, ., isName, (, )]
[nameNode]
[nameNode, ., getString, (, )]
[nameNode]
[varType, ==, null]
[varType]
[null]
[varType]
[getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[JSTypeNative, ., UNKNOWN_TYPE]
[JSTypeNative]
[isUnflowable, (, syntacticScope, ., getVar, (, varName, ), )]
[syntacticScope, ., getVar, (, varName, )]
[syntacticScope]
[varName]
[scope, ., inferSlotType, (, varName, ,, varType, )]
[scope]
[varName]
[varType]
[v, !=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, ), &&, v, ., getScope, (, ), ==, syntacticScope]
[v, !=, null, &&, v, ., isLocal, (, ), &&, v, ., isMarkedEscaped, (, )]
[v, !=, null, &&, v, ., isLocal, (, )]
[v, !=, null]
[v]
[null]
[v, ., isLocal, (, )]
[v]
[v, ., isMarkedEscaped, (, )]
[v]
[v, ., getScope, (, ), ==, syntacticScope]
[v, ., getScope, (, )]
[v]
[syntacticScope]
[n, ., getJSType, (, )]
[n]
[jsType, ==, null]
[jsType]
[null]
[unknownType]
[jsType]
[registry, ., getNativeType, (, typeId, )]
[registry]
[typeId]
