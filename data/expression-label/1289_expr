[Serializable, ., class, ., isAssignableFrom, (, c, )]
[Serializable, ., class]
[c]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[(, Class, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[isSerializable, (, c, )]
[c]
[result]
[(, Paint, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[c, ., equals, (, GradientPaint, ., class, )]
[c]
[GradientPaint, ., class]
[stream, ., readFloat, (, )]
[stream]
[stream, ., readFloat, (, )]
[stream]
[(, Color, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[stream, ., readFloat, (, )]
[stream]
[stream, ., readFloat, (, )]
[stream]
[(, Color, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[stream, ., readBoolean, (, )]
[stream]
[result]
[new, GradientPaint, (, x1, ,, y1, ,, c1, ,, x2, ,, y2, ,, c2, ,, isCyclic, )]
[x1]
[y1]
[c1]
[x2]
[y2]
[c2]
[isCyclic]
[result]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[paint, !=, null]
[paint]
[null]
[stream, ., writeBoolean, (, false, )]
[stream]
[false]
[stream, ., writeObject, (, paint, ., getClass, (, ), )]
[stream]
[paint, ., getClass, (, )]
[paint]
[paint, instanceof, Serializable]
[paint]
[stream, ., writeObject, (, paint, )]
[stream]
[paint]
[paint, instanceof, GradientPaint]
[paint]
[(, GradientPaint, ), paint]
[paint]
[stream, ., writeFloat, (, (, float, ), gp, ., getPoint1, (, ), ., getX, (, ), )]
[stream]
[(, float, ), gp, ., getPoint1, (, ), ., getX, (, )]
[gp, ., getPoint1, (, ), ., getX, (, )]
[gp, ., getPoint1, (, )]
[gp]
[stream, ., writeFloat, (, (, float, ), gp, ., getPoint1, (, ), ., getY, (, ), )]
[stream]
[(, float, ), gp, ., getPoint1, (, ), ., getY, (, )]
[gp, ., getPoint1, (, ), ., getY, (, )]
[gp, ., getPoint1, (, )]
[gp]
[stream, ., writeObject, (, gp, ., getColor1, (, ), )]
[stream]
[gp, ., getColor1, (, )]
[gp]
[stream, ., writeFloat, (, (, float, ), gp, ., getPoint2, (, ), ., getX, (, ), )]
[stream]
[(, float, ), gp, ., getPoint2, (, ), ., getX, (, )]
[gp, ., getPoint2, (, ), ., getX, (, )]
[gp, ., getPoint2, (, )]
[gp]
[stream, ., writeFloat, (, (, float, ), gp, ., getPoint2, (, ), ., getY, (, ), )]
[stream]
[(, float, ), gp, ., getPoint2, (, ), ., getY, (, )]
[gp, ., getPoint2, (, ), ., getY, (, )]
[gp, ., getPoint2, (, )]
[gp]
[stream, ., writeObject, (, gp, ., getColor2, (, ), )]
[stream]
[gp, ., getColor2, (, )]
[gp]
[stream, ., writeBoolean, (, gp, ., isCyclic, (, ), )]
[stream]
[gp, ., isCyclic, (, )]
[gp]
[stream, ., writeBoolean, (, true, )]
[stream]
[true]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[(, Class, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[c, ., equals, (, BasicStroke, ., class, )]
[c]
[BasicStroke, ., class]
[stream, ., readFloat, (, )]
[stream]
[stream, ., readInt, (, )]
[stream]
[stream, ., readInt, (, )]
[stream]
[stream, ., readFloat, (, )]
[stream]
[(, float, [, ], ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[stream, ., readFloat, (, )]
[stream]
[result]
[new, BasicStroke, (, width, ,, cap, ,, join, ,, miterLimit, ,, dash, ,, dashPhase, )]
[width]
[cap]
[join]
[miterLimit]
[dash]
[dashPhase]
[result]
[(, Stroke, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[result]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[stroke, !=, null]
[stroke]
[null]
[stream, ., writeBoolean, (, false, )]
[stream]
[false]
[stroke, instanceof, BasicStroke]
[stroke]
[(, BasicStroke, ), stroke]
[stroke]
[stream, ., writeObject, (, BasicStroke, ., class, )]
[stream]
[BasicStroke, ., class]
[stream, ., writeFloat, (, s, ., getLineWidth, (, ), )]
[stream]
[s, ., getLineWidth, (, )]
[s]
[stream, ., writeInt, (, s, ., getEndCap, (, ), )]
[stream]
[s, ., getEndCap, (, )]
[s]
[stream, ., writeInt, (, s, ., getLineJoin, (, ), )]
[stream]
[s, ., getLineJoin, (, )]
[s]
[stream, ., writeFloat, (, s, ., getMiterLimit, (, ), )]
[stream]
[s, ., getMiterLimit, (, )]
[s]
[stream, ., writeObject, (, s, ., getDashArray, (, ), )]
[stream]
[s, ., getDashArray, (, )]
[s]
[stream, ., writeFloat, (, s, ., getDashPhase, (, ), )]
[stream]
[s, ., getDashPhase, (, )]
[s]
[stream, ., writeObject, (, stroke, ., getClass, (, ), )]
[stream]
[stroke, ., getClass, (, )]
[stroke]
[stream, ., writeObject, (, stroke, )]
[stream]
[stroke]
[stream, ., writeBoolean, (, true, )]
[stream]
[true]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[(, Class, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[c, ., equals, (, Line2D, ., class, )]
[c]
[Line2D, ., class]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[result]
[new, Line2D, ., Double, (, x1, ,, y1, ,, x2, ,, y2, )]
[x1]
[y1]
[x2]
[y2]
[c, ., equals, (, Rectangle2D, ., class, )]
[c]
[Rectangle2D, ., class]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[result]
[new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, h, )]
[x]
[y]
[w]
[h]
[c, ., equals, (, Ellipse2D, ., class, )]
[c]
[Ellipse2D, ., class]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[result]
[new, Ellipse2D, ., Double, (, x, ,, y, ,, w, ,, h, )]
[x]
[y]
[w]
[h]
[c, ., equals, (, Arc2D, ., class, )]
[c]
[Arc2D, ., class]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readInt, (, )]
[stream]
[result]
[new, Arc2D, ., Double, (, x, ,, y, ,, w, ,, h, ,, as, ,, ae, ,, at, )]
[x]
[y]
[w]
[h]
[as]
[ae]
[at]
[c, ., equals, (, GeneralPath, ., class, )]
[c]
[GeneralPath, ., class]
[new, GeneralPath, (, )]
[new, float, [, 6, ]]
[6]
[stream, ., readBoolean, (, )]
[stream]
[!, hasNext]
[hasNext]
[stream, ., readInt, (, )]
[stream]
[0]
[i, <, 6]
[i]
[6]
[i, ++]
[i]
[args, [, i, ]]
[args]
[i]
[stream, ., readFloat, (, )]
[stream]
[type]
[PathIterator, ., SEG_MOVETO]
[PathIterator]
[gp, ., moveTo, (, args, [, 0, ], ,, args, [, 1, ], )]
[gp]
[args, [, 0, ]]
[args]
[0]
[args, [, 1, ]]
[args]
[1]
[PathIterator, ., SEG_LINETO]
[PathIterator]
[gp, ., lineTo, (, args, [, 0, ], ,, args, [, 1, ], )]
[gp]
[args, [, 0, ]]
[args]
[0]
[args, [, 1, ]]
[args]
[1]
[PathIterator, ., SEG_CUBICTO]
[PathIterator]
[gp, ., curveTo, (, args, [, 0, ], ,, args, [, 1, ], ,, args, [, 2, ], ,, args, [, 3, ], ,, args, [, 4, ], ,, args, [, 5, ], )]
[gp]
[args, [, 0, ]]
[args]
[0]
[args, [, 1, ]]
[args]
[1]
[args, [, 2, ]]
[args]
[2]
[args, [, 3, ]]
[args]
[3]
[args, [, 4, ]]
[args]
[4]
[args, [, 5, ]]
[args]
[5]
[PathIterator, ., SEG_QUADTO]
[PathIterator]
[gp, ., quadTo, (, args, [, 0, ], ,, args, [, 1, ], ,, args, [, 2, ], ,, args, [, 3, ], )]
[gp]
[args, [, 0, ]]
[args]
[0]
[args, [, 1, ]]
[args]
[1]
[args, [, 2, ]]
[args]
[2]
[args, [, 3, ]]
[args]
[3]
[PathIterator, ., SEG_CLOSE]
[PathIterator]
[gp, ., closePath, (, )]
[gp]
[new, RuntimeException, (, "JFreeChart - No path exists", )]
["JFreeChart - No path exists"]
[gp, ., setWindingRule, (, stream, ., readInt, (, ), )]
[gp]
[stream, ., readInt, (, )]
[stream]
[hasNext]
[stream, ., readBoolean, (, )]
[stream]
[result]
[gp]
[result]
[(, Shape, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[result]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[shape, !=, null]
[shape]
[null]
[stream, ., writeBoolean, (, false, )]
[stream]
[false]
[shape, instanceof, Line2D]
[shape]
[(, Line2D, ), shape]
[shape]
[stream, ., writeObject, (, Line2D, ., class, )]
[stream]
[Line2D, ., class]
[stream, ., writeDouble, (, line, ., getX1, (, ), )]
[stream]
[line, ., getX1, (, )]
[line]
[stream, ., writeDouble, (, line, ., getY1, (, ), )]
[stream]
[line, ., getY1, (, )]
[line]
[stream, ., writeDouble, (, line, ., getX2, (, ), )]
[stream]
[line, ., getX2, (, )]
[line]
[stream, ., writeDouble, (, line, ., getY2, (, ), )]
[stream]
[line, ., getY2, (, )]
[line]
[shape, instanceof, Rectangle2D]
[shape]
[(, Rectangle2D, ), shape]
[shape]
[stream, ., writeObject, (, Rectangle2D, ., class, )]
[stream]
[Rectangle2D, ., class]
[stream, ., writeDouble, (, rectangle, ., getX, (, ), )]
[stream]
[rectangle, ., getX, (, )]
[rectangle]
[stream, ., writeDouble, (, rectangle, ., getY, (, ), )]
[stream]
[rectangle, ., getY, (, )]
[rectangle]
[stream, ., writeDouble, (, rectangle, ., getWidth, (, ), )]
[stream]
[rectangle, ., getWidth, (, )]
[rectangle]
[stream, ., writeDouble, (, rectangle, ., getHeight, (, ), )]
[stream]
[rectangle, ., getHeight, (, )]
[rectangle]
[shape, instanceof, Ellipse2D]
[shape]
[(, Ellipse2D, ), shape]
[shape]
[stream, ., writeObject, (, Ellipse2D, ., class, )]
[stream]
[Ellipse2D, ., class]
[stream, ., writeDouble, (, ellipse, ., getX, (, ), )]
[stream]
[ellipse, ., getX, (, )]
[ellipse]
[stream, ., writeDouble, (, ellipse, ., getY, (, ), )]
[stream]
[ellipse, ., getY, (, )]
[ellipse]
[stream, ., writeDouble, (, ellipse, ., getWidth, (, ), )]
[stream]
[ellipse, ., getWidth, (, )]
[ellipse]
[stream, ., writeDouble, (, ellipse, ., getHeight, (, ), )]
[stream]
[ellipse, ., getHeight, (, )]
[ellipse]
[shape, instanceof, Arc2D]
[shape]
[(, Arc2D, ), shape]
[shape]
[stream, ., writeObject, (, Arc2D, ., class, )]
[stream]
[Arc2D, ., class]
[stream, ., writeDouble, (, arc, ., getX, (, ), )]
[stream]
[arc, ., getX, (, )]
[arc]
[stream, ., writeDouble, (, arc, ., getY, (, ), )]
[stream]
[arc, ., getY, (, )]
[arc]
[stream, ., writeDouble, (, arc, ., getWidth, (, ), )]
[stream]
[arc, ., getWidth, (, )]
[arc]
[stream, ., writeDouble, (, arc, ., getHeight, (, ), )]
[stream]
[arc, ., getHeight, (, )]
[arc]
[stream, ., writeDouble, (, arc, ., getAngleStart, (, ), )]
[stream]
[arc, ., getAngleStart, (, )]
[arc]
[stream, ., writeDouble, (, arc, ., getAngleExtent, (, ), )]
[stream]
[arc, ., getAngleExtent, (, )]
[arc]
[stream, ., writeInt, (, arc, ., getArcType, (, ), )]
[stream]
[arc, ., getArcType, (, )]
[arc]
[shape, instanceof, GeneralPath]
[shape]
[stream, ., writeObject, (, GeneralPath, ., class, )]
[stream]
[GeneralPath, ., class]
[shape, ., getPathIterator, (, null, )]
[shape]
[null]
[new, float, [, 6, ]]
[6]
[stream, ., writeBoolean, (, pi, ., isDone, (, ), )]
[stream]
[pi, ., isDone, (, )]
[pi]
[!, pi, ., isDone, (, )]
[pi, ., isDone, (, )]
[pi]
[pi, ., currentSegment, (, args, )]
[pi]
[args]
[stream, ., writeInt, (, type, )]
[stream]
[type]
[0]
[i, <, 6]
[i]
[6]
[i, ++]
[i]
[stream, ., writeFloat, (, args, [, i, ], )]
[stream]
[args, [, i, ]]
[args]
[i]
[stream, ., writeInt, (, pi, ., getWindingRule, (, ), )]
[stream]
[pi, ., getWindingRule, (, )]
[pi]
[pi, ., next, (, )]
[pi]
[stream, ., writeBoolean, (, pi, ., isDone, (, ), )]
[stream]
[pi, ., isDone, (, )]
[pi]
[stream, ., writeObject, (, shape, ., getClass, (, ), )]
[stream]
[shape, ., getClass, (, )]
[shape]
[stream, ., writeObject, (, shape, )]
[stream]
[shape]
[stream, ., writeBoolean, (, true, )]
[stream]
[true]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[stream, ., readDouble, (, )]
[stream]
[stream, ., readDouble, (, )]
[stream]
[result]
[new, Point2D, ., Double, (, x, ,, y, )]
[x]
[y]
[result]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[p, !=, null]
[p]
[null]
[stream, ., writeBoolean, (, false, )]
[stream]
[false]
[stream, ., writeDouble, (, p, ., getX, (, ), )]
[stream]
[p, ., getX, (, )]
[p]
[stream, ., writeDouble, (, p, ., getY, (, ), )]
[stream]
[p, ., getY, (, )]
[p]
[stream, ., writeBoolean, (, true, )]
[stream]
[true]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[(, String, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[result]
[new, AttributedString, (, plainStr, )]
[plainStr]
[stream, ., readChar, (, )]
[stream]
[0]
[c, !=, CharacterIterator, ., DONE]
[c]
[CharacterIterator, ., DONE]
[CharacterIterator]
[stream, ., readInt, (, )]
[stream]
[(, Map, ), stream, ., readObject, (, )]
[stream, ., readObject, (, )]
[stream]
[result, ., addAttributes, (, atts, ,, start, ,, limit, )]
[result]
[atts]
[start]
[limit]
[start]
[limit]
[c]
[stream, ., readChar, (, )]
[stream]
[result]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[as, !=, null]
[as]
[null]
[stream, ., writeBoolean, (, false, )]
[stream]
[false]
[as, ., getIterator, (, )]
[as]
[new, StringBuffer, (, )]
[aci, ., first, (, )]
[aci]
[current, !=, CharacterIterator, ., DONE]
[current]
[CharacterIterator, ., DONE]
[CharacterIterator]
[plainStr]
[plainStr, ., append, (, current, )]
[plainStr]
[current]
[current]
[aci, ., next, (, )]
[aci]
[stream, ., writeObject, (, plainStr, ., toString, (, ), )]
[stream]
[plainStr, ., toString, (, )]
[plainStr]
[current]
[aci, ., first, (, )]
[aci]
[aci, ., getBeginIndex, (, )]
[aci]
[current, !=, CharacterIterator, ., DONE]
[current]
[CharacterIterator, ., DONE]
[CharacterIterator]
[stream, ., writeChar, (, current, )]
[stream]
[current]
[aci, ., getRunLimit, (, )]
[aci]
[stream, ., writeInt, (, limit, -, begin, )]
[stream]
[limit, -, begin]
[limit]
[begin]
[new, HashMap, (, aci, ., getAttributes, (, ), )]
[aci, ., getAttributes, (, )]
[aci]
[stream, ., writeObject, (, atts, )]
[stream]
[atts]
[current]
[aci, ., setIndex, (, limit, )]
[aci]
[limit]
[stream, ., writeChar, (, CharacterIterator, ., DONE, )]
[stream]
[CharacterIterator, ., DONE]
[CharacterIterator]
[stream, ., writeBoolean, (, true, )]
[stream]
[true]
[stream, ==, null]
[stream]
[null]
[new, IllegalArgumentException, (, "Null 'stream' argument.", )]
["Null 'stream' argument."]
[null]
[stream, ., readBoolean, (, )]
[stream]
[!, isNull]
[isNull]
[result]
[ImageIO, ., read, (, stream, )]
[ImageIO]
[stream]
[result]
[null]
[image, instanceof, BufferedImage]
[image]
[bi]
[(, BufferedImage, ), image]
[image]
[bi]
[new, BufferedImage, (, image, ., getWidth, (, null, ), ,, image, ., getHeight, (, null, ), ,, BufferedImage, ., TYPE_INT_ARGB, )]
[image, ., getWidth, (, null, )]
[image]
[null]
[image, ., getHeight, (, null, )]
[image]
[null]
[BufferedImage, ., TYPE_INT_ARGB]
[BufferedImage]
[bi, ., createGraphics, (, )]
[bi]
[g2, ., drawImage, (, image, ,, 0, ,, 0, ,, null, )]
[g2]
[image]
[0]
[0]
[null]
[g2, ., dispose, (, )]
[g2]
[EncoderUtil, ., writeBufferedImage, (, bi, ,, ImageFormat, ., PNG, ,, stream, )]
[EncoderUtil]
[bi]
[ImageFormat, ., PNG]
[ImageFormat]
[stream]
