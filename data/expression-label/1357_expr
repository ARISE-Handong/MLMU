[new, Locale, (, "", )]
[""]
[this, ., late]
[this]
[late]
[subtree, ., isCall, (, )]
[subtree]
[tryFoldKnownMethods, (, subtree, )]
[subtree]
[subtree]
[subtree]
[tryFoldArrayJoin, (, subtree, )]
[subtree]
[subtree, ., isCall, (, )]
[subtree]
[subtree, ., getFirstChild, (, )]
[subtree]
[callTarget, ==, null]
[callTarget]
[null]
[subtree]
[NodeUtil, ., isGet, (, callTarget, )]
[NodeUtil]
[callTarget]
[subtree]
[tryFoldKnownStringMethods, (, subtree, )]
[subtree]
[subtree]
[tryFoldKnownNumericMethods, (, subtree, )]
[subtree]
[subtree]
[Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), )]
[Preconditions]
[subtree, ., isCall, (, )]
[subtree]
[subtree, ., getFirstChild, (, )]
[subtree]
[callTarget, ==, null]
[callTarget]
[null]
[subtree]
[!, NodeUtil, ., isGet, (, callTarget, )]
[NodeUtil, ., isGet, (, callTarget, )]
[NodeUtil]
[callTarget]
[subtree]
[callTarget, ., getFirstChild, (, )]
[callTarget]
[stringNode, ., getNext, (, )]
[stringNode]
[(, !, stringNode, ., isString, (, ), ), ||, (, !, functionName, ., isString, (, ), )]
[(, !, stringNode, ., isString, (, ), )]
[!, stringNode, ., isString, (, )]
[stringNode, ., isString, (, )]
[stringNode]
[(, !, functionName, ., isString, (, ), )]
[!, functionName, ., isString, (, )]
[functionName, ., isString, (, )]
[functionName]
[subtree]
[functionName, ., getString, (, )]
[functionName]
[callTarget, ., getNext, (, )]
[callTarget]
[functionNameString, ., equals, (, "split", )]
[functionNameString]
["split"]
[subtree]
[tryFoldStringSplit, (, subtree, ,, stringNode, ,, firstArg, )]
[subtree]
[stringNode]
[firstArg]
[firstArg, ==, null]
[firstArg]
[null]
[functionNameString, ., equals, (, "toLowerCase", )]
[functionNameString]
["toLowerCase"]
[subtree]
[tryFoldStringToLowerCase, (, subtree, ,, stringNode, )]
[subtree]
[stringNode]
[functionNameString, ., equals, (, "toUpperCase", )]
[functionNameString]
["toUpperCase"]
[subtree]
[tryFoldStringToUpperCase, (, subtree, ,, stringNode, )]
[subtree]
[stringNode]
[subtree]
[NodeUtil, ., isImmutableValue, (, firstArg, )]
[NodeUtil]
[firstArg]
[functionNameString, ., equals, (, "indexOf", ), ||, functionNameString, ., equals, (, "lastIndexOf", )]
[functionNameString, ., equals, (, "indexOf", )]
[functionNameString]
["indexOf"]
[functionNameString, ., equals, (, "lastIndexOf", )]
[functionNameString]
["lastIndexOf"]
[subtree]
[tryFoldStringIndexOf, (, subtree, ,, functionNameString, ,, stringNode, ,, firstArg, )]
[subtree]
[functionNameString]
[stringNode]
[firstArg]
[functionNameString, ., equals, (, "substr", )]
[functionNameString]
["substr"]
[subtree]
[tryFoldStringSubstr, (, subtree, ,, stringNode, ,, firstArg, )]
[subtree]
[stringNode]
[firstArg]
[functionNameString, ., equals, (, "substring", )]
[functionNameString]
["substring"]
[subtree]
[tryFoldStringSubstring, (, subtree, ,, stringNode, ,, firstArg, )]
[subtree]
[stringNode]
[firstArg]
[functionNameString, ., equals, (, "charAt", )]
[functionNameString]
["charAt"]
[subtree]
[tryFoldStringCharAt, (, subtree, ,, stringNode, ,, firstArg, )]
[subtree]
[stringNode]
[firstArg]
[functionNameString, ., equals, (, "charCodeAt", )]
[functionNameString]
["charCodeAt"]
[subtree]
[tryFoldStringCharCodeAt, (, subtree, ,, stringNode, ,, firstArg, )]
[subtree]
[stringNode]
[firstArg]
[subtree]
[Preconditions, ., checkArgument, (, subtree, ., isCall, (, ), )]
[Preconditions]
[subtree, ., isCall, (, )]
[subtree]
[isASTNormalized, (, )]
[subtree, ., getFirstChild, (, )]
[subtree]
[!, callTarget, ., isName, (, )]
[callTarget, ., isName, (, )]
[callTarget]
[subtree]
[callTarget, ., getString, (, )]
[callTarget]
[callTarget, ., getNext, (, )]
[callTarget]
[(, firstArgument, !=, null, ), &&, (, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), )]
[(, firstArgument, !=, null, )]
[firstArgument, !=, null]
[firstArgument]
[null]
[(, firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, ), )]
[firstArgument, ., isString, (, ), ||, firstArgument, ., isNumber, (, )]
[firstArgument, ., isString, (, )]
[firstArgument]
[firstArgument, ., isNumber, (, )]
[firstArgument]
[functionNameString, ., equals, (, "parseInt", ), ||, functionNameString, ., equals, (, "parseFloat", )]
[functionNameString, ., equals, (, "parseInt", )]
[functionNameString]
["parseInt"]
[functionNameString, ., equals, (, "parseFloat", )]
[functionNameString]
["parseFloat"]
[subtree]
[tryFoldParseNumber, (, subtree, ,, functionNameString, ,, firstArgument, )]
[subtree]
[functionNameString]
[firstArgument]
[subtree]
[stringNode, ., getString, (, ), ., toLowerCase, (, ROOT_LOCALE, )]
[stringNode, ., getString, (, )]
[stringNode]
[ROOT_LOCALE]
[IR, ., string, (, lowered, )]
[IR]
[lowered]
[subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, )]
[subtree, ., getParent, (, )]
[subtree]
[subtree]
[replacement]
[reportCodeChange, (, )]
[replacement]
[stringNode, ., getString, (, ), ., toUpperCase, (, ROOT_LOCALE, )]
[stringNode, ., getString, (, )]
[stringNode]
[ROOT_LOCALE]
[IR, ., string, (, upped, )]
[IR]
[upped]
[subtree, ., getParent, (, ), ., replaceChild, (, subtree, ,, replacement, )]
[subtree, ., getParent, (, )]
[subtree]
[subtree]
[replacement]
[reportCodeChange, (, )]
[replacement]
[input, ==, null, ||, input, ., length, (, ), ==, 0]
[input, ==, null]
[input]
[null]
[input, ., length, (, ), ==, 0]
[input, ., length, (, )]
[input]
[0]
[input]
[0]
[input, ., length, (, ), -, 1]
[input, ., length, (, )]
[input]
[1]
[startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0', &&, input, ., charAt, (, startIndex, ), !=, '.']
[startIndex, <, input, ., length, (, ), &&, input, ., charAt, (, startIndex, ), ==, '0']
[startIndex, <, input, ., length, (, )]
[startIndex]
[input, ., length, (, )]
[input]
[input, ., charAt, (, startIndex, ), ==, '0']
[input, ., charAt, (, startIndex, )]
[input]
[startIndex]
['0']
[input, ., charAt, (, startIndex, ), !=, '.']
[input, ., charAt, (, startIndex, )]
[input]
[startIndex]
['.']
[startIndex, ++]
[startIndex]
[input, ., indexOf, (, '.', ), >=, 0]
[input, ., indexOf, (, '.', )]
[input]
['.']
[0]
[endIndex, >=, 0, &&, input, ., charAt, (, endIndex, ), ==, '0']
[endIndex, >=, 0]
[endIndex]
[0]
[input, ., charAt, (, endIndex, ), ==, '0']
[input, ., charAt, (, endIndex, )]
[input]
[endIndex]
['0']
[endIndex, --]
[endIndex]
[input, ., charAt, (, endIndex, ), ==, '.']
[input, ., charAt, (, endIndex, )]
[input]
[endIndex]
['.']
[endIndex, --]
[endIndex]
[startIndex, >=, endIndex]
[startIndex]
[endIndex]
[input]
[input, ., substring, (, startIndex, ,, endIndex, +, 1, )]
[input]
[startIndex]
[endIndex, +, 1]
[endIndex]
[1]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[functionName, ., equals, (, "parseInt", )]
[functionName]
["parseInt"]
[firstArg, ., getNext, (, )]
[firstArg]
[0]
[secondArg, !=, null]
[secondArg]
[null]
[!, isParseInt]
[isParseInt]
[n]
[secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, )]
[secondArg, ., getNext, (, ), !=, null]
[secondArg, ., getNext, (, )]
[secondArg]
[null]
[!, secondArg, ., isNumber, (, )]
[secondArg, ., isNumber, (, )]
[secondArg]
[n]
[secondArg, ., getDouble, (, )]
[secondArg]
[tmpRadix, !=, (, int, ), tmpRadix]
[tmpRadix]
[(, int, ), tmpRadix]
[tmpRadix]
[n]
[radix]
[(, int, ), tmpRadix]
[tmpRadix]
[radix, <, 0, ||, radix, ==, 1, ||, radix, >, 36]
[radix, <, 0, ||, radix, ==, 1]
[radix, <, 0]
[radix]
[0]
[radix, ==, 1]
[radix]
[1]
[radix, >, 36]
[radix]
[36]
[n]
[null]
[firstArg, ., isNumber, (, )]
[firstArg]
[checkVal]
[NodeUtil, ., getNumberValue, (, firstArg, )]
[NodeUtil]
[firstArg]
[!, (, radix, ==, 0, ||, radix, ==, 10, ), &&, isParseInt]
[!, (, radix, ==, 0, ||, radix, ==, 10, )]
[(, radix, ==, 0, ||, radix, ==, 10, )]
[radix, ==, 0, ||, radix, ==, 10]
[radix, ==, 0]
[radix]
[0]
[radix, ==, 10]
[radix]
[10]
[isParseInt]
[stringVal]
[String, ., valueOf, (, checkVal, ., intValue, (, ), )]
[String]
[checkVal, ., intValue, (, )]
[checkVal]
[isParseInt]
[numericNode]
[IR, ., number, (, checkVal, ., intValue, (, ), )]
[IR]
[checkVal, ., intValue, (, )]
[checkVal]
[numericNode]
[IR, ., number, (, checkVal, )]
[IR]
[checkVal]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, numericNode, )]
[n, ., getParent, (, )]
[n]
[n]
[numericNode]
[reportCodeChange, (, )]
[numericNode]
[stringVal]
[NodeUtil, ., getStringValue, (, firstArg, )]
[NodeUtil]
[firstArg]
[stringVal, ==, null]
[stringVal]
[null]
[n]
[checkVal]
[NodeUtil, ., getStringNumberValue, (, stringVal, )]
[NodeUtil]
[stringVal]
[checkVal, ==, null]
[checkVal]
[null]
[n]
[stringVal]
[NodeUtil, ., trimJsWhiteSpace, (, stringVal, )]
[NodeUtil]
[stringVal]
[stringVal, ., length, (, ), ==, 0]
[stringVal, ., length, (, )]
[stringVal]
[0]
[n]
[stringVal, ., equals, (, "0", )]
[stringVal]
["0"]
[newNode]
[IR, ., number, (, 0, )]
[IR]
[0]
[isParseInt]
[radix, ==, 0, ||, radix, ==, 16]
[radix, ==, 0]
[radix]
[0]
[radix, ==, 16]
[radix]
[16]
[stringVal, ., length, (, ), >, 1, &&, stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", )]
[stringVal, ., length, (, ), >, 1]
[stringVal, ., length, (, )]
[stringVal]
[1]
[stringVal, ., substring, (, 0, ,, 2, ), ., equalsIgnoreCase, (, "0x", )]
[stringVal, ., substring, (, 0, ,, 2, )]
[stringVal]
[0]
[2]
["0x"]
[radix]
[16]
[stringVal]
[stringVal, ., substring, (, 2, )]
[stringVal]
[2]
[radix, ==, 0]
[radix]
[0]
[!, isEcmaScript5OrGreater, (, ), &&, stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", )]
[!, isEcmaScript5OrGreater, (, )]
[isEcmaScript5OrGreater, (, )]
[stringVal, ., substring, (, 0, ,, 1, ), ., equals, (, "0", )]
[stringVal, ., substring, (, 0, ,, 1, )]
[stringVal]
[0]
[1]
["0"]
[n]
[radix]
[10]
[0]
[newVal]
[Integer, ., parseInt, (, stringVal, ,, radix, )]
[Integer]
[stringVal]
[radix]
[n]
[newNode]
[IR, ., number, (, newVal, )]
[IR]
[newVal]
["0"]
[Double, ., parseDouble, (, stringVal, )]
[Double]
[stringVal]
[newNode]
[IR, ., number, (, newVal, )]
[IR]
[newVal]
[normalizedNewVal]
[normalizeNumericString, (, String, ., valueOf, (, newVal, ), )]
[String, ., valueOf, (, newVal, )]
[String]
[newVal]
[n]
[!, normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, )]
[normalizeNumericString, (, stringVal, ), ., equals, (, normalizedNewVal, )]
[normalizeNumericString, (, stringVal, )]
[stringVal]
[normalizedNewVal]
[n]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, )]
[n, ., getParent, (, )]
[n]
[n]
[newNode]
[reportCodeChange, (, )]
[newNode]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, lstringNode, ., isString, (, ), )]
[Preconditions]
[lstringNode, ., isString, (, )]
[lstringNode]
[NodeUtil, ., getStringValue, (, lstringNode, )]
[NodeUtil]
[lstringNode]
[functionName, ., equals, (, "indexOf", )]
[functionName]
["indexOf"]
[firstArg, ., getNext, (, )]
[firstArg]
[NodeUtil, ., getStringValue, (, firstArg, )]
[NodeUtil]
[firstArg]
[searchValue, ==, null]
[searchValue]
[null]
[n]
[isIndexOf, ?, 0, :, lstring, ., length, (, )]
[isIndexOf]
[0]
[lstring, ., length, (, )]
[lstring]
[secondArg, !=, null]
[secondArg]
[null]
[secondArg, ., getNext, (, ), !=, null, ||, !, secondArg, ., isNumber, (, )]
[secondArg, ., getNext, (, ), !=, null]
[secondArg, ., getNext, (, )]
[secondArg]
[null]
[!, secondArg, ., isNumber, (, )]
[secondArg, ., isNumber, (, )]
[secondArg]
[n]
[fromIndex]
[(, int, ), secondArg, ., getDouble, (, )]
[secondArg, ., getDouble, (, )]
[secondArg]
[isIndexOf, ?, lstring, ., indexOf, (, searchValue, ,, fromIndex, ), :, lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, )]
[isIndexOf]
[lstring, ., indexOf, (, searchValue, ,, fromIndex, )]
[lstring]
[searchValue]
[fromIndex]
[lstring, ., lastIndexOf, (, searchValue, ,, fromIndex, )]
[lstring]
[searchValue]
[fromIndex]
[IR, ., number, (, indexVal, )]
[IR]
[indexVal]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, newNode, )]
[n, ., getParent, (, )]
[n]
[n]
[newNode]
[reportCodeChange, (, )]
[newNode]
[n, ., getFirstChild, (, )]
[n]
[callTarget, ==, null, ||, !, callTarget, ., isGetProp, (, )]
[callTarget, ==, null]
[callTarget]
[null]
[!, callTarget, ., isGetProp, (, )]
[callTarget, ., isGetProp, (, )]
[callTarget]
[n]
[callTarget, ., getNext, (, )]
[callTarget]
[right, !=, null]
[right]
[null]
[right, ., getNext, (, ), !=, null, ||, !, NodeUtil, ., isImmutableValue, (, right, )]
[right, ., getNext, (, ), !=, null]
[right, ., getNext, (, )]
[right]
[null]
[!, NodeUtil, ., isImmutableValue, (, right, )]
[NodeUtil, ., isImmutableValue, (, right, )]
[NodeUtil]
[right]
[n]
[callTarget, ., getFirstChild, (, )]
[callTarget]
[arrayNode, ., getNext, (, )]
[arrayNode]
[!, arrayNode, ., isArrayLit, (, ), ||, !, functionName, ., getString, (, ), ., equals, (, "join", )]
[!, arrayNode, ., isArrayLit, (, )]
[arrayNode, ., isArrayLit, (, )]
[arrayNode]
[!, functionName, ., getString, (, ), ., equals, (, "join", )]
[functionName, ., getString, (, ), ., equals, (, "join", )]
[functionName, ., getString, (, )]
[functionName]
["join"]
[n]
[right, !=, null, &&, right, ., isString, (, ), &&, ",", ., equals, (, right, ., getString, (, ), )]
[right, !=, null, &&, right, ., isString, (, )]
[right, !=, null]
[right]
[null]
[right, ., isString, (, )]
[right]
[",", ., equals, (, right, ., getString, (, ), )]
[","]
[right, ., getString, (, )]
[right]
[n, ., removeChild, (, right, )]
[n]
[right]
[reportCodeChange, (, )]
[(, right, ==, null, ), ?, ",", :, NodeUtil, ., getStringValue, (, right, )]
[(, right, ==, null, )]
[right, ==, null]
[right]
[null]
[","]
[NodeUtil, ., getStringValue, (, right, )]
[NodeUtil]
[right]
[Lists, ., newLinkedList, (, )]
[Lists]
[null]
[0]
[null]
[arrayNode, ., getFirstChild, (, )]
[arrayNode]
[elem, !=, null]
[elem]
[null]
[NodeUtil, ., isImmutableValue, (, elem, ), ||, elem, ., isEmpty, (, )]
[NodeUtil, ., isImmutableValue, (, elem, )]
[NodeUtil]
[elem]
[elem, ., isEmpty, (, )]
[elem]
[sb, ==, null]
[sb]
[null]
[sb]
[new, StringBuilder, (, )]
[sb, ., append, (, joinString, )]
[sb]
[joinString]
[sb, ., append, (, NodeUtil, ., getArrayElementStringValue, (, elem, ), )]
[sb]
[NodeUtil, ., getArrayElementStringValue, (, elem, )]
[NodeUtil]
[elem]
[sb, !=, null]
[sb]
[null]
[Preconditions, ., checkNotNull, (, prev, )]
[Preconditions]
[prev]
[foldedSize]
[sb, ., length, (, ), +, 2]
[sb, ., length, (, )]
[sb]
[2]
[arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), )]
[arrayFoldedChildren]
[IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[IR, ., string, (, sb, ., toString, (, ), )]
[IR]
[sb, ., toString, (, )]
[sb]
[prev]
[sb]
[null]
[foldedSize]
[InlineCostEstimator, ., getCost, (, elem, )]
[InlineCostEstimator]
[elem]
[arrayFoldedChildren, ., add, (, elem, )]
[arrayFoldedChildren]
[elem]
[prev]
[elem]
[elem]
[elem, ., getNext, (, )]
[elem]
[sb, !=, null]
[sb]
[null]
[Preconditions, ., checkNotNull, (, prev, )]
[Preconditions]
[prev]
[foldedSize]
[sb, ., length, (, ), +, 2]
[sb, ., length, (, )]
[sb]
[2]
[arrayFoldedChildren, ., add, (, IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, ), )]
[arrayFoldedChildren]
[IR, ., string, (, sb, ., toString, (, ), ), ., copyInformationFrom, (, prev, )]
[IR, ., string, (, sb, ., toString, (, ), )]
[IR]
[sb, ., toString, (, )]
[sb]
[prev]
[foldedSize]
[arrayFoldedChildren, ., size, (, ), -, 1]
[arrayFoldedChildren, ., size, (, )]
[arrayFoldedChildren]
[1]
[InlineCostEstimator, ., getCost, (, n, )]
[InlineCostEstimator]
[n]
[arrayFoldedChildren, ., size, (, )]
[arrayFoldedChildren]
[0]
[IR, ., string, (, "", )]
[IR]
[""]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, emptyStringNode, )]
[n, ., getParent, (, )]
[n]
[n]
[emptyStringNode]
[reportCodeChange, (, )]
[emptyStringNode]
[1]
[arrayFoldedChildren, ., remove, (, 0, )]
[arrayFoldedChildren]
[0]
[foldedSize, >, originalSize]
[foldedSize]
[originalSize]
[n]
[arrayNode, ., detachChildren, (, )]
[arrayNode]
[!, foldedStringNode, ., isString, (, )]
[foldedStringNode, ., isString, (, )]
[foldedStringNode]
[IR, ., add, (, IR, ., string, (, "", ), ., srcref, (, n, ), ,, foldedStringNode, )]
[IR]
[IR, ., string, (, "", ), ., srcref, (, n, )]
[IR, ., string, (, "", )]
[IR]
[""]
[n]
[foldedStringNode]
[foldedStringNode]
[replacement]
[n, ., getParent, (, ), ., replaceChild, (, n, ,, foldedStringNode, )]
[n, ., getParent, (, )]
[n]
[n]
[foldedStringNode]
[reportCodeChange, (, )]
[foldedStringNode]
[arrayFoldedChildren, ., size, (, ), ==, arrayNode, ., getChildCount, (, )]
[arrayFoldedChildren, ., size, (, )]
[arrayFoldedChildren]
[arrayNode, ., getChildCount, (, )]
[arrayNode]
[n]
["[].join()", ., length, (, )]
["[].join()"]
[foldedSize]
[kJoinOverhead]
[foldedSize]
[(, right, !=, null, ), ?, InlineCostEstimator, ., getCost, (, right, ), :, 0]
[(, right, !=, null, )]
[right, !=, null]
[right]
[null]
[InlineCostEstimator, ., getCost, (, right, )]
[InlineCostEstimator]
[right]
[0]
[foldedSize, >, originalSize]
[foldedSize]
[originalSize]
[n]
[arrayNode, ., detachChildren, (, )]
[arrayNode]
[arrayFoldedChildren]
[arrayNode, ., addChildToBack, (, node, )]
[arrayNode]
[node]
[reportCodeChange, (, )]
[n]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[Preconditions]
[stringNode, ., isString, (, )]
[stringNode]
[stringNode, ., getString, (, )]
[stringNode]
[arg1, !=, null, &&, arg1, ., isNumber, (, )]
[arg1, !=, null]
[arg1]
[null]
[arg1, ., isNumber, (, )]
[arg1]
[start]
[(, int, ), arg1, ., getDouble, (, )]
[arg1, ., getDouble, (, )]
[arg1]
[n]
[arg1, ., getNext, (, )]
[arg1]
[arg2, !=, null]
[arg2]
[null]
[arg2, ., isNumber, (, )]
[arg2]
[length]
[(, int, ), arg2, ., getDouble, (, )]
[arg2, ., getDouble, (, )]
[arg2]
[n]
[arg2, ., getNext, (, ), !=, null]
[arg2, ., getNext, (, )]
[arg2]
[null]
[n]
[length]
[stringAsString, ., length, (, ), -, start]
[stringAsString, ., length, (, )]
[stringAsString]
[start]
[(, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, ), ||, (, start, <, 0, )]
[(, start, +, length, ), >, stringAsString, ., length, (, ), ||, (, length, <, 0, )]
[(, start, +, length, ), >, stringAsString, ., length, (, )]
[(, start, +, length, )]
[start, +, length]
[start]
[length]
[stringAsString, ., length, (, )]
[stringAsString]
[(, length, <, 0, )]
[length, <, 0]
[length]
[0]
[(, start, <, 0, )]
[start, <, 0]
[start]
[0]
[n]
[stringAsString, ., substring, (, start, ,, start, +, length, )]
[stringAsString]
[start]
[start, +, length]
[start]
[length]
[IR, ., string, (, result, )]
[IR]
[result]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, resultNode, )]
[parent]
[n]
[resultNode]
[reportCodeChange, (, )]
[resultNode]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[Preconditions]
[stringNode, ., isString, (, )]
[stringNode]
[stringNode, ., getString, (, )]
[stringNode]
[arg1, !=, null, &&, arg1, ., isNumber, (, )]
[arg1, !=, null]
[arg1]
[null]
[arg1, ., isNumber, (, )]
[arg1]
[start]
[(, int, ), arg1, ., getDouble, (, )]
[arg1, ., getDouble, (, )]
[arg1]
[n]
[arg1, ., getNext, (, )]
[arg1]
[arg2, !=, null]
[arg2]
[null]
[arg2, ., isNumber, (, )]
[arg2]
[end]
[(, int, ), arg2, ., getDouble, (, )]
[arg2, ., getDouble, (, )]
[arg2]
[n]
[arg2, ., getNext, (, ), !=, null]
[arg2, ., getNext, (, )]
[arg2]
[null]
[n]
[end]
[stringAsString, ., length, (, )]
[stringAsString]
[(, end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, ), ||, (, start, <, 0, )]
[(, end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), ), ||, (, end, <, 0, )]
[(, end, >, stringAsString, ., length, (, ), ), ||, (, start, >, stringAsString, ., length, (, ), )]
[(, end, >, stringAsString, ., length, (, ), )]
[end, >, stringAsString, ., length, (, )]
[end]
[stringAsString, ., length, (, )]
[stringAsString]
[(, start, >, stringAsString, ., length, (, ), )]
[start, >, stringAsString, ., length, (, )]
[start]
[stringAsString, ., length, (, )]
[stringAsString]
[(, end, <, 0, )]
[end, <, 0]
[end]
[0]
[(, start, <, 0, )]
[start, <, 0]
[start]
[0]
[n]
[stringAsString, ., substring, (, start, ,, end, )]
[stringAsString]
[start]
[end]
[IR, ., string, (, result, )]
[IR]
[result]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, resultNode, )]
[parent]
[n]
[resultNode]
[reportCodeChange, (, )]
[resultNode]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[Preconditions]
[stringNode, ., isString, (, )]
[stringNode]
[stringNode, ., getString, (, )]
[stringNode]
[arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null]
[arg1, !=, null, &&, arg1, ., isNumber, (, )]
[arg1, !=, null]
[arg1]
[null]
[arg1, ., isNumber, (, )]
[arg1]
[arg1, ., getNext, (, ), ==, null]
[arg1, ., getNext, (, )]
[arg1]
[null]
[index]
[(, int, ), arg1, ., getDouble, (, )]
[arg1, ., getDouble, (, )]
[arg1]
[n]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index]
[index, <, 0]
[index]
[0]
[stringAsString, ., length, (, ), <=, index]
[stringAsString, ., length, (, )]
[stringAsString]
[index]
[n]
[IR, ., string, (, stringAsString, ., substring, (, index, ,, index, +, 1, ), )]
[IR]
[stringAsString, ., substring, (, index, ,, index, +, 1, )]
[stringAsString]
[index]
[index, +, 1]
[index]
[1]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, resultNode, )]
[parent]
[n]
[resultNode]
[reportCodeChange, (, )]
[resultNode]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[Preconditions]
[stringNode, ., isString, (, )]
[stringNode]
[stringNode, ., getString, (, )]
[stringNode]
[arg1, !=, null, &&, arg1, ., isNumber, (, ), &&, arg1, ., getNext, (, ), ==, null]
[arg1, !=, null, &&, arg1, ., isNumber, (, )]
[arg1, !=, null]
[arg1]
[null]
[arg1, ., isNumber, (, )]
[arg1]
[arg1, ., getNext, (, ), ==, null]
[arg1, ., getNext, (, )]
[arg1]
[null]
[index]
[(, int, ), arg1, ., getDouble, (, )]
[arg1, ., getDouble, (, )]
[arg1]
[n]
[index, <, 0, ||, stringAsString, ., length, (, ), <=, index]
[index, <, 0]
[index]
[0]
[stringAsString, ., length, (, ), <=, index]
[stringAsString, ., length, (, )]
[stringAsString]
[index]
[n]
[IR, ., number, (, stringAsString, ., charAt, (, index, ), )]
[IR]
[stringAsString, ., charAt, (, index, )]
[stringAsString]
[index]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, resultNode, )]
[parent]
[n]
[resultNode]
[reportCodeChange, (, )]
[resultNode]
[startIndex, +, separator, ., length, (, ), >, stringValue, ., length, (, )]
[startIndex, +, separator, ., length, (, )]
[startIndex]
[separator, ., length, (, )]
[separator]
[stringValue, ., length, (, )]
[stringValue]
[-, 1]
[1]
[stringValue, ., indexOf, (, separator, ,, startIndex, )]
[stringValue]
[separator]
[startIndex]
[matchIndex, <, 0]
[matchIndex]
[0]
[-, 1]
[1]
[matchIndex]
[Preconditions, ., checkArgument, (, limit, >=, 0, )]
[Preconditions]
[limit, >=, 0]
[limit]
[0]
[Preconditions, ., checkArgument, (, stringValue, !=, null, )]
[Preconditions]
[stringValue, !=, null]
[stringValue]
[null]
[limit, ==, 0]
[limit]
[0]
[new, String, [, 0, ]]
[0]
[separator, ==, null]
[separator]
[null]
[new, String, [, ], {, stringValue, }]
[{, stringValue, }]
[stringValue]
[Lists, ., newArrayList, (, )]
[Lists]
[separator, ., length, (, ), ==, 0]
[separator, ., length, (, )]
[separator]
[0]
[0]
[i, <, stringValue, ., length, (, ), &&, i, <, limit]
[i, <, stringValue, ., length, (, )]
[i]
[stringValue, ., length, (, )]
[stringValue]
[i, <, limit]
[i]
[limit]
[i, ++]
[i]
[splitStrings, ., add, (, stringValue, ., substring, (, i, ,, i, +, 1, ), )]
[splitStrings]
[stringValue, ., substring, (, i, ,, i, +, 1, )]
[stringValue]
[i]
[i, +, 1]
[i]
[1]
[0]
[(, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0, &&, splitStrings, ., size, (, ), <, limit]
[(, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), ), >=, 0]
[(, matchIndex, =, jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, ), )]
[matchIndex]
[jsSplitMatch, (, stringValue, ,, startIndex, ,, separator, )]
[stringValue]
[startIndex]
[separator]
[0]
[splitStrings, ., size, (, ), <, limit]
[splitStrings, ., size, (, )]
[splitStrings]
[limit]
[splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ,, matchIndex, ), )]
[splitStrings]
[stringValue, ., substring, (, startIndex, ,, matchIndex, )]
[stringValue]
[startIndex]
[matchIndex]
[startIndex]
[matchIndex, +, separator, ., length, (, )]
[matchIndex]
[separator, ., length, (, )]
[separator]
[splitStrings, ., size, (, ), <, limit]
[splitStrings, ., size, (, )]
[splitStrings]
[limit]
[startIndex, <, stringValue, ., length, (, )]
[startIndex]
[stringValue, ., length, (, )]
[stringValue]
[splitStrings, ., add, (, stringValue, ., substring, (, startIndex, ), )]
[splitStrings]
[stringValue, ., substring, (, startIndex, )]
[stringValue]
[startIndex]
[splitStrings, ., add, (, "", )]
[splitStrings]
[""]
[splitStrings, ., toArray, (, new, String, [, splitStrings, ., size, (, ), ], )]
[splitStrings]
[new, String, [, splitStrings, ., size, (, ), ]]
[splitStrings, ., size, (, )]
[splitStrings]
[late]
[n]
[Preconditions, ., checkArgument, (, n, ., isCall, (, ), )]
[Preconditions]
[n, ., isCall, (, )]
[n]
[Preconditions, ., checkArgument, (, stringNode, ., isString, (, ), )]
[Preconditions]
[stringNode, ., isString, (, )]
[stringNode]
[null]
[stringNode, ., getString, (, )]
[stringNode]
[stringValue, ., length, (, ), +, 1]
[stringValue, ., length, (, )]
[stringValue]
[1]
[arg1, !=, null]
[arg1]
[null]
[arg1, ., isString, (, )]
[arg1]
[separator]
[arg1, ., getString, (, )]
[arg1]
[!, arg1, ., isNull, (, )]
[arg1, ., isNull, (, )]
[arg1]
[n]
[arg1, ., getNext, (, )]
[arg1]
[arg2, !=, null]
[arg2]
[null]
[arg2, ., isNumber, (, )]
[arg2]
[limit]
[Math, ., min, (, (, int, ), arg2, ., getDouble, (, ), ,, limit, )]
[Math]
[(, int, ), arg2, ., getDouble, (, )]
[arg2, ., getDouble, (, )]
[arg2]
[limit]
[limit, <, 0]
[limit]
[0]
[n]
[n]
[jsSplit, (, stringValue, ,, separator, ,, limit, )]
[stringValue]
[separator]
[limit]
[IR, ., arraylit, (, )]
[IR]
[0]
[i, <, stringArray, ., length]
[i]
[stringArray, ., length]
[stringArray]
[i, ++]
[i]
[arrayOfStrings, ., addChildToBack, (, IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, ), )]
[arrayOfStrings]
[IR, ., string, (, stringArray, [, i, ], ), ., srcref, (, stringNode, )]
[IR, ., string, (, stringArray, [, i, ], )]
[IR]
[stringArray, [, i, ]]
[stringArray]
[i]
[stringNode]
[n, ., getParent, (, )]
[n]
[parent, ., replaceChild, (, n, ,, arrayOfStrings, )]
[parent]
[n]
[arrayOfStrings]
[reportCodeChange, (, )]
[arrayOfStrings]
