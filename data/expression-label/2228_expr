[value, ==, Integer, ., MIN_VALUE]
[value]
[Integer, ., MIN_VALUE]
[Integer]
[new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", )]
["Integer.MIN_VALUE cannot be negated"]
[-, value]
[value]
[val1, +, val2]
[val1]
[val2]
[(, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0]
[(, val1, ^, sum, ), <, 0]
[(, val1, ^, sum, )]
[val1, ^, sum]
[val1]
[sum]
[0]
[(, val1, ^, val2, ), >=, 0]
[(, val1, ^, val2, )]
[val1, ^, val2]
[val1]
[val2]
[0]
[new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, )]
["The calculation caused an overflow: ", +, val1, +, " + ", +, val2]
["The calculation caused an overflow: ", +, val1, +, " + "]
["The calculation caused an overflow: ", +, val1]
["The calculation caused an overflow: "]
[val1]
[" + "]
[val2]
[sum]
[val1, +, val2]
[val1]
[val2]
[(, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0]
[(, val1, ^, sum, ), <, 0]
[(, val1, ^, sum, )]
[val1, ^, sum]
[val1]
[sum]
[0]
[(, val1, ^, val2, ), >=, 0]
[(, val1, ^, val2, )]
[val1, ^, val2]
[val1]
[val2]
[0]
[new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, )]
["The calculation caused an overflow: ", +, val1, +, " + ", +, val2]
["The calculation caused an overflow: ", +, val1, +, " + "]
["The calculation caused an overflow: ", +, val1]
["The calculation caused an overflow: "]
[val1]
[" + "]
[val2]
[sum]
[val1, -, val2]
[val1]
[val2]
[(, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0]
[(, val1, ^, diff, ), <, 0]
[(, val1, ^, diff, )]
[val1, ^, diff]
[val1]
[diff]
[0]
[(, val1, ^, val2, ), <, 0]
[(, val1, ^, val2, )]
[val1, ^, val2]
[val1]
[val2]
[0]
[new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, )]
["The calculation caused an overflow: ", +, val1, +, " - ", +, val2]
["The calculation caused an overflow: ", +, val1, +, " - "]
["The calculation caused an overflow: ", +, val1]
["The calculation caused an overflow: "]
[val1]
[" - "]
[val2]
[diff]
[(, long, ), val1, *, (, long, ), val2]
[(, long, ), val1]
[val1]
[(, long, ), val2]
[val2]
[total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE]
[total, <, Integer, ., MIN_VALUE]
[total]
[Integer, ., MIN_VALUE]
[Integer]
[total, >, Integer, ., MAX_VALUE]
[total]
[Integer, ., MAX_VALUE]
[Integer]
[new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, )]
["Multiplication overflows an int: ", +, val1, +, " * ", +, val2]
["Multiplication overflows an int: ", +, val1, +, " * "]
["Multiplication overflows an int: ", +, val1]
["Multiplication overflows an int: "]
[val1]
[" * "]
[val2]
[(, int, ), total]
[total]
[val2]
[-, 1]
[1]
[val1, ==, Long, ., MIN_VALUE]
[val1]
[Long, ., MIN_VALUE]
[Long]
[new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, )]
["Multiplication overflows a long: ", +, val1, +, " * ", +, val2]
["Multiplication overflows a long: ", +, val1, +, " * "]
["Multiplication overflows a long: ", +, val1]
["Multiplication overflows a long: "]
[val1]
[" * "]
[val2]
[-, val1]
[val1]
[0]
[0L]
[1]
[val1]
[val1, *, val2]
[val1]
[val2]
[total, /, val2, !=, val1]
[total, /, val2]
[total]
[val2]
[val1]
[new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, )]
["Multiplication overflows a long: ", +, val1, +, " * ", +, val2]
["Multiplication overflows a long: ", +, val1, +, " * "]
["Multiplication overflows a long: ", +, val1]
["Multiplication overflows a long: "]
[val1]
[" * "]
[val2]
[total]
[val2, ==, 1]
[val2]
[1]
[val1]
[val1, ==, 1]
[val1]
[1]
[val2]
[val1, ==, 0, ||, val2, ==, 0]
[val1, ==, 0]
[val1]
[0]
[val2, ==, 0]
[val2]
[0]
[0]
[val1, *, val2]
[val1]
[val2]
[total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1]
[total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1]
[total, /, val2, !=, val1]
[total, /, val2]
[total]
[val2]
[val1]
[val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1]
[val1, ==, Long, ., MIN_VALUE]
[val1]
[Long, ., MIN_VALUE]
[Long]
[val2, ==, -, 1]
[val2]
[-, 1]
[1]
[val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1]
[val2, ==, Long, ., MIN_VALUE]
[val2]
[Long, ., MIN_VALUE]
[Long]
[val1, ==, -, 1]
[val1]
[-, 1]
[1]
[new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, )]
["Multiplication overflows a long: ", +, val1, +, " * ", +, val2]
["Multiplication overflows a long: ", +, val1, +, " * "]
["Multiplication overflows a long: ", +, val1]
["Multiplication overflows a long: "]
[val1]
[" * "]
[val2]
[total]
[dividend, ==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L]
[dividend, ==, Long, ., MIN_VALUE]
[dividend]
[Long, ., MIN_VALUE]
[Long]
[divisor, ==, -, 1L]
[divisor]
[-, 1L]
[1L]
[new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, )]
["Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor]
["Multiplication overflows a long: ", +, dividend, +, " / "]
["Multiplication overflows a long: ", +, dividend]
["Multiplication overflows a long: "]
[dividend]
[" / "]
[divisor]
[dividend, /, divisor]
[dividend]
[divisor]
[Integer, ., MIN_VALUE, <=, value, &&, value, <=, Integer, ., MAX_VALUE]
[Integer, ., MIN_VALUE, <=, value]
[Integer, ., MIN_VALUE]
[Integer]
[value]
[value, <=, Integer, ., MAX_VALUE]
[value]
[Integer, ., MAX_VALUE]
[Integer]
[(, int, ), value]
[value]
[new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, )]
["Value cannot fit in an int: ", +, value]
["Value cannot fit in an int: "]
[value]
[FieldUtils, ., safeMultiply, (, val1, ,, val2, )]
[FieldUtils]
[val1]
[val2]
[FieldUtils, ., safeToInt, (, val, )]
[FieldUtils]
[val]
[(, value, <, lowerBound, ), ||, (, value, >, upperBound, )]
[(, value, <, lowerBound, )]
[value, <, lowerBound]
[value]
[lowerBound]
[(, value, >, upperBound, )]
[value, >, upperBound]
[value]
[upperBound]
[new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[field, ., getType, (, )]
[field]
[Integer, ., valueOf, (, value, )]
[Integer]
[value]
[Integer, ., valueOf, (, lowerBound, )]
[Integer]
[lowerBound]
[Integer, ., valueOf, (, upperBound, )]
[Integer]
[upperBound]
[(, value, <, lowerBound, ), ||, (, value, >, upperBound, )]
[(, value, <, lowerBound, )]
[value, <, lowerBound]
[value]
[lowerBound]
[(, value, >, upperBound, )]
[value, >, upperBound]
[value]
[upperBound]
[new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[fieldType]
[Integer, ., valueOf, (, value, )]
[Integer]
[value]
[Integer, ., valueOf, (, lowerBound, )]
[Integer]
[lowerBound]
[Integer, ., valueOf, (, upperBound, )]
[Integer]
[upperBound]
[(, value, <, lowerBound, ), ||, (, value, >, upperBound, )]
[(, value, <, lowerBound, )]
[value, <, lowerBound]
[value]
[lowerBound]
[(, value, >, upperBound, )]
[value, >, upperBound]
[value]
[upperBound]
[new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[fieldName]
[Integer, ., valueOf, (, value, )]
[Integer]
[value]
[Integer, ., valueOf, (, lowerBound, )]
[Integer]
[lowerBound]
[Integer, ., valueOf, (, upperBound, )]
[Integer]
[upperBound]
[getWrappedValue, (, currentValue, +, wrapValue, ,, minValue, ,, maxValue, )]
[currentValue, +, wrapValue]
[currentValue]
[wrapValue]
[minValue]
[maxValue]
[minValue, >=, maxValue]
[minValue]
[maxValue]
[new, IllegalArgumentException, (, "MIN > MAX", )]
["MIN > MAX"]
[maxValue, -, minValue, +, 1]
[maxValue, -, minValue]
[maxValue]
[minValue]
[1]
[value]
[minValue]
[value, >=, 0]
[value]
[0]
[(, value, %, wrapRange, ), +, minValue]
[(, value, %, wrapRange, )]
[value, %, wrapRange]
[value]
[wrapRange]
[minValue]
[(, -, value, ), %, wrapRange]
[(, -, value, )]
[-, value]
[value]
[wrapRange]
[remByRange, ==, 0]
[remByRange]
[0]
[0, +, minValue]
[0]
[minValue]
[(, wrapRange, -, remByRange, ), +, minValue]
[(, wrapRange, -, remByRange, )]
[wrapRange, -, remByRange]
[wrapRange]
[remByRange]
[minValue]
[object1, ==, object2]
[object1]
[object2]
[true]
[object1, ==, null, ||, object2, ==, null]
[object1, ==, null]
[object1]
[null]
[object2, ==, null]
[object2]
[null]
[false]
[object1, ., equals, (, object2, )]
[object1]
[object2]
