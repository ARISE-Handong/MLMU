[500]
[new, StringBuilder, (, 1024, )]
[1024]
[0]
[0]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, )]
[Preconditions]
[sourceMapDetailLevel, !=, null]
[sourceMapDetailLevel]
[null]
[this, ., lineLengthThreshold]
[this]
[lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold]
[lineLengthThreshold, <=, 0]
[lineLengthThreshold]
[0]
[Integer, ., MAX_VALUE]
[Integer]
[lineLengthThreshold]
[this, ., createSrcMap]
[this]
[createSrcMap]
[this, ., sourceMapDetailLevel]
[this]
[sourceMapDetailLevel]
[this, ., mappings]
[this]
[createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null]
[createSrcMap]
[new, ArrayDeque, <, Mapping, >, (, )]
[null]
[this, ., allMappings]
[this]
[createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null]
[createSrcMap]
[new, ArrayList, <, Mapping, >, (, )]
[null]
[Preconditions, ., checkState, (, sourceMapDetailLevel, !=, null, )]
[Preconditions]
[sourceMapDetailLevel, !=, null]
[sourceMapDetailLevel]
[null]
[Preconditions, ., checkState, (, node, !=, null, )]
[Preconditions]
[node, !=, null]
[node]
[null]
[createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, )]
[createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0]
[createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null]
[createSrcMap]
[node, ., getSourceFileName, (, ), !=, null]
[node, ., getSourceFileName, (, )]
[node]
[null]
[node, ., getLineno, (, ), >, 0]
[node, ., getLineno, (, )]
[node]
[0]
[sourceMapDetailLevel, ., apply, (, node, )]
[sourceMapDetailLevel]
[node]
[getCurrentLineIndex, (, )]
[getCurrentCharIndex, (, )]
[Preconditions, ., checkState, (, line, >=, 0, )]
[Preconditions]
[line, >=, 0]
[line]
[0]
[new, Mapping, (, )]
[mapping, ., node]
[mapping]
[node]
[mapping, ., start]
[mapping]
[new, FilePosition, (, line, ,, index, )]
[line]
[index]
[mappings, ., push, (, mapping, )]
[mappings]
[mapping]
[allMappings, ., add, (, mapping, )]
[allMappings]
[mapping]
[createSrcMap, &&, !, mappings, ., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==, node]
[createSrcMap, &&, !, mappings, ., isEmpty, (, )]
[createSrcMap]
[!, mappings, ., isEmpty, (, )]
[mappings, ., isEmpty, (, )]
[mappings]
[mappings, ., peek, (, ), ., node, ==, node]
[mappings, ., peek, (, ), ., node]
[mappings, ., peek, (, )]
[mappings]
[node]
[mappings, ., pop, (, )]
[mappings]
[getCurrentLineIndex, (, )]
[getCurrentCharIndex, (, )]
[Preconditions, ., checkState, (, line, >=, 0, )]
[Preconditions]
[line, >=, 0]
[line]
[0]
[mapping, ., end]
[mapping]
[new, FilePosition, (, line, ,, index, )]
[line]
[index]
[createSrcMap]
[allMappings]
[map, ., addMapping, (, mapping, ., node, ,, mapping, ., start, ,, mapping, ., end, )]
[map]
[mapping, ., node]
[mapping]
[mapping, ., start]
[mapping]
[mapping, ., end]
[mapping]
[createSrcMap]
[allMappings]
[mapping, ., start]
[mapping]
[convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, )]
[mapping, ., start]
[mapping]
[lineIndex]
[charIndex]
[insertion]
[mapping, ., end, !=, null]
[mapping, ., end]
[mapping]
[null]
[mapping, ., end]
[mapping]
[convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, )]
[mapping, ., end]
[mapping]
[lineIndex]
[charIndex]
[insertion]
[position, ., getLine, (, )]
[position]
[position, ., getColumn, (, )]
[position]
[insertion]
[originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition]
[originalLine, ==, lineIndex]
[originalLine]
[lineIndex]
[originalChar, >=, characterPosition]
[originalChar]
[characterPosition]
[new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, )]
[originalLine, +, 1]
[originalLine]
[1]
[originalChar, -, characterPosition]
[originalChar]
[characterPosition]
[position]
[originalLine, ==, lineIndex]
[originalLine]
[lineIndex]
[new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, )]
[originalLine, -, 1]
[originalLine]
[1]
[originalChar, +, characterPosition]
[originalChar]
[characterPosition]
[originalLine, >, lineIndex]
[originalLine]
[lineIndex]
[new, IllegalStateException, (, "Cannot undo line cut on a previous line.", )]
["Cannot undo line cut on a previous line."]
[position]
[code, ., toString, (, )]
[code]
[(, code, ., length, (, ), >, 0, ), ?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :, '\0']
[(, code, ., length, (, ), >, 0, )]
[code, ., length, (, ), >, 0]
[code, ., length, (, )]
[code]
[0]
[code, ., charAt, (, code, ., length, (, ), -, 1, )]
[code]
[code, ., length, (, ), -, 1]
[code, ., length, (, )]
[code]
[1]
['\0']
[lineLength]
[lineIndex]
["  "]
[0]
[lineLengthThreshold]
[createSourceMap]
[sourceMapDetailLevel]
[lineLength, ==, 0]
[lineLength]
[0]
[0]
[i, <, indent]
[i]
[indent]
[i, ++]
[i]
[code, ., append, (, INDENT, )]
[code]
[INDENT]
[lineLength]
[INDENT, ., length, (, )]
[INDENT]
[code, ., append, (, str, )]
[code]
[str]
[lineLength]
[str, ., length, (, )]
[str]
[lineLength, >, 0]
[lineLength]
[0]
[code, ., append, (, '\n', )]
[code]
['\n']
[lineIndex, ++]
[lineIndex]
[lineLength]
[0]
[maybeCutLine, (, )]
[lineLength, >, lineLengthThreshold]
[lineLength]
[lineLengthThreshold]
[startNewLine, (, )]
[startNewLine, (, )]
[append, (, " {", )]
[" {"]
[indent, ++]
[indent]
[endLine, (, )]
[indent, --]
[indent]
[append, (, "}", )]
["}"]
[add, (, ", ", )]
[", "]
[maybeLineBreak, (, )]
[super, ., endFunction, (, statementContext, )]
[super]
[statementContext]
[statementContext]
[startNewLine, (, )]
[super, ., beginCaseBody, (, )]
[super]
[indent, ++]
[indent]
[endLine, (, )]
[super, ., endCaseBody, (, )]
[super]
[indent, --]
[indent]
[endStatement, (, )]
[binOp]
[getLastChar, (, ), !=, ' ', &&, op, ., charAt, (, 0, ), !=, ',']
[getLastChar, (, ), !=, ' ']
[getLastChar, (, )]
[' ']
[op, ., charAt, (, 0, ), !=, ',']
[op, ., charAt, (, 0, )]
[op]
[0]
[',']
[append, (, " ", )]
[" "]
[append, (, op, )]
[op]
[append, (, " ", )]
[" "]
[append, (, op, )]
[op]
[true]
[n, ., getParent, (, ), ., getParent, (, )]
[n, ., getParent, (, )]
[n]
[Preconditions, ., checkState, (, n, ., isBlock, (, ), )]
[Preconditions]
[n, ., isBlock, (, )]
[n]
[n, ., getParent, (, )]
[n]
[parent, !=, null]
[parent]
[null]
[parent, ., getType, (, )]
[parent]
[type]
[Token, ., DO]
[Token]
[false]
[Token, ., FUNCTION]
[Token]
[false]
[Token, ., TRY]
[Token]
[n, !=, parent, ., getFirstChild, (, )]
[n]
[parent, ., getFirstChild, (, )]
[parent]
[Token, ., CATCH]
[Token]
[!, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), )]
[NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), )]
[NodeUtil]
[getTryForCatch, (, parent, )]
[parent]
[Token, ., IF]
[Token]
[n, ==, parent, ., getLastChild, (, )]
[n]
[parent, ., getLastChild, (, )]
[parent]
[true]
[maybeEndStatement, (, )]
[0]
[0]
[0]
[0]
[lineLengthThreshold]
[createSrcMap]
[sourceMapDetailLevel]
[this, ., lineBreak]
[this]
[lineBreak]
[this, ., preferLineBreakAtEndOfFile]
[this]
[preferLineBreakAtEndOfFile]
[code, ., append, (, str, )]
[code]
[str]
[lineLength]
[str, ., length, (, )]
[str]
[lineLength, >, 0]
[lineLength]
[0]
[prevCutPosition]
[code, ., length, (, )]
[code]
[prevLineStartPosition]
[lineStartPosition]
[code, ., append, (, '\n', )]
[code]
['\n']
[lineLength]
[0]
[lineIndex, ++]
[lineIndex]
[lineStartPosition]
[code, ., length, (, )]
[code]
[lineBreak]
[sawFunction]
[startNewLine, (, )]
[sawFunction]
[false]
[code, ., length, (, )]
[code]
[preferredBreakPosition, ==, len, -, 1]
[preferredBreakPosition]
[len, -, 1]
[len]
[1]
[code, ., charAt, (, len, -, 1, )]
[code]
[len, -, 1]
[len]
[1]
[ch, ==, ';']
[ch]
[';']
[preferredBreakPosition]
[len]
[maybeCutLine, (, )]
[lineLength, >, lineLengthThreshold]
[lineLength]
[lineLengthThreshold]
[preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength]
[preferredBreakPosition, >, lineStartPosition]
[preferredBreakPosition]
[lineStartPosition]
[preferredBreakPosition, <, lineStartPosition, +, lineLength]
[preferredBreakPosition]
[lineStartPosition, +, lineLength]
[lineStartPosition]
[lineLength]
[preferredBreakPosition]
[code, ., insert, (, position, ,, '\n', )]
[code]
[position]
['\n']
[prevCutPosition]
[position]
[reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, )]
[lineIndex]
[position, -, lineStartPosition]
[position]
[lineStartPosition]
[true]
[lineIndex, ++]
[lineIndex]
[lineLength]
[(, position, -, lineStartPosition, )]
[position, -, lineStartPosition]
[position]
[lineStartPosition]
[lineStartPosition]
[position, +, 1]
[position]
[1]
[startNewLine, (, )]
[preferredBreakPosition]
[code, ., length, (, )]
[code]
[super, ., endFile, (, )]
[super]
[!, preferLineBreakAtEndOfFile]
[preferLineBreakAtEndOfFile]
[lineLength, >, lineLengthThreshold, /, 2]
[lineLength]
[lineLengthThreshold, /, 2]
[lineLengthThreshold]
[2]
[append, (, ";", )]
[";"]
[startNewLine, (, )]
[prevCutPosition, >, 0]
[prevCutPosition]
[0]
[code, ., setCharAt, (, prevCutPosition, ,, ' ', )]
[code]
[prevCutPosition]
[' ']
[lineStartPosition]
[prevLineStartPosition]
[lineLength]
[code, ., length, (, ), -, lineStartPosition]
[code, ., length, (, )]
[code]
[lineStartPosition]
[reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, )]
[lineIndex]
[prevCutPosition, +, 1]
[prevCutPosition]
[1]
[false]
[lineIndex, --]
[lineIndex]
[prevCutPosition]
[0]
[prevLineStartPosition]
[0]
[append, (, ";", )]
[";"]
[startNewLine, (, )]
[new, CompilerOptions, (, )]
[false]
[null]
[root]
[node]
[this, ., options]
[this]
[(, CompilerOptions, ), options, ., clone, (, )]
[options, ., clone, (, )]
[options]
[Throwables, ., propagate, (, e, )]
[Throwables]
[e]
[this]
[options, ., prettyPrint]
[options]
[prettyPrint]
[this]
[options, ., lineBreak]
[options]
[lineBreak]
[this]
[this, ., outputTypes]
[this]
[outputTypes]
[this]
[this, ., sourceMap]
[this]
[sourceMap]
[this]
[this, ., tagAsStrict]
[this]
[tagAsStrict]
[this]
[root, ==, null]
[root]
[null]
[new, IllegalStateException, (, "Cannot build without root node being specified", )]
["Cannot build without root node being specified"]
[outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT]
[outputTypes]
[Format, ., TYPED]
[Format]
[options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT]
[options, ., prettyPrint]
[options]
[Format, ., PRETTY]
[Format]
[Format, ., COMPACT]
[Format]
[toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, )]
[root]
[outputFormat]
[options]
[sourceMap]
[tagAsStrict]
[Preconditions, ., checkState, (, options, ., sourceMapDetailLevel, !=, null, )]
[Preconditions]
[options, ., sourceMapDetailLevel, !=, null]
[options, ., sourceMapDetailLevel]
[options]
[null]
[(, sourceMap, !=, null, )]
[sourceMap, !=, null]
[sourceMap]
[null]
[outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, )]
[outputFormat, ==, Format, ., COMPACT]
[outputFormat]
[Format, ., COMPACT]
[Format]
[new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, )]
[options, ., lineBreak]
[options]
[options, ., preferLineBreakAtEndOfFile]
[options]
[options, ., lineLengthThreshold]
[options]
[createSourceMap]
[options, ., sourceMapDetailLevel]
[options]
[new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, )]
[options, ., lineLengthThreshold]
[options]
[createSourceMap]
[options, ., sourceMapDetailLevel]
[options]
[outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, )]
[outputFormat, ==, Format, ., TYPED]
[outputFormat]
[Format, ., TYPED]
[Format]
[new, TypedCodeGenerator, (, mcp, ,, options, )]
[mcp]
[options]
[new, CodeGenerator, (, mcp, ,, options, )]
[mcp]
[options]
[tagAsStrict]
[cg, ., tagAsStrict, (, )]
[cg]
[cg, ., add, (, root, )]
[cg]
[root]
[mcp, ., endFile, (, )]
[mcp]
[mcp, ., getCode, (, )]
[mcp]
[createSourceMap]
[mcp, ., generateSourceMap, (, sourceMap, )]
[mcp]
[sourceMap]
[code]
