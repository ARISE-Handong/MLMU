[this, ., violationHandler]
[this]
[handler]
[this, ., violationHandler]
[this]
[new, ViolationHandler, (, ), {, @, Override, public, void, handleViolation, (, String, message, ,, Node, n, ), {, throw, new, IllegalStateException, (, message, +, " Reference node ", +, n, ., toString, (, ), ), ;, }, }]
[new, IllegalStateException, (, message, +, " Reference node ", +, n, ., toString, (, ), )]
[message, +, " Reference node ", +, n, ., toString, (, )]
[message, +, " Reference node "]
[message]
[" Reference node "]
[n, ., toString, (, )]
[n]
[externs, !=, null]
[externs]
[null]
[validateCodeRoot, (, externs, )]
[externs]
[root, !=, null]
[root]
[null]
[validateCodeRoot, (, root, )]
[root]
[validateNodeType, (, Token, ., BLOCK, ,, n, )]
[Token, ., BLOCK]
[Token]
[n]
[validateIsSynthetic, (, n, )]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateCodeRoot, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateCodeRoot, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., BLOCK, ,, n, )]
[Token, ., BLOCK]
[Token]
[n]
[validateIsSynthetic, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateScript, (, c, )]
[c]
[validateNodeType, (, Token, ., SCRIPT, ,, n, )]
[Token, ., SCRIPT]
[Token]
[n]
[validateHasSourceName, (, n, )]
[n]
[validateHasInputId, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateStatement, (, c, )]
[c]
[n, ., getType, (, )]
[n]
[Token, ., LABEL]
[Token]
[validateLabel, (, n, )]
[n]
[Token, ., BLOCK]
[Token]
[validateBlock, (, n, )]
[n]
[Token, ., FUNCTION]
[Token]
[validateFunctionStatement, (, n, )]
[n]
[Token, ., WITH]
[Token]
[validateWith, (, n, )]
[n]
[Token, ., FOR]
[Token]
[validateFor, (, n, )]
[n]
[Token, ., WHILE]
[Token]
[validateWhile, (, n, )]
[n]
[Token, ., DO]
[Token]
[validateDo, (, n, )]
[n]
[Token, ., SWITCH]
[Token]
[validateSwitch, (, n, )]
[n]
[Token, ., IF]
[Token]
[validateIf, (, n, )]
[n]
[Token, ., VAR]
[Token]
[validateVar, (, n, )]
[n]
[Token, ., EXPR_RESULT]
[Token]
[validateExprStmt, (, n, )]
[n]
[Token, ., RETURN]
[Token]
[validateReturn, (, n, )]
[n]
[Token, ., THROW]
[Token]
[validateThrow, (, n, )]
[n]
[Token, ., TRY]
[Token]
[validateTry, (, n, )]
[n]
[Token, ., BREAK]
[Token]
[validateBreak, (, n, )]
[n]
[Token, ., CONTINUE]
[Token]
[validateContinue, (, n, )]
[n]
[Token, ., EMPTY]
[Token]
[validateChildless, (, n, )]
[n]
[Token, ., DEBUGGER]
[Token]
[validateChildless, (, n, )]
[n]
[violation, (, "Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), ), +, ".", ,, n, )]
["Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), ), +, "."]
["Expected statement but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected statement but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
["."]
[n]
[n, ., getType, (, )]
[n]
[Token, ., FALSE]
[Token]
[Token, ., NULL]
[Token]
[Token, ., THIS]
[Token]
[Token, ., TRUE]
[Token]
[validateChildless, (, n, )]
[n]
[Token, ., DELPROP]
[Token]
[Token, ., POS]
[Token]
[Token, ., NEG]
[Token]
[Token, ., NOT]
[Token]
[Token, ., INC]
[Token]
[Token, ., DEC]
[Token]
[Token, ., TYPEOF]
[Token]
[Token, ., VOID]
[Token]
[Token, ., BITNOT]
[Token]
[Token, ., CAST]
[Token]
[validateUnaryOp, (, n, )]
[n]
[Token, ., COMMA]
[Token]
[Token, ., OR]
[Token]
[Token, ., AND]
[Token]
[Token, ., BITOR]
[Token]
[Token, ., BITXOR]
[Token]
[Token, ., BITAND]
[Token]
[Token, ., EQ]
[Token]
[Token, ., NE]
[Token]
[Token, ., SHEQ]
[Token]
[Token, ., SHNE]
[Token]
[Token, ., LT]
[Token]
[Token, ., GT]
[Token]
[Token, ., LE]
[Token]
[Token, ., GE]
[Token]
[Token, ., INSTANCEOF]
[Token]
[Token, ., IN]
[Token]
[Token, ., LSH]
[Token]
[Token, ., RSH]
[Token]
[Token, ., URSH]
[Token]
[Token, ., SUB]
[Token]
[Token, ., ADD]
[Token]
[Token, ., MUL]
[Token]
[Token, ., MOD]
[Token]
[Token, ., DIV]
[Token]
[validateBinaryOp, (, n, )]
[n]
[Token, ., ASSIGN]
[Token]
[Token, ., ASSIGN_BITOR]
[Token]
[Token, ., ASSIGN_BITXOR]
[Token]
[Token, ., ASSIGN_BITAND]
[Token]
[Token, ., ASSIGN_LSH]
[Token]
[Token, ., ASSIGN_RSH]
[Token]
[Token, ., ASSIGN_URSH]
[Token]
[Token, ., ASSIGN_ADD]
[Token]
[Token, ., ASSIGN_SUB]
[Token]
[Token, ., ASSIGN_MUL]
[Token]
[Token, ., ASSIGN_DIV]
[Token]
[Token, ., ASSIGN_MOD]
[Token]
[validateAssignmentExpression, (, n, )]
[n]
[Token, ., HOOK]
[Token]
[validateTrinaryOp, (, n, )]
[n]
[Token, ., STRING]
[Token]
[validateString, (, n, )]
[n]
[Token, ., NUMBER]
[Token]
[validateNumber, (, n, )]
[n]
[Token, ., NAME]
[Token]
[validateName, (, n, )]
[n]
[Token, ., GETELEM]
[Token]
[validateBinaryOp, (, n, )]
[n]
[Token, ., GETPROP]
[Token]
[validateGetProp, (, n, )]
[n]
[Token, ., ARRAYLIT]
[Token]
[validateArrayLit, (, n, )]
[n]
[Token, ., OBJECTLIT]
[Token]
[validateObjectLit, (, n, )]
[n]
[Token, ., REGEXP]
[Token]
[validateRegExpLit, (, n, )]
[n]
[Token, ., CALL]
[Token]
[validateCall, (, n, )]
[n]
[Token, ., NEW]
[Token]
[validateNew, (, n, )]
[n]
[Token, ., FUNCTION]
[Token]
[validateFunctionExpression, (, n, )]
[n]
[violation, (, "Expected expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["Expected expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected expression but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[validateNodeType, (, Token, ., BLOCK, ,, n, )]
[Token, ., BLOCK]
[Token]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateStatement, (, c, )]
[c]
[validateNodeType, (, Token, ., BLOCK, ,, n, )]
[Token, ., BLOCK]
[Token]
[n]
[validateIsSynthetic, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateStatement, (, c, )]
[c]
[!, n, ., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, )]
[n, ., getBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, )]
[n]
[Node, ., SYNTHETIC_BLOCK_PROP]
[Node]
[violation, (, "Missing 'synthetic block' annotation.", ,, n, )]
["Missing 'synthetic block' annotation."]
[n]
[n, ., getSourceFileName, (, )]
[n]
[sourceName, ==, null, ||, sourceName, ., isEmpty, (, )]
[sourceName, ==, null]
[sourceName]
[null]
[sourceName, ., isEmpty, (, )]
[sourceName]
[violation, (, "Missing 'source name' annotation.", ,, n, )]
["Missing 'source name' annotation."]
[n]
[n, ., getInputId, (, )]
[n]
[inputId, ==, null]
[inputId]
[null]
[violation, (, "Missing 'input id' annotation.", ,, n, )]
["Missing 'input id' annotation."]
[n]
[validateNodeType, (, Token, ., LABEL, ,, n, )]
[Token, ., LABEL]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateLabelName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateStatement, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., LABEL_NAME, ,, n, )]
[Token, ., LABEL_NAME]
[Token]
[n]
[validateNonEmptyString, (, n, )]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[validateNonNullString, (, n, )]
[n]
[n, ., getString, (, ), ., isEmpty, (, )]
[n, ., getString, (, )]
[n]
[violation, (, "Expected non-empty string.", ,, n, )]
["Expected non-empty string."]
[n]
[n, ., getString, (, ), ==, null]
[n, ., getString, (, )]
[n]
[null]
[violation, (, "Expected non-null string.", ,, n, )]
["Expected non-null string."]
[n]
[validateNodeType, (, Token, ., NAME, ,, n, )]
[Token, ., NAME]
[Token]
[n]
[validateNonEmptyString, (, n, )]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[validateNodeType, (, Token, ., NAME, ,, n, )]
[Token, ., NAME]
[Token]
[n]
[validateNonNullString, (, n, )]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[validateNodeType, (, Token, ., FUNCTION, ,, n, )]
[Token, ., FUNCTION]
[Token]
[n]
[validateChildCount, (, n, ,, 3, )]
[n]
[3]
[validateName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateParameters, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., FUNCTION, ,, n, )]
[Token, ., FUNCTION]
[Token]
[n]
[validateChildCount, (, n, ,, 3, )]
[n]
[3]
[validateOptionalName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateParameters, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., PARAM_LIST, ,, n, )]
[Token, ., PARAM_LIST]
[Token]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateName, (, c, )]
[c]
[validateNodeType, (, Token, ., CALL, ,, n, )]
[Token, ., CALL]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 1, )]
[n]
[1]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateExpression, (, c, )]
[c]
[validateNodeType, (, Token, ., NEW, ,, n, )]
[Token, ., NEW]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 1, )]
[n]
[1]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateExpression, (, c, )]
[c]
[validateNodeType, (, Token, ., VAR, ,, n, )]
[Token, ., VAR]
[Token]
[n]
[this, ., validateMinimumChildCount, (, n, ,, 1, )]
[this]
[n]
[1]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateNodeType, (, Token, ., NAME, ,, c, )]
[Token, ., NAME]
[Token]
[c]
[validateNonEmptyString, (, c, )]
[c]
[validateMaximumChildCount, (, c, ,, 1, )]
[c]
[1]
[c, ., hasChildren, (, )]
[c]
[validateExpression, (, c, ., getFirstChild, (, ), )]
[c, ., getFirstChild, (, )]
[c]
[validateNodeType, (, Token, ., FOR, ,, n, )]
[Token, ., FOR]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 3, )]
[n]
[3]
[validateMaximumChildCount, (, n, ,, 4, )]
[n]
[4]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[validateChildCount, (, n, ,, 3, )]
[n]
[3]
[validateVarOrAssignmentTarget, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateExpression, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[validateChildCount, (, n, ,, 4, )]
[n]
[4]
[validateVarOrOptionalExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateOptionalExpression, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[validateOptionalExpression, (, n, ., getChildAtIndex, (, 2, ), )]
[n, ., getChildAtIndex, (, 2, )]
[n]
[2]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[n, ., isVar, (, )]
[n]
[validateVar, (, n, )]
[n]
[validateOptionalExpression, (, n, )]
[n]
[n, ., isVar, (, )]
[n]
[this, ., validateChildCount, (, n, ,, 1, )]
[this]
[n]
[1]
[validateVar, (, n, )]
[n]
[validateAssignmentTarget, (, n, )]
[n]
[validateNodeType, (, Token, ., WITH, ,, n, )]
[Token, ., WITH]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., WHILE, ,, n, )]
[Token, ., WHILE]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., DO, ,, n, )]
[Token, ., DO]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateBlock, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateExpression, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., IF, ,, n, )]
[Token, ., IF]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 2, )]
[n]
[2]
[validateMaximumChildCount, (, n, ,, 3, )]
[n]
[3]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateBlock, (, n, ., getChildAtIndex, (, 1, ), )]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., EXPR_RESULT, ,, n, )]
[Token, ., EXPR_RESULT]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateNodeType, (, Token, ., RETURN, ,, n, )]
[Token, ., RETURN]
[Token]
[n]
[validateMaximumChildCount, (, n, ,, 1, )]
[n]
[1]
[n, ., hasChildren, (, )]
[n]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateNodeType, (, Token, ., THROW, ,, n, )]
[Token, ., THROW]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateNodeType, (, Token, ., BREAK, ,, n, )]
[Token, ., BREAK]
[Token]
[n]
[validateMaximumChildCount, (, n, ,, 1, )]
[n]
[1]
[n, ., hasChildren, (, )]
[n]
[validateLabelName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateNodeType, (, Token, ., CONTINUE, ,, n, )]
[Token, ., CONTINUE]
[Token]
[n]
[validateMaximumChildCount, (, n, ,, 1, )]
[n]
[1]
[n, ., hasChildren, (, )]
[n]
[validateLabelName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateNodeType, (, Token, ., TRY, ,, n, )]
[Token, ., TRY]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 2, )]
[n]
[2]
[validateMaximumChildCount, (, n, ,, 3, )]
[n]
[3]
[validateBlock, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[false]
[n, ., getChildAtIndex, (, 1, )]
[n]
[1]
[validateNodeType, (, Token, ., BLOCK, ,, catches, )]
[Token, ., BLOCK]
[Token]
[catches]
[validateMaximumChildCount, (, catches, ,, 1, )]
[catches]
[1]
[catches, ., hasChildren, (, )]
[catches]
[validateCatch, (, catches, ., getFirstChild, (, ), )]
[catches, ., getFirstChild, (, )]
[catches]
[seenCatchOrFinally]
[true]
[n, ., getChildCount, (, ), ==, 3]
[n, ., getChildCount, (, )]
[n]
[3]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[seenCatchOrFinally]
[true]
[!, seenCatchOrFinally]
[seenCatchOrFinally]
[violation, (, "Missing catch or finally for try statement.", ,, n, )]
["Missing catch or finally for try statement."]
[n]
[validateNodeType, (, Token, ., CATCH, ,, n, )]
[Token, ., CATCH]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateName, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., SWITCH, ,, n, )]
[Token, ., SWITCH]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 1, )]
[n]
[1]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[0]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateSwitchMember, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[c, ., isDefaultCase, (, )]
[c]
[defaults, ++]
[defaults]
[defaults, >, 1]
[defaults]
[1]
[violation, (, "Expected at most 1 'default' in switch but was ", +, defaults, ,, n, )]
["Expected at most 1 'default' in switch but was ", +, defaults]
["Expected at most 1 'default' in switch but was "]
[defaults]
[n]
[n, ., getType, (, )]
[n]
[Token, ., CASE]
[Token]
[validateCase, (, n, )]
[n]
[Token, ., DEFAULT_CASE]
[Token]
[validateDefault, (, n, )]
[n]
[violation, (, "Expected switch member but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["Expected switch member but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected switch member but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[validateNodeType, (, Token, ., DEFAULT_CASE, ,, n, )]
[Token, ., DEFAULT_CASE]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., CASE, ,, n, )]
[Token, ., CASE]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateSyntheticBlock, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[n, ., isEmpty, (, )]
[n]
[validateChildless, (, n, )]
[n]
[validateExpression, (, n, )]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateAssignmentTarget, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateExpression, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[n, ., getType, (, )]
[n]
[Token, ., NAME]
[Token]
[Token, ., GETELEM]
[Token]
[Token, ., GETPROP]
[Token]
[validateExpression, (, n, )]
[n]
[violation, (, "Expected assignment target expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["Expected assignment target expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected assignment target expression but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[validateNodeType, (, Token, ., GETPROP, ,, n, )]
[Token, ., GETPROP]
[Token]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getLastChild, (, )]
[n]
[validateNodeType, (, Token, ., STRING, ,, prop, )]
[Token, ., STRING]
[Token]
[prop]
[validateNonEmptyString, (, prop, )]
[prop]
[validateNodeType, (, Token, ., REGEXP, ,, n, )]
[Token, ., REGEXP]
[Token]
[n]
[validateMinimumChildCount, (, n, ,, 1, )]
[n]
[1]
[validateMaximumChildCount, (, n, ,, 2, )]
[n]
[2]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateString, (, c, )]
[c]
[validateNodeType, (, Token, ., STRING, ,, n, )]
[Token, ., STRING]
[Token]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[n, ., getString, (, )]
[n]
[violation, (, "Invalid STRING node.", ,, n, )]
["Invalid STRING node."]
[n]
[validateNodeType, (, Token, ., NUMBER, ,, n, )]
[Token, ., NUMBER]
[Token]
[n]
[validateChildCount, (, n, ,, 0, )]
[n]
[0]
[n, ., getDouble, (, )]
[n]
[violation, (, "Invalid NUMBER node.", ,, n, )]
["Invalid NUMBER node."]
[n]
[validateNodeType, (, Token, ., ARRAYLIT, ,, n, )]
[Token, ., ARRAYLIT]
[Token]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateOptionalExpression, (, c, )]
[c]
[validateNodeType, (, Token, ., OBJECTLIT, ,, n, )]
[Token, ., OBJECTLIT]
[Token]
[n]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[validateObjectLitKey, (, c, )]
[c]
[n, ., getType, (, )]
[n]
[Token, ., GETTER_DEF]
[Token]
[validateObjectLitGetKey, (, n, )]
[n]
[Token, ., SETTER_DEF]
[Token]
[validateObjectLitSetKey, (, n, )]
[n]
[Token, ., STRING_KEY]
[Token]
[validateObjectLitStringKey, (, n, )]
[n]
[violation, (, "Expected object literal key expression but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["Expected object literal key expression but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected object literal key expression but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[validateNodeType, (, Token, ., GETTER_DEF, ,, n, )]
[Token, ., GETTER_DEF]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateObjectLiteralKeyName, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[validateFunctionExpression, (, function, )]
[function]
[!, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, )]
[function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, )]
[function, ., getFirstChild, (, ), ., getString, (, )]
[function, ., getFirstChild, (, )]
[function]
[violation, (, "Expected unnamed function expression.", ,, n, )]
["Expected unnamed function expression."]
[n]
[function, ., getChildAtIndex, (, 1, )]
[function]
[1]
[functionParams, ., hasChildren, (, )]
[functionParams]
[violation, (, "get methods must not have parameters.", ,, n, )]
["get methods must not have parameters."]
[n]
[validateNodeType, (, Token, ., SETTER_DEF, ,, n, )]
[Token, ., SETTER_DEF]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateObjectLiteralKeyName, (, n, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[validateFunctionExpression, (, function, )]
[function]
[!, function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, )]
[function, ., getFirstChild, (, ), ., getString, (, ), ., isEmpty, (, )]
[function, ., getFirstChild, (, ), ., getString, (, )]
[function, ., getFirstChild, (, )]
[function]
[violation, (, "Expected unnamed function expression.", ,, n, )]
["Expected unnamed function expression."]
[n]
[function, ., getChildAtIndex, (, 1, )]
[function]
[1]
[!, functionParams, ., hasOneChild, (, )]
[functionParams, ., hasOneChild, (, )]
[functionParams]
[violation, (, "set methods must have exactly one parameter.", ,, n, )]
["set methods must have exactly one parameter."]
[n]
[validateNodeType, (, Token, ., STRING_KEY, ,, n, )]
[Token, ., STRING_KEY]
[Token]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateObjectLiteralKeyName, (, n, )]
[n]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[n, ., isQuotedString, (, )]
[n]
[n, ., getString, (, )]
[n]
[violation, (, "getString failed for", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["getString failed for", +, Token, ., name, (, n, ., getType, (, ), )]
["getString failed for"]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[validateNonEmptyString, (, n, )]
[n]
[validateChildCount, (, n, ,, 1, )]
[n]
[1]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateChildCount, (, n, ,, 2, )]
[n]
[2]
[validateExpression, (, n, ., getFirstChild, (, ), )]
[n, ., getFirstChild, (, )]
[n]
[validateExpression, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[validateChildCount, (, n, ,, 3, )]
[n]
[3]
[n, ., getFirstChild, (, )]
[n]
[validateExpression, (, first, )]
[first]
[validateExpression, (, first, ., getNext, (, ), )]
[first, ., getNext, (, )]
[first]
[validateExpression, (, n, ., getLastChild, (, ), )]
[n, ., getLastChild, (, )]
[n]
[violationHandler, ., handleViolation, (, message, ,, n, )]
[violationHandler]
[message]
[n]
[n, ., getType, (, ), !=, type]
[n, ., getType, (, )]
[n]
[type]
[violation, (, "Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), ), ,, n, )]
["Expected ", +, Token, ., name, (, type, ), +, " but was ", +, Token, ., name, (, n, ., getType, (, ), )]
["Expected ", +, Token, ., name, (, type, ), +, " but was "]
["Expected ", +, Token, ., name, (, type, )]
["Expected "]
[Token, ., name, (, type, )]
[Token]
[type]
[" but was "]
[Token, ., name, (, n, ., getType, (, ), )]
[Token]
[n, ., getType, (, )]
[n]
[n]
[false]
[i, ==, 0]
[i]
[0]
[valid]
[!, n, ., hasChildren, (, )]
[n, ., hasChildren, (, )]
[n]
[i, ==, 1]
[i]
[1]
[valid]
[n, ., hasOneChild, (, )]
[n]
[valid]
[(, n, ., getChildCount, (, ), ==, i, )]
[n, ., getChildCount, (, ), ==, i]
[n, ., getChildCount, (, )]
[n]
[i]
[!, valid]
[valid]
[violation, (, "Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, )]
["Expected ", +, i, +, " children, but was ", +, n, ., getChildCount, (, )]
["Expected ", +, i, +, " children, but was "]
["Expected ", +, i]
["Expected "]
[i]
[" children, but was "]
[n, ., getChildCount, (, )]
[n]
[n]
[false]
[i, ==, 1]
[i]
[1]
[valid]
[n, ., hasChildren, (, )]
[n]
[i, ==, 2]
[i]
[2]
[valid]
[n, ., hasMoreThanOneChild, (, )]
[n]
[valid]
[n, ., getChildCount, (, ), >=, i]
[n, ., getChildCount, (, )]
[n]
[i]
[!, valid]
[valid]
[violation, (, "Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, )]
["Expected at least ", +, i, +, " children, but was ", +, n, ., getChildCount, (, )]
["Expected at least ", +, i, +, " children, but was "]
["Expected at least ", +, i]
["Expected at least "]
[i]
[" children, but was "]
[n, ., getChildCount, (, )]
[n]
[n]
[false]
[i, ==, 1]
[i]
[1]
[valid]
[!, n, ., hasMoreThanOneChild, (, )]
[n, ., hasMoreThanOneChild, (, )]
[n]
[valid]
[n, ., getChildCount, (, ), <=, i]
[n, ., getChildCount, (, )]
[n]
[i]
[!, valid]
[valid]
[violation, (, "Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (, ), ,, n, )]
["Expected no more than ", +, i, +, " children, but was ", +, n, ., getChildCount, (, )]
["Expected no more than ", +, i, +, " children, but was "]
["Expected no more than ", +, i]
["Expected no more than "]
[i]
[" children, but was "]
[n, ., getChildCount, (, )]
[n]
[n]
