[cfg]
[new, MustDefJoin, (, )]
[this, ., jsScope]
[this]
[jsScope]
[this, ., compiler]
[this]
[compiler]
[this, ., escaped]
[this]
[Sets, ., newHashSet, (, )]
[Sets]
[computeEscaped, (, jsScope, ,, escaped, ,, compiler, )]
[jsScope]
[escaped]
[compiler]
[Sets, ., newHashSet, (, )]
[Sets]
[false]
[this, ., node]
[this]
[node]
[!, (, other, instanceof, Definition, )]
[(, other, instanceof, Definition, )]
[other, instanceof, Definition]
[other]
[false]
[(, Definition, ), other]
[other]
[otherDef, ., node, ==, node]
[otherDef, ., node]
[otherDef]
[node]
[reachingDef]
[Maps, ., newHashMap, (, )]
[Maps]
[vars, ., hasNext, (, )]
[vars]
[vars, ., next, (, )]
[vars]
[reachingDef, ., put, (, var, ,, new, Definition, (, var, ., scope, ., getRootNode, (, ), ), )]
[reachingDef]
[var]
[new, Definition, (, var, ., scope, ., getRootNode, (, ), )]
[var, ., scope, ., getRootNode, (, )]
[var, ., scope]
[var]
[reachingDef]
[Maps, ., newHashMap, (, other, ., reachingDef, )]
[Maps]
[other, ., reachingDef]
[other]
[(, other, instanceof, MustDef, ), &&, (, (, MustDef, ), other, ), ., reachingDef, ., equals, (, this, ., reachingDef, )]
[(, other, instanceof, MustDef, )]
[other, instanceof, MustDef]
[other]
[(, (, MustDef, ), other, ), ., reachingDef, ., equals, (, this, ., reachingDef, )]
[(, (, MustDef, ), other, ), ., reachingDef]
[(, (, MustDef, ), other, )]
[(, MustDef, ), other]
[other]
[this, ., reachingDef]
[this]
[new, MustDef, (, )]
[result, ., reachingDef]
[result]
[a, ., reachingDef, ., entrySet, (, )]
[a, ., reachingDef]
[a]
[varEntry, ., getKey, (, )]
[varEntry]
[varEntry, ., getValue, (, )]
[varEntry]
[aDef, ==, null]
[aDef]
[null]
[resultMap, ., put, (, var, ,, null, )]
[resultMap]
[var]
[null]
[aDef, ., node]
[aDef]
[b, ., reachingDef, ., containsKey, (, var, )]
[b, ., reachingDef]
[b]
[var]
[b, ., reachingDef, ., get, (, var, )]
[b, ., reachingDef]
[b]
[var]
[aDef, ., equals, (, bDef, )]
[aDef]
[bDef]
[resultMap, ., put, (, var, ,, aDef, )]
[resultMap]
[var]
[aDef]
[resultMap, ., put, (, var, ,, null, )]
[resultMap]
[var]
[null]
[resultMap, ., put, (, var, ,, aDef, )]
[resultMap]
[var]
[aDef]
[b, ., reachingDef, ., entrySet, (, )]
[b, ., reachingDef]
[b]
[entry, ., getKey, (, )]
[entry]
[!, a, ., reachingDef, ., containsKey, (, var, )]
[a, ., reachingDef, ., containsKey, (, var, )]
[a, ., reachingDef]
[a]
[var]
[resultMap, ., put, (, var, ,, entry, ., getValue, (, ), )]
[resultMap]
[var]
[entry, ., getValue, (, )]
[entry]
[result]
[true]
[new, MustDef, (, jsScope, ., getVars, (, ), )]
[jsScope, ., getVars, (, )]
[jsScope]
[new, MustDef, (, )]
[new, MustDef, (, input, )]
[input]
[computeMustDef, (, n, ,, n, ,, output, ,, false, )]
[n]
[n]
[output]
[false]
[output]
[n, ., getType, (, )]
[n]
[Token, ., BLOCK]
[Token]
[Token, ., FUNCTION]
[Token]
[Token, ., WHILE]
[Token]
[Token, ., DO]
[Token]
[Token, ., IF]
[Token]
[computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, )]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[cfgNode]
[output]
[conditional]
[Token, ., FOR]
[Token]
[!, NodeUtil, ., isForIn, (, n, )]
[NodeUtil, ., isForIn, (, n, )]
[NodeUtil]
[n]
[computeMustDef, (, NodeUtil, ., getConditionExpression, (, n, ), ,, cfgNode, ,, output, ,, conditional, )]
[NodeUtil, ., getConditionExpression, (, n, )]
[NodeUtil]
[n]
[cfgNode]
[output]
[conditional]
[n, ., getFirstChild, (, )]
[n]
[lhs, ., getNext, (, )]
[lhs]
[lhs, ., isVar, (, )]
[lhs]
[lhs]
[lhs, ., getLastChild, (, )]
[lhs]
[lhs, ., isName, (, )]
[lhs]
[addToDefIfLocal, (, lhs, ., getString, (, ), ,, cfgNode, ,, rhs, ,, output, )]
[lhs, ., getString, (, )]
[lhs]
[cfgNode]
[rhs]
[output]
[Token, ., AND]
[Token]
[Token, ., OR]
[Token]
[computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[conditional]
[computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getLastChild, (, )]
[n]
[cfgNode]
[output]
[true]
[Token, ., HOOK]
[Token]
[computeMustDef, (, n, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[conditional]
[computeMustDef, (, n, ., getFirstChild, (, ), ., getNext, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getFirstChild, (, ), ., getNext, (, )]
[n, ., getFirstChild, (, )]
[n]
[cfgNode]
[output]
[true]
[computeMustDef, (, n, ., getLastChild, (, ), ,, cfgNode, ,, output, ,, true, )]
[n, ., getLastChild, (, )]
[n]
[cfgNode]
[output]
[true]
[Token, ., VAR]
[Token]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[c, ., hasChildren, (, )]
[c]
[computeMustDef, (, c, ., getFirstChild, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[c, ., getFirstChild, (, )]
[c]
[cfgNode]
[output]
[conditional]
[addToDefIfLocal, (, c, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, c, ., getFirstChild, (, ), ,, output, )]
[c, ., getString, (, )]
[c]
[conditional, ?, null, :, cfgNode]
[conditional]
[null]
[cfgNode]
[c, ., getFirstChild, (, )]
[c]
[output]
[NodeUtil, ., isAssignmentOp, (, n, )]
[NodeUtil]
[n]
[n, ., getFirstChild, (, ), ., isName, (, )]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[computeMustDef, (, name, ., getNext, (, ), ,, cfgNode, ,, output, ,, conditional, )]
[name, ., getNext, (, )]
[name]
[cfgNode]
[output]
[conditional]
[addToDefIfLocal, (, name, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, n, ., getLastChild, (, ), ,, output, )]
[name, ., getString, (, )]
[name]
[conditional, ?, null, :, cfgNode]
[conditional]
[null]
[cfgNode]
[n, ., getLastChild, (, )]
[n]
[output]
[NodeUtil, ., isGet, (, n, ., getFirstChild, (, ), )]
[NodeUtil]
[n, ., getFirstChild, (, )]
[n]
[n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[n, ., getFirstChild, (, )]
[n]
[obj, ., isName, (, ), &&, "arguments", ., equals, (, obj, ., getString, (, ), )]
[obj, ., isName, (, )]
[obj]
["arguments", ., equals, (, obj, ., getString, (, ), )]
["arguments"]
[obj, ., getString, (, )]
[obj]
[escapeParameters, (, output, )]
[output]
[n, ., isName, (, ), &&, "arguments", ., equals, (, n, ., getString, (, ), )]
[n, ., isName, (, )]
[n]
["arguments", ., equals, (, n, ., getString, (, ), )]
["arguments"]
[n, ., getString, (, )]
[n]
[escapeParameters, (, output, )]
[output]
[n, ., isDec, (, ), ||, n, ., isInc, (, )]
[n, ., isDec, (, )]
[n]
[n, ., isInc, (, )]
[n]
[n, ., getFirstChild, (, )]
[n]
[target, ., isName, (, )]
[target]
[addToDefIfLocal, (, target, ., getString, (, ), ,, conditional, ?, null, :, cfgNode, ,, null, ,, output, )]
[target, ., getString, (, )]
[target]
[conditional, ?, null, :, cfgNode]
[conditional]
[null]
[cfgNode]
[null]
[output]
[n, ., getFirstChild, (, )]
[n]
[c, !=, null]
[c]
[null]
[c]
[c, ., getNext, (, )]
[c]
[computeMustDef, (, c, ,, cfgNode, ,, output, ,, conditional, )]
[c]
[cfgNode]
[output]
[conditional]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
[var, ==, null, ||, var, ., scope, !=, jsScope]
[var, ==, null]
[var]
[null]
[var, ., scope, !=, jsScope]
[var, ., scope]
[var]
[jsScope]
[def, ., reachingDef, ., keySet, (, )]
[def, ., reachingDef]
[def]
[def, ., reachingDef, ., get, (, other, )]
[def, ., reachingDef]
[def]
[other]
[otherDef, ==, null]
[otherDef]
[null]
[otherDef, ., depends, ., contains, (, var, )]
[otherDef, ., depends]
[otherDef]
[var]
[def, ., reachingDef, ., put, (, other, ,, null, )]
[def, ., reachingDef]
[def]
[other]
[null]
[!, escaped, ., contains, (, var, )]
[escaped, ., contains, (, var, )]
[escaped]
[var]
[node, ==, null]
[node]
[null]
[def, ., reachingDef, ., put, (, var, ,, null, )]
[def, ., reachingDef]
[def]
[var]
[null]
[new, Definition, (, node, )]
[node]
[rValue, !=, null]
[rValue]
[null]
[computeDependence, (, definition, ,, rValue, )]
[definition]
[rValue]
[def, ., reachingDef, ., put, (, var, ,, definition, )]
[def, ., reachingDef]
[def]
[var]
[definition]
[jsScope, ., getVars, (, )]
[jsScope]
[i, ., hasNext, (, )]
[i]
[i, ., next, (, )]
[i]
[isParameter, (, v, )]
[v]
[output, ., reachingDef, ., put, (, v, ,, null, )]
[output, ., reachingDef]
[output]
[v]
[null]
[output, ., reachingDef, ., entrySet, (, )]
[output, ., reachingDef]
[output]
[pair, ., getValue, (, )]
[pair]
[value, ==, null]
[value]
[null]
[value, ., depends]
[value]
[isParameter, (, dep, )]
[dep]
[output, ., reachingDef, ., put, (, pair, ., getKey, (, ), ,, null, )]
[output, ., reachingDef]
[output]
[pair, ., getKey, (, )]
[pair]
[null]
[v, ., getParentNode, (, ), ., isParamList, (, )]
[v, ., getParentNode, (, )]
[v]
[NodeTraversal, ., traverse, (, compiler, ,, rValue, ,, new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;, }, }, }, }, )]
[NodeTraversal]
[compiler]
[rValue]
[new, AbstractCfgNodeTraversalCallback, (, ), {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isName, (, ), ), {, Var, dep, =, jsScope, ., getVar, (, n, ., getString, (, ), ), ;, if, (, dep, ==, null, ), {, def, ., unknownDependencies, =, true, ;, }, else, {, def, ., depends, ., add, (, dep, ), ;, }, }, }, }]
[n, ., isName, (, )]
[n]
[jsScope, ., getVar, (, n, ., getString, (, ), )]
[jsScope]
[n, ., getString, (, )]
[n]
[dep, ==, null]
[dep]
[null]
[def, ., unknownDependencies]
[def]
[true]
[def, ., depends, ., add, (, dep, )]
[def, ., depends]
[def]
[dep]
[Preconditions, ., checkArgument, (, getCfg, (, ), ., hasNode, (, useNode, ), )]
[Preconditions]
[getCfg, (, ), ., hasNode, (, useNode, )]
[getCfg, (, )]
[useNode]
[getCfg, (, ), ., getNode, (, useNode, )]
[getCfg, (, )]
[useNode]
[n, ., getAnnotation, (, )]
[n]
[state, ., getIn, (, ), ., reachingDef, ., get, (, jsScope, ., getVar, (, name, ), )]
[state, ., getIn, (, ), ., reachingDef]
[state, ., getIn, (, )]
[state]
[jsScope, ., getVar, (, name, )]
[jsScope]
[name]
[getDef, (, name, ,, useNode, )]
[name]
[useNode]
[def, ==, null, ?, null, :, def, ., node]
[def, ==, null]
[def]
[null]
[null]
[def, ., node]
[def]
[def, ., unknownDependencies]
[def]
[true]
[def, ., depends]
[def]
[s, ., scope, !=, jsScope]
[s, ., scope]
[s]
[jsScope]
[true]
[false]
