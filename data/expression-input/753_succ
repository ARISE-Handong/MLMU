[;, private, GradientPaintTransformType, type, ;, public, StandardGradientPaintTransformer, (, ), {, this, (, GradientPaintTransformType, ., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer]
[;, private, GradientPaintTransformType, type, ;, public, StandardGradientPaintTransformer, (, ), {, this, (, GradientPaintTransformType, ., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer]
[), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException]
[., VERTICAL, ), ;, }, public, StandardGradientPaintTransformer, (, GradientPaintTransformType, type, ), {, if, (, type, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =, type, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'type' argument.", ), ;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType]
[;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return, this, ., type, ;]
[), ;, }, this, ., type, =, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return, this, ., type]
[=, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return, this, ., type, ;, }, public, GradientPaint, transform, (]
[., type, =, type, ;, }, public, GradientPaintTransformType, getType, (, ), {, return, this, ., type, ;, }, public, GradientPaint]
[;, }, public, GradientPaintTransformType, getType, (, ), {, return, this, ., type, ;, }, public, GradientPaint, transform, (, GradientPaint, paint]
[;, }, public, GradientPaint, transform, (, GradientPaint, paint, ,, Shape, target, ), {, GradientPaint, result, =, paint, ;, Rectangle2D, bounds]
[., type, ;, }, public, GradientPaint, transform, (, GradientPaint, paint, ,, Shape, target, ), {, GradientPaint, result, =, paint, ;]
[;, Rectangle2D, bounds, =, target, ., getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (]
[., getBounds2D, (, ), ;, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result]
[), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX]
[., type, ., equals, (, GradientPaintTransformType, ., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[., VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (]
[=, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (]
[;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new]
[,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,]
[,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMaxY, (, ), ,, paint]
[., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMaxY]
[,, (, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if]
[,, (, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getMaxY, (, ), ,, paint, ., getColor2, (, ), )]
[,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[., getMaxY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, .]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =]
[., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, )]
[), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, ), bounds]
[., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX]
[., type, ., equals, (, GradientPaintTransformType, ., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, )]
[., HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (]
[=, new, GradientPaint, (, (, float, ), bounds, ., getMinX, (, ), ,, (, float, ), bounds, ., getCenterY, (]
[;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[., getMinX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds]
[., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,]
[,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint]
[., getColor1, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if]
[., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), )]
[,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[., getCenterY, (, ), ,, paint, ., getColor2, (, ), ), ;, }, else, if, (, this, ., type, .]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =]
[., getColor2, (, ), ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, )]
[), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX]
[., type, ., equals, (, GradientPaintTransformType, ., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[., CENTER_HORIZONTAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (]
[=, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (]
[;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,]
[,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds]
[,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds]
[., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,]
[,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint]
[., getColor2, (, ), ,, (, float, ), bounds, ., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }]
[., getMaxX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,]
[,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, ., type, ., equals, (]
[,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, ., type, ., equals, (]
[., getCenterY, (, ), ,, paint, ., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, .]
[,, true, ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {]
[., getColor1, (, ), ,, true, ), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, .]
[), ;, }, else, if, (, this, ., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =]
[), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX]
[., type, ., equals, (, GradientPaintTransformType, ., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds]
[), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, )]
[., CENTER_VERTICAL, ), ), {, result, =, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (]
[=, new, GradientPaint, (, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (]
[;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getMinY, (, ), ,, paint, ., getColor1, (, ), ,]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds]
[., getMinY, (, ), ,, paint, ., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,]
[,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint]
[., getColor1, (, ), ,, (, float, ), bounds, ., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, true, ), ;, }]
[,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, true, ), ;, }]
[., getCenterX, (, ), ,, (, float, ), bounds, ., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,]
[,, paint, ., getColor2, (, ), ,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object]
[,, paint, ., getColor2, (, ), ,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object]
[., getCenterY, (, ), ,, paint, ., getColor2, (, ), ,, true, ), ;, }, return, result, ;, }, public]
[,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[., getColor2, (, ), ,, true, ), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, )]
[), ;, }, return, result, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (]
[), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=]
[), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=]
[), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type]
[instanceof, StandardGradientPaintTransformer, ), ), {, return, false, ;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this]
[;, }, StandardGradientPaintTransformer, that, =, (, StandardGradientPaintTransformer, ), obj, ;, if, (, this, ., type, !=, that, ., type, )]
[;, if, (, this, ., type, !=, that, ., type, ), {, return, false, ;, }, return, true, ;, }]
[;, if, (, this, ., type, !=, that, ., type, ), {, return, false, ;, }, return, true, ;, }]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super]
[!=, that, ., type, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws]
[., type, !=, that, ., type, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (]
[), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super]
[., type, ), {, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, )]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, public, int]
[;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=, null, ?, this, ., type, .]
[., clone, (, ), ;, }, public, int, hashCode, (, ), {, return, (, this, ., type, !=, null, ?]
[;, }, }]
[), ;, }, }]
[?, this, ., type, ., hashCode, (, ), :, 0, ), ;, }, }]
[!=, null, ?, this, ., type, ., hashCode, (, ), :, 0, ), ;, }, }]
[., type, !=, null, ?, this, ., type, ., hashCode, (, ), :, 0, ), ;, }, }]
[?, this, ., type, ., hashCode, (, ), :, 0, ), ;, }, }]
[:, 0, ), ;, }, }]
[., hashCode, (, ), :, 0, ), ;, }, }]
[., type, ., hashCode, (, ), :, 0, ), ;, }, }]
[), ;, }, }]
