[=, amplitude, ;, this, ., omega, =, omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (]
[., amplitude, =, amplitude, ;, this, ., omega, =, omega, ;, this, ., phase, =, phase, ;, }, public, double]
[;, this, ., omega, =, omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x]
[=, omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value]
[., omega, =, omega, ;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {]
[;, this, ., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega]
[=, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *, x, +, phase]
[., phase, =, phase, ;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *, x]
[;, }, public, double, value, (, double, x, ), {, return, value, (, omega, *, x, +, phase, ,, amplitude]
[;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (]
[,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, )]
[+, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[*, x, +, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, .]
[+, phase, ,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[,, amplitude, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, )]
[), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative]
[;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, )]
[., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double]
[), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x]
[;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,, param, []
[), ;, return, HarmonicOscillator, ., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,, param]
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[., value, (, x, *, param, [, 1, ], +, param, [, 2, ], ,, param, [, 0, ], )]
[,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param]
[+, param, [, 2, ], ,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double]
[*, param, [, 1, ], +, param, [, 2, ], ,, param, [, 0, ], ), ;, }, public, double]
[+, param, [, 2, ], ,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double]
[[, 1, ], +, param, [, 2, ], ,, param, [, 0, ], ), ;, }, public, double, [, ]]
[], +, param, [, 2, ], ,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (]
[,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param]
[[, 2, ], ,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,]
[], ,, param, [, 0, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ...]
[), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[[, 0, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws]
[], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,]
[;, final, double, amplitude, =, param, [, 0, ], ;, final, double, omega, =, param, [, 1, ], ;, final]
[), ;, final, double, amplitude, =, param, [, 0, ], ;, final, double, omega, =, param, [, 1, ], ;]
[;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final]
[[, 0, ], ;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2]
[], ;, final, double, omega, =, param, [, 1, ], ;, final, double, phase, =, param, [, 2, ], ;]
[;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;]
[[, 1, ], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x]
[], ;, final, double, phase, =, param, [, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase]
[;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase]
[[, 2, ], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =, HarmonicOscillator, .]
[], ;, final, double, xTimesOmegaPlusPhase, =, omega, *, x, +, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (]
[;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude]
[+, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =]
[*, x, +, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double]
[+, phase, ;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =]
[;, final, double, a, =, HarmonicOscillator, ., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude]
[;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p]
[., value, (, xTimesOmegaPlusPhase, ,, 1, ), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase]
[,, 1, ), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double]
[), ;, final, double, p, =, -, amplitude, *, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =]
[;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {, a, ,, w, ,, p]
[*, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, []
[*, FastMath, ., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, []
[;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {, a, ,, w, ,, p]
[., sin, (, xTimesOmegaPlusPhase, ), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {]
[), ;, final, double, w, =, p, *, x, ;, return, new, double, [, ], {, a, ,, w, ,]
[;, return, new, double, [, ], {, a, ,, w, ,, p, }, ;, }, private, void, validateParameters, (, double]
[*, x, ;, return, new, double, [, ], {, a, ,, w, ,, p, }, ;, }, private, void, validateParameters]
[;, return, new, double, [, ], {, a, ,, w, ,, p, }, ;, }, private, void, validateParameters, (, double]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[,, w, ,, p, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[,, p, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if]
[}, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new]
[;, }, if, (, param, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, }, }, private, static, double, value]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, }, }, private, static]
[., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, }, }]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, }, }, private, static, double, value]
[;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return, amplitude, *, FastMath]
[,, 3, ), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return]
[., length, ,, 3, ), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, )]
[), ;, }, }, }, private, static, double, value, (, double, xTimesOmegaPlusPhase, ,, double, amplitude, ), {, return, amplitude, *]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, x, =, t, ., getValue]
[*, FastMath, ., cos, (, xTimesOmegaPlusPhase, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, x, =, t, ., getValue]
[., cos, (, xTimesOmegaPlusPhase, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, x, =, t, .]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double]
[., getValue, (, ), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1]
[;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, .]
[], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath]
[+, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude]
[., getOrder, (, ), +, 1, ], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, []
[], ;, final, double, alpha, =, omega, *, x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath]
[;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length]
[+, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f]
[*, x, +, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if]
[+, phase, ;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f]
[;, f, [, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length]
[=, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f]
[[, 0, ], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1]
[], =, amplitude, *, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {]
[;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *]
[*, FastMath, ., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1]
[;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *]
[., cos, (, alpha, ), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[), ;, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega]
[), {, f, [, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final]
[>, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, )]
[., length, >, 1, ), {, f, [, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (]
[), {, f, [, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final]
[=, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *]
[[, 1, ], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =]
[], =, -, amplitude, *, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega]
[;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <, f]
[*, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int]
[*, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for]
[*, omega, *, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for]
[*, FastMath, ., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int]
[;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <, f]
[., sin, (, alpha, ), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =]
[), ;, final, double, mo2, =, -, omega, *, omega, ;, for, (, int, i, =, 2, ;, i, <]
[;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[*, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[*, omega, ;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, []
[;, ++, i, ), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, [, i, -]
[;, ++, i, ), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }]
[., length, ;, ++, i, ), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ]]
[), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t]
[), {, f, [, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t]
[=, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t, ., compose, (, f, ), ;]
[[, i, ], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t, ., compose, (]
[], =, mo2, *, f, [, i, -, 2, ], ;, }, }, return, t, ., compose, (, f, )]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*, f, [, i, -, 2, ], ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[[, i, -, 2, ], ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[], ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[-, 2, ], ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[], ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }]
[., compose, (, f, ), ;, }, }]
[), ;, }, }]
