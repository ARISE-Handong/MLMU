[), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (]
[&&, !, subtree, ., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (]
[&&, !, subtree, ., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (]
[., isScript, (, ), &&, !, subtree, ., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =]
[), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (]
[), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (]
[., isBlock, (, ), ), {, return, subtree, ;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =]
[;, }, boolean, codeChanged, =, false, ;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=]
[;, for, (, Node, child, =, subtree, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, )]
[;, child, =, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !]
[=, child, ., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !, NodeUtil, .]
[), {, if, (, !, child, ., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {]
[., getNext, (, ), ), {, if, (, !, child, ., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (]
[), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;]
[&&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, .]
[&&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, .]
[., isVar, (, ), &&, !, NodeUtil, ., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !]
[), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;]
[), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue, ;]
[., isExprAssign, (, child, ), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, )]
[), ), {, continue, ;, }, if, (, !, isPropertyAssignmentToName, (, child, ., getNext, (, ), ), ), {, continue]
[), {, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName]
[), {, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName]
[), ), {, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =]
[., getNext, (, ), ), ), {, continue, ;, }, Preconditions, ., checkState, (, child, ., hasOneChild, (, ), )]
[;, Node, name, =, getName, (, child, ), ;, if, (, !, name, ., isName, (, ), ), {, continue]
[., checkState, (, child, ., hasOneChild, (, ), ), ;, Node, name, =, getName, (, child, ), ;, if, (]
[), ;, Node, name, =, getName, (, child, ), ;, if, (, !, name, ., isName, (, ), ), {]
[., hasOneChild, (, ), ), ;, Node, name, =, getName, (, child, ), ;, if, (, !, name, ., isName]
[;, if, (, !, name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child]
[), ;, if, (, !, name, ., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (]
[), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==, null, ||, !]
[), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value, ==, null, ||, !]
[., isName, (, ), ), {, continue, ;, }, Node, value, =, getValue, (, child, ), ;, if, (, value]
[;, if, (, value, ==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;]
[), ;, if, (, value, ==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate]
[), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=]
[||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child]
[==, null, ||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate]
[||, !, isInterestingValue, (, value, ), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child]
[), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=]
[), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), ), !=]
[), ), {, continue, ;, }, Node, propertyCandidate, ;, while, (, (, propertyCandidate, =, child, ., getNext, (, ), )]
[), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, ), ), {, break]
[!=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, ), )]
[=, child, ., getNext, (, ), ), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, .]
[), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, )]
[., getNext, (, ), ), !=, null, ), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (]
[), {, if, (, !, collectProperty, (, propertyCandidate, ,, name, ., getString, (, ), ,, value, ), ), {, break]
[), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, ), ;]
[), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, ), ;]
[,, name, ., getString, (, ), ,, value, ), ), {, break, ;, }, codeChanged, =, true, ;, }, }]
[,, value, ), ), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange]
[., getString, (, ), ,, value, ), ), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (]
[), ), {, break, ;, }, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, )]
[=, true, ;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, ), ;, }, return, subtree, ;, }, private]
[;, }, }, if, (, codeChanged, ), {, reportCodeChange, (, ), ;, }, return, subtree, ;, }, private, Node, getName]
[), {, reportCodeChange, (, ), ;, }, return, subtree, ;, }, private, Node, getName, (, Node, n, ), {, if]
[;, }, return, subtree, ;, }, private, Node, getName, (, Node, n, ), {, if, (, n, ., isVar, (]
[;, }, private, Node, getName, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[), {, return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), )]
[., isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign]
[;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), .]
[., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, .]
[), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;]
[., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, throw]
[), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, throw, new, IllegalStateException, (, )]
[;, }, throw, new, IllegalStateException, (, ), ;, }, private, Node, getValue, (, Node, n, ), {, if, (, n]
[., getFirstChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, private, Node, getValue, (, Node, n, )]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, private, Node, getValue]
[;, }, private, Node, getValue, (, Node, n, ), {, if, (, n, ., isVar, (, ), ), {, return]
[), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign]
[., isVar, (, ), ), {, return, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if]
[;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), .]
[., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), ), {, return, n, .]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isExprAssign, (, n, ), )]
[), {, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;]
[., isExprAssign, (, n, ), ), {, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, throw]
[), ), {, return, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, )]
[;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {, return, n, ., isObjectLit]
[., getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (, Node, n, ), {]
[., getFirstChild, (, ), ., getLastChild, (, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, boolean, isInterestingValue, (]
[;, }, boolean, isInterestingValue, (, Node, n, ), {, return, n, ., isObjectLit, (, ), ||, n, ., isArrayLit, (]
[;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;]
[||, n, ., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==]
[., isObjectLit, (, ), ||, n, ., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {]
[;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, ), {, return, false, ;]
[., isArrayLit, (, ), ;, }, private, boolean, isPropertyAssignmentToName, (, Node, propertyCandidate, ), {, if, (, propertyCandidate, ==, null, )]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;]
[==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;]
[;, }, if, (, !, NodeUtil, ., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =]
[), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, .]
[), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, .]
[., isExprAssign, (, propertyCandidate, ), ), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;]
[), ), {, return, false, ;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr]
[;, }, Node, expr, =, propertyCandidate, ., getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;]
[;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, lhs, ), )]
[., getFirstChild, (, ), ;, Node, lhs, =, expr, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet]
[;, if, (, !, NodeUtil, ., isGet, (, lhs, ), ), {, return, false, ;, }, Node, obj, =, lhs]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, lhs, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !, obj, .]
[), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !, obj, .]
[., isGet, (, lhs, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;]
[), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !, obj]
[;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, if, (, !, obj, ., isName, (, ), )]
[;, if, (, !, obj, ., isName, (, ), ), {, return, false, ;, }, return, true, ;, }, private]
[., getFirstChild, (, ), ;, if, (, !, obj, ., isName, (, ), ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,]
[), {, return, false, ;, }, return, true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,]
[., isName, (, ), ), {, return, false, ;, }, return, true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate]
[;, }, return, true, ;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,, Node, value, ), {]
[;, }, private, boolean, collectProperty, (, Node, propertyCandidate, ,, String, name, ,, Node, value, ), {, if, (, !, isPropertyAssignmentToName]
[), {, return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if]
[), {, return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if]
[), ), {, return, false, ;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[;, }, Node, lhs, =, propertyCandidate, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !, name, .]
[;, if, (, !, name, ., equals, (, lhs, ., getFirstChild, (, ), ., getString, (, ), ), ), {]
[., getFirstChild, (, ), ;, if, (, !, name, ., equals, (, lhs, ., getFirstChild, (, ), ., getString, (]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, if, (, !, name, ., equals, (, lhs, ., getFirstChild, (]
[), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs]
[), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs]
[., equals, (, lhs, ., getFirstChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Node]
[), ), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (]
[., getString, (, ), ), ), {, return, false, ;, }, Node, rhs, =, lhs, ., getNext, (, ), ;]
[., getFirstChild, (, ), ., getString, (, ), ), ), {, return, false, ;, }, Node, rhs, =, lhs, .]
[;, }, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, .]
[;, if, (, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }]
[., getNext, (, ), ;, if, (, mayHaveSideEffects, (, rhs, ), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (]
[||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (]
[), ||, NodeUtil, ., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue]
[), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (]
[., canBeSideEffected, (, rhs, ), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,]
[), ), {, return, false, ;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference]
[;, }, if, (, !, NodeUtil, ., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, )]
[), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :]
[&&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (, )]
[&&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (, )]
[., isLiteralValue, (, rhs, ,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }]
[,, true, ), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, .]
[), &&, mightContainForwardReference, (, rhs, ,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (]
[), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :]
[,, name, ), ), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token]
[), ), {, return, false, ;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT]
[;, }, switch, (, value, ., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty]
[), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return, false]
[., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, )]
[:, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case, Token]
[., ARRAYLIT, :, if, (, !, collectArrayProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;]
[), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,]
[), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,]
[,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty]
[), ), {, return, false, ;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,, propertyCandidate, ), ), {]
[:, if, (, !, collectObjectProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, default, :]
[., OBJECTLIT, :, if, (, !, collectObjectProperty, (, value, ,, propertyCandidate, ), ), {, return, false, ;, }, break, ;]
[), {, return, false, ;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, return, true, ;]
[), {, return, false, ;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, return, true, ;]
[,, propertyCandidate, ), ), {, return, false, ;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }]
[), ), {, return, false, ;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, return, true]
[;, }, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, return, true, ;, }, private, boolean, collectArrayProperty]
[;, }, return, true, ;, }, private, boolean, collectArrayProperty, (, Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =]
[;, }, private, boolean, collectArrayProperty, (, Node, arrayLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (]
[;, final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs]
[., getFirstChild, (, ), ;, final, int, sizeOfArrayAtStart, =, arrayLiteral, ., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -]
[;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =]
[., getChildCount, (, ), ;, int, maxIndexAssigned, =, sizeOfArrayAtStart, -, 1, ;, Node, lhs, =, assignment, ., getFirstChild, (, )]
[;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if]
[-, 1, ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, )]
[;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, !, lhs, ., isGetElem, (, ), ), {]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, if, (, !, lhs, ., isGetElem]
[;, if, (, !, lhs, ., isGetElem, (, ), ), {, return, false, ;, }, Node, obj, =, lhs, .]
[., getNext, (, ), ;, if, (, !, lhs, ., isGetElem, (, ), ), {, return, false, ;, }, Node]
[), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, .]
[), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, .]
[., isGetElem, (, ), ), {, return, false, ;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node]
[;, }, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;]
[;, Node, property, =, obj, ., getNext, (, ), ;, if, (, !, property, ., isNumber, (, ), ), {]
[., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, !, property, ., isNumber]
[;, if, (, !, property, ., isNumber, (, ), ), {, return, false, ;, }, double, dindex, =, property, .]
[., getNext, (, ), ;, if, (, !, property, ., isNumber, (, ), ), {, return, false, ;, }, double]
[), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex]
[), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex]
[., isNumber, (, ), ), {, return, false, ;, }, double, dindex, =, property, ., getDouble, (, ), ;, if]
[;, }, double, dindex, =, property, ., getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||]
[;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL]
[., getDouble, (, ), ;, if, (, !, (, dindex, >=, 0, ), ||, Double, ., isInfinite, (, dindex, )]
[), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, )]
[||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (]
[||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =]
[||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =]
[), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index]
[>=, 0, ), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }]
[), ||, Double, ., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index]
[||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (]
[., isInfinite, (, dindex, ), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int]
[), ||, dindex, >, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if]
[), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, )]
[>, 0x7fffffffL, ), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=]
[), {, return, false, ;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, )]
[;, }, int, index, =, (, int, ), dindex, ;, if, (, dindex, !=, index, ), {, return, false, ;]
[;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, )]
[;, if, (, dindex, !=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, )]
[), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if]
[!=, index, ), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if]
[;, }, if, (, maxIndexAssigned, +, 4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned]
[), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1]
[<, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index]
[+, 4, <, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned]
[<, index, ), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index]
[), {, return, false, ;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1]
[;, }, if, (, index, >, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode]
[), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), .]
[>, maxIndexAssigned, ), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (]
[), {, while, (, maxIndexAssigned, <, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), .]
[), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (]
[<, index, -, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;]
[), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (]
[-, 1, ), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, .]
[), {, Node, emptyNode, =, IR, ., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (]
[;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (]
[., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack]
[., empty, (, ), ., srcref, (, arrayLiteral, ), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;]
[), ;, arrayLiteral, ., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent]
[;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node]
[., addChildToBack, (, emptyNode, ), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), )]
[), ;, ++, maxIndexAssigned, ;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {]
[;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral]
[;, }, arrayLiteral, ., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral]
[;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, ., isEmpty]
[., addChildToBack, (, rhs, ., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (]
[), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, .]
[., detachFromParent, (, ), ), ;, }, else, {, Node, currentValue, =, arrayLiteral, ., getChildAtIndex, (, index, ), ;, if]
[;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue]
[., getChildAtIndex, (, index, ), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }]
[), ;, if, (, !, currentValue, ., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (]
[), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }]
[), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }]
[., isEmpty, (, ), ), {, return, false, ;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (]
[;, }, arrayLiteral, ., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }, propertyCandidate, ., detachFromParent, (]
[;, }, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node]
[., replaceChild, (, currentValue, ,, rhs, ., detachFromParent, (, ), ), ;, }, propertyCandidate, ., detachFromParent, (, ), ;, return]
[,, rhs, ., detachFromParent, (, ), ), ;, }, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private]
[), ;, }, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,]
[., detachFromParent, (, ), ), ;, }, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, boolean, collectObjectProperty]
[;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate]
[., detachFromParent, (, ), ;, return, true, ;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node, propertyCandidate, ), {]
[;, }, private, boolean, collectObjectProperty, (, Node, objectLiteral, ,, Node, propertyCandidate, ), {, Node, assignment, =, propertyCandidate, ., getFirstChild, (]
[;, Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =, lhs, ., getNext, (, ), ;, Node, obj]
[., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ,, rhs, =, lhs, ., getNext, (]
[,, rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property]
[., getFirstChild, (, ), ,, rhs, =, lhs, ., getNext, (, ), ;, Node, obj, =, lhs, ., getFirstChild, (]
[;, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if]
[., getNext, (, ), ;, Node, obj, =, lhs, ., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext]
[;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !]
[., getFirstChild, (, ), ;, Node, property, =, obj, ., getNext, (, ), ;, if, (, lhs, ., isGetElem, (]
[;, if, (, lhs, ., isGetElem, (, ), &&, (, !, property, ., isString, (, ), &&, !, property, .]
[., getNext, (, ), ;, if, (, lhs, ., isGetElem, (, ), &&, (, !, property, ., isString, (, )]
[), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =]
[&&, (, !, property, ., isString, (, ), &&, !, property, ., isNumber, (, ), ), ), {, return, false]
[., isGetElem, (, ), &&, (, !, property, ., isString, (, ), &&, !, property, ., isNumber, (, ), )]
[), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =]
[), ), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName]
[&&, !, property, ., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName, ;, if, (, property]
[&&, !, property, ., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName, ;, if, (, property]
[., isString, (, ), &&, !, property, ., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName]
[), ), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName]
[), ), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName]
[., isNumber, (, ), ), ), {, return, false, ;, }, String, propertyName, ;, if, (, property, ., isNumber, (]
[;, }, String, propertyName, ;, if, (, property, ., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (]
[), {, propertyName, =, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (]
[., isNumber, (, ), ), {, propertyName, =, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {, propertyName, =]
[=, NodeUtil, ., getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }]
[;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey, (]
[., getStringValue, (, property, ), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty]
[), ;, }, else, {, propertyName, =, property, ., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey]
[=, property, ., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (]
[;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (, lhs]
[., getString, (, ), ;, }, Node, newProperty, =, IR, ., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, )]
[;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =]
[., copyInformationFrom, (, property, ), ;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, )]
[., stringKey, (, propertyName, ), ., copyInformationFrom, (, property, ), ;, if, (, lhs, ., isGetElem, (, ), ), {]
[), ., copyInformationFrom, (, property, ), ;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (]
[), ;, if, (, lhs, ., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue]
[), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, .]
[., isGetElem, (, ), ), {, newProperty, ., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (]
[;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, .]
[., setQuotedString, (, ), ;, }, Node, newValue, =, rhs, ., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue]
[;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, )]
[., detachFromParent, (, ), ;, newProperty, ., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate]
[;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, static]
[., addChildToBack, (, newValue, ), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, ), ;, return]
[), ;, objectLiteral, ., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private]
[;, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String]
[., addChildToBack, (, newProperty, ), ;, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference]
[), ;, propertyCandidate, ., detachFromParent, (, ), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,]
[;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (, node]
[., detachFromParent, (, ), ;, return, true, ;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String, varName, )]
[;, }, private, static, boolean, mightContainForwardReference, (, Node, node, ,, String, varName, ), {, if, (, node, ., isName, (]
[), {, return, varName, ., equals, (, node, ., getString, (, ), ), ;, }, for, (, Node, child, =]
[., isName, (, ), ), {, return, varName, ., equals, (, node, ., getString, (, ), ), ;, }, for]
[;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[., equals, (, node, ., getString, (, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (]
[), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getString, (, ), ), ;, }, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, )]
[;, child, =, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {]
[=, child, ., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {, return, true]
[), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {, return, true, ;, }, }, return, false, ;]
[., getNext, (, ), ), {, if, (, mightContainForwardReference, (, child, ,, varName, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[,, varName, ), ), {, return, true, ;, }, }, return, false, ;, }, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
