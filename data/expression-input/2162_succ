[;, private, static, final, long, serialVersionUID, =, 20120524L, ;, private, final, double, shape, ;, private, final, double, scale, ;, private]
[;, private, final, double, shape, ;, private, final, double, scale, ;, private, final, double, shiftedShape, ;, private, final, double, densityPrefactor1]
[,, scale, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, GammaDistribution, (, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, GammaDistribution, (, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, GammaDistribution, (, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[,, shape, ,, scale, ,, inverseCumAccuracy, ), ;, }, public, GammaDistribution, (, RandomGenerator, rng, ,, double, shape, ,, double, scale]
[,, scale, ,, inverseCumAccuracy, ), ;, }, public, GammaDistribution, (, RandomGenerator, rng, ,, double, shape, ,, double, scale, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, GammaDistribution, (, RandomGenerator, rng, ,, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, )]
[), ;, }, public, GammaDistribution, (, RandomGenerator, rng, ,, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException]
[), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, )]
[;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;]
[,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,]
[., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;]
[;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;]
[,, scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy]
[., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this]
[), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy]
[=, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape]
[., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape]
[;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma]
[=, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5]
[., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G]
[;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final]
[=, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath]
[., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux]
[;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E]
[=, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *]
[., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (]
[;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this]
[+, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, )]
[+, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, .]
[+, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, )]
[., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *]
[;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this]
[;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, )]
[/, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt]
[., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath]
[;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, )]
[), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape]
[*, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos]
[*, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, )]
[*, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos]
[., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma]
[), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape]
[=, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1]
[., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this]
[;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, )]
[/, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, .]
[*, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this]
[/, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, .]
[., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2]
[), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath]
[;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, )]
[., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (]
[), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape]
[=, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp]
[., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath]
[;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;]
[*, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, .]
[*, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G]
[/, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma]
[., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape]
[*, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G]
[*, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, .]
[., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;]
[,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =]
[), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma]
[), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma]
[;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;]
[., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -]
[), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, )]
[+, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (]
[), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, )]
[., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, .]
[=, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =]
[., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, .]
[;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;]
[-, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, .]
[+, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, .]
[-, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, .]
[., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (]
[;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;]
[., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, )]
[), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, )]
[., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -]
[=, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;, }, @, Deprecated, public]
[., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;, }, @]
[;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape, (, ), {]
[/, (, shape, -, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }]
[., log, (, Double, ., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha]
[), /, (, shape, -, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;]
[., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return]
[;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape, (, ), {]
[), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape, (, )]
[-, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape]
[), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape, (, )]
[;, }, public, double, getShape, (, ), {, return, shape, ;, }, @, Deprecated, public, double, getBeta, (, ), {]
[;, }, @, Deprecated, public, double, getBeta, (, ), {, return, scale, ;, }, public, double, getScale, (, ), {]
[;, }, public, double, getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;]
[), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY]
[<, 0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y]
[), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY]
[;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (, FastMath]
[;, if, (, (, y, <=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), )]
[/, scale, ;, if, (, (, y, <=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY]
[;, if, (, (, y, <=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), )]
[), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *]
[||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y, -]
[), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y]
[<=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =]
[), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y]
[), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *]
[), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape]
[>=, maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2]
[., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /]
[), >=, maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double]
[), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape]
[;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double]
[/, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;]
[), /, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, )]
[-, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -]
[), /, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, )]
[;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double]
[;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, .]
[*, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (]
[;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, .]
[), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma]
[-, aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape]
[., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G]
[), -, aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /]
[), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma]
[;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp]
[+, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath]
[+, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }]
[/, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, )]
[*, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /]
[*, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /]
[/, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, )]
[), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3]
[+, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp]
[., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath]
[), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3]
[+, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }]
[+, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath]
[., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1]
[;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp]
[;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,, shape]
[*, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *]
[/, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y]
[*, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *]
[;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,, shape]
[., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, .]
[), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {]
[*, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[*, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;]
[*, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, )]
[., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;, }, public]
[), *, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x]
[), *, FastMath, ., pow, (, y, ,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {]
[., pow, (, y, ,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double]
[,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, )]
[-, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, )]
[), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale]
[<=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x]
[), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale]
[=, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale, ), ;, }]
[;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale, ), ;, }, return, ret]
[=, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale, ), ;, }, return, ret, ;, }, @, Override, protected]
[;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[., regularizedGammaP, (, shape, ,, x, /, scale, ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy]
[,, x, /, scale, ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[/, scale, ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[;, }, public, double, getNumericalMean, (, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, return, shape, *, scale, *, scale, ;, }, public, double, getSupportLowerBound, (]
[*, scale, ;, }, public, double, getNumericalVariance, (, ), {, return, shape, *, scale, *, scale, ;, }, public, double]
[;, }, public, double, getNumericalVariance, (, ), {, return, shape, *, scale, *, scale, ;, }, public, double, getSupportLowerBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[*, scale, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[*, scale, *, scale, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (]
[*, scale, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {]
[;, }, @, Override, public, double, sample, (, ), {, if, (, shape, <, 1, ), {, while, (, true]
[), {, while, (, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS]
[<, 1, ), {, while, (, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final]
[), {, while, (, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS]
[), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /]
[;, final, double, bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *, u]
[., nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p]
[;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =]
[+, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1]
[;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =]
[/, FastMath, ., E, ;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {]
[;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =]
[., E, ;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double]
[;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /]
[*, u, ;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,]
[;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /]
[), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /, shape, ), ;, final, double, u2]
[<=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /, shape, ), ;, final]
[), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /, shape, ), ;, final, double, u2]
[;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (, -]
[., pow, (, p, ,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;]
[,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (]
[/, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, .]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (]
[;, if, (, u2, >, FastMath, ., exp, (, -, x, ), ), {, continue, ;, }, else, {, return]
[., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (, -, x, ), ), {, continue, ;]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =]
[>, FastMath, ., exp, (, -, x, ), ), {, continue, ;, }, else, {, return, scale, *, x, ;]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =]
[., exp, (, -, x, ), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }]
[), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x]
[), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x]
[;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (, bGS, -, p]
[*, x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (, bGS]
[;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (, bGS, -, p]
[;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x]
[*, FastMath, ., log, (, (, bGS, -, p, ), /, shape, ), ;, final, double, u2, =, random, .]
[*, FastMath, ., log, (, (, bGS, -, p, ), /, shape, ), ;, final, double, u2, =, random, .]
[;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x]
[., log, (, (, bGS, -, p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (]
[/, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, .]
[), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath]
[-, p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2]
[), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (]
[;, if, (, u2, >, FastMath, ., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }]
[., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x, ,, shape, -, 1, ), )]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d, =]
[>, FastMath, ., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }, else, {, return, scale]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d, =]
[., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }, else, {, return, scale, *, x]
[,, shape, -, 1, ), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }]
[), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d]
[-, 1, ), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final]
[), ), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d]
[;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (]
[*, x, ;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1]
[;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (]
[;, final, double, c, =, 1, /, (, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (]
[-, 0.333333333333333333, ;, final, double, c, =, 1, /, (, 3, *, FastMath, ., sqrt, (, d, ), ), ;]
[;, final, double, c, =, 1, /, (, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (]
[;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =]
[/, (, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (, true, ), {, final, double, x]
[;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =]
[), ;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v]
[*, FastMath, ., sqrt, (, d, ), ), ;, while, (, true, ), {, final, double, x, =, random, .]
[), ;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v]
[., sqrt, (, d, ), ), ;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (]
[), ), ;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double]
[), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c]
[;, final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, )]
[., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +]
[;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final]
[*, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final]
[*, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (, v]
[), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (]
[+, c, *, x, ), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x]
[), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (]
[*, x, ), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;]
[), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (]
[*, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final]
[), *, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }]
[+, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, )]
[), *, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }]
[*, x, ), *, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue]
[), *, (, 1, +, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }]
[;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final]
[), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;]
[+, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =]
[), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;]
[*, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *]
[), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;]
[), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble]
[<=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final, double, u, =, random]
[), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble]
[;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2]
[*, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331]
[;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2]
[;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v]
[., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale]
[), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5]
[<, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (]
[), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5]
[-, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, .]
[), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5]
[*, x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, )]
[*, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (]
[*, x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, )]
[), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5]
[;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -]
[*, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (]
[*, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d]
[*, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (]
[;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -]
[), {, return, scale, *, d, *, v, ;, }, }, }, }]
[<, 0.5, *, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), )]
[., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -, v, +, FastMath, ., log]
[), <, 0.5, *, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), )]
[), {, return, scale, *, d, *, v, ;, }, }, }, }]
[+, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *]
[*, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return]
[+, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *]
[), {, return, scale, *, d, *, v, ;, }, }, }, }]
[*, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *, d, *]
[), {, return, scale, *, d, *, v, ;, }, }, }, }]
[), ), {, return, scale, *, d, *, v, ;, }, }, }, }]
[+, FastMath, ., log, (, v, ), ), ), {, return, scale, *, d, *, v, ;, }, }, }]
[-, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *, d, *, v, ;, }]
[+, FastMath, ., log, (, v, ), ), ), {, return, scale, *, d, *, v, ;, }, }, }]
[), ), {, return, scale, *, d, *, v, ;, }, }, }, }]
[., log, (, v, ), ), ), {, return, scale, *, d, *, v, ;, }, }, }, }]
[), ), ), {, return, scale, *, d, *, v, ;, }, }, }, }]
[;, }, }, }, }]
[*, v, ;, }, }, }, }]
[*, d, *, v, ;, }, }, }, }]
[*, v, ;, }, }, }, }]
[;, }, }, }, }]
