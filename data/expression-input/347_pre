[List, ;, import, java, ., util, ., Set, ;, class, RescopeGlobalSymbols, implements, CompilerPass, {, private, static, final, String, DISAMBIGUATION_SUFFIX, =]
[;, class, RescopeGlobalSymbols, implements, CompilerPass, {, private, static, final, String, DISAMBIGUATION_SUFFIX, =, "$", ;, private, static, final, String, WINDOW, =]
[=, "$", ;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =]
[=, "$", ;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =]
[static, final, String, WINDOW, =, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =, ImmutableSet, ., of, (]
[String, WINDOW, =, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =, ImmutableSet, ., of, (, WINDOW, ,]
[=, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =, ImmutableSet, ., of, (, WINDOW, ,, "eval", ,]
[String, globalSymbolNamespace, ;, private, final, boolean, addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {]
[String, globalSymbolNamespace, ;, private, final, boolean, addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {]
[final, boolean, addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =]
[addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =, compiler, ;]
[addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =, compiler, ;, this, ., globalSymbolNamespace, =]
[,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =, compiler, ;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;]
[,, String, globalSymbolNamespace, ,, boolean, addExtern, ), {, this, ., compiler, =, compiler, ;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;]
[boolean, addExtern, ), {, this, ., compiler, =, compiler, ;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;, this, ., addExtern, =]
[globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (]
[this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler, ,]
[addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler, ,, globalSymbolNamespace, ,]
[{, this, (, compiler, ,, globalSymbolNamespace, ,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =]
[{, this, (, compiler, ,, globalSymbolNamespace, ,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =]
[,, globalSymbolNamespace, ,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (]
[,, globalSymbolNamespace, ,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (]
[), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (, IR, ., name, (]
[), {, Node, varNode, =, IR, ., var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =]
[), {, Node, varNode, =, IR, ., var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =]
[=, IR, ., var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (]
[var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;]
[var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;]
[var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;]
[name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (]
[;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (]
[=, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;]
[=, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;]
[reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, addExtern, ), {]
[void, process, (, Node, externs, ,, Node, root, ), {, if, (, addExtern, ), {, addExternForGlobalSymbolNamespace, (, ), ;, }]
[void, process, (, Node, externs, ,, Node, root, ), {, if, (, addExtern, ), {, addExternForGlobalSymbolNamespace, (, ), ;, }]
[externs, ,, Node, root, ), {, if, (, addExtern, ), {, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (]
[Node, root, ), {, if, (, addExtern, ), {, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (, compiler, ,]
[), {, if, (, addExtern, ), {, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[{, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;]
[{, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;]
[;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;]
[new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;]
[new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =]
[parent, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (]
[if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;]
[if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;]
[if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;]
[), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString, (]
[., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =]
[., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =]
[), ;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (]
[., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;]
[., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;]
[;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =]
[;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =]
[parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (]
[getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,]
[n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (]
[n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (]
[detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==]
[;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==, null, ), {]
[;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==, null, ), {]
[NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (]
[n, ), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {]
[n, ), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {]
[(, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (]
[==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,]
[parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, ), ;, }]
[parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, ), ;, }]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, parent, ., isFunction, (, ), &&]
[return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, parent, ., isFunction, (, ), &&]
[return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, parent, ., isFunction, (, ), &&]
[n, ., getString, (, ), ;, if, (, parent, ., isFunction, (, ), &&, name, ., length, (, ), ==]
[(, ), &&, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[(, ), &&, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[(, ), &&, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, ==]
[(, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (]
[(, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (]
[null, ), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (]
[null, ), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (, !]
[), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (, !]
[(, var, ., isExtern, (, ), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&]
[var, ., isExtern, (, ), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (]
[var, ., isExtern, (, ), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (]
[var, ., isExtern, (, ), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (]
[), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name, ., equals, (]
[return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||]
[return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||]
[return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||]
[(, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (]
[(, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (]
[var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +]
[(, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==]
[name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {]
[name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {]
[globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (]
[globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (]
[||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +]
[indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;]
[indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;]
[), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[{, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !]
[{, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !]
[(, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =]
[(, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =]
[., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (]
[., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (]
[., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (]
[., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (]
[(, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=]
[), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&]
[), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&]
[), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&]
[nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=]
[var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&]
[var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&]
[var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&]
[getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }]
[), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (]
[null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,]
[n, ,, name, ), ;, }, private, void, replaceSymbol, (, Node, node, ,, String, name, ), {, Node, parent, =]
[n, ,, name, ), ;, }, private, void, replaceSymbol, (, Node, node, ,, String, name, ), {, Node, parent, =]
[(, Node, node, ,, String, name, ), {, Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =]
[(, Node, node, ,, String, name, ), {, Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =]
[String, name, ), {, Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (]
[String, name, ), {, Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (]
[String, name, ), {, Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (]
[Node, parent, =, node, ., getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (]
[getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (]
[;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,]
[;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,]
[;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,]
[IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,, IR, ., string, (]
[., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (]
[), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;]
[), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;]
[node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (]
[string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, ), ;, if, (]
[string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, ), ;, if, (]
[;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =]
[;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =]
[(, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (]
[), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,]
[), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,]
[(, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;]
[(, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;]
[Node, assign, =, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (]
[=, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,]
[,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {]
[,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {]
[(, ), ), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (]
[), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,]
[replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;, }]
[replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;, }]
[AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, if, (, !, n, ., isVar, (, ), ), {, return, ;, }, List, <, Node, >, commas, =]
[List, <, Node, >, commas, =, new, ArrayList, <, Node, >, (, ), ;, List, <, Node, >, interestingChildren, =]
[;, List, <, Node, >, interestingChildren, =, new, ArrayList, <, Node, >, (, ), ;, for, (, Node, c, :]
[;, List, <, Node, >, interestingChildren, =, new, ArrayList, <, Node, >, (, ), ;, for, (, Node, c, :]
[<, Node, >, (, ), ;, for, (, Node, c, :, n, ., children, (, ), ), {, if, (]
[<, Node, >, (, ), ;, for, (, Node, c, :, n, ., children, (, ), ), {, if, (]
[<, Node, >, (, ), ;, for, (, Node, c, :, n, ., children, (, ), ), {, if, (]
[for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c, ., isAssign, (, ), ||]
[for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c, ., isAssign, (, ), ||]
[children, (, ), ), {, if, (, c, ., isAssign, (, ), ||, parent, ., isFor, (, ), ), {]
[children, (, ), ), {, if, (, c, ., isAssign, (, ), ||, parent, ., isFor, (, ), ), {]
[{, if, (, c, ., isAssign, (, ), ||, parent, ., isFor, (, ), ), {, interestingChildren, ., add, (]
[., isFor, (, ), ), {, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :]
[{, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (]
[{, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (]
[{, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (]
[), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&]
[), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&]
[), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&]
[Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==]
[interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[(, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, commas, ., add, (]
[(, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, commas, ., add, (]
[n, ), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =]
[n, ), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =]
[n, ), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =]
[., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR, ., exprResult, (]
[., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR, ., exprResult, (]
[;, }, else, {, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (]
[{, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, ), ;]
[{, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, ), ;]
[IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, ), ;, parent, ., addChildBefore, (]
[exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,]
[), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (]
[), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (]
[), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (]
[;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (, commas, ., size, (, ), >]
[,, n, ), ;, }, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =]
[), ;, }, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (]
[}, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,]
[(, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;]
[(, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;]
[(, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (]
[>, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,]
[Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }]
[Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }]
[(, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (]
[n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, ), ;]
[n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, ), ;]
[), ;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source, ), {, Node, comma, =]
[), ;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source, ), {, Node, comma, =]
[Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source, ), {, Node, comma, =, commas, ., get, (]
[,, Node, source, ), {, Node, comma, =, commas, ., get, (, 0, ), ;, for, (, int, i, =]
[source, ), {, Node, comma, =, commas, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[source, ), {, Node, comma, =, commas, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[{, Node, comma, =, commas, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[{, Node, comma, =, commas, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, commas, ., size, (, ), ;]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, commas, ., size, (, ), ;]
[int, i, =, 1, ;, i, <, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =]
[int, i, =, 1, ;, i, <, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =]
[;, i, <, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (]
[<, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,]
[<, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,]
[(, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (]
[++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, ), ), ;]
[++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, ), ), ;]
[nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (]
[., comma, (, comma, ,, commas, ., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;]
[(, comma, ,, commas, ., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =]
[., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[=, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&]
[getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (]
[getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (]
[getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (]
[), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==]
[getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==, null, ||]
[getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==, null, ||]
[name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&]
[., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !]
[., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !]
[>, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (]
[(, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&]
[var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !]
[var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !]
[var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (]
[), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {]
[), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {]
[globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (]
[equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,]
[equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,]
[equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,]
[&&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (]
[&&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (]
[contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (]
[), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,]
[), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,]
[., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (]
[., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (]
[., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;]
[., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;]
