[private, Vector3D, v, ;, private, Vector3D, w, ;, public, OutlineExtractor, (, final, Vector3D, u, ,, final, Vector3D, v, ), {]
[private, Vector3D, v, ;, private, Vector3D, w, ;, public, OutlineExtractor, (, final, Vector3D, u, ,, final, Vector3D, v, ), {]
[private, Vector3D, w, ;, public, OutlineExtractor, (, final, Vector3D, u, ,, final, Vector3D, v, ), {, this, ., u, =]
[w, ;, public, OutlineExtractor, (, final, Vector3D, u, ,, final, Vector3D, v, ), {, this, ., u, =, u, ;]
[w, ;, public, OutlineExtractor, (, final, Vector3D, u, ,, final, Vector3D, v, ), {, this, ., u, =, u, ;]
[(, final, Vector3D, u, ,, final, Vector3D, v, ), {, this, ., u, =, u, ;, this, ., v, =]
[Vector3D, u, ,, final, Vector3D, v, ), {, this, ., u, =, u, ;, this, ., v, =, v, ;]
[,, final, Vector3D, v, ), {, this, ., u, =, u, ;, this, ., v, =, v, ;, w, =]
[,, final, Vector3D, v, ), {, this, ., u, =, u, ;, this, ., v, =, v, ;, w, =]
[), {, this, ., u, =, u, ;, this, ., v, =, v, ;, w, =, Vector3D, ., crossProduct, (]
[this, ., u, =, u, ;, this, ., v, =, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,]
[), ;, }, public, Vector2D, [, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =]
[[, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =, new, BoundaryProjector, (, ), ;]
[[, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =, new, BoundaryProjector, (, ), ;]
[[, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =, new, BoundaryProjector, (, ), ;]
[getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =, new, BoundaryProjector, (, ), ;, polyhedronsSet, ., getTree, (]
[), {, final, BoundaryProjector, projector, =, new, BoundaryProjector, (, ), ;, polyhedronsSet, ., getTree, (, true, ), ., visit, (]
[BoundaryProjector, (, ), ;, polyhedronsSet, ., getTree, (, true, ), ., visit, (, projector, ), ;, final, PolygonsSet, projected, =]
[BoundaryProjector, (, ), ;, polyhedronsSet, ., getTree, (, true, ), ., visit, (, projector, ), ;, final, PolygonsSet, projected, =]
[), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, [, ], [, ], outline, =]
[), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, [, ], [, ], outline, =]
[;, final, Vector2D, [, ], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =]
[Vector2D, [, ], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;]
[Vector2D, [, ], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;]
[], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;, i, <, outline, ., length, ;]
[projected, ., getVertices, (, ), ;, for, (, int, i, =, 0, ;, i, <, outline, ., length, ;, ++]
[i, =, 0, ;, i, <, outline, ., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =]
[i, =, 0, ;, i, <, outline, ., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =]
[0, ;, i, <, outline, ., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, []
[length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =]
[length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =]
[Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =, rawLoop, ., length, ;, int, j, =]
[=, outline, [, i, ], ;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (]
[=, outline, [, i, ], ;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (]
[[, i, ], ;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <]
[end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <, end, ), {, if, (]
[rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <, end, ), {, if, (, pointIsBetween, (]
[length, ;, int, j, =, 0, ;, while, (, j, <, end, ), {, if, (, pointIsBetween, (, rawLoop, ,]
[int, j, =, 0, ;, while, (, j, <, end, ), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,]
[end, ), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =]
[{, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;]
[{, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;]
[(, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;, k, <]
[pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (]
[pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (]
[rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (, end, -]
[,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;]
[j, ), ), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++]
[{, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++, k, ), {]
[{, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++, k, ), {]
[(, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, []
[=, j, ;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =]
[=, j, ;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =]
[;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, []
[;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, []
[<, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +]
[1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }]
[), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --]
[{, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else, {]
[rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++]
[[, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (]
[[, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (]
[+, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=]
[+, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=]
[--, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {]
[--, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {]
[;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, []
[{, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =]
[;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, []
[if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;]
[if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;]
[rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (]
[length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,]
[{, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,]
[{, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,]
[[, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, []
[=, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,]
[Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,, 0, ,]
[., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,, 0, ,, end, ), ;, }, }, return]
[(, final, Vector2D, [, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =]
[(, final, Vector2D, [, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =]
[Vector2D, [, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, []
[Vector2D, [, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, []
[[, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (]
[[, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (]
[[, ], loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (]
[loop, ,, final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (, i, +]
[final, int, n, ,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (, i, +, n, -]
[,, final, int, i, ), {, final, Vector2D, previous, =, loop, [, (, i, +, n, -, 1, ), %]
[Vector2D, previous, =, loop, [, (, i, +, n, -, 1, ), %, n, ], ;, final, Vector2D, current, =]
[Vector2D, previous, =, loop, [, (, i, +, n, -, 1, ), %, n, ], ;, final, Vector2D, current, =]
[=, loop, [, (, i, +, n, -, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, []
[-, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =]
[-, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =]
[), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, []
[), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, []
[%, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (]
[%, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (]
[], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +]
[Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %]
[;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =]
[;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =]
[;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =]
[[, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -]
[[, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -]
[final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =]
[final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =]
[final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =]
[getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =, current, ., getY, (, ), -]
[getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =, current, ., getY, (, ), -]
[final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =]
[final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =]
[final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =]
[getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =, next, ., getX, (, ), -]
[getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =, next, ., getX, (, ), -]
[final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =]
[final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =]
[final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =]
[getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =, next, ., getY, (, ), -]
[getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =, next, ., getY, (, ), -]
[final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =]
[final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =]
[final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =]
[dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =, dx1, *]
[next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -]
[next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -]
[getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *]
[getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =]
[getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =]
[getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =]
[), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *]
[final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +]
[final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +]
[cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *]
[dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =]
[dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =]
[final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (]
[final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (]
[double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (]
[double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (]
[double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (]
[=, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *]
[*, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +]
[*, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +]
[+, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *]
[dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (, dx2, *]
[=, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +]
[=, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +]
[., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *]
[*, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return]
[*, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return]
[dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (]
[dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (]
[dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (]
[dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (]
[(, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=]
[dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (]
[dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (]
[dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *]
[dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&]
[), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (]
[), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (]
[;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot, >=]
[;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {]
[private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {, projected, =]
[implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {, projected, =, new, PolygonsSet, (]
[private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {, projected, =, new, PolygonsSet, (, new, BSPTree, <, Euclidean2D, >, (]
[private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {, projected, =, new, PolygonsSet, (, new, BSPTree, <, Euclidean2D, >, (]
[Boolean, ., FALSE, ), ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return]
[Boolean, ., FALSE, ), ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return]
[), {, return, Order, ., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {]
[Order, ., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, @, SuppressWarnings, (]
[final, BSPTree, <, Euclidean3D, >, node, ), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean3D, >, attribute, =]
[), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, )]
[), {, @, SuppressWarnings, (, "unchecked", ), final, BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, )]
[BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if, (]
[BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if, (]
[BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if, (]
[(, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=]
[Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {]
[), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (]
[), node, ., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[(, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (]
[addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=]
[., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {]
[(, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (]
[(, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (]
[}, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,]
[node, ), {, }, private, void, addContribution, (, final, SubHyperplane, <, Euclidean3D, >, facet, ,, final, boolean, reversed, ), {]
[}, private, void, addContribution, (, final, SubHyperplane, <, Euclidean3D, >, facet, ,, final, boolean, reversed, ), {, @, SuppressWarnings, (]
[,, final, boolean, reversed, ), {, @, SuppressWarnings, (, "unchecked", ), final, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, absFacet, =]
[(, "unchecked", ), final, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, )]
[Euclidean3D, ,, Euclidean2D, >, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, ), facet, ;, final, Plane, plane, =]
[>, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, ), facet, ;, final, Plane, plane, =, (, Plane, )]
[>, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, ), facet, ;, final, Plane, plane, =, (, Plane, )]
[), facet, ;, final, Plane, plane, =, (, Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =]
[), facet, ;, final, Plane, plane, =, (, Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =]
[), facet, ;, final, Plane, plane, =, (, Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =]
[Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (]
[(, ), ;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (]
[(, ), ;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (]
[(, ), ;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (]
[double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (, FastMath, ., abs, (]
[plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (, FastMath, ., abs, (, scal, ), >]
[;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =]
[;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =]
[if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (]
[., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, )]
[., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, )]
[], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (]
[], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (]
[vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (, (]
[vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (, (]
[(, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (, (, scal, <]
[), absFacet, ., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (, (, scal, <, 0, ), ^]
[;, if, (, (, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =]
[(, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, []
[(, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, []
[], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ], [, ], ;, for, (, int, i, =]
[], newVertices, =, new, Vector2D, [, vertices, ., length, ], [, ], ;, for, (, int, i, =, 0, ;]
[], newVertices, =, new, Vector2D, [, vertices, ., length, ], [, ], ;, for, (, int, i, =, 0, ;]
[=, new, Vector2D, [, vertices, ., length, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, Vector2D, [, vertices, ., length, ], [, ], ;, for, (, int, i, =, 0, ;, i, <]
[vertices, ., length, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, vertices, ., length, ;]
[., length, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, vertices, ., length, ;, ++]
[i, =, 0, ;, i, <, vertices, ., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =]
[i, =, 0, ;, i, <, vertices, ., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =]
[0, ;, i, <, vertices, ., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, []
[i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ], newLoop, =]
[final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, []
[final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, []
[[, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (]
[[, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (]
[[, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (]
[], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, []
[Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, [, 0, ], ==]
[newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, [, 0, ], ==, null, ), {]
[newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, [, 0, ], ==, null, ), {]
[new, Vector2D, [, loop, ., length, ], ;, if, (, loop, [, 0, ], ==, null, ), {, newLoop, []
[loop, ., length, ], ;, if, (, loop, [, 0, ], ==, null, ), {, newLoop, [, 0, ], =]
[loop, [, 0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =]
[0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;]
[0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;]
[==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <]
[==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <]
[newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;]
[[, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++]
[=, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {]
[=, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, []
[int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =]
[int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =]
[=, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[=, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[=, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[<, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -]
[], =, loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =]
[loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;]
[loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;]
[loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <]
[loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <]
[j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;]
[], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++]
[}, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j, ), {]
[}, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j, ), {]
[{, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, []
[int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =]
[int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =]
[=, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[=, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[=, 0, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, []
[<, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -]
[loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (]
[loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (]
[length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +]
[newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }]
[newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }]
[j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, []
[loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =]
[., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }]
[-, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =]
[], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =]
[edges, =, new, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, (, ), ;, for, (, Vector2D, [, ], loop, :]
[Euclidean2D, >, >, (, ), ;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =]
[Euclidean2D, >, >, (, ), ;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =]
[Euclidean2D, >, >, (, ), ;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =]
[>, (, ), ;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =, loop, []
[;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=]
[], loop, :, vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =]
[], loop, :, vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =]
[:, vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?]
[vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (]
[vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (]
[vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (]
[boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (, loop, ., length, -]
[loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :]
[null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =]
[null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =]
[=, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (]
[=, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (]
[?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, []
[), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =]
[), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =]
[:, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (]
[:, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (]
[;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +]
[=, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +, 1, ), %]
[=, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +, 1, ), %]
[previous, ], ), ;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =]
[;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (]
[;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (]
[(, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (]
[1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,]
[1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,]
[., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (]
[new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (]
[new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (]
[(, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (, current, <]
[(, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (, current, <]
[., dotProduct, (, v, ), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =]
[., dotProduct, (, v, ), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =]
[), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (]
[), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (]
[;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, []
[), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =]
[Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (]
[Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (]
[., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (]
[loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,]
[loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,]
[), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,, current3D, ., dotProduct, (]
[), ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line, =]
[Line, line, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,]
[., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =]
[., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =]
[(, pPoint, ,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (]
[(, pPoint, ,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (]
[,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||]
[cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||, (]
[cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||, (]
[;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=]
[., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =]
[., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =]
[., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =]
[(, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +]
[(, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +]
[||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =]
[Line, l, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,]
[., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, angle, ), ;]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, angle, ), ;, edge, =]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, angle, ), ;, edge, =]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, angle, ), ;, edge, =]
[., geometry, ., euclidean, ., twod, ., Line, (, pPoint, ,, angle, ), ;, edge, =, edge, ., split, (]
[,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (]
[,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (]
[), ;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||]
[;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (]
[;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (]
[=, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=]
[edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (]
[edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (]
[edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (]
[l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (, loop, ., length, -]
[(, closed, ||, (, current, !=, (, loop, ., length, -, 1, ), ), ), {, final, double, angle, =]
[(, closed, ||, (, current, !=, (, loop, ., length, -, 1, ), ), ), {, final, double, angle, =]
[(, closed, ||, (, current, !=, (, loop, ., length, -, 1, ), ), ), {, final, double, angle, =]
[(, loop, ., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +]
[(, loop, ., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +]
[., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =]
[Line, l, =, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (]
[=, new, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,]
[., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,, angle, ), ;]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,, angle, ), ;, edge, =]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,, angle, ), ;, edge, =]
[., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,, angle, ), ;, edge, =]
[., geometry, ., euclidean, ., twod, ., Line, (, cPoint, ,, angle, ), ;, edge, =, edge, ., split, (]
[(, cPoint, ,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }]
[(, cPoint, ,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }]
[), ;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (]
[=, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;]
[., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =]
[., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =]
[l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;]
[., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =]
[(, ), ;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =, current3D, ;]
[;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =]
[;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =]
[current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (]
[previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;]
[current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =]
[=, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =, (, PolygonsSet, )]
[=, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =, (, PolygonsSet, )]
[PolygonsSet, (, edges, ), ;, projected, =, (, PolygonsSet, ), new, RegionFactory, <, Euclidean2D, >, (, ), ., union, (]
[edges, ), ;, projected, =, (, PolygonsSet, ), new, RegionFactory, <, Euclidean2D, >, (, ), ., union, (, projected, ,]
[>, (, ), ., union, (, projected, ,, projectedFacet, ), ;, }, }, public, PolygonsSet, getProjected, (, ), {, return]
