[;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =]
[., error, (, "UNSUPPORTED_DEFINE_SIGNATURE", ,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error]
[,, "Only define(function() ...), define(OBJECT_LITERAL) and define(", +, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement."]
[), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING]
[+, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static]
[+, "['dep', 'dep1'], function(d0, d2, [exports, module]) ...) forms ", +, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;]
[+, "are currently supported.", ), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static]
[), ;, final, static, DiagnosticType, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, =, DiagnosticType, ., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING]
[;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX, =]
[., error, (, "NON_TOP_LEVEL_STATEMENT_DEFINE", ,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}"]
[,, "The define function must be called as a top-level statement.", ), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", ), ;, final, static]
[), ;, final, static, DiagnosticType, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, =, DiagnosticType, ., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX]
[;, final, static, String, VAR_RENAME_SUFFIX, =, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;, TransformAMDToCJSModule]
[., warning, (, "REQUIREJS_PLUGINS_NOT_SUPPORTED", ,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX, =, "__alias", ;, private, final, AbstractCompiler, compiler, ;]
[,, "Plugins in define requirements are not supported: {0}", ), ;, final, static, String, VAR_RENAME_SUFFIX, =, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =]
[), ;, final, static, String, VAR_RENAME_SUFFIX, =, "__alias", ;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;]
[;, private, final, AbstractCompiler, compiler, ;, private, int, renameIndex, =, 0, ;, TransformAMDToCJSModule, (, AbstractCompiler, compiler, ), {, this, .]
[;, TransformAMDToCJSModule, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {, t, ., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR]
[., traverse, (, compiler, ,, root, ,, new, TransformAMDModulesCallback, (, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t]
[,, root, ,, new, TransformAMDModulesCallback, (, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, )]
[,, new, TransformAMDModulesCallback, (, ), ), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {, t]
[), ;, }, private, void, unsupportedDefineError, (, NodeTraversal, t, ,, Node, n, ), {, t, ., report, (, n, ,]
[;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||, "require", .]
[., report, (, n, ,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", .]
[,, UNSUPPORTED_DEFINE_SIGNATURE_ERROR, ), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, )]
[), ;, }, private, boolean, isVirtualModuleName, (, String, moduleName, ), {, return, "exports", ., equals, (, moduleName, ), ||, "require"]
[;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[||, "require", ., equals, (, moduleName, ), ||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends]
[., equals, (, moduleName, ), ||, "require", ., equals, (, moduleName, ), ||, "module", ., equals, (, moduleName, ), ;]
[), ||, "require", ., equals, (, moduleName, ), ||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback]
[||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[., equals, (, moduleName, ), ||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {]
[), ||, "module", ., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., equals, (, moduleName, ), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), ;, }, private, class, TransformAMDModulesCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, )]
[&&, "define", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, )]
[&&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define"]
[., isCall, (, ), &&, n, ., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, )]
[!=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild]
[., getFirstChild, (, ), !=, null, &&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, )]
[&&, "define", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var]
[., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), )]
[., getFirstChild, (, ), ., isName, (, ), &&, "define", ., equals, (, n, ., getFirstChild, (, ), ., getString]
[), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, )]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var, define, =]
[), ), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (, n, ., getFirstChild, (]
[., getString, (, ), ), ), {, Scope, ., Var, define, =, t, ., getScope, (, ), ., getVar, (]
[., getFirstChild, (, ), ., getString, (, ), ), ), {, Scope, ., Var, define, =, t, ., getScope, (]
[;, if, (, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (]
[., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=, null, &&]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[), ;, if, (, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if]
[., getString, (, ), ), ;, if, (, define, !=, null, &&, !, define, ., isGlobal, (, ), ), {]
[., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, define, !=, null, &&, !, define, ., isGlobal]
[), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, )]
[&&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (]
[!=, null, &&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, .]
[&&, !, define, ., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (]
[), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, )]
[), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&, parent, ., getParent, (, )]
[., isGlobal, (, ), ), {, return, ;, }, if, (, !, (, parent, ., isExprResult, (, ), &&, parent]
[), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, ., getParent]
[), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, ., getParent]
[), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, .]
[&&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR]
[., isExprResult, (, ), &&, parent, ., getParent, (, ), ., isScript, (, ), ), ), {, t, ., report]
[), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, .]
[., isScript, (, ), ), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node]
[., getParent, (, ), ., isScript, (, ), ), ), {, t, ., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;]
[;, return, ;, }, Node, script, =, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback]
[., report, (, n, ,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, ., getParent, (, ), ;]
[,, NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR, ), ;, return, ;, }, Node, script, =, parent, ., getParent, (, ), ;, Node, requiresNode, =, null]
[), ;, return, ;, }, Node, script, =, parent, ., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node]
[;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -]
[., getParent, (, ), ;, Node, requiresNode, =, null, ;, Node, callback, =, null, ;, int, defineArity, =, n, .]
[;, Node, callback, =, null, ;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity]
[;, int, defineArity, =, n, ., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError]
[;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if]
[-, 1, ;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }]
[., getChildCount, (, ), -, 1, ;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, )]
[;, if, (, defineArity, ==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {]
[==, 0, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {]
[;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex, (, 1, )]
[,, n, ), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex]
[), ;, return, ;, }, else, if, (, defineArity, ==, 1, ), {, callback, =, n, ., getChildAtIndex, (, 1]
[), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {]
[==, 1, ), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, )]
[), {, callback, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {]
[=, n, ., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent]
[;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return]
[., getChildAtIndex, (, 1, ), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback]
[), ;, if, (, callback, ., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;]
[), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==]
[., isObjectLit, (, ), ), {, handleDefineObjectLiteral, (, parent, ,, callback, ,, script, ), ;, return, ;, }, }, else]
[;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1]
[,, callback, ,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =]
[,, script, ), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, .]
[), ;, return, ;, }, }, else, if, (, defineArity, ==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (]
[), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;]
[==, 2, ), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2]
[), {, requiresNode, =, n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;]
[=, n, ., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if]
[;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError]
[., getChildAtIndex, (, 1, ), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity]
[), ;, callback, =, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {]
[=, n, ., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t]
[;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }]
[., getChildAtIndex, (, 2, ), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n]
[), ;, }, else, if, (, defineArity, >=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, )]
[>=, 3, ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, )]
[;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !, requiresNode]
[,, n, ), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null]
[), ;, return, ;, }, if, (, !, callback, ., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,]
[||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n]
[||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n]
[., isFunction, (, ), ||, (, requiresNode, !=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError]
[), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,]
[), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script]
[&&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }]
[!=, null, &&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return]
[&&, !, requiresNode, ., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }]
[), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script]
[), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script]
[., isArrayLit, (, ), ), ), {, unsupportedDefineError, (, t, ,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t]
[;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =]
[,, n, ), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;]
[), ;, return, ;, }, handleRequiresAndParamList, (, t, ,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock]
[;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new]
[,, n, ,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;]
[,, script, ,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, .]
[,, requiresNode, ,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (]
[,, callback, ), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, Node, callbackBlock, =, callback, ., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script]
[., getChildAtIndex, (, 2, ), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,]
[;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void]
[., traverse, (, compiler, ,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock]
[,, callbackBlock, ,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;, compiler, .]
[,, new, DefineCallbackReturnCallback, (, ), ), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;, compiler, ., reportCodeChange, (]
[), ;, moveCallbackContentToTopLevel, (, parent, ,, script, ,, callbackBlock, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node]
[,, script, ,, callbackBlock, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent]
[,, callbackBlock, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,]
[;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, ), {, onlyExport, ., getParent]
[., reportCodeChange, (, ), ;, }, }, private, void, handleDefineObjectLiteral, (, Node, parent, ,, Node, onlyExport, ,, Node, script, )]
[;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports"]
[., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (]
[., getParent, (, ), ., removeChild, (, onlyExport, ), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (]
[), ;, script, ., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script]
[., replaceChild, (, parent, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,]
[,, IR, ., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), .]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t, ,, Node, defineNode, ,, Node]
[., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t]
[., exprResult, (, IR, ., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (]
[), ., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal]
[., assign, (, IR, ., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;]
[,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void]
[., name, (, "exports", ), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (]
[), ,, onlyExport, ), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private]
[), ), ., copyInformationFromForTree, (, onlyExport, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t, ,, Node, defineNode, ,]
[;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script, ,, Node, requiresNode, ,, Node, callback]
[., reportCodeChange, (, ), ;, }, private, void, handleRequiresAndParamList, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script, ,, Node]
[;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?, requiresNode, ., children, (, ), ., iterator, (, )]
[., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?, requiresNode, ., children, (, )]
[., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?, requiresNode]
[., getChildAtIndex, (, 1, ), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =]
[), ., children, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, requires, =, requiresNode, !=, null, ?]
[;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList]
[?, requiresNode, ., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;]
[!=, null, ?, requiresNode, ., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (]
[?, requiresNode, ., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;]
[:, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (, paramList, ., hasNext, (, ), ||, requires, .]
[., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (, paramList, ., hasNext, (]
[., children, (, ), ., iterator, (, ), :, Iterators, ., <, Node, >, emptyIterator, (, ), ;, while, (]
[;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList]
[., <, Node, >, emptyIterator, (, ), ;, while, (, paramList, ., hasNext, (, ), ||, requires, ., hasNext, (]
[), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node]
[||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next]
[., hasNext, (, ), ||, requires, ., hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, )]
[), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node]
[., hasNext, (, ), ), {, Node, aliasNode, =, paramList, ., hasNext, (, ), ?, paramList, ., next, (, )]
[;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (]
[?, paramList, ., next, (, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, .]
[., hasNext, (, ), ?, paramList, ., next, (, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (]
[:, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;]
[., next, (, ), :, null, ;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (]
[;, Node, modNode, =, requires, ., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (]
[;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode, ), ;, }, }, private, void]
[?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode]
[., hasNext, (, ), ?, requires, ., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script]
[:, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode, ), ;, }, }]
[., next, (, ), :, null, ;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode]
[;, handleRequire, (, t, ,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode, ), ;, }, }, private, void]
[;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script, ,, Node, callback, ,, Node]
[,, defineNode, ,, script, ,, callback, ,, aliasNode, ,, modNode, ), ;, }, }, private, void, handleRequire, (, NodeTraversal, t]
[,, script, ,, callback, ,, aliasNode, ,, modNode, ), ;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node]
[,, callback, ,, aliasNode, ,, modNode, ), ;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node, defineNode, ,]
[,, aliasNode, ,, modNode, ), ;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script]
[,, modNode, ), ;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script, ,, Node]
[), ;, }, }, private, void, handleRequire, (, NodeTraversal, t, ,, Node, defineNode, ,, Node, script, ,, Node, callback, ,]
[;, if, (, modNode, !=, null, ), {, moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (]
[), {, moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }]
[!=, null, ), {, moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, )]
[), {, moduleName, =, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }]
[=, handlePlugins, (, t, ,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }, if, (, isVirtualModuleName]
[;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?]
[,, script, ,, modNode, ., getString, (, ), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), )]
[,, modNode, ., getString, (, ), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return]
[,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode]
[., getString, (, ), ,, modNode, ), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }]
[), ;, }, if, (, isVirtualModuleName, (, moduleName, ), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null]
[), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :, null, ;]
[), ), {, return, ;, }, String, aliasName, =, aliasNode, !=, null, ?, aliasNode, ., getString, (, ), :, null]
[;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (]
[?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (]
[!=, null, ?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;]
[?, aliasNode, ., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (]
[:, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, .]
[., getString, (, ), :, null, ;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=]
[;, Scope, globalScope, =, t, ., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (]
[;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true]
[., getScope, (, ), ;, if, (, aliasName, !=, null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), )]
[), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope]
[&&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName]
[!=, null, &&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed]
[&&, globalScope, ., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName]
[), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope]
[., isDeclared, (, aliasName, ,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX]
[,, true, ), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if]
[), ), {, while, (, true, ), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !]
[), {, String, renamed, =, aliasName, +, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,]
[;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[+, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (]
[+, VAR_RENAME_SUFFIX, +, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, .]
[+, renameIndex, ;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (]
[;, if, (, !, globalScope, ., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName]
[), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName]
[., isDeclared, (, renamed, ,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (]
[,, true, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, )]
[), ), {, NodeTraversal, ., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;]
[;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=]
[., traverse, (, compiler, ,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =, renamed, ;]
[,, callback, ,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex]
[,, new, RenameCallback, (, aliasName, ,, renamed, ), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;]
[), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName]
[,, renamed, ), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;]
[), ), ;, aliasName, =, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (]
[=, renamed, ;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, )]
[;, break, ;, }, renameIndex, ++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node]
[;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =, IR, ., call, (]
[++, ;, }, }, Node, requireNode, ;, if, (, moduleName, !=, null, ), {, Node, call, =, IR, ., call]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (]
[!=, null, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, .]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode]
[., call, (, IR, ., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;, call, .]
[,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., name, (, "require", ), ,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, .]
[), ,, IR, ., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {]
[., string, (, moduleName, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (]
[), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, )]
[;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, )]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR]
[,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name]
[., FREE_CALL, ,, true, ), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR]
[), ;, if, (, aliasName, !=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName]
[), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (]
[!=, null, ), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), .]
[), {, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (]
[=, IR, ., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;]
[;, }, else, {, requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }, }]
[., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (]
[., var, (, IR, ., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else]
[,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call, )]
[., name, (, aliasName, ), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR]
[), ,, call, ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call]
[), ., copyInformationFromForTree, (, aliasNode, ), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree]
[), ;, }, else, {, requireNode, =, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }]
[=, IR, ., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName]
[;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =, IR, .]
[., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;]
[., exprResult, (, call, ), ., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName]
[), ., copyInformationFromForTree, (, modNode, ), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return]
[), ;, }, }, else, {, if, (, isVirtualModuleName, (, aliasName, ), ), {, return, ;, }, requireNode, =, IR]
[), {, return, ;, }, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR, .]
[), ), {, return, ;, }, requireNode, =, IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR]
[=, IR, ., var, (, IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree]
[;, }, script, ., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), ), ;, }, private, String, handlePlugins, (]
[., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), ), ;]
[., var, (, IR, ., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode]
[,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,]
[., name, (, aliasName, ), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script]
[), ,, IR, ., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode]
[), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), )]
[., nullNode, (, ), ), ., copyInformationFromForTree, (, aliasNode, ), ;, }, script, ., addChildBefore, (, requireNode, ,, defineNode, .]
[), ;, }, script, ., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), ), ;, }, private, String, handlePlugins]
[;, }, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,, Node, modNode, ), {, if]
[., addChildBefore, (, requireNode, ,, defineNode, ., getParent, (, ), ), ;, }, private, String, handlePlugins, (, NodeTraversal, t, ,]
[,, defineNode, ., getParent, (, ), ), ;, }, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String]
[), ;, }, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,, Node, modNode, ), {]
[., getParent, (, ), ), ;, }, private, String, handlePlugins, (, NodeTraversal, t, ,, Node, script, ,, String, moduleName, ,]
[), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (]
[., contains, (, "!", ), ), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition]
[), ), {, t, ., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf]
[;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if, (]
[., report, (, modNode, ,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;]
[,, REQUIREJS_PLUGINS_NOT_SUPPORTED_WARNING, ,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >]
[,, moduleName, ), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, )]
[), ;, int, condition, =, moduleName, ., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if]
[;, if, (, condition, >, 0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null]
[., indexOf, (, '?', ), ;, if, (, condition, >, 0, ), {, if, (, moduleName, ., contains, (, ":"]
[), ;, if, (, condition, >, 0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return]
[), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t]
[>, 0, ), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins]
[), {, if, (, moduleName, ., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t]
[), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1]
[., contains, (, ":", ), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, .]
[), ), {, return, null, ;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +]
[;, }, return, handlePlugins, (, t, ,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, )]
[;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script]
[,, script, ,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, ), ;, }, moduleName, =, null, ;]
[,, moduleName, ., substring, (, condition, +, 1, ), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return]
[,, modNode, ), ;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent]
[., substring, (, condition, +, 1, ), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return, moduleName, ;]
[), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node]
[+, 1, ), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel]
[), ,, modNode, ), ;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node]
[), ;, }, moduleName, =, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node]
[=, null, ;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock]
[;, }, return, moduleName, ;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {]
[;, }, private, void, moveCallbackContentToTopLevel, (, Node, defineParent, ,, Node, script, ,, Node, callbackBlock, ), {, int, curIndex, =, script]
[;, script, ., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node]
[., getIndexOfChild, (, defineParent, ), ;, script, ., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild]
[), ;, script, ., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;]
[;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex]
[., removeChild, (, defineParent, ), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =]
[), ;, callbackBlock, ., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (]
[;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {, script, .]
[., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=]
[., getParent, (, ), ., removeChild, (, callbackBlock, ), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;]
[), ;, Node, before, =, script, ., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {, script]
[;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, .]
[., getChildAtIndex, (, curIndex, ), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before]
[), ;, if, (, before, !=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script]
[), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil]
[!=, null, ), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, )]
[), {, script, ., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil]
[;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }, }, private, class]
[., addChildBefore, (, callbackBlock, ,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (]
[,, before, ), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }]
[), ;, }, script, ., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }, }, private]
[;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal, ., AbstractShallowStatementCallback, {, @, Override]
[., addChildToBack, (, callbackBlock, ), ;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal]
[), ;, NodeUtil, ., tryMergeBlock, (, callbackBlock, ), ;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal, ., AbstractShallowStatementCallback, {, @]
[;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal, ., AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., tryMergeBlock, (, callbackBlock, ), ;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal, ., AbstractShallowStatementCallback, {, @, Override, public, void]
[), ;, }, }, private, class, DefineCallbackReturnCallback, extends, NodeTraversal, ., AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, .]
[&&, n, ., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild]
[., isReturn, (, ), &&, n, ., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, )]
[), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, .]
[., hasChildren, (, ), ), {, Node, retVal, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, retVal]
[;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, .]
[., getFirstChild, (, ), ;, n, ., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, .]
[;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR]
[., removeChild, (, retVal, ), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (]
[), ;, parent, ., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final, String, from, ;, private, final, String, to, ;]
[., replaceChild, (, n, ,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name]
[,, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,]
[), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final, String, from, ;, private, final, String, to]
[., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final, String, from]
[., exprResult, (, IR, ., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, .]
[), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final, String]
[., assign, (, IR, ., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", )]
[,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {]
[., getprop, (, IR, ., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, )]
[,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }]
[., name, (, "module", ), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (]
[), ,, IR, ., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;]
[), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback]
[., string, (, "exports", ), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }]
[), ), ,, retVal, ), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends]
[), ), ., useSourceInfoFromForTree, (, n, ), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final]
[), ), ;, }, }, }, private, class, RenameCallback, extends, AbstractPostOrderCallback, {, private, final, String, from, ;, private, final, String]
[=, from, ;, this, ., to, =, to, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., from, =, from, ;, this, ., to, =, to, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, this, ., to, =, to, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[=, to, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., to, =, to, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, n, ., setString, (, to, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;]
[&&, from, ., equals, (, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;]
[., isName, (, ), &&, from, ., equals, (, n, ., getString, (, ), ), ), {, n, ., setString]
[), {, n, ., setString, (, to, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;]
[., equals, (, n, ., getString, (, ), ), ), {, n, ., setString, (, to, ), ;, n, .]
[), ), {, n, ., setString, (, to, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, )]
[., getString, (, ), ), ), {, n, ., setString, (, to, ), ;, n, ., putProp, (, Node, .]
[;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;, }, }, }, }]
[., setString, (, to, ), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;, }, }, }]
[), ;, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;, }, }, }, }]
[;, }, }, }, }]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, from, ), ;, }, }, }, }]
[,, from, ), ;, }, }, }, }]
[., ORIGINALNAME_PROP, ,, from, ), ;, }, }, }, }]
[), ;, }, }, }, }]
