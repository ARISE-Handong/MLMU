[public, class, HistogramDataset, extends, AbstractIntervalXYDataset, implements, IntervalXYDataset, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[class, HistogramDataset, extends, AbstractIntervalXYDataset, implements, IntervalXYDataset, ,, Cloneable, ,, PublicCloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[final, long, serialVersionUID, =, -, 6341668077370231153L, ;, private, List, list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {]
[final, long, serialVersionUID, =, -, 6341668077370231153L, ;, private, List, list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {]
[-, 6341668077370231153L, ;, private, List, list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {, this, ., list, =]
[list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList, (, ), ;]
[list, ;, private, HistogramType, type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList, (, ), ;]
[type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList, (, ), ;, this, ., type, =]
[type, ;, public, HistogramDataset, (, ), {, this, ., list, =, new, ArrayList, (, ), ;, this, ., type, =]
[ArrayList, (, ), ;, this, ., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return]
[ArrayList, (, ), ;, this, ., type, =, HistogramType, ., FREQUENCY, ;, }, public, HistogramType, getType, (, ), {, return]
[getType, (, ), {, return, this, ., type, ;, }, public, void, setType, (, HistogramType, type, ), {, if, (]
[getType, (, ), {, return, this, ., type, ;, }, public, void, setType, (, HistogramType, type, ), {, if, (]
[), {, return, this, ., type, ;, }, public, void, setType, (, HistogramType, type, ), {, if, (, type, ==]
[., type, ;, }, public, void, setType, (, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw]
[}, public, void, setType, (, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }]
[(, HistogramType, type, ), {, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }]
[{, if, (, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =]
[(, type, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =, type, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'type' argument", ), ;, }, this, ., type, =, type, ;, fireDatasetChanged, (]
[}, public, void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ), {, double, minimum, =]
[void, addSeries, (, Comparable, key, ,, double, [, ], values, ,, int, bins, ), {, double, minimum, =, getMinimum, (]
[double, [, ], values, ,, int, bins, ), {, double, minimum, =, getMinimum, (, values, ), ;, double, maximum, =]
[], values, ,, int, bins, ), {, double, minimum, =, getMinimum, (, values, ), ;, double, maximum, =, getMaximum, (]
[int, bins, ), {, double, minimum, =, getMinimum, (, values, ), ;, double, maximum, =, getMaximum, (, values, ), ;]
[), {, double, minimum, =, getMinimum, (, values, ), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (]
[double, minimum, =, getMinimum, (, values, ), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,]
[=, getMinimum, (, values, ), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,, values, ,]
[(, values, ), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,, values, ,, bins, ,]
[), ;, double, maximum, =, getMaximum, (, values, ), ;, addSeries, (, key, ,, values, ,, bins, ,, minimum, ,]
[Comparable, key, ,, double, [, ], values, ,, int, bins, ,, double, minimum, ,, double, maximum, ), {, if, (]
[Comparable, key, ,, double, [, ], values, ,, int, bins, ,, double, minimum, ,, double, maximum, ), {, if, (]
[,, double, [, ], values, ,, int, bins, ,, double, minimum, ,, double, maximum, ), {, if, (, key, ==]
[values, ,, int, bins, ,, double, minimum, ,, double, maximum, ), {, if, (, key, ==, null, ), {, throw]
[bins, ,, double, minimum, ,, double, maximum, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (]
[maximum, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (]
[maximum, ), {, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (]
[{, if, (, key, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'key' argument.", ), ;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (]
[;, }, if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (]
[if, (, values, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <, 1, ), {, throw]
[throw, new, IllegalArgumentException, (, "Null 'values' argument.", ), ;, }, else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (]
[}, else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =]
[}, else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =]
[else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (]
[else, if, (, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (]
[(, bins, <, 1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -]
[1, ), {, throw, new, IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -, minimum, ), /]
[IllegalArgumentException, (, "The 'bins' value must be at least 1.", ), ;, }, double, binWidth, =, (, maximum, -, minimum, ), /, bins, ;, double, lower, =]
[=, (, maximum, -, minimum, ), /, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =]
[-, minimum, ), /, bins, ;, double, lower, =, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (]
[=, minimum, ;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =]
[;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;]
[;, double, upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;]
[upper, ;, List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;, i, <]
[List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;, i, <, bins, ;]
[List, binList, =, new, ArrayList, (, bins, ), ;, for, (, int, i, =, 0, ;, i, <, bins, ;]
[for, (, int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (]
[for, (, int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (]
[int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==]
[int, i, =, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==]
[=, 0, ;, i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -]
[i, <, bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {]
[bins, ;, i, ++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =]
[++, ), {, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new, HistogramBin, (]
[{, HistogramBin, bin, ;, if, (, i, ==, bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower, ,]
[i, ==, bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {]
[bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =]
[bins, -, 1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =]
[1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +]
[1, ), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +]
[), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (]
[), {, bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (]
[bin, =, new, HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +]
[HistogramBin, (, lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *]
[lower, ,, maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;]
[maximum, ), ;, }, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =]
[}, else, {, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (]
[{, upper, =, minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,]
[minimum, +, (, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;]
[(, i, +, 1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =]
[1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }]
[1, ), *, binWidth, ;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }]
[;, bin, =, new, HistogramBin, (, lower, ,, upper, ), ;, lower, =, upper, ;, }, binList, ., add, (]
[), ;, lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =]
[lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;]
[lower, =, upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;]
[upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[upper, ;, }, binList, ., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[., add, (, bin, ), ;, }, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =]
[for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =]
[int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -]
[;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (]
[;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (]
[;, i, <, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (]
[<, values, ., length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, []
[length, ;, i, ++, ), {, int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <]
[int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =]
[int, binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =]
[binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (]
[binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (]
[binIndex, =, bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (]
[bins, -, 1, ;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, []
[;, if, (, values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -]
[values, [, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /]
[[, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (]
[[, i, ], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (]
[], <, maximum, ), {, double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -]
[double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (]
[double, fraction, =, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (]
[=, (, values, [, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <]
[[, i, ], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {]
[], -, minimum, ), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =]
[), /, (, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }]
[(, maximum, -, minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =]
[minimum, ), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, )]
[), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (]
[), ;, if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (]
[if, (, fraction, <, 0.0, ), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *]
[), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (]
[), {, fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (]
[fraction, =, 0.0, ;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=]
[;, }, binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {]
[binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {, binIndex, =]
[binIndex, =, (, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {, binIndex, =]
[(, int, ), (, fraction, *, bins, ), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -]
[), ;, if, (, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =]
[(, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, )]
[(, binIndex, >=, bins, ), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, )]
[), {, binIndex, =, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (]
[=, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;]
[=, bins, -, 1, ;, }, }, HistogramBin, bin, =, (, HistogramBin, ), binList, ., get, (, binIndex, ), ;]
[(, HistogramBin, ), binList, ., get, (, binIndex, ), ;, bin, ., incrementCount, (, ), ;, }, Map, map, =]
[get, (, binIndex, ), ;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;]
[get, (, binIndex, ), ;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;]
[;, bin, ., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (]
[., incrementCount, (, ), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,]
[), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,, key, ), ;]
[), ;, }, Map, map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,, key, ), ;]
[map, =, new, HashMap, (, ), ;, map, ., put, (, "key", ,, key, ), ;, map, ., put, (]
[new, HashMap, (, ), ;, map, ., put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,]
[), ;, map, ., put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;]
[), ;, map, ., put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;]
[put, (, "key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (]
["key", ,, key, ), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,]
[), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (]
[), ;, map, ., put, (, "bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (]
["bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;]
["bins", ,, binList, ), ;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;]
[;, map, ., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (]
[., put, (, "values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (, "bin width", ,]
["values.length", ,, new, Integer, (, values, ., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (]
[(, values, ., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;]
[(, values, ., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;]
[(, values, ., length, ), ), ;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;]
[;, map, ., put, (, "bin width", ,, new, Double, (, binWidth, ), ), ;, this, ., list, ., add, (]
[list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (]
[list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (]
[list, ., add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (]
[add, (, map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==]
[map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[map, ), ;, }, private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[private, double, getMinimum, (, double, [, ], values, ), {, if, (, values, ==, null, ||, values, ., length, <]
[double, [, ], values, ), {, if, (, values, ==, null, ||, values, ., length, <, 1, ), {, throw]
[values, ), {, if, (, values, ==, null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (]
[null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =]
[null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =]
[throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =]
[IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;]
[IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;]
["Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <]
["Null or zero length 'values' argument.", ), ;, }, double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <]
[double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[double, min, =, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, []
[=, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <]
[i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =]
[length, ;, i, ++, ), {, if, (, values, [, i, ], <, min, ), {, min, =, values, []
[if, (, values, [, i, ], <, min, ), {, min, =, values, [, i, ], ;, }, }, return]
[], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (]
[], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (]
[], ;, }, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (]
[}, }, return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==]
[return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[return, min, ;, }, private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==, null, ||]
[private, double, getMaximum, (, double, [, ], values, ), {, if, (, values, ==, null, ||, values, ., length, <]
[double, [, ], values, ), {, if, (, values, ==, null, ||, values, ., length, <, 1, ), {, throw]
[values, ), {, if, (, values, ==, null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (]
[null, ||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -]
[||, values, ., length, <, 1, ), {, throw, new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -]
[new, IllegalArgumentException, (, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =]
[(, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;]
[(, "Null or zero length 'values' argument.", ), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;]
[), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, double, max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <]
[max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[max, =, -, Double, ., MAX_VALUE, ;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, []
[=, 0, ;, i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >]
[i, <, values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =]
[values, ., length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =]
[length, ;, i, ++, ), {, if, (, values, [, i, ], >, max, ), {, max, =, values, []
[if, (, values, [, i, ], >, max, ), {, max, =, values, [, i, ], ;, }, }, return]
[[, i, ], ;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =]
[;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map, )]
[;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map, )]
[;, }, }, return, max, ;, }, List, getBins, (, int, series, ), {, Map, map, =, (, Map, )]
[}, List, getBins, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[{, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, List, )]
[{, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, List, )]
[(, Map, ), this, ., list, ., get, (, series, ), ;, return, (, List, ), map, ., get, (]
[), map, ., get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =]
[get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, )]
[get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, )]
[get, (, "bins", ), ;, }, private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, )]
[private, int, getTotal, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (]
[Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Integer, )]
[Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Integer, )]
[Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Integer, ), map, ., get, (]
["values.length", ), ), ., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =]
[., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, )]
[., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, )]
[., intValue, (, ), ;, }, private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, )]
[private, double, getBinWidth, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (]
[Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Double, )]
[Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Double, )]
[Map, ), this, ., list, ., get, (, series, ), ;, return, (, (, Double, ), map, ., get, (]
[map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return]
[map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return]
[map, ., get, (, "bin width", ), ), ., doubleValue, (, ), ;, }, public, int, getSeriesCount, (, ), {, return]
[this, ., list, ., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =]
[., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, )]
[., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, )]
[., size, (, ), ;, }, public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, )]
[public, Comparable, getSeriesKey, (, int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (]
[int, series, ), {, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return]
[{, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, Comparable, )]
[{, Map, map, =, (, Map, ), this, ., list, ., get, (, series, ), ;, return, (, Comparable, )]
[(, Map, ), this, ., list, ., get, (, series, ), ;, return, (, Comparable, ), map, ., get, (]
[(, Comparable, ), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, ), {, return]
[(, Comparable, ), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, ), {, return]
[), map, ., get, (, "key", ), ;, }, public, int, getItemCount, (, int, series, ), {, return, getBins, (]
[., size, (, ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, List, bins, =]
[(, ), ;, }, public, Number, getX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (]
[getX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (]
[(, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =]
[(, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (]
[(, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (, bin, ., getStartBoundary, (, ), +]
[(, HistogramBin, ), bins, ., get, (, item, ), ;, double, x, =, (, bin, ., getStartBoundary, (, ), +]
[item, ), ;, double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /]
[double, x, =, (, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2., ;, return]
[(, bin, ., getStartBoundary, (, ), +, bin, ., getEndBoundary, (, ), ), /, 2., ;, return, new, Double, (]
[Double, (, x, ), ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, List, bins, =]
[x, ), ;, }, public, Number, getY, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (]
[getY, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (]
[(, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, total, =]
[), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, double, total, =, getTotal, (]
[HistogramBin, ), bins, ., get, (, item, ), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =]
[bins, ., get, (, item, ), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (]
[), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (]
[), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (]
[), ;, double, total, =, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (]
[=, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this, ., type, ==]
[=, getTotal, (, series, ), ;, double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this, ., type, ==]
[double, binWidth, =, getBinWidth, (, series, ), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {, return]
[getBinWidth, (, series, ), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (]
[getBinWidth, (, series, ), ;, if, (, this, ., type, ==, HistogramType, ., FREQUENCY, ), {, return, new, Double, (]
[HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (]
[HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (]
[HistogramType, ., FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (]
[{, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (, this, ., type, ==]
[{, return, new, Double, (, bin, ., getCount, (, ), ), ;, }, else, if, (, this, ., type, ==]
[., getCount, (, ), ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return]
[), ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (]
[), ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (]
[), ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (]
[(, this, ., type, ==, HistogramType, ., RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /]
[RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (]
[RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (]
[RELATIVE_FREQUENCY, ), {, return, new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (]
[new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (, this, ., type, ==]
[new, Double, (, bin, ., getCount, (, ), /, total, ), ;, }, else, if, (, this, ., type, ==]
[(, ), /, total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return]
[total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (]
[total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (]
[total, ), ;, }, else, if, (, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (]
[(, this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /]
[this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (]
[this, ., type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (]
[type, ==, HistogramType, ., SCALE_AREA_TO_1, ), {, return, new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *]
[new, Double, (, bin, ., getCount, (, ), /, (, binWidth, *, total, ), ), ;, }, else, {, throw]
[IllegalStateException, (, ), ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, List, bins, =]
[), ;, }, }, public, Number, getStartX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (]
[getStartX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (]
[=, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (]
[getStartBoundary, (, ), ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, List, bins, =]
[), ), ;, }, public, Number, getEndX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (]
[getEndX, (, int, series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[series, ,, int, item, ), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, )]
[), {, List, bins, =, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (]
[=, getBins, (, series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (]
[series, ), ;, HistogramBin, bin, =, (, HistogramBin, ), bins, ., get, (, item, ), ;, return, new, Double, (]
[bin, ., getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return]
[getEndBoundary, (, ), ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (]
[), ), ;, }, public, Number, getStartY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[getY, (, series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return]
[series, ,, item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (]
[item, ), ;, }, public, Number, getEndY, (, int, series, ,, int, item, ), {, return, getY, (, series, ,]
[{, return, getY, (, series, ,, item, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[{, return, getY, (, series, ,, item, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[getY, (, series, ,, item, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[item, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =]
[if, (, !, (, obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, )]
[obj, instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (]
[instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !]
[instanceof, HistogramDataset, ), ), {, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !]
[{, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., type, ,]
[}, HistogramDataset, that, =, (, HistogramDataset, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., type, ,]
[obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !]
[., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., type, ,, that, ., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,]
[., type, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., list, ,, that, ., list, ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =, (, HistogramDataset, )]
[;, }, return, true, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =, (, HistogramDataset, )]
[(, ), throws, CloneNotSupportedException, {, HistogramDataset, clone, =, (, HistogramDataset, ), super, ., clone, (, ), ;, int, seriesCount, =]
[{, HistogramDataset, clone, =, (, HistogramDataset, ), super, ., clone, (, ), ;, int, seriesCount, =, getSeriesCount, (, ), ;]
[{, HistogramDataset, clone, =, (, HistogramDataset, ), super, ., clone, (, ), ;, int, seriesCount, =, getSeriesCount, (, ), ;]
[(, HistogramDataset, ), super, ., clone, (, ), ;, int, seriesCount, =, getSeriesCount, (, ), ;, clone, ., list, =]
[), ;, int, seriesCount, =, getSeriesCount, (, ), ;, clone, ., list, =, new, java, ., util, ., ArrayList, (]
[;, clone, ., list, =, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =]
[., list, =, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;]
[., list, =, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;]
[=, new, java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <]
[java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;]
[java, ., util, ., ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;]
[ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {]
[ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {]
[ArrayList, (, seriesCount, ), ;, for, (, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (]
[=, 0, ;, i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (]
[i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, )]
[i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, )]
[i, <, seriesCount, ;, i, ++, ), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, )]
[), {, clone, ., list, ., add, (, new, HashMap, (, (, Map, ), this, ., list, ., get, (]
[(, new, HashMap, (, (, Map, ), this, ., list, ., get, (, i, ), ), ), ;, }, return]
