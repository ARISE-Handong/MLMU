[private, AttributedStringUtilities, (, ), {, }, public, static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (]
[private, AttributedStringUtilities, (, ), {, }, public, static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (]
[(, ), {, }, public, static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (, s1, ==]
[public, static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (, s1, ==, null, ), {, return]
[static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (, s1, ==, null, ), {, return, (]
[static, boolean, equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (, s1, ==, null, ), {, return, (]
[equal, (, AttributedString, s1, ,, AttributedString, s2, ), {, if, (, s1, ==, null, ), {, return, (, s2, ==]
[s2, ), {, if, (, s1, ==, null, ), {, return, (, s2, ==, null, ), ;, }, if, (]
[s2, ), {, if, (, s1, ==, null, ), {, return, (, s2, ==, null, ), ;, }, if, (]
[{, if, (, s1, ==, null, ), {, return, (, s2, ==, null, ), ;, }, if, (, s2, ==]
[==, null, ), {, return, (, s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return]
[s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =]
[s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =]
[==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =]
[==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =]
[it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, ., getIterator, (, ), ;, char, c1, =]
[it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, ., getIterator, (, ), ;, char, c1, =]
[it2, =, s2, ., getIterator, (, ), ;, char, c1, =, it1, ., first, (, ), ;, char, c2, =]
[it2, =, s2, ., getIterator, (, ), ;, char, c1, =, it1, ., first, (, ), ;, char, c2, =]
[c1, =, it1, ., first, (, ), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =]
[first, (, ), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while, (]
[first, (, ), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while, (]
[), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while, (, c1, !=]
[), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while, (, c1, !=]
[(, ), ;, int, start, =, 0, ;, while, (, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =]
[(, ), ;, int, start, =, 0, ;, while, (, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =]
[(, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =]
[(, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =]
[int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (]
[int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (]
[=, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (, limit1, !=]
[(, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, ), {, return]
[it2, ., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, ), {, return, false, ;, }, Map, m1, =]
[it2, ., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, ), {, return, false, ;, }, Map, m1, =]
[!=, limit2, ), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =]
[!=, limit2, ), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =]
[Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (]
[m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (, !]
[m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (, !]
[getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (, !, m1, ., equals, (]
[m2, =, it2, ., getAttributes, (, ), ;, if, (, !, m1, ., equals, (, m2, ), ), {, return]
[if, (, !, m1, ., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i, =]
[!, m1, ., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;]
[!, m1, ., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;]
[., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <]
[(, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;]
[(, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;]
[false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, ), {, if, (]
[false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, ), {, if, (, c1, !=]
[i, =, start, ;, i, <, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return]
[;, i, <, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }]
[<, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =]
[<, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =]
[{, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;]
[(, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =]
[(, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =]
[false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }]
[}, c1, =, it1, ., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =]
[., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return]
[., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return]
[(, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return, c2, ==]
[(, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return, c2, ==]
