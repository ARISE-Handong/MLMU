[=, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr]
[., compiler, =, compiler, ;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr]
[;, this, ., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation]
[=, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =]
[., functionNames, =, functionNames, ;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder]
[;, this, ., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, .]
[=, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;]
[., templateFilename, =, templateFilename, ;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (]
[;, this, ., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {]
[=, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {, TextFormat, ., merge, (]
[., appNameStr, =, appNameStr, ;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {, TextFormat, .]
[;, Instrumentation, ., Builder, builder, =, Instrumentation, ., newBuilder, (, ), ;, try, {, TextFormat, ., merge, (, readable, ,]
[;, try, {, TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler]
[., newBuilder, (, ), ;, try, {, TextFormat, ., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,]
[., merge, (, readable, ,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError]
[,, builder, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR]
[;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this]
[., report, (, JSError, ., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource]
[), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;]
[., make, (, RhinoErrorReporter, ., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this]
[,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this]
[., PARSE_ERROR, ,, "Error reading instrumentation template protobuf at ", +, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, ""]
[), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, ""]
[+, templateFilename, ), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName]
[), ), ;, this, ., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, ""]
[=, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, ""]
[., initCodeSource, =, "", ;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName]
[;, this, ., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this]
[=, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, ""]
[., definedFunctionName, =, "", ;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter]
[;, this, ., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this]
[=, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists]
[., reportFunctionName, =, "", ;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove]
[;, this, ., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList]
[=, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return]
[., reportFunctionExitName, =, "", ;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, )]
[;, this, ., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }]
[=, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder]
[., appNameSetter, =, "", ;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template]
[;, this, ., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder, ., build]
[=, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder, ., build, (, ), ;, StringBuilder]
[., declarationsToRemove, =, Lists, ., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder, ., build, (, )]
[;, return, ;, }, Instrumentation, template, =, builder, ., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, )]
[., newArrayList, (, ), ;, return, ;, }, Instrumentation, template, =, builder, ., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =]
[;, StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :, template, ., getInitList, (, ), )]
[., build, (, ), ;, StringBuilder, initCodeSourceBuilder, =, new, StringBuilder, (, ), ;, for, (, String, line, :, template, .]
[;, for, (, String, line, :, template, ., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (, line, ), .]
[), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder]
[., getInitList, (, ), ), {, initCodeSourceBuilder, ., append, (, line, ), ., append, (, "\n", ), ;, }, this]
[;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (]
[., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName]
[., append, (, line, ), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (]
[), ., append, (, "\n", ), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, .]
[), ;, }, this, ., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined]
[=, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName]
[., initCodeSource, =, initCodeSourceBuilder, ., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this]
[;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, )]
[., toString, (, ), ;, this, ., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template]
[=, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName]
[., definedFunctionName, =, template, ., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this]
[;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, )]
[., getReportDefined, (, ), ;, this, ., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template]
[=, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter]
[., reportFunctionName, =, template, ., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this]
[;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, )]
[., getReportCall, (, ), ;, this, ., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template]
[=, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove]
[., reportFunctionExitName, =, template, ., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this]
[;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (, template]
[., getReportExit, (, ), ;, this, ., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList]
[=, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, )]
[., appNameSetter, =, template, ., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList]
[;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, ), ), ;, }, @, Override, public]
[., getAppNameSetter, (, ), ;, this, ., declarationsToRemove, =, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, ), ), ;]
[=, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, ), ), ;, }, @, Override, public, void, process, (, Node]
[., declarationsToRemove, =, ImmutableList, ., copyOf, (, template, ., getDeclarationToRemoveList, (, ), ), ;, }, @, Override, public, void, process]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =, null, ;]
[., copyOf, (, template, ., getDeclarationToRemoveList, (, ), ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, initCode, =, null]
[., getDeclarationToRemoveList, (, ), ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, if, (, !, initCodeSource, ., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +]
[), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=]
[), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=]
[., isEmpty, (, ), ), {, Node, initCodeRoot, =, compiler, ., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;]
[;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot, .]
[., parseSyntheticCode, (, templateFilename, +, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (]
[,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode]
[+, ":init", ,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, )]
[,, initCodeSource, ), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode]
[), ;, if, (, initCodeRoot, !=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot]
[), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse]
[&&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else]
[!=, null, &&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;]
[&&, initCodeRoot, ., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else]
[), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse]
[!=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal]
[., getFirstChild, (, ), !=, null, ), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return]
[), {, initCode, =, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse]
[=, initCodeRoot, ., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,]
[;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove]
[., removeChildren, (, ), ;, }, else, {, return, ;, }, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, .]
[., traverse, (, compiler, ,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, root, ,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback]
[,, new, RemoveCallback, (, declarationsToRemove, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !]
[;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, .]
[., traverse, (, compiler, ,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, ., isEmpty, (]
[,, root, ,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node]
[,, new, InstrumentCallback, (, ), ), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =]
[), ;, if, (, !, appNameSetter, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, appNameSetter, ), ,]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call]
[., call, (, IR, ., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;, call, .]
[,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., name, (, appNameSetter, ), ,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, .]
[), ,, IR, ., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (]
[., string, (, appNameStr, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr]
[), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult]
[;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, )]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion]
[., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler]
[), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null]
[;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, .]
[., exprResult, (, call, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (]
[), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler]
[;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null]
[., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, addingRoot, ., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=]
[;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, .]
[., addChildrenToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler]
[;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot]
[., reportCodeChange, (, ), ;, }, if, (, initCode, !=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (]
[), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;, compiler]
[!=, null, ), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, )]
[), {, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;, compiler]
[;, addingRoot, ., addChildrenToFront, (, initCode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, class, RemoveCallback]
[., getNodeForCodeInsertion, (, null, ), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, addingRoot, ., addChildrenToFront, (, initCode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, class]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, class, RemoveCallback, extends, AbstractPostOrderCallback, {, private, final, List, <]
[., addChildrenToFront, (, initCode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, class, RemoveCallback, extends, AbstractPostOrderCallback]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, static, class, RemoveCallback, extends, AbstractPostOrderCallback, {, private, final, List]
[;, }, }, private, static, class, RemoveCallback, extends, AbstractPostOrderCallback, {, private, final, List, <, String, >, removable, ;, RemoveCallback, (]
[., reportCodeChange, (, ), ;, }, }, private, static, class, RemoveCallback, extends, AbstractPostOrderCallback, {, private, final, List, <, String, >]
[=, removable, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., removable, =, removable, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (]
[., isVarDeclaration, (, n, ), ), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), )]
[), ), {, if, (, removable, ., contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild]
[), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {, parent]
[., contains, (, n, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, if, (]
[), ), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {]
[., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren]
[;, if, (, !, parent, ., hasChildren, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent]
[., removeChild, (, n, ), ;, if, (, !, parent, ., hasChildren, (, ), ), {, parent, ., getParent, (]
[), ;, if, (, !, parent, ., hasChildren, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (]
[), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, }, }, }, }, private, class]
[), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, }, }, }, }, private, class]
[., hasChildren, (, ), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, }, }, }]
[;, }, }, }, }, }, private, class, InstrumentReturns, implements, NodeTraversal, ., Callback, {, private, final, int, functionId, ;, InstrumentReturns]
[., removeChild, (, parent, ), ;, }, }, }, }, }, private, class, InstrumentReturns, implements, NodeTraversal, ., Callback, {, private]
[., getParent, (, ), ., removeChild, (, parent, ), ;, }, }, }, }, }, private, class, InstrumentReturns, implements, NodeTraversal]
[), ;, }, }, }, }, }, private, class, InstrumentReturns, implements, NodeTraversal, ., Callback, {, private, final, int, functionId, ;]
[=, functionId, ;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,, this]
[., functionId, =, functionId, ;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body]
[;, }, void, process, (, Node, body, ), {, NodeTraversal, ., traverse, (, compiler, ,, body, ,, this, ), ;]
[;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =]
[., traverse, (, compiler, ,, body, ,, this, ), ;, if, (, !, allPathsReturn, (, body, ), ), {, Node]
[,, body, ,, this, ), ;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (]
[,, this, ), ;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;]
[), ;, if, (, !, allPathsReturn, (, body, ), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr]
[), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body]
[), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body]
[), ), {, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToBack, (, expr, ), ;, compiler, .]
[;, body, ., addChildToBack, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, @, Override, public, boolean]
[., exprResult, (, call, ), ;, body, ., addChildToBack, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, body, ., addChildToBack, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, @, Override, public]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n]
[., addChildToBack, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[., reportCodeChange, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., isFunction, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), {, return, ;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, )]
[), {, return, ;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n, ., removeFirstChild, (, )]
[., isReturn, (, ), ), {, return, ;, }, Node, call, =, newReportFunctionExitNode, (, ), ;, Node, returnRhs, =, n]
[;, Node, returnRhs, =, n, ., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack]
[;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (]
[., removeFirstChild, (, ), ;, if, (, returnRhs, !=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }]
[), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange]
[!=, null, ), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;, compiler]
[), {, call, ., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange]
[;, }, n, ., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (]
[., addChildToBack, (, returnRhs, ), ;, }, n, ., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ;, }, n, ., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call]
[., addChildToFront, (, call, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, .]
[;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionExitName]
[., reportCodeChange, (, ), ;, }, private, Node, newReportFunctionExitNode, (, ), {, Node, call, =, IR, ., call, (, IR]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn, (]
[., call, (, IR, ., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;, call, .]
[,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., name, (, reportFunctionExitName, ), ,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, .]
[), ,, IR, ., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn]
[., number, (, functionId, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return, call]
[), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean]
[;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block]
[,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new]
[., FREE_CALL, ,, true, ), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa]
[), ;, return, call, ;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (]
[;, }, private, boolean, allPathsReturn, (, Node, block, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,]
[;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (]
[,, false, ,, false, ), ;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg]
[,, false, ), ;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa]
[), ;, cfa, ., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg]
[;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =, cfg, ., getImplicitReturn, (]
[., process, (, null, ,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;]
[,, block, ), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =, cfg]
[), ;, ControlFlowGraph, <, Node, >, cfg, =, cfa, ., getCfg, (, ), ;, Node, returnPathsParent, =, cfg, ., getImplicitReturn]
[;, Node, returnPathsParent, =, cfg, ., getImplicitReturn, (, ), ., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,]
[., getCfg, (, ), ;, Node, returnPathsParent, =, cfg, ., getImplicitReturn, (, ), ., getValue, (, ), ;, for, (]
[;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg, ., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node]
[., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg, ., getDirectedPredNodes, (, returnPathsParent]
[., getImplicitReturn, (, ), ., getValue, (, ), ;, for, (, DiGraphNode, <, Node, ,, Branch, >, pred, :, cfg]
[), {, Node, n, =, pred, ., getValue, (, ), ;, if, (, !, n, ., isReturn, (, ), )]
[., getDirectedPredNodes, (, returnPathsParent, ), ), {, Node, n, =, pred, ., getValue, (, ), ;, if, (, !, n]
[), ), {, Node, n, =, pred, ., getValue, (, ), ;, if, (, !, n, ., isReturn, (, )]
[;, if, (, !, n, ., isReturn, (, ), ), {, return, false, ;, }, }, return, true, ;, }]
[., getValue, (, ), ;, if, (, !, n, ., isReturn, (, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, }, private, class, InstrumentCallback, extends, AbstractPostOrderCallback, {, @, Override]
[), {, return, false, ;, }, }, return, true, ;, }, }, private, class, InstrumentCallback, extends, AbstractPostOrderCallback, {, @, Override]
[., isReturn, (, ), ), {, return, false, ;, }, }, return, true, ;, }, }, private, class, InstrumentCallback, extends]
[;, }, }, return, true, ;, }, }, private, class, InstrumentCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[;, }, }, private, class, InstrumentCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <, 0]
[), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if, (, id, <, 0]
[., isFunction, (, ), ), {, return, ;, }, int, id, =, functionNames, ., getFunctionId, (, n, ), ;, if]
[;, if, (, id, <, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), )]
[., getFunctionId, (, n, ), ;, if, (, id, <, 0, ), {, return, ;, }, if, (, !, reportFunctionName]
[), ;, if, (, id, <, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, )]
[), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =, n, .]
[<, 0, ), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =]
[), {, return, ;, }, if, (, !, reportFunctionName, ., isEmpty, (, ), ), {, Node, body, =, n, .]
[), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node]
[), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node]
[., isEmpty, (, ), ), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext]
[;, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id]
[., getNext, (, ), ;, Node, call, =, IR, ., call, (, IR, ., name, (, reportFunctionName, ), ,, IR]
[., getNext, (, ), ., getNext, (, ), ;, Node, call, =, IR, ., call, (, IR, ., name, (]
[., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, Node, call, =, IR, ., call, (]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call]
[., call, (, IR, ., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, .]
[,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., name, (, reportFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, .]
[), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (]
[., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr]
[), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult]
[;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler, .]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;]
[,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, )]
[., FREE_CALL, ,, true, ), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (]
[), ;, Node, expr, =, IR, ., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler]
[;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, .]
[., exprResult, (, call, ), ;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ;, body, ., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName]
[;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body]
[., addChildToFront, (, expr, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node]
[;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =, n, ., getFirstChild, (, )]
[., reportCodeChange, (, ), ;, }, if, (, !, reportFunctionExitName, ., isEmpty, (, ), ), {, Node, body, =, n]
[), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, (]
[), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, (]
[., isEmpty, (, ), ), {, Node, body, =, n, ., getFirstChild, (, ), ., getNext, (, ), ., getNext]
[;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body, ), ;, }, if, (, !, definedFunctionName, .]
[., getNext, (, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body, ), ;, }, if]
[., getNext, (, ), ., getNext, (, ), ;, (, new, InstrumentReturns, (, id, ), ), ., process, (, body]
[., getFirstChild, (, ), ., getNext, (, ), ., getNext, (, ), ;, (, new, InstrumentReturns, (, id, ), )]
[;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR]
[., process, (, body, ), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =]
[), ., process, (, body, ), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call]
[), ), ., process, (, body, ), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node]
[), ;, }, if, (, !, definedFunctionName, ., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (]
[), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (]
[., isEmpty, (, ), ), {, Node, call, =, IR, ., call, (, IR, ., name, (, definedFunctionName, ), ,]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call]
[., call, (, IR, ., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, .]
[,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[., name, (, definedFunctionName, ), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, .]
[), ,, IR, ., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (]
[., number, (, id, ), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr]
[), ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr]
[;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, .]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;]
[,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if]
[., FREE_CALL, ,, true, ), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null]
[), ;, Node, expr, =, NodeUtil, ., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil]
[;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t]
[., newExpr, (, call, ), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[), ;, Node, addingRoot, =, null, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =]
[;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;]
[), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;]
[., isFunctionDeclaration, (, n, ), ), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, .]
[), ), {, JSModule, module, =, t, ., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, )]
[;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {]
[., getModule, (, ), ;, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (, expr, )]
[=, compiler, ., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild]
[;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor]
[., getNodeForCodeInsertion, (, module, ), ;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n]
[), ;, addingRoot, ., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node]
[;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor, :, n, ., getAncestors, (, ), )]
[., addChildToFront, (, expr, ), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor, :, n]
[), ;, }, else, {, Node, beforeChild, =, n, ;, for, (, Node, ancestor, :, n, ., getAncestors, (, )]
[;, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (]
[), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type]
[., getAncestors, (, ), ), {, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, ==, Token]
[;, if, (, type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;]
[., getType, (, ), ;, if, (, type, ==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {]
[), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,]
[||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }]
[==, Token, ., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild]
[||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }]
[., BLOCK, ||, type, ==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor]
[), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,]
[==, Token, ., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, .]
[), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,]
[., SCRIPT, ), {, addingRoot, =, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (]
[=, ancestor, ;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;]
[;, break, ;, }, beforeChild, =, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;, }, compiler]
[=, ancestor, ;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[;, }, addingRoot, ., addChildBefore, (, expr, ,, beforeChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., addChildBefore, (, expr, ,, beforeChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[,, beforeChild, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[;, }, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }, }]
