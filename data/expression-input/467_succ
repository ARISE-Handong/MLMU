[,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =, compiler, ;]
[), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =, compiler, ;, this, .]
[=, compiler, ;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, )]
[., compiler, =, compiler, ;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (]
[;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions]
[=, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions, ., checkState, (, false]
[., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions, ., checkState]
[;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions, ., checkState, (, false, ,, "normalizeNodeType constraints violated"]
[), {, Preconditions, ., checkState, (, false, ,, "normalizeNodeType constraints violated", ), ;, }, }, @, Override, public, void, process, (, Node]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, checkOnly, )]
[., checkState, (, false, ,, "normalizeNodeType constraints violated", ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[,, "normalizeNodeType constraints violated", ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, checkOnly]
[), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse]
[;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new]
[), ;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root]
[!=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if]
[), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root]
[;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations, (]
[., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, )]
[,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse]
[,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (, compiler]
[), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private]
[!=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private]
[;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (, Node]
[., traverse, (, compiler, ,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private, void, normalizeNodeTypes, (]
[,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {]
[,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (]
[), ;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (]
[;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, .]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, .]
[;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (]
[;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==]
[=, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==, n, )]
[), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==, n, ), ;, normalizeNodeTypes, (, child, ), ;]
[., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==, n, ), ;, normalizeNodeTypes]
[;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, .]
[., checkState, (, child, ., getParent, (, ), ==, n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private]
[), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil]
[==, n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if]
[., getParent, (, ), ==, n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node]
[), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil]
[;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&]
[), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, )]
[), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[&&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[&&, !, n, ., isLabel, (, ), &&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c]
[., isControlStructure, (, n, ), &&, !, n, ., isLabel, (, ), &&, !, n, ., isSwitch, (, ), )]
[), &&, !, n, ., isLabel, (, ), &&, !, n, ., isSwitch, (, ), ), {, for, (, Node]
[&&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[&&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[., isLabel, (, ), &&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, .]
[), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c]
[., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, )]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,]
[;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, )]
[=, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !]
[), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, ., isBlock, (, ), )]
[., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, .]
[), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (]
[&&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (]
[., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =, IR]
[,, c, ), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, )]
[), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref]
[), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (]
[), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (]
[., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;]
[;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {]
[., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, .]
[., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if]
[), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), )]
[;, if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else]
[., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {, newBlock, .]
[,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, )]
[), ;, if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }]
[), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }]
[), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }]
[., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (]
[;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }, c, =, newBlock, ;, reportChange, (, ), ;]
[., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }, c, =, newBlock]
[), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }, c, =, newBlock, ;, reportChange, (, )]
[;, }, c, =, newBlock, ;, reportChange, (, ), ;, }, }, }, }, static, class, PrepareAnnotations, implements, NodeTraversal, .]
[., setWasEmptyNode, (, true, ), ;, }, c, =, newBlock, ;, reportChange, (, ), ;, }, }, }, }, static]
[), ;, }, c, =, newBlock, ;, reportChange, (, ), ;, }, }, }, }, static, class, PrepareAnnotations, implements, NodeTraversal]
[=, newBlock, ;, reportChange, (, ), ;, }, }, }, }, static, class, PrepareAnnotations, implements, NodeTraversal, ., Callback, {, PrepareAnnotations]
[;, reportChange, (, ), ;, }, }, }, }, static, class, PrepareAnnotations, implements, NodeTraversal, ., Callback, {, PrepareAnnotations, (, )]
[;, }, }, }, }, static, class, PrepareAnnotations, implements, NodeTraversal, ., Callback, {, PrepareAnnotations, (, ), {, }, @, Override]
[), {, normalizeObjectLiteralAnnotations, (, n, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[., isObjectLit, (, ), ), {, normalizeObjectLiteralAnnotations, (, n, ), ;, }, return, true, ;, }, @, Override, public, void]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers]
[., getType, (, ), ), {, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token]
[:, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (, n, ,, parent, ), ;]
[., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (, n, ,, parent]
[;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }, private]
[), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }]
[:, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {]
[., FUNCTION, :, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit]
[;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit]
[,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {, Preconditions, ., checkState, (]
[), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {, Preconditions, ., checkState, (, objlit, .]
[;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., checkState, (, objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, )]
[), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[., isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value]
[;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, )]
[;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,, value, ), ;]
[., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key]
[;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {]
[., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (]
[;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isCall, (, )]
[,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (]
[,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (, n, .]
[), ;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isCall, (]
[;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), )]
[., checkState, (, n, ., isCall, (, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if]
[), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, )]
[., isCall, (, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, .]
[;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {, n, ., putBooleanProp, (]
[), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (]
[), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (]
[., isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if]
[), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName]
[;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), )]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&, "eval"]
[,, true, ), ;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first, ., getString]
[., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first]
[), ;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, )]
[), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node]
[&&, "eval", ., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL]
[., isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp]
[), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node]
[., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true]
[), ), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (]
[., getString, (, ), ), ), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, }, }]
[;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, .]
[., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node]
[,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState]
[., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions]
[), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n]
[;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, )]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&]
[), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (]
[., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (]
[), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, )]
[&&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), )]
[!=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (]
[., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (]
[&&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), )]
[), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, )]
[., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent]
[., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions]
[), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (, Node]
[., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n]
[;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node]
[., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,]
[), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (]
[==, n, ), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void]
[., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }]
[), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (]
[;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {, Preconditions, .]
[., putBooleanProp, (, Node, ., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,]
[,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, )]
[., IS_DISPATCHER, ,, true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node]
[), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {, Preconditions]
[;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {, value, .]
[., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&]
[), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {, value]
[., isObjectLit, (, ), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (]
[), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }, }, }, }]
[&&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }]
[!=, null, &&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), )]
[., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (, key, .]
[&&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }]
[), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }, }, }, }]
[., isFunction, (, ), ), {, value, ., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }, }, }]
[;, }, }, }, }]
[., setJSDocInfo, (, key, ., getJSDocInfo, (, ), ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., getJSDocInfo, (, ), ), ;, }, }, }, }]
