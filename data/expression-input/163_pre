[BigInteger, ;, public, final, class, Fraction, extends, Number, implements, Comparable, <, Fraction, >, {, private, static, final, long, serialVersionUID, =]
[implements, Comparable, <, Fraction, >, {, private, static, final, long, serialVersionUID, =, 65382027393090L, ;, public, static, final, Fraction, ZERO, =]
[Fraction, >, {, private, static, final, long, serialVersionUID, =, 65382027393090L, ;, public, static, final, Fraction, ZERO, =, new, Fraction, (]
[{, private, static, final, long, serialVersionUID, =, 65382027393090L, ;, public, static, final, Fraction, ZERO, =, new, Fraction, (, 0, ,]
[public, static, final, Fraction, ZERO, =, new, Fraction, (, 0, ,, 1, ), ;, public, static, final, Fraction, ONE, =]
[Fraction, ZERO, =, new, Fraction, (, 0, ,, 1, ), ;, public, static, final, Fraction, ONE, =, new, Fraction, (]
[=, new, Fraction, (, 0, ,, 1, ), ;, public, static, final, Fraction, ONE, =, new, Fraction, (, 1, ,]
[public, static, final, Fraction, ONE, =, new, Fraction, (, 1, ,, 1, ), ;, public, static, final, Fraction, ONE_HALF, =]
[Fraction, ONE, =, new, Fraction, (, 1, ,, 1, ), ;, public, static, final, Fraction, ONE_HALF, =, new, Fraction, (]
[=, new, Fraction, (, 1, ,, 1, ), ;, public, static, final, Fraction, ONE_HALF, =, new, Fraction, (, 1, ,]
[public, static, final, Fraction, ONE_HALF, =, new, Fraction, (, 1, ,, 2, ), ;, public, static, final, Fraction, ONE_THIRD, =]
[Fraction, ONE_HALF, =, new, Fraction, (, 1, ,, 2, ), ;, public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (]
[=, new, Fraction, (, 1, ,, 2, ), ;, public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,]
[public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,, 3, ), ;, public, static, final, Fraction, TWO_THIRDS, =]
[Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,, 3, ), ;, public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (]
[=, new, Fraction, (, 1, ,, 3, ), ;, public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,]
[public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,, 3, ), ;, public, static, final, Fraction, ONE_QUARTER, =]
[Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,, 3, ), ;, public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (]
[=, new, Fraction, (, 2, ,, 3, ), ;, public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,]
[public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,, 4, ), ;, public, static, final, Fraction, TWO_QUARTERS, =]
[Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,, 4, ), ;, public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (]
[=, new, Fraction, (, 1, ,, 4, ), ;, public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,]
[public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,, 4, ), ;, public, static, final, Fraction, THREE_QUARTERS, =]
[Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,, 4, ), ;, public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (]
[=, new, Fraction, (, 2, ,, 4, ), ;, public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,]
[public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,, 4, ), ;, public, static, final, Fraction, ONE_FIFTH, =]
[Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,, 4, ), ;, public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (]
[=, new, Fraction, (, 3, ,, 4, ), ;, public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,]
[public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,, 5, ), ;, public, static, final, Fraction, TWO_FIFTHS, =]
[Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,, 5, ), ;, public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (]
[=, new, Fraction, (, 1, ,, 5, ), ;, public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,]
[public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,, 5, ), ;, public, static, final, Fraction, THREE_FIFTHS, =]
[Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,, 5, ), ;, public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (]
[=, new, Fraction, (, 2, ,, 5, ), ;, public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,]
[public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,, 5, ), ;, public, static, final, Fraction, FOUR_FIFTHS, =]
[Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,, 5, ), ;, public, static, final, Fraction, FOUR_FIFTHS, =, new, Fraction, (]
[=, new, Fraction, (, 3, ,, 5, ), ;, public, static, final, Fraction, FOUR_FIFTHS, =, new, Fraction, (, 4, ,]
[4, ,, 5, ), ;, private, final, int, numerator, ;, private, final, int, denominator, ;, private, transient, int, hashCode, =]
[int, numerator, ;, private, final, int, denominator, ;, private, transient, int, hashCode, =, 0, ;, private, transient, String, toString, =]
[;, private, transient, int, hashCode, =, 0, ;, private, transient, String, toString, =, null, ;, private, transient, String, toProperString, =]
[toProperString, =, null, ;, private, Fraction, (, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;]
[toProperString, =, null, ;, private, Fraction, (, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;]
[private, Fraction, (, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;, this, ., numerator, =]
[(, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;, this, ., numerator, =, numerator, ;]
[(, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;, this, ., numerator, =, numerator, ;]
[,, final, int, denominator, ), {, super, (, ), ;, this, ., numerator, =, numerator, ;, this, ., denominator, =]
[., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (]
[., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (]
[=, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==]
[public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw]
[getFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[{, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <]
[0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (]
[0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (]
[0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (]
[{, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==]
[{, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==]
[(, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||]
[(, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||]
[), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==]
[), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==]
[<, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw]
[{, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }]
[., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =]
[MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -]
[denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;]
[Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -]
[throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, return]
[(, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, return, new, Fraction, (]
[), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,]
[public, static, Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int, denominator, ), {, if, (]
[public, static, Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int, denominator, ), {, if, (]
[Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int, denominator, ), {, if, (, denominator, ==]
[int, whole, ,, final, int, numerator, ,, final, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw]
[final, int, numerator, ,, final, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[{, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <]
[==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, throw]
[{, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (]
[), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (]
[), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (]
[}, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <]
[<, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <, 0, ), {, throw]
[{, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <, 0, ), {, throw, new, ArithmeticException, (]
[if, (, numerator, <, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (]
[if, (, numerator, <, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (]
[numerator, <, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <]
[), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {]
[throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =]
[throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =]
[throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =]
[ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =, whole, *]
[), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =, whole, *, (, long, )]
[}, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -]
[(, whole, <, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {]
[<, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =]
[<, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =]
[<, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =]
[), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *]
[=, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, )]
[*, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <]
[;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <]
[numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||]
[numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||]
[whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >]
[whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >]
[+, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw]
[}, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return]
[||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (]
[Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, )]
[MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,]
[numeratorValue, ,, denominator, ), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (]
[numeratorValue, ,, denominator, ), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (]
[denominator, ), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==]
[public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw]
[getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[denominator, ), {, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (]
[{, if, (, denominator, ==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==]
[==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return]
[new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (]
[new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (]
[new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (]
[(, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==]
[(, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==]
[}, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&]
[}, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&]
[if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (]
[if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (]
[numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &]
[), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==]
[ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {]
[}, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=]
[(, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;]
[==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=]
[(, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (]
[(, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (]
[&, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==]
[numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==]
[denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||]
[denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||]
[2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==]
[2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==]
[<, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw]
[{, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }]
[., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =]
[MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -]
[denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;]
[Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -]
[(, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =]
[), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (]
[}, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,]
[-, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;]
[;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=]
[=, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;]
[denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=]
[final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return]
[=, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (]
[(, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,]
[(, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =]
[(, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =]
[(, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =]
[,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <]
[), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?]
[;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?, -]
[public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?, -, 1, :]
[Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?, -, 1, :, 1, ;]
[(, double, value, ), {, final, int, sign, =, value, <, 0, ?, -, 1, :, 1, ;, value, =]
[(, double, value, ), {, final, int, sign, =, value, <, 0, ?, -, 1, :, 1, ;, value, =]
[{, final, int, sign, =, value, <, 0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (]
[value, <, 0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (]
[value, <, 0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (]
[value, <, 0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (]
[0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >]
[0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >]
[:, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||]
[:, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||]
[=, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (]
[value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw]
[if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (]
[Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =]
[(, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, )]
[), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;]
[{, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;, value, -=]
["The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;, value, -=, wholeNumber, ;, int, numer0, =]
[int, wholeNumber, =, (, int, ), value, ;, value, -=, wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =]
[), value, ;, value, -=, wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =]
[wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;, int, denom1, =]
[0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;, int, denom1, =, 0, ;, int, numer2, =]
[1, ;, int, numer1, =, 1, ;, int, denom1, =, 0, ;, int, numer2, =, 0, ;, int, denom2, =]
[1, ;, int, denom1, =, 0, ;, int, numer2, =, 0, ;, int, denom2, =, 0, ;, int, a1, =]
[denom1, =, 0, ;, int, numer2, =, 0, ;, int, denom2, =, 0, ;, int, a1, =, (, int, )]
[numer2, =, 0, ;, int, denom2, =, 0, ;, int, a1, =, (, int, ), value, ;, int, a2, =]
[denom2, =, 0, ;, int, a1, =, (, int, ), value, ;, int, a2, =, 0, ;, double, x1, =]
[a1, =, (, int, ), value, ;, int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =]
[value, ;, int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =]
[value, ;, int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =]
[int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =, value, -]
[double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =, value, -, a1, ;, double, y2, =]
[=, 0, ;, double, y1, =, value, -, a1, ;, double, y2, =, 0, ;, double, delta1, ,, delta2, =]
[=, 0, ;, double, y1, =, value, -, a1, ;, double, y2, =, 0, ;, double, delta1, ,, delta2, =]
[double, y2, =, 0, ;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =]
[;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {]
[delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =]
[delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;]
[Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =]
[;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, )]
[double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (]
[double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (]
[;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (, x1, /]
[=, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;]
[;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =]
[{, delta1, =, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;]
[=, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =]
[=, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =]
[;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -]
[;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -]
[=, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *]
[int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;]
[(, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =]
[(, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =]
[(, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =]
[/, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *]
[), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +]
[x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;]
[y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =]
[y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =]
[y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =]
[y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *]
[x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +]
[a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;]
[y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =]
[y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =]
[=, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, )]
[*, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /]
[numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, )]
[denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;]
[a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =]
[a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =]
[denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (]
[denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (]
[fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -]
[double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;]
[numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =]
[(, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;]
[), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =]
[;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;]
[=, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =]
[., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;]
[(, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =]
[-, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;]
[), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =]
[a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;]
[a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =]
[x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;]
[x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =]
[y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;]
[y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;]
[numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (]
[numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (]
[numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (]
[numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (]
[numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (]
[denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >]
[denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&]
[denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&]
[numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=]
[numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&]
[numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&]
[denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >]
[denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&]
[denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&]
[i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <]
[(, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (]
[(, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (]
[>, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==]
[<=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw]
[denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (]
[<, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return]
[), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (]
[), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (]
[;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (]
[;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (]
[(, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +]
[(, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +]
[==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *]
[{, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, ), *]
[new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, ), *, sign, ,]
[denom0, ), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (]
[denom0, ), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (]
[*, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==]
[), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, ), {, throw]
[public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, str, ==, null, ), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =]
[), {, if, (, str, ==, null, ), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =]
[str, ==, null, ), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (]
[throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (]
[throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (]
[IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=]
[;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return]
[int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return, getFraction, (]
[int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return, getFraction, (]
[., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (]
[;, if, (, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }]
[(, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =]
[(, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =]
[), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (]
[Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (]
[Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (]
[parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >]
[pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =]
[pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =]
[indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (]
[indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (]
[;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (]
[(, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,]
[), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;]
[final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =]
[final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =]
[Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (]
[Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (]
[parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos, +]
[., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;]
[(, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =]
[(, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =]
[), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (]
[str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (]
[str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (]
[substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <]
[1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw]
[pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException, (]
[(, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =]
[(, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =]
[), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (]
["The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,]
[numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =]
[numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =]
[parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (]
[parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (]
[substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (]
[substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (]
[0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +]
[;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return]
[int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (]
[=, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, whole, ,]
[., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,]
[substring, (, pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }]
[pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =]
[pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =]
[), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (]
[whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (]
[whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (]
[numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <]
[;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return]
[}, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (]
[}, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (]
[., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, ., parseInt, (]
['/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,]
[return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int, numer, =]
[return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int, numer, =]
[., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[), ,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (]
[1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,]
[numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =]
[numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =]
[parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (]
[parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (]
[substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (]
[substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (]
[0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +]
[;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return]
[int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (]
[=, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, numer, ,]
[), ), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return]
[;, }, }, public, int, getNumerator, (, ), {, return, numerator, ;, }, public, int, getDenominator, (, ), {, return]
[numerator, ;, }, public, int, getDenominator, (, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return]
[numerator, ;, }, public, int, getDenominator, (, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return]
[int, getDenominator, (, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return, Math, ., abs, (]
[int, getDenominator, (, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return, Math, ., abs, (]
[(, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return, Math, ., abs, (, numerator, %]
[), {, return, Math, ., abs, (, numerator, %, denominator, ), ;, }, public, int, getProperWhole, (, ), {, return]
[), {, return, Math, ., abs, (, numerator, %, denominator, ), ;, }, public, int, getProperWhole, (, ), {, return]
[return, Math, ., abs, (, numerator, %, denominator, ), ;, }, public, int, getProperWhole, (, ), {, return, numerator, /]
[int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue, (, ), {, return]
[int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue, (, ), {, return]
[(, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, /]
[int, intValue, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, long, longValue, (, ), {, return]
[int, intValue, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, long, longValue, (, ), {, return]
[), {, return, numerator, /, denominator, ;, }, @, Override, public, long, longValue, (, ), {, return, (, long, )]
[return, numerator, /, denominator, ;, }, @, Override, public, long, longValue, (, ), {, return, (, long, ), numerator, /]
[), {, return, (, long, ), numerator, /, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return]
[), {, return, (, long, ), numerator, /, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return]
[(, long, ), numerator, /, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, )]
[), numerator, /, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /]
[denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /, (, float, )]
[(, float, ), numerator, /, (, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return]
[(, float, ), numerator, /, (, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return]
[numerator, /, (, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, )]
[(, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator, /]
[denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator, /, (, double, )]
[return, (, double, ), numerator, /, (, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (]
[return, (, double, ), numerator, /, (, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (]
[double, ), numerator, /, (, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==]
[(, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return]
[(, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return]
[), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (]
[}, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (, ZERO, ), ?]
[Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (, ZERO, ), ?, this, :]
[numerator, ==, 0, ), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =]
[0, ), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (]
[0, ), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (]
[equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (]
[), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (]
[final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (, gcd, ==]
[greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return]
[abs, (, numerator, ), ,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return]
[abs, (, numerator, ), ,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return]
[,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (]
[,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (]
[), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /]
[if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,]
[if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,]
[gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /]
[getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (]
[getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (]
[numerator, /, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==]
[denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw]
[), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (]
[(, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (]
[(, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (]
[{, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==]
[{, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==]
[), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw]
[new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[}, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (]
[}, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (]
[(, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return]
[{, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (]
[throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (, -]
[ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (, -, denominator, ,]
[(, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (, -, denominator, ,, -]
[numerator, <, 0, ), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return]
[), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return, new, Fraction, (]
[return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return, new, Fraction, (, denominator, ,]
[{, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (, ), {, if, (]
[{, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (, ), {, if, (]
[new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==]
[new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==]
[), ;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw]
[}, public, Fraction, negate, (, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return]
[(, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (]
[numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -]
[Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -, numerator, ,]
[}, return, new, Fraction, (, -, numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (]
[}, return, new, Fraction, (, -, numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (]
[new, Fraction, (, -, numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=]
[numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return]
[;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return, this, ;, }, return]
[this, ;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, ), {, if, (]
[this, ;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, ), {, if, (]
[}, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, ), {, if, (, power, ==]
[), ;, }, public, Fraction, pow, (, final, int, power, ), {, if, (, power, ==, 1, ), {, return]
[(, final, int, power, ), {, if, (, power, ==, 1, ), {, return, this, ;, }, else, if, (]
[(, final, int, power, ), {, if, (, power, ==, 1, ), {, return, this, ;, }, else, if, (]
[int, power, ), {, if, (, power, ==, 1, ), {, return, this, ;, }, else, if, (, power, ==]
[if, (, power, ==, 1, ), {, return, this, ;, }, else, if, (, power, ==, 0, ), {, return]
[{, return, this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if, (]
[{, return, this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if, (]
[this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if, (, power, <]
[(, power, ==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (]
[(, power, ==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (]
[==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (, power, ==]
[==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (, power, ==]
[;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return]
[;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return]
[;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return]
[;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return]
[), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (]
[==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (]
[Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -]
[., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (]
[., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (]
[), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (, power, /]
[(, ), ., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), ), ;, }, return]
[(, ), ., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), ), ;, }, return]
[(, ), ., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), ), ;, }, return]
[pow, (, -, (, power, /, 2, ), ), ;, }, return, this, ., invert, (, ), ., pow, (]
[(, -, (, power, /, 2, ), ), ;, }, return, this, ., invert, (, ), ., pow, (, -]
[return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final, Fraction, f, =]
[return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final, Fraction, f, =]
[(, ), ., pow, (, -, power, ), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (]
[-, power, ), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (]
[-, power, ), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (]
[-, power, ), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (]
[), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %]
[}, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==]
[Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return]
[Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return]
[., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (]
[., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (]
[(, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (, power, /]
[%, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return]
[%, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return]
[%, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return]
[), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (]
[), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (]
[return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (, power, /]
[power, /, 2, ), ;, }, else, {, return, f, ., pow, (, power, /, 2, ), ., multiplyBy, (]
[this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (]
[this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (]
[this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (]
[;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u, ==]
[}, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u, ==, 0, ||]
[}, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u, ==, 0, ||]
[private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u, ==, 0, ||, v, ==]
[int, u, ,, int, v, ), {, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (]
[int, u, ,, int, v, ), {, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (]
[int, u, ,, int, v, ), {, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (]
[,, int, v, ), {, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==]
[,, int, v, ), {, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==]
[{, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||]
[{, if, (, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||]
[(, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==]
[(, u, ==, 0, ||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==]
[==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw]
[{, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (]
[Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return]
[Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return]
[Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return]
[v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +]
[throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (]
[;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (]
[;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (]
[;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (]
[;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (]
[., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (]
[u, ), +, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==]
[+, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||]
[+, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||]
[+, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||]
[(, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (]
[;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==]
[Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return]
[), ==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (]
[), ==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (]
[1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >]
[., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {]
[(, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =]
[v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -]
[{, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (]
[{, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (]
[1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >]
[if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {]
[u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =]
[>, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -]
[-, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =]
[if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (]
[if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (]
[if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (]
[if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (]
[(, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (]
[(, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (]
[>, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &]
[{, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==]
[=, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&]
[=, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&]
[-, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (]
[-, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (]
[;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &]
[k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==]
[0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&]
[0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&]
[while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <]
[u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {]
[1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=]
[==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;]
[&&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=]
[v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;]
[v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;]
[&&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[&&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[<, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==]
[u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw]
[;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (]
[;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =]
[;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =]
[;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =]
[}, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (]
[}, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (]
[(, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &]
[31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==]
[{, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?]
[new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :]
[ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -]
[(, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -, (]
[(, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -, (]
[), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -, (, u, /]
[u, &, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (]
[u, &, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (]
[&, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (]
[&, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (]
[), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &]
[?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==]
[-, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {]
[u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=]
[do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (]
[do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (]
[while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >]
[t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {]
[1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =]
[), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -]
[t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {]
[2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =]
[if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }]
[t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =]
[t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =]
[>, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (]
[>, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (]
[), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -]
[=, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /]
[else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (]
[else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (]
[v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=]
[}, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return]
[}, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return]
[t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -]
[(, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *]
[v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (]
[v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (]
[u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<]
[;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =, (, long, )]
[mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =, (, long, ), x, *]
[int, x, ,, final, int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, )]
[int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (]
[), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, <]
[), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, <]
[m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||]
[m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||]
[(, long, ), x, *, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >]
[(, long, ), x, *, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >]
[long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return]
[||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, )]
[;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[static, int, mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =, (, long, )]
[mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =, (, long, ), x, *]
[int, x, ,, final, int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, )]
[int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (]
[), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, >]
[), {, final, long, m, =, (, long, ), x, *, (, long, ), y, ;, if, (, m, >]
[(, long, ), x, *, (, long, ), y, ;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw]
[x, *, (, long, ), y, ;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[y, ;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return]
[(, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (, int, )]
[;, }, private, static, int, addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, }, private, static, int, addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[static, int, addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =, (, long, )]
[addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =, (, long, ), x, +]
[int, x, ,, final, int, y, ), {, final, long, s, =, (, long, ), x, +, (, long, )]
[int, y, ), {, final, long, s, =, (, long, ), x, +, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, s, =, (, long, ), x, +, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, s, =, (, long, ), x, +, (, long, ), y, ;, if, (]
[), {, final, long, s, =, (, long, ), x, +, (, long, ), y, ;, if, (, s, <]
[), {, final, long, s, =, (, long, ), x, +, (, long, ), y, ;, if, (, s, <]
[s, =, (, long, ), x, +, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||]
[s, =, (, long, ), x, +, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||]
[(, long, ), x, +, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >]
[(, long, ), x, +, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >]
[long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[;, }, private, static, int, subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, }, private, static, int, subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[static, int, subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =, (, long, )]
[subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =, (, long, ), x, -]
[int, x, ,, final, int, y, ), {, final, long, s, =, (, long, ), x, -, (, long, )]
[int, y, ), {, final, long, s, =, (, long, ), x, -, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, s, =, (, long, ), x, -, (, long, ), y, ;, if, (]
[int, y, ), {, final, long, s, =, (, long, ), x, -, (, long, ), y, ;, if, (]
[), {, final, long, s, =, (, long, ), x, -, (, long, ), y, ;, if, (, s, <]
[), {, final, long, s, =, (, long, ), x, -, (, long, ), y, ;, if, (, s, <]
[s, =, (, long, ), x, -, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||]
[s, =, (, long, ), x, -, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||]
[(, long, ), x, -, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >]
[(, long, ), x, -, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >]
[long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[), ;, }, return, (, int, ), s, ;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return]
[}, return, (, int, ), s, ;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return, addSub, (]
[(, int, ), s, ;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,]
[{, return, addSub, (, fraction, ,, true, ), ;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return]
[addSub, (, fraction, ,, true, ), ;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return, addSub, (]
[fraction, ,, true, ), ;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,]
[,, false, ), ;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (]
[,, false, ), ;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (]
[), ;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (, fraction, ==]
[Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (, fraction, ==, null, ), {, throw]
[final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (]
[isAdd, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[isAdd, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?]
[throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :]
[throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :]
[(, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (]
[(, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (]
[(, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (]
[), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==]
[?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, return]
[), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =]
[}, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (]
[(, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,]
[(, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,]
[{, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if, (]
[{, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if, (]
[this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if, (, d1, ==]
[greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =]
[denominator, ,, fraction, ., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (]
[fraction, ., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,]
[fraction, ., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,]
[1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =]
[{, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck, (]
[{, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck, (]
[=, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,]
[,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return]
[denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (]
[denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (]
[;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?]
[int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (]
[=, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,]
[fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :]
[numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (]
[denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,]
[return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,]
[Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (]
[isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,]
[isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,]
[uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =]
[uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =]
[uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =]
[,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (]
[fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (]
[fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (]
[), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /]
[), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =]
[), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =]
[), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =]
[BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (]
[BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (]
[/, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (]
[/, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (]
[;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /]
[., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =]
[., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =]
[), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?]
[), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?]
[BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (]
[(, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :]
[(, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :]
[), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (]
[isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =]
[isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =]
[isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =]
[add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (]
[add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (]
[:, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (]
[t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =]
[t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =]
[t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =]
[mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==]
[BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?]
[valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :]
[d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (]
[), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,]
[int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =]
[int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =]
[==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (]
[==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (]
[:, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (]
[), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (]
[), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (]
[), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (]
[t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (, w, ., bitLength, (, ), >]
[BigInteger, ., valueOf, (, d2, ), ), ;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw]
[(, d2, ), ), ;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (]
[if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return]
[., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (]
[., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (]
[), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,]
[throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (]
[throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (]
[ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /]
["overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,]
["overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,]
["overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,]
[return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,, fraction, ., denominator, /]
[fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (]
[fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (]
[denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[{, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==]
[(, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||]
[(, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||]
[(, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==]
[IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==, 0, ), {, return]
[(, numerator, ==, 0, ||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =]
[==, 0, ||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (]
[||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,]
[||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,]
[ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final, int, d2, =]
[}, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (]
[}, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (]
[=, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,]
[,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return]
[., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (]
[), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (]
[), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (]
[final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /]
[d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,]
[d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,]
[d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,]
[fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /]
[,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,]
[), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (]
[), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (]
[return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /]
[(, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,]
[(, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,]
[(, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,]
[/, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /]
[fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (]
[fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (]
[denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==]
[), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[fraction, ), {, if, (, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (]
[(, fraction, ==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw]
[new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (]
[;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return]
[if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (]
[if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (]
[., invert, (, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[., invert, (, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[(, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==]
[}, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, Fraction, ==]
[(, obj, ==, this, ), {, return, true, ;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return]
[true, ;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =]
[if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, )]
[instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return]
[instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return]
[instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return]
[), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==]
[), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==]
[final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&]
[final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&]
[(, Fraction, ), obj, ;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==]
[(, Fraction, ), obj, ;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==]
[(, ), ==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[(, ), ==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==]
[getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {]
[), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =]
[), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =]
[), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =]
[}, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *]
[@, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *, (]
[@, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *, (]
[@, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *, (]
[public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *, (, 37, *]
[hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37, *, (, 37, *, 17, +]
[(, hashCode, ==, 0, ), {, hashCode, =, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +]
[hashCode, =, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return]
[), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (]
[), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (]
[}, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (, this, ==]
[}, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (, this, ==, other, ), {, return]
[compareTo, (, final, Fraction, other, ), {, if, (, this, ==, other, ), {, return, 0, ;, }, if, (]
[compareTo, (, final, Fraction, other, ), {, if, (, this, ==, other, ), {, return, 0, ;, }, if, (]
[compareTo, (, final, Fraction, other, ), {, if, (, this, ==, other, ), {, return, 0, ;, }, if, (]
[final, Fraction, other, ), {, if, (, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==]
[final, Fraction, other, ), {, if, (, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==]
[{, if, (, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&]
[{, if, (, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&]
[(, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==]
[(, this, ==, other, ), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==]
[return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==, other, ., denominator, ), {, return]
[==, other, ., numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =]
[==, other, ., numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =]
[numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, )]
[denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *]
[., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, )]
[., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, )]
[final, long, first, =, (, long, ), numerator, *, (, long, ), other, ., denominator, ;, final, long, second, =]
[final, long, first, =, (, long, ), numerator, *, (, long, ), other, ., denominator, ;, final, long, second, =]
[=, (, long, ), numerator, *, (, long, ), other, ., denominator, ;, final, long, second, =, (, long, )]
[=, (, long, ), numerator, *, (, long, ), other, ., denominator, ;, final, long, second, =, (, long, )]
[numerator, *, (, long, ), other, ., denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *]
[long, ), other, ., denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, )]
[denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (]
[denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (]
[final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (, first, ==]
[(, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return]
[*, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (]
[*, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (]
[long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <]
[if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {, return]
[(, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {, return, -]
[return, 0, ;, }, else, if, (, first, <, second, ), {, return, -, 1, ;, }, else, {, return]
[1, ;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (]
[1, ;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (]
[}, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==]
[return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[@, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =, new, StringBuilder, (]
[(, ), {, if, (, toString, ==, null, ), {, toString, =, new, StringBuilder, (, 32, ), ., append, (]
[null, ), {, toString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (]
[), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, return]
[), ), ., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (]
[), ), ., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (]
[., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==]
[}, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (]
[}, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (]
[toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (, numerator, ==]
[public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (, numerator, ==, 0, ), {]
[toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (, numerator, ==, 0, ), {, toProperString, =]
[toProperString, ==, null, ), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (]
[toProperString, ==, null, ), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (]
[null, ), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==]
[if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator, ), {]
[numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =]
[=, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (]
[=, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (]
[;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==]
[;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==]
[}, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -]
[if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *]
[==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {]
[), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =]
[}, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (]
[}, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (]
[else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (]
[else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (]
[else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (]
[(, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >]
[==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?]
[-, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -]
[*, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :]
[{, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, ), <]
[toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, ), <, -]
[(, (, numerator, >, 0, ?, -, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =]
[-, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (]
[-, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (]
[:, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==]
[<, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {]
[denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =]
[denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =]
[int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =, Integer, ., toString, (]
[(, properNumerator, ==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[{, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder, (]
[toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (]
[}, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (]
[new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (]
[., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (]
[), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (]
[append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {]
['/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =]
['/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =]
['/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =]
['/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =]
['/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =]
[append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =, new, StringBuilder, (]
[), ., toString, (, ), ;, }, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (]
[}, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (]
[new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (]
[., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, return]
