[), ;, abstract, T, processIllegalToken, (, AstNode, node, ), ;, public, T, process, (, AstNode, node, ), {, switch, (]
[), ;, abstract, T, processIllegalToken, (, AstNode, node, ), ;, public, T, process, (, AstNode, node, ), {, switch, (]
[), ;, public, T, process, (, AstNode, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[), ;, public, T, process, (, AstNode, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[(, AstNode, node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., ADD, :, case]
[(, AstNode, node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., ADD, :, case]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., ADD, :, case, Token, ., AND, :, case]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., ADD, :, case, Token, ., AND, :, case]
[(, ), ), {, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case]
[(, ), ), {, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case]
[Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case]
[Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case]
[Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., AND, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case]
[Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case]
[Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case]
[Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case]
[Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case]
[Token, ., BITXOR, :, case, Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case]
[Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case]
[Token, ., COMMA, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case]
[Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case]
[Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case]
[Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case]
[Token, ., EQ, :, case, Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case]
[Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., GE, :, case, Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case]
[Token, ., GT, :, case, Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case]
[Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case]
[Token, ., IN, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case]
[Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case]
[Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case]
[Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case]
[Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case]
[Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case]
[Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case]
[Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case]
[Token, ., MUL, :, case, Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case]
[Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case]
[Token, ., NE, :, case, Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case]
[Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., OR, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case]
[Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return]
[SHEQ, :, case, Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (]
[Token, ., SHNE, :, case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, )]
[case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case]
[case, Token, ., SUB, :, case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case]
[case, Token, ., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return]
[., URSH, :, return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (]
[return, processInfixExpression, (, (, InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, )]
[InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case]
[InfixExpression, ), node, ), ;, case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case]
[case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case]
[case, Token, ., ARRAYLIT, :, return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case]
[return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case]
[return, processArrayLiteral, (, (, ArrayLiteral, ), node, ), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case]
[), node, ), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case]
[), node, ), ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return]
[ASSIGN_MUL, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, )]
[case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case]
[case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case]
[case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case]
[case, Token, ., ASSIGN_URSH, :, return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case]
[return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case]
[return, processAssignment, (, (, Assignment, ), node, ), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case]
[), node, ), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case]
[), node, ), ;, case, Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case]
[Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case]
[Token, ., BITNOT, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case]
[Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case]
[Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case]
[Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case]
[Token, ., DELPROP, :, case, Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case]
[Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case]
[Token, ., INC, :, case, Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case]
[Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case]
[Token, ., NEG, :, case, Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case]
[Token, ., NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return]
[NOT, :, case, Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (]
[Token, ., POS, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, )]
[case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case]
[case, Token, ., TYPEOF, :, case, Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case]
[Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (]
[Token, ., VOID, :, return, processUnaryExpression, (, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (]
[(, (, UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return]
[UnaryExpression, ), node, ), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (]
[), ;, case, Token, ., BLOCK, :, if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, )]
[if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, ), node, ), ;, }, else, if, (]
[if, (, node, instanceof, Block, ), {, return, processBlock, (, (, Block, ), node, ), ;, }, else, if, (]
[{, return, processBlock, (, (, Block, ), node, ), ;, }, else, if, (, node, instanceof, Scope, ), {, return]
[processBlock, (, (, Block, ), node, ), ;, }, else, if, (, node, instanceof, Scope, ), {, return, processScope, (]
[Block, ), node, ), ;, }, else, if, (, node, instanceof, Scope, ), {, return, processScope, (, (, Scope, )]
[if, (, node, instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw]
[instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, Scope, ), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[), {, return, processScope, (, (, Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[Scope, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (]
[node, ., getType, (, ), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, )]
[), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case]
[), ), ), ;, }, case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case]
[case, Token, ., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return]
[., BREAK, :, return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (]
[return, processBreakStatement, (, (, BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, )]
[BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case]
[BreakStatement, ), node, ), ;, case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case]
[case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case]
[case, Token, ., CALL, :, return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case]
[return, processFunctionCall, (, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return]
[(, (, FunctionCall, ), node, ), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (]
[), node, ), ;, case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, )]
[case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case]
[case, Token, ., CASE, :, case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case]
[case, Token, ., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return]
[., DEFAULT, :, return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (]
[return, processSwitchCase, (, (, SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, )]
[SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case]
[SwitchCase, ), node, ), ;, case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case]
[case, Token, ., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :, return]
[., CATCH, :, return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (]
[return, processCatchClause, (, (, CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, )]
[CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case]
[CatchClause, ), node, ), ;, case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case]
[case, Token, ., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return]
[., COLON, :, return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (]
[return, processObjectProperty, (, (, ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, )]
[ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case]
[ObjectProperty, ), node, ), ;, case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case]
[case, Token, ., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return]
[., CONTINUE, :, return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (]
[return, processContinueStatement, (, (, ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, )]
[ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case]
[ContinueStatement, ), node, ), ;, case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case]
[case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return]
[case, Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return]
[Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (]
[Token, ., DO, :, return, processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (]
[processDoLoop, (, (, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?]
[(, DoLoop, ), node, ), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (]
[node, ), ;, case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, )]
[case, Token, ., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :]
[., EMPTY, :, return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (]
[return, (, node, instanceof, EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, )]
[EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case]
[EmptyExpression, ), ?, processEmptyExpression, (, (, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case]
[(, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case]
[(, EmptyExpression, ), node, ), :, processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case]
[processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (]
[processEmptyStatement, (, (, EmptyStatement, ), node, ), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (]
[), ;, case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return]
[case, Token, ., EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (]
[EXPR_RESULT, :, case, Token, ., EXPR_VOID, :, if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, )]
[if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (]
[if, (, node, instanceof, ExpressionStatement, ), {, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (]
[{, return, processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return]
[processExpressionStatement, (, (, ExpressionStatement, ), node, ), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (]
[ExpressionStatement, ), node, ), ;, }, else, if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, )]
[if, (, node, instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw]
[instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, LabeledStatement, ), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[), {, return, processLabeledStatement, (, (, LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[LabeledStatement, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case]
[node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case]
[node, ., getType, (, ), ), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case]
[), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case]
[), ), ;, }, case, Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case]
[Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case]
[Token, ., DEBUGGER, :, case, Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case]
[Token, ., FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return]
[FALSE, :, case, Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (]
[Token, ., NULL, :, case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, )]
[case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case]
[case, Token, ., THIS, :, case, Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case]
[Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (]
[Token, ., TRUE, :, return, processKeywordLiteral, (, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (]
[(, (, KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return]
[KeywordLiteral, ), node, ), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (]
[), ;, case, Token, ., FOR, :, if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, )]
[if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (]
[if, (, node, instanceof, ForInLoop, ), {, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (]
[{, return, processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (, node, instanceof, ForLoop, ), {, return]
[processForInLoop, (, (, ForInLoop, ), node, ), ;, }, else, if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (]
[ForInLoop, ), node, ), ;, }, else, if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, )]
[if, (, node, instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw]
[instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, ForLoop, ), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[), {, return, processForLoop, (, (, ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[ForLoop, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (]
[node, ., getType, (, ), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, )]
[), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case]
[), ), ), ;, }, case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case]
[case, Token, ., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return]
[., FUNCTION, :, return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (]
[return, processFunctionNode, (, (, FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, )]
[FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case]
[FunctionNode, ), node, ), ;, case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case]
[case, Token, ., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return]
[., GETELEM, :, return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (]
[return, processElementGet, (, (, ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, )]
[ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case]
[ElementGet, ), node, ), ;, case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case]
[case, Token, ., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return]
[., GETPROP, :, return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (]
[return, processPropertyGet, (, (, PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, )]
[PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case]
[PropertyGet, ), node, ), ;, case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case]
[case, Token, ., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return]
[., HOOK, :, return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (]
[return, processConditionalExpression, (, (, ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, )]
[ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case]
[ConditionalExpression, ), node, ), ;, case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case]
[case, Token, ., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return]
[., IF, :, return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (]
[return, processIfStatement, (, (, IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, )]
[IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case]
[IfStatement, ), node, ), ;, case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case]
[case, Token, ., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :, return]
[., LABEL, :, return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (]
[return, processLabel, (, (, Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, )]
[Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case]
[Label, ), node, ), ;, case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case]
[case, Token, ., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return]
[., LP, :, return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (]
[return, processParenthesizedExpression, (, (, ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (, (, Name, )]
[ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case]
[ParenthesizedExpression, ), node, ), ;, case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case]
[case, Token, ., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :, return]
[., NAME, :, return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (]
[return, processName, (, (, Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, )]
[Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case]
[Name, ), node, ), ;, case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case]
[case, Token, ., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return]
[., NEW, :, return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (]
[return, processNewExpression, (, (, NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, )]
[NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case]
[NewExpression, ), node, ), ;, case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case]
[case, Token, ., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return]
[., NUMBER, :, return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (]
[return, processNumberLiteral, (, (, NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, )]
[NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case]
[NumberLiteral, ), node, ), ;, case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case]
[case, Token, ., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return]
[., OBJECTLIT, :, return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (]
[return, processObjectLiteral, (, (, ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, )]
[ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case]
[ObjectLiteral, ), node, ), ;, case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case]
[case, Token, ., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return]
[., REGEXP, :, return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (]
[return, processRegExpLiteral, (, (, RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, )]
[RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case]
[RegExpLiteral, ), node, ), ;, case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case]
[case, Token, ., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return]
[., RETURN, :, return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (]
[return, processReturnStatement, (, (, ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, )]
[ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case]
[ReturnStatement, ), node, ), ;, case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case]
[case, Token, ., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :, return]
[., SCRIPT, :, return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (]
[return, processAstRoot, (, (, AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, )]
[AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case]
[AstRoot, ), node, ), ;, case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case]
[case, Token, ., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return]
[., STRING, :, return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (]
[return, processStringLiteral, (, (, StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, )]
[StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case]
[StringLiteral, ), node, ), ;, case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case]
[case, Token, ., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return]
[., SWITCH, :, return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (]
[return, processSwitchStatement, (, (, SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, )]
[SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case]
[SwitchStatement, ), node, ), ;, case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case]
[case, Token, ., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return]
[., THROW, :, return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (]
[return, processThrowStatement, (, (, ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, )]
[ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case]
[ThrowStatement, ), node, ), ;, case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case]
[case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case]
[case, Token, ., TRY, :, return, processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case]
[processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (]
[processTryStatement, (, (, TryStatement, ), node, ), ;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (]
[), ;, case, Token, ., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return]
[case, Token, ., CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (]
[CONST, :, case, Token, ., VAR, :, if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, )]
[if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (]
[if, (, node, instanceof, VariableDeclaration, ), {, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (]
[{, return, processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return]
[processVariableDeclaration, (, (, VariableDeclaration, ), node, ), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (]
[VariableDeclaration, ), node, ), ;, }, else, if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, )]
[if, (, node, instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw]
[instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[instanceof, VariableInitializer, ), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[), {, return, processVariableInitializer, (, (, VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +]
[VariableInitializer, ), node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[node, ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[else, {, throw, new, IllegalStateException, (, "Unexpected node type.  class: ", +, node, ., getClass, (, ), +, " type: ", +, Token, ., typeToName, (]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[getClass, (, ), +, " type: ", +, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case]
[+, Token, ., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return]
[., typeToName, (, node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (]
[node, ., getType, (, ), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, )]
[), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case]
[), ), ), ;, }, case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case]
[case, Token, ., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH, :, return]
[., WHILE, :, return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH, :, return, processWithStatement, (]
[return, processWhileLoop, (, (, WhileLoop, ), node, ), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, )]
[), node, ), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return]
[), ;, case, Token, ., WITH, :, return, processWithStatement, (, (, WithStatement, ), node, ), ;, }, return, processIllegalToken, (]
