[., FieldUtils, ;, import, org, ., joda, ., time, ., field, ., UnsupportedDurationField, ;, final, class, GJEraDateTimeField, extends, BaseDateTimeField, {]
[import, org, ., joda, ., time, ., field, ., UnsupportedDurationField, ;, final, class, GJEraDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (]
[., UnsupportedDurationField, ;, final, class, GJEraDateTimeField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[static, final, long, serialVersionUID, =, 4240986525305515528L, ;, private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super, (]
[static, final, long, serialVersionUID, =, 4240986525305515528L, ;, private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super, (]
[private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., era, (, ), ), ;]
[BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., era, (, ), ), ;, iChronology, =]
[(, DateTimeFieldType, ., era, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return]
[public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (]
[public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (]
[public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (]
[), {, return, false, ;, }, public, int, get, (, long, instant, ), {, if, (, iChronology, ., getYear, (]
[false, ;, }, public, int, get, (, long, instant, ), {, if, (, iChronology, ., getYear, (, instant, ), <=]
[int, get, (, long, instant, ), {, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, return]
[int, get, (, long, instant, ), {, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, return]
[(, iChronology, ., getYear, (, instant, ), <=, 0, ), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return]
[(, iChronology, ., getYear, (, instant, ), <=, 0, ), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return]
[{, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[{, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[{, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (]
[String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (, locale, ), ., eraValueToText, (]
[locale, ), ., eraValueToText, (, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int, era, ), {]
[locale, ), ., eraValueToText, (, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int, era, ), {]
[(, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,]
[}, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,]
[(, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,, DateTimeConstants, ., BCE, ,]
[(, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,, DateTimeConstants, ., BCE, ,]
[FieldUtils, ., verifyValueBounds, (, this, ,, era, ,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =]
[verifyValueBounds, (, this, ,, era, ,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (]
[,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (]
[,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (]
[., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=]
[), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int, year, =]
[), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int, year, =]
[=, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (]
[), ;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return]
[), ;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return]
[oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (]
[era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,]
[), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,, -]
[getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,, -, year, ), ;, }, else, {, return]
[return, instant, ;, }, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return]
[;, }, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (]
[}, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (, instant, ,]
[}, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (, instant, ,]
[}, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (, instant, ,]
[(, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (, instant, ,, GJLocaleSymbols, ., forLocale, (]
[text, ,, Locale, locale, ), {, return, set, (, instant, ,, GJLocaleSymbols, ., forLocale, (, locale, ), ., eraTextToValue, (]
[locale, ), ., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[locale, ), ., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (]
[text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==]
[text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==]
[long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., CE, ), {, return]
[long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., CE, ), {, return]
[instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (]
[{, if, (, get, (, instant, ), ==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (, 0, ,]
[==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[}, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[}, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (]
[{, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, get, (]
[., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==]
[., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==]
[long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., BCE, ), {, return]
[long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., BCE, ), {, return]
[instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (]
[{, if, (, get, (, instant, ), ==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (, 0, ,]
[==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[;, }, else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant, ), {, return, roundFloor, (]
[long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[), {, return, roundFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, roundFloor, (]
[long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[), {, return, roundFloor, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, roundFloor, (]
[roundHalfEven, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[roundHalfEven, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[), {, return, roundFloor, (, instant, ), ;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (]
[), {, return, roundFloor, (, instant, ), ;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (]
[return, UnsupportedDurationField, ., getInstance, (, DurationFieldType, ., eras, (, ), ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue, (, ), {, return]
[), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue, (, ), {, return]
[}, public, int, getMinimumValue, (, ), {, return, DateTimeConstants, ., BCE, ;, }, public, int, getMaximumValue, (, ), {, return]
[}, public, int, getMinimumValue, (, ), {, return, DateTimeConstants, ., BCE, ;, }, public, int, getMaximumValue, (, ), {, return]
[int, getMaximumValue, (, ), {, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[int, getMaximumValue, (, ), {, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[int, getMaximumValue, (, ), {, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[{, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (]
[return, GJLocaleSymbols, ., forLocale, (, locale, ), ., getEraMaxTextLength, (, ), ;, }, private, Object, readResolve, (, ), {, return]
[return, GJLocaleSymbols, ., forLocale, (, locale, ), ., getEraMaxTextLength, (, ), ;, }, private, Object, readResolve, (, ), {, return]
