[,, weights, ), ;, }, public, SymmetricGaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, )]
[), ;, }, public, SymmetricGaussIntegrator, (, Pair, <, double, [, ], ,, double, [, ], >, pointsAndWeights, ), throws, NonMonotonicSequenceException]
[,, pointsAndWeights, ., getSecond, (, ), ), ;, }, @, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final]
[., getFirst, (, ), ,, pointsAndWeights, ., getSecond, (, ), ), ;, }, @, Override, public, double, integrate, (, UnivariateFunction]
[), ;, }, @, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength, =, getNumberOfPoints, (, )]
[., getSecond, (, ), ), ;, }, @, Override, public, double, integrate, (, UnivariateFunction, f, ), {, final, int, ruleLength]
[;, if, (, ruleLength, ==, 1, ), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, )]
[), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =]
[==, 1, ), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int]
[), {, return, getWeight, (, 0, ), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =]
[;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;]
[*, f, ., value, (, 0d, ), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =]
[), *, f, ., value, (, 0d, ), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s]
[;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;]
[., value, (, 0d, ), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =, 0, ;]
[), ;, }, final, int, iMax, =, ruleLength, /, 2, ;, double, s, =, 0, ;, double, c, =, 0]
[;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[/, 2, ;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;]
[;, double, s, =, 0, ;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, double, c, =, 0, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, final, double, p, =]
[;, i, <, iMax, ;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double]
[;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (]
[<, iMax, ;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =]
[;, i, ++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (]
[), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (, i, ), ;]
[++, ), {, final, double, p, =, getPoint, (, i, ), ;, final, double, w, =, getWeight, (, i, )]
[;, final, double, w, =, getWeight, (, i, ), ;, final, double, f1, =, f, ., value, (, p, )]
[), ;, final, double, w, =, getWeight, (, i, ), ;, final, double, f1, =, f, ., value, (, p]
[;, final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =, f, ., value, (]
[), ;, final, double, f1, =, f, ., value, (, p, ), ;, final, double, f2, =, f, ., value]
[;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *, (]
[., value, (, p, ), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double]
[), ;, final, double, f2, =, f, ., value, (, -, p, ), ;, final, double, y, =, w, *]
[;, final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =, s]
[., value, (, -, p, ), ;, final, double, y, =, w, *, (, f1, +, f2, ), -, c]
[), ;, final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =]
[), ;, final, double, y, =, w, *, (, f1, +, f2, ), -, c, ;, final, double, t, =]
[;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;, s]
[-, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y]
[*, (, f1, +, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (]
[-, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y]
[), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -]
[+, f2, ), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s]
[), -, c, ;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -]
[;, final, double, t, =, s, +, y, ;, c, =, (, t, -, s, ), -, y, ;, s]
[;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %]
[+, y, ;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (]
[;, c, =, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %]
[=, (, t, -, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=]
[;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight]
[-, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w]
[), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double]
[-, s, ), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {]
[), -, y, ;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double]
[;, s, =, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight]
[=, t, ;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax]
[;, }, if, (, ruleLength, %, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;]
[), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f, ., value]
[!=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f]
[%, 2, !=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w]
[!=, 0, ), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f]
[), {, final, double, w, =, getWeight, (, iMax, ), ;, final, double, y, =, w, *, f, ., value]
[;, final, double, y, =, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t, =]
[), ;, final, double, y, =, w, *, f, ., value, (, 0d, ), -, c, ;, final, double, t]
[;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return, s, ;, }, }]
[-, c, ;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return, s, ;, }]
[*, f, ., value, (, 0d, ), -, c, ;, final, double, t, =, s, +, y, ;, s, =]
[-, c, ;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return, s, ;, }]
[., value, (, 0d, ), -, c, ;, final, double, t, =, s, +, y, ;, s, =, t, ;]
[), -, c, ;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return, s, ;]
[;, final, double, t, =, s, +, y, ;, s, =, t, ;, }, return, s, ;, }, }]
[;, s, =, t, ;, }, return, s, ;, }, }]
[+, y, ;, s, =, t, ;, }, return, s, ;, }, }]
[;, s, =, t, ;, }, return, s, ;, }, }]
[=, t, ;, }, return, s, ;, }, }]
[;, }, return, s, ;, }, }]
[;, }, }]
