[;, private, final, Predicate, <, Node, >, shouldSplit, ;, private, final, Supplier, <, Node, >, placeHolderProvider, ;, private, final, List]
[=, shouldSplit, ;, this, ., placeHolderProvider, =, placeHolderProvider, ;, this, ., root, =, root, ;, this, ., includeRoot, =, includeRoot]
[., shouldSplit, =, shouldSplit, ;, this, ., placeHolderProvider, =, placeHolderProvider, ;, this, ., root, =, root, ;, this, ., includeRoot]
[;, this, ., placeHolderProvider, =, placeHolderProvider, ;, this, ., root, =, root, ;, this, ., includeRoot, =, includeRoot, ;, this]
[=, placeHolderProvider, ;, this, ., root, =, root, ;, this, ., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists]
[., placeHolderProvider, =, placeHolderProvider, ;, this, ., root, =, root, ;, this, ., includeRoot, =, includeRoot, ;, this, ., forest]
[;, this, ., root, =, root, ;, this, ., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList]
[=, root, ;, this, ., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList, (, ), ;, this]
[., root, =, root, ;, this, ., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList, (, )]
[;, this, ., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList]
[=, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists, ., newLinkedList]
[., includeRoot, =, includeRoot, ;, this, ., forest, =, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists]
[;, this, ., forest, =, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists, ., newLinkedList, (, )]
[=, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists, ., newLinkedList, (, ), ;, }, public, static]
[., forest, =, Lists, ., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists, ., newLinkedList, (, ), ;, }]
[;, this, ., detachPointList, =, Lists, ., newLinkedList, (, ), ;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer, (, Node, root, ,]
[., newLinkedList, (, ), ;, this, ., detachPointList, =, Lists, ., newLinkedList, (, ), ;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer]
[=, Lists, ., newLinkedList, (, ), ;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer, (, Node, root, ,, boolean, globalPass, ), {]
[., detachPointList, =, Lists, ., newLinkedList, (, ), ;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer, (, Node, root, ,, boolean, globalPass]
[;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer, (, Node, root, ,, boolean, globalPass, ), {, Predicate, <, Node, >, shouldSplit, =]
[., newLinkedList, (, ), ;, }, public, static, AstParallelizer, createNewFunctionLevelAstParallelizer, (, Node, root, ,, boolean, globalPass, ), {, Predicate, <]
[;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply]
[;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {, @, Override]
[., isFunction, (, ), ;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (]
[;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {, @, Override, public, Node, get]
[;, }, }, ;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {, @, Override]
[;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,, globalPass, ), ;, }, public, static, AstParallelizer]
[;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,, globalPass, ), ;, }]
[., function, (, IR, ., name, (, TEMP_NAME, ), ,, IR, ., paramList, (, ), ,, IR, ., block, (]
[,, IR, ., paramList, (, ), ,, IR, ., block, (, ), ), ;, }, }, ;, return, new, AstParallelizer]
[., name, (, TEMP_NAME, ), ,, IR, ., paramList, (, ), ,, IR, ., block, (, ), ), ;, }]
[), ,, IR, ., paramList, (, ), ,, IR, ., block, (, ), ), ;, }, }, ;, return, new]
[,, IR, ., block, (, ), ), ;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders]
[., paramList, (, ), ,, IR, ., block, (, ), ), ;, }, }, ;, return, new, AstParallelizer, (, shouldSplit]
[), ;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,, globalPass, ), ;]
[., block, (, ), ), ;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root]
[;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {, Predicate, <, Node, >, shouldSplit, =, new, Predicate, <]
[,, shouldTraverse, ,, placeHolders, ,, root, ,, globalPass, ), ;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {]
[,, placeHolders, ,, root, ,, globalPass, ), ;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {, Predicate, <]
[,, root, ,, globalPass, ), ;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {, Predicate, <, Node, >]
[,, globalPass, ), ;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {, Predicate, <, Node, >, shouldSplit, =]
[), ;, }, public, static, AstParallelizer, createNewFileLevelAstParallelizer, (, Node, root, ), {, Predicate, <, Node, >, shouldSplit, =, new, Predicate]
[;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {, @, Override, public, Node, get]
[;, }, }, ;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {, @, Override]
[!=, null, ;, }, }, ;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {]
[., getSourceFileName, (, ), !=, null, ;, }, }, ;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node]
[;, }, }, ;, Supplier, <, Node, >, placeHolders, =, new, Supplier, <, Node, >, (, ), {, @, Override]
[;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {, @, Override, public, boolean, apply]
[;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {, @, Override]
[., newExpr, (, IR, ., string, (, TEMP_NAME, ), ), ;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =]
[), ;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {, @]
[., string, (, TEMP_NAME, ), ), ;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node]
[), ), ;, }, }, ;, Predicate, <, Node, >, shouldTraverse, =, new, Predicate, <, Node, >, (, ), {]
[;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,, false, ), ;, }, private, void, recordSplitPoint]
[;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,, false, ), ;, }]
[., isBlock, (, ), ;, }, }, ;, return, new, AstParallelizer, (, shouldSplit, ,, shouldTraverse, ,, placeHolders, ,, root, ,]
[;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before, ,, Node, original, ), {, detachPointList, ., add, (]
[,, shouldTraverse, ,, placeHolders, ,, root, ,, false, ), ;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before]
[,, placeHolders, ,, root, ,, false, ), ;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before, ,, Node]
[,, root, ,, false, ), ;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before, ,, Node, original, )]
[,, false, ), ;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before, ,, Node, original, ), {, detachPointList]
[), ;, }, private, void, recordSplitPoint, (, Node, placeHolder, ,, Node, before, ,, Node, original, ), {, detachPointList, ., add]
[;, }, public, List, <, Node, >, split, (, ), {, if, (, includeRoot, ), {, forest, ., add, (]
[., add, (, new, DetachPoint, (, placeHolder, ,, before, ,, original, ), ), ;, }, public, List, <, Node, >]
[), ;, }, public, List, <, Node, >, split, (, ), {, if, (, includeRoot, ), {, forest, ., add]
[,, before, ,, original, ), ), ;, }, public, List, <, Node, >, split, (, ), {, if, (, includeRoot]
[,, original, ), ), ;, }, public, List, <, Node, >, split, (, ), {, if, (, includeRoot, ), {]
[), ), ;, }, public, List, <, Node, >, split, (, ), {, if, (, includeRoot, ), {, forest, .]
[), {, forest, ., add, (, root, ), ;, }, split, (, root, ), ;, return, forest, ;, }, private]
[;, }, split, (, root, ), ;, return, forest, ;, }, private, void, split, (, Node, n, ), {, Node]
[., add, (, root, ), ;, }, split, (, root, ), ;, return, forest, ;, }, private, void, split, (]
[), ;, }, split, (, root, ), ;, return, forest, ;, }, private, void, split, (, Node, n, ), {]
[;, return, forest, ;, }, private, void, split, (, Node, n, ), {, Node, c, =, n, ., getFirstChild, (]
[), ;, return, forest, ;, }, private, void, split, (, Node, n, ), {, Node, c, =, n, ., getFirstChild]
[;, }, private, void, split, (, Node, n, ), {, Node, c, =, n, ., getFirstChild, (, ), ;, Node]
[;, Node, before, =, null, ;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (]
[., getFirstChild, (, ), ;, Node, before, =, null, ;, while, (, c, !=, null, ), {, Node, next, =]
[;, while, (, c, !=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, shouldSplit]
[), {, Node, next, =, c, ., getNext, (, ), ;, if, (, shouldSplit, ., apply, (, c, ), )]
[!=, null, ), {, Node, next, =, c, ., getNext, (, ), ;, if, (, shouldSplit, ., apply, (, c]
[), {, Node, next, =, c, ., getNext, (, ), ;, if, (, shouldSplit, ., apply, (, c, ), )]
[;, if, (, shouldSplit, ., apply, (, c, ), ), {, Node, placeHolder, =, placeHolderProvider, ., get, (, ), ;]
[., getNext, (, ), ;, if, (, shouldSplit, ., apply, (, c, ), ), {, Node, placeHolder, =, placeHolderProvider, .]
[), {, Node, placeHolder, =, placeHolderProvider, ., get, (, ), ;, if, (, before, ==, null, ), {, forest, .]
[., apply, (, c, ), ), {, Node, placeHolder, =, placeHolderProvider, ., get, (, ), ;, if, (, before, ==]
[), ), {, Node, placeHolder, =, placeHolderProvider, ., get, (, ), ;, if, (, before, ==, null, ), {, forest]
[;, if, (, before, ==, null, ), {, forest, ., add, (, n, ., removeFirstChild, (, ), ), ;, n]
[., get, (, ), ;, if, (, before, ==, null, ), {, forest, ., add, (, n, ., removeFirstChild, (]
[), {, forest, ., add, (, n, ., removeFirstChild, (, ), ), ;, n, ., addChildToFront, (, placeHolder, ), ;]
[==, null, ), {, forest, ., add, (, n, ., removeFirstChild, (, ), ), ;, n, ., addChildToFront, (, placeHolder]
[), {, forest, ., add, (, n, ., removeFirstChild, (, ), ), ;, n, ., addChildToFront, (, placeHolder, ), ;]
[;, n, ., addChildToFront, (, placeHolder, ), ;, }, else, {, n, ., addChildAfter, (, placeHolder, ,, c, ), ;]
[., add, (, n, ., removeFirstChild, (, ), ), ;, n, ., addChildToFront, (, placeHolder, ), ;, }, else, {]
[), ;, n, ., addChildToFront, (, placeHolder, ), ;, }, else, {, n, ., addChildAfter, (, placeHolder, ,, c, )]
[., removeFirstChild, (, ), ), ;, n, ., addChildToFront, (, placeHolder, ), ;, }, else, {, n, ., addChildAfter, (]
[;, }, else, {, n, ., addChildAfter, (, placeHolder, ,, c, ), ;, n, ., removeChildAfter, (, before, ), ;]
[., addChildToFront, (, placeHolder, ), ;, }, else, {, n, ., addChildAfter, (, placeHolder, ,, c, ), ;, n, .]
[), ;, }, else, {, n, ., addChildAfter, (, placeHolder, ,, c, ), ;, n, ., removeChildAfter, (, before, )]
[;, n, ., removeChildAfter, (, before, ), ;, forest, ., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder, ,]
[., addChildAfter, (, placeHolder, ,, c, ), ;, n, ., removeChildAfter, (, before, ), ;, forest, ., add, (, c]
[,, c, ), ;, n, ., removeChildAfter, (, before, ), ;, forest, ., add, (, c, ), ;, }, recordSplitPoint]
[), ;, n, ., removeChildAfter, (, before, ), ;, forest, ., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder]
[;, forest, ., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder, ,, before, ,, c, ), ;, before, =]
[., removeChildAfter, (, before, ), ;, forest, ., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder, ,, before, ,]
[), ;, forest, ., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder, ,, before, ,, c, ), ;, before]
[;, }, recordSplitPoint, (, placeHolder, ,, before, ,, c, ), ;, before, =, placeHolder, ;, }, else, {, split, (]
[., add, (, c, ), ;, }, recordSplitPoint, (, placeHolder, ,, before, ,, c, ), ;, before, =, placeHolder, ;]
[), ;, }, recordSplitPoint, (, placeHolder, ,, before, ,, c, ), ;, before, =, placeHolder, ;, }, else, {, split]
[;, before, =, placeHolder, ;, }, else, {, split, (, c, ), ;, before, =, c, ;, }, c, =]
[,, before, ,, c, ), ;, before, =, placeHolder, ;, }, else, {, split, (, c, ), ;, before, =]
[,, c, ), ;, before, =, placeHolder, ;, }, else, {, split, (, c, ), ;, before, =, c, ;]
[), ;, before, =, placeHolder, ;, }, else, {, split, (, c, ), ;, before, =, c, ;, }, c]
[=, placeHolder, ;, }, else, {, split, (, c, ), ;, before, =, c, ;, }, c, =, next, ;]
[;, }, else, {, split, (, c, ), ;, before, =, c, ;, }, c, =, next, ;, }, }]
[;, before, =, c, ;, }, c, =, next, ;, }, }, public, void, join, (, ), {, while, (]
[), ;, before, =, c, ;, }, c, =, next, ;, }, }, public, void, join, (, ), {, while]
[=, c, ;, }, c, =, next, ;, }, }, public, void, join, (, ), {, while, (, !, detachPointList]
[;, }, c, =, next, ;, }, }, public, void, join, (, ), {, while, (, !, detachPointList, ., isEmpty]
[=, next, ;, }, }, public, void, join, (, ), {, while, (, !, detachPointList, ., isEmpty, (, ), )]
[;, }, }, public, void, join, (, ), {, while, (, !, detachPointList, ., isEmpty, (, ), ), {, DetachPoint]
[), {, DetachPoint, entry, =, detachPointList, ., remove, (, detachPointList, ., size, (, ), -, 1, ), ;, entry, .]
[), {, DetachPoint, entry, =, detachPointList, ., remove, (, detachPointList, ., size, (, ), -, 1, ), ;, entry, .]
[., isEmpty, (, ), ), {, DetachPoint, entry, =, detachPointList, ., remove, (, detachPointList, ., size, (, ), -, 1]
[;, entry, ., reattach, (, ), ;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder, ;, private, Node]
[., remove, (, detachPointList, ., size, (, ), -, 1, ), ;, entry, ., reattach, (, ), ;, }, }]
[), ;, entry, ., reattach, (, ), ;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder, ;, private]
[-, 1, ), ;, entry, ., reattach, (, ), ;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder]
[., size, (, ), -, 1, ), ;, entry, ., reattach, (, ), ;, }, }, private, static, class, DetachPoint]
[), ;, entry, ., reattach, (, ), ;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder, ;, private]
[;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder, ;, private, Node, before, ;, private, Node, original, ;]
[., reattach, (, ), ;, }, }, private, static, class, DetachPoint, {, private, Node, placeHolder, ;, private, Node, before, ;]
[=, placeHolder, ;, this, ., before, =, before, ;, this, ., original, =, original, ;, }, public, void, reattach, (]
[., placeHolder, =, placeHolder, ;, this, ., before, =, before, ;, this, ., original, =, original, ;, }, public, void]
[;, this, ., before, =, before, ;, this, ., original, =, original, ;, }, public, void, reattach, (, ), {]
[=, before, ;, this, ., original, =, original, ;, }, public, void, reattach, (, ), {, if, (, placeHolder, .]
[., before, =, before, ;, this, ., original, =, original, ;, }, public, void, reattach, (, ), {, if, (]
[;, this, ., original, =, original, ;, }, public, void, reattach, (, ), {, if, (, placeHolder, ., getParent, (]
[=, original, ;, }, public, void, reattach, (, ), {, if, (, placeHolder, ., getParent, (, ), !=, null, )]
[., original, =, original, ;, }, public, void, reattach, (, ), {, if, (, placeHolder, ., getParent, (, ), !=]
[;, }, public, void, reattach, (, ), {, if, (, placeHolder, ., getParent, (, ), !=, null, ), {, if]
[), {, if, (, before, ==, null, ), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original, ), ;]
[!=, null, ), {, if, (, before, ==, null, ), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original]
[., getParent, (, ), !=, null, ), {, if, (, before, ==, null, ), {, placeHolder, ., getParent, (, )]
[), {, if, (, before, ==, null, ), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original, ), ;]
[), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter]
[==, null, ), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original, ), ;, placeHolder, ., getParent, (, )]
[), {, placeHolder, ., getParent, (, ), ., addChildrenToFront, (, original, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter]
[;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, else, {, placeHolder, ., getParent, (, )]
[., addChildrenToFront, (, original, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, else, {]
[., getParent, (, ), ., addChildrenToFront, (, original, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, )]
[), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, else, {, placeHolder, ., getParent, (]
[;, }, else, {, placeHolder, ., getParent, (, ), ., addChildAfter, (, original, ,, before, ), ;, placeHolder, ., getParent]
[., removeChildAfter, (, original, ), ;, }, else, {, placeHolder, ., getParent, (, ), ., addChildAfter, (, original, ,, before]
[., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, else, {, placeHolder, ., getParent, (, ), ., addChildAfter]
[), ;, }, else, {, placeHolder, ., getParent, (, ), ., addChildAfter, (, original, ,, before, ), ;, placeHolder, .]
[;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, }, }, }, }]
[., addChildAfter, (, original, ,, before, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }]
[., getParent, (, ), ., addChildAfter, (, original, ,, before, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (]
[,, before, ), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, }, }, }, }]
[), ;, placeHolder, ., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, }, }, }, }]
[;, }, }, }, }, }]
[., removeChildAfter, (, original, ), ;, }, }, }, }, }]
[., getParent, (, ), ., removeChildAfter, (, original, ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }]
