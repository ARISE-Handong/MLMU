[=, compiler, ;, this, ., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., counter, =, 0, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, Traversal, (, ), ), ;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {]
[,, root, ,, new, Traversal, (, ), ), ;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[,, new, Traversal, (, ), ), ;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, Traversal, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key]
[&&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;, n]
[., isFor, (, ), &&, n, ., getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild]
[), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key]
[==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;]
[., getChildCount, (, ), ==, 3, ), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild]
[), {, Node, body, =, n, ., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key]
[;, n, ., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild]
[., getLastChild, (, ), ;, n, ., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, )]
[;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =]
[., removeChild, (, body, ), ;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key]
[), ;, Node, key, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp]
[;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, )]
[., getFirstChild, (, ), ;, n, ., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_"]
[;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (, IR, .]
[., removeChild, (, key, ), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n]
[), ;, Node, tmp, =, IR, ., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (, IR]
[;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if]
[., name, (, "JSCompiler_IgnoreCajaProperties_", +, counter, ++, ), ;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), )]
[), ;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;]
[+, counter, ++, ), ;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;]
[), ;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;]
[++, ), ;, n, ., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody]
[;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =, IR, .]
[., addChildToFront, (, IR, ., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key]
[), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =, IR]
[., var, (, tmp, ), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, )]
[), ), ;, Node, assignment, ;, Node, ifBody, ;, if, (, key, ., isVar, (, ), ), {, ifBody, =]
[), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (, key, .]
[., isVar, (, ), ), {, ifBody, =, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, .]
[=, IR, ., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, )]
[;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,]
[., block, (, key, ,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode]
[,, IR, ., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp]
[,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign]
[., exprResult, (, IR, ., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree]
[), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, .]
[., assign, (, key, ., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), )]
[,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block]
[., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody]
[., getFirstChild, (, ), ., cloneNode, (, ), ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;]
[), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR]
[., cloneTree, (, ), ), ), ,, body, ), ;, }, else, {, ifBody, =, IR, ., block, (, IR]
[), ;, }, else, {, ifBody, =, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key]
[=, IR, ., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, )]
[;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call]
[., block, (, IR, ., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), ), )]
[,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (]
[., exprResult, (, IR, ., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;]
[), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not]
[., assign, (, key, ,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =]
[,, tmp, ., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (]
[), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, .]
[., cloneTree, (, ), ), ), ,, body, ), ;, }, Node, newBody, =, IR, ., block, (, IR, .]
[), ;, }, Node, newBody, =, IR, ., block, (, IR, ., ifNode, (, IR, ., not, (, IR, .]
[;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., block, (, IR, ., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp]
[), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., ifNode, (, IR, ., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, )]
[,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., not, (, IR, ., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string]
[), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., call, (, IR, ., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), )]
[,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n]
[., getprop, (, tmp, ., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp]
[,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), )]
[., cloneTree, (, ), ,, IR, ., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string]
[), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;]
[., string, (, "match", ), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), )]
[), ), ,, IR, ., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), )]
[), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., regexp, (, IR, ., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack]
[), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, )]
[., string, (, "___$", ), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;]
[), ), ), ), ,, ifBody, ), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (]
[), ), ;, n, ., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., addChildToBack, (, newBody, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[;, }, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }, }]
