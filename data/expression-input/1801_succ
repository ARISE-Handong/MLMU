[;, private, final, double, [, ], data, ;, public, DiagonalMatrix, (, final, int, dimension, ), throws, NotStrictlyPositiveException, {, super, (]
[,, dimension, ), ;, data, =, new, double, [, dimension, ], ;, }, public, DiagonalMatrix, (, final, double, [, ]]
[), ;, data, =, new, double, [, dimension, ], ;, }, public, DiagonalMatrix, (, final, double, [, ], d, )]
[=, new, double, [, dimension, ], ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ), {, this, (]
[;, }, public, DiagonalMatrix, (, final, double, [, ], d, ), {, this, (, d, ,, true, ), ;, }]
[], ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ), {, this, (, d, ,, true, ), ;]
[,, true, ), ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException]
[), ;, }, public, DiagonalMatrix, (, final, double, [, ], d, ,, final, boolean, copyArray, ), throws, NullArgumentException, {, MathUtils]
[;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, @, Override, public, RealMatrix, createMatrix, (]
[., checkNotNull, (, d, ), ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, @]
[), ;, data, =, copyArray, ?, d, ., clone, (, ), :, d, ;, }, @, Override, public, RealMatrix, createMatrix]
[=, copyArray, ?, d, ., clone, (, ), :, d, ;, }, @, Override, public, RealMatrix, createMatrix, (, final, int]
[;, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException]
[?, d, ., clone, (, ), :, d, ;, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,]
[:, d, ;, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException]
[., clone, (, ), :, d, ;, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int]
[;, }, @, Override, public, RealMatrix, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, rowDimension, ,, columnDimension, ), ;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }]
[!=, columnDimension, ), {, throw, new, DimensionMismatchException, (, rowDimension, ,, columnDimension, ), ;, }, return, new, DiagonalMatrix, (, rowDimension, )]
[), {, throw, new, DimensionMismatchException, (, rowDimension, ,, columnDimension, ), ;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }]
[;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new]
[,, columnDimension, ), ;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, )]
[), ;, }, return, new, DiagonalMatrix, (, rowDimension, ), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return]
[;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, DiagonalMatrix, (, data, ), ;, }, public, DiagonalMatrix]
[), ;, }, @, Override, public, RealMatrix, copy, (, ), {, return, new, DiagonalMatrix, (, data, ), ;, }, public]
[;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m]
[), ;, }, public, DiagonalMatrix, add, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim, ]]
[., checkAdditionCompatible, (, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ]]
[,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double]
[), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i]
[;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +, m]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +, m, ., data, [, i]
[<, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +, m, ., data]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], +, m, ., data, [, i]
[), {, outData, [, i, ], =, data, [, i, ], +, m, ., data, [, i, ], ;, }]
[++, ), {, outData, [, i, ], =, data, [, i, ], +, m, ., data, [, i, ], ;]
[=, data, [, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[[, i, ], =, data, [, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix]
[], =, data, [, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, )]
[+, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public]
[[, i, ], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, )]
[], +, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, )]
[[, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final]
[., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract]
[], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m]
[;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,, m]
[,, false, ), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (]
[), ;, }, public, DiagonalMatrix, subtract, (, final, DiagonalMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkSubtractionCompatible, (, this, ,]
[;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim, ]]
[., checkSubtractionCompatible, (, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ]]
[,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double]
[), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i]
[;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -, m]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -, m, ., data, [, i]
[<, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -, m, ., data]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], -, m, ., data, [, i]
[), {, outData, [, i, ], =, data, [, i, ], -, m, ., data, [, i, ], ;, }]
[++, ), {, outData, [, i, ], =, data, [, i, ], -, m, ., data, [, i, ], ;]
[=, data, [, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[[, i, ], =, data, [, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix]
[], =, data, [, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, )]
[-, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public]
[[, i, ], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, )]
[], -, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, )]
[[, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final]
[., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply]
[], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m]
[;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m]
[,, false, ), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[), ;, }, public, DiagonalMatrix, multiply, (, final, DiagonalMatrix, m, ), throws, DimensionMismatchException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim, ]]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ]]
[,, m, ), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double]
[), ;, final, int, dim, =, getRowDimension, (, ), ;, final, double, [, ], outData, =, new, double, [, dim]
[;, final, double, [, ], outData, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, outData, [, i]
[;, i, <, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *, m]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *, m, ., data, [, i]
[<, dim, ;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *, m, ., data]
[;, i, ++, ), {, outData, [, i, ], =, data, [, i, ], *, m, ., data, [, i]
[), {, outData, [, i, ], =, data, [, i, ], *, m, ., data, [, i, ], ;, }]
[++, ), {, outData, [, i, ], =, data, [, i, ], *, m, ., data, [, i, ], ;]
[=, data, [, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,]
[[, i, ], =, data, [, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix]
[], =, data, [, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix]
[*, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @]
[[, i, ], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, )]
[], *, m, ., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }]
[;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix]
[[, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @, Override, public, RealMatrix, multiply]
[., data, [, i, ], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @, Override, public]
[], ;, }, return, new, DiagonalMatrix, (, outData, ,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final]
[;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (, m, instanceof, DiagonalMatrix]
[,, false, ), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (]
[), ;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, {, if, (, m, instanceof]
[), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[instanceof, DiagonalMatrix, ), {, return, multiply, (, (, DiagonalMatrix, ), m, ), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, m, ., getRowDimension]
[), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, m, .]
[), ;, }, else, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, m, .]
[;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, )]
[., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int]
[,, m, ), ;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int, nCols, =, m, .]
[), ;, final, int, nRows, =, m, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (]
[;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, double, [, ], [, ], product, =, new]
[., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, double, [, ], []
[;, final, double, [, ], [, ], product, =, new, double, [, nRows, ], [, nCols, ], ;, for, (]
[., getColumnDimension, (, ), ;, final, double, [, ], [, ], product, =, new, double, [, nRows, ], [, nCols]
[;, for, (, int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int, c]
[], [, nCols, ], ;, for, (, int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {]
[], ;, for, (, int, r, =, 0, ;, r, <, nRows, ;, r, ++, ), {, for, (, int]
[;, r, <, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {]
[<, nRows, ;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++]
[;, r, ++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {]
[), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, [, r]
[++, ), {, for, (, int, c, =, 0, ;, c, <, nCols, ;, c, ++, ), {, product, []
[;, c, <, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r]
[;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *, m, .]
[<, nCols, ;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *]
[;, c, ++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *, m, .]
[), {, product, [, r, ], [, c, ], =, data, [, r, ], *, m, ., getEntry, (, r]
[++, ), {, product, [, r, ], [, c, ], =, data, [, r, ], *, m, ., getEntry, (]
[=, data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix]
[[, c, ], =, data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }]
[[, r, ], [, c, ], =, data, [, r, ], *, m, ., getEntry, (, r, ,, c, )]
[], [, c, ], =, data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }]
[], =, data, [, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new]
[;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, ), ;, }, }, @, Override, public, double, [, ]]
[*, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, )]
[[, r, ], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product]
[], *, m, ., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false]
[;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, ), ;, }, }, @, Override, public, double, [, ]]
[., getEntry, (, r, ,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, ), ;, }]
[,, c, ), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, ), ;, }, }, @, Override, public]
[), ;, }, }, return, new, Array2DRowRealMatrix, (, product, ,, false, ), ;, }, }, @, Override, public, double, []
[;, }, }, @, Override, public, double, [, ], [, ], getData, (, ), {, final, int, dim, =, getRowDimension]
[,, false, ), ;, }, }, @, Override, public, double, [, ], [, ], getData, (, ), {, final, int]
[), ;, }, }, @, Override, public, double, [, ], [, ], getData, (, ), {, final, int, dim, =]
[;, final, double, [, ], [, ], out, =, new, double, [, dim, ], [, dim, ], ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, [, i, ]]
[], [, dim, ], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, out, [, i]
[;, i, <, dim, ;, i, ++, ), {, out, [, i, ], [, i, ], =, data, [, i]
[;, i, ++, ), {, out, [, i, ], [, i, ], =, data, [, i, ], ;, }, return]
[<, dim, ;, i, ++, ), {, out, [, i, ], [, i, ], =, data, [, i, ], ;]
[;, i, ++, ), {, out, [, i, ], [, i, ], =, data, [, i, ], ;, }, return]
[), {, out, [, i, ], [, i, ], =, data, [, i, ], ;, }, return, out, ;, }]
[++, ), {, out, [, i, ], [, i, ], =, data, [, i, ], ;, }, return, out, ;]
[=, data, [, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {, return]
[[, i, ], =, data, [, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (]
[[, i, ], [, i, ], =, data, [, i, ], ;, }, return, out, ;, }, public, double, []
[], [, i, ], =, data, [, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef]
[], =, data, [, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {]
[;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @, Override]
[[, i, ], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {, return, data, ;]
[], ;, }, return, out, ;, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @]
[;, }, public, double, [, ], getDataRef, (, ), {, return, data, ;, }, @, Override, public, double, getEntry, (]
[;, }, @, Override, public, double, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, MatrixUtils]
[;, return, row, ==, column, ?, data, [, row, ], :, 0, ;, }, @, Override, public, void, setEntry, (]
[., checkMatrixIndex, (, this, ,, row, ,, column, ), ;, return, row, ==, column, ?, data, [, row, ], :]
[,, row, ,, column, ), ;, return, row, ==, column, ?, data, [, row, ], :, 0, ;, }, @]
[,, column, ), ;, return, row, ==, column, ?, data, [, row, ], :, 0, ;, }, @, Override, public]
[), ;, return, row, ==, column, ?, data, [, row, ], :, 0, ;, }, @, Override, public, void, setEntry]
[;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[?, data, [, row, ], :, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final]
[==, column, ?, data, [, row, ], :, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row]
[?, data, [, row, ], :, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final]
[:, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double]
[[, row, ], :, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column]
[], :, 0, ;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final]
[;, }, @, Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, )]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;, }, else]
[==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;, }, else]
[;, data, [, row, ], =, value, ;, }, else, {, ensureZero, (, value, ), ;, }, }, @, Override]
[., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], =, value, ;, }, else, {, ensureZero, (]
[,, row, ), ;, data, [, row, ], =, value, ;, }, else, {, ensureZero, (, value, ), ;, }]
[), ;, data, [, row, ], =, value, ;, }, else, {, ensureZero, (, value, ), ;, }, }, @]
[=, value, ;, }, else, {, ensureZero, (, value, ), ;, }, }, @, Override, public, void, addToEntry, (, final]
[[, row, ], =, value, ;, }, else, {, ensureZero, (, value, ), ;, }, }, @, Override, public, void]
[], =, value, ;, }, else, {, ensureZero, (, value, ), ;, }, }, @, Override, public, void, addToEntry, (]
[;, }, else, {, ensureZero, (, value, ), ;, }, }, @, Override, public, void, addToEntry, (, final, int, row]
[;, }, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double, increment]
[), ;, }, }, @, Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, double]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;, }, else]
[==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;, }, else]
[;, data, [, row, ], +=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }, }, @, Override]
[., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], +=, increment, ;, }, else, {, ensureZero, (]
[,, row, ), ;, data, [, row, ], +=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }]
[), ;, data, [, row, ], +=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }, }, @]
[+=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }, }, @, Override, public, void, multiplyEntry, (, final]
[[, row, ], +=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }, }, @, Override, public, void]
[], +=, increment, ;, }, else, {, ensureZero, (, increment, ), ;, }, }, @, Override, public, void, multiplyEntry, (]
[;, }, else, {, ensureZero, (, increment, ), ;, }, }, @, Override, public, void, multiplyEntry, (, final, int, row]
[;, }, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double, factor]
[), ;, }, }, @, Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, double]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], *=, factor, ;, }, }]
[==, column, ), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], *=, factor, ;]
[), {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], *=, factor, ;, }, }]
[;, data, [, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return, data]
[., checkRowIndex, (, this, ,, row, ), ;, data, [, row, ], *=, factor, ;, }, }, @, Override, public]
[,, row, ), ;, data, [, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, )]
[), ;, data, [, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return]
[*=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return, data, ., length, ;, }, @]
[[, row, ], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return, data, ., length]
[], *=, factor, ;, }, }, @, Override, public, int, getRowDimension, (, ), {, return, data, ., length, ;, }]
[;, }, }, @, Override, public, int, getRowDimension, (, ), {, return, data, ., length, ;, }, @, Override, public]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, data, ., length, ;, }, @, Override, public, double]
[., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, data, ., length, ;, }, @, Override]
[;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return]
[., length, ;, }, @, Override, public, double, [, ], operate, (, final, double, [, ], v, ), throws, DimensionMismatchException]
[;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, ), throws, DimensionMismatchException, {, return]
[., getDataRef, (, ), ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v, )]
[), ., getDataRef, (, ), ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ], v]
[,, false, ), ), ., getDataRef, (, ), ;, }, @, Override, public, double, [, ], preMultiply, (, final, double]
[), ), ., getDataRef, (, ), ;, }, @, Override, public, double, [, ], preMultiply, (, final, double, [, ]]
[;, }, @, Override, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, final, double, [, ], vectorData]
[), ;, }, @, Override, public, RealVector, preMultiply, (, final, RealVector, v, ), throws, DimensionMismatchException, {, final, double, [, ]]
[), {, vectorData, =, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =]
[instanceof, ArrayRealVector, ), {, vectorData, =, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {]
[=, (, (, ArrayRealVector, ), v, ), ., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray]
[;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils, ., createRealVector, (, preMultiply, (]
[., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils, .]
[), ., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils]
[), ., getDataRef, (, ), ;, }, else, {, vectorData, =, v, ., toArray, (, ), ;, }, return, MatrixUtils]
[=, v, ., toArray, (, ), ;, }, return, MatrixUtils, ., createRealVector, (, preMultiply, (, vectorData, ), ), ;, }]
[;, }, return, MatrixUtils, ., createRealVector, (, preMultiply, (, vectorData, ), ), ;, }, private, void, ensureZero, (, final, double]
[., toArray, (, ), ;, }, return, MatrixUtils, ., createRealVector, (, preMultiply, (, vectorData, ), ), ;, }, private, void]
[;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals, (]
[., createRealVector, (, preMultiply, (, vectorData, ), ), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException]
[), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, ., equals]
[), ), ;, }, private, void, ensureZero, (, final, double, value, ), throws, NumberIsTooLargeException, {, if, (, !, Precision, .]
[), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,, true, ), ;, }, }]
[), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,, true, ), ;, }, }]
[., equals, (, 0.0, ,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value]
[,, value, ,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,]
[,, 1, ), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,, true, )]
[), ), {, throw, new, NumberIsTooLargeException, (, FastMath, ., abs, (, value, ), ,, 0, ,, true, ), ;, }]
[;, }, }, }]
[,, 0, ,, true, ), ;, }, }, }]
[., abs, (, value, ), ,, 0, ,, true, ), ;, }, }, }]
[), ,, 0, ,, true, ), ;, }, }, }]
[,, true, ), ;, }, }, }]
[), ;, }, }, }]
