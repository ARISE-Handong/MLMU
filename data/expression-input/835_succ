[;, private, double, nextGaussian, ;, public, BitsStreamGenerator, (, ), {, nextGaussian, =, Double, ., NaN, ;, }, public, abstract, void]
[=, Double, ., NaN, ;, }, public, abstract, void, setSeed, (, int, seed, ), ;, public, abstract, void, setSeed, (]
[;, }, public, abstract, void, setSeed, (, int, seed, ), ;, public, abstract, void, setSeed, (, int, [, ], seed]
[., NaN, ;, }, public, abstract, void, setSeed, (, int, seed, ), ;, public, abstract, void, setSeed, (, int, []
[;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd]
[!=, 0, ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final]
[), !=, 0, ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;]
[;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, i, =, 0, ;, final, int, iEnd]
[;, final, int, iEnd, =, bytes, ., length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int]
[;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i]
[-, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes]
[., length, -, 3, ;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, )]
[;, while, (, i, <, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i]
[), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (]
[<, iEnd, ), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte]
[), {, final, int, random, =, next, (, 32, ), ;, bytes, [, i, ], =, (, byte, ), (]
[;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1]
[), ;, bytes, [, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +]
[=, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, )]
[[, i, ], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =]
[], =, (, byte, ), (, random, &, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte]
[;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff]
[;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff]
[), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &]
[&, 0xff, ), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8]
[), ;, bytes, [, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &]
[=, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2]
[[, i, +, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;]
[], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +]
[+, 1, ], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, []
[], =, (, byte, ), (, (, random, >, >, 8, ), &, 0xff, ), ;, bytes, [, i, +]
[;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff]
[;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff]
[), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &]
[&, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16]
[), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >]
[>, >, 8, ), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (]
[), &, 0xff, ), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >]
[), ;, bytes, [, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &]
[=, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3]
[[, i, +, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;]
[], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +]
[+, 2, ], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, []
[], =, (, byte, ), (, (, random, >, >, 16, ), &, 0xff, ), ;, bytes, [, i, +]
[;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff]
[;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff]
[), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &]
[&, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24]
[), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >]
[>, >, 16, ), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (]
[), &, 0xff, ), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >]
[), ;, bytes, [, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &]
[=, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;, }]
[[, i, +, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;]
[], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;]
[+, 3, ], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=]
[], =, (, byte, ), (, (, random, >, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;]
[;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, .]
[;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, .]
[), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes]
[&, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i]
[), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (]
[>, >, 24, ), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, )]
[), &, 0xff, ), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (]
[), ;, i, +=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes]
[+=, 4, ;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, )]
[;, }, int, random, =, next, (, 32, ), ;, while, (, i, <, bytes, ., length, ), {, bytes]
[;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (]
[), ;, while, (, i, <, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, )]
[), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random]
[<, bytes, ., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, )]
[), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random]
[., length, ), {, bytes, [, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random]
[=, (, byte, ), (, random, &, 0xff, ), ;, random, =, random, >, >, 8, ;, }, }, public]
[[, i, ++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random, >, >, 8]
[], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random, >, >, 8, ;, }, }]
[++, ], =, (, byte, ), (, random, &, 0xff, ), ;, random, =, random, >, >, 8, ;, }]
[;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =]
[;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =]
[), ;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high]
[&, 0xff, ), ;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final]
[), ;, random, =, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high]
[=, random, >, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (]
[;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, ), next, (, 26]
[>, >, 8, ;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, )]
[;, }, }, public, double, nextDouble, (, ), {, final, long, high, =, (, (, long, ), next, (, 26]
[;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }]
[<<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *, 0x1.0p-52d]
[), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *]
[), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *]
[), ), <<, 26, ;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, )]
[;, final, int, low, =, next, (, 26, ), ;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }]
[;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (]
[), ;, return, (, high, |, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next]
[;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f, ;, }, public, double, nextGaussian]
[*, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f, ;, }, public]
[), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f, ;, }]
[|, low, ), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f]
[), *, 0x1.0p-52d, ;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f, ;, }]
[;, }, public, float, nextFloat, (, ), {, return, next, (, 23, ), *, 0x1.0p-23f, ;, }, public, double, nextGaussian]
[;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (, Double, ., isNaN, (, nextGaussian, )]
[*, 0x1.0p-23f, ;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (, Double, ., isNaN, (]
[), *, 0x1.0p-23f, ;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (, Double, ., isNaN]
[;, }, public, double, nextGaussian, (, ), {, final, double, random, ;, if, (, Double, ., isNaN, (, nextGaussian, )]
[), {, final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final, double]
[., isNaN, (, nextGaussian, ), ), {, final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble]
[), ), {, final, double, x, =, nextDouble, (, ), ;, final, double, y, =, nextDouble, (, ), ;, final]
[;, final, double, y, =, nextDouble, (, ), ;, final, double, alpha, =, 2, *, FastMath, ., PI, *, x]
[;, final, double, alpha, =, 2, *, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt]
[;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;]
[*, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, )]
[*, FastMath, ., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, .]
[*, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, )]
[., PI, *, x, ;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (]
[;, final, double, r, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;]
[;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (]
[., sqrt, (, -, 2, *, FastMath, ., log, (, y, ), ), ;, random, =, r, *, FastMath, .]
[), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin]
[*, FastMath, ., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;]
[*, FastMath, ., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;]
[), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin]
[., log, (, y, ), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =]
[), ), ;, random, =, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, .]
[=, r, *, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, )]
[;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian]
[*, FastMath, ., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }]
[;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian]
[., cos, (, alpha, ), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {]
[), ;, nextGaussian, =, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;]
[=, r, *, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double]
[;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public]
[*, FastMath, ., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN]
[;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public]
[., sin, (, alpha, ), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }]
[), ;, }, else, {, random, =, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }]
[=, nextGaussian, ;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {]
[;, nextGaussian, =, Double, ., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {, return, next]
[=, Double, ., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {, return, next, (, 32]
[;, }, return, random, ;, }, public, int, nextInt, (, ), {, return, next, (, 32, ), ;, }, public]
[., NaN, ;, }, return, random, ;, }, public, int, nextInt, (, ), {, return, next, (, 32, ), ;]
[;, }, public, int, nextInt, (, ), {, return, next, (, 32, ), ;, }, public, int, nextInt, (, int]
[;, }, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, if]
[), ;, }, public, int, nextInt, (, int, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {]
[), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (]
[>, 0, ), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, )]
[), {, if, (, (, n, &, -, n, ), ==, n, ), {, return, (, int, ), (, (]
[), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, ), ), >, >]
[==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, ), )]
[), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, )]
[&, -, n, ), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next]
[), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, )]
[), ==, n, ), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, )]
[), {, return, (, int, ), (, (, n, *, (, long, ), next, (, 31, ), ), >, >]
[;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits]
[;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =, bits]
[), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =]
[>, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, )]
[), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31]
[*, (, long, ), next, (, 31, ), ), >, >, 31, ), ;, }, int, bits, ;, int, val]
[), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31]
[), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31]
[), ), >, >, 31, ), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (]
[), ;, }, int, bits, ;, int, val, ;, do, {, bits, =, next, (, 31, ), ;, val, =]
[=, next, (, 31, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, )]
[=, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, )]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong]
[-, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {]
[;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, long, nextLong, (, ), {, final, long, high, =]
[;, }, public, long, nextLong, (, ), {, final, long, high, =, (, (, long, ), next, (, 32, )]
[), ;, }, public, long, nextLong, (, ), {, final, long, high, =, (, (, long, ), next, (, 32]
[;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return, high, |]
[<<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return]
[), <<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;]
[), <<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;]
[), ), <<, 32, ;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL]
[;, final, long, low, =, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ;, return, high, |]
[;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n]
[&, 0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if]
[), &, 0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {]
[), &, 0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {]
[), ), &, 0xffffffffL, ;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException]
[;, return, high, |, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n]
[;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, long]
[|, low, ;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, )]
[;, }, public, long, nextLong, (, long, n, ), throws, IllegalArgumentException, {, if, (, n, >, 0, ), {, long]
[), {, long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, ), next, (, 31, )]
[>, 0, ), {, long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, ), next, (]
[), {, long, bits, ;, long, val, ;, do, {, bits, =, (, (, long, ), next, (, 31, )]
[=, (, (, long, ), next, (, 31, ), ), <<, 32, ;, bits, =, bits, |, (, (, (]
[;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val]
[<<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, )]
[), <<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL]
[), <<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL]
[), ), <<, 32, ;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &]
[;, bits, =, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val]
[=, bits, |, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[|, (, (, (, long, ), next, (, 32, ), ), &, 0xffffffffL, ), ;, val, =, bits, %, n]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, )]
[&, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -]
[), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n]
[), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n]
[), ), &, 0xffffffffL, ), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (]
[), ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, )]
[=, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, )]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear]
[-, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {]
[;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, void, clear, (, ), {, nextGaussian, =, Double, .]
[;, }, public, void, clear, (, ), {, nextGaussian, =, Double, ., NaN, ;, }, }]
[), ;, }, public, void, clear, (, ), {, nextGaussian, =, Double, ., NaN, ;, }, }]
[=, Double, ., NaN, ;, }, }]
[;, }, }]
[., NaN, ;, }, }]
