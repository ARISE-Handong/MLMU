[;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,]
[*, FastMath, ., log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0]
[;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,]
[., log, (, MathUtils, ., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848]
[), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221]
[., TWO_PI, ), ;, private, static, final, double, [, ], EXACT_STIRLING_ERRORS, =, {, 0.0, ,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390]
[;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }, static, double, getStirlingError, (, double, z, ), {, double]
[,, 0.1534264097200273452913848, ,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487]
[,, 0.0810614667953272582196702, ,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255]
[,, 0.0548141210519176538961390, ,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573]
[,, 0.0413406959554092940938221, ,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986]
[,, 0.03316287351993628748511048, ,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572]
[,, 0.02767792568499833914878929, ,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991]
[,, 0.02374616365629749597132920, ,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567]
[,, 0.02079067210376509311152277, ,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475]
[,, 0.01848845053267318523077934, ,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637]
[,, 0.01664469118982119216319487, ,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823]
[,, 0.01513497322191737887351255, ,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318]
[,, 0.01387612882307074799874573, ,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100]
[,, 0.01281046524292022692424986, ,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024]
[,, 0.01189670994589177009505572, ,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912]
[,, 0.01110455975820691732662991, ,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152]
[,, 0.010411265261972096497478567, ,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394]
[,, 0.009799416126158803298389475, ,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631]
[,, 0.009255462182712732917728637, ,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867]
[,, 0.008768700134139385462952823, ,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416]
[,, 0.008330563433362871256469318, ,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589]
[,, 0.007934114564314020547248100, ,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690]
[,, 0.007573675487951840794972024, ,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;]
[,, 0.007244554301320383179543912, ,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion]
[,, 0.006942840107209529865664152, ,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, )]
[,, 0.006665247032707682442354394, ,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super]
[,, 0.006408994188004207068439631, ,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super, (, )]
[,, 0.006171712263039457647532867, ,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }]
[,, 0.005951370112758847735624416, ,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }, static, double]
[,, 0.005746216513010115682023589, ,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }, static, double, getStirlingError, (]
[,, 0.005554733551962801371038690, }, ;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }, static, double, getStirlingError, (, double, z]
[}, ;, private, SaddlePointExpansion, (, ), {, super, (, ), ;, }, static, double, getStirlingError, (, double, z, ), {]
[), {, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, )]
[<, 15.0, ), {, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==]
[), {, double, z2, =, 2.0, *, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, )]
[;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, )]
[*, z, ;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (]
[;, if, (, FastMath, ., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, )]
[), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma]
[==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma]
[., floor, (, z2, ), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }]
[), ==, z2, ), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =]
[), {, ret, =, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma]
[=, EXACT_STIRLING_ERRORS, [, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +]
[;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, )]
[[, (, int, ), z2, ], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, )]
[], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5]
[], ;, }, else, {, ret, =, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5]
[=, Gamma, ., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (]
[;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -]
[-, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (]
[+, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333]
[-, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }]
[., logGamma, (, z, +, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, )]
[), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }]
[+, 1.0, ), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI]
[), -, (, z, +, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }]
[+, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333]
[*, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z]
[), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =]
[+, 0.5, ), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double]
[), *, FastMath, ., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =]
[+, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333]
[., log, (, z, ), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z]
[), +, z, -, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (]
[-, HALF_LOG_2_PI, ;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (]
[;, }, }, else, {, double, z2, =, z, *, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -]
[;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /]
[*, z, ;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2]
[;, ret, =, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /]
[=, (, 0.083333333333333333333, -, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, )]
[;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;]
[/, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double]
[), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {]
[-, (, 0.00277777777777777777778, -, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, )]
[), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {]
[/, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu]
[), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double]
[-, (, 0.00079365079365079365079365, -, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /, z2, )]
[), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double]
[/, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x]
[), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double]
[-, (, 0.000595238095238095238095238, -, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /, z2, ), /, z, ;]
[), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double]
[/, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart]
[), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double]
[-, 0.0008417508417508417508417508, /, z2, ), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret]
[), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double]
[/, z2, ), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }]
[), /, z2, ), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double]
[), /, z2, ), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double]
[), /, z2, ), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double]
[), /, z, ;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {]
[;, }, return, ret, ;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;]
[;, }, static, double, getDeviancePart, (, double, x, ,, double, mu, ), {, double, ret, ;, if, (, FastMath, .]
[), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;]
[<, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =]
[., abs, (, x, -, mu, ), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =]
[), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v]
[-, mu, ), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;]
[), <, 0.1, *, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v]
[), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;]
[*, (, x, +, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /]
[), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;]
[), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, )]
[+, mu, ), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +]
[), ), {, double, d, =, x, -, mu, ;, double, v, =, d, /, (, x, +, mu, )]
[;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *, d, ;, double]
[-, mu, ;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *, d]
[;, double, v, =, d, /, (, x, +, mu, ), ;, double, s1, =, v, *, d, ;, double]
[;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *]
[/, (, x, +, mu, ), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN]
[;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *]
[), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0]
[+, mu, ), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej]
[), ;, double, s1, =, v, *, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0]
[;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v]
[*, d, ;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v]
[;, double, s, =, Double, ., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v]
[;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v, *, v, ;, int, j, =, 1]
[., NaN, ;, double, ej, =, 2.0, *, x, *, v, ;, v, =, v, *, v, ;, int, j]
[;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s]
[*, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, )]
[*, x, *, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=]
[*, v, ;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, )]
[;, v, =, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s]
[=, v, *, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1]
[;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v]
[*, v, ;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej]
[;, int, j, =, 1, ;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v]
[;, while, (, s1, !=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +]
[), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *]
[!=, s, ), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (]
[), {, s, =, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *]
[=, s1, ;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +]
[;, ej, *=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, )]
[*=, v, ;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++]
[;, s1, =, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;]
[=, s, +, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;, }, ret]
[;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (]
[+, ej, /, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1]
[;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (]
[/, (, (, j, *, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }]
[;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (]
[), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log]
[+, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath]
[), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *]
[*, 2, ), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =]
[), +, 1, ), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *]
[), ;, ++, j, ;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log]
[;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu]
[;, }, ret, =, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu]
[=, s1, ;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu, ), +, mu]
[;, }, else, {, ret, =, x, *, FastMath, ., log, (, x, /, mu, ), +, mu, -, x]
[=, x, *, FastMath, ., log, (, x, /, mu, ), +, mu, -, x, ;, }, return, ret, ;]
[;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,, double, p, ,, double]
[-, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,, double, p]
[+, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,]
[*, FastMath, ., log, (, x, /, mu, ), +, mu, -, x, ;, }, return, ret, ;, }, static]
[+, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,]
[., log, (, x, /, mu, ), +, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability]
[), +, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n]
[/, mu, ), +, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,]
[), +, mu, -, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n]
[-, x, ;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,, double, p]
[;, }, return, ret, ;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,, double, p, ,, double]
[;, }, static, double, logBinomialProbability, (, int, x, ,, int, n, ,, double, p, ,, double, q, ), {, double]
[), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, )]
[==, 0, ), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *]
[), {, if, (, p, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, )]
[), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else]
[<, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;]
[), {, ret, =, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else]
[=, -, getDeviancePart, (, n, ,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (]
[-, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }]
[-, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }]
[,, n, *, q, ), -, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log]
[), -, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;]
[*, q, ), -, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q]
[), -, n, *, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (]
[*, p, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (]
[=, n, *, FastMath, ., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {]
[;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =]
[*, FastMath, ., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (]
[;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret, =]
[., log, (, q, ), ;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <]
[), ;, }, }, else, if, (, x, ==, n, ), {, if, (, q, <, 0.1, ), {, ret]
[), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, )]
[==, n, ), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *]
[), {, if, (, q, <, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, )]
[), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else]
[<, 0.1, ), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;]
[), {, ret, =, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else]
[=, -, getDeviancePart, (, n, ,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret]
[-, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }]
[-, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }]
[,, n, *, p, ), -, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log]
[), -, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;]
[*, p, ), -, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p]
[), -, n, *, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret]
[*, q, ;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else]
[;, }, else, {, ret, =, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret]
[=, n, *, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, )]
[;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n]
[*, FastMath, ., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError]
[;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n]
[., log, (, p, ), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x]
[), ;, }, }, else, {, ret, =, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (]
[=, getStirlingError, (, n, ), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (]
[;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;]
[-, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *]
[-, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, )]
[-, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n]
[-, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p]
[), -, getStirlingError, (, x, ), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *]
[-, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n]
[), -, getStirlingError, (, n, -, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (]
[-, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, )]
[), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q]
[-, x, ), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n]
[), -, getDeviancePart, (, x, ,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q]
[-, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *]
[,, n, *, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =]
[), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI]
[*, p, ), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils]
[), -, getDeviancePart, (, n, -, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI]
[;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;]
[,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x]
[-, x, ,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n]
[,, n, *, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x]
[), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n]
[*, q, ), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), )]
[), ;, double, f, =, (, MathUtils, ., TWO_PI, *, x, *, (, n, -, x, ), ), /, n]
[;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret, ;, }]
[/, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret]
[), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return]
[*, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f]
[*, x, *, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log]
[., TWO_PI, *, x, *, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath]
[*, (, n, -, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f]
[), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return]
[), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }]
[-, x, ), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret]
[), ), /, n, ;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }]
[;, ret, =, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret, ;, }]
[=, -, 0.5, *, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret, ;, }, }]
[;, }, return, ret, ;, }, }]
[+, ret, ;, }, return, ret, ;, }, }]
[*, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret, ;, }, }]
[*, FastMath, ., log, (, f, ), +, ret, ;, }, return, ret, ;, }, }]
[+, ret, ;, }, return, ret, ;, }, }]
[., log, (, f, ), +, ret, ;, }, return, ret, ;, }, }]
[), +, ret, ;, }, return, ret, ;, }, }]
[;, }, return, ret, ;, }, }]
[;, }, }]
