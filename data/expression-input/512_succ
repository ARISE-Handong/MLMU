[;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT]
[., error, (, "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", ,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand"]
[,, "Internal Error: Don't know how to handle {0}", ), ;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static]
[), ;, static, final, DiagnosticType, BAD_DELETE, =, DiagnosticType, ., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String]
[;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,]
[., warning, (, "JSC_BAD_DELETE_OPERAND", ,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST]
[,, "delete operator needs a reference operand", ), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning]
[), ;, protected, static, final, String, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, =, "overriding prototype with non-object", ;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST"]
[;, static, final, DiagnosticType, DETERMINISTIC_TEST, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static]
[;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static]
[., warning, (, "JSC_DETERMINISTIC_TEST", ,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning]
[,, "condition always evaluates to {2}\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n"]
[), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;]
[+, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}"]
[+, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n"]
[+, "right: {1}", ), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}"]
[), ;, static, final, DiagnosticType, DETERMINISTIC_TEST_NO_RESULT, =, DiagnosticType, ., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;]
[;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =]
[., warning, (, "JSC_DETERMINISTIC_TEST_NO_RESULT", ,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning]
[,, "condition always evaluates to the same value\n", +, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum"]
[), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY]
[+, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final]
[+, "left : {0}\n", +, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;]
[+, "right: {1}", ), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final]
[), ;, static, final, DiagnosticType, INEXISTENT_ENUM_ELEMENT, =, DiagnosticType, ., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY]
[;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR]
[., warning, (, "JSC_INEXISTENT_ENUM_ELEMENT", ,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}"]
[,, "element {0} does not exist on this enum", ), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static]
[), ;, static, final, DiagnosticType, INEXISTENT_PROPERTY, =, DiagnosticType, ., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType]
[;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION]
[., disabled, (, "JSC_INEXISTENT_PROPERTY", ,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,]
[,, "Property {0} never defined on {1}", ), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static]
[), ;, protected, static, final, DiagnosticType, NOT_A_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType]
[;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =]
[., warning, (, "JSC_NOT_A_CONSTRUCTOR", ,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}"]
[,, "cannot instantiate non-constructor", ), ;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, BIT_OPERATION, =, DiagnosticType, ., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE]
[;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =]
[., warning, (, "JSC_BAD_TYPE_FOR_BIT_OPERATION", ,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable"]
[,, "operator {0} cannot be applied to {1}", ), ;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final]
[), ;, static, final, DiagnosticType, NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE]
[;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =]
[., warning, (, "JSC_NOT_FUNCTION_TYPE", ,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword"]
[,, "{0} expressions are not callable", ), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONSTRUCTOR_NOT_CALLABLE, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE]
[;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =]
[., warning, (, "JSC_CONSTRUCTOR_NOT_CALLABLE", ,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)"]
[,, "Constructor {0} should be called with the \"new\" keyword", ), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final]
[), ;, static, final, DiagnosticType, FUNCTION_MASKS_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF]
[;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =]
[., warning, (, "JSC_FUNCTION_MASKS_VARIABLE", ,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information"]
[,, "function {0} masks variable (IE bug)", ), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final]
[), ;, static, final, DiagnosticType, MULTIPLE_VAR_DEF, =, DiagnosticType, ., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP]
[;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =]
[., warning, (, "JSC_MULTIPLE_VAR_DEF", ,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined"]
[,, "declaration of multiple variables with shared type information", ), ;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final]
[), ;, static, final, DiagnosticType, ENUM_DUP, =, DiagnosticType, ., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT]
[;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =]
[., error, (, "JSC_ENUM_DUP", ,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant"]
[,, "enum element {0} already defined", ), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final]
[), ;, static, final, DiagnosticType, ENUM_NOT_CONSTANT, =, DiagnosticType, ., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION]
[;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_ENUM_NOT_CONSTANT", ,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,"]
[,, "enum key {0} must be a syntactic constant", ), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;]
[), ;, static, final, DiagnosticType, INVALID_INTERFACE_MEMBER_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final]
[;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =]
[., warning, (, "JSC_INVALID_INTERFACE_MEMBER_DECLARATION", ,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY"]
[,, "interface members can only be empty property declarations,", +, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;]
[), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE]
[+, " empty functions{0}", ), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final]
[), ;, static, final, DiagnosticType, INTERFACE_FUNCTION_NOT_EMPTY, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE]
[;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =]
[., warning, (, "JSC_INTERFACE_FUNCTION_NOT_EMPTY", ,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s"]
[,, "interface member functions must have an empty body", ), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONFLICTING_EXTENDED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE]
[;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_CONFLICTING_EXTENDED_TYPE", ,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; "]
[,, "{1} cannot extend this type; {0}s can only extend {0}s", ), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;]
[), ;, static, final, DiagnosticType, CONFLICTING_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final]
[;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =]
[., warning, (, "JSC_CONFLICTING_IMPLEMENTED_TYPE", ,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE"]
[,, "{0} cannot implement this type; ", +, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;]
[), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY]
[+, "an interface can only extend, but not implement interfaces", ), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final]
[), ;, static, final, DiagnosticType, BAD_IMPLEMENTED_TYPE, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY]
[;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_IMPLEMENTS_NON_INTERFACE", ,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; "]
[,, "can only implement interfaces", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;]
[), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final]
[;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY", ,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY"]
[,, "property {0} already defined on superclass {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it"]
[), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final]
[+, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;]
[), ;, static, final, DiagnosticType, HIDDEN_INTERFACE_PROPERTY, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final]
[;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", )]
[., warning, (, "JSC_HIDDEN_INTERFACE_PROPERTY", ,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH"]
[,, "property {0} already defined on interface {1}; ", +, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n"]
[), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}"]
[+, "use @override to override it", ), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n"]
[), ;, static, final, DiagnosticType, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, =, DiagnosticType, ., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}"]
[;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =]
[., warning, (, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", ,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType]
[,, "mismatch of the {0} property type and the type ", +, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE"]
[), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE]
[+, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;]
[+, "of the property it overrides from superclass {1}\n", +, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}"]
[+, "original: {2}\n", +, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;]
[+, "override: {3}", ), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNKNOWN_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE]
[;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =]
[., warning, (, "JSC_UNKNOWN_OVERRIDE", ,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface"]
[,, "property {0} not defined on any superclass of {1}", ), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final]
[), ;, static, final, DiagnosticType, INTERFACE_METHOD_OVERRIDE, =, DiagnosticType, ., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE]
[;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =]
[., warning, (, "JSC_INTERFACE_METHOD_OVERRIDE", ,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression"]
[,, "property {0} is already defined by the {1} extended interface", ), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNKNOWN_EXPR_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE]
[;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =]
[., warning, (, "JSC_UNKNOWN_EXPR_TYPE", ,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type"]
[,, "could not determine the type of this expression", ), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNRESOLVED_TYPE, =, DiagnosticType, ., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT]
[;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_UNRESOLVED_TYPE", ,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). "]
[,, "could not resolve the name {0} to a type", ), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;]
[), ;, static, final, DiagnosticType, WRONG_ARGUMENT_COUNT, =, DiagnosticType, ., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final]
[;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_WRONG_ARGUMENT_COUNT", ,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST"]
[,, "Function {0}: called with {1} argument(s). ", +, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs."]
[), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final]
[+, "Function requires at least {2} argument(s){3}.", ), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;]
[), ;, static, final, DiagnosticType, ILLEGAL_IMPLICIT_CAST, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final]
[;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_ILLEGAL_IMPLICIT_CAST", ,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE"]
[,, "Illegal annotation on {0}. @implicitCast may only be used in ", +, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}"]
[), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final]
[+, "externs.", ), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;]
[), ;, static, final, DiagnosticType, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, =, DiagnosticType, ., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final]
[;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =]
[., warning, (, "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", ,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE"]
[,, "Interface {0} has a property {1} with incompatible types in ", +, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;]
[), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT]
[+, "its super interfaces {2} and {3}", ), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final]
[), ;, static, final, DiagnosticType, EXPECTED_THIS_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT]
[;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =]
[., warning, (, "JSC_EXPECTED_THIS_TYPE", ,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs"]
[,, "\"{0}\" must be called with a \"this\" type", ), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final]
[), ;, static, final, DiagnosticType, IN_USED_WITH_STRUCT, =, DiagnosticType, ., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION]
[;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_IN_USED_WITH_STRUCT", ,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance "]
[,, "Cannot use the IN operator with structs", ), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;]
[), ;, static, final, DiagnosticType, ILLEGAL_PROPERTY_CREATION, =, DiagnosticType, ., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final]
[;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =]
[., warning, (, "JSC_ILLEGAL_PROPERTY_CREATION", ,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY"]
[,, "Cannot add a property to a struct instance ", +, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;]
[), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS]
[+, "after it is constructed.", ), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, ILLEGAL_OBJLIT_KEY, =, DiagnosticType, ., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS]
[;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION]
[., warning, (, "ILLEGAL_OBJLIT_KEY", ,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,]
[,, "Illegal key, the object literal is a {0}", ), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,]
[), ;, static, final, DiagnosticGroup, ALL_DIAGNOSTICS, =, new, DiagnosticGroup, (, DETERMINISTIC_TEST, ,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,]
[;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, final, JSTypeRegistry, typeRegistry]
[,, DETERMINISTIC_TEST_NO_RESULT, ,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP]
[,, INEXISTENT_ENUM_ELEMENT, ,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT]
[,, INEXISTENT_PROPERTY, ,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION]
[,, NOT_A_CONSTRUCTOR, ,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY]
[,, BIT_OPERATION, ,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE]
[,, NOT_CALLABLE, ,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE]
[,, CONSTRUCTOR_NOT_CALLABLE, ,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE]
[,, FUNCTION_MASKS_VARIABLE, ,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY]
[,, MULTIPLE_VAR_DEF, ,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY]
[,, ENUM_DUP, ,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH]
[,, ENUM_NOT_CONSTANT, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE]
[,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE]
[,, INTERFACE_FUNCTION_NOT_EMPTY, ,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE]
[,, CONFLICTING_EXTENDED_TYPE, ,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE]
[,, CONFLICTING_IMPLEMENTED_TYPE, ,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT]
[,, BAD_IMPLEMENTED_TYPE, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST]
[,, HIDDEN_SUPERCLASS_PROPERTY, ,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE]
[,, HIDDEN_INTERFACE_PROPERTY, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE]
[,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT]
[,, UNKNOWN_OVERRIDE, ,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION]
[,, INTERFACE_METHOD_OVERRIDE, ,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY]
[,, UNKNOWN_EXPR_TYPE, ,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter]
[,, UNRESOLVED_TYPE, ,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR]
[,, WRONG_ARGUMENT_COUNT, ,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator]
[,, ILLEGAL_IMPLICIT_CAST, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS]
[,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator]
[,, EXPECTED_THIS_TYPE, ,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT]
[,, IN_USED_WITH_STRUCT, ,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator]
[,, ILLEGAL_PROPERTY_CREATION, ,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER]
[,, ILLEGAL_OBJLIT_KEY, ,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator]
[,, RhinoErrorReporter, ., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER]
[,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT]
[., TYPE_PARSE_ERROR, ,, TypedScopeCreator, ., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder]
[,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final]
[., UNKNOWN_LENDS, ,, TypedScopeCreator, ., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;]
[,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private]
[., LENDS_ON_NON_OBJECT, ,, TypedScopeCreator, ., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler]
[,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;]
[., CTOR_INITIALIZER, ,, TypedScopeCreator, ., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator]
[,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter]
[., IFACE_INITIALIZER, ,, FunctionTypeBuilder, ., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;, private, final]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private, final, JSTypeRegistry]
[., THIS_TYPE_NON_OBJECT, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, TypeValidator, validator, ;, private, final, ReverseAbstractInterpreter, reverseInterpreter, ;, private]
[;, private, InferJSDocInfo, inferJSDocInfo, =, null, ;, private, int, typedCount, =, 0, ;, private, int, nullCount, =, 0, ;, private]
[;, private, int, typedCount, =, 0, ;, private, int, nullCount, =, 0, ;, private, int, unknownCount, =, 0, ;, private]
[;, private, int, nullCount, =, 0, ;, private, int, unknownCount, =, 0, ;, private, boolean, inExterns, ;, private, int, noTypeCheckSection]
[;, private, int, unknownCount, =, 0, ;, private, boolean, inExterns, ;, private, int, noTypeCheckSection, =, 0, ;, public, TypeCheck, (]
[;, private, boolean, inExterns, ;, private, int, noTypeCheckSection, =, 0, ;, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,]
[;, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, Scope, topScope, ,, MemoizedScopeCreator, scopeCreator, ,, CheckLevel]
[=, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this]
[., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter]
[;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry]
[=, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this]
[., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry]
[;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this]
[., getTypeValidator, (, ), ;, this, ., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope]
[=, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator]
[., reverseInterpreter, =, reverseInterpreter, ;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator]
[;, this, ., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this]
[=, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride]
[., typeRegistry, =, typeRegistry, ;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride]
[;, this, ., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this]
[=, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes]
[., topScope, =, topScope, ;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes]
[;, this, ., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this]
[=, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new]
[., scopeCreator, =, scopeCreator, ;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo]
[;, this, ., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (]
[=, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }]
[., reportMissingOverride, =, reportMissingOverride, ;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, )]
[;, this, ., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck]
[=, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,]
[., reportUnknownTypes, =, reportUnknownTypes, ;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck, (, AbstractCompiler]
[;, this, ., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter]
[=, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,]
[., inferJSDocInfo, =, new, InferJSDocInfo, (, compiler, ), ;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry]
[;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes, )]
[), ;, }, public, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ,, CheckLevel, reportMissingOverride, ,, CheckLevel, reportUnknownTypes]
[,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,, reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,]
[,, typeRegistry, ,, null, ,, null, ,, reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter]
[,, null, ,, null, ,, reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry]
[,, null, ,, reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, )]
[,, reportMissingOverride, ,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this]
[,, reportUnknownTypes, ), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler]
[), ;, }, TypeCheck, (, AbstractCompiler, compiler, ,, ReverseAbstractInterpreter, reverseInterpreter, ,, JSTypeRegistry, typeRegistry, ), {, this, (, compiler, ,, reverseInterpreter]
[,, reverseInterpreter, ,, typeRegistry, ,, null, ,, null, ,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck]
[,, typeRegistry, ,, null, ,, null, ,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (]
[,, null, ,, null, ,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report]
[,, null, ,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {]
[,, CheckLevel, ., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =]
[,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =, report, ;, return, this]
[., WARNING, ,, CheckLevel, ., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =, report, ;]
[), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =, report, ;, return, this, ;, }, @, Override]
[., OFF, ), ;, }, TypeCheck, reportMissingProperties, (, boolean, report, ), {, reportMissingProperties, =, report, ;, return, this, ;, }]
[=, report, ;, return, this, ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[;, return, this, ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, .]
[;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkNotNull, (, scopeCreator]
[;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState]
[., checkNotNull, (, scopeCreator, ), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (]
[), ;, Preconditions, ., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, .]
[;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions]
[., checkNotNull, (, topScope, ), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs]
[), ;, Node, externsAndJs, =, jsRoot, ., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;]
[;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, .]
[., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==]
[;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (]
[!=, null, ), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;]
[), ;, Preconditions, ., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (]
[;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot, ,]
[., checkState, (, externsRoot, ==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null]
[), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot]
[||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,]
[==, null, ||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (]
[||, externsAndJs, ., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,]
[), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot]
[., hasChild, (, externsRoot, ), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, )]
[), ), ;, if, (, externsRoot, !=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (]
[), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot, ,, false, ), ;, }, public, Scope]
[!=, null, ), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot, ,, false, ), ;, }]
[), {, check, (, externsRoot, ,, true, ), ;, }, check, (, jsRoot, ,, false, ), ;, }, public, Scope]
[;, }, check, (, jsRoot, ,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, )]
[,, true, ), ;, }, check, (, jsRoot, ,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,]
[), ;, }, check, (, jsRoot, ,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot]
[;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==, null]
[,, false, ), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[), ;, }, public, Scope, processForTesting, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, scopeCreator, ==]
[;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=]
[., checkState, (, scopeCreator, ==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState]
[), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, )]
[==, null, ), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent]
[), ;, Preconditions, ., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, )]
[;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent]
[., checkState, (, topScope, ==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, )]
[), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, .]
[==, null, ), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =]
[), ;, Preconditions, ., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, .]
[;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, )]
[., checkState, (, jsRoot, ., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, )]
[), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler]
[!=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator]
[., getParent, (, ), !=, null, ), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new]
[), ;, Node, externsAndJsRoot, =, jsRoot, ., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler]
[;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot]
[., getParent, (, ), ;, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator]
[=, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null]
[;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,]
[), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler]
[), ), ;, topScope, =, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (]
[=, scopeCreator, ., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,]
[;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (]
[., createScope, (, externsAndJsRoot, ,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,]
[,, null, ), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference]
[), ;, TypeInferencePass, inference, =, new, TypeInferencePass, (, compiler, ,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process]
[;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope, ;]
[,, reverseInterpreter, ,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot]
[,, topScope, ,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot]
[,, scopeCreator, ), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;]
[), ;, inference, ., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope]
[;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean]
[., process, (, externsRoot, ,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public]
[,, jsRoot, ), ;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node]
[), ;, process, (, externsRoot, ,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,]
[;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull, (]
[,, jsRoot, ), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions]
[), ;, return, topScope, ;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull]
[;, }, public, void, check, (, Node, node, ,, boolean, externs, ), {, Preconditions, ., checkNotNull, (, node, ), ;]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t, .]
[., checkNotNull, (, node, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns]
[), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t]
[;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo]
[,, this, ,, scopeCreator, ), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if]
[,, scopeCreator, ), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs]
[), ;, inExterns, =, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {]
[=, externs, ;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process]
[;, t, ., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node]
[;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo, .]
[., traverseWithScope, (, node, ,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null]
[,, topScope, ), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else]
[), ;, if, (, externs, ), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo]
[), {, inferJSDocInfo, ., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo, ., process, (, null, ,]
[;, }, else, {, inferJSDocInfo, ., process, (, null, ,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (, Node]
[., process, (, node, ,, null, ), ;, }, else, {, inferJSDocInfo, ., process, (, null, ,, node, ), ;]
[,, null, ), ;, }, else, {, inferJSDocInfo, ., process, (, null, ,, node, ), ;, }, }, private, void]
[), ;, }, else, {, inferJSDocInfo, ., process, (, null, ,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (]
[;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (, n, ., getType, (]
[., process, (, null, ,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, )]
[,, node, ), ;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (, n]
[), ;, }, }, private, void, checkNoTypeCheckSection, (, Node, n, ,, boolean, enterSection, ), {, switch, (, n, ., getType]
[), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR]
[:, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN]
[., SCRIPT, :, case, Token, ., BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token]
[:, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n]
[., BLOCK, :, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info]
[:, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (]
[:, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null]
[., FUNCTION, :, case, Token, ., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info]
[:, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (]
[., ASSIGN, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, .]
[;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (]
[), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, .]
[&&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection]
[!=, null, &&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else]
[&&, info, ., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection]
[), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, .]
[., isNoTypeCheck, (, ), ), {, if, (, enterSection, ), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;]
[), {, noTypeCheckSection, ++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==, 0]
[;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==, 0, ), ;, break, ;]
[++, ;, }, else, {, noTypeCheckSection, --, ;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==, 0, ), ;, break]
[;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==, 0, ), ;, break, ;, }, }, private, void, report, (]
[--, ;, }, }, validator, ., setShouldReport, (, noTypeCheckSection, ==, 0, ), ;, break, ;, }, }, private, void, report]
[;, break, ;, }, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ...]
[., setShouldReport, (, noTypeCheckSection, ==, 0, ), ;, break, ;, }, }, private, void, report, (, NodeTraversal, t, ,, Node]
[), ;, break, ;, }, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String]
[==, 0, ), ;, break, ;, }, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType]
[), ;, break, ;, }, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, diagnosticType, ,, String]
[), {, t, ., report, (, n, ,, diagnosticType, ,, arguments, ), ;, }, }, @, Override, public, boolean, shouldTraverse]
[==, 0, ), {, t, ., report, (, n, ,, diagnosticType, ,, arguments, ), ;, }, }, @, Override, public]
[), {, t, ., report, (, n, ,, diagnosticType, ,, arguments, ), ;, }, }, @, Override, public, boolean, shouldTraverse]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, checkNoTypeCheckSection]
[., report, (, n, ,, diagnosticType, ,, arguments, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[,, diagnosticType, ,, arguments, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[,, arguments, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t]
[,, true, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =]
[), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, )]
[:, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, )]
[., FUNCTION, :, final, Scope, outerScope, =, t, ., getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild]
[;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null]
[., getScope, (, ), ;, final, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if]
[;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName]
[., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionPrivateName, !=, null, &&, functionPrivateName, ., length, (, )]
[), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;]
[&&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (]
[&&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[!=, null, &&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&]
[&&, functionPrivateName, ., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (]
[&&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType]
[>, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, )]
[., length, (, ), >, 0, &&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, .]
[&&, outerScope, ., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType]
[&&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (]
[., isDeclared, (, functionPrivateName, ,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, )]
[,, false, ), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), )]
[), &&, !, (, outerScope, ., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report]
[), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;]
[), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;]
[), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true]
[instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }]
[., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;]
[., getVar, (, functionPrivateName, ), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,]
[), ., getType, (, ), instanceof, FunctionType, ), ), {, report, (, t, ,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, )]
[;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[,, n, ,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void]
[,, FUNCTION_MASKS_VARIABLE, ,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (]
[,, functionPrivateName, ), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), ;, }, break, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSType, childType]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CAST, :, Node, expr, =, n, .]
[), {, case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,]
[., getType, (, ), ), {, case, Token, ., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;]
[:, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (, expr, )]
[., CAST, :, Node, expr, =, n, ., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (]
[;, ensureTyped, (, t, ,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (, n, )]
[., getFirstChild, (, ), ;, ensureTyped, (, t, ,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =]
[;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType]
[,, n, ,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =]
[,, getJSType, (, expr, ), ), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (]
[), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (]
[), ), ;, JSType, castType, =, getJSType, (, n, ), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if]
[;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {, expr]
[), ;, JSType, exprType, =, getJSType, (, expr, ), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {]
[;, if, (, castType, ., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }, break]
[), ;, if, (, castType, ., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }]
[), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName]
[., isSubtype, (, exprType, ), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, .]
[), ), {, expr, ., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =]
[;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;]
[., setJSType, (, castType, ), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,]
[), ;, }, break, ;, case, Token, ., NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, )]
[:, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable]
[., NAME, :, typeable, =, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST]
[=, visitName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false]
[;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case]
[,, parent, ), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, .]
[), ;, break, ;, case, Token, ., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :]
[:, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (]
[., PARAM_LIST, :, typeable, =, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,]
[=, false, ;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (, n, .]
[;, break, ;, case, Token, ., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (, n, ., getLastChild, (]
[:, ensureTyped, (, t, ,, n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case]
[., COMMA, :, ensureTyped, (, t, ,, n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break]
[;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE]
[,, n, ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :]
[,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token]
[), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,]
[), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, ensureTyped]
[:, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, .]
[., TRUE, :, case, Token, ., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[:, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t]
[., FALSE, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped]
[;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,, t, ., getScope, (, ), .]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,, t]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,, t, ., getScope]
[), ;, break, ;, case, Token, ., THIS, :, ensureTyped, (, t, ,, n, ,, t, ., getScope, (, )]
[:, ensureTyped, (, t, ,, n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;]
[., THIS, :, ensureTyped, (, t, ,, n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;]
[;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case]
[,, n, ,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL]
[,, t, ., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped]
[), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;]
[., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE]
[., getScope, (, ), ., getTypeOfThis, (, ), ), ;, break, ;, case, Token, ., NULL, :, ensureTyped, (, t]
[:, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t]
[., NULL, :, ensureTyped, (, t, ,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped]
[;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case]
[,, n, ,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE]
[,, NULL_TYPE, ), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;]
[), ;, break, ;, case, Token, ., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t]
[., NUMBER, :, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped]
[;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE]
[,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;]
[), ;, break, ;, case, Token, ., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false]
[., STRING, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable]
[;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case]
[,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case]
[,, STRING_TYPE, ), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, .]
[), ;, break, ;, case, Token, ., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :]
[:, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case]
[., STRING_KEY, :, typeable, =, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break]
[=, false, ;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, .]
[;, break, ;, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :]
[:, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE]
[., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n]
[:, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case]
[., SETTER_DEF, :, break, ;, case, Token, ., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break]
[:, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t]
[., ARRAYLIT, :, ensureTyped, (, t, ,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped]
[;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case]
[,, n, ,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE]
[,, ARRAY_TYPE, ), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;]
[), ;, break, ;, case, Token, ., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t]
[., REGEXP, :, ensureTyped, (, t, ,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp]
[;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !]
[,, n, ,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent]
[,, REGEXP_TYPE, ), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;]
[), ;, break, ;, case, Token, ., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =]
[:, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&]
[., GETPROP, :, visitGetProp, (, t, ,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (]
[;, typeable, =, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;]
[,, n, ,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (]
[,, parent, ), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[), ;, typeable, =, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[=, !, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;]
[;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;]
[&&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM]
[), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;]
[==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =]
[., getFirstChild, (, ), ==, n, ), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n]
[), ;, break, ;, case, Token, ., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;]
[:, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar]
[., GETELEM, :, visitGetElem, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR]
[;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable]
[,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;]
[=, false, ;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false]
[;, break, ;, case, Token, ., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[:, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew]
[., VAR, :, visitVar, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW]
[;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break]
[,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;]
[=, false, ;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, .]
[:, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n]
[., NEW, :, visitNew, (, t, ,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t]
[;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent, .]
[,, n, ), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =]
[), ;, break, ;, case, Token, ., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent]
[:, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case]
[., CALL, :, visitCall, (, t, ,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break]
[;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t]
[,, n, ), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :]
[), ;, typeable, =, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (]
[=, !, parent, ., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n]
[;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[., isExprResult, (, ), ;, break, ;, case, Token, ., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable]
[:, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case]
[., RETURN, :, visitReturn, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC]
[;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =, n]
[,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =]
[=, false, ;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild]
[;, break, ;, case, Token, ., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, )]
[:, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, )]
[., DEC, :, case, Token, ., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,]
[:, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (]
[., INC, :, left, =, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, .]
[=, n, ., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,]
[;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, )]
[., getFirstChild, (, ), ;, checkPropCreation, (, t, ,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,]
[;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t]
[,, left, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;]
[), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (]
[;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t]
[., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n]
[,, left, ,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;]
[,, getJSType, (, left, ), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;]
[,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :]
[), ,, "increment/decrement", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT]
[), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (]
[;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE]
[,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;]
[), ;, break, ;, case, Token, ., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t]
[., NOT, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped]
[;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;]
[), ;, break, ;, case, Token, ., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t]
[., VOID, :, ensureTyped, (, t, ,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped]
[;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case]
[,, n, ,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE]
[,, VOID_TYPE, ), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;]
[), ;, break, ;, case, Token, ., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType]
[., TYPEOF, :, ensureTyped, (, t, ,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType]
[;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if]
[,, n, ,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild]
[,, STRING_TYPE, ), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, )]
[), ;, break, ;, case, Token, ., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;]
[:, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, )]
[., BITNOT, :, childType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context]
[=, getJSType, (, n, ., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {]
[;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil]
[), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,]
[., getFirstChild, (, ), ), ;, if, (, !, childType, ., matchesInt32Context, (, ), ), {, report, (, t, ,]
[), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[., matchesInt32Context, (, ), ), {, report, (, t, ,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, .]
[;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token]
[,, n, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (]
[,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (, ), )]
[,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }]
[,, childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;]
[., opToStr, (, n, ., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (]
[), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break]
[., getType, (, ), ), ,, childType, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,]
[), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case]
[., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, )]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =]
[,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =, n, .]
[), ;, break, ;, case, Token, ., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (]
[:, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,]
[., POS, :, case, Token, ., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (]
[:, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left]
[., NEG, :, left, =, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType]
[=, n, ., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,]
[;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t]
[., getFirstChild, (, ), ;, validator, ., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", )]
[;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token, .]
[., expectNumber, (, t, ,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n]
[,, left, ,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;]
[,, getJSType, (, left, ), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;]
[,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :]
[), ,, "sign operator", ), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ]
[), ;, ensureTyped, (, t, ,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token]
[;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token]
[,, n, ,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token]
[,, NUMBER_TYPE, ), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ]
[), ;, break, ;, case, Token, ., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case]
[:, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n]
[., EQ, :, case, Token, ., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left]
[:, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;]
[., NE, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (]
[:, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild]
[., SHEQ, :, case, Token, ., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n]
[:, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, if, (]
[., SHNE, :, {, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;]
[=, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf]
[;, right, =, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, )]
[=, n, ., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (, right, .]
[;, if, (, left, ., isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString]
[., getLastChild, (, ), ;, if, (, left, ., isTypeOf, (, ), ), {, if, (, right, ., isString, (]
[), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (, t, ,, right, ,, right, ., getString]
[., isTypeOf, (, ), ), {, if, (, right, ., isString, (, ), ), {, checkTypeofString, (, t, ,, right]
[), {, checkTypeofString, (, t, ,, right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (]
[., isString, (, ), ), {, checkTypeofString, (, t, ,, right, ,, right, ., getString, (, ), ), ;, }]
[;, }, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString]
[,, right, ,, right, ., getString, (, ), ), ;, }, }, else, if, (, right, ., isTypeOf, (, )]
[,, right, ., getString, (, ), ), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&, left]
[), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString, (, ), ), {]
[., getString, (, ), ), ;, }, }, else, if, (, right, ., isTypeOf, (, ), &&, left, ., isString]
[), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (]
[&&, left, ., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), )]
[., isTypeOf, (, ), &&, left, ., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,, left, .]
[), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (]
[., isString, (, ), ), {, checkTypeofString, (, t, ,, left, ,, left, ., getString, (, ), ), ;, }]
[;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType]
[,, left, ,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =]
[,, left, ., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (]
[), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =]
[., getString, (, ), ), ;, }, leftType, =, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, )]
[=, getJSType, (, left, ), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (]
[;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =]
[), ;, rightType, =, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted]
[=, getJSType, (, right, ), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, .]
[;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue]
[), ;, JSType, leftTypeRestricted, =, leftType, ., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;]
[;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n]
[., restrictByNotNullOrUndefined, (, ), ;, JSType, rightTypeRestricted, =, rightType, ., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN]
[;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||]
[., restrictByNotNullOrUndefined, (, ), ;, TernaryValue, result, =, TernaryValue, ., UNKNOWN, ;, if, (, n, ., getType, (, ), ==]
[;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token]
[., UNKNOWN, ;, if, (, n, ., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, )]
[), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {]
[||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, )]
[==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, .]
[., getType, (, ), ==, Token, ., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {]
[||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, )]
[., EQ, ||, n, ., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (]
[), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {]
[==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE]
[., getType, (, ), ==, Token, ., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if]
[), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {]
[., NE, ), {, result, =, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, )]
[=, leftTypeRestricted, ., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {, result, =, result]
[;, if, (, n, ., isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }, }]
[., testForEquality, (, rightTypeRestricted, ), ;, if, (, n, ., isNE, (, ), ), {, result, =, result, ., not]
[), ;, if, (, n, ., isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }]
[), {, result, =, result, ., not, (, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith]
[., isNE, (, ), ), {, result, =, result, ., not, (, ), ;, }, }, else, {, if, (]
[=, result, ., not, (, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, )]
[;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, .]
[., not, (, ), ;, }, }, else, {, if, (, !, leftTypeRestricted, ., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {]
[), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, .]
[), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, .]
[., canTestForShallowEqualityWith, (, rightTypeRestricted, ), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue]
[), ), {, result, =, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue]
[=, n, ., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }]
[;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,]
[?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {]
[==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue]
[., getType, (, ), ==, Token, ., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if]
[?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {]
[., SHEQ, ?, TernaryValue, ., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN]
[:, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,]
[., FALSE, :, TernaryValue, ., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (]
[;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,]
[., TRUE, ;, }, }, if, (, result, !=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,]
[), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (]
[!=, TernaryValue, ., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,]
[), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (]
[., UNKNOWN, ), {, report, (, t, ,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, .]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case]
[,, n, ,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString]
[,, DETERMINISTIC_TEST, ,, leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString, (, )]
[,, leftType, ., toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;]
[,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n]
[., toString, (, ), ,, rightType, ., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped]
[,, result, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;]
[., toString, (, ), ,, result, ., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE]
[), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :]
[., toString, (, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case]
[;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case]
[,, BOOLEAN_TYPE, ), ;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, .]
[), ;, break, ;, }, case, Token, ., LT, :, case, Token, ., LE, :, case, Token, ., GT, :]
[:, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (]
[., LT, :, case, Token, ., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =]
[:, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, )]
[., LE, :, case, Token, ., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild]
[:, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType]
[., GT, :, case, Token, ., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType]
[:, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, ., getLastChild, (]
[., GE, :, leftType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, .]
[=, getJSType, (, n, ., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, ., getLastChild, (, ), )]
[;, rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), )]
[), ;, rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, )]
[., getFirstChild, (, ), ), ;, rightType, =, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType]
[=, getJSType, (, n, ., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {, validator]
[;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,]
[), ;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType]
[., getLastChild, (, ), ), ;, if, (, rightType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t]
[), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType]
[., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }]
[;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,]
[., expectNumber, (, t, ,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (]
[,, n, ,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator]
[,, leftType, ,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber]
[,, "left side of numeric comparison", ), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t]
[), ;, }, else, if, (, leftType, ., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n]
[), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType]
[., isNumber, (, ), ), {, validator, ., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }]
[;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }, else]
[., expectNumber, (, t, ,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (]
[,, n, ,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&, rightType, .]
[,, rightType, ,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (]
[,, "right side of numeric comparison", ), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), )]
[), ;, }, else, if, (, leftType, ., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }]
[), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,]
[&&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (]
[., matchesNumberContext, (, ), &&, rightType, ., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;]
[), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, leftType, ,]
[., matchesNumberContext, (, ), ), {, }, else, {, String, message, =, "left side of comparison", ;, validator, ., expectString, (, t, ,]
[;, validator, ., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,]
[;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message]
[., expectString, (, t, ,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[,, n, ,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,]
[,, leftType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (]
[,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, )]
[), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;]
[;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, .]
[., expectNotNullOrUndefined, (, t, ,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison"]
[,, n, ,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString]
[,, leftType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t]
[,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n]
[,, getNativeType, (, STRING_TYPE, ), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType]
[), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator]
[), ), ;, message, =, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;]
[=, "right side of comparison", ;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (]
[;, validator, ., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,]
[;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }]
[., expectString, (, t, ,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[,, n, ,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,]
[,, rightType, ,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (]
[,, message, ), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, )]
[), ;, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =]
[., expectNotNullOrUndefined, (, t, ,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (]
[,, n, ,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,]
[,, rightType, ,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, )]
[,, message, ,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break]
[,, getNativeType, (, STRING_TYPE, ), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left]
[), ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :]
[;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, .]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, )]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right]
[), ;, break, ;, case, Token, ., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n]
[:, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType]
[., IN, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType]
[=, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right]
[;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (]
[., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;]
[=, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,]
[;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, )]
[., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,]
[=, getJSType, (, right, ), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'"]
[;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject]
[), ;, validator, ., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, .]
[;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (]
[., expectString, (, t, ,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t]
[,, left, ,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType]
[,, getJSType, (, left, ), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object"]
[,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType]
[), ,, "left side of 'in'", ), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (]
[), ;, validator, ., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct]
[;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }]
[., expectObject, (, t, ,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), )]
[,, n, ,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t]
[,, rightType, ,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right]
[,, "'in' requires an object", ), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT]
[), ;, if, (, rightType, ., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;]
[), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, )]
[., isStruct, (, ), ), {, report, (, t, ,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,]
[;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =]
[,, right, ,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token]
[,, IN_USED_WITH_STRUCT, ), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF]
[), ;, }, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left]
[;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, .]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, )]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right]
[), ;, break, ;, case, Token, ., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n]
[:, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType]
[., INSTANCEOF, :, left, =, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType]
[=, n, ., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right]
[;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;]
[., getFirstChild, (, ), ;, right, =, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), .]
[=, n, ., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, .]
[;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,]
[., getLastChild, (, ), ;, rightType, =, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (]
[=, getJSType, (, right, ), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (]
[;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject]
[., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", )]
[), ., restrictByNotNullOrUndefined, (, ), ;, validator, ., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false"]
[;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,]
[., expectAnyObject, (, t, ,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t]
[,, left, ,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType]
[,, getJSType, (, left, ), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object"]
[,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t]
[), ,, "deterministic instanceof yields false", ), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (]
[), ;, validator, ., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n]
[;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t]
[., expectActualObject, (, t, ,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, )]
[,, right, ,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, rightType, ,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, .]
[,, "instanceof requires an object", ), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :]
[), ;, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (]
[;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =]
[), ;, break, ;, case, Token, ., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;]
[:, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case]
[., ASSIGN, :, visitAssign, (, t, ,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH]
[;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, .]
[,, n, ), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[=, false, ;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :]
[;, break, ;, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[:, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_MOD, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, )]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild]
[:, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, .]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case]
[:, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case, Token, .]
[., ASSIGN_MUL, :, checkPropCreation, (, t, ,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case]
[;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV]
[,, n, ., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token]
[), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, .]
[., getFirstChild, (, ), ), ;, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH]
[:, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD]
[., LSH, :, case, Token, ., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token]
[:, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR]
[., RSH, :, case, Token, ., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR]
[., URSH, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token]
[:, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND]
[., DIV, :, case, Token, ., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB]
[., MOD, :, case, Token, ., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token]
[:, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD]
[., BITOR, :, case, Token, ., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL]
[., BITXOR, :, case, Token, ., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token]
[:, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, .]
[., BITAND, :, case, Token, ., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (]
[:, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t]
[., SUB, :, case, Token, ., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, )]
[:, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break]
[., ADD, :, case, Token, ., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, )]
[:, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP]
[., MUL, :, visitBinaryOperator, (, n, ., getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case]
[,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE]
[., getType, (, ), ,, t, ,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t]
[,, n, ), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;]
[), ;, break, ;, case, Token, ., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;]
[:, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =]
[., DELPROP, :, ensureTyped, (, t, ,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType]
[;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;]
[,, n, ,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (, parent, .]
[,, BOOLEAN_TYPE, ), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (]
[), ;, break, ;, case, Token, ., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), )]
[:, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (, n, .]
[., CASE, :, JSType, switchType, =, getJSType, (, parent, ., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (]
[;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n]
[), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,]
[., getFirstChild, (, ), ), ;, JSType, caseType, =, getJSType, (, n, ., getFirstChild, (, ), ), ;, validator, .]
[;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;]
[), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break]
[., getFirstChild, (, ), ), ;, validator, ., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable]
[;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (]
[., expectSwitchMatchesCase, (, t, ,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token]
[,, n, ,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {]
[,, switchType, ,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child]
[,, caseType, ), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n]
[), ;, typeable, =, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild]
[=, false, ;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;]
[;, break, ;, case, Token, ., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =]
[:, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;, validator, .]
[., WITH, :, {, Node, child, =, n, ., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;]
[;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", )]
[., getFirstChild, (, ), ;, childType, =, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,]
[=, getJSType, (, child, ), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable]
[;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;]
[), ;, validator, ., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break]
[;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;]
[., expectObject, (, t, ,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case]
[,, child, ,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :]
[,, childType, ,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (]
[,, "with requires an object", ), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,]
[), ;, typeable, =, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, )]
[=, false, ;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;]
[;, break, ;, }, case, Token, ., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case, Token]
[:, visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :]
[., FUNCTION, :, visitFunction, (, t, ,, n, ), ;, break, ;, case, Token, ., LABEL, :, case, Token, .]
[;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token]
[,, n, ), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH]
[), ;, break, ;, case, Token, ., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case]
[:, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH]
[., LABEL, :, case, Token, ., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token]
[:, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY]
[., LABEL_NAME, :, case, Token, ., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token]
[:, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT]
[., SWITCH, :, case, Token, ., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token]
[:, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT]
[., BREAK, :, case, Token, ., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token]
[:, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK]
[., CATCH, :, case, Token, ., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token]
[:, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY]
[., TRY, :, case, Token, ., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token]
[:, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE]
[., SCRIPT, :, case, Token, ., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token]
[:, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE]
[., EXPR_RESULT, :, case, Token, ., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token]
[:, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER]
[., BLOCK, :, case, Token, ., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token]
[:, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW]
[., EMPTY, :, case, Token, ., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token]
[:, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;]
[., DEFAULT_CASE, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =]
[:, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case, Token, .]
[., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case]
[:, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case, Token, .]
[., DEBUGGER, :, case, Token, ., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case]
[:, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case, Token, .]
[., THROW, :, typeable, =, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case]
[=, false, ;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :]
[;, break, ;, case, Token, ., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =]
[:, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case, Token, .]
[., DO, :, case, Token, ., IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case]
[:, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil]
[., IF, :, case, Token, ., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if]
[:, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, n, )]
[., WHILE, :, typeable, =, false, ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (]
[=, false, ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {]
[;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj]
[:, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, )]
[., FOR, :, if, (, NodeUtil, ., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (]
[), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (, obj, ), ., isStruct]
[., isForIn, (, n, ), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, getJSType]
[), ), {, Node, obj, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (, obj, ), .]
[;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT]
[., getChildAtIndex, (, 1, ), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (]
[), ;, if, (, getJSType, (, obj, ), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,]
[), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case]
[., isStruct, (, ), ), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false]
[), ., isStruct, (, ), ), {, report, (, t, ,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =]
[;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case]
[,, obj, ,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case]
[,, IN_USED_WITH_STRUCT, ), ;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case, Token, .]
[), ;, }, }, typeable, =, false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :]
[=, false, ;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :]
[;, break, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token]
[:, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, .]
[., AND, :, case, Token, ., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (]
[:, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null]
[., HOOK, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, )]
[:, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped, (, t]
[., OBJECTLIT, :, case, Token, ., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped]
[:, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }]
[., OR, :, if, (, n, ., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, )]
[), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, )]
[!=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit]
[., getJSType, (, ), !=, null, ), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (]
[), {, ensureTyped, (, t, ,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, )]
[;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (, parent, ., getJSType, (, )]
[,, n, ), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (, parent, .]
[), ;, }, else, {, if, (, (, n, ., isObjectLit, (, ), ), &&, (, parent, ., getJSType, (]
[), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (]
[&&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,, parent, .]
[), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,, parent]
[., isObjectLit, (, ), ), &&, (, parent, ., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t]
[), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (]
[), ), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped]
[instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, ), ), ;, }, else]
[., getJSType, (, ), instanceof, EnumType, ), ), {, ensureTyped, (, t, ,, n, ,, parent, ., getJSType, (, )]
[;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, if, (, n, ., isObjectLit, (, )]
[,, n, ,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;]
[,, parent, ., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }]
[), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, if, (, n, ., isObjectLit, (]
[., getJSType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, if, (]
[;, }, }, if, (, n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (, n, ), ;]
[,, n, ), ;, }, }, if, (, n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (]
[), ;, }, }, if, (, n, ., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (, n, )]
[), {, JSType, typ, =, getJSType, (, n, ), ;, for, (, Node, key, :, n, ., children, (, )]
[., isObjectLit, (, ), ), {, JSType, typ, =, getJSType, (, n, ), ;, for, (, Node, key, :, n]
[;, for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (, t, ,, key, ,, n]
[), ;, for, (, Node, key, :, n, ., children, (, ), ), {, visitObjLitKey, (, t, ,, key, ,]
[), {, visitObjLitKey, (, t, ,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :, report]
[., children, (, ), ), {, visitObjLitKey, (, t, ,, key, ,, n, ,, typ, ), ;, }, }, break]
[;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n]
[,, key, ,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,]
[,, n, ,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[,, typ, ), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, .]
[), ;, }, }, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (]
[;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (]
[,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t]
[,, UNEXPECTED_TOKEN, ,, Token, ., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n]
[,, Token, ., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;]
[), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if]
[., name, (, n, ., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;]
[), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;]
[., getType, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, break, ;, }, typeable, =, typeable]
[;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,]
[,, n, ), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting]
[), ;, break, ;, }, typeable, =, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t]
[=, typeable, &&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection]
[;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,, false, )]
[&&, !, inExterns, ;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n]
[;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,, false, )]
[;, if, (, typeable, ), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,, false, )]
[), {, doPercentTypedAccounting, (, t, ,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,, false, ), ;, }, private, void]
[;, }, checkNoTypeCheckSection, (, n, ,, false, ), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,]
[,, n, ), ;, }, checkNoTypeCheckSection, (, n, ,, false, ), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,]
[), ;, }, checkNoTypeCheckSection, (, n, ,, false, ), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n]
[;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !, (]
[,, false, ), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if]
[), ;, }, private, void, checkTypeofString, (, NodeTraversal, t, ,, Node, n, ,, String, s, ), {, if, (, !]
[), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal]
[), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal]
[), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (]
[||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, )]
[||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName]
[||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown"]
[||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object"]
[||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function"]
[||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined"]
[., equals, (, "number", ), ||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||]
[), ||, s, ., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (]
[||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function"]
[., equals, (, "string", ), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||]
[), ||, s, ., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (]
[||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object"]
[., equals, (, "boolean", ), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||]
[), ||, s, ., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (]
[||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown"]
[., equals, (, "undefined", ), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||]
[), ||, s, ., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (]
[||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName]
[., equals, (, "function", ), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), )]
[), ||, s, ., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, .]
[||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, )]
[., equals, (, "object", ), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t]
[), ||, s, ., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s]
[), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (]
[., equals, (, "unknown", ), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }]
[), ), ), {, validator, ., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting]
[;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =, n, ., getJSType]
[., expectValidTypeofName, (, t, ,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node]
[,, n, ,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType]
[,, s, ), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =]
[), ;, }, }, private, void, doPercentTypedAccounting, (, NodeTraversal, t, ,, Node, n, ), {, JSType, type, =, n, .]
[;, if, (, type, ==, null, ), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, )]
[., getJSType, (, ), ;, if, (, type, ==, null, ), {, nullCount, ++, ;, }, else, if, (, type]
[), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, .]
[==, null, ), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (]
[), {, nullCount, ++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, .]
[;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), )]
[++, ;, }, else, if, (, type, ., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, )]
[), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n]
[., isUnknownType, (, ), ), {, if, (, reportUnknownTypes, ., isOn, (, ), ), {, compiler, ., report, (, t]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount]
[., isOn, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, )]
[;, }, unknownCount, ++, ;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,]
[., report, (, t, ., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }]
[), ;, }, unknownCount, ++, ;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t]
[., makeError, (, n, ,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }, else, {, typedCount, ++]
[,, reportUnknownTypes, ,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }, else, {, typedCount, ++, ;, }, }, private]
[,, UNKNOWN_EXPR_TYPE, ), ), ;, }, unknownCount, ++, ;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign]
[), ), ;, }, unknownCount, ++, ;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal]
[;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, ), {]
[++, ;, }, else, {, typedCount, ++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, )]
[;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =, assign, ., getJSDocInfo]
[++, ;, }, }, private, void, visitAssign, (, NodeTraversal, t, ,, Node, assign, ), {, JSDocInfo, info, =, assign, .]
[;, Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =, assign, ., getLastChild, (, ), ;, if]
[., getJSDocInfo, (, ), ;, Node, lvalue, =, assign, ., getFirstChild, (, ), ;, Node, rvalue, =, assign, ., getLastChild]
[;, Node, rvalue, =, assign, ., getLastChild, (, ), ;, if, (, lvalue, ., isGetProp, (, ), ), {, Node]
[., getFirstChild, (, ), ;, Node, rvalue, =, assign, ., getLastChild, (, ), ;, if, (, lvalue, ., isGetProp, (]
[;, if, (, lvalue, ., isGetProp, (, ), ), {, Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType]
[., getLastChild, (, ), ;, if, (, lvalue, ., isGetProp, (, ), ), {, Node, object, =, lvalue, ., getFirstChild]
[), {, Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (, object, ), ;, Node]
[., isGetProp, (, ), ), {, Node, object, =, lvalue, ., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (]
[;, JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname]
[., getFirstChild, (, ), ;, JSType, objectJsType, =, getJSType, (, object, ), ;, Node, property, =, lvalue, ., getLastChild, (]
[;, Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =, property, ., getString, (, ), ;, if]
[), ;, Node, property, =, lvalue, ., getLastChild, (, ), ;, String, pname, =, property, ., getString, (, ), ;]
[;, String, pname, =, property, ., getString, (, ), ;, if, (, object, ., isGetProp, (, ), ), {, JSType]
[., getLastChild, (, ), ;, String, pname, =, property, ., getString, (, ), ;, if, (, object, ., isGetProp, (]
[;, if, (, object, ., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, )]
[., getString, (, ), ;, if, (, object, ., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object]
[), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (]
[., isGetProp, (, ), ), {, JSType, jsType, =, getJSType, (, object, ., getFirstChild, (, ), ), ;, if, (]
[;, if, (, jsType, ., isInterface, (, ), &&, object, ., getLastChild, (, ), ., getString, (, ), ., equals]
[), ;, if, (, jsType, ., isInterface, (, ), &&, object, ., getLastChild, (, ), ., getString, (, ), .]
[., getFirstChild, (, ), ), ;, if, (, jsType, ., isInterface, (, ), &&, object, ., getLastChild, (, ), .]
[), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias]
[&&, object, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t]
[., isInterface, (, ), &&, object, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), )]
[), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias]
[., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue]
[., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname]
[., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ), {, visitInterfaceGetprop, (, t, ,, assign]
[), ), {, visitInterfaceGetprop, (, t, ,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }]
[;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if]
[,, assign, ,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,]
[,, object, ,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, )]
[,, pname, ,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation]
[,, lvalue, ,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t]
[,, rvalue, ), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue]
[), ;, }, }, checkEnumAlias, (, t, ,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;]
[;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (]
[,, info, ,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype"]
[,, rvalue, ), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), )]
[), ;, checkPropCreation, (, t, ,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if]
[;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType]
[,, lvalue, ), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&]
[), ;, if, (, pname, ., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&, objectJsType, .]
[), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, .]
[., equals, (, "prototype", ), ), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType, (, ), ), {]
[), ), {, if, (, objectJsType, !=, null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType]
[), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {]
[&&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType]
[!=, null, &&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if]
[&&, objectJsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType]
[), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {]
[., isFunctionType, (, ), ), {, FunctionType, functionType, =, objectJsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor]
[;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator]
[., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType]
[), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType]
[., isConstructor, (, ), ), {, JSType, rvalueType, =, rvalue, ., getJSType, (, ), ;, validator, ., expectObject, (, t]
[;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (]
[., getJSType, (, ), ;, validator, ., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (]
[;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =]
[., expectObject, (, t, ,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&]
[,, rvalue, ,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct]
[,, rvalueType, ,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, )]
[,, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {]
[), ;, if, (, functionType, ., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName]
[), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t]
[&&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (]
[., makesStructs, (, ), &&, !, rvalueType, ., isStruct, (, ), ), {, String, funName, =, functionType, ., getTypeOfThis, (]
[), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t]
[), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t]
[., isStruct, (, ), ), {, String, funName, =, functionType, ., getTypeOfThis, (, ), ., toString, (, ), ;, compiler]
[;, compiler, ., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }]
[., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName]
[., getTypeOfThis, (, ), ., toString, (, ), ;, compiler, ., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE]
[;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), )]
[., report, (, t, ., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }, return, ;]
[), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, )]
[., makeError, (, assign, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType]
[,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, .]
[,, "struct", ,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (]
[,, funName, ), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, .]
[), ), ;, }, return, ;, }, }, }, ObjectType, type, =, ObjectType, ., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (]
[;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, .]
[., cast, (, objectJsType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (, type]
[), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, if, (, type, ., hasProperty, (, pname]
[), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !]
[!=, null, ), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, )]
[), {, if, (, type, ., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !]
[), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, )]
[&&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;]
[&&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType]
[., hasProperty, (, pname, ), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname]
[), &&, !, type, ., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType]
[&&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;]
[&&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;]
[., isPropertyTypeInferred, (, pname, ), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, .]
[), &&, !, propertyIsImplicitCast, (, type, ,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, )]
[), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, )]
[), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, )]
[,, pname, ), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, .]
[), ), {, JSType, expectedType, =, type, ., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (]
[;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType]
[., getPropertyType, (, pname, ), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (]
[), ;, if, (, !, expectedType, ., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,]
[), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname]
[), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname]
[., isUnknownType, (, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType]
[;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }]
[., expectCanAssignToPropertyOf, (, t, ,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign]
[,, assign, ,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign]
[,, getJSType, (, rvalue, ), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object]
[,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,]
[), ,, expectedType, ,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info]
[,, object, ,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, )]
[,, pname, ), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return]
[), ;, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }]
[;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, getNativeType, (]
[,, assign, ,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t]
[,, object, ,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign]
[,, pname, ,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object]
[,, info, ,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname]
[,, expectedType, ), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info]
[), ;, return, ;, }, }, }, checkPropertyInheritanceOnGetpropAssign, (, t, ,, assign, ,, object, ,, pname, ,, info, ,, getNativeType]
[;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType]
[,, assign, ,, object, ,, pname, ,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType]
[,, object, ,, pname, ,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue]
[,, pname, ,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;]
[,, info, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (]
[,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (, lvalue, .]
[), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {]
[), ), ;, }, JSType, leftType, =, getJSType, (, lvalue, ), ;, if, (, lvalue, ., isQualifiedName, (, ), )]
[;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, )]
[), ;, if, (, lvalue, ., isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (]
[), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var, =, t, ., getScope]
[., isQualifiedName, (, ), ), {, JSType, rvalueType, =, getJSType, (, assign, ., getLastChild, (, ), ), ;, Var, var]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if]
[), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;]
[., getLastChild, (, ), ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName]
[;, if, (, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }]
[., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, ), {, if, (, var]
[., getScope, (, ), ., getVar, (, lvalue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, )]
[), ;, if, (, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, ), {, if, (, var, ., isTypeInferred, (, )]
[), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (]
[!=, null, ), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, NodeUtil, .]
[), {, if, (, var, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (]
[), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&, t, .]
[., isTypeInferred, (, ), ), {, return, ;, }, if, (, NodeUtil, ., getRootOfQualifiedName, (, lvalue, ), ., isThis, (]
[), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {, leftType, =, var, .]
[&&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (, var]
[., isThis, (, ), &&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;]
[., getRootOfQualifiedName, (, lvalue, ), ., isThis, (, ), &&, t, ., getScope, (, ), !=, var, ., getScope, (]
[), ., isThis, (, ), &&, t, ., getScope, (, ), !=, var, ., getScope, (, ), ), {, return]
[), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {, leftType, =, var, .]
[!=, var, ., getScope, (, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=, null]
[., getScope, (, ), !=, var, ., getScope, (, ), ), {, return, ;, }, if, (, var, ., getType]
[), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {, leftType, =, var, .]
[., getScope, (, ), ), {, return, ;, }, if, (, var, ., getType, (, ), !=, null, ), {]
[), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (]
[!=, null, ), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, .]
[., getType, (, ), !=, null, ), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node]
[), {, leftType, =, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (]
[=, var, ., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType]
[;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, )]
[., getType, (, ), ;, }, }, }, Node, rightChild, =, assign, ., getLastChild, (, ), ;, JSType, rightType, =]
[;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType]
[., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, rightChild, ), ;, if, (, validator, ., expectCanAssignTo, (, t]
[;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped]
[), ;, if, (, validator, ., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {]
[), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, assign, )]
[., expectCanAssignTo, (, t, ,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign]
[,, assign, ,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;]
[,, rightType, ,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else]
[,, leftType, ,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped]
[,, "assignment", ), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (, t]
[), ), {, ensureTyped, (, t, ,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, assign]
[;, }, else, {, ensureTyped, (, t, ,, assign, ), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,]
[,, assign, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, assign, ), ;, }, }, private, void]
[,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, assign, ), ;, }, }, private, void, checkPropCreation, (]
[), ;, }, else, {, ensureTyped, (, t, ,, assign, ), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t]
[;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,, Node, lvalue, ), {, if, (, lvalue, ., isGetProp, (]
[,, assign, ), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,, Node, lvalue, ), {, if, (, lvalue]
[), ;, }, }, private, void, checkPropCreation, (, NodeTraversal, t, ,, Node, lvalue, ), {, if, (, lvalue, ., isGetProp]
[), {, Node, obj, =, lvalue, ., getFirstChild, (, ), ;, Node, prop, =, lvalue, ., getLastChild, (, ), ;]
[., isGetProp, (, ), ), {, Node, obj, =, lvalue, ., getFirstChild, (, ), ;, Node, prop, =, lvalue, .]
[;, Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname]
[., getFirstChild, (, ), ;, Node, prop, =, lvalue, ., getLastChild, (, ), ;, JSType, objType, =, getJSType, (, obj]
[;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =, prop, ., getString, (, ), ;, if, (]
[., getLastChild, (, ), ;, JSType, objType, =, getJSType, (, obj, ), ;, String, pname, =, prop, ., getString, (]
[;, String, pname, =, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !, objType]
[), ;, String, pname, =, prop, ., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !]
[;, if, (, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (]
[., getString, (, ), ;, if, (, objType, ., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, )]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, t, ., getScope, (, ), .]
[&&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&]
[., isStruct, (, ), &&, !, objType, ., hasProperty, (, pname, ), ), {, if, (, !, (, obj, .]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, t, ., getScope, (, ), .]
[), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, t, ., getScope, (, ), .]
[., hasProperty, (, pname, ), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, t]
[), ), {, if, (, !, (, obj, ., isThis, (, ), &&, getJSType, (, t, ., getScope, (, )]
[), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal]
[), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal]
[), ), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (]
[&&, getJSType, (, t, ., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {]
[., isThis, (, ), &&, getJSType, (, t, ., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (]
[), ), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (]
[., isConstructor, (, ), ), ), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }]
[), ., isConstructor, (, ), ), ), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }]
[., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, report, (, t, ,, prop, ,, ILLEGAL_PROPERTY_CREATION, )]
[., getScope, (, ), ., getRootNode, (, ), ), ., isConstructor, (, ), ), ), {, report, (, t, ,]
[;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal, t, ,, Node, assign, ,, Node, object, ,, String, property]
[,, prop, ,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal, t, ,, Node, assign, ,]
[,, ILLEGAL_PROPERTY_CREATION, ), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal, t, ,, Node, assign, ,, Node, object]
[), ;, }, }, }, }, private, void, checkPropertyInheritanceOnGetpropAssign, (, NodeTraversal, t, ,, Node, assign, ,, Node, object, ,, String]
[), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (, object, .]
[., isGetProp, (, ), ), {, Node, object2, =, object, ., getFirstChild, (, ), ;, String, property2, =, NodeUtil, .]
[;, String, property2, =, NodeUtil, ., getStringValue, (, object, ., getLastChild, (, ), ), ;, if, (, "prototype", ., equals]
[., getFirstChild, (, ), ;, String, property2, =, NodeUtil, ., getStringValue, (, object, ., getLastChild, (, ), ), ;, if]
[;, if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (, object2, ), ;, if]
[., getStringValue, (, object, ., getLastChild, (, ), ), ;, if, (, "prototype", ., equals, (, property2, ), ), {]
[), ;, if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (, object2, ), ;]
[., getLastChild, (, ), ), ;, if, (, "prototype", ., equals, (, property2, ), ), {, JSType, jsType, =, getJSType]
[), {, JSType, jsType, =, getJSType, (, object2, ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType]
[., equals, (, property2, ), ), {, JSType, jsType, =, getJSType, (, object2, ), ;, if, (, jsType, ., isFunctionType]
[), ), {, JSType, jsType, =, getJSType, (, object2, ), ;, if, (, jsType, ., isFunctionType, (, ), ), {]
[;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if]
[), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;]
[), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ||, functionType]
[., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor]
[;, if, (, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,]
[., toMaybeFunctionType, (, ), ;, if, (, functionType, ., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {]
[), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,, info, ,, propertyType, ), ;, }, }, }]
[||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,, info, ,]
[., isConstructor, (, ), ||, functionType, ., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,]
[), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,, info, ,, propertyType, ), ;, }, }, }]
[., isInterface, (, ), ), {, checkDeclaredPropertyInheritance, (, t, ,, assign, ,, functionType, ,, property, ,, info, ,, propertyType, )]
[;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key, ,, Node, objlit, ,, JSType]
[,, assign, ,, functionType, ,, property, ,, info, ,, propertyType, ), ;, }, }, }, }, }, private, void, visitObjLitKey]
[,, functionType, ,, property, ,, info, ,, propertyType, ), ;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal]
[,, property, ,, info, ,, propertyType, ), ;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal, t, ,]
[,, info, ,, propertyType, ), ;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key]
[,, propertyType, ), ;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key, ,, Node]
[), ;, }, }, }, }, }, private, void, visitObjLitKey, (, NodeTraversal, t, ,, Node, key, ,, Node, objlit, ,]
[), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&]
[., isFromExterns, (, ), ), {, ensureTyped, (, t, ,, key, ), ;, return, ;, }, if, (, litType, .]
[;, return, ;, }, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report]
[,, key, ), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, )]
[), ;, return, ;, }, if, (, litType, ., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {]
[), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict]
[&&, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }]
[., isStruct, (, ), &&, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,]
[), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict]
[., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if]
[;, }, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report]
[,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&, !, key]
[,, ILLEGAL_OBJLIT_KEY, ,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString]
[,, "struct", ), ;, }, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, )]
[), ;, }, else, if, (, litType, ., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {]
[), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild]
[&&, !, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;]
[., isDict, (, ), &&, !, key, ., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY]
[), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild]
[), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild]
[., isQuotedString, (, ), ), {, report, (, t, ,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue]
[;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,]
[,, key, ,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType]
[,, ILLEGAL_OBJLIT_KEY, ,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil]
[,, "dict", ), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType]
[), ;, }, Node, rvalue, =, key, ., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key]
[;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==]
[., getFirstChild, (, ), ;, JSType, rightType, =, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;]
[;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit]
[., getObjectLitKeyTypeFromValueType, (, key, ,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==, null, ), {, rightType, =]
[,, getJSType, (, rvalue, ), ), ;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, )]
[), ;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =]
[), ), ;, if, (, rightType, ==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner]
[), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (]
[==, null, ), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =]
[), {, rightType, =, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (]
[=, getNativeType, (, UNKNOWN_TYPE, ), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;]
[;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType, ;]
[), ;, }, Node, owner, =, objlit, ;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType]
[;, JSType, keyType, =, getJSType, (, key, ), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (]
[;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType]
[), ;, JSType, allowedValueType, =, keyType, ;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =, allowedValueType, .]
[;, if, (, allowedValueType, ., isEnumElementType, (, ), ), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (]
[), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, .]
[., isEnumElementType, (, ), ), {, allowedValueType, =, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean]
[=, allowedValueType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t]
[;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil]
[., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType]
[., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ;, }, boolean, valid, =, validator, ., expectCanAssignToPropertyOf, (, t, ,, key]
[;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (]
[., expectCanAssignToPropertyOf, (, t, ,, key, ,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), )]
[,, key, ,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid]
[,, rightType, ,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {]
[,, allowedValueType, ,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (]
[,, owner, ,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,]
[,, NodeUtil, ., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,]
[), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {, ensureTyped]
[., getObjectLitKeyName, (, key, ), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, )]
[), ), ;, if, (, valid, ), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {]
[), {, ensureTyped, (, t, ,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, key, )]
[;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;]
[,, key, ,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =]
[,, rightType, ), ;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (]
[), ;, }, else, {, ensureTyped, (, t, ,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, )]
[;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined]
[,, key, ), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (]
[), ;, }, JSType, objlitType, =, getJSType, (, objlit, ), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, .]
[;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null]
[), ;, ObjectType, type, =, ObjectType, ., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=]
[;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (]
[., cast, (, objlitType, ., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, String, property, =]
[), ;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if]
[., restrictByNotNullOrUndefined, (, ), ), ;, if, (, type, !=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (]
[), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, )]
[!=, null, ), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (]
[), {, String, property, =, NodeUtil, ., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, )]
[;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast]
[., getObjectLitKeyName, (, key, ), ;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (]
[), ;, if, (, type, ., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !]
[), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner]
[&&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,]
[&&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, .]
[., hasProperty, (, property, ), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property]
[), &&, !, type, ., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator]
[&&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,]
[&&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,]
[., isPropertyTypeInferred, (, property, ), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t]
[), &&, !, propertyIsImplicitCast, (, type, ,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType]
[), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner]
[), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner]
[,, property, ), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property]
[), ), {, validator, ., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,]
[;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (, ;]
[., expectCanAssignToPropertyOf, (, t, ,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner, ,, property, )]
[,, key, ,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner, ,, property, ), ;, }, return, ;]
[,, keyType, ,, type, ., getPropertyType, (, property, ), ,, owner, ,, property, ), ;, }, return, ;, }, }]
[,, type, ., getPropertyType, (, property, ), ,, owner, ,, property, ), ;, }, return, ;, }, }, private, boolean]
[,, owner, ,, property, ), ;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop]
[., getPropertyType, (, property, ), ,, owner, ,, property, ), ;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (]
[), ,, owner, ,, property, ), ;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String]
[,, property, ), ;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {]
[), ;, }, return, ;, }, }, private, boolean, propertyIsImplicitCast, (, ObjectType, type, ,, String, prop, ), {, for, (]
[;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;]
[!=, null, ;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop]
[;, type, =, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;]
[=, type, ., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (]
[), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=, null, &&, docInfo, .]
[., getImplicitPrototype, (, ), ), {, JSDocInfo, docInfo, =, type, ., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=]
[;, if, (, docInfo, !=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }, return]
[., getOwnPropertyJSDocInfo, (, prop, ), ;, if, (, docInfo, !=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return]
[), ;, if, (, docInfo, !=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance, (, NodeTraversal, t, ,, Node, n]
[&&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance]
[!=, null, &&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private]
[&&, docInfo, ., isImplicitCast, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance]
[), {, return, true, ;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance, (, NodeTraversal, t, ,, Node, n]
[., isImplicitCast, (, ), ), {, return, true, ;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance, (, NodeTraversal]
[;, }, }, return, false, ;, }, private, void, checkDeclaredPropertyInheritance, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, ctorType, ,]
[;, }, private, void, checkDeclaredPropertyInheritance, (, NodeTraversal, t, ,, Node, n, ,, FunctionType, ctorType, ,, String, propertyName, ,, JSDocInfo, info]
[), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null]
[), ), {, return, ;, }, FunctionType, superClass, =, ctorType, ., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=]
[;, boolean, superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean]
[., getSuperClassConstructor, (, ), ;, boolean, superClassHasProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (]
[;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean]
[&&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass]
[!=, null, &&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null]
[&&, superClass, ., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass]
[;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean]
[., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared]
[., getInstanceType, (, ), ., hasProperty, (, propertyName, ), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType]
[), ;, boolean, superClassHasDeclaredProperty, =, superClass, !=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;]
[;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), ), {]
[&&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =]
[!=, null, &&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean]
[&&, superClass, ., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =]
[;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), ), {]
[., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, .]
[., getInstanceType, (, ), ., isPropertyTypeDeclared, (, propertyName, ), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;]
[), ;, boolean, superInterfaceHasProperty, =, false, ;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), )]
[;, boolean, superInterfaceHasDeclaredProperty, =, false, ;, if, (, ctorType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[;, if, (, ctorType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, )]
[), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, .]
[., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =]
[), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared]
[., getExtendedInterfaces, (, ), ), {, superInterfaceHasProperty, =, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty]
[=, superInterfaceHasProperty, ||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, )]
[;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null]
[||, interfaceType, ., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }]
[;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null]
[., hasProperty, (, propertyName, ), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean]
[), ;, superInterfaceHasDeclaredProperty, =, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=]
[=, superInterfaceHasDeclaredProperty, ||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info]
[;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false]
[||, interfaceType, ., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride]
[;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false]
[., isPropertyTypeDeclared, (, propertyName, ), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, )]
[), ;, }, }, boolean, declaredOverride, =, info, !=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =]
[;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :]
[&&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), )]
[!=, null, &&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (]
[&&, info, ., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), )]
[;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :]
[., isOverride, (, ), ;, boolean, foundInterfaceProperty, =, false, ;, if, (, ctorType, ., isConstructor, (, ), ), {, for]
[;, if, (, ctorType, ., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, )]
[), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (, implementedInterface, ., isUnknownType, (]
[., isConstructor, (, ), ), {, for, (, JSType, implementedInterface, :, ctorType, ., getAllImplementedInterfaces, (, ), ), {, if, (]
[), {, if, (, implementedInterface, ., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }]
[., getAllImplementedInterfaces, (, ), ), {, if, (, implementedInterface, ., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), )]
[), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, .]
[||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), .]
[., isUnknownType, (, ), ||, implementedInterface, ., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, .]
[), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, .]
[., isEmptyType, (, ), ), {, continue, ;, }, FunctionType, interfaceType, =, implementedInterface, ., toObjectType, (, ), ., getConstructor, (]
[;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName]
[., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, )]
[., toObjectType, (, ), ., getConstructor, (, ), ;, Preconditions, ., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType]
[;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty]
[., checkNotNull, (, interfaceType, ), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;]
[), ;, boolean, interfaceHasProperty, =, interfaceType, ., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||]
[;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, )]
[., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&]
[., getPrototype, (, ), ., hasProperty, (, propertyName, ), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, .]
[), ;, foundInterfaceProperty, =, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty]
[=, foundInterfaceProperty, ||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler]
[;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t]
[||, interfaceHasProperty, ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report]
[;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, .]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[&&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY]
[., isOn, (, ), &&, !, declaredOverride, &&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[&&, interfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, .]
[;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType]
[., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName]
[), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }]
[., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (]
[,, reportMissingOverride, ,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;]
[,, HIDDEN_INTERFACE_PROPERTY, ,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }]
[,, propertyName, ,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if]
[,, interfaceType, ., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !]
[), ), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;]
[., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty]
[., getTopMostDefiningType, (, propertyName, ), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&]
[), ., toString, (, ), ), ), ;, }, }, }, if, (, !, declaredOverride, &&, !, superClassHasProperty, &&, !]
[), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean]
[&&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (]
[&&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :]
[&&, !, superInterfaceHasProperty, ), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :]
[), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean]
[), {, return, ;, }, ObjectType, topInstanceType, =, superClassHasDeclaredProperty, ?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean]
[;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName]
[?, superClass, ., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (]
[:, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty]
[., getTopMostDefiningType, (, propertyName, ), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, .]
[), :, null, ;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), .]
[;, boolean, declaredLocally, =, ctorType, ., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName]
[;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report]
[&&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty]
[., isConstructor, (, ), &&, (, ctorType, ., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType]
[;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report]
[), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, .]
[||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, )]
[., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (]
[., getPrototype, (, ), ., hasOwnProperty, (, propertyName, ), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, )]
[), ||, ctorType, ., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (]
[), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, .]
[., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&]
[., getInstanceType, (, ), ., hasOwnProperty, (, propertyName, ), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !]
[), ), ;, if, (, reportMissingOverride, ., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, .]
[&&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,]
[&&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,]
[&&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride]
[., isOn, (, ), &&, !, declaredOverride, &&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError]
[&&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,]
[&&, superClassHasDeclaredProperty, &&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,]
[&&, declaredLocally, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, .]
[;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, )]
[., report, (, t, ., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, ., toString, (, )]
[), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName]
[., makeError, (, n, ,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }]
[,, reportMissingOverride, ,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, )]
[,, HIDDEN_SUPERCLASS_PROPERTY, ,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =]
[,, topInstanceType, ., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, .]
[), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (]
[., toString, (, ), ), ), ;, }, if, (, superClassHasDeclaredProperty, ), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (]
[), {, JSType, superClassPropType, =, superClass, ., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType]
[;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (]
[., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report]
[., getInstanceType, (, ), ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), )]
[), ;, if, (, !, propertyType, ., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (]
[., isSubtype, (, superClassPropType, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString]
[;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), )]
[., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType]
[), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, )]
[., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, )]
[,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString, (, )]
[,, topInstanceType, ., toString, (, ), ,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), )]
[,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, else, if, (]
[., toString, (, ), ,, superClassPropType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }]
[,, propertyType, ., toString, (, ), ), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType]
[., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, )]
[), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (]
[., toString, (, ), ), ), ;, }, }, else, if, (, superInterfaceHasDeclaredProperty, ), {, for, (, ObjectType, interfaceType, :]
[), {, for, (, ObjectType, interfaceType, :, ctorType, ., getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (]
[), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName]
[., getExtendedInterfaces, (, ), ), {, if, (, interfaceType, ., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType]
[), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType]
[., hasProperty, (, propertyName, ), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !]
[), ), {, JSType, superPropertyType, =, interfaceType, ., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (]
[;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), .]
[., getPropertyType, (, propertyName, ), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType]
[), ;, if, (, !, propertyType, ., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, )]
[), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t]
[), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t]
[., isSubtype, (, superPropertyType, ), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;]
[), ), {, topInstanceType, =, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (]
[=, interfaceType, ., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (]
[;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, )]
[., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,]
[., getConstructor, (, ), ., getTopMostDefiningType, (, propertyName, ), ;, compiler, ., report, (, t, ., makeError, (, n, ,]
[), ;, compiler, ., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (]
[;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, .]
[., report, (, t, ., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType]
[), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler]
[., makeError, (, n, ,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, )]
[,, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, ,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, ), ,, propertyType, ., toString]
[,, propertyName, ,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, ), ,, propertyType, ., toString, (, )]
[,, topInstanceType, ., toString, (, ), ,, superPropertyType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), )]
[,, superPropertyType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else]
[., toString, (, ), ,, superPropertyType, ., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }]
[,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !]
[., toString, (, ), ,, propertyType, ., toString, (, ), ), ), ;, }, }, }, }, else, if, (]
[), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {]
[., toString, (, ), ), ), ;, }, }, }, }, else, if, (, !, foundInterfaceProperty, &&, !, superClassHasProperty, &&]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (]
[&&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,]
[&&, !, superClassHasProperty, &&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,]
[&&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType]
[&&, !, superInterfaceHasProperty, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (]
[;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor, (]
[., report, (, t, ., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (, ), ., toString]
[), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (, ctor, ., isConstructor]
[., makeError, (, n, ,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (, ), ., toString, (, ), ), )]
[,, UNKNOWN_OVERRIDE, ,, propertyName, ,, ctorType, ., getInstanceType, (, ), ., toString, (, ), ), ), ;, }, }, private]
[,, propertyName, ,, ctorType, ., getInstanceType, (, ), ., toString, (, ), ), ), ;, }, }, private, static, boolean]
[,, ctorType, ., getInstanceType, (, ), ., toString, (, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (]
[), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, ., checkArgument, (, ctor, .]
[., toString, (, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor, ), {, Preconditions, .]
[., getInstanceType, (, ), ., toString, (, ), ), ), ;, }, }, private, static, boolean, hasUnknownOrEmptySupertype, (, FunctionType, ctor]
[;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType]
[., checkArgument, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (]
[), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType]
[||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;]
[., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType]
[), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType]
[., isInterface, (, ), ), ;, Preconditions, ., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (]
[;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if]
[., checkArgument, (, !, ctor, ., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor]
[), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;]
[), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;]
[., isUnknownType, (, ), ), ;, while, (, true, ), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), .]
[), {, ObjectType, maybeSuperInstanceType, =, ctor, ., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null]
[;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||]
[., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }, if, (, maybeSuperInstanceType, .]
[., getPrototype, (, ), ., getImplicitPrototype, (, ), ;, if, (, maybeSuperInstanceType, ==, null, ), {, return, false, ;, }]
[), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), )]
[==, null, ), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (]
[), {, return, false, ;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), )]
[;, }, if, (, maybeSuperInstanceType, ., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;]
[), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, )]
[||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;]
[., isUnknownType, (, ), ||, maybeSuperInstanceType, ., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, .]
[), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, )]
[., isEmptyType, (, ), ), {, return, true, ;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (]
[;, }, ctor, =, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;]
[=, maybeSuperInstanceType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, .]
[;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (]
[), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (]
[==, null, ), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||, ctor, .]
[), {, return, false, ;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (]
[;, }, Preconditions, ., checkState, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, }]
[;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t, ,, Node, assign, ,, Node, object, ,, String, property, ,, Node]
[., checkState, (, ctor, ., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, }, }, private, void]
[), ;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t, ,, Node, assign, ,, Node, object, ,, String, property, ,]
[||, ctor, ., isInterface, (, ), ), ;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t, ,, Node, assign, ,]
[., isConstructor, (, ), ||, ctor, ., isInterface, (, ), ), ;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t]
[), ;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t, ,, Node, assign, ,, Node, object, ,, String, property, ,]
[., isInterface, (, ), ), ;, }, }, private, void, visitInterfaceGetprop, (, NodeTraversal, t, ,, Node, assign, ,, Node, object]
[;, String, abstractMethodName, =, compiler, ., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType]
[), ;, String, abstractMethodName, =, compiler, ., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, .]
[;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?]
[., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName]
[., getCodingConvention, (, ), ., getAbstractMethodName, (, ), ;, if, (, !, rvalueType, ., isFunctionType, (, ), ), {, String]
[), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report]
[), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report]
[., isFunctionType, (, ), ), {, String, abstractMethodMessage, =, (, abstractMethodName, !=, null, ), ?, ", or ", +, abstractMethodName, :, ""]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage]
[), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,]
[!=, null, ), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,]
[), ?, ", or ", +, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,]
[:, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }]
[+, abstractMethodName, :, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), )]
[:, "", ;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }]
[;, compiler, ., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (]
[;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (, assign]
[., report, (, t, ., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, .]
[), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (]
[., makeError, (, object, ,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), .]
[,, INVALID_INTERFACE_MEMBER_DECLARATION, ,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&]
[,, abstractMethodMessage, ), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil]
[), ), ;, }, if, (, assign, ., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock]
[), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }]
[&&, !, NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, .]
[., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), )]
[., getLastChild, (, ), ., isFunction, (, ), &&, !, NodeUtil, ., isEmptyBlock, (, assign, ., getLastChild, (, ), .]
[), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }]
[), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }]
[., isEmptyBlock, (, assign, ., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (, t]
[), ), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }]
[., getLastChild, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName]
[., getLastChild, (, ), ., getLastChild, (, ), ), ), {, compiler, ., report, (, t, ., makeError, (, object]
[;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =, parent]
[., report, (, t, ., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }, boolean, visitName, (]
[), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType, =]
[., makeError, (, object, ,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node]
[,, INTERFACE_FUNCTION_NOT_EMPTY, ,, abstractMethodName, ), ), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[,, abstractMethodName, ), ), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), ), ;, }, }, boolean, visitName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, parentNodeType]
[;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST]
[., getType, (, ), ;, if, (, parentNodeType, ==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType]
[), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null]
[||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, )]
[||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type]
[||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {]
[==, Token, ., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token]
[||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {]
[., FUNCTION, ||, parentNodeType, ==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR]
[||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type]
[==, Token, ., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false]
[||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type]
[., CATCH, ||, parentNodeType, ==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }]
[||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, )]
[==, Token, ., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n]
[||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, )]
[., PARAM_LIST, ||, parentNodeType, ==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType]
[), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null]
[==, Token, ., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if]
[), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null]
[., VAR, ), {, return, false, ;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type]
[;, }, JSType, type, =, n, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, type, =]
[;, if, (, type, ==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, .]
[., getJSType, (, ), ;, if, (, type, ==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var]
[), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[==, null, ), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), .]
[), {, type, =, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[=, getNativeType, (, UNKNOWN_TYPE, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if]
[), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;]
[;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, JSType, varType, =]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, )]
[), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (]
[., getString, (, ), ), ;, if, (, var, !=, null, ), {, JSType, varType, =, var, ., getType, (]
[), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, type, =]
[!=, null, ), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {]
[), {, JSType, varType, =, var, ., getType, (, ), ;, if, (, varType, !=, null, ), {, type, =]
[;, if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n]
[., getType, (, ), ;, if, (, varType, !=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped]
[), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;, return, true]
[!=, null, ), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;]
[), {, type, =, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;, return, true]
[=, varType, ;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;, return, true, ;, }, private]
[;, }, }, }, ensureTyped, (, t, ,, n, ,, type, ), ;, return, true, ;, }, private, void, visitGetProp]
[;, return, true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node]
[,, n, ,, type, ), ;, return, true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,]
[,, type, ), ;, return, true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, return, true, ;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, private, void, visitGetProp, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, property, =, n]
[;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (]
[., getLastChild, (, ), ;, Node, objNode, =, n, ., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, objNode]
[;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, ), ), {, report, (]
[., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, objNode, ), ;, if, (, childType, ., isDict, (, )]
[;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,]
[), ;, if, (, childType, ., isDict, (, ), ), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS]
[), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if]
[., isDict, (, ), ), {, report, (, t, ,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", )]
[;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE]
[,, property, ,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (]
[,, TypeValidator, ., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,]
[,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,]
[., ILLEGAL_PROPERTY_ACCESS, ,, "'.'", ,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,]
[,, "dict", ), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,]
[), ;, }, else, if, (, validator, ., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (]
[), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped, (]
[., expectNotNullOrUndefined, (, t, ,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (]
[,, n, ,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, .]
[,, childType, ,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (]
[,, "No properties on this expression", ,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,]
[,, getNativeType, (, OBJECT_TYPE, ), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,]
[), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped]
[), ), ), {, checkPropertyAccess, (, childType, ,, property, ., getString, (, ), ,, t, ,, n, ), ;, }]
[;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName, ,]
[,, property, ., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped, (, t, ,, n, ), ;]
[,, t, ,, n, ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkPropertyAccess, (, JSType]
[., getString, (, ), ,, t, ,, n, ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private]
[,, n, ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkPropertyAccess, (, JSType, childType, ,]
[), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName]
[;, }, private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {, JSType]
[,, n, ), ;, }, private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n]
[), ;, }, private, void, checkPropertyAccess, (, JSType, childType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, ), {]
[;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType, .]
[), ;, if, (, propType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType]
[), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;]
[., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType, ., autobox, (, ), ;]
[), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, )]
[., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType]
[), ), ), {, childType, =, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType]
[=, childType, ., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType]
[;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (]
[., autobox, (, ), ;, ObjectType, objectType, =, ObjectType, ., cast, (, childType, ), ;, if, (, objectType, !=, null]
[;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, .]
[., cast, (, childType, ), ;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (]
[), ;, if, (, objectType, !=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType]
[), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (]
[!=, null, ), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, .]
[), {, if, (, !, objectType, ., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (]
[), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;]
[||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, )]
[||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, )]
[., hasProperty, (, propName, ), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if]
[), ||, objectType, ., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType]
[), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;]
[., isEquivalentTo, (, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report]
[), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, )]
[., getNativeType, (, UNKNOWN_TYPE, ), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n]
[), ), ), {, if, (, objectType, instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName]
[), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,]
[instanceof, EnumType, ), {, report, (, t, ,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (]
[;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else, {]
[,, n, ,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n]
[,, INEXISTENT_ENUM_ELEMENT, ,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;]
[,, propName, ), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }]
[), ;, }, else, {, checkPropertyAccessHelper, (, objectType, ,, propName, ,, t, ,, n, ), ;, }, }, }, else]
[;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t, ,, n, ), ;, }, }, }]
[,, propName, ,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t]
[,, t, ,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t, ,, n]
[,, n, ), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t, ,, n, ), ;]
[), ;, }, }, }, else, {, checkPropertyAccessHelper, (, childType, ,, propName, ,, t, ,, n, ), ;, }, }]
[;, }, }, }, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n, )]
[,, propName, ,, t, ,, n, ), ;, }, }, }, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName]
[,, t, ,, n, ), ;, }, }, }, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal]
[,, n, ), ;, }, }, }, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,]
[), ;, }, }, }, private, void, checkPropertyAccessHelper, (, JSType, objectType, ,, String, propName, ,, NodeTraversal, t, ,, Node, n]
[), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n]
[&&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), )]
[&&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName]
[&&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName]
[., isEmptyType, (, ), &&, reportMissingProperties, &&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined]
[&&, !, isPropertyTest, (, n, ), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), )]
[), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n]
[), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n]
[), ), {, if, (, !, typeRegistry, ., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,]
[), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (]
[), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (]
[., canPropertyBeDefined, (, objectType, ,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator]
[,, propName, ), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n]
[), ), {, report, (, t, ,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild]
[;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp, ., getParent, (, )]
[,, n, ,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,, true, ), )]
[,, INEXISTENT_PROPERTY, ,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,, true, ), ), ;, }]
[,, propName, ,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,, true, ), ), ;, }, }, }]
[,, validator, ., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,, true, ), ), ;, }, }, }, private, boolean]
[), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp, ., getParent, (]
[., getReadableJSTypeName, (, n, ., getFirstChild, (, ), ,, true, ), ), ;, }, }, }, private, boolean, isPropertyTest, (]
[,, true, ), ), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp]
[., getFirstChild, (, ), ,, true, ), ), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {]
[), ), ;, }, }, }, private, boolean, isPropertyTest, (, Node, getProp, ), {, Node, parent, =, getProp, ., getParent]
[;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., CALL, :, return]
[), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (]
[., getType, (, ), ), {, case, Token, ., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&]
[:, return, parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, )]
[., CALL, :, return, parent, ., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (]
[;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR]
[&&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, .]
[!=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case]
[., getFirstChild, (, ), !=, getProp, &&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token]
[&&, compiler, ., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, .]
[;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR]
[., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO]
[., getCodingConvention, (, ), ., isPropertyTestFunction, (, parent, ), ;, case, Token, ., IF, :, case, Token, ., WHILE, :]
[), ;, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, .]
[:, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression]
[., IF, :, case, Token, ., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil]
[:, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp]
[., WHILE, :, case, Token, ., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, )]
[:, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF]
[., DO, :, case, Token, ., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token]
[:, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF]
[., FOR, :, return, NodeUtil, ., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token]
[;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case]
[==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND]
[., getConditionExpression, (, parent, ), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true]
[), ==, getProp, ;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, .]
[;, case, Token, ., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case]
[:, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return]
[., INSTANCEOF, :, case, Token, ., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, )]
[., TYPEOF, :, return, true, ;, case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild]
[;, case, Token, ., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;]
[:, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :]
[., AND, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, .]
[:, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (]
[., HOOK, :, return, parent, ., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return, parent, .]
[;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent]
[==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&, parent]
[., getFirstChild, (, ), ==, getProp, ;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr]
[;, case, Token, ., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent]
[:, return, parent, ., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent, (, ), ., getFirstChild, (]
[., NOT, :, return, parent, ., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent, (, ), .]
[;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch]
[&&, parent, ., getParent, (, ), ., getFirstChild, (, ), ==, parent, ;, }, return, false, ;, }, private, void]
[., isOr, (, ), &&, parent, ., getParent, (, ), ., getFirstChild, (, ), ==, parent, ;, }, return, false]
[., getParent, (, ), ., isOr, (, ), &&, parent, ., getParent, (, ), ., getFirstChild, (, ), ==, parent]
[;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch]
[==, parent, ;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator]
[., getFirstChild, (, ), ==, parent, ;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node]
[., getParent, (, ), ., getFirstChild, (, ), ==, parent, ;, }, return, false, ;, }, private, void, visitGetElem, (]
[;, }, return, false, ;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch]
[;, }, private, void, visitGetElem, (, NodeTraversal, t, ,, Node, n, ), {, validator, ., expectIndexMatch, (, t, ,, n]
[;, ensureTyped, (, t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {]
[., expectIndexMatch, (, t, ,, n, ,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (, n, .]
[,, n, ,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), )]
[,, getJSType, (, n, ., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;]
[,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, }, private]
[), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, }]
[., getFirstChild, (, ), ), ,, getJSType, (, n, ., getLastChild, (, ), ), ), ;, ensureTyped, (, t, ,]
[), ;, ensureTyped, (, t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, )]
[), ), ;, ensureTyped, (, t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n]
[., getLastChild, (, ), ), ), ;, ensureTyped, (, t, ,, n, ), ;, }, private, void, visitVar, (, NodeTraversal]
[;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =, n, ., hasOneChild, (]
[,, n, ), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =, n]
[), ;, }, private, void, visitVar, (, NodeTraversal, t, ,, Node, n, ), {, JSDocInfo, varInfo, =, n, ., hasOneChild]
[;, for, (, Node, name, :, n, ., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (]
[?, n, ., getJSDocInfo, (, ), :, null, ;, for, (, Node, name, :, n, ., children, (, ), )]
[., hasOneChild, (, ), ?, n, ., getJSDocInfo, (, ), :, null, ;, for, (, Node, name, :, n, .]
[:, null, ;, for, (, Node, name, :, n, ., children, (, ), ), {, Node, value, =, name, .]
[., getJSDocInfo, (, ), :, null, ;, for, (, Node, name, :, n, ., children, (, ), ), {, Node]
[;, for, (, Node, name, :, n, ., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (]
[), {, Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =, t, ., getScope, (, ), .]
[., children, (, ), ), {, Node, value, =, name, ., getFirstChild, (, ), ;, Var, var, =, t, .]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ., getString, (, ), ), ;, if]
[., getFirstChild, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ., getString, (]
[;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var]
[., getVar, (, name, ., getString, (, ), ), ;, if, (, value, !=, null, ), {, JSType, valueType, =]
[., getScope, (, ), ., getVar, (, name, ., getString, (, ), ), ;, if, (, value, !=, null, )]
[), ;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =]
[., getString, (, ), ), ;, if, (, value, !=, null, ), {, JSType, valueType, =, getJSType, (, value, )]
[), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType]
[!=, null, ), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, )]
[), {, JSType, valueType, =, getJSType, (, value, ), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType]
[;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (]
[), ;, JSType, nameType, =, var, ., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType]
[;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name]
[., getType, (, ), ;, nameType, =, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;]
[=, (, nameType, ==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo]
[;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo]
[?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info]
[), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[==, null, ), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;]
[), ?, getNativeType, (, UNKNOWN_TYPE, ), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (]
[:, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info]
[), :, nameType, ;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {]
[;, JSDocInfo, info, =, name, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo]
[;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t]
[), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, .]
[==, null, ), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (]
[), {, info, =, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, .]
[=, varInfo, ;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, )]
[;, }, checkEnumAlias, (, t, ,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {]
[;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }]
[,, info, ,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name]
[,, value, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType]
[), ;, if, (, var, ., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;]
[), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,]
[., isTypeInferred, (, ), ), {, ensureTyped, (, t, ,, name, ,, valueType, ), ;, }, else, {, validator, .]
[;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType, ,, "initializing variable", ), ;, }]
[,, name, ,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType]
[,, valueType, ), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType, ,, "initializing variable"]
[), ;, }, else, {, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType, ,, "initializing variable", ), ;]
[;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =, n]
[., expectCanAssignTo, (, t, ,, value, ,, valueType, ,, nameType, ,, "initializing variable", ), ;, }, }, }, }, private, void]
[,, value, ,, valueType, ,, nameType, ,, "initializing variable", ), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t]
[,, valueType, ,, nameType, ,, "initializing variable", ), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node]
[,, nameType, ,, "initializing variable", ), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, )]
[,, "initializing variable", ), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, ), {, Node]
[), ;, }, }, }, }, private, void, visitNew, (, NodeTraversal, t, ,, Node, n, ), {, Node, constructor, =]
[;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, )]
[., getFirstChild, (, ), ;, JSType, type, =, getJSType, (, constructor, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type]
[;, if, (, type, ., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||, type, ., isUnknownType, (, )]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||, type]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (]
[||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType]
[||, type, ., isEmptyType, (, ), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType]
[., isConstructor, (, ), ||, type, ., isEmptyType, (, ), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType]
[||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType]
[., isEmptyType, (, ), ||, type, ., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, )]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (]
[., isUnknownType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null]
[;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t]
[., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, )]
[), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType]
[!=, null, ), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType]
[), {, visitParameterList, (, t, ,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType]
[;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t]
[,, n, ,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }]
[,, fnType, ), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {]
[), ;, ensureTyped, (, t, ,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (]
[;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (, t, ,, n]
[,, n, ,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;]
[,, fnType, ., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }]
[), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {, report, (, t, ,]
[., getInstanceType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, else, {]
[;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t, ,, n, )]
[,, n, ), ;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t]
[), ;, }, }, else, {, report, (, t, ,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t, ,, n]
[;, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,, Node, n, ,]
[,, n, ,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal]
[,, NOT_A_CONSTRUCTOR, ), ;, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,]
[), ;, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,, Node, n]
[;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,, Node, n, ,, String, functionName, ,, HashMap, <, String, ,]
[,, n, ), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,, Node, n, ,, String, functionName, ,, HashMap]
[), ;, }, }, private, void, checkInterfaceConflictProperties, (, NodeTraversal, t, ,, Node, n, ,, String, functionName, ,, HashMap, <, String]
[;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {, currentPropertyNames, =, ImmutableSet, ., of, (]
[., getImplicitPrototype, (, ), ;, Set, <, String, >, currentPropertyNames, ;, if, (, implicitProto, ==, null, ), {, currentPropertyNames, =]
[), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, )]
[==, null, ), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames]
[), {, currentPropertyNames, =, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, )]
[=, ImmutableSet, ., of, (, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for]
[;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, )]
[., of, (, ), ;, }, else, {, currentPropertyNames, =, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String]
[=, implicitProto, ., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties]
[;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get, (, name, ), ;]
[., getOwnPropertyNames, (, ), ;, }, for, (, String, name, :, currentPropertyNames, ), {, ObjectType, oType, =, properties, ., get]
[), {, ObjectType, oType, =, properties, ., get, (, name, ), ;, if, (, oType, !=, null, ), {, if]
[;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (]
[., get, (, name, ), ;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (]
[), ;, if, (, oType, !=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo]
[), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, )]
[!=, null, ), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (]
[), {, if, (, !, interfaceType, ., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, )]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, .]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, .]
[., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (]
[., getPropertyType, (, name, ), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report]
[), ., isEquivalentTo, (, oType, ., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType]
[., getPropertyType, (, name, ), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,]
[), ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,]
[;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, .]
[., report, (, t, ., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, ., toString, (, )]
[), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType]
[., makeError, (, n, ,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString]
[,, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, ,, functionName, ,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), )]
[,, functionName, ,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }]
[,, name, ,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties]
[,, oType, ., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties, ., put]
[,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;]
[., toString, (, ), ,, interfaceType, ., toString, (, ), ), ), ;, }, }, currentProperties, ., put, (, name]
[), ), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :]
[., toString, (, ), ), ), ;, }, }, currentProperties, ., put, (, name, ,, interfaceType, ), ;, }, for]
[;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,]
[., put, (, name, ,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), )]
[,, interfaceType, ), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t]
[), ;, }, for, (, ObjectType, iType, :, interfaceType, ., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n]
[), {, checkInterfaceConflictProperties, (, t, ,, n, ,, functionName, ,, properties, ,, currentProperties, ,, iType, ), ;, }, }, private]
[., getCtorExtendedInterfaces, (, ), ), {, checkInterfaceConflictProperties, (, t, ,, n, ,, functionName, ,, properties, ,, currentProperties, ,, iType, )]
[;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =, JSType, ., toMaybeFunctionType]
[,, n, ,, functionName, ,, properties, ,, currentProperties, ,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t]
[,, functionName, ,, properties, ,, currentProperties, ,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node]
[,, properties, ,, currentProperties, ,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, )]
[,, currentProperties, ,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType]
[,, iType, ), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =]
[), ;, }, }, private, void, visitFunction, (, NodeTraversal, t, ,, Node, n, ), {, FunctionType, functionType, =, JSType, .]
[;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionType, ., isConstructor, (]
[., toMaybeFunctionType, (, n, ., getJSType, (, ), ), ;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString]
[), ;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionType, ., isConstructor]
[., getJSType, (, ), ), ;, String, functionPrivateName, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if]
[;, if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if]
[., getString, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, functionType, ., isConstructor, (, ), ), {, FunctionType, baseConstructor]
[), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&]
[., isConstructor, (, ), ), {, FunctionType, baseConstructor, =, functionType, ., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType]
[;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), )]
[., getSuperClassConstructor, (, ), ;, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, .]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;]
[&&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[&&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[!=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report]
[&&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), &&, baseConstructor, !=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError]
[&&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[!=, null, &&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[&&, baseConstructor, ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;]
[., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,]
[;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, ., getPrototype]
[., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {]
[), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, .]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=]
[,, CONFLICTING_EXTENDED_TYPE, ,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, )]
[,, "constructor", ,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {]
[,, functionPrivateName, ), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto]
[), ), ;, }, else, {, if, (, baseConstructor, !=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType]
[), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[!=, getNativeType, (, OBJECT_FUNCTION_TYPE, ), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, .]
[), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !]
[), ), {, ObjectType, proto, =, functionType, ., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&]
[;, if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report]
[., getPrototype, (, ), ;, if, (, functionType, ., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), )]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;]
[&&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE]
[., makesStructs, (, ), &&, !, proto, ., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;]
[., isStruct, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,]
[;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {, compiler]
[., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if]
[), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts]
[,, CONFLICTING_EXTENDED_TYPE, ,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !]
[,, "struct", ,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, .]
[,, functionPrivateName, ), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (]
[), ), ;, }, else, if, (, functionType, ., makesDicts, (, ), &&, !, proto, ., isDict, (, ), )]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;]
[&&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE]
[., makesDicts, (, ), &&, !, proto, ., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;]
[., isDict, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,]
[;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false, ;]
[., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;, }, }, for]
[), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :]
[,, CONFLICTING_EXTENDED_TYPE, ,, "dict", ,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (]
[,, "dict", ,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), )]
[,, functionPrivateName, ), ), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean]
[), ), ;, }, }, for, (, JSType, baseInterface, :, functionType, ., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =]
[), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj]
[., getImplementedInterfaces, (, ), ), {, boolean, badImplementedType, =, false, ;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, )]
[;, ObjectType, baseInterfaceObj, =, ObjectType, ., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor]
[;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor]
[., cast, (, baseInterface, ), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (]
[), ;, if, (, baseInterfaceObj, !=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (]
[), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, .]
[!=, null, ), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !]
[), {, FunctionType, interfaceConstructor, =, baseInterfaceObj, ., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, .]
[;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }]
[., getConstructor, (, ), ;, if, (, interfaceConstructor, !=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType]
[), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {]
[&&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true]
[!=, null, &&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType]
[&&, !, interfaceConstructor, ., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true]
[), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {]
[), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {]
[., isInterface, (, ), ), {, badImplementedType, =, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if]
[=, true, ;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (, t]
[;, }, }, else, {, badImplementedType, =, true, ;, }, if, (, badImplementedType, ), {, report, (, t, ,, n]
[=, true, ;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;]
[;, }, if, (, badImplementedType, ), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }]
[), {, report, (, t, ,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t]
[;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else, if, (, functionType]
[,, n, ,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, )]
[,, BAD_IMPLEMENTED_TYPE, ,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }]
[,, functionPrivateName, ), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else]
[), ;, }, }, validator, ., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else, if, (]
[;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, .]
[., expectAllInterfaceProperties, (, t, ,, n, ,, functionType, ), ;, }, }, else, if, (, functionType, ., isInterface, (, )]
[,, n, ,, functionType, ), ;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (]
[,, functionType, ), ;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (, ObjectType, extInterface]
[), ;, }, }, else, if, (, functionType, ., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType]
[), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (]
[., isInterface, (, ), ), {, for, (, ObjectType, extInterface, :, functionType, ., getExtendedInterfaces, (, ), ), {, if, (]
[), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface]
[., getExtendedInterfaces, (, ), ), {, if, (, extInterface, ., getConstructor, (, ), !=, null, &&, !, extInterface, ., getConstructor]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;]
[&&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError]
[!=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t]
[., getConstructor, (, ), !=, null, &&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler]
[&&, !, extInterface, ., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;]
[., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,]
[., getConstructor, (, ), ., isInterface, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <, String, ,, ObjectType, >]
[., report, (, t, ., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if]
[), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <, String, ,, ObjectType]
[., makeError, (, n, ,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount]
[,, CONFLICTING_EXTENDED_TYPE, ,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1]
[,, "interface", ,, functionPrivateName, ), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {]
[,, functionPrivateName, ), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <]
[), ), ;, }, }, if, (, functionType, ., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <, String, ,]
[), {, HashMap, <, String, ,, ObjectType, >, properties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;]
[>, 1, ), {, HashMap, <, String, ,, ObjectType, >, properties, =, new, HashMap, <, String, ,, ObjectType, >, (]
[., getExtendedInterfacesCount, (, ), >, 1, ), {, HashMap, <, String, ,, ObjectType, >, properties, =, new, HashMap, <, String]
[), {, HashMap, <, String, ,, ObjectType, >, properties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;]
[;, HashMap, <, String, ,, ObjectType, >, currentProperties, =, new, HashMap, <, String, ,, ObjectType, >, (, ), ;, for]
[;, for, (, ObjectType, interfaceType, :, functionType, ., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties]
[), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,]
[., getExtendedInterfaces, (, ), ), {, currentProperties, ., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,]
[;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (]
[., clear, (, ), ;, checkInterfaceConflictProperties, (, t, ,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;]
[;, properties, ., putAll, (, currentProperties, ), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node]
[,, n, ,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (, currentProperties, ), ;, }]
[,, functionPrivateName, ,, properties, ,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (, currentProperties, ), ;, }, }, }]
[,, properties, ,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (, currentProperties, ), ;, }, }, }, }, private]
[,, currentProperties, ,, interfaceType, ), ;, properties, ., putAll, (, currentProperties, ), ;, }, }, }, }, private, void, visitCall]
[,, interfaceType, ), ;, properties, ., putAll, (, currentProperties, ), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal]
[), ;, properties, ., putAll, (, currentProperties, ), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,]
[;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n]
[., putAll, (, currentProperties, ), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node, n, )]
[), ;, }, }, }, }, private, void, visitCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[;, JSType, childType, =, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (]
[., getFirstChild, (, ), ;, JSType, childType, =, getJSType, (, child, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !]
[;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,, n]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, !, childType, ., canBeCalled, (, ), ), {, report, (, t, ,]
[), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (, t]
[), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (, t]
[., canBeCalled, (, ), ), {, report, (, t, ,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), )]
[;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {]
[,, n, ,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return]
[,, NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }]
[,, childType, ., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (]
[), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), )]
[., toString, (, ), ), ;, ensureTyped, (, t, ,, n, ), ;, return, ;, }, if, (, childType, .]
[;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (]
[,, n, ), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, childType]
[), ;, return, ;, }, if, (, childType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType]
[), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType]
[., isFunctionType, (, ), ), {, FunctionType, functionType, =, childType, ., toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;]
[;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null]
[., toMaybeFunctionType, (, ), ;, boolean, isExtern, =, false, ;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if]
[;, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (]
[;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =, functionJSDocInfo, .]
[., getJSDocInfo, (, ), ;, if, (, functionJSDocInfo, !=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {]
[), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor]
[&&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (]
[!=, null, &&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), .]
[&&, functionJSDocInfo, ., getAssociatedNode, (, ), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (]
[), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor]
[!=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType]
[., getAssociatedNode, (, ), !=, null, ), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;]
[), {, isExtern, =, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor]
[=, functionJSDocInfo, ., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&]
[;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, .]
[., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, )]
[., getAssociatedNode, (, ), ., isFromExterns, (, ), ;, }, if, (, functionType, ., isConstructor, (, ), &&, !, functionType]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[&&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (]
[&&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType]
[., isConstructor, (, ), &&, !, functionType, ., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType]
[&&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (]
[&&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (]
[., isNativeObjectType, (, ), &&, (, functionType, ., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (]
[), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (]
[), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if]
[||, !, isExtern, ), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), )]
[||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,]
[., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {]
[., getReturnType, (, ), ., isUnknownType, (, ), ||, functionType, ., getReturnType, (, ), ., isVoidType, (, ), ||, !]
[||, !, isExtern, ), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), )]
[., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, .]
[., getReturnType, (, ), ., isVoidType, (, ), ||, !, isExtern, ), ), {, report, (, t, ,, n, ,]
[), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if]
[), ), {, report, (, t, ,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if]
[;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, )]
[,, n, ,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, )]
[,, CONSTRUCTOR_NOT_CALLABLE, ,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !]
[,, childType, ., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, .]
[), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (]
[., toString, (, ), ), ;, }, if, (, functionType, ., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (]
[), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (]
[&&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t]
[&&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&, functionType, ., getTypeOfThis, (, )]
[&&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), .]
[., isOrdinaryFunction, (, ), &&, !, functionType, ., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (, functionType, .]
[&&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&, functionType, ., getTypeOfThis, (, )]
[&&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&, functionType, ., getTypeOfThis, (, )]
[., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&, functionType]
[., getTypeOfThis, (, ), ., isUnknownType, (, ), &&, !, (, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, )]
[&&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t]
[&&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t]
[), &&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (]
[&&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, .]
[!=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (]
[., toObjectType, (, ), !=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, )]
[., getTypeOfThis, (, ), ., toObjectType, (, ), !=, null, &&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, )]
[&&, functionType, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, .]
[), &&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (]
[., isNativeObjectType, (, ), ), &&, !, (, child, ., isGetElem, (, ), ||, child, ., isGetProp, (, ), )]
[., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, ., isGetElem, (, ), ||, child, .]
[., getTypeOfThis, (, ), ., toObjectType, (, ), ., isNativeObjectType, (, ), ), &&, !, (, child, ., isGetElem, (]
[), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (]
[), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (]
[), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList]
[||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString]
[., isGetElem, (, ), ||, child, ., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE]
[), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList]
[., isGetProp, (, ), ), ), {, report, (, t, ,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, )]
[;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType]
[,, n, ,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType]
[,, EXPECTED_THIS_TYPE, ,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;]
[,, functionType, ., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (]
[), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,, n, ,, functionType, .]
[., toString, (, ), ), ;, }, visitParameterList, (, t, ,, n, ,, functionType, ), ;, ensureTyped, (, t, ,]
[;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (, t]
[,, n, ,, functionType, ), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }]
[,, functionType, ), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {]
[), ;, ensureTyped, (, t, ,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (]
[;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, visitParameterList, (, NodeTraversal, t, ,]
[,, n, ,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;]
[,, functionType, ., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }]
[), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, private, void, visitParameterList, (, NodeTraversal, t]
[., getReturnType, (, ), ), ;, }, else, {, ensureTyped, (, t, ,, n, ), ;, }, }, private, void]
[;, }, }, private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {, Iterator, <, Node]
[,, n, ), ;, }, }, private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {]
[), ;, }, }, private, void, visitParameterList, (, NodeTraversal, t, ,, Node, call, ,, FunctionType, functionType, ), {, Iterator, <]
[;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters, =, functionType, ., getParameters, (, ), ., iterator]
[., iterator, (, ), ;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters, =, functionType, ., getParameters]
[., children, (, ), ., iterator, (, ), ;, arguments, ., next, (, ), ;, Iterator, <, Node, >, parameters]
[;, Iterator, <, Node, >, parameters, =, functionType, ., getParameters, (, ), ., iterator, (, ), ;, int, ordinal, =]
[., next, (, ), ;, Iterator, <, Node, >, parameters, =, functionType, ., getParameters, (, ), ., iterator, (, )]
[;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, .]
[., iterator, (, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node, argument, =, null, ;]
[., getParameters, (, ), ., iterator, (, ), ;, int, ordinal, =, 0, ;, Node, parameter, =, null, ;, Node]
[;, Node, parameter, =, null, ;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (]
[;, Node, argument, =, null, ;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, )]
[;, while, (, arguments, ., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||, parameter, !=, null, &&]
[), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }]
[&&, (, parameters, ., hasNext, (, ), ||, parameter, !=, null, &&, parameter, ., isVarArgs, (, ), ), ), {]
[., hasNext, (, ), &&, (, parameters, ., hasNext, (, ), ||, parameter, !=, null, &&, parameter, ., isVarArgs, (]
[), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }]
[), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;]
[||, parameter, !=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, )]
[., hasNext, (, ), ||, parameter, !=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters]
[), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;]
[&&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =]
[!=, null, &&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {]
[&&, parameter, ., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =]
[), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;]
[., isVarArgs, (, ), ), ), {, if, (, parameters, ., hasNext, (, ), ), {, parameter, =, parameters, .]
[), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal]
[., hasNext, (, ), ), {, parameter, =, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next]
[=, parameters, ., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator]
[;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument]
[., next, (, ), ;, }, argument, =, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter]
[=, arguments, ., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (]
[;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter]
[., next, (, ), ;, ordinal, ++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, )]
[;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call]
[++, ;, validator, ., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,]
[;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType, ., getMinArguments, (]
[., expectArgumentMatchesParameter, (, t, ,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal]
[,, argument, ,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int]
[,, getJSType, (, argument, ), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =]
[,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, )]
[), ,, getJSType, (, parameter, ), ,, call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (]
[,, call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs]
[), ,, call, ,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int]
[,, ordinal, ), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType]
[), ;, }, int, numArgs, =, call, ., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType, ., getMinArguments]
[;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if]
[-, 1, ;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, )]
[., getChildCount, (, ), -, 1, ;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType]
[;, int, minArgs, =, functionType, ., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if]
[;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, )]
[., getMinArguments, (, ), ;, int, maxArgs, =, functionType, ., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||]
[;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,]
[., getMaxArguments, (, ), ;, if, (, minArgs, >, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,]
[), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,]
[||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, .]
[>, numArgs, ||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (]
[||, maxArgs, <, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, .]
[), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,]
[<, numArgs, ), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (]
[), {, report, (, t, ,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,]
[;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (, t]
[,, call, ,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, .]
[,, WRONG_ARGUMENT_COUNT, ,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (]
[,, validator, ., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, )]
[,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE]
[., getReadableJSTypeName, (, call, ., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String]
[,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=]
[., getFirstChild, (, ), ,, false, ), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs]
[), ,, String, ., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, .]
[,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :]
[., valueOf, (, numArgs, ), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than "]
[), ,, String, ., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)"]
[,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void]
[., valueOf, (, minArgs, ), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", )]
[), ,, maxArgs, !=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private]
[), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (]
[?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node]
[!=, Integer, ., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (]
[?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node]
[., MAX_VALUE, ?, " and no more than ", +, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t]
[:, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =]
[+, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType]
[+, maxArgs, +, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, )]
[+, " argument(s)", :, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType]
[:, "", ), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =]
[), ;, }, }, private, void, visitReturn, (, NodeTraversal, t, ,, Node, n, ), {, JSType, jsType, =, getJSType, (]
[;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType]
[), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;]
[., getEnclosingFunction, (, ), ), ;, if, (, jsType, ., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, .]
[), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;]
[., isFunctionType, (, ), ), {, FunctionType, functionType, =, jsType, ., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, .]
[;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType]
[., toMaybeFunctionType, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, returnType, ==, null, )]
[;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n]
[., getReturnType, (, ), ;, if, (, returnType, ==, null, ), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }]
[), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType]
[==, null, ), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, )]
[), {, returnType, =, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType]
[=, getNativeType, (, VOID_TYPE, ), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if]
[;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, )]
[), ;, }, Node, valueNode, =, n, ., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null]
[;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =]
[., getFirstChild, (, ), ;, JSType, actualReturnType, ;, if, (, valueNode, ==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE]
[), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (]
[==, null, ), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =]
[), {, actualReturnType, =, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (]
[=, getNativeType, (, VOID_TYPE, ), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;]
[;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (]
[), ;, valueNode, =, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo]
[=, n, ;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,]
[;, }, else, {, actualReturnType, =, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,]
[=, getJSType, (, valueNode, ), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,, returnType, ,, "inconsistent return type"]
[;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,, returnType, ,, "inconsistent return type", ), ;, }, }, private]
[), ;, }, validator, ., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,, returnType, ,, "inconsistent return type", ), ;, }, }]
[;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n, ), {, Node, left, =]
[., expectCanAssignTo, (, t, ,, valueNode, ,, actualReturnType, ,, returnType, ,, "inconsistent return type", ), ;, }, }, private, void, visitBinaryOperator, (]
[,, valueNode, ,, actualReturnType, ,, returnType, ,, "inconsistent return type", ), ;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal]
[,, actualReturnType, ,, returnType, ,, "inconsistent return type", ), ;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,]
[,, returnType, ,, "inconsistent return type", ), ;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n]
[,, "inconsistent return type", ), ;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n, ), {]
[), ;, }, }, private, void, visitBinaryOperator, (, int, op, ,, NodeTraversal, t, ,, Node, n, ), {, Node, left]
[;, JSType, leftType, =, getJSType, (, left, ), ;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType]
[., getFirstChild, (, ), ;, JSType, leftType, =, getJSType, (, left, ), ;, Node, right, =, n, ., getLastChild, (]
[;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (]
[), ;, Node, right, =, n, ., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch]
[;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case]
[., getLastChild, (, ), ;, JSType, rightType, =, getJSType, (, right, ), ;, switch, (, op, ), {, case, Token]
[;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH]
[), ;, switch, (, op, ), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, .]
[), {, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, .]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token]
[:, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH]
[., ASSIGN_RSH, :, case, Token, ., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType]
[., LSH, :, case, Token, ., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), )]
[., RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (]
[:, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,]
[., ASSIGN_URSH, :, case, Token, ., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (]
[:, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil]
[., URSH, :, if, (, !, leftType, ., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION]
[), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[., matchesInt32Context, (, ), ), {, report, (, t, ,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, .]
[;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,]
[,, left, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (]
[,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), )]
[,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }]
[,, leftType, ., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report]
[., opToStr, (, n, ., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }, if, (]
[), ,, leftType, ., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {]
[., getType, (, ), ), ,, leftType, ., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context]
[), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION]
[., toString, (, ), ), ;, }, if, (, !, rightType, ., matchesUint32Context, (, ), ), {, report, (, t]
[), {, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[), {, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), )]
[., matchesUint32Context, (, ), ), {, report, (, t, ,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, .]
[;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case]
[,, right, ,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (]
[,, BIT_OPERATION, ,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (, ), )]
[,, NodeUtil, ., opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (, ), ), ;, }]
[,, rightType, ., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., opToStr, (, n, ., getType, (, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;]
[), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, .]
[., getType, (, ), ), ,, rightType, ., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV]
[), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :]
[., toString, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[:, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD]
[., ASSIGN_MOD, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token]
[:, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB]
[., ASSIGN_SUB, :, case, Token, ., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token]
[:, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (]
[., DIV, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, .]
[:, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType]
[., MOD, :, case, Token, ., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left]
[:, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator]
[., MUL, :, case, Token, ., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", )]
[:, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,]
[., SUB, :, validator, ., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (]
[;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND]
[., expectNumber, (, t, ,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,]
[,, left, ,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", )]
[,, leftType, ,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break]
[,, "left operand", ), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case]
[), ;, validator, ., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, .]
[;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token]
[., expectNumber, (, t, ,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case]
[,, right, ,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :]
[,, rightType, ,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token]
[,, "right operand", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR]
[), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token]
[:, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (]
[., ASSIGN_BITOR, :, case, Token, ., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, .]
[:, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType]
[., BITAND, :, case, Token, ., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left]
[:, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator]
[., BITXOR, :, case, Token, ., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", )]
[:, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,]
[., BITOR, :, validator, ., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (]
[;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD]
[., expectBitwiseable, (, t, ,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,]
[,, left, ,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", )]
[,, leftType, ,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break]
[,, "bad left operand to bitwise operator", ), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case]
[), ;, validator, ., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, .]
[;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t]
[., expectBitwiseable, (, t, ,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case]
[,, right, ,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :]
[,, rightType, ,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;]
[,, "bad right operand to bitwise operator", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :]
[), ;, break, ;, case, Token, ., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (]
[:, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, .]
[., ASSIGN_ADD, :, case, Token, ., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,]
[:, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), )]
[., ADD, :, break, ;, default, :, report, (, t, ,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op]
[;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,]
[,, n, ,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), ), ;, }, ensureTyped, (, t, ,, n, )]
[,, UNEXPECTED_TOKEN, ,, Token, ., name, (, op, ), ), ;, }, ensureTyped, (, t, ,, n, ), ;, }]
[,, Token, ., name, (, op, ), ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void]
[), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo]
[., name, (, op, ), ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkEnumAlias, (]
[), ), ;, }, ensureTyped, (, t, ,, n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo]
[;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo, ==]
[,, n, ), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if]
[), ;, }, private, void, checkEnumAlias, (, NodeTraversal, t, ,, JSDocInfo, declInfo, ,, Node, value, ), {, if, (, declInfo]
[), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !, valueType, ., isEnumType, (]
[||, !, declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;]
[==, null, ||, !, declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value]
[||, !, declInfo, ., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;]
[), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !, valueType, ., isEnumType, (]
[), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !, valueType, ., isEnumType, (]
[., hasEnumParameterType, (, ), ), {, return, ;, }, JSType, valueType, =, getJSType, (, value, ), ;, if, (, !]
[;, if, (, !, valueType, ., isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType]
[), ;, if, (, !, valueType, ., isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, .]
[), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType]
[), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType]
[., isEnumType, (, ), ), {, return, ;, }, EnumType, valueEnumType, =, valueType, ., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType]
[;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,]
[., toMaybeEnumType, (, ), ;, JSType, valueEnumPrimitiveType, =, valueEnumType, ., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, .]
[;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t]
[., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, )]
[., getElementsType, (, ), ., getPrimitiveType, (, ), ;, validator, ., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo]
[;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;, if]
[., expectCanAssignTo, (, t, ,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope]
[,, value, ,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry]
[,, valueEnumPrimitiveType, ,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ,]
[,, declInfo, ., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ,, "incompatible enum element types", )]
[,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (]
[., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (]
[., getEnumParameterType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }]
[,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n]
[., getScope, (, ), ,, typeRegistry, ), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {]
[), ,, "incompatible enum element types", ), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType]
[), ;, }, private, JSType, getJSType, (, Node, n, ), {, JSType, jsType, =, n, ., getJSType, (, ), ;]
[;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;]
[., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else]
[), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, void, ensureTyped, (]
[==, null, ), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, void]
[), {, return, getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, {, return, jsType, ;, }, }, private, void, ensureTyped, (]
[;, }, else, {, return, jsType, ;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {]
[), ;, }, else, {, return, jsType, ;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, )]
[;, }, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ), {, ensureTyped, (, t, ,, n, ,]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (, t, ,]
[,, n, ,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,]
[,, getNativeType, (, UNKNOWN_TYPE, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type]
[), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (, t]
[), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSTypeNative, type, ), {, ensureTyped, (]
[;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[,, n, ,, getNativeType, (, type, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,]
[,, getNativeType, (, type, ), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type]
[), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, ., checkState]
[), ), ;, }, private, void, ensureTyped, (, NodeTraversal, t, ,, Node, n, ,, JSType, type, ), {, Preconditions, .]
[;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (, info]
[., checkState, (, !, n, ., isFunction, (, ), ||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (]
[||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info]
[||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo]
[||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo]
[., isFunction, (, ), ||, type, ., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info]
[||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info]
[., isFunctionType, (, ), ||, type, ., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, )]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (]
[., isUnknownType, (, ), ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), )]
[), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (, ), .]
[!=, null, ), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (]
[), {, if, (, info, ., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (, ), .]
[), {, JSType, infoType, =, info, ., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry]
[., hasType, (, ), ), {, JSType, infoType, =, info, ., getType, (, ), ., evaluate, (, t, ., getScope]
[;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if]
[., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,]
[., getType, (, ), ., evaluate, (, t, ., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (]
[,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType]
[., getScope, (, ), ,, typeRegistry, ), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, )]
[), ;, validator, ., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }]
[;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName]
[., expectCanCast, (, t, ,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (, info]
[,, n, ,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, )]
[,, infoType, ,, type, ), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !]
[,, type, ), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, )]
[), ;, type, =, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String]
[=, infoType, ;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n]
[;, }, if, (, info, ., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n, ., isGetProp]
[), {, String, propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, )]
[&&, !, inExterns, ), {, String, propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), .]
[., isImplicitCast, (, ), &&, !, inExterns, ), {, String, propName, =, n, ., isGetProp, (, ), ?, n, .]
[), {, String, propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, )]
[), {, String, propName, =, n, ., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, )]
[;, compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if]
[?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError]
[., isGetProp, (, ), ?, n, ., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report]
[:, "(missing)", ;, compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }]
[., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName]
[., getLastChild, (, ), ., getString, (, ), :, "(missing)", ;, compiler, ., report, (, t, ., makeError, (, n]
[;, compiler, ., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if]
[;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {, n, ., setJSType, (, type, )]
[., report, (, t, ., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n]
[), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {, n, ., setJSType, (, type]
[., makeError, (, n, ,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, )]
[,, ILLEGAL_IMPLICIT_CAST, ,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {]
[,, propName, ), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {, n, .]
[), ), ;, }, }, if, (, n, ., getJSType, (, ), ==, null, ), {, n, ., setJSType, (]
[), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount]
[==, null, ), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total]
[., getJSType, (, ), ==, null, ), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (]
[), {, n, ., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount]
[;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (, total]
[., setJSType, (, type, ), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +]
[), ;, }, }, double, getTypedPercent, (, ), {, int, total, =, nullCount, +, unknownCount, +, typedCount, ;, return, (]
[;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private]
[+, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;]
[+, unknownCount, +, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /]
[+, typedCount, ;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;]
[;, return, (, total, ==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private]
[;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, }]
[?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {]
[), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, )]
[==, 0, ), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative]
[), ?, 0.0, :, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, )]
[:, (, 100.0, *, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry]
[;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, }]
[/, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, ), ;]
[), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, )]
[*, typedCount, ), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (]
[), /, total, ;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, )]
[;, }, private, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, typeRegistry, ., getNativeType, (, typeId, ), ;, }, }]
[;, }, }]
[., getNativeType, (, typeId, ), ;, }, }]
[), ;, }, }]
