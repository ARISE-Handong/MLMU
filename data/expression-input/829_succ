[;, ReplaceMessages, (, AbstractCompiler, compiler, ,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, )]
[., error, (, "JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE", ,, "Message with id = {0} could not be found in replacement bundle", ), ;, ReplaceMessages, (, AbstractCompiler, compiler, ,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage]
[,, "Message with id = {0} could not be found in replacement bundle", ), ;, ReplaceMessages, (, AbstractCompiler, compiler, ,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,]
[), ;, ReplaceMessages, (, AbstractCompiler, compiler, ,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement]
[,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;, this, .]
[,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;, this, ., strictReplacement, =]
[,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;, this, ., strictReplacement, =, strictReplacement, ;]
[), ;, this, ., bundle, =, bundle, ;, this, ., strictReplacement, =, strictReplacement, ;, }, @, Override, void, processMessageFallback, (]
[., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;, this, ., strictReplacement, =, strictReplacement, ;, }, @]
[=, bundle, ;, this, ., strictReplacement, =, strictReplacement, ;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1]
[., bundle, =, bundle, ;, this, ., strictReplacement, =, strictReplacement, ;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,]
[;, this, ., strictReplacement, =, strictReplacement, ;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage]
[=, strictReplacement, ;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean]
[., strictReplacement, =, strictReplacement, ;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, )]
[;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =]
[;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node]
[), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;]
[!=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null]
[., getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage]
[), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=]
[., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId]
[), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;]
[;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (]
[), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex]
[!=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode]
[., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated]
[), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :]
[., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex]
[), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex]
[;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), ), ;, }, @]
[?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, )]
[&&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, .]
[?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, )]
[?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, )]
[:, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, .]
[., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild]
[), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode]
[;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), ), ;, }, @]
[., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (]
[), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), ), ;, }]
[;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, ., getMessage]
[., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message]
[., getParent, (, ), ., replaceChild, (, callNode, ,, replacementNode, ., detachFromParent, (, ), ), ;, }, @, Override, void]
[,, replacementNode, ., detachFromParent, (, ), ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, )]
[), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, .]
[., detachFromParent, (, ), ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage]
[;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make]
[., getMessage, (, message, ., getId, (, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement]
[), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, .]
[., getId, (, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, .]
[), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, )]
[==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName]
[), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, )]
[), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (]
[;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =, definition, .]
[., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE]
[), ;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =, definition]
[., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId]
[,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), ), ;, return, ;, }]
[., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), )]
[,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), ), ;, return, ;, }, else, {, replacement, =, message, ;]
[., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), ), ;, return, ;, }, else, {]
[,, message, ., getId, (, ), ), ), ;, return, ;, }, else, {, replacement, =, message, ;, }, }]
[), ), ;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =]
[., getId, (, ), ), ), ;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue]
[=, message, ;, }, }, Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {, newValue]
[;, }, }, Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {, newValue, =, getNewValueNode]
[;, try, {, newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler]
[., getMessageNode, (, ), ;, try, {, newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException]
[=, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError]
[;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (]
[,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message]
[), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName]
[;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED]
[), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, )]
[., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage]
[,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode]
[., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), )]
[,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=]
[., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }]
[,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, )]
[), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode]
[., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue]
[=, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, .]
[;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (]
[), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue]
[!=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode]
[), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue]
[;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler]
[), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, ), throws]
[., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getNewValueNode, (]
[., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, )]
[;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {, switch, (, origValueNode, .]
[., reportCodeChange, (, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {]
[), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case, Token, .]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode]
[:, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message]
[., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString]
[;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (]
[,, origValueNode, ), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, )]
[), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if]
[;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (, !, origValueNode, .]
[:, String, newString, =, message, ., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, ), ., equals]
[., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, )]
[;, if, (, !, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {, origValueNode, ., setString, (]
[., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {]
[), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case]
[), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case]
[., equals, (, newString, ), ), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., getString, (, ), ., equals, (, newString, ), ), {, origValueNode, ., setString, (, newString, ), ;, compiler, .]
[), ), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string]
[., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, .]
[;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (, message, ., toString, (, )]
[., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (, message]
[;, case, Token, ., ADD, :, return, IR, ., string, (, message, ., toString, (, ), ), ;, case, Token]
[:, return, IR, ., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode]
[., ADD, :, return, IR, ., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :]
[;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (]
[., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,]
[), ;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException]
[., toString, (, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default]
[:, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType]
[., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode]
[;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, ), ,, origValueNode, ), ;, }, }]
[,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, ), ,, origValueNode, )]
[), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, ), ,, origValueNode, ), ;, }]
[;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode, ,]
[,, origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode]
[+, origValueNode, ., getType, (, ), ,, origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node]
[,, origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode]
[., getType, (, ), ,, origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, )]
[), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode]
[;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node]
[,, Token, ., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token]
[), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;]
[., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME]
[;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode]
[., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext]
[;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node]
[,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token]
[), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;]
[., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST]
[;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode]
[., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext]
[;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator]
[,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token]
[), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;]
[., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK]
[;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (]
[., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =]
[;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =]
[,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (]
[), ;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode]
[., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;]
[;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string]
[., iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, )]
[., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (]
[;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, .]
[?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, .]
[., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node]
[:, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode]
[,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, .]
[), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (]
[;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, .]
[., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), )]
[), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode]
[;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;]
[., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=]
[), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, )]
[., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode]
[), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode]
[), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, .]
[!=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;]
[., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (]
[), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, )]
[), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, .]
[;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node]
[., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, ., reportCodeChange, (, )]
[), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,, Node]
[., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, constructAddOrStringNode, (]
[,, newBlockNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,]
[;, }, }, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,, Node, argListNode, ), throws, MalformedException, {, CharSequence]
[., reportCodeChange, (, ), ;, }, }, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,, Node, argListNode, )]
[;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =]
[., next, (, ), ;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage]
[;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, )]
[), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, for, (, Node, node, :, argListNode]
[instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, for, (]
[;, for, (, Node, node, :, argListNode, ., children, (, ), ), {, if, (, node, ., isName, (, )]
[;, for, (, Node, node, :, argListNode, ., children, (, ), ), {, if, (, node, ., isName, (, )]
[), {, if, (, node, ., isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;]
[., children, (, ), ), {, if, (, node, ., isName, (, ), ), {, String, arg, =, node, .]
[), {, String, arg, =, node, ., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName]
[., isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase]
[;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode, =, IR, ., name]
[., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode]
[), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, )]
[., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode, =, IR, ., name, (, arg, ), ;]
[), ), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null]
[., getName, (, ), ), ), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if]
[=, IR, ., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new]
[;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName]
[., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, .]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else]
[==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else]
[;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if]
[,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), )]
[+, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), )]
[., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, .]
[), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }]
[=, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, )]
[;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (]
[., string, (, part, ., toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {]
[), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode]
[., toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add]
[), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), ), ;, }, else, {]
[., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), )]
[;, }, else, {, return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws]
[., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), ), ;, }, else, {, return, partNode, ;, }]
[,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), ), ;, }, else, {, return, partNode, ;, }, }, private, Node, replaceCallNode]
[), ;, }, else, {, return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, )]
[,, argListNode, ), ), ;, }, else, {, return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,]
[), ), ;, }, else, {, return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode]
[;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (, callNode, ,]
[;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node]
[,, Token, ., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token]
[), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;]
[., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP]
[;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode]
[., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext]
[;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, .]
[,, Token, ., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;]
[), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode]
[., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode]
[;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (, message, .]
[., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return]
[;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (, message, ., parts, (, ), ., iterator]
[), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (, message, ., parts, (, ), .]
[;, return, constructStringExprNode, (, message, ., parts, (, ), ., iterator, (, ), ,, objLitNode, ), ;, }, private, Node]
[., getNext, (, ), ;, return, constructStringExprNode, (, message, ., parts, (, ), ., iterator, (, ), ,, objLitNode, )]
[;, }, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node, objLitNode, ), throws, MalformedException, {, CharSequence, part]
[,, objLitNode, ), ;, }, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node, objLitNode, ), throws, MalformedException]
[., iterator, (, ), ,, objLitNode, ), ;, }, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node]
[., parts, (, ), ., iterator, (, ), ,, objLitNode, ), ;, }, private, Node, constructStringExprNode, (, Iterator, <, CharSequence]
[), ;, }, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node, objLitNode, ), throws, MalformedException, {, CharSequence]
[;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =]
[., next, (, ), ;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage]
[;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, )]
[), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, )]
[instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (]
[;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }]
[;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }]
[), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode]
[==, null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key]
[), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode]
[;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key]
[,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;]
[+, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=]
[,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), .]
[;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (]
[=, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, phRef, .]
[), {, if, (, key, ., getString, (, ), ., equals, (, phRef, ., getName, (, ), ), ), {]
[., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, phRef, ., getName, (]
[), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }]
[., equals, (, phRef, ., getName, (, ), ), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;]
[., getString, (, ), ., equals, (, phRef, ., getName, (, ), ), ), {, Node, valueNode, =, key, .]
[), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;]
[., getName, (, ), ), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =, valueNode, .]
[;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new]
[., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null]
[=, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (]
[., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else]
[==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else]
[;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if]
[,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), )]
[+, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), )]
[., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (, part, .]
[), ;, }, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }]
[=, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, )]
[;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructStringExprNode, (]
[., string, (, part, ., toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, ), ), {]
[), ;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructStringExprNode]
[., toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add]
[), {, return, IR, ., add, (, partNode, ,, constructStringExprNode, (, parts, ,, objLitNode, ), ), ;, }, else, {]
[., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructStringExprNode, (, parts, ,, objLitNode, ), )]
[;, }, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if]
[., add, (, partNode, ,, constructStringExprNode, (, parts, ,, objLitNode, ), ), ;, }, else, {, return, partNode, ;, }]
[,, constructStringExprNode, (, parts, ,, objLitNode, ), ), ;, }, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode]
[), ;, }, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {]
[,, objLitNode, ), ), ;, }, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node]
[), ), ;, }, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, )]
[;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (, node, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (, node, ., getType, (, ), ), {, case]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (, node, ., getType, (, ), )]
[), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (, node, ., getType, (, ), ), {, case]
[;, }, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case, Token]
[), ;, }, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case]
[), {, case, Token, ., STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild]
[., getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case, Token, ., ADD, :, Node, c]
[:, break, ;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c]
[., STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode]
[:, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (, c, ., getNext]
[., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (, c]
[;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw]
[., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break]
[;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +]
[), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: "]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +, node, ., getType, (, ), ), ;, }, }]
[), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +, node, ., getType, (, ), ), ;, }]
[., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +, node, ., getType, (]
[;, }, }, }]
[), ;, }, }, }]
[+, node, ., getType, (, ), ), ;, }, }, }]
[), ;, }, }, }]
[., getType, (, ), ), ;, }, }, }]
