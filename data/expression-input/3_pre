[private, StorelessBivariateCovariance, [, ], covMatrix, ;, private, int, dimension, ;, public, StorelessCovariance, (, final, int, dim, ), {, this, (]
[[, ], covMatrix, ;, private, int, dimension, ;, public, StorelessCovariance, (, final, int, dim, ), {, this, (, dim, ,]
[this, (, dim, ,, true, ), ;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {]
[dim, ,, true, ), ;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =]
[true, ), ;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;]
[;, }, public, StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =]
[StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, []
[StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, []
[StorelessCovariance, (, final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, []
[final, int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *]
[int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (]
[int, dim, ,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (]
[,, final, boolean, biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +]
[biasCorrected, ), {, dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /]
[dimension, =, dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /, 2, ], ;]
[dim, ;, covMatrix, =, new, StorelessBivariateCovariance, [, dimension, *, (, dimension, +, 1, ), /, 2, ], ;, initializeMatrix, (]
[initializeMatrix, (, biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =]
[biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;]
[biasCorrected, ), ;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;]
[;, }, private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;, i, <]
[private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[private, void, initializeMatrix, (, final, boolean, biasCorrected, ), {, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (]
[{, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (, i, ,]
[(, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (, i, ,, j, ,]
[=, 0, ;, j, <, dimension, ;, j, ++, ), {, setElement, (, i, ,, j, ,, new, StorelessBivariateCovariance, (]
[), ), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return]
[), ), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return]
[), ), ;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return]
[;, }, }, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <]
[}, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?]
[}, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?]
[}, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?]
[}, }, private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?]
[private, int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?, i, *]
[int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?, i, *, (]
[int, indexOf, (, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?, i, *, (]
[(, final, int, i, ,, final, int, j, ), {, return, j, <, i, ?, i, *, (, i, +]
[i, ,, final, int, j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /]
[final, int, j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +]
[j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :]
[j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :]
[j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :]
[j, ), {, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :]
[{, return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *]
[return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (]
[return, j, <, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (]
[<, i, ?, i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +]
[i, *, (, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, ), /]
[(, i, +, 1, ), /, 2, +, j, :, j, *, (, j, +, 1, ), /, 2, +]
[/, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return]
[/, 2, +, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return]
[+, i, ;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, []
[;, }, private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, [, indexOf, (]
[private, StorelessBivariateCovariance, getElement, (, final, int, i, ,, final, int, j, ), {, return, covMatrix, [, indexOf, (, i, ,]
[], ;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {]
[], ;, }, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {]
[}, private, void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {, covMatrix, []
[void, setElement, (, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {, covMatrix, [, indexOf, (]
[(, final, int, i, ,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {, covMatrix, [, indexOf, (, i, ,]
[,, final, int, j, ,, final, StorelessBivariateCovariance, cov, ), {, covMatrix, [, indexOf, (, i, ,, j, ), ], =]
[=, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return]
[=, cov, ;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return]
[;, }, public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return, getElement, (]
[public, double, getCovariance, (, final, int, xIndex, ,, final, int, yIndex, ), throws, NumberIsTooSmallException, {, return, getElement, (, xIndex, ,]
[(, ), ;, }, public, void, increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =]
[(, ), ;, }, public, void, increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =]
[increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =, data, ., length, ;, if, (]
[increment, (, final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =, data, ., length, ;, if, (]
[final, double, [, ], data, ), throws, DimensionMismatchException, {, int, length, =, data, ., length, ;, if, (, length, !=]
[data, ), throws, DimensionMismatchException, {, int, length, =, data, ., length, ;, if, (, length, !=, dimension, ), {, throw]
[DimensionMismatchException, {, int, length, =, data, ., length, ;, if, (, length, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[int, length, =, data, ., length, ;, if, (, length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, length, ,]
[length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =]
[dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;]
[dimension, ), {, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, length, ;]
[new, DimensionMismatchException, (, length, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, length, ;]
[for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[=, 0, ;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <]
[;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;]
[;, i, <, length, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {, getElement, (]
[{, for, (, int, j, =, i, ;, j, <, length, ;, j, ++, ), {, getElement, (, i, ,]
[=, i, ;, j, <, length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (]
[=, i, ;, j, <, length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (]
[;, j, <, length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, []
[length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,]
[length, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,]
[j, ++, ), {, getElement, (, i, ,, j, ), ., increment, (, data, [, i, ], ,, data, []
[[, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (]
[[, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (]
[[, j, ], ), ;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (]
[;, }, }, }, public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=]
[public, void, append, (, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=, dimension, ), {, throw]
[(, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[(, StorelessCovariance, sc, ), throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=, dimension, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, sc, ., dimension, !=, dimension, ), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,]
[dimension, ), {, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =]
[{, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;]
[new, DimensionMismatchException, (, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[(, sc, ., dimension, ,, dimension, ), ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (]
[{, for, (, int, j, =, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (, i, ,]
[=, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (]
[=, i, ;, j, <, dimension, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (]
[<, dimension, ;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (]
[;, j, ++, ), {, getElement, (, i, ,, j, ), ., append, (, sc, ., getElement, (, i, ,]
[i, ,, j, ), ), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return]
[i, ,, j, ), ), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return]
[), ;, }, }, }, @, Override, public, RealMatrix, getCovarianceMatrix, (, ), throws, NumberIsTooSmallException, {, return, MatrixUtils, ., createRealMatrix, (]
[public, double, [, ], [, ], getData, (, ), throws, NumberIsTooSmallException, {, final, double, [, ], [, ], data, =]
[], [, ], getData, (, ), throws, NumberIsTooSmallException, {, final, double, [, ], [, ], data, =, new, double, []
[getData, (, ), throws, NumberIsTooSmallException, {, final, double, [, ], [, ], data, =, new, double, [, dimension, ], []
[[, ], [, ], data, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =]
[[, ], data, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[[, ], data, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;]
[data, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, <, dimension, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, []
[for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, [, i, ], []
[j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =]
[j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =]
[0, ;, j, <, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (]
[j, <, dimension, ;, j, ++, ), {, data, [, i, ], [, j, ], =, getElement, (, i, ,]
[i, ], [, j, ], =, getElement, (, i, ,, j, ), ., getResult, (, ), ;, }, }, return]
[(, ), ;, }, }, return, data, ;, }, @, Override, public, int, getN, (, ), throws, MathUnsupportedOperationException, {, throw]
