[;, private, LightweightMessageFormatter, (, ), {, super, (, null, ), ;, this, ., excerpt, =, LINE, ;, }, public, LightweightMessageFormatter]
[), ;, this, ., excerpt, =, LINE, ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (, source, ,]
[=, LINE, ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (, source, ,, LINE, ), ;, }, public]
[., excerpt, =, LINE, ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (, source, ,, LINE, ), ;]
[;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (, source, ,, LINE, ), ;, }, public, LightweightMessageFormatter, (]
[,, LINE, ), ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;]
[), ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;, Preconditions, .]
[), ;, Preconditions, ., checkNotNull, (, source, ), ;, this, ., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (]
[;, this, ., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return, new, LightweightMessageFormatter, (, ), ;]
[., checkNotNull, (, source, ), ;, this, ., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return]
[), ;, this, ., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return, new, LightweightMessageFormatter, (, )]
[=, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return, new, LightweightMessageFormatter, (, ), ;, }, @, Override, public]
[., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return, new, LightweightMessageFormatter, (, ), ;, }, @]
[;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return, new, LightweightMessageFormatter, (, ), ;, }, @, Override, public, String, formatError]
[;, }, @, Override, public, String, formatError, (, JSError, error, ), {, return, format, (, error, ,, false, ), ;]
[;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return, format, (, warning, ,, true, ), ;]
[,, false, ), ;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return, format, (, warning, ,]
[), ;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return, format, (, warning, ,, true, )]
[;, }, private, String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;]
[,, true, ), ;, }, private, String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource]
[), ;, }, private, String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, )]
[;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,]
[;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {, b, .]
[?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;]
[==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter]
[?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;]
[:, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b]
[;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {, b, .]
[., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new]
[,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;]
[,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, .]
[., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (]
[,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, )]
[., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=]
[), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {, b]
[;, if, (, error, ., sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if]
[), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {]
[!=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0]
[., sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber]
[), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {]
[;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;, b, ., append]
[., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append]
[), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;, b, .]
[., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;]
[), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b]
[>, 0, ), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;]
[., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber]
[), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b]
[;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b]
[., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (]
[), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }]
[;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, .]
[., append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append]
[), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel]
[., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning]
[;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;]
[., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel]
[), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), )]
[;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b, ., append]
[., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append]
[), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b, .]
[), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b]
[?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, .]
[:, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, .]
[., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (]
[), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b]
[., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, )]
[;, b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt]
[., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n']
[), ;, b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (]
[;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt]
[., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null]
[), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (]
[., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, .]
[;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n']
[., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;]
[), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (]
[), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno, =, error]
[!=, null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno]
[), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno, =, error]
[;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt]
[., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (]
[), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (]
[;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0]
[., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals]
[), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&]
[;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (]
[., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=]
[), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =]
[&&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno]
[&&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0]
[., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for]
[), &&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =]
[&&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno]
[<=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i]
[&&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno]
[), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =]
[<=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i]
[), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =]
[., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, )]
[;, i, <, charno, ;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if]
[;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace]
[<, charno, ;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character]
[;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace]
[), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c, )]
[++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c]
[;, if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }, else]
[., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (]
[), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }]
[), {, b, ., append, (, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;, }]
[., isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }, else, {, b, ., append]
[), ), {, b, ., append, (, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;]
[;, }, else, {, b, ., append, (, ' ', ), ;, }, }, b, ., append, (, "^\n", ), ;]
[., append, (, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;, }, }, b, .]
[), ;, }, else, {, b, ., append, (, ' ', ), ;, }, }, b, ., append, (, "^\n", )]
[;, }, }, b, ., append, (, "^\n", ), ;, }, }, return, b, ., toString, (, ), ;, }]
[., append, (, ' ', ), ;, }, }, b, ., append, (, "^\n", ), ;, }, }, return, b, .]
[), ;, }, }, b, ., append, (, "^\n", ), ;, }, }, return, b, ., toString, (, ), ;]
[;, }, }, return, b, ., toString, (, ), ;, }, static, class, LineNumberingFormatter, implements, ExcerptFormatter, {, @, Override, public]
[., append, (, "^\n", ), ;, }, }, return, b, ., toString, (, ), ;, }, static, class, LineNumberingFormatter, implements]
[), ;, }, }, return, b, ., toString, (, ), ;, }, static, class, LineNumberingFormatter, implements, ExcerptFormatter, {, @, Override]
[;, }, static, class, LineNumberingFormatter, implements, ExcerptFormatter, {, @, Override, public, String, formatLine, (, String, line, ,, int, lineNumber, )]
[., toString, (, ), ;, }, static, class, LineNumberingFormatter, implements, ExcerptFormatter, {, @, Override, public, String, formatLine, (, String, line]
[;, }, @, Override, public, String, formatRegion, (, Region, region, ), {, if, (, region, ==, null, ), {, return]
[), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code, ., length]
[==, null, ), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code]
[), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code, ., length]
[;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code, ., length, (, ), ==, 0]
[;, if, (, code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =, Integer]
[., getSourceExcerpt, (, ), ;, if, (, code, ., length, (, ), ==, 0, ), {, return, null, ;, }]
[), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (, region, ., getEndingLineNumber, (, ), ), .]
[==, 0, ), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (, region, ., getEndingLineNumber, (, )]
[., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (, region]
[), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (, region, ., getEndingLineNumber, (, ), ), .]
[;, }, int, numberLength, =, Integer, ., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;]
[;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (, ), *, 2, ), ;, int, start, =, 0]
[., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (, ), *, 2, ), ;]
[., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (]
[), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (, ), *, 2, )]
[., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (]
[;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber]
[), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int]
[*, 2, ), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, )]
[., length, (, ), *, 2, ), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (]
[), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int]
[;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (]
[;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line, ;]
[., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start]
[,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {]
[), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line]
[;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {, line, =]
[., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <, 0]
[), {, String, line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (, start, )]
[>=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (]
[), {, String, line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (, start, )]
[), {, line, =, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0]
[<, 0, ), {, line, =, code, ., substring, (, start, ), ;, if, (, line, ., length, (, )]
[), {, line, =, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0]
[=, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0, ), {, return]
[;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,, builder]
[., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, .]
[), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,]
[), {, return, builder, ., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }]
[==, 0, ), {, return, builder, ., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;]
[., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,, builder, ., length, (, )]
[), {, return, builder, ., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }]
[;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }, builder, ., append]
[., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {, line, =]
[,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {, line, =, code, ., substring, (]
[), ;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }, builder, .]
[-, 1, ), ;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }]
[., length, (, ), -, 1, ), ;, }, }, else, {, line, =, code, ., substring, (, start, ,]
[), ;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }, builder, .]
[=, code, ., substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces]
[;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, )]
[., substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength]
[,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString]
[), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber]
[;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append]
[., append, (, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (]
[), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, .]
[;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber]
[-, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (]
[;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber]
[., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder]
[., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,]
[), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;]
[;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0]
[., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;]
[), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <]
[., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (]
[,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if]
[), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end]
[;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (, line]
[., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {]
[), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (]
[;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;]
[., append, (, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;]
[), ;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =, -, 1]
[), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append]
[<, 0, ), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder]
[), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append]
[;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (]
[., append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, )]
[), ;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append]
[=, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', )]
[;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =]
[;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =]
[;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (]
[., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end]
[), ;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf]
[;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++]
[., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,]
[), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber]
[=, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }]
[;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return, builder, .]
[+, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return]
[;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return, builder, .]
[=, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return, builder, ., toString, (]
[;, lineNumber, ++, ;, }, }, return, builder, ., toString, (, ), ;, }, }, }]
[., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return, builder, ., toString, (, ), ;]
[,, start, ), ;, lineNumber, ++, ;, }, }, return, builder, ., toString, (, ), ;, }, }, }]
[), ;, lineNumber, ++, ;, }, }, return, builder, ., toString, (, ), ;, }, }, }]
[;, }, }, return, builder, ., toString, (, ), ;, }, }, }]
[++, ;, }, }, return, builder, ., toString, (, ), ;, }, }, }]
[;, }, }, }]
[., toString, (, ), ;, }, }, }]
