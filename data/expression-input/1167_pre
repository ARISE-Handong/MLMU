[time, ., DurationField, ;, import, org, ., joda, ., time, ., ReadablePartial, ;, public, final, class, ZeroIsMaxDateTimeField, extends, DecoratedDateTimeField, {]
[;, import, org, ., joda, ., time, ., ReadablePartial, ;, public, final, class, ZeroIsMaxDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[ReadablePartial, ;, public, final, class, ZeroIsMaxDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[private, static, final, long, serialVersionUID, =, 961749798233026866L, ;, public, ZeroIsMaxDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (]
[final, long, serialVersionUID, =, 961749798233026866L, ;, public, ZeroIsMaxDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, field, ,]
[;, public, ZeroIsMaxDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, field, ,, type, ), ;, if, (]
[;, public, ZeroIsMaxDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, field, ,, type, ), ;, if, (]
[;, public, ZeroIsMaxDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ), {, super, (, field, ,, type, ), ;, if, (]
[,, DateTimeFieldType, type, ), {, super, (, field, ,, type, ), ;, if, (, field, ., getMinimumValue, (, ), !=]
[{, super, (, field, ,, type, ), ;, if, (, field, ., getMinimumValue, (, ), !=, 0, ), {, throw]
[field, ,, type, ), ;, if, (, field, ., getMinimumValue, (, ), !=, 0, ), {, throw, new, IllegalArgumentException, (]
[throw, new, IllegalArgumentException, (, "Wrapped field's minumum value must be zero", ), ;, }, }, public, int, get, (, long, instant, ), {, int, value, =]
[throw, new, IllegalArgumentException, (, "Wrapped field's minumum value must be zero", ), ;, }, }, public, int, get, (, long, instant, ), {, int, value, =]
[;, }, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, ==]
[{, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, ==, 0, ), {]
[value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, ==, 0, ), {, value, =]
[get, (, instant, ), ;, if, (, value, ==, 0, ), {, value, =, getMaximumValue, (, ), ;, }, return]
[(, ), ;, }, return, value, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[(, ), ;, }, return, value, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, int, value, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, long, value, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, return]
[;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[public, long, addWrapField, (, long, instant, ,, int, value, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, return]
[[, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, return]
[,, int, fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[fieldIndex, ,, int, [, ], values, ,, int, valueToAdd, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,]
[int, [, ], values, ,, int, valueToAdd, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,]
[], values, ,, int, valueToAdd, ), {, return, getWrappedField, (, ), ., addWrapField, (, instant, ,, fieldIndex, ,, values, ,]
[fieldIndex, ,, values, ,, valueToAdd, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[fieldIndex, ,, values, ,, valueToAdd, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (, minuendInstant, ,]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,]
[minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, int, max, =]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, int, max, =, getMaximumValue, (, ), ;]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, int, max, =, getMaximumValue, (, ), ;]
[set, (, long, instant, ,, int, value, ), {, int, max, =, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (]
[long, instant, ,, int, value, ), {, int, max, =, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,]
[,, int, value, ), {, int, max, =, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[value, ), {, int, max, =, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 1, ,]
[=, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 1, ,, max, ), ;, if, (]
[=, getMaximumValue, (, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 1, ,, max, ), ;, if, (]
[(, ), ;, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 1, ,, max, ), ;, if, (, value, ==]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, 1, ,, max, ), ;, if, (, value, ==, max, ), {]
[verifyValueBounds, (, this, ,, value, ,, 1, ,, max, ), ;, if, (, value, ==, max, ), {, value, =]
[value, ,, 1, ,, max, ), ;, if, (, value, ==, max, ), {, value, =, 0, ;, }, return]
[value, ,, 1, ,, max, ), ;, if, (, value, ==, max, ), {, value, =, 0, ;, }, return]
[;, if, (, value, ==, max, ), {, value, =, 0, ;, }, return, getWrappedField, (, ), ., set, (]
[(, value, ==, max, ), {, value, =, 0, ;, }, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, ), ., set, (, instant, ,, value, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[(, ), ., set, (, instant, ,, value, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return]
[,, value, ), ;, }, public, boolean, isLeap, (, long, instant, ), {, return, getWrappedField, (, ), ., isLeap, (]
[return, getWrappedField, (, ), ., isLeap, (, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., isLeap, (, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, return, getWrappedField, (, ), ., getLeapAmount, (]
[), {, return, getWrappedField, (, ), ., getLeapAmount, (, instant, ), ;, }, public, DurationField, getLeapDurationField, (, ), {, return]
[), {, return, getWrappedField, (, ), ., getLeapAmount, (, instant, ), ;, }, public, DurationField, getLeapDurationField, (, ), {, return]
[(, ), {, return, getWrappedField, (, ), ., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[}, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMinimumValue, (, long, instant, ), {, return]
[int, getMinimumValue, (, long, instant, ), {, return, 1, ;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ), {, return]
[), {, return, 1, ;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[ReadablePartial, instant, ,, int, [, ], values, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[ReadablePartial, instant, ,, int, [, ], values, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[ReadablePartial, instant, ,, int, [, ], values, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[{, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, ), +]
[getWrappedField, (, ), ., getMaximumValue, (, ), +, 1, ;, }, public, int, getMaximumValue, (, long, instant, ), {, return]
[getWrappedField, (, ), ., getMaximumValue, (, ), +, 1, ;, }, public, int, getMaximumValue, (, long, instant, ), {, return]
[getWrappedField, (, ), ., getMaximumValue, (, ), +, 1, ;, }, public, int, getMaximumValue, (, long, instant, ), {, return]
[), +, 1, ;, }, public, int, getMaximumValue, (, long, instant, ), {, return, getWrappedField, (, ), ., getMaximumValue, (]
[;, }, public, int, getMaximumValue, (, long, instant, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, instant, ), +]
[(, ), ., getMaximumValue, (, instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return]
[(, ), ., getMaximumValue, (, instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return]
[(, ), ., getMaximumValue, (, instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return]
[), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return, getWrappedField, (, ), ., getMaximumValue, (]
[;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, instant, ), +]
[instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[instant, ), +, 1, ;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return]
[public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getWrappedField, (, ), ., getMaximumValue, (]
[getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, instant, ,]
[instant, ,, int, [, ], values, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, instant, ,, values, ), +]
[., getMaximumValue, (, instant, ,, values, ), +, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[., getMaximumValue, (, instant, ,, values, ), +, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[), +, 1, ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfFloor, (]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfFloor, (, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfCeiling, (]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfCeiling, (, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, getWrappedField, (, ), ., roundHalfEven, (]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[return, getWrappedField, (, ), ., roundHalfEven, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (]
