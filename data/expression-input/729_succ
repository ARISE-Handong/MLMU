[=, u, ;, this, ., v, =, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,, v, ), ;]
[., u, =, u, ;, this, ., v, =, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,, v]
[;, this, ., v, =, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,, v, ), ;, }, public]
[=, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,, v, ), ;, }, public, Vector2D, [, ], []
[., v, =, v, ;, w, =, Vector3D, ., crossProduct, (, u, ,, v, ), ;, }, public, Vector2D, []
[;, w, =, Vector3D, ., crossProduct, (, u, ,, v, ), ;, }, public, Vector2D, [, ], [, ], getOutline]
[=, Vector3D, ., crossProduct, (, u, ,, v, ), ;, }, public, Vector2D, [, ], [, ], getOutline, (, final]
[;, }, public, Vector2D, [, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =, new]
[., crossProduct, (, u, ,, v, ), ;, }, public, Vector2D, [, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet]
[,, v, ), ;, }, public, Vector2D, [, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector]
[), ;, }, public, Vector2D, [, ], [, ], getOutline, (, final, PolyhedronsSet, polyhedronsSet, ), {, final, BoundaryProjector, projector, =]
[;, polyhedronsSet, ., getTree, (, true, ), ., visit, (, projector, ), ;, final, PolygonsSet, projected, =, projector, ., getProjected]
[;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, [, ], [, ], outline, =, projected]
[., visit, (, projector, ), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, [, ]]
[., getTree, (, true, ), ., visit, (, projector, ), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, )]
[), ., visit, (, projector, ), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, []
[), ;, final, PolygonsSet, projected, =, projector, ., getProjected, (, ), ;, final, Vector2D, [, ], [, ], outline, =]
[;, final, Vector2D, [, ], [, ], outline, =, projected, ., getVertices, (, ), ;, for, (, int, i, =]
[., getProjected, (, ), ;, final, Vector2D, [, ], [, ], outline, =, projected, ., getVertices, (, ), ;, for]
[;, for, (, int, i, =, 0, ;, i, <, outline, ., length, ;, ++, i, ), {, final, Vector2D]
[., getVertices, (, ), ;, for, (, int, i, =, 0, ;, i, <, outline, ., length, ;, ++, i]
[;, i, <, outline, ., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i]
[;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =, rawLoop]
[<, outline, ., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;]
[;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =, rawLoop]
[., length, ;, ++, i, ), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end]
[), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =, rawLoop, ., length, ;]
[), {, final, Vector2D, [, ], rawLoop, =, outline, [, i, ], ;, int, end, =, rawLoop, ., length, ;]
[;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <, end, ), {]
[[, i, ], ;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <]
[], ;, int, end, =, rawLoop, ., length, ;, int, j, =, 0, ;, while, (, j, <, end, )]
[;, int, j, =, 0, ;, while, (, j, <, end, ), {, if, (, pointIsBetween, (, rawLoop, ,, end]
[., length, ;, int, j, =, 0, ;, while, (, j, <, end, ), {, if, (, pointIsBetween, (, rawLoop]
[;, while, (, j, <, end, ), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {]
[), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j]
[<, end, ), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k]
[), {, if, (, pointIsBetween, (, rawLoop, ,, end, ,, j, ), ), {, for, (, int, k, =, j]
[), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++, k, )]
[,, end, ,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1]
[,, j, ), ), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;]
[), ), {, for, (, int, k, =, j, ;, k, <, (, end, -, 1, ), ;, ++, k]
[;, k, <, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, []
[;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end]
[<, (, end, -, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +]
[;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end]
[), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --]
[-, 1, ), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;]
[), ;, ++, k, ), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --]
[), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else]
[), {, rawLoop, [, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else]
[=, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }]
[[, k, ], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j]
[], =, rawLoop, [, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }]
[;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length]
[[, k, +, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (]
[], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, .]
[+, 1, ], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=]
[], ;, }, --, end, ;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, .]
[;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, []
[;, }, else, {, ++, j, ;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, []
[;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, []
[;, }, }, if, (, end, !=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, []
[), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0]
[!=, rawLoop, ., length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy]
[), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0]
[., length, ), {, outline, [, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop]
[=, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,]
[[, i, ], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, []
[], =, new, Vector2D, [, end, ], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ]]
[;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,, 0, ,, end, ), ;, }]
[], ;, System, ., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,, 0, ,, end, ), ;]
[;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final, Vector2D, [, ], loop, ,, final, int, n]
[., arraycopy, (, rawLoop, ,, 0, ,, outline, [, i, ], ,, 0, ,, end, ), ;, }, }, return]
[,, 0, ,, outline, [, i, ], ,, 0, ,, end, ), ;, }, }, return, outline, ;, }, private]
[,, outline, [, i, ], ,, 0, ,, end, ), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween]
[,, 0, ,, end, ), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final, Vector2D, [, ]]
[[, i, ], ,, 0, ,, end, ), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final]
[], ,, 0, ,, end, ), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final, Vector2D, []
[,, end, ), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final, Vector2D, [, ], loop, ,]
[), ;, }, }, return, outline, ;, }, private, boolean, pointIsBetween, (, final, Vector2D, [, ], loop, ,, final, int]
[;, }, private, boolean, pointIsBetween, (, final, Vector2D, [, ], loop, ,, final, int, n, ,, final, int, i, )]
[;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +, 1]
[[, (, i, +, n, -, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ]]
[], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +]
[%, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (]
[), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, []
[-, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =]
[+, n, -, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D]
[-, 1, ), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =]
[), %, n, ], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, []
[], ;, final, Vector2D, current, =, loop, [, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +]
[;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =]
[[, i, ], ;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final]
[], ;, final, Vector2D, next, =, loop, [, (, i, +, 1, ), %, n, ], ;, final, double, dx1]
[;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1]
[[, (, i, +, 1, ), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -]
[], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double]
[%, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;]
[), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, )]
[+, 1, ), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX]
[), %, n, ], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, )]
[], ;, final, double, dx1, =, current, ., getX, (, ), -, previous, ., getX, (, ), ;, final, double]
[;, final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2]
[-, previous, ., getX, (, ), ;, final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY]
[., getX, (, ), -, previous, ., getX, (, ), ;, final, double, dy1, =, current, ., getY, (, )]
[;, final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2]
[., getX, (, ), ;, final, double, dy1, =, current, ., getY, (, ), -, previous, ., getY, (, )]
[;, final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2]
[-, previous, ., getY, (, ), ;, final, double, dx2, =, next, ., getX, (, ), -, current, ., getX]
[., getY, (, ), -, previous, ., getY, (, ), ;, final, double, dx2, =, next, ., getX, (, )]
[;, final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2]
[., getY, (, ), ;, final, double, dx2, =, next, ., getX, (, ), -, current, ., getX, (, )]
[;, final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross]
[-, current, ., getX, (, ), ;, final, double, dy2, =, next, ., getY, (, ), -, current, ., getY]
[., getX, (, ), -, current, ., getX, (, ), ;, final, double, dy2, =, next, ., getY, (, )]
[;, final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross]
[., getX, (, ), ;, final, double, dy2, =, next, ., getY, (, ), -, current, ., getY, (, )]
[;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2]
[-, current, ., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final]
[., getY, (, ), -, current, ., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2]
[;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2]
[., getY, (, ), ;, final, double, cross, =, dx1, *, dy2, -, dx2, *, dy1, ;, final, double, dot]
[;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt]
[-, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2]
[*, dy2, -, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final]
[-, dx2, *, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2]
[;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt]
[*, dy1, ;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath]
[;, final, double, dot, =, dx1, *, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[+, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *]
[*, dx2, +, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +]
[+, dy1, *, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[*, dy2, ;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, )]
[;, final, double, d1d2, =, FastMath, ., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (]
[;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot, >=]
[., sqrt, (, (, dx1, *, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *]
[), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot]
[*, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, )]
[), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross]
[+, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath]
[*, dx1, +, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return]
[+, dy1, *, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath]
[), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross]
[*, dy1, ), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs]
[), *, (, dx2, *, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross]
[), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot]
[), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (]
[+, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2]
[*, dx2, +, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6]
[+, dy2, *, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2]
[), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (]
[*, dy2, ), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), )]
[), ), ;, return, (, FastMath, ., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (]
[;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {]
[&&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected]
[), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet]
[<=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor]
[., abs, (, cross, ), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot, >=, 0.0, ), ;, }]
[), <=, (, 1.0e-6, *, d1d2, ), ), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements]
[), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet]
[), ), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private]
[*, d1d2, ), ), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >]
[), ), &&, (, dot, >=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private]
[;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, ), {]
[), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, )]
[>=, 0.0, ), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector]
[), ;, }, private, class, BoundaryProjector, implements, BSPTreeVisitor, <, Euclidean3D, >, {, private, PolygonsSet, projected, ;, public, BoundaryProjector, (, )]
[=, new, PolygonsSet, (, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., FALSE, ), ), ;, }, public, Order, visitOrder]
[;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return, Order, ., MINUS_SUB_PLUS, ;, }]
[), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return, Order, ., MINUS_SUB_PLUS, ;]
[), ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return, Order, ., MINUS_SUB_PLUS]
[., FALSE, ), ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean3D, >, node, ), {, return, Order]
[;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, @, SuppressWarnings, (, "unchecked", ), final]
[., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, @, SuppressWarnings, (, "unchecked"]
[final, BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;, if]
[), final, BoundaryAttribute, <, Euclidean3D, >, attribute, =, (, BoundaryAttribute, <, Euclidean3D, >, ), node, ., getAttribute, (, ), ;]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, .]
[), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (]
[!=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, .]
[., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }]
[), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (]
[;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, )]
[,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, .]
[., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {]
[), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (]
[), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final]
[!=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode]
[., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }]
[), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final]
[;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, }, private, void, addContribution, (]
[,, true, ), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, }, private]
[., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean3D, >, node]
[), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean3D, >, node, ), {, }, private, void, addContribution]
[final, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, ), facet, ;, final]
[), final, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, absFacet, =, (, AbstractSubHyperplane, <, Euclidean3D, ,, Euclidean2D, >, ), facet, ;]
[;, final, Plane, plane, =, (, Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =, plane, .]
[;, final, Plane, plane, =, (, Plane, ), facet, ., getHyperplane, (, ), ;, final, double, scal, =, plane, .]
[;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (, FastMath, .]
[;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (, FastMath, .]
[., getHyperplane, (, ), ;, final, double, scal, =, plane, ., getNormal, (, ), ., dotProduct, (, w, ), ;]
[;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =]
[., dotProduct, (, w, ), ;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, []
[., getNormal, (, ), ., dotProduct, (, w, ), ;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3]
[), ;, if, (, FastMath, ., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices]
[), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), .]
[>, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, )]
[., abs, (, scal, ), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, )]
[), >, 1.0e-3, ), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (]
[), {, Vector2D, [, ], [, ], vertices, =, (, (, PolygonsSet, ), absFacet, ., getRemainingRegion, (, ), ), .]
[;, if, (, (, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =]
[., getVertices, (, ), ;, if, (, (, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, [, ]]
[), ., getVertices, (, ), ;, if, (, (, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, []
[), ., getVertices, (, ), ;, if, (, (, scal, <, 0, ), ^, reversed, ), {, final, Vector2D, []
[., getRemainingRegion, (, ), ), ., getVertices, (, ), ;, if, (, (, scal, <, 0, ), ^, reversed, )]
[), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ], [, ], ;]
[^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ], []
[), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ]]
[<, 0, ), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, .]
[), ^, reversed, ), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ]]
[), {, final, Vector2D, [, ], [, ], newVertices, =, new, Vector2D, [, vertices, ., length, ], [, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, vertices, ., length, ;, ++, i, ), {, final, Vector2D]
[], [, ], ;, for, (, int, i, =, 0, ;, i, <, vertices, ., length, ;, ++, i, )]
[., length, ], [, ], ;, for, (, int, i, =, 0, ;, i, <, vertices, ., length, ;, ++]
[;, i, <, vertices, ., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i]
[;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ]]
[<, vertices, ., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;]
[;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ]]
[., length, ;, ++, i, ), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D]
[), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ], newLoop, =, new]
[), {, final, Vector2D, [, ], loop, =, vertices, [, i, ], ;, final, Vector2D, [, ], newLoop, =, new]
[;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, [, 0]
[[, i, ], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (]
[], ;, final, Vector2D, [, ], newLoop, =, new, Vector2D, [, loop, ., length, ], ;, if, (, loop, []
[;, if, (, loop, [, 0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (]
[], ;, if, (, loop, [, 0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for]
[., length, ], ;, if, (, loop, [, 0, ], ==, null, ), {, newLoop, [, 0, ], =, null]
[), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, .]
[==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <]
[[, 0, ], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1]
[], ==, null, ), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j]
[), {, newLoop, [, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, .]
[=, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {]
[[, 0, ], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++]
[], =, null, ;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, )]
[;, for, (, int, j, =, 1, ;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, []
[;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, .]
[;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, j, ], ;, }]
[<, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -]
[;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, j, ], ;, }]
[., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, j, ]]
[), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, j, ], ;, }, }, else, {]
[), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, j, ], ;, }, }, else, {]
[=, loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0]
[[, j, ], =, loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int]
[], =, loop, [, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =]
[;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++, j]
[[, loop, ., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j]
[], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++]
[-, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length]
[., length, -, j, ], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop]
[], ;, }, }, else, {, for, (, int, j, =, 0, ;, j, <, loop, ., length, ;, ++]
[;, j, <, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, .]
[;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1]
[<, loop, ., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -]
[;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1]
[., length, ;, ++, j, ), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j]
[), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;]
[), {, newLoop, [, j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;]
[=, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ]]
[[, j, ], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices]
[], =, loop, [, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i]
[;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane]
[[, loop, ., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop]
[], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <]
[-, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =]
[., length, -, (, j, +, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }]
[], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <]
[), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList]
[+, 1, ), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }]
[), ], ;, }, }, newVertices, [, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList]
[=, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new]
[[, i, ], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >]
[], =, newLoop, ;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =]
[;, }, vertices, =, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new, ArrayList, <]
[=, newVertices, ;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new, ArrayList, <, SubHyperplane, <, Euclidean2D]
[;, }, final, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >, edges, =, new, ArrayList, <, SubHyperplane, <, Euclidean2D, >, >]
[;, for, (, Vector2D, [, ], loop, :, vertices, ), {, final, boolean, closed, =, loop, [, 0, ], !=]
[), {, final, boolean, closed, =, loop, [, 0, ], !=, null, ;, int, previous, =, closed, ?, (, loop]
[;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane]
[!=, null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D]
[[, 0, ], !=, null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1]
[], !=, null, ;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D]
[;, int, previous, =, closed, ?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane]
[;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +]
[?, (, loop, ., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, []
[:, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (]
[), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =]
[-, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int]
[., length, -, 1, ), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], )]
[), :, 1, ;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =]
[;, Vector3D, previous3D, =, plane, ., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +]
[;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (]
[., toSpace, (, loop, [, previous, ], ), ;, int, current, =, (, previous, +, 1, ), %, loop, .]
[), ;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D]
[[, previous, ], ), ;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint]
[], ), ;, int, current, =, (, previous, +, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new]
[;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, )]
[%, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, .]
[), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D]
[+, 1, ), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, )]
[), %, loop, ., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D]
[;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, )]
[., length, ;, Vector2D, pPoint, =, new, Vector2D, (, previous3D, ., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (]
[;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, []
[,, previous3D, ., dotProduct, (, v, ), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D]
[., dotProduct, (, u, ), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (, current, <, loop, .]
[), ,, previous3D, ., dotProduct, (, v, ), ), ;, while, (, current, <, loop, ., length, ), {, final]
[), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop]
[., dotProduct, (, v, ), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =]
[), ), ;, while, (, current, <, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (]
[), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =]
[<, loop, ., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;]
[), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =]
[., length, ), {, final, Vector3D, current3D, =, plane, ., toSpace, (, loop, [, current, ], ), ;, final, Vector2D]
[;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,, current3D, ., dotProduct, (, v]
[., toSpace, (, loop, [, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (]
[), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,, current3D, ., dotProduct, (]
[[, current, ], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,, current3D]
[], ), ;, final, Vector2D, cPoint, =, new, Vector2D, (, current3D, ., dotProduct, (, u, ), ,, current3D, ., dotProduct]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line, =, new]
[,, current3D, ., dotProduct, (, v, ), ), ;, final, org, ., apache, ., commons, ., math3, ., geometry, .]
[., dotProduct, (, u, ), ,, current3D, ., dotProduct, (, v, ), ), ;, final, org, ., apache, ., commons]
[), ,, current3D, ., dotProduct, (, v, ), ), ;, final, org, ., apache, ., commons, ., math3, ., geometry]
[), ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line, =]
[., dotProduct, (, v, ), ), ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, .]
[), ), ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, line]
[;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=]
[,, cPoint, ), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||]
[), ;, SubHyperplane, <, Euclidean2D, >, edge, =, line, ., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous]
[;, if, (, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (]
[., wholeHyperplane, (, ), ;, if, (, closed, ||, (, previous, !=, 1, ), ), {, final, double, angle, =]
[), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org]
[||, (, previous, !=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org]
[), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final]
[!=, 1, ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI]
[), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[+, 0.5, *, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, .]
[., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, .]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[*, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, .]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l]
[;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (]
[,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (]
[), ;, edge, =, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||]
[=, edge, ., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=]
[;, }, if, (, closed, ||, (, current, !=, (, loop, ., length, -, 1, ), ), ), {, final]
[., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (, loop, ., length, -, 1, )]
[., split, (, l, ), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (, loop]
[), ., getPlus, (, ), ;, }, if, (, closed, ||, (, current, !=, (, loop, ., length, -, 1]
[), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org]
[||, (, current, !=, (, loop, ., length, -, 1, ), ), ), {, final, double, angle, =, line, .]
[), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org]
[), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final]
[!=, (, loop, ., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, )]
[), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final]
[), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;]
[-, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, .]
[., length, -, 1, ), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *]
[), ), ), {, final, double, angle, =, line, ., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[+, 0.5, *, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, .]
[., getAngle, (, ), +, 0.5, *, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, .]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[*, FastMath, ., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, .]
[;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l, =, new]
[., PI, ;, final, org, ., apache, ., commons, ., math3, ., geometry, ., euclidean, ., twod, ., Line, l]
[;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge]
[,, angle, ), ;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, .]
[), ;, edge, =, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (]
[=, edge, ., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;]
[;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =]
[., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =]
[., split, (, l, ), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =]
[), ., getMinus, (, ), ;, }, edges, ., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D]
[;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =]
[., add, (, edge, ), ;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }]
[), ;, previous, =, current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet]
[=, current, ++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet]
[;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, )]
[++, ;, previous3D, =, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges]
[=, current3D, ;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected]
[;, pPoint, =, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =, (]
[=, cPoint, ;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =, (, PolygonsSet, )]
[;, }, }, final, PolygonsSet, projectedFacet, =, new, PolygonsSet, (, edges, ), ;, projected, =, (, PolygonsSet, ), new, RegionFactory]
[;, projected, =, (, PolygonsSet, ), new, RegionFactory, <, Euclidean2D, >, (, ), ., union, (, projected, ,, projectedFacet, )]
[), ;, projected, =, (, PolygonsSet, ), new, RegionFactory, <, Euclidean2D, >, (, ), ., union, (, projected, ,, projectedFacet]
[=, (, PolygonsSet, ), new, RegionFactory, <, Euclidean2D, >, (, ), ., union, (, projected, ,, projectedFacet, ), ;, }]
[;, }, }, public, PolygonsSet, getProjected, (, ), {, return, projected, ;, }, }, }]
[;, }, }, public, PolygonsSet, getProjected, (, ), {, return, projected, ;, }, }, }]
[., union, (, projected, ,, projectedFacet, ), ;, }, }, public, PolygonsSet, getProjected, (, ), {, return, projected, ;, }]
[,, projectedFacet, ), ;, }, }, public, PolygonsSet, getProjected, (, ), {, return, projected, ;, }, }, }]
[), ;, }, }, public, PolygonsSet, getProjected, (, ), {, return, projected, ;, }, }, }]
[;, }, }, }]
