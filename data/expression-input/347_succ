[;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =, ImmutableSet, .]
[;, private, static, final, Set, <, String, >, SPECIAL_EXTERNS, =, ImmutableSet, ., of, (, WINDOW, ,, "eval", ,, "arguments", )]
[;, private, final, AbstractCompiler, compiler, ;, private, final, String, globalSymbolNamespace, ;, private, final, boolean, addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler, compiler]
[., of, (, WINDOW, ,, "eval", ,, "arguments", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, globalSymbolNamespace, ;]
[,, "eval", ,, "arguments", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, globalSymbolNamespace, ;, private, final, boolean, addExtern]
[,, "arguments", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, globalSymbolNamespace, ;, private, final, boolean, addExtern, ;, RescopeGlobalSymbols]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, String, globalSymbolNamespace, ;, private, final, boolean, addExtern, ;, RescopeGlobalSymbols, (, AbstractCompiler]
[=, compiler, ;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler]
[., compiler, =, compiler, ;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (]
[;, this, ., globalSymbolNamespace, =, globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String]
[=, globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this]
[., globalSymbolNamespace, =, globalSymbolNamespace, ;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, )]
[;, this, ., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler]
[=, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler, ,, globalSymbolNamespace, ,, true]
[., addExtern, =, addExtern, ;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler, ,, globalSymbolNamespace]
[;, }, RescopeGlobalSymbols, (, AbstractCompiler, compiler, ,, String, globalSymbolNamespace, ), {, this, (, compiler, ,, globalSymbolNamespace, ,, true, ), ;]
[,, globalSymbolNamespace, ,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (]
[,, true, ), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (, IR, .]
[), ;, }, private, void, addExternForGlobalSymbolNamespace, (, ), {, Node, varNode, =, IR, ., var, (, IR, ., name, (]
[;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (]
[., var, (, IR, ., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", )]
[), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack]
[., name, (, globalSymbolNamespace, ), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot]
[), ), ;, CompilerInput, input, =, compiler, ., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), .]
[;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., newExternInput, (, "{RescopeGlobalSymbolsNamespaceVar}", ), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;, compiler, .]
[), ;, input, ., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., addChildrenToBack, (, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node]
[., getAstRoot, (, compiler, ), ., addChildrenToBack, (, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, @, Override]
[), ., addChildrenToBack, (, varNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, addExtern, ), {]
[., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[), {, addExternForGlobalSymbolNamespace, (, ), ;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), )]
[;, }, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (]
[,, new, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (]
[,, new, RewriteScopeCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), ), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends]
[., traverse, (, compiler, ,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (]
[,, new, RemoveGlobalVarCallback, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), ), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback]
[;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), ), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends, AbstractShallowStatementCallback, {]
[,, root, ,, new, MakeExternsReferenceWindowExplicitly, (, ), ), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void]
[,, new, MakeExternsReferenceWindowExplicitly, (, ), ), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, RewriteGlobalFunctionStatementsToVarAssignmentsCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString, (]
[., isFunctionDeclaration, (, n, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;, n, ., getFirstChild]
[), ), {, String, name, =, NodeUtil, ., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString]
[;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (, n]
[., getFunctionName, (, n, ), ;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =]
[), ;, n, ., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (]
[;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =]
[., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (]
[., getFirstChild, (, ), ., setString, (, "", ), ;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;]
[), ;, Node, prev, =, parent, ., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var]
[;, n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if]
[., getChildBefore, (, n, ), ;, n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name]
[), ;, n, ., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;]
[;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==, null, ), {]
[., detachFromParent, (, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, name, ,, n, ), ;, if, (, prev]
[;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, .]
[., newVarNode, (, name, ,, n, ), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var]
[,, n, ), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else]
[), ;, if, (, prev, ==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent]
[), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, )]
[==, null, ), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,]
[), {, parent, ., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, )]
[;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., addChildToFront, (, var, ), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, ), ;, }, compiler]
[), ;, }, else, {, parent, ., addChildAfter, (, var, ,, prev, ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, RewriteScopeCallback, extends, AbstractPostOrderCallback, {, @, Override, public]
[., addChildAfter, (, var, ,, prev, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class]
[,, prev, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, RewriteScopeCallback, extends, AbstractPostOrderCallback, {]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, class, RewriteScopeCallback, extends, AbstractPostOrderCallback, {, @, Override]
[;, }, }, }, private, class, RewriteScopeCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., reportCodeChange, (, ), ;, }, }, }, private, class, RewriteScopeCallback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, parent, ., isFunction, (]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, parent, ., isFunction, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[;, if, (, parent, ., isFunction, (, ), &&, name, ., length, (, ), ==, 0, ), {, return, ;]
[., getString, (, ), ;, if, (, parent, ., isFunction, (, ), &&, name, ., length, (, ), ==, 0]
[), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[&&, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, .]
[., isFunction, (, ), &&, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var]
[), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (]
[), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {]
[., getVar, (, name, ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, .]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, ==, null, ), {, return, ;, }]
[), ;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, ., isExtern, (, ), )]
[), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (, !]
[==, null, ), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if]
[), {, return, ;, }, if, (, var, ., isExtern, (, ), ), {, return, ;, }, if, (, !]
[), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace]
[., isExtern, (, ), ), {, return, ;, }, if, (, !, var, ., isExtern, (, ), &&, (, name]
[), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[&&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, )]
[&&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, )]
[., isExtern, (, ), &&, (, name, ., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX]
[), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (]
[), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if]
[||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +]
[., equals, (, globalSymbolNamespace, ), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n]
[), ||, name, ., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name]
[), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if]
[==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., indexOf, (, globalSymbolNamespace, +, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, )]
[), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, )]
[+, DISAMBIGUATION_SUFFIX, ), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange]
[), ==, 0, ), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, )]
[), ), {, n, ., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if]
[;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return, ;]
[., setString, (, name, +, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, var, .]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return]
[+, DISAMBIGUATION_SUFFIX, ), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, var, ., isGlobal, (, ), )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return]
[;, }, if, (, !, var, ., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, .]
[., reportCodeChange, (, ), ;, }, if, (, !, var, ., isGlobal, (, ), ), {, return, ;, }, Node]
[), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&]
[), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&]
[., isGlobal, (, ), ), {, return, ;, }, Node, nameNode, =, var, ., getNameNode, (, ), ;, if, (]
[;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, )]
[., getNameNode, (, ), ;, if, (, nameNode, !=, null, &&, nameNode, ., getParent, (, ), !=, null, &&, nameNode]
[), {, return, ;, }, replaceSymbol, (, n, ,, name, ), ;, }, private, void, replaceSymbol, (, Node, node, ,]
[&&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,, name]
[&&, nameNode, ., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {]
[!=, null, &&, nameNode, ., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, )]
[&&, nameNode, ., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {]
[&&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,, name]
[!=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n]
[., getParent, (, ), !=, null, &&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;]
[&&, nameNode, ., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,, name]
[), {, return, ;, }, replaceSymbol, (, n, ,, name, ), ;, }, private, void, replaceSymbol, (, Node, node, ,]
[., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,, name, ), ;, }, private, void, replaceSymbol]
[., getParent, (, ), ., isCatch, (, ), ), {, return, ;, }, replaceSymbol, (, n, ,, name, ), ;]
[;, }, private, void, replaceSymbol, (, Node, node, ,, String, name, ), {, Node, parent, =, node, ., getParent, (]
[,, name, ), ;, }, private, void, replaceSymbol, (, Node, node, ,, String, name, ), {, Node, parent, =, node]
[), ;, }, private, void, replaceSymbol, (, Node, node, ,, String, name, ), {, Node, parent, =, node, ., getParent]
[;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,]
[., getParent, (, ), ;, Node, replacement, =, IR, ., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref]
[;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =]
[., getprop, (, IR, ., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,, IR, ., string, (, name]
[,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, )]
[., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;, replacement]
[., name, (, globalSymbolNamespace, ), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (]
[), ., srcref, (, node, ), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;]
[), ,, IR, ., string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node]
[), ;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign]
[., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (]
[., string, (, name, ), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, ), ;, if]
[), ., srcref, (, node, ), ), ;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren]
[), ), ;, replacement, ., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node]
[;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,, node]
[., srcref, (, node, ), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, .]
[), ;, if, (, node, ., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,]
[), {, Node, assign, =, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;, parent, .]
[., hasChildren, (, ), ), {, Node, assign, =, IR, ., assign, (, replacement, ,, node, ., removeFirstChild, (, )]
[;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement]
[., assign, (, replacement, ,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,, assign, )]
[,, node, ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {]
[), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,]
[., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, .]
[;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., replaceChild, (, node, ,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;]
[,, assign, ), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;, }, compiler, ., reportCodeChange]
[), ;, }, else, {, parent, ., replaceChild, (, node, ,, replacement, ), ;, }, compiler, ., reportCodeChange, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, RemoveGlobalVarCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void]
[., replaceChild, (, node, ,, replacement, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, RemoveGlobalVarCallback]
[,, replacement, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, RemoveGlobalVarCallback, extends, AbstractShallowStatementCallback, {, @]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, class, RemoveGlobalVarCallback, extends, AbstractShallowStatementCallback, {, @, Override, public]
[;, }, }, private, class, RemoveGlobalVarCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., reportCodeChange, (, ), ;, }, }, private, class, RemoveGlobalVarCallback, extends, AbstractShallowStatementCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, return, ;, }, List, <, Node, >, commas, =, new, ArrayList, <, Node, >, (, ), ;, List]
[), {, return, ;, }, List, <, Node, >, commas, =, new, ArrayList, <, Node, >, (, ), ;, List]
[., isVar, (, ), ), {, return, ;, }, List, <, Node, >, commas, =, new, ArrayList, <, Node, >]
[;, List, <, Node, >, interestingChildren, =, new, ArrayList, <, Node, >, (, ), ;, for, (, Node, c, :]
[;, for, (, Node, c, :, n, ., children, (, ), ), {, if, (, c, ., isAssign, (, )]
[), {, if, (, c, ., isAssign, (, ), ||, parent, ., isFor, (, ), ), {, interestingChildren, ., add]
[., children, (, ), ), {, if, (, c, ., isAssign, (, ), ||, parent, ., isFor, (, ), )]
[), {, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if]
[||, parent, ., isFor, (, ), ), {, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node]
[., isAssign, (, ), ||, parent, ., isFor, (, ), ), {, interestingChildren, ., add, (, c, ), ;, }]
[), {, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if]
[., isFor, (, ), ), {, interestingChildren, ., add, (, c, ), ;, }, }, for, (, Node, c, :]
[;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&, parent]
[., add, (, c, ), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, .]
[), ;, }, }, for, (, Node, c, :, interestingChildren, ), {, if, (, parent, ., isFor, (, ), &&]
[), {, if, (, parent, ., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, commas]
[), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, commas, ., add, (, c, ., cloneTree, (, ), )]
[., isFor, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, commas, ., add, (, c, .]
[), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR]
[==, n, ), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr]
[., getFirstChild, (, ), ==, n, ), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }]
[), {, commas, ., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR]
[;, }, else, {, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (]
[., add, (, c, ., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR, ., exprResult, (]
[), ;, }, else, {, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (, ), ), ., srcref]
[., cloneTree, (, ), ), ;, }, else, {, Node, expr, =, IR, ., exprResult, (, c, ., cloneTree, (]
[;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (, commas, ., size, (, ), >]
[., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (, commas]
[., exprResult, (, c, ., cloneTree, (, ), ), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr]
[), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (]
[., cloneTree, (, ), ), ., srcref, (, c, ), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;]
[), ;, parent, ., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (, commas, ., size, (, )]
[;, }, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas]
[., addChildBefore, (, expr, ,, n, ), ;, }, }, if, (, commas, ., size, (, ), >, 0, )]
[,, n, ), ;, }, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =]
[), ;, }, }, if, (, commas, ., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (]
[), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, )]
[>, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,]
[., size, (, ), >, 0, ), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, .]
[), {, Node, comma, =, joinOnComma, (, commas, ,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, )]
[;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, ), ;, compiler, .]
[,, n, ), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, )]
[), ;, parent, ., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, ), ;, compiler]
[;, }, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, joinOnComma, (]
[., addChildBefore, (, comma, ,, n, ), ;, }, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (]
[,, n, ), ;, }, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private]
[), ;, }, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, joinOnComma]
[;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source]
[., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, joinOnComma, (, List, <, Node]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node]
[;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source, ), {, Node, comma, =, commas]
[., reportCodeChange, (, ), ;, }, private, Node, joinOnComma, (, List, <, Node, >, commas, ,, Node, source, ), {]
[;, for, (, int, i, =, 1, ;, i, <, commas, ., size, (, ), ;, i, ++, ), {]
[., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, commas, ., size, (, )]
[), ;, for, (, int, i, =, 1, ;, i, <, commas, ., size, (, ), ;, i, ++, )]
[;, i, <, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (]
[;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, )]
[<, commas, ., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,]
[;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, )]
[., size, (, ), ;, i, ++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, .]
[), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, ), ), ;, nextComma]
[++, ), {, Node, nextComma, =, IR, ., comma, (, comma, ,, commas, ., get, (, i, ), ), ;]
[;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return, comma, ;, }, }, private, class]
[., comma, (, comma, ,, commas, ., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;]
[,, commas, ., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;]
[), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return, comma, ;, }, }, private]
[., get, (, i, ), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return]
[), ), ;, nextComma, ., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return, comma, ;, }, }]
[;, comma, =, nextComma, ;, }, return, comma, ;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends, AbstractPostOrderCallback, {, @, Override, public]
[., copyInformationFrom, (, source, ), ;, comma, =, nextComma, ;, }, return, comma, ;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends]
[), ;, comma, =, nextComma, ;, }, return, comma, ;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends, AbstractPostOrderCallback, {, @, Override]
[=, nextComma, ;, }, return, comma, ;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[;, }, return, comma, ;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[;, }, }, private, class, MakeExternsReferenceWindowExplicitly, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =, t]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =, t]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Scope, .]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, name]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (]
[., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==, null]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, name, ., length, (, ), >, 0, &&]
[), ;, if, (, name, ., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern]
[), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR]
[&&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (]
[&&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, .]
[&&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, )]
[>, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (]
[., length, (, ), >, 0, &&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !]
[&&, (, var, ==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, )]
[&&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, .]
[), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent]
[||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains]
[==, null, ||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS]
[||, var, ., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains]
[), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent]
[., isExtern, (, ), ), &&, !, globalSymbolNamespace, ., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name]
[&&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (]
[&&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (]
[., equals, (, name, ), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n]
[), &&, !, SPECIAL_EXTERNS, ., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop]
[), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR]
[), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR]
[., contains, (, name, ), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name]
[), ), {, parent, ., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., replaceChild, (, n, ,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (]
[,, IR, ., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), .]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., getprop, (, IR, ., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (]
[,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (, )]
[., name, (, WINDOW, ), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;]
[), ,, IR, ., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (]
[), ., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[., string, (, name, ), ), ., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ), ., srcrefTree, (, n, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }]
[;, }, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }, }]
