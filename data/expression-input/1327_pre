[,, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (]
[minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ), ;]
[final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (]
[maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,]
[final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,]
[scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[double, scalRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,, scalRelativeTolerance, ), ;]
[,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (]
[maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ), ;]
[final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (]
[[, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,]
[vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,]
[final, double, [, ], vecRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[], vecRelativeTolerance, ), {, super, (, name, ), ;, setStepSizeControl, (, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;]
[void, setStepSizeControl, (, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {]
[(, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =]
[(, final, double, minimalStep, ,, final, double, maximalStep, ,, final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =]
[,, final, double, maximalStep, ,, final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =, FastMath, ., abs, (]
[maximalStep, ,, final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;]
[final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =]
[final, double, absoluteTolerance, ,, final, double, relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =]
[final, double, relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (]
[), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;]
[minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =]
[=, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -]
[., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;]
[(, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =]
[), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;]
[maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =]
[FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;]
[abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =]
[maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;]
[;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, absoluteTolerance, ;, scalRelativeTolerance, =, relativeTolerance, ;, vecAbsoluteTolerance, =, null, ;, vecRelativeTolerance, =]
[double, minimalStep, ,, final, double, maximalStep, ,, final, double, [, ], absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {]
[,, final, double, maximalStep, ,, final, double, [, ], absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =]
[,, final, double, maximalStep, ,, final, double, [, ], absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =]
[,, final, double, [, ], absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =, FastMath, ., abs, (]
[[, ], absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;]
[absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =]
[absoluteTolerance, ,, final, double, [, ], relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =]
[[, ], relativeTolerance, ), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (]
[), {, minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;]
[minStep, =, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =]
[=, FastMath, ., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -]
[., abs, (, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;]
[(, minimalStep, ), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =]
[), ;, maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;]
[maxStep, =, FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =]
[FastMath, ., abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;]
[abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =]
[abs, (, maximalStep, ), ;, initialStep, =, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =]
[=, -, 1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;]
[1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =]
[1, ;, scalAbsoluteTolerance, =, 0, ;, scalRelativeTolerance, =, 0, ;, vecAbsoluteTolerance, =, absoluteTolerance, ., clone, (, ), ;, vecRelativeTolerance, =]
[vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (]
[vecRelativeTolerance, =, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (]
[=, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (]
[=, relativeTolerance, ., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (]
[., clone, (, ), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <]
[), ;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||]
[;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (]
[;, }, public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (]
[public, void, setInitialStepSize, (, final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (, initialStepSize, >]
[final, double, initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {]
[initialStepSize, ), {, if, (, (, initialStepSize, <, minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =]
[), {, if, (, (, initialStepSize, <, minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -]
[initialStepSize, <, minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {]
[minStep, ), ||, (, initialStepSize, >, maxStep, ), ), {, initialStep, =, -, 1.0, ;, }, else, {, initialStep, =]
[}, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {]
[}, @, Override, protected, void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {]
[void, sanityChecks, (, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (]
[(, final, ExpandableStatefulODE, equations, ,, final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (, equations, ,]
[equations, ,, final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (, equations, ,, t, ), ;]
[final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (, equations, ,, t, ), ;, mainSetDimension, =]
[final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (, equations, ,, t, ), ;, mainSetDimension, =]
[final, double, t, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, super, ., sanityChecks, (, equations, ,, t, ), ;, mainSetDimension, =]
[(, equations, ,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (]
[(, equations, ,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (]
[equations, ,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (]
[equations, ,, t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (]
[t, ), ;, mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=]
[mainSetDimension, =, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&]
[=, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (]
[=, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (]
[=, equations, ., getPrimaryMapper, (, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (]
[(, ), ., getDimension, (, ), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=]
[), ;, if, (, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw]
[(, (, vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (]
[vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,]
[vecAbsoluteTolerance, !=, null, ), &&, (, vecAbsoluteTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,]
[length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (]
[length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (]
[!=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (]
[!=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (]
[), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=]
[throw, new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&]
[new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (]
[new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (]
[new, DimensionMismatchException, (, mainSetDimension, ,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (]
[,, vecAbsoluteTolerance, ., length, ), ;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=]
[;, }, if, (, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw]
[(, (, vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (]
[vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,]
[vecRelativeTolerance, !=, null, ), &&, (, vecRelativeTolerance, ., length, !=, mainSetDimension, ), ), {, throw, new, DimensionMismatchException, (, mainSetDimension, ,]
[,, final, double, [, ], y1, ,, final, double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (]
[,, final, double, [, ], y1, ,, final, double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (]
[double, [, ], y1, ,, final, double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >]
[,, final, double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >, 0, ), {, return]
[,, final, double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >, 0, ), {, return]
[double, [, ], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >, 0, ), {, return, forward, ?]
[], yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >, 0, ), {, return, forward, ?, initialStep, :]
[yDot1, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, initialStep, >, 0, ), {, return, forward, ?, initialStep, :, -]
[initialStep, >, 0, ), {, return, forward, ?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =]
[return, forward, ?, initialStep, :, -, initialStep, ;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =]
[;, }, double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =]
[double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;]
[double, ratio, ;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;]
[;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, double, yOnScale2, =, 0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[0, ;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;]
[;, double, yDotOnScale2, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[(, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, y0, []
[=, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /]
[=, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /]
[;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, []
[scale, ., length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;]
[length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=]
[length, ;, ++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=]
[++, j, ), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *]
[), {, ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;]
[ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =]
[ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =]
[ratio, =, y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =]
[y0, [, j, ], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, []
[], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /]
[], /, scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /]
[scale, [, j, ], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, []
[], ;, yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;]
[yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=]
[yOnScale2, +=, ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=]
[ratio, *, ratio, ;, ratio, =, yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *]
[yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =]
[yDot0, [, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =]
[[, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (]
[[, j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (]
[j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (]
[j, ], /, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (]
[/, scale, [, j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <]
[j, ], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||]
[], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (]
[], ;, yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (]
[yDotOnScale2, +=, ratio, *, ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <]
[ratio, ;, }, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?]
[}, double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :]
[double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (]
[double, h, =, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (]
[=, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *]
[=, (, (, yOnScale2, <, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *]
[<, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (]
[<, 1.0e-10, ), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (]
[), ||, (, yDotOnScale2, <, 1.0e-10, ), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /]
[), ), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (]
[), ?, 1.0e-6, :, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !]
[:, (, 0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {]
[0.01, *, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {, h, =]
[*, FastMath, ., sqrt, (, yOnScale2, /, yDotOnScale2, ), ), ;, if, (, !, forward, ), {, h, =, -]
[), ), ;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =]
[;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;]
[;, if, (, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;]
[(, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <]
[(, !, forward, ), {, h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <]
[{, h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;]
[h, =, -, h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++]
[h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {]
[h, ;, }, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {]
[}, for, (, int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1, []
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =]
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =]
[int, j, =, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =]
[=, 0, ;, j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, []
[j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +]
[j, <, y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +]
[y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *]
[y0, ., length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *]
[length, ;, ++, j, ), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, []
[), {, y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }]
[y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (]
[y1, [, j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (]
[j, ], =, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +]
[=, y0, [, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,]
[[, j, ], +, h, *, yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,]
[yDot0, [, j, ], ;, }, computeDerivatives, (, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =]
[(, t0, +, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =]
[+, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;]
[+, h, ,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;]
[,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[,, y1, ,, yDot1, ), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[), ;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;]
[;, double, yDDotOnScale, =, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[;, for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =]
[for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (]
[for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (]
[for, (, int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (]
[int, j, =, 0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, []
[0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -]
[0, ;, j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -]
[j, <, scale, ., length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, []
[length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /]
[length, ;, ++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /]
[++, j, ), {, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, []
[{, ratio, =, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;]
[=, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=]
[=, (, yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=]
[yDot1, [, j, ], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *]
[], -, yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }]
[yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =]
[yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =]
[yDot0, [, j, ], ), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =]
[), /, scale, [, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (]
[[, j, ], ;, yDDotOnScale, +=, ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /]
[ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =]
[ratio, *, ratio, ;, }, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =]
[}, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (]
[}, yDDotOnScale, =, FastMath, ., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (]
[., sqrt, (, yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (]
[yDDotOnScale, ), /, h, ;, final, double, maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,]
[maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =]
[maxInv2, =, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =]
[=, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (]
[=, FastMath, ., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (]
[., max, (, FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <]
[FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?]
[FastMath, ., sqrt, (, yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?]
[yDotOnScale2, ), ,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (]
[,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,]
[,, yDDotOnScale, ), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,]
[), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *]
[), ;, final, double, h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *]
[h1, =, (, maxInv2, <, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (]
[<, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :]
[<, 1.0e-15, ), ?, FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :]
[FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (]
[FastMath, ., max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (]
[max, (, 1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /]
[1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,]
[1.0e-6, ,, 0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,]
[0.001, *, FastMath, ., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /]
[., abs, (, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;]
[(, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =]
[(, h, ), ), :, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =]
[:, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (]
[:, FastMath, ., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (]
[., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *]
[., pow, (, 0.01, /, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *]
[/, maxInv2, ,, 1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (]
[1.0, /, order, ), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,]
[), ;, h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;]
[h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =]
[h, =, FastMath, ., min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =]
[min, (, 100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (]
[100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,]
[100.0, *, FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,]
[FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *]
[FastMath, ., abs, (, h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *]
[h, ), ,, h1, ), ;, h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (]
[h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (]
[h, =, FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (]
[FastMath, ., max, (, h, ,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <]
[,, 1.0e-12, *, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <, getMinStep, (, ), ), {]
[*, FastMath, ., abs, (, t0, ), ), ;, if, (, h, <, getMinStep, (, ), ), {, h, =]
[), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (]
[), ;, if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (]
[if, (, h, <, getMinStep, (, ), ), {, h, =, getMinStep, (, ), ;, }, if, (, h, >]
[(, ), ), {, h, =, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, ), ), {]
[), {, h, =, getMinStep, (, ), ;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =]
[;, }, if, (, h, >, getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (]
[}, if, (, h, >, getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (, !]
[h, >, getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {]
[getMaxStep, (, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =]
[(, ), ), {, h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =, -]
[h, =, getMaxStep, (, ), ;, }, if, (, !, forward, ), {, h, =, -, h, ;, }, return]
[filterStep, (, final, double, h, ,, final, boolean, forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =]
[h, ,, final, boolean, forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =, h, ;, if, (]
[h, ,, final, boolean, forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =, h, ;, if, (]
[h, ,, final, boolean, forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =, h, ;, if, (]
[forward, ,, final, boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =, h, ;, if, (, FastMath, ., abs, (]
[boolean, acceptSmall, ), throws, NumberIsTooSmallException, {, double, filteredH, =, h, ;, if, (, FastMath, ., abs, (, h, ), <]
[{, double, filteredH, =, h, ;, if, (, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (]
[=, h, ;, if, (, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {]
[;, if, (, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =]
[;, if, (, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =]
[(, FastMath, ., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?]
[., abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :]
[abs, (, h, ), <, minStep, ), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -]
[), {, if, (, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw]
[(, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (]
[(, acceptSmall, ), {, filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (]
[filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,]
[filteredH, =, forward, ?, minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,]
[minStep, :, -, minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (]
[minStep, ;, }, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,]
[}, else, {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep, ,]
[LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (]
[LocalizedFormats, ., MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (]
[MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, ,, FastMath, ., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >]
[., abs, (, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {]
[(, h, ), ,, minStep, ,, true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =]
[true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (]
[true, ), ;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (]
[;, }, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <]
[}, }, if, (, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -]
[(, filteredH, >, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {]
[>, maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =]
[maxStep, ), {, filteredH, =, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -]
[=, maxStep, ;, }, else, if, (, filteredH, <, -, maxStep, ), {, filteredH, =, -, maxStep, ;, }, return]
[t, ), throws, NumberIsTooSmallException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NoBracketingException, ;, @, Override, public, double, getCurrentStepStart, (, ), {, return]
[NoBracketingException, ;, @, Override, public, double, getCurrentStepStart, (, ), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {]
[@, Override, public, double, getCurrentStepStart, (, ), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {, stepStart, =]
[@, Override, public, double, getCurrentStepStart, (, ), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {, stepStart, =]
[getCurrentStepStart, (, ), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;]
[), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =]
[), {, return, stepStart, ;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =]
[;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =, FastMath, ., sqrt, (]
[;, }, protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =, FastMath, ., sqrt, (]
[protected, void, resetInternalState, (, ), {, stepStart, =, Double, ., NaN, ;, stepSize, =, FastMath, ., sqrt, (, minStep, *]
[;, stepSize, =, FastMath, ., sqrt, (, minStep, *, maxStep, ), ;, }, public, double, getMinStep, (, ), {, return]
[), ;, }, public, double, getMinStep, (, ), {, return, minStep, ;, }, public, double, getMaxStep, (, ), {, return]
