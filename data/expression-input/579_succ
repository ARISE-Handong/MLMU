[;, private, static, final, long, serialVersionUID, =, 20120109L, ;, private, final, double, lower, ;, private, final, double, upper, ;, public]
[;, private, final, double, lower, ;, private, final, double, upper, ;, public, UniformRealDistribution, (, ), {, this, (, 0, ,]
[,, 1, ), ;, }, public, UniformRealDistribution, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, this, (, new]
[), ;, }, public, UniformRealDistribution, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, this, (, new, Well19937c, (]
[,, lower, ,, upper, ), ;, }, @, Deprecated, public, UniformRealDistribution, (, double, lower, ,, double, upper, ,, double, inverseCumAccuracy]
[,, upper, ), ;, }, @, Deprecated, public, UniformRealDistribution, (, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), throws]
[), ;, }, @, Deprecated, public, UniformRealDistribution, (, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, ), throws, NumberIsTooLargeException, {]
[,, lower, ,, upper, ), ;, }, @, Deprecated, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper]
[,, upper, ), ;, }, @, Deprecated, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ,, double]
[), ;, }, @, Deprecated, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ,, double, inverseCumAccuracy, )]
[,, lower, ,, upper, ), ;, }, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws]
[,, upper, ), ;, }, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {]
[), ;, }, public, UniformRealDistribution, (, RandomGenerator, rng, ,, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, {, super, (]
[), ;, if, (, lower, >=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, .]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, .]
[;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double]
[,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper]
[., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper]
[,, upper, ,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }]
[,, false, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double]
[), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (]
[., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {]
[;, this, ., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[=, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||, x, >]
[., upper, =, upper, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||]
[;, }, public, double, density, (, double, x, ), {, if, (, x, <, lower, ||, x, >, upper, )]
[), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (]
[||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }]
[<, lower, ||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, )]
[||, x, >, upper, ), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }]
[), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (]
[>, upper, ), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }, public, double]
[), {, return, 0.0, ;, }, return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (]
[;, }, return, 1, /, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0, ;]
[/, (, upper, -, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0, ;]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0]
[-, lower, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, lower, ), {, return, 0]
[), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x]
[<=, lower, ), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return]
[), {, return, 0, ;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x]
[;, }, if, (, x, >=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /]
[), {, return, 1, ;, }, return, (, x, -, lower, ), /, (, upper, -, lower, ), ;, }]
[>=, upper, ), {, return, 1, ;, }, return, (, x, -, lower, ), /, (, upper, -, lower, )]
[), {, return, 1, ;, }, return, (, x, -, lower, ), /, (, upper, -, lower, ), ;, }]
[;, }, return, (, x, -, lower, ), /, (, upper, -, lower, ), ;, }, @, Override, public, double]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0]
[/, (, upper, -, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException]
[), /, (, upper, -, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws]
[-, lower, ), /, (, upper, -, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p]
[), /, (, upper, -, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[-, lower, ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -]
[;, }, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {]
[,, 0, ,, 1, ), ;, }, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public]
[,, 1, ), ;, }, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean]
[), ;, }, return, p, *, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, )]
[;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double]
[+, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }]
[*, (, upper, -, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (]
[+, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }]
[), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;]
[-, lower, ), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper]
[), +, lower, ;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;]
[;, }, public, double, getNumericalMean, (, ), {, return, 0.5, *, (, lower, +, upper, ), ;, }, public, double]
[;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *, ul, /]
[*, (, lower, +, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower]
[;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *, ul, /]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *, ul]
[+, upper, ), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul]
[), ;, }, public, double, getNumericalVariance, (, ), {, double, ul, =, upper, -, lower, ;, return, ul, *, ul]
[;, return, ul, *, ul, /, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public]
[-, lower, ;, return, ul, *, ul, /, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;]
[;, return, ul, *, ul, /, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public]
[;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (, ), {, return, upper]
[/, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (, ), {]
[*, ul, /, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (]
[/, 12, ;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportLowerBound, (, ), {, return, lower, ;, }, public, double, getSupportUpperBound, (, ), {, return, upper]
[;, }, public, double, getSupportUpperBound, (, ), {, return, upper, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, true]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {]
[;, }, @, Override, public, double, sample, (, ), {, final, double, u, =, random, ., nextDouble, (, ), ;]
[;, return, u, *, upper, +, (, 1, -, u, ), *, lower, ;, }, }]
[., nextDouble, (, ), ;, return, u, *, upper, +, (, 1, -, u, ), *, lower, ;, }, }]
[;, }, }]
[+, (, 1, -, u, ), *, lower, ;, }, }]
[*, upper, +, (, 1, -, u, ), *, lower, ;, }, }]
[+, (, 1, -, u, ), *, lower, ;, }, }]
[;, }, }]
[*, lower, ;, }, }]
[), *, lower, ;, }, }]
[-, u, ), *, lower, ;, }, }]
[), *, lower, ;, }, }]
[;, }, }]
