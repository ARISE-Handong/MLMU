[Chars, ;, import, java, ., util, ., *, ;, final, class, NameGenerator, {, static, final, char, [, ], FIRST_CHAR, =]
[Chars, ;, import, java, ., util, ., *, ;, final, class, NameGenerator, {, static, final, char, [, ], FIRST_CHAR, =]
[static, final, char, [, ], FIRST_CHAR, =, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$", ., toCharArray, (, ), ;, static, final, char, [, ], NONFIRST_CHAR, =]
[static, final, char, [, ], FIRST_CHAR, =, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$", ., toCharArray, (, ), ;, static, final, char, [, ], NONFIRST_CHAR, =]
[;, NameGenerator, (, Set, <, String, >, reservedNames, ,, String, prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {]
[;, NameGenerator, (, Set, <, String, >, reservedNames, ,, String, prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {]
[<, String, >, reservedNames, ,, String, prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =]
[>, reservedNames, ,, String, prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;]
[>, reservedNames, ,, String, prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;]
[prefix, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =]
[@, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;]
[@, Nullable, char, [, ], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;]
[], reservedCharacters, ), {, this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =]
[), {, this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (]
[this, ., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,]
[=, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;]
[=, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;]
[., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =]
[=, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (]
[;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,]
[firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;]
[reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (]
[}, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (]
[}, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (]
[}, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (]
[char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==]
[], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==, null, ||]
[], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==, null, ||]
[], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==, null, ||]
[[, ], chars, ,, char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==, null, ||, reservedCharacters, ., length, ==]
[char, [, ], reservedCharacters, ), {, if, (, reservedCharacters, ==, null, ||, reservedCharacters, ., length, ==, 0, ), {, return]
[==, null, ||, reservedCharacters, ., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =]
[==, null, ||, reservedCharacters, ., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =]
[., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (]
[., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (]
[), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (]
[>, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :]
[Sets, ., newLinkedHashSet, (, Chars, ., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {]
[Sets, ., newLinkedHashSet, (, Chars, ., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {]
[Chars, ., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (]
[), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return]
[), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return]
[(, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return, Chars, ., toArray, (]
[}, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (]
[}, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (]
[}, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (]
[charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length, (, ), >]
[void, checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length, (, ), >, 0, ), {, if, (]
[checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length, (, ), >, 0, ), {, if, (, !]
[String, prefix, ), {, if, (, prefix, ., length, (, ), >, 0, ), {, if, (, !, contains, (]
[), {, if, (, prefix, ., length, (, ), >, 0, ), {, if, (, !, contains, (, firstChars, ,]
[), {, if, (, prefix, ., length, (, ), >, 0, ), {, if, (, !, contains, (, firstChars, ,]
[prefix, ., length, (, ), >, 0, ), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (]
[0, ), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw]
[if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (]
[if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (]
[!, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +]
[!, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +]
[,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (]
[throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =]
[IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;]
[IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;]
["prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;, pos, <]
["prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;, pos, <]
[firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;]
[), ), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++]
[(, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (]
[int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !]
[=, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (]
[;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,]
[;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,]
[., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (]
[pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw]
[if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (]
[if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (]
[if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (]
[!, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +]
[(, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +]
[(, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +]
[., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (]
[}, }, private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for, (, int, i, =]
[private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;]
[private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;]
[contains, (, char, [, ], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;, i, <]
[contains, (, char, [, ], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;, i, <]
[], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[], arr, ,, char, c, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, if, (, arr, []
[=, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, if, (, arr, [, i, ], ==]
[<, arr, ., length, ;, i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return]
[i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;, }, }, return]
[==, c, ), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (]
[;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (, true, ), {, String, name, =]
[;, }, String, generateNextName, (, ), {, while, (, true, ), {, String, name, =, prefix, ;, int, i, =]
[(, ), {, while, (, true, ), {, String, name, =, prefix, ;, int, i, =, nameCount, ;, if, (]
[(, ), {, while, (, true, ), {, String, name, =, prefix, ;, int, i, =, nameCount, ;, if, (]
[=, prefix, ;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =]
[=, prefix, ;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =]
[;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %]
[;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %]
[nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;]
[if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=]
[if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=]
[name, ., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, []
[(, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;]
[), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=]
[), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=]
[firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (]
[firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (]
[length, ;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >]
[+=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {]
[+=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {]
[i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =]
[i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =]
[firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i, %]
[firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i, %]
[}, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;]
[(, i, >, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=]
[(, i, >, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=]
[>, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, []
[{, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;]
[--, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=]
[--, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=]
[i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }]
[i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }]
[;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (]
[;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (]
[;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (]
[[, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (]
[;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||]
[;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||]
[., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (]
[(, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (, name, ), ), {, continue, ;, }, return]
