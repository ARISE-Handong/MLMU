[., math3, ., util, ., ArithmeticUtils, ;, public, class, FastHadamardTransformer, implements, RealTransformer, ,, Serializable, {, static, final, long, serialVersionUID, =]
[;, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (]
[;, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (, type, ==]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (, type, ==]
[double, [, ], f, ,, final, TransformType, type, ), {, if, (, type, ==, TransformType, ., FORWARD, ), {, return]
[], f, ,, final, TransformType, type, ), {, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fht, (]
[type, ), {, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fht, (, f, ), ;, }, return]
[type, ), {, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fht, (, f, ), ;, }, return]
[(, type, ==, TransformType, ., FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (]
[==, TransformType, ., FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (]
[FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,]
[FORWARD, ), {, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,]
[{, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0, /]
[{, return, fht, (, f, ), ;, }, return, TransformUtils, ., scaleArray, (, fht, (, f, ), ,, 1.0, /]
[f, ,, final, double, min, ,, final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, return]
[final, double, min, ,, final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, return, transform, (]
[final, double, min, ,, final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, return, transform, (]
[final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, return, transform, (, FunctionUtils, ., sample, (]
[max, ,, final, int, n, ,, final, TransformType, type, ), {, return, transform, (, FunctionUtils, ., sample, (, f, ,]
[final, int, n, ,, final, TransformType, type, ), {, return, transform, (, FunctionUtils, ., sample, (, f, ,, min, ,]
[n, ,, final, TransformType, type, ), {, return, transform, (, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,]
[TransformType, type, ), {, return, transform, (, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ,]
[), ,, type, ), ;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return]
[type, ), ;, }, public, int, [, ], transform, (, final, int, [, ], f, ), {, return, fht, (]
[;, }, protected, double, [, ], fht, (, double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[;, }, protected, double, [, ], fht, (, double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =]
[double, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =]
[], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /]
[MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (]
[{, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !]
[{, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !]
[=, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw]
[=, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[=, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (]
[MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, double, [, ], yPrevious, =]
[., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, double, [, ], yPrevious, =, new, double, []
[), ), ;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double, [, ], yCurrent, =]
[), ), ;, }, double, [, ], yPrevious, =, new, double, [, n, ], ;, double, [, ], yCurrent, =]
[[, n, ], ;, double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =]
[], ;, double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[], ;, double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[double, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <]
[], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;]
[=, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=]
[int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =]
[=, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;]
[;, j, <, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =]
[<, n, ;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;]
[;, j, <<=, 1, ), {, final, double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[double, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =]
[], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;]
[], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;]
[=, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <]
[;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;]
[yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[(, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *]
[i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, []
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, []
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +]
[], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =]
[yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;]
[yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;]
[twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <]
[+, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;]
[yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++]
[}, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =]
[}, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =]
[(, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *]
[i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, []
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -]
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -]
[i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +]
[=, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return]
[;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[;, }, protected, int, [, ], fht, (, int, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =]
[int, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =]
[int, [, ], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =]
[], x, ), throws, MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /]
[MathIllegalArgumentException, {, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (]
[{, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !]
[{, final, int, n, =, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !]
[=, x, ., length, ;, final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[final, int, halfN, =, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw]
[=, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[=, n, /, 2, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,]
[ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (]
[MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, int, [, ], yPrevious, =]
[., NOT_POWER_OF_TWO, ,, Integer, ., valueOf, (, n, ), ), ;, }, int, [, ], yPrevious, =, new, int, []
[), ), ;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int, [, ], yCurrent, =]
[), ), ;, }, int, [, ], yPrevious, =, new, int, [, n, ], ;, int, [, ], yCurrent, =]
[[, n, ], ;, int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =]
[], ;, int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[], ;, int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;]
[int, [, ], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <]
[], yCurrent, =, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;]
[=, x, ., clone, (, ), ;, for, (, int, j, =, 1, ;, j, <, n, ;, j, <<=]
[int, j, =, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =]
[=, 1, ;, j, <, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;]
[;, j, <, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =]
[<, n, ;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;]
[;, j, <<=, 1, ), {, final, int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =]
[int, [, ], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =]
[], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;]
[], yTmp, =, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;]
[=, yCurrent, ;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <]
[;, yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;]
[yCurrent, =, yPrevious, ;, yPrevious, =, yTmp, ;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[;, for, (, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =]
[(, int, i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *]
[i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[i, =, 0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[0, ;, i, <, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, []
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, halfN, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, []
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +]
[], =, yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =]
[yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;]
[yPrevious, [, twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;]
[twoI, ], +, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <]
[+, yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;]
[yPrevious, [, twoI, +, 1, ], ;, }, for, (, int, i, =, halfN, ;, i, <, n, ;, ++]
[}, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =]
[}, for, (, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =]
[(, int, i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *]
[i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[i, =, halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;]
[halfN, ;, i, <, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, []
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[<, n, ;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =]
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[;, ++, i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, []
[i, ), {, final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -]
[final, int, twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -]
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[twoI, =, 2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, []
[2, *, i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -]
[i, ;, yCurrent, [, i, ], =, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +]
[=, yPrevious, [, twoI, -, n, ], -, yPrevious, [, twoI, -, n, +, 1, ], ;, }, }, return]
