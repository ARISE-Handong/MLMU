[., util, ., FastMath, ;, public, class, HermiteRuleFactory, extends, BaseRuleFactory, <, Double, >, {, private, static, final, double, SQRT_PI, =]
[extends, BaseRuleFactory, <, Double, >, {, private, static, final, double, SQRT_PI, =, 1.77245385090551602729, ;, private, static, final, double, H0, =]
[final, double, SQRT_PI, =, 1.77245385090551602729, ;, private, static, final, double, H0, =, 7.5112554446494248286e-1, ;, private, static, final, double, H1, =]
[Pair, <, Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (]
[Pair, <, Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (]
[Double, [, ], ,, Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (, numberOfPoints, ==]
[Double, [, ], >, computeRule, (, int, numberOfPoints, ), throws, DimensionMismatchException, {, if, (, numberOfPoints, ==, 1, ), {, return]
[if, (, numberOfPoints, ==, 1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[1, ), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ]]
[), {, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {]
[new, Pair, <, Double, [, ], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,]
[[, ], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,, new, Double, [, ]]
[], ,, Double, [, ], >, (, new, Double, [, ], {, 0d, }, ,, new, Double, [, ], {]
[[, ], {, 0d, }, ,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =]
[[, ], {, 0d, }, ,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =]
[{, 0d, }, ,, new, Double, [, ], {, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -]
[{, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =]
[{, SQRT_PI, }, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =]
[}, ), ;, }, final, int, lastNumPoints, =, numberOfPoints, -, 1, ;, final, Double, [, ], previousPoints, =, getRuleInternal, (]
[Double, [, ], previousPoints, =, getRuleInternal, (, lastNumPoints, ), ., getFirst, (, ), ;, final, Double, [, ], points, =]
[previousPoints, =, getRuleInternal, (, lastNumPoints, ), ., getFirst, (, ), ;, final, Double, [, ], points, =, new, Double, []
[), ;, final, Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =]
[Double, [, ], points, =, new, Double, [, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, []
[[, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =]
[[, numberOfPoints, ], ;, final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =]
[final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (]
[final, Double, [, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (]
[[, ], weights, =, new, Double, [, numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *]
[numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =]
[numberOfPoints, ], ;, final, double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =]
[double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (]
[double, sqrtTwoTimesLastNumPoints, =, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (]
[=, FastMath, ., sqrt, (, 2, *, lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *]
[lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =]
[lastNumPoints, ), ;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =]
[;, final, double, sqrtTwoTimesNumPoints, =, FastMath, ., sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /]
[sqrt, (, 2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =]
[2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;]
[2, *, numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;]
[numberOfPoints, ), ;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[;, final, int, iMax, =, numberOfPoints, /, 2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;]
[2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =]
[2, ;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[;, for, (, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (]
[(, int, i, =, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==]
[=, 0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?]
[0, ;, i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :]
[i, <, iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :]
[iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, []
[iMax, ;, i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, []
[i, ++, ), {, double, a, =, (, i, ==, 0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -]
[0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =]
[0, ), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =]
[), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[), ?, -, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (]
[-, sqrtTwoTimesLastNumPoints, :, previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==]
[previousPoints, [, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?]
[[, i, -, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -]
[-, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :]
[-, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :]
[-, 1, ], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :]
[], ., doubleValue, (, ), ;, double, b, =, (, iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, []
[iMax, ==, 1, ), ?, -, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =]
[-, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =]
[-, 0.5, :, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =]
[:, previousPoints, [, i, ], ., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *]
[., doubleValue, (, ), ;, double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =]
[double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb, =]
[double, hma, =, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb, =]
[=, H0, ;, double, ha, =, H1, *, a, ;, double, hmb, =, H0, ;, double, hb, =, H1, *]
[*, a, ;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =]
[;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;]
[;, double, hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;]
[hmb, =, H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;, j, <]
[H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[H0, ;, double, hb, =, H1, *, b, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +]
[j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =]
[j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =]
[j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (]
[j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (]
[), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (]
[double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (]
[=, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =]
[;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *]
[double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *, a, *]
[=, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *, a, *, ha, -]
[=, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *, a, *, ha, -]
[., sqrt, (, j, /, jp1, ), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[), ;, final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =]
[final, double, hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *]
[hpa, =, s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *]
[s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -]
[s, *, a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -]
[a, *, ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *]
[ha, -, sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;]
[sm, *, hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =]
[hma, ;, final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;]
[final, double, hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =]
[hpb, =, s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;]
[s, *, b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =]
[b, *, hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;]
[hb, -, sm, *, hmb, ;, hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =]
[hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =]
[hma, =, ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =]
[ha, ;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *]
[;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (]
[;, ha, =, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (]
[=, hpa, ;, hmb, =, hb, ;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +]
[;, hb, =, hpb, ;, }, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =]
[}, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =, H0, ;, double, hc, =]
[}, double, c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =, H0, ;, double, hc, =]
[c, =, 0.5, *, (, a, +, b, ), ;, double, hmc, =, H0, ;, double, hc, =, H1, *]
[a, +, b, ), ;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =]
[;, double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (]
[double, hmc, =, H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !]
[H0, ;, double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {]
[double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[double, hc, =, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =]
[=, H1, *, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -]
[*, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=]
[*, c, ;, boolean, done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=]
[done, =, false, ;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (]
[;, while, (, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;]
[(, !, done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =]
[done, ), {, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;]
[{, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =]
[{, done, =, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =]
[=, b, -, a, <=, Math, ., ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *]
[ulp, (, c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =]
[c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;]
[c, ), ;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;]
[;, hmc, =, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <]
[=, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[=, H0, ;, hc, =, H1, *, c, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =]
[(, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +]
[j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =]
[j, <, numberOfPoints, ;, j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =]
[j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (]
[j, ++, ), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (]
[), {, final, double, jp1, =, j, +, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[+, 1, ;, final, double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =]
[double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (]
[double, s, =, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (]
[=, FastMath, ., sqrt, (, 2, /, jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =]
[jp1, ), ;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =]
[;, final, double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *]
[double, sm, =, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *]
[=, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -]
[=, FastMath, ., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -]
[., sqrt, (, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *]
[(, j, /, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;]
[/, jp1, ), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =]
[), ;, final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;]
[final, double, hpc, =, s, *, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =]
[*, c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (]
[c, *, hc, -, sm, *, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !]
[*, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (]
[*, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (]
[*, hmc, ;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (]
[;, hmc, =, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *]
[=, hc, ;, hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <]
[hc, =, hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, ), {]
[hpc, ;, }, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, ), {, b, =]
[}, if, (, !, done, ), {, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;]
[(, !, done, ), {, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;, hmb, =]
[done, ), {, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;]
[{, if, (, ha, *, hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =]
[hc, <, 0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {]
[0, ), {, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =]
[{, b, =, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;]
[=, c, ;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =]
[;, hmb, =, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;]
[=, hmc, ;, hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =]
[hb, =, hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }]
[hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =]
[hc, ;, }, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =]
[}, else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *]
[else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (]
[else, {, a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (]
[a, =, c, ;, hma, =, hmc, ;, ha, =, hc, ;, }, c, =, 0.5, *, (, a, +]
[=, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[=, hc, ;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =]
[;, }, c, =, 0.5, *, (, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *]
[(, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =]
[(, a, +, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =]
[+, b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /]
[b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (]
[b, ), ;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (]
[;, }, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *]
[final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[final, double, d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[d, =, sqrtTwoTimesNumPoints, *, hmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, []
[*, hmc, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;]
[double, w, =, 2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, []
[2, /, (, d, *, d, ), ;, points, [, i, ], =, c, ;, weights, [, i, ], =]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[), ;, points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =]
[points, [, i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -]
[i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;]
[i, ], =, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;]
[=, c, ;, weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, []
[weights, [, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =]
[[, i, ], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -]
[], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;]
[], =, w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;]
[w, ;, final, int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;, weights, []
[int, idx, =, lastNumPoints, -, i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =]
[i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[i, ;, points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (]
[points, [, idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %]
[idx, ], =, -, c, ;, weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=]
[weights, [, idx, ], =, w, ;, }, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =]
[}, if, (, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =]
[(, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;]
[(, numberOfPoints, %, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;]
[%, 2, !=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <]
[!=, 0, ), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;]
[), {, double, hm, =, H0, ;, for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =]
[for, (, int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =]
[int, j, =, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +]
[=, 1, ;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;]
[;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =]
[;, j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =]
[j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -]
[j, <, numberOfPoints, ;, j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -]
[j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (]
[j, +=, 2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (]
[2, ), {, final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (, j, /]
[final, double, jp1, =, j, +, 1, ;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *]
[;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =]
[;, hm, =, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =]
[=, -, FastMath, ., sqrt, (, j, /, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *]
[j, /, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =]
[j, /, jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =]
[jp1, ), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /]
[), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (]
[), *, hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (]
[hm, ;, }, final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *]
[final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[final, double, d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *, d, ), ;]
[d, =, sqrtTwoTimesNumPoints, *, hm, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, []
[*, hm, ;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[;, final, double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;]
[double, w, =, 2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, []
[2, /, (, d, *, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =]
[*, d, ), ;, points, [, iMax, ], =, 0d, ;, weights, [, iMax, ], =, w, ;, }, return]
[[, iMax, ], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (]
[], =, w, ;, }, return, new, Pair, <, Double, [, ], ,, Double, [, ], >, (, points, ,]
