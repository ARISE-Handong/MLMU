[java, ., util, ., Set, ;, public, class, Node, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[Node, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, static, final, int, JSDOC_INFO_PROP, =]
[Serializable, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, static, final, int, JSDOC_INFO_PROP, =, 29, ,, VAR_ARGS_NAME, =]
[final, long, serialVersionUID, =, 1L, ;, public, static, final, int, JSDOC_INFO_PROP, =, 29, ,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =]
[1L, ;, public, static, final, int, JSDOC_INFO_PROP, =, 29, ,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =]
[final, int, JSDOC_INFO_PROP, =, 29, ,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =]
[29, ,, VAR_ARGS_NAME, =, 30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =]
[30, ,, INCRDECR_PROP, =, 32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =]
[32, ,, QUOTED_PROP, =, 36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =]
[36, ,, OPT_ARG_NAME, =, 37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =]
[37, ,, SYNTHETIC_BLOCK_PROP, =, 38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =]
[38, ,, EMPTY_BLOCK, =, 39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =]
[39, ,, ORIGINALNAME_PROP, =, 40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =]
[40, ,, SIDE_EFFECT_FLAGS, =, 42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =]
[42, ,, IS_CONSTANT_NAME, =, 43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =]
[43, ,, IS_NAMESPACE, =, 46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =]
[46, ,, IS_DISPATCHER, =, 47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =]
[47, ,, DIRECTIVES, =, 48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =]
[48, ,, DIRECT_EVAL, =, 49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =]
[49, ,, FREE_CALL, =, 50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =]
[50, ,, STATIC_SOURCE_FILE, =, 51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =]
[51, ,, LENGTH, =, 52, ,, INPUT_ID, =, 53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =]
[53, ,, SLASH_V, =, 54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55, ;, public, static, final, int, DECR_FLAG, =]
[54, ,, INFERRED_FUNCTION, =, 55, ,, LAST_PROP, =, 55, ;, public, static, final, int, DECR_FLAG, =, 0x1, ,, POST_FLAG, =]
[DECR_FLAG, =, 0x1, ,, POST_FLAG, =, 0x2, ;, private, static, final, String, propToString, (, int, propType, ), {, switch, (]
[POST_FLAG, =, 0x2, ;, private, static, final, String, propToString, (, int, propType, ), {, switch, (, propType, ), {, case]
[;, private, static, final, String, propToString, (, int, propType, ), {, switch, (, propType, ), {, case, VAR_ARGS_NAME, :, return]
[final, String, propToString, (, int, propType, ), {, switch, (, propType, ), {, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case]
[(, int, propType, ), {, switch, (, propType, ), {, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return]
[), {, switch, (, propType, ), {, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case]
[(, propType, ), {, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return]
[{, case, VAR_ARGS_NAME, :, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case]
[:, return, "var_args_name", ;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return]
[;, case, JSDOC_INFO_PROP, :, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case]
[:, return, "jsdoc_info", ;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return]
[;, case, INCRDECR_PROP, :, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case]
[:, return, "incrdecr", ;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return]
[;, case, QUOTED_PROP, :, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case]
[:, return, "quoted", ;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return]
[;, case, OPT_ARG_NAME, :, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case]
[:, return, "opt_arg", ;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return]
[;, case, SYNTHETIC_BLOCK_PROP, :, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case]
[:, return, "synthetic", ;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return]
[;, case, EMPTY_BLOCK, :, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case]
[:, return, "empty_block", ;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return]
[;, case, ORIGINALNAME_PROP, :, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case]
[:, return, "originalname", ;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return]
[;, case, SIDE_EFFECT_FLAGS, :, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case]
[:, return, "side_effect_flags", ;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return]
[;, case, IS_CONSTANT_NAME, :, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case]
[:, return, "is_constant_name", ;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return]
[;, case, IS_NAMESPACE, :, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case]
[:, return, "is_namespace", ;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return]
[;, case, IS_DISPATCHER, :, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case]
[:, return, "is_dispatcher", ;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return]
[;, case, DIRECTIVES, :, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case]
[:, return, "directives", ;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return]
[;, case, DIRECT_EVAL, :, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case]
[:, return, "direct_eval", ;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return]
[;, case, FREE_CALL, :, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case]
[:, return, "free_call", ;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return]
[;, case, STATIC_SOURCE_FILE, :, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case]
[:, return, "source_file", ;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return]
[;, case, INPUT_ID, :, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case]
[:, return, "input_id", ;, case, LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return]
[LENGTH, :, return, "length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw]
["length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (]
["length", ;, case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (]
[case, SLASH_V, :, return, "slash_v", ;, case, INFERRED_FUNCTION, :, return, "inferred", ;, default, :, throw, new, IllegalStateException, (, "unexpect prop id ", +]
["unexpect prop id ", +, propType, ), ;, }, }, private, static, class, NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =]
[NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L, ;, NumberNode, (, double, number, ), {, super, (]
[NumberNode, extends, Node, {, private, static, final, long, serialVersionUID, =, 1L, ;, NumberNode, (, double, number, ), {, super, (]
[static, final, long, serialVersionUID, =, 1L, ;, NumberNode, (, double, number, ), {, super, (, Token, ., NUMBER, ), ;]
[static, final, long, serialVersionUID, =, 1L, ;, NumberNode, (, double, number, ), {, super, (, Token, ., NUMBER, ), ;]
[=, 1L, ;, NumberNode, (, double, number, ), {, super, (, Token, ., NUMBER, ), ;, this, ., number, =]
[number, =, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (]
[number, =, number, ;, }, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (]
[}, public, NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (, Token, ., NUMBER, ,]
[NumberNode, (, double, number, ,, int, lineno, ,, int, charno, ), {, super, (, Token, ., NUMBER, ,, lineno, ,]
[number, ,, int, lineno, ,, int, charno, ), {, super, (, Token, ., NUMBER, ,, lineno, ,, charno, ), ;]
[number, ,, int, lineno, ,, int, charno, ), {, super, (, Token, ., NUMBER, ,, lineno, ,, charno, ), ;]
[,, int, charno, ), {, super, (, Token, ., NUMBER, ,, lineno, ,, charno, ), ;, this, ., number, =]
[,, charno, ), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble, (, ), {, return]
[,, charno, ), ;, this, ., number, =, number, ;, }, @, Override, public, double, getDouble, (, ), {, return]
[getDouble, (, ), {, return, this, ., number, ;, }, @, Override, public, void, setDouble, (, double, d, ), {]
[getDouble, (, ), {, return, this, ., number, ;, }, @, Override, public, void, setDouble, (, double, d, ), {]
[return, this, ., number, ;, }, @, Override, public, void, setDouble, (, double, d, ), {, this, ., number, =]
[;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =]
[;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =]
[boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =, super, ., isEquivalentTo, (]
[(, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =, super, ., isEquivalentTo, (, node, ,]
[node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, boolean, equivalent, =, super, ., isEquivalentTo, (, node, ,, compareJsType, ,]
[boolean, recurse, ), {, boolean, equivalent, =, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), ;, if, (]
[=, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =]
[compareJsType, ,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =]
[compareJsType, ,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =]
[,, recurse, ), ;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (]
[;, if, (, equivalent, ), {, double, thisValue, =, getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode, )]
[getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (]
[getDouble, (, ), ;, double, thatValue, =, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (]
[), ;, double, thatValue, =, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==]
[=, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return]
[=, (, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return]
[(, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (]
[(, (, NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (]
[NumberNode, ), node, ), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=]
[), ., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||]
[., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (]
[., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (]
[., getDouble, (, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (]
[(, ), ;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /]
[;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==]
[;, if, (, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==]
[(, thisValue, ==, thatValue, ), {, return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /]
[return, (, thisValue, !=, 0.0, ), ||, (, 1, /, thisValue, ==, 1, /, thatValue, ), ;, }, }, return]
[;, }, private, double, number, ;, }, private, static, class, StringNode, extends, Node, {, private, static, final, long, serialVersionUID, =]
[{, private, static, final, long, serialVersionUID, =, 1L, ;, StringNode, (, int, type, ,, String, str, ), {, super, (]
[serialVersionUID, =, 1L, ;, StringNode, (, int, type, ,, String, str, ), {, super, (, type, ), ;, if, (]
[serialVersionUID, =, 1L, ;, StringNode, (, int, type, ,, String, str, ), {, super, (, type, ), ;, if, (]
[1L, ;, StringNode, (, int, type, ,, String, str, ), {, super, (, type, ), ;, if, (, null, ==]
[int, type, ,, String, str, ), {, super, (, type, ), ;, if, (, null, ==, str, ), {, throw]
[String, str, ), {, super, (, type, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (]
[super, (, type, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[super, (, type, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =]
[str, ;, }, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, super, (]
[}, StringNode, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, super, (, type, ,]
[(, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, super, (, type, ,, lineno, ,]
[str, ,, int, lineno, ,, int, charno, ), {, super, (, type, ,, lineno, ,, charno, ), ;, if, (]
[str, ,, int, lineno, ,, int, charno, ), {, super, (, type, ,, lineno, ,, charno, ), ;, if, (]
[int, lineno, ,, int, charno, ), {, super, (, type, ,, lineno, ,, charno, ), ;, if, (, null, ==]
[charno, ), {, super, (, type, ,, lineno, ,, charno, ), ;, if, (, null, ==, str, ), {, throw]
[super, (, type, ,, lineno, ,, charno, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (]
[lineno, ,, charno, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[lineno, ,, charno, ), ;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[;, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =]
["StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, public, String, getString, (, ), {, return]
["StringNode: str is null", ), ;, }, this, ., str, =, str, ;, }, @, Override, public, String, getString, (, ), {, return]
[), {, return, this, ., str, ;, }, @, Override, public, void, setString, (, String, str, ), {, if, (]
[), {, return, this, ., str, ;, }, @, Override, public, void, setString, (, String, str, ), {, if, (]
[return, this, ., str, ;, }, @, Override, public, void, setString, (, String, str, ), {, if, (, null, ==]
[;, }, @, Override, public, void, setString, (, String, str, ), {, if, (, null, ==, str, ), {, throw]
[Override, public, void, setString, (, String, str, ), {, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (]
[(, String, str, ), {, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[(, String, str, ), {, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }]
[{, if, (, null, ==, str, ), {, throw, new, IllegalArgumentException, (, "StringNode: str is null", ), ;, }, this, ., str, =]
[=, str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return]
[str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (]
[str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (]
[str, ;, }, @, Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (]
[Override, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (]
[isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (, node, ,]
[Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,]
[boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&]
[boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&]
[boolean, compareJsType, ,, boolean, recurse, ), {, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&]
[{, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (]
[{, return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (]
[return, (, super, ., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (]
[., isEquivalentTo, (, node, ,, compareJsType, ,, recurse, ), &&, this, ., str, ., equals, (, (, (, StringNode, )]
[(, StringNode, ), node, ), ., str, ), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return]
[), node, ), ., str, ), ), ;, }, @, Override, public, boolean, isQuotedString, (, ), {, return, getBooleanProp, (]
[boolean, isQuotedString, (, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override, public, void, setQuotedString, (, ), {]
[(, ), {, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override, public, void, setQuotedString, (, ), {, putBooleanProp, (]
[{, return, getBooleanProp, (, QUOTED_PROP, ), ;, }, @, Override, public, void, setQuotedString, (, ), {, putBooleanProp, (, QUOTED_PROP, ,]
[(, ), ;, }, private, static, abstract, class, AbstractPropListItem, implements, PropListItem, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, private, final, PropListItem, next, ;, private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {]
[;, private, final, PropListItem, next, ;, private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {]
[next, ;, private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {, this, ., propType, =]
[private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {, this, ., propType, =, propType, ;]
[private, final, int, propType, ;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {, this, ., propType, =, propType, ;]
[;, AbstractPropListItem, (, int, propType, ,, PropListItem, next, ), {, this, ., propType, =, propType, ;, this, ., next, =]
[propType, =, propType, ;, this, ., next, =, next, ;, }, @, Override, public, int, getType, (, ), {, return]
[Override, public, int, getType, (, ), {, return, propType, ;, }, @, Override, public, PropListItem, getNext, (, ), {, return]
[chain, (, PropListItem, next, ), ;, }, private, static, class, ObjectPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID, =]
[;, private, final, Object, objectValue, ;, ObjectPropListItem, (, int, propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (]
[final, Object, objectValue, ;, ObjectPropListItem, (, int, propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (, propType, ,]
[;, ObjectPropListItem, (, int, propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;]
[;, ObjectPropListItem, (, int, propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;]
[propType, ,, Object, objectValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;, this, ., objectValue, =]
[,, next, ), ;, this, ., objectValue, =, objectValue, ;, }, @, Override, public, int, getIntValue, (, ), {, throw]
[getIntValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, Object, getObjectValue, (, ), {, return]
[Override, public, Object, getObjectValue, (, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return]
[Override, public, Object, getObjectValue, (, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return]
[Override, public, Object, getObjectValue, (, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return]
[Object, getObjectValue, (, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return, objectValue, ==]
[(, ), {, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return, objectValue, ==, null, ?]
[{, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return, objectValue, ==, null, ?, "null", :]
[{, return, objectValue, ;, }, @, Override, public, String, toString, (, ), {, return, objectValue, ==, null, ?, "null", :]
["null", :, objectValue, ., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return]
[., toString, (, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (]
[;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (, getType, (, ), ,]
[@, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, ObjectPropListItem, (, getType, (, ), ,, objectValue, ,]
[objectValue, ,, next, ), ;, }, }, private, static, class, IntPropListItem, extends, AbstractPropListItem, {, private, static, final, long, serialVersionUID, =]
[1L, ;, final, int, intValue, ;, IntPropListItem, (, int, propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (]
[final, int, intValue, ;, IntPropListItem, (, int, propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (, propType, ,]
[;, IntPropListItem, (, int, propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;]
[;, IntPropListItem, (, int, propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;]
[propType, ,, int, intValue, ,, PropListItem, next, ), {, super, (, propType, ,, next, ), ;, this, ., intValue, =]
[,, next, ), ;, this, ., intValue, =, intValue, ;, }, @, Override, public, int, getIntValue, (, ), {, return]
[Override, public, int, getIntValue, (, ), {, return, intValue, ;, }, @, Override, public, Object, getObjectValue, (, ), {, throw]
[getObjectValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[getObjectValue, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, String, ., valueOf, (]
[return, String, ., valueOf, (, intValue, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return]
[valueOf, (, intValue, ), ;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem, (]
[;, }, @, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem, (, getType, (, ), ,]
[@, Override, public, PropListItem, chain, (, PropListItem, next, ), {, return, new, IntPropListItem, (, getType, (, ), ,, intValue, ,]
[IntPropListItem, (, getType, (, ), ,, intValue, ,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {]
[getType, (, ), ,, intValue, ,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =]
[), ,, intValue, ,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;]
[intValue, ,, next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =]
[next, ), ;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null, ;]
[;, }, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =]
[}, }, public, Node, (, int, nodeType, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =, -]
[parent, =, null, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {]
[parent, =, null, ;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {]
[sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (]
[sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (]
[sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (]
[;, }, public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[public, Node, (, int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,]
[int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;]
[int, nodeType, ,, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;]
[child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==]
[(, child, ., parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,]
[parent, ==, null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;]
[null, ,, "new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =]
["new child has existing parent", ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;]
[;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =]
[., checkArgument, (, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;]
[(, child, ., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[., next, ==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =]
[==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;]
[==, null, ,, "new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;]
[), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =]
[type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;]
[type, =, nodeType, ;, parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;]
[parent, =, null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =]
[null, ;, first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;]
[first, =, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =]
[=, last, =, child, ;, child, ., next, =, null, ;, child, ., parent, =, this, ;, sourcePosition, =, -]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {]
[1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[Node, (, int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==]
[int, nodeType, ,, Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,]
[Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;]
[Node, left, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;]
[right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==]
[(, left, ., parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,]
[parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;]
[parent, ==, null, ,, "first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;]
["first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (]
["first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (]
["first new child has existing parent", ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[(, left, ., next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,]
[next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;]
[next, ==, null, ,, "first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;]
["first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
["first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
["first new child has existing sibling", ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[(, right, ., parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,]
[parent, ==, null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;]
[null, ,, "second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =]
["second new child has existing parent", ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =]
[., checkArgument, (, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;]
[(, right, ., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[., next, ==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;]
[==, null, ,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[,, "second new child has existing sibling", ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;]
[null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =]
[first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;]
[first, =, left, ;, last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;]
[last, =, right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =]
[right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;]
[right, ;, left, ., next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;]
[next, =, right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =]
[right, ;, left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;]
[left, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[-, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {]
[-, 1, ;, }, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {]
[public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==]
[left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;]
[left, ,, Node, mid, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==]
[checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;]
[checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==]
[checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;]
[checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==]
[checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;]
[checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;]
[checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;]
[right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;]
[null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;]
[., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[(, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;]
[., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;]
[null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =]
[first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;]
[first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;]
[last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =]
[right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;]
[right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;]
[next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =]
[mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;]
[mid, ;, left, ., parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;]
[parent, =, this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =]
[this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;]
[this, ;, mid, ., next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;]
[next, =, right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =]
[right, ;, mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;]
[mid, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[}, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {]
[}, public, Node, (, int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {]
[int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[int, nodeType, ,, Node, left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (]
[left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==]
[mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;]
[mid, ,, Node, mid2, ,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[,, Node, right, ), {, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==]
[checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;]
[checkArgument, (, left, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==]
[checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;]
[checkArgument, (, left, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==]
[checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;]
[checkArgument, (, mid, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==]
[checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;]
[checkArgument, (, mid, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==]
[checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;]
[checkArgument, (, mid2, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==]
[checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;]
[checkArgument, (, mid2, ., next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[next, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[;, Preconditions, ., checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==]
[checkArgument, (, right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;]
[right, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;]
[null, ), ;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =]
[;, Preconditions, ., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;]
[., checkArgument, (, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =]
[(, right, ., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;]
[., next, ==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[==, null, ), ;, type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;]
[type, =, nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;]
[nodeType, ;, parent, =, null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;]
[null, ;, first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =]
[first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;]
[first, =, left, ;, last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;]
[last, =, right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =]
[right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;]
[right, ;, left, ., next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;]
[next, =, mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =]
[mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;]
[mid, ;, left, ., parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;]
[parent, =, this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =]
[this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;]
[this, ;, mid, ., next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;]
[next, =, mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =]
[mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;]
[mid2, ;, mid, ., parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;]
[parent, =, this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =]
[this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;]
[this, ;, mid2, ., next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;]
[next, =, right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =]
[right, ;, mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;]
[mid2, ., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =]
[., parent, =, this, ;, right, ., next, =, null, ;, right, ., parent, =, this, ;, sourcePosition, =, -]
[;, sourcePosition, =, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {]
[=, -, 1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =]
[1, ;, }, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;]
[}, public, Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent, =]
[Node, (, int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent, =, null, ;]
[int, nodeType, ,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =]
[,, int, lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =, mergeLineCharNo, (]
[lineno, ,, int, charno, ), {, type, =, nodeType, ;, parent, =, null, ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[;, }, public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, ), {, this, (]
[public, Node, (, int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,]
[int, nodeType, ,, Node, child, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, child, ), ;]
[,, Node, child, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, child, ), ;, sourcePosition, =]
[child, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, child, ), ;, sourcePosition, =, mergeLineCharNo, (]
[int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, child, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[Node, (, int, nodeType, ,, Node, left, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (]
[int, nodeType, ,, Node, left, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,]
[,, Node, left, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,]
[,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, right, ), ;]
[right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, right, ), ;, sourcePosition, =]
[int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (]
[,, int, charno, ), {, this, (, nodeType, ,, left, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[nodeType, ,, Node, left, ,, Node, mid, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (]
[Node, left, ,, Node, mid, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,]
[,, Node, mid, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,]
[mid, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,]
[right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, right, ), ;]
[int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, right, ), ;, sourcePosition, =]
[,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (]
[charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[left, ,, Node, mid, ,, Node, mid2, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (]
[Node, mid, ,, Node, mid2, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,]
[,, Node, mid2, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,]
[mid2, ,, Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,]
[Node, right, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, mid2, ,]
[int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, mid2, ,, right, ), ;]
[,, int, charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, mid2, ,, right, ), ;, sourcePosition, =]
[charno, ), {, this, (, nodeType, ,, left, ,, mid, ,, mid2, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (]
[{, this, (, nodeType, ,, left, ,, mid, ,, mid2, ,, right, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[public, Node, (, int, nodeType, ,, Node, [, ], children, ,, int, lineno, ,, int, charno, ), {, this, (]
[(, int, nodeType, ,, Node, [, ], children, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,]
[,, Node, [, ], children, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, children, ), ;]
[[, ], children, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, children, ), ;, sourcePosition, =]
[children, ,, int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, children, ), ;, sourcePosition, =, mergeLineCharNo, (]
[int, lineno, ,, int, charno, ), {, this, (, nodeType, ,, children, ), ;, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {]
[mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {]
[charno, ), ;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type, =]
[;, }, public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;]
[public, Node, (, int, nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;, parent, =]
[nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (]
[nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (]
[nodeType, ,, Node, [, ], children, ), {, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (]
[], children, ), {, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=]
[{, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {]
[{, this, ., type, =, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {]
[=, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =]
[=, nodeType, ;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =]
[;, parent, =, null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, []
[null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;]
[null, ;, if, (, children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;]
[children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =]
[children, ., length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =]
[length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, []
[length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, []
[length, !=, 0, ), {, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, []
[{, this, ., first, =, children, [, 0, ], ;, this, ., last, =, children, [, children, ., length, -]
[], ;, this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =]
[this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;]
[this, ., last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;]
[last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <]
[last, =, children, [, children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <]
[children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;]
[children, ., length, -, 1, ], ;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;]
[;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=]
[(, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=]
[(, int, i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=]
[i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=, children, []
[i, =, 1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=, children, []
[1, ;, i, <, children, ., length, ;, i, ++, ), {, if, (, null, !=, children, [, i, -]
[;, i, ++, ), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw]
[), {, if, (, null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (]
[null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }]
[null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }]
[null, !=, children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }]
[children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, []
[children, [, i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, []
[i, -, 1, ], ., next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -]
[next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =]
[next, ), {, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =]
[{, throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =, children, []
[IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;]
[IllegalArgumentException, (, "duplicate child", ), ;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;]
[;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (]
[;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (]
[;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (]
[;, }, children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (]
[children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, []
[children, [, i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, []
[i, -, 1, ], ., next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -]
[next, =, children, [, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==]
[[, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;]
[[, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;]
[[, i, ], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;]
[], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, []
[], ;, Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, []
[Preconditions, ., checkArgument, (, children, [, i, -, 1, ], ., parent, ==, null, ), ;, children, [, i, -]
[[, i, -, 1, ], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =]
[1, ], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }]
[1, ], ., parent, ==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }]
[==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (]
[==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (]
[==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (]
[==, null, ), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (]
[), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, []
[), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, []
[), ;, children, [, i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, []
[i, -, 1, ], ., parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -]
[parent, =, this, ;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==]
[;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;]
[;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;]
[;, }, Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;]
[Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, []
[Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, []
[Preconditions, ., checkArgument, (, children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, []
[children, [, children, ., length, -, 1, ], ., parent, ==, null, ), ;, children, [, children, ., length, -]
[-, 1, ], ., parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =]
[parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (]
[parent, ==, null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (]
[null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=]
[null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=]
[null, ), ;, children, [, children, ., length, -, 1, ], ., parent, =, this, ;, if, (, null, !=]
[-, 1, ], ., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw]
[., parent, =, this, ;, if, (, null, !=, this, ., last, ., next, ), {, throw, new, IllegalArgumentException, (]
[throw, new, IllegalArgumentException, (, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber, (, double, number, ), {, return]
[(, "duplicate child", ), ;, }, }, }, public, static, Node, newNumber, (, double, number, ), {, return, new, NumberNode, (]
[number, ), ;, }, public, static, Node, newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return]
[}, public, static, Node, newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return, new, NumberNode, (]
[static, Node, newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return, new, NumberNode, (, number, ,]
[newNumber, (, double, number, ,, int, lineno, ,, int, charno, ), {, return, new, NumberNode, (, number, ,, lineno, ,]
[NumberNode, (, number, ,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, String, str, ), {, return]
[,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (]
[,, lineno, ,, charno, ), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (]
[), ;, }, public, static, Node, newString, (, String, str, ), {, return, new, StringNode, (, Token, ., STRING, ,]
[., STRING, ,, str, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return]
[str, ), ;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return, new, StringNode, (]
[;, }, public, static, Node, newString, (, int, type, ,, String, str, ), {, return, new, StringNode, (, type, ,]
[str, ), ;, }, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return]
[}, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (]
[}, public, static, Node, newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (]
[newString, (, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, Token, ., STRING, ,]
[String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, Token, ., STRING, ,, str, ,]
[,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, Token, ., STRING, ,, str, ,, lineno, ,]
[}, public, static, Node, newString, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, return]
[Node, newString, (, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (]
[(, int, type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, type, ,]
[type, ,, String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, type, ,, str, ,]
[String, str, ,, int, lineno, ,, int, charno, ), {, return, new, StringNode, (, type, ,, str, ,, lineno, ,]
[new, StringNode, (, type, ,, str, ,, lineno, ,, charno, ), ;, }, public, int, getType, (, ), {, return]
[;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType, (, int, type, ), {]
[;, }, public, int, getType, (, ), {, return, type, ;, }, public, void, setType, (, int, type, ), {]
[getType, (, ), {, return, type, ;, }, public, void, setType, (, int, type, ), {, this, ., type, =]
[setType, (, int, type, ), {, this, ., type, =, type, ;, }, public, boolean, hasChildren, (, ), {, return]
[setType, (, int, type, ), {, this, ., type, =, type, ;, }, public, boolean, hasChildren, (, ), {, return]
[int, type, ), {, this, ., type, =, type, ;, }, public, boolean, hasChildren, (, ), {, return, first, !=]
[}, public, boolean, hasChildren, (, ), {, return, first, !=, null, ;, }, public, Node, getFirstChild, (, ), {, return]
[null, ;, }, public, Node, getFirstChild, (, ), {, return, first, ;, }, public, Node, getLastChild, (, ), {, return]
[first, ;, }, public, Node, getLastChild, (, ), {, return, last, ;, }, public, Node, getNext, (, ), {, return]
[public, Node, getNext, (, ), {, return, next, ;, }, public, Node, getChildBefore, (, Node, child, ), {, if, (]
[public, Node, getNext, (, ), {, return, next, ;, }, public, Node, getChildBefore, (, Node, child, ), {, if, (]
[getNext, (, ), {, return, next, ;, }, public, Node, getChildBefore, (, Node, child, ), {, if, (, child, ==]
[return, next, ;, }, public, Node, getChildBefore, (, Node, child, ), {, if, (, child, ==, first, ), {, return]
[getChildBefore, (, Node, child, ), {, if, (, child, ==, first, ), {, return, null, ;, }, Node, n, =]
[), {, if, (, child, ==, first, ), {, return, null, ;, }, Node, n, =, first, ;, while, (]
[), {, if, (, child, ==, first, ), {, return, null, ;, }, Node, n, =, first, ;, while, (]
[), {, if, (, child, ==, first, ), {, return, null, ;, }, Node, n, =, first, ;, while, (]
[child, ==, first, ), {, return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=]
[), {, return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {]
[return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {, n, =]
[return, null, ;, }, Node, n, =, first, ;, while, (, n, ., next, !=, child, ), {, n, =]
[=, first, ;, while, (, n, ., next, !=, child, ), {, n, =, n, ., next, ;, if, (]
[=, first, ;, while, (, n, ., next, !=, child, ), {, n, =, n, ., next, ;, if, (]
[;, while, (, n, ., next, !=, child, ), {, n, =, n, ., next, ;, if, (, n, ==]
[., next, !=, child, ), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw]
[child, ), {, n, =, n, ., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (]
[., next, ;, if, (, n, ==, null, ), {, throw, new, RuntimeException, (, "node is not a child", ), ;, }, }, return]
["node is not a child", ), ;, }, }, return, n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =]
[}, return, n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (]
[}, return, n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (]
[n, ;, }, public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (, i, >]
[public, Node, getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (, i, >, 0, ), {]
[getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (, i, >, 0, ), {, n, =]
[getChildAtIndex, (, int, i, ), {, Node, n, =, first, ;, while, (, i, >, 0, ), {, n, =]
[), {, Node, n, =, first, ;, while, (, i, >, 0, ), {, n, =, n, ., next, ;]
[), {, Node, n, =, first, ;, while, (, i, >, 0, ), {, n, =, n, ., next, ;]
[first, ;, while, (, i, >, 0, ), {, n, =, n, ., next, ;, i, --, ;, }, return]
[;, i, --, ;, }, return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =]
[return, n, ;, }, public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int, i, =]
[public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int, i, =, 0, ;, while, (]
[public, int, getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int, i, =, 0, ;, while, (]
[getIndexOfChild, (, Node, child, ), {, Node, n, =, first, ;, int, i, =, 0, ;, while, (, n, !=]
[{, Node, n, =, first, ;, int, i, =, 0, ;, while, (, n, !=, null, ), {, if, (]
[{, Node, n, =, first, ;, int, i, =, 0, ;, while, (, n, !=, null, ), {, if, (]
[n, =, first, ;, int, i, =, 0, ;, while, (, n, !=, null, ), {, if, (, child, ==]
[int, i, =, 0, ;, while, (, n, !=, null, ), {, if, (, child, ==, n, ), {, return]
[0, ;, while, (, n, !=, null, ), {, if, (, child, ==, n, ), {, return, i, ;, }]
[while, (, n, !=, null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =]
[while, (, n, !=, null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =]
[null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =, n, ., next, ;]
[null, ), {, if, (, child, ==, n, ), {, return, i, ;, }, n, =, n, ., next, ;]
[child, ==, n, ), {, return, i, ;, }, n, =, n, ., next, ;, i, ++, ;, }, return]
[==, n, ), {, return, i, ;, }, n, =, n, ., next, ;, i, ++, ;, }, return, -]
[next, ;, i, ++, ;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =]
[;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (]
[;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (]
[;, }, return, -, 1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (]
[1, ;, }, public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=]
[public, Node, getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=, null, ), {]
[getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=, null, ), {, n, =]
[getLastSibling, (, ), {, Node, n, =, this, ;, while, (, n, ., next, !=, null, ), {, n, =]
[=, this, ;, while, (, n, ., next, !=, null, ), {, n, =, n, ., next, ;, }, return]
[{, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {]
[{, n, =, n, ., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {]
[., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[., next, ;, }, return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[return, n, ;, }, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[}, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[}, public, void, addChildToFront, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==]
[checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;]
[checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =]
[null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;]
[null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;]
[., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =]
[(, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;]
[., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =]
[), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (]
[), ;, child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (]
[child, ., parent, =, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==]
[=, this, ;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==, null, ), {]
[;, child, ., next, =, first, ;, first, =, child, ;, if, (, last, ==, null, ), {, last, =]
[(, last, ==, null, ), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {]
[(, last, ==, null, ), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {]
[), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[), {, last, =, child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (]
[child, ;, }, }, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[}, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[}, public, void, addChildToBack, (, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[(, Node, child, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (]
[{, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==]
[checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;]
[checkArgument, (, child, ., parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;]
[parent, ==, null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =]
[null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;]
[null, ), ;, Preconditions, ., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;]
[., checkArgument, (, child, ., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =]
[., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (]
[., next, ==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (]
[==, null, ), ;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==]
[;, child, ., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {]
[., parent, =, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {, first, =]
[=, this, ;, child, ., next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =]
[next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }]
[next, =, null, ;, if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }]
[if, (, last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =]
[last, ==, null, ), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =, child, ;]
[null, ), {, first, =, last, =, child, ;, return, ;, }, last, ., next, =, child, ;, last, =]
[child, ;, last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =]
[last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;]
[last, =, child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;]
[child, ;, }, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child, !=]
[}, public, void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child, !=, null, ;]
[void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =]
[void, addChildrenToFront, (, Node, children, ), {, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =]
[), {, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[), {, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =]
[==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;]
[==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;]
[child, ., parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =]
[parent, =, this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;]
[this, ;, }, Node, lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =]
[lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (]
[lastSib, =, children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (]
[children, ., getLastSibling, (, ), ;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (, last, ==]
[(, ), ;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (, last, ==, null, ), {]
[;, lastSib, ., next, =, first, ;, first, =, children, ;, if, (, last, ==, null, ), {, last, =]
[(, last, ==, null, ), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {]
[==, null, ), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (]
[), {, last, =, lastSib, ;, }, }, public, void, addChildrenToBack, (, Node, children, ), {, addChildrenAfter, (, children, ,]
[(, children, ,, getLastChild, (, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {]
[(, children, ,, getLastChild, (, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {]
[(, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[(, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[(, ), ), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[), ;, }, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=]
[}, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&]
[}, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&]
[}, public, void, addChildBefore, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&]
[(, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&, node, ., parent, ==]
[newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,]
[node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;]
[node, ), {, Preconditions, ., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;]
[., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, node, !=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (]
[!=, null, &&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[&&, node, ., parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
[parent, ==, this, ,, "The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
["The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
["The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
["The existing child node of the parent should not be null.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[(, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,]
[null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (]
[null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (]
["The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {]
[newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =]
[parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;]
[parent, ==, null, ,, "The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;]
["The new child node already has a parent.", ), ;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =]
[;, if, (, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;]
[(, first, ==, node, ), {, newChild, ., parent, =, this, ;, newChild, ., next, =, first, ;, first, =]
[parent, =, this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =]
[this, ;, newChild, ., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (]
[., next, =, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;]
[=, first, ;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (]
[;, first, =, newChild, ;, return, ;, }, Node, prev, =, getChildBefore, (, node, ), ;, addChildAfter, (, newChild, ,]
[;, addChildAfter, (, newChild, ,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {]
[;, addChildAfter, (, newChild, ,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {]
[,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[,, prev, ), ;, }, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[}, public, void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[void, addChildAfter, (, Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[Node, newChild, ,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
[,, Node, node, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, addChildrenAfter, (]
[node, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, addChildrenAfter, (, newChild, ,]
[;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {]
[;, addChildrenAfter, (, newChild, ,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {]
[,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[,, node, ), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (]
[), ;, }, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==]
[}, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||]
[}, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||]
[}, public, void, addChildrenAfter, (, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||]
[(, Node, children, ,, Node, node, ), {, Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., parent, ==]
[Preconditions, ., checkArgument, (, node, ==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =]
[checkArgument, (, node, ==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;]
[checkArgument, (, node, ==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;]
[node, ==, null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=]
[null, ||, node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;]
[node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =]
[node, ., parent, ==, this, ), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =]
[), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[), ;, for, (, Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[Node, child, =, children, ;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (]
[;, child, !=, null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==]
[null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[null, ;, child, =, child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;]
[child, ., next, ), {, Preconditions, ., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =]
[., checkArgument, (, child, ., parent, ==, null, ), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =]
[), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (]
[), ;, child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (]
[child, ., parent, =, this, ;, }, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=]
[}, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext, =]
[}, Node, lastSibling, =, children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext, =]
[children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;]
[children, ., getLastSibling, (, ), ;, if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;]
[), ;, if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =]
[if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;]
[if, (, node, !=, null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;]
[null, ), {, Node, oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =]
[oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (]
[oldNext, =, node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (]
[node, ., next, ;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==]
[;, node, ., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {]
[., next, =, children, ;, lastSibling, ., next, =, oldNext, ;, if, (, node, ==, last, ), {, last, =]
[=, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (]
[=, oldNext, ;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (]
[;, if, (, node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=]
[node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {]
[node, ==, last, ), {, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {]
[{, last, =, lastSibling, ;, }, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next, =]
[}, }, else, {, if, (, first, !=, null, ), {, lastSibling, ., next, =, first, ;, }, else, {]
[else, {, if, (, first, !=, null, ), {, lastSibling, ., next, =, first, ;, }, else, {, last, =]
[(, first, !=, null, ), {, lastSibling, ., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }]
[!=, null, ), {, lastSibling, ., next, =, first, ;, }, else, {, last, =, lastSibling, ;, }, first, =]
[lastSibling, ;, }, first, =, children, ;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =]
[}, first, =, children, ;, }, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (]
[}, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (]
[}, }, public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (]
[public, void, removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==]
[removeChild, (, Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==, null, )]
[Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==, null, ), first, =]
[Node, child, ), {, Node, prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==, null, ), first, =]
[prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else]
[prev, =, getChildBefore, (, child, ), ;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else]
[child, ), ;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else, prev, ., next, =]
[child, ), ;, if, (, prev, ==, null, ), first, =, first, ., next, ;, else, prev, ., next, =]
[==, null, ), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (]
[==, null, ), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (]
[), first, =, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==]
[=, first, ., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, )]
[., next, ;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =]
[;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;]
[;, else, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;]
[next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =]
[child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;]
[child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;]
[if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =]
[null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {]
[null, ;, child, ., parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {]
[parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[parent, =, null, ;, }, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[}, public, void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[void, replaceChild, (, Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
[Node, child, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
[newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
[newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
[newChild, ), {, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[(, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,]
[next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;]
[next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;]
["The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;]
[Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;]
[newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =]
[newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =]
[null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;]
[null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;]
[;, newChild, ., copyInformationFrom, (, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =]
[(, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (]
[(, child, ), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (]
[), ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==]
[., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {]
[=, child, ., next, ;, newChild, ., parent, =, this, ;, if, (, child, ==, first, ), {, first, =]
[=, this, ;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =]
[;, if, (, child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (]
[child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;]
[child, ==, first, ), {, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;]
[{, first, =, newChild, ;, }, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =]
[}, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if, (]
[}, else, {, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if, (]
[{, Node, prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==]
[prev, =, getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, )]
[getChildBefore, (, child, ), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =]
[child, ), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;]
[child, ), ;, prev, ., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;]
[., next, =, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =]
[=, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;]
[=, newChild, ;, }, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;]
[if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =]
[null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {]
[null, ;, child, ., parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {]
[parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[parent, =, null, ;, }, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (]
[}, public, void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==]
[void, replaceChildAfter, (, Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,]
[Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;]
[Node, prevChild, ,, Node, newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;]
[newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[newChild, ), {, Preconditions, ., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==]
[(, prevChild, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,]
[parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
[parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;]
["prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
["prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
["prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==]
[(, newChild, ., next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,]
[next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;]
[next, ==, null, ,, "The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;]
["The new child node has siblings.", ), ;, Preconditions, ., checkArgument, (, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (]
[(, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =]
[(, newChild, ., parent, ==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =]
[==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;]
[==, null, ,, "The new child node already has a parent.", ), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;]
[), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =]
[), ;, newChild, ., copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =]
[copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;]
[copyInformationFrom, (, prevChild, ), ;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;]
[;, Node, child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =]
[child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;]
[child, =, prevChild, ., next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;]
[next, ;, newChild, ., next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =]
[next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (]
[next, =, child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (]
[child, ., next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==]
[next, ;, newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, )]
[newChild, ., parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =]
[parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;]
[parent, =, this, ;, prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;]
[prevChild, ., next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =]
[next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;]
[next, =, newChild, ;, if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;]
[if, (, child, ==, last, ), last, =, newChild, ;, child, ., next, =, null, ;, child, ., parent, =]
[;, child, ., parent, =, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =]
[=, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (]
[=, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (]
[=, null, ;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (]
[;, }, @, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=]
[@, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=, null, &&]
[@, VisibleForTesting, PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=, null, &&]
[PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=, null, &&, propType, !=]
[PropListItem, lookupProperty, (, int, propType, ), {, PropListItem, x, =, propListHead, ;, while, (, x, !=, null, &&, propType, !=]
[PropListItem, x, =, propListHead, ;, while, (, x, !=, null, &&, propType, !=, x, ., getType, (, ), ), {]
[=, propListHead, ;, while, (, x, !=, null, &&, propType, !=, x, ., getType, (, ), ), {, x, =]
[=, propListHead, ;, while, (, x, !=, null, &&, propType, !=, x, ., getType, (, ), ), {, x, =]
[&&, propType, !=, x, ., getType, (, ), ), {, x, =, x, ., getNext, (, ), ;, }, return]
[=, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {]
[=, x, ., getNext, (, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {]
[(, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (]
[(, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (]
[(, ), ;, }, return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (]
[return, x, ;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==]
[;, }, public, Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,]
[Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;]
[Node, clonePropsFrom, (, Node, other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;]
[other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =]
[other, ), {, Preconditions, ., checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =]
[checkState, (, this, ., propListHead, ==, null, ,, "Node has existing properties.", ), ;, this, ., propListHead, =, other, ., propListHead, ;, return]
[=, other, ., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =]
[., propListHead, ;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (]
[;, return, this, ;, }, public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,]
[public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;, if, (]
[public, void, removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;, if, (]
[removeProp, (, int, propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;, if, (, result, !=]
[propType, ), {, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;, if, (, result, !=, propListHead, ), {]
[{, PropListItem, result, =, removeProp, (, propListHead, ,, propType, ), ;, if, (, result, !=, propListHead, ), {, propListHead, =]
[{, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (]
[{, propListHead, =, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (]
[=, result, ;, }, }, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (, item, ==]
[}, private, PropListItem, removeProp, (, PropListItem, item, ,, int, propType, ), {, if, (, item, ==, null, ), {, return]
[item, ,, int, propType, ), {, if, (, item, ==, null, ), {, return, null, ;, }, else, if, (]
[item, ,, int, propType, ), {, if, (, item, ==, null, ), {, return, null, ;, }, else, if, (]
[item, ,, int, propType, ), {, if, (, item, ==, null, ), {, return, null, ;, }, else, if, (]
[if, (, item, ==, null, ), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==]
[null, ), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {, return]
[null, ), {, return, null, ;, }, else, if, (, item, ., getType, (, ), ==, propType, ), {, return]
[getType, (, ), ==, propType, ), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =]
[), ==, propType, ), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (]
[), ==, propType, ), {, return, item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (]
[item, ., getNext, (, ), ;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,]
[;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType, ), ;, if, (]
[;, }, else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType, ), ;, if, (]
[else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType, ), ;, if, (, result, !=]
[else, {, PropListItem, result, =, removeProp, (, item, ., getNext, (, ), ,, propType, ), ;, if, (, result, !=]
[., getNext, (, ), ,, propType, ), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return]
[., getNext, (, ), ,, propType, ), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return]
[,, propType, ), ;, if, (, result, !=, item, ., getNext, (, ), ), {, return, item, ., chain, (]
[!=, item, ., getNext, (, ), ), {, return, item, ., chain, (, result, ), ;, }, else, {, return]
[}, else, {, return, item, ;, }, }, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item, =]
[{, return, item, ;, }, }, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (]
[}, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[}, }, public, Object, getProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[public, Object, getProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==]
[int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return]
[PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return, null, ;, }, return]
[PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return, null, ;, }, return]
[null, ;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return]
[null, ;, }, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return]
[}, return, item, ., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return, getIntProp, (]
[., getObjectValue, (, ), ;, }, public, boolean, getBooleanProp, (, int, propType, ), {, return, getIntProp, (, propType, ), !=]
[return, getIntProp, (, propType, ), !=, 0, ;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =]
[(, propType, ), !=, 0, ;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (]
[;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[;, }, public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[public, int, getIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==]
[int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return]
[PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return, 0, ;, }, return]
[PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, return, 0, ;, }, return]
[}, return, item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =]
[item, ., getIntValue, (, ), ;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (]
[;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[;, }, public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (]
[public, int, getExistingIntProp, (, int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==]
[int, propType, ), {, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, throw]
[{, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (]
[{, PropListItem, item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (]
[item, =, lookupProperty, (, propType, ), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +]
[), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return]
[), ;, if, (, item, ==, null, ), {, throw, new, IllegalStateException, (, "missing prop: ", +, propType, ), ;, }, return]
[}, return, item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {]
[item, ., getIntValue, (, ), ;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (]
[;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (]
[;, }, public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (]
[public, void, putProp, (, int, propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=]
[(, int, propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, null, ), {]
[propType, ,, Object, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, null, ), {, propListHead, =]
[Object, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, null, ), {, propListHead, =, createProp, (]
[), {, removeProp, (, propType, ), ;, if, (, value, !=, null, ), {, propListHead, =, createProp, (, propType, ,]
[removeProp, (, propType, ), ;, if, (, value, !=, null, ), {, propListHead, =, createProp, (, propType, ,, value, ,]
[propType, ,, value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {]
[value, ,, propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (]
[propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,]
[propListHead, ), ;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,]
[;, }, }, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,, value, ?]
[}, public, void, putBooleanProp, (, int, propType, ,, boolean, value, ), {, putIntProp, (, propType, ,, value, ?, 1, :]
[,, value, ?, 1, :, 0, ), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {]
[?, 1, :, 0, ), ;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (]
[;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (]
[;, }, public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (]
[public, void, putIntProp, (, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=]
[(, int, propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, 0, ), {]
[propType, ,, int, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, 0, ), {, propListHead, =]
[int, value, ), {, removeProp, (, propType, ), ;, if, (, value, !=, 0, ), {, propListHead, =, createProp, (]
[), {, removeProp, (, propType, ), ;, if, (, value, !=, 0, ), {, propListHead, =, createProp, (, propType, ,]
[removeProp, (, propType, ), ;, if, (, value, !=, 0, ), {, propListHead, =, createProp, (, propType, ,, value, ,]
[,, propListHead, ), ;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return]
[;, }, }, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return, new, ObjectPropListItem, (]
[}, PropListItem, createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return, new, ObjectPropListItem, (, propType, ,]
[createProp, (, int, propType, ,, Object, value, ,, PropListItem, next, ), {, return, new, ObjectPropListItem, (, propType, ,, value, ,]
[value, ,, next, ), ;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return]
[), ;, }, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new, IntPropListItem, (]
[}, PropListItem, createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new, IntPropListItem, (, propType, ,]
[createProp, (, int, propType, ,, int, value, ,, PropListItem, next, ), {, return, new, IntPropListItem, (, propType, ,, value, ,]
[(, propType, ,, value, ,, next, ), ;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =]
[;, }, private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =]
[private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;]
[private, int, [, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;]
[[, ], getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;, x, !=]
[getSortedPropTypes, (, ), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;]
[), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =]
[), {, int, count, =, 0, ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =]
[for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {]
[for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {]
[null, ;, x, =, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =]
[=, x, ., getNext, (, ), ), {, count, ++, ;, }, int, [, ], keys, =, new, int, []
[count, ++, ;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =]
[;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;]
[;, }, int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;]
[int, [, ], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;, x, !=]
[], keys, =, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;]
[=, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =]
[=, new, int, [, count, ], ;, for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =]
[for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {]
[for, (, PropListItem, x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {]
[x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;]
[x, =, propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;]
[propListHead, ;, x, !=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, []
[!=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =]
[!=, null, ;, x, =, x, ., getNext, (, ), ), {, count, --, ;, keys, [, count, ], =]
[getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, ., getType, (, ), ;, }]
[getNext, (, ), ), {, count, --, ;, keys, [, count, ], =, x, ., getType, (, ), ;, }]
[{, count, --, ;, keys, [, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (]
[keys, [, count, ], =, x, ., getType, (, ), ;, }, Arrays, ., sort, (, keys, ), ;, return]
[., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (]
[., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (]
[., sort, (, keys, ), ;, return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (]
[return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[return, keys, ;, }, public, double, getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[getDouble, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., NUMBER, ), {, throw]
[throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (]
[getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[(, this, +, " is not a number node", ), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (]
[(, this, +, " is not a number node", ), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (]
[(, this, +, " is not a number node", ), ;, }, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (]
[}, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[}, }, public, void, setDouble, (, double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[double, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., NUMBER, ), {, throw]
[throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (]
[getType, (, ), ==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[==, Token, ., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., NUMBER, ), {, throw, new, IllegalStateException, (, "Number node not created with Node.newNumber", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (]
[new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (]
[new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (]
[), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[), ;, }, }, public, String, getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[getString, (, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., STRING, ), {, throw]
[throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (]
[getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[(, this, +, " is not a string node", ), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (]
[(, this, +, " is not a string node", ), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (]
[(, this, +, " is not a string node", ), ;, }, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (]
[}, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[}, }, public, void, setString, (, String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==]
[String, s, ), throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., STRING, ), {, throw]
[throws, UnsupportedOperationException, {, if, (, this, ., getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (]
[getType, (, ), ==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[==, Token, ., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (]
[., STRING, ), {, throw, new, IllegalStateException, (, "String node not created with Node.newString", ), ;, }, else, {, throw, new, UnsupportedOperationException, (, this, +]
[throw, new, UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, @, Override, public, String, toString, (, ), {, return]
[UnsupportedOperationException, (, this, +, " is not a string node", ), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (]
[this, +, " is not a string node", ), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,]
[" is not a string node", ), ;, }, }, @, Override, public, String, toString, (, ), {, return, toString, (, true, ,, true, ,]
[), ;, }, public, String, toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =]
[toString, (, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (]
[,, boolean, printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (, sb, ,]
[printAnnotations, ,, boolean, printType, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (, sb, ,, printSource, ,]
[boolean, printType, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (, sb, ,, printSource, ,, printAnnotations, ,]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (, sb, ,, printSource, ,, printAnnotations, ,, printType, ), ;, return]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, toString, (, sb, ,, printSource, ,, printAnnotations, ,, printType, ), ;, return]
[), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {]
[), ;, }, private, void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {]
[void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, sb, ., append, (]
[void, toString, (, StringBuilder, sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, sb, ., append, (]
[sb, ,, boolean, printSource, ,, boolean, printAnnotations, ,, boolean, printType, ), {, sb, ., append, (, Token, ., name, (]
[printAnnotations, ,, boolean, printType, ), {, sb, ., append, (, Token, ., name, (, type, ), ), ;, if, (]
[printAnnotations, ,, boolean, printType, ), {, sb, ., append, (, Token, ., name, (, type, ), ), ;, if, (]
[{, sb, ., append, (, Token, ., name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {]
[{, sb, ., append, (, Token, ., name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {]
[(, Token, ., name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (]
[name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;]
[name, (, type, ), ), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;]
[), ;, if, (, this, instanceof, StringNode, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[sb, ., append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (]
[sb, ., append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (]
[append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==]
[append, (, ' ', ), ;, sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==]
[sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {]
[sb, ., append, (, getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {]
[getString, (, ), ), ;, }, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (]
[}, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (]
[}, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (]
[}, else, if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (]
[if, (, type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==]
[type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||]
[type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||]
[type, ==, Token, ., FUNCTION, ), {, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||]
[{, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=]
[{, sb, ., append, (, ' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=]
[' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {]
[' ', ), ;, if, (, first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {]
[(, first, ==, null, ||, first, ., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (]
[., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {]
[., getType, (, ), !=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {]
[!=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (]
[!=, Token, ., NAME, ), {, sb, ., append, (, "<invalid>", ), ;, }, else, {, sb, ., append, (]
[;, }, else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (]
[;, }, else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (]
[else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (, type, ==]
[else, {, sb, ., append, (, first, ., getString, (, ), ), ;, }, }, else, if, (, type, ==]
[(, first, ., getString, (, ), ), ;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {]
[(, first, ., getString, (, ), ), ;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {]
[(, ), ), ;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (]
[;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', ), ;]
[;, }, }, else, if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', ), ;]
[if, (, type, ==, Token, ., NUMBER, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[{, sb, ., append, (, ' ', ), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if, (]
[), ;, sb, ., append, (, getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =]
[getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (]
[getDouble, (, ), ), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (]
[), ), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=]
[), ;, }, if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -]
[if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {]
[if, (, printSource, ), {, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {]
[{, int, lineno, =, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {, sb, ., append, (]
[=, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {, sb, ., append, (, ' ', ), ;]
[=, getLineno, (, ), ;, if, (, lineno, !=, -, 1, ), {, sb, ., append, (, ' ', ), ;]
[;, if, (, lineno, !=, -, 1, ), {, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[), {, sb, ., append, (, ' ', ), ;, sb, ., append, (, lineno, ), ;, }, }, if, (]
[;, sb, ., append, (, lineno, ), ;, }, }, if, (, printAnnotations, ), {, int, [, ], keys, =]
[}, if, (, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =]
[(, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;]
[(, printAnnotations, ), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, [, ], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;, i, <, keys, ., length, ;]
[], keys, =, getSortedPropTypes, (, ), ;, for, (, int, i, =, 0, ;, i, <, keys, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, keys, ., length, ;, i, ++, ), {, int, type, =]
[for, (, int, i, =, 0, ;, i, <, keys, ., length, ;, i, ++, ), {, int, type, =]
[int, i, =, 0, ;, i, <, keys, ., length, ;, i, ++, ), {, int, type, =, keys, []
[<, keys, ., length, ;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =]
[., length, ;, i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (]
[i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;]
[i, ++, ), {, int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;]
[int, type, =, keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (]
[keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;]
[keys, [, i, ], ;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;]
[;, PropListItem, x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append, (]
[x, =, lookupProperty, (, type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append, (, propToString, (]
[type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;]
[type, ), ;, sb, ., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;]
[., append, (, " [", ), ;, sb, ., append, (, propToString, (, type, ), ), ;, sb, ., append, (]
[append, (, propToString, (, type, ), ), ;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (]
[), ), ;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :]
[;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :, value, =]
[;, sb, ., append, (, ": ", ), ;, String, value, ;, switch, (, type, ), {, default, :, value, =]
[value, ;, switch, (, type, ), {, default, :, value, =, x, ., toString, (, ), ;, break, ;, }]
[value, ;, switch, (, type, ), {, default, :, value, =, x, ., toString, (, ), ;, break, ;, }]
[type, ), {, default, :, value, =, x, ., toString, (, ), ;, break, ;, }, sb, ., append, (]
[default, :, value, =, x, ., toString, (, ), ;, break, ;, }, sb, ., append, (, value, ), ;]
[default, :, value, =, x, ., toString, (, ), ;, break, ;, }, sb, ., append, (, value, ), ;]
[x, ., toString, (, ), ;, break, ;, }, sb, ., append, (, value, ), ;, sb, ., append, (]
[;, }, sb, ., append, (, value, ), ;, sb, ., append, (, ']', ), ;, }, }, if, (]
[(, value, ), ;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (]
[(, value, ), ;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (]
[), ;, sb, ., append, (, ']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=]
[']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =]
[']', ), ;, }, }, if, (, printType, ), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =]
[), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (]
[), {, if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (]
[if, (, jsType, !=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=]
[!=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {]
[!=, null, ), {, String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {]
[String, jsTypeString, =, jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (]
[jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (, " : ", ), ;]
[jsType, ., toString, (, ), ;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (, " : ", ), ;]
[), ;, if, (, jsTypeString, !=, null, ), {, sb, ., append, (, " : ", ), ;, sb, ., append, (]
[), ;, sb, ., append, (, jsTypeString, ), ;, }, }, }, }, public, String, toStringTree, (, ), {, return]
[(, ), {, return, toStringTreeImpl, (, ), ;, }, private, String, toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =]
[(, ), ;, }, private, String, toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =, new, StringBuilder, (, ), ;]
[;, }, private, String, toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =, new, StringBuilder, (, ), ;, appendStringTree, (]
[toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =, new, StringBuilder, (, ), ;, appendStringTree, (, s, ), ;, return]
[toStringTreeImpl, (, ), {, try, {, StringBuilder, s, =, new, StringBuilder, (, ), ;, appendStringTree, (, s, ), ;, return]
[appendStringTree, (, s, ), ;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw]
[), ;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[), ;, return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[return, s, ., toString, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, "Should not happen\n", +]
[new, RuntimeException, (, "Should not happen\n", +, e, ), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {]
[(, "Should not happen\n", +, e, ), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (]
[+, e, ), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,]
[), ;, }, }, public, void, appendStringTree, (, Appendable, appendable, ), throws, IOException, {, toStringTreeHelper, (, this, ,, 0, ,]
[void, toStringTreeHelper, (, Node, n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =]
[(, Node, n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =, 0, ;]
[(, Node, n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =, 0, ;]
[n, ,, int, level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, !=]
[int, level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, !=, level, ;]
[level, ,, Appendable, sb, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, !=, level, ;, ++]
[sb, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, !=, level, ;, ++, i, ), {]
[sb, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, !=, level, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, !=, level, ;, ++, i, ), {, sb, ., append, (]
[i, =, 0, ;, i, !=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }]
[i, =, 0, ;, i, !=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }]
[i, !=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (]
[i, !=, level, ;, ++, i, ), {, sb, ., append, (, "    ", ), ;, }, sb, ., append, (]
[{, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), ), ;]
[{, sb, ., append, (, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), ), ;]
[(, "    ", ), ;, }, sb, ., append, (, n, ., toString, (, ), ), ;, sb, ., append, (]
[(, n, ., toString, (, ), ), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =]
[(, n, ., toString, (, ), ), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =]
[), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;]
[), ;, sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;]
[sb, ., append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=]
[append, (, '\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;]
['\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =]
['\n', ), ;, for, (, Node, cursor, =, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =]
[=, n, ., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (]
[(, ), ;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,]
[(, ), ;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,]
[;, cursor, !=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +]
[!=, null, ;, cursor, =, cursor, ., getNext, (, ), ), {, toStringTreeHelper, (, cursor, ,, level, +, 1, ,]
[next, ;, private, Node, first, ;, private, Node, last, ;, private, PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =]
[last, ;, private, PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =]
[last, ;, private, PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =]
[;, private, PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =, (]
[;, private, PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =, (]
[PropListItem, propListHead, ;, public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =, (, 1, <<]
[public, static, final, int, COLUMN_BITS, =, 12, ;, public, static, final, int, MAX_COLUMN_NUMBER, =, (, 1, <<, COLUMN_BITS, ), -]
[public, static, final, int, MAX_COLUMN_NUMBER, =, (, 1, <<, COLUMN_BITS, ), -, 1, ;, public, static, final, int, COLUMN_MASK, =]
[private, int, sourcePosition, ;, private, JSType, jsType, ;, private, Node, parent, ;, public, void, setStaticSourceFile, (, StaticSourceFile, file, ), {]
[private, int, sourcePosition, ;, private, JSType, jsType, ;, private, Node, parent, ;, public, void, setStaticSourceFile, (, StaticSourceFile, file, ), {]
[private, JSType, jsType, ;, private, Node, parent, ;, public, void, setStaticSourceFile, (, StaticSourceFile, file, ), {, this, ., putProp, (]
[jsType, ;, private, Node, parent, ;, public, void, setStaticSourceFile, (, StaticSourceFile, file, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,]
[), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {]
[), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {]
[putProp, (, STATIC_SOURCE_FILE, ,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (]
[STATIC_SOURCE_FILE, ,, file, ), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,]
[), ;, }, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (]
[}, public, void, setSourceFileForTesting, (, String, name, ), {, this, ., putProp, (, STATIC_SOURCE_FILE, ,, new, SimpleSourceFile, (, name, ,]
[,, new, SimpleSourceFile, (, name, ,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =]
[,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[,, false, ), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[), ), ;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==]
[;, }, public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?]
[public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?, null, :]
[public, String, getSourceFileName, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?, null, :]
[file, ==, null, ?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return]
[==, null, ?, null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (]
[null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, )]
[null, :, file, ., getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, )]
[getName, (, ), ;, }, public, StaticSourceFile, getStaticSourceFile, (, ), {, return, (, (, StaticSourceFile, ), this, ., getProp, (]
[(, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {]
[(, StaticSourceFile, ), this, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {]
[., getProp, (, STATIC_SOURCE_FILE, ), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (]
[(, STATIC_SOURCE_FILE, ), ), ;, }, public, void, setInputId, (, InputId, inputId, ), {, this, ., putProp, (, INPUT_ID, ,]
[inputId, ), {, this, ., putProp, (, INPUT_ID, ,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return]
[), {, this, ., putProp, (, INPUT_ID, ,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (]
[., putProp, (, INPUT_ID, ,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, )]
[., putProp, (, INPUT_ID, ,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, )]
[,, inputId, ), ;, }, public, InputId, getInputId, (, ), {, return, (, (, InputId, ), this, ., getProp, (]
[InputId, ), this, ., getProp, (, INPUT_ID, ), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =]
[(, INPUT_ID, ), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[(, INPUT_ID, ), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[(, INPUT_ID, ), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return]
[), ), ;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==]
[;, }, public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?]
[public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?, false, :]
[public, boolean, isFromExterns, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, return, file, ==, null, ?, false, :]
[file, ==, null, ?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return]
[null, ?, false, :, file, ., isExtern, (, ), ;, }, public, int, getLength, (, ), {, return, getIntProp, (]
[int, getLength, (, ), {, return, getIntProp, (, LENGTH, ), ;, }, public, void, setLength, (, int, length, ), {]
[(, ), {, return, getIntProp, (, LENGTH, ), ;, }, public, void, setLength, (, int, length, ), {, putIntProp, (]
[{, return, getIntProp, (, LENGTH, ), ;, }, public, void, setLength, (, int, length, ), {, putIntProp, (, LENGTH, ,]
[(, int, length, ), {, putIntProp, (, LENGTH, ,, length, ), ;, }, public, int, getLineno, (, ), {, return]
[length, ), {, putIntProp, (, LENGTH, ,, length, ), ;, }, public, int, getLineno, (, ), {, return, extractLineno, (]
[public, int, getLineno, (, ), {, return, extractLineno, (, sourcePosition, ), ;, }, public, int, getCharno, (, ), {, return]
[getLineno, (, ), {, return, extractLineno, (, sourcePosition, ), ;, }, public, int, getCharno, (, ), {, return, extractCharno, (]
[getCharno, (, ), {, return, extractCharno, (, sourcePosition, ), ;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =]
[(, sourcePosition, ), ;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (]
[(, sourcePosition, ), ;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (]
[), ;, }, public, int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (, file, ==]
[int, getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (, file, ==, null, ), {, return]
[getSourceOffset, (, ), {, StaticSourceFile, file, =, getStaticSourceFile, (, ), ;, if, (, file, ==, null, ), {, return, -]
[=, getStaticSourceFile, (, ), ;, if, (, file, ==, null, ), {, return, -, 1, ;, }, int, lineno, =]
[(, file, ==, null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (]
[(, file, ==, null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (]
[==, null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==]
[null, ), {, return, -, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -]
[-, 1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return]
[1, ;, }, int, lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -]
[lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return]
[lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return]
[lineno, =, getLineno, (, ), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return]
[), ;, if, (, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return, file, ., getLineOffset, (]
[(, lineno, ==, -, 1, ), {, return, -, 1, ;, }, return, file, ., getLineOffset, (, lineno, ), +]
[return, file, ., getLineOffset, (, lineno, ), +, getCharno, (, ), ;, }, public, int, getSourcePosition, (, ), {, return]
[int, getSourcePosition, (, ), {, return, sourcePosition, ;, }, public, void, setLineno, (, int, lineno, ), {, int, charno, =]
[sourcePosition, ;, }, public, void, setLineno, (, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (]
[sourcePosition, ;, }, public, void, setLineno, (, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (]
[}, public, void, setLineno, (, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (, charno, ==]
[public, void, setLineno, (, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (, charno, ==, -]
[(, int, lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (, charno, ==, -, 1, ), {]
[lineno, ), {, int, charno, =, getCharno, (, ), ;, if, (, charno, ==, -, 1, ), {, charno, =]
[int, charno, =, getCharno, (, ), ;, if, (, charno, ==, -, 1, ), {, charno, =, 0, ;, }]
[=, getCharno, (, ), ;, if, (, charno, ==, -, 1, ), {, charno, =, 0, ;, }, sourcePosition, =]
[(, ), ;, if, (, charno, ==, -, 1, ), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (]
[;, if, (, charno, ==, -, 1, ), {, charno, =, 0, ;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,]
[;, }, sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {]
[sourcePosition, =, mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =]
[mergeLineCharNo, (, lineno, ,, charno, ), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo, (]
[charno, ), ;, }, public, void, setCharno, (, int, charno, ), {, sourcePosition, =, mergeLineCharNo, (, getLineno, (, ), ,]
[sourcePosition, =, mergeLineCharNo, (, getLineno, (, ), ,, charno, ), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {]
[sourcePosition, =, mergeLineCharNo, (, getLineno, (, ), ,, charno, ), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {]
[getLineno, (, ), ,, charno, ), ;, }, public, void, setSourceEncodedPosition, (, int, sourcePosition, ), {, this, ., sourcePosition, =]
[(, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {]
[(, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {]
[{, this, ., sourcePosition, =, sourcePosition, ;, }, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {, this, ., sourcePosition, =]
[}, public, void, setSourceEncodedPositionForTree, (, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =]
[(, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[(, int, sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[sourcePosition, ), {, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=]
[{, this, ., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;]
[., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., sourcePosition, =, sourcePosition, ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., setSourceEncodedPositionForTree, (]
[(, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (]
[(, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (]
[(, sourcePosition, ), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (]
[), ;, }, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <]
[}, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0, ||]
[}, }, protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0, ||]
[protected, static, int, mergeLineCharNo, (, int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0, ||, charno, <]
[(, int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0, ||, charno, <, 0, ), {, return]
[int, lineno, ,, int, charno, ), {, if, (, lineno, <, 0, ||, charno, <, 0, ), {, return, -]
[{, if, (, lineno, <, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (]
[{, if, (, lineno, <, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (]
[if, (, lineno, <, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (]
[if, (, lineno, <, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (]
[lineno, <, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &]
[<, 0, ||, charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~]
[charno, <, 0, ), {, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=]
[{, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return]
[{, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return]
[{, return, -, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return]
[-, 1, ;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<]
[;, }, else, if, (, (, charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |]
[charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return]
[charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return]
[charno, &, ~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return]
[~, COLUMN_MASK, ), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<]
[), !=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |]
[!=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (]
[!=, 0, ), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (]
[), {, return, lineno, <<, COLUMN_BITS, |, COLUMN_MASK, ;, }, else, {, return, lineno, <<, COLUMN_BITS, |, (, charno, &]
[|, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (]
[|, (, charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (]
[charno, &, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==]
[&, COLUMN_MASK, ), ;, }, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -]
[}, }, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return]
[}, protected, static, int, extractLineno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -]
[int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, lineCharNo, >, >, >]
[return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (]
[return, lineCharNo, >, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (]
[>, >, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==]
[>, >, COLUMN_BITS, ;, }, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -]
[}, }, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return]
[}, protected, static, int, extractCharno, (, int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -]
[int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[int, lineCharNo, ), {, if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[), {, if, (, lineCharNo, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, lineCharNo, &]
[else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (]
[else, {, return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (]
[return, lineCharNo, &, COLUMN_MASK, ;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==]
[;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==, null, ), {, return]
[;, }, }, public, Iterable, <, Node, >, children, (, ), {, if, (, first, ==, null, ), {, return]
[), {, if, (, first, ==, null, ), {, return, Collections, ., emptySet, (, ), ;, }, else, {, return]
[(, first, ==, null, ), {, return, Collections, ., emptySet, (, ), ;, }, else, {, return, new, SiblingNodeIterable, (]
[{, return, new, SiblingNodeIterable, (, first, ), ;, }, }, public, Iterable, <, Node, >, siblings, (, ), {, return]
[SiblingNodeIterable, (, first, ), ;, }, }, public, Iterable, <, Node, >, siblings, (, ), {, return, new, SiblingNodeIterable, (]
[{, private, final, Node, start, ;, private, Node, current, ;, private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {]
[{, private, final, Node, start, ;, private, Node, current, ;, private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {]
[start, ;, private, Node, current, ;, private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =]
[private, Node, current, ;, private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =, start, ;]
[private, Node, current, ;, private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =, start, ;]
[private, boolean, used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =, start, ;, this, ., current, =]
[used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =, start, ;, this, ., current, =, start, ;]
[used, ;, SiblingNodeIterable, (, Node, start, ), {, this, ., start, =, start, ;, this, ., current, =, start, ;]
[Node, start, ), {, this, ., start, =, start, ;, this, ., current, =, start, ;, this, ., used, =]
[this, ., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (]
[., used, =, false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !]
[false, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !, used, ), {]
[}, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, if, (, !, used, ), {, used, =]
[public, Iterator, <, Node, >, iterator, (, ), {, if, (, !, used, ), {, used, =, true, ;, return]
[(, ), {, if, (, !, used, ), {, used, =, true, ;, return, this, ;, }, else, {, return]
[(, ), {, if, (, !, used, ), {, used, =, true, ;, return, this, ;, }, else, {, return]
[), {, if, (, !, used, ), {, used, =, true, ;, return, this, ;, }, else, {, return, (]
[(, !, used, ), {, used, =, true, ;, return, this, ;, }, else, {, return, (, new, SiblingNodeIterable, (]
[(, start, ), ), ., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[(, start, ), ), ., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[), ), ., iterator, (, ), ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, current, !=]
[hasNext, (, ), {, return, current, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (]
[hasNext, (, ), {, return, current, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (]
[), {, return, current, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, current, ==]
[!=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, current, ==, null, ), {, throw]
[(, ), {, if, (, current, ==, null, ), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return]
[current, ==, null, ), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {]
[null, ), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {, current, =]
[null, ), {, throw, new, NoSuchElementException, (, ), ;, }, try, {, return, current, ;, }, finally, {, current, =]
[{, current, =, current, ., getNext, (, ), ;, }, }, @, Override, public, void, remove, (, ), {, throw]
[public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, PropListItem, getPropListHeadForTesting, (, ), {, return]
[), ;, }, }, PropListItem, getPropListHeadForTesting, (, ), {, return, propListHead, ;, }, public, Node, getParent, (, ), {, return]
[;, }, public, Node, getParent, (, ), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {]
[;, }, public, Node, getParent, (, ), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {]
[getParent, (, ), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {, Preconditions, ., checkArgument, (]
[getParent, (, ), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {, Preconditions, ., checkArgument, (]
[), {, return, parent, ;, }, public, Node, getAncestor, (, int, level, ), {, Preconditions, ., checkArgument, (, level, >=]
[public, Node, getAncestor, (, int, level, ), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =]
[int, level, ), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (]
[int, level, ), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (]
[int, level, ), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (]
[), {, Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=]
[Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&]
[Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&]
[Preconditions, ., checkArgument, (, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&]
[(, level, >=, 0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >]
[0, ), ;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {]
[;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node, =]
[;, Node, node, =, this, ;, while, (, node, !=, null, &&, level, --, >, 0, ), {, node, =]
[node, !=, null, &&, level, --, >, 0, ), {, node, =, node, ., getParent, (, ), ;, }, return]
[node, =, node, ., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return]
[., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return, new, AncestorIterable, (]
[., getParent, (, ), ;, }, return, node, ;, }, public, AncestorIterable, getAncestors, (, ), {, return, new, AncestorIterable, (]
[public, static, class, AncestorIterable, implements, Iterable, <, Node, >, {, private, Node, cur, ;, AncestorIterable, (, Node, cur, ), {]
[public, static, class, AncestorIterable, implements, Iterable, <, Node, >, {, private, Node, cur, ;, AncestorIterable, (, Node, cur, ), {]
[implements, Iterable, <, Node, >, {, private, Node, cur, ;, AncestorIterable, (, Node, cur, ), {, this, ., cur, =]
[{, this, ., cur, =, cur, ;, }, @, Override, public, Iterator, <, Node, >, iterator, (, ), {, return]
[), {, return, new, Iterator, <, Node, >, (, ), {, @, Override, public, boolean, hasNext, (, ), {, return]
[), {, return, new, Iterator, <, Node, >, (, ), {, @, Override, public, boolean, hasNext, (, ), {, return]
[return, new, Iterator, <, Node, >, (, ), {, @, Override, public, boolean, hasNext, (, ), {, return, cur, !=]
[hasNext, (, ), {, return, cur, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (]
[(, ), {, return, cur, !=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, !]
[!=, null, ;, }, @, Override, public, Node, next, (, ), {, if, (, !, hasNext, (, ), ), throw]
[next, (, ), {, if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException, (, ), ;, Node, n, =]
[), {, if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;]
[if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =]
[if, (, !, hasNext, (, ), ), throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =]
[throw, new, NoSuchElementException, (, ), ;, Node, n, =, cur, ;, cur, =, cur, ., getParent, (, ), ;, return]
[=, cur, ., getParent, (, ), ;, return, n, ;, }, @, Override, public, void, remove, (, ), {, throw]
[), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return]
[), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return]
[), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return]
[throw, new, UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=]
[UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=, null, &&]
[UnsupportedOperationException, (, ), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=, null, &&]
[), ;, }, }, ;, }, }, public, boolean, hasOneChild, (, ), {, return, first, !=, null, &&, first, ==]
[(, ), {, return, first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return]
[(, ), {, return, first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return]
[(, ), {, return, first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return]
[{, return, first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=]
[first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&]
[first, !=, null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&]
[null, &&, first, ==, last, ;, }, public, boolean, hasMoreThanOneChild, (, ), {, return, first, !=, null, &&, first, !=]
[{, return, first, !=, null, &&, first, !=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =]
[!=, last, ;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =]
[;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;]
[;, }, public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;]
[public, int, getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;, n, !=]
[getChildCount, (, ), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;, n, !=, null, ;]
[), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =]
[), {, int, c, =, 0, ;, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =]
[=, 0, ;, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., next, )]
[=, 0, ;, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., next, )]
[(, Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., next, ), c, ++, ;, return]
[c, ++, ;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =]
[;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;]
[;, return, c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;]
[c, ;, }, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;, n, !=]
[}, public, boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;, n, !=, null, ;]
[boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =]
[boolean, hasChild, (, Node, child, ), {, for, (, Node, n, =, first, ;, n, !=, null, ;, n, =]
[Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[Node, n, =, first, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (]
[=, first, ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return]
[n, ., getNext, (, ), ), {, if, (, child, ==, n, ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =]
[;, }, }, return, false, ;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (]
[;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (]
[;, }, public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (]
[public, String, checkTreeEquals, (, Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[Node, node2, ), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return]
[), {, NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +]
[NodeMismatch, diff, =, checkTreeEqualsImpl, (, node2, ), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +]
[(, node2, ), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +]
[), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +]
[), ;, if, (, diff, !=, null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +]
[null, ), {, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +]
[{, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +]
[{, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +]
[{, return, "Node tree inequality:", +, "\nTree1:\n", +, toStringTree, (, ), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +]
[), +, "\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +]
["\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +]
["\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +]
["\n\nTree2:\n", +, node2, ., toStringTree, (, ), +, "\n\nSubtree1: ", +, diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +]
[diff, ., nodeA, ., toStringTree, (, ), +, "\n\nSubtree2: ", +, diff, ., nodeB, ., toStringTree, (, ), ;, }, return]
[nodeB, ., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (]
[., toStringTree, (, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !]
[(, ), ;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (]
[;, }, return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,]
[return, null, ;, }, NodeMismatch, checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, false, ,]
[checkTreeEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, false, ,, false, ), ), {, return]
[node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, false, ,, false, ), ), {, return, new, NodeMismatch, (]
[{, if, (, !, isEquivalentTo, (, node2, ,, false, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,]
[,, false, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =]
[NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (]
[this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =]
[node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==]
[n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&]
[n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&]
[n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=]
[for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;]
[n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =]
[n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =]
[n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,]
[node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[!=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==]
[=, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw]
[=, n2, ., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }]
[., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =]
[., next, ), {, if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =]
[if, (, node2, ==, null, ), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (]
[), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (]
[), {, throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (]
[throw, new, IllegalStateException, (, ), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=]
[), ;, }, res, =, n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return]
[n, ., checkTreeEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return]
[), {, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (]
[{, return, res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !]
[res, ;, }, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (]
[}, }, return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,]
[return, res, ;, }, NodeMismatch, checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, true, ,]
[checkTreeTypeAwareEqualsImpl, (, Node, node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, true, ,, false, ), ), {, return]
[node2, ), {, if, (, !, isEquivalentTo, (, node2, ,, true, ,, false, ), ), {, return, new, NodeMismatch, (]
[{, if, (, !, isEquivalentTo, (, node2, ,, true, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,]
[,, true, ,, false, ), ), {, return, new, NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =]
[NodeMismatch, (, this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (]
[this, ,, node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =]
[node2, ), ;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[;, }, NodeMismatch, res, =, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[=, null, ;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;]
[;, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==]
[n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&]
[n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&]
[n2, ;, for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=]
[for, (, n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;]
[n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =]
[n, =, first, ,, n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =]
[n2, =, node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,]
[node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[node2, ., first, ;, res, ==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[==, null, &&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =]
[&&, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =]
[;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (]
[next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (]
[next, ,, n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (]
[n2, =, n2, ., next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=]
[next, ), {, res, =, n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return]
[n, ., checkTreeTypeAwareEqualsImpl, (, n2, ), ;, if, (, res, !=, null, ), {, return, res, ;, }, }, return]
[), {, return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return]
[return, res, ;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return, isEquivalentTo, (]
[;, }, }, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return, isEquivalentTo, (, node, ,]
[}, return, res, ;, }, public, boolean, isEquivalentTo, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, false, ,]
[return, isEquivalentTo, (, node, ,, false, ,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return]
[(, node, ,, false, ,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (]
[,, false, ,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,]
[,, true, ), ;, }, public, boolean, isEquivalentToTyped, (, Node, node, ), {, return, isEquivalentTo, (, node, ,, true, ,]
[,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (]
[,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (]
[,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (]
[,, true, ), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (]
[), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=]
[), ;, }, boolean, isEquivalentTo, (, Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=]
[Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=, node, ., getType, (, ), ||]
[Node, node, ,, boolean, compareJsType, ,, boolean, recurse, ), {, if, (, type, !=, node, ., getType, (, ), ||]
[compareJsType, ,, boolean, recurse, ), {, if, (, type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=]
[compareJsType, ,, boolean, recurse, ), {, if, (, type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=]
[if, (, type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||]
[if, (, type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||]
[if, (, type, !=, node, ., getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||]
[getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=]
[getType, (, ), ||, getChildCount, (, ), !=, node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=]
[node, ., getChildCount, (, ), ||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return]
[||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (]
[||, this, ., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (]
[., getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&]
[getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !]
[getClass, (, ), !=, node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !]
[node, ., getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (]
[getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,]
[getClass, (, ), ), {, return, false, ;, }, if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,]
[if, (, compareJsType, &&, !, JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return]
[JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (]
[JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (]
[JSType, ., isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (]
[isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==]
[isEquivalent, (, jsType, ,, node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==]
[node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||]
[node, ., getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||]
[getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==]
[getJSType, (, ), ), ), {, return, false, ;, }, if, (, type, ==, Token, ., INC, ||, type, ==]
[;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =]
[;, }, if, (, type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =]
[type, ==, Token, ., INC, ||, type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (]
[type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =]
[type, ==, Token, ., DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =]
[DEC, ), {, int, post1, =, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (]
[=, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (]
[=, this, ., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (]
[., getIntProp, (, INCRDECR_PROP, ), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=]
[), ;, int, post2, =, node, ., getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return]
[getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (]
[getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (]
[getIntProp, (, INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (]
[INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==]
[INCRDECR_PROP, ), ;, if, (, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==]
[(, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||]
[(, post1, !=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||]
[!=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==]
[!=, post2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==]
[}, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (]
[}, }, else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (]
[else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==]
[else, if, (, type, ==, Token, ., STRING, ||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==]
[||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =]
[||, type, ==, Token, ., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =]
[., STRING_KEY, ), {, if, (, type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (]
[type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =]
[type, ==, Token, ., STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =]
[STRING_KEY, ), {, int, quoted1, =, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (]
[=, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (]
[=, this, ., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (]
[., getIntProp, (, QUOTED_PROP, ), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=]
[), ;, int, quoted2, =, node, ., getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return]
[getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =]
[getIntProp, (, QUOTED_PROP, ), ;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =]
[;, if, (, quoted1, !=, quoted2, ), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (]
[), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =]
[), {, return, false, ;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =]
[;, }, }, int, slashV1, =, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (]
[=, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (]
[=, this, ., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (]
[., getIntProp, (, SLASH_V, ), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=]
[), ;, int, slashV2, =, node, ., getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return]
[getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (]
[getIntProp, (, SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (]
[SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==]
[SLASH_V, ), ;, if, (, slashV1, !=, slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==]
[slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (]
[slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (]
[slashV2, ), {, return, false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (]
[false, ;, }, }, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (]
[}, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=]
[}, else, if, (, type, ==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=]
[type, ==, Token, ., CALL, ), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (]
[), {, if, (, this, ., getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return]
[getBooleanProp, (, FREE_CALL, ), !=, node, ., getBooleanProp, (, FREE_CALL, ), ), {, return, false, ;, }, }, if, (]
[), ), {, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (]
[{, return, false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n, =]
[false, ;, }, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,]
[}, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[}, }, if, (, recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =]
[recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;]
[recurse, ), {, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;]
[{, Node, n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;, n, !=]
[n, ,, n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;, n, !=, null, ;]
[n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =]
[n2, ;, for, (, n, =, first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =]
[n, =, first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,]
[first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[first, ,, n2, =, node, ., first, ;, n, !=, null, ;, n, =, n, ., next, ,, n2, =]
[;, n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (]
[n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !]
[n, !=, null, ;, n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !]
[n, =, n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (]
[n, ., next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,]
[next, ,, n2, =, n2, ., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,]
[., next, ), {, if, (, !, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), ), {, return]
[!, n, ., isEquivalentTo, (, n2, ,, compareJsType, ,, true, ), ), {, return, false, ;, }, }, }, return]
[), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (]
[), {, return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (]
[return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (, type, ==]
[return, false, ;, }, }, }, return, true, ;, }, public, String, getQualifiedName, (, ), {, if, (, type, ==]
[;, }, public, String, getQualifiedName, (, ), {, if, (, type, ==, Token, ., NAME, ), {, String, name, =]
[(, ), {, if, (, type, ==, Token, ., NAME, ), {, String, name, =, getString, (, ), ;, return]
[(, ), {, if, (, type, ==, Token, ., NAME, ), {, String, name, =, getString, (, ), ;, return]
[(, ), {, if, (, type, ==, Token, ., NAME, ), {, String, name, =, getString, (, ), ;, return]
[==, Token, ., NAME, ), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?]
[., NAME, ), {, String, name, =, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :]
[=, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (]
[=, getString, (, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (]
[(, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (, type, ==]
[(, ), ;, return, name, ., isEmpty, (, ), ?, null, :, name, ;, }, else, if, (, type, ==]
[), ?, null, :, name, ;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =]
[), ?, null, :, name, ;, }, else, if, (, type, ==, Token, ., GETPROP, ), {, String, left, =]
[type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[type, ==, Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[Token, ., GETPROP, ), {, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==]
[{, String, left, =, getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return]
[), ., getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return, left, +]
[getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return, left, +, ".", +]
[getQualifiedName, (, ), ;, if, (, left, ==, null, ), {, return, null, ;, }, return, left, +, ".", +]
[null, ;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (]
[null, ;, }, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (]
[}, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==]
[}, return, left, +, ".", +, getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==]
[getLastChild, (, ), ., getString, (, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, return]
[), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, return, "this", ;, }, else, {, return]
[{, return, "this", ;, }, else, {, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch, (]
[{, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case]
[{, return, null, ;, }, }, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case]
[}, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[}, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[}, public, boolean, isQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[(, getType, (, ), ), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?]
[(, ), ), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :]
[{, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case]
[{, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case]
[:, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS, :, return]
[(, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case]
[(, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case]
[), ?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return]
[), ?, false, :, true, ;, case, Token, ., THIS, :, return, true, ;, case, Token, ., GETPROP, :, return]
[return, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isQualifiedName, (, ), ;, default, :, return]
[., isQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (]
[:, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case]
[:, return, false, ;, }, }, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case]
[}, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[}, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[}, public, boolean, isUnscopedQualifiedName, (, ), {, switch, (, getType, (, ), ), {, case, Token, ., NAME, :, return]
[(, getType, (, ), ), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?]
[(, ), ), {, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :]
[{, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case]
[{, case, Token, ., NAME, :, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case]
[:, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., GETPROP, :, return]
[:, return, getString, (, ), ., isEmpty, (, ), ?, false, :, true, ;, case, Token, ., GETPROP, :, return]
[:, true, ;, case, Token, ., GETPROP, :, return, getFirstChild, (, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return]
[(, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {]
[(, ), ., isUnscopedQualifiedName, (, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {]
[(, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (]
[(, ), ;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (]
[;, default, :, return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=]
[return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=, null, ), ;]
[return, false, ;, }, }, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=, null, ), ;]
[}, public, Node, detachFromParent, (, ), {, Preconditions, ., checkState, (, parent, !=, null, ), ;, parent, ., removeChild, (]
[(, ), {, Preconditions, ., checkState, (, parent, !=, null, ), ;, parent, ., removeChild, (, this, ), ;, return]
[parent, ., removeChild, (, this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =]
[this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (]
[this, ), ;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (]
[;, return, this, ;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child, !=]
[;, }, public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child, !=, null, ), {]
[public, Node, removeFirstChild, (, ), {, Node, child, =, first, ;, if, (, child, !=, null, ), {, removeChild, (]
[{, Node, child, =, first, ;, if, (, child, !=, null, ), {, removeChild, (, child, ), ;, }, return]
[{, removeChild, (, child, ), ;, }, return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children, =]
[return, child, ;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =]
[;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;]
[;, }, public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;]
[public, Node, removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;, child, !=]
[removeChildren, (, ), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;, child, !=, null, ;]
[), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;, child, !=, null, ;, child, =]
[), {, Node, children, =, first, ;, for, (, Node, child, =, first, ;, child, !=, null, ;, child, =]
[for, (, Node, child, =, first, ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[for, (, Node, child, =, first, ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[=, first, ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =]
[child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }]
[null, ;, child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =]
[child, =, child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null, ;]
[child, ., getNext, (, ), ), {, child, ., parent, =, null, ;, }, first, =, null, ;, last, =]
[(, ), ), {, child, ., parent, =, null, ;, }, first, =, null, ;, last, =, null, ;, return]
[;, last, =, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =]
[=, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;]
[=, null, ;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;]
[;, return, children, ;, }, public, void, detachChildren, (, ), {, for, (, Node, child, =, first, ;, child, !=]
[detachChildren, (, ), {, for, (, Node, child, =, first, ;, child, !=, null, ;, ), {, Node, nextChild, =]
[detachChildren, (, ), {, for, (, Node, child, =, first, ;, child, !=, null, ;, ), {, Node, nextChild, =]
[Node, child, =, first, ;, child, !=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;]
[Node, child, =, first, ;, child, !=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;]
[;, child, !=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =]
[!=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;]
[!=, null, ;, ), {, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;]
[{, Node, nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;, child, ., next, =]
[nextChild, =, child, ., getNext, (, ), ;, child, ., parent, =, null, ;, child, ., next, =, null, ;]
[child, ., getNext, (, ), ;, child, ., parent, =, null, ;, child, ., next, =, null, ;, child, =]
[(, ), ;, child, ., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }]
[;, child, ., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =]
[., parent, =, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;]
[=, null, ;, child, ., next, =, null, ;, child, =, nextChild, ;, }, first, =, null, ;, last, =]
[nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {]
[nextChild, ;, }, first, =, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {]
[=, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (]
[=, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (]
[=, null, ;, last, =, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (]
[=, null, ;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==]
[;, }, public, Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,]
[Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;]
[Node, removeChildAfter, (, Node, prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;]
[prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[prev, ), {, Preconditions, ., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (]
[., checkArgument, (, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=]
[(, prev, ., parent, ==, this, ,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =]
[,, "prev is not a child of this node.", ), ;, Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =]
[Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;]
[Preconditions, ., checkArgument, (, prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;]
[prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =]
[prev, ., next, !=, null, ,, "no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =]
["no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (]
["no next sibling.", ), ;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (]
[;, Node, child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==]
[child, =, prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, )]
[prev, ., next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =]
[next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;]
[next, ;, prev, ., next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;]
[next, =, child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =]
[child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;]
[child, ., next, ;, if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;]
[if, (, child, ==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =]
[==, last, ), last, =, prev, ;, child, ., next, =, null, ;, child, ., parent, =, null, ;, return]
[., parent, =, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {]
[=, null, ;, return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =]
[return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node, )]
[return, child, ;, }, public, Node, cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node, )]
[cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node, ), super, ., clone, (, ), ;]
[cloneNode, (, ), {, Node, result, ;, try, {, result, =, (, Node, ), super, ., clone, (, ), ;]
[Node, result, ;, try, {, result, =, (, Node, ), super, ., clone, (, ), ;, result, ., next, =]
[;, try, {, result, =, (, Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;]
[;, try, {, result, =, (, Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;]
[=, (, Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =]
[Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =, null, ;]
[Node, ), super, ., clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =, null, ;]
[clone, (, ), ;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =]
[), ;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;]
[), ;, result, ., next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;]
[next, =, null, ;, result, ., first, =, null, ;, result, ., last, =, null, ;, result, ., parent, =]
[result, ., last, =, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw]
[=, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (]
[=, null, ;, result, ., parent, =, null, ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (]
[}, catch, (, CloneNotSupportedException, e, ), {, throw, new, RuntimeException, (, e, ., getMessage, (, ), ), ;, }, return]
[., getMessage, (, ), ), ;, }, return, result, ;, }, public, Node, cloneTree, (, ), {, Node, result, =]
[;, }, public, Node, cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =]
[cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;]
[cloneTree, (, ), {, Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;]
[), {, Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;, n2, !=]
[Node, result, =, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;, n2, !=, null, ;]
[=, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;, n2, !=, null, ;, n2, =]
[=, cloneNode, (, ), ;, for, (, Node, n2, =, getFirstChild, (, ), ;, n2, !=, null, ;, n2, =]
[getFirstChild, (, ), ;, n2, !=, null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =]
[getFirstChild, (, ), ;, n2, !=, null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =]
[null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;]
[null, ;, n2, =, n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;]
[n2, ., getNext, (, ), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =]
[), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (]
[), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (]
[), ), {, Node, n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (]
[n2clone, =, n2, ., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=]
[., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=, null, ), {]
[., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=, null, ), {]
[., cloneTree, (, ), ;, n2clone, ., parent, =, result, ;, if, (, result, ., last, !=, null, ), {]
[., parent, =, result, ;, if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =]
[if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (]
[if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (]
[if, (, result, ., last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (]
[last, !=, null, ), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==]
[), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {]
[), {, result, ., last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {]
[last, ., next, =, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =]
[=, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone, ;, }]
[=, n2clone, ;, }, if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone, ;, }]
[if, (, result, ., first, ==, null, ), {, result, ., first, =, n2clone, ;, }, result, ., last, =]
[first, ==, null, ), {, result, ., first, =, n2clone, ;, }, result, ., last, =, n2clone, ;, }, return]
[., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (]
[., last, =, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (]
[=, n2clone, ;, }, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (]
[}, return, result, ;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==]
[;, }, public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {]
[public, Node, copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (]
[copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[copyInformationFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==]
[,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {]
[., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (]
[(, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,]
[(, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,]
[;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (]
[getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;]
[STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return]
[;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {]
[=, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (]
[;, }, public, Node, copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =]
[copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[copyInformationFromForTree, (, Node, other, ), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[Node, other, ), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=]
[), {, copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;]
[copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[copyInformationFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (]
[null, ;, child, =, child, ., getNext, (, ), ), {, child, ., copyInformationFromForTree, (, other, ), ;, }, return]
[child, ., copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {]
[copyInformationFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (]
[other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[other, ), ;, }, return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[return, this, ;, }, public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (]
[public, Node, useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;]
[useSourceInfoFrom, (, Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (]
[Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,]
[Node, other, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (]
[other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;]
[getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[getProp, (, ORIGINALNAME_PROP, ), ), ;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[;, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, return]
[;, sourcePosition, =, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return]
[=, other, ., sourcePosition, ;, return, this, ;, }, public, Node, srcref, (, Node, other, ), {, return, useSourceInfoFrom, (]
[(, Node, other, ), {, return, useSourceInfoFrom, (, other, ), ;, }, public, Node, useSourceInfoFromForTree, (, Node, other, ), {]
[other, ), {, return, useSourceInfoFrom, (, other, ), ;, }, public, Node, useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (]
[;, }, public, Node, useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =]
[useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[useSourceInfoFromForTree, (, Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[Node, other, ), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=]
[), {, useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;]
[useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[useSourceInfoFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (]
[null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoFromForTree, (, other, ), ;, }, return]
[., useSourceInfoFromForTree, (, other, ), ;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other, ), {, return]
[(, other, ), ;, }, return, this, ;, }, public, Node, srcrefTree, (, Node, other, ), {, return, useSourceInfoFromForTree, (]
[other, ), {, return, useSourceInfoFromForTree, (, other, ), ;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (]
[other, ), {, return, useSourceInfoFromForTree, (, other, ), ;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (]
[{, return, useSourceInfoFromForTree, (, other, ), ;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (]
[(, other, ), ;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==]
[;, }, public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {]
[public, Node, useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (]
[useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[useSourceInfoIfMissingFrom, (, Node, other, ), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,]
[), {, if, (, getProp, (, ORIGINALNAME_PROP, ), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[), ==, null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (]
[null, ), {, putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (]
[putProp, (, ORIGINALNAME_PROP, ,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==]
[,, other, ., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {]
[., getProp, (, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (]
[(, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,]
[(, ORIGINALNAME_PROP, ), ), ;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,]
[;, }, if, (, getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (]
[getProp, (, STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;]
[STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[STATIC_SOURCE_FILE, ), ==, null, ), {, putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =]
[putProp, (, STATIC_SOURCE_FILE, ,, other, ., getProp, (, STATIC_SOURCE_FILE, ), ), ;, sourcePosition, =, other, ., sourcePosition, ;, }, return]
[;, sourcePosition, =, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {]
[=, other, ., sourcePosition, ;, }, return, this, ;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (]
[;, }, public, Node, useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =]
[useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[useSourceInfoIfMissingFromForTree, (, Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;]
[Node, other, ), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=]
[), {, useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;]
[useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[useSourceInfoIfMissingFrom, (, other, ), ;, for, (, Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[Node, child, =, getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (]
[null, ;, child, =, child, ., getNext, (, ), ), {, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return]
[{, child, ., useSourceInfoIfMissingFromForTree, (, other, ), ;, }, return, this, ;, }, public, JSType, getJSType, (, ), {, return]
[;, }, public, JSType, getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType, (, JSType, jsType, ), {]
[;, }, public, JSType, getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType, (, JSType, jsType, ), {]
[getJSType, (, ), {, return, jsType, ;, }, public, void, setJSType, (, JSType, jsType, ), {, this, ., jsType, =]
[setJSType, (, JSType, jsType, ), {, this, ., jsType, =, jsType, ;, }, public, FileLevelJsDocBuilder, getJsDocBuilderForNode, (, ), {, return]
[FileLevelJsDocBuilder, (, ), ;, }, public, class, FileLevelJsDocBuilder, {, public, void, append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =]
[class, FileLevelJsDocBuilder, {, public, void, append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (]
[class, FileLevelJsDocBuilder, {, public, void, append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (]
[{, public, void, append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (, jsDocInfo, ==]
[append, (, String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (, jsDocInfo, ==, null, ), {]
[String, fileLevelComment, ), {, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (, jsDocInfo, ==, null, ), {, jsDocInfo, =]
[{, JSDocInfo, jsDocInfo, =, getJSDocInfo, (, ), ;, if, (, jsDocInfo, ==, null, ), {, jsDocInfo, =, new, JSDocInfo, (]
[;, if, (, jsDocInfo, ==, null, ), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =]
[;, if, (, jsDocInfo, ==, null, ), {, jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =]
[jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (]
[jsDocInfo, =, new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (]
[new, JSDocInfo, (, false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==]
[false, ), ;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {]
[;, }, String, license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =]
[license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =, "", ;, }]
[license, =, jsDocInfo, ., getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =, "", ;, }]
[getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (]
[getLicense, (, ), ;, if, (, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (]
[), ;, if, (, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +]
[(, license, ==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;]
[==, null, ), {, license, =, "", ;, }, jsDocInfo, ., setLicense, (, license, +, fileLevelComment, ), ;, setJSDocInfo, (]
[(, license, +, fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return]
[fileLevelComment, ), ;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, )]
[;, setJSDocInfo, (, jsDocInfo, ), ;, }, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, (, JSDocInfo, ), getProp, (]
[), {, return, (, JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, ), ;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {]
[return, (, JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, ), ;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (]
[JSDocInfo, ), getProp, (, JSDOC_INFO_PROP, ), ;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (, JSDOC_INFO_PROP, ,]
[JSDOC_INFO_PROP, ), ;, }, public, Node, setJSDocInfo, (, JSDocInfo, info, ), {, putProp, (, JSDOC_INFO_PROP, ,, info, ), ;, return]
[{, putProp, (, JSDOC_INFO_PROP, ,, info, ), ;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {]
[(, JSDOC_INFO_PROP, ,, info, ), ;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (]
[,, info, ), ;, return, this, ;, }, public, void, setVarArgs, (, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,]
[(, boolean, varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, ), ;, }, public, boolean, isVarArgs, (, ), {, return]
[varArgs, ), {, putBooleanProp, (, VAR_ARGS_NAME, ,, varArgs, ), ;, }, public, boolean, isVarArgs, (, ), {, return, getBooleanProp, (]
[boolean, isVarArgs, (, ), {, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void, setOptionalArg, (, boolean, optionalArg, ), {]
[(, ), {, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void, setOptionalArg, (, boolean, optionalArg, ), {, putBooleanProp, (]
[{, return, getBooleanProp, (, VAR_ARGS_NAME, ), ;, }, public, void, setOptionalArg, (, boolean, optionalArg, ), {, putBooleanProp, (, OPT_ARG_NAME, ,]
[(, boolean, optionalArg, ), {, putBooleanProp, (, OPT_ARG_NAME, ,, optionalArg, ), ;, }, public, boolean, isOptionalArg, (, ), {, return]
[optionalArg, ), {, putBooleanProp, (, OPT_ARG_NAME, ,, optionalArg, ), ;, }, public, boolean, isOptionalArg, (, ), {, return, getBooleanProp, (]
[boolean, isOptionalArg, (, ), {, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void, setIsSyntheticBlock, (, boolean, val, ), {]
[(, ), {, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void, setIsSyntheticBlock, (, boolean, val, ), {, putBooleanProp, (]
[{, return, getBooleanProp, (, OPT_ARG_NAME, ), ;, }, public, void, setIsSyntheticBlock, (, boolean, val, ), {, putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,]
[(, boolean, val, ), {, putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,, val, ), ;, }, public, boolean, isSyntheticBlock, (, ), {, return]
[val, ), {, putBooleanProp, (, SYNTHETIC_BLOCK_PROP, ,, val, ), ;, }, public, boolean, isSyntheticBlock, (, ), {, return, getBooleanProp, (]
[), {, return, getBooleanProp, (, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void, setDirectives, (, Set, <, String, >, val, ), {]
[return, getBooleanProp, (, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void, setDirectives, (, Set, <, String, >, val, ), {, putProp, (]
[(, SYNTHETIC_BLOCK_PROP, ), ;, }, public, void, setDirectives, (, Set, <, String, >, val, ), {, putProp, (, DIRECTIVES, ,]
[}, public, void, setDirectives, (, Set, <, String, >, val, ), {, putProp, (, DIRECTIVES, ,, val, ), ;, }]
[setDirectives, (, Set, <, String, >, val, ), {, putProp, (, DIRECTIVES, ,, val, ), ;, }, @, SuppressWarnings, (]
[,, val, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return]
[SuppressWarnings, (, "unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return, (, Set, <, String, >, )]
["unchecked", ), public, Set, <, String, >, getDirectives, (, ), {, return, (, Set, <, String, >, ), getProp, (]
[<, String, >, ), getProp, (, DIRECTIVES, ), ;, }, public, void, addSuppression, (, String, warning, ), {, if, (]
[<, String, >, ), getProp, (, DIRECTIVES, ), ;, }, public, void, addSuppression, (, String, warning, ), {, if, (]
[getProp, (, DIRECTIVES, ), ;, }, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==]
[), ;, }, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {]
[}, public, void, addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo, (]
[addSuppression, (, String, warning, ), {, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo, (, new, JSDocInfo, (]
[{, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }]
[{, if, (, getJSDocInfo, (, ), ==, null, ), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }]
[==, null, ), {, setJSDocInfo, (, new, JSDocInfo, (, false, ), ), ;, }, getJSDocInfo, (, ), ., addSuppression, (]
[;, }, getJSDocInfo, (, ), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {]
[getJSDocInfo, (, ), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {, putBooleanProp, (]
[), ., addSuppression, (, warning, ), ;, }, public, void, setWasEmptyNode, (, boolean, val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,]
[(, boolean, val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,, val, ), ;, }, public, boolean, wasEmptyNode, (, ), {, return]
[val, ), {, putBooleanProp, (, EMPTY_BLOCK, ,, val, ), ;, }, public, boolean, wasEmptyNode, (, ), {, return, getBooleanProp, (]
[}, public, boolean, wasEmptyNode, (, ), {, return, getBooleanProp, (, EMPTY_BLOCK, ), ;, }, final, public, static, int, FLAG_GLOBAL_STATE_UNMODIFIED, =]
[getBooleanProp, (, EMPTY_BLOCK, ), ;, }, final, public, static, int, FLAG_GLOBAL_STATE_UNMODIFIED, =, 1, ;, final, public, static, int, FLAG_THIS_UNMODIFIED, =]
[static, int, FLAG_GLOBAL_STATE_UNMODIFIED, =, 1, ;, final, public, static, int, FLAG_THIS_UNMODIFIED, =, 2, ;, final, public, static, int, FLAG_ARGUMENTS_UNMODIFIED, =]
[static, int, FLAG_THIS_UNMODIFIED, =, 2, ;, final, public, static, int, FLAG_ARGUMENTS_UNMODIFIED, =, 4, ;, final, public, static, int, FLAG_NO_THROWS, =]
[static, int, FLAG_ARGUMENTS_UNMODIFIED, =, 4, ;, final, public, static, int, FLAG_NO_THROWS, =, 8, ;, final, public, static, int, FLAG_LOCAL_RESULTS, =]
[static, int, FLAG_NO_THROWS, =, 8, ;, final, public, static, int, FLAG_LOCAL_RESULTS, =, 16, ;, final, public, static, int, SIDE_EFFECTS_FLAGS_MASK, =]
[static, int, FLAG_LOCAL_RESULTS, =, 16, ;, final, public, static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =]
[static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =]
[static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =]
[static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =]
[static, int, SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =]
[SIDE_EFFECTS_FLAGS_MASK, =, 31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |]
[31, ;, final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |]
[final, public, static, int, SIDE_EFFECTS_ALL, =, 0, ;, final, public, static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |]
[static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {]
[static, int, NO_SIDE_EFFECTS, =, FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (]
[FLAG_GLOBAL_STATE_UNMODIFIED, |, FLAG_THIS_UNMODIFIED, |, FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (]
[FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==]
[FLAG_ARGUMENTS_UNMODIFIED, |, FLAG_NO_THROWS, ;, public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==]
[public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||]
[public, void, setSideEffectFlags, (, int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||]
[int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==]
[int, flags, ), {, Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==]
[Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,]
[Preconditions, ., checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,]
[checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +]
[checkArgument, (, getType, (, ), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +]
[), ==, Token, ., CALL, ||, getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (]
[getType, (, ), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;]
[), ==, Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (]
[Token, ., NEW, ,, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", +, Token, ., name, (, getType, (, ), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,]
[), ), ), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {]
[), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (]
[), ;, putIntProp, (, SIDE_EFFECT_FLAGS, ,, flags, ), ;, }, public, void, setSideEffectFlags, (, SideEffectFlags, flags, ), {, setSideEffectFlags, (]
[flags, ), {, setSideEffectFlags, (, flags, ., valueOf, (, ), ), ;, }, public, int, getSideEffectFlags, (, ), {, return]
[{, setSideEffectFlags, (, flags, ., valueOf, (, ), ), ;, }, public, int, getSideEffectFlags, (, ), {, return, getIntProp, (]
[getSideEffectFlags, (, ), {, return, getIntProp, (, SIDE_EFFECT_FLAGS, ), ;, }, public, static, class, SideEffectFlags, {, private, int, value, =]
[getSideEffectFlags, (, ), {, return, getIntProp, (, SIDE_EFFECT_FLAGS, ), ;, }, public, static, class, SideEffectFlags, {, private, int, value, =]
[int, value, =, Node, ., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, ), {, }, public, SideEffectFlags, (, int, value, ), {]
[int, value, =, Node, ., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, ), {, }, public, SideEffectFlags, (, int, value, ), {]
[., SIDE_EFFECTS_ALL, ;, public, SideEffectFlags, (, ), {, }, public, SideEffectFlags, (, int, value, ), {, this, ., value, =]
[SideEffectFlags, (, int, value, ), {, this, ., value, =, value, ;, }, public, int, valueOf, (, ), {, return]
[=, value, ;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (, ), {]
[;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (, ), {, value, =]
[;, }, public, int, valueOf, (, ), {, return, value, ;, }, public, void, setAllFlags, (, ), {, value, =]
[}, public, void, setAllFlags, (, ), {, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {]
[void, setAllFlags, (, ), {, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =]
[void, setAllFlags, (, ), {, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =]
[void, setAllFlags, (, ), {, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =]
[{, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =, Node, ., NO_SIDE_EFFECTS, |]
[{, value, =, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearAllFlags, (, ), {, value, =, Node, ., NO_SIDE_EFFECTS, |]
[), {, value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return]
[), {, value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return]
[value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==]
[value, =, Node, ., NO_SIDE_EFFECTS, |, Node, ., FLAG_LOCAL_RESULTS, ;, }, public, boolean, areAllFlagsSet, (, ), {, return, value, ==]
[public, boolean, areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (, ), {]
[areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (, ), {, value, |=]
[areAllFlagsSet, (, ), {, return, value, ==, Node, ., SIDE_EFFECTS_ALL, ;, }, public, void, clearSideEffectFlags, (, ), {, value, |=]
[}, public, void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {]
[void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (]
[void, clearSideEffectFlags, (, ), {, value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (]
[value, |=, Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;]
[Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (]
[Node, ., NO_SIDE_EFFECTS, ;, }, public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (]
[public, void, setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;]
[setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (]
[setMutatesGlobalState, (, ), {, removeFlag, (, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (]
[(, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {]
[., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (]
[., FLAG_ARGUMENTS_UNMODIFIED, ), ;, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setThrows, (, ), {, removeFlag, (]
[public, void, setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis, (, ), {]
[setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis, (, ), {, removeFlag, (]
[setThrows, (, ), {, removeFlag, (, Node, ., FLAG_NO_THROWS, ), ;, }, public, void, setMutatesThis, (, ), {, removeFlag, (]
[public, void, setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments, (, ), {]
[setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments, (, ), {, removeFlag, (]
[setMutatesThis, (, ), {, removeFlag, (, Node, ., FLAG_THIS_UNMODIFIED, ), ;, }, public, void, setMutatesArguments, (, ), {, removeFlag, (]
[public, void, setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted, (, ), {]
[setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted, (, ), {, removeFlag, (]
[setMutatesArguments, (, ), {, removeFlag, (, Node, ., FLAG_ARGUMENTS_UNMODIFIED, ), ;, }, public, void, setReturnsTainted, (, ), {, removeFlag, (]
[setReturnsTainted, (, ), {, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag, (, int, flag, ), {]
[), {, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag, (, int, flag, ), {, value, &=]
[{, removeFlag, (, Node, ., FLAG_LOCAL_RESULTS, ), ;, }, private, void, removeFlag, (, int, flag, ), {, value, &=, ~]
[removeFlag, (, int, flag, ), {, value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return]
[int, flag, ), {, value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (]
[int, flag, ), {, value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (]
[value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &]
[value, &=, ~, flag, ;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[;, }, }, public, boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,]
[boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |]
[boolean, isOnlyModifiesThisCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |]
[{, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |]
[{, return, areBitFlagsSet, (, getSideEffectFlags, (, ), &, Node, ., NO_SIDE_EFFECTS, ,, Node, ., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |]
[., FLAG_GLOBAL_STATE_UNMODIFIED, |, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return]
[|, Node, ., FLAG_ARGUMENTS_UNMODIFIED, |, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (]
[|, Node, ., FLAG_NO_THROWS, ), ;, }, public, boolean, isNoSideEffectsCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,]
[), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, ), ;, }, public, boolean, isLocalResultCall, (, ), {, return]
[return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,, NO_SIDE_EFFECTS, ), ;, }, public, boolean, isLocalResultCall, (, ), {, return, areBitFlagsSet, (]
[(, ), ,, NO_SIDE_EFFECTS, ), ;, }, public, boolean, isLocalResultCall, (, ), {, return, areBitFlagsSet, (, getSideEffectFlags, (, ), ,]
[getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return]
[getSideEffectFlags, (, ), ,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return]
[(, ), ,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (]
[(, ), ,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (]
[,, FLAG_LOCAL_RESULTS, ), ;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (, value, &]
[;, }, private, boolean, areBitFlagsSet, (, int, value, ,, int, flags, ), {, return, (, value, &, flags, ), ==]
[flags, ), {, return, (, value, &, flags, ), ==, flags, ;, }, public, boolean, isQuotedString, (, ), {, return]
[flags, ;, }, public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, ), {, throw]
[public, boolean, isQuotedString, (, ), {, return, false, ;, }, public, void, setQuotedString, (, ), {, throw, new, IllegalStateException, (]
[class, NodeMismatch, {, final, Node, nodeA, ;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {]
[class, NodeMismatch, {, final, Node, nodeA, ;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {]
[Node, nodeA, ;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {, this, ., nodeA, =]
[;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {, this, ., nodeA, =, nodeA, ;]
[;, final, Node, nodeB, ;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {, this, ., nodeA, =, nodeA, ;]
[;, NodeMismatch, (, Node, nodeA, ,, Node, nodeB, ), {, this, ., nodeA, =, nodeA, ;, this, ., nodeB, =]
[;, this, ., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[;, this, ., nodeB, =, nodeB, ;, }, @, Override, public, boolean, equals, (, Object, object, ), {, if, (]
[@, Override, public, boolean, equals, (, Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =]
[boolean, equals, (, Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, )]
[Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return]
[Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return]
[Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return]
[Object, object, ), {, if, (, object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return]
[object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (]
[object, instanceof, NodeMismatch, ), {, NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (]
[NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&]
[NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&]
[NodeMismatch, that, =, (, NodeMismatch, ), object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&]
[object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (]
[object, ;, return, that, ., nodeA, ., equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (]
[equals, (, this, ., nodeA, ), &&, that, ., nodeB, ., equals, (, this, ., nodeB, ), ;, }, return]
[(, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, this, ., nodeB, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[}, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, nodeA, ,]
[{, return, Objects, ., hashCode, (, nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return]
[{, return, Objects, ., hashCode, (, nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return]
[{, return, Objects, ., hashCode, (, nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return]
[nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType, (, ), ==]
[nodeA, ,, nodeB, ), ;, }, }, public, boolean, isAdd, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return]
[), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., ADD, ;, }, public, boolean, isAnd, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return]
[), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., AND, ;, }, public, boolean, isArrayLit, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return]
[), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., ARRAYLIT, ;, }, public, boolean, isAssign, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return]
[), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., ASSIGN, ;, }, public, boolean, isAssignAdd, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return]
[), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., ASSIGN_ADD, ;, }, public, boolean, isBlock, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return]
[), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., BLOCK, ;, }, public, boolean, isBreak, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return]
[), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., BREAK, ;, }, public, boolean, isCall, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return]
[), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., CALL, ;, }, public, boolean, isCase, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return]
[), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., CASE, ;, }, public, boolean, isCast, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return]
[), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., CAST, ;, }, public, boolean, isCatch, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return]
[), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., CATCH, ;, }, public, boolean, isComma, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return]
[), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., COMMA, ;, }, public, boolean, isContinue, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return]
[), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., CONTINUE, ;, }, public, boolean, isDebugger, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return]
[), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., DEBUGGER, ;, }, public, boolean, isDec, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return]
[), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., DEC, ;, }, public, boolean, isDefaultCase, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return]
[), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., DEFAULT_CASE, ;, }, public, boolean, isDelProp, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return]
[), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., DELPROP, ;, }, public, boolean, isDo, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return]
[), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., DO, ;, }, public, boolean, isEmpty, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return]
[), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., EMPTY, ;, }, public, boolean, isExprResult, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return]
[), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., EXPR_RESULT, ;, }, public, boolean, isFalse, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return]
[), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., FALSE, ;, }, public, boolean, isFor, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return]
[), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., FOR, ;, }, public, boolean, isFunction, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return]
[), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., FUNCTION, ;, }, public, boolean, isGetterDef, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return]
[), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., GETTER_DEF, ;, }, public, boolean, isGetElem, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return]
[), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., GETELEM, ;, }, public, boolean, isGetProp, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return]
[), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., GETPROP, ;, }, public, boolean, isHook, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return]
[), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., HOOK, ;, }, public, boolean, isIf, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return]
[), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., IF, ;, }, public, boolean, isIn, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return]
[), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., IN, ;, }, public, boolean, isInc, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return]
[), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., INC, ;, }, public, boolean, isInstanceOf, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return]
[), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., INSTANCEOF, ;, }, public, boolean, isLabel, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return]
[), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., LABEL, ;, }, public, boolean, isLabelName, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return]
[), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., LABEL_NAME, ;, }, public, boolean, isName, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return]
[), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NAME, ;, }, public, boolean, isNE, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return]
[), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NE, ;, }, public, boolean, isNew, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return]
[), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NEW, ;, }, public, boolean, isNot, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return]
[), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NOT, ;, }, public, boolean, isNull, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return]
[), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NULL, ;, }, public, boolean, isNumber, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return]
[), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., NUMBER, ;, }, public, boolean, isObjectLit, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return]
[), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., OBJECTLIT, ;, }, public, boolean, isOr, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return]
[), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., OR, ;, }, public, boolean, isParamList, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return]
[), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., PARAM_LIST, ;, }, public, boolean, isRegExp, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return]
[), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., REGEXP, ;, }, public, boolean, isReturn, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return]
[), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., RETURN, ;, }, public, boolean, isScript, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return]
[), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., SCRIPT, ;, }, public, boolean, isSetterDef, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return]
[), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., SETTER_DEF, ;, }, public, boolean, isString, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return]
[), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., STRING, ;, }, public, boolean, isStringKey, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return]
[), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., STRING_KEY, ;, }, public, boolean, isSwitch, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return]
[), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., SWITCH, ;, }, public, boolean, isThis, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return]
[), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., THIS, ;, }, public, boolean, isThrow, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return]
[), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., THROW, ;, }, public, boolean, isTrue, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return]
[), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., TRUE, ;, }, public, boolean, isTry, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return]
[), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., TRY, ;, }, public, boolean, isTypeOf, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return]
[), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., TYPEOF, ;, }, public, boolean, isVar, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return]
[), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., VAR, ;, }, public, boolean, isVoid, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return]
[), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., VOID, ;, }, public, boolean, isWhile, (, ), {, return, this, ., getType, (, ), ==]
[{, return, this, ., getType, (, ), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return]
[{, return, this, ., getType, (, ), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return]
[), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==]
[), ==, Token, ., WHILE, ;, }, public, boolean, isWith, (, ), {, return, this, ., getType, (, ), ==]
