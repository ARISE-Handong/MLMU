[;, import, java, ., text, ., ParsePosition, ;, public, class, CompassFormat, extends, NumberFormat, {, private, static, final, String, N, =]
[public, class, CompassFormat, extends, NumberFormat, {, private, static, final, String, N, =, "N", ;, private, static, final, String, E, =]
[final, String, N, =, "N", ;, private, static, final, String, E, =, "E", ;, private, static, final, String, S, =]
[final, String, E, =, "E", ;, private, static, final, String, S, =, "S", ;, private, static, final, String, W, =]
[S, =, "S", ;, private, static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =]
[=, "S", ;, private, static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {]
[;, private, static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,]
[;, private, static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,]
[;, private, static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,]
[static, final, String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +]
[String, W, =, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +]
[=, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,]
[=, "W", ;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,]
[;, public, static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +]
[static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +, E, ,]
[static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +, E, ,]
[static, final, String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +, E, ,]
[String, [, ], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +]
[], DIRECTIONS, =, {, N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +, N, +]
[=, {, N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,]
[N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,]
[N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,]
[N, ,, N, +, N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,]
[N, +, N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,, E, +]
[N, +, E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +]
[E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,]
[E, ,, N, +, E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,]
[N, +, E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +]
[E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,]
[E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,]
[E, ,, E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,]
[E, +, N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +]
[N, +, E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +, S, +]
[E, ,, E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,]
[E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,]
[E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,]
[E, ,, E, +, S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,]
[E, +, S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,, S, +]
[S, +, E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +]
[E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,]
[E, ,, S, +, E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,]
[S, +, E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +]
[E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,]
[E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,]
[E, ,, S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,]
[S, +, S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +]
[S, +, E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +, S, +]
[E, ,, S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,]
[S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,]
[S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,]
[S, ,, S, +, S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,]
[S, +, S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,, W, +]
[S, +, W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +]
[W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,]
[W, ,, S, +, W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,]
[S, +, W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +]
[W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,]
[W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,]
[W, ,, W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,]
[W, +, S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,, N, +]
[S, +, W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,, N, +, N, +]
[W, ,, W, ,, W, +, N, +, W, ,, N, +, W, ,, N, +, N, +, W, ,]
[}, ;, public, CompassFormat, (, ), {, super, (, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {]
[public, CompassFormat, (, ), {, super, (, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =]
[public, CompassFormat, (, ), {, super, (, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =]
[(, ), {, super, (, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =, direction, %]
[(, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =, direction, %, 360, ;, if, (]
[(, ), ;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =, direction, %, 360, ;, if, (]
[;, }, public, String, getDirectionCode, (, double, direction, ), {, direction, =, direction, %, 360, ;, if, (, direction, <]
[String, getDirectionCode, (, double, direction, ), {, direction, =, direction, %, 360, ;, if, (, direction, <, 0.0, ), {]
[(, double, direction, ), {, direction, =, direction, %, 360, ;, if, (, direction, <, 0.0, ), {, direction, =]
[(, double, direction, ), {, direction, =, direction, %, 360, ;, if, (, direction, <, 0.0, ), {, direction, =]
[direction, ), {, direction, =, direction, %, 360, ;, if, (, direction, <, 0.0, ), {, direction, =, direction, +]
[%, 360, ;, if, (, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =]
[%, 360, ;, if, (, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =]
[360, ;, if, (, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (]
[360, ;, if, (, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (]
[(, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (, (, int, )]
[(, direction, <, 0.0, ), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (, (, int, )]
[), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (, (, int, ), Math, ., floor, (]
[), {, direction, =, direction, +, 360.0, ;, }, int, index, =, (, (, int, ), Math, ., floor, (]
[direction, =, direction, +, 360.0, ;, }, int, index, =, (, (, int, ), Math, ., floor, (, direction, /]
[+, 360.0, ;, }, int, index, =, (, (, int, ), Math, ., floor, (, direction, /, 11.25, ), +]
[}, int, index, =, (, (, int, ), Math, ., floor, (, direction, /, 11.25, ), +, 1, ), /]
[=, (, (, int, ), Math, ., floor, (, direction, /, 11.25, ), +, 1, ), /, 2, ;, return]
[=, (, (, int, ), Math, ., floor, (, direction, /, 11.25, ), +, 1, ), /, 2, ;, return]
[(, int, ), Math, ., floor, (, direction, /, 11.25, ), +, 1, ), /, 2, ;, return, DIRECTIONS, []
[[, index, ], ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return]
[[, index, ], ;, }, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return]
[}, public, StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return, toAppendTo, ., append, (]
[StringBuffer, format, (, double, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return, toAppendTo, ., append, (, getDirectionCode, (]
[number, ), ), ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return]
[number, ), ), ;, }, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return]
[}, public, StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return, toAppendTo, ., append, (]
[StringBuffer, format, (, long, number, ,, StringBuffer, toAppendTo, ,, FieldPosition, pos, ), {, return, toAppendTo, ., append, (, getDirectionCode, (]
[(, getDirectionCode, (, number, ), ), ;, }, public, Number, parse, (, String, source, ,, ParsePosition, parsePosition, ), {, return]
