[., List, ;, import, java, ., util, ., Set, ;, class, MarkNoSideEffectCalls, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =]
[., List, ;, import, java, ., util, ., Set, ;, class, MarkNoSideEffectCalls, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =]
[java, ., util, ., Set, ;, class, MarkNoSideEffectCalls, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (]
[util, ., Set, ;, class, MarkNoSideEffectCalls, implements, CompilerPass, {, static, final, DiagnosticType, INVALID_NO_SIDE_EFFECT_ANNOTATION, =, DiagnosticType, ., error, (, "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", ,]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {]
[;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {]
[compiler, ;, private, final, Set, <, Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[private, final, Set, <, Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[private, final, Set, <, Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., noSideEffectFunctionNames, =]
[Node, >, noSideEffectFunctionNames, ;, MarkNoSideEffectCalls, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., noSideEffectFunctionNames, =]
[(, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[=, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, NodeTraversal, ., traverse, (]
[SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[defFinder, ., process, (, externs, ,, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (]
[externs, ,, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;]
[externs, ,, root, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[externs, ,, new, GatherNoSideEffectFunctions, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (]
[(, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;]
[(, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[root, ,, new, GatherNoSideEffectFunctions, (, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, SetNoSideEffectCallProperty, (]
[new, SetNoSideEffectCallProperty, (, defFinder, ), ), ;, }, private, static, boolean, definitionTypeContainsFunctionType, (, Definition, def, ), {, Node, rhs, =]
[new, SetNoSideEffectCallProperty, (, defFinder, ), ), ;, }, private, static, boolean, definitionTypeContainsFunctionType, (, Definition, def, ), {, Node, rhs, =]
[private, static, boolean, definitionTypeContainsFunctionType, (, Definition, def, ), {, Node, rhs, =, def, ., getRValue, (, ), ;, if, (]
[private, static, boolean, definitionTypeContainsFunctionType, (, Definition, def, ), {, Node, rhs, =, def, ., getRValue, (, ), ;, if, (]
[boolean, definitionTypeContainsFunctionType, (, Definition, def, ), {, Node, rhs, =, def, ., getRValue, (, ), ;, if, (, rhs, ==]
[def, ), {, Node, rhs, =, def, ., getRValue, (, ), ;, if, (, rhs, ==, null, ), {, return]
[=, def, ., getRValue, (, ), ;, if, (, rhs, ==, null, ), {, return, true, ;, }, switch, (]
[=, def, ., getRValue, (, ), ;, if, (, rhs, ==, null, ), {, return, true, ;, }, switch, (]
[(, rhs, ==, null, ), {, return, true, ;, }, switch, (, rhs, ., getType, (, ), ), {, case]
[(, rhs, ==, null, ), {, return, true, ;, }, switch, (, rhs, ., getType, (, ), ), {, case]
[{, return, true, ;, }, switch, (, rhs, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, case]
[{, return, true, ;, }, switch, (, rhs, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, case]
[switch, (, rhs, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, case, Token, ., AND, :, case]
[switch, (, rhs, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, case, Token, ., AND, :, case]
[(, ), ), {, case, Token, ., ASSIGN, :, case, Token, ., AND, :, case, Token, ., CALL, :, case]
[(, ), ), {, case, Token, ., ASSIGN, :, case, Token, ., AND, :, case, Token, ., CALL, :, case]
[Token, ., ASSIGN, :, case, Token, ., AND, :, case, Token, ., CALL, :, case, Token, ., GETPROP, :, case]
[Token, ., ASSIGN, :, case, Token, ., AND, :, case, Token, ., CALL, :, case, Token, ., GETPROP, :, case]
[Token, ., AND, :, case, Token, ., CALL, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case]
[Token, ., AND, :, case, Token, ., CALL, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case]
[Token, ., CALL, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case]
[Token, ., CALL, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case]
[Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case]
[Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case]
[Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., NAME, :, case]
[Token, ., GETELEM, :, case, Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., NAME, :, case]
[Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., NAME, :, case, Token, ., NEW, :, case]
[Token, ., FUNCTION, :, case, Token, ., HOOK, :, case, Token, ., NAME, :, case, Token, ., NEW, :, case]
[Token, ., HOOK, :, case, Token, ., NAME, :, case, Token, ., NEW, :, case, Token, ., OR, :, return]
[Token, ., NAME, :, case, Token, ., NEW, :, case, Token, ., OR, :, return, true, ;, default, :, return]
[;, default, :, return, false, ;, }, }, private, static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =]
[;, default, :, return, false, ;, }, }, private, static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =]
[}, private, static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return]
[}, private, static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return]
[}, private, static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return]
[static, boolean, hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return, docInfo, !=]
[hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return, docInfo, !=, null, &&]
[hasNoSideEffectsAnnotation, (, Node, node, ), {, JSDocInfo, docInfo, =, node, ., getJSDocInfo, (, ), ;, return, docInfo, !=, null, &&]
[), ;, }, private, class, GatherNoSideEffectFunctions, extends, AbstractPostOrderCallback, {, private, final, boolean, inExterns, ;, GatherNoSideEffectFunctions, (, boolean, inExterns, ), {]
[), ;, }, private, class, GatherNoSideEffectFunctions, extends, AbstractPostOrderCallback, {, private, final, boolean, inExterns, ;, GatherNoSideEffectFunctions, (, boolean, inExterns, ), {]
[class, GatherNoSideEffectFunctions, extends, AbstractPostOrderCallback, {, private, final, boolean, inExterns, ;, GatherNoSideEffectFunctions, (, boolean, inExterns, ), {, this, ., inExterns, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !]
[Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, inExterns, &&]
[void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, inExterns, &&, hasNoSideEffectsAnnotation, (]
[traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {]
[traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {]
[,, Node, parent, ), {, if, (, !, inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {, traversal, ., report, (]
[parent, ), {, if, (, !, inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {, traversal, ., report, (, node, ,]
[inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {, traversal, ., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, if, (]
[inExterns, &&, hasNoSideEffectsAnnotation, (, node, ), ), {, traversal, ., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, if, (]
[., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[., report, (, node, ,, INVALID_NO_SIDE_EFFECT_ANNOTATION, ), ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (]
[), ;, }, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., isExprResult, (, ), &&]
[}, if, (, node, ., isGetProp, (, ), ), {, if, (, parent, ., isExprResult, (, ), &&, hasNoSideEffectsAnnotation, (]
[., isGetProp, (, ), ), {, if, (, parent, ., isExprResult, (, ), &&, hasNoSideEffectsAnnotation, (, node, ), ), {]
[., isGetProp, (, ), ), {, if, (, parent, ., isExprResult, (, ), &&, hasNoSideEffectsAnnotation, (, node, ), ), {]
[), {, if, (, parent, ., isExprResult, (, ), &&, hasNoSideEffectsAnnotation, (, node, ), ), {, noSideEffectFunctionNames, ., add, (]
[), &&, hasNoSideEffectsAnnotation, (, node, ), ), {, noSideEffectFunctionNames, ., add, (, node, ), ;, }, }, else, if, (]
[), &&, hasNoSideEffectsAnnotation, (, node, ), ), {, noSideEffectFunctionNames, ., add, (, node, ), ;, }, }, else, if, (]
[add, (, node, ), ;, }, }, else, if, (, node, ., isFunction, (, ), ), {, boolean, hasAnnotation, =]
[node, ), ;, }, }, else, if, (, node, ., isFunction, (, ), ), {, boolean, hasAnnotation, =, hasNoSideEffectsAnnotation, (]
[., isFunction, (, ), ), {, boolean, hasAnnotation, =, hasNoSideEffectsAnnotation, (, node, ), ;, List, <, Node, >, nameNodes, =]
[., isFunction, (, ), ), {, boolean, hasAnnotation, =, hasNoSideEffectsAnnotation, (, node, ), ;, List, <, Node, >, nameNodes, =]
[boolean, hasAnnotation, =, hasNoSideEffectsAnnotation, (, node, ), ;, List, <, Node, >, nameNodes, =, Lists, ., newArrayList, (, ), ;]
[boolean, hasAnnotation, =, hasNoSideEffectsAnnotation, (, node, ), ;, List, <, Node, >, nameNodes, =, Lists, ., newArrayList, (, ), ;]
[(, node, ), ;, List, <, Node, >, nameNodes, =, Lists, ., newArrayList, (, ), ;, nameNodes, ., add, (]
[(, node, ), ;, List, <, Node, >, nameNodes, =, Lists, ., newArrayList, (, ), ;, nameNodes, ., add, (]
[Lists, ., newArrayList, (, ), ;, nameNodes, ., add, (, node, ., getFirstChild, (, ), ), ;, Node, nameNode, =]
[), ;, nameNodes, ., add, (, node, ., getFirstChild, (, ), ), ;, Node, nameNode, =, null, ;, if, (]
[), ;, nameNodes, ., add, (, node, ., getFirstChild, (, ), ), ;, Node, nameNode, =, null, ;, if, (]
[), ), ;, Node, nameNode, =, null, ;, if, (, parent, ., isName, (, ), ), {, Node, gramp, =]
[), ), ;, Node, nameNode, =, null, ;, if, (, parent, ., isName, (, ), ), {, Node, gramp, =]
[if, (, parent, ., isName, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[if, (, parent, ., isName, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[if, (, parent, ., isName, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[if, (, parent, ., isName, (, ), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (]
[), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ., isVar, (, ), &&]
[), ), {, Node, gramp, =, parent, ., getParent, (, ), ;, if, (, gramp, ., isVar, (, ), &&]
[parent, ., getParent, (, ), ;, if, (, gramp, ., isVar, (, ), &&, gramp, ., hasOneChild, (, ), &&]
[getParent, (, ), ;, if, (, gramp, ., isVar, (, ), &&, gramp, ., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (]
[if, (, gramp, ., isVar, (, ), &&, gramp, ., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (, gramp, ), ), {]
[gramp, ., isVar, (, ), &&, gramp, ., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (, gramp, ), ), {, hasAnnotation, =]
[(, ), &&, gramp, ., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (, gramp, ), ), {, hasAnnotation, =, true, ;, }]
[(, ), &&, gramp, ., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (, gramp, ), ), {, hasAnnotation, =, true, ;, }]
[., hasOneChild, (, ), &&, hasNoSideEffectsAnnotation, (, gramp, ), ), {, hasAnnotation, =, true, ;, }, nameNodes, ., add, (]
[gramp, ), ), {, hasAnnotation, =, true, ;, }, nameNodes, ., add, (, parent, ), ;, }, else, if, (]
[gramp, ), ), {, hasAnnotation, =, true, ;, }, nameNodes, ., add, (, parent, ), ;, }, else, if, (]
[nameNodes, ., add, (, parent, ), ;, }, else, if, (, parent, ., isAssign, (, ), ), {, if, (]
[add, (, parent, ), ;, }, else, if, (, parent, ., isAssign, (, ), ), {, if, (, hasNoSideEffectsAnnotation, (]
[;, }, else, if, (, parent, ., isAssign, (, ), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {]
[else, if, (, parent, ., isAssign, (, ), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {, hasAnnotation, =]
[parent, ., isAssign, (, ), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {, hasAnnotation, =, true, ;, }]
[parent, ., isAssign, (, ), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {, hasAnnotation, =, true, ;, }]
[), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {, hasAnnotation, =, true, ;, }, nameNodes, ., add, (]
[), ), {, if, (, hasNoSideEffectsAnnotation, (, parent, ), ), {, hasAnnotation, =, true, ;, }, nameNodes, ., add, (]
[{, hasAnnotation, =, true, ;, }, nameNodes, ., add, (, parent, ., getFirstChild, (, ), ), ;, }, if, (]
[true, ;, }, nameNodes, ., add, (, parent, ., getFirstChild, (, ), ), ;, }, if, (, hasAnnotation, ), {]
[true, ;, }, nameNodes, ., add, (, parent, ., getFirstChild, (, ), ), ;, }, if, (, hasAnnotation, ), {]
[., add, (, parent, ., getFirstChild, (, ), ), ;, }, if, (, hasAnnotation, ), {, noSideEffectFunctionNames, ., addAll, (]
[}, }, }, private, class, SetNoSideEffectCallProperty, extends, AbstractPostOrderCallback, {, private, final, SimpleDefinitionFinder, defFinder, ;, SetNoSideEffectCallProperty, (, SimpleDefinitionFinder, defFinder, ), {]
[}, }, }, private, class, SetNoSideEffectCallProperty, extends, AbstractPostOrderCallback, {, private, final, SimpleDefinitionFinder, defFinder, ;, SetNoSideEffectCallProperty, (, SimpleDefinitionFinder, defFinder, ), {]
[class, SetNoSideEffectCallProperty, extends, AbstractPostOrderCallback, {, private, final, SimpleDefinitionFinder, defFinder, ;, SetNoSideEffectCallProperty, (, SimpleDefinitionFinder, defFinder, ), {, this, ., defFinder, =]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !]
[}, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !]
[(, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, node, ., isCall, (, ), &&]
[NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, node, ., isCall, (, ), &&, !]
[NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, if, (, !, node, ., isCall, (, ), &&, !]
[(, ), &&, !, node, ., isNew, (, ), ), {, return, ;, }, Collection, <, Definition, >, definitions, =]
[(, ), &&, !, node, ., isNew, (, ), ), {, return, ;, }, Collection, <, Definition, >, definitions, =]
[node, ., isNew, (, ), ), {, return, ;, }, Collection, <, Definition, >, definitions, =, defFinder, ., getDefinitionsReferencedAt, (]
[node, ., isNew, (, ), ), {, return, ;, }, Collection, <, Definition, >, definitions, =, defFinder, ., getDefinitionsReferencedAt, (]
[}, Collection, <, Definition, >, definitions, =, defFinder, ., getDefinitionsReferencedAt, (, node, ., getFirstChild, (, ), ), ;, if, (]
[}, Collection, <, Definition, >, definitions, =, defFinder, ., getDefinitionsReferencedAt, (, node, ., getFirstChild, (, ), ), ;, if, (]
[<, Definition, >, definitions, =, defFinder, ., getDefinitionsReferencedAt, (, node, ., getFirstChild, (, ), ), ;, if, (, definitions, ==]
[getFirstChild, (, ), ), ;, if, (, definitions, ==, null, ), {, return, ;, }, for, (, Definition, def, :]
[(, definitions, ==, null, ), {, return, ;, }, for, (, Definition, def, :, definitions, ), {, Node, lValue, =]
[(, definitions, ==, null, ), {, return, ;, }, for, (, Definition, def, :, definitions, ), {, Node, lValue, =]
[return, ;, }, for, (, Definition, def, :, definitions, ), {, Node, lValue, =, def, ., getLValue, (, ), ;]
[return, ;, }, for, (, Definition, def, :, definitions, ), {, Node, lValue, =, def, ., getLValue, (, ), ;]
[(, Definition, def, :, definitions, ), {, Node, lValue, =, def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (]
[), {, Node, lValue, =, def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (]
[), {, Node, lValue, =, def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (]
[{, Node, lValue, =, def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (, !]
[{, Node, lValue, =, def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (, !]
[def, ., getLValue, (, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (, !, noSideEffectFunctionNames, ., contains, (]
[(, ), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (, !, noSideEffectFunctionNames, ., contains, (, lValue, ), &&]
[;, Preconditions, ., checkNotNull, (, lValue, ), ;, if, (, !, noSideEffectFunctionNames, ., contains, (, lValue, ), &&, definitionTypeContainsFunctionType, (]
[if, (, !, noSideEffectFunctionNames, ., contains, (, lValue, ), &&, definitionTypeContainsFunctionType, (, def, ), ), {, return, ;, }, }]
[if, (, !, noSideEffectFunctionNames, ., contains, (, lValue, ), &&, definitionTypeContainsFunctionType, (, def, ), ), {, return, ;, }, }]
[., contains, (, lValue, ), &&, definitionTypeContainsFunctionType, (, def, ), ), {, return, ;, }, }, node, ., setSideEffectFlags, (]
[., contains, (, lValue, ), &&, definitionTypeContainsFunctionType, (, def, ), ), {, return, ;, }, }, node, ., setSideEffectFlags, (]
