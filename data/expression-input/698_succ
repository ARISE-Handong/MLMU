[;, private, final, char, start, ;, private, final, char, end, ;, private, final, boolean, negated, ;, private, transient, String, iToString]
[), {, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this, ., start]
[>, end, ), {, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this]
[), {, final, char, temp, =, start, ;, start, =, end, ;, end, =, temp, ;, }, this, ., start]
[;, start, =, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =]
[=, end, ;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;]
[;, end, =, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;, this, .]
[=, temp, ;, }, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., negated, =]
[;, }, this, ., start, =, start, ;, this, ., end, =, end, ;, this, ., negated, =, negated, ;]
[=, start, ;, this, ., end, =, end, ;, this, ., negated, =, negated, ;, }, public, static, CharRange, is]
[., start, =, start, ;, this, ., end, =, end, ;, this, ., negated, =, negated, ;, }, public, static]
[;, this, ., end, =, end, ;, this, ., negated, =, negated, ;, }, public, static, CharRange, is, (, final]
[=, end, ;, this, ., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {]
[., end, =, end, ;, this, ., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch]
[;, this, ., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new]
[=, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,]
[., negated, =, negated, ;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (]
[;, }, public, static, CharRange, is, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,, ch, ,]
[;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,, ch, ,]
[,, ch, ,, false, ), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange]
[,, false, ), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (, ch]
[), ;, }, public, static, CharRange, isNot, (, final, char, ch, ), {, return, new, CharRange, (, ch, ,, ch]
[;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (]
[,, ch, ,, true, ), ;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, )]
[,, true, ), ;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return]
[), ;, }, public, static, CharRange, isIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange]
[;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange, (]
[,, end, ,, false, ), ;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, )]
[,, false, ), ;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return]
[), ;, }, public, static, CharRange, isNotIn, (, final, char, start, ,, final, char, end, ), {, return, new, CharRange]
[;, }, public, char, getStart, (, ), {, return, this, ., start, ;, }, public, char, getEnd, (, ), {]
[,, end, ,, true, ), ;, }, public, char, getStart, (, ), {, return, this, ., start, ;, }, public]
[,, true, ), ;, }, public, char, getStart, (, ), {, return, this, ., start, ;, }, public, char, getEnd]
[), ;, }, public, char, getStart, (, ), {, return, this, ., start, ;, }, public, char, getEnd, (, )]
[;, }, public, char, getEnd, (, ), {, return, this, ., end, ;, }, public, boolean, isNegated, (, ), {]
[., start, ;, }, public, char, getEnd, (, ), {, return, this, ., end, ;, }, public, boolean, isNegated, (]
[;, }, public, boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char, ch, )]
[., end, ;, }, public, boolean, isNegated, (, ), {, return, negated, ;, }, public, boolean, contains, (, final, char]
[;, }, public, boolean, contains, (, final, char, ch, ), {, return, (, ch, >=, start, &&, ch, <=, end]
[;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, ), {, throw, new]
[!=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, ), {]
[), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, )]
[&&, ch, <=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (]
[>=, start, &&, ch, <=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {]
[&&, ch, <=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (]
[), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, )]
[<=, end, ), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==]
[), !=, negated, ;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, )]
[;, }, public, boolean, contains, (, final, CharRange, range, ), {, if, (, range, ==, null, ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range]
[), {, throw, new, IllegalArgumentException, (, "The Range must not be null", ), ;, }, if, (, negated, ), {, if, (, range, ., negated]
[;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start]
[), ;, }, if, (, negated, ), {, if, (, range, ., negated, ), {, return, start, >=, range, .]
[), {, if, (, range, ., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, .]
[), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end]
[., negated, ), {, return, start, >=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range]
[;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, .]
[&&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end]
[>=, range, ., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||, range]
[&&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end]
[., start, &&, end, <=, range, ., end, ;, }, return, range, ., end, <, start, ||, range, ., start]
[;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, .]
[<=, range, ., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }]
[;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, .]
[., end, ;, }, return, range, ., end, <, start, ||, range, ., start, >, end, ;, }, if, (]
[;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;]
[||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&]
[<, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==]
[., end, <, start, ||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return]
[||, range, ., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&]
[;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;]
[>, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, .]
[., start, >, end, ;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==]
[;, }, if, (, range, ., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;]
[), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start]
[., negated, ), {, return, start, ==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range]
[;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end, ;, }, @, Override, public, boolean]
[&&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end]
[==, 0, &&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=, range]
[&&, end, ==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end]
[;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end, ;, }, @, Override, public, boolean]
[==, Character, ., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end, ;, }]
[;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end, ;, }, @, Override, public, boolean]
[., MAX_VALUE, ;, }, return, start, <=, range, ., start, &&, end, >=, range, ., end, ;, }, @, Override]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {]
[&&, end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if]
[<=, range, ., start, &&, end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object]
[&&, end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if]
[., start, &&, end, >=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, )]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {]
[>=, range, ., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {]
[., end, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this]
[), {, return, true, ;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;, }, final]
[==, this, ), {, return, true, ;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;]
[), {, return, true, ;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;, }, final]
[;, }, if, (, obj, instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (]
[), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, .]
[==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==]
[instanceof, CharRange, ==, false, ), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return]
[), {, return, false, ;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, .]
[;, }, final, CharRange, other, =, (, CharRange, ), obj, ;, return, start, ==, other, ., start, &&, end, ==]
[;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;]
[;, return, start, ==, other, ., start, &&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (]
[&&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start]
[&&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (]
[==, other, ., start, &&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override]
[&&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (]
[., start, &&, end, ==, other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int]
[&&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start]
[==, other, ., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {]
[&&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start]
[., end, &&, negated, ==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (]
[==, other, ., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end, +, (]
[., negated, ;, }, @, Override, public, int, hashCode, (, ), {, return, 83, +, start, +, 7, *, end]
[;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder, buf]
[+, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[+, 7, *, end, +, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (]
[+, start, +, 7, *, end, +, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String]
[+, 7, *, end, +, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (]
[+, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[*, end, +, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {]
[+, (, negated, ?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder, buf]
[), ;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder]
[?, 1, :, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null]
[:, 0, ), ;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {]
[), ;, }, @, Override, public, String, toString, (, ), {, if, (, iToString, ==, null, ), {, final, StringBuilder]
[), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {, buf]
[==, null, ), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), )]
[), {, final, StringBuilder, buf, =, new, StringBuilder, (, 4, ), ;, if, (, isNegated, (, ), ), {, buf]
[;, if, (, isNegated, (, ), ), {, buf, ., append, (, '^', ), ;, }, buf, ., append, (]
[), ;, if, (, isNegated, (, ), ), {, buf, ., append, (, '^', ), ;, }, buf, ., append]
[), {, buf, ., append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (, start]
[;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append, (]
[., append, (, '^', ), ;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, )]
[), ;, }, buf, ., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append]
[;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end]
[., append, (, start, ), ;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;]
[), ;, if, (, start, !=, end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (]
[), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString, =, buf]
[!=, end, ), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString]
[), {, buf, ., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString, =, buf]
[;, buf, ., append, (, end, ), ;, }, iToString, =, buf, ., toString, (, ), ;, }, return, iToString]
[., append, (, '-', ), ;, buf, ., append, (, end, ), ;, }, iToString, =, buf, ., toString, (]
[), ;, buf, ., append, (, end, ), ;, }, iToString, =, buf, ., toString, (, ), ;, }, return]
[;, }, iToString, =, buf, ., toString, (, ), ;, }, return, iToString, ;, }, @, Override, public, Iterator, <]
[., append, (, end, ), ;, }, iToString, =, buf, ., toString, (, ), ;, }, return, iToString, ;, }]
[), ;, }, iToString, =, buf, ., toString, (, ), ;, }, return, iToString, ;, }, @, Override, public, Iterator]
[=, buf, ., toString, (, ), ;, }, return, iToString, ;, }, @, Override, public, Iterator, <, Character, >, iterator]
[;, }, return, iToString, ;, }, @, Override, public, Iterator, <, Character, >, iterator, (, ), {, return, new, CharacterIterator]
[., toString, (, ), ;, }, return, iToString, ;, }, @, Override, public, Iterator, <, Character, >, iterator, (, )]
[;, }, @, Override, public, Iterator, <, Character, >, iterator, (, ), {, return, new, CharacterIterator, (, this, ), ;]
[;, }, private, static, class, CharacterIterator, implements, Iterator, <, Character, >, {, private, char, current, ;, private, final, CharRange, range]
[), ;, }, private, static, class, CharacterIterator, implements, Iterator, <, Character, >, {, private, char, current, ;, private, final, CharRange]
[=, r, ;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==]
[;, hasNext, =, true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, )]
[=, true, ;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if]
[;, if, (, range, ., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (, range]
[), {, if, (, range, ., start, ==, 0, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE]
[., negated, ), {, if, (, range, ., start, ==, 0, ), {, if, (, range, ., end, ==, Character]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[==, 0, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }]
[., start, ==, 0, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1]
[==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range]
[., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, )]
[), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1]
[., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end]
[=, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }]
[;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else]
[=, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =, 0, ;]
[;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =, range, ., start, ;, }]
[;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =, range, ., start, ;, }]
[), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =, range, ., start, ;]
[+, 1, ), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =, range, .]
[., end, +, 1, ), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =]
[), ;, }, }, else, {, current, =, 0, ;, }, }, else, {, current, =, range, ., start, ;]
[=, 0, ;, }, }, else, {, current, =, range, ., start, ;, }, }, private, void, prepareNext, (, )]
[;, }, }, else, {, current, =, range, ., start, ;, }, }, private, void, prepareNext, (, ), {, if]
[=, range, ., start, ;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {]
[;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (, current, ==]
[., start, ;, }, }, private, void, prepareNext, (, ), {, if, (, range, ., negated, ), {, if, (]
[), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current]
[., negated, ), {, if, (, current, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if]
[), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if]
[==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, .]
[), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if]
[., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, )]
[=, false, ;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (, range, .]
[;, }, else, if, (, current, +, 1, ==, range, ., start, ), {, if, (, range, ., end, ==]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[==, range, ., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false]
[+, 1, ==, range, ., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext]
[==, range, ., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false]
[), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {]
[., start, ), {, if, (, range, ., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }]
[), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1]
[==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range]
[., end, ==, Character, ., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, )]
[), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1]
[., MAX_VALUE, ), {, hasNext, =, false, ;, }, else, {, current, =, (, char, ), (, range, ., end]
[=, false, ;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }]
[;, }, else, {, current, =, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else]
[=, (, char, ), (, range, ., end, +, 1, ), ;, }, }, else, {, current, =, (, char]
[;, }, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if]
[;, }, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else, if]
[), ;, }, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else]
[+, 1, ), ;, }, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }]
[., end, +, 1, ), ;, }, }, else, {, current, =, (, char, ), (, current, +, 1, )]
[), ;, }, }, else, {, current, =, (, char, ), (, current, +, 1, ), ;, }, }, else]
[=, (, char, ), (, current, +, 1, ), ;, }, }, else, if, (, current, <, range, ., end]
[;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (, current]
[;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (, current]
[), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (]
[+, 1, ), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char]
[), ;, }, }, else, if, (, current, <, range, ., end, ), {, current, =, (, char, ), (]
[), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {, hasNext, =, false, ;]
[<, range, ., end, ), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {]
[), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {, hasNext, =, false, ;]
[., end, ), {, current, =, (, char, ), (, current, +, 1, ), ;, }, else, {, hasNext, =]
[=, (, char, ), (, current, +, 1, ), ;, }, else, {, hasNext, =, false, ;, }, }, @]
[;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, hasNext]
[;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, hasNext]
[), ;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[+, 1, ), ;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, )]
[), ;, }, else, {, hasNext, =, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return]
[=, false, ;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, hasNext, ;, }, @, Override, public]
[;, }, }, @, Override, public, boolean, hasNext, (, ), {, return, hasNext, ;, }, @, Override, public, Character, next]
[;, }, @, Override, public, Character, next, (, ), {, if, (, hasNext, ==, false, ), {, throw, new, NoSuchElementException]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return]
[==, false, ), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, )]
[), {, throw, new, NoSuchElementException, (, ), ;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return]
[;, }, final, char, cur, =, current, ;, prepareNext, (, ), ;, return, Character, ., valueOf, (, cur, ), ;]
[;, prepareNext, (, ), ;, return, Character, ., valueOf, (, cur, ), ;, }, @, Override, public, void, remove, (]
[;, return, Character, ., valueOf, (, cur, ), ;, }, @, Override, public, void, remove, (, ), {, throw, new]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, }]
[., valueOf, (, cur, ), ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, )]
[), ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, }]
[;, }, }, }]
