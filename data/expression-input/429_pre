[,, NodeTraversal, ., Callback, {, final, AbstractCompiler, compiler, ;, private, boolean, inExterns, ;, private, Set, <, String, >, used, =]
[,, NodeTraversal, ., Callback, {, final, AbstractCompiler, compiler, ;, private, boolean, inExterns, ;, private, Set, <, String, >, used, =]
[private, Set, <, String, >, used, =, Sets, ., newHashSet, (, ), ;, private, List, <, Node, >, candidates, =]
[private, Set, <, String, >, used, =, Sets, ., newHashSet, (, ), ;, private, List, <, Node, >, candidates, =]
[;, private, List, <, Node, >, candidates, =, Lists, ., newArrayList, (, ), ;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {]
[;, private, List, <, Node, >, candidates, =, Lists, ., newArrayList, (, ), ;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {]
[Node, >, candidates, =, Lists, ., newArrayList, (, ), ;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, this, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, this, ,, externs, ,]
[Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, this, ,, externs, ,, root, ), ;]
[,, root, ), ;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :]
[;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {]
[;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {]
[;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {, Preconditions, ., checkState, (]
[;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {, Preconditions, ., checkState, (]
[(, Node, n, :, candidates, ), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (]
[Node, n, :, candidates, ), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !]
[Node, n, :, candidates, ), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !]
[), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (]
[), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (]
[), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (]
[!, used, ., contains, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, Node, parent, =]
[!, used, ., contains, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, Node, parent, =]
[(, ), ., getString, (, ), ), ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[(, ), ., getString, (, ), ), ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[(, ), ), ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (]
[=, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =]
[., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;]
[., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;]
[;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (]
[;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (]
[;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (]
[;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (]
[(, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=]
[., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&]
[., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&]
[), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (]
[Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&]
[Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&]
[Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&]
[., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==]
[assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;]
[assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;]
[assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;]
[assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (]
[&&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,]
[&&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,]
[&&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,]
[., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (]
[., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (]
[., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (]
[., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (, parent, ., isInc, (, ), ||]
[., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (, parent, ., isInc, (, ), ||]
[), ), ;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {]
[), ), ;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {]
[), ), ;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {]
[., isInc, (, ), ||, parent, ., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (]
[(, ), ||, parent, ., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,]
[(, ), ||, parent, ., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,]
[., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (]
[getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {, throw]
[., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (]
[., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (]
[(, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +]
[., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }]
[., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, this, ., inExterns, =]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, this, ., inExterns, =]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, this, ., inExterns, =]
[(, ), ), {, this, ., inExterns, =, n, ., getStaticSourceFile, (, ), ., isExtern, (, ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, String, propName, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, String, propName, =]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, {, String, propName, =]
[Token, ., GETPROP, :, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[Token, ., GETPROP, :, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[GETPROP, :, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||]
[{, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (]
[n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {]
[n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {]
[), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (]
[inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName, ), ;, }, else, {, if, (]
[inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName, ), ;, }, else, {, if, (]
[inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName, ), ;, }, else, {, if, (]
[(, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[(, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[}, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, candidates, ., add, (]
[), ., isThis, (, ), ), {, candidates, ., add, (, n, ), ;, }, }, break, ;, }, case]
[), ., isThis, (, ), ), {, candidates, ., add, (, n, ), ;, }, }, break, ;, }, case]
[candidates, ., add, (, n, ), ;, }, }, break, ;, }, case, Token, ., CALL, :, Node, target, =]
[candidates, ., add, (, n, ), ;, }, }, break, ;, }, case, Token, ., CALL, :, Node, target, =]
[}, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[}, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[}, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[}, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (]
[., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&]
[., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&]
[n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&]
[n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&]
[n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&]
[n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (]
[n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (]
[(, ), &&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =]
[(, ), &&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =]
[., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, ., getNext, (, ), ;, if, (]
[., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, ., getNext, (, ), ;, if, (]
[), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {]
[), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {]
[=, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {, used, ., add, (]
[=, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {, used, ., add, (]
[), ), ;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =]
[), ), ;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =]
[}, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[}, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, n, ==]
[boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, n, ==]
[=, n, ., getParent, (, ), ;, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, if, (]
[=, n, ., getParent, (, ), ;, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, if, (]
[(, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return]
[(, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (]
[(, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (]
[(, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (]
[(, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (]
[if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (]
[., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||]
[., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||]
[return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||]
[return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||]
[., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return]
[., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (]
[), ||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return]
