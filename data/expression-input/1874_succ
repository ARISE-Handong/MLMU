[), ;, }, public, SmoothingPolynomialBicubicSplineInterpolator, (, int, degree, ), throws, NotPositiveException, {, this, (, degree, ,, degree, ), ;, }]
[,, degree, ), ;, }, public, SmoothingPolynomialBicubicSplineInterpolator, (, int, xDegree, ,, int, yDegree, ), throws, NotPositiveException, {, if, (, xDegree]
[), ;, }, public, SmoothingPolynomialBicubicSplineInterpolator, (, int, xDegree, ,, int, yDegree, ), throws, NotPositiveException, {, if, (, xDegree, <, 0]
[), {, throw, new, NotPositiveException, (, xDegree, ), ;, }, if, (, yDegree, <, 0, ), {, throw, new, NotPositiveException]
[<, 0, ), {, throw, new, NotPositiveException, (, xDegree, ), ;, }, if, (, yDegree, <, 0, ), {, throw]
[), {, throw, new, NotPositiveException, (, xDegree, ), ;, }, if, (, yDegree, <, 0, ), {, throw, new, NotPositiveException]
[;, }, if, (, yDegree, <, 0, ), {, throw, new, NotPositiveException, (, yDegree, ), ;, }, this, ., xDegree]
[), ;, }, if, (, yDegree, <, 0, ), {, throw, new, NotPositiveException, (, yDegree, ), ;, }, this, .]
[), {, throw, new, NotPositiveException, (, yDegree, ), ;, }, this, ., xDegree, =, xDegree, ;, this, ., yDegree, =]
[<, 0, ), {, throw, new, NotPositiveException, (, yDegree, ), ;, }, this, ., xDegree, =, xDegree, ;, this, .]
[), {, throw, new, NotPositiveException, (, yDegree, ), ;, }, this, ., xDegree, =, xDegree, ;, this, ., yDegree, =]
[;, }, this, ., xDegree, =, xDegree, ;, this, ., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2, ;]
[), ;, }, this, ., xDegree, =, xDegree, ;, this, ., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2]
[=, xDegree, ;, this, ., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker, =, new]
[., xDegree, =, xDegree, ;, this, ., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker]
[;, this, ., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker, =, new, SimpleVectorValueChecker, (]
[=, yDegree, ;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker, =, new, SimpleVectorValueChecker, (, safeFactor, *, Precision, .]
[., yDegree, =, yDegree, ;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker, =, new, SimpleVectorValueChecker, (, safeFactor, *]
[;, final, double, safeFactor, =, 1e2, ;, final, SimpleVectorValueChecker, checker, =, new, SimpleVectorValueChecker, (, safeFactor, *, Precision, ., EPSILON, ,]
[;, final, SimpleVectorValueChecker, checker, =, new, SimpleVectorValueChecker, (, safeFactor, *, Precision, ., EPSILON, ,, safeFactor, *, Precision, ., SAFE_MIN, )]
[;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, yFitter, =, new, PolynomialFitter, (]
[,, safeFactor, *, Precision, ., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, )]
[*, Precision, ., EPSILON, ,, safeFactor, *, Precision, ., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (]
[,, safeFactor, *, Precision, ., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, )]
[., EPSILON, ,, safeFactor, *, Precision, ., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,]
[), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, yFitter, =, new, PolynomialFitter]
[*, Precision, ., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;]
[), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, yFitter, =, new, PolynomialFitter]
[., SAFE_MIN, ), ;, xFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, yFitter, =]
[=, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, yFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer]
[;, yFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, }, @, Override, public, BicubicSplineInterpolatingFunction]
[), ;, yFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, }, @, Override, public]
[,, checker, ), ), ;, yFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, }]
[), ), ;, yFitter, =, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, }, @, Override]
[=, new, PolynomialFitter, (, new, GaussNewtonOptimizer, (, false, ,, checker, ), ), ;, }, @, Override, public, BicubicSplineInterpolatingFunction, interpolate, (]
[;, }, @, Override, public, BicubicSplineInterpolatingFunction, interpolate, (, final, double, [, ], xval, ,, final, double, [, ], yval, ,]
[), ;, }, @, Override, public, BicubicSplineInterpolatingFunction, interpolate, (, final, double, [, ], xval, ,, final, double, [, ], yval]
[,, checker, ), ), ;, }, @, Override, public, BicubicSplineInterpolatingFunction, interpolate, (, final, double, [, ], xval, ,, final, double]
[), ), ;, }, @, Override, public, BicubicSplineInterpolatingFunction, interpolate, (, final, double, [, ], xval, ,, final, double, [, ]]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, fval, ., length, ), {]
[||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length]
[||, yval, ., length, ==, 0, ||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;]
[==, 0, ||, yval, ., length, ==, 0, ||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[., length, ==, 0, ||, yval, ., length, ==, 0, ||, fval, ., length, ==, 0, ), {, throw, new]
[||, yval, ., length, ==, 0, ||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;]
[||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length]
[==, 0, ||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval]
[., length, ==, 0, ||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if]
[||, fval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, fval, ., length, ), {]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, fval, ., length]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, fval]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, fval, ., length, ), {]
[;, }, if, (, xval, ., length, !=, fval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, fval, ., length, ), ;, }, final, int, xLen, =]
[!=, fval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, fval, ., length, ), ;, }]
[., length, !=, fval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, fval, ., length, )]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, fval, ., length, ), ;, }, final, int, xLen, =]
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, fval, ., length, ), ;, }, final, int]
[;, }, final, int, xLen, =, xval, ., length, ;, final, int, yLen, =, yval, ., length, ;, for, (]
[,, fval, ., length, ), ;, }, final, int, xLen, =, xval, ., length, ;, final, int, yLen, =, yval]
[., length, ,, fval, ., length, ), ;, }, final, int, xLen, =, xval, ., length, ;, final, int, yLen]
[), ;, }, final, int, xLen, =, xval, ., length, ;, final, int, yLen, =, yval, ., length, ;, for]
[., length, ), ;, }, final, int, xLen, =, xval, ., length, ;, final, int, yLen, =, yval, ., length]
[;, final, int, yLen, =, yval, ., length, ;, for, (, int, i, =, 0, ;, i, <, xLen, ;]
[., length, ;, final, int, yLen, =, yval, ., length, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, if, (, fval, []
[., length, ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, if, (]
[;, i, <, xLen, ;, i, ++, ), {, if, (, fval, [, i, ], ., length, !=, yLen, )]
[;, i, ++, ), {, if, (, fval, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[<, xLen, ;, i, ++, ), {, if, (, fval, [, i, ], ., length, !=, yLen, ), {, throw]
[;, i, ++, ), {, if, (, fval, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException]
[), {, if, (, fval, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, fval, []
[++, ), {, if, (, fval, [, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, fval]
[), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,, yLen, ), ;, }, }, MathArrays, .]
[!=, yLen, ), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,, yLen, ), ;, }, }]
[., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,, yLen, ), ;]
[[, i, ], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,]
[], ., length, !=, yLen, ), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,, yLen, )]
[), {, throw, new, DimensionMismatchException, (, fval, [, i, ], ., length, ,, yLen, ), ;, }, }, MathArrays, .]
[;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (, yval, ), ;, final, PolynomialFunction, []
[,, yLen, ), ;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (, yval, ), ;]
[., length, ,, yLen, ), ;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (, yval]
[[, i, ], ., length, ,, yLen, ), ;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, .]
[], ., length, ,, yLen, ), ;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (]
[), ;, }, }, MathArrays, ., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (, yval, ), ;, final, PolynomialFunction]
[;, MathArrays, ., checkOrder, (, yval, ), ;, final, PolynomialFunction, [, ], yPolyX, =, new, PolynomialFunction, [, yLen, ], ;]
[., checkOrder, (, xval, ), ;, MathArrays, ., checkOrder, (, yval, ), ;, final, PolynomialFunction, [, ], yPolyX, =, new]
[), ;, MathArrays, ., checkOrder, (, yval, ), ;, final, PolynomialFunction, [, ], yPolyX, =, new, PolynomialFunction, [, yLen, ]]
[;, final, PolynomialFunction, [, ], yPolyX, =, new, PolynomialFunction, [, yLen, ], ;, for, (, int, j, =, 0, ;]
[., checkOrder, (, yval, ), ;, final, PolynomialFunction, [, ], yPolyX, =, new, PolynomialFunction, [, yLen, ], ;, for, (]
[), ;, final, PolynomialFunction, [, ], yPolyX, =, new, PolynomialFunction, [, yLen, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, xFitter, ., clearObservations, (]
[], ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, xFitter, ., clearObservations]
[;, j, <, yLen, ;, j, ++, ), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =]
[;, j, ++, ), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, yLen, ;, j, ++, ), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =, 0, ;]
[;, j, ++, ), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i]
[++, ), {, xFitter, ., clearObservations, (, ), ;, for, (, int, i, =, 0, ;, i, <, xLen, ;]
[;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, xFitter, ., addObservedPoint, (]
[., clearObservations, (, ), ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {]
[;, i, <, xLen, ;, i, ++, ), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,]
[;, i, ++, ), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, [, i, ]]
[<, xLen, ;, i, ++, ), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, []
[;, i, ++, ), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, [, i, ]]
[), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, [, i, ], [, j, ]]
[++, ), {, xFitter, ., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, [, i, ], [, j]
[;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree, +, 1]
[., addObservedPoint, (, 1, ,, xval, [, i, ], ,, fval, [, i, ], [, j, ], ), ;, }]
[,, xval, [, i, ], ,, fval, [, i, ], [, j, ], ), ;, }, yPolyX, [, j, ]]
[,, fval, [, i, ], [, j, ], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter]
[[, i, ], ,, fval, [, i, ], [, j, ], ), ;, }, yPolyX, [, j, ], =, new]
[], ,, fval, [, i, ], [, j, ], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (]
[), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree, +]
[[, j, ], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double]
[[, i, ], [, j, ], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit]
[], [, j, ], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new]
[], ), ;, }, yPolyX, [, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree]
[=, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree, +, 1, ], ), ), ;, }, final]
[[, j, ], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree, +, 1, ], ), )]
[], =, new, PolynomialFunction, (, xFitter, ., fit, (, new, double, [, xDegree, +, 1, ], ), ), ;, }]
[;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ], [, yLen, ], ;, for]
[), ;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ], [, yLen, ], ;]
[., fit, (, new, double, [, xDegree, +, 1, ], ), ), ;, }, final, double, [, ], [, ]]
[), ), ;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ], [, yLen, ]]
[], ), ), ;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ], [, yLen]
[+, 1, ], ), ), ;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ]]
[], ), ), ;, }, final, double, [, ], [, ], fval_1, =, new, double, [, xLen, ], [, yLen]
[;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, final, PolynomialFunction, f, =]
[], [, yLen, ], ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {]
[], ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, final, PolynomialFunction, f]
[;, j, <, yLen, ;, j, ++, ), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (]
[;, j, ++, ), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (, int, i, =, 0]
[<, yLen, ;, j, ++, ), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (, int, i]
[;, j, ++, ), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (, int, i, =, 0]
[), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (, int, i, =, 0, ;, i, <]
[++, ), {, final, PolynomialFunction, f, =, yPolyX, [, j, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, fval_1, [, i, ]]
[[, j, ], ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, fval_1]
[], ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, fval_1, [, i]
[;, i, <, xLen, ;, i, ++, ), {, fval_1, [, i, ], [, j, ], =, f, ., value]
[;, i, ++, ), {, fval_1, [, i, ], [, j, ], =, f, ., value, (, xval, [, i]
[<, xLen, ;, i, ++, ), {, fval_1, [, i, ], [, j, ], =, f, ., value, (, xval]
[;, i, ++, ), {, fval_1, [, i, ], [, j, ], =, f, ., value, (, xval, [, i]
[), {, fval_1, [, i, ], [, j, ], =, f, ., value, (, xval, [, i, ], ), ;]
[++, ), {, fval_1, [, i, ], [, j, ], =, f, ., value, (, xval, [, i, ], )]
[=, f, ., value, (, xval, [, i, ], ), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new]
[[, j, ], =, f, ., value, (, xval, [, i, ], ), ;, }, }, final, PolynomialFunction, [, ]]
[[, i, ], [, j, ], =, f, ., value, (, xval, [, i, ], ), ;, }, }, final]
[], [, j, ], =, f, ., value, (, xval, [, i, ], ), ;, }, }, final, PolynomialFunction, []
[], =, f, ., value, (, xval, [, i, ], ), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =]
[;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new, PolynomialFunction, [, xLen, ], ;, for, (, int, i, =]
[., value, (, xval, [, i, ], ), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new, PolynomialFunction, []
[), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new, PolynomialFunction, [, xLen, ], ;, for, (, int, i]
[[, i, ], ), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new, PolynomialFunction, [, xLen, ], ;, for]
[], ), ;, }, }, final, PolynomialFunction, [, ], xPolyY, =, new, PolynomialFunction, [, xLen, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, yFitter, ., clearObservations, (]
[], ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, yFitter, ., clearObservations]
[;, i, <, xLen, ;, i, ++, ), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =]
[;, i, ++, ), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[<, xLen, ;, i, ++, ), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =, 0, ;]
[;, i, ++, ), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j]
[++, ), {, yFitter, ., clearObservations, (, ), ;, for, (, int, j, =, 0, ;, j, <, yLen, ;]
[;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, yFitter, ., addObservedPoint, (]
[., clearObservations, (, ), ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {]
[;, j, <, yLen, ;, j, ++, ), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,]
[;, j, ++, ), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, [, i, ]]
[<, yLen, ;, j, ++, ), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, []
[;, j, ++, ), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, [, i, ]]
[), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, [, i, ], [, j, ]]
[++, ), {, yFitter, ., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, [, i, ], [, j]
[;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree, +, 1]
[., addObservedPoint, (, 1, ,, yval, [, j, ], ,, fval_1, [, i, ], [, j, ], ), ;, }]
[,, yval, [, j, ], ,, fval_1, [, i, ], [, j, ], ), ;, }, xPolyY, [, i, ]]
[,, fval_1, [, i, ], [, j, ], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter]
[[, j, ], ,, fval_1, [, i, ], [, j, ], ), ;, }, xPolyY, [, i, ], =, new]
[], ,, fval_1, [, i, ], [, j, ], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (]
[), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree, +]
[[, j, ], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double]
[[, i, ], [, j, ], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit]
[], [, j, ], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new]
[], ), ;, }, xPolyY, [, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree]
[=, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree, +, 1, ], ), ), ;, }, final]
[[, i, ], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree, +, 1, ], ), )]
[], =, new, PolynomialFunction, (, yFitter, ., fit, (, new, double, [, yDegree, +, 1, ], ), ), ;, }]
[;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ], [, yLen, ], ;, for]
[), ;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ], [, yLen, ], ;]
[., fit, (, new, double, [, yDegree, +, 1, ], ), ), ;, }, final, double, [, ], [, ]]
[), ), ;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ], [, yLen, ]]
[], ), ), ;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ], [, yLen]
[+, 1, ], ), ), ;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ]]
[], ), ), ;, }, final, double, [, ], [, ], fval_2, =, new, double, [, xLen, ], [, yLen]
[;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, final, PolynomialFunction, f, =]
[], [, yLen, ], ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, xLen, ;, i, ++, ), {, final, PolynomialFunction, f]
[;, i, <, xLen, ;, i, ++, ), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (]
[;, i, ++, ), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (, int, j, =, 0]
[<, xLen, ;, i, ++, ), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (, int, j]
[;, i, ++, ), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (, int, j, =, 0]
[), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[++, ), {, final, PolynomialFunction, f, =, xPolyY, [, i, ], ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, fval_2, [, i, ]]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, fval_2]
[], ;, for, (, int, j, =, 0, ;, j, <, yLen, ;, j, ++, ), {, fval_2, [, i]
[;, j, <, yLen, ;, j, ++, ), {, fval_2, [, i, ], [, j, ], =, f, ., value]
[;, j, ++, ), {, fval_2, [, i, ], [, j, ], =, f, ., value, (, yval, [, j]
[<, yLen, ;, j, ++, ), {, fval_2, [, i, ], [, j, ], =, f, ., value, (, yval]
[;, j, ++, ), {, fval_2, [, i, ], [, j, ], =, f, ., value, (, yval, [, j]
[), {, fval_2, [, i, ], [, j, ], =, f, ., value, (, yval, [, j, ], ), ;]
[++, ), {, fval_2, [, i, ], [, j, ], =, f, ., value, (, yval, [, j, ], )]
[=, f, ., value, (, yval, [, j, ], ), ;, }, }, return, super, ., interpolate, (, xval, ,]
[[, j, ], =, f, ., value, (, yval, [, j, ], ), ;, }, }, return, super, ., interpolate]
[[, i, ], [, j, ], =, f, ., value, (, yval, [, j, ], ), ;, }, }, return]
[], [, j, ], =, f, ., value, (, yval, [, j, ], ), ;, }, }, return, super, .]
[], =, f, ., value, (, yval, [, j, ], ), ;, }, }, return, super, ., interpolate, (, xval]
[;, }, }, return, super, ., interpolate, (, xval, ,, yval, ,, fval_2, ), ;, }, }]
[., value, (, yval, [, j, ], ), ;, }, }, return, super, ., interpolate, (, xval, ,, yval, ,]
[), ;, }, }, return, super, ., interpolate, (, xval, ,, yval, ,, fval_2, ), ;, }, }]
[[, j, ], ), ;, }, }, return, super, ., interpolate, (, xval, ,, yval, ,, fval_2, ), ;, }]
[], ), ;, }, }, return, super, ., interpolate, (, xval, ,, yval, ,, fval_2, ), ;, }, }]
[;, }, }]
[., interpolate, (, xval, ,, yval, ,, fval_2, ), ;, }, }]
[,, yval, ,, fval_2, ), ;, }, }]
[,, fval_2, ), ;, }, }]
[), ;, }, }]
