[List, ;, class, CleanupPasses, extends, PassConfig, {, private, State, state, ;, public, CleanupPasses, (, CompilerOptions, options, ), {, super, (]
[), ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =]
[), ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =]
[List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;]
[List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;]
[getChecks, (, ), {, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (]
[{, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;]
[{, List, <, PassFactory, >, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;]
[>, checks, =, Lists, ., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (]
[Lists, ., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;]
[Lists, ., newArrayList, (, ), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;]
[), ;, checks, ., add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (]
[add, (, fieldCleanupPassFactory, ), ;, checks, ., add, (, scopeCleanupPassFactory, ), ;, checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return]
[checks, ., add, (, globalVarRefCleanupPassFactory, ), ;, return, checks, ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return]
[getIntermediateState, (, ), {, return, state, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return]
[getIntermediateState, (, ), {, return, state, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return]
[), {, return, ImmutableList, ., of, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[), {, return, ImmutableList, ., of, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[., of, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., state, =]
[Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., state, =, state, ;, }, final, PassFactory, fieldCleanupPassFactory, =]
[setIntermediateState, (, State, state, ), {, this, ., state, =, state, ;, }, final, PassFactory, fieldCleanupPassFactory, =, new, HotSwapPassFactory, (]
[State, state, ), {, this, ., state, =, state, ;, }, final, PassFactory, fieldCleanupPassFactory, =, new, HotSwapPassFactory, (, "FieldCleaupPassFactory", ,]
[=, new, HotSwapPassFactory, (, "FieldCleaupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "FieldCleaupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FieldCleanupPass, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, FieldCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, scopeCleanupPassFactory, =]
[compiler, ), {, return, new, FieldCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, scopeCleanupPassFactory, =, new, HotSwapPassFactory, (]
[{, return, new, FieldCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, scopeCleanupPassFactory, =, new, HotSwapPassFactory, (, "ScopeCleanupPassFactory", ,]
[=, new, HotSwapPassFactory, (, "ScopeCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "ScopeCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MemoizedScopeCleanupPass, (]
[create, (, AbstractCompiler, compiler, ), {, return, new, MemoizedScopeCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, globalVarRefCleanupPassFactory, =]
[compiler, ), {, return, new, MemoizedScopeCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, globalVarRefCleanupPassFactory, =, new, HotSwapPassFactory, (]
[{, return, new, MemoizedScopeCleanupPass, (, compiler, ), ;, }, }, ;, final, PassFactory, globalVarRefCleanupPassFactory, =, new, HotSwapPassFactory, (, "GlobalVarRefCleanupPassFactory", ,]
[=, new, HotSwapPassFactory, (, "GlobalVarRefCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return]
[(, "GlobalVarRefCleanupPassFactory", ,, false, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalVarRefCleanupPass, (]
[}, ;, static, class, MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler, compiler, ), {]
[}, ;, static, class, MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler, compiler, ), {]
[MemoizedScopeCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, MemoizedScopeCleanupPass, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =]
[hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (]
[hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, ScopeCreator, creator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (]
[{, ScopeCreator, creator, =, compiler, ., getTypedScopeCreator, (, ), ;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =]
[=, compiler, ., getTypedScopeCreator, (, ), ;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, )]
[), ;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =]
[), ;, if, (, creator, instanceof, MemoizedScopeCreator, ), {, MemoizedScopeCreator, scopeCreator, =, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =]
[=, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, ), ;, for, (, Var, var, :]
[=, (, MemoizedScopeCreator, ), creator, ;, String, newSrc, =, scriptRoot, ., getSourceFileName, (, ), ;, for, (, Var, var, :]
[., getSourceFileName, (, ), ;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =]
[., getSourceFileName, (, ), ;, for, (, Var, var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =]
[var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (]
[var, :, scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (]
[scopeCreator, ., getAllSymbols, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, !=]
[{, JSType, type, =, var, ., getType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =]
[{, JSType, type, =, var, ., getType, (, ), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =]
[), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[), ;, if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[if, (, type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=]
[type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&]
[type, !=, null, ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&]
[{, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals, (]
[{, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals, (]
[type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (]
[type, ., toMaybeFunctionType, (, ), ;, if, (, fnType, !=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (]
[!=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {]
[!=, null, &&, newSrc, ., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {]
[., equals, (, NodeUtil, ., getSourceName, (, fnType, ., getSource, (, ), ), ), ), {, fnType, ., setSource, (]
[(, fnType, ., getSource, (, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }]
[(, fnType, ., getSource, (, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }]
[(, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (]
[(, ), ), ), ), {, fnType, ., setSource, (, null, ), ;, }, }, }, scopeCreator, ., removeScopesForScript, (]
