[;, import, java, ., util, ., logging, ., *, ;, class, NameAnonymousFunctionsMapped, implements, CompilerPass, {, private, static, Logger, logger, =]
[;, import, java, ., util, ., logging, ., *, ;, class, NameAnonymousFunctionsMapped, implements, CompilerPass, {, private, static, Logger, logger, =]
[util, ., logging, ., *, ;, class, NameAnonymousFunctionsMapped, implements, CompilerPass, {, private, static, Logger, logger, =, Logger, ., getLogger, (]
[util, ., logging, ., *, ;, class, NameAnonymousFunctionsMapped, implements, CompilerPass, {, private, static, Logger, logger, =, Logger, ., getLogger, (]
[logger, =, Logger, ., getLogger, (, NameAnonymousFunctionsMapped, ., class, ., getName, (, ), ), ;, static, final, char, PREFIX, =]
[., class, ., getName, (, ), ), ;, static, final, char, PREFIX, =, '$', ;, static, final, String, PREFIX_STRING, =]
[;, private, final, VariableMap, previousMap, ;, private, final, Map, <, String, ,, String, >, renameMap, ;, private, int, namedCount, =]
[private, final, Map, <, String, ,, String, >, renameMap, ;, private, int, namedCount, =, 0, ;, private, int, bytesUsed, =]
[int, namedCount, =, 0, ;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctionsMapped, (, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {]
[int, namedCount, =, 0, ;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctionsMapped, (, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {]
[;, private, int, bytesUsed, =, 0, ;, NameAnonymousFunctionsMapped, (, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =]
[(, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =]
[(, AbstractCompiler, compiler, ,, VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =]
[compiler, ,, VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =, previousMap, !=]
[VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =, previousMap, !=, null, ?]
[VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =, previousMap, !=, null, ?]
[VariableMap, previousMap, ), {, this, ., compiler, =, compiler, ;, Set, <, String, >, reserved, =, previousMap, !=, null, ?]
[Set, <, String, >, reserved, =, previousMap, !=, null, ?, previousMap, ., getNewNameToOriginalNameMap, (, ), ., keySet, (, ), :]
[Set, <, String, >, reserved, =, previousMap, !=, null, ?, previousMap, ., getNewNameToOriginalNameMap, (, ), ., keySet, (, ), :]
[?, previousMap, ., getNewNameToOriginalNameMap, (, ), ., keySet, (, ), :, Collections, ., <, String, >, emptySet, (, ), ;]
[?, previousMap, ., getNewNameToOriginalNameMap, (, ), ., keySet, (, ), :, Collections, ., <, String, >, emptySet, (, ), ;]
[(, ), ., keySet, (, ), :, Collections, ., <, String, >, emptySet, (, ), ;, this, ., nameGenerator, =]
[keySet, (, ), :, Collections, ., <, String, >, emptySet, (, ), ;, this, ., nameGenerator, =, new, NameGenerator, (]
[), :, Collections, ., <, String, >, emptySet, (, ), ;, this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,]
[Collections, ., <, String, >, emptySet, (, ), ;, this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,]
[String, >, emptySet, (, ), ;, this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;]
[String, >, emptySet, (, ), ;, this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;]
[), ;, this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;, this, ., previousMap, =]
[this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;, this, ., previousMap, =, previousMap, ;]
[this, ., nameGenerator, =, new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;, this, ., previousMap, =, previousMap, ;]
[new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;, this, ., previousMap, =, previousMap, ;, this, ., renameMap, =]
[new, NameGenerator, (, reserved, ,, PREFIX_STRING, ,, null, ), ;, this, ., previousMap, =, previousMap, ;, this, ., renameMap, =]
[(, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (]
[(, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;]
[(, Node, externs, ,, Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;]
[Node, root, ), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (]
[), {, AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[AnonymousFunctionNamingCallback, namingCallback, =, new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;]
[new, AnonymousFunctionNamingCallback, (, new, MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;]
[MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[MappedFunctionNamer, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +]
[., traverse, (, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +]
[(, compiler, ,, root, ,, namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +]
[namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +, " bytes", ), ;, if, (]
[namingCallback, ), ;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +, " bytes", ), ;, if, (]
[;, logger, ., fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +, " bytes", ), ;, if, (, namedCount, >]
[fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +, " bytes", ), ;, if, (, namedCount, >, 0, ), {]
[fine, (, "Named ", +, namedCount, +, " anon functions using ", +, bytesUsed, +, " bytes", ), ;, if, (, namedCount, >, 0, ), {]
[., reportCodeChange, (, ), ;, }, }, private, class, MappedFunctionNamer, implements, AnonymousFunctionNamingCallback, ., FunctionNamer, {, static, final, char, DELIMITER, =]
[static, final, char, DELIMITER, =, '.', ;, @, Override, public, final, String, getName, (, Node, node, ), {, switch, (]
[static, final, char, DELIMITER, =, '.', ;, @, Override, public, final, String, getName, (, Node, node, ), {, switch, (]
[Override, public, final, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[Override, public, final, String, getName, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[(, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[(, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, case]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., STRING, :, case]
[switch, (, node, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., STRING, :, case]
[(, ), ), {, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return]
[(, ), ), {, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return]
[case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, node, ., getString, (, ), ;, default, :, return]
[case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, return, node, ., getString, (, ), ;, default, :, return]
[case, Token, ., STRING_KEY, :, return, node, ., getString, (, ), ;, default, :, return, new, CodePrinter, ., Builder, (]
[;, }, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =]
[;, }, }, @, Override, public, final, void, setFunctionName, (, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =]
[(, String, name, ,, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, newName, =]
[name, ,, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (]
[fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (, name, ), ;]
[fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (, name, ), ;]
[fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (]
[., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (, newName, ), ;]
[., getFirstChild, (, ), ;, String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (, newName, ), ;]
[), ;, String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (, newName, ), ;, namedCount, ++, ;]
[String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (, newName, ), ;, namedCount, ++, ;, bytesUsed, +=]
[String, newName, =, getAlternateName, (, name, ), ;, fnNameNode, ., setString, (, newName, ), ;, namedCount, ++, ;, bytesUsed, +=]
[;, bytesUsed, +=, newName, ., length, (, ), ;, }, String, getAlternateName, (, String, name, ), {, String, newName, =]
[;, bytesUsed, +=, newName, ., length, (, ), ;, }, String, getAlternateName, (, String, name, ), {, String, newName, =]
[., length, (, ), ;, }, String, getAlternateName, (, String, name, ), {, String, newName, =, renameMap, ., get, (]
[}, String, getAlternateName, (, String, name, ), {, String, newName, =, renameMap, ., get, (, name, ), ;, if, (]
[}, String, getAlternateName, (, String, name, ), {, String, newName, =, renameMap, ., get, (, name, ), ;, if, (]
[getAlternateName, (, String, name, ), {, String, newName, =, renameMap, ., get, (, name, ), ;, if, (, newName, ==]
[{, String, newName, =, renameMap, ., get, (, name, ), ;, if, (, newName, ==, null, ), {, if, (]
[{, String, newName, =, renameMap, ., get, (, name, ), ;, if, (, newName, ==, null, ), {, if, (]
[newName, =, renameMap, ., get, (, name, ), ;, if, (, newName, ==, null, ), {, if, (, previousMap, !=]
[., get, (, name, ), ;, if, (, newName, ==, null, ), {, if, (, previousMap, !=, null, ), {]
[(, name, ), ;, if, (, newName, ==, null, ), {, if, (, previousMap, !=, null, ), {, newName, =]
[(, name, ), ;, if, (, newName, ==, null, ), {, if, (, previousMap, !=, null, ), {, newName, =]
[if, (, newName, ==, null, ), {, if, (, previousMap, !=, null, ), {, newName, =, previousMap, ., lookupNewName, (]
[{, if, (, previousMap, !=, null, ), {, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (]
[{, if, (, previousMap, !=, null, ), {, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (]
[(, previousMap, !=, null, ), {, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (, newName, ==]
[null, ), {, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (, newName, ==, null, ), {]
[{, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (, newName, ==, null, ), {, newName, =]
[{, newName, =, previousMap, ., lookupNewName, (, name, ), ;, }, if, (, newName, ==, null, ), {, newName, =]
[name, ), ;, }, if, (, newName, ==, null, ), {, newName, =, nameGenerator, ., generateNextName, (, ), ;, }]
[name, ), ;, }, if, (, newName, ==, null, ), {, newName, =, nameGenerator, ., generateNextName, (, ), ;, }]
[if, (, newName, ==, null, ), {, newName, =, nameGenerator, ., generateNextName, (, ), ;, }, renameMap, ., put, (]
[newName, ==, null, ), {, newName, =, nameGenerator, ., generateNextName, (, ), ;, }, renameMap, ., put, (, name, ,]
[newName, =, nameGenerator, ., generateNextName, (, ), ;, }, renameMap, ., put, (, name, ,, newName, ), ;, }, return]
[}, return, newName, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[}, return, newName, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[}, return, newName, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return]
[newName, ;, }, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +]
[}, @, Override, public, final, String, getCombinedName, (, String, lhs, ,, String, rhs, ), {, return, lhs, +, DELIMITER, +]
[,, String, rhs, ), {, return, lhs, +, DELIMITER, +, rhs, ;, }, }, VariableMap, getFunctionMap, (, ), {, return]
[), {, return, lhs, +, DELIMITER, +, rhs, ;, }, }, VariableMap, getFunctionMap, (, ), {, return, new, VariableMap, (]
[), {, return, lhs, +, DELIMITER, +, rhs, ;, }, }, VariableMap, getFunctionMap, (, ), {, return, new, VariableMap, (]
[+, DELIMITER, +, rhs, ;, }, }, VariableMap, getFunctionMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf, (]
