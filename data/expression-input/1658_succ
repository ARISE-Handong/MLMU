[;, private, static, final, long, serialVersionUID, =, -, 8516354193418641566L, ;, private, final, double, numeratorDegreesOfFreedom, ;, private, final, double, denominatorDegreesOfFreedom, ;]
[;, private, final, double, numeratorDegreesOfFreedom, ;, private, final, double, denominatorDegreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, private, double, numericalVariance, =]
[;, private, final, double, numeratorDegreesOfFreedom, ;, private, final, double, denominatorDegreesOfFreedom, ;, private, final, double, solverAbsoluteAccuracy, ;, private, double, numericalVariance, =]
[;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this]
[., NaN, ;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException]
[;, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ), throws, NotStrictlyPositiveException, {, this, (, numeratorDegreesOfFreedom, ,, denominatorDegreesOfFreedom, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
[,, denominatorDegreesOfFreedom, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, FDistribution, (, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[,, numeratorDegreesOfFreedom, ,, denominatorDegreesOfFreedom, ,, inverseCumAccuracy, ), ;, }, public, FDistribution, (, RandomGenerator, rng, ,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom]
[,, denominatorDegreesOfFreedom, ,, inverseCumAccuracy, ), ;, }, public, FDistribution, (, RandomGenerator, rng, ,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double]
[,, inverseCumAccuracy, ), ;, }, public, FDistribution, (, RandomGenerator, rng, ,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, )]
[), ;, }, public, FDistribution, (, RandomGenerator, rng, ,, double, numeratorDegreesOfFreedom, ,, double, denominatorDegreesOfFreedom, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException]
[), ;, if, (, numeratorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, )]
[;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;]
[,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,]
[., DEGREES_OF_FREEDOM, ,, numeratorDegreesOfFreedom, ), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, denominatorDegreesOfFreedom, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;]
[;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public]
[,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy]
[., DEGREES_OF_FREEDOM, ,, denominatorDegreesOfFreedom, ), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy]
[), ;, }, this, ., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }]
[=, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x]
[., numeratorDegreesOfFreedom, =, numeratorDegreesOfFreedom, ;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (]
[;, this, ., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {]
[=, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =]
[., denominatorDegreesOfFreedom, =, denominatorDegreesOfFreedom, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /]
[=, inverseCumAccuracy, ;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;]
[;, }, public, double, density, (, double, x, ), {, final, double, nhalf, =, numeratorDegreesOfFreedom, /, 2, ;, final, double]
[;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (, x, ), ;]
[/, 2, ;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (, x]
[;, final, double, mhalf, =, denominatorDegreesOfFreedom, /, 2, ;, final, double, logx, =, FastMath, ., log, (, x, ), ;]
[;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (]
[/, 2, ;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =, FastMath, .]
[;, final, double, logx, =, FastMath, ., log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (]
[;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log, (]
[., log, (, x, ), ;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm]
[), ;, final, double, logn, =, FastMath, ., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log]
[;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (]
[., log, (, numeratorDegreesOfFreedom, ), ;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm]
[), ;, final, double, logm, =, FastMath, ., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log]
[;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp]
[., log, (, denominatorDegreesOfFreedom, ), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, )]
[), ;, final, double, lognxm, =, FastMath, ., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, .]
[;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -]
[., log, (, numeratorDegreesOfFreedom, *, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf]
[), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm]
[+, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf]
[*, x, +, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx]
[+, denominatorDegreesOfFreedom, ), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf]
[), ;, return, FastMath, ., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {]
[., exp, (, nhalf, *, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, )]
[-, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[-, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (]
[-, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }]
[+, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf]
[-, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf]
[+, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta]
[*, logn, +, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm]
[+, nhalf, *, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta]
[-, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf]
[*, logx, -, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta]
[-, logx, +, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf]
[+, mhalf, *, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf]
[-, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }]
[*, logm, -, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), )]
[-, nhalf, *, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }]
[-, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (]
[*, lognxm, -, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double]
[-, mhalf, *, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (]
[-, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[*, lognxm, -, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x]
[-, Beta, ., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, )]
[., logBeta, (, nhalf, ,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret]
[,, mhalf, ), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x]
[), ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0]
[), {, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret]
[<=, 0, ), {, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom]
[), {, ret, =, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret]
[=, 0, ;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, .]
[;, }, else, {, double, n, =, numeratorDegreesOfFreedom, ;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (]
[;, double, m, =, denominatorDegreesOfFreedom, ;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m]
[;, ret, =, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, )]
[=, Beta, ., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5]
[;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public, double, getDenominatorDegreesOfFreedom, (]
[., regularizedBeta, (, (, n, *, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *, n]
[,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, )]
[/, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return]
[), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }]
[*, x, ), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, )]
[), /, (, m, +, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }]
[,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, )]
[), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (]
[+, n, *, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }]
[), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (]
[*, x, ), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double]
[), ,, 0.5, *, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (]
[,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;]
[*, n, ,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return]
[,, 0.5, *, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;]
[), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public, double, getDenominatorDegreesOfFreedom]
[*, m, ), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public]
[), ;, }, return, ret, ;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public, double, getDenominatorDegreesOfFreedom]
[;, }, public, double, getNumeratorDegreesOfFreedom, (, ), {, return, numeratorDegreesOfFreedom, ;, }, public, double, getDenominatorDegreesOfFreedom, (, ), {, return, denominatorDegreesOfFreedom]
[;, }, public, double, getDenominatorDegreesOfFreedom, (, ), {, return, denominatorDegreesOfFreedom, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[;, }, public, double, getNumericalMean, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >]
[;, if, (, denominatorDF, >, 2, ), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return, Double]
[), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double]
[>, 2, ), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return, Double, ., NaN, ;, }]
[), {, return, denominatorDF, /, (, denominatorDF, -, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double]
[;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[/, (, denominatorDF, -, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, )]
[-, 2, ), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !]
[), ;, }, return, Double, ., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, )]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[., NaN, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[=, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =]
[=, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (]
[;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, double, denominatorDF, =, getDenominatorDegreesOfFreedom, (, ), ;, if, (, denominatorDF, >]
[;, if, (, denominatorDF, >, 4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =]
[), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (]
[>, 4, ), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;]
[), {, final, double, numeratorDF, =, getNumeratorDegreesOfFreedom, (, ), ;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (]
[;, final, double, denomDFMinusTwo, =, denominatorDF, -, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (]
[;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /]
[-, 2, ;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, )]
[;, return, (, 2, *, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /]
[;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double]
[/, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;, }]
[), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;]
[*, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *]
[*, (, denominatorDF, *, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *]
[*, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *]
[), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, )]
[*, denominatorDF, ), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *]
[), *, (, numeratorDF, +, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, )]
[), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;]
[), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), )]
[-, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, )]
[+, denominatorDF, -, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -]
[-, 2, ), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, )]
[), ), /, (, (, numeratorDF, *, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), )]
[;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double]
[), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }]
[*, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (]
[*, (, denomDFMinusTwo, *, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN]
[*, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (]
[), *, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound]
[*, denomDFMinusTwo, ), *, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public]
[), *, (, denominatorDF, -, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound]
[), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }]
[), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;]
[-, 4, ), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ), ), ;, }, return, Double, ., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[., NaN, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
