[math3, ., exception, ., util, ., LocalizedFormats, ;, public, class, FractionFormat, extends, AbstractFormat, {, private, static, final, long, serialVersionUID, =]
[serialVersionUID, =, 3008655719530972611L, ;, public, FractionFormat, (, ), {, }, public, FractionFormat, (, final, NumberFormat, format, ), {, super, (]
[super, (, format, ), ;, }, public, FractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (]
[format, ), ;, }, public, FractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,]
[), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return]
[), {, super, (, numeratorFormat, ,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return]
[), {, return, NumberFormat, ., getAvailableLocales, (, ), ;, }, public, static, String, formatFraction, (, Fraction, f, ), {, return]
[), {, return, NumberFormat, ., getAvailableLocales, (, ), ;, }, public, static, String, formatFraction, (, Fraction, f, ), {, return]
[(, ), ;, }, public, static, String, formatFraction, (, Fraction, f, ), {, return, getImproperInstance, (, ), ., format, (]
[{, return, getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return]
[getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (]
[getImproperInstance, (, ), ., format, (, f, ), ;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (]
[(, Locale, ., getDefault, (, ), ), ;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return]
[getDefault, (, ), ), ;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, FractionFormat, (]
[), ), ;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, FractionFormat, (, getDefaultNumberFormat, (]
[{, return, new, FractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, ), {, return]
[new, FractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, ), {, return, getProperInstance, (]
[new, FractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, ), {, return, getProperInstance, (]
[(, Locale, ., getDefault, (, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return]
[getDefault, (, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperFractionFormat, (]
[), ), ;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperFractionFormat, (, getDefaultNumberFormat, (]
[{, return, new, ProperFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return]
[new, ProperFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (]
[new, ProperFractionFormat, (, getDefaultNumberFormat, (, locale, ), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (]
[), ;, }, public, StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[), ;, }, public, StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (]
[final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (]
[,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;]
[,, final, FieldPosition, pos, ), {, pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;]
[pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (]
[pos, ., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (]
[;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,]
[., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,]
[0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;]
[0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;]
[(, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;]
[), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,]
[), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return]
[final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), throws, FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), throws, FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =, null, ;, if, (]
[final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), throws, FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =, null, ;, if, (]
[FieldPosition, pos, ), throws, FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =, null, ;, if, (, obj, instanceof, Fraction, ), {]
[), throws, FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =, null, ;, if, (, obj, instanceof, Fraction, ), {, ret, =]
[FractionConversionException, ,, MathIllegalArgumentException, {, StringBuffer, ret, =, null, ;, if, (, obj, instanceof, Fraction, ), {, ret, =, format, (]
[{, StringBuffer, ret, =, null, ;, if, (, obj, instanceof, Fraction, ), {, ret, =, format, (, (, Fraction, )]
[ret, =, null, ;, if, (, obj, instanceof, Fraction, ), {, ret, =, format, (, (, Fraction, ), obj, ,]
[null, ;, if, (, obj, instanceof, Fraction, ), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,]
[), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[(, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {]
[Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =]
[obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (]
[pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (, (]
[}, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (, (, (, Number, )]
[{, ret, =, format, (, new, Fraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,]
[=, format, (, new, Fraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,]
[(, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw]
[obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (]
[obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (]
[,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return]
[ret, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =]
[@, Override, public, Fraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (]
[String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =]
[), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =, parse, (]
[MathParseException, {, final, ParsePosition, parsePosition, =, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =, parse, (, source, ,]
[=, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[=, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[=, new, ParsePosition, (, 0, ), ;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (]
[;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==]
[=, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw]
[source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (]
[parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,]
[parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,]
[., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,]
[{, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, Fraction, ., class, ), ;, }, return]
[}, @, Override, public, Fraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =]
[}, @, Override, public, Fraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =]
[(, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;]
[String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (]
[,, final, ParsePosition, pos, ), {, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =]
[int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =]
[(, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,]
[pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==]
[num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {]
[), ., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[=, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (]
[(, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case]
[final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (]
[=, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (]
[), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,]
[c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case]
[return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :]
[return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :]
[num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (]
[(, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[(, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }]
[pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (]
[setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,]
[setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =]
[setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =]
[null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (]
[}, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,]
[pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (]
[;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==]
[den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[), ., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (]
[source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return]
[den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (]
[den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue, (, ), ,]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue, (, ), ,]
