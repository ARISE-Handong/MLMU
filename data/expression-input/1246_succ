[;, private, DiGraph, <, JsName, ,, RefType, >, referenceGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, private, final, ListMultimap, <]
[., newTreeMap, (, ), ;, private, DiGraph, <, JsName, ,, RefType, >, referenceGraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;]
[;, private, final, ListMultimap, <, Node, ,, NameInformation, >, scopes, =, LinkedListMultimap, ., create, (, ), ;, private, static, final]
[., createWithoutAnnotations, (, ), ;, private, final, ListMultimap, <, Node, ,, NameInformation, >, scopes, =, LinkedListMultimap, ., create, (, )]
[;, private, static, final, String, PROTOTYPE_SUBSTRING, =, ".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =, PROTOTYPE_SUBSTRING, ., length, (, )]
[., create, (, ), ;, private, static, final, String, PROTOTYPE_SUBSTRING, =, ".prototype.", ;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =, PROTOTYPE_SUBSTRING]
[;, private, static, final, int, PROTOTYPE_SUBSTRING_LEN, =, PROTOTYPE_SUBSTRING, ., length, (, ), ;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =, ".prototype"]
[;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =, ".prototype", ., length, (, ), ;, private, static, final, String, WINDOW, =, "window"]
[., length, (, ), ;, private, static, final, int, PROTOTYPE_SUFFIX_LEN, =, ".prototype", ., length, (, ), ;, private, static, final]
[;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, String, FUNCTION, =, "Function", ;, static, final, Set]
[., length, (, ), ;, private, static, final, String, WINDOW, =, "window", ;, private, static, final, String, FUNCTION, =, "Function"]
[;, private, static, final, String, FUNCTION, =, "Function", ;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =, ImmutableSet, ., of]
[;, static, final, Set, <, String, >, DEFAULT_GLOBAL_NAMES, =, ImmutableSet, ., of, (, "window", ,, "goog.global", ), ;, private, final]
[;, private, final, boolean, removeUnreferenced, ;, private, final, Set, <, String, >, globalNames, ;, private, final, AstChangeProxy, changeProxy, ;, private]
[., of, (, "window", ,, "goog.global", ), ;, private, final, boolean, removeUnreferenced, ;, private, final, Set, <, String, >, globalNames]
[,, "goog.global", ), ;, private, final, boolean, removeUnreferenced, ;, private, final, Set, <, String, >, globalNames, ;, private, final, AstChangeProxy]
[), ;, private, final, boolean, removeUnreferenced, ;, private, final, Set, <, String, >, globalNames, ;, private, final, AstChangeProxy, changeProxy, ;]
[;, private, final, List, <, RefNode, >, refNodes, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String]
[., newHashSet, (, ), ;, private, final, List, <, RefNode, >, refNodes, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, Map, <, String, ,, AliasSet, >, aliases, =, Maps, ., newHashMap, (, ), ;, private, static, class]
[., newArrayList, (, ), ;, private, final, Map, <, String, ,, AliasSet, >, aliases, =, Maps, ., newHashMap, (, )]
[;, private, static, class, AliasSet, {, Set, <, String, >, names, =, Sets, ., newHashSet, (, ), ;, AliasSet, (]
[., newHashMap, (, ), ;, private, static, class, AliasSet, {, Set, <, String, >, names, =, Sets, ., newHashSet, (]
[;, AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (, name1, ), ;, names, ., add]
[., newHashSet, (, ), ;, AliasSet, (, String, name1, ,, String, name2, ), {, names, ., add, (, name1, )]
[;, names, ., add, (, name2, ), ;, }, }, private, static, enum, RefType, {, REGULAR, ,, INHERITANCE, ,, }]
[., add, (, name1, ), ;, names, ., add, (, name2, ), ;, }, }, private, static, enum, RefType, {]
[), ;, names, ., add, (, name2, ), ;, }, }, private, static, enum, RefType, {, REGULAR, ,, INHERITANCE, ,]
[;, }, }, private, static, enum, RefType, {, REGULAR, ,, INHERITANCE, ,, }, private, static, class, ReferencePropagationCallback, implements, EdgeCallback, <]
[., add, (, name2, ), ;, }, }, private, static, enum, RefType, {, REGULAR, ,, INHERITANCE, ,, }, private, static]
[), ;, }, }, private, static, enum, RefType, {, REGULAR, ,, INHERITANCE, ,, }, private, static, class, ReferencePropagationCallback, implements, EdgeCallback]
[), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return, false, ;, }, }, }]
[&&, !, to, ., referenced, ), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return]
[., referenced, &&, !, to, ., referenced, ), {, to, ., referenced, =, true, ;, return, true, ;, }, else]
[), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return, false, ;, }, }, }]
[), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return, false, ;, }, }, }]
[., referenced, ), {, to, ., referenced, =, true, ;, return, true, ;, }, else, {, return, false, ;, }]
[=, true, ;, return, true, ;, }, else, {, return, false, ;, }, }, }, private, static, class, NameInformation, {]
[., referenced, =, true, ;, return, true, ;, }, else, {, return, false, ;, }, }, }, private, static, class]
[;, return, true, ;, }, else, {, return, false, ;, }, }, }, private, static, class, NameInformation, {, String, name]
[;, }, else, {, return, false, ;, }, }, }, private, static, class, NameInformation, {, String, name, ;, boolean, isExternallyReferenceable]
[;, }, }, }, private, static, class, NameInformation, {, String, name, ;, boolean, isExternallyReferenceable, =, false, ;, boolean, isPrototype, =]
[;, boolean, isPrototype, =, false, ;, String, prototypeClass, =, null, ;, String, prototypeProperty, =, null, ;, String, superclass, =, null]
[;, String, prototypeClass, =, null, ;, String, prototypeProperty, =, null, ;, String, superclass, =, null, ;, boolean, onlyAffectsClassDef, =, false]
[;, String, prototypeProperty, =, null, ;, String, superclass, =, null, ;, boolean, onlyAffectsClassDef, =, false, ;, }, private, static, class]
[;, String, superclass, =, null, ;, boolean, onlyAffectsClassDef, =, false, ;, }, private, static, class, JsName, implements, Comparable, <, JsName]
[;, boolean, onlyAffectsClassDef, =, false, ;, }, private, static, class, JsName, implements, Comparable, <, JsName, >, {, String, name, ;]
[;, }, private, static, class, JsName, implements, Comparable, <, JsName, >, {, String, name, ;, List, <, String, >, prototypeNames]
[;, boolean, externallyDefined, =, false, ;, boolean, referenced, =, false, ;, boolean, hasWrittenDescendants, =, false, ;, boolean, hasInstanceOfReference, =, false]
[., newArrayList, (, ), ;, boolean, externallyDefined, =, false, ;, boolean, referenced, =, false, ;, boolean, hasWrittenDescendants, =, false, ;]
[;, boolean, referenced, =, false, ;, boolean, hasWrittenDescendants, =, false, ;, boolean, hasInstanceOfReference, =, false, ;, @, Override, public, String]
[;, boolean, hasWrittenDescendants, =, false, ;, boolean, hasInstanceOfReference, =, false, ;, @, Override, public, String, toString, (, ), {, StringBuilder]
[;, boolean, hasInstanceOfReference, =, false, ;, @, Override, public, String, toString, (, ), {, StringBuilder, out, =, new, StringBuilder, (]
[;, @, Override, public, String, toString, (, ), {, StringBuilder, out, =, new, StringBuilder, (, ), ;, out, ., append]
[;, out, ., append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out]
[;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;, out]
[., append, (, name, ), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append]
[), ;, if, (, prototypeNames, ., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;]
[), {, out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >]
[>, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <]
[., size, (, ), >, 0, ), {, out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: "]
[), {, out, ., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >]
[;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;]
[., append, (, " (CLASS)\n", ), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames]
[), ;, out, ., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, )]
[;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (, )]
[., append, (, " - FUNCTIONS: ", ), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, String, >, pIter, =, prototypeNames, ., iterator, (, ), ;, while, (, pIter, ., hasNext, (]
[;, while, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, pIter, ., next, (, ), )]
[., iterator, (, ), ;, while, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, pIter, .]
[), {, out, ., append, (, pIter, ., next, (, ), ), ;, if, (, pIter, ., hasNext, (, )]
[., hasNext, (, ), ), {, out, ., append, (, pIter, ., next, (, ), ), ;, if, (, pIter]
[;, if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, ", ", ), ;, }, }, }]
[., append, (, pIter, ., next, (, ), ), ;, if, (, pIter, ., hasNext, (, ), ), {, out]
[), ;, if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, ", ", ), ;, }, }]
[., next, (, ), ), ;, if, (, pIter, ., hasNext, (, ), ), {, out, ., append, (, ", "]
[), {, out, ., append, (, ", ", ), ;, }, }, }, return, out, ., toString, (, ), ;, }]
[., hasNext, (, ), ), {, out, ., append, (, ", ", ), ;, }, }, }, return, out, ., toString]
[;, }, }, }, return, out, ., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName, rhs]
[., append, (, ", ", ), ;, }, }, }, return, out, ., toString, (, ), ;, }, @, Override, public]
[), ;, }, }, }, return, out, ., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName]
[;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return, this, ., name, ., compareTo, (, rhs]
[., toString, (, ), ;, }, @, Override, public, int, compareTo, (, JsName, rhs, ), {, return, this, ., name]
[;, }, }, interface, RefNode, {, JsName, name, (, ), ;, void, remove, (, ), ;, }, private, class, JsNameRefNode]
[., compareTo, (, rhs, ., name, ), ;, }, }, interface, RefNode, {, JsName, name, (, ), ;, void, remove]
[., name, ., compareTo, (, rhs, ., name, ), ;, }, }, interface, RefNode, {, JsName, name, (, ), ;]
[), ;, }, }, interface, RefNode, {, JsName, name, (, ), ;, void, remove, (, ), ;, }, private, class]
[., name, ), ;, }, }, interface, RefNode, {, JsName, name, (, ), ;, void, remove, (, ), ;, }]
[Node, node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =, name]
[), Node, node, ;, Node, parent, ;, JsNameRefNode, (, JsName, name, ,, Node, node, ), {, this, ., name, =]
[=, name, ;, this, ., node, =, node, ;, this, ., parent, =, node, ., getParent, (, ), ;, }]
[., name, =, name, ;, this, ., node, =, node, ;, this, ., parent, =, node, ., getParent, (, )]
[;, this, ., node, =, node, ;, this, ., parent, =, node, ., getParent, (, ), ;, }, @, Override]
[=, node, ;, this, ., parent, =, node, ., getParent, (, ), ;, }, @, Override, public, JsName, name, (]
[., node, =, node, ;, this, ., parent, =, node, ., getParent, (, ), ;, }, @, Override, public, JsName]
[;, this, ., parent, =, node, ., getParent, (, ), ;, }, @, Override, public, JsName, name, (, ), {]
[=, node, ., getParent, (, ), ;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }]
[., parent, =, node, ., getParent, (, ), ;, }, @, Override, public, JsName, name, (, ), {, return, name]
[;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, @, Override, public, void, remove, (]
[., getParent, (, ), ;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, @, Override]
[;, }, @, Override, public, void, remove, (, ), {, Node, containingNode, =, parent, ., getParent, (, ), ;, switch]
[;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, parent]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions]
[), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (]
[., getType, (, ), ), {, case, Token, ., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, )]
[:, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break]
[., VAR, :, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, )]
[;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent]
[., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case]
[), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,]
[., hasOneChild, (, ), ), ;, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :]
[;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, .]
[,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;]
[), ;, break, ;, case, Token, ., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token]
[:, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult]
[., FUNCTION, :, replaceWithRhs, (, containingNode, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode]
[;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode]
[,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {]
[), ;, break, ;, case, Token, ., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (]
[:, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, )]
[., ASSIGN, :, if, (, containingNode, ., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,]
[), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,]
[., isExprResult, (, ), ), {, replaceWithRhs, (, containingNode, ., getParent, (, ), ,, containingNode, ), ;, }, else, {]
[;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, break]
[,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break, ;, case, Token, .]
[., getParent, (, ), ,, containingNode, ), ;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break]
[), ;, }, else, {, replaceWithRhs, (, containingNode, ,, parent, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, break, ;, }, }, }, private, class, PrototypeSetNode, extends, JsNameRefNode, {]
[,, parent, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, break, ;, }, }, }, private, class, PrototypeSetNode]
[), ;, }, break, ;, case, Token, ., OBJECTLIT, :, break, ;, }, }, }, private, class, PrototypeSetNode, extends, JsNameRefNode]
[:, break, ;, }, }, }, private, class, PrototypeSetNode, extends, JsNameRefNode, {, PrototypeSetNode, (, JsName, name, ,, Node, parent, )]
[., OBJECTLIT, :, break, ;, }, }, }, private, class, PrototypeSetNode, extends, JsNameRefNode, {, PrototypeSetNode, (, JsName, name, ,, Node]
[,, parent, ., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, }]
[), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, }, @, Override, public, void, remove, (]
[., getFirstChild, (, ), ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), ), ;, }, @, Override]
[;, }, @, Override, public, void, remove, (, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if]
[., checkState, (, parent, ., isAssign, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Node]
[), ;, }, @, Override, public, void, remove, (, ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[., isAssign, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Node, gramps, =, parent, .]
[;, if, (, gramps, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,]
[., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, gramps, .]
[), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, .]
[., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }]
[;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,, parent, ., getLastChild, (, ), ., detachFromParent, (]
[., removeChild, (, gramps, ., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps]
[,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,, parent, ., getLastChild, (, )]
[., getParent, (, ), ,, gramps, ), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,, parent]
[), ;, }, else, {, changeProxy, ., replaceWith, (, gramps, ,, parent, ,, parent, ., getLastChild, (, ), ., detachFromParent]
[;, }, }, }, private, abstract, class, SpecialReferenceNode, implements, RefNode, {, JsName, name, ;, Node, node, ;, SpecialReferenceNode, (, JsName]
[., replaceWith, (, gramps, ,, parent, ,, parent, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }]
[,, parent, ,, parent, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, private, abstract, class]
[,, parent, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, private, abstract, class, SpecialReferenceNode, implements]
[), ;, }, }, }, private, abstract, class, SpecialReferenceNode, implements, RefNode, {, JsName, name, ;, Node, node, ;, SpecialReferenceNode, (]
[., detachFromParent, (, ), ), ;, }, }, }, private, abstract, class, SpecialReferenceNode, implements, RefNode, {, JsName, name, ;, Node]
[., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, }, }, private, abstract, class, SpecialReferenceNode, implements, RefNode, {]
[=, name, ;, this, ., node, =, node, ;, }, @, Override, public, JsName, name, (, ), {, return, name]
[., name, =, name, ;, this, ., node, =, node, ;, }, @, Override, public, JsName, name, (, ), {]
[;, this, ., node, =, node, ;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }]
[=, node, ;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, Node, getParent, (, )]
[., node, =, node, ;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, Node, getParent]
[;, }, @, Override, public, JsName, name, (, ), {, return, name, ;, }, Node, getParent, (, ), {, return]
[;, }, Node, getParent, (, ), {, return, node, ., getParent, (, ), ;, }, Node, getGramps, (, ), {]
[;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?, null, :, node, .]
[., getParent, (, ), ;, }, Node, getGramps, (, ), {, return, node, ., getParent, (, ), ==, null, ?]
[;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (]
[?, null, :, node, ., getParent, (, ), ., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode]
[==, null, ?, null, :, node, ., getParent, (, ), ., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode]
[., getParent, (, ), ==, null, ?, null, :, node, ., getParent, (, ), ., getParent, (, ), ;, }]
[?, null, :, node, ., getParent, (, ), ., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode]
[:, node, ., getParent, (, ), ., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode]
[;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node, ), {, super, (]
[., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName, name, ,, Node, node]
[., getParent, (, ), ., getParent, (, ), ;, }, }, private, class, ClassDefiningFunctionNode, extends, SpecialReferenceNode, {, ClassDefiningFunctionNode, (, JsName]
[,, node, ), ;, Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, }, @, Override, public, void]
[), ;, Preconditions, ., checkState, (, node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (]
[;, }, @, Override, public, void, remove, (, ), {, Preconditions, ., checkState, (, node, ., isCall, (, ), )]
[., checkState, (, node, ., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Preconditions]
[), ;, }, @, Override, public, void, remove, (, ), {, Preconditions, ., checkState, (, node, ., isCall, (, )]
[., isCall, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, Preconditions, ., checkState, (, node]
[;, Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, changeProxy, ., removeChild]
[., checkState, (, node, ., isCall, (, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (, parent]
[), ;, Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, ), ), {, changeProxy, .]
[., isCall, (, ), ), ;, Node, parent, =, getParent, (, ), ;, if, (, parent, ., isExprResult, (, )]
[;, if, (, parent, ., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, )]
[), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (]
[., isExprResult, (, ), ), {, changeProxy, ., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {]
[;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR, ., number, (]
[., removeChild, (, getGramps, (, ), ,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node]
[,, parent, ), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR]
[), ;, }, else, {, changeProxy, ., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR, ., number]
[;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {, super]
[., replaceWith, (, parent, ,, node, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ), ;]
[,, node, ,, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ), ;, }, }, }, private]
[,, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ), ;, }, }, }, private, class, InstanceOfCheckNode]
[), ;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, ), {]
[., voidNode, (, IR, ., number, (, 0, ), ), ), ;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode]
[), ), ;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node, )]
[., number, (, 0, ), ), ), ;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName]
[), ), ), ;, }, }, }, private, class, InstanceOfCheckNode, extends, SpecialReferenceNode, {, InstanceOfCheckNode, (, JsName, name, ,, Node, node]
[,, node, ), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, getParent]
[), ;, Preconditions, ., checkState, (, node, ., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, getParent, (, )]
[;, Preconditions, ., checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove]
[., checkState, (, node, ., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, getParent, (, ), ., isInstanceOf, (]
[), ;, Preconditions, ., checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void]
[., isQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }]
[;, }, @, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps, (, ), ,, getParent, (]
[., checkState, (, getParent, (, ), ., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove, (, )]
[), ;, }, @, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps, (, ), ,, getParent]
[., isInstanceOf, (, ), ), ;, }, @, Override, public, void, remove, (, ), {, changeProxy, ., replaceWith, (, getGramps]
[;, }, }, private, class, ProcessExternals, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., replaceWith, (, getGramps, (, ), ,, getParent, (, ), ,, IR, ., falseNode, (, ), ), ;, }, }]
[,, getParent, (, ), ,, IR, ., falseNode, (, ), ), ;, }, }, private, class, ProcessExternals, extends, AbstractPostOrderCallback, {]
[,, IR, ., falseNode, (, ), ), ;, }, }, private, class, ProcessExternals, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[), ;, }, }, private, class, ProcessExternals, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., falseNode, (, ), ), ;, }, }, private, class, ProcessExternals, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[;, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;]
[), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n]
[., isVarDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (]
[), ), {, ns, =, createNameInformation, (, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (]
[=, createNameInformation, (, t, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n]
[,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,]
[), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=]
[., isFunctionDeclaration, (, n, ), ), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;]
[), ), {, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns]
[=, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {]
[;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, )]
[,, n, ., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName]
[), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true]
[., getFirstChild, (, ), ), ;, }, if, (, ns, !=, null, ), {, JsName, jsName, =, getName, (, ns]
[), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;]
[!=, null, ), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =]
[), {, JsName, jsName, =, getName, (, ns, ., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;]
[;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (, ns, ., name, ), ;, }, }, }, private]
[,, true, ), ;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (, ns, ., name, ), ;, }]
[., name, ,, true, ), ;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (, ns, ., name, )]
[), ;, jsName, ., externallyDefined, =, true, ;, externalNames, ., add, (, ns, ., name, ), ;, }, }, }]
[=, true, ;, externalNames, ., add, (, ns, ., name, ), ;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback]
[., externallyDefined, =, true, ;, externalNames, ., add, (, ns, ., name, ), ;, }, }, }, private, class, FindDependencyScopes]
[;, externalNames, ., add, (, ns, ., name, ), ;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback, {, @]
[;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., add, (, ns, ., name, ), ;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback, {, @, Override, public]
[), ;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., name, ), ;, }, }, }, private, class, FindDependencyScopes, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,]
[), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,]
[., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isAssign, (, ), ), {, recordAssignment, (]
[), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, .]
[., isAssign, (, ), ), {, recordAssignment, (, t, ,, n, ,, n, ), ;, if, (, !, NodeUtil, .]
[;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (, t, ,]
[,, n, ,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), )]
[,, n, ), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers]
[), ;, if, (, !, NodeUtil, ., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (, t]
[), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (]
[), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (]
[., isImmutableResult, (, n, ., getLastChild, (, ), ), ), {, recordConsumers, (, t, ,, n, ,, n, ), ;]
[), ), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration]
[., getLastChild, (, ), ), ), {, recordConsumers, (, t, ,, n, ,, n, ), ;, }, }, else, if]
[;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t]
[,, n, ,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation]
[,, n, ), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =]
[), ;, }, }, else, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;, }]
[., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;]
[;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[,, n, ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n]
[), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,]
[,, ns, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,]
[., isFunctionDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), )]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n]
[;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {]
[,, n, ., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil]
[), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), )]
[., getFirstChild, (, ), ), ;, recordDepScope, (, n, ,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall]
[;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =, n, ., getFirstChild, (]
[,, ns, ), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =, n]
[), ;, }, else, if, (, NodeUtil, ., isExprCall, (, n, ), ), {, Node, callNode, =, n, ., getFirstChild]
[), {, Node, callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;]
[., isExprCall, (, n, ), ), {, Node, callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =, callNode]
[), ), {, Node, callNode, =, n, ., getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, )]
[;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;]
[., getFirstChild, (, ), ;, Node, nameNode, =, callNode, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef]
[., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null]
[;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;, }]
[,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns]
[), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;]
[), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node]
[&&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void, recordConsumers, (]
[!=, null, &&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void]
[&&, ns, ., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void, recordConsumers, (]
[), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node]
[., onlyAffectsClassDef, ), {, recordDepScope, (, n, ,, ns, ), ;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t]
[;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node, parent]
[,, ns, ), ;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, )]
[), ;, }, }, }, private, void, recordConsumers, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {, Node]
[;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, n, ==, parent]
[., getParent, (, ), ;, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if]
[), {, case, Token, ., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, )]
[:, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, )]
[., ASSIGN, :, if, (, n, ==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,]
[), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, )]
[==, parent, ., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (]
[), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, )]
[., getLastChild, (, ), ), {, recordAssignment, (, t, ,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,]
[;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns]
[,, parent, ,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token]
[,, recordNode, ), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME]
[), ;, }, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation]
[;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (]
[,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,]
[,, recordNode, ), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, )]
[), ;, break, ;, case, Token, ., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope]
[:, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;]
[., NAME, :, NameInformation, ns, =, createNameInformation, (, t, ,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;]
[;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent]
[,, parent, ), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (]
[), ;, recordDepScope, (, recordNode, ,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,]
[;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case]
[,, ns, ), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;]
[), ;, break, ;, case, Token, ., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;]
[:, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case, Token, .]
[., OR, :, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case]
[;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (]
[,, parent, ,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token]
[,, recordNode, ), ;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK]
[), ;, break, ;, case, Token, ., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if]
[:, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, )]
[., AND, :, case, Token, ., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild]
[:, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t]
[., COMMA, :, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers]
[:, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t, ,, parent, ,, recordNode, )]
[., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t, ,, parent, ,]
[), {, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, }, break, ;, }, }, private, void, recordAssignment, (]
[!=, parent, ., getFirstChild, (, ), ), {, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, }, break, ;]
[), {, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, }, break, ;, }, }, private, void, recordAssignment, (]
[., getFirstChild, (, ), ), {, recordConsumers, (, t, ,, parent, ,, recordNode, ), ;, }, break, ;, }, }]
[;, }, break, ;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, ), {]
[,, parent, ,, recordNode, ), ;, }, break, ;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n]
[,, recordNode, ), ;, }, break, ;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, }, break, ;, }, }, private, void, recordAssignment, (, NodeTraversal, t, ,, Node, n, ,, Node, recordNode, )]
[;, Node, parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;]
[., getFirstChild, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[., getParent, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null]
[;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !]
[), ;, if, (, ns, !=, null, ), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, .]
[), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if]
[!=, null, ), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), )]
[), {, if, (, parent, ., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if]
[), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode]
[&&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (]
[., isFor, (, ), &&, !, NodeUtil, ., isForIn, (, parent, ), ), {, if, (, parent, ., getFirstChild, (]
[), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode]
[), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode]
[., isForIn, (, parent, ), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n]
[), ), {, if, (, parent, ., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (]
[), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }]
[!=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, )]
[., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (]
[., getFirstChild, (, ), ., getNext, (, ), !=, n, ), {, recordDepScope, (, recordNode, ,, ns, ), ;, }]
[), {, recordDepScope, (, recordNode, ,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }]
[;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {, recordDepScope, (, recordNode, ,, ns]
[,, ns, ), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {, recordDepScope, (]
[), ;, }, else, {, recordDepScope, (, nameNode, ,, ns, ), ;, }, }, else, {, recordDepScope, (, recordNode, ,]
[;, }, }, else, {, recordDepScope, (, recordNode, ,, ns, ), ;, }, }, }, private, void, recordDepScope, (, Node]
[,, ns, ), ;, }, }, else, {, recordDepScope, (, recordNode, ,, ns, ), ;, }, }, }, private, void]
[), ;, }, }, else, {, recordDepScope, (, recordNode, ,, ns, ), ;, }, }, }, private, void, recordDepScope, (]
[;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (, name]
[,, ns, ), ;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, .]
[), ;, }, }, }, private, void, recordDepScope, (, Node, node, ,, NameInformation, name, ), {, Preconditions, ., checkNotNull, (]
[;, scopes, ., put, (, node, ,, name, ), ;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback, {]
[., checkNotNull, (, name, ), ;, scopes, ., put, (, node, ,, name, ), ;, }, }, private, class, HoistVariableAndFunctionDeclarations]
[), ;, scopes, ., put, (, node, ,, name, ), ;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback]
[;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., put, (, node, ,, name, ), ;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback, {, @, Override]
[,, name, ), ;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback, {, @, Override, public, void, visit, (]
[), ;, }, }, private, class, HoistVariableAndFunctionDeclarations, extends, NodeTraversal, ., AbstractShallowCallback, {, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", )]
[., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null"]
[;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if]
[,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;]
[), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else]
[;, createName, (, ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if, (, NodeUtil]
[,, "NameInformation is null", ), ;, createName, (, ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n]
[), ;, createName, (, ns, ., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild]
[., name, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, )]
[., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation]
[), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;]
[., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns]
[;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, nameNode, ., getString, (, ), ), ;, }]
[,, nameNode, ), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, nameNode, ., getString, (, )]
[), ;, Preconditions, ., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, nameNode, ., getString, (, ), ), ;]
[;, createName, (, nameNode, ., getString, (, ), ), ;, }, }, }, private, class, FindDeclarationsAndSetters, extends, AbstractPostOrderCallback, {, @]
[., checkNotNull, (, ns, ,, "NameInformation is null", ), ;, createName, (, nameNode, ., getString, (, ), ), ;, }, }, }]
[,, "NameInformation is null", ), ;, createName, (, nameNode, ., getString, (, ), ), ;, }, }, }, private, class, FindDeclarationsAndSetters, extends]
[), ;, createName, (, nameNode, ., getString, (, ), ), ;, }, }, }, private, class, FindDeclarationsAndSetters, extends, AbstractPostOrderCallback, {]
[;, }, }, }, private, class, FindDeclarationsAndSetters, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), ;, }, }, }, private, class, FindDeclarationsAndSetters, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., getString, (, ), ), ;, }, }, }, private, class, FindDeclarationsAndSetters, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit]
[), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n]
[., inGlobalScope, (, ), ), {, if, (, NodeUtil, ., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet]
[., isVarDeclaration, (, n, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;]
[;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if]
[,, n, ), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;]
[), ;, Preconditions, ., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else]
[;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[., checkNotNull, (, ns, ), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (, NodeUtil]
[), ;, recordSet, (, ns, ., name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n]
[;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (]
[,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n]
[., name, ,, n, ), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode]
[), ;, }, else, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, )]
[., isFunctionDeclaration, (, n, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation]
[), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, JsName, nameInfo]
[., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null]
[;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (]
[), ;, if, (, ns, !=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,]
[), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (, nameInfo, .]
[!=, null, ), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (]
[), {, JsName, nameInfo, =, getName, (, nameNode, ., getString, (, ), ,, true, ), ;, recordSet, (, nameInfo, .]
[;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n]
[,, true, ), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, .]
[., getString, (, ), ,, true, ), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else]
[), ;, recordSet, (, nameInfo, ., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation]
[,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation]
[., name, ,, nameNode, ), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), )]
[), ;, }, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =]
[), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {, recordSet]
[., isObjectLitKey, (, n, ,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if]
[,, parent, ), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null]
[), ), {, NameInformation, ns, =, createNameInformation, (, t, ,, n, ), ;, if, (, ns, !=, null, ), {]
[;, if, (, ns, !=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }]
[,, n, ), ;, if, (, ns, !=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;]
[), ;, if, (, ns, !=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }]
[), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }, if, (, n, ., isAssign, (]
[!=, null, ), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }, if, (, n, .]
[), {, recordSet, (, ns, ., name, ,, n, ), ;, }, }, }, if, (, n, ., isAssign, (]
[;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (]
[,, n, ), ;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =, n]
[., name, ,, n, ), ;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode]
[), ;, }, }, }, if, (, n, ., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, )]
[., isAssign, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (]
[., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null]
[;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass]
[,, nameNode, ), ;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (]
[), ;, if, (, ns, !=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, .]
[), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n]
[!=, null, ), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty]
[), {, if, (, ns, ., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n]
[), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (]
[., isPrototype, ), {, recordPrototypeSet, (, ns, ., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {]
[;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }, }, else, if, (, n]
[,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;]
[., prototypeClass, ,, ns, ., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode]
[,, n, ), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }, }, else]
[., prototypeProperty, ,, n, ), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }]
[), ;, }, else, {, recordSet, (, ns, ., name, ,, nameNode, ), ;, }, }, }, else, if, (]
[;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node, nameNode, =, n, ., getFirstChild]
[,, nameNode, ), ;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node, nameNode, =]
[., name, ,, nameNode, ), ;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node]
[), ;, }, }, }, else, if, (, n, ., isCall, (, ), ), {, Node, nameNode, =, n, .]
[), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, )]
[., isCall, (, ), ), {, Node, nameNode, =, n, ., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (]
[;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef]
[., getFirstChild, (, ), ;, NameInformation, ns, =, createNameInformation, (, t, ,, nameNode, ), ;, if, (, ns, !=, null]
[;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name]
[,, nameNode, ), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (]
[), ;, if, (, ns, !=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, .]
[), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode]
[&&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, .]
[!=, null, &&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;]
[&&, ns, ., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, .]
[), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode]
[., onlyAffectsClassDef, ), {, JsName, name, =, getName, (, ns, ., name, ,, true, ), ;, refNodes, ., add, (]
[;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), ), ;, }, }, }, private, void, recordSet]
[,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), ), ;, }, }, }]
[., name, ,, true, ), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), ), ;, }]
[), ;, refNodes, ., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), ), ;, }, }, }, private, void]
[;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =, getName, (]
[., add, (, new, ClassDefiningFunctionNode, (, name, ,, n, ), ), ;, }, }, }, private, void, recordSet, (, String]
[), ;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =, getName]
[,, n, ), ), ;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName]
[), ), ;, }, }, }, private, void, recordSet, (, String, name, ,, Node, node, ), {, JsName, jsn, =]
[;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;, if]
[,, true, ), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (, nameRefNode]
[), ;, JsNameRefNode, nameRefNode, =, new, JsNameRefNode, (, jsn, ,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;]
[;, refNodes, ., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name]
[,, node, ), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {]
[), ;, refNodes, ., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (]
[;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name]
[., add, (, nameRefNode, ), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;]
[), ;, if, (, node, ., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (]
[), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1]
[., isGetElem, (, ), ), {, recordWriteOnProperties, (, name, ), ;, }, else, if, (, name, ., indexOf, (, '.']
[;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, .]
[), ;, }, else, if, (, name, ., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name]
[), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), ), ), ;, }]
[!=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), )]
[., indexOf, (, '.', ), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, .]
[), !=, -, 1, ), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', )]
[), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), ), ), ;, }]
[), {, recordWriteOnProperties, (, name, ., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), ), ), ;, }]
[;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name, =]
[), ;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName, name]
[., substring, (, 0, ,, name, ., lastIndexOf, (, '.', ), ), ), ;, }, }, private, void, recordPrototypeSet, (]
[,, name, ., lastIndexOf, (, '.', ), ), ), ;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String]
[), ), ;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {, JsName]
[., lastIndexOf, (, '.', ), ), ), ;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,]
[), ), ), ;, }, }, private, void, recordPrototypeSet, (, String, className, ,, String, prototypeProperty, ,, Node, node, ), {]
[;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node]
[,, true, ), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (]
[), ;, name, ., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,]
[;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;, recordWriteOnProperties, (, className, ), ;, }]
[., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;, recordWriteOnProperties]
[., prototypeNames, ., add, (, prototypeProperty, ), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), )]
[), ;, refNodes, ., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;, recordWriteOnProperties, (, className, ), ;]
[;, recordWriteOnProperties, (, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =]
[., add, (, new, PrototypeSetNode, (, name, ,, node, ), ), ;, recordWriteOnProperties, (, className, ), ;, }, private, void]
[), ;, recordWriteOnProperties, (, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent]
[,, node, ), ), ;, recordWriteOnProperties, (, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do]
[), ), ;, recordWriteOnProperties, (, className, ), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName]
[;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (, parentName, ,, true]
[), ;, }, private, void, recordWriteOnProperties, (, String, parentName, ), {, do, {, JsName, parent, =, getName, (, parentName, ,]
[;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }]
[,, true, ), ;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =]
[), ;, if, (, parent, ., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;]
[), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (, parentName, ., indexOf, (]
[., hasWrittenDescendants, ), {, return, ;, }, else, {, parent, ., hasWrittenDescendants, =, true, ;, }, if, (, parentName, .]
[=, true, ;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }]
[., hasWrittenDescendants, =, true, ;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return]
[;, }, if, (, parentName, ., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =]
[), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), )]
[==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (]
[., indexOf, (, '.', ), ==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0]
[), ==, -, 1, ), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf]
[), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), )]
[), {, return, ;, }, parentName, =, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), )]
[=, parentName, ., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), ), ;, }, while, (, true, )]
[;, }, while, (, true, ), ;, }, }, private, static, final, Predicate, <, Node, >, NON_LOCAL_RESULT_PREDICATE, =, new, Predicate]
[., substring, (, 0, ,, parentName, ., lastIndexOf, (, '.', ), ), ;, }, while, (, true, ), ;, }]
[,, parentName, ., lastIndexOf, (, '.', ), ), ;, }, while, (, true, ), ;, }, }, private, static, final]
[), ;, }, while, (, true, ), ;, }, }, private, static, final, Predicate, <, Node, >, NON_LOCAL_RESULT_PREDICATE, =, new]
[., lastIndexOf, (, '.', ), ), ;, }, while, (, true, ), ;, }, }, private, static, final, Predicate, <]
[), ), ;, }, while, (, true, ), ;, }, }, private, static, final, Predicate, <, Node, >, NON_LOCAL_RESULT_PREDICATE, =]
[), ;, }, }, private, static, final, Predicate, <, Node, >, NON_LOCAL_RESULT_PREDICATE, =, new, Predicate, <, Node, >, (, )]
[;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;, FindReferences, (, ), {, nodesToKeep, =, Sets]
[), {, return, false, ;, }, return, true, ;, }, }, ;, private, class, FindReferences, implements, Callback, {, Set, <]
[., isCall, (, ), ), {, return, false, ;, }, return, true, ;, }, }, ;, private, class, FindReferences, implements]
[;, }, return, true, ;, }, }, ;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;]
[;, }, }, ;, private, class, FindReferences, implements, Callback, {, Set, <, Node, >, nodesToKeep, ;, FindReferences, (, ), {]
[=, Sets, ., newHashSet, (, ), ;, }, private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (]
[;, }, private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (, n, ), ;, for, (, Node]
[., newHashSet, (, ), ;, }, private, void, addAllChildren, (, Node, n, ), {, nodesToKeep, ., add, (, n, )]
[;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., add, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null]
[), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (]
[;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private]
[;, child, =, child, ., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren]
[=, child, ., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node]
[), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse]
[., getNext, (, ), ), {, addAllChildren, (, child, ), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, )]
[;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new]
[), ;, }, }, private, void, addSimplifiedChildren, (, Node, n, ), {, NodeTraversal, ., traverse, (, compiler, ,, n, ,]
[;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {, if, (, parent, ., isVar, (, )]
[., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, NodeAccumulator, (, ), ), ), ;, }]
[,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, NodeAccumulator, (, ), ), ), ;, }, private, void, addSimplifiedExpression, (]
[,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, NodeAccumulator, (, ), ), ), ;, }, private, void, addSimplifiedExpression, (, Node, n]
[), ;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {, if, (, parent, ., isVar, (]
[,, new, NodeAccumulator, (, ), ), ), ;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {]
[), ), ;, }, private, void, addSimplifiedExpression, (, Node, n, ,, Node, parent, ), {, if, (, parent, ., isVar]
[), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (]
[., isVar, (, ), ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, !=, null]
[;, if, (, value, !=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, .]
[., getFirstChild, (, ), ;, if, (, value, !=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else]
[), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent]
[!=, null, ), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&]
[), {, addSimplifiedChildren, (, value, ), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent]
[;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||, parent]
[), ;, }, }, else, if, (, n, ., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||]
[), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }]
[&&, (, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), )]
[., isAssign, (, ), &&, (, parent, ., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, .]
[), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }]
[), ), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;]
[||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :, n, ., children, (, ), )]
[||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :]
[., isExprResult, (, ), ||, parent, ., isFor, (, ), ||, parent, ., isReturn, (, ), ), ), {, for]
[||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :, n, ., children, (, ), )]
[., isFor, (, ), ||, parent, ., isReturn, (, ), ), ), {, for, (, Node, child, :, n, .]
[), ), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;]
[., isReturn, (, ), ), ), {, for, (, Node, child, :, n, ., children, (, ), ), {, addSimplifiedChildren]
[), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (, n, ., isCall, (, ), &&, parent, .]
[., children, (, ), ), {, addSimplifiedChildren, (, child, ), ;, }, }, else, if, (, n, ., isCall, (]
[;, }, }, else, if, (, n, ., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren]
[), ;, }, }, else, if, (, n, ., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {]
[), {, addSimplifiedChildren, (, n, ), ;, }, else, {, addAllChildren, (, n, ), ;, }, }, @, Override, public]
[&&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren, (, n, ), ;, }, else, {, addAllChildren, (, n, )]
[., isCall, (, ), &&, parent, ., isExprResult, (, ), ), {, addSimplifiedChildren, (, n, ), ;, }, else, {]
[), {, addSimplifiedChildren, (, n, ), ;, }, else, {, addAllChildren, (, n, ), ;, }, }, @, Override, public]
[., isExprResult, (, ), ), {, addSimplifiedChildren, (, n, ), ;, }, else, {, addAllChildren, (, n, ), ;, }]
[;, }, else, {, addAllChildren, (, n, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[), ;, }, else, {, addAllChildren, (, n, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !, NodeUtil, .]
[==, null, ), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !]
[), {, return, true, ;, }, if, (, n, ., isFor, (, ), ), {, if, (, !, NodeUtil, .]
[;, }, if, (, n, ., isFor, (, ), ), {, if, (, !, NodeUtil, ., isForIn, (, n, )]
[), {, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =, n, ., getFirstChild, (]
[., isFor, (, ), ), {, if, (, !, NodeUtil, ., isForIn, (, n, ), ), {, Node, decl, =]
[), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, ), ;]
[), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, ), ;]
[., isForIn, (, n, ), ), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl]
[), ), {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, )]
[;, Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression]
[., getFirstChild, (, ), ;, Node, pred, =, decl, ., getNext, (, ), ;, Node, step, =, pred, ., getNext]
[;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred]
[., getNext, (, ), ;, Node, step, =, pred, ., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, )]
[;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n]
[., getNext, (, ), ;, addSimplifiedExpression, (, decl, ,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression]
[;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl]
[,, n, ), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else]
[), ;, addSimplifiedExpression, (, pred, ,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node]
[;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;]
[,, n, ), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild]
[), ;, addSimplifiedExpression, (, step, ,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, )]
[;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (]
[,, n, ), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =, decl]
[), ;, }, else, {, Node, decl, =, n, ., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext]
[;, Node, iter, =, decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;]
[., getFirstChild, (, ), ;, Node, iter, =, decl, ., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren]
[;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (, parent, ., isVar, (, )]
[., getNext, (, ), ;, addAllChildren, (, decl, ), ;, addAllChildren, (, iter, ), ;, }, }, if, (, parent]
[;, addAllChildren, (, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (]
[), ;, addAllChildren, (, iter, ), ;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult]
[;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn]
[), ;, }, }, if, (, parent, ., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, .]
[), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent]
[||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent]
[||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, )]
[||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {]
[., isVar, (, ), ||, parent, ., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow]
[||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, )]
[., isExprResult, (, ), ||, parent, ., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (]
[||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent]
[., isReturn, (, ), ||, parent, ., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }]
[), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent]
[., isThrow, (, ), ), {, addSimplifiedExpression, (, n, ,, parent, ), ;, }, if, (, (, parent, ., isIf]
[;, }, if, (, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith]
[,, parent, ), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||]
[), ;, }, if, (, (, parent, ., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, .]
[), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, .]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent]
[||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n]
[||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==]
[||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&]
[||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent]
[., isIf, (, ), ||, parent, ., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch]
[||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&]
[., isWhile, (, ), ||, parent, ., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase]
[||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==]
[., isWith, (, ), ||, parent, ., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, .]
[||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n]
[., isSwitch, (, ), ||, parent, ., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent]
[., isCase, (, ), ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;]
[), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (]
[==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&, parent, .]
[., getFirstChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (]
[), {, addAllChildren, (, n, ), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (]
[;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {, addAllChildren]
[), ;, }, if, (, parent, ., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {]
[), {, addAllChildren, (, n, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[&&, parent, ., getLastChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, return, true, ;, }]
[., isDo, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }]
[), {, addAllChildren, (, n, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[==, n, ), {, addAllChildren, (, n, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (]
[., getLastChild, (, ), ==, n, ), {, addAllChildren, (, n, ), ;, }, return, true, ;, }, @, Override]
[), {, addAllChildren, (, n, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==, null]
[), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==, null]
[), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==]
[||, NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }]
[., isName, (, ), ||, NodeUtil, ., isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), ), )]
[), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==]
[&&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,]
[., isGet, (, n, ), &&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo]
[), &&, !, parent, ., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t]
[), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==]
[), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;, if, (, nameInfo, ==]
[., isGetProp, (, ), ), ), {, return, ;, }, NameInformation, nameInfo, =, createNameInformation, (, t, ,, n, ), ;]
[;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (]
[,, n, ), ;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, )]
[), ;, if, (, nameInfo, ==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if]
[), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, )]
[==, null, ), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=]
[), {, return, ;, }, if, (, nameInfo, ., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, )]
[), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass]
[., onlyAffectsClassDef, ), {, if, (, nameInfo, ., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo]
[), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName]
[!=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }]
[., superclass, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, )]
[), {, recordReference, (, nameInfo, ., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName]
[;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (]
[,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;]
[., name, ,, nameInfo, ., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (]
[,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=]
[., superclass, ,, RefType, ., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (]
[), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference]
[., INHERITANCE, ), ;, }, String, nodeName, =, n, ., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, )]
[;, if, (, nodeName, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, )]
[., getQualifiedName, (, ), ;, if, (, nodeName, !=, null, ), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,]
[), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if]
[!=, null, ), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;]
[), {, recordReference, (, nameInfo, ., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if]
[;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n]
[,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&]
[., name, ,, nodeName, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (]
[,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, .]
[), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==]
[., REGULAR, ), ;, }, return, ;, }, if, (, parent, ., isInstanceOf, (, ), &&, parent, ., getLastChild, (]
[), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode]
[&&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;]
[&&, parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName]
[., isInstanceOf, (, ), &&, parent, ., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {]
[&&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;]
[==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true]
[., getLastChild, (, ), ==, n, &&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo]
[&&, n, ., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;]
[), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode]
[., isQualifiedName, (, ), ), {, JsName, checkedClass, =, getName, (, nameInfo, ., name, ,, true, ), ;, refNodes, .]
[;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;]
[,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass, ., hasInstanceOfReference]
[., name, ,, true, ), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass]
[), ;, refNodes, ., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =, true]
[;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, )]
[., add, (, new, InstanceOfCheckNode, (, checkedClass, ,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;]
[), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n]
[,, n, ), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =]
[), ), ;, checkedClass, ., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (]
[=, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (, referers]
[., hasInstanceOfReference, =, true, ;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if]
[;, return, ;, }, List, <, NameInformation, >, referers, =, getDependencyScope, (, n, ), ;, if, (, referers, ., isEmpty]
[;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,]
[), ;, if, (, referers, ., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo]
[), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (]
[., isEmpty, (, ), ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, null, ), ;, }]
[;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,]
[,, n, ,, parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, )]
[,, parent, ,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias]
[,, nameInfo, ,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t]
[,, null, ), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n]
[), ;, }, else, {, for, (, NameInformation, referring, :, referers, ), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent]
[), {, maybeRecordReferenceOrAlias, (, t, ,, n, ,, parent, ,, nameInfo, ,, referring, ), ;, }, recordAliases, (, referers, )]
[;, }, recordAliases, (, referers, ), ;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, n, ,, parent, ,, nameInfo, ,, referring, ), ;, }, recordAliases, (, referers, ), ;, }, }, private, void]
[,, parent, ,, nameInfo, ,, referring, ), ;, }, recordAliases, (, referers, ), ;, }, }, private, void, maybeRecordReferenceOrAlias, (]
[,, nameInfo, ,, referring, ), ;, }, recordAliases, (, referers, ), ;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t]
[,, referring, ), ;, }, recordAliases, (, referers, ), ;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t, ,, Node]
[), ;, }, recordAliases, (, referers, ), ;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, NameInformation, nameInfo, ,, NameInformation]
[), ;, }, }, private, void, maybeRecordReferenceOrAlias, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, NameInformation, nameInfo, ,]
[;, if, (, referring, !=, null, ), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, .]
[), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =]
[!=, null, ), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String]
[), {, referringName, =, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =]
[=, referring, ., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name]
[;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias]
[?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias]
[., isPrototype, ?, referring, ., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if]
[:, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n]
[., prototypeClass, :, referring, ., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name]
[;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias]
[., name, ;, }, String, name, =, nameInfo, ., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), )]
[;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if]
[., name, ;, if, (, maybeHiddenAlias, (, name, ,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;]
[), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW]
[,, n, ), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {]
[), ), {, recordAlias, (, name, ,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (]
[;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;]
[,, WINDOW, ), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, .]
[), ;, }, if, (, nameInfo, ., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, )]
[), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring]
[., isExternallyReferenceable, ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent]
[;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs]
[,, name, ,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return]
[,, RefType, ., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }]
[), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, .]
[., REGULAR, ), ;, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (]
[;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=]
[,, parent, ,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent]
[,, referring, ,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), )]
[,, referringName, ), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if]
[), ;, return, ;, }, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring]
[), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,]
[,, parent, ), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,, name, ,, RefType, .]
[), ), {, if, (, referring, !=, null, ), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, )]
[), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep]
[!=, null, ), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if]
[), {, recordReference, (, referringName, ,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep]
[;, }, return, ;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes]
[,, name, ,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep, ., contains, (, n, )]
[,, RefType, ., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {]
[), ;, }, return, ;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {, List, <, NameInformation, >]
[., REGULAR, ), ;, }, return, ;, }, if, (, nodesToKeep, ., contains, (, n, ), ), {, List, <]
[), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (, !, functionScopes, ., isEmpty, (]
[., contains, (, n, ), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (]
[), ), {, List, <, NameInformation, >, functionScopes, =, getEnclosingFunctionDependencyScope, (, t, ), ;, if, (, !, functionScopes, ., isEmpty]
[;, if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference]
[), ;, if, (, !, functionScopes, ., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {]
[), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,, name, ,, RefType, .]
[), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,, name, ,, RefType, .]
[., isEmpty, (, ), ), {, for, (, NameInformation, functionScope, :, functionScopes, ), {, recordReference, (, functionScope, ., name, ,]
[), {, recordReference, (, functionScope, ., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference]
[;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=]
[,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, .]
[., name, ,, name, ,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,]
[,, RefType, ., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, )]
[), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring]
[., REGULAR, ), ;, }, }, else, {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, if]
[;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }]
[,, name, ,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent]
[,, RefType, ., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring]
[), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;]
[., REGULAR, ), ;, if, (, referring, !=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName]
[), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring]
[!=, null, ), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if]
[), {, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring]
[;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,, parent]
[,, parent, ,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if]
[,, referring, ,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !]
[,, referringName, ), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (]
[), ;, }, }, }, else, if, (, referring, !=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,]
[), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =]
[!=, null, ), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType]
[), {, if, (, !, maybeRecordAlias, (, name, ,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =]
[), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName]
[), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName]
[,, parent, ,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :]
[,, referring, ,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, .]
[,, referringName, ), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;]
[), ), {, RefType, depType, =, referring, ., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (]
[;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :, n]
[?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }]
[., onlyAffectsClassDef, ?, RefType, ., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;]
[:, RefType, ., REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (]
[., INHERITANCE, :, RefType, ., REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {]
[;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :, n]
[., REGULAR, ;, recordReference, (, referringName, ,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor]
[;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (, NodeUtil]
[,, name, ,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, )]
[,, depType, ), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {]
[), ;, }, }, else, {, for, (, Node, ancestor, :, n, ., getAncestors, (, ), ), {, if, (]
[), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (]
[., getAncestors, (, ), ), {, if, (, NodeUtil, ., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, )]
[), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, break, ;, }, }, }, }, private]
[||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, break]
[., isAssignmentOp, (, ancestor, ), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,, RefType]
[), ||, ancestor, ., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;]
[), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, break, ;, }, }, }, }, private]
[., isFunction, (, ), ), {, recordReference, (, WINDOW, ,, name, ,, RefType, ., REGULAR, ), ;, break, ;, }]
[;, break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >, referers, ), {, int, size]
[,, name, ,, RefType, ., REGULAR, ), ;, break, ;, }, }, }, }, private, void, recordAliases, (, List, <]
[,, RefType, ., REGULAR, ), ;, break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >]
[), ;, break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >, referers, ), {, int]
[., REGULAR, ), ;, break, ;, }, }, }, }, private, void, recordAliases, (, List, <, NameInformation, >, referers, )]
[;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, j]
[., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {]
[;, i, <, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <]
[;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++]
[<, size, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;]
[;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++]
[), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias]
[++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, size, ;, j, ++, ), {]
[;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,]
[+, 1, ;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), .]
[;, j, <, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,]
[;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (]
[<, size, ;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, .]
[;, j, ++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (]
[), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (, j, ), .]
[++, ), {, recordAlias, (, referers, ., get, (, i, ), ., name, ,, referers, ., get, (, j, )]
[;, recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (, i, ), ., name]
[,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), .]
[., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j]
[., get, (, i, ), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (]
[), ., name, ,, referers, ., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (]
[), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (, i, ), .]
[., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (, i]
[., get, (, j, ), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,]
[), ., name, ), ;, recordAlias, (, referers, ., get, (, j, ), ., name, ,, referers, ., get, (]
[;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =, n, .]
[,, referers, ., get, (, i, ), ., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name]
[., name, ,, referers, ., get, (, i, ), ., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (]
[., get, (, j, ), ., name, ,, referers, ., get, (, i, ), ., name, ), ;, }, }]
[), ., name, ,, referers, ., get, (, i, ), ., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias]
[), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent, =, n]
[., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node, parent]
[., get, (, i, ), ., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node]
[), ., name, ), ;, }, }, }, private, boolean, maybeHiddenAlias, (, String, name, ,, Node, n, ), {, Node]
[;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (, parent, ., isVar]
[., getParent, (, ), ;, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =]
[), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent]
[., isVarOrSimpleAssignLhs, (, n, ,, parent, ), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?]
[,, parent, ), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (]
[), ), {, Node, rhs, =, (, parent, ., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :]
[;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return]
[?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !]
[), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&]
[., isVar, (, ), ), ?, n, ., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (]
[:, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,]
[., getFirstChild, (, ), :, parent, ., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !, NodeUtil, .]
[;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return]
[., getLastChild, (, ), ;, return, (, rhs, !=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, )]
[;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,, String]
[), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,]
[&&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias]
[!=, null, &&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return, false, ;, }, private]
[&&, !, NodeUtil, ., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias]
[), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,]
[), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,]
[., evaluatesToLocalValue, (, rhs, ,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name]
[,, NON_LOCAL_RESULT_PREDICATE, ), ), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,]
[), ), ;, }, return, false, ;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring]
[;, }, private, boolean, maybeRecordAlias, (, String, name, ,, Node, parent, ,, NameInformation, referring, ,, String, referringName, ), {, boolean]
[;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&]
[&&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (, parent, ., isName, (, )]
[., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (, parent]
[;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&]
[., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ;, if, (, (, parent, ., isName, (, ), ||, parent]
[), ;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment]
[., getFirstChild, (, ), ), ;, if, (, (, parent, ., isName, (, ), ||, parent, ., isAssign, (, )]
[), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return, false, ;, }, private, class, NodeAccumulator]
[&&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, )]
[&&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (]
[&&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), )]
[), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, )]
[||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent]
[., isName, (, ), ||, parent, ., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes]
[), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, )]
[., isAssign, (, ), ), &&, !, isPrototypePropAssignment, &&, referring, !=, null, &&, scopes, ., get, (, parent, ), .]
[&&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (]
[&&, referring, !=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (]
[&&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, )]
[!=, null, &&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,]
[&&, scopes, ., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, )]
[), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return, false, ;, }, private, class, NodeAccumulator]
[., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return, false]
[., get, (, parent, ), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, ), ;, return]
[), ., contains, (, referring, ), ), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return]
[), ), {, recordAlias, (, referringName, ,, name, ), ;, return, true, ;, }, return, false, ;, }, private, class]
[;, return, true, ;, }, return, false, ;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override, public, boolean, classDefiningCallsHaveSideEffects]
[,, name, ), ;, return, true, ;, }, return, false, ;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override]
[), ;, return, true, ;, }, return, false, ;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override, public, boolean]
[;, }, return, false, ;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override, public, boolean, classDefiningCallsHaveSideEffects, (, ), {]
[;, }, private, class, NodeAccumulator, implements, SideEffectAccumulator, {, @, Override, public, boolean, classDefiningCallsHaveSideEffects, (, ), {, return, false, ;, }]
[;, }, @, Override, public, void, keepSubTree, (, Node, original, ), {, addAllChildren, (, original, ), ;, }, @, Override]
[;, }, @, Override, public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =, original, ., getFirstChild, (, )]
[), ;, }, @, Override, public, void, keepSimplifiedShortCircuitExpression, (, Node, original, ), {, Node, condition, =, original, ., getFirstChild, (]
[;, Node, thenBranch, =, condition, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, addSimplifiedChildren, (, thenBranch, ), ;]
[., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, addSimplifiedChildren]
[;, addAllChildren, (, condition, ), ;, addSimplifiedChildren, (, thenBranch, ), ;, }, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook]
[., getNext, (, ), ;, addAllChildren, (, condition, ), ;, addSimplifiedChildren, (, thenBranch, ), ;, }, @, Override, public, void]
[;, addSimplifiedChildren, (, thenBranch, ), ;, }, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,, boolean]
[), ;, addSimplifiedChildren, (, thenBranch, ), ;, }, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,]
[;, }, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node, condition]
[), ;, }, @, Override, public, void, keepSimplifiedHookExpression, (, Node, hook, ,, boolean, thenHasSideEffects, ,, boolean, elseHasSideEffects, ), {, Node]
[;, Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren]
[., getFirstChild, (, ), ;, Node, thenBranch, =, condition, ., getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext]
[;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {]
[., getNext, (, ), ;, Node, elseBranch, =, thenBranch, ., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if]
[;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects]
[., getNext, (, ), ;, addAllChildren, (, condition, ), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;]
[;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (, elseBranch]
[), ;, if, (, thenHasSideEffects, ), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (]
[), {, addSimplifiedChildren, (, thenBranch, ), ;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (, elseBranch, ), ;, }, }]
[;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (, elseBranch, ), ;, }, }, }, }, private, class, RemoveListener, implements]
[), ;, }, if, (, elseHasSideEffects, ), {, addSimplifiedChildren, (, elseBranch, ), ;, }, }, }, }, private, class, RemoveListener]
[), {, addSimplifiedChildren, (, elseBranch, ), ;, }, }, }, }, private, class, RemoveListener, implements, AstChangeProxy, ., ChangeListener, {, @]
[;, }, }, }, }, private, class, RemoveListener, implements, AstChangeProxy, ., ChangeListener, {, @, Override, public, void, nodeRemoved, (, Node]
[), ;, }, }, }, }, private, class, RemoveListener, implements, AstChangeProxy, ., ChangeListener, {, @, Override, public, void, nodeRemoved, (]
[;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =, compiler, ;, this, .]
[., reportCodeChange, (, ), ;, }, }, NameAnalyzer, (, AbstractCompiler, compiler, ,, boolean, removeUnreferenced, ), {, this, ., compiler, =]
[=, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new]
[., compiler, =, compiler, ;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy]
[;, this, ., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (]
[=, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @]
[., removeUnreferenced, =, removeUnreferenced, ;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;]
[;, this, ., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @, Override, public]
[=, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node]
[., globalNames, =, DEFAULT_GLOBAL_NAMES, ;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process]
[;, this, ., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[=, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., changeProxy, =, new, AstChangeProxy, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, externs, ,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (]
[,, new, ProcessExternals, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (]
[,, new, FindDependencyScopes, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (]
[,, new, HoistVariableAndFunctionDeclarations, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases]
[., traverse, (, compiler, ,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (]
[,, new, FindDeclarationsAndSetters, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;]
[;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if, (, removeUnreferenced, ), {, removeUnreferenced, (]
[., traverse, (, compiler, ,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, )]
[,, root, ,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, )]
[,, new, FindReferences, (, ), ), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if]
[), ;, referenceParentNames, (, ), ;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if, (, removeUnreferenced, ), {, removeUnreferenced]
[;, referenceAliases, (, ), ;, calculateReferences, (, ), ;, if, (, removeUnreferenced, ), {, removeUnreferenced, (, ), ;, }, }]
[;, calculateReferences, (, ), ;, if, (, removeUnreferenced, ), {, removeUnreferenced, (, ), ;, }, }, private, void, recordAlias, (]
[;, if, (, removeUnreferenced, ), {, removeUnreferenced, (, ), ;, }, }, private, void, recordAlias, (, String, fromName, ,, String]
[), {, removeUnreferenced, (, ), ;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference]
[;, }, }, private, void, recordAlias, (, String, fromName, ,, String, toName, ), {, recordReference, (, fromName, ,, toName, ,]
[;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, )]
[,, toName, ,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet]
[,, RefType, ., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases]
[), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName]
[., REGULAR, ), ;, AliasSet, toNameAliasSet, =, aliases, ., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get]
[;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==]
[., get, (, toName, ), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null]
[), ;, AliasSet, fromNameAliasSet, =, aliases, ., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet]
[;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =, new]
[., get, (, fromName, ), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null]
[), ;, AliasSet, resultSet, =, null, ;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =]
[;, if, (, toNameAliasSet, ==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName]
[), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&]
[&&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (]
[==, null, &&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else]
[&&, fromNameAliasSet, ==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (]
[), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&]
[==, null, ), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=]
[), {, resultSet, =, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&]
[=, new, AliasSet, (, toName, ,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null]
[;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, .]
[,, fromName, ), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet]
[), ;, }, else, if, (, toNameAliasSet, !=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String]
[&&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, )]
[!=, null, &&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, .]
[&&, fromNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, )]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String]
[!=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String]
[=, toNameAliasSet, ;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet]
[;, resultSet, ., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names]
[;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,, resultSet, ), ;]
[., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, .]
[., names, ., addAll, (, fromNameAliasSet, ., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {]
[), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,, resultSet, )]
[., names, ), ;, for, (, String, name, :, fromNameAliasSet, ., names, ), {, aliases, ., put, (, name, ,]
[), {, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, )]
[., names, ), {, aliases, ., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=]
[;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add]
[., put, (, name, ,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =]
[,, resultSet, ), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, .]
[), ;, }, }, else, if, (, toNameAliasSet, !=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, .]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =]
[!=, null, ), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {]
[), {, resultSet, =, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =]
[=, toNameAliasSet, ;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet]
[;, resultSet, ., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names]
[;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, .]
[., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName]
[., names, ., add, (, fromName, ), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add]
[), ;, }, else, {, resultSet, =, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases]
[=, fromNameAliasSet, ;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet]
[;, resultSet, ., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;]
[;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (, toName, ,, resultSet, ), ;]
[., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (]
[., names, ., add, (, toName, ), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, .]
[), ;, }, aliases, ., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (, toName, ,, resultSet, )]
[;, aliases, ., put, (, toName, ,, resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName]
[., put, (, fromName, ,, resultSet, ), ;, aliases, ., put, (, toName, ,, resultSet, ), ;, }, private, void]
[,, resultSet, ), ;, aliases, ., put, (, toName, ,, resultSet, ), ;, }, private, void, recordReference, (, String, fromName]
[), ;, aliases, ., put, (, toName, ,, resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String]
[;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if, (, fromName, .]
[., put, (, toName, ,, resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType]
[,, resultSet, ), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if]
[), ;, }, private, void, recordReference, (, String, fromName, ,, String, toName, ,, RefType, depType, ), {, if, (, fromName]
[), {, return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName, (]
[., equals, (, toName, ), ), {, return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;]
[), ), {, return, ;, }, JsName, from, =, getName, (, fromName, ,, true, ), ;, JsName, to, =, getName]
[;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, .]
[,, true, ), ;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, )]
[), ;, JsName, to, =, getName, (, toName, ,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph]
[;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, .]
[,, true, ), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (]
[), ;, referenceGraph, ., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph]
[;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to]
[., createNode, (, from, ), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (]
[), ;, referenceGraph, ., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,]
[;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect, (]
[., createNode, (, to, ), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), )]
[), ;, if, (, !, referenceGraph, ., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect]
[), {, referenceGraph, ., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {]
[), {, referenceGraph, ., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {]
[., isConnectedInDirection, (, from, ,, depType, ,, to, ), ), {, referenceGraph, ., connect, (, from, ,, depType, ,, to]
[,, depType, ,, to, ), ), {, referenceGraph, ., connect, (, from, ,, depType, ,, to, ), ;, }, }]
[,, to, ), ), {, referenceGraph, ., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced]
[), ), {, referenceGraph, ., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, )]
[;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;, changeProxy, ., registerListener, (]
[., connect, (, from, ,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =]
[,, depType, ,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, )]
[,, to, ), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;, changeProxy]
[), ;, }, }, void, removeUnreferenced, (, ), {, RemoveListener, listener, =, new, RemoveListener, (, ), ;, changeProxy, ., registerListener]
[;, changeProxy, ., registerListener, (, listener, ), ;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode]
[;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if, (]
[., registerListener, (, listener, ), ;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name]
[), ;, for, (, RefNode, refNode, :, refNodes, ), {, JsName, name, =, refNode, ., name, (, ), ;, if]
[), {, JsName, name, =, refNode, ., name, (, ), ;, if, (, !, name, ., referenced, &&, !, name]
[;, if, (, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;]
[., name, (, ), ;, if, (, !, name, ., referenced, &&, !, name, ., externallyDefined, ), {, refNode, .]
[), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport]
[&&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener]
[&&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener]
[., referenced, &&, !, name, ., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener]
[), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport]
[), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport]
[., externallyDefined, ), {, refNode, ., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }]
[;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new]
[., remove, (, ), ;, }, }, changeProxy, ., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {]
[;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, "<html><body><style type=\"text/css\">"]
[., unregisterListener, (, listener, ), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[), ;, }, String, getHtmlReport, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[;, sb, ., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (]
[;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,]
[., append, (, "<html><body><style type=\"text/css\">", +, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", )]
[), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH]
[+, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState]
[+, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf]
[+, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: "]
[+, "body, td, p {font-family: Arial; font-size: 83%} ", +, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb]
[+, "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ", +, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: "]
[+, "li {margin-top:3px; margin-left:24px; padding-left:0px;", +, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf]
[+, "padding-bottom: 4px}</style>", ), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState]
[), ;, sb, ., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH]
[;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem]
[., append, (, "OVERALL STATS<ul>", ), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, .]
[), ;, appendListItem, (, sb, ,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;]
[;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem]
[,, "Total Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: "]
[), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;]
[+, countOf, (, TriState, ., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf]
[), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;]
[,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState]
[., BOTH, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE]
[), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), )]
[., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH]
[;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem]
[,, "Total Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: "]
[), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;]
[+, countOf, (, TriState, ., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf]
[), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;]
[,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState]
[., TRUE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE]
[), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), )]
[., BOTH, ), ), ;, appendListItem, (, sb, ,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH]
[;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem]
[,, "Total Static Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: "]
[), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;]
[+, countOf, (, TriState, ., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf]
[), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;]
[,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState]
[., FALSE, ,, TriState, ., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH]
[), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), )]
[., BOTH, ), ), ;, appendListItem, (, sb, ,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE]
[;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem]
[,, "Referenced Names: ", +, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: "]
[), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;]
[+, countOf, (, TriState, ., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf]
[), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;]
[,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState]
[., BOTH, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE]
[), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), )]
[., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE]
[;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb]
[,, "Referenced Classes: ", +, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: "]
[), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;]
[+, countOf, (, TriState, ., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf]
[), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;]
[,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState]
[., TRUE, ,, TriState, ., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE]
[), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), )]
[., TRUE, ), ), ;, appendListItem, (, sb, ,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE]
[;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :]
[,, "Referenced Functions: ", +, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>"]
[), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node]
[+, countOf, (, TriState, ., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;]
[), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node]
[,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", )]
[., FALSE, ,, TriState, ., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (]
[), ), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName]
[., TRUE, ), ), ;, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for]
[;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {]
[., append, (, "</ul>", ), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, .]
[), ;, sb, ., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), )]
[;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +, nameAnchor]
[., append, (, "ALL NAMES<ul>\n", ), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, .]
[), ;, for, (, JsName, node, :, allNames, ., values, (, ), ), {, sb, ., append, (, "<li>", +]
[), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (]
[., values, (, ), ), {, sb, ., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>"]
[;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", )]
[., append, (, "<li>", +, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames]
[), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: "]
[+, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append]
[+, nameAnchor, (, node, ., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, )]
[+, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append]
[), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, .]
[., name, ), +, "<ul>", ), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {]
[), ;, if, (, node, ., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: "]
[), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator]
[>, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames]
[., size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter]
[., prototypeNames, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String]
[), {, sb, ., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator]
[;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext]
[., append, (, "<li>PROTOTYPES: ", ), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;]
[), ;, Iterator, <, String, >, protoIter, =, node, ., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, .]
[;, while, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, protoIter, ., next, (, ), )]
[., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, protoIter, .]
[., prototypeNames, ., iterator, (, ), ;, while, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (]
[), {, sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, )]
[., hasNext, (, ), ), {, sb, ., append, (, protoIter, ., next, (, ), ), ;, if, (, protoIter]
[;, if, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }]
[., append, (, protoIter, ., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, ), ), {, sb]
[), ;, if, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }]
[., next, (, ), ), ;, if, (, protoIter, ., hasNext, (, ), ), {, sb, ., append, (, ", "]
[), {, sb, ., append, (, ", ", ), ;, }, }, }, if, (, referenceGraph, ., hasNode, (, node, )]
[., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, if, (, referenceGraph, .]
[;, }, }, }, if, (, referenceGraph, ., hasNode, (, node, ), ), {, List, <, DiGraphEdge, <, JsName, ,]
[., append, (, ", ", ), ;, }, }, }, if, (, referenceGraph, ., hasNode, (, node, ), ), {, List]
[), ;, }, }, }, if, (, referenceGraph, ., hasNode, (, node, ), ), {, List, <, DiGraphEdge, <, JsName]
[), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, ), ;]
[., hasNode, (, node, ), ), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, .]
[), ), {, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, refersTo, =, referenceGraph, ., getOutEdges, (, node, )]
[;, if, (, refersTo, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator]
[., getOutEdges, (, node, ), ;, if, (, refersTo, ., size, (, ), >, 0, ), {, sb, ., append]
[), ;, if, (, refersTo, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERS TO: ", ), ;]
[), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =]
[>, 0, ), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >]
[., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName]
[), {, sb, ., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while, (]
[., append, (, "<li>REFERS TO: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =, refersTo, ., iterator]
[), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, toIter, =, refersTo, ., iterator, (, ), ;, while]
[;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (, toIter, ., next, (]
[., iterator, (, ), ;, while, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[), {, sb, ., append, (, nameLink, (, toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (]
[., hasNext, (, ), ), {, sb, ., append, (, nameLink, (, toIter, ., next, (, ), ., getDestination, (]
[;, if, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }]
[., append, (, nameLink, (, toIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name]
[), ;, if, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }]
[), ), ;, if, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }]
[., name, ), ), ;, if, (, toIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", )]
[., getValue, (, ), ., name, ), ), ;, if, (, toIter, ., hasNext, (, ), ), {, sb, .]
[., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (, toIter, ., hasNext, (, )]
[., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (, toIter]
[), {, sb, ., append, (, ", ", ), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >]
[., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, List, <, DiGraphEdge, <]
[;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (, node]
[., append, (, ", ", ), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =]
[), ;, }, }, }, List, <, DiGraphEdge, <, JsName, ,, RefType, >, >, referencedBy, =, referenceGraph, ., getInEdges, (]
[;, if, (, referencedBy, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator]
[., getInEdges, (, node, ), ;, if, (, referencedBy, ., size, (, ), >, 0, ), {, sb, ., append]
[), ;, if, (, referencedBy, ., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;]
[), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =]
[>, 0, ), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >]
[., size, (, ), >, 0, ), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName]
[), {, sb, ., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =]
[;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while, (]
[., append, (, "<li>REFERENCED BY: ", ), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =, refersTo, ., iterator]
[), ;, Iterator, <, DiGraphEdge, <, JsName, ,, RefType, >, >, fromIter, =, refersTo, ., iterator, (, ), ;, while]
[;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (, fromIter, ., next, (]
[., iterator, (, ), ;, while, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, nameLink, (]
[), {, sb, ., append, (, nameLink, (, fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (]
[., hasNext, (, ), ), {, sb, ., append, (, nameLink, (, fromIter, ., next, (, ), ., getDestination, (]
[;, if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }]
[., append, (, nameLink, (, fromIter, ., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name]
[), ;, if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }]
[), ), ;, if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }]
[., name, ), ), ;, if, (, fromIter, ., hasNext, (, ), ), {, sb, ., append, (, ", ", )]
[., getValue, (, ), ., name, ), ), ;, if, (, fromIter, ., hasNext, (, ), ), {, sb, .]
[., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (, fromIter, ., hasNext, (, )]
[., next, (, ), ., getDestination, (, ), ., getValue, (, ), ., name, ), ), ;, if, (, fromIter]
[), {, sb, ., append, (, ", ", ), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;]
[., hasNext, (, ), ), {, sb, ., append, (, ", ", ), ;, }, }, }, }, sb, ., append]
[;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }]
[., append, (, ", ", ), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append]
[), ;, }, }, }, }, sb, ., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;]
[;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (]
[., append, (, "</li>", ), ;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", )]
[), ;, sb, ., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append]
[;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", ), ;, return, sb, ., toString]
[., append, (, "</ul></li>", ), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", )]
[), ;, }, sb, ., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", ), ;, return, sb, .]
[;, sb, ., append, (, "</body></html>", ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (]
[., append, (, "</ul>", ), ;, sb, ., append, (, "</body></html>", ), ;, return, sb, ., toString, (, ), ;]
[), ;, sb, ., append, (, "</body></html>", ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem]
[;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {]
[., append, (, "</body></html>", ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb]
[), ;, return, sb, ., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, )]
[;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append, (, "<li>", +, text]
[., toString, (, ), ;, }, private, void, appendListItem, (, StringBuilder, sb, ,, String, text, ), {, sb, ., append]
[;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +, name, +, "</a>"]
[., append, (, "<li>", +, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return]
[), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +, name, +]
[+, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +]
[+, text, +, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +]
[+, "</li>\n", ), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +]
[), ;, }, private, String, nameLink, (, String, name, ), {, return, "<a href=\"#", +, name, +, "\">", +, name, +]
[;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +, name, +, "</a>"]
[+, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +, name]
[+, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">"]
[+, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name]
[+, name, +, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\""]
[+, "\">", +, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name]
[+, name, +, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">"]
[+, "</a>", ;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +, name]
[;, }, private, String, nameAnchor, (, String, name, ), {, return, "<a name=\"", +, name, +, "\">", +, name, +, "</a>"]
[;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (]
[+, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {]
[+, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate]
[+, "\">", +, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if]
[+, name, +, "\">", +, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, )]
[+, "\">", +, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if]
[+, name, +, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate]
[+, "</a>", ;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {]
[;, }, private, JsName, getName, (, String, name, ,, boolean, canCreate, ), {, if, (, canCreate, ), {, createName, (]
[), {, createName, (, name, ), ;, }, return, allNames, ., get, (, name, ), ;, }, private, void, createName]
[;, }, return, allNames, ., get, (, name, ), ;, }, private, void, createName, (, String, name, ), {, JsName]
[), ;, }, return, allNames, ., get, (, name, ), ;, }, private, void, createName, (, String, name, ), {]
[;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (, name, ), ;]
[., get, (, name, ), ;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, .]
[), ;, }, private, void, createName, (, String, name, ), {, JsName, jsn, =, allNames, ., get, (, name, )]
[;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name]
[., get, (, name, ), ;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;]
[), ;, if, (, jsn, ==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =]
[), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put, (, name]
[==, null, ), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put]
[), {, jsn, =, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put, (, name]
[=, new, JsName, (, ), ;, jsn, ., name, =, name, ;, allNames, ., put, (, name, ,, jsn, )]
[;, jsn, ., name, =, name, ;, allNames, ., put, (, name, ,, jsn, ), ;, }, }, private, void]
[=, name, ;, allNames, ., put, (, name, ,, jsn, ), ;, }, }, private, void, referenceAliases, (, ), {]
[., name, =, name, ;, allNames, ., put, (, name, ,, jsn, ), ;, }, }, private, void, referenceAliases, (]
[;, allNames, ., put, (, name, ,, jsn, ), ;, }, }, private, void, referenceAliases, (, ), {, for, (]
[;, }, }, private, void, referenceAliases, (, ), {, for, (, Map, ., Entry, <, String, ,, AliasSet, >, entry]
[., put, (, name, ,, jsn, ), ;, }, }, private, void, referenceAliases, (, ), {, for, (, Map, .]
[,, jsn, ), ;, }, }, private, void, referenceAliases, (, ), {, for, (, Map, ., Entry, <, String, ,]
[), ;, }, }, private, void, referenceAliases, (, ), {, for, (, Map, ., Entry, <, String, ,, AliasSet, >]
[), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;, if, (, name, .]
[., entrySet, (, ), ), {, JsName, name, =, getName, (, entry, ., getKey, (, ), ,, false, ), ;]
[;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue]
[,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :]
[., getKey, (, ), ,, false, ), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for]
[), ;, if, (, name, ., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, .]
[), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,]
[||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {]
[., hasWrittenDescendants, ||, name, ., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names]
[), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (, alias, ,]
[., hasInstanceOfReference, ), {, for, (, String, alias, :, entry, ., getValue, (, ), ., names, ), {, recordReference, (]
[), {, recordReference, (, alias, ,, entry, ., getKey, (, ), ,, RefType, ., REGULAR, ), ;, }, }, }]
[., names, ), {, recordReference, (, alias, ,, entry, ., getKey, (, ), ,, RefType, ., REGULAR, ), ;, }]
[., getValue, (, ), ., names, ), {, recordReference, (, alias, ,, entry, ., getKey, (, ), ,, RefType, .]
[;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =, Sets, ., newHashSet]
[,, entry, ., getKey, (, ), ,, RefType, ., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (]
[,, RefType, ., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >]
[., getKey, (, ), ,, RefType, ., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (, ), {]
[), ;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =, Sets, .]
[., REGULAR, ), ;, }, }, }, }, private, void, referenceParentNames, (, ), {, Set, <, JsName, >, allNamesCopy, =]
[;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name]
[., newHashSet, (, allNames, ., values, (, ), ), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName]
[), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name, ;, JsName, curJsName, =]
[., values, (, ), ), ;, for, (, JsName, name, :, allNamesCopy, ), {, String, curName, =, name, ., name]
[), {, String, curName, =, name, ., name, ;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (]
[;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String]
[., name, ;, JsName, curJsName, =, name, ;, while, (, curName, ., indexOf, (, '.', ), !=, -, 1, )]
[;, while, (, curName, ., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring]
[), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if]
[!=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', )]
[., indexOf, (, '.', ), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,, curName]
[), !=, -, 1, ), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.']
[), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if]
[), {, String, parentName, =, curName, ., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if]
[;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true]
[., substring, (, 0, ,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (, !, globalNames, ., contains, (]
[,, curName, ., lastIndexOf, (, '.', ), ), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {]
[), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,]
[., lastIndexOf, (, '.', ), ), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName]
[), ), ;, if, (, !, globalNames, ., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName]
[), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, .]
[), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, .]
[., contains, (, parentName, ), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName]
[), ), {, JsName, parentJsName, =, getName, (, parentName, ,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName]
[;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, .]
[,, true, ), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference]
[), ;, recordReference, (, curJsName, ., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName]
[;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;]
[,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,]
[., name, ,, parentJsName, ., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, .]
[,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, )]
[., name, ,, RefType, ., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, .]
[), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName]
[., REGULAR, ), ;, recordReference, (, parentJsName, ., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName]
[;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,]
[,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }]
[., name, ,, curJsName, ., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName]
[,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }, }, }, private, NameInformation]
[., name, ,, RefType, ., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }, }, }]
[), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t]
[., REGULAR, ), ;, curJsName, =, parentJsName, ;, }, curName, =, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (]
[=, parentJsName, ;, }, curName, =, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n]
[;, }, curName, =, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n, ), {]
[=, parentName, ;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n, ), {, Node, parent, =]
[;, }, }, }, private, NameInformation, createNameInformation, (, NodeTraversal, t, ,, Node, n, ), {, Node, parent, =, n, .]
[;, String, name, =, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (, true, )]
[., getParent, (, ), ;, String, name, =, "", ;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;]
[;, Node, rootNameNode, =, n, ;, boolean, bNameWasShortened, =, false, ;, while, (, true, ), {, if, (, NodeUtil, .]
[;, boolean, bNameWasShortened, =, false, ;, while, (, true, ), {, if, (, NodeUtil, ., isGet, (, rootNameNode, ), )]
[;, while, (, true, ), {, if, (, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =, rootNameNode]
[), {, if, (, NodeUtil, ., isGet, (, rootNameNode, ), ), {, Node, prop, =, rootNameNode, ., getLastChild, (, )]
[), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {]
[., isGet, (, rootNameNode, ), ), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, .]
[), ), {, Node, prop, =, rootNameNode, ., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), )]
[;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =, ".", +, prop, ., getString, (, ), +]
[., getLastChild, (, ), ;, if, (, rootNameNode, ., isGetProp, (, ), ), {, name, =, ".", +, prop, .]
[), {, name, =, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true]
[., isGetProp, (, ), ), {, name, =, ".", +, prop, ., getString, (, ), +, name, ;, }, else]
[=, ".", +, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =]
[;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, )]
[+, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild]
[+, prop, ., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;]
[+, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild]
[., getString, (, ), +, name, ;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode]
[;, }, else, {, bNameWasShortened, =, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, )]
[=, true, ;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (]
[;, name, =, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, .]
[=, "", ;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (]
[;, }, rootNameNode, =, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,]
[=, rootNameNode, ., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent]
[;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name]
[., getFirstChild, (, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, )]
[), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent]
[., isObjectLitKey, (, rootNameNode, ,, rootNameNode, ., getParent, (, ), ), ), {, name, =, ".", +, rootNameNode, ., getString]
[,, rootNameNode, ., getParent, (, ), ), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name]
[), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, .]
[., getParent, (, ), ), ), {, name, =, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node]
[=, ".", +, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;]
[;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if]
[+, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, )]
[+, rootNameNode, ., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent]
[+, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, )]
[., getString, (, ), +, name, ;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit]
[;, Node, objLit, =, rootNameNode, ., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if]
[;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (, ), ), {, rootNameNode]
[., getParent, (, ), ;, Node, objLitParent, =, objLit, ., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (]
[;, if, (, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else]
[., getParent, (, ), ;, if, (, objLitParent, ., isAssign, (, ), ), {, rootNameNode, =, objLitParent, ., getFirstChild, (]
[), {, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (, objLitParent, ., isName, (, ), )]
[., isAssign, (, ), ), {, rootNameNode, =, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (, objLitParent, .]
[=, objLitParent, ., getFirstChild, (, ), ;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =]
[;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (]
[., getFirstChild, (, ), ;, }, else, if, (, objLitParent, ., isName, (, ), ), {, rootNameNode, =, objLitParent, ;]
[), {, rootNameNode, =, objLitParent, ;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {, rootNameNode, =, objLitParent]
[., isName, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, if, (, objLitParent, ., isStringKey, (, ), )]
[=, objLitParent, ;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else]
[;, }, else, if, (, objLitParent, ., isStringKey, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, {, return]
[), {, rootNameNode, =, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }]
[., isStringKey, (, ), ), {, rootNameNode, =, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {]
[=, objLitParent, ;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }, if, (, parent]
[;, }, else, {, return, null, ;, }, }, else, {, break, ;, }, }, if, (, parent, ., isCall]
[;, }, }, else, {, break, ;, }, }, if, (, parent, ., isCall, (, ), &&, t, ., inGlobalScope]
[), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, )]
[&&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =]
[., isCall, (, ), &&, t, ., inGlobalScope, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, )]
[), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, )]
[., inGlobalScope, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, .]
[;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo]
[., getCodingConvention, (, ), ;, SubclassRelationship, classes, =, convention, ., getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null]
[;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[., getClassesDefinedByCall, (, parent, ), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, )]
[), ;, if, (, classes, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, .]
[!=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, .]
[;, nameInfo, ., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes]
[=, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return]
[., name, =, classes, ., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName]
[;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String]
[., subclassName, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;]
[=, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, .]
[., onlyAffectsClassDef, =, true, ;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =]
[;, nameInfo, ., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (]
[=, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if]
[., superclass, =, classes, ., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, )]
[;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null]
[., superclassName, ;, return, nameInfo, ;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass]
[;, }, String, singletonGetterClass, =, convention, ., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation]
[;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[., getSingletonGetterClassName, (, parent, ), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, )]
[), ;, if, (, singletonGetterClass, !=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =]
[!=, null, ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, .]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =]
[;, nameInfo, ., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (]
[=, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (]
[., name, =, singletonGetterClass, ;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, .]
[;, nameInfo, ., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), )]
[=, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, .]
[., onlyAffectsClassDef, =, true, ;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case]
[;, return, nameInfo, ;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :]
[;, }, }, switch, (, rootNameNode, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (, !]
[), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, .]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (]
[:, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", .]
[., NAME, :, if, (, !, bNameWasShortened, &&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&]
[), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =]
[&&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation]
[&&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, )]
[&&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild]
[&&, n, ., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild]
[&&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, )]
[., isGetProp, (, ), &&, parent, ., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild, (, )]
[&&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation]
[., isAssign, (, ), &&, "prototype", ., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), )]
[), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =]
[., equals, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation, (, t]
[), ), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=, null, ), {, name]
[., getString, (, ), ), ), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild, (, ), ), !=]
[., getLastChild, (, ), ., getString, (, ), ), ), {, if, (, createNameInformation, (, t, ,, n, ., getFirstChild]
[), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,]
[!=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (]
[,, n, ., getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name]
[), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring]
[., getFirstChild, (, ), ), !=, null, ), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name]
[), {, name, =, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,]
[=, rootNameNode, ., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,, name, ., length]
[;, name, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo]
[+, name, ;, name, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;]
[., getString, (, ), +, name, ;, name, =, name, ., substring, (, 0, ,, name, ., length, (, )]
[;, name, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo]
[=, name, ., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new]
[;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else]
[., substring, (, 0, ,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (]
[,, name, ., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, .]
[), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }]
[-, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return, nameInfo]
[., length, (, ), -, PROTOTYPE_SUFFIX_LEN, ), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =]
[), ;, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }]
[;, nameInfo, ., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation]
[=, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString]
[., name, =, name, ;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode]
[;, return, nameInfo, ;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, )]
[;, }, else, {, return, null, ;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,]
[;, }, }, return, createNameInformation, (, rootNameNode, ., getString, (, ), +, name, ,, t, ., getScope, (, ), ,]
[;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation]
[,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope]
[+, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t]
[., getString, (, ), +, name, ,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS]
[,, t, ., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope]
[,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo]
[., getScope, (, ), ,, rootNameNode, ), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope, (, )]
[), ;, case, Token, ., THIS, :, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new]
[:, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (]
[., THIS, :, if, (, t, ., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (, '.', ), ==, 0]
[., inGlobalScope, (, ), ), {, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, if, (, name, ., indexOf, (]
[;, if, (, name, ., indexOf, (, '.', ), ==, 0, ), {, nameInfo, ., name, =, name, ., substring]
[), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =]
[==, 0, ), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, .]
[., indexOf, (, '.', ), ==, 0, ), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;]
[), ==, 0, ), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo]
[), {, nameInfo, ., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =]
[=, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, .]
[., name, =, name, ., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }]
[;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;]
[., substring, (, 1, ), ;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =]
[), ;, }, else, {, nameInfo, ., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo]
[=, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return, null, ;, default, :, return]
[., name, =, name, ;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return, null, ;, default]
[;, }, nameInfo, ., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return, null, ;, default, :, return, null, ;]
[=, true, ;, return, nameInfo, ;, }, return, null, ;, default, :, return, null, ;, }, }, private, NameInformation, createNameInformation]
[., isExternallyReferenceable, =, true, ;, return, nameInfo, ;, }, return, null, ;, default, :, return, null, ;, }, }, private]
[;, return, nameInfo, ;, }, return, null, ;, default, :, return, null, ;, }, }, private, NameInformation, createNameInformation, (, String]
[;, }, return, null, ;, default, :, return, null, ;, }, }, private, NameInformation, createNameInformation, (, String, name, ,, Scope]
[;, default, :, return, null, ;, }, }, private, NameInformation, createNameInformation, (, String, name, ,, Scope, scope, ,, Node, rootNameNode]
[;, }, }, private, NameInformation, createNameInformation, (, String, name, ,, Scope, scope, ,, Node, rootNameNode, ), {, String, rootName, =]
[;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==, null, &&, externalNames]
[., getString, (, ), ;, Var, v, =, scope, ., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v]
[;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =]
[., getVar, (, rootName, ), ;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, )]
[), ;, boolean, isExtern, =, (, v, ==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef]
[;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, .]
[), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName]
[&&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal]
[==, null, &&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v]
[&&, externalNames, ., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal]
[), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName]
[., contains, (, rootName, ), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, )]
[), ), ;, boolean, isGlobalRef, =, (, v, !=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||]
[;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int]
[||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo]
[||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }]
[), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;]
[&&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !]
[!=, null, &&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if]
[&&, v, ., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !]
[), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;]
[., isGlobal, (, ), ), ||, isExtern, ||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, )]
[||, rootName, ., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo]
[;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int]
[., equals, (, WINDOW, ), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new]
[), ;, if, (, !, isGlobalRef, ), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;]
[), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf]
[), {, return, null, ;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf]
[;, }, NameInformation, nameInfo, =, new, NameInformation, (, ), ;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;]
[;, int, idx, =, name, ., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {, nameInfo]
[;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name]
[., indexOf, (, PROTOTYPE_SUBSTRING, ), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;]
[), ;, if, (, idx, !=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =]
[), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, )]
[!=, -, 1, ), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0]
[), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, )]
[), {, nameInfo, ., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, )]
[=, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =]
[., isPrototype, =, true, ;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, .]
[;, nameInfo, ., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, .]
[=, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +]
[., prototypeClass, =, name, ., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (]
[;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name]
[., substring, (, 0, ,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, )]
[,, idx, ), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, .]
[), ;, nameInfo, ., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =]
[=, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable]
[., prototypeProperty, =, name, ., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo]
[;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, )]
[., substring, (, idx, +, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern]
[), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name]
[+, PROTOTYPE_SUBSTRING_LEN, ), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope]
[), ;, }, nameInfo, ., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name]
[=, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo, ;, }]
[., name, =, name, ;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo]
[;, nameInfo, ., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo, ;, }, private, boolean]
[=, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope]
[., isExternallyReferenceable, =, isExtern, ||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (]
[;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (, compiler, .]
[||, isExternallyReferenceable, (, scope, ,, name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String]
[;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (, compiler, .]
[,, name, ), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if]
[), ;, return, nameInfo, ;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (, compiler]
[;, }, private, boolean, isExternallyReferenceable, (, Scope, scope, ,, String, name, ), {, if, (, compiler, ., getCodingConvention, (, )]
[), {, return, true, ;, }, if, (, scope, ., isLocal, (, ), ), {, return, false, ;, }, for]
[., isExported, (, name, ), ), {, return, true, ;, }, if, (, scope, ., isLocal, (, ), ), {]
[., getCodingConvention, (, ), ., isExported, (, name, ), ), {, return, true, ;, }, if, (, scope, ., isLocal]
[), ), {, return, true, ;, }, if, (, scope, ., isLocal, (, ), ), {, return, false, ;, }]
[;, }, if, (, scope, ., isLocal, (, ), ), {, return, false, ;, }, for, (, String, s, :]
[), {, return, false, ;, }, for, (, String, s, :, globalNames, ), {, if, (, name, ., startsWith, (]
[., isLocal, (, ), ), {, return, false, ;, }, for, (, String, s, :, globalNames, ), {, if, (]
[;, }, for, (, String, s, :, globalNames, ), {, if, (, name, ., startsWith, (, s, ), ), {]
[), {, if, (, name, ., startsWith, (, s, ), ), {, return, true, ;, }, }, return, false, ;]
[), {, return, true, ;, }, }, return, false, ;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node, n]
[., startsWith, (, s, ), ), {, return, true, ;, }, }, return, false, ;, }, private, List, <, NameInformation]
[), ), {, return, true, ;, }, }, return, false, ;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node]
[;, }, }, return, false, ;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node, n, ), {, for, (]
[;, }, private, List, <, NameInformation, >, getDependencyScope, (, Node, n, ), {, for, (, Node, node, :, n, .]
[), {, List, <, NameInformation, >, refs, =, scopes, ., get, (, node, ), ;, if, (, !, refs, .]
[., getAncestors, (, ), ), {, List, <, NameInformation, >, refs, =, scopes, ., get, (, node, ), ;, if]
[;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, }, return, Collections, ., emptyList]
[., get, (, node, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }]
[), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, }, return, Collections, .]
[), {, return, refs, ;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, List, <, NameInformation, >]
[), {, return, refs, ;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, List, <, NameInformation, >]
[., isEmpty, (, ), ), {, return, refs, ;, }, }, return, Collections, ., emptyList, (, ), ;, }, private]
[;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, List, <, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t]
[;, }, private, List, <, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =, t, ., getEnclosingFunction, (]
[., emptyList, (, ), ;, }, private, List, <, NameInformation, >, getEnclosingFunctionDependencyScope, (, NodeTraversal, t, ), {, Node, function, =]
[;, if, (, function, ==, null, ), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >]
[., getEnclosingFunction, (, ), ;, if, (, function, ==, null, ), {, return, Collections, ., emptyList, (, ), ;, }]
[), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (]
[==, null, ), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, .]
[), {, return, Collections, ., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (]
[;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (, function, ), ;, if, (, !, refs, .]
[., emptyList, (, ), ;, }, List, <, NameInformation, >, refs, =, scopes, ., get, (, function, ), ;, if]
[;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =, function, .]
[., get, (, function, ), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }]
[), ;, if, (, !, refs, ., isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =, function]
[), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=, null]
[), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=, null]
[., isEmpty, (, ), ), {, return, refs, ;, }, Node, parent, =, function, ., getParent, (, ), ;, if]
[;, }, Node, parent, =, function, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, while, (]
[;, if, (, parent, !=, null, ), {, while, (, parent, ., isHook, (, ), ), {, parent, =, parent]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, while, (, parent, ., isHook, (, ), )]
[), {, while, (, parent, ., isHook, (, ), ), {, parent, =, parent, ., getParent, (, ), ;, }]
[!=, null, ), {, while, (, parent, ., isHook, (, ), ), {, parent, =, parent, ., getParent, (, )]
[), {, while, (, parent, ., isHook, (, ), ), {, parent, =, parent, ., getParent, (, ), ;, }]
[), {, parent, =, parent, ., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {]
[., isHook, (, ), ), {, parent, =, parent, ., getParent, (, ), ;, }, if, (, parent, ., isName]
[=, parent, ., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {, return, scopes, .]
[;, }, if, (, parent, ., isName, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }]
[., getParent, (, ), ;, }, if, (, parent, ., isName, (, ), ), {, return, scopes, ., get, (]
[), {, return, scopes, ., get, (, parent, ), ;, }, if, (, parent, ., isAssign, (, ), ), {]
[., isName, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, if, (, parent, ., isAssign]
[;, }, if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }]
[., get, (, parent, ), ;, }, if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get]
[), ;, }, if, (, parent, ., isAssign, (, ), ), {, return, scopes, ., get, (, parent, ), ;]
[), {, return, scopes, ., get, (, parent, ), ;, }, }, return, Collections, ., emptyList, (, ), ;, }]
[., isAssign, (, ), ), {, return, scopes, ., get, (, parent, ), ;, }, }, return, Collections, ., emptyList]
[;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =]
[., get, (, parent, ), ;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (]
[), ;, }, }, return, Collections, ., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window]
[;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,, true, ), ;, window, .]
[., emptyList, (, ), ;, }, private, void, calculateReferences, (, ), {, JsName, window, =, getName, (, WINDOW, ,, true]
[;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced]
[,, true, ), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;]
[), ;, window, ., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, .]
[=, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal]
[., referenced, =, true, ;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true]
[;, JsName, function, =, getName, (, FUNCTION, ,, true, ), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal]
[;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph]
[,, true, ), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), .]
[), ;, function, ., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (]
[=, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph, ), ;, }, private]
[., referenced, =, true, ;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph, ), ;]
[;, FixedPointGraphTraversal, ., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph, ), ;, }, private, enum, TriState]
[;, }, private, enum, TriState, {, TRUE, ,, FALSE, ,, BOTH, }, private, int, countOf, (, TriState, isClass, ,, TriState]
[., computeFixedPoint, (, referenceGraph, ), ;, }, private, enum, TriState, {, TRUE, ,, FALSE, ,, BOTH, }, private, int, countOf]
[., newTraversal, (, new, ReferencePropagationCallback, (, ), ), ., computeFixedPoint, (, referenceGraph, ), ;, }, private, enum, TriState, {, TRUE]
[), ., computeFixedPoint, (, referenceGraph, ), ;, }, private, enum, TriState, {, TRUE, ,, FALSE, ,, BOTH, }, private, int]
[), ;, }, private, enum, TriState, {, TRUE, ,, FALSE, ,, BOTH, }, private, int, countOf, (, TriState, isClass, ,]
[;, for, (, JsName, name, :, allNames, ., values, (, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, .]
[), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==]
[., values, (, ), ), {, boolean, nodeIsClass, =, name, ., prototypeNames, ., size, (, ), >, 0, ;, boolean]
[;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||]
[>, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE]
[., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass]
[., prototypeNames, ., size, (, ), >, 0, ;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass]
[;, boolean, classMatch, =, isClass, ==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||]
[;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE]
[||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH]
[||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE]
[==, TriState, ., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass]
[||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE]
[., BOTH, ||, (, nodeIsClass, &&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState]
[||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH]
[), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, .]
[&&, isClass, ==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean]
[), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, .]
[==, TriState, ., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =]
[), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, .]
[., TRUE, ), ||, (, !, nodeIsClass, &&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==]
[;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE]
[), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, .]
[&&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, .]
[&&, isClass, ==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, .]
[), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, .]
[==, TriState, ., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&]
[), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, .]
[., FALSE, ), ;, boolean, referenceMatch, =, referenced, ==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==]
[;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return, count]
[||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&]
[||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced]
[==, TriState, ., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name]
[||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced]
[., BOTH, ||, (, name, ., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced]
[||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&]
[), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch]
[&&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, )]
[., referenced, &&, referenced, ==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, .]
[), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch]
[==, TriState, ., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if]
[), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch]
[., TRUE, ), ||, (, !, name, ., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch]
[;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return, count]
[), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return]
[&&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {]
[&&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {]
[., referenced, &&, referenced, ==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined]
[), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return]
[==, TriState, ., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++]
[), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return]
[., FALSE, ), ;, if, (, classMatch, &&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }]
[), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n]
[&&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node]
[&&, referenceMatch, &&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return, count, ;, }, private, List]
[&&, !, name, ., externallyDefined, ), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node]
[), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n]
[), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n]
[., externallyDefined, ), {, count, ++, ;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (]
[;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n, ), {, List, <]
[++, ;, }, }, return, count, ;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n, ), {, List]
[;, }, private, List, <, Node, >, getSideEffectNodes, (, Node, n, ), {, List, <, Node, >, subexpressions, =, Lists]
[;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions]
[., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions]
[;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for, (]
[., traverse, (, compiler, ,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), )]
[,, n, ,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <]
[,, new, GatherSideEffectSubexpressionsCallback, (, compiler, ,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >]
[), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for]
[,, new, GetReplacementSideEffectSubexpressions, (, compiler, ,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize]
[), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;]
[,, subexpressions, ), ), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (]
[), ), ), ;, List, <, Node, >, replacements, =, Lists, ., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), )]
[;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (, NodeUtil, ., newExpr, (, subexpression, ), )]
[., newArrayListWithExpectedSize, (, subexpressions, ., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, .]
[), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (, NodeUtil, ., newExpr, (, subexpression, )]
[., size, (, ), ), ;, for, (, Node, subexpression, :, subexpressions, ), {, replacements, ., add, (, NodeUtil, .]
[), {, replacements, ., add, (, NodeUtil, ., newExpr, (, subexpression, ), ), ;, }, return, replacements, ;, }, private]
[;, }, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (, valueConsumedByParent]
[., add, (, NodeUtil, ., newExpr, (, subexpression, ), ), ;, }, return, replacements, ;, }, private, void, replaceWithRhs, (]
[), ;, }, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (]
[., newExpr, (, subexpression, ), ), ;, }, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node]
[), ), ;, }, return, replacements, ;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if]
[;, }, private, void, replaceWithRhs, (, Node, parent, ,, Node, n, ), {, if, (, valueConsumedByParent, (, n, ,, parent]
[), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (, n, ), ;, List, <, Node, >, newReplacements, =, Lists]
[,, parent, ), ), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (, n, ), ;, List, <, Node, >]
[), ), {, List, <, Node, >, replacements, =, getRhsSubexpressions, (, n, ), ;, List, <, Node, >, newReplacements, =]
[;, List, <, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, List, <, Node, >, newReplacements, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -, 1, ;, i, ++]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, replacements, ., size, (, ), -]
[;, i, <, replacements, ., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes]
[;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;]
[<, replacements, ., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements]
[;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;]
[-, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), )]
[., size, (, ), -, 1, ;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get]
[;, i, ++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;]
[), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr]
[++, ), {, newReplacements, ., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node]
[;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;, valueExpr, .]
[., addAll, (, getSideEffectNodes, (, replacements, ., get, (, i, ), ), ), ;, }, Node, valueExpr, =, replacements, .]
[), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;, valueExpr]
[), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, ), ;]
[., get, (, i, ), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (]
[), ), ), ;, }, Node, valueExpr, =, replacements, ., get, (, replacements, ., size, (, ), -, 1, )]
[;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,]
[., get, (, replacements, ., size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, .]
[), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent]
[-, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith]
[., size, (, ), -, 1, ), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, )]
[), ;, valueExpr, ., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent]
[;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, )]
[., detachFromParent, (, ), ;, newReplacements, ., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,]
[;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n]
[., add, (, valueExpr, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;]
[), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (]
[;, }, else, if, (, n, ., isAssign, (, ), &&, !, parent, ., isFor, (, ), ), {, Node]
[., replaceWith, (, parent, ,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign]
[,, n, ,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign, (, ), &&, !]
[,, collapseReplacements, (, newReplacements, ), ), ;, }, else, if, (, n, ., isAssign, (, ), &&, !, parent, .]
[), ;, }, else, if, (, n, ., isAssign, (, ), &&, !, parent, ., isFor, (, ), ), {]
[), ), ;, }, else, if, (, n, ., isAssign, (, ), &&, !, parent, ., isFor, (, ), )]
[), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith]
[&&, !, parent, ., isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, .]
[., isAssign, (, ), &&, !, parent, ., isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (]
[), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith]
[), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith]
[., isFor, (, ), ), {, Node, replacement, =, n, ., getLastChild, (, ), ;, replacement, ., detachFromParent, (, )]
[;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else]
[., getLastChild, (, ), ;, replacement, ., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement]
[;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n]
[., detachFromParent, (, ), ;, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs]
[;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,]
[., replaceWith, (, parent, ,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n, ), ;]
[,, n, ,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n, ), ;, }, }, private, void]
[,, replacement, ), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (]
[), ;, }, else, {, replaceTopLevelExpressionWithRhs, (, parent, ,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent]
[;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (, parent, ., getType, (]
[,, n, ), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (, parent]
[), ;, }, }, private, void, replaceTopLevelExpressionWithRhs, (, Node, parent, ,, Node, n, ), {, switch, (, parent, ., getType]
[), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FOR]
[:, case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :]
[., BLOCK, :, case, Token, ., SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;]
[:, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs "]
[., SCRIPT, :, case, Token, ., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException]
[:, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (]
[., FOR, :, case, Token, ., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, .]
[:, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType, (, )]
[., LABEL, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported parent node type in replaceWithRhs ", +, Token, ., name, (, parent, ., getType]
[;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION]
[), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, .]
[+, Token, ., name, (, parent, ., getType, (, ), ), ), ;, }, switch, (, n, ., getType, (]
[), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, .]
[., name, (, parent, ., getType, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), )]
[), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token]
[., getType, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, .]
[), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case]
[., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR]
[:, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, .]
[., EXPR_RESULT, :, case, Token, ., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :]
[:, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor]
[., FUNCTION, :, case, Token, ., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent]
[:, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,]
[., VAR, :, break, ;, case, Token, ., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,]
[:, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType]
[., ASSIGN, :, Preconditions, ., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (, n, ., getType, (, )]
[., checkArgument, (, parent, ., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType, (, )]
[,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw]
[., isFor, (, ), ,, "Unsupported assignment in replaceWithRhs. parent: %s", ,, Token, ., name, (, parent, ., getType, (, ), ), ), ;, break]
[,, Token, ., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException]
[), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (, n, ., getType, (]
[., name, (, parent, ., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs "]
[), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name, (, n, ., getType]
[., getType, (, ), ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unsupported node type in replaceWithRhs ", +, Token, ., name]
[;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions]
[), ;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :]
[+, Token, ., name, (, n, ., getType, (, ), ), ), ;, }, List, <, Node, >, replacements, =]
[), ;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs, :]
[., name, (, n, ., getType, (, ), ), ), ;, }, List, <, Node, >, replacements, =, Lists, .]
[), ), ;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;, for, (, Node, rhs]
[., getType, (, ), ), ), ;, }, List, <, Node, >, replacements, =, Lists, ., newArrayList, (, ), ;]
[;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (, getSideEffectNodes, (, rhs, )]
[., newArrayList, (, ), ;, for, (, Node, rhs, :, getRhsSubexpressions, (, n, ), ), {, replacements, ., addAll, (]
[), {, replacements, ., addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (, parent, ., isFor, (, )]
[), ), {, replacements, ., addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (, parent, ., isFor, (]
[;, }, if, (, parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {]
[., addAll, (, getSideEffectNodes, (, rhs, ), ), ;, }, if, (, parent, ., isFor, (, ), ), {, if]
[), ;, }, if, (, parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), )]
[), ), ;, }, if, (, parent, ., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, )]
[), {, if, (, replacements, ., isEmpty, (, ), ), {, replacements, ., add, (, IR, ., empty, (, )]
[., isFor, (, ), ), {, if, (, replacements, ., isEmpty, (, ), ), {, replacements, ., add, (, IR]
[), {, replacements, ., add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements]
[., isEmpty, (, ), ), {, replacements, ., add, (, IR, ., empty, (, ), ), ;, }, else, {]
[;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;, replacements, .]
[., add, (, IR, ., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, )]
[), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear, (, ), ;, replacements]
[., empty, (, ), ), ;, }, else, {, Node, expr, =, collapseReplacements, (, replacements, ), ;, replacements, ., clear]
[;, replacements, ., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (]
[), ;, replacements, ., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith]
[;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacements, )]
[., clear, (, ), ;, replacements, ., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (, parent, ,]
[;, }, }, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node]
[., add, (, expr, ), ;, }, }, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacements, ), ;, }]
[), ;, }, }, changeProxy, ., replaceWith, (, parent, ,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (]
[;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (, parent]
[., replaceWith, (, parent, ,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent]
[,, n, ,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (]
[,, replacements, ), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, .]
[), ;, }, private, boolean, valueConsumedByParent, (, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isAssignmentOp, (]
[), {, return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (, parent, ., getType, (, ), )]
[., isAssignmentOp, (, parent, ), ), {, return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (, parent]
[), ), {, return, parent, ., getLastChild, (, ), ==, n, ;, }, switch, (, parent, ., getType, (, )]
[;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN]
[==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token]
[., getLastChild, (, ), ==, n, ;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, .]
[;, }, switch, (, parent, ., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN]
[), {, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., RETURN, :, return, true, ;, case]
[:, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case]
[., NAME, :, case, Token, ., RETURN, :, return, true, ;, case, Token, ., AND, :, case, Token, ., OR]
[:, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return]
[., RETURN, :, return, true, ;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK]
[;, case, Token, ., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild]
[:, case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;]
[., AND, :, case, Token, ., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==]
[:, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :]
[., OR, :, case, Token, ., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, .]
[:, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (]
[., HOOK, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return, parent, .]
[;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case]
[==, n, ;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n]
[., getFirstChild, (, ), ==, n, ;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext]
[;, case, Token, ., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case]
[:, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case]
[., FOR, :, return, parent, ., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF]
[;, case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;]
[==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==]
[., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, .]
[., getFirstChild, (, ), ., getNext, (, ), ==, n, ;, case, Token, ., IF, :, case, Token, ., WHILE]
[;, case, Token, ., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;]
[:, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :]
[., IF, :, case, Token, ., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, .]
[:, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return, parent, ., getLastChild, (]
[., WHILE, :, return, parent, ., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return, parent, .]
[;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return, false, ;]
[==, n, ;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return]
[., getFirstChild, (, ), ==, n, ;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==, n]
[;, case, Token, ., DO, :, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return, false, ;]
[:, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return, false, ;, }, }, private, Node, collapseReplacements]
[., DO, :, return, parent, ., getLastChild, (, ), ==, n, ;, default, :, return, false, ;, }, }, private]
[;, default, :, return, false, ;, }, }, private, Node, collapseReplacements, (, List, <, Node, >, replacements, ), {, Node]
[==, n, ;, default, :, return, false, ;, }, }, private, Node, collapseReplacements, (, List, <, Node, >, replacements, )]
[., getLastChild, (, ), ==, n, ;, default, :, return, false, ;, }, }, private, Node, collapseReplacements, (, List, <]
[;, default, :, return, false, ;, }, }, private, Node, collapseReplacements, (, List, <, Node, >, replacements, ), {, Node]
[;, }, }, private, Node, collapseReplacements, (, List, <, Node, >, replacements, ), {, Node, expr, =, null, ;, for]
[;, for, (, Node, rep, :, replacements, ), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =]
[), {, if, (, rep, ., isExprResult, (, ), ), {, rep, =, rep, ., getFirstChild, (, ), ;, rep]
[), {, rep, =, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr]
[., isExprResult, (, ), ), {, rep, =, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;]
[=, rep, ., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==, null, )]
[;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }]
[., getFirstChild, (, ), ;, rep, ., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {, expr]
[;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {, expr, =, IR, .]
[., detachFromParent, (, ), ;, }, if, (, expr, ==, null, ), {, expr, =, rep, ;, }, else, {]
[), {, expr, =, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep, ), ;]
[==, null, ), {, expr, =, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep]
[), {, expr, =, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep, ), ;]
[=, rep, ;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep, ), ;, }, }, return]
[;, }, else, {, expr, =, IR, ., comma, (, expr, ,, rep, ), ;, }, }, return, expr, ;]
[=, IR, ., comma, (, expr, ,, rep, ), ;, }, }, return, expr, ;, }, private, List, <, Node]
[;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (]
[., comma, (, expr, ,, rep, ), ;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions]
[,, rep, ), ;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, )]
[), ;, }, }, return, expr, ;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch]
[;, }, private, List, <, Node, >, getRhsSubexpressions, (, Node, n, ), {, switch, (, n, ., getType, (, )]
[), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case, Token, .]
[., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), )]
[:, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList]
[., EXPR_RESULT, :, return, getRhsSubexpressions, (, n, ., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return, Collections]
[;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node]
[), ;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {]
[., getFirstChild, (, ), ), ;, case, Token, ., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token]
[:, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild]
[., FUNCTION, :, return, Collections, ., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node, rhs, =, n]
[;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=]
[., emptyList, (, ), ;, case, Token, ., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;]
[:, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {, return, Lists]
[., NAME, :, {, Node, rhs, =, n, ., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {]
[;, if, (, rhs, !=, null, ), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return]
[., getFirstChild, (, ), ;, if, (, rhs, !=, null, ), {, return, Lists, ., newArrayList, (, rhs, ), ;]
[), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (, ), ;]
[!=, null, ), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (]
[), {, return, Lists, ., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (, ), ;]
[;, }, else, {, return, Collections, ., emptyList, (, ), ;, }, }, case, Token, ., ASSIGN, :, {, Node]
[., newArrayList, (, rhs, ), ;, }, else, {, return, Collections, ., emptyList, (, ), ;, }, }, case, Token]
[), ;, }, else, {, return, Collections, ., emptyList, (, ), ;, }, }, case, Token, ., ASSIGN, :, {]
[;, }, }, case, Token, ., ASSIGN, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs]
[., emptyList, (, ), ;, }, }, case, Token, ., ASSIGN, :, {, Node, lhs, =, n, ., getFirstChild, (]
[:, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;]
[., ASSIGN, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (]
[;, Node, rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs, ,, rhs, ), ;]
[., getFirstChild, (, ), ;, Node, rhs, =, lhs, ., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs]
[;, return, Lists, ., newArrayList, (, lhs, ,, rhs, ), ;, }, case, Token, ., VAR, :, {, List, <]
[., getNext, (, ), ;, return, Lists, ., newArrayList, (, lhs, ,, rhs, ), ;, }, case, Token, ., VAR]
[;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;]
[., newArrayList, (, lhs, ,, rhs, ), ;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes]
[,, rhs, ), ;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList]
[), ;, }, case, Token, ., VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, )]
[:, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child, :, n]
[., VAR, :, {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, child]
[;, for, (, Node, child, :, n, ., children, (, ), ), {, nodes, ., addAll, (, getRhsSubexpressions, (, child]
[., newArrayList, (, ), ;, for, (, Node, child, :, n, ., children, (, ), ), {, nodes, ., addAll]
[), {, nodes, ., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw]
[., children, (, ), ), {, nodes, ., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;]
[;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +, n, ), ;, }, }, }]
[., addAll, (, getRhsSubexpressions, (, child, ), ), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (]
[), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +, n, ), ;, }, }]
[), ), ;, }, return, nodes, ;, }, default, :, throw, new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +, n, ), ;, }]
[;, }, default, :, throw, new, IllegalArgumentException, (, "AstChangeProxy::getRhs ", +, n, ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
[+, n, ), ;, }, }, }]
[), ;, }, }, }]
