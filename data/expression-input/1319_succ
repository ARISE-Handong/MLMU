[;, public, MullerSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, MullerSolver, (, double, absoluteAccuracy, ), {, super]
[), ;, }, public, MullerSolver, (, double, absoluteAccuracy, ), {, super, (, absoluteAccuracy, ), ;, }, public, MullerSolver, (, double]
[), ;, }, public, MullerSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;]
[,, absoluteAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final]
[), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min]
[;, final, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy]
[;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double]
[;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if]
[;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, fMin, ), <, functionValueAccuracy]
[,, initial, ,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs]
[,, max, ), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, fMin]
[), ;, final, double, fMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, fMin, ), <]
[;, if, (, FastMath, ., abs, (, fMin, ), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax]
[), ;, if, (, FastMath, ., abs, (, fMin, ), <, functionValueAccuracy, ), {, return, min, ;, }, final, double]
[), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs]
[<, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath]
[., abs, (, fMin, ), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max]
[), <, functionValueAccuracy, ), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[), {, return, min, ;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs]
[;, }, final, double, fMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, fMax, ), <]
[;, if, (, FastMath, ., abs, (, fMax, ), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial]
[), ;, if, (, FastMath, ., abs, (, fMax, ), <, functionValueAccuracy, ), {, return, max, ;, }, final, double]
[), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs]
[<, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath]
[., abs, (, fMax, ), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial]
[), <, functionValueAccuracy, ), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[), {, return, max, ;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs]
[;, }, final, double, fInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, fInitial, ), <]
[;, if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min]
[), ;, if, (, FastMath, ., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (]
[), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial]
[<, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min]
[., abs, (, fInitial, ), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;]
[), <, functionValueAccuracy, ), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (]
[), {, return, initial, ;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial]
[;, }, verifyBracketing, (, min, ,, max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return]
[;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,, initial, ,, fMin, ,]
[,, max, ), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,, initial]
[), ;, if, (, isBracketing, (, min, ,, initial, ), ), {, return, solve, (, min, ,, initial, ,, fMin]
[), {, return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (]
[,, initial, ), ), {, return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {]
[), ), {, return, solve, (, min, ,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve]
[;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,, fMax, ), ;, }, }, private, double]
[,, initial, ,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,]
[,, fMin, ,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,, fMax, )]
[,, fInitial, ), ;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,, fMax, ), ;, }]
[), ;, }, else, {, return, solve, (, initial, ,, max, ,, fInitial, ,, fMax, ), ;, }, }, private]
[;, }, }, private, double, solve, (, double, min, ,, double, max, ,, double, fMin, ,, double, fMax, ), throws]
[,, max, ,, fInitial, ,, fMax, ), ;, }, }, private, double, solve, (, double, min, ,, double, max, ,]
[,, fInitial, ,, fMax, ), ;, }, }, private, double, solve, (, double, min, ,, double, max, ,, double, fMin]
[,, fMax, ), ;, }, }, private, double, solve, (, double, min, ,, double, max, ,, double, fMin, ,, double]
[), ;, }, }, private, double, solve, (, double, min, ,, double, max, ,, double, fMin, ,, double, fMax, )]
[;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, double, x0, =, min, ;, double, y0, =, fMin, ;, double]
[;, double, x0, =, min, ;, double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax]
[;, double, y0, =, fMin, ;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5]
[;, double, x2, =, max, ;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (, x0, +, x2]
[;, double, y2, =, fMax, ;, double, x1, =, 0.5, *, (, x0, +, x2, ), ;, double, y1, =]
[;, double, x1, =, 0.5, *, (, x0, +, x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;]
[;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, )]
[*, (, x0, +, x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, .]
[;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, )]
[), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true]
[+, x2, ), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while]
[), ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -]
[), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1]
[;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0]
[., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, d01, =, (, y1, -, y0, ), /, (, x1]
[), {, final, double, d01, =, (, y1, -, y0, ), /, (, x1, -, x0, ), ;, final, double]
[;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012]
[/, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -]
[), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2]
[-, y0, ), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /]
[), /, (, x1, -, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2]
[;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double, d012]
[), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double]
[-, x0, ), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;]
[), ;, final, double, d12, =, (, y2, -, y1, ), /, (, x2, -, x1, ), ;, final, double]
[;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1]
[/, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -]
[), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2]
[-, y1, ), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /]
[), /, (, x2, -, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2]
[;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double, c1]
[), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double]
[-, x1, ), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;]
[), ;, final, double, d012, =, (, d12, -, d01, ), /, (, x2, -, x0, ), ;, final, double]
[;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1]
[/, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012]
[), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *]
[-, d01, ), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0]
[), /, (, x2, -, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *]
[;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1]
[), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =]
[-, x0, ), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double]
[), ;, final, double, c1, =, d01, +, (, x1, -, x0, ), *, d012, ;, final, double, delta, =]
[;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1]
[+, (, x1, -, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1]
[;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1]
[*, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus]
[), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double]
[-, x0, ), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;]
[), *, d012, ;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double]
[;, final, double, delta, =, c1, *, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1]
[;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt]
[-, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /]
[*, c1, -, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1]
[-, 4, *, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /]
[;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt]
[*, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath]
[*, y1, *, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1]
[*, d012, ;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath]
[;, final, double, xplus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt]
[;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt]
[+, (, -, 2.0, *, y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final]
[;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt]
[/, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -]
[), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (]
[*, y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1]
[*, y1, ), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1]
[), /, (, c1, +, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (]
[;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt]
[), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, .]
[+, FastMath, ., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1]
[), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, .]
[., sqrt, (, delta, ), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /]
[), ), ;, final, double, xminus, =, x1, +, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath]
[;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double]
[+, (, -, 2.0, *, y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final]
[;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double]
[/, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,]
[), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0]
[*, y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence]
[*, y1, ), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence]
[), /, (, c1, -, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0]
[;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double]
[), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final]
[-, FastMath, ., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2]
[), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final]
[., sqrt, (, delta, ), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?]
[), ), ;, final, double, x, =, isSequence, (, x0, ,, xplus, ,, x2, ), ?, xplus, :, xminus, ;]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, .]
[,, xplus, ,, x2, ), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final]
[,, x2, ), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance]
[), ?, xplus, :, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath]
[:, xminus, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, )]
[), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy]
[;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, )]
[., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs]
[*, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx]
[,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, .]
[), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y]
[), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >]
[||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x]
[<=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =]
[., abs, (, x, -, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {]
[), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect]
[-, oldx, ), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }]
[), <=, tolerance, ||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect]
[||, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x]
[), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >]
[<=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0]
[., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1]
[), <=, functionValueAccuracy, ), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -]
[), {, return, x, ;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >]
[;, }, boolean, bisect, =, (, x, <, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2]
[;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x]
[||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0]
[||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), )]
[), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, )]
[&&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1]
[<, x1, &&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x]
[&&, (, x1, -, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1]
[), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, )]
[>, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, )]
[), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1]
[-, x0, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2]
[), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1]
[), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, )]
[*, (, x2, -, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95]
[), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, )]
[), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0]
[-, x0, ), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2]
[), ), ||, (, x, >, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0]
[||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0]
[), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?]
[&&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1]
[>, x1, &&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x]
[&&, (, x2, -, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1]
[), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?]
[>, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect]
[), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !]
[-, x1, ), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if]
[), >, 0.95, *, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !]
[), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?]
[*, (, x2, -, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {]
[), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?]
[), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1]
[-, x0, ), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x]
[), ), ||, (, x, ==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1]
[;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x]
[), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =]
[==, x1, ), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;]
[), ;, if, (, !, bisect, ), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =]
[), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :]
[), {, x0, =, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :]
[=, x, <, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2]
[;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1]
[?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1]
[<, x1, ?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x]
[?, x0, :, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1]
[:, x1, ;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2]
[;, y0, =, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1]
[=, x, <, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2]
[;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1]
[?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1]
[<, x1, ?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x]
[?, y0, :, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1]
[:, y1, ;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2]
[;, x2, =, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1]
[=, x, >, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1]
[;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx]
[?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1]
[>, x1, ?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x]
[?, x2, :, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1]
[:, x1, ;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y]
[;, y2, =, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx]
[=, x, >, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x]
[;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5]
[?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {]
[>, x1, ?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }]
[?, y2, :, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {]
[:, y1, ;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm]
[;, x1, =, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5]
[=, x, ;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (]
[;, y1, =, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +]
[=, y, ;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, )]
[;, oldx, =, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, ), ;, double]
[=, x, ;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =]
[;, }, else, {, double, xm, =, 0.5, *, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (]
[;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, .]
[*, (, x0, +, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum]
[;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, .]
[), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath]
[+, x2, ), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, )]
[), ;, double, ym, =, computeObjectiveValue, (, xm, ), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath]
[;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {]
[), ;, if, (, FastMath, ., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, )]
[), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym]
[==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0]
[+, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }]
[., signum, (, y0, ), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;]
[), +, FastMath, ., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;]
[==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0]
[., signum, (, ym, ), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {]
[), ==, 0.0, ), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;]
[), {, x2, =, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym]
[=, xm, ;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1]
[;, y2, =, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5]
[=, ym, ;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (]
[;, }, else, {, x0, =, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +]
[=, xm, ;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =]
[;, y0, =, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (]
[=, ym, ;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, )]
[;, }, x1, =, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx]
[=, 0.5, *, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, .]
[;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[*, (, x0, +, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;]
[;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[+, x2, ), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }]
[), ;, y1, =, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[=, computeObjectiveValue, (, x1, ), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[), ;, oldx, =, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[=, Double, ., POSITIVE_INFINITY, ;, }, }, }, }]
[;, }, }, }, }]
[., POSITIVE_INFINITY, ;, }, }, }, }]
