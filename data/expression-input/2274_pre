[commons, ., math3, ., util, ., FastMath, ;, public, class, SobolSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, BITS, =]
[public, class, SobolSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, BITS, =, 52, ;, private, static, final, double, SCALE, =]
[public, class, SobolSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, BITS, =, 52, ;, private, static, final, double, SCALE, =]
[RandomVectorGenerator, {, private, static, final, int, BITS, =, 52, ;, private, static, final, double, SCALE, =, FastMath, ., pow, (]
[private, static, final, int, BITS, =, 52, ;, private, static, final, double, SCALE, =, FastMath, ., pow, (, 2, ,]
[static, final, double, SCALE, =, FastMath, ., pow, (, 2, ,, BITS, ), ;, private, static, final, int, MAX_DIMENSION, =]
[(, 2, ,, BITS, ), ;, private, static, final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String, RESOURCE_NAME, =]
[final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String, RESOURCE_NAME, =, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;, private, static, final, String, FILE_CHARSET, =]
[=, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;, private, static, final, String, FILE_CHARSET, =, "US-ASCII", ;, private, final, int, dimension, ;, private, int, count, =]
[;, private, final, long, [, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (]
[;, private, final, long, [, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (]
[;, private, final, long, [, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (]
[final, long, [, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (, dimension, <]
[[, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (, dimension, <, 1, ||]
[[, ], x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (, dimension, <, 1, ||]
[x, ;, public, SobolSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, if, (, dimension, <, 1, ||, dimension, >]
[(, final, int, dimension, ), throws, OutOfRangeException, {, if, (, dimension, <, 1, ||, dimension, >, MAX_DIMENSION, ), {, throw]
[dimension, ), throws, OutOfRangeException, {, if, (, dimension, <, 1, ||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, dimension, <, 1, ||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,]
[{, if, (, dimension, <, 1, ||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,]
[>, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =]
[>, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =]
[OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (]
[,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (]
[,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (]
[), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==]
[InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==, null, ), {, throw]
[., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }]
[., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }]
[), ;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =]
[if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;]
[is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =]
[), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, []
[new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], []
[new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], []
[(, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +]
[}, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;]
[., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =]
[dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, []
[long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, try, {]
[dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (]
[long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }, catch, (, IOException, e, ), {, throw]
[catch, (, IOException, e, ), {, throw, new, MathInternalError, (, ), ;, }, catch, (, MathParseException, e, ), {, throw]
[), ;, }, catch, (, MathParseException, e, ), {, throw, new, MathInternalError, (, ), ;, }, finally, {, try, {]
[), ;, }, catch, (, MathParseException, e, ), {, throw, new, MathInternalError, (, ), ;, }, finally, {, try, {]
[public, SobolSequenceGenerator, (, final, int, dimension, ,, final, InputStream, is, ), throws, NotStrictlyPositiveException, ,, MathParseException, ,, IOException, {, if, (]
[public, SobolSequenceGenerator, (, final, int, dimension, ,, final, InputStream, is, ), throws, NotStrictlyPositiveException, ,, MathParseException, ,, IOException, {, if, (]
[(, final, int, dimension, ,, final, InputStream, is, ), throws, NotStrictlyPositiveException, ,, MathParseException, ,, IOException, {, if, (, dimension, <]
[,, final, InputStream, is, ), throws, NotStrictlyPositiveException, ,, MathParseException, ,, IOException, {, if, (, dimension, <, 1, ), {, throw]
[is, ), throws, NotStrictlyPositiveException, ,, MathParseException, ,, IOException, {, if, (, dimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[,, MathParseException, ,, IOException, {, if, (, dimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }]
[,, MathParseException, ,, IOException, {, if, (, dimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }]
[{, if, (, dimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =]
[(, dimension, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =]
[{, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, []
[NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], []
[NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], []
[dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +]
[}, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;]
[., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =]
[dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, []
[[, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =]
[], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (]
[], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (]
[], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (]
[x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <]
[[, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw]
[;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (]
[lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (, dimension, ,]
[initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,]
[}, }, private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =]
[private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;]
[private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;]
[initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=]
[final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;]
[final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;]
[throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[throws, MathParseException, ,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[,, IOException, {, for, (, int, i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, []
[for, (, int, i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], []
[i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =]
[i, =, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =]
[1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<]
[;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (]
[;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (]
[<=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -]
[[, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =]
[[, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =]
[i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (]
[-, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =]
[;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (]
[Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (]
[=, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,]
[;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim, =]
[final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim, =, -]
[new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim, =, -, 1, ;, try, {]
[new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim, =, -, 1, ;, try, {]
[), ), ;, int, dim, =, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =]
[=, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =, 2, ;, int, index, =]
[{, reader, ., readLine, (, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =]
[(, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (]
[(, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (]
[), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (, (]
[int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (, (, line, =]
[int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (, (, line, =]
[=, 1, ;, String, line, =, null, ;, while, (, (, line, =, reader, ., readLine, (, ), ), !=]
[null, ;, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =]
[(, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (]
[line, =, reader, ., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,]
[(, ), ), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {]
[), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =]
[), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =]
[{, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =, Integer, ., parseInt, (]
[{, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =, Integer, ., parseInt, (]
[" ", ), ;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (]
[" ", ), ;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (]
[" ", ), ;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (]
[;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=]
[{, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&]
[{, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=]
[nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =]
[nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =]
[;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (]
[;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (]
[{, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a, =]
[{, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a, =]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a, =, Integer, ., parseInt, (]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a, =, Integer, ., parseInt, (]
[int, a, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ], m, =]
[Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ], m, =, new, int, []
[Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ], m, =, new, int, []
[parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ], m, =, new, int, [, s, +]
[;, final, int, [, ], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i, =]
[int, [, ], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i, =, 1, ;]
[int, [, ], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i, =, 1, ;]
[], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i, =, 1, ;, i, <=]
[=, new, int, [, s, +, 1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;]
[=, new, int, [, s, +, 1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;]
[s, +, 1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[s, +, 1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, []
[for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i, ], =]
[=, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (]
[=, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (]
[++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }]
[{, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (]
[{, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (]
[i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,]
[., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (]
[., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (]
[(, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (, dim, >]
[}, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (, dim, >, dimension, ), {, return]
[}, if, (, dim, >, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw]
[dim, >, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (]
[dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (, line, ,]
[e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw]
[throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (]
[MathParseException, (, line, ,, lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,]
[lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }]
[lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }]
[e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, lineNumber, ++, ;, }, }, finally, {]
[e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, lineNumber, ++, ;, }, }, finally, {]
[,, lineNumber, ), ;, }, lineNumber, ++, ;, }, }, finally, {, reader, ., close, (, ), ;, }, return]
[(, final, int, d, ,, final, int, a, ,, final, int, [, ], m, ), {, final, int, s, =]
[(, final, int, d, ,, final, int, a, ,, final, int, [, ], m, ), {, final, int, s, =]
[(, final, int, d, ,, final, int, a, ,, final, int, [, ], m, ), {, final, int, s, =]
[,, final, int, a, ,, final, int, [, ], m, ), {, final, int, s, =, m, ., length, -]
[[, ], m, ), {, final, int, s, =, m, ., length, -, 1, ;, for, (, int, i, =]
[m, ), {, final, int, s, =, m, ., length, -, 1, ;, for, (, int, i, =, 1, ;]
[m, ), {, final, int, s, =, m, ., length, -, 1, ;, for, (, int, i, =, 1, ;]
[{, final, int, s, =, m, ., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=]
[int, s, =, m, ., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;]
[int, s, =, m, ., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;]
[., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[-, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, []
[for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ], []
[i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[=, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (]
[i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, )]
[i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, )]
[s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, []
[), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<]
[{, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<, (]
[{, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<, (]
[[, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<, (, BITS, -]
[long, ), m, [, i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =]
[long, ), m, [, i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =]
[m, [, i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +]
[i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;]
[i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;]
[), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=]
[(, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;]
[(, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;]
[), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[}, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, []
[int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], []
[s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =]
[1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, []
[<=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], []
[<=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], []
[;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -]
[), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^]
[{, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (]
[{, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (]
[{, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (]
[{, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (]
[[, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, []
[[, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], []
[[, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], []
[], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -]
[d, ], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -, s, ], >, >]
[(, direction, [, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =]
[[, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;]
[[, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;]
[], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=]
[], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=]
[i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -]
[s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;]
[s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;]
[s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {]
[s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {]
[s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {]
[;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, []
[int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], []
[1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=]
[1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=]
[;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (]
[;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (]
[k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (]
[k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (]
[-, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >]
[1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (]
[1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (]
[1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (]
[k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s, -]
[), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s, -, 1, -]
[d, ], [, i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &]
[i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *]
[i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *]
[i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *]
[^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, []
[a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, [, d, ], []
[a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, [, d, ], []
[>, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, [, d, ], [, i, -]
[k, ], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =]
[}, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, []
[[, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, [, dimension, ], ;, if, (]
[[, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, [, dimension, ], ;, if, (]
[nextVector, (, ), {, final, double, [, ], v, =, new, double, [, dimension, ], ;, if, (, count, ==]
[{, final, double, [, ], v, =, new, double, [, dimension, ], ;, if, (, count, ==, 0, ), {]
[{, final, double, [, ], v, =, new, double, [, dimension, ], ;, if, (, count, ==, 0, ), {]
[], v, =, new, double, [, dimension, ], ;, if, (, count, ==, 0, ), {, count, ++, ;, return]
[dimension, ], ;, if, (, count, ==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =]
[count, ==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =]
[count, ==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =]
[0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -]
[++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (]
[++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (]
[;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (]
[;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (]
[v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (, value, &]
[int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (, value, &, 1, ), ==]
[1, ;, int, value, =, count, -, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {]
[int, value, =, count, -, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=]
[=, count, -, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=, 1, ;]
[=, count, -, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=, 1, ;]
[&, 1, ), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =]
[), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;]
[), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;]
[1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <]
[{, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[{, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, []
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, []
[0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^]
[0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^]
[0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^]
[i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, []
[;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], []
[), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;]
[), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;]
[x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, []
[], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =]
[], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =]
[[, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, )]
[[, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, )]
[], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, ), x, []
[[, i, ], [, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /]
[[, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }]
[[, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }]
[v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;, return]
[;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (]
[;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (]
[v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (, index, ==]
[public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (, index, ==, 0, ), {]
[public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (, index, ==, 0, ), {]
[skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (, index, ==, 0, ), {, Arrays, ., fill, (]
[final, int, index, ), throws, NotPositiveException, {, if, (, index, ==, 0, ), {, Arrays, ., fill, (, x, ,]
[==, 0, ), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =]
[==, 0, ), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =]
[), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -]
[x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =]
[x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =]
[0, ), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^]
[), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^, (]
[), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^, (]
[else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^, (, i, >, >]
[1, ;, final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =]
[final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;]
[final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;]
[grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;, j, <]
[i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;]
[), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =]
[0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =]
[j, <, dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;]
[j, <, dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;]
[dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=]
[j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS, ;]
[j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS, ;]
[;, for, (, int, k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =]
[;, for, (, int, k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =]
[int, k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >]
[k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (]
[k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (]
[1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -]
[;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (]
[;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (]
[++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (, shift, ==]
[(, k, -, 1, ), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =]
[(, k, -, 1, ), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =]
[-, 1, ), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &]
[), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;]
[if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=]
[if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=]
[shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *]
[shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *]
[shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *]
[0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, []
[break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, [, j, ], []
[long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }]
[long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }]
[=, shift, &, 1, ;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, []
[1, ;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =]
[ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }]
[direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count, =]
[], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return]
[;, }, }, count, =, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return]
