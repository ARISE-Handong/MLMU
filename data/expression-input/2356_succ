[;, private, final, Map, <, Node, ,, Node, >, callNodeToParentMap, =, new, HashMap, <, Node, ,, Node, >, (, )]
[;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >, propertyMap, =, new, HashMap]
[;, private, final, UndiGraph, <, Property, ,, PropertyAffinity, >, affinityGraph, ;, private, final, Set, <, String, >, externedNames, =, new]
[;, private, final, Set, <, String, >, quotedNames, =, new, HashSet, <, String, >, (, ), ;, private, static, final]
[), ;, private, final, Set, <, String, >, quotedNames, =, new, HashSet, <, String, >, (, ), ;, private, static]
[., asList, (, "prototype", ), ), ;, private, final, Set, <, String, >, quotedNames, =, new, HashSet, <, String, >]
[), ), ;, private, final, Set, <, String, >, quotedNames, =, new, HashSet, <, String, >, (, ), ;, private]
[;, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Property, >, (, ), {, @, Override]
[;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad "]
[), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2]
[!=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1]
[., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if]
[), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2]
[., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore]
[;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1]
[-, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2]
[., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {]
[;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1]
[., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore]
[), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2]
[!=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName]
[., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1]
[), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2]
[., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo]
[;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static, final, String]
[-, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }]
[., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;]
[;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static, final, String]
[., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static]
[;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (]
[., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final]
[., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;]
[), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error]
[., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType]
[;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", )]
[;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier", )]
[., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType]
[,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG"]
[), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier"]
[+, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - "]
[+, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME]
[+, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad "]
[+, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME]
[+, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - "]
[), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier"]
[;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,, generatePseudoNames]
[., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean]
[,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames]
[), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,]
[+, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,]
[+, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (]
[+, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {]
[+, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (]
[+, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,]
[), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,]
[,, affinity, ,, generatePseudoNames, ,, null, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean]
[,, generatePseudoNames, ,, null, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,]
[,, null, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap]
[,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {]
[), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (]
[,, affinity, ,, generatePseudoNames, ,, prevUsedPropertyMap, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean]
[,, generatePseudoNames, ,, prevUsedPropertyMap, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,]
[,, prevUsedPropertyMap, ,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap]
[,, null, ), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @]
[), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char]
[=, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters]
[., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters]
[;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if]
[=, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {]
[., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity]
[;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, .]
[=, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, .]
[., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (]
[=, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else]
[., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;]
[;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {, this]
[), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {, this, ., affinityGraph, =, null]
[=, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {, this, ., affinityGraph, =, null, ;, }, }, @, Override]
[., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {, this, ., affinityGraph, =, null, ;, }, }]
[;, }, else, {, this, ., affinityGraph, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs]
[., createWithoutAnnotations, (, ), ;, }, else, {, this, ., affinityGraph, =, null, ;, }, }, @, Override, public, void]
[=, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, .]
[., affinityGraph, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames]
[., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (]
[,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >]
[;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames]
[., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new]
[,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >]
[,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null]
[), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=]
[+, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames]
[., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames]
[), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=]
[., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;]
[;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap]
[., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {]
[), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,]
[;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }]
[., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values]
[), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;]
[), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", )]
[!=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (]
[), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", )]
[;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, ), ;]
[,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=]
[), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, )]
[., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=, null, )]
[;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new]
[., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, ), ;, }, Set, <]
[), ;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =]
[), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR]
[!=, null, ), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >]
[), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR]
[;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll]
[;, propsByFreq, ., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean]
[), ;, propsByFreq, ., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;]
[;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, )]
[., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =]
[), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename]
[., values, (, ), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (]
[;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString]
[,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, .]
[;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p]
[), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, )]
[;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName]
[., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null]
[;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, .]
[., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions]
[), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[!=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, .]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, .]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (]
[;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p, ., newName, ., equals]
[., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName]
[), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p, ., newName, .]
[., equals, (, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =]
[), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p, ., newName]
[., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p]
[;, changed, =, changed, ||, !, p, ., newName, ., equals, (, oldName, ), ;, }, }, for, (, Map]
[., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p, ., newName, ., equals, (, oldName]
[), ;, changed, =, changed, ||, !, p, ., newName, ., equals, (, oldName, ), ;, }, }, for, (]
[., newName, ), ;, changed, =, changed, ||, !, p, ., newName, ., equals, (, oldName, ), ;, }, }]
[=, changed, ||, !, p, ., newName, ., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry]
[;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (, )]
[||, !, p, ., newName, ., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry, <, Node]
[;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (, )]
[;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (, )]
[., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :]
[., newName, ., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >]
[), ;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (]
[), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =, nodeEntry, ., getKey, (, ), .]
[., entrySet, (, ), ), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =, nodeEntry, .]
[;, Node, firstArg, =, nodeEntry, ., getKey, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, StringBuilder, sb]
[., getValue, (, ), ;, Node, firstArg, =, nodeEntry, ., getKey, (, ), ., getFirstChild, (, ), ., getNext, (]
[;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :, firstArg, ., getString, (, ), .]
[., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :, firstArg, .]
[., getFirstChild, (, ), ., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String]
[., getKey, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, )]
[;, for, (, String, oldName, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, Property, p]
[), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null]
[., split, (, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;]
[., getString, (, ), ., split, (, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (, oldName, )]
[), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=]
[;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState]
[., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null]
[), ;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, .]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =, p, .]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[!=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, .]
[&&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, )]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =, p, .]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =, p, .]
[;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length]
[., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =, p, ., newName, ;, }]
[), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, .]
[., equals, (, p, ., oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =]
[), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb]
[., oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if]
[=, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, )]
[;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >, 0, ), {]
[., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >, 0]
[=, oldName, ;, }, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, '.']
[;, }, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, '.', ), ;]
[), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }, parent, .]
[>, 0, ), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }]
[., length, (, ), >, 0, ), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (]
[), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }, parent, .]
[;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,]
[., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry]
[), ;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, )]
[;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (]
[., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string]
[), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString]
[;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, .]
[., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (, ), ), )]
[,, IR, ., string, (, sb, ., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (]
[., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (, ), ), ), ;, changed, =, true]
[), ;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler]
[., string, (, sb, ., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (, changed, )]
[), ), ;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange]
[=, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, .]
[), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private]
[;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePropertyNames, (, Set, <, String, >]
[., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePropertyNames, (]
[;, }, private, void, reusePropertyNames, (, Set, <, String, >, reservedNames, ,, Collection, <, Property, >, allProps, ), {, for]
[., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePropertyNames, (, Set, <, String, >, reservedNames, ,, Collection]
[), ;, }, private, void, reusePropertyNames, (, Set, <, String, >, reservedNames, ,, Collection, <, Property, >, allProps, ), {]
[., NORMALIZED_OBFUSCATED, ), ;, }, private, void, reusePropertyNames, (, Set, <, String, >, reservedNames, ,, Collection, <, Property, >, allProps]
[), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName]
[;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), )]
[., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (]
[), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, )]
[., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (]
[), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName]
[&&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop]
[&&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop]
[), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName]
[!=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName]
[), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName]
[), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }]
[., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (]
[), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }]
[=, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for]
[., newName, =, prevName, ;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, )]
[;, reservedNames, ., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property]
[;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property, p, :, propertyMap, ., values, (, )]
[., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property, p, :]
[), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property, p, :, propertyMap, ., values, (]
[), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =, affinityGraph, ., getUndirectedGraphNode, (, p, ), ;, int, affinityScore, =]
[., values, (, ), ), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =, affinityGraph, ., getUndirectedGraphNode, (, p, )]
[;, int, affinityScore, =, 0, ;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =, node]
[., getUndirectedGraphNode, (, p, ), ;, int, affinityScore, =, 0, ;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity]
[), ;, int, affinityScore, =, 0, ;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =]
[;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =, node, ., getNeighborEdgesIterator, (, ), ;]
[;, edgeIterator, ., hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next]
[., getNeighborEdgesIterator, (, ), ;, edgeIterator, ., hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge]
[;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge]
[., hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, )]
[;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?]
[., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, .]
[+=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?, edge, .]
[;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set, <]
[+, (, node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), .]
[., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (]
[., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (]
[;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set, <]
[), ;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set]
[?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue]
[==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge]
[?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue]
[., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA]
[:, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }, node, ., getValue, (, )]
[., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }, node, ., getValue]
[., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;]
[., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, )]
[), ;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set]
[., numOccurrences, ), ;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames]
[., getValue, (, ), ., numOccurrences, ), ;, }, node, ., getValue, (, ), ., affinityScore, =, affinityScore, ;, }]
[., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }, node, ., getValue, (, ), ., affinityScore]
[=, affinityScore, ;, }, }, private, void, generateNames, (, Set, <, Property, >, props, ,, Set, <, String, >, reservedNames]
[., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set, <, Property, >, props, ,, Set, <, String]
[., getValue, (, ), ., affinityScore, =, affinityScore, ;, }, }, private, void, generateNames, (, Set, <, Property, >, props]
[;, }, }, private, void, generateNames, (, Set, <, Property, >, props, ,, Set, <, String, >, reservedNames, ), {]
[;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$", +]
[,, "", ,, reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p]
[,, reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName]
[), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$"]
[), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$", +, p, ., oldName, +, "$", ;, }]
[), {, p, ., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p]
[=, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, )]
[., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==]
[;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen, ., generateNextName]
[+, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen]
[+, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p]
[+, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen]
[., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName]
[;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen, ., generateNextName]
[), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, .]
[==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (]
[., newName, ==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, .]
[), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, .]
[=, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, .]
[., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;]
[;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +]
[., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (]
[;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap]
[., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +, p, .]
[), ;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +, p, ., newName, ), ;, }, }, VariableMap]
[., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +, p, ., newName, ), ;, }]
[;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, .]
[., addToDebugLog, (, p, ., oldName, +, " => ", +, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap, (, )]
[), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap]
[+, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String]
[+, " => ", +, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String]
[., oldName, +, " => ", +, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder]
[+, p, ., newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String]
[), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap]
[., newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map]
[;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=, null]
[., builder, (, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, p]
[), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,, p]
[., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p]
[), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap]
[!=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return]
[., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }]
[), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap]
[;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback]
[., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, .]
[,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }]
[., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), )]
[), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, class, ProcessExterns, extends]
[., newName, ), ;, }, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, class]
[;, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., build, (, ), ), ;, }, private, class, ProcessExterns, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal]
[), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), .]
[:, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (]
[., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, .]
[;, if, (, dest, ., isString, (, ), ), {, externedNames, ., add, (, dest, ., getString, (, ), )]
[., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, externedNames, ., add, (, dest, .]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, externedNames, .]
[), {, externedNames, ., add, (, dest, ., getString, (, ), ), ;, }, break, ;, case, Token, ., OBJECTLIT]
[., isString, (, ), ), {, externedNames, ., add, (, dest, ., getString, (, ), ), ;, }, break, ;]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[., add, (, dest, ., getString, (, ), ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (]
[), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, )]
[., getString, (, ), ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n]
[:, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, .]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, .]
[;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), )]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (]
[;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), )]
[=, child, ., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }]
[), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, }, private]
[., getNext, (, ), ), {, externedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;]
[;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, Set, <, Property, >]
[., add, (, child, ., getString, (, ), ), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends]
[), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, Set, <, Property]
[., getString, (, ), ), ;, }, break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, implements, ScopedCallback, {]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n]
[), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getFirstChild, (, ), .]
[:, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, propNode, ., isString, (]
[., GETPROP, :, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, propNode, .]
[;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case, Token]
[., getNext, (, ), ;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (, propNode, ), ;, }]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (]
[), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[., isString, (, ), ), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, )]
[:, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, )]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[=, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (]
[), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {]
[., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, )]
[), {, maybeMarkCandidate, (, key, ), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), )]
[), {, maybeMarkCandidate, (, key, ), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), )]
[., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {, quotedNames, ., add, (, key, .]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[), ;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;]
[;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if]
[., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node]
[), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;]
[., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, .]
[:, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&, child, ., isString, (]
[., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&, child, .]
[;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, .]
[., getLastChild, (, ), ;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {, quotedNames, .]
[), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL]
[&&, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }]
[!=, null, &&, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), )]
[&&, child, ., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }]
[), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL]
[., isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;]
[;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (]
[., add, (, child, ., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL, :, Node, fnName]
[), ;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if]
[., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild]
[:, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, .]
[., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&]
[;, if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), )]
[., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString]
[), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break]
[&&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent]
[., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put]
[), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break]
[., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;]
[), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }]
[., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,]
[;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, .]
[., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token]
[,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if]
[), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil]
[;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String]
[,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[:, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), .]
[., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =, n, ., getFirstChild, (]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals]
[., isFunctionDeclaration, (, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, .]
[;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (, parent, ., isExprResult, (, ), ), {]
[., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (, parent, ., isExprResult]
[., getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if]
[), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else, {]
[., equals, (, name, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (]
[), ), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else]
[), {, parent, ., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (, n, ), ;, }, compiler]
[., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (, n]
[;, }, else, {, parent, ., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }]
[., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME]
[., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, .]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&]
[;, }, }, else, if, (, parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {]
[&&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), ), ), {, Node, varNode, =, parent, ., getParent, (]
[., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), ), ), {, Node, varNode, =]
[), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {]
[., equals, (, parent, ., getString, (, ), ), ), {, Node, varNode, =, parent, ., getParent, (, ), ;]
[), ), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), )]
[., getString, (, ), ), ), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, .]
[;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !]
[., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (, parent, )]
[), {, varNode, ., removeChild, (, parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode]
[., isVar, (, ), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !, varNode, ., hasChildren, (]
[;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode, ., detachFromParent, (, ), ;, }, compiler, .]
[., removeChild, (, parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode, ., detachFromParent, (]
[), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode, ., detachFromParent, (, ), ;, }, compiler]
[), {, varNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, }]
[), {, varNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, }]
[., hasChildren, (, ), ), {, varNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n]
[., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, }, }, private, void]
[;, }, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =, n, .]
[., reportCodeChange, (, ), ;, }, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ), {, String]
[;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence]
[., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (]
[), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates, (]
[), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates, (]
[., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence, (, name, ), ;, }]
[), ), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates]
[;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node]
[., add, (, n, ), ;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,]
[), ;, countPropertyOccurrence, (, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {]
[;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node, firstArg, =, callNode, ., getFirstChild]
[), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node, firstArg, =, callNode, .]
[;, if, (, !, firstArg, ., isString, (, ), ), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;]
[., getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {, t, ., report, (, callNode]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {, t]
[), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :, firstArg]
[), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :, firstArg]
[., isString, (, ), ), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (]
[;, return, ;, }, for, (, String, name, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), )]
[., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :, firstArg, ., getString, (]
[,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :, firstArg, ., getString, (, ), ., split, (]
[), ;, return, ;, }, for, (, String, name, :, firstArg, ., getString, (, ), ., split, (, "[.]", )]
[), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, ., report, (, callNode, ,, BAD_ARG]
[., split, (, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, .]
[., getString, (, ), ., split, (, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, )]
[), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, ., report, (, callNode, ,]
[), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames]
[), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames]
[., isJSIdentifier, (, name, ), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;]
[), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !]
[;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {, countPropertyOccurrence, (, name, ), ;]
[., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (]
[,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {]
[,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {, countPropertyOccurrence, (]
[), ;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {, countPropertyOccurrence, (, name, )]
[), {, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop]
[), {, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop]
[., contains, (, name, ), ), {, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String]
[), ), {, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property]
[;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name]
[), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (]
[., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, )]
[), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put]
[), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if]
[==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, )]
[), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if]
[=, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=]
[;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode]
[), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, .]
[;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences]
[., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop]
[,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }]
[), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, .]
[), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=]
[!=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (]
[), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=]
[;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (, prop]
[., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {]
[), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (]
[;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }, @, Override, public]
[++, ;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }, @, Override]
[., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }]
[), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[!=, null, ), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal]
[), {, currentHighAffinityProperties, ., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (]
[., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope]
[), {, currentHighAffinityProperties, =, Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t]
[&&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =, Sets, .]
[&&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =, Sets, .]
[., inGlobalScope, (, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {]
[), {, currentHighAffinityProperties, =, Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t]
[., isGlobal, (, ), ), {, currentHighAffinityProperties, =, Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void]
[., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =, Sets, ., newHashSet, (, ), ;, }, }]
[., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =, Sets, ., newHashSet, (]
[=, Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==, null, ), {]
[., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, t, ., getScope, (, ), .]
[==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, t, ., getScope, (]
[), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&, t, ., getScope, (, ), .]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[&&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, for, (, Property, p1]
[&&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, for, (, Property, p1]
[., inGlobalScope, (, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[., isGlobal, (, ), ), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties]
[., getParent, (, ), ., isGlobal, (, ), ), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (]
[., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, for, (, Property, p1, :, currentHighAffinityProperties]
[), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (, p1, ., oldName, ., compareTo, (, p2, .]
[), {, if, (, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), <, 0, ), {, GraphEdge, <]
[), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if]
[<, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, )]
[., compareTo, (, p2, ., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph]
[., oldName, ., compareTo, (, p2, ., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge]
[), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2]
[., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1]
[), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if]
[;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,]
[., getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1]
[,, p2, ), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (]
[), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, )]
[), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {]
[==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }]
[), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {]
[;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }, }, }, currentHighAffinityProperties, =]
[., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {, edge, ., getValue]
[,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {, edge, ., getValue, (, ), ., increase]
[,, p2, ), ;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }, }]
[), ,, p2, ), ;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }]
[), ;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }, }, }, currentHighAffinityProperties]
[;, }, }, }, }, currentHighAffinityProperties, =, null, ;, }, }, }, private, class, Property, {, final, String, oldName, ;]
[., increase, (, ), ;, }, }, }, }, currentHighAffinityProperties, =, null, ;, }, }, }, private, class, Property, {]
[., getValue, (, ), ., increase, (, ), ;, }, }, }, }, currentHighAffinityProperties, =, null, ;, }, }, }]
[=, null, ;, }, }, }, private, class, Property, {, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;]
[;, }, }, }, private, class, Property, {, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, int, affinityScore]
[;, Property, (, String, name, ), {, this, ., oldName, =, name, ;, }, }, private, class, PropertyAffinity, {, private]
[=, name, ;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (, int, affinity]
[., oldName, =, name, ;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (]
[;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (, int, affinity, ), {]
[;, private, PropertyAffinity, (, int, affinity, ), {, this, ., affinity, =, affinity, ;, }, private, void, increase, (, )]
[=, affinity, ;, }, private, void, increase, (, ), {, affinity, ++, ;, }, }, }]
[., affinity, =, affinity, ;, }, private, void, increase, (, ), {, affinity, ++, ;, }, }, }]
[;, }, private, void, increase, (, ), {, affinity, ++, ;, }, }, }]
[;, }, }, }]
[++, ;, }, }, }]
