[., plot, ;, import, java, ., awt, ., geom, ., Point2D, ;, public, class, CrosshairState, {, private, boolean, calculateDistanceInDataSpace, =]
[;, private, int, domainAxisIndex, ;, private, int, rangeAxisIndex, ;, private, double, distance, ;, public, CrosshairState, (, ), {, this, (]
[distance, ;, public, CrosshairState, (, ), {, this, (, false, ), ;, }, public, CrosshairState, (, boolean, calculateDistanceInDataSpace, ), {]
[distance, ;, public, CrosshairState, (, ), {, this, (, false, ), ;, }, public, CrosshairState, (, boolean, calculateDistanceInDataSpace, ), {]
[(, ), {, this, (, false, ), ;, }, public, CrosshairState, (, boolean, calculateDistanceInDataSpace, ), {, this, ., calculateDistanceInDataSpace, =]
[CrosshairState, (, boolean, calculateDistanceInDataSpace, ), {, this, ., calculateDistanceInDataSpace, =, calculateDistanceInDataSpace, ;, }, public, double, getCrosshairDistance, (, ), {, return]
[CrosshairState, (, boolean, calculateDistanceInDataSpace, ), {, this, ., calculateDistanceInDataSpace, =, calculateDistanceInDataSpace, ;, }, public, double, getCrosshairDistance, (, ), {, return]
[public, double, getCrosshairDistance, (, ), {, return, this, ., distance, ;, }, public, void, setCrosshairDistance, (, double, distance, ), {]
[public, double, getCrosshairDistance, (, ), {, return, this, ., distance, ;, }, public, void, setCrosshairDistance, (, double, distance, ), {]
[), {, return, this, ., distance, ;, }, public, void, setCrosshairDistance, (, double, distance, ), {, this, ., distance, =]
[public, void, updateCrosshairPoint, (, double, x, ,, double, y, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {]
[updateCrosshairPoint, (, double, x, ,, double, y, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (]
[double, x, ,, double, y, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,]
[,, double, y, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,, y, ,]
[y, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,, y, ,, 0, ,]
[double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,, y, ,, 0, ,, 0, ,]
[,, double, transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,, y, ,, 0, ,, 0, ,, transX, ,]
[transY, ,, PlotOrientation, orientation, ), {, updateCrosshairPoint, (, x, ,, y, ,, 0, ,, 0, ,, transX, ,, transY, ,]
[y, ,, int, domainAxisIndex, ,, int, rangeAxisIndex, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, if, (]
[y, ,, int, domainAxisIndex, ,, int, rangeAxisIndex, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, if, (]
[y, ,, int, domainAxisIndex, ,, int, rangeAxisIndex, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, if, (]
[,, int, rangeAxisIndex, ,, double, transX, ,, double, transY, ,, PlotOrientation, orientation, ), {, if, (, this, ., anchor, !=]
[,, double, transY, ,, PlotOrientation, orientation, ), {, if, (, this, ., anchor, !=, null, ), {, double, d, =]
[PlotOrientation, orientation, ), {, if, (, this, ., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (]
[PlotOrientation, orientation, ), {, if, (, this, ., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (]
[(, this, ., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {]
[., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =]
[., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =]
[., anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =]
[anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (]
[anchor, !=, null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (]
[null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -]
[null, ), {, double, d, =, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -]
[=, 0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -, this, ., anchorX, ), *]
[0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -, this, ., anchorX, ), *, (]
[0.0, ;, if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -, this, ., anchorX, ), *, (]
[if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -, this, ., anchorX, ), *, (, x, -]
[if, (, this, ., calculateDistanceInDataSpace, ), {, d, =, (, x, -, this, ., anchorX, ), *, (, x, -]
[), {, d, =, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +]
[), {, d, =, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +]
[{, d, =, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +, (]
[{, d, =, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +, (]
[=, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +, (, y, -]
[=, (, x, -, this, ., anchorX, ), *, (, x, -, this, ., anchorX, ), +, (, y, -]
[., anchorX, ), *, (, x, -, this, ., anchorX, ), +, (, y, -, this, ., anchorY, ), *]
[anchorX, ), *, (, x, -, this, ., anchorX, ), +, (, y, -, this, ., anchorY, ), *, (]
[anchorX, ), *, (, x, -, this, ., anchorX, ), +, (, y, -, this, ., anchorY, ), *, (]
[*, (, x, -, this, ., anchorX, ), +, (, y, -, this, ., anchorY, ), *, (, y, -]
[*, (, x, -, this, ., anchorX, ), +, (, y, -, this, ., anchorY, ), *, (, y, -]
[-, this, ., anchorY, ), *, (, y, -, this, ., anchorY, ), ;, }, else, {, double, xx, =]
[-, this, ., anchorY, ), *, (, y, -, this, ., anchorY, ), ;, }, else, {, double, xx, =]
[-, this, ., anchorY, ), *, (, y, -, this, ., anchorY, ), ;, }, else, {, double, xx, =]
[anchorY, ), ;, }, else, {, double, xx, =, this, ., anchor, ., getX, (, ), ;, double, yy, =]
[anchorY, ), ;, }, else, {, double, xx, =, this, ., anchor, ., getX, (, ), ;, double, yy, =]
[anchorY, ), ;, }, else, {, double, xx, =, this, ., anchor, ., getX, (, ), ;, double, yy, =]
[., anchor, ., getX, (, ), ;, double, yy, =, this, ., anchor, ., getY, (, ), ;, if, (]
[., anchor, ., getX, (, ), ;, double, yy, =, this, ., anchor, ., getY, (, ), ;, if, (]
[., getX, (, ), ;, double, yy, =, this, ., anchor, ., getY, (, ), ;, if, (, orientation, ==]
[., getX, (, ), ;, double, yy, =, this, ., anchor, ., getY, (, ), ;, if, (, orientation, ==]
[this, ., anchor, ., getY, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =]
[anchor, ., getY, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =, yy, ;]
[getY, (, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =]
[), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;]
[if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =]
[==, PlotOrientation, ., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }]
[., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =]
[., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =]
[., HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =]
[HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (]
[HORIZONTAL, ), {, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (]
[{, double, temp, =, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (, transX, -]
[=, yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *]
[yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (]
[yy, ;, yy, =, xx, ;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (]
[yy, =, xx, ;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -]
[;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +]
[;, xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +]
[xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (]
[xx, =, temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (]
[temp, ;, }, d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (, transY, -]
[d, =, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (, transY, -, yy, ), *]
[=, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (, transY, -, yy, ), *, (]
[=, (, transX, -, xx, ), *, (, transX, -, xx, ), +, (, transY, -, yy, ), *, (]
[transX, -, xx, ), *, (, transX, -, xx, ), +, (, transY, -, yy, ), *, (, transY, -]
[transX, -, xx, ), +, (, transY, -, yy, ), *, (, transY, -, yy, ), ;, }, if, (]
[transX, -, xx, ), +, (, transY, -, yy, ), *, (, transY, -, yy, ), ;, }, if, (]
[xx, ), +, (, transY, -, yy, ), *, (, transY, -, yy, ), ;, }, if, (, d, <]
[xx, ), +, (, transY, -, yy, ), *, (, transY, -, yy, ), ;, }, if, (, d, <]
[-, yy, ), *, (, transY, -, yy, ), ;, }, if, (, d, <, this, ., distance, ), {]
[-, yy, ), *, (, transY, -, yy, ), ;, }, if, (, d, <, this, ., distance, ), {]
[(, transY, -, yy, ), ;, }, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =]
[-, yy, ), ;, }, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, x, ;]
[-, yy, ), ;, }, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, x, ;]
[}, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =]
[(, d, <, this, ., distance, ), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =, y, ;]
[(, d, <, this, ., distance, ), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =, y, ;]
[., distance, ), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =]
[), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;]
[), {, this, ., crosshairX, =, x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;]
[crosshairX, =, x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;, this, ., rangeAxisIndex, =]
[x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;]
[x, ;, this, ., crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;]
[crosshairY, =, y, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;, this, ., distance, =]
[=, rangeAxisIndex, ;, this, ., distance, =, d, ;, }, }, }, public, void, updateCrosshairX, (, double, candidateX, ), {]
[;, this, ., distance, =, d, ;, }, }, }, public, void, updateCrosshairX, (, double, candidateX, ), {, updateCrosshairX, (]
[., distance, =, d, ;, }, }, }, public, void, updateCrosshairX, (, double, candidateX, ), {, updateCrosshairX, (, candidateX, ,]
[candidateX, ,, 0, ), ;, }, public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =]
[candidateX, ,, 0, ), ;, }, public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =]
[;, }, public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (]
[;, }, public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (]
[public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateX, -]
[public, void, updateCrosshairX, (, double, candidateX, ,, int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateX, -]
[int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (]
[int, domainAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (]
[), {, double, d, =, Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (, d, <]
[), {, double, d, =, Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (, d, <]
[Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (, d, <, this, ., distance, ), {]
[Math, ., abs, (, candidateX, -, this, ., anchorX, ), ;, if, (, d, <, this, ., distance, ), {]
[candidateX, -, this, ., anchorX, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =]
[this, ., anchorX, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, candidateX, ;]
[this, ., anchorX, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, candidateX, ;]
[;, if, (, d, <, this, ., distance, ), {, this, ., crosshairX, =, candidateX, ;, this, ., domainAxisIndex, =]
[(, d, <, this, ., distance, ), {, this, ., crosshairX, =, candidateX, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;]
[(, d, <, this, ., distance, ), {, this, ., crosshairX, =, candidateX, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;]
[., distance, ), {, this, ., crosshairX, =, candidateX, ;, this, ., domainAxisIndex, =, domainAxisIndex, ;, this, ., distance, =]
[domainAxisIndex, =, domainAxisIndex, ;, this, ., distance, =, d, ;, }, }, public, void, updateCrosshairY, (, double, candidateY, ), {]
[domainAxisIndex, ;, this, ., distance, =, d, ;, }, }, public, void, updateCrosshairY, (, double, candidateY, ), {, updateCrosshairY, (]
[this, ., distance, =, d, ;, }, }, public, void, updateCrosshairY, (, double, candidateY, ), {, updateCrosshairY, (, candidateY, ,]
[candidateY, ,, 0, ), ;, }, public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =]
[candidateY, ,, 0, ), ;, }, public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =]
[;, }, public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (]
[;, }, public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (]
[public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateY, -]
[public, void, updateCrosshairY, (, double, candidateY, ,, int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateY, -]
[int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (]
[int, rangeAxisIndex, ), {, double, d, =, Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (]
[), {, double, d, =, Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (, d, <]
[), {, double, d, =, Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (, d, <]
[Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (, d, <, this, ., distance, ), {]
[Math, ., abs, (, candidateY, -, this, ., anchorY, ), ;, if, (, d, <, this, ., distance, ), {]
[candidateY, -, this, ., anchorY, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairY, =]
[this, ., anchorY, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairY, =, candidateY, ;]
[this, ., anchorY, ), ;, if, (, d, <, this, ., distance, ), {, this, ., crosshairY, =, candidateY, ;]
[;, if, (, d, <, this, ., distance, ), {, this, ., crosshairY, =, candidateY, ;, this, ., rangeAxisIndex, =]
[(, d, <, this, ., distance, ), {, this, ., crosshairY, =, candidateY, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;]
[(, d, <, this, ., distance, ), {, this, ., crosshairY, =, candidateY, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;]
[., distance, ), {, this, ., crosshairY, =, candidateY, ;, this, ., rangeAxisIndex, =, rangeAxisIndex, ;, this, ., distance, =]
[., rangeAxisIndex, =, rangeAxisIndex, ;, this, ., distance, =, d, ;, }, }, public, Point2D, getAnchor, (, ), {, return]
[., rangeAxisIndex, =, rangeAxisIndex, ;, this, ., distance, =, d, ;, }, }, public, Point2D, getAnchor, (, ), {, return]
[public, Point2D, getAnchor, (, ), {, return, this, ., anchor, ;, }, public, void, setAnchor, (, Point2D, anchor, ), {]
[public, Point2D, getAnchor, (, ), {, return, this, ., anchor, ;, }, public, void, setAnchor, (, Point2D, anchor, ), {]
[), {, return, this, ., anchor, ;, }, public, void, setAnchor, (, Point2D, anchor, ), {, this, ., anchor, =]
[setAnchor, (, Point2D, anchor, ), {, this, ., anchor, =, anchor, ;, }, public, double, getAnchorX, (, ), {, return]
[setAnchor, (, Point2D, anchor, ), {, this, ., anchor, =, anchor, ;, }, public, double, getAnchorX, (, ), {, return]
[public, double, getAnchorX, (, ), {, return, this, ., anchorX, ;, }, public, void, setAnchorX, (, double, x, ), {]
[public, double, getAnchorX, (, ), {, return, this, ., anchorX, ;, }, public, void, setAnchorX, (, double, x, ), {]
[), {, return, this, ., anchorX, ;, }, public, void, setAnchorX, (, double, x, ), {, this, ., anchorX, =]
[setAnchorX, (, double, x, ), {, this, ., anchorX, =, x, ;, }, public, double, getAnchorY, (, ), {, return]
[setAnchorX, (, double, x, ), {, this, ., anchorX, =, x, ;, }, public, double, getAnchorY, (, ), {, return]
[public, double, getAnchorY, (, ), {, return, this, ., anchorY, ;, }, public, void, setAnchorY, (, double, y, ), {]
[public, double, getAnchorY, (, ), {, return, this, ., anchorY, ;, }, public, void, setAnchorY, (, double, y, ), {]
[), {, return, this, ., anchorY, ;, }, public, void, setAnchorY, (, double, y, ), {, this, ., anchorY, =]
[setAnchorY, (, double, y, ), {, this, ., anchorY, =, y, ;, }, public, double, getCrosshairX, (, ), {, return]
[setAnchorY, (, double, y, ), {, this, ., anchorY, =, y, ;, }, public, double, getCrosshairX, (, ), {, return]
[public, double, getCrosshairX, (, ), {, return, this, ., crosshairX, ;, }, public, void, setCrosshairX, (, double, x, ), {]
[public, double, getCrosshairX, (, ), {, return, this, ., crosshairX, ;, }, public, void, setCrosshairX, (, double, x, ), {]
[), {, return, this, ., crosshairX, ;, }, public, void, setCrosshairX, (, double, x, ), {, this, ., crosshairX, =]
[setCrosshairX, (, double, x, ), {, this, ., crosshairX, =, x, ;, }, public, double, getCrosshairY, (, ), {, return]
[setCrosshairX, (, double, x, ), {, this, ., crosshairX, =, x, ;, }, public, double, getCrosshairY, (, ), {, return]
[public, double, getCrosshairY, (, ), {, return, this, ., crosshairY, ;, }, public, void, setCrosshairY, (, double, y, ), {]
[public, double, getCrosshairY, (, ), {, return, this, ., crosshairY, ;, }, public, void, setCrosshairY, (, double, y, ), {]
[), {, return, this, ., crosshairY, ;, }, public, void, setCrosshairY, (, double, y, ), {, this, ., crosshairY, =]
[setCrosshairY, (, double, y, ), {, this, ., crosshairY, =, y, ;, }, public, int, getDatasetIndex, (, ), {, return]
[setCrosshairY, (, double, y, ), {, this, ., crosshairY, =, y, ;, }, public, int, getDatasetIndex, (, ), {, return]
[public, int, getDatasetIndex, (, ), {, return, this, ., datasetIndex, ;, }, public, void, setDatasetIndex, (, int, index, ), {]
[public, int, getDatasetIndex, (, ), {, return, this, ., datasetIndex, ;, }, public, void, setDatasetIndex, (, int, index, ), {]
[), {, return, this, ., datasetIndex, ;, }, public, void, setDatasetIndex, (, int, index, ), {, this, ., datasetIndex, =]
[setDatasetIndex, (, int, index, ), {, this, ., datasetIndex, =, index, ;, }, public, int, getDomainAxisIndex, (, ), {, return]
[setDatasetIndex, (, int, index, ), {, this, ., datasetIndex, =, index, ;, }, public, int, getDomainAxisIndex, (, ), {, return]
[}, public, int, getDomainAxisIndex, (, ), {, return, this, ., domainAxisIndex, ;, }, public, int, getRangeAxisIndex, (, ), {, return]
[}, public, int, getDomainAxisIndex, (, ), {, return, this, ., domainAxisIndex, ;, }, public, int, getRangeAxisIndex, (, ), {, return]
