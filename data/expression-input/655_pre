[,, E, >, {, private, final, EdgeCallback, <, N, ,, E, >, callback, ;, public, static, final, String, NON_HALTING_ERROR_MSG, =]
[public, static, final, String, NON_HALTING_ERROR_MSG, =, "Fixed point computation not halting", ;, public, FixedPointGraphTraversal, (, EdgeCallback, <, N, ,, E, >, callback, ), {]
[public, static, final, String, NON_HALTING_ERROR_MSG, =, "Fixed point computation not halting", ;, public, FixedPointGraphTraversal, (, EdgeCallback, <, N, ,, E, >, callback, ), {]
[NON_HALTING_ERROR_MSG, =, "Fixed point computation not halting", ;, public, FixedPointGraphTraversal, (, EdgeCallback, <, N, ,, E, >, callback, ), {, this, ., callback, =]
[EDGE, >, FixedPointGraphTraversal, <, NODE, ,, EDGE, >, newTraversal, (, EdgeCallback, <, NODE, ,, EDGE, >, callback, ), {, return]
[newTraversal, (, EdgeCallback, <, NODE, ,, EDGE, >, callback, ), {, return, new, FixedPointGraphTraversal, <, NODE, ,, EDGE, >, (]
[}, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ), {, Set, <, N, >, nodes, =]
[}, public, void, computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ), {, Set, <, N, >, nodes, =]
[N, >, nodes, =, Sets, ., newHashSet, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[N, >, nodes, =, Sets, ., newHashSet, (, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :]
[(, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {]
[(, ), ;, for, (, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {]
[(, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {, nodes, ., add, (]
[(, DiGraphNode, <, N, ,, E, >, node, :, graph, ., getDirectedGraphNodes, (, ), ), {, nodes, ., add, (]
[:, graph, ., getDirectedGraphNodes, (, ), ), {, nodes, ., add, (, node, ., getValue, (, ), ), ;, }]
[., getDirectedGraphNodes, (, ), ), {, nodes, ., add, (, node, ., getValue, (, ), ), ;, }, computeFixedPoint, (]
[(, ), ), {, nodes, ., add, (, node, ., getValue, (, ), ), ;, }, computeFixedPoint, (, graph, ,]
[computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, N, entry, ), {, Set, <, N, >, entrySet, =]
[computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, N, entry, ), {, Set, <, N, >, entrySet, =]
[E, >, graph, ,, N, entry, ), {, Set, <, N, >, entrySet, =, Sets, ., newHashSet, (, ), ;]
[E, >, graph, ,, N, entry, ), {, Set, <, N, >, entrySet, =, Sets, ., newHashSet, (, ), ;]
[N, entry, ), {, Set, <, N, >, entrySet, =, Sets, ., newHashSet, (, ), ;, entrySet, ., add, (]
[{, Set, <, N, >, entrySet, =, Sets, ., newHashSet, (, ), ;, entrySet, ., add, (, entry, ), ;]
[<, N, >, entrySet, =, Sets, ., newHashSet, (, ), ;, entrySet, ., add, (, entry, ), ;, computeFixedPoint, (]
[>, entrySet, =, Sets, ., newHashSet, (, ), ;, entrySet, ., add, (, entry, ), ;, computeFixedPoint, (, graph, ,]
[computeFixedPoint, (, DiGraph, <, N, ,, E, >, graph, ,, Set, <, N, >, entrySet, ), {, int, cycleCount, =]
[,, E, >, graph, ,, Set, <, N, >, entrySet, ), {, int, cycleCount, =, 0, ;, long, nodeCount, =]
[,, E, >, graph, ,, Set, <, N, >, entrySet, ), {, int, cycleCount, =, 0, ;, long, nodeCount, =]
[,, E, >, graph, ,, Set, <, N, >, entrySet, ), {, int, cycleCount, =, 0, ;, long, nodeCount, =]
[cycleCount, =, 0, ;, long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =]
[cycleCount, =, 0, ;, long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =]
[long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (]
[long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (]
[long, nodeCount, =, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (]
[=, graph, ., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (, nodeCount, *]
[., getNodes, (, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (, nodeCount, *, nodeCount, *]
[(, ), ., size, (, ), ;, long, maxIterations, =, Math, ., max, (, nodeCount, *, nodeCount, *, nodeCount, ,]
[nodeCount, *, nodeCount, *, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =]
[nodeCount, *, nodeCount, *, nodeCount, ,, 100, ), ;, LinkedHashSet, <, DiGraphNode, <, N, ,, E, >, >, workSet, =]
[DiGraphNode, <, N, ,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, N, n, :]
[,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {]
[,, E, >, >, workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {]
[workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {, workSet, ., add, (]
[workSet, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {, workSet, ., add, (]
[newLinkedHashSet, (, ), ;, for, (, N, n, :, entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (]
[:, entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;]
[:, entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;]
[entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !]
[entrySet, ), {, workSet, ., add, (, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !]
[(, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&]
[(, graph, ., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&]
[., getDirectedGraphNode, (, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <]
[(, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;]
[(, n, ), ), ;, }, for, (, ;, !, workSet, ., isEmpty, (, ), &&, cycleCount, <, maxIterations, ;]
[isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =]
[isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =]
[isEmpty, (, ), &&, cycleCount, <, maxIterations, ;, cycleCount, ++, ), {, DiGraphNode, <, N, ,, E, >, source, =]
[<, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next, (, ), ;, N, sourceValue, =]
[<, N, ,, E, >, source, =, workSet, ., iterator, (, ), ., next, (, ), ;, N, sourceValue, =]
[=, workSet, ., iterator, (, ), ., next, (, ), ;, N, sourceValue, =, source, ., getValue, (, ), ;]
[=, workSet, ., iterator, (, ), ., next, (, ), ;, N, sourceValue, =, source, ., getValue, (, ), ;]
[(, ), ., next, (, ), ;, N, sourceValue, =, source, ., getValue, (, ), ;, workSet, ., remove, (]
[), ;, workSet, ., remove, (, source, ), ;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =]
[), ;, workSet, ., remove, (, source, ), ;, List, <, DiGraphEdge, <, N, ,, E, >, >, outEdges, =]
[>, >, outEdges, =, source, ., getOutEdges, (, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :]
[getOutEdges, (, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :, outEdges, ), {, N, destNode, =]
[getOutEdges, (, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :, outEdges, ), {, N, destNode, =]
[getOutEdges, (, ), ;, for, (, DiGraphEdge, <, N, ,, E, >, edge, :, outEdges, ), {, N, destNode, =]
[edge, :, outEdges, ), {, N, destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (]
[edge, :, outEdges, ), {, N, destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (]
[{, N, destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, callback, ., traverseEdge, (]
[destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,]
[destNode, =, edge, ., getDestination, (, ), ., getValue, (, ), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,]
[), ., getValue, (, ), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,]
[), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {]
[), ;, if, (, callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {]
[callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {, workSet, ., add, (]
[callback, ., traverseEdge, (, sourceValue, ,, edge, ., getValue, (, ), ,, destNode, ), ), {, workSet, ., add, (]
[), ,, destNode, ), ), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }]
[), ,, destNode, ), ), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }]
[), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (]
[), {, workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (]
[workSet, ., add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=]
[add, (, edge, ., getDestination, (, ), ), ;, }, }, }, Preconditions, ., checkState, (, cycleCount, !=, maxIterations, ,]
