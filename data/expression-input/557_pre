[math3, ., exception, ., NonMonotonicSequenceException, ;, public, class, DividedDifferenceInterpolator, implements, UnivariateInterpolator, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[PolynomialFunctionNewtonForm, interpolate, (, double, x, [, ], ,, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {]
[PolynomialFunctionNewtonForm, interpolate, (, double, x, [, ], ,, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {]
[x, [, ], ,, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (]
[], ,, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,]
[double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,]
[,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], c, =]
[PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, []
[PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, []
[PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, []
[x, ,, y, ,, true, ), ;, final, double, [, ], c, =, new, double, [, x, ., length, -]
[,, true, ), ;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;]
[,, true, ), ;, final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;]
[final, double, [, ], c, =, new, double, [, x, ., length, -, 1, ], ;, System, ., arraycopy, (]
[[, ], c, =, new, double, [, x, ., length, -, 1, ], ;, System, ., arraycopy, (, x, ,]
[c, =, new, double, [, x, ., length, -, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,]
[new, double, [, x, ., length, -, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,]
[[, x, ., length, -, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,]
[[, x, ., length, -, 1, ], ;, System, ., arraycopy, (, x, ,, 0, ,, c, ,, 0, ,]
[(, x, ,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =]
[,, 0, ,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (]
[,, c, ,, 0, ,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,]
[,, c, ., length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return]
[length, ), ;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return, new, PolynomialFunctionNewtonForm, (]
[;, final, double, [, ], a, =, computeDividedDifference, (, x, ,, y, ), ;, return, new, PolynomialFunctionNewtonForm, (, a, ,]
[(, final, double, x, [, ], ,, final, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {]
[(, final, double, x, [, ], ,, final, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {]
[[, ], ,, final, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (]
[,, final, double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,]
[double, y, [, ], ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, ,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,]
[,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], divdiff, =]
[,, NonMonotonicSequenceException, {, PolynomialFunctionLagrangeForm, ., verifyInterpolationArray, (, x, ,, y, ,, true, ), ;, final, double, [, ], divdiff, =]
[,, true, ), ;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int, n, =]
[,, true, ), ;, final, double, [, ], divdiff, =, y, ., clone, (, ), ;, final, int, n, =]
[y, ., clone, (, ), ;, final, int, n, =, x, ., length, ;, final, double, [, ], a, =]
[(, ), ;, final, int, n, =, x, ., length, ;, final, double, [, ], a, =, new, double, []
[final, int, n, =, x, ., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;]
[final, int, n, =, x, ., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;]
[n, =, x, ., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;, a, []
[., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;, a, [, 0, ], =]
[., length, ;, final, double, [, ], a, =, new, double, [, n, ], ;, a, [, 0, ], =]
[;, final, double, [, ], a, =, new, double, [, n, ], ;, a, [, 0, ], =, divdiff, []
[double, [, n, ], ;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =]
[n, ], ;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;]
[n, ], ;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;]
[;, a, [, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <]
[[, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;]
[[, 0, ], =, divdiff, [, 0, ], ;, for, (, int, i, =, 1, ;, i, <, n, ;]
[for, (, int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 1, ;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -]
[<, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;]
[<, n, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, -, i, ;]
[(, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =]
[(, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =]
[(, int, j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =]
[j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, []
[j, =, 0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, []
[0, ;, j, <, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +]
[<, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -]
[<, n, -, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -]
[-, i, ;, j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, []
[j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;]
[j, ++, ), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;]
[), {, final, double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, []
[double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =]
[double, denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =]
[denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (]
[denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (]
[denominator, =, x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (]
[x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, []
[x, [, j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, []
[j, +, i, ], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +]
[], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -]
[], -, x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -]
[x, [, j, ], ;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, []
[;, divdiff, [, j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /]
[j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }]
[j, ], =, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }]
[=, (, divdiff, [, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, []
[[, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =]
[[, j, +, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =]
[+, 1, ], -, divdiff, [, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, []
[[, j, ], ), /, denominator, ;, }, a, [, i, ], =, divdiff, [, 0, ], ;, }, return]
