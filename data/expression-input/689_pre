[(, int, samples, ,, boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (]
[(, int, samples, ,, boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (]
[(, int, samples, ,, boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (]
[samples, ,, boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (, factor, <]
[boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (, factor, <, 0, ||]
[boolean, shuffle, ,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (, factor, <, 0, ||]
[,, double, noise, ,, double, factor, ,, final, RandomGenerator, random, ), {, if, (, factor, <, 0, ||, factor, >]
[double, factor, ,, final, RandomGenerator, random, ), {, if, (, factor, <, 0, ||, factor, >, 1, ), {, throw]
[(, factor, <, 0, ||, factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =]
[0, ||, factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (]
[factor, >, 1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,]
[1, ), {, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,]
[{, throw, new, IllegalArgumentException, (, ), ;, }, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,]
[dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, List, <, Vector2D, >, points, =]
[1e-9, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =]
[1e-9, ), ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0, *]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0, *]
[new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =]
[new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =]
[<, Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /]
[Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (]
[Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (]
[Vector2D, >, (, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (]
[(, ), ;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (, samples, /]
[;, double, range, =, 2.0, *, FastMath, ., PI, ;, double, step, =, range, /, (, samples, /, 2.0, +]
[PI, ;, double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =]
[double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;]
[double, step, =, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;]
[=, range, /, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <]
[/, (, samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;]
[samples, /, 2.0, +, 1, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (]
[;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (]
[range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,]
[range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,]
[step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (]
[Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =]
[Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =]
[cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (]
[), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;]
[), ,, FastMath, ., sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;]
[sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (]
[sin, (, angle, ), ), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (]
[), ;, Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (]
[Vector2D, innerCircle, =, outerCircle, ., scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (]
[scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;]
[scalarMultiply, (, factor, ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;]
[;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (]
[;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (]
[(, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (, innerCircle, ., add, (]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (]
[), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (]
[(, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,]
[dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (]
[if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return]
[Vector2D, >, makeMoons, (, int, samples, ,, boolean, shuffle, ,, double, noise, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =]
[(, int, samples, ,, boolean, shuffle, ,, double, noise, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (]
[samples, ,, boolean, shuffle, ,, double, noise, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,]
[boolean, shuffle, ,, double, noise, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,]
[,, double, noise, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,]
[), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =]
[), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =]
[NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /]
[(, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =]
[(, random, ,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =]
[,, 0.0, ,, noise, ,, 1e-9, ), ;, int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -]
[int, nSamplesOut, =, samples, /, 2, ;, int, nSamplesIn, =, samples, -, nSamplesOut, ;, List, <, Vector2D, >, points, =]
[-, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =]
[-, nSamplesOut, ;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =]
[points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =]
[points, =, new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =]
[new, ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =, range, /]
[ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =, range, /, (]
[ArrayList, <, Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =, range, /, (]
[Vector2D, >, (, ), ;, double, range, =, FastMath, ., PI, ;, double, step, =, range, /, (, nSamplesOut, /]
[FastMath, ., PI, ;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =]
[PI, ;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;]
[PI, ;, double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;]
[double, step, =, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <]
[=, range, /, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;]
[/, (, nSamplesOut, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (]
[;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (]
[range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,]
[range, ;, angle, +=, step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,]
[step, ), {, Vector2D, outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (]
[outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;]
[outerCircle, =, new, Vector2D, (, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;]
[(, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (]
[(, FastMath, ., cos, (, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (]
[(, angle, ), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, ., add, (]
[), ,, FastMath, ., sin, (, angle, ), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (]
[angle, ), ), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }]
[), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =]
[), ;, points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =]
[points, ., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /]
[., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /, (]
[., add, (, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /, (]
[(, outerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, step, =, range, /, (, nSamplesIn, /]
[), ), ), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =]
[), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;]
[), ;, }, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;]
[}, step, =, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <]
[=, range, /, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;]
[/, (, nSamplesIn, /, 2.0, ), ;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=]
[;, for, (, double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (]
[double, angle, =, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (]
[=, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -]
[=, 0, ;, angle, <, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -]
[<, range, ;, angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (]
[angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,]
[angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,]
[angle, +=, step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,]
[step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -]
[step, ), {, Vector2D, innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -]
[innerCircle, =, new, Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (]
[Vector2D, (, 1, -, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -]
[-, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;]
[-, FastMath, ., cos, (, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;]
[(, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (]
[(, angle, ), ,, 1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (]
[1, -, FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (]
[FastMath, ., sin, (, angle, ), -, 0.5, ), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (]
[), ;, points, ., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[., add, (, innerCircle, ., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {]
[., add, (, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (]
[(, generateNoiseVector, (, dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,]
[dist, ), ), ), ;, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (]
[if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return]
[,, double, clusterStd, ,, double, min, ,, double, max, ,, boolean, shuffle, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =]
[,, double, min, ,, double, max, ,, boolean, shuffle, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (]
[min, ,, double, max, ,, boolean, shuffle, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,]
[double, max, ,, boolean, shuffle, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,]
[,, boolean, shuffle, ,, RandomGenerator, random, ), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, clusterStd, ,]
[), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, clusterStd, ,, 1e-9, ), ;, double, range, =]
[), {, NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, clusterStd, ,, 1e-9, ), ;, double, range, =]
[NormalDistribution, dist, =, new, NormalDistribution, (, random, ,, 0.0, ,, clusterStd, ,, 1e-9, ), ;, double, range, =, max, -]
[,, 0.0, ,, clusterStd, ,, 1e-9, ), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =]
[clusterStd, ,, 1e-9, ), ;, double, range, =, max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, []
[max, -, min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =]
[min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;]
[min, ;, Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;]
[Vector2D, [, ], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;, i, <]
[], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;, i, <, centers, ;]
[], centerPoints, =, new, Vector2D, [, centers, ], ;, for, (, int, i, =, 0, ;, i, <, centers, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =]
[], ;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =]
[], ;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =]
[], ;, for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =]
[=, 0, ;, i, <, centers, ;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *]
[;, i, <, centers, ;, i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +]
[i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =]
[i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =]
[i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =]
[i, ++, ), {, double, x, =, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =]
[=, random, ., nextDouble, (, ), *, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *]
[., nextDouble, (, ), *, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +]
[(, ), *, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;]
[(, ), *, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;]
[*, range, +, min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, []
[min, ;, double, y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =]
[y, =, random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =, new, Vector2D, (]
[random, ., nextDouble, (, ), *, range, +, min, ;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,]
[;, centerPoints, [, i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =]
[i, ], =, new, Vector2D, (, x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, []
[x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =]
[x, ,, y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =]
[y, ), ;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /]
[;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /, centers, ;]
[;, }, int, [, ], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /, centers, ;]
[], nSamplesPerCenter, =, new, int, [, centers, ], ;, int, count, =, samples, /, centers, ;, Arrays, ., fill, (]
[=, new, int, [, centers, ], ;, int, count, =, samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,]
[count, =, samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =]
[samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;]
[samples, /, centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;]
[centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <]
[centers, ;, Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <]
[Arrays, ., fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %]
[fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;]
[fill, (, nSamplesPerCenter, ,, count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;]
[count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {]
[count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {]
[count, ), ;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, samples, %, centers, ;, i, ++, ), {, nSamplesPerCenter, []
[%, centers, ;, i, ++, ), {, nSamplesPerCenter, [, i, ], ++, ;, }, List, <, Vector2D, >, points, =]
[}, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =]
[<, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =, 0, ;]
[<, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =, 0, ;]
[>, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =, 0, ;, i, <, centers, ;]
[=, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, int, i, =, 0, ;, i, <, centers, ;]
[for, (, int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 0, ;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, []
[centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;]
[centers, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;]
[(, int, j, =, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, ), {, Vector2D, point, =]
[=, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (]
[=, 0, ;, j, <, nSamplesPerCenter, [, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (]
[[, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,]
[[, i, ], ;, j, ++, ), {, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,]
[{, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), ), ;]
[{, Vector2D, point, =, new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), ), ;]
[new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (]
[new, Vector2D, (, dist, ., sample, (, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (]
[., sample, (, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (, point, ., add, (]
[., sample, (, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (, point, ., add, (]
[(, ), ,, dist, ., sample, (, ), ), ;, points, ., add, (, point, ., add, (, centerPoints, []
[;, points, ., add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (]
[add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, ), {]
[add, (, point, ., add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, ), {]
[add, (, centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (]
[centerPoints, [, i, ], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,]
[], ), ), ;, }, }, if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (]
[if, (, shuffle, ), {, Collections, ., shuffle, (, points, ,, new, RandomAdaptor, (, random, ), ), ;, }, return]
[}, return, points, ;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =]
[;, }, public, static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =, new, SobolSequenceGenerator, (]
[static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =, new, SobolSequenceGenerator, (, 2, ), ;]
[static, List, <, Vector2D, >, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =, new, SobolSequenceGenerator, (, 2, ), ;]
[>, makeRandom, (, int, samples, ), {, SobolSequenceGenerator, generator, =, new, SobolSequenceGenerator, (, 2, ), ;, generator, ., skipTo, (]
[=, new, SobolSequenceGenerator, (, 2, ), ;, generator, ., skipTo, (, 999999, ), ;, List, <, Vector2D, >, points, =]
[;, List, <, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =]
[<, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =, 0, ;]
[<, Vector2D, >, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =, 0, ;]
[>, points, =, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =, 0, ;, i, <]
[=, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =, 0, ;, i, <, samples, ;]
[=, new, ArrayList, <, Vector2D, >, (, ), ;, for, (, double, i, =, 0, ;, i, <, samples, ;]
[for, (, double, i, =, 0, ;, i, <, samples, ;, i, ++, ), {, double, [, ], vector, =]
[for, (, double, i, =, 0, ;, i, <, samples, ;, i, ++, ), {, double, [, ], vector, =]
[;, i, <, samples, ;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;]
[;, i, <, samples, ;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;]
[<, samples, ;, i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, []
[i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =]
[i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =]
[i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =]
[i, ++, ), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =]
[), {, double, [, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, []
[[, ], vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *]
[vector, =, generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -]
[generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;]
[generator, ., nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;]
[nextVector, (, ), ;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, []
[;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =]
[;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =]
[;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =]
[;, vector, [, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =]
[[, 0, ], =, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, []
[=, vector, [, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *]
[[, 0, ], *, 2, -, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -]
[-, 1, ;, vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =]
[vector, [, 1, ], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (]
[], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;]
[], =, vector, [, 1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;]
[1, ], *, 2, -, 1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (]
[1, ;, Vector2D, point, =, new, Vector2D, (, vector, ), ;, points, ., add, (, point, ), ;, }, return]
[add, (, point, ), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return]
[), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (]
[), ;, }, return, points, ;, }, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (]
[}, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (, distribution, ., sample, (, ), ,]
[}, public, static, Vector2D, generateNoiseVector, (, NormalDistribution, distribution, ), {, return, new, Vector2D, (, distribution, ., sample, (, ), ,]
[Vector2D, >, input, ,, double, minX, ,, double, maxX, ,, double, minY, ,, double, maxY, ), {, double, rangeX, =]
[Vector2D, >, input, ,, double, minX, ,, double, maxX, ,, double, minY, ,, double, maxY, ), {, double, rangeX, =]
[input, ,, double, minX, ,, double, maxX, ,, double, minY, ,, double, maxY, ), {, double, rangeX, =, maxX, -]
[double, maxX, ,, double, minY, ,, double, maxY, ), {, double, rangeX, =, maxX, -, minX, ;, double, rangeY, =]
[double, maxX, ,, double, minY, ,, double, maxY, ), {, double, rangeX, =, maxX, -, minX, ;, double, rangeY, =]
[,, double, minY, ,, double, maxY, ), {, double, rangeX, =, maxX, -, minX, ;, double, rangeY, =, maxY, -]
[double, rangeX, =, maxX, -, minX, ;, double, rangeY, =, maxY, -, minY, ;, List, <, DoublePoint, >, points, =]
[;, List, <, DoublePoint, >, points, =, new, ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D, p, :]
[ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D, p, :, input, ), {, double, [, ], arr, =]
[ArrayList, <, DoublePoint, >, (, ), ;, for, (, Vector2D, p, :, input, ), {, double, [, ], arr, =]
[;, for, (, Vector2D, p, :, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;]
[;, for, (, Vector2D, p, :, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;]
[(, Vector2D, p, :, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, []
[:, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =]
[:, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =]
[:, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =]
[:, input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =]
[input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (]
[input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (]
[input, ), {, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (]
[{, double, [, ], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (, arr, []
[], arr, =, p, ., toArray, (, ), ;, arr, [, 0, ], =, (, arr, [, 0, ], -]
[p, ., toArray, (, ), ;, arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /]
[toArray, (, ), ;, arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *]
[), ;, arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -]
[arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;]
[arr, [, 0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;]
[0, ], =, (, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, []
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =]
[(, arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =]
[arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (]
[arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (]
[arr, [, 0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (]
[0, ], -, minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, []
[minX, ), /, rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -]
[rangeX, *, 2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /]
[2, -, 1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *]
[1, ;, arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -]
[arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;]
[arr, [, 1, ], =, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;]
[=, (, arr, [, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (]
[[, 1, ], -, minY, ), /, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (]
[/, rangeY, *, 2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return]
[2, -, 1, ;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }]
[;, points, ., add, (, new, DoublePoint, (, arr, ), ), ;, }, return, points, ;, }, @, SuppressWarnings, (]
[points, ;, }, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {]
[}, @, SuppressWarnings, (, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (]
[(, "serial", ), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;]
[), public, static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (]
[static, class, Display, extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (, 800, ,]
[extends, ExampleFrame, {, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (, 800, ,, 800, ), ;]
[{, public, Display, (, ), {, setTitle, (, "Commons-Math: Cluster algorithm comparison", ), ;, setSize, (, 800, ,, 800, ), ;, setLayout, (]
[), ;, setSize, (, 800, ,, 800, ), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =]
[,, 800, ), ;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =]
[;, setLayout, (, new, GridBagLayout, (, ), ), ;, int, nSamples, =, 1500, ;, RandomGenerator, rng, =, new, Well19937c, (]
[1500, ;, RandomGenerator, rng, =, new, Well19937c, (, 0, ), ;, List, <, List, <, DoublePoint, >, >, datasets, =]
[List, <, List, <, DoublePoint, >, >, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (, ), ;]
[List, <, List, <, DoublePoint, >, >, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (, ), ;]
[DoublePoint, >, >, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (, ), ;, datasets, ., add, (]
[>, datasets, =, new, ArrayList, <, List, <, DoublePoint, >, >, (, ), ;, datasets, ., add, (, normalize, (]
[=, new, ArrayList, <, List, <, DoublePoint, >, >, (, ), ;, datasets, ., add, (, normalize, (, makeCircles, (]
[ArrayList, <, List, <, DoublePoint, >, >, (, ), ;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,]
[List, <, DoublePoint, >, >, (, ), ;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,]
[DoublePoint, >, >, (, ), ;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,]
[>, (, ), ;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,]
[;, datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,]
[datasets, ., add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -]
[add, (, normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,]
[normalize, (, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,]
[(, makeCircles, (, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -]
[(, nSamples, ,, true, ,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,]
[,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;]
[,, 0.04, ,, 0.5, ,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;]
[,, rng, ), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (]
[), ,, -, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (]
[-, 1, ,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (]
[,, 1, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,]
[,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,]
[1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,]
[), ), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,]
[), ;, datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -]
[datasets, ., add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,]
[add, (, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,]
[(, normalize, (, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -]
[(, makeMoons, (, nSamples, ,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,]
[,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;]
[,, true, ,, 0.04, ,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;]
[,, rng, ), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (]
[), ,, -, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (]
[-, 1, ,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (]
[,, 2, ,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,]
[,, -, 1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,]
[1, ,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,]
[,, 1, ), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -]
[), ), ;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,]
[;, datasets, ., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,]
[., add, (, normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,]
[normalize, (, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,]
[(, makeBlobs, (, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -]
[(, nSamples, ,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,]
[,, 3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,]
[3, ,, 1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -]
[1.0, ,, -, 10, ,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,]
[,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;]
[,, 10, ,, true, ,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;]
[,, rng, ), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (]
[), ,, -, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (]
[-, 12, ,, 12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (]
[12, ,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,]
[,, -, 12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -]
[12, ,, 12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,]
[12, ), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,]
[), ), ;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -]
[;, datasets, ., add, (, normalize, (, makeRandom, (, nSamples, ), ,, -, 1, ,, 1, ,, -, 1, ,]
[1, ,, 1, ), ), ;, List, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, algorithms, =]
[>, >, algorithms, =, new, ArrayList, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, (, ), ;]
[>, >, algorithms, =, new, ArrayList, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, (, ), ;]
[new, ArrayList, <, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, >, (, ), ;, algorithms, ., add, (]
[>, >, (, ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (]
[(, ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,]
[(, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (]
[,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), ), ), ;]
[,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), ), ), ;]
[>, >, (, "KMeans\n(k=2)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 2, ), ), ), ;, algorithms, ., add, (]
[2, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,]
[(, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (]
[,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), ), ), ;]
[,, Clusterer, <, DoublePoint, >, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), ), ), ;]
[>, >, (, "KMeans\n(k=3)", ,, new, KMeansPlusPlusClusterer, <, DoublePoint, >, (, 3, ), ), ), ;, algorithms, ., add, (]
[3, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,]
[(, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (]
[Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,]
[<, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), ), ), ;]
[<, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), ), ), ;]
[(, "FuzzyKMeans\n(k=3, fuzzy=2)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 2, ), ), ), ;, algorithms, ., add, (]
[2, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,]
[(, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (]
[Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,]
[<, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), ), ), ;]
[<, DoublePoint, >, >, (, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), ), ), ;]
[(, "FuzzyKMeans\n(k=3, fuzzy=10)", ,, new, FuzzyKMeansClusterer, <, DoublePoint, >, (, 3, ,, 10, ), ), ), ;, algorithms, ., add, (]
[10, ), ), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (]
[), ), ;, algorithms, ., add, (, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,]
[(, new, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint, >, (]
[Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,]
[>, (, "DBSCAN\n(eps=.1, min=3)", ,, new, DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =]
[DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;]
[DBSCANClusterer, <, DoublePoint, >, (, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;]
[(, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =]
[(, 0.1, ,, 3, ), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =]
[), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;]
[), ), ), ;, GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;]
[GridBagConstraints, c, =, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =]
[=, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;]
[=, new, GridBagConstraints, (, ), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;]
[), ;, c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =]
[c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;]
[c, ., fill, =, GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;]
[GridBagConstraints, ., VERTICAL, ;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =]
[;, c, ., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (]
[., gridx, =, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,]
[=, 0, ;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,]
[;, c, ., gridy, =, 0, ;, c, ., insets, =, new, Insets, (, 2, ,, 2, ,, 2, ,]
[2, ,, 2, ,, 2, ), ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :]
[;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =]
[Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =, new, JLabel, (]
[Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =, new, JLabel, (]
[String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =, new, JLabel, (, "<html><body>", +]
[String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =, new, JLabel, (, "<html><body>", +]
[String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, JLabel, text, =, new, JLabel, (, "<html><body>", +]
[:, algorithms, ), {, JLabel, text, =, new, JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (]
[), {, JLabel, text, =, new, JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,]
[=, new, JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;]
[JLabel, (, "<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (]
["<html><body>", +, pair, ., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,]
[., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;]
[., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;]
[., getFirst, (, ), ., replace, (, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;]
[(, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }]
[(, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }]
[(, "\n", ,, "<br>", ), ), ;, add, (, text, ,, c, ), ;, c, ., gridx, ++, ;, }]
[;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :]
[gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {]
[gridx, ++, ;, }, c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {]
[c, ., gridy, ++, ;, for, (, List, <, DoublePoint, >, dataset, :, datasets, ), {, c, ., gridx, =]
[{, c, ., gridx, =, 0, ;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :]
[;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, long, start, =]
[;, for, (, Pair, <, String, ,, Clusterer, <, DoublePoint, >, >, pair, :, algorithms, ), {, long, start, =]
[long, start, =, System, ., currentTimeMillis, (, ), ;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =]
[long, start, =, System, ., currentTimeMillis, (, ), ;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =]
[long, start, =, System, ., currentTimeMillis, (, ), ;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =]
[;, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, =, pair, ., getSecond, (, ), ., cluster, (]
[<, DoublePoint, >, >, clusters, =, pair, ., getSecond, (, ), ., cluster, (, dataset, ), ;, long, end, =]
[<, DoublePoint, >, >, clusters, =, pair, ., getSecond, (, ), ., cluster, (, dataset, ), ;, long, end, =]
[pair, ., getSecond, (, ), ., cluster, (, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;]
[getSecond, (, ), ., cluster, (, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (]
[., cluster, (, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (]
[(, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,]
[(, dataset, ), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,]
[), ;, long, end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -]
[end, =, System, ., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,]
[., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;]
[., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;]
[., currentTimeMillis, (, ), ;, add, (, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;]
[(, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;, c, ., gridx, ++, ;, }]
[(, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;, c, ., gridx, ++, ;, }]
[(, new, ClusterPlot, (, clusters, ,, end, -, start, ), ,, c, ), ;, c, ., gridx, ++, ;, }]
[start, ), ,, c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }]
[c, ), ;, c, ., gridx, ++, ;, }, c, ., gridy, ++, ;, }, }, }, @, SuppressWarnings, (]
[}, }, }, @, SuppressWarnings, (, "serial", ), public, static, class, ClusterPlot, extends, JComponent, {, private, static, double, PAD, =]
[;, public, ClusterPlot, (, final, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ,, long, duration, ), {]
[;, public, ClusterPlot, (, final, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ,, long, duration, ), {]
[final, List, <, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ,, long, duration, ), {, this, ., clusters, =]
[<, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ,, long, duration, ), {, this, ., clusters, =, clusters, ;]
[<, ?, extends, Cluster, <, DoublePoint, >, >, clusters, ,, long, duration, ), {, this, ., clusters, =, clusters, ;]
[<, DoublePoint, >, >, clusters, ,, long, duration, ), {, this, ., clusters, =, clusters, ;, this, ., duration, =]
[=, clusters, ;, this, ., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {]
[=, clusters, ;, this, ., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {]
[., duration, =, duration, ;, }, @, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (]
[@, Override, protected, void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =]
[void, paintComponent, (, Graphics, g, ), {, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, )]
[(, Graphics, g, ), {, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;]
[(, Graphics, g, ), {, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;]
[{, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (]
[{, super, ., paintComponent, (, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (]
[(, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,]
[(, g, ), ;, Graphics2D, g2, =, (, Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,]
[Graphics2D, ), g, ;, g2, ., setRenderingHint, (, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =]
[(, RenderingHints, ., KEY_ANTIALIASING, ,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =]
[,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;]
[,, RenderingHints, ., VALUE_ANTIALIAS_ON, ), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;]
[), ;, int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (]
[int, w, =, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,]
[=, getWidth, (, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,, 0, ,]
[(, ), ;, int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,]
[int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;]
[int, h, =, getHeight, (, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;]
[(, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (]
[(, ), ;, g2, ., clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (]
[clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;]
[clearRect, (, 0, ,, 0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;]
[0, ,, w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (]
[w, ,, h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,]
[h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,]
[h, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,]
[;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -]
[., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,]
[., setPaint, (, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,]
[(, Color, ., black, ), ;, g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -]
[g2, ., drawRect, (, 0, ,, 0, ,, w, -, 1, ,, h, -, 1, ), ;, int, index, =]
[,, w, -, 1, ,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =]
[,, h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ]]
[h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {]
[h, -, 1, ), ;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {]
[;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,]
[;, int, index, =, 0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,]
[0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,, Color, ., blue, ,]
[0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,, Color, ., blue, ,]
[0, ;, Color, [, ], colors, =, new, Color, [, ], {, Color, ., red, ,, Color, ., blue, ,]
[., blue, ,, Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :]
[Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {]
[Color, ., green, ., darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {]
[darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (]
[darker, (, ), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (]
[), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (, colors, []
[), }, ;, for, (, Cluster, <, DoublePoint, >, cluster, :, clusters, ), {, g2, ., setPaint, (, colors, []
[:, clusters, ), {, g2, ., setPaint, (, colors, [, index, ++, ], ), ;, for, (, DoublePoint, point, :]
[:, clusters, ), {, g2, ., setPaint, (, colors, [, index, ++, ], ), ;, for, (, DoublePoint, point, :]
[index, ++, ], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =]
[], ), ;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (]
[;, for, (, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (, point, ,]
[(, DoublePoint, point, :, cluster, ., getPoints, (, ), ), {, Clusterable, p, =, transform, (, point, ,, w, ,]
[), ), {, Clusterable, p, =, transform, (, point, ,, w, ,, h, ), ;, double, [, ], arr, =]
[), ), {, Clusterable, p, =, transform, (, point, ,, w, ,, h, ), ;, double, [, ], arr, =]
[transform, (, point, ,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;]
[transform, (, point, ,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;]
[w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (]
[double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (]
[double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (]
[double, [, ], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (]
[], arr, =, p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, []
[p, ., getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -]
[getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,]
[getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,]
[getPoint, (, ), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,]
[), ;, g2, ., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, []
[., fill, (, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -]
[(, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,]
[Ellipse2D, ., Double, (, arr, [, 0, ], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,]
[], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (]
[], -, 1, ,, arr, [, 1, ], -, 1, ,, 3, ,, 3, ), ), ;, }, if, (]
[-, 1, ,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =]
[,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (]
[,, 3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (]
[3, ,, 3, ), ), ;, }, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (]
[}, if, (, cluster, instanceof, CentroidCluster, ), {, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?, >, )]
[{, Clusterable, p, =, transform, (, (, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter, (, ), ,]
[p, =, transform, (, (, (, CentroidCluster, <, ?, >, ), cluster, ), ., getCenter, (, ), ,, w, ,]
[?, >, ), cluster, ), ., getCenter, (, ), ,, w, ,, h, ), ;, double, [, ], arr, =]
[?, >, ), cluster, ), ., getCenter, (, ), ,, w, ,, h, ), ;, double, [, ], arr, =]
[,, w, ,, h, ), ;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =]
[;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (]
[;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (]
[;, double, [, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (]
[[, ], arr, =, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, []
[=, p, ., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -]
[., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,]
[., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,]
[., getPoint, (, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,]
[(, ), ;, Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, []
[Shape, s, =, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -]
[=, new, Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,]
[Ellipse2D, ., Double, (, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,]
[(, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;]
[(, arr, [, 0, ], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;]
[], -, 4, ,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (]
[,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;]
[,, arr, [, 1, ], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;]
[], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (]
[], -, 4, ,, 8, ,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (]
[,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;]
[,, 8, ), ;, g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;]
[g2, ., fill, (, s, ), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (]
[), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }]
[), ;, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }]
[setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (]
[setPaint, (, Color, ., black, ), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (]
[), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;]
[), ;, g2, ., draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;]
[draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (]
[draw, (, s, ), ;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (]
[;, }, }, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (]
[}, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,]
[}, g2, ., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,]
[., setPaint, (, Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /]
[Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,]
[Color, ., black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,]
[black, ), ;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -]
[;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,]
[;, g2, ., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,]
[., drawString, (, String, ., format, (, "%.2f s", ,, duration, /, 1e3, ), ,, w, -, 40, ,, h, -]
[,, w, -, 40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return]
[40, ,, h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (]
[h, -, 5, ), ;, }, @, Override, public, Dimension, getPreferredSize, (, ), {, return, new, Dimension, (, 150, ,]
[}, private, Clusterable, transform, (, Clusterable, point, ,, int, width, ,, int, height, ), {, double, [, ], arr, =]
[}, private, Clusterable, transform, (, Clusterable, point, ,, int, width, ,, int, height, ), {, double, [, ], arr, =]
[,, int, width, ,, int, height, ), {, double, [, ], arr, =, point, ., getPoint, (, ), ;, return]
[,, int, height, ), {, double, [, ], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (]
[{, double, [, ], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ]]
[double, [, ], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {]
[double, [, ], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {]
[], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +]
[], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +]
[], arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +]
[arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (]
[arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (]
[arr, =, point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (]
[point, ., getPoint, (, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, []
[(, ), ;, return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +]
[return, new, DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /]
[DoublePoint, (, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *]
[(, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (]
[(, new, double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (]
[double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -]
[double, [, ], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -]
[], {, PAD, +, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *]
[+, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,]
[+, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,]
[+, (, arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,]
[arr, [, 0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -]
[0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -]
[0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -]
[0, ], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -]
[], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (]
[], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (]
[], +, 1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (]
[1, ), /, 2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, []
[2.0, *, (, width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +]
[width, -, 2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /]
[2, *, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *]
[*, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (]
[*, PAD, ), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (]
[), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -]
[), ,, height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -]
[height, -, PAD, -, (, arr, [, 1, ], +, 1, ), /, 2.0, *, (, height, -, 2, *]
[2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {]
[2, *, PAD, ), }, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {]
[}, ), ;, }, }, public, static, void, main, (, String, [, ], args, ), {, ExampleUtils, ., showExampleFrame, (]
