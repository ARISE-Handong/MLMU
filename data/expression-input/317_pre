[commons, ., math3, ., exception, ., util, ., LocalizedFormats, ;, public, class, MathArrays, {, private, static, final, int, SPLIT_FACTOR, =]
[double, [, ], scale, (, double, val, ,, final, double, [, ], arr, ), {, double, [, ], newArr, =]
[scale, (, double, val, ,, final, double, [, ], arr, ), {, double, [, ], newArr, =, new, double, []
[scale, (, double, val, ,, final, double, [, ], arr, ), {, double, [, ], newArr, =, new, double, []
[), {, double, [, ], newArr, =, new, double, [, arr, ., length, ], ;, for, (, int, i, =]
[double, [, ], newArr, =, new, double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], newArr, =, new, double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;]
[], newArr, =, new, double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], newArr, =, new, double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[double, [, arr, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, []
[int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =]
[int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =]
[int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =]
[=, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =, arr, []
[i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *]
[length, ;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }, return]
[public, static, void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, ), {, for, (, int, i, =]
[void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;]
[void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;]
[(, double, val, ,, final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;, i, <]
[(, double, val, ,, final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;, i, <]
[final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[final, double, [, ], arr, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;]
[arr, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {]
[arr, ), {, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, arr, []
[int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, arr, [, i, ], *=]
[double, [, ], ebeAdd, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeAdd, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeAdd, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], +=]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], +=]
[=, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], +=, b, []
[a, ., length, ;, i, ++, ), {, result, [, i, ], +=, b, [, i, ], ;, }, return]
[double, [, ], ebeSubtract, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeSubtract, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeSubtract, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], -=]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], -=]
[=, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], -=, b, []
[a, ., length, ;, i, ++, ), {, result, [, i, ], -=, b, [, i, ], ;, }, return]
[double, [, ], ebeMultiply, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeMultiply, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeMultiply, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], *=]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], *=]
[=, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], *=, b, []
[a, ., length, ;, i, ++, ), {, result, [, i, ], *=, b, [, i, ], ;, }, return]
[double, [, ], ebeDivide, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeDivide, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], ebeDivide, (, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[(, double, [, ], a, ,, double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[double, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[=, a, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], /=]
[int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], /=]
[=, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], /=, b, []
[a, ., length, ;, i, ++, ), {, result, [, i, ], /=, b, [, i, ], ;, }, return]
[}, public, static, double, distance1, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, sum, =]
[[, ], p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, []
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[{, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return]
[}, public, static, int, distance1, (, int, [, ], p1, ,, int, [, ], p2, ), {, int, sum, =]
[[, ], p1, ,, int, [, ], p2, ), {, int, sum, =, 0, ;, for, (, int, i, =]
[p1, ,, int, [, ], p2, ), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, int, [, ], p2, ), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[int, [, ], p2, ), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[int, [, ], p2, ), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, int, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, []
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[{, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return]
[}, public, static, double, distance, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, sum, =]
[[, ], p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, []
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[<, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, []
[length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;]
[i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=]
[i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=]
[), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *]
[dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return]
[dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return]
[i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (]
[}, public, static, double, distance, (, int, [, ], p1, ,, int, [, ], p2, ), {, double, sum, =]
[[, ], p1, ,, int, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =]
[p1, ,, int, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, int, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[int, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[int, [, ], p2, ), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[(, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, []
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[<, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, []
[length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;]
[i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=]
[i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=]
[), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *]
[dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return]
[dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return]
[i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (]
[}, public, static, double, distanceInf, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, max, =]
[[, ], p1, ,, double, [, ], p2, ), {, double, max, =, 0, ;, for, (, int, i, =]
[p1, ,, double, [, ], p2, ), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, double, [, ], p2, ), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[double, [, ], p2, ), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], p2, ), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, []
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[{, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return]
[}, public, static, int, distanceInf, (, int, [, ], p1, ,, int, [, ], p2, ), {, int, max, =]
[[, ], p1, ,, int, [, ], p2, ), {, int, max, =, 0, ;, for, (, int, i, =]
[p1, ,, int, [, ], p2, ), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;]
[p1, ,, int, [, ], p2, ), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;]
[int, [, ], p2, ), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[int, [, ], p2, ), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[), {, int, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,]
[0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, []
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[{, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return]
[>, >, boolean, isMonotonic, (, T, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, T, previous, =]
[>, >, boolean, isMonotonic, (, T, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, T, previous, =]
[boolean, isMonotonic, (, T, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, T, previous, =, val, []
[,, OrderDirection, dir, ,, boolean, strict, ), {, T, previous, =, val, [, 0, ], ;, final, int, max, =]
[,, OrderDirection, dir, ,, boolean, strict, ), {, T, previous, =, val, [, 0, ], ;, final, int, max, =]
[previous, =, val, [, 0, ], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =]
[val, [, 0, ], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;]
[val, [, 0, ], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;]
[0, ], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i, <]
[;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i, <, max, ;]
[;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i, <, max, ;]
[(, int, i, =, 1, ;, i, <, max, ;, i, ++, ), {, final, int, comp, ;, switch, (]
[1, ;, i, <, max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case]
[i, <, max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :]
[max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =]
[max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =]
[), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo, (]
[), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo, (]
[final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo, (, val, []
[dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo, (, val, [, i, ], ), ;, if, (]
[:, comp, =, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (]
[:, comp, =, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (]
[=, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (, comp, >=]
[(, val, [, i, ], ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return]
[(, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (]
[(, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (]
[), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >]
[comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return]
[;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case]
[}, else, {, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :]
[{, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =]
[{, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =]
[{, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =]
[(, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =, val, []
[{, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =, val, [, i, ], ., compareTo, (]
[}, break, ;, case, DECREASING, :, comp, =, val, [, i, ], ., compareTo, (, previous, ), ;, if, (]
[:, comp, =, val, [, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (]
[:, comp, =, val, [, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (]
[=, val, [, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=]
[], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return]
[(, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (]
[(, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (]
[), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >]
[comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return]
[}, else, {, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, default, :, throw]
[>, 0, ), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, []
[break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, [, i, ], ;, }, return]
[;, }, public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return]
[public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return, checkOrder, (]
[boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return, checkOrder, (, val, ,]
[(, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return, checkOrder, (, val, ,, dir, ,]
[[, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return, checkOrder, (, val, ,, dir, ,, strict, ,]
[double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ,, boolean, abort, ), throws, NonMonotonicSequenceException, {, double, previous, =]
[double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ,, boolean, abort, ), throws, NonMonotonicSequenceException, {, double, previous, =]
[], val, ,, OrderDirection, dir, ,, boolean, strict, ,, boolean, abort, ), throws, NonMonotonicSequenceException, {, double, previous, =, val, []
[strict, ,, boolean, abort, ), throws, NonMonotonicSequenceException, {, double, previous, =, val, [, 0, ], ;, final, int, max, =]
[strict, ,, boolean, abort, ), throws, NonMonotonicSequenceException, {, double, previous, =, val, [, 0, ], ;, final, int, max, =]
[val, [, 0, ], ;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (]
[0, ], ;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =]
[;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;]
[;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;]
[int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;, index, <]
[=, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;, index, <, max, ;]
[=, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;, index, <, max, ;]
[index, ;, ITEM, :, for, (, index, =, 1, ;, index, <, max, ;, index, ++, ), {, switch, (]
[for, (, index, =, 1, ;, index, <, max, ;, index, ++, ), {, switch, (, dir, ), {, case]
[1, ;, index, <, max, ;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (]
[;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (]
[;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (]
[;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (]
[++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (, val, []
[switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (, val, [, index, ], <=]
[{, if, (, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[{, if, (, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[{, if, (, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[(, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, []
[index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], <]
[else, {, if, (, val, [, index, ], <, previous, ), {, break, ITEM, ;, }, }, break, ;, case]
[val, [, index, ], <, previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (]
[previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (]
[previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (]
[previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (]
[{, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (, val, []
[;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (, val, [, index, ], >=]
[{, if, (, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[{, if, (, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[{, if, (, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (]
[(, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, []
[index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], >]
[if, (, val, [, index, ], >, previous, ), {, break, ITEM, ;, }, }, break, ;, default, :, throw]
[>, previous, ), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, []
[;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, [, index, ], ;, }, if, (]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, [, index, ], ;, }, if, (]
[:, throw, new, MathInternalError, (, ), ;, }, previous, =, val, [, index, ], ;, }, if, (, index, ==]
[(, ), ;, }, previous, =, val, [, index, ], ;, }, if, (, index, ==, max, ), {, return]
[=, val, [, index, ], ;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (]
[], ;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw]
[if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (]
[if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (]
[index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, []
[), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,]
[return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,]
[;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,]
[if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,, dir, ,]
[NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,, dir, ,, strict, ), ;, }, else, {, return]
[}, public, static, void, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws, NonMonotonicSequenceException, {]
[static, void, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws, NonMonotonicSequenceException, {, checkOrder, (]
[checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,]
[double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,, dir, ,]
[], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,, dir, ,, strict, ,]
[,, strict, ,, true, ), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {]
[,, true, ), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (]
[), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,]
[), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,]
[static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,, OrderDirection, ., INCREASING, ,]
[;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (]
[], in, ), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;]
[NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;, i, <]
[NullArgumentException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;, i, <]
[MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;]
[MathUtils, ., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;]
[;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, []
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=]
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=]
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=, in, []
[), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ], ., length, ), {, throw]
[(, in, [, i, ], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (]
[(, in, [, i, ], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (]
[], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,]
[], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,]
[], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,]
[length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, []
[], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,]
[], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,]
[], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,]
[length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in, []
[}, public, static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =]
[static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;]
[static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;]
[checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[[, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[[, ], in, ), throws, NotStrictlyPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, []
[=, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <=]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw]
[length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, []
[}, public, static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =]
[static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;]
[static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;]
[checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[[, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[[, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, []
[=, 0, ;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw]
[length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (]
[length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (]
[i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in, []
[static, void, checkNonNegative, (, final, long, [, ], [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =]
[checkNonNegative, (, final, long, [, ], [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;]
[checkNonNegative, (, final, long, [, ], [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;]
[final, long, [, ], [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[final, long, [, ], [, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <]
[[, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[[, ], in, ), throws, NotPositiveException, {, for, (, int, i, =, 0, ;, i, <, in, ., length, ;]
[int, i, =, 0, ;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =]
[=, 0, ;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[<, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, []
[i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;]
[i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;]
[int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (]
[int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (]
[int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (]
[int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (]
[=, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (, in, []
[j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (, in, [, i, ], []
[[, i, ], ., length, ;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <]
[length, ;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw]
[++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (]
[++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (]
[++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (]
[{, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in, []
[in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], []
[), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, ), {, double, rdwarf, =]
[}, public, static, double, safeNorm, (, double, [, ], v, ), {, double, rdwarf, =, 3.834e-20, ;, double, rgiant, =]
[(, double, [, ], v, ), {, double, rdwarf, =, 3.834e-20, ;, double, rgiant, =, 1.304e+19, ;, double, s1, =]
[), {, double, rdwarf, =, 3.834e-20, ;, double, rgiant, =, 1.304e+19, ;, double, s1, =, 0, ;, double, s2, =]
[3.834e-20, ;, double, rgiant, =, 1.304e+19, ;, double, s1, =, 0, ;, double, s2, =, 0, ;, double, s3, =]
[1.304e+19, ;, double, s1, =, 0, ;, double, s2, =, 0, ;, double, s3, =, 0, ;, double, x1max, =]
[0, ;, double, s2, =, 0, ;, double, s3, =, 0, ;, double, x1max, =, 0, ;, double, x3max, =]
[0, ;, double, s3, =, 0, ;, double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =]
[0, ;, double, s3, =, 0, ;, double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =]
[double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =, v, ., length, ;, double, agiant, =]
[double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =, v, ., length, ;, double, agiant, =]
[=, 0, ;, double, x3max, =, 0, ;, double, floatn, =, v, ., length, ;, double, agiant, =, rgiant, /]
[;, double, floatn, =, v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =]
[floatn, =, v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;]
[floatn, =, v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;]
[v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <]
[v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <]
[double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <, v, ., length, ;]
[double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <, v, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =]
[for, (, int, i, =, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =]
[=, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (]
[=, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (]
[;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, []
[;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (]
[;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (]
[;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (]
[++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <]
[{, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||]
[{, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||]
[xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >]
[(, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (]
[(, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (]
[[, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >]
[if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (]
[if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (]
[xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >]
[agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =]
[agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =]
[{, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /]
[(, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;]
[>, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =]
[>, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =]
[), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +]
[), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +]
[), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +]
[if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *]
[xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *]
[x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *, r, ;]
[{, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *, r, ;, x1max, =]
[s1, =, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =]
[s1, =, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =]
[1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /]
[s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;]
[r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=]
[r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=]
[r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *]
[{, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r, ;, }, }, else, {, if, (]
[{, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r, ;, }, }, else, {, if, (]
[r, =, xabs, /, x1max, ;, s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >]
[s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =]
[s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =]
[r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /]
[r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;]
[}, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =]
[}, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =]
[else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +]
[else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +]
[else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +]
[if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *]
[xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *]
[x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *, r, ;]
[{, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =]
[;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (]
[;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (]
[=, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=]
[*, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =]
[*, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =]
[;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /]
[=, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;]
[;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;, s3, +=]
[;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;, s3, +=]
[else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;, s3, +=, r, *]
[{, double, r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else, {]
[r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=]
[r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=]
[xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=, xabs, *]
[;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (]
[;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (]
[}, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=]
[else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {]
[s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =]
[s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =]
[xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *]
[xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *]
[}, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (]
[}, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (]
[double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +]
[double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +]
[norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (]
[norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (]
[if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /]
[!=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /]
[Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (]
[Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (]
[sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==]
[+, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {]
[s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =]
[s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =]
[x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *]
[x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *]
[), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (]
[==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (]
[==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (]
[), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=]
[=, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {]
[*, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =]
[*, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =]
[(, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (]
[(, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (]
[), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *]
[;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (]
[;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (]
[else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +]
[else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +]
[{, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (]
[{, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (]
[(, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /]
[x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *]
[), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (]
[), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (]
[norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *]
[(, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {]
[+, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =]
[+, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =]
[s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (]
[s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (]
[*, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *]
[(, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (]
[(, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (]
[x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (]
[x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (]
[s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /]
[), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +]
[;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (]
[;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (]
[else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (, x3max, *]
[*, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), ), ), ;, }, }, }, return]
[static, void, sortInPlace, (, double, [, ], x, ,, double, [, ], ..., yList, ), throws, DimensionMismatchException, ,, NullArgumentException, {]
[sortInPlace, (, double, [, ], x, ,, double, [, ], ..., yList, ), throws, DimensionMismatchException, ,, NullArgumentException, {, sortInPlace, (]
[double, [, ], x, ,, double, [, ], ..., yList, ), throws, DimensionMismatchException, ,, NullArgumentException, {, sortInPlace, (, x, ,]
[double, [, ], x, ,, double, [, ], ..., yList, ), throws, DimensionMismatchException, ,, NullArgumentException, {, sortInPlace, (, x, ,]
[,, double, [, ], ..., yList, ), throws, DimensionMismatchException, ,, NullArgumentException, {, sortInPlace, (, x, ,, OrderDirection, ., INCREASING, ,]
[], x, ,, final, OrderDirection, dir, ,, double, [, ], ..., yList, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[], x, ,, final, OrderDirection, dir, ,, double, [, ], ..., yList, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[,, final, OrderDirection, dir, ,, double, [, ], ..., yList, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, x, ==]
[,, double, [, ], ..., yList, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, x, ==, null, ), {, throw]
[DimensionMismatchException, {, if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =]
[DimensionMismatchException, {, if, (, x, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =, yList, ., length, ;, final, int, len, =]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =, yList, ., length, ;, final, int, len, =]
[int, yListLen, =, yList, ., length, ;, final, int, len, =, x, ., length, ;, for, (, int, j, =]
[=, yList, ., length, ;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;]
[=, yList, ., length, ;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;]
[., length, ;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[(, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], y, =]
[(, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], y, =]
[j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], y, =, yList, []
[<, yListLen, ;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (]
[<, yListLen, ;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (]
[;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==]
[{, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==, null, ), {, throw]
[[, j, ], ;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[[, j, ], ;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[[, j, ], ;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, y, ., length, !=, len, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,]
[., length, ,, len, ), ;, }, }, final, List, <, Pair, <, Double, ,, Integer, >, >, list, =]
[Pair, <, Double, ,, Integer, >, >, list, =, new, ArrayList, <, Pair, <, Double, ,, Integer, >, >, (]
[=, new, ArrayList, <, Pair, <, Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =]
[ArrayList, <, Pair, <, Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =, 0, ;]
[ArrayList, <, Pair, <, Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =, 0, ;]
[Pair, <, Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =, 0, ;, i, <]
[Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[Double, ,, Integer, >, >, (, len, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[>, (, len, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[>, (, len, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, list, ., add, (]
[i, <, len, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (]
[i, <, len, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (]
[len, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, []
[++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,]
[i, ], ,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =]
[i, ], ,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =]
[i, ], ,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =]
[,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==]
[,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==]
[,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==]
[final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==, MathArrays, ., OrderDirection, ., INCREASING, ?]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o1, ., getKey, (, ), ., compareTo, (]
[o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o1, ., getKey, (, ), ., compareTo, (]
[{, return, o1, ., getKey, (, ), ., compareTo, (, o2, ., getKey, (, ), ), ;, }, }, :]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[compare, (, Pair, <, Double, ,, Integer, >, o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return]
[o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o2, ., getKey, (, ), ., compareTo, (]
[o1, ,, Pair, <, Double, ,, Integer, >, o2, ), {, return, o2, ., getKey, (, ), ., compareTo, (]
[{, return, o2, ., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;]
[{, return, o2, ., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;]
[getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;, Collections, ., sort, (]
[), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;, Collections, ., sort, (, list, ,]
[), ;, }, }, ;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =]
[}, ;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =, new, int, []
[comp, ), ;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =]
[;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;]
[;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;, i, <]
[], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[=, 0, ;, i, <, len, ;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =]
[=, 0, ;, i, <, len, ;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =]
[<, len, ;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (]
[i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;]
[i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;]
[), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;, x, []
[Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;, x, [, i, ], =]
[Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;, x, [, i, ], =]
[e, =, list, ., get, (, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;]
[e, =, list, ., get, (, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;]
[list, ., get, (, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, []
[(, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, [, i, ], =]
[(, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, [, i, ], =]
[(, ), ;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =]
[;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;]
[;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;]
[[, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[(, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], yInPlace, =]
[(, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], yInPlace, =]
[j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], yInPlace, =, yList, []
[++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ], yOrig, =]
[++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ], yOrig, =]
[j, ], ;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =]
[;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, []
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, []
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, []
[=, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, []
[], ], ;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return]
[;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return, copyOf, (]
[}, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return, copyOf, (, source, ,]
[}, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return, copyOf, (, source, ,]
[source, ., length, ), ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return]
[length, ), ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf, (]
[;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf, (, source, ,]
[;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf, (, source, ,]
[int, [, ], copyOf, (, int, [, ], source, ,, int, len, ), {, final, int, [, ], output, =]
[copyOf, (, int, [, ], source, ,, int, len, ), {, final, int, [, ], output, =, new, int, []
[[, ], source, ,, int, len, ), {, final, int, [, ], output, =, new, int, [, len, ], ;]
[[, ], source, ,, int, len, ), {, final, int, [, ], output, =, new, int, [, len, ], ;]
[int, len, ), {, final, int, [, ], output, =, new, int, [, len, ], ;, System, ., arraycopy, (]
[), {, final, int, [, ], output, =, new, int, [, len, ], ;, System, ., arraycopy, (, source, ,]
[final, int, [, ], output, =, new, int, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,]
[[, ], output, =, new, int, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,]
[output, =, new, int, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,]
[output, =, new, int, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,]
[[, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return]
[double, [, ], copyOf, (, double, [, ], source, ,, int, len, ), {, final, double, [, ], output, =]
[copyOf, (, double, [, ], source, ,, int, len, ), {, final, double, [, ], output, =, new, double, []
[[, ], source, ,, int, len, ), {, final, double, [, ], output, =, new, double, [, len, ], ;]
[[, ], source, ,, int, len, ), {, final, double, [, ], output, =, new, double, [, len, ], ;]
[int, len, ), {, final, double, [, ], output, =, new, double, [, len, ], ;, System, ., arraycopy, (]
[), {, final, double, [, ], output, =, new, double, [, len, ], ;, System, ., arraycopy, (, source, ,]
[final, double, [, ], output, =, new, double, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,]
[[, ], output, =, new, double, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,]
[output, =, new, double, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,]
[output, =, new, double, [, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,]
[[, len, ], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return]
[(, final, double, [, ], a, ,, final, double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =]
[(, final, double, [, ], a, ,, final, double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =]
[,, final, double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =, a, ., length, ;, if, (]
[,, final, double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =, a, ., length, ;, if, (]
[double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =, a, ., length, ;, if, (, len, !=]
[double, [, ], b, ), throws, DimensionMismatchException, {, final, int, len, =, a, ., length, ;, if, (, len, !=]
[DimensionMismatchException, {, final, int, len, =, a, ., length, ;, if, (, len, !=, b, ., length, ), {, throw]
[int, len, =, a, ., length, ;, if, (, len, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[=, a, ., length, ;, if, (, len, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,]
[=, a, ., length, ;, if, (, len, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==]
[throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return]
[throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return]
[throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return]
[DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, []
[,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *]
[,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *]
[., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *, b, []
[), {, return, a, [, 0, ], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =]
[a, [, 0, ], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, []
[[, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =]
[[, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =]
[prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;]
[prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;]
[new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[[, len, ], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, double, ai, =]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, double, ai, =]
[(, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, double, ai, =, a, []
[<, len, ;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =]
[<, len, ;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =]
[;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *]
[double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =]
[double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =]
[=, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -]
[a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (]
[a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (]
[i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca, -]
[SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =]
[SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =]
[ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -]
[ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =]
[ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =]
[(, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, []
[double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =]
[double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =]
[=, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *]
[double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =]
[double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =]
[=, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -]
[b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (]
[b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (]
[i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb, -]
[SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =]
[SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =]
[bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -]
[final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;]
[final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;]
[bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, []
[-, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =]
[-, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =]
[cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *]
[double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =]
[double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =]
[double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =]
[=, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *]
[-, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -]
[bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (]
[bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (]
[;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (]
[;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (]
[prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (]
[prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (]
[prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (]
[i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, []
[ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -]
[ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -]
[bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *]
[double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -]
[double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -]
[=, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *]
[bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -]
[bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -]
[(, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *]
[prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;]
[i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=]
[-, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =]
[-, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =]
[*, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, []
[bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =]
[bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =]
[;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, []
[final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =]
[final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =]
[prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +]
[], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =]
[], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =]
[double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -]
[1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =]
[1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =]
[], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (]
[], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (]
[double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -]
[sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (]
[sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (]
[prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -]
[double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +]
[sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (]
[sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (]
[sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -]
[(, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =]
[(, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =]
[-, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -]
[+, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =]
[prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;]
[prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;]
[sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <]
[;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;]
[;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;]
[=, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {]
[-, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =]
[-, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =]
[;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, []
[;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, []
[(, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +]
[<, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =]
[<, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =]
[;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +]
[++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;]
[{, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =]
[{, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =]
[=, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -]
[[, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;]
[+, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=]
[+, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=]
[1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (]
[1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (]
[;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -]
[final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (]
[final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (]
[sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -]
[prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +]
[;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (]
[;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (]
[=, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -]
[prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;]
[sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =]
[sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =]
[sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =]
[sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +]
[), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (]
[), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (]
[+, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +]
[), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (]
[), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (]
[sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN, (]
[result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =]
[(, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;]
[(, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;]
[., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++]
[{, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=, a, []
[int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=, a, [, i, ], *]
[int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=, a, [, i, ], *]
[=, 0, ;, i, <, len, ;, ++, i, ), {, result, +=, a, [, i, ], *, b, []
[;, ++, i, ), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }, }, return]
[double, a1, ,, final, double, b1, ,, final, double, a2, ,, final, double, b2, ), {, final, double, ca1, =]
[double, a1, ,, final, double, b1, ,, final, double, a2, ,, final, double, b2, ), {, final, double, ca1, =]
[,, final, double, b1, ,, final, double, a2, ,, final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *]
[double, a2, ,, final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[double, a2, ,, final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[,, final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -]
[final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[final, double, b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[b2, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[(, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[(, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *]
[b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[=, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[(, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[(, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *]
[b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[=, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[-, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[=, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -]
[s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[=, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =]
[=, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =]
[prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (]
[s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +]
[s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +]
[prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (]
[prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (]
[;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (]
[s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[(, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[(, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[(, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, ;, }, return]
[double, a2, ,, final, double, b2, ,, final, double, a3, ,, final, double, b3, ), {, final, double, ca1, =]
[double, a2, ,, final, double, b2, ,, final, double, a3, ,, final, double, b3, ), {, final, double, ca1, =]
[,, final, double, b2, ,, final, double, a3, ,, final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *]
[double, a3, ,, final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[double, a3, ,, final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[,, final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -]
[final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[final, double, b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[b3, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[(, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[(, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *]
[b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[=, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[(, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[(, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *]
[b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[=, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =]
[-, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -]
[a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (]
[a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (]
[b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -]
[SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =]
[SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =]
[a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -]
[ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =]
[ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =]
[(, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *]
[final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =]
[final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =]
[a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -]
[=, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (]
[=, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (]
[-, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -]
[SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =]
[SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =]
[b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -]
[cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =]
[cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =]
[(, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *]
[b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (]
[b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -]
[double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -]
[=, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *]
[b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -]
[b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -]
[final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *]
[=, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -]
[=, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -]
[*, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =]
[*, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +]
[b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[-, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[=, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -]
[s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[(, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -]
[final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =]
[final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =]
[double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (]
[double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (]
[=, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -]
[s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (]
[s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (]
[prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -]
[s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +]
[=, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (]
[=, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (]
[-, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -]
[=, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =]
[=, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =]
[prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +]
[s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +]
[), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[(, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +]
[;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (]
[;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (]
[s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (]
[+, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +]
[Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *]
[result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, ;, }, return]
[double, a3, ,, final, double, b3, ,, final, double, a4, ,, final, double, b4, ), {, final, double, ca1, =]
[double, a3, ,, final, double, b3, ,, final, double, a4, ,, final, double, b4, ), {, final, double, ca1, =]
[,, final, double, b3, ,, final, double, a4, ,, final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *]
[double, a4, ,, final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[double, a4, ,, final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =]
[,, final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -]
[final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[final, double, b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (]
[b4, ), {, final, double, ca1, =, SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[SPLIT_FACTOR, *, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =]
[a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =]
[(, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =]
[a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[=, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =]
[b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =]
[(, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =]
[b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *]
[b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -]
[=, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -]
[final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[=, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (]
[b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =]
[a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =]
[(, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =]
[a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[=, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =]
[b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =]
[(, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =]
[b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *]
[b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -]
[=, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -]
[final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[=, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =]
[b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =]
[-, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -]
[a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (]
[a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (]
[b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -]
[SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =]
[SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =]
[a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -]
[ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =]
[ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =]
[(, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *]
[final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =]
[final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =]
[a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -]
[=, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (]
[=, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (]
[-, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -]
[SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =]
[SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =]
[b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -]
[cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =]
[cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =]
[(, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =]
[b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *]
[b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (]
[b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -]
[double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -]
[=, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *]
[b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -]
[b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -]
[final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *]
[=, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -]
[=, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -]
[*, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =]
[*, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *]
[b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =]
[b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =]
[-, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -]
[a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (]
[a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (]
[b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -]
[SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =]
[SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =]
[a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -]
[ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =]
[ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =]
[(, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *]
[final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =]
[final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =]
[a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -]
[=, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (]
[=, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (]
[-, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -]
[SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =]
[SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =]
[b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -]
[cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =]
[cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =]
[(, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *]
[final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =]
[final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =]
[final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =]
[b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *]
[b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -]
[-, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (]
[-, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (]
[b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (]
[b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (]
[;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (]
[;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (]
[double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -]
[double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -]
[=, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *]
[b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -]
[b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -]
[final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *]
[=, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -]
[=, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -]
[*, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *]
[-, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =]
[-, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =]
[*, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +]
[b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =]
[-, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (]
[=, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (]
[prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -]
[s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[=, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =]
[(, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[(, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -]
[final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =]
[final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =]
[double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (]
[double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (]
[=, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -]
[s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (]
[s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (]
[prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -]
[s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +]
[=, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (]
[=, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (]
[-, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -]
[(, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =]
[(, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +]
[), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =]
[), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =]
[(, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -]
[final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =]
[final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =]
[double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (]
[double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (]
[=, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -]
[s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (]
[s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (]
[prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -]
[s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +]
[=, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (]
[=, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (]
[-, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -]
[=, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =]
[=, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =]
[prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +]
[s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +]
[), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[(, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +]
[-, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +]
[), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +]
[s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (]
[s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (]
[+, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (]
[+, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +]
[if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +]
[Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *]
[isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +]
[isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +]
[result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *]
[result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return]
[;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[}, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (]
[}, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (]
[static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==]
[(, float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||]
[float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==]
[], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return]
[y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[(, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return]
[if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, []
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,]
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,]
[length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, []
[if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return]
[equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[}, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (]
[}, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (]
[static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==]
[(, float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||]
[float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[float, [, ], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[], x, ,, float, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==]
[], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return]
[y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[(, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return]
[if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, []
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,]
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,]
[length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, []
[if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return]
[equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return]
[;, }, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[;, }, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[}, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (]
[}, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (]
[static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==]
[(, double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||]
[double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==]
[], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return]
[y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[(, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return]
[if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, []
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,]
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,]
[length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, []
[if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return]
[equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[}, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (]
[}, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (]
[static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==]
[(, double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||]
[double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[double, [, ], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (]
[], x, ,, double, [, ], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==]
[], y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return]
[y, ), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[), {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (]
[(, (, x, ==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[{, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=]
[(, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return]
[if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (]
[=, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, []
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,]
[x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,]
[length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, []
[if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return]
[equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return]
[double, [, ], normalizeArray, (, double, [, ], values, ,, double, normalizedSum, ), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (]
[double, [, ], normalizeArray, (, double, [, ], values, ,, double, normalizedSum, ), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (]
[(, double, [, ], values, ,, double, normalizedSum, ), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (, Double, ., isInfinite, (]
[,, double, normalizedSum, ), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (, Double, ., isInfinite, (, normalizedSum, ), ), {, throw]
[), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (, Double, ., isInfinite, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (]
[), throws, MathIllegalArgumentException, ,, MathArithmeticException, {, if, (, Double, ., isInfinite, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (]
[Double, ., isInfinite, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (]
[Double, ., isInfinite, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (]
[normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw]
[LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (]
[LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (]
[., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =, 0d, ;, final, int, len, =]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =, 0d, ;, final, int, len, =]
[;, }, double, sum, =, 0d, ;, final, int, len, =, values, ., length, ;, double, [, ], out, =]
[sum, =, 0d, ;, final, int, len, =, values, ., length, ;, double, [, ], out, =, new, double, []
[values, ., length, ;, double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =]
[length, ;, double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[length, ;, double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[len, ], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (]
[(, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (]
[i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, []
[len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw]
[++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (]
[++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (]
[(, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,]
[(, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,]
[., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, []
[values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (]
[throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !]
[throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !]
[LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (]
[LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (]
[INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, []
[], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {]
[i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum, +=]
[i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum, +=]
[;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum, +=, values, []
[isNaN, (, values, [, i, ], ), ), {, sum, +=, values, [, i, ], ;, }, }, if, (]
[isNaN, (, values, [, i, ], ), ), {, sum, +=, values, [, i, ], ;, }, }, if, (]
[values, [, i, ], ), ), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==]
[), ), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw]
[sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (]
[sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (]
[sum, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =]
[0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;]
[new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (]
[(, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (]
[i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (, values, []
[<, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {]
[<, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, []
[), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, [, i, ], =]
[), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, [, i, ], =]
[(, values, [, i, ], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {]
[(, values, [, i, ], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {]
[[, i, ], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, []
[), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =]
[), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =]
[), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =]
[), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =]
[{, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, []
[i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ], *]
[=, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum, /]
[}, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum, /, sum, ;, }, }, return]
[<, T, >, T, [, ], buildArray, (, final, Field, <, T, >, field, ,, final, int, length, ), {]
[T, [, ], buildArray, (, final, Field, <, T, >, field, ,, final, int, length, ), {, @, SuppressWarnings, (]
[<, T, >, field, ,, final, int, length, ), {, @, SuppressWarnings, (, "unchecked", ), T, [, ], array, =]
[final, int, length, ), {, @, SuppressWarnings, (, "unchecked", ), T, [, ], array, =, (, T, [, ], )]
[final, int, length, ), {, @, SuppressWarnings, (, "unchecked", ), T, [, ], array, =, (, T, [, ], )]
[{, @, SuppressWarnings, (, "unchecked", ), T, [, ], array, =, (, T, [, ], ), Array, ., newInstance, (]
[{, @, SuppressWarnings, (, "unchecked", ), T, [, ], array, =, (, T, [, ], ), Array, ., newInstance, (]
[T, [, ], array, =, (, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,]
[array, =, (, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;]
[array, =, (, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;]
[[, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;, Arrays, ., fill, (]
[), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;, Arrays, ., fill, (, array, ,]
[), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;, Arrays, ., fill, (, array, ,]
[(, ), ,, length, ), ;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return]
[length, ), ;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }]
[Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings, (]
[,, final, int, rows, ,, final, int, columns, ), {, final, T, [, ], [, ], array, ;, if, (]
[,, final, int, rows, ,, final, int, columns, ), {, final, T, [, ], [, ], array, ;, if, (]
[int, rows, ,, final, int, columns, ), {, final, T, [, ], [, ], array, ;, if, (, columns, <]
[final, T, [, ], [, ], array, ;, if, (, columns, <, 0, ), {, T, [, ], dummyRow, =]
[[, ], [, ], array, ;, if, (, columns, <, 0, ), {, T, [, ], dummyRow, =, buildArray, (]
[[, ], array, ;, if, (, columns, <, 0, ), {, T, [, ], dummyRow, =, buildArray, (, field, ,]
[;, if, (, columns, <, 0, ), {, T, [, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;]
[(, columns, <, 0, ), {, T, [, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =]
[[, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ], [, ], )]
[[, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ], [, ], )]
[buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (]
[buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (]
[;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,]
[], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, ), ;, }, else, {]
[], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, ), ;, }, else, {, array, =]
[., getClass, (, ), ,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], )]
[., getClass, (, ), ,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], )]
[,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (]
[,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (]
[{, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,]
[T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ]]
[[, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ], {]
[[, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,]
[getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =]
[), ,, new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;]
[), ,, new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;]
[new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <]
[[, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (, array, []
[=, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,]
[=, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,]
[{, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), ), ;, }, }, return]
[double, [, ], convolve, (, double, [, ], x, ,, double, [, ], h, ), throws, NullArgumentException, ,, NoDataException, {]
[double, [, ], convolve, (, double, [, ], x, ,, double, [, ], h, ), throws, NullArgumentException, ,, NoDataException, {]
[(, double, [, ], x, ,, double, [, ], h, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (]
[], x, ,, double, [, ], h, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, x, ), ;]
[], x, ,, double, [, ], h, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, x, ), ;]
[[, ], h, ), throws, NullArgumentException, ,, NoDataException, {, MathUtils, ., checkNotNull, (, x, ), ;, MathUtils, ., checkNotNull, (]
[NoDataException, {, MathUtils, ., checkNotNull, (, x, ), ;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =]
[NoDataException, {, MathUtils, ., checkNotNull, (, x, ), ;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =]
[;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =]
[;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =]
[), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (]
[), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (]
[), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (]
[final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==]
[xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||]
[xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||]
[x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||, hLen, ==]
[final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||, hLen, ==, 0, ), {, throw]
[xLen, ==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =]
[xLen, ==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =]
[xLen, ==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =]
[0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +]
[hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -]
[(, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final, double, [, ], y, =]
[}, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final, double, [, ], y, =, new, double, []
[-, 1, ;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =]
[;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;]
[;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;]
[double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;, n, <]
[], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;, n, <, totalLength, ;]
[], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;, n, <, totalLength, ;]
[], ;, for, (, int, n, =, 0, ;, n, <, totalLength, ;, n, ++, ), {, double, yn, =]
[n, =, 0, ;, n, <, totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =]
[n, =, 0, ;, n, <, totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =]
[n, <, totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (]
[totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,]
[totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,]
[totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,]
[n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n, +]
[), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1, -]
[;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =]
[;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =]
[k, =, FastMath, ., max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -]
[max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (]
[max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (]
[max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (]
[0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <]
[n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&]
[n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&]
[1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=]
[), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {]
[int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=]
[int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=]
[int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=]
[=, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, []
[=, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, []
[;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *]
[;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *]
[(, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, []
[(, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, []
[j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }]
[j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }]
[0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, []
[yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n, ], =]
[j, --, ], *, h, [, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }, return]
[,, TAIL, }, public, static, void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ), {]
[}, public, static, void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ), {, shuffle, (]
[static, void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ), {, shuffle, (, list, ,]
[shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ), {, shuffle, (, list, ,, start, ,]
[int, [, ], list, ,, int, start, ,, Position, pos, ), {, shuffle, (, list, ,, start, ,, pos, ,]
[void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ,, RandomGenerator, rng, ), {, switch, (]
[[, ], list, ,, int, start, ,, Position, pos, ,, RandomGenerator, rng, ), {, switch, (, pos, ), {, case]
[pos, ,, RandomGenerator, rng, ), {, switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =]
[pos, ,, RandomGenerator, rng, ), {, switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =]
[pos, ,, RandomGenerator, rng, ), {, switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =]
[), {, switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =, list, ., length, -]
[switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;]
[switch, (, pos, ), {, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;]
[pos, ), {, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;, i, >=]
[{, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;, i, >=, start, ;]
[{, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;, i, >=, start, ;]
[list, ., length, -, 1, ;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (]
[list, ., length, -, 1, ;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (]
[length, -, 1, ;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==]
[;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {]
[>=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =]
[), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {]
[final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =]
[final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =]
[;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (]
[(, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,]
[==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,]
[=, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =]
[=, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =]
[UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, []
[,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, []
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[(, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, []
[}, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;]
[}, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;]
[int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, []
[list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =]
[target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, case]
[list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =]
[i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;]
[i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;]
[=, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i, <=]
[;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i, <=, start, ;]
[;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i, <=, start, ;]
[(, int, i, =, 0, ;, i, <=, start, ;, i, ++, ), {, final, int, target, ;, if, (]
[(, int, i, =, 0, ;, i, <=, start, ;, i, ++, ), {, final, int, target, ;, if, (]
[i, =, 0, ;, i, <=, start, ;, i, ++, ), {, final, int, target, ;, if, (, i, ==]
[;, i, <=, start, ;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {]
[<=, start, ;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =]
[), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {]
[final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =]
[final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =]
[;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (]
[(, i, ==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,]
[==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,]
[=, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =]
[=, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =]
[UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, []
[,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, []
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[(, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, []
[}, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;]
[}, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;]
[int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, []
[list, [, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =]
[=, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :, throw]
[MathInternalError, (, ), ;, }, }, public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {]
[), ;, }, }, public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (]
[}, }, public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (, list, ,]
[public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (, list, ,, 0, ,]
[public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (, list, ,, 0, ,]
[(, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (, list, ,, 0, ,, Position, ., TAIL, ,]
[,, Position, ., TAIL, ,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {]
[., TAIL, ,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (]
[,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (, list, ,]
