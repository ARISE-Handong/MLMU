[;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions, ., checkState, (, !, compiler, ., getLifeCycleStage, (, )]
[;, }, }, ;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions, ., checkState, (, !, compiler, .]
[-, v2, ., index, ;, }, }, ;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions, ., checkState]
[., index, -, v2, ., index, ;, }, }, ;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions]
[;, }, }, ;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions, ., checkState, (, !, compiler, .]
[., index, ;, }, }, ;, CoalesceVariableNames, (, AbstractCompiler, compiler, ,, boolean, usePseudoNames, ), {, Preconditions, ., checkState, (, !]
[;, this, ., compiler, =, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames]
[., checkState, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler]
[), ;, this, ., compiler, =, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =]
[), ;, this, ., compiler, =, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =]
[., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, this, ., compiler, =, compiler, ;, colorings, =, Lists, .]
[=, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames, ;, }, @, Override]
[., compiler, =, compiler, ;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames, ;, }]
[;, colorings, =, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames, ;, }, @, Override, public, void]
[=, Lists, ., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames, ;, }, @, Override, public, void, process, (]
[;, this, ., usePseudoNames, =, usePseudoNames, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., newLinkedList, (, ), ;, this, ., usePseudoNames, =, usePseudoNames, ;, }, @, Override, public, void, process, (, Node, externs]
[=, usePseudoNames, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., usePseudoNames, =, usePseudoNames, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, static, boolean, shouldOptimizeScope, (, Scope, scope, ), {, if, (, scope, ., isGlobal, (, ), ), {]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, private, static, boolean, shouldOptimizeScope, (, Scope, scope, ), {]
[,, root, ,, this, ), ;, }, private, static, boolean, shouldOptimizeScope, (, Scope, scope, ), {, if, (, scope, .]
[,, this, ), ;, }, private, static, boolean, shouldOptimizeScope, (, Scope, scope, ), {, if, (, scope, ., isGlobal, (]
[), ;, }, private, static, boolean, shouldOptimizeScope, (, Scope, scope, ), {, if, (, scope, ., isGlobal, (, ), )]
[), {, return, false, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, scope, ., getVarCount, (, ), ), {, return]
[., isGlobal, (, ), ), {, return, false, ;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, scope, ., getVarCount, (]
[;, }, if, (, LiveVariablesAnalysis, ., MAX_VARIABLES_TO_ANALYZE, <, scope, ., getVarCount, (, ), ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, true, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[<, scope, ., getVarCount, (, ), ), {, return, false, ;, }, return, true, ;, }, @, Override, public, void]
[., MAX_VARIABLES_TO_ANALYZE, <, scope, ., getVarCount, (, ), ), {, return, false, ;, }, return, true, ;, }, @, Override]
[), {, return, false, ;, }, return, true, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[., getVarCount, (, ), ), {, return, false, ;, }, return, true, ;, }, @, Override, public, void, enterScope, (]
[;, }, return, true, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =, t]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, )]
[;, if, (, !, shouldOptimizeScope, (, scope, ), ), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t]
[., getScope, (, ), ;, if, (, !, shouldOptimizeScope, (, scope, ), ), {, return, ;, }, ControlFlowGraph, <, Node]
[), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, LiveVariablesAnalysis, liveness, =]
[), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, LiveVariablesAnalysis, liveness, =]
[), ), {, return, ;, }, ControlFlowGraph, <, Node, >, cfg, =, t, ., getControlFlowGraph, (, ), ;, LiveVariablesAnalysis, liveness]
[;, LiveVariablesAnalysis, liveness, =, new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, ), ;, if, (, scope, ., getRootNode, (]
[., getControlFlowGraph, (, ), ;, LiveVariablesAnalysis, liveness, =, new, LiveVariablesAnalysis, (, cfg, ,, scope, ,, compiler, ), ;, if, (]
[;, if, (, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (, )]
[,, scope, ,, compiler, ), ;, if, (, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (]
[,, compiler, ), ;, if, (, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), .]
[), ;, if, (, scope, ., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (]
[), {, liveness, ., markAllParametersEscaped, (, ), ;, }, liveness, ., analyze, (, ), ;, UndiGraph, <, Var, ,, Void]
[==, 2, ), {, liveness, ., markAllParametersEscaped, (, ), ;, }, liveness, ., analyze, (, ), ;, UndiGraph, <, Var]
[., getChildCount, (, ), ==, 2, ), {, liveness, ., markAllParametersEscaped, (, ), ;, }, liveness, ., analyze, (, )]
[., getNext, (, ), ., getChildCount, (, ), ==, 2, ), {, liveness, ., markAllParametersEscaped, (, ), ;, }, liveness]
[., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (, ), ==, 2, ), {, liveness, ., markAllParametersEscaped, (]
[., getRootNode, (, ), ., getFirstChild, (, ), ., getNext, (, ), ., getChildCount, (, ), ==, 2, ), {]
[), {, liveness, ., markAllParametersEscaped, (, ), ;, }, liveness, ., analyze, (, ), ;, UndiGraph, <, Var, ,, Void]
[;, }, liveness, ., analyze, (, ), ;, UndiGraph, <, Var, ,, Void, >, interferenceGraph, =, computeVariableNamesInterferenceGraph, (, t, ,]
[., markAllParametersEscaped, (, ), ;, }, liveness, ., analyze, (, ), ;, UndiGraph, <, Var, ,, Void, >, interferenceGraph, =]
[;, UndiGraph, <, Var, ,, Void, >, interferenceGraph, =, computeVariableNamesInterferenceGraph, (, t, ,, cfg, ,, liveness, ., getEscapedLocals, (, )]
[., analyze, (, ), ;, UndiGraph, <, Var, ,, Void, >, interferenceGraph, =, computeVariableNamesInterferenceGraph, (, t, ,, cfg, ,, liveness]
[;, GraphColoring, <, Var, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Var, ,, Void, >, (, interferenceGraph, ,, coloringTieBreaker]
[,, cfg, ,, liveness, ., getEscapedLocals, (, ), ), ;, GraphColoring, <, Var, ,, Void, >, coloring, =, new, GreedyGraphColoring]
[,, liveness, ., getEscapedLocals, (, ), ), ;, GraphColoring, <, Var, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Var]
[), ;, GraphColoring, <, Var, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Var, ,, Void, >, (, interferenceGraph, ,]
[., getEscapedLocals, (, ), ), ;, GraphColoring, <, Var, ,, Void, >, coloring, =, new, GreedyGraphColoring, <, Var, ,, Void]
[;, coloring, ., color, (, ), ;, colorings, ., push, (, coloring, ), ;, }, @, Override, public, void, exitScope]
[,, coloringTieBreaker, ), ;, coloring, ., color, (, ), ;, colorings, ., push, (, coloring, ), ;, }, @, Override]
[), ;, coloring, ., color, (, ), ;, colorings, ., push, (, coloring, ), ;, }, @, Override, public, void]
[;, colorings, ., push, (, coloring, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if]
[., color, (, ), ;, colorings, ., push, (, coloring, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, shouldOptimizeScope, (, t, ., getScope]
[., push, (, coloring, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, shouldOptimizeScope, (, t, .]
[), {, return, ;, }, colorings, ., pop, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, return, ;, }, colorings, ., pop, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), ), {, return, ;, }, colorings, ., pop, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[., getScope, (, ), ), ), {, return, ;, }, colorings, ., pop, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., pop, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), .]
[||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, Var, var]
[., isEmpty, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), .]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), .]
[., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, Var, var, =, t, .]
[), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (]
[., isFunction, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[;, GraphNode, <, Var, ,, ?, >, vNode, =, colorings, ., peek, (, ), ., getGraph, (, ), ., getNode]
[., getVar, (, n, ., getString, (, ), ), ;, GraphNode, <, Var, ,, ?, >, vNode, =, colorings, .]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, GraphNode, <, Var, ,, ?, >]
[), ;, GraphNode, <, Var, ,, ?, >, vNode, =, colorings, ., peek, (, ), ., getGraph, (, ), .]
[., getString, (, ), ), ;, GraphNode, <, Var, ,, ?, >, vNode, =, colorings, ., peek, (, ), .]
[;, if, (, vNode, ==, null, ), {, return, ;, }, Var, coalescedVar, =, colorings, ., peek, (, ), .]
[., getNode, (, var, ), ;, if, (, vNode, ==, null, ), {, return, ;, }, Var, coalescedVar, =, colorings]
[., getGraph, (, ), ., getNode, (, var, ), ;, if, (, vNode, ==, null, ), {, return, ;, }]
[., peek, (, ), ., getGraph, (, ), ., getNode, (, var, ), ;, if, (, vNode, ==, null, )]
[), ;, if, (, vNode, ==, null, ), {, return, ;, }, Var, coalescedVar, =, colorings, ., peek, (, )]
[), {, return, ;, }, Var, coalescedVar, =, colorings, ., peek, (, ), ., getPartitionSuperNode, (, var, ), ;, if]
[==, null, ), {, return, ;, }, Var, coalescedVar, =, colorings, ., peek, (, ), ., getPartitionSuperNode, (, var, )]
[), {, return, ;, }, Var, coalescedVar, =, colorings, ., peek, (, ), ., getPartitionSuperNode, (, var, ), ;, if]
[;, if, (, !, usePseudoNames, ), {, if, (, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), )]
[., getPartitionSuperNode, (, var, ), ;, if, (, !, usePseudoNames, ), {, if, (, vNode, ., getValue, (, ), .]
[., peek, (, ), ., getPartitionSuperNode, (, var, ), ;, if, (, !, usePseudoNames, ), {, if, (, vNode, .]
[), ;, if, (, !, usePseudoNames, ), {, if, (, vNode, ., getValue, (, ), ., equals, (, coalescedVar, )]
[), {, if, (, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), ), {, return, ;, }, n]
[), {, if, (, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), ), {, return, ;, }, n]
[), {, return, ;, }, n, ., setString, (, coalescedVar, ., name, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., equals, (, coalescedVar, ), ), {, return, ;, }, n, ., setString, (, coalescedVar, ., name, ), ;, compiler]
[., getValue, (, ), ., equals, (, coalescedVar, ), ), {, return, ;, }, n, ., setString, (, coalescedVar, .]
[), ), {, return, ;, }, n, ., setString, (, coalescedVar, ., name, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, if, (, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, )]
[., setString, (, coalescedVar, ., name, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, parent, ., isVar, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, if, (, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n]
[., name, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, parent, ., isVar, (, ), ), {, removeVarDeclaration]
[;, if, (, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, else, {, String]
[., reportCodeChange, (, ), ;, if, (, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }]
[), {, removeVarDeclaration, (, n, ), ;, }, }, else, {, String, pseudoName, =, null, ;, Set, <, String, >]
[., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, else, {, String, pseudoName, =, null, ;]
[;, }, }, else, {, String, pseudoName, =, null, ;, Set, <, String, >, allMergedNames, =, Sets, ., newTreeSet, (]
[), ;, }, }, else, {, String, pseudoName, =, null, ;, Set, <, String, >, allMergedNames, =, Sets, ., newTreeSet]
[;, Set, <, String, >, allMergedNames, =, Sets, ., newTreeSet, (, ), ;, for, (, Iterator, <, Var, >, i]
[;, for, (, Iterator, <, Var, >, i, =, t, ., getScope, (, ), ., getVars, (, ), ;, i]
[., newTreeSet, (, ), ;, for, (, Iterator, <, Var, >, i, =, t, ., getScope, (, ), ., getVars]
[;, i, ., hasNext, (, ), ;, ), {, Var, iVar, =, i, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, iVar, =, i, ., next, (]
[., getScope, (, ), ., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, iVar, =]
[;, ), {, Var, iVar, =, i, ., next, (, ), ;, if, (, colorings, ., peek, (, ), .]
[., hasNext, (, ), ;, ), {, Var, iVar, =, i, ., next, (, ), ;, if, (, colorings, .]
[;, if, (, colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar, ), !=, null, &&]
[., next, (, ), ;, if, (, colorings, ., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar]
[), {, allMergedNames, ., add, (, iVar, ., name, ), ;, }, }, if, (, allMergedNames, ., size, (, )]
[&&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), ), {, allMergedNames, .]
[!=, null, &&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), ), {]
[., getNode, (, iVar, ), !=, null, &&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (]
[., getGraph, (, ), ., getNode, (, iVar, ), !=, null, &&, coalescedVar, ., equals, (, colorings, ., peek, (]
[., peek, (, ), ., getGraph, (, ), ., getNode, (, iVar, ), !=, null, &&, coalescedVar, ., equals, (]
[), !=, null, &&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), )]
[&&, coalescedVar, ., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), ), {, allMergedNames, .]
[), {, allMergedNames, ., add, (, iVar, ., name, ), ;, }, }, if, (, allMergedNames, ., size, (, )]
[., equals, (, colorings, ., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), ), {, allMergedNames, ., add, (]
[), ), {, allMergedNames, ., add, (, iVar, ., name, ), ;, }, }, if, (, allMergedNames, ., size, (]
[., getPartitionSuperNode, (, iVar, ), ), ), {, allMergedNames, ., add, (, iVar, ., name, ), ;, }, }, if]
[., peek, (, ), ., getPartitionSuperNode, (, iVar, ), ), ), {, allMergedNames, ., add, (, iVar, ., name, )]
[), ), ), {, allMergedNames, ., add, (, iVar, ., name, ), ;, }, }, if, (, allMergedNames, ., size]
[;, }, }, if, (, allMergedNames, ., size, (, ), ==, 1, ), {, return, ;, }, pseudoName, =, Joiner]
[., add, (, iVar, ., name, ), ;, }, }, if, (, allMergedNames, ., size, (, ), ==, 1, )]
[), ;, }, }, if, (, allMergedNames, ., size, (, ), ==, 1, ), {, return, ;, }, pseudoName, =]
[., name, ), ;, }, }, if, (, allMergedNames, ., size, (, ), ==, 1, ), {, return, ;, }]
[), {, return, ;, }, pseudoName, =, Joiner, ., on, (, "_", ), ., join, (, allMergedNames, ), ;, while]
[==, 1, ), {, return, ;, }, pseudoName, =, Joiner, ., on, (, "_", ), ., join, (, allMergedNames, )]
[., size, (, ), ==, 1, ), {, return, ;, }, pseudoName, =, Joiner, ., on, (, "_", ), .]
[), {, return, ;, }, pseudoName, =, Joiner, ., on, (, "_", ), ., join, (, allMergedNames, ), ;, while]
[=, Joiner, ., on, (, "_", ), ., join, (, allMergedNames, ), ;, while, (, t, ., getScope, (, )]
[;, while, (, t, ., getScope, (, ), ., isDeclared, (, pseudoName, ,, true, ), ), {, pseudoName, +=, "$"]
[., join, (, allMergedNames, ), ;, while, (, t, ., getScope, (, ), ., isDeclared, (, pseudoName, ,, true, )]
[., on, (, "_", ), ., join, (, allMergedNames, ), ;, while, (, t, ., getScope, (, ), ., isDeclared]
[), ., join, (, allMergedNames, ), ;, while, (, t, ., getScope, (, ), ., isDeclared, (, pseudoName, ,, true]
[), ;, while, (, t, ., getScope, (, ), ., isDeclared, (, pseudoName, ,, true, ), ), {, pseudoName, +=]
[), {, pseudoName, +=, "$", ;, }, n, ., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., isDeclared, (, pseudoName, ,, true, ), ), {, pseudoName, +=, "$", ;, }, n, ., setString, (, pseudoName, )]
[., getScope, (, ), ., isDeclared, (, pseudoName, ,, true, ), ), {, pseudoName, +=, "$", ;, }, n, .]
[,, true, ), ), {, pseudoName, +=, "$", ;, }, n, ., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange]
[), ), {, pseudoName, +=, "$", ;, }, n, ., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange, (, )]
[+=, "$", ;, }, n, ., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, !]
[;, }, n, ., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, !, vNode, .]
[;, compiler, ., reportCodeChange, (, ), ;, if, (, !, vNode, ., getValue, (, ), ., equals, (, coalescedVar, )]
[., setString, (, pseudoName, ), ;, compiler, ., reportCodeChange, (, ), ;, if, (, !, vNode, ., getValue, (, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, if, (, !, vNode, ., getValue, (, ), ., equals, (, coalescedVar]
[;, if, (, !, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), &&, parent, ., isVar, (, )]
[., reportCodeChange, (, ), ;, if, (, !, vNode, ., getValue, (, ), ., equals, (, coalescedVar, ), &&, parent]
[), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <, Var, ,, Void, >, computeVariableNamesInterferenceGraph, (, NodeTraversal]
[&&, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <, Var]
[&&, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <, Var]
[., equals, (, coalescedVar, ), &&, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }]
[., getValue, (, ), ., equals, (, coalescedVar, ), &&, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n]
[), &&, parent, ., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <]
[), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <, Var, ,, Void, >, computeVariableNamesInterferenceGraph, (, NodeTraversal]
[., isVar, (, ), ), {, removeVarDeclaration, (, n, ), ;, }, }, }, private, UndiGraph, <, Var, ,, Void]
[;, }, }, }, private, UndiGraph, <, Var, ,, Void, >, computeVariableNamesInterferenceGraph, (, NodeTraversal, t, ,, ControlFlowGraph, <, Node, >]
[), ;, }, }, }, private, UndiGraph, <, Var, ,, Void, >, computeVariableNamesInterferenceGraph, (, NodeTraversal, t, ,, ControlFlowGraph, <, Node]
[;, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Iterator, <, Var, >, i, =, scope, .]
[., create, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Iterator, <, Var, >]
[;, for, (, Iterator, <, Var, >, i, =, scope, ., getVars, (, ), ;, i, ., hasNext, (, )]
[., getScope, (, ), ;, for, (, Iterator, <, Var, >, i, =, scope, ., getVars, (, ), ;, i]
[;, i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (]
[;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, !, escaped, ., contains, (, v]
[., hasNext, (, ), ;, ), {, Var, v, =, i, ., next, (, ), ;, if, (, !, escaped]
[;, if, (, !, escaped, ., contains, (, v, ), ), {, if, (, !, v, ., getParentNode, (, )]
[., next, (, ), ;, if, (, !, escaped, ., contains, (, v, ), ), {, if, (, !, v]
[), {, if, (, !, v, ., getParentNode, (, ), ., isFunction, (, ), ), {, interferenceGraph, ., createNode, (]
[), {, if, (, !, v, ., getParentNode, (, ), ., isFunction, (, ), ), {, interferenceGraph, ., createNode, (]
[., contains, (, v, ), ), {, if, (, !, v, ., getParentNode, (, ), ., isFunction, (, ), )]
[), ), {, if, (, !, v, ., getParentNode, (, ), ., isFunction, (, ), ), {, interferenceGraph, ., createNode]
[), {, interferenceGraph, ., createNode, (, v, ), ;, }, }, }, for, (, Iterator, <, Var, >, i1, =]
[), {, interferenceGraph, ., createNode, (, v, ), ;, }, }, }, for, (, Iterator, <, Var, >, i1, =]
[., isFunction, (, ), ), {, interferenceGraph, ., createNode, (, v, ), ;, }, }, }, for, (, Iterator, <]
[., getParentNode, (, ), ., isFunction, (, ), ), {, interferenceGraph, ., createNode, (, v, ), ;, }, }, }]
[;, }, }, }, for, (, Iterator, <, Var, >, i1, =, scope, ., getVars, (, ), ;, i1, .]
[., createNode, (, v, ), ;, }, }, }, for, (, Iterator, <, Var, >, i1, =, scope, ., getVars]
[), ;, }, }, }, for, (, Iterator, <, Var, >, i1, =, scope, ., getVars, (, ), ;, i1]
[;, i1, ., hasNext, (, ), ;, ), {, Var, v1, =, i1, ., next, (, ), ;, NEXT_VAR_PAIR, :]
[., getVars, (, ), ;, i1, ., hasNext, (, ), ;, ), {, Var, v1, =, i1, ., next, (]
[;, ), {, Var, v1, =, i1, ., next, (, ), ;, NEXT_VAR_PAIR, :, for, (, Iterator, <, Var, >]
[., hasNext, (, ), ;, ), {, Var, v1, =, i1, ., next, (, ), ;, NEXT_VAR_PAIR, :, for, (]
[;, NEXT_VAR_PAIR, :, for, (, Iterator, <, Var, >, i2, =, scope, ., getVars, (, ), ;, i2, ., hasNext]
[., next, (, ), ;, NEXT_VAR_PAIR, :, for, (, Iterator, <, Var, >, i2, =, scope, ., getVars, (, )]
[;, i2, ., hasNext, (, ), ;, ), {, Var, v2, =, i2, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, i2, ., hasNext, (, ), ;, ), {, Var, v2, =, i2, ., next, (]
[;, ), {, Var, v2, =, i2, ., next, (, ), ;, if, (, v1, ., index, >=, v2, .]
[., hasNext, (, ), ;, ), {, Var, v2, =, i2, ., next, (, ), ;, if, (, v1, .]
[;, if, (, v1, ., index, >=, v2, ., index, ), {, continue, ;, }, if, (, !, interferenceGraph, .]
[., next, (, ), ;, if, (, v1, ., index, >=, v2, ., index, ), {, continue, ;, }, if]
[), {, continue, ;, }, if, (, !, interferenceGraph, ., hasNode, (, v1, ), ||, !, interferenceGraph, ., hasNode, (]
[>=, v2, ., index, ), {, continue, ;, }, if, (, !, interferenceGraph, ., hasNode, (, v1, ), ||, !]
[., index, >=, v2, ., index, ), {, continue, ;, }, if, (, !, interferenceGraph, ., hasNode, (, v1, )]
[), {, continue, ;, }, if, (, !, interferenceGraph, ., hasNode, (, v1, ), ||, !, interferenceGraph, ., hasNode, (]
[., index, ), {, continue, ;, }, if, (, !, interferenceGraph, ., hasNode, (, v1, ), ||, !, interferenceGraph, .]
[), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (, ), ., isParamList, (, ), &&, v2, .]
[||, !, interferenceGraph, ., hasNode, (, v2, ), ), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (]
[||, !, interferenceGraph, ., hasNode, (, v2, ), ), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (]
[., hasNode, (, v1, ), ||, !, interferenceGraph, ., hasNode, (, v2, ), ), {, continue, NEXT_VAR_PAIR, ;, }, if]
[), ||, !, interferenceGraph, ., hasNode, (, v2, ), ), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode]
[), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (, ), ., isParamList, (, ), &&, v2, .]
[), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (, ), ., isParamList, (, ), &&, v2, .]
[., hasNode, (, v2, ), ), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (, ), ., isParamList]
[), ), {, continue, NEXT_VAR_PAIR, ;, }, if, (, v1, ., getParentNode, (, ), ., isParamList, (, ), &&, v2]
[), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for]
[&&, v2, ., getParentNode, (, ), ., isParamList, (, ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,]
[., isParamList, (, ), &&, v2, ., getParentNode, (, ), ., isParamList, (, ), ), {, interferenceGraph, ., connectIfNotFound, (]
[., getParentNode, (, ), ., isParamList, (, ), &&, v2, ., getParentNode, (, ), ., isParamList, (, ), ), {]
[), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for]
[., isParamList, (, ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;]
[., getParentNode, (, ), ., isParamList, (, ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, )]
[;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, cfg, ., getDirectedGraphNodes]
[., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for, (, DiGraphNode, <]
[,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >]
[,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :]
[), ;, continue, NEXT_VAR_PAIR, ;, }, NEXT_CROSS_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, cfg, .]
[), {, if, (, cfg, ., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_CROSS_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >]
[., getDirectedGraphNodes, (, ), ), {, if, (, cfg, ., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_CROSS_CFG_NODE, ;, }]
[), {, continue, NEXT_CROSS_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation, (, ), ;, if, (]
[., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_CROSS_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation]
[), ), {, continue, NEXT_CROSS_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation, (, ), ;, if]
[;, if, (, (, state, ., getIn, (, ), ., isLive, (, v1, ), &&, state, ., getIn, (, )]
[., getAnnotation, (, ), ;, if, (, (, state, ., getIn, (, ), ., isLive, (, v1, ), &&, state]
[), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :]
[||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive]
[), ||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), .]
[&&, state, ., getIn, (, ), ., isLive, (, v2, ), ), ||, (, state, ., getOut, (, ), .]
[., isLive, (, v1, ), &&, state, ., getIn, (, ), ., isLive, (, v2, ), ), ||, (, state]
[., getIn, (, ), ., isLive, (, v1, ), &&, state, ., getIn, (, ), ., isLive, (, v2, )]
[), &&, state, ., getIn, (, ), ., isLive, (, v2, ), ), ||, (, state, ., getOut, (, )]
[), ||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), .]
[., isLive, (, v2, ), ), ||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state]
[., getIn, (, ), ., isLive, (, v2, ), ), ||, (, state, ., getOut, (, ), ., isLive, (]
[), ), ||, (, state, ., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, )]
[), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :]
[), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE]
[&&, state, ., getOut, (, ), ., isLive, (, v2, ), ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,]
[., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive, (, v2, ), ), ), {, interferenceGraph]
[., getOut, (, ), ., isLive, (, v1, ), &&, state, ., getOut, (, ), ., isLive, (, v2, )]
[), &&, state, ., getOut, (, ), ., isLive, (, v2, ), ), ), {, interferenceGraph, ., connectIfNotFound, (, v1]
[), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE]
[., isLive, (, v2, ), ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue]
[., getOut, (, ), ., isLive, (, v2, ), ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,]
[), ), ), {, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }]
[;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, cfg, .]
[., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :, for, (, DiGraphNode]
[,, null, ,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch]
[,, v2, ), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode]
[), ;, continue, NEXT_VAR_PAIR, ;, }, }, NEXT_INTRA_CFG_NODE, :, for, (, DiGraphNode, <, Node, ,, Branch, >, cfgNode, :, cfg]
[), {, if, (, cfg, ., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_INTRA_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >]
[., getDirectedGraphNodes, (, ), ), {, if, (, cfg, ., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_INTRA_CFG_NODE, ;, }]
[), {, continue, NEXT_INTRA_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation, (, ), ;, boolean, v1OutLive]
[., isImplicitReturn, (, cfgNode, ), ), {, continue, NEXT_INTRA_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation]
[), ), {, continue, NEXT_INTRA_CFG_NODE, ;, }, FlowState, <, LiveVariableLattice, >, state, =, cfgNode, ., getAnnotation, (, ), ;, boolean]
[;, boolean, v1OutLive, =, state, ., getOut, (, ), ., isLive, (, v1, ), ;, boolean, v2OutLive, =, state, .]
[., getAnnotation, (, ), ;, boolean, v1OutLive, =, state, ., getOut, (, ), ., isLive, (, v1, ), ;, boolean]
[;, boolean, v2OutLive, =, state, ., getOut, (, ), ., isLive, (, v2, ), ;, CombinedLiveRangeChecker, checker, =, new, CombinedLiveRangeChecker]
[., isLive, (, v1, ), ;, boolean, v2OutLive, =, state, ., getOut, (, ), ., isLive, (, v2, ), ;]
[., getOut, (, ), ., isLive, (, v1, ), ;, boolean, v2OutLive, =, state, ., getOut, (, ), ., isLive]
[), ;, boolean, v2OutLive, =, state, ., getOut, (, ), ., isLive, (, v2, ), ;, CombinedLiveRangeChecker, checker, =, new]
[;, CombinedLiveRangeChecker, checker, =, new, CombinedLiveRangeChecker, (, new, LiveRangeChecker, (, v1, ,, v2OutLive, ?, null, :, v2, ), ,, new]
[., isLive, (, v2, ), ;, CombinedLiveRangeChecker, checker, =, new, CombinedLiveRangeChecker, (, new, LiveRangeChecker, (, v1, ,, v2OutLive, ?, null]
[., getOut, (, ), ., isLive, (, v2, ), ;, CombinedLiveRangeChecker, checker, =, new, CombinedLiveRangeChecker, (, new, LiveRangeChecker, (, v1]
[), ;, CombinedLiveRangeChecker, checker, =, new, CombinedLiveRangeChecker, (, new, LiveRangeChecker, (, v1, ,, v2OutLive, ?, null, :, v2, ), ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (, checker, .]
[,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, v2OutLive, ?, null, :, v2, ), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), )]
[), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[?, null, :, v2, ), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal]
[:, v2, ), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal, ., traverse]
[), ,, new, LiveRangeChecker, (, v2, ,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (, checker]
[,, v1OutLive, ?, null, :, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, )]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (]
[?, null, :, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker]
[:, v1, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (]
[;, if, (, checker, ., connectIfCrossed, (, interferenceGraph, ), ), {, continue, NEXT_VAR_PAIR, ;, }, }, }, }, return, interferenceGraph]
[., traverse, (, compiler, ,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (, checker, ., connectIfCrossed, (]
[,, cfgNode, ., getValue, (, ), ,, checker, ), ;, if, (, checker, ., connectIfCrossed, (, interferenceGraph, ), ), {]
[,, checker, ), ;, if, (, checker, ., connectIfCrossed, (, interferenceGraph, ), ), {, continue, NEXT_VAR_PAIR, ;, }, }, }]
[., getValue, (, ), ,, checker, ), ;, if, (, checker, ., connectIfCrossed, (, interferenceGraph, ), ), {, continue, NEXT_VAR_PAIR]
[), ;, if, (, checker, ., connectIfCrossed, (, interferenceGraph, ), ), {, continue, NEXT_VAR_PAIR, ;, }, }, }, }, return]
[), {, continue, NEXT_VAR_PAIR, ;, }, }, }, }, return, interferenceGraph, ;, }, private, static, class, CombinedLiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {]
[., connectIfCrossed, (, interferenceGraph, ), ), {, continue, NEXT_VAR_PAIR, ;, }, }, }, }, return, interferenceGraph, ;, }, private, static]
[), ), {, continue, NEXT_VAR_PAIR, ;, }, }, }, }, return, interferenceGraph, ;, }, private, static, class, CombinedLiveRangeChecker, extends, AbstractCfgNodeTraversalCallback]
[;, }, private, static, class, CombinedLiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, private, final, LiveRangeChecker, callback1, ;, private, final, LiveRangeChecker, callback2, ;, CombinedLiveRangeChecker]
[=, callback1, ;, this, ., callback2, =, callback2, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., callback1, =, callback1, ;, this, ., callback2, =, callback2, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, this, ., callback2, =, callback2, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[=, callback2, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., callback2, =, callback2, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, callback1, ., visit, (, t, ,, n, ,, parent, ), ;, callback2, ., visit, (, t, ,, n]
[., shouldVisit, (, n, ), ), {, callback1, ., visit, (, t, ,, n, ,, parent, ), ;, callback2, .]
[), ), {, callback1, ., visit, (, t, ,, n, ,, parent, ), ;, callback2, ., visit, (, t, ,]
[;, callback2, ., visit, (, t, ,, n, ,, parent, ), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var]
[., visit, (, t, ,, n, ,, parent, ), ;, callback2, ., visit, (, t, ,, n, ,, parent, )]
[,, n, ,, parent, ), ;, callback2, ., visit, (, t, ,, n, ,, parent, ), ;, }, }, boolean]
[,, parent, ), ;, callback2, ., visit, (, t, ,, n, ,, parent, ), ;, }, }, boolean, connectIfCrossed, (]
[), ;, callback2, ., visit, (, t, ,, n, ,, parent, ), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <]
[;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var, ,, Void, >, interferenceGraph, ), {, if, (, callback1, ., crossed]
[., visit, (, t, ,, n, ,, parent, ), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var, ,, Void]
[,, n, ,, parent, ), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var, ,, Void, >, interferenceGraph, ), {]
[,, parent, ), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var, ,, Void, >, interferenceGraph, ), {, if, (]
[), ;, }, }, boolean, connectIfCrossed, (, UndiGraph, <, Var, ,, Void, >, interferenceGraph, ), {, if, (, callback1, .]
[), {, Var, v1, =, callback1, ., getDef, (, ), ;, Var, v2, =, callback2, ., getDef, (, ), ;]
[||, callback2, ., crossed, ), {, Var, v1, =, callback1, ., getDef, (, ), ;, Var, v2, =, callback2, .]
[., crossed, ||, callback2, ., crossed, ), {, Var, v1, =, callback1, ., getDef, (, ), ;, Var, v2, =]
[), {, Var, v1, =, callback1, ., getDef, (, ), ;, Var, v2, =, callback2, ., getDef, (, ), ;]
[., crossed, ), {, Var, v1, =, callback1, ., getDef, (, ), ;, Var, v2, =, callback2, ., getDef, (]
[;, Var, v2, =, callback2, ., getDef, (, ), ;, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, )]
[., getDef, (, ), ;, Var, v2, =, callback2, ., getDef, (, ), ;, interferenceGraph, ., connectIfNotFound, (, v1, ,]
[;, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, return, true, ;, }, return, false, ;, }]
[., getDef, (, ), ;, interferenceGraph, ., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, return, true, ;, }]
[;, return, true, ;, }, return, false, ;, }, }, private, void, removeVarDeclaration, (, Node, name, ), {, Node, var]
[., connectIfNotFound, (, v1, ,, null, ,, v2, ), ;, return, true, ;, }, return, false, ;, }, }, private]
[,, null, ,, v2, ), ;, return, true, ;, }, return, false, ;, }, }, private, void, removeVarDeclaration, (, Node]
[,, v2, ), ;, return, true, ;, }, return, false, ;, }, }, private, void, removeVarDeclaration, (, Node, name, )]
[), ;, return, true, ;, }, return, false, ;, }, }, private, void, removeVarDeclaration, (, Node, name, ), {, Node]
[;, }, return, false, ;, }, }, private, void, removeVarDeclaration, (, Node, name, ), {, Node, var, =, name, .]
[;, }, }, private, void, removeVarDeclaration, (, Node, name, ), {, Node, var, =, name, ., getParent, (, ), ;]
[;, Node, parent, =, var, ., getParent, (, ), ;, if, (, NodeUtil, ., isForIn, (, parent, ), ), {]
[., getParent, (, ), ;, Node, parent, =, var, ., getParent, (, ), ;, if, (, NodeUtil, ., isForIn, (]
[;, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, var, ., removeChild, (, name, ), ;, parent, .]
[., getParent, (, ), ;, if, (, NodeUtil, ., isForIn, (, parent, ), ), {, var, ., removeChild, (, name]
[), {, var, ., removeChild, (, name, ), ;, parent, ., replaceChild, (, var, ,, name, ), ;, }, else]
[., isForIn, (, parent, ), ), {, var, ., removeChild, (, name, ), ;, parent, ., replaceChild, (, var, ,]
[), ), {, var, ., removeChild, (, name, ), ;, parent, ., replaceChild, (, var, ,, name, ), ;, }]
[;, parent, ., replaceChild, (, var, ,, name, ), ;, }, else, if, (, var, ., hasOneChild, (, ), )]
[., removeChild, (, name, ), ;, parent, ., replaceChild, (, var, ,, name, ), ;, }, else, if, (, var]
[), ;, parent, ., replaceChild, (, var, ,, name, ), ;, }, else, if, (, var, ., hasOneChild, (, )]
[;, }, else, if, (, var, ., hasOneChild, (, ), ), {, if, (, name, ., hasChildren, (, ), )]
[., replaceChild, (, var, ,, name, ), ;, }, else, if, (, var, ., hasOneChild, (, ), ), {, if]
[,, name, ), ;, }, else, if, (, var, ., hasOneChild, (, ), ), {, if, (, name, ., hasChildren]
[), ;, }, else, if, (, var, ., hasOneChild, (, ), ), {, if, (, name, ., hasChildren, (, )]
[), {, if, (, name, ., hasChildren, (, ), ), {, Node, value, =, name, ., removeFirstChild, (, ), ;]
[., hasOneChild, (, ), ), {, if, (, name, ., hasChildren, (, ), ), {, Node, value, =, name, .]
[), {, Node, value, =, name, ., removeFirstChild, (, ), ;, var, ., removeChild, (, name, ), ;, Node, assign]
[., hasChildren, (, ), ), {, Node, value, =, name, ., removeFirstChild, (, ), ;, var, ., removeChild, (, name]
[;, var, ., removeChild, (, name, ), ;, Node, assign, =, IR, ., assign, (, name, ,, value, ), .]
[., removeFirstChild, (, ), ;, var, ., removeChild, (, name, ), ;, Node, assign, =, IR, ., assign, (, name]
[;, Node, assign, =, IR, ., assign, (, name, ,, value, ), ., srcref, (, name, ), ;, if, (]
[., removeChild, (, name, ), ;, Node, assign, =, IR, ., assign, (, name, ,, value, ), ., srcref, (]
[), ;, Node, assign, =, IR, ., assign, (, name, ,, value, ), ., srcref, (, name, ), ;, if]
[;, if, (, !, parent, ., isFor, (, ), ), {, assign, =, NodeUtil, ., newExpr, (, assign, ), ;]
[., srcref, (, name, ), ;, if, (, !, parent, ., isFor, (, ), ), {, assign, =, NodeUtil, .]
[., assign, (, name, ,, value, ), ., srcref, (, name, ), ;, if, (, !, parent, ., isFor, (]
[,, value, ), ., srcref, (, name, ), ;, if, (, !, parent, ., isFor, (, ), ), {, assign]
[), ., srcref, (, name, ), ;, if, (, !, parent, ., isFor, (, ), ), {, assign, =, NodeUtil]
[), ;, if, (, !, parent, ., isFor, (, ), ), {, assign, =, NodeUtil, ., newExpr, (, assign, )]
[), {, assign, =, NodeUtil, ., newExpr, (, assign, ), ;, }, parent, ., replaceChild, (, var, ,, assign, )]
[), {, assign, =, NodeUtil, ., newExpr, (, assign, ), ;, }, parent, ., replaceChild, (, var, ,, assign, )]
[., isFor, (, ), ), {, assign, =, NodeUtil, ., newExpr, (, assign, ), ;, }, parent, ., replaceChild, (]
[=, NodeUtil, ., newExpr, (, assign, ), ;, }, parent, ., replaceChild, (, var, ,, assign, ), ;, }, else]
[;, }, parent, ., replaceChild, (, var, ,, assign, ), ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,]
[., newExpr, (, assign, ), ;, }, parent, ., replaceChild, (, var, ,, assign, ), ;, }, else, {, NodeUtil]
[), ;, }, parent, ., replaceChild, (, var, ,, assign, ), ;, }, else, {, NodeUtil, ., removeChild, (, parent]
[;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, var, ), ;, }, }, else, {, if, (, !]
[., replaceChild, (, var, ,, assign, ), ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, var, ), ;]
[,, assign, ), ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, var, ), ;, }, }, else, {]
[), ;, }, else, {, NodeUtil, ., removeChild, (, parent, ,, var, ), ;, }, }, else, {, if, (]
[;, }, }, else, {, if, (, !, name, ., hasChildren, (, ), ), {, var, ., removeChild, (, name]
[., removeChild, (, parent, ,, var, ), ;, }, }, else, {, if, (, !, name, ., hasChildren, (, )]
[,, var, ), ;, }, }, else, {, if, (, !, name, ., hasChildren, (, ), ), {, var, .]
[), ;, }, }, else, {, if, (, !, name, ., hasChildren, (, ), ), {, var, ., removeChild, (]
[), {, var, ., removeChild, (, name, ), ;, }, }, }, private, static, class, LiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, boolean]
[), {, var, ., removeChild, (, name, ), ;, }, }, }, private, static, class, LiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, boolean]
[., hasChildren, (, ), ), {, var, ., removeChild, (, name, ), ;, }, }, }, private, static, class, LiveRangeChecker]
[;, }, }, }, private, static, class, LiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, boolean, defFound, =, false, ;, boolean, crossed, =, false]
[., removeChild, (, name, ), ;, }, }, }, private, static, class, LiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, boolean, defFound, =, false]
[), ;, }, }, }, private, static, class, LiveRangeChecker, extends, AbstractCfgNodeTraversalCallback, {, boolean, defFound, =, false, ;, boolean, crossed, =]
[;, boolean, crossed, =, false, ;, private, final, Var, def, ;, private, final, Var, use, ;, public, LiveRangeChecker, (, Var]
[;, private, final, Var, def, ;, private, final, Var, use, ;, public, LiveRangeChecker, (, Var, def, ,, Var, use, )]
[=, def, ;, this, ., use, =, use, ;, }, Var, getDef, (, ), {, return, def, ;, }, public]
[., def, =, def, ;, this, ., use, =, use, ;, }, Var, getDef, (, ), {, return, def, ;]
[;, this, ., use, =, use, ;, }, Var, getDef, (, ), {, return, def, ;, }, public, static, boolean]
[=, use, ;, }, Var, getDef, (, ), {, return, def, ;, }, public, static, boolean, shouldVisit, (, Node, n]
[., use, =, use, ;, }, Var, getDef, (, ), {, return, def, ;, }, public, static, boolean, shouldVisit, (]
[;, }, Var, getDef, (, ), {, return, def, ;, }, public, static, boolean, shouldVisit, (, Node, n, ), {]
[;, }, public, static, boolean, shouldVisit, (, Node, n, ), {, return, (, n, ., isName, (, ), ||, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[||, (, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ), ;]
[., isName, (, ), ||, (, n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[&&, n, ., getFirstChild, (, ), ., isName, (, ), ), ), ;, }, @, Override, public, void, visit, (]
[., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isName, (, ), ), ), ;, }, @, Override]
[), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., isName, (, ), ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., getFirstChild, (, ), ., isName, (, ), ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), {, defFound, =, true, ;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom, (, use, ,]
[&&, isAssignTo, (, def, ,, n, ,, parent, ), ), {, defFound, =, true, ;, }, if, (, defFound, &&]
[&&, isAssignTo, (, def, ,, n, ,, parent, ), ), {, defFound, =, true, ;, }, if, (, defFound, &&]
[), {, defFound, =, true, ;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom, (, use, ,]
[,, n, ,, parent, ), ), {, defFound, =, true, ;, }, if, (, defFound, &&, (, use, ==, null]
[,, parent, ), ), {, defFound, =, true, ;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom]
[), ), {, defFound, =, true, ;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom, (, use]
[=, true, ;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom, (, use, ,, n, ), )]
[;, }, if, (, defFound, &&, (, use, ==, null, ||, isReadFrom, (, use, ,, n, ), ), ), {]
[), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,, Node]
[&&, (, use, ==, null, ||, isReadFrom, (, use, ,, n, ), ), ), {, crossed, =, true, ;, }]
[), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,, Node]
[), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,]
[||, isReadFrom, (, use, ,, n, ), ), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo]
[==, null, ||, isReadFrom, (, use, ,, n, ), ), ), {, crossed, =, true, ;, }, }, private, static]
[||, isReadFrom, (, use, ,, n, ), ), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo]
[), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,]
[,, n, ), ), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,]
[), ), ), {, crossed, =, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n]
[=, true, ;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,, Node, parent, ), {]
[;, }, }, private, static, boolean, isAssignTo, (, Var, var, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else, if, (, parent, .]
[&&, parent, !=, null, ), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else]
[&&, var, ., getName, (, ), ., equals, (, n, ., getString, (, ), ), &&, parent, !=, null, )]
[., isName, (, ), &&, var, ., getName, (, ), ., equals, (, n, ., getString, (, ), ), &&]
[&&, parent, !=, null, ), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else]
[., equals, (, n, ., getString, (, ), ), &&, parent, !=, null, ), {, if, (, parent, ., isParamList]
[., getName, (, ), ., equals, (, n, ., getString, (, ), ), &&, parent, !=, null, ), {, if]
[), &&, parent, !=, null, ), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }]
[., getString, (, ), ), &&, parent, !=, null, ), {, if, (, parent, ., isParamList, (, ), ), {]
[), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else, if, (, parent, .]
[!=, null, ), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else, if, (]
[), {, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, else, if, (, parent, .]
[), {, return, true, ;, }, else, if, (, parent, ., isVar, (, ), ), {, return, n, ., hasChildren]
[., isParamList, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isVar, (, ), ), {]
[;, }, else, if, (, parent, ., isVar, (, ), ), {, return, n, ., hasChildren, (, ), ;, }]
[), {, return, n, ., hasChildren, (, ), ;, }, return, false, ;, }, else, {, Node, name, =, n]
[., isVar, (, ), ), {, return, n, ., hasChildren, (, ), ;, }, return, false, ;, }, else, {]
[;, }, return, false, ;, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, return, name, !=]
[., hasChildren, (, ), ;, }, return, false, ;, }, else, {, Node, name, =, n, ., getFirstChild, (, )]
[;, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, return, name, !=, null, &&, name, .]
[;, return, name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (]
[., getFirstChild, (, ), ;, return, name, !=, null, &&, name, ., isName, (, ), &&, var, ., getName, (]
[;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name, ), {, return, name, !=, null, &&]
[&&, NodeUtil, ., isAssignmentOp, (, n, ), ;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name]
[&&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (]
[&&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, )]
[!=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString]
[&&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, )]
[&&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (]
[., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&]
[&&, NodeUtil, ., isAssignmentOp, (, n, ), ;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name]
[., equals, (, name, ., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (, n, ), ;, }, }, private]
[., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (, n, )]
[), &&, NodeUtil, ., isAssignmentOp, (, n, ), ;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node]
[., getString, (, ), ), &&, NodeUtil, ., isAssignmentOp, (, n, ), ;, }, }, private, static, boolean, isReadFrom, (]
[;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name, ), {, return, name, !=, null, &&]
[., isAssignmentOp, (, n, ), ;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name, ), {]
[), ;, }, }, private, static, boolean, isReadFrom, (, Var, var, ,, Node, name, ), {, return, name, !=, null]
[;, }, }, }]
[&&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), ), ;, }, }, }]
[&&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs]
[&&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, )]
[!=, null, &&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString]
[&&, name, ., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, )]
[&&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs]
[., isName, (, ), &&, var, ., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&]
[&&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), ), ;, }, }, }]
[., equals, (, name, ., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent]
[., getName, (, ), ., equals, (, name, ., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name]
[), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), ), ;, }, }, }]
[., getString, (, ), ), &&, !, NodeUtil, ., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), ), ;]
[;, }, }, }]
[;, }, }, }]
[., isVarOrSimpleAssignLhs, (, name, ,, name, ., getParent, (, ), ), ;, }, }, }]
[,, name, ., getParent, (, ), ), ;, }, }, }]
[), ;, }, }, }]
[., getParent, (, ), ), ;, }, }, }]
