[public, static, TimeSeriesCollection, createMovingAverage, (, TimeSeriesCollection, source, ,, String, suffix, ,, int, periodCount, ,, int, skip, ), {, if, (]
[public, static, TimeSeriesCollection, createMovingAverage, (, TimeSeriesCollection, source, ,, String, suffix, ,, int, periodCount, ,, int, skip, ), {, if, (]
[TimeSeriesCollection, createMovingAverage, (, TimeSeriesCollection, source, ,, String, suffix, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==]
[source, ,, String, suffix, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==, null, ), {, throw]
[suffix, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (]
[{, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (, periodCount, <]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (, periodCount, <, 1, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (]
[{, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (]
[new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +]
[if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeriesCollection, result, =]
[(, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeriesCollection, result, =, new, TimeSeriesCollection, (, ), ;, for, (, int, i, =]
[+, "than or equal to 1.", ), ;, }, TimeSeriesCollection, result, =, new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;]
[+, "than or equal to 1.", ), ;, }, TimeSeriesCollection, result, =, new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, }, TimeSeriesCollection, result, =, new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, TimeSeriesCollection, result, =, new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;]
[new, TimeSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;]
[int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, TimeSeries, sourceSeries, =]
[int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, TimeSeries, sourceSeries, =]
[;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (]
[(, ), ;, i, ++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =]
[;, i, ++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (]
[++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,]
[++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,]
[++, ), {, TimeSeries, sourceSeries, =, source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,]
[source, ., getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,, sourceSeries, ., getKey, (, ), +]
[getSeries, (, i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,, sourceSeries, ., getKey, (, ), +, suffix, ,]
[i, ), ;, TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,, sourceSeries, ., getKey, (, ), +, suffix, ,, periodCount, ,]
[TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,, sourceSeries, ., getKey, (, ), +, suffix, ,, periodCount, ,, skip, ), ;]
[TimeSeries, maSeries, =, createMovingAverage, (, sourceSeries, ,, sourceSeries, ., getKey, (, ), +, suffix, ,, periodCount, ,, skip, ), ;]
[(, sourceSeries, ,, sourceSeries, ., getKey, (, ), +, suffix, ,, periodCount, ,, skip, ), ;, result, ., addSeries, (]
[getKey, (, ), +, suffix, ,, periodCount, ,, skip, ), ;, result, ., addSeries, (, maSeries, ), ;, }, return]
[public, static, TimeSeries, createMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, periodCount, ,, int, skip, ), {, if, (]
[public, static, TimeSeries, createMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, periodCount, ,, int, skip, ), {, if, (]
[TimeSeries, createMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==]
[source, ,, String, name, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==, null, ), {, throw]
[name, ,, int, periodCount, ,, int, skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (]
[{, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (, periodCount, <]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (, periodCount, <, 1, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (]
[{, throw, new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (]
[new, IllegalArgumentException, (, "Null source.", ), ;, }, if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +]
[if, (, periodCount, <, 1, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeries, result, =]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (]
[new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, if, (]
[new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, if, (]
[new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 1.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, if, (]
[), ;, }, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, if, (, source, ., getItemCount, (, ), >]
[new, TimeSeries, (, name, ), ;, if, (, source, ., getItemCount, (, ), >, 0, ), {, long, firstSerial, =]
[new, TimeSeries, (, name, ), ;, if, (, source, ., getItemCount, (, ), >, 0, ), {, long, firstSerial, =]
[new, TimeSeries, (, name, ), ;, if, (, source, ., getItemCount, (, ), >, 0, ), {, long, firstSerial, =]
[new, TimeSeries, (, name, ), ;, if, (, source, ., getItemCount, (, ), >, 0, ), {, long, firstSerial, =]
[), ;, if, (, source, ., getItemCount, (, ), >, 0, ), {, long, firstSerial, =, source, ., getTimePeriod, (]
[(, ), >, 0, ), {, long, firstSerial, =, source, ., getTimePeriod, (, 0, ), ., getSerialIndex, (, ), +]
[firstSerial, =, source, ., getTimePeriod, (, 0, ), ., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =]
[firstSerial, =, source, ., getTimePeriod, (, 0, ), ., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =]
[firstSerial, =, source, ., getTimePeriod, (, 0, ), ., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =]
[0, ), ., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -]
[., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -, 1, ;]
[., getSerialIndex, (, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -, 1, ;]
[(, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -, 1, ;, i, >=]
[+, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -, 1, ;, i, >=, 0, ;]
[+, skip, ;, for, (, int, i, =, source, ., getItemCount, (, ), -, 1, ;, i, >=, 0, ;]
[=, source, ., getItemCount, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, RegularTimePeriod, period, =]
[=, source, ., getItemCount, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, RegularTimePeriod, period, =]
[(, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, RegularTimePeriod, period, =, source, ., getTimePeriod, (]
[>=, 0, ;, i, --, ), {, RegularTimePeriod, period, =, source, ., getTimePeriod, (, i, ), ;, long, serial, =]
[>=, 0, ;, i, --, ), {, RegularTimePeriod, period, =, source, ., getTimePeriod, (, i, ), ;, long, serial, =]
[period, =, source, ., getTimePeriod, (, i, ), ;, long, serial, =, period, ., getSerialIndex, (, ), ;, if, (]
[period, =, source, ., getTimePeriod, (, i, ), ;, long, serial, =, period, ., getSerialIndex, (, ), ;, if, (]
[source, ., getTimePeriod, (, i, ), ;, long, serial, =, period, ., getSerialIndex, (, ), ;, if, (, serial, >=]
[;, long, serial, =, period, ., getSerialIndex, (, ), ;, if, (, serial, >=, firstSerial, ), {, int, n, =]
[., getSerialIndex, (, ), ;, if, (, serial, >=, firstSerial, ), {, int, n, =, 0, ;, double, sum, =]
[if, (, serial, >=, firstSerial, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, long, serialLimit, =]
[if, (, serial, >=, firstSerial, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, long, serialLimit, =]
[if, (, serial, >=, firstSerial, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, long, serialLimit, =]
[{, int, n, =, 0, ;, double, sum, =, 0.0, ;, long, serialLimit, =, period, ., getSerialIndex, (, ), -]
[;, double, sum, =, 0.0, ;, long, serialLimit, =, period, ., getSerialIndex, (, ), -, periodCount, ;, int, offset, =]
[;, long, serialLimit, =, period, ., getSerialIndex, (, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =]
[period, ., getSerialIndex, (, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (]
[period, ., getSerialIndex, (, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (]
[., getSerialIndex, (, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (]
[., getSerialIndex, (, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (]
[(, ), -, periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (, offset, <]
[periodCount, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (, offset, <, periodCount, ), &&]
[;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (, offset, <, periodCount, ), &&, (]
[int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, (, offset, <, periodCount, ), &&, (, !]
[finished, =, false, ;, while, (, (, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (]
[finished, =, false, ;, while, (, (, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (]
[=, false, ;, while, (, (, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (, (]
[=, false, ;, while, (, (, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (, (]
[;, while, (, (, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (, (, i, -]
[(, offset, <, periodCount, ), &&, (, !, finished, ), ), {, if, (, (, i, -, offset, ), >=]
[(, !, finished, ), ), {, if, (, (, i, -, offset, ), >=, 0, ), {, TimeSeriesDataItem, item, =]
[(, !, finished, ), ), {, if, (, (, i, -, offset, ), >=, 0, ), {, TimeSeriesDataItem, item, =]
[), {, if, (, (, i, -, offset, ), >=, 0, ), {, TimeSeriesDataItem, item, =, source, ., getRawDataItem, (]
[), {, if, (, (, i, -, offset, ), >=, 0, ), {, TimeSeriesDataItem, item, =, source, ., getRawDataItem, (]
[if, (, (, i, -, offset, ), >=, 0, ), {, TimeSeriesDataItem, item, =, source, ., getRawDataItem, (, i, -]
[), >=, 0, ), {, TimeSeriesDataItem, item, =, source, ., getRawDataItem, (, i, -, offset, ), ;, RegularTimePeriod, p, =]
[), >=, 0, ), {, TimeSeriesDataItem, item, =, source, ., getRawDataItem, (, i, -, offset, ), ;, RegularTimePeriod, p, =]
[., getRawDataItem, (, i, -, offset, ), ;, RegularTimePeriod, p, =, item, ., getPeriod, (, ), ;, Number, v, =]
[., getRawDataItem, (, i, -, offset, ), ;, RegularTimePeriod, p, =, item, ., getPeriod, (, ), ;, Number, v, =]
[p, =, item, ., getPeriod, (, ), ;, Number, v, =, item, ., getValue, (, ), ;, long, currentIndex, =]
[p, =, item, ., getPeriod, (, ), ;, Number, v, =, item, ., getValue, (, ), ;, long, currentIndex, =]
[Number, v, =, item, ., getValue, (, ), ;, long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (]
[Number, v, =, item, ., getValue, (, ), ;, long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (]
[=, item, ., getValue, (, ), ;, long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (, currentIndex, >]
[), ;, long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (]
[), ;, long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (]
[long, currentIndex, =, p, ., getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=]
[p, ., getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=, null, ), {]
[getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=, null, ), {, sum, =]
[getSerialIndex, (, ), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=, null, ), {, sum, =]
[), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=, null, ), {, sum, =, sum, +]
[), ;, if, (, currentIndex, >, serialLimit, ), {, if, (, v, !=, null, ), {, sum, =, sum, +]
[serialLimit, ), {, if, (, v, !=, null, ), {, sum, =, sum, +, v, ., doubleValue, (, ), ;]
[{, if, (, v, !=, null, ), {, sum, =, sum, +, v, ., doubleValue, (, ), ;, n, =]
[{, if, (, v, !=, null, ), {, sum, =, sum, +, v, ., doubleValue, (, ), ;, n, =]
[(, v, !=, null, ), {, sum, =, sum, +, v, ., doubleValue, (, ), ;, n, =, n, +]
[sum, =, sum, +, v, ., doubleValue, (, ), ;, n, =, n, +, 1, ;, }, }, else, {]
[sum, +, v, ., doubleValue, (, ), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =]
[doubleValue, (, ), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }]
[), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }, offset, =]
[), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }, offset, =]
[n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }, offset, =, offset, +]
[;, }, }, else, {, finished, =, true, ;, }, }, offset, =, offset, +, 1, ;, }, if, (]
[;, }, }, else, {, finished, =, true, ;, }, }, offset, =, offset, +, 1, ;, }, if, (]
[}, else, {, finished, =, true, ;, }, }, offset, =, offset, +, 1, ;, }, if, (, n, >]
[finished, =, true, ;, }, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {]
[finished, =, true, ;, }, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {]
[}, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (]
[offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, period, ,]
[offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, period, ,]
[offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, period, ,, sum, /]
[(, n, >, 0, ), {, result, ., add, (, period, ,, sum, /, n, ), ;, }, else, {]
[(, n, >, 0, ), {, result, ., add, (, period, ,, sum, /, n, ), ;, }, else, {]
[), {, result, ., add, (, period, ,, sum, /, n, ), ;, }, else, {, result, ., add, (]
[result, ., add, (, period, ,, sum, /, n, ), ;, }, else, {, result, ., add, (, period, ,]
[n, ), ;, }, else, {, result, ., add, (, period, ,, null, ), ;, }, }, }, }, return]
[result, ;, }, public, static, TimeSeries, createPointMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, pointCount, ), {, if, (]
[result, ;, }, public, static, TimeSeries, createPointMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, pointCount, ), {, if, (]
[}, public, static, TimeSeries, createPointMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, pointCount, ), {, if, (, source, ==]
[createPointMovingAverage, (, TimeSeries, source, ,, String, name, ,, int, pointCount, ), {, if, (, source, ==, null, ), {, throw]
[source, ,, String, name, ,, int, pointCount, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[pointCount, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (]
[pointCount, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (]
[{, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (, pointCount, <]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (, pointCount, <, 2, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (, pointCount, <, 2, ), {, throw, new, IllegalArgumentException, (]
[{, throw, new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (, pointCount, <, 2, ), {, throw, new, IllegalArgumentException, (]
[new, IllegalArgumentException, (, "Null 'source'.", ), ;, }, if, (, pointCount, <, 2, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +]
[if, (, pointCount, <, 2, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 2.", ), ;, }, TimeSeries, result, =]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 2.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (]
[IllegalArgumentException, (, "periodCount must be greater ", +, "than or equal to 2.", ), ;, }, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =]
[}, TimeSeries, result, =, new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =]
[result, =, new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;]
[result, =, new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;]
[new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[new, TimeSeries, (, name, ), ;, double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <]
[double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, source, ., getItemCount, (, ), ;]
[double, rollingSumForPeriod, =, 0.0, ;, for, (, int, i, =, 0, ;, i, <, source, ., getItemCount, (, ), ;]
[int, i, =, 0, ;, i, <, source, ., getItemCount, (, ), ;, i, ++, ), {, TimeSeriesDataItem, current, =]
[int, i, =, 0, ;, i, <, source, ., getItemCount, (, ), ;, i, ++, ), {, TimeSeriesDataItem, current, =]
[;, i, <, source, ., getItemCount, (, ), ;, i, ++, ), {, TimeSeriesDataItem, current, =, source, ., getRawDataItem, (]
[(, ), ;, i, ++, ), {, TimeSeriesDataItem, current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =]
[(, ), ;, i, ++, ), {, TimeSeriesDataItem, current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =]
[{, TimeSeriesDataItem, current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =, current, ., getPeriod, (, ), ;]
[current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =, current, ., getPeriod, (, ), ;, rollingSumForPeriod, +=]
[current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =, current, ., getPeriod, (, ), ;, rollingSumForPeriod, +=]
[current, =, source, ., getRawDataItem, (, i, ), ;, RegularTimePeriod, period, =, current, ., getPeriod, (, ), ;, rollingSumForPeriod, +=]
[current, ., getPeriod, (, ), ;, rollingSumForPeriod, +=, current, ., getValue, (, ), ., doubleValue, (, ), ;, if, (]
[current, ., getPeriod, (, ), ;, rollingSumForPeriod, +=, current, ., getValue, (, ), ., doubleValue, (, ), ;, if, (]
[getPeriod, (, ), ;, rollingSumForPeriod, +=, current, ., getValue, (, ), ., doubleValue, (, ), ;, if, (, i, >]
[getPeriod, (, ), ;, rollingSumForPeriod, +=, current, ., getValue, (, ), ., doubleValue, (, ), ;, if, (, i, >]
[), ;, rollingSumForPeriod, +=, current, ., getValue, (, ), ., doubleValue, (, ), ;, if, (, i, >, pointCount, -]
[getValue, (, ), ., doubleValue, (, ), ;, if, (, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =]
[getValue, (, ), ., doubleValue, (, ), ;, if, (, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =]
[doubleValue, (, ), ;, if, (, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (]
[doubleValue, (, ), ;, if, (, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (]
[), ;, if, (, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (, i, -]
[(, i, >, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (, i, -, pointCount, ), ;]
[>, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (, i, -, pointCount, ), ;, rollingSumForPeriod, -=]
[>, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (, i, -, pointCount, ), ;, rollingSumForPeriod, -=]
[>, pointCount, -, 1, ), {, TimeSeriesDataItem, startOfMovingAvg, =, source, ., getRawDataItem, (, i, -, pointCount, ), ;, rollingSumForPeriod, -=]
[., getRawDataItem, (, i, -, pointCount, ), ;, rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;]
[., getRawDataItem, (, i, -, pointCount, ), ;, rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;]
[-, pointCount, ), ;, rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;, result, ., add, (]
[), ;, rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;, result, ., add, (, period, ,]
[), ;, rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;, result, ., add, (, period, ,]
[rollingSumForPeriod, -=, startOfMovingAvg, ., getValue, (, ), ., doubleValue, (, ), ;, result, ., add, (, period, ,, rollingSumForPeriod, /]
[., doubleValue, (, ), ;, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (]
[., doubleValue, (, ), ;, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (]
[(, ), ;, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==]
[(, ), ;, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==]
[;, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==, pointCount, -]
[add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==, pointCount, -, 1, ), {]
[add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==, pointCount, -, 1, ), {]
[rollingSumForPeriod, /, pointCount, ), ;, }, else, if, (, i, ==, pointCount, -, 1, ), {, result, ., add, (]
[pointCount, ), ;, }, else, if, (, i, ==, pointCount, -, 1, ), {, result, ., add, (, period, ,]
[pointCount, ), ;, }, else, if, (, i, ==, pointCount, -, 1, ), {, result, ., add, (, period, ,]
[;, }, else, if, (, i, ==, pointCount, -, 1, ), {, result, ., add, (, period, ,, rollingSumForPeriod, /]
[==, pointCount, -, 1, ), {, result, ., add, (, period, ,, rollingSumForPeriod, /, pointCount, ), ;, }, }, return]
[}, public, static, XYDataset, createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, long, period, ,, long, skip, ), {, return]
[static, XYDataset, createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, long, period, ,, long, skip, ), {, return, createMovingAverage, (]
[createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, long, period, ,, long, skip, ), {, return, createMovingAverage, (, source, ,]
[XYDataset, source, ,, String, suffix, ,, long, period, ,, long, skip, ), {, return, createMovingAverage, (, source, ,, suffix, ,]
[String, suffix, ,, long, period, ,, long, skip, ), {, return, createMovingAverage, (, source, ,, suffix, ,, (, double, )]
[,, long, period, ,, long, skip, ), {, return, createMovingAverage, (, source, ,, suffix, ,, (, double, ), period, ,]
[,, long, skip, ), {, return, createMovingAverage, (, source, ,, suffix, ,, (, double, ), period, ,, (, double, )]
[public, static, XYDataset, createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, double, period, ,, double, skip, ), {, if, (]
[public, static, XYDataset, createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, double, period, ,, double, skip, ), {, if, (]
[XYDataset, createMovingAverage, (, XYDataset, source, ,, String, suffix, ,, double, period, ,, double, skip, ), {, if, (, source, ==]
[source, ,, String, suffix, ,, double, period, ,, double, skip, ), {, if, (, source, ==, null, ), {, throw]
[suffix, ,, double, period, ,, double, skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, XYSeriesCollection, result, =]
[new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, XYSeriesCollection, result, =, new, XYSeriesCollection, (, ), ;, for, (, int, i, =]
[(, "Null source (XYDataset).", ), ;, }, XYSeriesCollection, result, =, new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;]
[(, "Null source (XYDataset).", ), ;, }, XYSeriesCollection, result, =, new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, }, XYSeriesCollection, result, =, new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, XYSeriesCollection, result, =, new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;]
[new, XYSeriesCollection, (, ), ;, for, (, int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;]
[int, i, =, 0, ;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =]
[=, 0, ;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (]
[;, i, <, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,]
[<, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,]
[<, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,]
[<, source, ., getSeriesCount, (, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,]
[(, ), ;, i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (]
[i, ++, ), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (, i, ), +]
[), {, XYSeries, s, =, createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (, i, ), +, suffix, ,]
[XYSeries, s, =, createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (, i, ), +, suffix, ,, period, ,]
[createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (, i, ), +, suffix, ,, period, ,, skip, ), ;]
[createMovingAverage, (, source, ,, i, ,, source, ., getSeriesKey, (, i, ), +, suffix, ,, period, ,, skip, ), ;]
[i, ,, source, ., getSeriesKey, (, i, ), +, suffix, ,, period, ,, skip, ), ;, result, ., addSeries, (]
[(, i, ), +, suffix, ,, period, ,, skip, ), ;, result, ., addSeries, (, s, ), ;, }, return]
[createMovingAverage, (, XYDataset, source, ,, int, series, ,, String, name, ,, double, period, ,, double, skip, ), {, if, (]
[createMovingAverage, (, XYDataset, source, ,, int, series, ,, String, name, ,, double, period, ,, double, skip, ), {, if, (]
[XYDataset, source, ,, int, series, ,, String, name, ,, double, period, ,, double, skip, ), {, if, (, source, ==]
[series, ,, String, name, ,, double, period, ,, double, skip, ), {, if, (, source, ==, null, ), {, throw]
[name, ,, double, period, ,, double, skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (]
[skip, ), {, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (]
[{, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (, period, <]
[{, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (, period, <]
[), {, throw, new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (, period, <, Double, ., MIN_VALUE, ), {, throw]
[new, IllegalArgumentException, (, "Null source (XYDataset).", ), ;, }, if, (, period, <, Double, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (]
[}, if, (, period, <, Double, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "period must be positive.", ), ;, }, if, (]
[}, if, (, period, <, Double, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "period must be positive.", ), ;, }, if, (]
[(, period, <, Double, ., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "period must be positive.", ), ;, }, if, (, skip, <]
[., MIN_VALUE, ), {, throw, new, IllegalArgumentException, (, "period must be positive.", ), ;, }, if, (, skip, <, 0.0, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "period must be positive.", ), ;, }, if, (, skip, <, 0.0, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, skip, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =]
[(, skip, <, 0.0, ), {, throw, new, IllegalArgumentException, (, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =, new, XYSeries, (]
[{, throw, new, IllegalArgumentException, (, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =, new, XYSeries, (, name, ), ;, if, (]
[{, throw, new, IllegalArgumentException, (, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =, new, XYSeries, (, name, ), ;, if, (]
[{, throw, new, IllegalArgumentException, (, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =, new, XYSeries, (, name, ), ;, if, (]
[(, "skip must be >= 0.0.", ), ;, }, XYSeries, result, =, new, XYSeries, (, name, ), ;, if, (, source, ., getItemCount, (]
[;, }, XYSeries, result, =, new, XYSeries, (, name, ), ;, if, (, source, ., getItemCount, (, series, ), >]
[XYSeries, (, name, ), ;, if, (, source, ., getItemCount, (, series, ), >, 0, ), {, double, first, =]
[XYSeries, (, name, ), ;, if, (, source, ., getItemCount, (, series, ), >, 0, ), {, double, first, =]
[XYSeries, (, name, ), ;, if, (, source, ., getItemCount, (, series, ), >, 0, ), {, double, first, =]
[;, if, (, source, ., getItemCount, (, series, ), >, 0, ), {, double, first, =, source, ., getXValue, (]
[(, source, ., getItemCount, (, series, ), >, 0, ), {, double, first, =, source, ., getXValue, (, series, ,]
[getItemCount, (, series, ), >, 0, ), {, double, first, =, source, ., getXValue, (, series, ,, 0, ), +]
[{, double, first, =, source, ., getXValue, (, series, ,, 0, ), +, skip, ;, for, (, int, i, =]
[{, double, first, =, source, ., getXValue, (, series, ,, 0, ), +, skip, ;, for, (, int, i, =]
[{, double, first, =, source, ., getXValue, (, series, ,, 0, ), +, skip, ;, for, (, int, i, =]
[source, ., getXValue, (, series, ,, 0, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (]
[(, series, ,, 0, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -]
[,, 0, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -, 1, ;]
[,, 0, ), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -, 1, ;]
[), +, skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -, 1, ;, i, >=]
[skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -, 1, ;, i, >=, 0, ;]
[skip, ;, for, (, int, i, =, source, ., getItemCount, (, series, ), -, 1, ;, i, >=, 0, ;]
[source, ., getItemCount, (, series, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, double, x, =]
[source, ., getItemCount, (, series, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, double, x, =]
[series, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, double, x, =, source, ., getXValue, (]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, double, x, =, source, ., getXValue, (, series, ,]
[0, ;, i, --, ), {, double, x, =, source, ., getXValue, (, series, ,, i, ), ;, if, (]
[0, ;, i, --, ), {, double, x, =, source, ., getXValue, (, series, ,, i, ), ;, if, (]
[i, --, ), {, double, x, =, source, ., getXValue, (, series, ,, i, ), ;, if, (, x, >=]
[=, source, ., getXValue, (, series, ,, i, ), ;, if, (, x, >=, first, ), {, int, n, =]
[series, ,, i, ), ;, if, (, x, >=, first, ), {, int, n, =, 0, ;, double, sum, =]
[if, (, x, >=, first, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, double, limit, =]
[if, (, x, >=, first, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, double, limit, =]
[x, >=, first, ), {, int, n, =, 0, ;, double, sum, =, 0.0, ;, double, limit, =, x, -]
[int, n, =, 0, ;, double, sum, =, 0.0, ;, double, limit, =, x, -, period, ;, int, offset, =]
[double, sum, =, 0.0, ;, double, limit, =, x, -, period, ;, int, offset, =, 0, ;, boolean, finished, =]
[;, double, limit, =, x, -, period, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (]
[double, limit, =, x, -, period, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !]
[period, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (]
[period, ;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (]
[;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (, (]
[;, int, offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (, (]
[offset, =, 0, ;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (, (, i, -]
[;, boolean, finished, =, false, ;, while, (, !, finished, ), {, if, (, (, i, -, offset, ), >=]
[while, (, !, finished, ), {, if, (, (, i, -, offset, ), >=, 0, ), {, double, xx, =]
[while, (, !, finished, ), {, if, (, (, i, -, offset, ), >=, 0, ), {, double, xx, =]
[), {, if, (, (, i, -, offset, ), >=, 0, ), {, double, xx, =, source, ., getXValue, (]
[if, (, (, i, -, offset, ), >=, 0, ), {, double, xx, =, source, ., getXValue, (, series, ,]
[if, (, (, i, -, offset, ), >=, 0, ), {, double, xx, =, source, ., getXValue, (, series, ,]
[(, i, -, offset, ), >=, 0, ), {, double, xx, =, source, ., getXValue, (, series, ,, i, -]
[0, ), {, double, xx, =, source, ., getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =]
[0, ), {, double, xx, =, source, ., getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =]
[xx, =, source, ., getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =, source, ., getY, (]
[source, ., getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =, source, ., getY, (, series, ,]
[source, ., getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =, source, ., getY, (, series, ,]
[getXValue, (, series, ,, i, -, offset, ), ;, Number, yy, =, source, ., getY, (, series, ,, i, -]
[-, offset, ), ;, Number, yy, =, source, ., getY, (, series, ,, i, -, offset, ), ;, if, (]
[-, offset, ), ;, Number, yy, =, source, ., getY, (, series, ,, i, -, offset, ), ;, if, (]
[), ;, Number, yy, =, source, ., getY, (, series, ,, i, -, offset, ), ;, if, (, xx, >]
[source, ., getY, (, series, ,, i, -, offset, ), ;, if, (, xx, >, limit, ), {, if, (]
[source, ., getY, (, series, ,, i, -, offset, ), ;, if, (, xx, >, limit, ), {, if, (]
[getY, (, series, ,, i, -, offset, ), ;, if, (, xx, >, limit, ), {, if, (, yy, !=]
[,, i, -, offset, ), ;, if, (, xx, >, limit, ), {, if, (, yy, !=, null, ), {]
[-, offset, ), ;, if, (, xx, >, limit, ), {, if, (, yy, !=, null, ), {, sum, =]
[-, offset, ), ;, if, (, xx, >, limit, ), {, if, (, yy, !=, null, ), {, sum, =]
[), ;, if, (, xx, >, limit, ), {, if, (, yy, !=, null, ), {, sum, =, sum, +]
[), ;, if, (, xx, >, limit, ), {, if, (, yy, !=, null, ), {, sum, =, sum, +]
[limit, ), {, if, (, yy, !=, null, ), {, sum, =, sum, +, yy, ., doubleValue, (, ), ;]
[{, if, (, yy, !=, null, ), {, sum, =, sum, +, yy, ., doubleValue, (, ), ;, n, =]
[{, if, (, yy, !=, null, ), {, sum, =, sum, +, yy, ., doubleValue, (, ), ;, n, =]
[(, yy, !=, null, ), {, sum, =, sum, +, yy, ., doubleValue, (, ), ;, n, =, n, +]
[sum, =, sum, +, yy, ., doubleValue, (, ), ;, n, =, n, +, 1, ;, }, }, else, {]
[sum, +, yy, ., doubleValue, (, ), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =]
[), ;, n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }, else, {]
[n, =, n, +, 1, ;, }, }, else, {, finished, =, true, ;, }, }, else, {, finished, =]
[+, 1, ;, }, }, else, {, finished, =, true, ;, }, }, else, {, finished, =, true, ;, }]
[;, }, }, else, {, finished, =, true, ;, }, }, else, {, finished, =, true, ;, }, offset, =]
[;, }, }, else, {, finished, =, true, ;, }, }, else, {, finished, =, true, ;, }, offset, =]
[}, else, {, finished, =, true, ;, }, }, else, {, finished, =, true, ;, }, offset, =, offset, +]
[true, ;, }, }, else, {, finished, =, true, ;, }, offset, =, offset, +, 1, ;, }, if, (]
[true, ;, }, }, else, {, finished, =, true, ;, }, offset, =, offset, +, 1, ;, }, if, (]
[}, }, else, {, finished, =, true, ;, }, offset, =, offset, +, 1, ;, }, if, (, n, >]
[{, finished, =, true, ;, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {]
[{, finished, =, true, ;, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {]
[;, }, offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (]
[offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, x, ,]
[offset, =, offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, x, ,]
[offset, +, 1, ;, }, if, (, n, >, 0, ), {, result, ., add, (, x, ,, sum, /]
[(, n, >, 0, ), {, result, ., add, (, x, ,, sum, /, n, ), ;, }, else, {]
[(, n, >, 0, ), {, result, ., add, (, x, ,, sum, /, n, ), ;, }, else, {]
[), {, result, ., add, (, x, ,, sum, /, n, ), ;, }, else, {, result, ., add, (]
[result, ., add, (, x, ,, sum, /, n, ), ;, }, else, {, result, ., add, (, x, ,]
[n, ), ;, }, else, {, result, ., add, (, x, ,, null, ), ;, }, }, }, }, return]
