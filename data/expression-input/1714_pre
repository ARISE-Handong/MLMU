[math3, ., exception, ., util, ., LocalizedFormats, ;, public, class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =]
[., exception, ., util, ., LocalizedFormats, ;, public, class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =, {]
[., util, ., LocalizedFormats, ;, public, class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,]
[., LocalizedFormats, ;, public, class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,]
[;, public, class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,]
[class, TransformUtils, {, private, static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,]
[{, private, static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,]
[static, final, int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,]
[int, [, ], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,]
[], POWERS_OF_TWO, =, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,]
[=, {, 0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,]
[0x00000001, ,, 0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,]
[0x00000002, ,, 0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,]
[0x00000004, ,, 0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,]
[0x00000008, ,, 0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,]
[0x00000010, ,, 0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,]
[0x00000020, ,, 0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,]
[0x00000040, ,, 0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,]
[0x00000080, ,, 0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,]
[0x00000100, ,, 0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,]
[0x00000200, ,, 0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,]
[0x00000400, ,, 0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,]
[0x00000800, ,, 0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,]
[0x00001000, ,, 0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,]
[0x00002000, ,, 0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,]
[0x00004000, ,, 0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,]
[0x00008000, ,, 0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,]
[0x00010000, ,, 0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,, 0x02000000, ,]
[0x00020000, ,, 0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,, 0x02000000, ,, 0x04000000, ,]
[0x00040000, ,, 0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,, 0x02000000, ,, 0x04000000, ,, 0x08000000, ,]
[0x00080000, ,, 0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,, 0x02000000, ,, 0x04000000, ,, 0x08000000, ,, 0x10000000, ,]
[0x00100000, ,, 0x00200000, ,, 0x00400000, ,, 0x00800000, ,, 0x01000000, ,, 0x02000000, ,, 0x04000000, ,, 0x08000000, ,, 0x10000000, ,, 0x20000000, ,]
[static, double, [, ], scaleArray, (, double, [, ], f, ,, double, d, ), {, for, (, int, i, =]
[[, ], scaleArray, (, double, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;]
[[, ], scaleArray, (, double, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;]
[scaleArray, (, double, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[scaleArray, (, double, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, f, []
[int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], *=]
[;, i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], *=, d, ;, }, return]
[static, Complex, [, ], scaleArray, (, Complex, [, ], f, ,, double, d, ), {, for, (, int, i, =]
[[, ], scaleArray, (, Complex, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;]
[[, ], scaleArray, (, Complex, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;]
[scaleArray, (, Complex, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[scaleArray, (, Complex, [, ], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[], f, ,, double, d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, f, []
[int, i, =, 0, ;, i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =]
[0, ;, i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (]
[0, ;, i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (]
[i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (, d, *]
[i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (, d, *]
[i, <, f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (, d, *]
[f, ., length, ;, i, ++, ), {, f, [, i, ], =, new, Complex, (, d, *, f, []
[{, f, [, i, ], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,]
[{, f, [, i, ], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,]
[[, i, ], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,, d, *]
[[, i, ], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,, d, *]
[[, i, ], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,, d, *]
[], =, new, Complex, (, d, *, f, [, i, ], ., getReal, (, ), ,, d, *, f, []
[], ., getReal, (, ), ,, d, *, f, [, i, ], ., getImaginary, (, ), ), ;, }, return]
[], [, ], createRealImaginaryArray, (, final, Complex, [, ], dataC, ), {, final, double, [, ], [, ], dataRI, =]
[createRealImaginaryArray, (, final, Complex, [, ], dataC, ), {, final, double, [, ], [, ], dataRI, =, new, double, []
[Complex, [, ], dataC, ), {, final, double, [, ], [, ], dataRI, =, new, double, [, 2, ], []
[Complex, [, ], dataC, ), {, final, double, [, ], [, ], dataRI, =, new, double, [, 2, ], []
[], dataRI, =, new, double, [, 2, ], [, dataC, ., length, ], ;, final, double, [, ], dataR, =]
[], dataRI, =, new, double, [, 2, ], [, dataC, ., length, ], ;, final, double, [, ], dataR, =]
[=, new, double, [, 2, ], [, dataC, ., length, ], ;, final, double, [, ], dataR, =, dataRI, []
[length, ], ;, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =]
[length, ], ;, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =]
[;, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI, []
[[, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =]
[], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;]
[final, double, [, ], dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[final, double, [, ], dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, dataC, ., length, ;]
[dataI, =, dataRI, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, dataC, ., length, ;]
[(, int, i, =, 0, ;, i, <, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =]
[(, int, i, =, 0, ;, i, <, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =]
[i, =, 0, ;, i, <, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =, dataC, []
[;, i, <, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =, dataC, [, i, ], ;]
[;, i, <, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =, dataC, [, i, ], ;]
[<, dataC, ., length, ;, i, ++, ), {, final, Complex, c, =, dataC, [, i, ], ;, dataR, []
[length, ;, i, ++, ), {, final, Complex, c, =, dataC, [, i, ], ;, dataR, [, i, ], =]
[length, ;, i, ++, ), {, final, Complex, c, =, dataC, [, i, ], ;, dataR, [, i, ], =]
[final, Complex, c, =, dataC, [, i, ], ;, dataR, [, i, ], =, c, ., getReal, (, ), ;]
[final, Complex, c, =, dataC, [, i, ], ;, dataR, [, i, ], =, c, ., getReal, (, ), ;]
[c, =, dataC, [, i, ], ;, dataR, [, i, ], =, c, ., getReal, (, ), ;, dataI, []
[[, i, ], ;, dataR, [, i, ], =, c, ., getReal, (, ), ;, dataI, [, i, ], =]
[[, i, ], ;, dataR, [, i, ], =, c, ., getReal, (, ), ;, dataI, [, i, ], =]
[=, c, ., getReal, (, ), ;, dataI, [, i, ], =, c, ., getImaginary, (, ), ;, }, return]
[public, static, Complex, [, ], createComplexArray, (, final, double, [, ], [, ], dataRI, ), throws, DimensionMismatchException, {, if, (]
[public, static, Complex, [, ], createComplexArray, (, final, double, [, ], [, ], dataRI, ), throws, DimensionMismatchException, {, if, (]
[public, static, Complex, [, ], createComplexArray, (, final, double, [, ], [, ], dataRI, ), throws, DimensionMismatchException, {, if, (]
[], createComplexArray, (, final, double, [, ], [, ], dataRI, ), throws, DimensionMismatchException, {, if, (, dataRI, ., length, !=]
[double, [, ], [, ], dataRI, ), throws, DimensionMismatchException, {, if, (, dataRI, ., length, !=, 2, ), {, throw]
[[, ], dataRI, ), throws, DimensionMismatchException, {, if, (, dataRI, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[[, ], dataRI, ), throws, DimensionMismatchException, {, if, (, dataRI, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, dataRI, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ], dataR, =]
[), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ], dataR, =]
[throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ], dataR, =, dataRI, []
[), ;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =]
[), ;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =]
[}, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI, []
[dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (]
[dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (]
[dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (]
[0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length, !=]
[0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length, !=]
[], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw]
[dataRI, [, 1, ], ;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (]
[dataRI, [, 1, ], ;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (]
[;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,]
[;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }, final, int, n, =]
[), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }, final, int, n, =]
[dataR, ., length, ), ;, }, final, int, n, =, dataR, ., length, ;, final, Complex, [, ], c, =]
[), ;, }, final, int, n, =, dataR, ., length, ;, final, Complex, [, ], c, =, new, Complex, []
[., length, ;, final, Complex, [, ], c, =, new, Complex, [, n, ], ;, for, (, int, i, =]
[;, final, Complex, [, ], c, =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, Complex, [, ], c, =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;]
[Complex, [, ], c, =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], c, =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], c, =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, c, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, c, [, i, ], =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (]
[0, ;, i, <, n, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, dataR, []
[<, n, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, dataR, [, i, ], ,]
[<, n, ;, i, ++, ), {, c, [, i, ], =, new, Complex, (, dataR, [, i, ], ,]
[;, i, ++, ), {, c, [, i, ], =, new, Complex, (, dataR, [, i, ], ,, dataI, []
[[, i, ], =, new, Complex, (, dataR, [, i, ], ,, dataI, [, i, ], ), ;, }, return]
[}, return, c, ;, }, public, static, int, exactLog2, (, final, int, n, ), throws, MathIllegalArgumentException, {, int, index, =]
[}, return, c, ;, }, public, static, int, exactLog2, (, final, int, n, ), throws, MathIllegalArgumentException, {, int, index, =]
[}, public, static, int, exactLog2, (, final, int, n, ), throws, MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (]
[}, public, static, int, exactLog2, (, final, int, n, ), throws, MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (]
[exactLog2, (, final, int, n, ), throws, MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,]
[), throws, MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (]
[), throws, MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (]
[MathIllegalArgumentException, {, int, index, =, Arrays, ., binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (, index, <]
[=, Arrays, ., binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (, index, <, 0, ), {, throw]
[binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (, index, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[binarySearch, (, TransformUtils, ., POWERS_OF_TWO, ,, n, ), ;, if, (, index, <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[POWERS_OF_TWO, ,, n, ), ;, if, (, index, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,]
[POWERS_OF_TWO, ,, n, ), ;, if, (, index, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,]
[;, if, (, index, <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n, ), ), ;, }, return]
