[commons, ., math3, ., util, ., FastMath, ;, public, class, TrapezoidIntegrator, extends, BaseAbstractUnivariateIntegrator, {, public, static, final, int, TRAPEZOID_MAX_ITERATIONS_COUNT, =]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,]
[public, TrapezoidIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (]
[(, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >]
[,, NumberIsTooSmallException, ,, NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw]
[NumberIsTooLargeException, {, super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (]
[super, (, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, TRAPEZOID_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,]
[throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {, super, (]
[NumberIsTooLargeException, (, maximalIterationCount, ,, TRAPEZOID_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, TrapezoidIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double, stage, (, final, BaseAbstractUnivariateIntegrator, baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (]
[TRAPEZOID_MAX_ITERATIONS_COUNT, ), ;, }, double, stage, (, final, BaseAbstractUnivariateIntegrator, baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (]
[;, }, double, stage, (, final, BaseAbstractUnivariateIntegrator, baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (, n, ==]
[baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (, n, ==, 0, ), {, final, double, max, =]
[baseIntegrator, ,, final, int, n, ), throws, TooManyEvaluationsException, {, if, (, n, ==, 0, ), {, final, double, max, =]
[(, n, ==, 0, ), {, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[(, n, ==, 0, ), {, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;]
[max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =]
[max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =]
[max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =]
[baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (]
[(, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -]
[final, double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *]
[double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *, (]
[double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *, (]
[double, min, =, baseIntegrator, ., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *, (]
[., getMin, (, ), ;, s, =, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (]
[), ;, s, =, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +]
[), ;, s, =, 0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +]
[0.5, *, (, max, -, min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (]
[min, ), *, (, baseIntegrator, ., computeObjectiveValue, (, min, ), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return]
[), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =]
[), +, baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =]
[baseIntegrator, ., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<]
[., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (]
[., computeObjectiveValue, (, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (]
[(, max, ), ), ;, return, s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -]
[s, ;, }, else, {, final, long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =]
[long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, max, =]
[long, np, =, 1L, <<, (, n, -, 1, ), ;, double, sum, =, 0, ;, final, double, max, =]
[;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[;, double, sum, =, 0, ;, final, double, max, =, baseIntegrator, ., getMax, (, ), ;, final, double, min, =]
[baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =]
[baseIntegrator, ., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (]
[., getMax, (, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (]
[(, ), ;, final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (, max, -]
[final, double, min, =, baseIntegrator, ., getMin, (, ), ;, final, double, spacing, =, (, max, -, min, ), /]
[., getMin, (, ), ;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =]
[., getMin, (, ), ;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =]
[(, ), ;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =, min, +]
[(, ), ;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =, min, +]
[;, final, double, spacing, =, (, max, -, min, ), /, np, ;, double, x, =, min, +, 0.5, *]
[-, min, ), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =]
[), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[), /, np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;]
[np, ;, double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <]
[double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;]
[double, x, =, min, +, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;]
[+, 0.5, *, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {]
[*, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=]
[*, spacing, ;, for, (, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=]
[(, long, i, =, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (]
[=, 0, ;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;]
[;, i, <, np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=]
[np, ;, i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }]
[i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =]
[i, ++, ), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =]
[), {, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *]
[{, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (]
[{, sum, +=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (]
[+=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +]
[+=, baseIntegrator, ., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +]
[., computeObjectiveValue, (, x, ), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *]
[), ;, x, +=, spacing, ;, }, s, =, 0.5, *, (, s, +, sum, *, spacing, ), ;, return]
[;, }, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[}, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (]
[Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, this, ,]
[doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, this, ,, 0, ), ;]
[doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, this, ,, 0, ), ;]
[MaxCountExceededException, {, double, oldt, =, stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, while, (]
[this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =]
[this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, while, (, true, ), {, final, int, i, =]
[;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =]
[(, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (]
[), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, this, ,]
[=, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, this, ,, i, ), ;, if, (]
[=, iterations, ., getCount, (, ), ;, final, double, t, =, stage, (, this, ,, i, ), ;, if, (]
[., getCount, (, ), ;, final, double, t, =, stage, (, this, ,, i, ), ;, if, (, i, >=]
[stage, (, this, ,, i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[stage, (, this, ,, i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[i, ), ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, t, -]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[), ), {, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =]
[double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (]
[abs, (, t, -, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[-, oldt, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *]
[(, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (]
[(, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (]
[abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=]
[), +, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, t, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return]
[(, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, t, ;, }, }, oldt, =, t, ;]
