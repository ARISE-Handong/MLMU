[;, private, JSType, returnType, =, null, ;, private, boolean, returnTypeInferred, =, false, ;, private, List, <, ObjectType, >, implementedInterfaces, =]
[., get, (, ), ;, private, JSType, returnType, =, null, ;, private, boolean, returnTypeInferred, =, false, ;, private, List, <]
[;, private, boolean, returnTypeInferred, =, false, ;, private, List, <, ObjectType, >, implementedInterfaces, =, null, ;, private, List, <, ObjectType]
[;, private, List, <, ObjectType, >, implementedInterfaces, =, null, ;, private, List, <, ObjectType, >, extendedInterfaces, =, null, ;, private]
[;, private, List, <, ObjectType, >, extendedInterfaces, =, null, ;, private, ObjectType, baseType, =, null, ;, private, JSType, thisType, =]
[;, private, ObjectType, baseType, =, null, ;, private, JSType, thisType, =, null, ;, private, boolean, isConstructor, =, false, ;, private]
[;, private, JSType, thisType, =, null, ;, private, boolean, isConstructor, =, false, ;, private, boolean, makesStructs, =, false, ;, private]
[;, private, boolean, isConstructor, =, false, ;, private, boolean, makesStructs, =, false, ;, private, boolean, makesDicts, =, false, ;, private]
[;, private, boolean, makesStructs, =, false, ;, private, boolean, makesDicts, =, false, ;, private, boolean, isInterface, =, false, ;, private]
[;, private, boolean, makesDicts, =, false, ;, private, boolean, isInterface, =, false, ;, private, Node, parametersNode, =, null, ;, private]
[;, private, boolean, isInterface, =, false, ;, private, Node, parametersNode, =, null, ;, private, ImmutableList, <, String, >, templateTypeNames, =]
[;, private, Node, parametersNode, =, null, ;, private, ImmutableList, <, String, >, templateTypeNames, =, ImmutableList, ., of, (, ), ;]
[;, private, ImmutableList, <, String, >, templateTypeNames, =, ImmutableList, ., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType]
[;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =]
[., of, (, ), ;, static, final, DiagnosticType, EXTENDS_WITHOUT_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static]
[;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =]
[., warning, (, "JSC_EXTENDS_WITHOUT_TYPEDEF", ,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}"]
[,, "@extends used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, EXTENDS_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY]
[;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =]
[., warning, (, "JSC_EXTENDS_NON_OBJECT", ,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}"]
[,, "{0} @extends non-object type {1}", ), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, RESOLVED_TAG_EMPTY, =, DiagnosticType, ., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR]
[;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =]
[., warning, (, "JSC_RESOLVED_TAG_EMPTY", ,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}"]
[,, "Could not resolve type in {0} tag of {1}", ), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, IMPLEMENTS_WITHOUT_CONSTRUCTOR, =, DiagnosticType, ., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED]
[;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =]
[., warning, (, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", ,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}"]
[,, "@implements used without @constructor or @interface for {0}", ), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONSTRUCTOR_REQUIRED, =, DiagnosticType, ., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST]
[;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =]
[., warning, (, "JSC_CONSTRUCTOR_REQUIRED", ,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last"]
[,, "{0} used without @constructor for {1}", ), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final]
[), ;, static, final, DiagnosticType, VAR_ARGS_MUST_BE_LAST, =, DiagnosticType, ., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END]
[;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =]
[., warning, (, "JSC_VAR_ARGS_MUST_BE_LAST", ,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end"]
[,, "variable length argument must be last", ), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final]
[), ;, static, final, DiagnosticType, OPTIONAL_ARG_AT_END, =, DiagnosticType, ., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM]
[;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =]
[., warning, (, "JSC_OPTIONAL_ARG_AT_END", ,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list"]
[,, "optional arguments must be at the end", ), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final]
[), ;, static, final, DiagnosticType, INEXISTANT_PARAM, =, DiagnosticType, ., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION]
[;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static]
[., warning, (, "JSC_INEXISTANT_PARAM", ,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n"]
[,, "parameter {0} does not appear in {1}''s parameter list", ), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}"]
[), ;, static, final, DiagnosticType, TYPE_REDEFINITION, =, DiagnosticType, ., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =]
[., warning, (, "JSC_TYPE_REDEFINITION", ,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning]
[,, "attempted re-definition of type {0}\n", +, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type"]
[), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED]
[+, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final]
[+, "found   : {1}\n", +, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;]
[+, "expected: {2}", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final]
[), ;, static, final, DiagnosticType, TEMPLATE_TYPE_DUPLICATED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED]
[;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =]
[., warning, (, "JSC_TEMPLATE_TYPE_DUPLICATED", ,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type"]
[,, "Only one parameter type must be the template type", ), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final]
[), ;, static, final, DiagnosticType, TEMPLATE_TYPE_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT]
[;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +, "Actual type: {0}", ), ;, private, class, ExtendedTypeValidator]
[., warning, (, "JSC_TEMPLATE_TYPE_EXPECTED", ,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n"]
[,, "The template type must be a parameter type", ), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +, "Actual type: {0}", ), ;]
[), ;, static, final, DiagnosticType, THIS_TYPE_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +, "Actual type: {0}", ), ;, private, class]
[;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, ), {]
[., warning, (, "JSC_THIS_TYPE_NON_OBJECT", ,, "@this type of a function must be an object\n", +, "Actual type: {0}", ), ;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @]
[,, "@this type of a function must be an object\n", +, "Actual type: {0}", ), ;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply]
[), ;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, )]
[+, "Actual type: {0}", ), ;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType]
[), ;, private, class, ExtendedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType, type, )]
[;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), )]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type]
[), ;, if, (, objectType, ==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, )]
[), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;, }, else]
[==, null, ), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;]
[), {, reportWarning, (, EXTENDS_NON_OBJECT, ,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;, }, else]
[;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends"]
[,, fnName, ,, type, ., toString, (, ), ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType]
[,, type, ., toString, (, ), ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, )]
[), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[., toString, (, ), ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {]
[;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, )]
[), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, .]
[., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, else]
[;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType]
[,, "@extends", ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (]
[;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {]
[), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {]
[), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;]
[), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false]
[;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@extends", ,, fnName, ), ;, return, false, ;, }, }, else, {]
[;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, private, class, ImplementedTypeValidator, implements, Predicate, <]
[,, "@extends", ,, fnName, ), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, private]
[,, fnName, ), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, private, class, ImplementedTypeValidator]
[), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, private, class, ImplementedTypeValidator, implements, Predicate]
[;, }, }, else, {, return, true, ;, }, }, }, private, class, ImplementedTypeValidator, implements, Predicate, <, JSType, >, {]
[;, }, }, }, private, class, ImplementedTypeValidator, implements, Predicate, <, JSType, >, {, @, Override, public, boolean, apply, (, JSType]
[;, if, (, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else]
[., cast, (, type, ), ;, if, (, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;]
[), ;, if, (, objectType, ==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }]
[), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (]
[==, null, ), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, .]
[), {, reportError, (, BAD_IMPLEMENTED_TYPE, ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (]
[;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements"]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[;, }, else, if, (, objectType, ., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, )]
[), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, .]
[., isEmptyType, (, ), ), {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, else]
[;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType]
[,, "@implements", ,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {]
[,, fnName, ), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (]
[), ;, return, false, ;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (]
[;, }, else, if, (, objectType, ., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {]
[), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,]
[., isUnknownType, (, ), ), {, if, (, hasMoreTagsToResolve, (, objectType, ), ), {, return, true, ;, }, else, {]
[), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;]
[), ), {, return, true, ;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false]
[;, }, else, {, reportWarning, (, RESOLVED_TAG_EMPTY, ,, "@implements", ,, fnName, ), ;, return, false, ;, }, }, else, {]
[;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, FunctionTypeBuilder, (, String, fnName, ,, AbstractCompiler]
[,, "@implements", ,, fnName, ), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, FunctionTypeBuilder]
[,, fnName, ), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, FunctionTypeBuilder, (, String]
[), ;, return, false, ;, }, }, else, {, return, true, ;, }, }, }, FunctionTypeBuilder, (, String, fnName, ,]
[;, }, }, else, {, return, true, ;, }, }, }, FunctionTypeBuilder, (, String, fnName, ,, AbstractCompiler, compiler, ,, Node]
[;, }, }, }, FunctionTypeBuilder, (, String, fnName, ,, AbstractCompiler, compiler, ,, Node, errorRoot, ,, String, sourceName, ,, Scope, scope]
[;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention]
[., checkNotNull, (, errorRoot, ), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, .]
[), ;, this, ., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, .]
[=, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this]
[., fnName, =, fnName, ==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, )]
[;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, )]
[?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler]
[==, null, ?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry]
[?, "", :, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler]
[:, fnName, ;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry]
[;, this, ., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, )]
[=, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot]
[., codingConvention, =, compiler, ., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this]
[;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName]
[., getCodingConvention, (, ), ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot]
[=, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this]
[., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName]
[;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this]
[., getTypeRegistry, (, ), ;, this, ., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler]
[=, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope, =, scope]
[., errorRoot, =, errorRoot, ;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope]
[;, this, ., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope, =, scope, ;, }]
[=, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @]
[., sourceName, =, sourceName, ;, this, ., compiler, =, compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents]
[;, this, ., compiler, =, compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents]
[=, compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if]
[., compiler, =, compiler, ;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, )]
[;, this, ., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents]
[=, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {]
[., scope, =, scope, ;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null]
[;, }, FunctionTypeBuilder, setContents, (, @, Nullable, FunctionContents, contents, ), {, if, (, contents, !=, null, ), {, this, .]
[), {, this, ., contents, =, contents, ;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType]
[!=, null, ), {, this, ., contents, =, contents, ;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable]
[), {, this, ., contents, =, contents, ;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType]
[=, contents, ;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent]
[., contents, =, contents, ;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable]
[;, }, return, this, ;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {]
[;, }, FunctionTypeBuilder, inferFromOverriddenFunction, (, @, Nullable, FunctionType, oldType, ,, @, Nullable, Node, paramsParent, ), {, if, (, oldType, ==]
[), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (]
[==, null, ), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, .]
[), {, return, this, ;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (]
[;, }, returnType, =, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (]
[=, oldType, ., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null]
[;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, .]
[., getReturnType, (, ), ;, returnTypeInferred, =, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {]
[=, oldType, ., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (]
[;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==]
[., isReturnTypeInferred, (, ), ;, if, (, paramsParent, ==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;]
[), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new]
[==, null, ), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode]
[), {, parametersNode, =, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new]
[=, oldType, ., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry]
[;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;]
[., getParametersNode, (, ), ;, if, (, parametersNode, ==, null, ), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), .]
[), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder]
[==, null, ), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {]
[), {, parametersNode, =, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder]
[=, new, FunctionParamBuilder, (, typeRegistry, ), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder]
[;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator, <, Node, >, oldParams, =]
[., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator, <]
[), ., build, (, ), ;, }, }, else, {, FunctionParamBuilder, paramBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, Iterator]
[;, Iterator, <, Node, >, oldParams, =, oldType, ., getParameters, (, ), ., iterator, (, ), ;, boolean, warnedAboutArgList, =]
[), ;, Iterator, <, Node, >, oldParams, =, oldType, ., getParameters, (, ), ., iterator, (, ), ;, boolean, warnedAboutArgList]
[;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (]
[., iterator, (, ), ;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =]
[., getParameters, (, ), ., iterator, (, ), ;, boolean, warnedAboutArgList, =, false, ;, boolean, oldParamsListHitOptArgs, =, false, ;, for]
[;, boolean, oldParamsListHitOptArgs, =, false, ;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=, null]
[;, for, (, Node, currentParam, =, paramsParent, ., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =, currentParam, .]
[;, currentParam, !=, null, ;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (]
[., getFirstChild, (, ), ;, currentParam, !=, null, ;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (]
[;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node]
[!=, null, ;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), )]
[;, currentParam, =, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node]
[=, currentParam, ., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =]
[), {, if, (, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =, oldParams, ., next, (, ), ;]
[., getNext, (, ), ), {, if, (, oldParams, ., hasNext, (, ), ), {, Node, oldParam, =, oldParams, .]
[), {, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, )]
[., hasNext, (, ), ), {, Node, oldParam, =, oldParams, ., next, (, ), ;, Node, newParam, =, paramBuilder, .]
[;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, )]
[., next, (, ), ;, Node, newParam, =, paramBuilder, ., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam]
[;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam]
[., newParameterFromNode, (, oldParam, ), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (]
[), ;, oldParamsListHitOptArgs, =, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (]
[=, oldParamsListHitOptArgs, ||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext]
[;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, .]
[||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs]
[||, oldParam, ., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, )]
[||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs]
[., isVarArgs, (, ), ||, oldParam, ., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null]
[;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, .]
[., isOptionalArg, (, ), ;, if, (, currentParam, ., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, )]
[), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {]
[&&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true]
[!=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg]
[., getNext, (, ), !=, null, &&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, )]
[&&, newParam, ., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true]
[), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {]
[., isVarArgs, (, ), ), {, newParam, ., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;]
[;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, .]
[., setVarArgs, (, false, ), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter]
[), ;, newParam, ., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry]
[;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,]
[., setOptionalArg, (, true, ), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (]
[), ;, }, }, else, {, warnedAboutArgList, |=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList]
[|=, addParameter, (, paramBuilder, ,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, )]
[;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (]
[,, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention]
[,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;]
[., getNativeType, (, UNKNOWN_TYPE, ), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter]
[), ,, warnedAboutArgList, ,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), )]
[,, codingConvention, ., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }]
[,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {]
[||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, )]
[., isOptionalParameter, (, currentParam, ), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (]
[), ||, oldParamsListHitOptArgs, ,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (]
[,, codingConvention, ., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {]
[), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next]
[., isVarArgsParameter, (, currentParam, ), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, .]
[), ), ;, }, }, while, (, oldParams, ., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, .]
[), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =, paramBuilder, ., build, (]
[., hasNext, (, ), ), {, paramBuilder, ., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =]
[;, }, parametersNode, =, paramBuilder, ., build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable]
[., newOptionalParameterFromNode, (, oldParams, ., next, (, ), ), ;, }, parametersNode, =, paramBuilder, ., build, (, ), ;, }]
[), ;, }, parametersNode, =, paramBuilder, ., build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @]
[., next, (, ), ), ;, }, parametersNode, =, paramBuilder, ., build, (, ), ;, }, return, this, ;, }]
[=, paramBuilder, ., build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, )]
[;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null]
[., build, (, ), ;, }, return, this, ;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if]
[;, }, FunctionTypeBuilder, inferReturnType, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, &&, info, ., hasReturnType]
[), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false]
[&&, info, ., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,]
[!=, null, &&, info, ., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (]
[&&, info, ., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,]
[), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false]
[., hasReturnType, (, ), ), {, returnType, =, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[=, info, ., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false, ;, }, return]
[;, returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if]
[., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (]
[., getReturnType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, returnTypeInferred, =, false, ;, }, return, this, ;]
[,, typeRegistry, ), ;, returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info]
[), ;, returnTypeInferred, =, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {]
[=, false, ;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info]
[;, }, return, this, ;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null]
[;, }, FunctionTypeBuilder, inferInheritance, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, isConstructor, =]
[), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =]
[!=, null, ), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;]
[), {, isConstructor, =, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =]
[=, info, ., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts]
[;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info]
[., isConstructor, (, ), ;, makesStructs, =, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, )]
[=, info, ., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface]
[;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs]
[., makesStructs, (, ), ;, makesDicts, =, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, )]
[=, info, ., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !]
[;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED]
[., makesDicts, (, ), ;, isInterface, =, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, )]
[=, info, ., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct"]
[;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else]
[., isInterface, (, ), ;, if, (, makesStructs, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, )]
[&&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, )]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, )]
[;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;]
[,, "@struct", ,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,]
[,, fnName, ), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,]
[), ;, }, else, if, (, makesDicts, &&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, )]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), )]
[&&, !, isConstructor, ), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), )]
[), {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), )]
[;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =, info]
[,, "@dict", ,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, )]
[,, fnName, ), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType]
[), ;, }, if, (, info, ., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =]
[), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,]
[., hasBaseType, (, ), ), {, if, (, isConstructor, ), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), .]
[), {, JSType, maybeBaseType, =, info, ., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =]
[., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator]
[., getBaseType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, .]
[,, typeRegistry, ), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), )]
[), ;, if, (, maybeBaseType, !=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType]
[), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;]
[&&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }]
[!=, null, &&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType]
[&&, maybeBaseType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }]
[), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;]
[., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else]
[), ), {, baseType, =, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, )]
[=, (, ObjectType, ), maybeBaseType, ;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if]
[;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (]
[;, }, }, else, {, reportWarning, (, EXTENDS_WITHOUT_TYPEDEF, ,, fnName, ), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (]
[;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {, implementedInterfaces]
[,, fnName, ), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor]
[), ;, }, }, if, (, info, ., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {]
[), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[>, 0, ), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression]
[., getImplementedInterfaceCount, (, ), >, 0, ), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, )]
[), {, if, (, isConstructor, ), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :]
[), {, implementedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, )]
[=, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType]
[;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =]
[), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&]
[., getImplementedInterfaces, (, ), ), {, JSType, maybeInterType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, .]
[., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator]
[,, typeRegistry, ), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), )]
[), ;, if, (, maybeInterType, !=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces]
[), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, )]
[&&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType]
[!=, null, &&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (, (, ObjectType]
[&&, maybeInterType, ., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType]
[), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, )]
[., setValidator, (, new, ImplementedTypeValidator, (, ), ), ), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;]
[), ), {, implementedInterfaces, ., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface]
[;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }]
[., add, (, (, ObjectType, ), maybeInterType, ), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (]
[), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;]
[), ;, }, }, }, else, if, (, isInterface, ), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;]
[), {, reportWarning, (, TypeCheck, ., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,]
[;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, ), {]
[,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (]
[., CONFLICTING_IMPLEMENTED_TYPE, ,, fnName, ), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }]
[), ;, }, else, {, reportWarning, (, CONSTRUCTOR_REQUIRED, ,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, )]
[;, }, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t]
[,, "@implements", ,, fnName, ), ;, }, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, )]
[,, fnName, ), ;, }, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for]
[), ;, }, }, if, (, isInterface, ), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression]
[), {, extendedInterfaces, =, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, )]
[=, Lists, ., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType]
[;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (]
[., newArrayList, (, ), ;, for, (, JSTypeExpression, t, :, info, ., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =]
[), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&]
[., getExtendedInterfaces, (, ), ), {, JSType, maybeInterfaceType, =, t, ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, .]
[., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator]
[,, typeRegistry, ), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), )]
[), ;, if, (, maybeInterfaceType, !=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces]
[), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, ), ;, }, }, }, }, return, this, ;, }]
[&&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType]
[!=, null, &&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType]
[&&, maybeInterfaceType, ., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType]
[), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, ), ;, }, }, }, }, return, this, ;, }]
[., setValidator, (, new, ExtendedTypeValidator, (, ), ), ), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, ), ;]
[), ), {, extendedInterfaces, ., add, (, (, ObjectType, ), maybeInterfaceType, ), ;, }, }, }, }, return, this, ;]
[;, }, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType]
[., add, (, (, ObjectType, ), maybeInterfaceType, ), ;, }, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (]
[), ;, }, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {]
[), ;, }, }, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {]
[;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ,, JSType, type, ), {, inferThisType, (, info, ), ;, if, (, thisType]
[;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[), ;, if, (, thisType, ==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if]
[), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info]
[==, null, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info]
[;, if, (, objType, !=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), )]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, (, info, ==, null, ||, !, info, .]
[), ;, if, (, objType, !=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), )]
[), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType]
[&&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }]
[!=, null, &&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType]
[&&, (, info, ==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }]
[), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType]
[), ), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {]
[||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }, }, return, this, ;, }]
[==, null, ||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }, }, return, this]
[||, !, info, ., hasType, (, ), ), ), {, thisType, =, objType, ;, }, }, return, this, ;, }]
[), ), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {]
[), ), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {]
[., hasType, (, ), ), ), {, thisType, =, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (]
[=, objType, ;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null]
[;, }, }, return, this, ;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if]
[;, }, FunctionTypeBuilder, inferThisType, (, JSDocInfo, info, ), {, JSType, maybeThisType, =, null, ;, if, (, info, !=, null, &&]
[;, if, (, info, !=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (]
[), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, )]
[&&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,]
[!=, null, &&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (]
[&&, info, ., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,]
[), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, )]
[., hasThisType, (, ), ), {, maybeThisType, =, info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[=, info, ., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if]
[;, }, if, (, maybeThisType, !=, null, ), {, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes]
[., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {, thisType, =, maybeThisType, ;, }, return, this]
[., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {]
[., getThisType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType]
[,, typeRegistry, ), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {, thisType, =, maybeThisType, ;]
[), ., restrictByNotNullOrUndefined, (, ), ;, }, if, (, maybeThisType, !=, null, ), {, thisType, =, maybeThisType, ;, }, return]
[), {, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp]
[!=, null, ), {, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {]
[), {, thisType, =, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp]
[=, maybeThisType, ;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =, IR, .]
[;, }, return, this, ;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =, IR, ., paramList, (]
[;, }, FunctionTypeBuilder, inferParameterTypes, (, JSDocInfo, info, ), {, Node, lp, =, IR, ., paramList, (, ), ;, for, (]
[;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {, lp, ., addChildToBack, (, IR, ., name]
[., paramList, (, ), ;, for, (, String, name, :, info, ., getParameterNames, (, ), ), {, lp, ., addChildToBack]
[), {, lp, ., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return, inferParameterTypes, (, lp, ,]
[., getParameterNames, (, ), ), {, lp, ., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return]
[;, }, return, inferParameterTypes, (, lp, ,, info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @]
[., addChildToBack, (, IR, ., name, (, name, ), ), ;, }, return, inferParameterTypes, (, lp, ,, info, ), ;]
[), ;, }, return, inferParameterTypes, (, lp, ,, info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,]
[., name, (, name, ), ), ;, }, return, inferParameterTypes, (, lp, ,, info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (]
[), ), ;, }, return, inferParameterTypes, (, lp, ,, info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent]
[;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent, ==]
[,, info, ), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if]
[), ;, }, FunctionTypeBuilder, inferParameterTypes, (, @, Nullable, Node, argsParent, ,, @, Nullable, JSDocInfo, info, ), {, if, (, argsParent]
[), {, if, (, info, ==, null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, )]
[==, null, ), {, if, (, info, ==, null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (]
[), {, if, (, info, ==, null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, )]
[), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null]
[==, null, ), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType]
[), {, return, this, ;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null]
[;, }, else, {, return, inferParameterTypes, (, info, ), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode]
[;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=, null, ), {, oldParameterType, =, parametersNode, ., getFirstChild]
[), ;, }, }, Node, oldParameterType, =, null, ;, if, (, parametersNode, !=, null, ), {, oldParameterType, =, parametersNode, .]
[;, if, (, parametersNode, !=, null, ), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =]
[), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;]
[!=, null, ), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry]
[), {, oldParameterType, =, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;]
[=, parametersNode, ., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =]
[;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >]
[., getFirstChild, (, ), ;, }, FunctionParamBuilder, builder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, boolean, warnedAboutArgList, =, false, ;]
[;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (, info, ==, null, ), ?, Sets, .]
[), ;, boolean, warnedAboutArgList, =, false, ;, Set, <, String, >, allJsDocParams, =, (, info, ==, null, ), ?, Sets]
[;, Set, <, String, >, allJsDocParams, =, (, info, ==, null, ), ?, Sets, ., <, String, >, newHashSet, (]
[;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children, (]
[?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), )]
[), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, )]
[==, null, ), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames]
[), ?, Sets, ., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, )]
[:, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =]
[., <, String, >, newHashSet, (, ), :, Sets, ., newHashSet, (, info, ., getParameterNames, (, ), ), ;, boolean]
[;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children, (]
[., newHashSet, (, info, ., getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;]
[), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children]
[., getParameterNames, (, ), ), ;, boolean, foundTemplateType, =, false, ;, boolean, isVarArgs, =, false, ;, for, (, Node, arg]
[;, boolean, isVarArgs, =, false, ;, for, (, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName]
[;, for, (, Node, arg, :, argsParent, ., children, (, ), ), {, String, argumentName, =, arg, ., getString, (]
[), {, String, argumentName, =, arg, ., getString, (, ), ;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType]
[., children, (, ), ), {, String, argumentName, =, arg, ., getString, (, ), ;, allJsDocParams, ., remove, (, argumentName]
[;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,]
[., getString, (, ), ;, allJsDocParams, ., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =]
[;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (]
[., remove, (, argumentName, ), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, )]
[), ;, JSType, parameterType, =, null, ;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter]
[;, boolean, isOptionalParam, =, isOptionalParameter, (, arg, ,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;]
[;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (]
[,, info, ), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&, info]
[), ;, isVarArgs, =, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType]
[=, isVarArgsParameter, (, arg, ,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, )]
[;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType]
[,, info, ), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =]
[), ;, if, (, info, !=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, .]
[), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else]
[&&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (]
[!=, null, &&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), .]
[&&, info, ., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (]
[), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else]
[., hasParameterType, (, argumentName, ), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,]
[), ), {, parameterType, =, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }]
[=, info, ., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType]
[;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =]
[., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (]
[., getParameterType, (, argumentName, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null]
[), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType]
[,, typeRegistry, ), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, )]
[), ;, }, else, if, (, oldParameterType, !=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType]
[), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =]
[&&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =]
[!=, null, &&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;]
[&&, oldParameterType, ., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =]
[), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =]
[!=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;]
[., getJSType, (, ), !=, null, ), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, .]
[), {, parameterType, =, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =]
[=, oldParameterType, ., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs]
[;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {]
[., getJSType, (, ), ;, isOptionalParam, =, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, )]
[=, oldParameterType, ., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =]
[;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[., isOptionalArg, (, ), ;, isVarArgs, =, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, .]
[=, oldParameterType, ., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }]
[;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,]
[., isVarArgs, (, ), ;, }, else, {, parameterType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=]
[=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam]
[;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs]
[), ;, }, warnedAboutArgList, |=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (]
[|=, addParameter, (, builder, ,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, )]
[;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (]
[,, parameterType, ,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType]
[,, warnedAboutArgList, ,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext]
[,, isOptionalParam, ,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, )]
[,, isVarArgs, ), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }]
[), ;, if, (, oldParameterType, !=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if]
[), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (]
[!=, null, ), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {]
[), {, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (]
[=, oldParameterType, ., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null]
[;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder]
[., getNext, (, ), ;, }, }, if, (, !, isVarArgs, ), {, while, (, oldParameterType, !=, null, &&, !]
[), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType]
[), {, while, (, oldParameterType, !=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType]
[), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for]
[&&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;]
[!=, null, &&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (]
[&&, !, isVarArgs, ), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;]
[), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for]
[), {, builder, ., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for]
[;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning]
[., newParameterFromNode, (, oldParameterType, ), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName]
[), ;, oldParameterType, =, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {]
[=, oldParameterType, ., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM]
[;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;]
[., getNext, (, ), ;, }, }, for, (, String, inexistentName, :, allJsDocParams, ), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName]
[), {, reportWarning, (, INEXISTANT_PARAM, ,, inexistentName, ,, fnName, ), ;, }, parametersNode, =, builder, ., build, (, ), ;]
[;, }, parametersNode, =, builder, ., build, (, ), ;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param]
[,, inexistentName, ,, fnName, ), ;, }, parametersNode, =, builder, ., build, (, ), ;, return, this, ;, }, private]
[,, fnName, ), ;, }, parametersNode, =, builder, ., build, (, ), ;, return, this, ;, }, private, boolean, isOptionalParameter]
[), ;, }, parametersNode, =, builder, ., build, (, ), ;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node]
[=, builder, ., build, (, ), ;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable]
[;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (]
[., build, (, ), ;, return, this, ;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info]
[;, }, private, boolean, isOptionalParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isOptionalParameter]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[., isOptionalParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;]
[), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null]
[;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (]
[;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), .]
[., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType]
[;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isVarArgsParameter]
[&&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,]
[&&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }]
[!=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, )]
[&&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }]
[&&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,]
[., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }, private, boolean]
[), &&, info, ., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param]
[;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if, (, codingConvention, ., isVarArgsParameter]
[., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {, if]
[., getParameterType, (, paramName, ), ., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable]
[), ., isOptionalArg, (, ), ;, }, private, boolean, isVarArgsParameter, (, Node, param, ,, @, Nullable, JSDocInfo, info, ), {]
[), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&]
[., isVarArgsParameter, (, param, ), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;]
[), ), {, return, true, ;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null]
[;, }, String, paramName, =, param, ., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (]
[;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), .]
[., getString, (, ), ;, return, info, !=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType]
[;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =]
[&&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info]
[&&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }]
[!=, null, &&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, )]
[&&, info, ., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }]
[&&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info]
[., hasParameterType, (, paramName, ), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName]
[), &&, info, ., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo]
[;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null, ), {, templateTypeNames, =]
[., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=, null]
[., getParameterType, (, paramName, ), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {]
[), ., isVarArgs, (, ), ;, }, FunctionTypeBuilder, inferTemplateTypeName, (, @, Nullable, JSDocInfo, info, ), {, if, (, info, !=]
[), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this]
[!=, null, ), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }]
[), {, templateTypeNames, =, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this]
[=, info, ., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this, ;, }, private]
[;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this, ;, }, private, boolean, addParameter, (, FunctionParamBuilder, builder, ,]
[., getTemplateTypeNames, (, ), ;, typeRegistry, ., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this, ;, }, private, boolean, addParameter]
[;, }, return, this, ;, }, private, boolean, addParameter, (, FunctionParamBuilder, builder, ,, JSType, paramType, ,, boolean, warnedAboutArgList, ,, boolean]
[., setTemplateTypeNames, (, templateTypeNames, ), ;, }, return, this, ;, }, private, boolean, addParameter, (, FunctionParamBuilder, builder, ,, JSType, paramType]
[), ;, }, return, this, ;, }, private, boolean, addParameter, (, FunctionParamBuilder, builder, ,, JSType, paramType, ,, boolean, warnedAboutArgList, ,]
[;, }, private, boolean, addParameter, (, FunctionParamBuilder, builder, ,, JSType, paramType, ,, boolean, warnedAboutArgList, ,, boolean, isOptional, ,, boolean, isVarArgs]
[;, if, (, isOptional, ), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {]
[), {, if, (, !, builder, ., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, )]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs]
[., addOptionalParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }]
[), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if]
[;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (]
[), ;, emittedWarning, =, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs]
[=, true, ;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, )]
[;, }, }, else, if, (, isVarArgs, ), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !]
[), {, if, (, !, builder, ., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, )]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, .]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (]
[&&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (]
[., addVarArgs, (, paramType, ), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }]
[), &&, !, warnedAboutArgList, ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, .]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, .]
[;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !]
[), ;, emittedWarning, =, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&]
[=, true, ;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, )]
[;, }, }, else, {, if, (, !, builder, ., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if]
[), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning]
[&&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }]
[&&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }]
[., addRequiredParams, (, paramType, ), &&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning]
[), &&, !, warnedAboutArgList, ), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;]
[), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning]
[), {, if, (, builder, ., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning]
[), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }, emittedWarning, =, true, ;]
[., hasVarArgs, (, ), ), {, reportWarning, (, VAR_ARGS_MUST_BE_LAST, ), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }]
[;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }]
[), ;, }, else, {, reportWarning, (, OPTIONAL_ARG_AT_END, ), ;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;]
[;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType]
[), ;, }, emittedWarning, =, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (]
[=, true, ;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, )]
[;, }, }, return, emittedWarning, ;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if]
[;, }, FunctionType, buildAndRegister, (, ), {, if, (, returnType, ==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns]
[), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents]
[==, null, ), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&]
[), {, if, (, !, contents, ., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents]
[), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType]
[&&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =]
[&&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, .]
[&&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, .]
[., mayHaveNonEmptyReturns, (, ), &&, !, contents, ., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {]
[&&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =]
[&&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =]
[., mayHaveSingleThrow, (, ), &&, !, contents, ., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE]
[), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType]
[), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType]
[., mayBeFromExterns, (, ), ), {, returnType, =, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }]
[=, typeRegistry, ., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, )]
[;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (]
[., getNativeType, (, VOID_TYPE, ), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType]
[), ;, returnTypeInferred, =, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType]
[=, true, ;, }, }, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, )]
[;, }, }, if, (, returnType, ==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }]
[), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw]
[==, null, ), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, )]
[), {, returnType, =, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw]
[=, typeRegistry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (]
[;, }, if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", )]
[), ;, }, if, (, parametersNode, ==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType]
[), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =]
[==, null, ), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {]
[), {, throw, new, IllegalStateException, (, "All Function types must have params and a return type", ), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =]
[;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (]
[), ;, }, FunctionType, fnType, ;, if, (, isConstructor, ), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if]
[), {, fnType, =, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType]
[=, getOrCreateConstructor, (, ), ;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,]
[;, }, else, if, (, isInterface, ), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (]
[), {, fnType, =, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn]
[=, typeRegistry, ., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), .]
[;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry]
[., createInterfaceType, (, fnName, ,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (]
[,, contents, ., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[., getSourceNode, (, ), ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, )]
[&&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, )]
[., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, )]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, )]
[., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }]
[;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (]
[., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else]
[,, fnType, ., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new]
[), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName]
[., getInstanceType, (, ), ), ;, }, maybeSetBaseType, (, fnType, ), ;, }, else, {, fnType, =, new, FunctionBuilder, (]
[;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents]
[), ;, }, else, {, fnType, =, new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (]
[=, new, FunctionBuilder, (, typeRegistry, ), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), )]
[;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, )]
[., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, .]
[., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=]
[., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;]
[., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (]
[., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (]
[., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred]
[., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), .]
[), ., withName, (, fnName, ), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, )]
[), ., withSourceNode, (, contents, ., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,]
[), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys]
[., getSourceNode, (, ), ), ., withParamsNode, (, parametersNode, ), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (]
[), ., withReturnType, (, returnType, ,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build]
[,, returnTypeInferred, ), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (]
[), ., withTypeOfThis, (, thisType, ), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, )]
[), ., withTemplateKeys, (, templateTypeNames, ), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces]
[), ., build, (, ), ;, maybeSetBaseType, (, fnType, ), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType]
[;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces]
[), ;, }, if, (, implementedInterfaces, !=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (]
[), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces]
[!=, null, ), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType]
[), {, fnType, ., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces]
[;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames]
[., setImplementedInterfaces, (, implementedInterfaces, ), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, )]
[), ;, }, if, (, extendedInterfaces, !=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, .]
[), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }]
[!=, null, ), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType]
[), {, fnType, ., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }]
[;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {]
[., setExtendedInterfaces, (, extendedInterfaces, ), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType]
[), ;, }, typeRegistry, ., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, )]
[;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (]
[., clearTemplateTypeNames, (, ), ;, return, fnType, ;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !]
[;, }, private, void, maybeSetBaseType, (, FunctionType, fnType, ), {, if, (, !, fnType, ., isInterface, (, ), &&, baseType]
[), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =]
[&&, baseType, !=, null, ), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, )]
[&&, baseType, !=, null, ), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, )]
[., isInterface, (, ), &&, baseType, !=, null, ), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private]
[), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =]
[!=, null, ), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType]
[), {, fnType, ., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =]
[;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,, contents, .]
[., setPrototypeBasedOn, (, baseType, ), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType]
[), ;, }, }, private, FunctionType, getOrCreateConstructor, (, ), {, FunctionType, fnType, =, typeRegistry, ., createConstructorType, (, fnName, ,, contents]
[;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (]
[., createConstructorType, (, fnName, ,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType]
[,, contents, ., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType]
[,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (]
[., getSourceNode, (, ), ,, parametersNode, ,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName]
[,, returnType, ,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, )]
[,, null, ), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, ), {, fnType]
[), ;, JSType, existingType, =, typeRegistry, ., getType, (, fnName, ), ;, if, (, makesStructs, ), {, fnType, ., setStruct]
[;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {, fnType]
[., getType, (, fnName, ), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if]
[), ;, if, (, makesStructs, ), {, fnType, ., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {]
[), {, fnType, ., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, )]
[;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if, (, existingType, !=, null]
[., setStruct, (, ), ;, }, else, if, (, makesDicts, ), {, fnType, ., setDict, (, ), ;, }, if]
[), {, fnType, ., setDict, (, ), ;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType]
[;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (]
[., setDict, (, ), ;, }, if, (, existingType, !=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (]
[), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function"]
[!=, null, ), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals]
[), {, boolean, isInstanceObject, =, existingType, ., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function"]
[;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, .]
[., isInstanceType, (, ), ;, if, (, isInstanceObject, ||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =]
[), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType]
[||, fnName, ., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), .]
[), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType]
[., equals, (, "Function", ), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (]
[), ), {, FunctionType, existingFn, =, isInstanceObject, ?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, .]
[;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (]
[?, existingType, ., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (]
[:, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn]
[., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==]
[., toObjectType, (, ), ., getConstructor, (, ), :, typeRegistry, ., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, .]
[;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (]
[., getNativeFunctionType, (, FUNCTION_FUNCTION_TYPE, ), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource]
[), ;, if, (, existingFn, ., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode]
[), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType]
[==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn]
[., getSource, (, ), ==, null, ), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }]
[), {, existingFn, ., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType]
[;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType]
[., setSource, (, contents, ., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, )]
[), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,]
[., getSourceNode, (, ), ), ;, }, if, (, !, existingFn, ., hasEqualCallType, (, fnType, ), ), {, reportWarning, (]
[), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), )]
[), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), )]
[., hasEqualCallType, (, fnType, ), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn]
[), ), {, reportWarning, (, TYPE_REDEFINITION, ,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, )]
[;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (, )]
[,, fnName, ,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;]
[,, fnType, ., toString, (, ), ,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;, }, else]
[,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType]
[., toString, (, ), ,, existingFn, ., toString, (, ), ), ;, }, return, existingFn, ;, }, else, {, }]
[), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (]
[., toString, (, ), ), ;, }, return, existingFn, ;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;]
[;, }, else, {, }, }, maybeSetBaseType, (, fnType, ), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, )]
[;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry]
[), ;, if, (, getScopeDeclaredIn, (, ), ., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, return, fnType, ;, }]
[&&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, )]
[., isGlobal, (, ), &&, !, fnName, ., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, return, fnType, ;, }]
[), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, return, fnType, ;, }]
[., isEmpty, (, ), ), {, typeRegistry, ., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }]
[;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, .]
[., declareType, (, fnName, ,, fnType, ., getInstanceType, (, ), ), ;, }, return, fnType, ;, }, private, void, reportWarning]
[,, fnType, ., getInstanceType, (, ), ), ;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,]
[), ;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler]
[., getInstanceType, (, ), ), ;, }, return, fnType, ;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ...]
[;, }, private, void, reportWarning, (, DiagnosticType, warning, ,, String, ..., args, ), {, compiler, ., report, (, JSError, .]
[;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (, JSError, .]
[., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, warning, ,, args, ), ), ;, }, private, void]
[), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (, JSError]
[., make, (, sourceName, ,, errorRoot, ,, warning, ,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error]
[,, errorRoot, ,, warning, ,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args]
[,, warning, ,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {]
[,, args, ), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, .]
[), ), ;, }, private, void, reportError, (, DiagnosticType, error, ,, String, ..., args, ), {, compiler, ., report, (]
[;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||, info]
[., report, (, JSError, ., make, (, sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean]
[), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0, ||]
[., make, (, sourceName, ,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info]
[,, errorRoot, ,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info]
[,, error, ,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount]
[,, args, ), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, )]
[), ), ;, }, static, boolean, isFunctionTypeDeclaration, (, JSDocInfo, info, ), {, return, info, ., getParameterCount, (, ), >, 0]
[;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (]
[||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf]
[||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {]
[||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }]
[||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info]
[>, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, )]
[., getParameterCount, (, ), >, 0, ||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info]
[||, info, ., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info]
[||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }]
[., hasReturnType, (, ), ||, info, ., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info, ., isInterface]
[||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {]
[., hasThisType, (, ), ||, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope]
[||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf]
[., isConstructor, (, ), ||, info, ., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex]
[;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, ".", ), ;, if, (]
[., isInterface, (, ), ;, }, private, Scope, getScopeDeclaredIn, (, ), {, int, dotIndex, =, fnName, ., indexOf, (, "."]
[;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, )]
[., indexOf, (, ".", ), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =, fnName, ., substring]
[), ;, if, (, dotIndex, !=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex]
[), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar]
[!=, -, 1, ), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =]
[), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar]
[), {, String, rootVarName, =, fnName, ., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar]
[;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return, rootVar]
[., substring, (, 0, ,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (]
[,, dotIndex, ), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, )]
[), ;, Var, rootVar, =, scope, ., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return]
[;, if, (, rootVar, !=, null, ), {, return, rootVar, ., getScope, (, ), ;, }, }, return, scope, ;]
[., getVar, (, rootVarName, ), ;, if, (, rootVar, !=, null, ), {, return, rootVar, ., getScope, (, ), ;]
[), ;, if, (, rootVar, !=, null, ), {, return, rootVar, ., getScope, (, ), ;, }, }, return, scope]
[), {, return, rootVar, ., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (]
[!=, null, ), {, return, rootVar, ., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean]
[), {, return, rootVar, ., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (]
[;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (]
[., getScope, (, ), ;, }, }, return, scope, ;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {]
[;, }, private, static, boolean, hasMoreTagsToResolve, (, ObjectType, objectType, ), {, Preconditions, ., checkArgument, (, objectType, ., isUnknownType, (, )]
[;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (, objectType, ., getImplicitPrototype, (, ), .]
[., checkArgument, (, objectType, ., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, )]
[), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (, objectType, ., getImplicitPrototype, (, )]
[., isUnknownType, (, ), ), ;, if, (, objectType, ., getImplicitPrototype, (, ), !=, null, ), {, if, (, objectType]
[), {, if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return, false, ;, }, else]
[!=, null, ), {, if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return, false, ;]
[., getImplicitPrototype, (, ), !=, null, ), {, if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), )]
[), {, if, (, objectType, ., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return, false, ;, }, else]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =, objectType, .]
[., isResolved, (, ), ), {, return, false, ;, }, else, {, return, true, ;, }, }, else, {, FunctionType]
[., getImplicitPrototype, (, ), ., isResolved, (, ), ), {, return, false, ;, }, else, {, return, true, ;, }]
[;, }, else, {, return, true, ;, }, }, else, {, FunctionType, ctor, =, objectType, ., getConstructor, (, ), ;]
[;, }, }, else, {, FunctionType, ctor, =, objectType, ., getConstructor, (, ), ;, if, (, ctor, !=, null, )]
[;, if, (, ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {]
[., getConstructor, (, ), ;, if, (, ctor, !=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces]
[), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !, interfaceType, ., isResolved]
[!=, null, ), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !, interfaceType]
[), {, for, (, ObjectType, interfaceType, :, ctor, ., getExtendedInterfaces, (, ), ), {, if, (, !, interfaceType, ., isResolved]
[), {, if, (, !, interfaceType, ., isResolved, (, ), ), {, return, true, ;, }, }, }, return, false]
[., getExtendedInterfaces, (, ), ), {, if, (, !, interfaceType, ., isResolved, (, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, }, return, false, ;, }, }, static, interface, FunctionContents, {, Node, getSourceNode, (]
[), {, return, true, ;, }, }, }, return, false, ;, }, }, static, interface, FunctionContents, {, Node, getSourceNode, (]
[., isResolved, (, ), ), {, return, true, ;, }, }, }, return, false, ;, }, }, static, interface, FunctionContents]
[;, }, }, }, return, false, ;, }, }, static, interface, FunctionContents, {, Node, getSourceNode, (, ), ;, boolean, mayBeFromExterns]
[;, }, }, static, interface, FunctionContents, {, Node, getSourceNode, (, ), ;, boolean, mayBeFromExterns, (, ), ;, boolean, mayHaveNonEmptyReturns, (]
[;, static, FunctionContents, get, (, ), {, return, singleton, ;, }, @, Override, public, Node, getSourceNode, (, ), {, return]
[;, }, @, Override, public, Node, getSourceNode, (, ), {, return, null, ;, }, @, Override, public, boolean, mayBeFromExterns, (]
[;, }, @, Override, public, boolean, mayBeFromExterns, (, ), {, return, true, ;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (]
[;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (]
[;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, return, true, ;, }, @, Override, public, Iterable, <, String]
[;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, ImmutableList, ., of, (, ), ;]
[;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, ImmutableSet, ., of, (, ), ;]
[., of, (, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, ImmutableSet, .]
[;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, ImmutableMultiset, ., of, (, ), ;]
[., of, (, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, ImmutableMultiset, .]
[;, }, }, static, class, AstFunctionContents, implements, FunctionContents, {, private, final, Node, n, ;, private, boolean, hasNonEmptyReturns, =, false, ;]
[., of, (, ), ;, }, }, static, class, AstFunctionContents, implements, FunctionContents, {, private, final, Node, n, ;, private, boolean]
[;, private, Set, <, String, >, escapedVarNames, ;, private, Set, <, String, >, escapedQualifiedNames, ;, private, final, Multiset, <, String]
[;, AstFunctionContents, (, Node, n, ), {, this, ., n, =, n, ;, }, @, Override, public, Node, getSourceNode, (]
[., create, (, ), ;, AstFunctionContents, (, Node, n, ), {, this, ., n, =, n, ;, }, @, Override]
[=, n, ;, }, @, Override, public, Node, getSourceNode, (, ), {, return, n, ;, }, @, Override, public, boolean]
[., n, =, n, ;, }, @, Override, public, Node, getSourceNode, (, ), {, return, n, ;, }, @, Override]
[;, }, @, Override, public, Node, getSourceNode, (, ), {, return, n, ;, }, @, Override, public, boolean, mayBeFromExterns, (]
[;, }, @, Override, public, boolean, mayBeFromExterns, (, ), {, return, n, ., isFromExterns, (, ), ;, }, @, Override]
[;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, hasNonEmptyReturns, ;, }, void, recordNonEmptyReturn, (, ), {, hasNonEmptyReturns]
[., isFromExterns, (, ), ;, }, @, Override, public, boolean, mayHaveNonEmptyReturns, (, ), {, return, hasNonEmptyReturns, ;, }, void, recordNonEmptyReturn]
[;, }, void, recordNonEmptyReturn, (, ), {, hasNonEmptyReturns, =, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {]
[=, true, ;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, )]
[;, }, @, Override, public, boolean, mayHaveSingleThrow, (, ), {, Node, block, =, n, ., getLastChild, (, ), ;, return]
[;, return, block, ., hasOneChild, (, ), &&, block, ., getFirstChild, (, ), ., isThrow, (, ), ;, }, @]
[., getLastChild, (, ), ;, return, block, ., hasOneChild, (, ), &&, block, ., getFirstChild, (, ), ., isThrow, (]
[;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==, null, ?, ImmutableList, .]
[&&, block, ., getFirstChild, (, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames]
[., hasOneChild, (, ), &&, block, ., getFirstChild, (, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable]
[;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==, null, ?, ImmutableList, .]
[., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, ), {, return, escapedVarNames, ==]
[., getFirstChild, (, ), ., isThrow, (, ), ;, }, @, Override, public, Iterable, <, String, >, getEscapedVarNames, (, )]
[;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =, Sets, .]
[?, ImmutableList, ., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {]
[==, null, ?, ImmutableList, ., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name]
[?, ImmutableList, ., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {]
[:, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =]
[., <, String, >, of, (, ), :, escapedVarNames, ;, }, void, recordEscapedVarName, (, String, name, ), {, if, (]
[;, }, void, recordEscapedVarName, (, String, name, ), {, if, (, escapedVarNames, ==, null, ), {, escapedVarNames, =, Sets, .]
[), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }, escapedVarNames, ., add, (, name, ), ;, }, @]
[==, null, ), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }, escapedVarNames, ., add, (, name, ), ;]
[), {, escapedVarNames, =, Sets, ., newHashSet, (, ), ;, }, escapedVarNames, ., add, (, name, ), ;, }, @]
[=, Sets, ., newHashSet, (, ), ;, }, escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set]
[;, }, escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, )]
[., newHashSet, (, ), ;, }, escapedVarNames, ., add, (, name, ), ;, }, @, Override, public, Set, <, String]
[;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==, null, ?, ImmutableSet, .]
[., add, (, name, ), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames]
[), ;, }, @, Override, public, Set, <, String, >, getEscapedQualifiedNames, (, ), {, return, escapedQualifiedNames, ==, null, ?, ImmutableSet]
[;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =, Sets, .]
[?, ImmutableSet, ., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {]
[==, null, ?, ImmutableSet, ., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name]
[?, ImmutableSet, ., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {]
[:, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =]
[., <, String, >, of, (, ), :, escapedQualifiedNames, ;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (]
[;, }, void, recordEscapedQualifiedName, (, String, name, ), {, if, (, escapedQualifiedNames, ==, null, ), {, escapedQualifiedNames, =, Sets, .]
[), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (, name, ), ;, }, @]
[==, null, ), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (, name, ), ;]
[), {, escapedQualifiedNames, =, Sets, ., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (, name, ), ;, }, @]
[=, Sets, ., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (, name, ), ;, }, @, Override, public, Multiset]
[;, }, escapedQualifiedNames, ., add, (, name, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, )]
[., newHashSet, (, ), ;, }, escapedQualifiedNames, ., add, (, name, ), ;, }, @, Override, public, Multiset, <, String]
[;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, assignedVarNames, ;, }, void, recordAssignedName, (]
[., add, (, name, ), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, assignedVarNames]
[), ;, }, @, Override, public, Multiset, <, String, >, getAssignedNameCounts, (, ), {, return, assignedVarNames, ;, }, void, recordAssignedName]
[;, }, void, recordAssignedName, (, String, name, ), {, assignedVarNames, ., add, (, name, ), ;, }, }, }]
[;, }, }, }]
[., add, (, name, ), ;, }, }, }]
[), ;, }, }, }]
