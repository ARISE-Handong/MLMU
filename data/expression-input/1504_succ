[;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public, abstract, RealVector, append, (, double, d, ), ;]
[,, getEntry, (, index, ), +, increment, ), ;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public]
[), ;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public, abstract, RealVector, append, (, double, d, )]
[+, increment, ), ;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public, abstract, RealVector, append, (, double]
[), +, increment, ), ;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public, abstract, RealVector, append, (]
[), ;, }, public, abstract, RealVector, append, (, RealVector, v, ), ;, public, abstract, RealVector, append, (, double, d, )]
[;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;, if]
[), ;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =, getDimension, (, ), ;]
[., getDimension, (, ), ), ;, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, int, d, =]
[;, if, (, d, !=, n, ), {, throw, new, DimensionMismatchException, (, d, ,, n, ), ;, }, }, protected]
[), {, throw, new, DimensionMismatchException, (, d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index]
[!=, n, ), {, throw, new, DimensionMismatchException, (, d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final]
[), {, throw, new, DimensionMismatchException, (, d, ,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index]
[;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[,, n, ), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index]
[), ;, }, }, protected, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[<, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[>=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, )]
[;, }, }, protected, void, checkIndices, (, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkIndices, (, final, int]
[., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkIndices, (]
[,, 0, ,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkIndices, (, final, int, start, ,]
[,, getDimension, (, ), -, 1, ), ;, }, }, protected, void, checkIndices, (, final, int, start, ,, final, int]
[), ;, }, }, protected, void, checkIndices, (, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException]
[-, 1, ), ;, }, }, protected, void, checkIndices, (, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException]
[), ;, }, }, protected, void, checkIndices, (, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException]
[;, if, (, (, start, <, 0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }]
[||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,]
[), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0]
[<, 0, ), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start]
[), ||, (, start, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;]
[>=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;]
[;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException]
[,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (]
[., INDEX, ,, start, ,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, )]
[,, 0, ,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=]
[,, dim, -, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, )]
[), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new]
[-, 1, ), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {]
[), ;, }, if, (, (, end, <, 0, ), ||, (, end, >=, dim, ), ), {, throw, new]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }]
[||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,]
[), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0]
[<, 0, ), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end]
[), ||, (, end, >=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;]
[>=, dim, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;]
[;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start]
[,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw, new]
[., INDEX, ,, end, ,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {]
[,, 0, ,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (]
[,, dim, -, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, .]
[), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,]
[-, 1, ), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,]
[), ;, }, if, (, end, <, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,, false, ), ;, }, }, public]
[<, start, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,, false, ), ;, }, }, public]
[;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result]
[,, end, ,, start, ,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {]
[., INITIAL_ROW_AFTER_FINAL_ROW, ,, end, ,, start, ,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws]
[,, start, ,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[,, false, ), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, )]
[), ;, }, }, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector]
[;, RealVector, result, =, v, ., copy, (, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;]
[), ;, RealVector, result, =, v, ., copy, (, ), ;, Iterator, <, Entry, >, it, =, iterator, (, )]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[., copy, (, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue]
[., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index]
[;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), )]
[., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry]
[;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, )]
[., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }]
[,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }]
[), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[+, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v]
[., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector]
[), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws]
[), ), ;, }, return, result, ;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, RealVector, result, =]
[;, RealVector, result, =, v, ., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =, iterator, (]
[), ;, RealVector, result, =, v, ., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =, iterator]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[., mapMultiply, (, -, 1d, ), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it]
[), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), )]
[), ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), )]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =, e, ., getIndex, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, int, index, =]
[;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue]
[., next, (, ), ;, final, int, index, =, e, ., getIndex, (, ), ;, result, ., setEntry, (, index]
[;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), )]
[., getIndex, (, ), ;, result, ., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry]
[;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, ), ., mapAddToSelf]
[., setEntry, (, index, ,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }]
[,, e, ., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }]
[), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, ), .]
[+, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d]
[., getValue, (, ), +, result, ., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector]
[), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, ), .]
[., getEntry, (, index, ), ), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {]
[), ), ;, }, return, result, ;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, )]
[;, }, public, RealVector, mapAdd, (, double, d, ), {, return, copy, (, ), ., mapAddToSelf, (, d, ), ;]
[;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return, mapToSelf, (]
[., mapAddToSelf, (, d, ), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0]
[), ;, }, public, RealVector, mapAddToSelf, (, double, d, ), {, if, (, d, !=, 0, ), {, return, mapToSelf]
[), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, ), ), ;, }, return]
[!=, 0, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, ), ), ;]
[), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Add, (, ), ,, d, ), ), ;, }, return]
[;, }, return, this, ;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector, v, )]
[), ;, }, return, this, ;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector, v]
[., fix2ndArgument, (, new, Add, (, ), ,, d, ), ), ;, }, return, this, ;, }, public, abstract, RealVector]
[,, d, ), ), ;, }, return, this, ;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct]
[), ), ;, }, return, this, ;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector]
[;, }, public, abstract, RealVector, copy, (, ), ;, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[;, double, d, =, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0]
[), ;, double, d, =, 0, ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (]
[;, i, <, n, ;, i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (]
[;, i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }]
[<, n, ;, i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, )]
[;, i, ++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }]
[), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }, return, d, ;]
[++, ), {, d, +=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }, return, d]
[+=, getEntry, (, i, ), *, v, ., getEntry, (, i, ), ;, }, return, d, ;, }, public, double]
[;, }, return, d, ;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double]
[*, v, ., getEntry, (, i, ), ;, }, return, d, ;, }, public, double, cosine, (, RealVector, v, )]
[), *, v, ., getEntry, (, i, ), ;, }, return, d, ;, }, public, double, cosine, (, RealVector, v]
[;, }, return, d, ;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double]
[., getEntry, (, i, ), ;, }, return, d, ;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException]
[), ;, }, return, d, ;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final]
[;, }, public, double, cosine, (, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm, =, getNorm, (]
[;, final, double, vNorm, =, v, ., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==, 0]
[;, if, (, norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[., getNorm, (, ), ;, if, (, norm, ==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (, norm]
[||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v]
[==, 0, ||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct]
[||, vNorm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (, norm]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (, norm]
[;, }, return, dotProduct, (, v, ), /, (, norm, *, vNorm, ), ;, }, @, Deprecated, public, abstract, RealVector]
[), ;, }, return, dotProduct, (, v, ), /, (, norm, *, vNorm, ), ;, }, @, Deprecated, public, abstract]
[., ZERO_NORM, ), ;, }, return, dotProduct, (, v, ), /, (, norm, *, vNorm, ), ;, }, @, Deprecated]
[;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, ;, @, Deprecated, public, abstract, RealVector]
[/, (, norm, *, vNorm, ), ;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException]
[), /, (, norm, *, vNorm, ), ;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws]
[;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, ;, @, Deprecated, public, abstract, RealVector]
[), ;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, ;, @, Deprecated, public, abstract]
[*, vNorm, ), ;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, ;, @, Deprecated]
[), ;, }, @, Deprecated, public, abstract, RealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, ;, @, Deprecated, public, abstract]
[;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, .]
[), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =, e, ., getValue, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, diff, =]
[;, final, double, diff, =, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, )]
[., next, (, ), ;, final, double, diff, =, e, ., getValue, (, ), -, v, ., getEntry, (, e]
[;, d, +=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm]
[-, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return]
[., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *]
[;, d, +=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm]
[., getEntry, (, e, ., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return, FastMath, .]
[), ;, d, +=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double]
[., getIndex, (, ), ), ;, d, +=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (, d, )]
[+=, diff, *, diff, ;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm, (, )]
[;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm, (, ), {, double, sum, =]
[*, diff, ;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm, (, ), {, double]
[;, }, return, FastMath, ., sqrt, (, d, ), ;, }, public, double, getNorm, (, ), {, double, sum, =]
[;, }, public, double, getNorm, (, ), {, double, sum, =, 0, ;, Iterator, <, Entry, >, it, =, iterator]
[., sqrt, (, d, ), ;, }, public, double, getNorm, (, ), {, double, sum, =, 0, ;, Iterator, <]
[), ;, }, public, double, getNorm, (, ), {, double, sum, =, 0, ;, Iterator, <, Entry, >, it, =]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, value, =, e, ., getValue, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, final, double, value, =]
[;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=, value, *, value, ;, }, return, FastMath]
[., next, (, ), ;, final, double, value, =, e, ., getValue, (, ), ;, sum, +=, value, *, value]
[;, sum, +=, value, *, value, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm]
[., getValue, (, ), ;, sum, +=, value, *, value, ;, }, return, FastMath, ., sqrt, (, sum, ), ;]
[+=, value, *, value, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, )]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, ), {, double, norm, =]
[*, value, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, ), {, double]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, ), {, double, norm, =]
[;, }, public, double, getL1Norm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator]
[., sqrt, (, sum, ), ;, }, public, double, getL1Norm, (, ), {, double, norm, =, 0, ;, Iterator, <]
[), ;, }, public, double, getL1Norm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=, FastMath, ., abs, (, e, .]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, +=, FastMath, .]
[;, norm, +=, FastMath, ., abs, (, e, ., getValue, (, ), ), ;, }, return, norm, ;, }, public]
[., next, (, ), ;, norm, +=, FastMath, ., abs, (, e, ., getValue, (, ), ), ;, }, return]
[+=, FastMath, ., abs, (, e, ., getValue, (, ), ), ;, }, return, norm, ;, }, public, double, getLInfNorm]
[;, }, return, norm, ;, }, public, double, getLInfNorm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry]
[., abs, (, e, ., getValue, (, ), ), ;, }, return, norm, ;, }, public, double, getLInfNorm, (, )]
[), ;, }, return, norm, ;, }, public, double, getLInfNorm, (, ), {, double, norm, =, 0, ;, Iterator, <]
[., getValue, (, ), ), ;, }, return, norm, ;, }, public, double, getLInfNorm, (, ), {, double, norm, =]
[;, }, public, double, getLInfNorm, (, ), {, double, norm, =, 0, ;, Iterator, <, Entry, >, it, =, iterator]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, norm, =, FastMath, .]
[;, norm, =, FastMath, ., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue, (, ), ), )]
[., next, (, ), ;, norm, =, FastMath, ., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue]
[=, FastMath, ., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue, (, ), ), ), ;, }]
[;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, )]
[., max, (, norm, ,, FastMath, ., abs, (, e, ., getValue, (, ), ), ), ;, }, return, norm]
[,, FastMath, ., abs, (, e, ., getValue, (, ), ), ), ;, }, return, norm, ;, }, public, double]
[), ;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[., abs, (, e, ., getValue, (, ), ), ), ;, }, return, norm, ;, }, public, double, getL1Distance, (]
[), ), ;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., getValue, (, ), ), ), ;, }, return, norm, ;, }, public, double, getL1Distance, (, RealVector, v, ), throws]
[;, }, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, .]
[), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=, FastMath, ., abs, (, e, .]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, +=, FastMath, .]
[;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex]
[., next, (, ), ;, d, +=, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry]
[+=, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, )]
[;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, )]
[., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), )]
[), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[-, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ;, }, return, d, ;, }, public, double]
[., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ;, }, return, d]
[), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v]
[., getEntry, (, e, ., getIndex, (, ), ), ), ;, }, return, d, ;, }, public, double, getLInfDistance, (]
[), ), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., getIndex, (, ), ), ), ;, }, return, d, ;, }, public, double, getLInfDistance, (, RealVector, v, ), throws]
[;, }, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ), ;, double, d, =]
[;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, .]
[), ;, double, d, =, 0, ;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it]
[;, Iterator, <, Entry, >, it, =, iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, ., max, (, FastMath, .]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, d, =, FastMath, .]
[;, d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry]
[., next, (, ), ;, d, =, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, )]
[=, FastMath, ., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e]
[;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1, ;, double, minValue]
[., max, (, FastMath, ., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex]
[,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1]
[., abs, (, e, ., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), )]
[), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -]
[-, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ,, d, ), ;, }, return, d, ;]
[., getValue, (, ), -, v, ., getEntry, (, e, ., getIndex, (, ), ), ), ,, d, ), ;]
[), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -]
[., getEntry, (, e, ., getIndex, (, ), ), ), ,, d, ), ;, }, return, d, ;, }, public]
[), ), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =]
[., getIndex, (, ), ), ), ,, d, ), ;, }, return, d, ;, }, public, int, getMinIndex, (, )]
[), ;, }, return, d, ;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1, ;, double]
[;, }, public, int, getMinIndex, (, ), {, int, minIndex, =, -, 1, ;, double, minValue, =, Double, ., POSITIVE_INFINITY]
[;, double, minValue, =, Double, ., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, double, minValue, =, Double, ., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., POSITIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;]
[), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), <=]
[., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, .]
[;, if, (, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;]
[., next, (, ), ;, if, (, entry, ., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, .]
[), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;, }, }]
[<=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;]
[., getValue, (, ), <=, minValue, ), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =, entry, .]
[), {, minIndex, =, entry, ., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;, }, }]
[=, entry, ., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;, }, }, return, minIndex, ;]
[;, minValue, =, entry, ., getValue, (, ), ;, }, }, return, minIndex, ;, }, public, double, getMinValue, (, )]
[., getIndex, (, ), ;, minValue, =, entry, ., getValue, (, ), ;, }, }, return, minIndex, ;, }, public]
[=, entry, ., getValue, (, ), ;, }, }, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final]
[;, }, }, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, )]
[., getValue, (, ), ;, }, }, return, minIndex, ;, }, public, double, getMinValue, (, ), {, final, int, minIndex]
[;, }, public, double, getMinValue, (, ), {, final, int, minIndex, =, getMinIndex, (, ), ;, return, minIndex, <, 0]
[;, return, minIndex, <, 0, ?, Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (]
[;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double, maxValue, =, Double, ., NEGATIVE_INFINITY]
[?, Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =]
[<, 0, ?, Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int]
[?, Double, ., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =]
[:, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double]
[., NaN, :, getEntry, (, minIndex, ), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1]
[;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double, maxValue, =, Double, ., NEGATIVE_INFINITY]
[), ;, }, public, int, getMaxIndex, (, ), {, int, maxIndex, =, -, 1, ;, double, maxValue, =, Double, .]
[;, double, maxValue, =, Double, ., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, double, maxValue, =, Double, ., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (]
[;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[., NEGATIVE_INFINITY, ;, Iterator, <, Entry, >, iterator, =, iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;]
[), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, ., getValue, (, ), >=]
[., hasNext, (, ), ), {, final, Entry, entry, =, iterator, ., next, (, ), ;, if, (, entry, .]
[;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;]
[., next, (, ), ;, if, (, entry, ., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, .]
[), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;, }, }]
[>=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;]
[., getValue, (, ), >=, maxValue, ), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =, entry, .]
[), {, maxIndex, =, entry, ., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;, }, }]
[=, entry, ., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;, }, }, return, maxIndex, ;]
[;, maxValue, =, entry, ., getValue, (, ), ;, }, }, return, maxIndex, ;, }, public, double, getMaxValue, (, )]
[., getIndex, (, ), ;, maxValue, =, entry, ., getValue, (, ), ;, }, }, return, maxIndex, ;, }, public]
[=, entry, ., getValue, (, ), ;, }, }, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final]
[;, }, }, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, )]
[., getValue, (, ), ;, }, }, return, maxIndex, ;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex]
[;, }, public, double, getMaxValue, (, ), {, final, int, maxIndex, =, getMaxIndex, (, ), ;, return, maxIndex, <, 0]
[;, return, maxIndex, <, 0, ?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (]
[;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (, ), ., mapMultiplyToSelf, (, d, ), ;]
[?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return]
[<, 0, ?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, )]
[?, Double, ., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return]
[:, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (, ), .]
[., NaN, :, getEntry, (, maxIndex, ), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (]
[;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (, ), ., mapMultiplyToSelf, (, d, ), ;]
[), ;, }, public, RealVector, mapMultiply, (, double, d, ), {, return, copy, (, ), ., mapMultiplyToSelf, (, d, )]
[;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Multiply, (]
[., mapMultiplyToSelf, (, d, ), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, .]
[), ;, }, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Multiply]
[;, }, public, RealVector, mapSubtract, (, double, d, ), {, return, copy, (, ), ., mapSubtractToSelf, (, d, ), ;]
[), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return, copy, (, ), ., mapSubtractToSelf, (, d, )]
[., fix2ndArgument, (, new, Multiply, (, ), ,, d, ), ), ;, }, public, RealVector, mapSubtract, (, double, d, )]
[,, d, ), ), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return, copy, (, ), ., mapSubtractToSelf]
[), ), ;, }, public, RealVector, mapSubtract, (, double, d, ), {, return, copy, (, ), ., mapSubtractToSelf, (, d]
[;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return, mapAddToSelf, (, -, d, ), ;, }, public, RealVector]
[., mapSubtractToSelf, (, d, ), ;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return, mapAddToSelf, (, -, d]
[), ;, }, public, RealVector, mapSubtractToSelf, (, double, d, ), {, return, mapAddToSelf, (, -, d, ), ;, }, public]
[;, }, public, RealVector, mapDivide, (, double, d, ), {, return, copy, (, ), ., mapDivideToSelf, (, d, ), ;]
[), ;, }, public, RealVector, mapDivide, (, double, d, ), {, return, copy, (, ), ., mapDivideToSelf, (, d, )]
[), ;, }, public, RealVector, mapDivide, (, double, d, ), {, return, copy, (, ), ., mapDivideToSelf, (, d, )]
[;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Divide, (]
[., mapDivideToSelf, (, d, ), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, .]
[), ;, }, public, RealVector, mapDivideToSelf, (, double, d, ), {, return, mapToSelf, (, FunctionUtils, ., fix2ndArgument, (, new, Divide]
[;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =, this, ., getDimension, (, ), ;]
[), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =, this, ., getDimension, (, )]
[., fix2ndArgument, (, new, Divide, (, ), ,, d, ), ), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, )]
[,, d, ), ), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =, this, .]
[), ), ;, }, public, RealMatrix, outerProduct, (, RealVector, v, ), {, final, int, m, =, this, ., getDimension, (]
[;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector]
[., getDimension, (, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, product, ;, if]
[;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix]
[., getDimension, (, ), ;, final, RealMatrix, product, ;, if, (, v, instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {]
[), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (]
[||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product]
[instanceof, SparseRealVector, ||, this, instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else]
[), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (]
[instanceof, SparseRealVector, ), {, product, =, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new]
[=, new, OpenMapRealMatrix, (, m, ,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n]
[;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =]
[,, n, ), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (]
[), ;, }, else, {, product, =, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i]
[=, new, Array2DRowRealMatrix, (, m, ,, n, ), ;, }, for, (, int, i, =, 0, ;, i, <, m]
[;, }, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int]
[,, n, ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[<, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, ., setEntry]
[++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, product, .]
[;, j, <, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry]
[;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *]
[<, n, ;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i]
[;, j, ++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *]
[), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry]
[++, ), {, product, ., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *, v, .]
[;, }, }, return, product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[., setEntry, (, i, ,, j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, )]
[,, j, ,, this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, ), ), ;, }, }]
[,, this, ., getEntry, (, i, ), *, v, ., getEntry, (, j, ), ), ;, }, }, return, product]
[), ;, }, }, return, product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[*, v, ., getEntry, (, j, ), ), ;, }, }, return, product, ;, }, public, RealVector, projection, (, final]
[., getEntry, (, i, ), *, v, ., getEntry, (, j, ), ), ;, }, }, return, product, ;, }]
[), *, v, ., getEntry, (, j, ), ), ;, }, }, return, product, ;, }, public, RealVector, projection, (]
[), ;, }, }, return, product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[., getEntry, (, j, ), ), ;, }, }, return, product, ;, }, public, RealVector, projection, (, final, RealVector, v]
[), ), ;, }, }, return, product, ;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,]
[;, }, public, RealVector, projection, (, final, RealVector, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, final, double, norm2, =, v]
[;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v]
[., dotProduct, (, v, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM]
[), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v]
[==, 0.0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v]
[;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (, v, ), ), ;]
[), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (, v, ), )]
[., ZERO_NORM, ), ;, }, return, v, ., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (, v]
[;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;]
[., mapMultiply, (, dotProduct, (, v, ), /, v, ., dotProduct, (, v, ), ), ;, }, public, void, set]
[), ;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (, )]
[/, v, ., dotProduct, (, v, ), ), ;, }, public, void, set, (, double, value, ), {, Iterator, <]
[), /, v, ., dotProduct, (, v, ), ), ;, }, public, void, set, (, double, value, ), {, Iterator]
[), ;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (, )]
[., dotProduct, (, v, ), ), ;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >]
[), ), ;, }, public, void, set, (, double, value, ), {, Iterator, <, Entry, >, it, =, iterator, (]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (, value, ), ;, }]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (]
[;, e, ., setValue, (, value, ), ;, }, }, public, double, [, ], toArray, (, ), {, int, dim]
[., next, (, ), ;, e, ., setValue, (, value, ), ;, }, }, public, double, [, ], toArray, (]
[;, }, }, public, double, [, ], toArray, (, ), {, int, dim, =, getDimension, (, ), ;, double, []
[., setValue, (, value, ), ;, }, }, public, double, [, ], toArray, (, ), {, int, dim, =, getDimension]
[), ;, }, }, public, double, [, ], toArray, (, ), {, int, dim, =, getDimension, (, ), ;, double]
[;, double, [, ], values, =, new, double, [, dim, ], ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, values, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, values, [, i]
[;, i, <, dim, ;, i, ++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }]
[;, i, ++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return, values, ;, }]
[<, dim, ;, i, ++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return, values]
[;, i, ++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return, values, ;, }]
[), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return, values, ;, }, public, RealVector, unitVector]
[++, ), {, values, [, i, ], =, getEntry, (, i, ), ;, }, return, values, ;, }, public, RealVector]
[=, getEntry, (, i, ), ;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final]
[[, i, ], =, getEntry, (, i, ), ;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws]
[], =, getEntry, (, i, ), ;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {]
[;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (]
[), ;, }, return, values, ;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm]
[;, }, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, mapDivide]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, mapDivide, (, norm, ), ;, }, public]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, mapDivide, (, norm, ), ;]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, return, mapDivide, (, norm, ), ;, }, public]
[;, }, return, mapDivide, (, norm, ), ;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm]
[), ;, }, return, mapDivide, (, norm, ), ;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double]
[., ZERO_NORM, ), ;, }, return, mapDivide, (, norm, ), ;, }, public, void, unitize, (, ), throws, MathArithmeticException, {]
[;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if, (]
[), ;, }, public, void, unitize, (, ), throws, MathArithmeticException, {, final, double, norm, =, getNorm, (, ), ;, if]
[;, if, (, norm, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, mapDivideToSelf, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, mapDivideToSelf, (, getNorm, (, ), ), ;, }]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, mapDivideToSelf, (, getNorm, (, ), )]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, mapDivideToSelf, (, getNorm, (, ), ), ;, }]
[;, }, mapDivideToSelf, (, getNorm, (, ), ), ;, }, @, Deprecated, public, Iterator, <, Entry, >, sparseIterator, (, )]
[), ;, }, mapDivideToSelf, (, getNorm, (, ), ), ;, }, @, Deprecated, public, Iterator, <, Entry, >, sparseIterator, (]
[., ZERO_NORM, ), ;, }, mapDivideToSelf, (, getNorm, (, ), ), ;, }, @, Deprecated, public, Iterator, <, Entry, >]
[;, }, @, Deprecated, public, Iterator, <, Entry, >, sparseIterator, (, ), {, return, new, SparseEntryIterator, (, ), ;, }]
[), ;, }, @, Deprecated, public, Iterator, <, Entry, >, sparseIterator, (, ), {, return, new, SparseEntryIterator, (, ), ;]
[;, }, public, Iterator, <, Entry, >, iterator, (, ), {, final, int, dim, =, getDimension, (, ), ;, return]
[;, return, new, Iterator, <, Entry, >, (, ), {, private, int, i, =, 0, ;, private, Entry, e, =]
[;, }, public, RealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf, (, function, ), ;]
[;, private, Entry, e, =, new, Entry, (, ), ;, public, boolean, hasNext, (, ), {, return, i, <, dim]
[;, public, boolean, hasNext, (, ), {, return, i, <, dim, ;, }, public, Entry, next, (, ), {, if]
[;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (, i]
[<, dim, ;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex]
[;, }, public, Entry, next, (, ), {, if, (, i, <, dim, ), {, e, ., setIndex, (, i]
[), {, e, ., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (]
[<, dim, ), {, e, ., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw, new]
[), {, e, ., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (]
[;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, )]
[., setIndex, (, i, ++, ), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }]
[), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (]
[++, ), ;, return, e, ;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove]
[;, }, else, {, throw, new, NoSuchElementException, (, ), ;, }, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {]
[;, }, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;]
[;, }, }, ;, }, public, RealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf, (]
[;, }, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it, =, iterator, (, ), ;]
[., mapToSelf, (, function, ), ;, }, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it]
[), ;, }, public, RealVector, mapToSelf, (, UnivariateFunction, function, ), {, Iterator, <, Entry, >, it, =, iterator, (, )]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (, function, ., value, (]
[., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, e, ., setValue, (]
[;, e, ., setValue, (, function, ., value, (, e, ., getValue, (, ), ), ), ;, }, return, this]
[., next, (, ), ;, e, ., setValue, (, function, ., value, (, e, ., getValue, (, ), ), )]
[;, }, return, this, ;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws]
[., setValue, (, function, ., value, (, e, ., getValue, (, ), ), ), ;, }, return, this, ;, }]
[), ;, }, return, this, ;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, )]
[., value, (, e, ., getValue, (, ), ), ), ;, }, return, this, ;, }, public, RealVector, combine, (]
[), ), ;, }, return, this, ;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y]
[., getValue, (, ), ), ), ;, }, return, this, ;, }, public, RealVector, combine, (, double, a, ,, double]
[;, }, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy]
[;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., combineToSelf, (, a, ,, b, ,, y, ), ;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b]
[,, b, ,, y, ), ;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, )]
[,, y, ), ;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException]
[), ;, }, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, checkVectorDimensions]
[;, for, (, int, i, =, 0, ;, i, <, getDimension, (, ), ;, i, ++, ), {, final, double]
[), ;, for, (, int, i, =, 0, ;, i, <, getDimension, (, ), ;, i, ++, ), {, final]
[;, i, <, getDimension, (, ), ;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, .]
[<, getDimension, (, ), ;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double]
[;, i, ++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, .]
[), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (, i]
[++, ), {, final, double, xi, =, getEntry, (, i, ), ;, final, double, yi, =, y, ., getEntry, (]
[;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +]
[), ;, final, double, yi, =, y, ., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi]
[;, setEntry, (, i, ,, a, *, xi, +, b, *, yi, ), ;, }, return, this, ;, }, public]
[., getEntry, (, i, ), ;, setEntry, (, i, ,, a, *, xi, +, b, *, yi, ), ;, }]
[), ;, setEntry, (, i, ,, a, *, xi, +, b, *, yi, ), ;, }, return, this, ;, }]
[;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension]
[,, a, *, xi, +, b, *, yi, ), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final]
[), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =]
[+, b, *, yi, ), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {]
[*, xi, +, b, *, yi, ), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor]
[+, b, *, yi, ), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {]
[), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =]
[*, yi, ), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int]
[), ;, }, return, this, ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =]
[;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor]
[;, visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit, (]
[., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i]
[,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor]
[), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, visitor, ., visit]
[;, i, <, dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor]
[<, dim, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (]
[++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int]
[., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (]
[), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final]
[), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,]
[;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException]
[., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int]
[;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start]
[,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int]
[), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (]
[., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i]
[,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, )]
[,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit]
[;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor]
[<=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }]
[;, i, ++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor]
[), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (]
[++, ), {, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return]
[., visit, (, i, ,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (, ), ;, }]
[,, getEntry, (, i, ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (]
[), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {]
[), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, )]
[;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, ), ;, }, public, double]
[., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, )]
[;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException]
[), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws]
[;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;, visitor]
[,, start, ,, end, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =]
[,, end, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (]
[), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, final, int, dim, =, getDimension, (, ), ;]
[;, visitor, ., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,]
[., start, (, dim, ,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i]
[,, 0, ,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i]
[,, dim, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i]
[-, 1, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry]
[), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, setEntry, (, i]
[;, i, <, dim, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry]
[;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[<, dim, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i]
[;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }]
[++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int]
[,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (]
[), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final]
[., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder]
[), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,]
[), ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor]
[;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException]
[., end, (, ), ;, }, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int]
[;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start]
[,, end, ), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int]
[), ;, visitor, ., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,]
[., start, (, getDimension, (, ), ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i]
[,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, )]
[,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry]
[), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, setEntry, (, i]
[;, i, <=, end, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry]
[;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[<=, end, ;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i]
[;, i, ++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), )]
[), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }]
[++, ), {, setEntry, (, i, ,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;]
[;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return]
[,, visitor, ., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (]
[), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {]
[., visit, (, i, ,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (, ), ;]
[,, getEntry, (, i, ), ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder]
[), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, )]
[), ), ), ;, }, return, visitor, ., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor]
[;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, ), ;, }, public, double]
[., end, (, ), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (, visitor, )]
[;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException]
[), ;, }, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws]
[;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {, setIndex, (, 0, ), ;]
[,, start, ,, end, ), ;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {]
[,, end, ), ;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {, setIndex, (]
[), ;, }, protected, class, Entry, {, private, int, index, ;, public, Entry, (, ), {, setIndex, (, 0, )]
[;, }, public, double, getValue, (, ), {, return, getEntry, (, getIndex, (, ), ), ;, }, public, void, setValue]
[), ;, }, public, double, getValue, (, ), {, return, getEntry, (, getIndex, (, ), ), ;, }, public, void]
[;, }, public, void, setValue, (, double, value, ), {, setEntry, (, getIndex, (, ), ,, value, ), ;, }]
[), ;, }, public, void, setValue, (, double, value, ), {, setEntry, (, getIndex, (, ), ,, value, ), ;]
[;, }, public, int, getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int, index, ), {]
[,, value, ), ;, }, public, int, getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int]
[), ;, }, public, int, getIndex, (, ), {, return, index, ;, }, public, void, setIndex, (, int, index, )]
[;, }, public, void, setIndex, (, int, index, ), {, this, ., index, =, index, ;, }, }, @, Override]
[=, index, ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException]
[., index, =, index, ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), throws, MathUnsupportedOperationException, {, throw]
[;, }, }, @, Override, public, boolean, equals, (, Object, other, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, @, Override, public, int, hashCode, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @]
[;, }, @, Deprecated, protected, class, SparseEntryIterator, implements, Iterator, <, Entry, >, {, private, final, int, dim, ;, private, Entry]
[=, getDimension, (, ), ;, current, =, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if]
[;, current, =, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (, next, ., getValue]
[=, new, Entry, (, ), ;, next, =, new, Entry, (, ), ;, if, (, next, ., getValue, (, )]
[;, next, =, new, Entry, (, ), ;, if, (, next, ., getValue, (, ), ==, 0, ), {, advance]
[=, new, Entry, (, ), ;, if, (, next, ., getValue, (, ), ==, 0, ), {, advance, (, next]
[;, if, (, next, ., getValue, (, ), ==, 0, ), {, advance, (, next, ), ;, }, }, protected]
[), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (, e]
[==, 0, ), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if]
[., getValue, (, ), ==, 0, ), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry]
[), {, advance, (, next, ), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (, e]
[;, }, }, protected, void, advance, (, Entry, e, ), {, if, (, e, ==, null, ), {, return, ;]
[), ;, }, }, protected, void, advance, (, Entry, e, ), {, if, (, e, ==, null, ), {, return]
[), {, return, ;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;]
[==, null, ), {, return, ;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1]
[), {, return, ;, }, do, {, e, ., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;]
[;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0, )]
[., setIndex, (, e, ., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, )]
[), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0]
[+, 1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, )]
[., getIndex, (, ), +, 1, ), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e]
[), ;, }, while, (, e, ., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0]
[), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -, 1, )]
[&&, e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, )]
[<, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=]
[., getIndex, (, ), <, dim, &&, e, ., getValue, (, ), ==, 0, ), ;, if, (, e, .]
[&&, e, ., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, )]
[), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -, 1, )]
[==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -]
[., getValue, (, ), ==, 0, ), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e]
[), ;, if, (, e, ., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -, 1, )]
[), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return, next]
[>=, dim, ), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {]
[., getIndex, (, ), >=, dim, ), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean]
[), {, e, ., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return, next]
[;, }, }, public, boolean, hasNext, (, ), {, return, next, ., getIndex, (, ), >=, 0, ;, }, public]
[., setIndex, (, -, 1, ), ;, }, }, public, boolean, hasNext, (, ), {, return, next, ., getIndex, (]
[), ;, }, }, public, boolean, hasNext, (, ), {, return, next, ., getIndex, (, ), >=, 0, ;, }]
[), ;, }, }, public, boolean, hasNext, (, ), {, return, next, ., getIndex, (, ), >=, 0, ;, }]
[;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (, index]
[>=, 0, ;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if]
[., getIndex, (, ), >=, 0, ;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex]
[;, }, public, Entry, next, (, ), {, int, index, =, next, ., getIndex, (, ), ;, if, (, index]
[;, if, (, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index]
[., getIndex, (, ), ;, if, (, index, <, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current]
[), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;, advance, (, next, )]
[<, 0, ), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;, advance, (]
[), {, throw, new, NoSuchElementException, (, ), ;, }, current, ., setIndex, (, index, ), ;, advance, (, next, )]
[;, }, current, ., setIndex, (, index, ), ;, advance, (, next, ), ;, return, current, ;, }, public, void]
[;, advance, (, next, ), ;, return, current, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new]
[., setIndex, (, index, ), ;, advance, (, next, ), ;, return, current, ;, }, public, void, remove, (, )]
[), ;, advance, (, next, ), ;, return, current, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw]
[;, return, current, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }]
[), ;, return, current, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, public, static]
[;, }, }, public, static, RealVector, unmodifiableRealVector, (, final, RealVector, v, ), {, return, new, RealVector, (, ), {, @]
[;, }, }]
[;, }, @, Override, public, RealVector, map, (, UnivariateFunction, function, ), {, return, v, ., map, (, function, ), ;]
[;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[., map, (, function, ), ;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator]
[), ;, }, @, Override, public, Iterator, <, Entry, >, iterator, (, ), {, final, Iterator, <, Entry, >, i]
[;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;]
[., iterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new]
[;, }, @, Override, public, Iterator, <, Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry, >, i, =]
[;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, )]
[;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (]
[., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (]
[;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }]
[., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void]
[), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new]
[., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws]
[;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }]
[;, }, }, ;, }, @, Override, public, Iterator, <, Entry, >, sparseIterator, (, ), {, final, Iterator, <, Entry]
[;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new, UnmodifiableEntry, (, ), ;]
[., sparseIterator, (, ), ;, return, new, Iterator, <, Entry, >, (, ), {, private, final, UnmodifiableEntry, e, =, new]
[;, }, @, Override, public, RealVector, copy, (, ), {, return, v, ., copy, (, ), ;, }, @, Override]
[;, public, boolean, hasNext, (, ), {, return, i, ., hasNext, (, ), ;, }, public, Entry, next, (, )]
[;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (, ), ., getIndex, (]
[., hasNext, (, ), ;, }, public, Entry, next, (, ), {, e, ., setIndex, (, i, ., next, (]
[;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }]
[., setIndex, (, i, ., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void]
[), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new]
[., next, (, ), ., getIndex, (, ), ), ;, return, e, ;, }, public, void, remove, (, ), throws]
[;, }, public, void, remove, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, }, ;, }]
[;, }, }, ;, }, @, Override, public, RealVector, copy, (, ), {, return, v, ., copy, (, ), ;]
[;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., add, (, w]
[., copy, (, ), ;, }, @, Override, public, RealVector, add, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v]
[;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., subtract, (, w]
[., add, (, w, ), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, subtract, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., subtract, (]
[;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return, v, ., mapAdd, (, d, ), ;]
[., subtract, (, w, ), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return, v, .]
[), ;, }, @, Override, public, RealVector, mapAdd, (, double, d, ), {, return, v, ., mapAdd, (, d, )]
[;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., mapAdd, (, d, ), ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[), ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, @, Override, public, RealVector, mapSubtract, (, double, d, ), {, return, v, ., mapSubtract, (, d, ), ;]
[;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., mapSubtract, (, d, ), ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[), ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, @, Override, public, RealVector, mapMultiply, (, double, d, ), {, return, v, ., mapMultiply, (, d, ), ;]
[;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., mapMultiply, (, d, ), ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[), ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, @, Override, public, RealVector, mapDivide, (, double, d, ), {, return, v, ., mapDivide, (, d, ), ;]
[;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., mapDivide, (, d, ), ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw]
[), ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, @, Override, public, RealVector, ebeMultiply, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeMultiply, (, w]
[;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeDivide, (, w]
[., ebeMultiply, (, w, ), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, RealVector, ebeDivide, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., ebeDivide, (]
[;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., dotProduct, (, w]
[., ebeDivide, (, w, ), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, dotProduct, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., dotProduct, (]
[;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return, v, ., cosine]
[., dotProduct, (, w, ), ;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[), ;, }, @, Override, public, double, cosine, (, RealVector, w, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, return, v, .]
[;, }, @, Override, public, double, getNorm, (, ), {, return, v, ., getNorm, (, ), ;, }, @, Override]
[., cosine, (, w, ), ;, }, @, Override, public, double, getNorm, (, ), {, return, v, ., getNorm, (]
[), ;, }, @, Override, public, double, getNorm, (, ), {, return, v, ., getNorm, (, ), ;, }, @]
[;, }, @, Override, public, double, getL1Norm, (, ), {, return, v, ., getL1Norm, (, ), ;, }, @, Override]
[., getNorm, (, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, return, v, ., getL1Norm, (, )]
[;, }, @, Override, public, double, getLInfNorm, (, ), {, return, v, ., getLInfNorm, (, ), ;, }, @, Override]
[., getL1Norm, (, ), ;, }, @, Override, public, double, getLInfNorm, (, ), {, return, v, ., getLInfNorm, (, )]
[;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getDistance, (, w]
[., getLInfNorm, (, ), ;, }, @, Override, public, double, getDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v]
[;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getL1Distance, (, w]
[., getDistance, (, w, ), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, getL1Distance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getL1Distance, (]
[;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getLInfDistance, (, w]
[., getL1Distance, (, w, ), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return]
[), ;, }, @, Override, public, double, getLInfDistance, (, RealVector, w, ), throws, DimensionMismatchException, {, return, v, ., getLInfDistance, (]
[;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return, v, ., unitVector, (, ), ;, }]
[., getLInfDistance, (, w, ), ;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return, v, .]
[), ;, }, @, Override, public, RealVector, unitVector, (, ), throws, MathArithmeticException, {, return, v, ., unitVector, (, ), ;]
[;, }, @, Override, public, void, unitize, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;, }, @]
[., unitVector, (, ), ;, }, @, Override, public, void, unitize, (, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (]
[;, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, w, ), {, return, v, ., outerProduct, (, w, ), ;]
[;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return, v, ., getEntry, (, index]
[., outerProduct, (, w, ), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return]
[), ;, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, return, v, ., getEntry, (]
[;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException]
[., getEntry, (, index, ), ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws]
[), ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw, new]
[;, }, @, Override, public, void, addToEntry, (, int, index, ,, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException]
[;, }, @, Override, public, int, getDimension, (, ), {, return, v, ., getDimension, (, ), ;, }, @, Override]
[;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return, v, ., append, (, w, ), ;]
[., getDimension, (, ), ;, }, @, Override, public, RealVector, append, (, RealVector, w, ), {, return, v, ., append]
[;, }, @, Override, public, RealVector, append, (, double, d, ), {, return, v, ., append, (, d, ), ;]
[., append, (, w, ), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return, v, .]
[), ;, }, @, Override, public, RealVector, append, (, double, d, ), {, return, v, ., append, (, d, )]
[;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, return]
[., append, (, d, ), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws]
[), ;, }, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {]
[;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException]
[., getSubVector, (, index, ,, n, ), ;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w]
[,, n, ), ;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w, ), throws, MathUnsupportedOperationException, {]
[), ;, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, w, ), throws, MathUnsupportedOperationException, {, throw, new]
[;, }, @, Override, public, void, set, (, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[;, }, @, Override, public, double, [, ], toArray, (, ), {, return, v, ., toArray, (, ), ;, }]
[;, }, @, Override, public, boolean, isNaN, (, ), {, return, v, ., isNaN, (, ), ;, }, @, Override]
[., toArray, (, ), ;, }, @, Override, public, boolean, isNaN, (, ), {, return, v, ., isNaN, (, )]
[;, }, @, Override, public, boolean, isInfinite, (, ), {, return, v, ., isInfinite, (, ), ;, }, @, Override]
[., isNaN, (, ), ;, }, @, Override, public, boolean, isInfinite, (, ), {, return, v, ., isInfinite, (, )]
[;, }, @, Override, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {]
[., isInfinite, (, ), ;, }, @, Override, public, RealVector, combine, (, double, a, ,, double, b, ,, RealVector, y]
[;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, MathUnsupportedOperationException, {]
[., combine, (, a, ,, b, ,, y, ), ;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,]
[,, b, ,, y, ), ;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector]
[,, y, ), ;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, )]
[), ;, }, @, Override, public, RealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, MathUnsupportedOperationException]
[;, }, class, UnmodifiableEntry, extends, Entry, {, @, Override, public, double, getValue, (, ), {, return, v, ., getEntry, (]
[;, }, @, Override, public, void, setValue, (, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, ), ;]
[., getEntry, (, getIndex, (, ), ), ;, }, @, Override, public, void, setValue, (, double, value, ), throws, MathUnsupportedOperationException]
[), ;, }, @, Override, public, void, setValue, (, double, value, ), throws, MathUnsupportedOperationException, {, throw, new, MathUnsupportedOperationException, (, )]
[;, }, }, }, ;, }, }]
