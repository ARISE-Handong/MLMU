[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (]
[CharSequence, input, ,, final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (]
[final, int, index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==]
[index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&]
[index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&]
[index, ,, final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&]
[final, Writer, out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, +]
[out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, +, 1, <]
[out, ), throws, IOException, {, if, (, input, ., charAt, (, index, ), ==, '\\', &&, index, +, 1, <]
[(, input, ., charAt, (, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&]
[(, input, ., charAt, (, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&]
[(, input, ., charAt, (, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&]
[(, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (]
[(, index, ), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (]
[), ==, '\\', &&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +]
[&&, index, +, 1, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==]
[., length, (, ), &&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[&&, input, ., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (]
[., charAt, (, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +]
[(, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <]
[(, index, +, 1, ), ==, 'u', ), {, int, i, =, 2, ;, while, (, index, +, i, <]
['u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&]
['u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&]
['u', ), {, int, i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&]
[i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (]
[i, =, 2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (]
[2, ;, while, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +]
[(, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==]
[i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {]
[i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {]
[), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (]
[input, ., charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index, +]
[charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <]
[charAt, (, index, +, i, ), ==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <]
[==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&]
[==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&]
[==, 'u', ), {, i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&]
[i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (]
[i, ++, ;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (]
[;, }, if, (, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +]
[(, index, +, i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==]
[i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {]
[i, <, input, ., length, (, ), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {]
[), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (]
[), &&, input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (]
[input, ., charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +]
[charAt, (, index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +]
[index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=]
[index, +, i, ), ==, '+', ), {, i, ++, ;, }, if, (, index, +, i, +, 4, <=]
[}, if, (, index, +, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =]
[}, if, (, index, +, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =]
[+, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (]
[+, i, +, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (]
[+, 4, <=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +]
[<=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,]
[<=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,]
[<=, input, ., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,]
[., length, (, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,, index, +]
[(, ), ), {, final, CharSequence, unicode, =, input, ., subSequence, (, index, +, i, ,, index, +, i, +]
[., subSequence, (, index, +, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =]
[., subSequence, (, index, +, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =]
[+, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (]
[+, i, ,, index, +, i, +, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (]
[+, 4, ), ;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,]
[;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;]
[;, try, {, final, int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;]
[int, value, =, Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;, out, ., write, (]
[Integer, ., parseInt, (, unicode, ., toString, (, ), ,, 16, ), ;, out, ., write, (, (, char, )]
[;, out, ., write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw]
[write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (]
[write, (, (, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (]
[(, char, ), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +]
[), value, ), ;, }, catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,]
[catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return]
[catch, (, final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return]
[final, NumberFormatException, nfe, ), {, throw, new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return, i, +]
[new, IllegalArgumentException, (, "Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw]
["Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (]
["Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (]
["Unable to parse unicode value: ", +, unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (]
[unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +]
[unicode, ,, nfe, ), ;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +]
[;, }, return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (]
[return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,]
[return, i, +, 4, ;, }, else, {, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,]
[{, throw, new, IllegalArgumentException, (, "Less than 4 hex digits in unicode value: '", +, input, ., subSequence, (, index, ,, input, ., length, (, ), ), +]
[+, input, ., subSequence, (, index, ,, input, ., length, (, ), ), +, "' due to end of CharSequence", ), ;, }, }, return]
