[public, abstract, class, PassConfig, {, final, CompilerOptions, options, ;, private, MemoizedScopeCreator, typedScopeCreator, ;, private, TypedScopeCreator, internalScopeCreator, ;, Scope, topScope, =]
[private, MemoizedScopeCreator, typedScopeCreator, ;, private, TypedScopeCreator, internalScopeCreator, ;, Scope, topScope, =, null, ;, public, PassConfig, (, CompilerOptions, options, ), {]
[private, MemoizedScopeCreator, typedScopeCreator, ;, private, TypedScopeCreator, internalScopeCreator, ;, Scope, topScope, =, null, ;, public, PassConfig, (, CompilerOptions, options, ), {]
[private, TypedScopeCreator, internalScopeCreator, ;, Scope, topScope, =, null, ;, public, PassConfig, (, CompilerOptions, options, ), {, this, ., options, =]
[options, ), {, this, ., options, =, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {]
[{, this, ., options, =, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =]
[options, =, options, ;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (]
[;, }, void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;]
[void, regenerateGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =]
[AbstractCompiler, compiler, ,, Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (]
[Node, root, ), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;]
[), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =]
[), {, internalScopeCreator, =, new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =]
[new, TypedScopeCreator, (, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (]
[(, compiler, ), ;, typedScopeCreator, =, new, MemoizedScopeCreator, (, internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,]
[internalScopeCreator, ), ;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {]
[;, topScope, =, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =]
[=, typedScopeCreator, ., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;]
[., createScope, (, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =]
[(, root, ,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =, null, ;]
[,, null, ), ;, }, void, clearTypedScope, (, ), {, internalScopeCreator, =, null, ;, typedScopeCreator, =, null, ;, topScope, =]
[;, typedScopeCreator, =, null, ;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {]
[;, typedScopeCreator, =, null, ;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {]
[;, topScope, =, null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (]
[null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, ), ;]
[null, ;, }, void, patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, ), ;]
[patchGlobalTypedScope, (, AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, ), ;, internalScopeCreator, ., patchGlobalScope, (]
[AbstractCompiler, compiler, ,, Node, scriptRoot, ), {, Preconditions, ., checkNotNull, (, internalScopeCreator, ), ;, internalScopeCreator, ., patchGlobalScope, (, topScope, ,]
[(, internalScopeCreator, ), ;, internalScopeCreator, ., patchGlobalScope, (, topScope, ,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[,, scriptRoot, ), ;, }, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return, typedScopeCreator, ;, }, Scope, getTopScope, (, ), {, return]
[<, PassFactory, >, getOptimizations, (, ), ;, GraphvizGraph, getPassGraph, (, ), {, LinkedDirectedGraph, <, String, ,, String, >, graph, =]
[<, PassFactory, >, getOptimizations, (, ), ;, GraphvizGraph, getPassGraph, (, ), {, LinkedDirectedGraph, <, String, ,, String, >, graph, =]
[LinkedDirectedGraph, <, String, ,, String, >, graph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, Iterable, <, PassFactory, >, allPasses, =]
[LinkedDirectedGraph, <, String, ,, String, >, graph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, Iterable, <, PassFactory, >, allPasses, =]
[String, >, graph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, Iterable, <, PassFactory, >, allPasses, =, Iterables, ., concat, (]
[LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, Iterable, <, PassFactory, >, allPasses, =, Iterables, ., concat, (, getChecks, (, ), ,]
[PassFactory, >, allPasses, =, Iterables, ., concat, (, getChecks, (, ), ,, getOptimizations, (, ), ), ;, String, lastPass, =]
[., concat, (, getChecks, (, ), ,, getOptimizations, (, ), ), ;, String, lastPass, =, null, ;, String, loopStart, =]
[getOptimizations, (, ), ), ;, String, lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :]
[lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :, allPasses, ), {, String, passName, =]
[lastPass, =, null, ;, String, loopStart, =, null, ;, for, (, PassFactory, pass, :, allPasses, ), {, String, passName, =]
[for, (, PassFactory, pass, :, allPasses, ), {, String, passName, =, pass, ., getName, (, ), ;, int, i, =]
[:, allPasses, ), {, String, passName, =, pass, ., getName, (, ), ;, int, i, =, 1, ;, while, (]
[:, allPasses, ), {, String, passName, =, pass, ., getName, (, ), ;, int, i, =, 1, ;, while, (]
[String, passName, =, pass, ., getName, (, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (]
[., getName, (, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {]
[(, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =]
[(, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =]
[(, ), ;, int, i, =, 1, ;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =]
[1, ;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +]
[;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (]
[;, while, (, graph, ., hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (]
[hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;, }]
[hasNode, (, passName, ), ), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;, }]
[), {, passName, =, pass, ., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (]
[., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (]
[., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (]
[., getName, (, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (]
[(, ), +, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==]
[+, (, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&]
[(, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !]
[(, i, ++, ), ;, }, graph, ., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !]
[., createNode, (, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {]
[(, passName, ), ;, if, (, loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =]
[loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (]
[loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (]
[loopStart, ==, null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (]
[null, &&, !, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=]
[!, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&]
[!, pass, ., isOneTimePass, (, ), ), {, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&]
[{, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {]
[{, loopStart, =, passName, ;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {]
[;, }, else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (]
[else, if, (, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,]
[(, loopStart, !=, null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,]
[null, &&, pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;]
[pass, ., isOneTimePass, (, ), ), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =]
[), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (]
[), {, graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (]
[graph, ., connect, (, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=]
[(, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {]
[(, lastPass, ,, "loop", ,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {]
[,, loopStart, ), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (]
[), ;, loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,]
[loopStart, =, null, ;, }, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,]
[}, if, (, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }]
[(, lastPass, !=, null, ), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =]
[), {, graph, ., connect, (, lastPass, ,, "", ,, passName, ), ;, }, lastPass, =, passName, ;, }, return]
[;, }, lastPass, =, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return]
[=, passName, ;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (]
[;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,]
[;, }, return, graph, ;, }, final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,]
[final, TypeInferencePass, makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,]
[makeTypeInference, (, AbstractCompiler, compiler, ), {, return, new, TypeInferencePass, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, topScope, ,]
[., getReverseAbstractInterpreter, (, ), ,, topScope, ,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return]
[), ,, topScope, ,, typedScopeCreator, ), ;, }, final, InferJSDocInfo, makeInferJsDocInfo, (, AbstractCompiler, compiler, ), {, return, new, InferJSDocInfo, (]
[compiler, ), {, return, new, InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return]
[compiler, ), {, return, new, InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return]
[return, new, InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (]
[InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,]
[InferJSDocInfo, (, compiler, ), ;, }, final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,]
[final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,]
[final, TypeCheck, makeTypeCheck, (, AbstractCompiler, compiler, ), {, return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,]
[), {, return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,]
[return, new, TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,]
[TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,]
[TypeCheck, (, compiler, ,, compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,]
[compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,]
[compiler, ., getReverseAbstractInterpreter, (, ), ,, compiler, ., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,]
[., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (]
[., getTypeRegistry, (, ), ,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (]
[,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (]
[,, topScope, ,, typedScopeCreator, ,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (]
[,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (]
[,, options, ., reportMissingOverride, ,, options, ., reportUnknownTypes, ), ., reportMissingProperties, (, options, ., enables, (, DiagnosticGroup, ., forType, (]
[;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {]
[;, }, final, static, void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {]
[void, addPassFactoryBefore, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {, factoryList, ., add, (]
[(, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {, factoryList, ., add, (, findPassIndexByName, (]
[<, PassFactory, >, factoryList, ,, PassFactory, factory, ,, String, passName, ), {, factoryList, ., add, (, findPassIndexByName, (, factoryList, ,]
[factoryList, ,, PassFactory, factory, ,, String, passName, ), {, factoryList, ., add, (, findPassIndexByName, (, factoryList, ,, passName, ), ,]
[,, factory, ), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {]
[,, factory, ), ;, }, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {]
[}, final, static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, ., set, (]
[static, void, replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, ., set, (, findPassIndexByName, (]
[replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, ., set, (, findPassIndexByName, (, factoryList, ,]
[replacePassFactory, (, List, <, PassFactory, >, factoryList, ,, PassFactory, factory, ), {, factoryList, ., set, (, findPassIndexByName, (, factoryList, ,]
[,, PassFactory, factory, ), {, factoryList, ., set, (, findPassIndexByName, (, factoryList, ,, factory, ., getName, (, ), ), ,]
[private, static, int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int, i, =]
[int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int, i, =, 0, ;]
[int, findPassIndexByName, (, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int, i, =, 0, ;]
[(, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int, i, =, 0, ;, i, <]
[(, List, <, PassFactory, >, factoryList, ,, String, name, ), {, for, (, int, i, =, 0, ;, i, <]
[,, String, name, ), {, for, (, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;]
[,, String, name, ), {, for, (, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;]
[(, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (]
[0, ;, i, <, factoryList, ., size, (, ), ;, i, ++, ), {, if, (, factoryList, ., get, (]
[;, i, ++, ), {, if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (]
[if, (, factoryList, ., get, (, i, ), ., getName, (, ), ., equals, (, name, ), ), {, return]
[(, i, ), ., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw]
[., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (]
[., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (]
[., getName, (, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (]
[(, ), ., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +]
[., equals, (, name, ), ), {, return, i, ;, }, }, throw, new, IllegalArgumentException, (, "No factory named '", +, name, +]
[new, IllegalArgumentException, (, "No factory named '", +, name, +, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =]
[+, name, +, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (]
[+, name, +, "' in the factory list", ), ;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (]
[;, }, final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {]
[final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {, current, =]
[final, PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {, current, =]
[PassConfig, getBasePassConfig, (, ), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {, current, =, (]
[), {, PassConfig, current, =, this, ;, while, (, current, instanceof, PassConfigDelegate, ), {, current, =, (, (, PassConfigDelegate, )]
[while, (, current, instanceof, PassConfigDelegate, ), {, current, =, (, (, PassConfigDelegate, ), current, ), ., delegate, ;, }, return]
[;, static, class, PassConfigDelegate, extends, PassConfig, {, private, final, PassConfig, delegate, ;, PassConfigDelegate, (, PassConfig, delegate, ), {, super, (]
[;, static, class, PassConfigDelegate, extends, PassConfig, {, private, final, PassConfig, delegate, ;, PassConfigDelegate, (, PassConfig, delegate, ), {, super, (]
[PassConfig, {, private, final, PassConfig, delegate, ;, PassConfigDelegate, (, PassConfig, delegate, ), {, super, (, delegate, ., options, ), ;]
[PassConfig, {, private, final, PassConfig, delegate, ;, PassConfigDelegate, (, PassConfig, delegate, ), {, super, (, delegate, ., options, ), ;]
[PassConfig, delegate, ;, PassConfigDelegate, (, PassConfig, delegate, ), {, super, (, delegate, ., options, ), ;, this, ., delegate, =]
[;, this, ., delegate, =, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, return]
[;, this, ., delegate, =, delegate, ;, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, return]
[return, delegate, ., getChecks, (, ), ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return]
[return, delegate, ., getChecks, (, ), ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, return]
[getOptimizations, (, ), {, return, delegate, ., getOptimizations, (, ), ;, }, @, Override, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[getOptimizations, (, ), {, return, delegate, ., getOptimizations, (, ), ;, }, @, Override, MemoizedScopeCreator, getTypedScopeCreator, (, ), {, return]
[getTypedScopeCreator, (, ), {, return, delegate, ., getTypedScopeCreator, (, ), ;, }, @, Override, Scope, getTopScope, (, ), {, return]
[getTypedScopeCreator, (, ), {, return, delegate, ., getTypedScopeCreator, (, ), ;, }, @, Override, Scope, getTopScope, (, ), {, return]
[(, ), {, return, delegate, ., getTopScope, (, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return]
[(, ), {, return, delegate, ., getTopScope, (, ), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return]
[), {, return, delegate, ., getIntermediateState, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[), {, return, delegate, ., getIntermediateState, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {]
[., getIntermediateState, (, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, delegate, ., setIntermediateState, (]
[setIntermediateState, (, state, ), ;, }, }, public, static, class, State, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[,, VariableMap, variableMap, ,, VariableMap, propertyMap, ,, VariableMap, anonymousFunctionNameMap, ,, VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {]
[,, VariableMap, variableMap, ,, VariableMap, propertyMap, ,, VariableMap, anonymousFunctionNameMap, ,, VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {]
[VariableMap, propertyMap, ,, VariableMap, anonymousFunctionNameMap, ,, VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =]
[,, VariableMap, anonymousFunctionNameMap, ,, VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;]
[,, VariableMap, anonymousFunctionNameMap, ,, VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;]
[VariableMap, stringMap, ,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =]
[,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;]
[,, FunctionNames, functionNames, ,, String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;]
[String, idGeneratorMap, ), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =]
[), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;]
[), {, this, ., cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;]
[cssNames, =, cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =]
[cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;]
[cssNames, ;, this, ., exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;]
[exportedNames, =, exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =]
[exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;]
[exportedNames, ;, this, ., crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;]
[crossModuleIdGenerator, =, crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =]
[crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;]
[crossModuleIdGenerator, ;, this, ., variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;]
[variableMap, =, variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =]
[variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;]
[variableMap, ;, this, ., propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;]
[propertyMap, =, propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =]
[propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;]
[propertyMap, ;, this, ., anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;]
[anonymousFunctionNameMap, =, anonymousFunctionNameMap, ;, this, ., stringMap, =, stringMap, ;, this, ., idGeneratorMap, =, idGeneratorMap, ;, this, ., functionNames, =]
