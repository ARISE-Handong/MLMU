[;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}", ), ;, private, final, List, <, Export]
[., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE", ,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}"]
[,, "Unable to determine type of parameter {0} for exported function {1}", ), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}", ), ;, private, final]
[), ;, static, final, DiagnosticType, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, =, DiagnosticType, ., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}", ), ;, private, final, List, <]
[;, private, final, List, <, Export, >, exports, ;, private, final, Map, <, String, ,, Node, >, definitionMap, ;, private]
[., warning, (, "JSC_EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE", ,, "Unable to determine return type for exported function {0}", ), ;, private, final, List, <, Export, >, exports, ;, private, final, Map, <]
[,, "Unable to determine return type for exported function {0}", ), ;, private, final, List, <, Export, >, exports, ;, private, final, Map, <, String, ,, Node, >]
[), ;, private, final, List, <, Export, >, exports, ;, private, final, Map, <, String, ,, Node, >, definitionMap, ;]
[=, symbolName, ;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, )]
[., symbolName, =, symbolName, ;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath]
[;, this, ., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,, getValue]
[=, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,, getValue, (, value, ), )]
[., value, =, value, ;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,, getValue, (, value]
[;, }, void, generateExterns, (, ), {, appendExtern, (, getExportedPath, (, ), ,, getValue, (, value, ), ), ;, }]
[;, }, abstract, String, getExportedPath, (, ), ;, void, appendExtern, (, String, path, ,, Node, valueToExport, ), {, List, <]
[,, getValue, (, value, ), ), ;, }, abstract, String, getExportedPath, (, ), ;, void, appendExtern, (, String, path, ,]
[), ;, }, abstract, String, getExportedPath, (, ), ;, void, appendExtern, (, String, path, ,, Node, valueToExport, ), {, List]
[), ), ;, }, abstract, String, getExportedPath, (, ), ;, void, appendExtern, (, String, path, ,, Node, valueToExport, ), {]
[;, for, (, int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, ), {]
[), ;, for, (, int, i, =, 0, ;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, )]
[;, i, <, pathPrefixes, ., size, (, ), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (]
[;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i]
[<, pathPrefixes, ., size, (, ), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, )]
[;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i]
[., size, (, ), ;, ++, i, ), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean]
[), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, .]
[), {, String, pathPrefix, =, pathPrefixes, ., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, .]
[;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix]
[., get, (, i, ), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, )]
[), ;, boolean, isCompletePathPrefix, =, (, i, ==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =]
[;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !]
[), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&]
[==, pathPrefixes, ., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||]
[), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&]
[-, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix]
[., size, (, ), -, 1, ), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths]
[), ;, boolean, skipPathPrefix, =, pathPrefix, ., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&]
[;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if]
[||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node]
[., endsWith, (, ".prototype", ), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (]
[), ||, (, alreadyExportedPaths, ., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {]
[;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if]
[), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {]
[&&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=]
[., contains, (, pathPrefix, ), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if]
[), &&, !, isCompletePathPrefix, ), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport]
[), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {]
[), ;, if, (, !, skipPathPrefix, ), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {]
[), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (]
[), {, Node, initializer, ;, if, (, isCompletePathPrefix, &&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (]
[), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else]
[&&, valueToExport, !=, null, ), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport]
[), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else]
[!=, null, ), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;]
[), {, if, (, valueToExport, ., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else]
[), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (]
[., isFunction, (, ), ), {, initializer, =, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (]
[=, createExternFunction, (, valueToExport, ), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;]
[;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport]
[), ;, }, else, {, Preconditions, ., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (]
[;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;]
[., checkState, (, valueToExport, ., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else]
[), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, )]
[., isObjectLit, (, ), ), ;, initializer, =, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR]
[=, createExternObjectLit, (, valueToExport, ), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }, appendPathDefinition]
[;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }, appendPathDefinition, (, pathPrefix, ,, initializer, )]
[), ;, }, }, else, {, initializer, =, IR, ., empty, (, ), ;, }, appendPathDefinition, (, pathPrefix, ,, initializer]
[=, IR, ., empty, (, ), ;, }, appendPathDefinition, (, pathPrefix, ,, initializer, ), ;, }, }, }, private, List]
[;, }, appendPathDefinition, (, pathPrefix, ,, initializer, ), ;, }, }, }, private, List, <, String, >, computePathPrefixes, (, String]
[., empty, (, ), ;, }, appendPathDefinition, (, pathPrefix, ,, initializer, ), ;, }, }, }, private, List, <, String]
[;, }, }, }, private, List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >, pieces]
[,, initializer, ), ;, }, }, }, private, List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <]
[), ;, }, }, }, private, List, <, String, >, computePathPrefixes, (, String, path, ), {, List, <, String, >]
[;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[., newArrayList, (, path, ., split, (, "\\.", ), ), ;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList]
[), ;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0]
[., split, (, "\\.", ), ), ;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for]
[), ), ;, List, <, String, >, pathPrefixes, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;, i, ++, ), {]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, pieces, ., size, (, ), ;]
[;, i, <, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on]
[;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, .]
[<, pieces, ., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, "."]
[;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, .]
[., size, (, ), ;, i, ++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), .]
[), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces]
[++, ), {, pathPrefixes, ., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (]
[;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;]
[., add, (, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +]
[), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition]
[., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), ), ), ;, }, return, pathPrefixes, ;]
[., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), ), )]
[), ., join, (, Iterables, ., limit, (, pieces, ,, i, +, 1, ), ), ), ;, }, return, pathPrefixes]
[), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node]
[., limit, (, pieces, ,, i, +, 1, ), ), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition]
[,, i, +, 1, ), ), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,]
[), ), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {]
[+, 1, ), ), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer]
[), ), ), ;, }, return, pathPrefixes, ;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {]
[;, }, private, void, appendPathDefinition, (, String, path, ,, Node, initializer, ), {, Node, pathDefinition, ;, if, (, !, path]
[), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (, IR, ., name]
[), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (, IR, ., name]
[., contains, (, ".", ), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, .]
[), ), {, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (, IR, .]
[), {, pathDefinition, =, IR, ., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition]
[., isEmpty, (, ), ), {, pathDefinition, =, IR, ., var, (, IR, ., name, (, path, ), ), ;]
[=, IR, ., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =, NodeUtil, .]
[;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node]
[., var, (, IR, ., name, (, path, ), ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (]
[), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {]
[., name, (, path, ), ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, )]
[), ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else]
[=, NodeUtil, ., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode]
[;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, )]
[., newVarNode, (, path, ,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler]
[,, initializer, ), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[), ;, }, }, else, {, Node, qualifiedPath, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path]
[;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), )]
[,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath]
[., getCodingConvention, (, ), ,, path, ), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil]
[), ;, if, (, initializer, ., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;]
[), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (]
[., isEmpty, (, ), ), {, pathDefinition, =, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =]
[=, NodeUtil, ., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign]
[;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;]
[., newExpr, (, qualifiedPath, ), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath]
[), ;, }, else, {, pathDefinition, =, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), )]
[=, NodeUtil, ., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack]
[;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node]
[., newExpr, (, IR, ., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition]
[), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (, path, ), ;, }, private]
[., assign, (, qualifiedPath, ,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, .]
[,, initializer, ), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (, path, )]
[), ), ;, }, }, externsRoot, ., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (, path, ), ;, }]
[;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =]
[., addChildToBack, (, pathDefinition, ), ;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction]
[), ;, alreadyExportedPaths, ., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList]
[;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, ), .]
[., add, (, path, ), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =, NodeUtil, .]
[), ;, }, private, Node, createExternFunction, (, Node, exportedFunction, ), {, Node, paramList, =, NodeUtil, ., getFunctionParameters, (, exportedFunction, )]
[;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,, paramList, ,, IR, ., block]
[., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,, paramList]
[., getFunctionParameters, (, exportedFunction, ), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name]
[), ., cloneTree, (, ), ;, Node, externFunction, =, IR, ., function, (, IR, ., name, (, "", ), ,]
[;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return, externFunction, ;]
[., function, (, IR, ., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes]
[,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction]
[., name, (, "", ), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;]
[), ,, paramList, ,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (]
[,, IR, ., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType]
[), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return, externFunction]
[., block, (, ), ), ;, checkForFunctionsWithUnknownTypes, (, exportedFunction, ), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, )]
[;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (]
[), ;, externFunction, ., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit]
[;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (]
[., setJSType, (, exportedFunction, ., getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit]
[), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit]
[., getJSType, (, ), ), ;, return, externFunction, ;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit]
[;, }, private, Node, createExternObjectLit, (, Node, exportedObjectLit, ), {, Node, lit, =, IR, ., objectlit, (, ), ;, lit]
[;, lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, )]
[., objectlit, (, ), ;, lit, ., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (]
[;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1, ;, for, (, Node, child]
[., setJSType, (, exportedObjectLit, ., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;]
[), ;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1, ;, for, (, Node]
[., getJSType, (, ), ), ;, lit, ., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1]
[;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=, null]
[., setJSDocInfo, (, new, JSDocInfo, (, ), ), ;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit]
[), ;, int, index, =, 1, ;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=]
[;, for, (, Node, child, =, exportedObjectLit, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), )]
[;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit]
[=, child, ., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack]
[), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (, IR]
[., getNext, (, ), ), {, if, (, child, ., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR]
[), {, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), )]
[., isStringKey, (, ), ), {, lit, ., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, .]
[;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (, function]
[., addChildToBack, (, IR, ., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, .]
[), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (]
[., propdef, (, IR, ., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (, index, ++]
[,, IR, ., number, (, index, ++, ), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes]
[., stringKey, (, child, ., getString, (, ), ), ,, IR, ., number, (, index, ++, ), ), ), ;]
[), ,, IR, ., number, (, index, ++, ), ), ), ;, }, }, return, lit, ;, }, private, void]
[., getString, (, ), ), ,, IR, ., number, (, index, ++, ), ), ), ;, }, }, return, lit]
[), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument]
[., number, (, index, ++, ), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node]
[), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, .]
[++, ), ), ), ;, }, }, return, lit, ;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions]
[;, }, private, void, checkForFunctionsWithUnknownTypes, (, Node, function, ), {, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), )]
[;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (, functionType, ==, null]
[., checkArgument, (, function, ., isFunction, (, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType]
[), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (, functionType, ==]
[., isFunction, (, ), ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;]
[;, if, (, functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;]
[., toMaybeFunctionType, (, function, ., getJSType, (, ), ), ;, if, (, functionType, ==, null, ), {, return, ;, }]
[), ;, if, (, functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, )]
[., getJSType, (, ), ), ;, if, (, functionType, ==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType]
[), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType]
[==, null, ), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType]
[), {, return, ;, }, JSDocInfo, functionJSDocInfo, =, functionType, ., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType]
[;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (]
[., getJSDocInfo, (, ), ;, JSType, returnType, =, functionType, ., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor]
[;, if, (, !, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, )]
[., getReturnType, (, ), ;, if, (, !, functionType, ., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType]
[), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (]
[&&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }]
[&&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }]
[., isConstructor, (, ), &&, (, returnType, ==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (]
[), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (]
[), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild]
[||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, .]
[==, null, ||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =]
[||, returnType, ., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, .]
[), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild]
[., isUnknownType, (, ), ), ), {, reportUnknownReturnType, (, function, ), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (]
[;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType]
[), ;, }, Node, astParameterIterator, =, NodeUtil, ., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =]
[;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (, astParameterIterator, !=, null, )]
[., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (]
[., getFunctionParameters, (, function, ), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild]
[), ., getFirstChild, (, ), ;, Node, typeParameterIterator, =, functionType, ., getParametersNode, (, ), ., getFirstChild, (, ), ;, while]
[;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType]
[., getFirstChild, (, ), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, )]
[., getParametersNode, (, ), ., getFirstChild, (, ), ;, while, (, astParameterIterator, !=, null, ), {, JSType, parameterType, =, typeParameterIterator]
[), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType]
[!=, null, ), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType]
[), {, JSType, parameterType, =, typeParameterIterator, ., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType]
[;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, )]
[., getJSType, (, ), ;, if, (, parameterType, ==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (]
[), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =]
[||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, .]
[==, null, ||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =]
[||, parameterType, ., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, .]
[), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =]
[., isUnknownType, (, ), ), {, reportUnknownParameterType, (, function, ,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (]
[;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, ), ;, }, }]
[,, astParameterIterator, ), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, )]
[), ;, }, astParameterIterator, =, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, ), ;, }]
[=, astParameterIterator, ., getNext, (, ), ;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType]
[;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter]
[., getNext, (, ), ;, typeParameterIterator, =, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node]
[=, typeParameterIterator, ., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {]
[;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, ., report, (, JSError, .]
[., getNext, (, ), ;, }, }, private, void, reportUnknownParameterType, (, Node, function, ,, Node, parameter, ), {, compiler, .]
[;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, .]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,]
[), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil]
[., make, (, NodeUtil, ., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, .]
[,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (]
[., getSourceName, (, function, ), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, )]
[), ,, parameter, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString]
[,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), )]
[,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), ), ), ;, }, private]
[., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), ), ), ;]
[,, NodeUtil, ., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType]
[,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, .]
[., getFunctionName, (, function, ), ,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node]
[), ,, parameter, ., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler]
[), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (, JSError, ., make, (]
[., getString, (, ), ), ), ;, }, private, void, reportUnknownReturnType, (, Node, function, ), {, compiler, ., report, (]
[;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if]
[., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,]
[), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;]
[., make, (, NodeUtil, ., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, .]
[,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }, protected]
[., getSourceName, (, function, ), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, )]
[), ,, function, ,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }]
[,, CheckLevel, ., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue]
[,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, )]
[., WARNING, ,, EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE, ,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node]
[,, NodeUtil, ., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String]
[), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (, )]
[., getFunctionName, (, function, ), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =]
[), ), ), ;, }, protected, Node, getValue, (, Node, qualifiedNameNode, ), {, String, qualifiedName, =, value, ., getQualifiedName, (]
[;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, ==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap]
[), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (, definitionParent, ==]
[==, null, ), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (]
[), {, return, null, ;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (, definitionParent, ==]
[;, }, Node, definitionParent, =, definitionMap, ., get, (, qualifiedName, ), ;, if, (, definitionParent, ==, null, ), {, return]
[;, if, (, definitionParent, ==, null, ), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType]
[., get, (, qualifiedName, ), ;, if, (, definitionParent, ==, null, ), {, return, null, ;, }, Node, definition, ;]
[), ;, if, (, definitionParent, ==, null, ), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, .]
[), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token]
[==, null, ), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {]
[), {, return, null, ;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token]
[;, }, Node, definition, ;, switch, (, definitionParent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, definition]
[), {, case, Token, ., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, .]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break]
[:, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =, definitionParent, .]
[., ASSIGN, :, definition, =, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =]
[=, definitionParent, ., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =, definitionParent, ., getLastChild, (]
[;, break, ;, case, Token, ., VAR, :, definition, =, definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;]
[., getLastChild, (, ), ;, break, ;, case, Token, ., VAR, :, definition, =, definitionParent, ., getLastChild, (, ), .]
[:, definition, =, definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;]
[., VAR, :, definition, =, definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return]
[=, definitionParent, ., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if]
[;, break, ;, default, :, return, null, ;, }, if, (, !, definition, ., isFunction, (, ), &&, !, definition]
[., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (, !, definition, ., isFunction, (]
[., getLastChild, (, ), ., getLastChild, (, ), ;, break, ;, default, :, return, null, ;, }, if, (, !]
[;, }, if, (, !, definition, ., isFunction, (, ), &&, !, definition, ., isObjectLit, (, ), ), {, return]
[), {, return, null, ;, }, return, definition, ;, }, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (]
[&&, !, definition, ., isObjectLit, (, ), ), {, return, null, ;, }, return, definition, ;, }, }, private, class]
[&&, !, definition, ., isObjectLit, (, ), ), {, return, null, ;, }, return, definition, ;, }, }, private, class]
[., isFunction, (, ), &&, !, definition, ., isObjectLit, (, ), ), {, return, null, ;, }, return, definition, ;]
[), {, return, null, ;, }, return, definition, ;, }, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (]
[), {, return, null, ;, }, return, definition, ;, }, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (]
[., isObjectLit, (, ), ), {, return, null, ;, }, return, definition, ;, }, }, private, class, SymbolExport, extends, Export]
[;, }, return, definition, ;, }, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (, String, symbolName, ,, Node]
[;, }, }, private, class, SymbolExport, extends, Export, {, public, SymbolExport, (, String, symbolName, ,, Node, value, ), {, super]
[,, value, ), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {]
[), ;, String, qualifiedName, =, value, ., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, mappedPaths, .]
[;, if, (, qualifiedName, !=, null, ), {, mappedPaths, ., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @]
[., getQualifiedName, (, ), ;, if, (, qualifiedName, !=, null, ), {, mappedPaths, ., put, (, qualifiedName, ,, symbolName, )]
[), {, mappedPaths, ., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (, ), {]
[!=, null, ), {, mappedPaths, ., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (]
[), {, mappedPaths, ., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (, ), {]
[;, }, }, @, Override, String, getExportedPath, (, ), {, return, symbolName, ;, }, }, private, class, PropertyExport, extends, Export]
[., put, (, qualifiedName, ,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (, ), {, return, symbolName, ;]
[,, symbolName, ), ;, }, }, @, Override, String, getExportedPath, (, ), {, return, symbolName, ;, }, }, private, class]
[), ;, }, }, @, Override, String, getExportedPath, (, ), {, return, symbolName, ;, }, }, private, class, PropertyExport, extends]
[;, }, }, private, class, PropertyExport, extends, Export, {, private, final, String, exportPath, ;, public, PropertyExport, (, String, exportPath, ,]
[,, value, ), ;, this, ., exportPath, =, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <]
[), ;, this, ., exportPath, =, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >]
[=, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList]
[., exportPath, =, exportPath, ;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists]
[;, }, @, Override, String, getExportedPath, (, ), {, List, <, String, >, pieces, =, Lists, ., newArrayList, (, exportPath]
[;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --, ), {]
[., newArrayList, (, exportPath, ., split, (, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (]
[), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --, )]
[., split, (, "\\.", ), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >]
[), ), ;, for, (, int, i, =, pieces, ., size, (, ), ;, i, >, 0, ;, i, --]
[;, i, >, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join]
[., size, (, ), ;, i, >, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (]
[;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit]
[>, 0, ;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables]
[;, i, --, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit]
[), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,]
[--, ), {, String, cPath, =, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces]
[;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, )]
[., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (, cPath]
[., on, (, ".", ), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (]
[), ., join, (, Iterables, ., limit, (, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (]
[), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath]
[., limit, (, pieces, ,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String]
[,, i, ), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, .]
[), ), ;, if, (, mappedPaths, ., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (]
[), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (]
[., containsKey, (, cPath, ), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i]
[), ), {, String, newPath, =, mappedPaths, ., get, (, cPath, ), ;, if, (, i, <, pieces, ., size]
[;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (]
[., get, (, cPath, ), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, "."]
[), ;, if, (, i, <, pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on]
[), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces]
[<, pieces, ., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join]
[), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces]
[., size, (, ), ), {, newPath, +=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables]
[+=, ".", +, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, )]
[;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }]
[+, Joiner, ., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;]
[;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }]
[., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName]
[., on, (, ".", ), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return]
[), ., join, (, Iterables, ., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +]
[), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }]
[., skip, (, pieces, ,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return]
[,, i, ), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +]
[), ), ;, }, return, newPath, +, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;]
[;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, .]
[+, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {]
[+, ".", +, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler]
[+, symbolName, ;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {]
[;, }, }, return, exportPath, +, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, .]
[;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;, this]
[+, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, )]
[+, ".", +, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList]
[+, symbolName, ;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, )]
[;, }, }, ExternExportsPass, (, AbstractCompiler, compiler, ), {, this, ., exports, =, Lists, ., newArrayList, (, ), ;, this]
[=, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap]
[., exports, =, Lists, ., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps]
[;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot]
[., newArrayList, (, ), ;, this, ., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, )]
[=, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block]
[., compiler, =, compiler, ;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR]
[;, this, ., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, )]
[=, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot]
[., definitionMap, =, Maps, ., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;, this]
[;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;]
[., newHashMap, (, ), ;, this, ., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock]
[=, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =]
[., externsRoot, =, IR, ., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, .]
[;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;]
[., block, (, ), ;, this, ., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, .]
[;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (, )]
[., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =]
[., externsRoot, ., setIsSyntheticBlock, (, true, ), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, .]
[), ;, this, ., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (]
[=, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods, (, )]
[., alreadyExportedPaths, =, Sets, ., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods]
[;, this, ., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (]
[., newHashSet, (, ), ;, this, ., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }]
[=, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =]
[., mappedPaths, =, Maps, ., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {]
[;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;]
[., newHashMap, (, ), ;, initExportMethods, (, ), ;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, .]
[;, }, private, void, initExportMethods, (, ), {, exportSymbolFunctionNames, =, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =, Lists, .]
[=, Lists, ., newArrayList, (, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, .]
[;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, .]
[., newArrayList, (, ), ;, exportPropertyFunctionNames, =, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (]
[=, Lists, ., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (]
[;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), )]
[., newArrayList, (, ), ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, .]
[;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (]
[., getCodingConvention, (, ), ;, exportSymbolFunctionNames, ., add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (]
[;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames]
[., add, (, convention, ., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), )]
[), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;]
[., getExportSymbolFunction, (, ), ), ;, exportPropertyFunctionNames, ., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add]
[;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;, }, @, Override, public, void]
[., add, (, convention, ., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add]
[), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;, }, @, Override, public]
[., getExportPropertyFunction, (, ), ), ;, exportSymbolFunctionNames, ., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;]
[;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[., add, (, "google_exportSymbol", ), ;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (]
[), ;, exportPropertyFunctionNames, ., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[., add, (, "google_exportProperty", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler]
[;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >, (, new, Comparator, <, Export, >, (, )]
[., traverse, (, root, ), ;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >, (, new, Comparator]
[,, this, ), ., traverse, (, root, ), ;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >]
[), ., traverse, (, root, ), ;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >, (, new]
[), ;, Set, <, Export, >, sorted, =, new, TreeSet, <, Export, >, (, new, Comparator, <, Export, >, (]
[;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {, export, ., generateExterns, (]
[), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {, export, ., generateExterns]
[;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {]
[., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, ), ;, sorted, ., addAll, (, exports, )]
[., getExportedPath, (, ), ., compareTo, (, e2, ., getExportedPath, (, ), ), ;, }, }, ), ;, sorted, .]
[), ;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, )]
[., getExportedPath, (, ), ), ;, }, }, ), ;, sorted, ., addAll, (, exports, ), ;, for, (, Export]
[;, for, (, Export, export, :, sorted, ), {, export, ., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns]
[., addAll, (, exports, ), ;, for, (, Export, export, :, sorted, ), {, export, ., generateExterns, (, ), ;]
[), ;, for, (, Export, export, :, sorted, ), {, export, ., generateExterns, (, ), ;, }, }, public, String]
[), {, export, ., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder]
[;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter, ., Builder, (, externsRoot]
[., generateExterns, (, ), ;, }, }, public, String, getGeneratedExterns, (, ), {, CodePrinter, ., Builder, builder, =, new, CodePrinter]
[;, return, builder, ., build, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., setOutputTypes, (, true, ), ;, return, builder, ., build, (, ), ;, }, @, Override, public, void, visit, (]
[., setPrettyPrint, (, true, ), ., setOutputTypes, (, true, ), ;, return, builder, ., build, (, ), ;, }, @]
[), ., setPrettyPrint, (, true, ), ., setOutputTypes, (, true, ), ;, return, builder, ., build, (, ), ;, }]
[), ., setOutputTypes, (, true, ), ;, return, builder, ., build, (, ), ;, }, @, Override, public, void, visit]
[), ;, return, builder, ., build, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[., build, (, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, )]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, String, name, =, n]
[:, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null]
[., NAME, :, case, Token, ., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name]
[:, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return, ;, }]
[., GETPROP, :, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return]
[;, if, (, name, ==, null, ), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent]
[., getQualifiedName, (, ), ;, if, (, name, ==, null, ), {, return, ;, }, if, (, parent, ., isAssign]
[), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {]
[==, null, ), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, )]
[), {, return, ;, }, if, (, parent, ., isAssign, (, ), ||, parent, ., isVar, (, ), ), {]
[), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (, !, parent, ., isCall, (, )]
[||, parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (]
[., isAssign, (, ), ||, parent, ., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, )]
[), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (, !, parent, ., isCall, (, )]
[., isVar, (, ), ), {, definitionMap, ., put, (, name, ,, parent, ), ;, }, if, (, !, parent]
[;, }, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains]
[., put, (, name, ,, parent, ), ;, }, if, (, !, parent, ., isCall, (, ), ), {, return]
[,, parent, ), ;, }, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (]
[), ;, }, if, (, !, parent, ., isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, .]
[), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;]
[), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;]
[., isCall, (, ), ), {, return, ;, }, if, (, exportPropertyFunctionNames, ., contains, (, name, ), ), {, handlePropertyExport]
[), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {, handleSymbolExport, (]
[., contains, (, name, ), ), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name]
[), ), {, handlePropertyExport, (, parent, ), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {, handleSymbolExport]
[;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {, handleSymbolExport, (, parent, ), ;, }, }, }]
[), ;, }, if, (, exportSymbolFunctionNames, ., contains, (, name, ), ), {, handleSymbolExport, (, parent, ), ;, }, }]
[), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (]
[., contains, (, name, ), ), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node]
[), ), {, handleSymbolExport, (, parent, ), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if]
[;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=]
[), ;, }, }, }, private, void, handleSymbolExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, )]
[), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =, thisNode, ., getNext]
[!=, 3, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =, thisNode]
[., getChildCount, (, ), !=, 3, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;]
[), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, nameArg, =, thisNode, ., getNext]
[;, Node, nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if]
[., getFirstChild, (, ), ;, Node, nameArg, =, thisNode, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext]
[;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !, nameArg, ., isString, (, ), ), {]
[., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !, nameArg, ., isString]
[;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (]
[., getNext, (, ), ;, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, .]
[), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,]
[), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,]
[., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, SymbolExport, (, nameArg, .]
[;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 4, )]
[., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,, valueArg, ), ), ;, }, private, void, handlePropertyExport]
[., exports, ., add, (, new, SymbolExport, (, nameArg, ., getString, (, ), ,, valueArg, ), ), ;, }, private]
[), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=, 4]
[,, valueArg, ), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (]
[., getString, (, ), ,, valueArg, ), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (]
[), ), ;, }, private, void, handlePropertyExport, (, Node, parent, ), {, if, (, parent, ., getChildCount, (, ), !=]
[), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =, thisNode, ., getNext]
[!=, 4, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =, thisNode]
[., getChildCount, (, ), !=, 4, ), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;]
[), {, return, ;, }, Node, thisNode, =, parent, ., getFirstChild, (, ), ;, Node, objectArg, =, thisNode, ., getNext]
[;, Node, objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node]
[., getFirstChild, (, ), ;, Node, objectArg, =, thisNode, ., getNext, (, ), ;, Node, nameArg, =, objectArg, ., getNext]
[;, Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if]
[., getNext, (, ), ;, Node, nameArg, =, objectArg, ., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext]
[;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {]
[., getNext, (, ), ;, Node, valueArg, =, nameArg, ., getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName]
[;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {, return, ;, }, if, (, !, nameArg, ., isString]
[., getNext, (, ), ;, if, (, !, objectArg, ., isQualifiedName, (, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, .]
[), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return, ;, }, this, .]
[., isQualifiedName, (, ), ), {, return, ;, }, if, (, !, nameArg, ., isString, (, ), ), {, return]
[), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,]
[), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,]
[., isString, (, ), ), {, return, ;, }, this, ., exports, ., add, (, new, PropertyExport, (, objectArg, .]
[;, }, }]
[., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,, valueArg, )]
[., exports, ., add, (, new, PropertyExport, (, objectArg, ., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,]
[), ;, }, }]
[,, nameArg, ., getString, (, ), ,, valueArg, ), ), ;, }, }]
[., getQualifiedName, (, ), ,, nameArg, ., getString, (, ), ,, valueArg, ), ), ;, }, }]
[,, valueArg, ), ), ;, }, }]
[., getString, (, ), ,, valueArg, ), ), ;, }, }]
[), ), ;, }, }]
