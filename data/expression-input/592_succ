[;, private, Map, <, String, ,, Name, >, nameMap, =, Maps, ., newHashMap, (, ), ;, final, Name, UNKNOWN, ;]
[., create, (, ), ;, private, Map, <, String, ,, Name, >, nameMap, =, Maps, ., newHashMap, (, ), ;]
[;, final, Name, UNKNOWN, ;, final, Name, MAIN, ;, final, Name, WINDOW, ;, final, AbstractCompiler, compiler, ;, public, NameReferenceGraph, (]
[., newHashMap, (, ), ;, final, Name, UNKNOWN, ;, final, Name, MAIN, ;, final, Name, WINDOW, ;, final, AbstractCompiler, compiler]
[,, true, ), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;]
[), ;, this, ., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, .]
[=, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN]
[., compiler, =, compiler, ;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true]
[;, UNKNOWN, =, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type]
[=, new, Name, (, "{UNKNOWN}", ,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler]
[;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative]
[,, true, ), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), .]
[), ;, UNKNOWN, ., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (]
[=, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;]
[., isAliased, =, true, ;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE]
[;, UNKNOWN, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, .]
[=, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, )]
[., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (]
[;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, .]
[., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN]
[), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this]
[., NO_TYPE, ), ;, this, ., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, )]
[;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =]
[., createNode, (, UNKNOWN, ), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (]
[), ;, MAIN, =, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW]
[=, new, Name, (, "{Global Main}", ,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name]
[;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this, .]
[,, true, ), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, )]
[), ;, this, ., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this]
[;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this, ., createNode, (, WINDOW, ), ;, }, public]
[., createNode, (, MAIN, ), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this, ., createNode, (]
[), ;, WINDOW, =, new, Name, (, "window", ,, true, ), ;, this, ., createNode, (, WINDOW, ), ;, }]
[=, new, Name, (, "window", ,, true, ), ;, this, ., createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists]
[;, this, ., createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {]
[,, true, ), ;, this, ., createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean]
[), ;, this, ., createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, )]
[;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if, (]
[., createNode, (, WINDOW, ), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol]
[), ;, }, public, Name, defineNameIfNotExists, (, String, name, ,, boolean, isExtern, ), {, Name, symbol, =, null, ;, if]
[;, if, (, nameMap, ., containsKey, (, name, ), ), {, symbol, =, nameMap, ., get, (, name, ), ;]
[), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name]
[., containsKey, (, name, ), ), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol]
[), ), {, symbol, =, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (]
[=, nameMap, ., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, )]
[;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name, ,]
[., get, (, name, ), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap]
[), ;, }, else, {, symbol, =, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name]
[=, new, Name, (, name, ,, isExtern, ), ;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (]
[;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (, symbol, ), ;, }, return, symbol, ;, }]
[,, isExtern, ), ;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (, symbol, ), ;, }, return]
[), ;, nameMap, ., put, (, name, ,, symbol, ), ;, createNode, (, symbol, ), ;, }, return, symbol, ;]
[;, createNode, (, symbol, ), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site]
[., put, (, name, ,, symbol, ), ;, createNode, (, symbol, ), ;, }, return, symbol, ;, }, public, List]
[,, symbol, ), ;, createNode, (, symbol, ), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt]
[), ;, createNode, (, symbol, ), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node]
[;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument]
[), ;, }, return, symbol, ;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, .]
[;, }, public, List, <, Name, >, getReferencesAt, (, Node, site, ), {, Preconditions, ., checkArgument, (, site, ., isGetProp]
[;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target, :]
[., checkArgument, (, site, ., isGetProp, (, ), ||, site, ., isName, (, ), ), ;, List, <, Name, >]
[), ;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target]
[||, site, ., isName, (, ), ), ;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (]
[., isGetProp, (, ), ||, site, ., isName, (, ), ), ;, List, <, Name, >, result, =, new, ArrayList]
[), ;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;, for, (, Name, target]
[., isName, (, ), ), ;, List, <, Name, >, result, =, new, ArrayList, <, Name, >, (, ), ;]
[;, for, (, Name, target, :, referenceMap, ., get, (, site, ), ), {, result, ., add, (, target, )]
[), {, result, ., add, (, target, ), ;, }, return, result, ;, }, @, Override, public, Collection, <, Definition]
[., get, (, site, ), ), {, result, ., add, (, target, ), ;, }, return, result, ;, }, @]
[), ), {, result, ., add, (, target, ), ;, }, return, result, ;, }, @, Override, public, Collection, <]
[;, }, return, result, ;, }, @, Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (, Node, useSite, ), {, List]
[., add, (, target, ), ;, }, return, result, ;, }, @, Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (]
[), ;, }, return, result, ;, }, @, Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (, Node, useSite, ), {]
[;, }, @, Override, public, Collection, <, Definition, >, getDefinitionsReferencedAt, (, Node, useSite, ), {, List, <, Name, >, nameRefs]
[;, if, (, nameRefs, ., isEmpty, (, ), ), {, return, null, ;, }, List, <, Definition, >, result, =]
[), ;, if, (, nameRefs, ., isEmpty, (, ), ), {, return, null, ;, }, List, <, Definition, >, result]
[), {, return, null, ;, }, List, <, Definition, >, result, =, Lists, ., newArrayList, (, ), ;, for, (]
[., isEmpty, (, ), ), {, return, null, ;, }, List, <, Definition, >, result, =, Lists, ., newArrayList, (]
[;, }, List, <, Definition, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, Name, nameRef, :, nameRefs]
[;, for, (, Name, nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =, nameRef, ., getDeclarations, (, )]
[., newArrayList, (, ), ;, for, (, Name, nameRef, :, nameRefs, ), {, List, <, Definition, >, decls, =, nameRef]
[), {, List, <, Definition, >, decls, =, nameRef, ., getDeclarations, (, ), ;, if, (, !, decls, ., isEmpty]
[;, if, (, !, decls, ., isEmpty, (, ), ), {, result, ., addAll, (, decls, ), ;, }, }]
[., getDeclarations, (, ), ;, if, (, !, decls, ., isEmpty, (, ), ), {, result, ., addAll, (, decls]
[), {, result, ., addAll, (, decls, ), ;, }, }, if, (, !, result, ., isEmpty, (, ), )]
[), {, result, ., addAll, (, decls, ), ;, }, }, if, (, !, result, ., isEmpty, (, ), )]
[., isEmpty, (, ), ), {, result, ., addAll, (, decls, ), ;, }, }, if, (, !, result, .]
[;, }, }, if, (, !, result, ., isEmpty, (, ), ), {, return, result, ;, }, else, {, return]
[., addAll, (, decls, ), ;, }, }, if, (, !, result, ., isEmpty, (, ), ), {, return, result]
[), ;, }, }, if, (, !, result, ., isEmpty, (, ), ), {, return, result, ;, }, else, {]
[), {, return, result, ;, }, else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, )]
[), {, return, result, ;, }, else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, )]
[., isEmpty, (, ), ), {, return, result, ;, }, else, {, return, null, ;, }, }, public, Name, getSymbol]
[;, }, else, {, return, null, ;, }, }, public, Name, getSymbol, (, String, name, ), {, return, nameMap, .]
[;, }, }, public, Name, getSymbol, (, String, name, ), {, return, nameMap, ., get, (, name, ), ;, }]
[;, }, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {, nameMap, ., put]
[., get, (, name, ), ;, }, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value]
[), ;, }, @, Override, public, GraphNode, <, Name, ,, Reference, >, createNode, (, Name, value, ), {, nameMap, .]
[;, return, super, ., createNode, (, value, ), ;, }, @, Override, public, void, connect, (, Name, src, ,, Reference]
[., put, (, value, ., qName, ,, value, ), ;, return, super, ., createNode, (, value, ), ;, }, @]
[,, value, ), ;, return, super, ., createNode, (, value, ), ;, }, @, Override, public, void, connect, (, Name]
[., qName, ,, value, ), ;, return, super, ., createNode, (, value, ), ;, }, @, Override, public, void, connect]
[), ;, return, super, ., createNode, (, value, ), ;, }, @, Override, public, void, connect, (, Name, src, ,]
[;, }, @, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {, super, .]
[., createNode, (, value, ), ;, }, @, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name]
[), ;, }, @, Override, public, void, connect, (, Name, src, ,, Reference, ref, ,, Name, dest, ), {, super]
[;, referenceMap, ., put, (, ref, ., site, ,, dest, ), ;, }, class, Name, {, private, final, String, qName]
[., connect, (, src, ,, ref, ,, dest, ), ;, referenceMap, ., put, (, ref, ., site, ,, dest, )]
[,, ref, ,, dest, ), ;, referenceMap, ., put, (, ref, ., site, ,, dest, ), ;, }, class, Name]
[,, dest, ), ;, referenceMap, ., put, (, ref, ., site, ,, dest, ), ;, }, class, Name, {, private]
[), ;, referenceMap, ., put, (, ref, ., site, ,, dest, ), ;, }, class, Name, {, private, final, String]
[;, }, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private, List, <, Definition, >, declarations]
[., put, (, ref, ., site, ,, dest, ), ;, }, class, Name, {, private, final, String, qName, ;, private]
[,, dest, ), ;, }, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private, List, <]
[., site, ,, dest, ), ;, }, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private]
[), ;, }, class, Name, {, private, final, String, qName, ;, private, JSType, type, ;, private, List, <, Definition, >]
[;, final, boolean, isExtern, ;, private, boolean, isExported, =, false, ;, private, boolean, isAliased, =, false, ;, private, boolean, exposedToCallOrApply]
[., newLinkedList, (, ), ;, final, boolean, isExtern, ;, private, boolean, isExported, =, false, ;, private, boolean, isAliased, =, false]
[;, private, boolean, isAliased, =, false, ;, private, boolean, exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean]
[;, private, boolean, exposedToCallOrApply, =, false, ;, public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName]
[;, public, Name, (, String, qName, ,, boolean, isExtern, ), {, this, ., qName, =, qName, ;, this, ., isExtern]
[=, qName, ;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String]
[., qName, =, qName, ;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', )]
[;, this, ., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =]
[=, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -]
[., isExtern, =, isExtern, ;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot]
[;, int, lastDot, =, qName, ., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, )]
[;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1]
[., lastIndexOf, (, '.', ), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, .]
[), ;, String, name, =, (, lastDot, ==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +]
[;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =]
[?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (]
[), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention]
[==, -, 1, ), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =]
[), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention]
[), ?, qName, :, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention]
[:, qName, ., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), .]
[;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =]
[., substring, (, lastDot, +, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (]
[), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type]
[+, 1, ), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this]
[), ;, this, ., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type]
[=, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =, compiler, ., getTypeRegistry, (]
[., isExported, =, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =, compiler, .]
[;, this, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public]
[., isExported, (, name, ), ;, this, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, .]
[., getCodingConvention, (, ), ., isExported, (, name, ), ;, this, ., type, =, compiler, ., getTypeRegistry, (, ), .]
[), ;, this, ., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[=, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public, JSType, getType, (, )]
[., type, =, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public, JSType, getType]
[;, }, public, JSType, getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType, type, ), {]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public, JSType, getType, (, ), {, return, type, ;, }, public]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, public, JSType, getType, (, ), {, return]
[), ;, }, public, JSType, getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType, type, )]
[., UNKNOWN_TYPE, ), ;, }, public, JSType, getType, (, ), {, return, type, ;, }, public, void, setType, (, JSType]
[;, }, public, void, setType, (, JSType, type, ), {, this, ., type, =, type, ;, }, public, List, <]
[=, type, ;, }, public, List, <, Definition, >, getDeclarations, (, ), {, return, declarations, ;, }, public, void, addAssignmentDeclaration]
[., type, =, type, ;, }, public, List, <, Definition, >, getDeclarations, (, ), {, return, declarations, ;, }, public]
[;, }, public, List, <, Definition, >, getDeclarations, (, ), {, return, declarations, ;, }, public, void, addAssignmentDeclaration, (, Node]
[;, }, public, void, addAssignmentDeclaration, (, Node, node, ), {, declarations, ., add, (, new, AssignmentDefinition, (, node, ,, isExtern]
[;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition, (, node, ,, isExtern]
[., add, (, new, AssignmentDefinition, (, node, ,, isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, )]
[), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition, (, node, ,]
[,, isExtern, ), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition]
[), ), ;, }, public, void, addFunctionDeclaration, (, Node, node, ), {, declarations, ., add, (, new, NamedFunctionDefinition, (, node]
[;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {, this, .]
[., add, (, new, NamedFunctionDefinition, (, node, ,, isExtern, ), ), ;, }, public, boolean, isExtern, (, ), {, return]
[), ;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {, this]
[,, isExtern, ), ), ;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (]
[), ), ;, }, public, boolean, isExtern, (, ), {, return, isExtern, ;, }, public, void, markExported, (, ), {]
[;, }, public, void, markExported, (, ), {, this, ., isExported, =, true, ;, }, public, boolean, isExported, (, )]
[=, true, ;, }, public, boolean, isExported, (, ), {, return, isExported, ;, }, public, final, void, remove, (, )]
[., isExported, =, true, ;, }, public, boolean, isExported, (, ), {, return, isExported, ;, }, public, final, void, remove]
[;, }, public, boolean, isExported, (, ), {, return, isExported, ;, }, public, final, void, remove, (, ), {, for]
[;, }, public, final, void, remove, (, ), {, for, (, Definition, declaration, :, getDeclarations, (, ), ), {, declaration]
[), {, declaration, ., remove, (, ), ;, }, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }]
[;, }, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, void, setAliased, (, boolean, isAliased, )]
[., remove, (, ), ;, }, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, void, setAliased]
[;, }, public, void, setAliased, (, boolean, isAliased, ), {, this, ., isAliased, =, isAliased, ;, }, public, boolean, hasSideEffect]
[=, isAliased, ;, }, public, boolean, hasSideEffect, (, ), {, return, isCallable, (, ), ;, }, public, String, getQualifiedName, (]
[., isAliased, =, isAliased, ;, }, public, boolean, hasSideEffect, (, ), {, return, isCallable, (, ), ;, }, public, String]
[;, }, public, boolean, hasSideEffect, (, ), {, return, isCallable, (, ), ;, }, public, String, getQualifiedName, (, ), {]
[;, }, public, String, getQualifiedName, (, ), {, return, qName, ;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot]
[;, }, public, String, getPropertyName, (, ), {, int, lastIndexOfDot, =, qName, ., lastIndexOf, (, '.', ), ;, if, (]
[;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring, (]
[., lastIndexOf, (, '.', ), ;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {]
[), ;, if, (, lastIndexOfDot, ==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring]
[), {, return, null, ;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }]
[==, -, 1, ), {, return, null, ;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +, 1, )]
[), {, return, null, ;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }]
[), {, return, null, ;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }]
[;, }, else, {, return, qName, ., substring, (, lastIndexOfDot, +, 1, ), ;, }, }, public, boolean, isCallable, (]
[;, }, }, public, boolean, isCallable, (, ), {, return, type, ., canBeCalled, (, ), ;, }, public, boolean, exposedToCallOrApply]
[., substring, (, lastIndexOfDot, +, 1, ), ;, }, }, public, boolean, isCallable, (, ), {, return, type, ., canBeCalled]
[), ;, }, }, public, boolean, isCallable, (, ), {, return, type, ., canBeCalled, (, ), ;, }, public, boolean]
[+, 1, ), ;, }, }, public, boolean, isCallable, (, ), {, return, type, ., canBeCalled, (, ), ;, }]
[), ;, }, }, public, boolean, isCallable, (, ), {, return, type, ., canBeCalled, (, ), ;, }, public, boolean]
[;, }, public, boolean, exposedToCallOrApply, (, ), {, return, exposedToCallOrApply, ;, }, public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =]
[., canBeCalled, (, ), ;, }, public, boolean, exposedToCallOrApply, (, ), {, return, exposedToCallOrApply, ;, }, public, void, markExposedToCallOrApply, (]
[;, }, public, void, markExposedToCallOrApply, (, ), {, exposedToCallOrApply, =, true, ;, }, @, Override, public, String, toString, (, )]
[=, true, ;, }, @, Override, public, String, toString, (, ), {, return, qName, +, " : ", +, type, ;, }]
[;, }, @, Override, public, String, toString, (, ), {, return, qName, +, " : ", +, type, ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean]
[+, type, ;, }, @, Override, public, int, hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }]
[+, " : ", +, type, ;, }, @, Override, public, int, hashCode, (, ), {, return, qName, ., hashCode, (, )]
[+, type, ;, }, @, Override, public, int, hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }]
[;, }, @, Override, public, int, hashCode, (, ), {, return, qName, ., hashCode, (, ), ;, }, public, boolean]
[;, }, public, boolean, canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||, !, isCallable, (, ), ||]
[., hashCode, (, ), ;, }, public, boolean, canChangeSignature, (, ), {, return, !, (, isExtern, (, ), ||, !]
[;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (]
[;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if, (]
[), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if]
[||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (]
[||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition]
[||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, )]
[||, isAliased, (, ), ||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private]
[||, !, isCallable, (, ), ||, isAliased, (, ), ||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (]
[||, isAliased, (, ), ||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private]
[||, isAliased, (, ), ||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private]
[||, isExported, (, ), ||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, )]
[||, exposedToCallOrApply, (, ), ||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition]
[||, nameUsesArgumentsProperty, (, ), ), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (]
[), ;, }, private, boolean, nameUsesArgumentsProperty, (, ), {, for, (, Definition, definition, :, getDeclarations, (, ), ), {, if]
[), {, if, (, NodeUtil, ., isVarArgsFunction, (, definition, ., getRValue, (, ), ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, return, false, ;, }, }, static, class, Reference, {, public, final, Node, site]
[., isVarArgsFunction, (, definition, ., getRValue, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, }, static, class, Reference, {, public, final, Node]
[., getRValue, (, ), ), ), {, return, true, ;, }, }, return, false, ;, }, }, static, class, Reference]
[;, }, }, return, false, ;, }, }, static, class, Reference, {, public, final, Node, site, ;, public, final, Node]
[;, }, }, static, class, Reference, {, public, final, Node, site, ;, public, final, Node, parent, ;, private, JSModule, module]
[;, private, boolean, isUnknown, =, false, ;, public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site]
[;, public, Reference, (, Node, site, ,, Node, parent, ), {, this, ., site, =, site, ;, this, ., parent]
[=, site, ;, this, ., parent, =, parent, ;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }]
[., site, =, site, ;, this, ., parent, =, parent, ;, }, public, boolean, isUnknown, (, ), {, return, isUnknown]
[;, this, ., parent, =, parent, ;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void]
[=, parent, ;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (, boolean, isUnknown]
[., parent, =, parent, ;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (]
[;, }, public, boolean, isUnknown, (, ), {, return, isUnknown, ;, }, public, void, setUnknown, (, boolean, isUnknown, ), {]
[;, }, public, void, setUnknown, (, boolean, isUnknown, ), {, this, ., isUnknown, =, isUnknown, ;, }, public, JSModule, getModule]
[=, isUnknown, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module]
[., isUnknown, =, isUnknown, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, void, setModule, (, JSModule, module, ), {]
[;, }, public, void, setModule, (, JSModule, module, ), {, this, ., module, =, module, ;, }, boolean, isCall, (]
[=, module, ;, }, boolean, isCall, (, ), {, return, site, ., isCall, (, ), ;, }, public, Node, getSite]
[., module, =, module, ;, }, boolean, isCall, (, ), {, return, site, ., isCall, (, ), ;, }, public]
[;, }, boolean, isCall, (, ), {, return, site, ., isCall, (, ), ;, }, public, Node, getSite, (, )]
[;, }, public, Node, getSite, (, ), {, return, site, ;, }, }, }]
[., isCall, (, ), ;, }, public, Node, getSite, (, ), {, return, site, ;, }, }, }]
[;, }, }, }]
