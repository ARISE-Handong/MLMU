[., util, ., FastMath, ;, public, abstract, class, AbstractIntegerDistribution, implements, IntegerDistribution, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[util, ., FastMath, ;, public, abstract, class, AbstractIntegerDistribution, implements, IntegerDistribution, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[IntegerDistribution, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -, 1146319659338487221L, ;, @, Deprecated, protected, final, RandomDataImpl, randomData, =]
[RandomDataImpl, randomData, =, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, @, Deprecated, protected, AbstractIntegerDistribution, (, ), {]
[=, new, RandomDataImpl, (, ), ;, protected, final, RandomGenerator, random, ;, @, Deprecated, protected, AbstractIntegerDistribution, (, ), {, random, =]
[;, @, Deprecated, protected, AbstractIntegerDistribution, (, ), {, random, =, null, ;, }, protected, AbstractIntegerDistribution, (, RandomGenerator, rng, ), {]
[Deprecated, protected, AbstractIntegerDistribution, (, ), {, random, =, null, ;, }, protected, AbstractIntegerDistribution, (, RandomGenerator, rng, ), {, random, =]
[random, =, rng, ;, }, public, double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (]
[random, =, rng, ;, }, public, double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (]
[rng, ;, }, public, double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <]
[double, cumulativeProbability, (, int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <, x0, ), {, throw]
[int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <, x0, ), {, throw, new, NumberIsTooLargeException, (]
[int, x0, ,, int, x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <, x0, ), {, throw, new, NumberIsTooLargeException, (]
[x1, ), throws, NumberIsTooLargeException, {, if, (, x1, <, x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,]
[throws, NumberIsTooLargeException, {, if, (, x1, <, x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,]
[{, if, (, x1, <, x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,]
[x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return]
[x0, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return]
[{, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -]
[LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, return, cumulativeProbability, (, x1, ), -, cumulativeProbability, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[-, cumulativeProbability, (, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[(, x0, ), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[), ;, }, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[}, public, int, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >]
[(, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[{, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =]
[new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (]
[new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (]
[(, p, ,, 0, ,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==]
[,, 1, ), ;, }, int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return]
[int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;, }, if, (]
[int, lower, =, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;, }, if, (]
[=, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==]
[=, getSupportLowerBound, (, ), ;, if, (, p, ==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==]
[p, ==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (]
[p, ==, 0.0, ), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (]
[0.0, ), {, return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (]
[return, lower, ;, }, if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=]
[if, (, lower, ==, Integer, ., MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return]
[MIN_VALUE, ), {, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }, }, else, {]
[{, if, (, checkedCumulativeProbability, (, lower, ), >=, p, ), {, return, lower, ;, }, }, else, {, lower, -=]
[), >=, p, ), {, return, lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =]
[lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (]
[lower, ;, }, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (]
[}, }, else, {, lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (, p, ==]
[lower, -=, 1, ;, }, int, upper, =, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return]
[=, getSupportUpperBound, (, ), ;, if, (, p, ==, 1.0, ), {, return, upper, ;, }, final, double, mu, =]
[==, 1.0, ), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =]
[==, 1.0, ), {, return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =]
[return, upper, ;, }, final, double, mu, =, getNumericalMean, (, ), ;, final, double, sigma, =, FastMath, ., sqrt, (]
[(, ), ;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =]
[), ;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[;, final, double, sigma, =, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (]
[=, FastMath, ., sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (]
[sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||]
[sqrt, (, getNumericalVariance, (, ), ), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||]
[), ), ;, final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (]
[final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||]
[final, boolean, chebyshevApplies, =, !, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||]
[!, (, Double, ., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||]
[., isInfinite, (, mu, ), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||]
[), ||, Double, ., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (]
[., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||]
[., isNaN, (, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||]
[(, mu, ), ||, Double, ., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==]
[., isInfinite, (, sigma, ), ||, Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (]
[Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =]
[Double, ., isNaN, (, sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =]
[sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (]
[sigma, ), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (]
[), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (]
[), ||, sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (]
[sigma, ==, 0.0, ), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -]
[), ;, if, (, chebyshevApplies, ), {, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /]
[{, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =]
[{, double, k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =]
[k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -]
[k, =, FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -]
[FastMath, ., sqrt, (, (, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *]
[(, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (]
[(, 1.0, -, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (]
[-, p, ), /, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >]
[/, p, ), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {]
[), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =]
[), ;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =]
[;, double, tmp, =, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (]
[=, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, )]
[=, mu, -, k, *, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, )]
[*, sigma, ;, if, (, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (]
[(, tmp, >, lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -]
[lower, ), {, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }]
[{, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =]
[{, lower, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =]
[=, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /]
[(, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;]
[), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =]
[), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =]
[., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +]
[., ceil, (, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +]
[(, tmp, ), ), -, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *]
[-, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (]
[-, 1, ;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (]
[;, }, k, =, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <]
[=, 1.0, /, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {]
[/, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =]
[/, k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =]
[k, ;, tmp, =, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (]
[=, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, )]
[=, mu, +, k, *, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, )]
[*, sigma, ;, if, (, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (]
[(, tmp, <, upper, ), {, upper, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -]
[{, upper, =, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }, return]
[=, (, (, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (]
[(, int, ), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,]
[), Math, ., ceil, (, tmp, ), ), -, 1, ;, }, }, return, solveInverseCumulativeProbability, (, p, ,, lower, ,]
[), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (]
[), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (]
[), ;, }, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (]
[}, protected, int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (, lower, +]
[int, solveInverseCumulativeProbability, (, final, double, p, ,, int, lower, ,, int, upper, ), {, while, (, lower, +, 1, <]
[,, int, lower, ,, int, upper, ), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =]
[,, int, lower, ,, int, upper, ), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =]
[int, lower, ,, int, upper, ), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =, (]
[int, lower, ,, int, upper, ), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =, (]
[,, int, upper, ), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =, (, lower, +]
[), {, while, (, lower, +, 1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /]
[lower, +, 1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (]
[lower, +, 1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (]
[lower, +, 1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (]
[1, <, upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <]
[upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||]
[upper, ), {, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||]
[{, int, xm, =, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >]
[=, (, lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {]
[lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =]
[lower, +, upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =]
[upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +]
[upper, ), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +]
[), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (]
[), /, 2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (]
[2, ;, if, (, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -]
[(, xm, <, lower, ||, xm, >, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /]
[>, upper, ), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =]
[), {, xm, =, lower, +, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (]
[+, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (]
[+, (, upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (]
[upper, -, lower, ), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=]
[), /, 2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {]
[2, ;, }, double, pm, =, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper, =]
[=, checkedCumulativeProbability, (, xm, ), ;, if, (, pm, >=, p, ), {, upper, =, xm, ;, }, else, {]
[(, xm, ), ;, if, (, pm, >=, p, ), {, upper, =, xm, ;, }, else, {, lower, =]
[(, pm, >=, p, ), {, upper, =, xm, ;, }, else, {, lower, =, xm, ;, }, }, return]
[else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[else, {, lower, =, xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {]
[xm, ;, }, }, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (]
[}, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;]
[}, return, upper, ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;]
[}, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, randomData, ., reSeed, (]
[setSeed, (, seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return]
[seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (]
[seed, ), ;, randomData, ., reSeed, (, seed, ), ;, }, public, int, sample, (, ), {, return, inverseCumulativeProbability, (]
[random, ., nextDouble, (, ), ), ;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (]
[random, ., nextDouble, (, ), ), ;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (]
[nextDouble, (, ), ), ;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=]
[;, }, public, int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw]
[int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[int, [, ], sample, (, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, int, sampleSize, ), {, if, (, sampleSize, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out, =]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, int, [, ], out, =, new, int, []
[sampleSize, ), ;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =]
[;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[;, }, int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;]
[int, [, ], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <]
[], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[], out, =, new, int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[int, [, sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {]
[sampleSize, ], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, []
[for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =]
[), ;, }, return, out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =]
[out, ;, }, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;]
[}, private, double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;, result, =]
[double, checkedCumulativeProbability, (, int, argument, ), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;, result, =, cumulativeProbability, (]
[), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;, result, =, cumulativeProbability, (, argument, ), ;, if, (]
[), throws, MathInternalError, {, double, result, =, Double, ., NaN, ;, result, =, cumulativeProbability, (, argument, ), ;, if, (]
[double, result, =, Double, ., NaN, ;, result, =, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (]
[NaN, ;, result, =, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw]
[=, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (]
[=, cumulativeProbability, (, argument, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,]
[., isNaN, (, result, ), ), {, throw, new, MathInternalError, (, LocalizedFormats, ., DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, ,, argument, ), ;, }, return]
