[commons, ., math3, ., optimization, ., GoalType, ;, @, Deprecated, public, class, BracketFinder, {, private, static, final, double, EPS_MIN, =]
[@, Deprecated, public, class, BracketFinder, {, private, static, final, double, EPS_MIN, =, 1e-21, ;, private, static, final, double, GOLD, =]
[1e-21, ;, private, static, final, double, GOLD, =, 1.618034, ;, private, final, double, growLimit, ;, private, final, Incrementor, evaluations, =]
[;, private, double, fLo, ;, private, double, fHi, ;, private, double, fMid, ;, public, BracketFinder, (, ), {, this, (]
[double, fLo, ;, private, double, fHi, ;, private, double, fMid, ;, public, BracketFinder, (, ), {, this, (, 100, ,]
[this, (, 100, ,, 50, ), ;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (]
[this, (, 100, ,, 50, ), ;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (]
[100, ,, 50, ), ;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (, growLimit, <=]
[;, }, public, BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (, growLimit, <=, 0, ), {, throw]
[BracketFinder, (, double, growLimit, ,, int, maxEvaluations, ), {, if, (, growLimit, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[maxEvaluations, ), {, if, (, growLimit, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (]
[maxEvaluations, ), {, if, (, growLimit, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (]
[{, if, (, growLimit, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw]
[{, throw, new, NotStrictlyPositiveException, (, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }]
[(, growLimit, ), ;, }, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }]
[}, if, (, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =]
[(, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;]
[(, maxEvaluations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;]
[), {, throw, new, NotStrictlyPositiveException, (, maxEvaluations, ), ;, }, this, ., growLimit, =, growLimit, ;, evaluations, ., setMaximalCount, (]
[), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double, xA, ,, double, xB, ), {]
[), ;, }, public, void, search, (, UnivariateFunction, func, ,, GoalType, goal, ,, double, xA, ,, double, xB, ), {]
[GoalType, goal, ,, double, xA, ,, double, xB, ), {, evaluations, ., resetCount, (, ), ;, final, boolean, isMinim, =]
[GoalType, goal, ,, double, xA, ,, double, xB, ), {, evaluations, ., resetCount, (, ), ;, final, boolean, isMinim, =]
[,, double, xA, ,, double, xB, ), {, evaluations, ., resetCount, (, ), ;, final, boolean, isMinim, =, goal, ==]
[,, double, xA, ,, double, xB, ), {, evaluations, ., resetCount, (, ), ;, final, boolean, isMinim, =, goal, ==]
[{, evaluations, ., resetCount, (, ), ;, final, boolean, isMinim, =, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =]
[., resetCount, (, ), ;, final, boolean, isMinim, =, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (]
[(, ), ;, final, boolean, isMinim, =, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (, func, ,]
[=, goal, ==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =]
[==, GoalType, ., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (]
[., MINIMIZE, ;, double, fA, =, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,]
[=, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (]
[=, eval, (, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (]
[(, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?]
[(, func, ,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?]
[,, xA, ), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <]
[), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :]
[), ;, double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :]
[double, fB, =, eval, (, func, ,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :, fA, >]
[,, xB, ), ;, if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =]
[), ;, if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;]
[if, (, isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =]
[isMinim, ?, fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;]
[fA, <, fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =]
[fB, :, fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;]
[fA, >, fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =]
[fB, ), {, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;]
[{, double, tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =]
[tmp, =, xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;]
[xA, ;, xA, =, xB, ;, xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =]
[xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =]
[xB, =, tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =]
[tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +]
[tmp, ;, tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +]
[tmp, =, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *]
[=, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (]
[=, fA, ;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (]
[;, fA, =, fB, ;, fB, =, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -]
[=, tmp, ;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double, fC, =]
[;, }, double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (]
[double, xC, =, xB, +, GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,]
[GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (]
[GOLD, *, (, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (]
[(, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?]
[(, xB, -, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?]
[-, xA, ), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <]
[), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :]
[), ;, double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :]
[double, fC, =, eval, (, func, ,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >]
[,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =]
[,, xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =]
[xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (]
[xC, ), ;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (]
[;, while, (, isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -]
[isMinim, ?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *]
[?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (]
[?, fC, <, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (]
[<, fB, :, fC, >, fB, ), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -]
[), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =]
[), {, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =]
[{, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (]
[{, double, tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (]
[tmp1, =, (, xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -]
[xB, -, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *]
[-, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (]
[-, xA, ), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (]
[), *, (, fB, -, fC, ), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -]
[), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =]
[), ;, double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =]
[double, tmp2, =, (, xB, -, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -]
[-, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =]
[-, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =]
[-, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =]
[-, xC, ), *, (, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =]
[(, fB, -, fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (]
[fA, ), ;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <]
[;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?]
[;, double, val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?]
[val, =, tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *]
[tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :]
[tmp2, -, tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :]
[tmp1, ;, double, denom, =, Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *]
[Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =]
[Math, ., abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =]
[abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -]
[abs, (, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -]
[(, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (]
[(, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (]
[(, val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (]
[val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (]
[val, ), <, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (]
[<, EPS_MIN, ?, 2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -]
[2, *, EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *]
[EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -]
[EPS_MIN, :, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -]
[:, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (]
[:, 2, *, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (]
[*, val, ;, double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -]
[double, w, =, xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, ), *]
[xB, -, (, (, xB, -, xC, ), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /]
[-, xC, ), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =]
[-, xC, ), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =]
[), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +]
[), *, tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +]
[tmp2, -, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *]
[-, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (]
[-, (, xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (]
[xB, -, xA, ), *, tmp1, ), /, denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -]
[denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (]
[denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (]
[denom, ;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (]
[;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (]
[;, double, wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (]
[wLim, =, xB, +, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -]
[+, growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *]
[growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (]
[growLimit, *, (, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (]
[(, xC, -, xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -]
[xB, ), ;, double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >]
[double, fW, ;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, ), {]
[;, if, (, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, ), {, fW, =]
[(, (, w, -, xC, ), *, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (]
[w, -, xC, ), *, (, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,]
[(, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (]
[(, xB, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :]
[0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :]
[{, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >]
[eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {]
[func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =]
[w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;]
[;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =]
[(, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;]
[?, fW, <, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =]
[<, fC, :, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;]
[:, fW, >, fC, ), {, xA, =, xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =]
[xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (]
[xB, ;, xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (]
[xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?]
[xB, =, w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?]
[w, ;, fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >]
[fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :]
[fA, =, fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :]
[fB, ;, fB, =, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <]
[=, fW, ;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {]
[;, break, ;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {, xC, =]
[;, }, else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {, xC, =, w, ;]
[else, if, (, isMinim, ?, fW, >, fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =]
[fW, >, fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }]
[fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =]
[fB, :, fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =]
[fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +]
[fW, <, fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +]
[fB, ), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *]
[), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (]
[), {, xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (]
[xC, =, w, ;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -]
[;, fC, =, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;]
[=, fW, ;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =]
[;, break, ;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (]
[;, }, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,]
[*, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[*, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[*, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[(, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[(, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[-, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (]
[fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (]
[eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -]
[,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=]
[;, }, else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {]
[else, if, (, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {, w, =]
[(, (, w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;]
[w, -, wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =]
[wLim, ), *, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (]
[*, (, wLim, -, xC, ), >=, 0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,]
[0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[0, ), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (]
[), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[), {, w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (]
[w, =, wLim, ;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -]
[;, fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *]
[fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (]
[fW, =, eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (]
[eval, (, func, ,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -]
[,, w, ), ;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >]
[;, }, else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >, 0, ), {]
[else, if, (, (, w, -, wLim, ), *, (, xC, -, w, ), >, 0, ), {, fW, =]
[(, (, w, -, wLim, ), *, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (]
[w, -, wLim, ), *, (, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,]
[(, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (]
[(, xC, -, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[-, w, ), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?]
[), >, 0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <]
[0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :]
[0, ), {, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :]
[{, fW, =, eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >]
[eval, (, func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {]
[func, ,, w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =]
[w, ), ;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;]
[;, if, (, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =]
[(, isMinim, ?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;]
[?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =]
[?, fW, <, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =]
[<, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +]
[<, fC, :, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +]
[:, fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *]
[fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (]
[fW, >, fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (]
[fC, ), {, xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -]
[xB, =, xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;]
[xC, ;, xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =]
[xC, =, w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;]
[w, ;, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =]
[w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;]
[xC, +, GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =]
[GOLD, *, (, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (]
[(, xC, -, xB, ), ;, fB, =, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,]
[=, fC, ;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {]
[;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =]
[;, fC, =, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =]
[=, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +]
[=, fW, ;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +]
[;, fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *]
[fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (]
[fW, =, eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (]
[eval, (, func, ,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -]
[,, w, ), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;]
[), ;, }, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =]
[}, }, else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (]
[else, {, w, =, xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,]
[xC, +, GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }]
[GOLD, *, (, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =]
[(, xC, -, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;]
[-, xB, ), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =]
[), ;, fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;]
[fW, =, eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =]
[eval, (, func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;]
[func, ,, w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =]
[w, ), ;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;]
[;, }, xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =]
[xA, =, xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;]
[xB, ;, fA, =, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =]
[=, fB, ;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }]
[;, xB, =, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =]
[=, xC, ;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;]
[;, fB, =, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =]
[=, fC, ;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;]
[;, xC, =, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =]
[=, w, ;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;]
[;, fC, =, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =]
[=, fW, ;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;]
[;, }, lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =]
[lo, =, xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;]
[xA, ;, fLo, =, fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =]
[fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (]
[fA, ;, mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (]
[mid, =, xB, ;, fMid, =, fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >]
[fB, ;, hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =]
[hi, =, xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;]
[xC, ;, fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =]
[fHi, =, fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;]
[fC, ;, if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =]
[if, (, lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;]
[lo, >, hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =]
[hi, ), {, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;]
[{, double, tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =]
[tmp, =, lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;]
[lo, ;, lo, =, hi, ;, hi, =, tmp, ;, tmp, =, fLo, ;, fLo, =, fHi, ;, fHi, =]
[=, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return]
[=, fLo, ;, fLo, =, fHi, ;, fHi, =, tmp, ;, }, }, public, int, getMaxEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getMaxEvaluations, (, ), {, return, evaluations, ., getMaximalCount, (, ), ;, }, public, int, getEvaluations, (, ), {, return]
[int, getEvaluations, (, ), {, return, evaluations, ., getCount, (, ), ;, }, public, double, getLo, (, ), {, return]
[), ;, }, public, double, getLo, (, ), {, return, lo, ;, }, public, double, getFLo, (, ), {, return]
[lo, ;, }, public, double, getFLo, (, ), {, return, fLo, ;, }, public, double, getHi, (, ), {, return]
[fLo, ;, }, public, double, getHi, (, ), {, return, hi, ;, }, public, double, getFHi, (, ), {, return]
[hi, ;, }, public, double, getFHi, (, ), {, return, fHi, ;, }, public, double, getMid, (, ), {, return]
[fHi, ;, }, public, double, getMid, (, ), {, return, mid, ;, }, public, double, getFMid, (, ), {, return]
[(, ), {, return, fMid, ;, }, private, double, eval, (, UnivariateFunction, f, ,, double, x, ), {, try, {]
[(, ), {, return, fMid, ;, }, private, double, eval, (, UnivariateFunction, f, ,, double, x, ), {, try, {]
[double, x, ), {, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[{, try, {, evaluations, ., incrementCount, (, ), ;, }, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[}, catch, (, MaxCountExceededException, e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return]
[e, ), {, throw, new, TooManyEvaluationsException, (, e, ., getMax, (, ), ), ;, }, return, f, ., value, (]
