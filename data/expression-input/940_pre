[;, @, Deprecated, public, class, EuclideanDoublePoint, implements, Clusterable, <, EuclideanDoublePoint, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[=, 8026472786091227632L, ;, private, final, double, [, ], point, ;, public, EuclideanDoublePoint, (, final, double, [, ], point, ), {]
[=, 8026472786091227632L, ;, private, final, double, [, ], point, ;, public, EuclideanDoublePoint, (, final, double, [, ], point, ), {]
[final, double, [, ], point, ;, public, EuclideanDoublePoint, (, final, double, [, ], point, ), {, this, ., point, =]
[;, }, public, EuclideanDoublePoint, centroidOf, (, final, Collection, <, EuclideanDoublePoint, >, points, ), {, final, double, [, ], centroid, =]
[EuclideanDoublePoint, centroidOf, (, final, Collection, <, EuclideanDoublePoint, >, points, ), {, final, double, [, ], centroid, =, new, double, []
[EuclideanDoublePoint, centroidOf, (, final, Collection, <, EuclideanDoublePoint, >, points, ), {, final, double, [, ], centroid, =, new, double, []
[[, ], centroid, =, new, double, [, getPoint, (, ), ., length, ], ;, for, (, final, EuclideanDoublePoint, p, :]
[(, ), ., length, ], ;, for, (, final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =]
[., length, ], ;, for, (, final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;]
[., length, ], ;, for, (, final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;]
[], ;, for, (, final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;, i, <]
[], ;, for, (, final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;, i, <]
[final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;]
[final, EuclideanDoublePoint, p, :, points, ), {, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;]
[points, ), {, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {]
[points, ), {, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, []
[int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], +=]
[int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], +=]
[int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], +=]
[<, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], +=, p, ., getPoint, (, ), []
[[, i, ], +=, p, ., getPoint, (, ), [, i, ], ;, }, }, for, (, int, i, =]
[], +=, p, ., getPoint, (, ), [, i, ], ;, }, }, for, (, int, i, =, 0, ;]
[], +=, p, ., getPoint, (, ), [, i, ], ;, }, }, for, (, int, i, =, 0, ;]
[p, ., getPoint, (, ), [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <]
[p, ., getPoint, (, ), [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <]
[), [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;]
[), [, i, ], ;, }, }, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;]
[;, }, }, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, []
[int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], /=]
[int, i, =, 0, ;, i, <, centroid, ., length, ;, i, ++, ), {, centroid, [, i, ], /=]
[., length, ;, i, ++, ), {, centroid, [, i, ], /=, points, ., size, (, ), ;, }, return]
[i, ++, ), {, centroid, [, i, ], /=, points, ., size, (, ), ;, }, return, new, EuclideanDoublePoint, (]
[;, }, return, new, EuclideanDoublePoint, (, centroid, ), ;, }, public, double, distanceFrom, (, final, EuclideanDoublePoint, p, ), {, return]
[;, }, return, new, EuclideanDoublePoint, (, centroid, ), ;, }, public, double, distanceFrom, (, final, EuclideanDoublePoint, p, ), {, return]
[EuclideanDoublePoint, (, centroid, ), ;, }, public, double, distanceFrom, (, final, EuclideanDoublePoint, p, ), {, return, MathArrays, ., distance, (]
[centroid, ), ;, }, public, double, distanceFrom, (, final, EuclideanDoublePoint, p, ), {, return, MathArrays, ., distance, (, point, ,]
[centroid, ), ;, }, public, double, distanceFrom, (, final, EuclideanDoublePoint, p, ), {, return, MathArrays, ., distance, (, point, ,]
[., getPoint, (, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[getPoint, (, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, !]
[(, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, !, (]
[(, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, !, (]
[public, boolean, equals, (, final, Object, other, ), {, if, (, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return]
[final, Object, other, ), {, if, (, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return]
[final, Object, other, ), {, if, (, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return]
[{, if, (, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return, Arrays, ., equals, (]
[(, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, point, ,]
[(, !, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, point, ,]
[!, (, other, instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, point, ,, (]
[instanceof, EuclideanDoublePoint, ), ), {, return, false, ;, }, return, Arrays, ., equals, (, point, ,, (, (, EuclideanDoublePoint, )]
[(, (, EuclideanDoublePoint, ), other, ), ., point, ), ;, }, public, double, [, ], getPoint, (, ), {, return]
[double, [, ], getPoint, (, ), {, return, point, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[double, [, ], getPoint, (, ), {, return, point, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, ), {, return, point, ;, }, @, Override, public, int, hashCode, (, ), {, return, Arrays, ., hashCode, (]
[), {, return, Arrays, ., hashCode, (, point, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), {, return, Arrays, ., hashCode, (, point, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[., hashCode, (, point, ), ;, }, @, Override, public, String, toString, (, ), {, return, Arrays, ., toString, (]
