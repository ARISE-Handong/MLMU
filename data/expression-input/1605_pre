[;, public, class, InverseHilbertMatrix, extends, RealLinearOperator, {, private, final, int, n, ;, public, InverseHilbertMatrix, (, final, int, n, ), {]
[;, public, class, InverseHilbertMatrix, extends, RealLinearOperator, {, private, final, int, n, ;, public, InverseHilbertMatrix, (, final, int, n, ), {]
[extends, RealLinearOperator, {, private, final, int, n, ;, public, InverseHilbertMatrix, (, final, int, n, ), {, this, ., n, =]
[int, n, ), {, this, ., n, =, n, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[return, n, ;, }, public, long, getEntry, (, final, int, i, ,, final, int, j, ), {, long, val, =]
[return, n, ;, }, public, long, getEntry, (, final, int, i, ,, final, int, j, ), {, long, val, =]
[return, n, ;, }, public, long, getEntry, (, final, int, i, ,, final, int, j, ), {, long, val, =]
[;, }, public, long, getEntry, (, final, int, i, ,, final, int, j, ), {, long, val, =, i, +]
[public, long, getEntry, (, final, int, i, ,, final, int, j, ), {, long, val, =, i, +, j, +]
[int, i, ,, final, int, j, ), {, long, val, =, i, +, j, +, 1, ;, long, aux, =]
[int, i, ,, final, int, j, ), {, long, val, =, i, +, j, +, 1, ;, long, aux, =]
[int, j, ), {, long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[int, j, ), {, long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[), {, long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +]
[long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,]
[long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,]
[long, val, =, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,]
[=, i, +, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,, n, -]
[+, j, +, 1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,, n, -, j, -]
[1, ;, long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,, n, -, j, -, 1, ), ;]
[long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,, n, -, j, -, 1, ), ;, val, =]
[long, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, i, ,, n, -, j, -, 1, ), ;, val, =]
[., binomialCoefficient, (, n, +, i, ,, n, -, j, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (]
[(, n, +, i, ,, n, -, j, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,]
[i, ,, n, -, j, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;]
[n, -, j, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =]
[n, -, j, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =]
[1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +]
[=, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,]
[=, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,]
[=, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,]
[., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,, n, -]
[(, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,, n, -, i, -]
[aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,, n, -, i, -, 1, ), ;]
[;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,, n, -, i, -, 1, ), ;, val, =]
[;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, n, +, j, ,, n, -, i, -, 1, ), ;, val, =]
[., binomialCoefficient, (, n, +, j, ,, n, -, i, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (]
[(, n, +, j, ,, n, -, i, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,]
[j, ,, n, -, i, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;]
[n, -, i, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =]
[n, -, i, -, 1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =]
[1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[1, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (]
[;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +]
[=, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,]
[mulAndCheck, (, val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,, i, ), ;]
[val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,, i, ), ;, val, =]
[val, ,, aux, ), ;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,, i, ), ;, val, =]
[;, aux, =, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,, i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (]
[=, CombinatoricsUtils, ., binomialCoefficient, (, i, +, j, ,, i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,]
[binomialCoefficient, (, i, +, j, ,, i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;]
[i, +, j, ,, i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, val, =]
[i, +, j, ,, i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, val, =]
[i, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (]
[;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,]
[., mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return]
[., mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return]
[., mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return]
[mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (]
[mulAndCheck, (, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (]
[(, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (, (]
[(, val, ,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (, (]
[,, aux, ), ;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (, (, i, +]
[;, val, =, ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (, (, i, +, j, ), &]
[ArithmeticUtils, ., mulAndCheck, (, val, ,, aux, ), ;, return, (, (, i, +, j, ), &, 1, ), ==]
[mulAndCheck, (, val, ,, aux, ), ;, return, (, (, i, +, j, ), &, 1, ), ==, 0, ?]
[val, ,, aux, ), ;, return, (, (, i, +, j, ), &, 1, ), ==, 0, ?, val, :]
[,, aux, ), ;, return, (, (, i, +, j, ), &, 1, ), ==, 0, ?, val, :, -]
[1, ), ==, 0, ?, val, :, -, val, ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[(, ), {, return, n, ;, }, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (]
[}, @, Override, public, RealVector, operate, (, final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=]
[RealVector, operate, (, final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw]
[final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (]
[final, RealVector, x, ), {, if, (, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (]
[(, x, ., getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (, x, ., getDimension, (, ), ,]
[throw, new, DimensionMismatchException, (, x, ., getDimension, (, ), ,, n, ), ;, }, final, double, [, ], y, =]
[(, x, ., getDimension, (, ), ,, n, ), ;, }, final, double, [, ], y, =, new, double, []
[), ;, }, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =]
[}, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], y, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, pos, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, pos, =, 0., ;, double, neg, =]
[;, i, ++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =]
[++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;]
[++, ), {, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;]
[{, double, pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <]
[pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[pos, =, 0., ;, double, neg, =, 0., ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, xj, =, x, ., getEntry, (]
[;, j, ++, ), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, long, coeff, =]
[++, ), {, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, long, coeff, =, getEntry, (]
[{, final, double, xj, =, x, ., getEntry, (, j, ), ;, final, long, coeff, =, getEntry, (, i, ,]
[getEntry, (, j, ), ;, final, long, coeff, =, getEntry, (, i, ,, j, ), ;, final, double, daux, =]
[getEntry, (, j, ), ;, final, long, coeff, =, getEntry, (, i, ,, j, ), ;, final, double, daux, =]
[j, ), ;, final, long, coeff, =, getEntry, (, i, ,, j, ), ;, final, double, daux, =, coeff, *]
[long, coeff, =, getEntry, (, i, ,, j, ), ;, final, double, daux, =, coeff, *, xj, ;, if, (]
[long, coeff, =, getEntry, (, i, ,, j, ), ;, final, double, daux, =, coeff, *, xj, ;, if, (]
[=, getEntry, (, i, ,, j, ), ;, final, double, daux, =, coeff, *, xj, ;, if, (, daux, >]
[i, ,, j, ), ;, final, double, daux, =, coeff, *, xj, ;, if, (, daux, >, 0., ), {]
[j, ), ;, final, double, daux, =, coeff, *, xj, ;, if, (, daux, >, 0., ), {, pos, +=]
[daux, =, coeff, *, xj, ;, if, (, daux, >, 0., ), {, pos, +=, daux, ;, }, else, {]
[coeff, *, xj, ;, if, (, daux, >, 0., ), {, pos, +=, daux, ;, }, else, {, neg, +=]
[if, (, daux, >, 0., ), {, pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }]
[if, (, daux, >, 0., ), {, pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }]
[daux, >, 0., ), {, pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }, y, []
[), {, pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }, y, [, i, ], =]
[), {, pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }, y, [, i, ], =]
[pos, +=, daux, ;, }, else, {, neg, +=, daux, ;, }, }, y, [, i, ], =, pos, +]
[}, else, {, neg, +=, daux, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return]
[neg, +=, daux, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return, new, ArrayRealVector, (]
[daux, ;, }, }, y, [, i, ], =, pos, +, neg, ;, }, return, new, ArrayRealVector, (, y, ,]
