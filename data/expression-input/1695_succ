[;, private, static, final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,]
[;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,]
[;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b]
[,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16]
[,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17]
[,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17]
[,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18]
[,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19]
[,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19]
[,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20]
[,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21]
[,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21]
[,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22]
[,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private]
[,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private]
[,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (]
[,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }]
[,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }]
[,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static]
[,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (]
[,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (]
[,, -, .234065664793997056856992426667E-21, ,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (, double, x]
[,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (, double, x, ,, double, a]
[,, .171348014966398575409015466667E-22, }, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (, double, x, ,, double, a]
[}, ;, private, Beta, (, ), {, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double]
[;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double, epsilon, ), {]
[,, a, ,, b, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x]
[,, b, ,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double]
[,, DEFAULT_EPSILON, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b]
[), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double, epsilon, )]
[., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double]
[;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int, maxIterations, ), {]
[,, a, ,, b, ,, epsilon, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x]
[,, b, ,, epsilon, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double]
[,, epsilon, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b]
[), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int, maxIterations, )]
[., MAX_VALUE, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int]
[;, }, public, static, double, regularizedBeta, (, double, x, ,, final, double, a, ,, final, double, b, ,, double, epsilon]
[,, a, ,, b, ,, DEFAULT_EPSILON, ,, maxIterations, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, final]
[,, b, ,, DEFAULT_EPSILON, ,, maxIterations, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, final, double, a]
[,, DEFAULT_EPSILON, ,, maxIterations, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, final, double, a, ,, final]
[,, maxIterations, ), ;, }, public, static, double, regularizedBeta, (, double, x, ,, final, double, a, ,, final, double, b]
[), ;, }, public, static, double, regularizedBeta, (, double, x, ,, final, double, a, ,, final, double, b, ,, double]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /]
[||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a]
[||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (]
[||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;]
[||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =]
[||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||]
[||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||]
[), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||]
[||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||]
[., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1]
[), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0]
[||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =]
[., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=]
[), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret]
[||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;]
[<, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, .]
[||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;]
[||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (]
[>, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else]
[||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (]
[||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a]
[<=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >]
[||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /]
[<=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /]
[=, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +]
[;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, )]
[., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +, b, +]
[), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, )]
[>, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -]
[), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, )]
[/, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,]
[), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x]
[+, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0]
[), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x]
[), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, )]
[), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations]
[+, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon]
[+, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a]
[+, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon]
[), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations]
[=, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else]
[;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getB, (, int, n]
[-, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction]
[;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getB, (, int, n]
[,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, )]
[-, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction]
[,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, )]
[,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @]
[,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @, Override, protected]
[,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getB]
[), ;, }, else, {, ContinuedFraction, fraction, =, new, ContinuedFraction, (, ), {, @, Override, protected, double, getB, (, int]
[;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b]
[), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x]
[==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, )]
[%, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -]
[==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, )]
[), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x]
[=, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (]
[;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (]
[/, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a]
[;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (]
[=, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *]
[;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a]
[/, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *]
[), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2]
[*, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +]
[*, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -]
[*, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a]
[-, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a]
[), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2]
[;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a]
[), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (]
[*, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -]
[), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n]
[-, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =]
[+, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), )]
[-, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =]
[), -, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m]
[*, m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else]
[), -, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m]
[), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n]
[), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (]
[), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (]
[+, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /]
[), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (]
[), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -]
[*, m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret]
[), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -]
[=, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (]
[;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x]
[/, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m, )]
[), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m]
[-, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b]
[), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m]
[;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x]
[=, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /]
[;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return]
[/, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, )]
[/, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, )]
[), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m]
[*, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2]
[*, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m]
[), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *]
[+, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (]
[), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *]
[*, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (]
[+, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a]
[+, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *]
[+, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (]
[), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m]
[;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {]
[*, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }, @]
[), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }]
[+, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), )]
[), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }]
[), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;]
[*, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return]
[), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;]
[), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {]
[), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, )]
[+, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double]
[+, (, 2, *, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double]
[+, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double]
[), +, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,]
[*, m, ), +, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int]
[), +, 1.0, ), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,]
[), ), ;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, )]
[;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }]
[;, }, }, ;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), )]
[=, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath]
[;, }, return, ret, ;, }, @, Deprecated, public, static, double, logBeta, (, double, a, ,, double, b, ,, double]
[/, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }, @, Deprecated, public]
[*, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }, @]
[., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log]
[), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }]
[-, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations]
[-, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, .]
[+, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, )]
[), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a]
[*, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, )]
[), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a]
[., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -]
[), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (]
[-, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, .]
[), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction]
[*, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (]
[), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction]
[., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,]
[), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /]
[-, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *]
[), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /]
[-, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations]
[., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (]
[), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,]
[), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }]
[,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return]
[), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;]
[/, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }, @, Deprecated, public]
[;, }, return, ret, ;, }, @, Deprecated, public, static, double, logBeta, (, double, a, ,, double, b, ,, double]
[., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }, @, Deprecated, public, static, double]
[,, epsilon, ,, maxIterations, ), ;, }, return, ret, ;, }, @, Deprecated, public, static, double, logBeta, (, double, a]
[,, maxIterations, ), ;, }, return, ret, ;, }, @, Deprecated, public, static, double, logBeta, (, double, a, ,, double]
[), ;, }, return, ret, ;, }, @, Deprecated, public, static, double, logBeta, (, double, a, ,, double, b, ,]
[;, }, @, Deprecated, public, static, double, logBeta, (, double, a, ,, double, b, ,, double, epsilon, ,, int, maxIterations]
[;, }, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (]
[,, b, ), ;, }, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException]
[), ;, }, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if]
[), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0]
[||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }]
[), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;]
[<, 1.0, ), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0]
[), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;]
[), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0]
[), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <]
[>, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (]
[), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <]
[;, }, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException]
[,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, )]
[,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {]
[), ;, }, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new]
[), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a]
[||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }]
[), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;]
[<, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0]
[), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;]
[), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a]
[), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (]
[>, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x]
[), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (]
[;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (]
[,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -]
[,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, )]
[), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if]
[;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else]
[+, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0]
[), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (]
[-, 1.0, ), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, .]
[), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (]
[;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else]
[), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }]
[-, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, )]
[), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }]
[), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, )]
[<=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=]
[), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, )]
[;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, .]
[., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, .]
[), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath]
[+, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, )]
[), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath]
[), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {]
[<=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }]
[), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {]
[;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *]
[+, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, )]
[., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p]
[), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0]
[;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *]
[., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath]
[), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x]
[;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if]
[+, FastMath, ., log, (, x, *, (, 1.0, +, x, ), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum]
[., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *, (, 1.0, +, x, ), )]
[), +, FastMath, ., log, (, x, *, (, 1.0, +, x, ), ), ;, }, }, private, static, double]
[-, 1.0, ), +, FastMath, ., log, (, x, *, (, 1.0, +, x, ), ), ;, }, }, private]
[), +, FastMath, ., log, (, x, *, (, 1.0, +, x, ), ), ;, }, }, private, static, double]
[;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if]
[., log, (, x, *, (, 1.0, +, x, ), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final]
[), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {]
[*, (, 1.0, +, x, ), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final]
[), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {]
[), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException]
[+, x, ), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, )]
[), ), ;, }, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException]
[), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, )]
[<, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <]
[), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, )]
[;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;]
[,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,]
[,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,]
[), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, )]
[), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;]
[), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double]
[;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =, b]
[,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b]
[,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {]
[), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =]
[), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, )]
[<=, b, ), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,]
[), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, )]
[=, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else]
[;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -]
[+, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d]
[;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -]
[), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b]
[-, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +]
[), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b]
[=, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -, 0.5, )]
[;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,]
[,, b, ), ;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum]
[), ;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b]
[=, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final]
[;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p]
[+, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u]
[;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p]
[), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, .]
[-, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *]
[), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, .]
[=, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (, a]
[;, }, final, double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v]
[,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;]
[), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double]
[;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u]
[*, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (, FastMath, ., log]
[;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u]
[., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b]
[), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return]
[/, b, ), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, )]
[), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return]
[;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, ), -]
[*, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -]
[;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, ), -]
[), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, )]
[-, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -]
[., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -]
[), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w]
[), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, )]
[;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[?, (, w, -, u, ), -, v, :, (, w, -, v, ), -, u, ;, }, private, static]
[<=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, ), -, u, ;, }]
[?, (, w, -, u, ), -, v, :, (, w, -, v, ), -, u, ;, }, private, static]
[:, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final]
[-, v, :, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a]
[), -, v, :, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double]
[-, u, ), -, v, :, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (]
[), -, v, :, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double]
[:, (, w, -, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final]
[;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[-, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,]
[), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException]
[-, v, ), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, )]
[), -, u, ;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException]
[;, }, private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10, )]
[||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }]
[), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;]
[<, 0, ), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b]
[), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;]
[), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10, )]
[), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10]
[>, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b]
[), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10]
[;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;]
[,, 0, ,, b, ), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,]
[,, b, ), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,]
[), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, )]
[), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =, a, /]
[<, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =]
[), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =, a, /]
[;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (, 1.0, +, h]
[,, 10, ,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h]
[,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (]
[), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (, 1.0, +]
[;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (]
[/, b, ;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0]
[;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (]
[;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =, q, *, q]
[/, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final]
[;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =, q, *, q]
[), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =, q, *]
[+, h, ), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =]
[), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =, q, *]
[;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA, .]
[/, (, 1.0, +, h, ), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s]
[;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA, .]
[), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA]
[+, h, ), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double]
[), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA]
[;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;, s, [, 0, ], =]
[*, q, ;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;, s, [, 0]
[;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;, s, [, 0, ], =]
[;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length]
[], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, .]
[., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <]
[=, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {]
[[, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i]
[], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, )]
[;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {, s, []
[;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q]
[;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i]
[<, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2]
[;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i]
[., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s]
[), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i, -, 1, ]]
[++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i, -, 1]
[=, 1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT]
[[, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }]
[], =, 1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double]
[;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w]
[+, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0]
[;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w]
[), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double]
[+, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;]
[), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double]
[*, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double]
[), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double]
[[, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =]
[], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;]
[-, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *]
[], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;]
[;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ]]
[/, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -]
[;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ]]
[;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, [, s, ., length, -, 1]
[*, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, [, s, ., length]
[;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, [, s, ., length, -, 1]
[;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[*, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2]
[[, DELTA, ., length, -, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int]
[], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -]
[-, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, .]
[., length, -, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =]
[], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -]
[;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[[, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i]
[], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[-, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i]
[., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0]
[], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *]
[-, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i]
[., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA]
[;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *]
[;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ]]
[>=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, []
[;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ]]
[), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return]
[--, ), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }]
[=, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *, p]
[;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final]
[+, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *, p, /, b, ;, }]
[*, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *, p, /, b]
[+, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *, p, /, b, ;, }]
[;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final]
[*, s, [, i, ], ;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (]
[[, i, ], *, s, [, i, ], ;, }, return, w, *, p, /, b, ;, }, private, static]
[], *, s, [, i, ], ;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum]
[;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final]
[[, i, ], ;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double]
[], ;, }, return, w, *, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,]
[;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (, p, <]
[/, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (]
[*, p, /, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {]
[/, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (]
[;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (, p, <]
[), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, )]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <]
[), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, )]
[;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;]
[,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,]
[,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,]
[), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, )]
[), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =, FastMath, .]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =]
[), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =, FastMath, .]
[;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath]
[,, 10.0, ,, true, ), ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;]
[,, true, ), ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double]
[), ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =]
[;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /]
[., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, )]
[,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT]
[), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0]
[;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =]
[., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =]
[,, q, ), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;]
[), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z]
[;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ]]
[/, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -]
[;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ]]
[;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, .]
[*, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =]
[;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, .]
[;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[[, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i]
[], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[-, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i]
[., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0]
[], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, )]
[;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;]
[-, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i]
[., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA]
[;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;]
[;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /]
[>=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return]
[;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /]
[), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum]
[--, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +]
[=, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,]
[;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta, (]
[+, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }]
[*, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, )]
[+, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }]
[;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta, (]
[[, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static]
[], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta]
[;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double, .]
[+, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double]
[/, a, +, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,]
[+, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double]
[;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double, .]
[,, b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if]
[), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double]
[), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, )]
[||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, .]
[||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }]
[||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), )]
[., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (]
[), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, )]
[||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }]
[., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return]
[), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;]
[||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, .]
[), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath]
[<=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a]
[), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath]
[), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, )]
[), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q]
[<=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p]
[), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q]
[;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath]
[., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b]
[;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (, a, >=, 10.0, )]
[., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, )]
[,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (, a]
[), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (, a, >=, 10.0]
[;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final]
[., max, (, p, ,, q, ), ;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum]
[,, q, ), ;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b]
[), ;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;]
[), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a, /, b]
[>=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a]
[), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a, /, b]
[;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (, 1.0, +, h, )]
[,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (, 1.0]
[), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (, 1.0, +, h]
[;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a]
[/, b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -]
[;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a]
[;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final]
[/, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, .]
[;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final]
[), ;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;]
[+, h, ), ;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c]
[), ;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;]
[;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, )]
[*, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, )]
[*, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, )]
[), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h]
[-, 0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p]
[), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h]
[;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, )]
[., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if]
[), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v]
[;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b]
[*, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (, -]
[;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b]
[., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *]
[), ;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (]
[), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w]
[<=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, )]
[), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w]
[;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, )]
[-, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +]
[), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, )]
[-, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (]
[), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log]
[+, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath]
[), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *]
[+, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -]
[*, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }]
[*, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }]
[+, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -]
[., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (]
[), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *]
[), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log]
[), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, )]
[;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, )]
[;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int]
[-, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {]
[), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, )]
[-, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >]
[), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b]
[+, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if]
[), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {]
[+, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0]
[*, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }]
[*, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }]
[+, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0]
[., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >]
[), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {]
[), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b]
[), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, )]
[;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int]
[), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (]
[>, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, .]
[), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (]
[), {, final, int, n, =, (, int, ), FastMath, ., floor, (, a, -, 1.0, ), ;, double, prod]
[>, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (, a, -, 1.0, ), ;]
[), {, final, int, n, =, (, int, ), FastMath, ., floor, (, a, -, 1.0, ), ;, double, prod]
[;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <]
[;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <]
[., floor, (, a, -, 1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (]
[), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i]
[-, 1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0]
[), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i]
[;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;]
[;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +]
[;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, )]
[<, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /]
[;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, )]
[), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return]
[++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }]
[-=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, .]
[;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (]
[*=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, )]
[;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), )]
[/, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n]
[;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), )]
[), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, )]
[+, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, .]
[), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, )]
[/, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (]
[), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, )]
[;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0, )]
[+, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {]
[), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else]
[-, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum]
[., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma]
[), -, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +]
[), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else]
[*, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared]
[), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else]
[., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b]
[), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }]
[;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0, )]
[), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0]
[+, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =]
[., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {, double, prod1, =]
[), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared]
[), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0]
[,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (]
[), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >]
[;, double, ared, =, a, ;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h]
[;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;]
[), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0]
[>, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /]
[), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0]
[-=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +, h, )]
[;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }]
[;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, ), {, double]
[/, b, ;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, )]
[;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, ), {, double]
[*=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =]
[;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while]
[/, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;]
[;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while]
[), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;]
[+, h, ), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =]
[), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;]
[), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred]
[<, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, )]
[), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred]
[;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred]
[;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred]
[), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, .]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return]
[), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, .]
[-=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1]
[;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +]
[*=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, .]
[;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, .]
[/, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (]
[;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, .]
[), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma]
[+, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +]
[), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma]
[;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum]
[+, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared]
[+, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma]
[., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, )]
[), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, .]
[+, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared]
[., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred]
[), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (]
[;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum]
[), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +]
[+, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else]
[., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, )]
[), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }]
[), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +]
[), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, )]
[-, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, )]
[., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath]
[), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1]
[), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, )]
[,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma]
[), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared]
[;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {, if]
[+, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if]
[+, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if]
[., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;]
[), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else]
[+, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if]
[., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a]
[), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {]
[;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {, if]
[,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0]
[), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {]
[), {, if, (, b, >, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0]
[>=, 1.0, ), {, if, (, b, >, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod]
[), {, if, (, b, >, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0]
[), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while]
[>, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b]
[), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while]
[), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred]
[<, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, )]
[), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred]
[;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred]
[;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred]
[), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, .]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return]
[), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, .]
[-=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod]
[;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +]
[*=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma]
[;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma]
[/, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma]
[;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma]
[), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (]
[+, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, )]
[), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (]
[;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }]
[+, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a]
[., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred]
[), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (]
[;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }]
[), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;]
[+, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else]
[., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, )]
[), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }]
[), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;]
[), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, )]
[-, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, )]
[., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return, Gamma]
[), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a]
[), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, )]
[,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a]
[), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b]
[;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -]
[+, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +]
[., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, .]
[), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, )]
[;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -]
[,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (]
[), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, )]
[;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +]
[-, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return]
[+, Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if]
[., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;]
[), +, Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {]
[-, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return]
[., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b]
[), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {]
[;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +]
[,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (]
[), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, )]
[), {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {]
[>=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }]
[), {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {]
[;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (]
[+, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (]
[., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log]
[), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma]
[;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (]
[,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma]
[), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma]
[;, }, }, }, }]
[., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma]
[), ;, }, }, }, }]
[/, Gamma, ., gamma, (, a, +, b, ), ), ;, }, }, }, }]
[*, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b, ), ), ;, }, }]
[., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b]
[), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b, ), ), ;, }]
[/, Gamma, ., gamma, (, a, +, b, ), ), ;, }, }, }, }]
[., gamma, (, b, ), /, Gamma, ., gamma, (, a, +, b, ), ), ;, }, }, }, }]
[), /, Gamma, ., gamma, (, a, +, b, ), ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., gamma, (, a, +, b, ), ), ;, }, }, }, }]
[), ), ;, }, }, }, }]
[+, b, ), ), ;, }, }, }, }]
[), ), ;, }, }, }, }]
