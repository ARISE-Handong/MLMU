[List, ;, public, class, IR, {, private, IR, (, ), {, }, public, static, Node, empty, (, ), {, return]
[class, IR, {, private, IR, (, ), {, }, public, static, Node, empty, (, ), {, return, new, Node, (]
[class, IR, {, private, IR, (, ), {, }, public, static, Node, empty, (, ), {, return, new, Node, (]
[., EMPTY, ), ;, }, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {]
[., EMPTY, ), ;, }, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {]
[}, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {, Preconditions, ., checkState, (]
[}, public, static, Node, function, (, Node, name, ,, Node, params, ,, Node, body, ), {, Preconditions, ., checkState, (]
[name, ,, Node, params, ,, Node, body, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;]
[name, ,, Node, params, ,, Node, body, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;]
[,, Node, body, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, body, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, name, ., isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;]
[checkState, (, name, ., isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;]
[isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (]
[isName, (, ), ), ;, Preconditions, ., checkState, (, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (]
[(, params, ., isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return]
[isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[isParamList, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,]
[(, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FUNCTION, ,, name, ,, params, ,]
[Token, ., FUNCTION, ,, name, ,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return]
[,, name, ,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (]
[,, name, ,, params, ,, body, ), ;, }, public, static, Node, paramList, (, ), {, return, new, Node, (]
[{, return, new, Node, (, Token, ., PARAM_LIST, ), ;, }, public, static, Node, paramList, (, Node, param, ), {]
[{, return, new, Node, (, Token, ., PARAM_LIST, ), ;, }, public, static, Node, paramList, (, Node, param, ), {]
[(, Token, ., PARAM_LIST, ), ;, }, public, static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (]
[(, Token, ., PARAM_LIST, ), ;, }, public, static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (]
[static, Node, paramList, (, Node, param, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, return]
[(, Node, param, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, return, new, Node, (]
[(, Node, param, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, return, new, Node, (]
[{, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, return, new, Node, (, Token, ., PARAM_LIST, ,]
[., PARAM_LIST, ,, param, ), ;, }, public, static, Node, paramList, (, Node, ..., params, ), {, Node, paramList, =]
[Node, paramList, (, Node, ..., params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :]
[Node, ..., params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {]
[Node, ..., params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {]
[{, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (]
[{, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (]
[Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return]
[}, return, paramList, ;, }, public, static, Node, paramList, (, List, <, Node, >, params, ), {, Node, paramList, =]
[(, List, <, Node, >, params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :]
[Node, >, params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {]
[Node, >, params, ), {, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {]
[{, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (]
[{, Node, paramList, =, paramList, (, ), ;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[;, for, (, Node, param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[param, :, params, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (]
[Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, paramList, ., addChildToBack, (, param, ), ;, }, return]
[addChildToBack, (, param, ), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block, =]
[), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block, =, new, Node, (]
[), ;, }, return, paramList, ;, }, public, static, Node, block, (, ), {, Node, block, =, new, Node, (]
[}, public, static, Node, block, (, ), {, Node, block, =, new, Node, (, Token, ., BLOCK, ), ;, return]
[Node, (, Token, ., BLOCK, ), ;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {]
[Node, (, Token, ., BLOCK, ), ;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {]
[BLOCK, ), ;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (]
[;, return, block, ;, }, public, static, Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (]
[Node, block, (, Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =]
[Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (]
[Node, stmt, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., BLOCK, ,]
[mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., BLOCK, ,, stmt, ), ;, return]
[stmt, ), ;, return, block, ;, }, public, static, Node, block, (, Node, ..., stmts, ), {, Node, block, =]
[Node, block, (, Node, ..., stmts, ), {, Node, block, =, block, (, ), ;, for, (, Node, stmt, :]
[Node, ..., stmts, ), {, Node, block, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[Node, ..., stmts, ), {, Node, block, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[{, Node, block, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (]
[block, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;]
[Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, block, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return]
[}, return, block, ;, }, public, static, Node, block, (, List, <, Node, >, stmts, ), {, Node, paramList, =]
[(, List, <, Node, >, stmts, ), {, Node, paramList, =, block, (, ), ;, for, (, Node, stmt, :]
[Node, >, stmts, ), {, Node, paramList, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[Node, >, stmts, ), {, Node, paramList, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[{, Node, paramList, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (]
[paramList, =, block, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;]
[Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, paramList, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return]
[addChildToBack, (, stmt, ), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return]
[), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (]
[), ;, }, return, paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (]
[paramList, ;, }, private, static, Node, blockUnchecked, (, Node, stmt, ), {, return, new, Node, (, Token, ., BLOCK, ,]
[Node, (, Token, ., BLOCK, ,, stmt, ), ;, }, public, static, Node, script, (, ), {, Node, block, =]
[., BLOCK, ,, stmt, ), ;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (]
[., BLOCK, ,, stmt, ), ;, }, public, static, Node, script, (, ), {, Node, block, =, new, Node, (]
[}, public, static, Node, script, (, ), {, Node, block, =, new, Node, (, Token, ., SCRIPT, ), ;, return]
[SCRIPT, ), ;, return, block, ;, }, public, static, Node, script, (, Node, ..., stmts, ), {, Node, block, =]
[Node, script, (, Node, ..., stmts, ), {, Node, block, =, script, (, ), ;, for, (, Node, stmt, :]
[Node, ..., stmts, ), {, Node, block, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[Node, ..., stmts, ), {, Node, block, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[{, Node, block, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (]
[block, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;]
[Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, block, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, block, ., addChildToBack, (, stmt, ), ;, }, return]
[}, return, block, ;, }, public, static, Node, script, (, List, <, Node, >, stmts, ), {, Node, paramList, =]
[(, List, <, Node, >, stmts, ), {, Node, paramList, =, script, (, ), ;, for, (, Node, stmt, :]
[Node, >, stmts, ), {, Node, paramList, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[Node, >, stmts, ), {, Node, paramList, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {]
[{, Node, paramList, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (]
[paramList, =, script, (, ), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;]
[), ;, for, (, Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;]
[Node, stmt, :, stmts, ), {, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, paramList, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeStatementNoReturn, (, stmt, ), ), ;, paramList, ., addChildToBack, (, stmt, ), ;, }, return]
[stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {]
[stmt, ), ;, }, return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {]
[return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (]
[return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (]
[return, paramList, ;, }, public, static, Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (]
[Node, var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), &&]
[var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), &&, !]
[var, (, Node, name, ,, Node, value, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), &&, !]
[), {, Preconditions, ., checkState, (, name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;]
[), {, Preconditions, ., checkState, (, name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;]
[checkState, (, name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (]
[name, ., isName, (, ), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;]
[), &&, !, name, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;]
[., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return]
[Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, name, ., addChildToFront, (, value, ), ;, return, var, (]
[(, value, ), ;, return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {]
[(, value, ), ;, return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {]
[return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, ., checkState, (]
[return, var, (, name, ), ;, }, public, static, Node, var, (, Node, name, ), {, Preconditions, ., checkState, (]
[static, Node, var, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, return]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, return, new, Node, (]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, return, new, Node, (]
[{, Preconditions, ., checkState, (, name, ., isName, (, ), ), ;, return, new, Node, (, Token, ., VAR, ,]
[return, new, Node, (, Token, ., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, ), {, return]
[(, Token, ., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (]
[(, Token, ., VAR, ,, name, ), ;, }, public, static, Node, returnNode, (, ), {, return, new, Node, (]
[{, return, new, Node, (, Token, ., RETURN, ), ;, }, public, static, Node, returnNode, (, Node, expr, ), {]
[{, return, new, Node, (, Token, ., RETURN, ), ;, }, public, static, Node, returnNode, (, Node, expr, ), {]
[(, Token, ., RETURN, ), ;, }, public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (]
[., RETURN, ), ;, }, public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[public, static, Node, returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[returnNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., RETURN, ,]
[new, Node, (, Token, ., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {]
[new, Node, (, Token, ., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {]
[., RETURN, ,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (]
[,, expr, ), ;, }, public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[public, static, Node, throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[throwNode, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., THROW, ,]
[new, Node, (, Token, ., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {]
[new, Node, (, Token, ., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {]
[., THROW, ,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (]
[,, expr, ), ;, }, public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[public, static, Node, exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[exprResult, (, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., EXPR_RESULT, ,]
[Token, ., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {]
[Token, ., EXPR_RESULT, ,, expr, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {]
[expr, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[Node, ifNode, (, Node, cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[cond, ,, Node, then, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return]
[(, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (]
[(, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,]
[., checkState, (, then, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,]
[,, then, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {]
[,, then, ), ;, }, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {]
[}, public, static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (]
[static, Node, ifNode, (, Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[Node, cond, ,, Node, then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[then, ,, Node, elseNode, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;]
[., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;]
[(, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[(, cond, ), ), ;, Preconditions, ., checkState, (, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[(, then, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return]
[isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (]
[isBlock, (, ), ), ;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,]
[., checkState, (, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,]
[(, elseNode, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., IF, ,, cond, ,, then, ,]
[cond, ,, then, ,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {]
[cond, ,, then, ,, elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {]
[elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (]
[elseNode, ), ;, }, public, static, Node, doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (]
[doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[doNode, (, Node, body, ,, Node, cond, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[,, Node, cond, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[cond, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[checkState, (, body, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (, Token, ., DO, ,]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, return, new, Node, (, Token, ., DO, ,, body, ,]
[,, cond, ), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {]
[,, cond, ), ;, }, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {]
[}, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState, (]
[}, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState, (]
[}, public, static, Node, forIn, (, Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState, (]
[Node, target, ,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState, (, target, ., isVar, (, ), ||]
[,, Node, cond, ,, Node, body, ), {, Preconditions, ., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (]
[Node, body, ), {, Preconditions, ., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;]
[Node, body, ), {, Preconditions, ., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;]
[Preconditions, ., checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, target, ., isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[isVar, (, ), ||, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return]
[(, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[(, cond, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, target, ,]
[(, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, target, ,, cond, ,]
[;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {]
[;, }, public, static, Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {]
[Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[Node, forNode, (, Node, init, ,, Node, cond, ,, Node, incr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[Node, cond, ,, Node, incr, ,, Node, body, ), {, Preconditions, ., checkState, (, init, ., isVar, (, ), ||]
[,, Node, incr, ,, Node, body, ), {, Preconditions, ., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (]
[Node, body, ), {, Preconditions, ., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;]
[Node, body, ), {, Preconditions, ., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;]
[Preconditions, ., checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, init, ., isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (]
[isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;]
[isVar, (, ), ||, mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;]
[mayBeExpressionOrEmpty, (, init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (]
[init, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (]
[Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;]
[Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;]
[mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (]
[mayBeExpressionOrEmpty, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, mayBeExpressionOrEmpty, (, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return]
[(, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[(, incr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, init, ,]
[(, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, init, ,, cond, ,]
[., isBlock, (, ), ), ;, return, new, Node, (, Token, ., FOR, ,, init, ,, cond, ,, incr, ,]
[,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {]
[,, incr, ,, body, ), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {]
[), ;, }, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {, Preconditions, ., checkState, (]
[}, public, static, Node, switchNode, (, Node, cond, ,, Node, ..., cases, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[cond, ,, Node, ..., cases, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Node, switchNode, =]
[..., cases, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Node, switchNode, =, new, Node, (]
[..., cases, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Node, switchNode, =, new, Node, (]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,]
[), ;, Node, switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :]
[switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {]
[switchNode, =, new, Node, (, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {]
[(, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (]
[(, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (]
[(, Token, ., SWITCH, ,, cond, ), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (]
[), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||]
[), ;, for, (, Node, caseNode, :, cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||]
[cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;]
[cases, ), {, Preconditions, ., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;]
[., checkState, (, caseNode, ., isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (]
[isCase, (, ), ||, caseNode, ., isDefaultCase, (, ), ), ;, switchNode, ., addChildToBack, (, caseNode, ), ;, }, return]
[caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {]
[caseNode, ), ;, }, return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {]
[return, switchNode, ;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;]
[Node, caseNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;]
[expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, Preconditions, ., checkState, (]
[expr, ,, Node, body, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, Preconditions, ., checkState, (]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[., checkState, (, mayBeExpression, (, expr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[(, expr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (]
[(, expr, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,]
[(, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return]
[isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (]
[isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (]
[;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE, ,]
[., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., CASE, ,, expr, ,]
[(, Token, ., CASE, ,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {]
[(, Token, ., CASE, ,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {]
[,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (]
[,, expr, ,, body, ), ;, }, public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (]
[public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[public, static, Node, defaultCase, (, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;]
[(, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (]
[(, Node, body, ), {, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (]
[{, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,]
[(, body, ., isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return]
[isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (]
[isBlock, (, ), ), ;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (]
[;, body, ., putBooleanProp, (, Node, ., SYNTHETIC_BLOCK_PROP, ,, true, ), ;, return, new, Node, (, Token, ., DEFAULT_CASE, ,]
[Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {]
[Token, ., DEFAULT_CASE, ,, body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {]
[body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (]
[body, ), ;, }, public, static, Node, label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (]
[label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;]
[label, (, Node, name, ,, Node, stmt, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;]
[,, Node, stmt, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, Preconditions, ., checkState, (]
[stmt, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (]
[name, ., isLabelName, (, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =]
[(, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (]
[(, ), ), ;, Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (]
[Preconditions, ., checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,]
[checkState, (, mayBeStatement, (, stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name, ,]
[stmt, ), ), ;, Node, block, =, new, Node, (, Token, ., LABEL, ,, name, ,, stmt, ), ;, return]
[LABEL, ,, name, ,, stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {]
[LABEL, ,, name, ,, stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {]
[stmt, ), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (]
[), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !]
[), ;, return, block, ;, }, public, static, Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !]
[Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !, name, ., isEmpty, (, ), ), ;, return]
[Node, labelName, (, String, name, ), {, Preconditions, ., checkState, (, !, name, ., isEmpty, (, ), ), ;, return]
[name, ), {, Preconditions, ., checkState, (, !, name, ., isEmpty, (, ), ), ;, return, Node, ., newString, (]
[name, ), {, Preconditions, ., checkState, (, !, name, ., isEmpty, (, ), ), ;, return, Node, ., newString, (]
[., checkState, (, !, name, ., isEmpty, (, ), ), ;, return, Node, ., newString, (, Token, ., LABEL_NAME, ,]
[Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {]
[Token, ., LABEL_NAME, ,, name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {]
[name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (]
[name, ), ;, }, public, static, Node, tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (]
[tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;]
[tryFinally, (, Node, tryBody, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;]
[,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, finallyBody, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =]
[Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (]
[finallyBody, ., isBlock, (, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return]
[(, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (]
[(, ), ), ;, Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (]
[Node, catchBody, =, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, ., TRY, ,]
[=, block, (, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,]
[(, ), ., copyInformationFrom, (, tryBody, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,, catchBody, ,]
[tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {]
[tryBody, ,, catchBody, ,, finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {]
[finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (]
[finallyBody, ), ;, }, public, static, Node, tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (]
[tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;]
[tryCatch, (, Node, tryBody, ,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;]
[,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, catchNode, ), {, Preconditions, ., checkState, (, tryBody, ., isBlock, (, ), ), ;, Preconditions, ., checkState, (]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =]
[., isBlock, (, ), ), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =]
[(, ), ), ;, Preconditions, ., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (]
[., checkState, (, catchNode, ., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (]
[., isCatch, (, ), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return]
[), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (]
[), ), ;, Node, catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (]
[catchBody, =, blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token, ., TRY, ,]
[blockUnchecked, (, catchNode, ), ., copyInformationFrom, (, catchNode, ), ;, return, new, Node, (, Token, ., TRY, ,, tryBody, ,]
[,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {]
[,, catchBody, ), ;, }, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {]
[}, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (]
[}, public, static, Node, tryCatchFinally, (, Node, tryBody, ,, Node, catchNode, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (]
[catchNode, ,, Node, finallyBody, ), {, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =]
[Node, finallyBody, ), {, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (]
[), {, Preconditions, ., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,]
[., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;]
[., checkState, (, finallyBody, ., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;]
[., isBlock, (, ), ), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;, tryNode, ., addChildToBack, (]
[), ;, Node, tryNode, =, tryCatch, (, tryBody, ,, catchNode, ), ;, tryNode, ., addChildToBack, (, finallyBody, ), ;, return]
[(, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {]
[(, finallyBody, ), ;, return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {]
[return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[return, tryNode, ;, }, public, static, Node, catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (]
[catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, expr, ., isName, (, ), ), ;]
[catchNode, (, Node, expr, ,, Node, body, ), {, Preconditions, ., checkState, (, expr, ., isName, (, ), ), ;]
[,, Node, body, ), {, Preconditions, ., checkState, (, expr, ., isName, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, body, ), {, Preconditions, ., checkState, (, expr, ., isName, (, ), ), ;, Preconditions, ., checkState, (]
[(, expr, ., isName, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return]
[isName, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[isName, (, ), ), ;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH, ,]
[., checkState, (, body, ., isBlock, (, ), ), ;, return, new, Node, (, Token, ., CATCH, ,, expr, ,]
[Node, (, Token, ., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return]
[., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (]
[., CATCH, ,, expr, ,, body, ), ;, }, public, static, Node, breakNode, (, ), {, return, new, Node, (]
[{, return, new, Node, (, Token, ., BREAK, ), ;, }, public, static, Node, breakNode, (, Node, name, ), {]
[{, return, new, Node, (, Token, ., BREAK, ), ;, }, public, static, Node, breakNode, (, Node, name, ), {]
[(, Token, ., BREAK, ), ;, }, public, static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (]
[(, Token, ., BREAK, ), ;, }, public, static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (]
[static, Node, breakNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (]
[{, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., BREAK, ,]
[return, new, Node, (, Token, ., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, ), {, return]
[(, Token, ., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (]
[(, Token, ., BREAK, ,, name, ), ;, }, public, static, Node, continueNode, (, ), {, return, new, Node, (]
[{, return, new, Node, (, Token, ., CONTINUE, ), ;, }, public, static, Node, continueNode, (, Node, name, ), {]
[{, return, new, Node, (, Token, ., CONTINUE, ), ;, }, public, static, Node, continueNode, (, Node, name, ), {]
[(, Token, ., CONTINUE, ), ;, }, public, static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (]
[(, Token, ., CONTINUE, ), ;, }, public, static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (]
[static, Node, continueNode, (, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (]
[(, Node, name, ), {, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (]
[{, Preconditions, ., checkState, (, name, ., isLabelName, (, ), ), ;, return, new, Node, (, Token, ., CONTINUE, ,]
[name, ), ;, }, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =]
[}, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =, new, Node, (]
[}, public, static, Node, call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =, new, Node, (]
[call, (, Node, target, ,, Node, ..., args, ), {, Node, call, =, new, Node, (, Token, ., CALL, ,]
[), {, Node, call, =, new, Node, (, Token, ., CALL, ,, target, ), ;, for, (, Node, arg, :]
[call, =, new, Node, (, Token, ., CALL, ,, target, ), ;, for, (, Node, arg, :, args, ), {]
[call, =, new, Node, (, Token, ., CALL, ,, target, ), ;, for, (, Node, arg, :, args, ), {]
[(, Token, ., CALL, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (]
[., CALL, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, call, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, call, ., addChildToBack, (, arg, ), ;, }, return]
[return, call, ;, }, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {, Node, newcall, =]
[}, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {, Node, newcall, =, new, Node, (]
[}, public, static, Node, newNode, (, Node, target, ,, Node, ..., args, ), {, Node, newcall, =, new, Node, (]
[newNode, (, Node, target, ,, Node, ..., args, ), {, Node, newcall, =, new, Node, (, Token, ., NEW, ,]
[), {, Node, newcall, =, new, Node, (, Token, ., NEW, ,, target, ), ;, for, (, Node, arg, :]
[newcall, =, new, Node, (, Token, ., NEW, ,, target, ), ;, for, (, Node, arg, :, args, ), {]
[newcall, =, new, Node, (, Token, ., NEW, ,, target, ), ;, for, (, Node, arg, :, args, ), {]
[(, Token, ., NEW, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (]
[., NEW, ,, target, ), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[), ;, for, (, Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;]
[Node, arg, :, args, ), {, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, newcall, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeExpression, (, arg, ), ), ;, newcall, ., addChildToBack, (, arg, ), ;, }, return]
[addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return]
[addChildToBack, (, arg, ), ;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return]
[;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString, (]
[;, }, return, newcall, ;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString, (]
[;, }, public, static, Node, name, (, String, name, ), {, return, Node, ., newString, (, Token, ., NAME, ,]
[Token, ., NAME, ,, name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {]
[Token, ., NAME, ,, name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {]
[name, ), ;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;]
[Node, getprop, (, Node, target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;]
[target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (]
[target, ,, Node, prop, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (]
[checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return]
[(, target, ), ), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (]
[(, target, ), ), ;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP, ,]
[., checkState, (, prop, ., isString, (, ), ), ;, return, new, Node, (, Token, ., GETPROP, ,, target, ,]
[GETPROP, ,, target, ,, prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {]
[GETPROP, ,, target, ,, prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {]
[prop, ), ;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;]
[Node, getelem, (, Node, target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;]
[target, ,, Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (]
[Node, elem, ), {, Preconditions, ., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[., checkState, (, mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return]
[mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (]
[mayBeExpression, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM, ,]
[Preconditions, ., checkState, (, mayBeExpression, (, elem, ), ), ;, return, new, Node, (, Token, ., GETELEM, ,, target, ,]
[GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {]
[GETELEM, ,, target, ,, elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {]
[elem, ), ;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (]
[;, }, public, static, Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (]
[Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (, target, ), ), ;]
[Node, assign, (, Node, target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (, target, ), ), ;]
[target, ,, Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (]
[Node, expr, ), {, Preconditions, ., checkState, (, isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[., checkState, (, isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[isAssignmentTarget, (, target, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN, ,]
[Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, Token, ., ASSIGN, ,, target, ,]
[,, expr, ), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {]
[,, expr, ), ;, }, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {]
[}, public, static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, ., checkState, (]
[static, Node, hook, (, Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[Node, cond, ,, Node, trueval, ,, Node, falseval, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;]
[trueval, ,, Node, falseval, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (]
[Node, falseval, ), {, Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;]
[Preconditions, ., checkState, (, mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;]
[mayBeExpression, (, cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (]
[cond, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[., checkState, (, mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return]
[mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (]
[mayBeExpression, (, trueval, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,]
[Preconditions, ., checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,, cond, ,]
[checkState, (, mayBeExpression, (, falseval, ), ), ;, return, new, Node, (, Token, ., HOOK, ,, cond, ,, trueval, ,]
[,, trueval, ,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, falseval, ), ;, }, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., COMMA, ,]
[static, Node, comma, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., COMMA, ,, expr1, ,]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr2, ), ;, }, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., AND, ,]
[static, Node, and, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., AND, ,, expr1, ,]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr2, ), ;, }, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., OR, ,]
[static, Node, or, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., OR, ,, expr1, ,]
[Token, ., OR, ,, expr1, ,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return]
[OR, ,, expr1, ,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (]
[OR, ,, expr1, ,, expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (]
[expr2, ), ;, }, public, static, Node, not, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NOT, ,]
[., NOT, ,, expr1, ), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr1, ), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr1, ), ;, }, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., EQ, ,]
[static, Node, eq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., EQ, ,, expr1, ,]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr2, ), ;, }, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SHEQ, ,]
[static, Node, sheq, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SHEQ, ,, expr1, ,]
[Token, ., SHEQ, ,, expr1, ,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return]
[SHEQ, ,, expr1, ,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (]
[SHEQ, ,, expr1, ,, expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (]
[expr2, ), ;, }, public, static, Node, voidNode, (, Node, expr1, ), {, return, unaryOp, (, Token, ., VOID, ,]
[unaryOp, (, Token, ., VOID, ,, expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return]
[Token, ., VOID, ,, expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (]
[Token, ., VOID, ,, expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (]
[expr1, ), ;, }, public, static, Node, neg, (, Node, expr1, ), {, return, unaryOp, (, Token, ., NEG, ,]
[unaryOp, (, Token, ., NEG, ,, expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return]
[Token, ., NEG, ,, expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (]
[Token, ., NEG, ,, expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (]
[expr1, ), ;, }, public, static, Node, pos, (, Node, expr1, ), {, return, unaryOp, (, Token, ., POS, ,]
[., POS, ,, expr1, ), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr1, ), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr1, ), ;, }, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., ADD, ,]
[static, Node, add, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., ADD, ,, expr1, ,]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return]
[,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[,, expr2, ), ;, }, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (]
[}, public, static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SUB, ,]
[static, Node, sub, (, Node, expr1, ,, Node, expr2, ), {, return, binaryOp, (, Token, ., SUB, ,, expr1, ,]
[,, expr1, ,, expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =]
[expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =, new, Node, (]
[expr2, ), ;, }, public, static, Node, objectlit, (, Node, ..., propdefs, ), {, Node, objectlit, =, new, Node, (]
[..., propdefs, ), {, Node, objectlit, =, new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :]
[{, Node, objectlit, =, new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {]
[{, Node, objectlit, =, new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {]
[new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (]
[new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (]
[new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (]
[new, Node, (, Token, ., OBJECTLIT, ), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (]
[), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||]
[), ;, for, (, Node, propdef, :, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||]
[:, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||]
[:, propdefs, ), {, Preconditions, ., checkState, (, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||]
[(, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;]
[(, propdef, ., isStringKey, (, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;]
[(, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (]
[(, ), ||, propdef, ., isGetterDef, (, ), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (]
[), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;]
[), ||, propdef, ., isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;]
[isSetterDef, (, ), ), ;, Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (]
[Preconditions, ., checkState, (, propdef, ., hasOneChild, (, ), ), ;, objectlit, ., addChildToBack, (, propdef, ), ;, }, return]
[propdef, ), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {]
[propdef, ), ;, }, return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {]
[return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {, Preconditions, ., checkState, (]
[return, objectlit, ;, }, public, static, Node, propdef, (, Node, string, ,, Node, value, ), {, Preconditions, ., checkState, (]
[propdef, (, Node, string, ,, Node, value, ), {, Preconditions, ., checkState, (, string, ., isStringKey, (, ), ), ;]
[propdef, (, Node, string, ,, Node, value, ), {, Preconditions, ., checkState, (, string, ., isStringKey, (, ), ), ;]
[,, Node, value, ), {, Preconditions, ., checkState, (, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (]
[Node, value, ), {, Preconditions, ., checkState, (, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !]
[Node, value, ), {, Preconditions, ., checkState, (, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !]
[(, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;]
[(, string, ., isStringKey, (, ), ), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;]
[(, ), ), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (]
[), ;, Preconditions, ., checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;]
[checkState, (, !, string, ., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;]
[., hasChildren, (, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, value, ), ), ;, string, ., addChildToFront, (, value, ), ;, return]
[value, ), ;, return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =]
[return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =, new, Node, (]
[return, string, ;, }, public, static, Node, arraylit, (, Node, ..., exprs, ), {, Node, arraylit, =, new, Node, (]
[..., exprs, ), {, Node, arraylit, =, new, Node, (, Token, ., ARRAYLIT, ), ;, for, (, Node, expr, :]
[{, Node, arraylit, =, new, Node, (, Token, ., ARRAYLIT, ), ;, for, (, Node, expr, :, exprs, ), {]
[{, Node, arraylit, =, new, Node, (, Token, ., ARRAYLIT, ), ;, for, (, Node, expr, :, exprs, ), {]
[new, Node, (, Token, ., ARRAYLIT, ), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (]
[(, Token, ., ARRAYLIT, ), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (]
[), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;]
[), ;, for, (, Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;]
[Node, expr, :, exprs, ), {, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;, arraylit, ., addChildToBack, (]
[{, Preconditions, ., checkState, (, mayBeExpressionOrEmpty, (, expr, ), ), ;, arraylit, ., addChildToBack, (, expr, ), ;, }, return]
[., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {]
[., addChildToBack, (, expr, ), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {]
[), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (]
[), ;, }, return, arraylit, ;, }, public, static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (]
[static, Node, regexp, (, Node, expr, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, return]
[(, Node, expr, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, return, new, Node, (]
[(, Node, expr, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, return, new, Node, (]
[{, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,]
[Token, ., REGEXP, ,, expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {]
[Token, ., REGEXP, ,, expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {]
[expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (]
[expr, ), ;, }, public, static, Node, regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (]
[regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;]
[regexp, (, Node, expr, ,, Node, flags, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;]
[,, Node, flags, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, Preconditions, ., checkState, (]
[,, Node, flags, ), {, Preconditions, ., checkState, (, expr, ., isString, (, ), ), ;, Preconditions, ., checkState, (]
[(, expr, ., isString, (, ), ), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return]
[isString, (, ), ), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (]
[isString, (, ), ), ;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (]
[;, Preconditions, ., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,]
[., checkState, (, flags, ., isString, (, ), ), ;, return, new, Node, (, Token, ., REGEXP, ,, expr, ,]
[Token, ., REGEXP, ,, expr, ,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return]
[Token, ., REGEXP, ,, expr, ,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return]
[expr, ,, flags, ), ;, }, public, static, Node, string, (, String, s, ), {, return, Node, ., newString, (]
[{, return, Node, ., newString, (, s, ), ;, }, public, static, Node, stringKey, (, String, s, ), {, return]
[{, return, Node, ., newString, (, s, ), ;, }, public, static, Node, stringKey, (, String, s, ), {, return]
[newString, (, s, ), ;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString, (]
[newString, (, s, ), ;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString, (]
[;, }, public, static, Node, stringKey, (, String, s, ), {, return, Node, ., newString, (, Token, ., STRING_KEY, ,]
[newString, (, Token, ., STRING_KEY, ,, s, ), ;, }, public, static, Node, number, (, double, d, ), {, return]
[newString, (, Token, ., STRING_KEY, ,, s, ), ;, }, public, static, Node, number, (, double, d, ), {, return]
[STRING_KEY, ,, s, ), ;, }, public, static, Node, number, (, double, d, ), {, return, Node, ., newNumber, (]
[d, ), {, return, Node, ., newNumber, (, d, ), ;, }, public, static, Node, thisNode, (, ), {, return]
[return, Node, ., newNumber, (, d, ), ;, }, public, static, Node, thisNode, (, ), {, return, new, Node, (]
[return, Node, ., newNumber, (, d, ), ;, }, public, static, Node, thisNode, (, ), {, return, new, Node, (]
[), {, return, new, Node, (, Token, ., THIS, ), ;, }, public, static, Node, trueNode, (, ), {, return]
[new, Node, (, Token, ., THIS, ), ;, }, public, static, Node, trueNode, (, ), {, return, new, Node, (]
[new, Node, (, Token, ., THIS, ), ;, }, public, static, Node, trueNode, (, ), {, return, new, Node, (]
[), {, return, new, Node, (, Token, ., TRUE, ), ;, }, public, static, Node, falseNode, (, ), {, return]
[new, Node, (, Token, ., TRUE, ), ;, }, public, static, Node, falseNode, (, ), {, return, new, Node, (]
[new, Node, (, Token, ., TRUE, ), ;, }, public, static, Node, falseNode, (, ), {, return, new, Node, (]
[), {, return, new, Node, (, Token, ., FALSE, ), ;, }, public, static, Node, nullNode, (, ), {, return]
[new, Node, (, Token, ., FALSE, ), ;, }, public, static, Node, nullNode, (, ), {, return, new, Node, (]
[new, Node, (, Token, ., FALSE, ), ;, }, public, static, Node, nullNode, (, ), {, return, new, Node, (]
[., NULL, ), ;, }, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {]
[., NULL, ), ;, }, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {]
[}, private, static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, ., checkState, (]
[static, Node, binaryOp, (, int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr1, ), ), ;]
[int, token, ,, Node, expr1, ,, Node, expr2, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr1, ), ), ;]
[expr1, ,, Node, expr2, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr1, ), ), ;, Preconditions, ., checkState, (]
[Node, expr2, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr1, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (]
[., checkState, (, mayBeExpression, (, expr1, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return]
[mayBeExpression, (, expr1, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (]
[expr1, ), ), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,]
[), ;, Preconditions, ., checkState, (, mayBeExpression, (, expr2, ), ), ;, return, new, Node, (, token, ,, expr1, ,]
[token, ,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {]
[token, ,, expr1, ,, expr2, ), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {]
[expr2, ), ;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState, (]
[;, }, private, static, Node, unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (]
[unaryOp, (, int, token, ,, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return]
[token, ,, Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (]
[Node, expr, ), {, Preconditions, ., checkState, (, mayBeExpression, (, expr, ), ), ;, return, new, Node, (, token, ,]
[return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return]
[return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return]
[return, new, Node, (, token, ,, expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return]
[expr, ), ;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return, n, ., isEmpty, (, ), ||]
[;, }, private, static, boolean, mayBeExpressionOrEmpty, (, Node, n, ), {, return, n, ., isEmpty, (, ), ||, mayBeExpression, (]
[isEmpty, (, ), ||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return]
[isEmpty, (, ), ||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return]
[isEmpty, (, ), ||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return]
[isEmpty, (, ), ||, mayBeExpression, (, n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return]
[n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||]
[n, ), ;, }, private, static, boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||]
[boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ||]
[boolean, isAssignmentTarget, (, Node, n, ), {, return, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ||]
[), ||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (]
[), ||, n, ., isGetElem, (, ), ;, }, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (]
[}, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, private, static, boolean, mayBeStatementNoReturn, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., EMPTY, :, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., EMPTY, :, case]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return]
[., getType, (, ), ), {, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case]
[., getType, (, ), ), {, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case]
[{, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case]
[{, case, Token, ., EMPTY, :, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case]
[:, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case]
[:, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case]
[:, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case]
[:, return, true, ;, case, Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case]
[Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case]
[Token, ., BLOCK, :, case, Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case]
[Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case]
[Token, ., BREAK, :, case, Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case]
[Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case]
[Token, ., CONST, :, case, Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case]
[Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case]
[Token, ., CONTINUE, :, case, Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case]
[Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case]
[Token, ., DEBUGGER, :, case, Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case]
[Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case]
[Token, ., DO, :, case, Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case]
[Token, ., EXPR_RESULT, :, case, Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case]
[Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case]
[Token, ., FOR, :, case, Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case]
[Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case]
[Token, ., IF, :, case, Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case]
[Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case]
[Token, ., LABEL, :, case, Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case]
[Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case]
[Token, ., SWITCH, :, case, Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case]
[Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case]
[Token, ., THROW, :, case, Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case]
[Token, ., TRY, :, case, Token, ., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return]
[Token, ., VAR, :, case, Token, ., WHILE, :, case, Token, ., WITH, :, return, true, ;, default, :, return]
[true, ;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (]
[;, default, :, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !]
[:, return, false, ;, }, }, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !, mayBeStatementNoReturn, (]
[}, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !, mayBeStatementNoReturn, (, n, ), ), {, return]
[}, private, static, boolean, mayBeStatement, (, Node, n, ), {, if, (, !, mayBeStatementNoReturn, (, n, ), ), {, return]
[), {, if, (, !, mayBeStatementNoReturn, (, n, ), ), {, return, n, ., isReturn, (, ), ;, }, return]
[isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (]
[isReturn, (, ), ;, }, return, true, ;, }, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (]
[}, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[}, private, static, boolean, mayBeExpression, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case]
[(, Node, n, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, return]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, return, true, ;, case]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, return, true, ;, case]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case]
[{, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case]
[{, case, Token, ., FUNCTION, :, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case]
[:, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case]
[:, return, true, ;, case, Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case]
[Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case]
[Token, ., ADD, :, case, Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case]
[Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., AND, :, case, Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ARRAYLIT, :, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case]
[Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case]
[Token, ., ASSIGN_MOD, :, case, Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case]
[Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case]
[Token, ., BITAND, :, case, Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case]
[Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case]
[Token, ., BITOR, :, case, Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case]
[Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case]
[Token, ., BITNOT, :, case, Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case]
[Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case]
[Token, ., BITXOR, :, case, Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case]
[Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case]
[Token, ., CALL, :, case, Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case]
[Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case]
[Token, ., COMMA, :, case, Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case]
[Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case]
[Token, ., DEC, :, case, Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case]
[Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case]
[Token, ., DELPROP, :, case, Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case]
[Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case]
[Token, ., DIV, :, case, Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case]
[Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case]
[Token, ., EQ, :, case, Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case]
[Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case]
[Token, ., FALSE, :, case, Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case]
[Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case]
[Token, ., GE, :, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case]
[Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case]
[Token, ., GETPROP, :, case, Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case]
[Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case]
[Token, ., GETELEM, :, case, Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case]
[Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case]
[Token, ., GT, :, case, Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case]
[Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., HOOK, :, case, Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case]
[Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case]
[Token, ., IN, :, case, Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case]
[Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case]
[Token, ., INC, :, case, Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case]
[Token, ., INSTANCEOF, :, case, Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case]
[Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case]
[Token, ., LE, :, case, Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case]
[Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[Token, ., LSH, :, case, Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case]
[Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case]
[Token, ., LT, :, case, Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case]
[Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case]
[Token, ., MOD, :, case, Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case]
[Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case]
[Token, ., MUL, :, case, Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case]
[Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case]
[Token, ., NAME, :, case, Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case]
[Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case]
[Token, ., NE, :, case, Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case]
[Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case]
[Token, ., NEG, :, case, Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case]
[Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case]
[Token, ., NEW, :, case, Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case]
[Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case]
[Token, ., NOT, :, case, Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case]
[Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case]
[Token, ., NUMBER, :, case, Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case]
[Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case]
[Token, ., NULL, :, case, Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case]
[Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case]
[Token, ., OBJECTLIT, :, case, Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case]
[Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case]
[Token, ., OR, :, case, Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case]
[Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case]
[Token, ., POS, :, case, Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case]
[Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., REGEXP, :, case, Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case]
[Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case]
[Token, ., RSH, :, case, Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case]
[Token, ., SHEQ, :, case, Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case]
[Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case]
[Token, ., SHNE, :, case, Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case]
[Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case]
[Token, ., STRING, :, case, Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case]
[Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case]
[Token, ., SUB, :, case, Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case]
[Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case]
[Token, ., THIS, :, case, Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case]
[Token, ., TYPEOF, :, case, Token, ., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID, :, return]
[Token, ., TRUE, :, case, Token, ., URSH, :, case, Token, ., VOID, :, return, true, ;, default, :, return]
