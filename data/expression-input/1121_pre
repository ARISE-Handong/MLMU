[OpenIntToDoubleHashMap, ;, @, Deprecated, public, class, OpenMapRealMatrix, extends, AbstractRealMatrix, implements, SparseRealMatrix, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, @, Deprecated, public, class, OpenMapRealMatrix, extends, AbstractRealMatrix, implements, SparseRealMatrix, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[final, OpenIntToDoubleHashMap, entries, ;, public, OpenMapRealMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (]
[entries, ;, public, OpenMapRealMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rowDimension, ,]
[rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rowDimension, ,, columnDimension, ), ;, long, lRow, =]
[throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, super, (, rowDimension, ,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =]
[{, super, (, rowDimension, ,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (]
[{, super, (, rowDimension, ,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (]
[{, super, (, rowDimension, ,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (]
[(, rowDimension, ,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *]
[,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=]
[,, columnDimension, ), ;, long, lRow, =, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=]
[=, rowDimension, ;, long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw]
[long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (]
[long, lCol, =, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (]
[=, columnDimension, ;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *]
[;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,]
[;, if, (, lRow, *, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,]
[*, lCol, >=, Integer, ., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,]
[., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }]
[., MAX_VALUE, ), {, throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }]
[throw, new, NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =]
[NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;]
[NumberIsTooLargeException, (, lRow, *, lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;]
[lCol, ,, Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =]
[Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;]
[Integer, ., MAX_VALUE, ,, false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;]
[false, ), ;, }, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =]
[}, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (]
[columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {]
[columnDimension, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {]
[entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =]
[entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =]
[(, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;]
[(, 0.0, ), ;, }, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;]
[}, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, ., columns, =]
[}, public, OpenMapRealMatrix, (, OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, ., columns, =]
[OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;]
[OpenMapRealMatrix, matrix, ), {, this, ., rows, =, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;]
[this, ., rows, =, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =]
[=, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (]
[=, matrix, ., rows, ;, this, ., columns, =, matrix, ., columns, ;, this, ., entries, =, new, OpenIntToDoubleHashMap, (]
[entries, =, new, OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return]
[OpenIntToDoubleHashMap, (, matrix, ., entries, ), ;, }, @, Override, public, OpenMapRealMatrix, copy, (, ), {, return, new, OpenMapRealMatrix, (]
[;, }, @, Override, public, OpenMapRealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[Override, public, OpenMapRealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, OpenMapRealMatrix, (]
[OpenMapRealMatrix, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, new, OpenMapRealMatrix, (, rowDimension, ,]
[{, return, new, OpenMapRealMatrix, (, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[public, int, getColumnDimension, (, ), {, return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[public, int, getColumnDimension, (, ), {, return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[), {, return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[return, columns, ;, }, public, OpenMapRealMatrix, add, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[(, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =]
[), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;]
[OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;]
[., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -]
[row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -]
[iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *]
[key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;]
[key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;]
[columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (]
[final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,]
[col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,]
[col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,]
[iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), +]
[row, ,, col, ,, getEntry, (, row, ,, col, ), +, iterator, ., value, (, ), ), ;, }, return]
[return, out, ;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, try, {, return]
[;, }, @, Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, subtract, (]
[Override, public, OpenMapRealMatrix, subtract, (, final, RealMatrix, m, ), throws, MatrixDimensionMismatchException, {, try, {, return, subtract, (, (, OpenMapRealMatrix, )]
[{, try, {, return, subtract, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, return]
[return, subtract, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, )]
[return, subtract, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, )]
[OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, return, (, OpenMapRealMatrix, ), super, ., subtract, (]
[), super, ., subtract, (, m, ), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[), super, ., subtract, (, m, ), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {]
[(, m, ), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (]
[), ;, }, }, public, OpenMapRealMatrix, subtract, (, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,]
[(, OpenMapRealMatrix, m, ), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =]
[), throws, MatrixDimensionMismatchException, {, MatrixUtils, ., checkAdditionCompatible, (, this, ,, m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[m, ), ;, final, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;]
[OpenMapRealMatrix, (, this, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;]
[., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[., Iterator, iterator, =, m, ., entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =]
[), ;, ), {, iterator, ., advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[advance, (, ), ;, final, int, row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =]
[row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -]
[row, =, iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -]
[iterator, ., key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *]
[key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;]
[key, (, ), /, columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;]
[columns, ;, final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (]
[final, int, col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,]
[col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,]
[col, =, iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,]
[iterator, ., key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (]
[key, (, ), -, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[-, row, *, columns, ;, out, ., setEntry, (, row, ,, col, ,, getEntry, (, row, ,, col, ), -]
[row, ,, col, ,, getEntry, (, row, ,, col, ), -, iterator, ., value, (, ), ), ;, }, return]
[;, }, @, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, try, {, return]
[@, Override, public, RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, try, {, return, multiply, (]
[RealMatrix, multiply, (, final, RealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, try, {, return, multiply, (, (, OpenMapRealMatrix, )]
[NumberIsTooLargeException, {, try, {, return, multiply, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {]
[NumberIsTooLargeException, {, try, {, return, multiply, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {]
[return, multiply, (, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (]
[(, (, OpenMapRealMatrix, ), m, ), ;, }, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[}, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =]
[}, catch, (, ClassCastException, cce, ), {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =]
[(, this, ,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =]
[m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (]
[;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,]
[;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[;, final, BlockRealMatrix, out, =, new, BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;]
[BlockRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;]
[(, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[(, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =]
[iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =]
[iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =]
[iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =]
[iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =]
[value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /]
[key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =]
[key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =]
[iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %]
[int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =]
[=, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;]
[=, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;]
[/, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++]
[=, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {]
[=, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (]
[(, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,]
[j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,]
[0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *]
[0, ;, j, <, outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *]
[outCols, ;, ++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (]
[++, j, ), {, out, ., addToEntry, (, i, ,, j, ,, value, *, m, ., getEntry, (, k, ,]
[(, i, ,, j, ,, value, *, m, ., getEntry, (, k, ,, j, ), ), ;, }, }, return]
[;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {]
[;, }, }, return, out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {]
[out, ;, }, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, MatrixUtils, ., checkMultiplicationCompatible, (]
[}, }, public, OpenMapRealMatrix, multiply, (, OpenMapRealMatrix, m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,]
[m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =]
[m, ), throws, DimensionMismatchException, ,, NumberIsTooLargeException, {, MatrixUtils, ., checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =]
[checkMultiplicationCompatible, (, this, ,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =]
[,, m, ), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (]
[), ;, final, int, outCols, =, m, ., getColumnDimension, (, ), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,]
[), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[), ;, OpenMapRealMatrix, out, =, new, OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =]
[OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;]
[OpenMapRealMatrix, (, rows, ,, outCols, ), ;, for, (, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;]
[(, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[(, OpenIntToDoubleHashMap, ., Iterator, iterator, =, entries, ., iterator, (, ), ;, iterator, ., hasNext, (, ), ;, ), {]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =]
[), ;, iterator, ., hasNext, (, ), ;, ), {, iterator, ., advance, (, ), ;, final, double, value, =]
[iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =]
[iterator, ., advance, (, ), ;, final, double, value, =, iterator, ., value, (, ), ;, final, int, key, =]
[iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =]
[iterator, ., value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =]
[value, (, ), ;, final, int, key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /]
[key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =]
[key, =, iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =]
[iterator, ., key, (, ), ;, final, int, i, =, key, /, columns, ;, final, int, k, =, key, %]
[int, i, =, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =]
[=, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;]
[=, key, /, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;]
[/, columns, ;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;]
[final, int, k, =, key, %, columns, ;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =]
[;, for, (, int, j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =]
[j, =, 0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (]
[0, ;, j, <, outCols, ;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,]
[;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (]
[;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (]
[;, ++, j, ), {, final, int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (]
[int, rightKey, =, m, ., computeKey, (, k, ,, j, ), ;, if, (, m, ., entries, ., containsKey, (]
[,, j, ), ;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =]
[,, j, ), ;, if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =]
[if, (, m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, ., computeKey, (]
[m, ., entries, ., containsKey, (, rightKey, ), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,]
[), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =]
[), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =]
[), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =]
[), ), {, final, int, outKey, =, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =]
[=, out, ., computeKey, (, i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (]
[computeKey, (, i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +]
[computeKey, (, i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +]
[i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *]
[i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *]
[i, ,, j, ), ;, final, double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *]
[double, outValue, =, out, ., entries, ., get, (, outKey, ), +, value, *, m, ., entries, ., get, (]
[entries, ., get, (, outKey, ), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (]
[entries, ., get, (, outKey, ), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (]
[get, (, outKey, ), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==]
[), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {]
[), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {]
[), +, value, *, m, ., entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {]
[entries, ., get, (, rightKey, ), ;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[;, if, (, outValue, ==, 0.0, ), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {]
[), {, out, ., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (]
[out, ., entries, ., remove, (, outKey, ), ;, }, else, {, out, ., entries, ., put, (, outKey, ,]
[;, }, else, {, out, ., entries, ., put, (, outKey, ,, outValue, ), ;, }, }, }, }, return]
[}, return, out, ;, }, @, Override, public, double, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {]
[}, return, out, ;, }, @, Override, public, double, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {]
[}, @, Override, public, double, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[Override, public, double, getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[getEntry, (, int, row, ,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[,, int, column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[column, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return]
[{, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return]
[(, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (]
[), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,]
[get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[;, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {]
[;, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {]
[public, void, setEntry, (, int, row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[setEntry, (, int, row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[row, ,, int, column, ,, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[,, double, value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[value, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (]
[MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (]
[checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {]
[,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {]
[MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (]
[checkColumnIndex, (, this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (]
[this, ,, column, ), ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,]
[value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {]
[value, ==, 0.0, ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {]
[{, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (]
[., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (]
[(, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,]
[row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,]
[}, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {]
[public, void, addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[addToEntry, (, int, row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[row, ,, int, column, ,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[,, double, increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[increment, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =]
[this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (]
[row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (]
[key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), +]
[row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (]
[row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (]
[column, ), ;, final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value, ==]
[final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0, ), {]
[final, double, value, =, entries, ., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0, ), {]
[entries, ., get, (, key, ), +, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (]
[+, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[+, increment, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[(, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (]
[==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[}, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {]
[}, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {]
[public, void, multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (]
[multiplyEntry, (, int, row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,]
[row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[row, ,, int, column, ,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;]
[,, double, factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (]
[factor, ), throws, OutOfRangeException, {, MatrixUtils, ., checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,]
[checkRowIndex, (, this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =]
[this, ,, row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (]
[row, ), ;, MatrixUtils, ., checkColumnIndex, (, this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[this, ,, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (]
[key, =, computeKey, (, row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), *]
[row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (]
[row, ,, column, ), ;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (]
[column, ), ;, final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value, ==]
[final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0, ), {]
[final, double, value, =, entries, ., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0, ), {]
[entries, ., get, (, key, ), *, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (]
[*, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[*, factor, ;, if, (, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {]
[(, value, ==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (]
[==, 0.0, ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,]
[(, key, ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[(, key, ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[(, key, ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return]
[,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *]
[), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +]
