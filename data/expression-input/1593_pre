[Token, ;, class, Denormalize, implements, CompilerPass, ,, Callback, {, private, final, AbstractCompiler, compiler, ;, Denormalize, (, AbstractCompiler, compiler, ), {]
[Token, ;, class, Denormalize, implements, CompilerPass, ,, Callback, {, private, final, AbstractCompiler, compiler, ;, Denormalize, (, AbstractCompiler, compiler, ), {]
[implements, CompilerPass, ,, Callback, {, private, final, AbstractCompiler, compiler, ;, Denormalize, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, maybeCollapseIntoForStatements, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, maybeCollapseIntoForStatements, (, n, ,]
[(, n, ,, parent, ), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (]
[(, n, ,, parent, ), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (]
[(, n, ,, parent, ), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (]
[,, parent, ), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==]
[), ;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||]
[;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !]
[;, }, private, void, maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !]
[maybeCollapseIntoForStatements, (, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !, NodeUtil, ., isStatementBlock, (]
[if, (, parent, ==, null, ||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (]
[if, (, parent, ==, null, ||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (]
[(, parent, ==, null, ||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !]
[(, parent, ==, null, ||, !, NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !]
[NodeUtil, ., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&]
[., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !]
[., isStatementBlock, (, parent, ), ), {, return, ;, }, if, (, !, n, ., isExprResult, (, ), &&, !]
[n, ., isExprResult, (, ), &&, !, n, ., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =]
[n, ., isExprResult, (, ), &&, !, n, ., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =]
[., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (]
[., isVar, (, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (]
[(, ), ), {, return, ;, }, Node, nextSibling, =, n, ., getNext, (, ), ;, if, (, nextSibling, ==]
[=, n, ., getNext, (, ), ;, if, (, nextSibling, ==, null, ), {, return, ;, }, else, if, (]
[=, n, ., getNext, (, ), ;, if, (, nextSibling, ==, null, ), {, return, ;, }, else, if, (]
[(, ), ;, if, (, nextSibling, ==, null, ), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (]
[null, ), {, return, ;, }, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode, =]
[}, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =]
[}, else, if, (, NodeUtil, ., isForIn, (, nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =]
[nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (]
[nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (]
[nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (]
[nextSibling, ), ), {, Node, forNode, =, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (]
[=, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&]
[=, nextSibling, ;, Node, forVar, =, forNode, ., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&]
[forNode, ., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&, n, ., isVar, (, ), &&]
[forNode, ., getFirstChild, (, ), ;, if, (, forVar, ., isName, (, ), &&, n, ., isVar, (, ), &&]
[isName, (, ), &&, n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), ), {, Node, name, =]
[isName, (, ), &&, n, ., isVar, (, ), &&, n, ., hasOneChild, (, ), ), {, Node, name, =]
[), &&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (]
[), &&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (]
[&&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[&&, n, ., hasOneChild, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, if, (, !, name, ., hasChildren, (, ), &&]
[(, ), ;, if, (, !, name, ., hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (]
[(, ), ;, if, (, !, name, ., hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (]
[hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {]
[hasChildren, (, ), &&, forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {]
[forVar, ., getString, (, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild, (]
[(, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;]
[(, ), ., equals, (, name, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;]
[(, name, ., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (]
[., getString, (, ), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,]
[), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;]
[), ), ), {, parent, ., removeChild, (, n, ), ;, forNode, ., replaceChild, (, forVar, ,, n, ), ;]
[., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (]
[., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (]
[., replaceChild, (, forVar, ,, n, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, else, if, (, nextSibling, ., isFor, (, ), &&]
[(, nextSibling, ., isFor, (, ), &&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (]
[(, nextSibling, ., isFor, (, ), &&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (]
[(, ), &&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (]
[&&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (, n, ,]
[&&, nextSibling, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, if, (, NodeUtil, ., containsType, (, n, ,]
[if, (, NodeUtil, ., containsType, (, n, ,, Token, ., IN, ), ), {, return, ;, }, Node, forNode, =]
[(, n, ,, Token, ., IN, ), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =]
[(, n, ,, Token, ., IN, ), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =]
[), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;]
[), ), {, return, ;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;]
[;, }, Node, forNode, =, nextSibling, ;, Node, oldInitializer, =, forNode, ., getFirstChild, (, ), ;, parent, ., removeChild, (]
[oldInitializer, =, forNode, ., getFirstChild, (, ), ;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (]
[oldInitializer, =, forNode, ., getFirstChild, (, ), ;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (]
[;, parent, ., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {]
[., removeChild, (, n, ), ;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =]
[;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {]
[;, Node, newInitializer, ;, if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {]
[if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (]
[if, (, n, ., isVar, (, ), ), {, newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (]
[), {, newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;]
[newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =]
[newInitializer, =, n, ;, }, else, {, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =]
[{, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;]
[{, Preconditions, ., checkState, (, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;]
[(, n, ., hasOneChild, (, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (]
[(, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }]
[(, ), ), ;, newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }]
[newInitializer, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (]
[n, ., getFirstChild, (, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,]
[(, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;]
[(, ), ;, n, ., removeChild, (, newInitializer, ), ;, }, forNode, ., replaceChild, (, oldInitializer, ,, newInitializer, ), ;]
[}, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, StripConstantAnnotations, (, AbstractCompiler, compiler, ), {]
[}, }, static, class, StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, StripConstantAnnotations, (, AbstractCompiler, compiler, ), {]
[StripConstantAnnotations, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, AbstractCompiler, compiler, ;, StripConstantAnnotations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, this, ), ;]
[process, (, Node, externs, ,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, this, ), ;]
[,, Node, js, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, this, ), ;, NodeTraversal, ., traverse, (]
[js, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[{, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (, node, ., isName, (, ), ||]
[visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, if, (, node, ., isName, (, ), ||]
[node, ,, Node, parent, ), {, if, (, node, ., isName, (, ), ||, node, ., isString, (, ), ||]
[node, ,, Node, parent, ), {, if, (, node, ., isName, (, ), ||, node, ., isString, (, ), ||]
[(, node, ., isName, (, ), ||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {]
[(, node, ., isName, (, ), ||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {]
[(, ), ||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (]
[(, ), ||, node, ., isString, (, ), ||, node, ., isStringKey, (, ), ), {, node, ., removeProp, (]
