[LinkedList, ;, import, java, ., util, ., List, ;, public, class, StackTraceFilter, implements, Serializable, {, static, final, long, serialVersionUID, =]
[;, import, java, ., util, ., List, ;, public, class, StackTraceFilter, implements, Serializable, {, static, final, long, serialVersionUID, =, -]
[public, class, StackTraceFilter, implements, Serializable, {, static, final, long, serialVersionUID, =, -, 5499819791513105700L, ;, private, static, final, StackTraceCleaner, CLEANER, =]
[public, class, StackTraceFilter, implements, Serializable, {, static, final, long, serialVersionUID, =, -, 5499819791513105700L, ;, private, static, final, StackTraceCleaner, CLEANER, =]
[public, class, StackTraceFilter, implements, Serializable, {, static, final, long, serialVersionUID, =, -, 5499819791513105700L, ;, private, static, final, StackTraceCleaner, CLEANER, =]
[long, serialVersionUID, =, -, 5499819791513105700L, ;, private, static, final, StackTraceCleaner, CLEANER, =, Plugins, ., getStackTraceCleanerProvider, (, ), ., getStackTraceCleaner, (]
[StackTraceElement, [, ], filter, (, StackTraceElement, [, ], target, ,, boolean, keepTop, ), {, List, <, StackTraceElement, >, unfilteredStackTrace, =]
[StackTraceElement, [, ], filter, (, StackTraceElement, [, ], target, ,, boolean, keepTop, ), {, List, <, StackTraceElement, >, unfilteredStackTrace, =]
[(, StackTraceElement, [, ], target, ,, boolean, keepTop, ), {, List, <, StackTraceElement, >, unfilteredStackTrace, =, Arrays, ., asList, (]
[boolean, keepTop, ), {, List, <, StackTraceElement, >, unfilteredStackTrace, =, Arrays, ., asList, (, target, ), ;, int, lastBad, =]
[keepTop, ), {, List, <, StackTraceElement, >, unfilteredStackTrace, =, Arrays, ., asList, (, target, ), ;, int, lastBad, =, -]
[StackTraceElement, >, unfilteredStackTrace, =, Arrays, ., asList, (, target, ), ;, int, lastBad, =, -, 1, ;, int, firstBad, =]
[>, unfilteredStackTrace, =, Arrays, ., asList, (, target, ), ;, int, lastBad, =, -, 1, ;, int, firstBad, =, -]
[target, ), ;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =]
[;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;]
[;, int, lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;]
[lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[lastBad, =, -, 1, ;, int, firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;]
[firstBad, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;]
[(, int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (]
[int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !]
[int, i, =, 0, ;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !]
[;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (]
[;, i, <, unfilteredStackTrace, ., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (]
[., size, (, ), ;, i, ++, ), {, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (]
[{, if, (, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }]
[(, !, CLEANER, ., isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }, lastBad, =]
[isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (]
[isOut, (, unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (]
[unfilteredStackTrace, ., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==]
[., get, (, i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -]
[i, ), ), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {]
[), ), {, continue, ;, }, lastBad, =, i, ;, if, (, firstBad, ==, -, 1, ), {, firstBad, =]
[firstBad, ==, -, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (]
[firstBad, ==, -, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (]
[-, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&]
[-, 1, ), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&]
[), {, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=]
[{, firstBad, =, i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -]
[i, ;, }, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {]
[}, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {, top, =]
[}, }, List, <, StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {, top, =]
[StackTraceElement, >, top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {, top, =, unfilteredStackTrace, ., subList, (]
[top, ;, if, (, keepTop, &&, firstBad, !=, -, 1, ), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,]
[firstBad, !=, -, 1, ), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {]
[-, 1, ), {, top, =, unfilteredStackTrace, ., subList, (, 0, ,, firstBad, ), ;, }, else, {, top, =]
[}, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =]
[}, else, {, top, =, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =]
[=, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (]
[=, new, LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (]
[LinkedList, <, StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (, lastBad, +]
[StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (, lastBad, +, 1, ,]
[StackTraceElement, >, (, ), ;, }, List, <, StackTraceElement, >, bottom, =, unfilteredStackTrace, ., subList, (, lastBad, +, 1, ,]
[., subList, (, lastBad, +, 1, ,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =]
[,, unfilteredStackTrace, ., size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (]
[size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;]
[size, (, ), ), ;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;]
[;, List, <, StackTraceElement, >, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll, (]
[>, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll, (, bottom, ), ;, return]
[>, filtered, =, new, ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll, (, bottom, ), ;, return]
[ArrayList, <, StackTraceElement, >, (, top, ), ;, filtered, ., addAll, (, bottom, ), ;, return, filtered, ., toArray, (]
[(, top, ), ;, filtered, ., addAll, (, bottom, ), ;, return, filtered, ., toArray, (, new, StackTraceElement, [, ]]
