[extends, FieldElement, <, T, >, >, implements, FieldVector, <, T, >, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[>, entries, ;, private, final, int, virtualSize, ;, public, SparseFieldVector, (, Field, <, T, >, field, ), {, this, (]
[;, private, final, int, virtualSize, ;, public, SparseFieldVector, (, Field, <, T, >, field, ), {, this, (, field, ,]
[(, field, ,, 0, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {]
[(, field, ,, 0, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {, this, ., field, =]
[}, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {, this, ., field, =, field, ;]
[SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ), {, this, ., field, =, field, ;, virtualSize, =]
[Field, <, T, >, field, ,, int, dimension, ), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;]
[T, >, field, ,, int, dimension, ), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;, entries, =]
[), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[T, >, (, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {]
[(, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =]
[(, field, ), ;, }, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =]
[}, protected, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, ., field, ;]
[SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, ., field, ;, virtualSize, =]
[SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, ., field, ;, virtualSize, =]
[SparseFieldVector, (, SparseFieldVector, <, T, >, v, ,, int, resize, ), {, field, =, v, ., field, ;, virtualSize, =]
[v, ,, int, resize, ), {, field, =, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), +]
[int, resize, ), {, field, =, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;]
[), {, field, =, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =]
[field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[field, ;, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[entries, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {]
[entries, ), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {]
[public, SparseFieldVector, (, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {, this, ., field, =]
[(, Field, <, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {, this, ., field, =, field, ;]
[<, T, >, field, ,, int, dimension, ,, int, expectedSize, ), {, this, ., field, =, field, ;, virtualSize, =]
[>, field, ,, int, dimension, ,, int, expectedSize, ), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;]
[,, int, dimension, ,, int, expectedSize, ), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;, entries, =]
[), {, this, ., field, =, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[this, ., field, =, field, ;, virtualSize, =, dimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ,]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {]
[), ;, }, public, SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {]
[SparseFieldVector, (, Field, <, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[<, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;]
[<, T, >, field, ,, T, [, ], values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;]
[,, T, [, ], values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;, this, ., field, =]
[[, ], values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;, this, ., field, =, field, ;]
[values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;, this, ., field, =, field, ;, virtualSize, =]
[values, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, values, ), ;, this, ., field, =, field, ;, virtualSize, =]
[{, MathUtils, ., checkNotNull, (, values, ), ;, this, ., field, =, field, ;, virtualSize, =, values, ., length, ;]
[., checkNotNull, (, values, ), ;, this, ., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =]
[this, ., field, =, field, ;, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[values, ., length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =]
[length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;]
[length, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;]
[entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key, <]
[entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key, <]
[<, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[<, T, >, (, field, ), ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value, =]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value, =]
[int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value, =, values, []
[0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;]
[0, ;, key, <, values, ., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;]
[values, ., length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (]
[length, ;, key, ++, ), {, T, value, =, values, [, key, ], ;, entries, ., put, (, key, ,]
[., put, (, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {]
[(, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =]
[(, key, ,, value, ), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =]
[), ;, }, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, ., field, ;]
[}, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, ., field, ;, virtualSize, =]
[}, }, public, SparseFieldVector, (, SparseFieldVector, <, T, >, v, ), {, field, =, v, ., field, ;, virtualSize, =]
[<, T, >, v, ), {, field, =, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), ;]
[>, v, ), {, field, =, v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =]
[v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[v, ., field, ;, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (]
[>, (, v, ., getEntries, (, ), ), ;, }, private, OpenIntToFieldHashMap, <, T, >, getEntries, (, ), {, return]
[return, entries, ;, }, public, FieldVector, <, T, >, add, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[;, }, public, FieldVector, <, T, >, add, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, FieldVector, <, T, >, add, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =]
[(, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, )]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, T, value, =]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, T, value, =]
[int, key, =, iter, ., key, (, ), ;, T, value, =, iter, ., value, (, ), ;, if, (]
[int, key, =, iter, ., key, (, ), ;, T, value, =, iter, ., value, (, ), ;, if, (]
[., key, (, ), ;, T, value, =, iter, ., value, (, ), ;, if, (, entries, ., containsKey, (]
[;, T, value, =, iter, ., value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[;, T, value, =, iter, ., value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[iter, ., value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (]
[value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[value, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (]
[(, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (]
[setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (, value, ), ), ;, }, else, {]
[setEntry, (, key, ,, entries, ., get, (, key, ), ., add, (, value, ), ), ;, }, else, {]
[entries, ., get, (, key, ), ., add, (, value, ), ), ;, }, else, {, res, ., setEntry, (]
[get, (, key, ), ., add, (, value, ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[(, value, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, value, ), ;, }, }, return]
[public, FieldVector, <, T, >, append, (, SparseFieldVector, <, T, >, v, ), {, SparseFieldVector, <, T, >, res, =]
[(, SparseFieldVector, <, T, >, v, ), {, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[<, T, >, v, ), {, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,]
[<, T, >, v, ), {, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,]
[T, >, (, this, ,, v, ., getDimension, (, ), ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[T, >, (, this, ,, v, ., getDimension, (, ), ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[T, >, (, this, ,, v, ., getDimension, (, ), ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (]
[Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return]
[return, res, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {, if, (]
[return, res, ;, }, public, FieldVector, <, T, >, append, (, FieldVector, <, T, >, v, ), {, if, (]
[append, (, FieldVector, <, T, >, v, ), {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return]
[FieldVector, <, T, >, v, ), {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, append, (]
[{, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, append, (, (, SparseFieldVector, <, T, >, )]
[{, return, append, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[{, return, append, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldVector, <, T, >, res, =]
[n, =, v, ., getDimension, (, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[v, ., getDimension, (, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,]
[T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, n, ), ;, for, (, int, i, =]
[res, =, new, SparseFieldVector, <, T, >, (, this, ,, n, ), ;, for, (, int, i, =, 0, ;]
[res, =, new, SparseFieldVector, <, T, >, (, this, ,, n, ), ;, for, (, int, i, =, 0, ;]
[new, SparseFieldVector, <, T, >, (, this, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[<, T, >, (, this, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[<, T, >, (, this, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[this, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[this, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, +]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,]
[i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (]
[), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return]
[;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException, {]
[;, }, return, res, ;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException, {]
[;, }, }, public, FieldVector, <, T, >, append, (, T, d, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[(, T, d, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, d, ), ;, FieldVector, <, T, >, res, =]
[{, MathUtils, ., checkNotNull, (, d, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[., checkNotNull, (, d, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,]
[d, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;]
[d, ), ;, FieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;]
[<, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;, res, ., setEntry, (]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ,, 1, ), ;, res, ., setEntry, (, virtualSize, ,]
[SparseFieldVector, <, T, >, (, this, ,, 1, ), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return]
[(, virtualSize, ,, d, ), ;, return, res, ;, }, public, FieldVector, <, T, >, copy, (, ), {, return]
[return, res, ;, }, public, FieldVector, <, T, >, copy, (, ), {, return, new, SparseFieldVector, <, T, >, (]
[T, >, (, this, ), ;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[(, this, ), ;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[(, this, ), ;, }, public, T, dotProduct, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[<, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, T, res, =]
[<, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, T, res, =]
[), ), ;, T, res, =, field, ., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[), ), ;, T, res, =, field, ., getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[getZero, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (, v, ., getEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, =, res, ., add, (, v, ., getEntry, (]
[;, res, =, res, ., add, (, v, ., getEntry, (, iter, ., key, (, ), ), ., multiply, (]
[;, res, =, res, ., add, (, v, ., getEntry, (, iter, ., key, (, ), ), ., multiply, (]
[(, iter, ., key, (, ), ), ., multiply, (, iter, ., value, (, ), ), ), ;, }, return]
[;, }, public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (]
[public, FieldVector, <, T, >, ebeDivide, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (]
[throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =]
[(, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (]
[), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (]
[setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, v, ., getEntry, (]
[setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, v, ., getEntry, (]
[(, ), ., divide, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return]
[return, res, ;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, public, FieldVector, <, T, >, ebeMultiply, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =]
[(, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[>, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (]
[Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[Iterator, iter, =, res, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (]
[), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (]
[setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, v, ., getEntry, (]
[setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, v, ., getEntry, (]
[(, ), ., multiply, (, v, ., getEntry, (, iter, ., key, (, ), ), ), ), ;, }, return]
[), ), ), ;, }, return, res, ;, }, @, Deprecated, public, T, [, ], getData, (, ), {, return]
[T, [, ], getData, (, ), {, return, toArray, (, ), ;, }, public, int, getDimension, (, ), {, return]
[public, int, getDimension, (, ), {, return, virtualSize, ;, }, public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {]
[getDimension, (, ), {, return, virtualSize, ;, }, public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (]
[return, virtualSize, ;, }, public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return]
[return, virtualSize, ;, }, public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return]
[public, T, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return, entries, ., get, (]
[;, return, entries, ., get, (, index, ), ;, }, public, Field, <, T, >, getField, (, ), {, return]
[public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (]
[public, FieldVector, <, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (]
[<, T, >, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <]
[(, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw]
[,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,]
[{, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (]
[0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (]
[new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[(, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -]
[checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =]
[(, index, +, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[+, n, -, 1, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,]
[SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int, end, =]
[SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int, end, =]
[T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,, n, ), ;, int, end, =, index, +]
[field, ,, n, ), ;, int, end, =, index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[field, ,, n, ), ;, int, end, =, index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[index, +, n, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[{, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[(, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <]
[int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {]
[int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[(, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[}, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, return]
[}, }, return, res, ;, }, public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, return]
[public, FieldVector, <, T, >, mapAdd, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), ., mapAddToSelf, (]
[;, }, public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =]
[public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;]
[public, FieldVector, <, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;]
[<, T, >, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;, i, <]
[>, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[>, mapAddToSelf, (, T, d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[d, ), throws, NullArgumentException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {]
[throws, NullArgumentException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (]
[;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (]
[++, ), {, setEntry, (, i, ,, getEntry, (, i, ), ., add, (, d, ), ), ;, }, return]
[return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, return]
[return, this, ;, }, public, FieldVector, <, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, return]
[<, T, >, mapDivide, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, return, copy, (, ), ., mapDivideToSelf, (]
[T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[T, >, mapDivideToSelf, (, T, d, ), throws, NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[NullArgumentException, ,, MathArithmeticException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (]
[iter, ., key, (, ), ,, iter, ., value, (, ), ., divide, (, d, ), ), ;, }, return]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return]
[), ), ;, }, return, this, ;, }, public, FieldVector, <, T, >, mapInv, (, ), throws, MathArithmeticException, {, return]
[(, ), ;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =]
[;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;]
[;, }, public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;]
[public, FieldVector, <, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <]
[<, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[<, T, >, mapInvToSelf, (, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[(, ), throws, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {]
[throws, MathArithmeticException, {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (]
[virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (]
[(, i, ,, field, ., getOne, (, ), ., divide, (, getEntry, (, i, ), ), ), ;, }, return]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, return]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, return]
[public, FieldVector, <, T, >, mapMultiply, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), ., mapMultiplyToSelf, (]
[FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[FieldVector, <, T, >, mapMultiplyToSelf, (, T, d, ), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), throws, NullArgumentException, {, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (]
[iter, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (, d, ), ), ;, }, return]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, return]
[;, }, return, this, ;, }, public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, return]
[public, FieldVector, <, T, >, mapSubtract, (, T, d, ), throws, NullArgumentException, {, return, copy, (, ), ., mapSubtractToSelf, (]
[mapSubtractToSelf, (, d, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return]
[d, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (]
[d, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (]
[d, ), ;, }, public, FieldVector, <, T, >, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (]
[>, mapSubtractToSelf, (, T, d, ), throws, NullArgumentException, {, return, mapAddToSelf, (, field, ., getZero, (, ), ., subtract, (]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v, ), {, final, int, n, =]
[;, }, public, FieldMatrix, <, T, >, outerProduct, (, SparseFieldVector, <, T, >, v, ), {, final, int, n, =]
[>, v, ), {, final, int, n, =, v, ., getDimension, (, ), ;, SparseFieldMatrix, <, T, >, res, =]
[n, =, v, ., getDimension, (, ), ;, SparseFieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (]
[v, ., getDimension, (, ), ;, SparseFieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,]
[getDimension, (, ), ;, SparseFieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,]
[SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =]
[., hasNext, (, ), ), {, iter, ., advance, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =, v, ., entries, ., iterator, (, ), ;, while, (]
[), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter2, =, v, ., entries, ., iterator, (, ), ;, while, (]
[Iterator, iter2, =, v, ., entries, ., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {]
[Iterator, iter2, =, v, ., entries, ., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;]
[;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter2, ., hasNext, (, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter2, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, ), ,]
[advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, ), ,]
[advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter2, ., key, (, ), ,]
[iter, ., key, (, ), ,, iter2, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (]
[iter, ., key, (, ), ,, iter2, ., key, (, ), ,, iter, ., value, (, ), ., multiply, (]
[,, iter, ., value, (, ), ., multiply, (, iter2, ., value, (, ), ), ), ;, }, }, return]
[return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, if, (]
[return, res, ;, }, public, FieldMatrix, <, T, >, outerProduct, (, FieldVector, <, T, >, v, ), {, if, (]
[outerProduct, (, FieldVector, <, T, >, v, ), {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return]
[FieldVector, <, T, >, v, ), {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, outerProduct, (]
[{, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, outerProduct, (, (, SparseFieldVector, <, T, >, )]
[{, return, outerProduct, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[{, return, outerProduct, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res, =]
[n, =, v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (]
[v, ., getDimension, (, ), ;, FieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,]
[getDimension, (, ), ;, FieldMatrix, <, T, >, res, =, new, SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,]
[SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[SparseFieldMatrix, <, T, >, (, field, ,, virtualSize, ,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[,, n, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, row, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, row, =]
[., advance, (, ), ;, int, row, =, iter, ., key, (, ), ;, FieldElement, <, T, >, value, =]
[., advance, (, ), ;, int, row, =, iter, ., key, (, ), ;, FieldElement, <, T, >, value, =]
[(, ), ;, FieldElement, <, T, >, value, =, iter, ., value, (, ), ;, for, (, int, col, =]
[;, FieldElement, <, T, >, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;]
[;, FieldElement, <, T, >, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;]
[<, T, >, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;, col, <]
[>, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;, col, <, n, ;]
[>, value, =, iter, ., value, (, ), ;, for, (, int, col, =, 0, ;, col, <, n, ;]
[., value, (, ), ;, for, (, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {]
[., value, (, ), ;, for, (, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {]
[;, for, (, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (]
[(, int, col, =, 0, ;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,]
[col, =, 0, ;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,]
[col, =, 0, ;, col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,]
[col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (]
[col, <, n, ;, col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (]
[col, ++, ), {, res, ., setEntry, (, row, ,, col, ,, value, ., multiply, (, v, ., getEntry, (]
[row, ,, col, ,, value, ., multiply, (, v, ., getEntry, (, col, ), ), ), ;, }, }, return]
[}, }, public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {]
[public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (]
[public, FieldVector, <, T, >, projection, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (]
[<, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, return]
[<, T, >, v, ), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, return]
[), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, return, v, ., mapMultiply, (]
[), throws, DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, return, v, ., mapMultiply, (]
[DimensionMismatchException, ,, MathArithmeticException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, return, v, ., mapMultiply, (, dotProduct, (]
[(, v, ., getDimension, (, ), ), ;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (]
[(, v, ., getDimension, (, ), ), ;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (]
[(, ), ), ;, return, v, ., mapMultiply, (, dotProduct, (, v, ), ., divide, (, v, ., dotProduct, (]
[divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value, ), {]
[divide, (, v, ., dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value, ), {]
[dotProduct, (, v, ), ), ), ;, }, public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (]
[public, void, set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =]
[set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;]
[set, (, T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;]
[T, value, ), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[), {, MathUtils, ., checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[checkNotNull, (, value, ), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {]
[value, ), ;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (]
[;, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[value, ), ;, }, }, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {]
[value, ), ;, }, }, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {]
[}, public, void, setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (]
[setEntry, (, int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;]
[int, index, ,, T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;, checkIndex, (]
[T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;, checkIndex, (, index, ), ;]
[T, value, ), throws, NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;, checkIndex, (, index, ), ;]
[NullArgumentException, ,, OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;, checkIndex, (, index, ), ;, entries, ., put, (]
[OutOfRangeException, {, MathUtils, ., checkNotNull, (, value, ), ;, checkIndex, (, index, ), ;, entries, ., put, (, index, ,]
[value, ), ;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {]
[;, }, public, void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (]
[void, setSubVector, (, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;]
[(, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[(, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[(, int, index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[index, ,, FieldVector, <, T, >, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -]
[index, ), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, final, int, n, =]
[index, ), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, final, int, n, =]
[), -, 1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =]
[1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[1, ), ;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[;, final, int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, n, =, v, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +, index, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +, index, ,]
[0, ;, i, <, n, ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (]
[), ;, }, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {]
[}, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[}, }, public, SparseFieldVector, <, T, >, subtract, (, SparseFieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =]
[(, v, ., getDimension, (, ), ), ;, SparseFieldVector, <, T, >, res, =, (, SparseFieldVector, <, T, >, )]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[res, =, (, SparseFieldVector, <, T, >, ), copy, (, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (]
[(, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., subtract, (]
[(, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), ., subtract, (]
[entries, ., get, (, key, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {]
[entries, ., get, (, key, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {]
[key, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (]
[., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[., subtract, (, iter, ., value, (, ), ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[), ), ;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (]
[), ), ;, }, else, {, res, ., setEntry, (, key, ,, field, ., getZero, (, ), ., subtract, (]
[,, field, ., getZero, (, ), ., subtract, (, iter, ., value, (, ), ), ), ;, }, }, return]
[;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (]
[;, }, public, FieldVector, <, T, >, subtract, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (]
[FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return]
[T, >, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, subtract, (]
[{, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, subtract, (, (, SparseFieldVector, <, T, >, )]
[{, return, subtract, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[{, return, subtract, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[<, T, >, ), v, ), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;]
[>, ), v, ), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (]
[int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =]
[(, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =]
[T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =, 0, ;]
[T, >, res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =, 0, ;]
[res, =, new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =, 0, ;, i, <]
[new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[new, SparseFieldVector, <, T, >, (, this, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[this, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[this, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, entries, ., containsKey, (]
[0, ;, i, <, n, ;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {]
[0, ;, i, <, n, ;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {]
[n, ;, i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (]
[i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,]
[i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,]
[i, ++, ), {, if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,]
[if, (, entries, ., containsKey, (, i, ), ), {, res, ., setEntry, (, i, ,, entries, ., get, (]
[(, i, ), ), {, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (]
[(, i, ), ), {, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (]
[{, res, ., setEntry, (, i, ,, entries, ., get, (, i, ), ., subtract, (, v, ., getEntry, (]
[., get, (, i, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {]
[., get, (, i, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {]
[), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (]
[subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (, i, ,]
[subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (, i, ,]
[subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, else, {, res, ., setEntry, (, i, ,]
[), ), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (]
[), ), ;, }, else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (]
[else, {, res, ., setEntry, (, i, ,, field, ., getZero, (, ), ., subtract, (, v, ., getEntry, (]
[field, ., getZero, (, ), ., subtract, (, v, ., getEntry, (, i, ), ), ), ;, }, }, return]
[}, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T, [, ], res, =]
[}, }, return, res, ;, }, }, public, T, [, ], toArray, (, ), {, T, [, ], res, =]
[;, }, }, public, T, [, ], toArray, (, ), {, T, [, ], res, =, MathArrays, ., buildArray, (]
[}, public, T, [, ], toArray, (, ), {, T, [, ], res, =, MathArrays, ., buildArray, (, field, ,]
[], res, =, MathArrays, ., buildArray, (, field, ,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[], res, =, MathArrays, ., buildArray, (, field, ,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[,, virtualSize, ), ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, []
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, []
[hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =]
[hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =]
[(, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return]
[), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[), ;, }, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (]
[}, return, res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <]
[res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[res, ;, }, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||]
[}, private, void, checkIndex, (, final, int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=]
[int, index, ), throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw]
[throws, OutOfRangeException, {, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (]
[{, if, (, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,]
[(, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[(, index, <, 0, ||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,]
[||, index, >=, getDimension, (, ), ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, getDimension, (, ), -]
[(, ), -, 1, ), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (]
[(, ), -, 1, ), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (]
[), ;, }, }, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=]
[protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=, n, ), {, throw]
[(, int, n, ), throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, getDimension, (, ), !=, n, ), {, throw, new, DimensionMismatchException, (, getDimension, (, ), ,]
[}, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (]
[}, }, public, FieldVector, <, T, >, add, (, FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (]
[FieldVector, <, T, >, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return]
[T, >, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, add, (]
[{, if, (, v, instanceof, SparseFieldVector, <, ?, >, ), {, return, add, (, (, SparseFieldVector, <, T, >, )]
[{, return, add, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[{, return, add, (, (, SparseFieldVector, <, T, >, ), v, ), ;, }, else, {, final, int, n, =]
[<, T, >, ), v, ), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;]
[>, ), v, ), ;, }, else, {, final, int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (]
[int, n, =, v, ., getDimension, (, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =]
[(, ), ;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (]
[;, checkVectorDimensions, (, n, ), ;, SparseFieldVector, <, T, >, res, =, new, SparseFieldVector, <, T, >, (, field, ,]
[res, =, new, SparseFieldVector, <, T, >, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =]
[new, SparseFieldVector, <, T, >, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[new, SparseFieldVector, <, T, >, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[<, T, >, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[>, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[>, (, field, ,, getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (]
[;, i, ++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (]
[++, ), {, res, ., setEntry, (, i, ,, v, ., getEntry, (, i, ), ., add, (, getEntry, (]
[i, ,, v, ., getEntry, (, i, ), ., add, (, getEntry, (, i, ), ), ), ;, }, return]
[), ;, }, return, res, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =]
[;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[}, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *]
[(, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +]
[), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (]
[), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (]
[{, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (, (]
[{, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (, (]
[int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (, (, field, ==]
[31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, (, (, field, ==, null, ), ?]
[int, result, =, 1, ;, result, =, prime, *, result, +, (, (, field, ==, null, ), ?, 0, :]
[int, result, =, 1, ;, result, =, prime, *, result, +, (, (, field, ==, null, ), ?, 0, :]
[prime, *, result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;]
[result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =]
[result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =]
[result, +, (, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =]
[(, (, field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *]
[field, ==, null, ), ?, 0, :, field, ., hashCode, (, ), ), ;, result, =, prime, *, result, +]
[(, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[(, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[result, +, virtualSize, ;, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, temp, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, temp, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, temp, =]
[{, iter, ., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;]
[., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =]
[., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =]
[., advance, (, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =]
[(, ), ;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =, prime, *]
[;, int, temp, =, iter, ., value, (, ), ., hashCode, (, ), ;, result, =, prime, *, result, +]
[iter, ., value, (, ), ., hashCode, (, ), ;, result, =, prime, *, result, +, temp, ;, }, return]
[+, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[+, temp, ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return, false, ;, }]
[if, (, !, (, obj, instanceof, SparseFieldVector, <, ?, >, ), ), {, return, false, ;, }, @, SuppressWarnings, (]
[?, >, ), ), {, return, false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =]
[false, ;, }, @, SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, )]
[SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (]
[SuppressWarnings, (, "unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (]
["unchecked", ), SparseFieldVector, <, T, >, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==]
[>, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null, ), {, if, (]
[>, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null, ), {, if, (]
[>, other, =, (, SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null, ), {, if, (]
[SparseFieldVector, <, T, >, ), obj, ;, if, (, field, ==, null, ), {, if, (, other, ., field, !=]
[), obj, ;, if, (, field, ==, null, ), {, if, (, other, ., field, !=, null, ), {, return]
[null, ), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (]
[), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !]
[), {, if, (, other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !]
[other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (]
[other, ., field, !=, null, ), {, return, false, ;, }, }, else, if, (, !, field, ., equals, (]
[return, false, ;, }, }, else, if, (, !, field, ., equals, (, other, ., field, ), ), {, return]
[else, if, (, !, field, ., equals, (, other, ., field, ), ), {, return, false, ;, }, if, (]
[else, if, (, !, field, ., equals, (, other, ., field, ), ), {, return, false, ;, }, if, (]
[(, !, field, ., equals, (, other, ., field, ), ), {, return, false, ;, }, if, (, virtualSize, !=]
[(, !, field, ., equals, (, other, ., field, ), ), {, return, false, ;, }, if, (, virtualSize, !=]
[other, ., field, ), ), {, return, false, ;, }, if, (, virtualSize, !=, other, ., virtualSize, ), {, return]
[(, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[(, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =]
[return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[return, false, ;, }, OpenIntToFieldHashMap, <, T, >, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[>, ., Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, other, ., getEntry, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =, other, ., getEntry, (]
[advance, (, ), ;, T, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (]
[(, ), ;, T, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, !]
[(, ), ;, T, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, !]
[test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, !, test, ., equals, (]
[test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, !, test, ., equals, (]
[(, ), ), ;, if, (, !, test, ., equals, (, iter, ., value, (, ), ), ), {, return]
[if, (, !, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }]
[!, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[!, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[!, test, ., equals, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[{, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[{, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, T, test, =]
[), ), {, iter, ., advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (]
[), {, iter, ., advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (, !]
[), {, iter, ., advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (, !]
[advance, (, ), ;, T, test, =, iter, ., value, (, ), ;, if, (, !, test, ., equals, (]
[), ;, T, test, =, iter, ., value, (, ), ;, if, (, !, test, ., equals, (, getEntry, (]
[), ;, T, test, =, iter, ., value, (, ), ;, if, (, !, test, ., equals, (, getEntry, (]
[;, if, (, !, test, ., equals, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return]
[., equals, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;, }, }, return]
