[;, private, static, final, int, DEFAULT_MAX_UNION_SIZE, =, 20, ;, private, final, JSTypeRegistry, registry, ;, private, final, List, <, JSType, >]
[;, private, final, JSTypeRegistry, registry, ;, private, final, List, <, JSType, >, alternates, =, Lists, ., newArrayList, (, ), ;]
[;, private, boolean, isAllType, =, false, ;, private, boolean, isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked, =, true, ;, private]
[., newArrayList, (, ), ;, private, boolean, isAllType, =, false, ;, private, boolean, isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked]
[;, private, boolean, isNativeUnknownType, =, false, ;, private, boolean, areAllUnknownsChecked, =, true, ;, private, final, int, maxUnionSize, ;, private, int]
[;, private, boolean, areAllUnknownsChecked, =, true, ;, private, final, int, maxUnionSize, ;, private, int, functionTypePosition, =, -, 1, ;, private]
[;, private, final, int, maxUnionSize, ;, private, int, functionTypePosition, =, -, 1, ;, private, JSType, result, =, null, ;, UnionTypeBuilder]
[;, private, JSType, result, =, null, ;, UnionTypeBuilder, (, JSTypeRegistry, registry, ), {, this, (, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;]
[;, private, JSType, result, =, null, ;, UnionTypeBuilder, (, JSTypeRegistry, registry, ), {, this, (, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;]
[;, UnionTypeBuilder, (, JSTypeRegistry, registry, ), {, this, (, registry, ,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,]
[,, DEFAULT_MAX_UNION_SIZE, ), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =, registry, ;]
[), ;, }, UnionTypeBuilder, (, JSTypeRegistry, registry, ,, int, maxUnionSize, ), {, this, ., registry, =, registry, ;, this, .]
[=, registry, ;, this, ., maxUnionSize, =, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType]
[., registry, =, registry, ;, this, ., maxUnionSize, =, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {]
[;, this, ., maxUnionSize, =, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion]
[=, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if]
[., maxUnionSize, =, maxUnionSize, ;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, )]
[;, }, Iterable, <, JSType, >, getAlternates, (, ), {, JSType, specialCaseType, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, specialCaseType]
[;, if, (, specialCaseType, !=, null, ), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return, Collections, .]
[), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }]
[!=, null, ), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return, Collections, ., unmodifiableList, (, alternates, )]
[), {, return, ImmutableList, ., of, (, specialCaseType, ), ;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }]
[;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (]
[., of, (, specialCaseType, ), ;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType]
[), ;, }, return, Collections, ., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if]
[;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return, this]
[., unmodifiableList, (, alternates, ), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (, alternate, ., isNoType, (]
[), ;, }, UnionTypeBuilder, addAlternate, (, JSType, alternate, ), {, if, (, alternate, ., isNoType, (, ), ), {, return]
[), {, return, this, ;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate]
[., isNoType, (, ), ), {, return, this, ;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;]
[;, }, isAllType, =, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType]
[=, isAllType, ||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||]
[;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked]
[||, alternate, ., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;]
[;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked]
[., isAllType, (, ), ;, boolean, isAlternateUnknown, =, alternate, instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (]
[;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (]
[instanceof, UnknownType, ;, isNativeUnknownType, =, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, .]
[=, isNativeUnknownType, ||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;]
[;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !]
[||, isAlternateUnknown, ;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if]
[;, if, (, isAlternateUnknown, ), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !]
[), {, areAllUnknownsChecked, =, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType]
[=, areAllUnknownsChecked, &&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if]
[;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {]
[&&, alternate, ., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate]
[;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {]
[., isCheckedUnknownType, (, ), ;, }, if, (, !, isAllType, &&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType]
[), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;]
[&&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType]
[&&, !, isNativeUnknownType, ), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType]
[), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;]
[), {, if, (, alternate, ., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;]
[), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :, union, ., getAlternates, (]
[., isUnionType, (, ), ), {, UnionType, union, =, alternate, ., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :]
[;, for, (, JSType, unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (, unionAlt, ), ;, }, }]
[., toMaybeUnionType, (, ), ;, for, (, JSType, unionAlt, :, union, ., getAlternates, (, ), ), {, addAlternate, (, unionAlt]
[), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize]
[., getAlternates, (, ), ), {, addAlternate, (, unionAlt, ), ;, }, }, else, {, if, (, alternates, ., size]
[;, }, }, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return, this, ;, }]
[), ;, }, }, else, {, if, (, alternates, ., size, (, ), >, maxUnionSize, ), {, return, this, ;]
[), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {]
[>, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1]
[., size, (, ), >, maxUnionSize, ), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&]
[), {, return, this, ;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {]
[;, }, if, (, alternate, ., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =, alternates]
[), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate]
[&&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, )]
[., isFunctionType, (, ), &&, functionTypePosition, !=, -, 1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, )]
[), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate]
[!=, -, 1, ), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType]
[), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate]
[), {, FunctionType, other, =, alternates, ., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate]
[;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set]
[., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, )]
[., get, (, functionTypePosition, ), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper]
[), ., toMaybeFunctionType, (, ), ;, FunctionType, supremum, =, alternate, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true]
[;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return, this, ;, }, int, currentIndex]
[., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null]
[., toMaybeFunctionType, (, ), ., supAndInfHelper, (, other, ,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, )]
[,, true, ), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return, this, ;]
[), ;, alternates, ., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return, this, ;, }, int]
[;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =]
[., set, (, functionTypePosition, ,, supremum, ), ;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0]
[,, supremum, ), ;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType]
[), ;, result, =, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it]
[=, null, ;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =, alternates, .]
[;, return, this, ;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =, alternates, ., iterator, (]
[;, }, int, currentIndex, =, 0, ;, Iterator, <, JSType, >, it, =, alternates, ., iterator, (, ), ;, while]
[;, Iterator, <, JSType, >, it, =, alternates, ., iterator, (, ), ;, while, (, it, ., hasNext, (, )]
[;, while, (, it, ., hasNext, (, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, .]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, boolean, removeCurrent, =, false, ;, JSType]
[), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;, if, (, alternate, .]
[., hasNext, (, ), ), {, boolean, removeCurrent, =, false, ;, JSType, current, =, it, ., next, (, ), ;]
[;, JSType, current, =, it, ., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||, current, .]
[;, if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, )]
[., next, (, ), ;, if, (, alternate, ., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||, alternate]
[), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if]
[||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this]
[||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (]
[||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {]
[||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current]
[||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate]
[., isUnknownType, (, ), ||, current, ., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType]
[||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current]
[., isUnknownType, (, ), ||, alternate, ., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes]
[||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {]
[., isNoResolvedType, (, ), ||, current, ., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes]
[||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (]
[., isNoResolvedType, (, ), ||, alternate, ., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (]
[||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this]
[., hasAnyTemplateTypes, (, ), ||, current, ., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (, current, )]
[), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if]
[., hasAnyTemplateTypes, (, ), ), {, if, (, alternate, ., isEquivalentTo, (, current, ), ), {, return, this, ;, }]
[), {, return, this, ;, }, }, else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, ., isParameterizedType]
[., isEquivalentTo, (, current, ), ), {, return, this, ;, }, }, else, {, if, (, alternate, ., isParameterizedType, (]
[), ), {, return, this, ;, }, }, else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, .]
[;, }, }, else, {, if, (, alternate, ., isParameterizedType, (, ), ||, current, ., isParameterizedType, (, ), ), {]
[), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (, alternate, ., isSubtype, (, current, )]
[||, current, ., isParameterizedType, (, ), ), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (]
[., isParameterizedType, (, ), ||, current, ., isParameterizedType, (, ), ), {, if, (, !, current, ., isParameterizedType, (, )]
[), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (, alternate, ., isSubtype, (, current, )]
[., isParameterizedType, (, ), ), {, if, (, !, current, ., isParameterizedType, (, ), ), {, if, (, alternate, .]
[), {, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (]
[), {, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (]
[., isParameterizedType, (, ), ), {, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }]
[), {, return, this, ;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (]
[., isSubtype, (, current, ), ), {, return, this, ;, }, }, else, if, (, !, alternate, ., isParameterizedType, (]
[), ), {, return, this, ;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if]
[;, }, }, else, if, (, !, alternate, ., isParameterizedType, (, ), ), {, if, (, current, ., isSubtype, (]
[), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {]
[), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {]
[., isParameterizedType, (, ), ), {, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;]
[), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&]
[., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (, current]
[), ), {, removeCurrent, =, true, ;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, )]
[=, true, ;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&, alternate, ., isParameterizedType]
[;, }, }, else, {, Preconditions, ., checkState, (, current, ., isParameterizedType, (, ), &&, alternate, ., isParameterizedType, (, )]
[;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if]
[., checkState, (, current, ., isParameterizedType, (, ), &&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate]
[), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;]
[&&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =]
[., isParameterizedType, (, ), &&, alternate, ., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, )]
[), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;]
[., isParameterizedType, (, ), ), ;, ParameterizedType, parameterizedAlternate, =, alternate, ., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, .]
[;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {]
[., toMaybeParameterizedType, (, ), ;, ParameterizedType, parameterizedCurrent, =, current, ., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (]
[;, if, (, parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;]
[., toMaybeParameterizedType, (, ), ;, if, (, parameterizedCurrent, ., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, .]
[), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;]
[., wrapsSameRawType, (, parameterizedAlternate, ), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent]
[), ), {, JSType, alternateTypeParameter, =, parameterizedAlternate, ., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, )]
[;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {]
[., getParameterType, (, ), ;, JSType, currentTypeParameter, =, parameterizedCurrent, ., getParameterType, (, ), ;, if, (, currentTypeParameter, ., isEquivalentTo, (]
[;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {, return, this, ;, }, else, {, JSType, merged, =]
[., getParameterType, (, ), ;, if, (, currentTypeParameter, ., isEquivalentTo, (, parameterizedCurrent, ), ), {, return, this, ;, }, else]
[), {, return, this, ;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (]
[., isEquivalentTo, (, parameterizedCurrent, ), ), {, return, this, ;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (]
[), ), {, return, this, ;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate]
[;, }, else, {, JSType, merged, =, parameterizedCurrent, ., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (, merged, ), ;, }]
[;, return, addAlternate, (, merged, ), ;, }, }, }, }, else, if, (, alternate, ., isSubtype, (, current, )]
[., getReferencedObjTypeInternal, (, ), ;, return, addAlternate, (, merged, ), ;, }, }, }, }, else, if, (, alternate, .]
[;, }, }, }, }, else, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;, }]
[), ;, }, }, }, }, else, if, (, alternate, ., isSubtype, (, current, ), ), {, return, this, ;]
[), {, return, this, ;, }, else, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true]
[., isSubtype, (, current, ), ), {, return, this, ;, }, else, if, (, current, ., isSubtype, (, alternate, )]
[), ), {, return, this, ;, }, else, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =]
[;, }, else, if, (, current, ., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, if]
[), {, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if]
[., isSubtype, (, alternate, ), ), {, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {, it, .]
[), ), {, removeCurrent, =, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;]
[=, true, ;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==]
[;, }, }, if, (, removeCurrent, ), {, it, ., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, )]
[), {, it, ., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;]
[;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition]
[., remove, (, ), ;, if, (, currentIndex, ==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if]
[), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex]
[==, functionTypePosition, ), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --]
[), {, functionTypePosition, =, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex]
[=, -, 1, ;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }]
[;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++]
[;, }, else, if, (, currentIndex, <, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++]
[), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (]
[<, functionTypePosition, ), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, .]
[), {, functionTypePosition, --, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (]
[;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions]
[--, ;, currentIndex, --, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {]
[;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (]
[--, ;, }, }, currentIndex, ++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState]
[;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, )]
[++, ;, }, if, (, alternate, ., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1]
[), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;]
[., isFunctionType, (, ), ), {, Preconditions, ., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, .]
[;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =, null]
[., checkState, (, functionTypePosition, ==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, .]
[), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =]
[==, -, 1, ), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, )]
[), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =]
[), ;, functionTypePosition, =, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =]
[=, alternates, ., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =, null, ;, }]
[;, }, alternates, ., add, (, alternate, ), ;, result, =, null, ;, }, }, else, {, result, =, null]
[., size, (, ), ;, }, alternates, ., add, (, alternate, ), ;, result, =, null, ;, }, }, else]
[;, result, =, null, ;, }, }, else, {, result, =, null, ;, }, return, this, ;, }, private, JSType]
[., add, (, alternate, ), ;, result, =, null, ;, }, }, else, {, result, =, null, ;, }, return]
[), ;, result, =, null, ;, }, }, else, {, result, =, null, ;, }, return, this, ;, }, private]
[=, null, ;, }, }, else, {, result, =, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (]
[;, }, }, else, {, result, =, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {]
[=, null, ;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return]
[;, }, return, this, ;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return, registry, .]
[;, }, private, JSType, reduceAlternatesWithoutUnion, (, ), {, if, (, isAllType, ), {, return, registry, ., getNativeType, (, ALL_TYPE, )]
[), {, return, registry, ., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked]
[;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, )]
[., getNativeType, (, ALL_TYPE, ), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry]
[), ;, }, else, if, (, isNativeUnknownType, ), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE]
[), {, if, (, areAllUnknownsChecked, ), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, registry]
[), {, return, registry, ., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, )]
[;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =, alternates]
[., getNativeType, (, CHECKED_UNKNOWN_TYPE, ), ;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else]
[), ;, }, else, {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =]
[;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if, (, size, >, maxUnionSize, )]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if]
[), ;, }, }, else, {, int, size, =, alternates, ., size, (, ), ;, if, (, size, >, maxUnionSize]
[;, if, (, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (]
[., size, (, ), ;, if, (, size, >, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;]
[), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return]
[>, maxUnionSize, ), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, )]
[), {, return, registry, ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return]
[;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==, 1]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else]
[), ;, }, else, if, (, size, >, 1, ), {, return, null, ;, }, else, if, (, size, ==]
[), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return, alternates, ., iterator, (, )]
[>, 1, ), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return, alternates, ., iterator]
[), {, return, null, ;, }, else, if, (, size, ==, 1, ), {, return, alternates, ., iterator, (, )]
[;, }, else, if, (, size, ==, 1, ), {, return, alternates, ., iterator, (, ), ., next, (, )]
[), {, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, registry, ., getNativeType]
[==, 1, ), {, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, registry]
[), {, return, alternates, ., iterator, (, ), ., next, (, ), ;, }, else, {, return, registry, ., getNativeType]
[;, }, else, {, return, registry, ., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {]
[., next, (, ), ;, }, else, {, return, registry, ., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType]
[., iterator, (, ), ., next, (, ), ;, }, else, {, return, registry, ., getNativeType, (, NO_TYPE, ), ;]
[;, }, }, }, JSType, build, (, ), {, if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion, (]
[., getNativeType, (, NO_TYPE, ), ;, }, }, }, JSType, build, (, ), {, if, (, result, ==, null, )]
[), ;, }, }, }, JSType, build, (, ), {, if, (, result, ==, null, ), {, result, =, reduceAlternatesWithoutUnion]
[), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new, UnionType, (]
[==, null, ), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new]
[), {, result, =, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new, UnionType, (]
[=, reduceAlternatesWithoutUnion, (, ), ;, if, (, result, ==, null, ), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy]
[;, if, (, result, ==, null, ), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;]
[), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;, }, }, return, result, ;, }]
[==, null, ), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;, }, }, return, result]
[), {, result, =, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;, }, }, return, result, ;, }]
[=, new, UnionType, (, registry, ,, getAlternateListCopy, (, ), ), ;, }, }, return, result, ;, }, private, Collection, <]
[;, }, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return, ImmutableList, ., copyOf]
[,, getAlternateListCopy, (, ), ), ;, }, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, )]
[), ;, }, }, return, result, ;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return, ImmutableList, .]
[;, }, private, Collection, <, JSType, >, getAlternateListCopy, (, ), {, return, ImmutableList, ., copyOf, (, alternates, ), ;, }]
[;, }, }]
[., copyOf, (, alternates, ), ;, }, }]
[), ;, }, }]
