[;, private, static, final, long, serialVersionUID, =, 2401296428283614780L, ;, private, static, final, double, [, ], EXPONENTIAL_SA_QI, ;, private, final, double]
[;, private, static, final, double, [, ], EXPONENTIAL_SA_QI, ;, private, final, double, mean, ;, private, final, double, solverAbsoluteAccuracy, ;, static]
[;, double, qi, =, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, )]
[., log, (, 2, ), ;, double, qi, =, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =]
[), ;, double, qi, =, 0, ;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20]
[;, int, i, =, 1, ;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <]
[;, final, ResizableDoubleArray, ra, =, new, ResizableDoubleArray, (, 20, ), ;, while, (, qi, <, 1, ), {, qi, +=]
[;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils]
[), ;, while, (, qi, <, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /]
[), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;]
[<, 1, ), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i]
[), {, qi, +=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;]
[+=, FastMath, ., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement]
[;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;]
[/, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI]
[., pow, (, LN2, ,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi]
[,, i, ), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i]
[), /, CombinatoricsUtils, ., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }]
[;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;]
[., factorial, (, i, ), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra]
[), ;, ra, ., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, )]
[;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, )]
[., addElement, (, qi, ), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public]
[), ;, ++, i, ;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean]
[;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (]
[;, }, EXPONENTIAL_SA_QI, =, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (]
[=, ra, ., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (, mean, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY]
[;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (, mean, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ExponentialDistribution, (]
[., getElements, (, ), ;, }, public, ExponentialDistribution, (, double, mean, ), {, this, (, mean, ,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ExponentialDistribution, (, double, mean, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (]
[), ;, }, public, ExponentialDistribution, (, double, mean, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[,, mean, ,, inverseCumAccuracy, ), ;, }, public, ExponentialDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws]
[,, inverseCumAccuracy, ), ;, }, public, ExponentialDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, ExponentialDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[), ;, if, (, mean, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =, mean, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., MEAN, ,, mean, ), ;, }, this, ., mean, =, mean, ;]
[;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return]
[,, mean, ), ;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (]
[., MEAN, ,, mean, ), ;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double]
[), ;, }, this, ., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {]
[=, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double]
[., mean, =, mean, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, density, (]
[=, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, density, (, double, x]
[;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, density, (, double, x, ), {]
[;, }, public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;]
[), {, return, 0, ;, }, return, FastMath, ., exp, (, -, x, /, mean, ), /, mean, ;, }]
[<, 0, ), {, return, 0, ;, }, return, FastMath, ., exp, (, -, x, /, mean, ), /, mean]
[), {, return, 0, ;, }, return, FastMath, ., exp, (, -, x, /, mean, ), /, mean, ;, }]
[;, }, return, FastMath, ., exp, (, -, x, /, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0.0, ), {]
[/, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0.0]
[., exp, (, -, x, /, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {]
[), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[/, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[/, mean, ), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[), /, mean, ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0.0, ), {]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /]
[<=, 0.0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -]
[), {, ret, =, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /]
[=, 0.0, ;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /, mean, ), ;]
[;, }, else, {, ret, =, 1.0, -, FastMath, ., exp, (, -, x, /, mean, ), ;, }, return]
[=, 1.0, -, FastMath, ., exp, (, -, x, /, mean, ), ;, }, return, ret, ;, }, @, Override]
[;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret]
[-, FastMath, ., exp, (, -, x, /, mean, ), ;, }, return, ret, ;, }, @, Override, public, double]
[;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret]
[., exp, (, -, x, /, mean, ), ;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (]
[), ;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double]
[/, mean, ), ;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException]
[/, mean, ), ;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException]
[), ;, }, return, ret, ;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double]
[;, }, @, Override, public, double, inverseCumulativeProbability, (, double, p, ), throws, OutOfRangeException, {, double, ret, ;, if, (, p]
[), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if]
[<, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if]
[), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p]
[), {, throw, new, OutOfRangeException, (, p, ,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0]
[;, }, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret]
[,, 0.0, ,, 1.0, ), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY]
[,, 1.0, ), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }]
[), ;, }, else, if, (, p, ==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (]
[==, 1.0, ), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, .]
[), {, ret, =, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (]
[=, Double, ., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (, 1.0, -, p]
[;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (, 1.0, -, p, ), ;, }, return]
[., POSITIVE_INFINITY, ;, }, else, {, ret, =, -, mean, *, FastMath, ., log, (, 1.0, -, p, ), ;]
[=, -, mean, *, FastMath, ., log, (, 1.0, -, p, ), ;, }, return, ret, ;, }, @, Override]
[;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;, double]
[*, FastMath, ., log, (, 1.0, -, p, ), ;, }, return, ret, ;, }, @, Override, public, double, sample]
[*, FastMath, ., log, (, 1.0, -, p, ), ;, }, return, ret, ;, }, @, Override, public, double, sample]
[;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;, double]
[., log, (, 1.0, -, p, ), ;, }, return, ret, ;, }, @, Override, public, double, sample, (, )]
[), ;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;]
[-, p, ), ;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =]
[), ;, }, return, ret, ;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;]
[;, }, @, Override, public, double, sample, (, ), {, double, a, =, 0, ;, double, u, =, random, .]
[;, double, u, =, random, ., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI]
[;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }]
[., nextDouble, (, ), ;, while, (, u, <, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u]
[), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;]
[<, 0.5, ), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -]
[), {, a, +=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;]
[+=, EXPONENTIAL_SA_QI, [, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u]
[;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ]]
[[, 0, ], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI]
[], ;, u, *=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0]
[*=, 2, ;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {]
[;, }, u, +=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean]
[+=, u, -, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a]
[;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +, u, ), ;]
[-, 1, ;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +, u]
[;, if, (, u, <=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +, u, ), ;]
[), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2, =]
[<=, EXPONENTIAL_SA_QI, [, 0, ], ), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =]
[), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2, =]
[[, 0, ], ), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;]
[], ), {, return, mean, *, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2]
[;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2]
[*, (, a, +, u, ), ;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (]
[;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2]
[), ;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =]
[+, u, ), ;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double]
[), ;, }, int, i, =, 0, ;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =]
[;, double, u2, =, random, ., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++, i, ;]
[;, double, umin, =, u2, ;, do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if]
[., nextDouble, (, ), ;, double, umin, =, u2, ;, do, {, ++, i, ;, u2, =, random, ., nextDouble]
[;, do, {, ++, i, ;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, )]
[;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;]
[;, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;]
[=, random, ., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }]
[;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, []
[., nextDouble, (, ), ;, if, (, u2, <, umin, ), {, umin, =, u2, ;, }, }, while, (]
[), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean]
[<, umin, ), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;]
[), {, umin, =, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean]
[=, u2, ;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a]
[;, }, }, while, (, u, >, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +, umin]
[), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected]
[>, EXPONENTIAL_SA_QI, [, i, ], ), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], )]
[), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected]
[[, i, ], ), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }]
[], ), ;, return, mean, *, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[*, (, a, +, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, )]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[+, umin, *, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[*, EXPONENTIAL_SA_QI, [, 0, ], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[[, 0, ], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double]
[], ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (]
[;, }, public, double, getNumericalMean, (, ), {, return, getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, m, =, getMean, (, ), ;, return, m, *, m]
[;, return, m, *, m, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[*, m, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
