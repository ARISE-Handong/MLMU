[;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =]
[., createDelegateSuffix, (, "Proxy", ), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;]
[), ;, static, final, DiagnosticType, MALFORMED_TYPEDEF, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER]
[;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =]
[., warning, (, "JSC_MALFORMED_TYPEDEF", ,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum"]
[,, "Typedef for {0} does not have any type information", ), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final]
[), ;, static, final, DiagnosticType, ENUM_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER]
[;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =]
[., warning, (, "JSC_ENUM_INITIALIZER_NOT_ENUM", ,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration"]
[,, "enum initializer must be an object literal or an enum", ), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final]
[), ;, static, final, DiagnosticType, CTOR_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER]
[;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =]
[., warning, (, "JSC_CTOR_INITIALIZER_NOT_CTOR", ,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration"]
[,, "Constructor {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final]
[), ;, static, final, DiagnosticType, IFACE_INITIALIZER, =, DiagnosticType, ., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED]
[;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =]
[., warning, (, "JSC_IFACE_INITIALIZER_NOT_IFACE", ,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument"]
[,, "Interface {0} must be initialized at declaration", ), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final]
[), ;, static, final, DiagnosticType, CONSTRUCTOR_EXPECTED, =, DiagnosticType, ., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS]
[;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =]
[., warning, (, "JSC_REFLECT_CONSTRUCTOR_EXPECTED", ,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation."]
[,, "Constructor expected as first argument", ), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final]
[), ;, static, final, DiagnosticType, UNKNOWN_LENDS, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT]
[;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}.", ), ;, private, final, AbstractCompiler, compiler, ;]
[., warning, (, "JSC_UNKNOWN_LENDS", ,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}."]
[,, "Variable {0} not declared before @lends annotation.", ), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}.", ), ;, private, final]
[), ;, static, final, DiagnosticType, LENDS_ON_NON_OBJECT, =, DiagnosticType, ., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}.", ), ;, private, final, AbstractCompiler, compiler]
[;, private, final, AbstractCompiler, compiler, ;, private, final, ErrorReporter, typeParsingErrorReporter, ;, private, final, TypeValidator, validator, ;, private, final, CodingConvention, codingConvention]
[., warning, (, "JSC_LENDS_ON_NON_OBJECT", ,, "May only lend properties to object types. {0} has type {1}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, ErrorReporter, typeParsingErrorReporter, ;, private, final]
[,, "May only lend properties to object types. {0} has type {1}.", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, ErrorReporter, typeParsingErrorReporter, ;, private, final, TypeValidator, validator, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, ErrorReporter, typeParsingErrorReporter, ;, private, final, TypeValidator, validator, ;, private, final, CodingConvention]
[;, private, final, Map, <, String, ,, String, >, delegateCallingConventions, =, Maps, ., newHashMap, (, ), ;, private, final, Map]
[., newArrayList, (, ), ;, private, final, Map, <, String, ,, String, >, delegateCallingConventions, =, Maps, ., newHashMap, (, )]
[;, private, final, Map, <, Node, ,, AstFunctionContents, >, functionAnalysisResults, =, Maps, ., newHashMap, (, ), ;, private, final, ObjectType]
[., newHashMap, (, ), ;, private, final, Map, <, Node, ,, AstFunctionContents, >, functionAnalysisResults, =, Maps, ., newHashMap, (, )]
[;, private, final, ObjectType, unknownType, ;, private, class, DeferredSetType, {, final, Node, node, ;, final, JSType, type, ;, DeferredSetType, (]
[., newHashMap, (, ), ;, private, final, ObjectType, unknownType, ;, private, class, DeferredSetType, {, final, Node, node, ;, final, JSType]
[;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type, ;]
[., checkNotNull, (, node, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this]
[), ;, Preconditions, ., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type]
[;, this, ., node, =, node, ;, this, ., type, =, type, ;, node, ., setJSType, (, type, ), ;]
[., checkNotNull, (, type, ), ;, this, ., node, =, node, ;, this, ., type, =, type, ;, node, .]
[), ;, this, ., node, =, node, ;, this, ., type, =, type, ;, node, ., setJSType, (, type, )]
[=, node, ;, this, ., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (]
[., node, =, node, ;, this, ., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void]
[;, this, ., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope]
[=, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, .]
[., type, =, type, ;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {]
[;, node, ., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (]
[;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (, type, ., resolve, (, typeParsingErrorReporter, ,, scope]
[., setJSType, (, type, ), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (, type, .]
[), ;, }, void, resolve, (, Scope, scope, ), {, node, ., setJSType, (, type, ., resolve, (, typeParsingErrorReporter, ,]
[;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, compiler, ., getCodingConvention, (, ), ), ;]
[., setJSType, (, type, ., resolve, (, typeParsingErrorReporter, ,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, )]
[), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, compiler, ., getCodingConvention, (, ), )]
[., resolve, (, typeParsingErrorReporter, ,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler]
[,, scope, ), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, compiler, ., getCodingConvention]
[), ), ;, }, }, TypedScopeCreator, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, compiler, ., getCodingConvention, (, )]
[,, compiler, ., getCodingConvention, (, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, .]
[), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =, compiler, ;, this, .]
[., getCodingConvention, (, ), ), ;, }, TypedScopeCreator, (, AbstractCompiler, compiler, ,, CodingConvention, codingConvention, ), {, this, ., compiler, =]
[=, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this]
[., compiler, =, compiler, ;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention]
[;, this, ., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry]
[=, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry]
[., validator, =, compiler, ., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler]
[;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter]
[., getTypeValidator, (, ), ;, this, ., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, )]
[=, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter]
[., codingConvention, =, codingConvention, ;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry]
[;, this, ., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, )]
[=, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType]
[., typeRegistry, =, compiler, ., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this]
[;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE]
[., getTypeRegistry, (, ), ;, this, ., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry]
[=, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @]
[., typeParsingErrorReporter, =, typeRegistry, ., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;]
[;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, Scope, createScope, (, Node]
[., getErrorReporter, (, ), ;, this, ., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public]
[=, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, Scope, createScope, (, Node, root, ,, Scope, parent]
[., unknownType, =, typeRegistry, ., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, Scope, createScope, (, Node, root, ,]
[;, }, @, Override, public, Scope, createScope, (, Node, root, ,, Scope, parent, ), {, Scope, newScope, =, null, ;]
[., getNativeObjectType, (, UNKNOWN_TYPE, ), ;, }, @, Override, public, Scope, createScope, (, Node, root, ,, Scope, parent, ), {]
[), ;, }, @, Override, public, Scope, createScope, (, Node, root, ,, Scope, parent, ), {, Scope, newScope, =, null]
[;, AbstractScopeBuilder, scopeBuilder, =, null, ;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (]
[;, if, (, parent, ==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;]
[), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, )]
[==, null, ), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (]
[), {, JSType, globalThis, =, typeRegistry, ., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, )]
[;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root]
[., getNativeObjectType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, )]
[), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;]
[., GLOBAL_THIS, ), ;, root, ., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis]
[;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (]
[., setJSType, (, globalThis, ), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild]
[), ;, root, ., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType]
[;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, )]
[., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer]
[., getFirstChild, (, ), ., setJSType, (, globalThis, ), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, )]
[), ;, root, ., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults]
[;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,, root]
[., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, .]
[., getLastChild, (, ), ., setJSType, (, globalThis, ), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), .]
[), ;, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,]
[;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder]
[., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (]
[), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope]
[,, functionAnalysisResults, ), ), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;]
[), ), ., process, (, root, ., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =]
[,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder]
[., getFirstChild, (, ), ,, root, ., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder]
[), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =]
[., getLastChild, (, ), ), ;, newScope, =, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope]
[=, createInitialScope, (, root, ), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal]
[;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, GlobalScopeBuilder, globalScopeBuilder, =, new, GlobalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler]
[;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope]
[), ;, scopeBuilder, =, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {]
[=, globalScopeBuilder, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (]
[;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (]
[., traverse, (, compiler, ,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (, parent, ,]
[,, root, ,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder]
[,, scopeBuilder, ), ;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =]
[), ;, }, else, {, newScope, =, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder]
[=, new, Scope, (, parent, ,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =]
[;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;]
[,, root, ), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build]
[), ;, LocalScopeBuilder, localScopeBuilder, =, new, LocalScopeBuilder, (, newScope, ), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, )]
[;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, .]
[), ;, scopeBuilder, =, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder]
[=, localScopeBuilder, ;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (]
[;, localScopeBuilder, ., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;]
[;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder]
[., build, (, ), ;, }, scopeBuilder, ., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;, for, (]
[;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =]
[., resolveStubDeclarations, (, ), ;, scopeBuilder, ., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, )]
[;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;]
[., resolveTypes, (, ), ;, for, (, Node, functionNode, :, scopeBuilder, ., nonExternFunctions, ), {, JSType, type, =, functionNode, .]
[), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (, type, !=, null, &&, type, ., isFunctionType]
[., nonExternFunctions, ), {, JSType, type, =, functionNode, ., getJSType, (, ), ;, if, (, type, !=, null, &&, type]
[;, if, (, type, !=, null, &&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType]
[., getJSType, (, ), ;, if, (, type, !=, null, &&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;]
[&&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =]
[!=, null, &&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType]
[&&, type, ., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =]
[), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;]
[., isFunctionType, (, ), ), {, FunctionType, fnType, =, type, ., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, .]
[;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {]
[., toMaybeFunctionType, (, ), ;, JSType, fnThisType, =, fnType, ., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType]
[;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild]
[., getTypeOfThis, (, ), ;, if, (, !, fnThisType, ., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler]
[), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType]
[), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType]
[., isUnknownType, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, .]
[;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes]
[., traverse, (, compiler, ,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;]
[,, functionNode, ., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if]
[,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {]
[., getLastChild, (, ), ,, scopeBuilder, ., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent]
[), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,]
[., new, CollectProperties, (, fnThisType, ), ), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, .]
[), ), ;, }, }, }, if, (, parent, ==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope]
[), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }]
[==, null, ), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope]
[), {, codingConvention, ., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }]
[;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (]
[., defineDelegateProxyPrototypeProperties, (, typeRegistry, ,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (]
[,, newScope, ,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node]
[,, delegateProxyPrototypes, ,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, )]
[,, delegateCallingConventions, ), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions]
[), ;, }, return, newScope, ;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState]
[;, }, void, patchGlobalScope, (, Scope, globalScope, ,, Node, scriptRoot, ), {, Preconditions, ., checkState, (, scriptRoot, ., isScript, (]
[;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String]
[., checkState, (, scriptRoot, ., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState]
[), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;]
[., isScript, (, ), ), ;, Preconditions, ., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal]
[;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot]
[., checkNotNull, (, globalScope, ), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =]
[), ;, Preconditions, ., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (]
[;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (]
[., checkState, (, globalScope, ., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;]
[), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for]
[., isGlobal, (, ), ), ;, String, scriptName, =, NodeUtil, ., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (]
[;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet]
[., getSourceName, (, scriptRoot, ), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, .]
[), ;, Preconditions, ., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, .]
[;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (]
[., checkNotNull, (, scriptName, ), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, )]
[), ;, for, (, Node, node, :, ImmutableList, ., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if]
[), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove]
[., copyOf, (, functionAnalysisResults, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName]
[), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, .]
[., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, NodeUtil, ., getSourceName, (, node, ), )]
[), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), )]
[., equals, (, NodeUtil, ., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }]
[), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, )]
[., getSourceName, (, node, ), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer]
[), ), ), {, functionAnalysisResults, ., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults]
[;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, ), ;]
[., remove, (, node, ), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (]
[), ;, }, }, (, new, FirstOrderFunctionAnalyzer, (, compiler, ,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, )]
[;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =, Lists]
[., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;]
[), ., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, )]
[,, functionAnalysisResults, ), ), ., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =, globalScope, .]
[), ), ., process, (, null, ,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (]
[,, scriptRoot, ), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;, List, <, Var, >]
[), ;, Iterator, <, Var, >, varIter, =, globalScope, ., getVars, (, ), ;, List, <, Var, >, varsToRemove, =]
[;, List, <, Var, >, varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (, varIter, ., hasNext, (, )]
[., getVars, (, ), ;, List, <, Var, >, varsToRemove, =, Lists, ., newArrayList, (, ), ;, while, (, varIter]
[;, while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if]
[., newArrayList, (, ), ;, while, (, varIter, ., hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next]
[), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (, scriptName, ., equals, (, oldVar, ., getInputName]
[., hasNext, (, ), ), {, Var, oldVar, =, varIter, ., next, (, ), ;, if, (, scriptName, ., equals]
[;, if, (, scriptName, ., equals, (, oldVar, ., getInputName, (, ), ), ), {, varsToRemove, ., add, (, oldVar]
[., next, (, ), ;, if, (, scriptName, ., equals, (, oldVar, ., getInputName, (, ), ), ), {, varsToRemove]
[), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope]
[., equals, (, oldVar, ., getInputName, (, ), ), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }]
[), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {]
[., getInputName, (, ), ), ), {, varsToRemove, ., add, (, oldVar, ), ;, }, }, for, (, Var, var]
[;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;, globalScope, .]
[., add, (, oldVar, ), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (]
[), ;, }, }, for, (, Var, var, :, varsToRemove, ), {, globalScope, ., undeclare, (, var, ), ;, globalScope]
[), {, globalScope, ., undeclare, (, var, ), ;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty]
[;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), ), ;]
[., undeclare, (, var, ), ;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (, var, .]
[), ;, globalScope, ., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), )]
[;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder]
[., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;]
[., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder]
[., getTypeOfThis, (, ), ., toObjectType, (, ), ., removeProperty, (, var, ., getName, (, ), ), ;, }, GlobalScopeBuilder]
[), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,]
[., getName, (, ), ), ;, }, GlobalScopeBuilder, scopeBuilder, =, new, GlobalScopeBuilder, (, globalScope, ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node]
[;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new]
[., traverse, (, compiler, ,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {]
[,, scriptRoot, ,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (]
[,, scopeBuilder, ), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, @, VisibleForTesting, Scope, createInitialScope, (, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[., traverse, (, compiler, ,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope]
[,, root, ,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;]
[,, new, DiscoverEnumsAndTypedefs, (, typeRegistry, ), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (]
[), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType]
[), ), ;, Scope, s, =, Scope, ., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;]
[;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE]
[., createGlobalScope, (, root, ), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;]
[), ;, declareNativeFunctionType, (, s, ,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE]
[,, ARRAY_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE]
[,, BOOLEAN_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE]
[,, DATE_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE]
[,, ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE]
[,, EVAL_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE]
[,, FUNCTION_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE]
[,, NUMBER_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE]
[,, OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE]
[,, RANGE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE]
[,, REFERENCE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE]
[,, REGEXP_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE]
[,, STRING_OBJECT_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (]
[), ;, declareNativeFunctionType, (, s, ,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined"]
[,, SYNTAX_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (]
[), ;, declareNativeFunctionType, (, s, ,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,]
[;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s]
[,, TYPE_ERROR_FUNCTION_TYPE, ), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;]
[), ;, declareNativeFunctionType, (, s, ,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (]
[;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return]
[,, URI_ERROR_FUNCTION_TYPE, ), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE]
[), ;, declareNativeValueType, (, s, ,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;]
[;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope]
[,, "undefined", ,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private]
[,, VOID_TYPE, ), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private, void, declareNativeFunctionType]
[), ;, declareNativeValueType, (, s, ,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope]
[;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry]
[,, "ActiveXObject", ,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, )]
[,, FUNCTION_INSTANCE_TYPE, ), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType]
[), ;, return, s, ;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =]
[;, }, private, void, declareNativeFunctionType, (, Scope, scope, ,, JSTypeNative, tId, ), {, FunctionType, t, =, typeRegistry, ., getNativeFunctionType, (]
[;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (]
[., getNativeFunctionType, (, tId, ), ;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,]
[), ;, declareNativeType, (, scope, ,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType]
[;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,, t, ., getPrototype, (, )]
[,, t, ., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,, t, .]
[,, t, ), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,, t, .]
[., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (]
[., getInstanceType, (, ), ., getReferenceName, (, ), ,, t, ), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (]
[), ;, declareNativeType, (, scope, ,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,, t, ., getPrototype, (]
[;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope, ,]
[,, t, ., getPrototype, (, ), ., getReferenceName, (, ), ,, t, ., getPrototype, (, ), ), ;, }, private]
[,, t, ., getPrototype, (, ), ), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative]
[., getReferenceName, (, ), ,, t, ., getPrototype, (, ), ), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,]
[., getPrototype, (, ), ., getReferenceName, (, ), ,, t, ., getPrototype, (, ), ), ;, }, private, void, declareNativeValueType]
[), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, ), {, declareNativeType, (, scope]
[., getPrototype, (, ), ), ;, }, private, void, declareNativeValueType, (, Scope, scope, ,, String, name, ,, JSTypeNative, tId, )]
[;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare, (]
[,, name, ,, typeRegistry, ., getNativeType, (, tId, ), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String]
[,, typeRegistry, ., getNativeType, (, tId, ), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,]
[), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, ., declare]
[., getNativeType, (, tId, ), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t]
[), ), ;, }, private, void, declareNativeType, (, Scope, scope, ,, String, name, ,, JSType, t, ), {, scope, .]
[;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry, registry, ), {]
[., declare, (, name, ,, null, ,, t, ,, null, ,, false, ), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends]
[,, null, ,, t, ,, null, ,, false, ), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final]
[,, t, ,, null, ,, false, ), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry]
[,, null, ,, false, ), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs]
[,, false, ), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry]
[), ;, }, private, static, class, DiscoverEnumsAndTypedefs, extends, AbstractShallowStatementCallback, {, private, final, JSTypeRegistry, registry, ;, DiscoverEnumsAndTypedefs, (, JSTypeRegistry, registry, )]
[=, registry, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {]
[., registry, =, registry, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, node, ,, Node, parent, ), {, Node, nameNode]
[;, switch, (, node, ., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =]
[), {, case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=]
[., getType, (, ), ), {, case, Token, ., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (]
[:, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, .]
[., VAR, :, for, (, Node, child, =, node, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, .]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (]
[;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (]
[;, child, =, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,]
[=, child, ., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, .]
[), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;]
[., getNext, (, ), ), {, identifyNameNode, (, child, ,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (]
[;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (]
[,, child, ., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token]
[,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =]
[., getFirstChild, (, ), ,, NodeUtil, ., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token, ., EXPR_RESULT]
[), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if]
[., getBestJSDocInfo, (, child, ), ), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, .]
[), ), ;, }, break, ;, case, Token, ., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;]
[:, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode]
[., EXPR_RESULT, :, Node, firstChild, =, node, ., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), )]
[;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, .]
[., getFirstChild, (, ), ;, if, (, firstChild, ., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (]
[), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (]
[., isAssign, (, ), ), {, identifyNameNode, (, firstChild, ., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,]
[;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, break, ;]
[,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild]
[., getFirstChild, (, ), ,, firstChild, ., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else]
[,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,, firstChild, ., getJSDocInfo]
[., getLastChild, (, ), ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,, null]
[), ;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, break]
[., getJSDocInfo, (, ), ), ;, }, else, {, identifyNameNode, (, firstChild, ,, null, ,, firstChild, ., getJSDocInfo, (, )]
[;, }, break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,, Node, valueNode, ,, JSDocInfo, info, ), {]
[,, null, ,, firstChild, ., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, private, void, identifyNameNode, (, Node]
[,, firstChild, ., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,]
[), ;, }, break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,, Node, valueNode, ,, JSDocInfo, info, )]
[., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, private, void, identifyNameNode, (, Node, nameNode, ,, Node, valueNode]
[), {, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, .]
[., isQualifiedName, (, ), ), {, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, )]
[), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, )]
[!=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName]
[), {, if, (, info, ., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, )]
[), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType]
[., hasEnumParameterType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if]
[;, }, else, if, (, info, ., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (]
[., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), )]
[), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName]
[., getQualifiedName, (, ), ), ;, }, else, if, (, info, ., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName]
[), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, JSType]
[., hasTypedefType, (, ), ), {, registry, ., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, }, }]
[;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return, typeRegistry, ., getNativeType, (, nativeType]
[., identifyNonNullableName, (, nameNode, ., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative]
[), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return, typeRegistry, ., getNativeType, (]
[., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, JSType, getNativeType, (, JSTypeNative, nativeType, ), {, return]
[;, }, private, abstract, class, AbstractScopeBuilder, implements, NodeTraversal, ., Callback, {, final, Scope, scope, ;, private, final, List, <, DeferredSetType]
[., getNativeType, (, nativeType, ), ;, }, private, abstract, class, AbstractScopeBuilder, implements, NodeTraversal, ., Callback, {, final, Scope, scope, ;]
[), ;, }, private, abstract, class, AbstractScopeBuilder, implements, NodeTraversal, ., Callback, {, final, Scope, scope, ;, private, final, List, <]
[;, private, final, List, <, Node, >, nonExternFunctions, =, Lists, ., newArrayList, (, ), ;, private, List, <, Node, >]
[., newArrayList, (, ), ;, private, final, List, <, Node, >, nonExternFunctions, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, List, <, Node, >, lentObjectLiterals, =, null, ;, private, final, List, <, StubDeclaration, >, stubDeclarations, =, Lists, .]
[., newArrayList, (, ), ;, private, List, <, Node, >, lentObjectLiterals, =, null, ;, private, final, List, <, StubDeclaration, >]
[;, private, final, List, <, StubDeclaration, >, stubDeclarations, =, Lists, ., newArrayList, (, ), ;, private, String, sourceName, =, null]
[;, private, String, sourceName, =, null, ;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope, ), {, this, .]
[., newArrayList, (, ), ;, private, String, sourceName, =, null, ;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope]
[;, private, InputId, inputId, ;, private, AbstractScopeBuilder, (, Scope, scope, ), {, this, ., scope, =, scope, ;, }, void]
[=, scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (, new, DeferredSetType]
[., scope, =, scope, ;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (]
[;, }, void, setDeferredType, (, Node, node, ,, JSType, type, ), {, deferredSetTypes, ., add, (, new, DeferredSetType, (, node]
[;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve, (, scope]
[., add, (, new, DeferredSetType, (, node, ,, type, ), ), ;, }, void, resolveTypes, (, ), {, for, (]
[), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve, (]
[,, type, ), ), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred]
[), ), ;, }, void, resolveTypes, (, ), {, for, (, DeferredSetType, deferred, :, deferredSetTypes, ), {, deferred, ., resolve]
[), {, deferred, ., resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (]
[;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (, vars, ., hasNext, (]
[., resolve, (, scope, ), ;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (, ), ;, while]
[), ;, }, Iterator, <, Var, >, vars, =, scope, ., getVars, (, ), ;, while, (, vars, ., hasNext]
[;, while, (, vars, ., hasNext, (, ), ), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, )]
[., getVars, (, ), ;, while, (, vars, ., hasNext, (, ), ), {, vars, ., next, (, ), .]
[), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }, typeRegistry, ., resolveTypesInScope, (, scope, )]
[., hasNext, (, ), ), {, vars, ., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }, typeRegistry, .]
[;, }, typeRegistry, ., resolveTypesInScope, (, scope, ), ;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[., resolveType, (, typeParsingErrorReporter, ), ;, }, typeRegistry, ., resolveTypesInScope, (, scope, ), ;, }, @, Override, public, final, boolean]
[., next, (, ), ., resolveType, (, typeParsingErrorReporter, ), ;, }, typeRegistry, ., resolveTypesInScope, (, scope, ), ;, }, @]
[), ;, }, typeRegistry, ., resolveTypesInScope, (, scope, ), ;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t]
[;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId]
[., resolveTypesInScope, (, scope, ), ;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, }, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[=, t, ., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, )]
[;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (]
[., getInputId, (, ), ;, if, (, n, ., isFunction, (, ), ||, n, ., isScript, (, ), ), {]
[), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean]
[||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName]
[., isFunction, (, ), ||, n, ., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName]
[), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean]
[., isScript, (, ), ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n]
[;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent]
[., checkNotNull, (, inputId, ), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent]
[), ;, sourceName, =, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !]
[=, NodeUtil, ., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction]
[;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, .]
[., getSourceName, (, n, ), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, )]
[), ;, }, boolean, descend, =, parent, ==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent]
[;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child]
[||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (]
[||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, .]
[==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, .]
[||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend]
[||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend]
[., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, )]
[||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (]
[==, parent, ., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {]
[||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (]
[., getFirstChild, (, ), ||, parent, ==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (]
[;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child]
[==, scope, ., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, )]
[;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child]
[., getRootNode, (, ), ;, if, (, descend, ), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {]
[), {, if, (, NodeUtil, ., isStatementParent, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild]
[), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child]
[., isStatementParent, (, n, ), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[), ), {, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, )]
[;, child, =, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {]
[=, child, ., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (]
[), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (, child, ), ;, }, }, }]
[., getNext, (, ), ), {, if, (, NodeUtil, ., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (, child, )]
[), {, defineFunctionLiteral, (, child, ), ;, }, }, }, }, return, descend, ;, }, @, Override, public, void, visit]
[., isHoistedFunctionDeclaration, (, child, ), ), {, defineFunctionLiteral, (, child, ), ;, }, }, }, }, return, descend, ;, }]
[), ), {, defineFunctionLiteral, (, child, ), ;, }, }, }, }, return, descend, ;, }, @, Override, public, void]
[;, }, }, }, }, return, descend, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, }, }, }, }, return, descend, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, inputId, =]
[=, t, ., getInputId, (, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (, n, ., getType, (]
[;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, .]
[., getInputId, (, ), ;, attachLiteralTypes, (, t, ,, n, ), ;, switch, (, n, ., getType, (, ), )]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n]
[,, n, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,]
[), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,]
[., getType, (, ), ), {, case, Token, ., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;]
[:, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case]
[., CALL, :, checkForClassDefiningCalls, (, t, ,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break]
[;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput]
[,, n, ,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :]
[,, parent, ), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (]
[), ;, checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, .]
[;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !, t]
[,, delegateCallingConventions, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null]
[), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !]
[:, if, (, t, ., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (]
[., FUNCTION, :, if, (, t, ., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), .]
[), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), )]
[||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;]
[==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n]
[., getInput, (, ), ==, null, ||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions]
[||, !, t, ., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;]
[), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), )]
[), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), )]
[., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration]
[., getInput, (, ), ., isExtern, (, ), ), {, nonExternFunctions, ., add, (, n, ), ;, }, if, (]
[;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break]
[., add, (, n, ), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (]
[), ;, }, if, (, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (, n, ), ;, }]
[), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, .]
[), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, .]
[., isHoistedFunctionDeclaration, (, n, ), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :]
[), ), {, defineFunctionLiteral, (, n, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if]
[:, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, .]
[., ASSIGN, :, Node, firstChild, =, n, ., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&]
[;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[., getFirstChild, (, ), ;, if, (, firstChild, ., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {]
[), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (]
[&&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,]
[., isGetProp, (, ), &&, firstChild, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (]
[), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (]
[., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,]
[;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR]
[,, n, ., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break]
[,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :]
[., getJSDocInfo, (, ), ,, firstChild, ,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case]
[,, n, ,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (]
[,, firstChild, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, )]
[), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break, ;, case, Token, .]
[., getNext, (, ), ), ;, }, break, ;, case, Token, ., CATCH, :, defineCatch, (, n, ), ;, break]
[:, defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;]
[., CATCH, :, defineCatch, (, n, ), ;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;]
[;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :]
[), ;, break, ;, case, Token, ., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP]
[:, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, )]
[., VAR, :, defineVar, (, n, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult]
[;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (]
[), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName]
[:, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,]
[., GETPROP, :, if, (, parent, ., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (]
[), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }]
[&&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,]
[., isExprResult, (, ), &&, n, ., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (]
[), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }]
[., isQualifiedName, (, ), ), {, maybeDeclareQualifiedName, (, t, ,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,]
[;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n]
[,, n, ., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (]
[,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=]
[., getJSDocInfo, (, ), ,, n, ,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, .]
[,, parent, ,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&]
[,, null, ), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, .]
[), ;, }, break, ;, }, if, (, n, ., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (]
[), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }, lentObjectLiterals, ., clear, (]
[&&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }]
[&&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, )]
[!=, null, &&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :]
[., getParent, (, ), !=, null, &&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for]
[&&, NodeUtil, ., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, )]
[&&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }]
[., isStatement, (, n, ), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral]
[), &&, lentObjectLiterals, !=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;]
[), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }, lentObjectLiterals, ., clear, (]
[!=, null, ), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }, lentObjectLiterals, .]
[), {, for, (, Node, objLit, :, lentObjectLiterals, ), {, defineObjectLiteral, (, objLit, ), ;, }, lentObjectLiterals, ., clear, (]
[), {, defineObjectLiteral, (, objLit, ), ;, }, lentObjectLiterals, ., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (]
[;, }, lentObjectLiterals, ., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, )]
[), ;, }, lentObjectLiterals, ., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n]
[;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (, n, ., getType, (]
[., clear, (, ), ;, }, }, private, void, attachLiteralTypes, (, NodeTraversal, t, ,, Node, n, ), {, switch, (]
[), {, case, Token, ., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case]
[., getType, (, ), ), {, case, Token, ., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), )]
[:, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :, n, .]
[., NULL, :, n, ., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :]
[;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;]
[., setJSType, (, getNativeType, (, NULL_TYPE, ), ), ;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (]
[), ;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break]
[), ), ;, break, ;, case, Token, ., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;]
[:, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :, n, .]
[., VOID, :, n, ., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :]
[;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;]
[., setJSType, (, getNativeType, (, VOID_TYPE, ), ), ;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (]
[), ;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break]
[), ), ;, break, ;, case, Token, ., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;]
[:, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :, n, .]
[., STRING, :, n, ., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :]
[;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;]
[., setJSType, (, getNativeType, (, STRING_TYPE, ), ), ;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (]
[), ;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break]
[), ), ;, break, ;, case, Token, ., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;]
[:, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token]
[., NUMBER, :, n, ., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :]
[;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE]
[., setJSType, (, getNativeType, (, NUMBER_TYPE, ), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE]
[), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (]
[), ), ;, break, ;, case, Token, ., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType]
[:, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token]
[., TRUE, :, case, Token, ., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;]
[:, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :, n, .]
[., FALSE, :, n, ., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :]
[;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;]
[., setJSType, (, getNativeType, (, BOOLEAN_TYPE, ), ), ;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (]
[), ;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break]
[), ), ;, break, ;, case, Token, ., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;]
[:, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info]
[., REGEXP, :, n, ., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :]
[;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info]
[., setJSType, (, getNativeType, (, REGEXP_TYPE, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[), ), ;, break, ;, case, Token, ., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if]
[:, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (]
[., OBJECTLIT, :, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, .]
[;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {]
[), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, .]
[&&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists]
[!=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals]
[&&, info, ., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists]
[), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, .]
[!=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }]
[., getLendsName, (, ), !=, null, ), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList]
[), {, if, (, lentObjectLiterals, ==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, .]
[), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else]
[==, null, ), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;]
[), {, lentObjectLiterals, =, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else]
[=, Lists, ., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else, {, defineObjectLiteral, (]
[;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else, {, defineObjectLiteral, (, n, ), ;, }, break, ;]
[., newArrayList, (, ), ;, }, lentObjectLiterals, ., add, (, n, ), ;, }, else, {, defineObjectLiteral, (, n, )]
[;, }, else, {, defineObjectLiteral, (, n, ), ;, }, break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit]
[., add, (, n, ), ;, }, else, {, defineObjectLiteral, (, n, ), ;, }, break, ;, }, }, private]
[), ;, }, else, {, defineObjectLiteral, (, n, ), ;, }, break, ;, }, }, private, void, defineObjectLiteral, (, Node]
[;, }, break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit, ), {, JSType, type, =, null, ;, JSDocInfo]
[), ;, }, break, ;, }, }, private, void, defineObjectLiteral, (, Node, objectLit, ), {, JSType, type, =, null, ;]
[;, JSDocInfo, info, =, objectLit, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (]
[;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, &&, info, ., getLendsName, (, ), !=, null, ), {]
[), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, )]
[&&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var]
[!=, null, &&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, )]
[&&, info, ., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var]
[), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, )]
[!=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (]
[., getLendsName, (, ), !=, null, ), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =]
[), {, String, lendsName, =, info, ., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, )]
[;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, .]
[., getLendsName, (, ), ;, Var, lendsVar, =, scope, ., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null]
[;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,]
[., getVar, (, lendsName, ), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make]
[), ;, if, (, lendsVar, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;]
[==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, )]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;]
[;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {, type]
[., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {]
[), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {]
[., make, (, sourceName, ,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, .]
[,, objectLit, ,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;]
[,, UNKNOWN_LENDS, ,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (]
[,, lendsName, ), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==]
[), ), ;, }, else, {, type, =, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, )]
[=, lendsVar, ., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if]
[;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (]
[., getType, (, ), ;, if, (, type, ==, null, ), {, type, =, unknownType, ;, }, if, (, !]
[), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, )]
[==, null, ), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (]
[), {, type, =, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, )]
[=, unknownType, ;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {]
[;, }, if, (, !, type, ., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, .]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, .]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, .]
[., isSubtype, (, typeRegistry, ., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (]
[), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type]
[., getNativeType, (, OBJECT_TYPE, ), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,]
[), ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,]
[;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =]
[., report, (, JSError, ., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, )]
[), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info]
[., make, (, sourceName, ,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type]
[,, objectLit, ,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }]
[,, LENDS_ON_NON_OBJECT, ,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {]
[,, lendsName, ,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {, objectLit, .]
[,, type, ., toString, (, ), ), ), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (]
[), ), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }]
[., toString, (, ), ), ), ;, type, =, null, ;, }, else, {, objectLit, ., setJSType, (, type, )]
[=, null, ;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, .]
[;, }, else, {, objectLit, ., setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (]
[;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (]
[., setJSType, (, type, ), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue]
[), ;, }, }, }, info, =, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue]
[=, NodeUtil, ., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName]
[;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, )]
[., getBestJSDocInfo, (, objectLit, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil]
[), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue]
[;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=]
[., getBestLValue, (, objectLit, ), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false]
[), ;, String, lValueName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info]
[;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type]
[., getBestLValueName, (, lValue, ), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType]
[), ;, boolean, createdEnumType, =, false, ;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {]
[;, if, (, info, !=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,]
[), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }]
[&&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, )]
[!=, null, &&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,]
[&&, info, ., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, )]
[), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }]
[., hasEnumParameterType, (, ), ), {, type, =, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType]
[=, createEnumTypeFromNodes, (, objectLit, ,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type]
[;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info]
[,, lValueName, ,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {]
[,, info, ,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =]
[,, lValue, ), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, .]
[), ;, createdEnumType, =, true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (]
[=, true, ;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;]
[;, }, if, (, type, ==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType]
[), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties]
[==, null, ), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, )]
[), {, type, =, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties]
[=, typeRegistry, ., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,]
[;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType]
[., createAnonymousObjectType, (, info, ), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, .]
[), ;, }, setDeferredType, (, objectLit, ,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, .]
[;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !, createdEnumType, ), ;]
[,, type, ), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !]
[), ;, processObjectLitProperties, (, objectLit, ,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !, createdEnumType, )]
[;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode, =]
[,, ObjectType, ., cast, (, objectLit, ., getJSType, (, ), ), ,, !, createdEnumType, ), ;, }, void, processObjectLitProperties, (]
[,, !, createdEnumType, ), ;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for]
[., cast, (, objectLit, ., getJSType, (, ), ), ,, !, createdEnumType, ), ;, }, void, processObjectLitProperties, (, Node, objLit]
[), ,, !, createdEnumType, ), ;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {]
[., getJSType, (, ), ), ,, !, createdEnumType, ), ;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,]
[), ;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode]
[), ;, }, void, processObjectLitProperties, (, Node, objLit, ,, ObjectType, objLitType, ,, boolean, declareOnOwner, ), {, for, (, Node, keyNode]
[;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild]
[., getFirstChild, (, ), ;, keyNode, !=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value]
[;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String]
[!=, null, ;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, )]
[;, keyNode, =, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String]
[=, keyNode, ., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =]
[), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, keyNode, )]
[., getNext, (, ), ), {, Node, value, =, keyNode, ., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, .]
[;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;]
[., getFirstChild, (, ), ;, String, memberName, =, NodeUtil, ., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, .]
[;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, )]
[., getObjectLitKeyName, (, keyNode, ), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (]
[), ;, JSDocInfo, info, =, keyNode, ., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (]
[;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType]
[., getJSDocInfo, (, ), ;, JSType, valueType, =, getDeclaredType, (, keyNode, ., getSourceFileName, (, ), ,, info, ,, keyNode, ,]
[;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :]
[,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType]
[., getSourceFileName, (, ), ,, info, ,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, )]
[,, keyNode, ,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, )]
[,, value, ), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType]
[), ;, JSType, keyType, =, objLitType, ., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, )]
[;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred]
[?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;]
[., isEnumType, (, ), ?, objLitType, ., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode]
[:, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;]
[., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), :, NodeUtil, ., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName]
[;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred]
[., getObjectLitKeyTypeFromValueType, (, keyNode, ,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (]
[,, valueType, ), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, )]
[), ;, String, qualifiedName, =, NodeUtil, ., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean]
[;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit]
[., getBestLValueName, (, keyNode, ), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;]
[), ;, if, (, qualifiedName, !=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,]
[), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred]
[!=, null, ), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType]
[), {, boolean, inferred, =, keyType, ==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred]
[;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=]
[==, null, ;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (]
[;, defineSlot, (, keyNode, ,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=]
[;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (]
[,, objLit, ,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType]
[,, qualifiedName, ,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode]
[,, keyType, ,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType]
[,, inferred, ), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;]
[), ;, }, else, if, (, keyType, !=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if]
[), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&]
[!=, null, ), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=]
[), {, setDeferredType, (, keyNode, ,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&]
[;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, .]
[,, keyType, ), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern]
[), ;, }, if, (, keyType, !=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode]
[), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode]
[&&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType]
[&&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty]
[!=, null, &&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType]
[&&, objLitType, !=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty]
[&&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType]
[!=, null, &&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName]
[&&, declareOnOwner, ), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType]
[), {, boolean, isExtern, =, keyNode, ., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode]
[;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode, ), ;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String]
[., isFromExterns, (, ), ;, objLitType, ., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode, ), ;, }, }, }, private]
[;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType, jsType]
[., defineDeclaredProperty, (, memberName, ,, keyType, ,, keyNode, ), ;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,]
[,, keyType, ,, keyNode, ), ;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo]
[,, keyNode, ), ;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, )]
[), ;, }, }, }, private, JSType, getDeclaredTypeInAnnotation, (, String, sourceName, ,, Node, node, ,, JSDocInfo, info, ), {, JSType]
[;, Node, objNode, =, node, ., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info]
[?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?]
[., isGetProp, (, ), ?, node, ., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent]
[:, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :]
[., getFirstChild, (, ), :, NodeUtil, ., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, .]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info]
[?, node, ., getParent, (, ), :, null, ;, if, (, info, !=, null, ), {, if, (, info, .]
[., isObjectLitKey, (, node, ,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;]
[,, node, ., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=]
[), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=, null, ), {, if, (, info]
[., getParent, (, ), ), ?, node, ., getParent, (, ), :, null, ;, if, (, info, !=, null, )]
[:, null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType]
[., getParent, (, ), :, null, ;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (]
[;, if, (, info, !=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info]
[), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info, ., getType, (, ), ., evaluate]
[!=, null, ), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info, ., getType, (, )]
[), {, if, (, info, ., hasType, (, ), ), {, jsType, =, info, ., getType, (, ), ., evaluate]
[), {, jsType, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if]
[., hasType, (, ), ), {, jsType, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, )]
[=, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, .]
[;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (]
[., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {]
[., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (]
[,, typeRegistry, ), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node]
[), ;, }, else, if, (, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName]
[), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info]
[., isFunctionTypeDeclaration, (, info, ), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (]
[), ), {, String, fnName, =, node, ., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,]
[;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,, node, ), ;, }, }, return, jsType, ;, }]
[., getQualifiedName, (, ), ;, jsType, =, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,, node, ), ;, }, }]
[=, createFunctionTypeFromNodes, (, null, ,, fnName, ,, info, ,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode]
[;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState]
[,, fnName, ,, info, ,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,]
[,, info, ,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type]
[,, node, ), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {]
[), ;, }, }, return, jsType, ;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, .]
[;, }, void, assertDefinitionNode, (, Node, n, ,, int, type, ), {, Preconditions, ., checkState, (, sourceName, !=, null, )]
[;, Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n]
[., checkState, (, sourceName, !=, null, ), ;, Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, )]
[), ;, Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node]
[!=, null, ), ;, Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch]
[), ;, Preconditions, ., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node]
[;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node, catchName]
[., checkState, (, n, ., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {]
[), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node]
[==, type, ), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, )]
[., getType, (, ), ==, type, ), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,]
[), ;, }, void, defineCatch, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., CATCH, ), ;, Node]
[;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,]
[,, Token, ., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n]
[), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName]
[., CATCH, ), ;, Node, catchName, =, n, ., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType]
[;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null]
[., getFirstChild, (, ), ;, defineSlot, (, catchName, ,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, )]
[;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo, info]
[,, n, ,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }]
[,, getDeclaredType, (, sourceName, ,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }, void, defineVar]
[), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;, JSDocInfo]
[,, catchName, ., getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, )]
[,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token]
[., getJSDocInfo, (, ), ,, catchName, ,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode]
[,, null, ), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR]
[), ), ;, }, void, defineVar, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., VAR, ), ;]
[;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if]
[,, Token, ., VAR, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild]
[), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {]
[., VAR, ), ;, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, )]
[;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {, compiler, ., report]
[., getJSDocInfo, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, )]
[), {, if, (, info, !=, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n]
[., hasMoreThanOneChild, (, ), ), {, if, (, info, !=, null, ), {, compiler, ., report, (, JSError, ., make]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for]
[!=, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for]
[;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,, n, ,]
[., report, (, JSError, ., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name]
[), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,, n]
[., make, (, sourceName, ,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :, n, ., children]
[,, n, ,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {]
[,, MULTIPLE_VAR_DEF, ), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (]
[), ), ;, }, for, (, Node, name, :, n, ., children, (, ), ), {, defineName, (, name, ,]
[), {, defineName, (, name, ,, n, ,, name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node]
[., children, (, ), ), {, defineName, (, name, ,, n, ,, name, ., getJSDocInfo, (, ), ), ;, }]
[;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,]
[,, n, ,, name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild]
[,, name, ., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, )]
[), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName, (, name, ,, n]
[., getJSDocInfo, (, ), ), ;, }, }, else, {, Node, name, =, n, ., getFirstChild, (, ), ;, defineName]
[;, defineName, (, name, ,, n, ,, (, info, !=, null, ), ?, info, :, name, ., getJSDocInfo, (, )]
[., getFirstChild, (, ), ;, defineName, (, name, ,, n, ,, (, info, !=, null, ), ?, info, :, name]
[;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;, Node]
[,, n, ,, (, info, !=, null, ), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }]
[,, (, info, !=, null, ), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral]
[), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;]
[?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode]
[), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {]
[!=, null, ), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n]
[), ?, info, :, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {]
[:, name, ., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n]
[), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token, ., FUNCTION, ), ;]
[., getJSDocInfo, (, ), ), ;, }, }, void, defineFunctionLiteral, (, Node, n, ), {, assertDefinitionNode, (, n, ,, Token]
[;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, )]
[,, Token, ., FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil]
[), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n]
[., FUNCTION, ), ;, Node, lValue, =, NodeUtil, ., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo]
[;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, )]
[., getBestLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil]
[), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue]
[;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,]
[., getBestJSDocInfo, (, n, ), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes]
[), ;, String, functionName, =, NodeUtil, ., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName]
[;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType]
[., getBestLValueName, (, lValue, ), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;]
[), ;, FunctionType, functionType, =, createFunctionTypeFromNodes, (, n, ,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,]
[;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (]
[,, functionName, ,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration]
[,, info, ,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n]
[,, lValue, ), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[), ;, setDeferredType, (, n, ,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot]
[;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,, n]
[,, functionType, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (]
[), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,]
[), {, defineSlot, (, n, ., getFirstChild, (, ), ,, n, ,, functionType, ), ;, }, }, private, void, defineName]
[., isFunctionDeclaration, (, n, ), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,, n, ,, functionType, ), ;]
[), ), {, defineSlot, (, n, ., getFirstChild, (, ), ,, n, ,, functionType, ), ;, }, }, private, void]
[;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info, ), {, Node, value, =]
[,, n, ,, functionType, ), ;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info]
[., getFirstChild, (, ), ,, n, ,, functionType, ), ;, }, }, private, void, defineName, (, Node, name, ,, Node]
[,, functionType, ), ;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info, ), {]
[), ;, }, }, private, void, defineName, (, Node, name, ,, Node, var, ,, JSDocInfo, info, ), {, Node, value]
[;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if, (, type, ==, null]
[., getFirstChild, (, ), ;, JSType, type, =, getDeclaredType, (, sourceName, ,, info, ,, name, ,, value, ), ;, if]
[;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;]
[,, info, ,, name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns]
[,, name, ,, value, ), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, )]
[,, value, ), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType]
[), ;, if, (, type, ==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null]
[), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var]
[==, null, ), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name]
[), {, type, =, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var]
[=, name, ., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var, ,, type, )]
[;, }, defineSlot, (, name, ,, var, ,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo]
[?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var, ,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (]
[., isFromExterns, (, ), ?, unknownType, :, null, ;, }, defineSlot, (, name, ,, var, ,, type, ), ;, }]
[:, null, ;, }, defineSlot, (, name, ,, var, ,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type]
[;, }, defineSlot, (, name, ,, var, ,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo]
[;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (, info, !=]
[,, var, ,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, )]
[,, type, ), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if]
[), ;, }, private, boolean, shouldUseFunctionLiteralType, (, FunctionType, type, ,, JSDocInfo, info, ,, Node, lValue, ), {, if, (, info]
[), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, .]
[!=, null, ), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,]
[), {, return, true, ;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, .]
[;, }, if, (, lValue, !=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), )]
[), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, ), ;]
[&&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return]
[!=, null, &&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;]
[&&, NodeUtil, ., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return]
[), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, ), ;]
[., isObjectLitKey, (, lValue, ,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return, scope, .]
[,, lValue, ., getParent, (, ), ), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||]
[), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, )]
[., getParent, (, ), ), ), {, return, false, ;, }, return, scope, ., isGlobal, (, ), ||, !, type]
[;, }, return, scope, ., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, ), ;, }, private, FunctionType, createFunctionTypeFromNodes]
[;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node, rValue, ,, @, Nullable, String, name, ,, @, Nullable, JSDocInfo, info]
[||, !, type, ., isReturnTypeInferred, (, ), ;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node, rValue, ,, @, Nullable]
[., isGlobal, (, ), ||, !, type, ., isReturnTypeInferred, (, ), ;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node]
[;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node, rValue, ,, @, Nullable, String, name, ,, @, Nullable, JSDocInfo, info]
[;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node, rValue, ,, @, Nullable, String, name, ,, @, Nullable, JSDocInfo, info]
[., isReturnTypeInferred, (, ), ;, }, private, FunctionType, createFunctionTypeFromNodes, (, @, Nullable, Node, rValue, ,, @, Nullable, String, name, ,]
[;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[&&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, )]
[&&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar]
[!=, null, &&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope]
[&&, rValue, ., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar]
[&&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, )]
[., isQualifiedName, (, ), &&, scope, ., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[., isGlobal, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;]
[;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&, var, ., getType, (, )]
[., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (]
[), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&, var, ., getType, (]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), !=, null, &&]
[), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, .]
[&&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, )]
[&&, var, ., getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {]
[!=, null, &&, var, ., getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, )]
[&&, var, ., getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {]
[&&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, )]
[!=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType]
[., getType, (, ), !=, null, &&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType]
[&&, var, ., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, )]
[), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, .]
[., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType, (, ), ;, if]
[., getType, (, ), ., isFunctionType, (, ), ), {, FunctionType, aliasedType, =, var, ., getType, (, ), ., toMaybeFunctionType]
[;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, .]
[., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), )]
[., getType, (, ), ., toMaybeFunctionType, (, ), ;, if, (, (, aliasedType, ., isConstructor, (, ), ||, aliasedType, .]
[), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry]
[&&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope]
[), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&]
[||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;]
[., isConstructor, (, ), ||, aliasedType, ., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {]
[), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&]
[., isInterface, (, ), ), &&, !, aliasedType, ., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (]
[), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry]
[), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry]
[., isNativeObjectType, (, ), ), {, functionType, =, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (]
[=, aliasedType, ;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (]
[;, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,]
[), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if]
[&&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), )]
[!=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (]
[&&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), )]
[), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if]
[., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }]
[;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode]
[., declareType, (, name, ,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==]
[,, functionType, ., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node]
[), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?]
[., getInstanceType, (, ), ), ;, }, }, }, }, if, (, functionType, ==, null, ), {, Node, errorRoot, =]
[), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&]
[==, null, ), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=]
[), {, Node, errorRoot, =, rValue, ==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&]
[;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue]
[?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot]
[==, null, ?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;]
[?, lvalueNode, :, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot]
[:, rValue, ;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral]
[;, boolean, isFnLiteral, =, rValue, !=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue]
[;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, )]
[&&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral]
[!=, null, &&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode]
[&&, rValue, ., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral]
[;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, )]
[., isFunction, (, ), ;, Node, fnRoot, =, isFnLiteral, ?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue]
[;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock]
[?, rValue, :, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :]
[:, null, ;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;]
[;, Node, parametersNode, =, isFnLiteral, ?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock]
[;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=, null, &&]
[?, rValue, ., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, .]
[:, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=]
[., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;]
[., getFirstChild, (, ), ., getNext, (, ), :, null, ;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (]
[;, Node, fnBlock, =, isFnLiteral, ?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=, null, &&]
[;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType]
[?, parametersNode, ., getNext, (, ), :, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, )]
[:, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =, info]
[., getNext, (, ), :, null, ;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {]
[;, if, (, info, !=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType]
[), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =]
[&&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope]
[!=, null, &&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate]
[&&, info, ., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope]
[), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =]
[., hasType, (, ), ), {, JSType, type, =, info, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry]
[;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =]
[., evaluate, (, scope, ,, typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, .]
[., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;]
[,, typeRegistry, ), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), )]
[), ;, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType]
[=, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =, type, .]
[;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, .]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (]
[), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if]
[., isFunctionType, (, ), ), {, functionType, =, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, )]
[=, type, ., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==]
[;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =]
[., toMaybeFunctionType, (, ), ;, functionType, ., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==, null, )]
[;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;]
[., setJSDocInfo, (, info, ), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, .]
[), ;, }, }, if, (, functionType, ==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, )]
[), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode]
[==, null, ), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName]
[), {, Node, ownerNode, =, NodeUtil, ., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode]
[;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =, null]
[., getBestLValueOwner, (, lvalueNode, ), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null]
[), ;, String, ownerName, =, NodeUtil, ., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =]
[;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=]
[., getBestLValueName, (, ownerNode, ), ;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null]
[), ;, Var, ownerVar, =, null, ;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName]
[;, String, propName, =, null, ;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =]
[;, ObjectType, ownerType, =, null, ;, if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName]
[;, if, (, ownerName, !=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar]
[), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =]
[!=, null, ), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {]
[), {, ownerVar, =, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =]
[=, scope, ., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast]
[;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), )]
[., getVar, (, ownerName, ), ;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar]
[), ;, if, (, ownerVar, !=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, )]
[), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=]
[!=, null, ), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (]
[), {, ownerType, =, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=]
[=, ObjectType, ., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=, null, ), {]
[;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (, ownerName, ., length, (, )]
[., cast, (, ownerVar, ., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =]
[), ;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (, ownerName, ., length, (]
[., getType, (, ), ), ;, }, if, (, name, !=, null, ), {, propName, =, name, ., substring, (]
[), {, propName, =, name, ., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType]
[!=, null, ), {, propName, =, name, ., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }]
[), {, propName, =, name, ., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType]
[=, name, ., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null]
[;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {, overriddenType]
[., substring, (, ownerName, ., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if]
[), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {]
[+, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null]
[., length, (, ), +, 1, ), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null]
[), ;, }, }, FunctionType, overriddenType, =, null, ;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {]
[;, if, (, ownerType, !=, null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, )]
[), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,]
[&&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new]
[!=, null, &&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder]
[&&, propName, !=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new]
[), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,]
[!=, null, ), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (]
[), {, overriddenType, =, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,]
[=, findOverriddenFunction, (, ownerType, ,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot]
[;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents]
[,, propName, ), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope]
[), ;, }, FunctionTypeBuilder, builder, =, new, FunctionTypeBuilder, (, name, ,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), .]
[;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, .]
[., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType]
[., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=]
[., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false]
[., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (]
[., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, )]
[,, compiler, ,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (]
[,, errorRoot, ,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,]
[,, sourceName, ,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, )]
[,, scope, ), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName]
[), ., setContents, (, getFunctionAnalysisResults, (, fnRoot, ), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info]
[), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance]
[), ), ., inferFromOverriddenFunction, (, overriddenType, ,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), .]
[,, parametersNode, ), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean]
[), ., inferTemplateTypeName, (, info, ), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =]
[), ., inferReturnType, (, info, ), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType]
[), ., inferInheritance, (, info, ), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, .]
[), ;, boolean, searchedForThisType, =, false, ;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType]
[;, if, (, ownerType, !=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType]
[), {, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType]
[&&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,, ownerType, .]
[&&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, .]
[!=, null, &&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {]
[&&, ownerType, ., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, .]
[&&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,, ownerType, .]
[., isFunctionPrototypeType, (, ), &&, ownerType, ., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (]
[), {, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType]
[., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (]
[., getOwnerFunction, (, ), ., hasInstanceType, (, ), ), {, builder, ., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (]
[;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {]
[., inferThisType, (, info, ,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;]
[,, ownerType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (]
[), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), )]
[., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, .]
[., getOwnerFunction, (, ), ., getInstanceType, (, ), ), ;, searchedForThisType, =, true, ;, }, else, if, (, ownerNode, !=]
[=, true, ;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType]
[;, }, else, if, (, ownerNode, !=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode]
[), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null]
[&&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType]
[!=, null, &&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder]
[&&, ownerNode, ., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType]
[), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null]
[., isThis, (, ), ), {, JSType, injectedThisType, =, ownerNode, ., getJSType, (, ), ;, builder, ., inferThisType, (, info]
[;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;]
[., getJSType, (, ), ;, builder, ., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, )]
[;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }]
[., inferThisType, (, info, ,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =]
[,, injectedThisType, ==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if]
[), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;]
[?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, )]
[==, null, ?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !]
[?, scope, ., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, )]
[:, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info]
[., getTypeOfThis, (, ), :, injectedThisType, ), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder]
[), ;, searchedForThisType, =, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;]
[=, true, ;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =]
[;, }, if, (, !, searchedForThisType, ), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =, builder, .]
[), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, )]
[), {, builder, ., inferThisType, (, info, ), ;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, )]
[;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, ), ;, }, }, return]
[., inferThisType, (, info, ), ;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (]
[), ;, }, functionType, =, builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, ), ;, }, }]
[=, builder, ., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, ), ;, }, }, return, functionType, ;, }]
[;, }, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType]
[., buildAndRegister, (, ), ;, }, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName]
[., inferParameterTypes, (, parametersNode, ,, info, ), ., buildAndRegister, (, ), ;, }, }, return, functionType, ;, }, private, FunctionType]
[,, info, ), ., buildAndRegister, (, ), ;, }, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType]
[), ., buildAndRegister, (, ), ;, }, }, return, functionType, ;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String]
[;, }, private, FunctionType, findOverriddenFunction, (, ObjectType, ownerType, ,, String, propName, ), {, JSType, propType, =, ownerType, ., getPropertyType, (]
[;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, )]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (]
[), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces]
[&&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (]
[!=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {]
[&&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (]
[), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces]
[., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface]
[;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, .]
[., toMaybeFunctionType, (, ), ;, }, else, {, for, (, ObjectType, iface, :, ownerType, ., getCtorImplementedInterfaces, (, ), ), {]
[), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType]
[., getCtorImplementedInterfaces, (, ), ), {, propType, =, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null]
[=, iface, ., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), )]
[;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, )]
[., getPropertyType, (, propName, ), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return]
[), ;, if, (, propType, !=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (]
[), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return, null, ;, }, private, EnumType, createEnumTypeFromNodes, (]
[&&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return, null]
[!=, null, &&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }]
[&&, propType, ., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return, null]
[), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return, null, ;, }, private, EnumType, createEnumTypeFromNodes, (]
[., isFunctionType, (, ), ), {, return, propType, ., toMaybeFunctionType, (, ), ;, }, }, }, return, null, ;, }]
[;, }, }, }, return, null, ;, }, private, EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String, name, ,, JSDocInfo, info]
[., toMaybeFunctionType, (, ), ;, }, }, }, return, null, ;, }, private, EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String]
[;, }, private, EnumType, createEnumTypeFromNodes, (, Node, rValue, ,, String, name, ,, JSDocInfo, info, ,, Node, lValueNode, ), {, Preconditions]
[;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue]
[., checkNotNull, (, info, ), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =]
[), ;, Preconditions, ., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (]
[;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var]
[., checkState, (, info, ., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null]
[), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {]
[., hasEnumParameterType, (, ), ), ;, EnumType, enumType, =, null, ;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName]
[;, if, (, rValue, !=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[&&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, )]
[!=, null, &&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName]
[&&, rValue, ., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, )]
[), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=]
[., isQualifiedName, (, ), ), {, Var, var, =, scope, ., getVar, (, rValue, ., getQualifiedName, (, ), ), ;]
[;, if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType]
[., getVar, (, rValue, ., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (]
[), ;, if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (]
[., getQualifiedName, (, ), ), ;, if, (, var, !=, null, &&, var, ., getType, (, ), instanceof, EnumType, )]
[), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null]
[&&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, )]
[!=, null, &&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType]
[&&, var, ., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, )]
[), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null]
[instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType]
[., getType, (, ), instanceof, EnumType, ), {, enumType, =, (, EnumType, ), var, ., getType, (, ), ;, }]
[=, (, EnumType, ), var, ., getType, (, ), ;, }, }, if, (, enumType, ==, null, ), {, JSType]
[;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate]
[;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate]
[., getType, (, ), ;, }, }, if, (, enumType, ==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType]
[), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =]
[==, null, ), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[), {, JSType, elementsType, =, info, ., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =]
[;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&]
[., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, )]
[., getEnumParameterType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,]
[,, typeRegistry, ), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue]
[), ;, enumType, =, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null]
[=, typeRegistry, ., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, .]
[;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild]
[., createEnumType, (, name, ,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (]
[,, rValue, ,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node]
[,, elementsType, ), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =]
[), ;, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, .]
[), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName]
[&&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key]
[!=, null, &&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while]
[&&, rValue, ., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key]
[), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName]
[., isObjectLit, (, ), ), {, Node, key, =, rValue, ., getFirstChild, (, ), ;, while, (, key, !=, null]
[;, while, (, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (]
[., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key]
[), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler]
[!=, null, ), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, )]
[), {, String, keyName, =, NodeUtil, ., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler]
[;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,]
[., getStringValue, (, key, ), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make]
[), ;, if, (, keyName, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;]
[==, null, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, )]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;]
[;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, .]
[., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if]
[), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError]
[., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, .]
[,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, )]
[,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {]
[,, keyName, ), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, .]
[), ), ;, }, else, if, (, !, codingConvention, ., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;]
[., isValidEnumKey, (, keyName, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT]
[), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), )]
[;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =, key, ., getNext, (]
[., report, (, JSError, ., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {]
[), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =, key, ., getNext]
[., make, (, sourceName, ,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (]
[,, key, ,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, )]
[,, ENUM_NOT_CONSTANT, ,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }]
[,, keyName, ), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =]
[), ), ;, }, else, {, enumType, ., defineElement, (, keyName, ,, key, ), ;, }, key, =, key, .]
[;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&, scope]
[., defineElement, (, keyName, ,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }]
[,, key, ), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=]
[), ;, }, key, =, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&]
[=, key, ., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (]
[;, }, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType]
[., getNext, (, ), ;, }, }, }, if, (, name, !=, null, &&, scope, ., isGlobal, (, ), )]
[), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), ), ;, }, return, enumType, ;, }]
[&&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), )]
[!=, null, &&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (]
[&&, scope, ., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), )]
[), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), ), ;, }, return, enumType, ;, }]
[., isGlobal, (, ), ), {, typeRegistry, ., declareType, (, name, ,, enumType, ., getElementsType, (, ), ), ;, }]
[;, }, return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {]
[., declareType, (, name, ,, enumType, ., getElementsType, (, ), ), ;, }, return, enumType, ;, }, private, void, defineSlot]
[,, enumType, ., getElementsType, (, ), ), ;, }, return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,]
[), ;, }, return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, )]
[., getElementsType, (, ), ), ;, }, return, enumType, ;, }, private, void, defineSlot, (, Node, name, ,, Node, parent]
[;, }, private, void, defineSlot, (, Node, name, ,, Node, parent, ,, JSType, type, ), {, defineSlot, (, name, ,]
[;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions, .]
[,, parent, ,, type, ,, type, ==, null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,]
[,, type, ,, type, ==, null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type]
[,, type, ==, null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean]
[), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions]
[==, null, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, )]
[), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, JSType, type, ,, boolean, inferred, ), {, Preconditions]
[;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||]
[., checkArgument, (, inferred, ||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions]
[), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, )]
[||, type, !=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent]
[), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, )]
[!=, null, ), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction]
[), ;, if, (, n, ., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, )]
[), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, .]
[., isName, (, ), ), {, Preconditions, ., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (]
[;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, )]
[., checkArgument, (, parent, ., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, )]
[), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (]
[||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, )]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument]
[||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;]
[., isFunction, (, ), ||, parent, ., isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch]
[||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument]
[., isVar, (, ), ||, parent, ., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else]
[||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, )]
[., isParamList, (, ), ||, parent, ., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n]
[), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (]
[., isCatch, (, ), ), ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), &&, (]
[;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, ), ;, }]
[., checkArgument, (, n, ., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (]
[), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, ), ;]
[&&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n]
[., isGetProp, (, ), &&, (, parent, ., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;]
[), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, ), ;]
[), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, )]
[||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (]
[., isAssign, (, ), ||, parent, ., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,]
[), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, )]
[., isExprResult, (, ), ), ), ;, }, defineSlot, (, n, ,, parent, ,, n, ., getQualifiedName, (, ), ,]
[;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred, )]
[,, parent, ,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, ), ;, }, void, defineSlot, (, Node, n]
[,, n, ., getQualifiedName, (, ), ,, type, ,, inferred, ), ;, }, void, defineSlot, (, Node, n, ,, Node]
[,, type, ,, inferred, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType]
[., getQualifiedName, (, ), ,, type, ,, inferred, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,]
[,, inferred, ), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,]
[), ;, }, void, defineSlot, (, Node, n, ,, Node, parent, ,, String, variableName, ,, JSType, type, ,, boolean, inferred]
[;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar]
[., checkArgument, (, !, variableName, ., isEmpty, (, ), ), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&]
[), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =]
[), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =]
[., isEmpty, (, ), ), ;, boolean, isGlobalVar, =, n, ., isName, (, ), &&, scope, ., isGlobal, (, )]
[;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;]
[&&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent]
[., isName, (, ), &&, scope, ., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar]
[;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;]
[., isGlobal, (, ), ;, boolean, shouldDeclareOnGlobalThis, =, isGlobalVar, &&, (, parent, ., isVar, (, ), ||, parent, ., isFunction]
[;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, )]
[&&, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;]
[;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, )]
[), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (]
[||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, )]
[., isVar, (, ), ||, parent, ., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n]
[), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (]
[., isFunction, (, ), ), ;, Scope, scopeToDeclareIn, =, scope, ;, if, (, n, ., isGetProp, (, ), &&, !]
[;, if, (, n, ., isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, )]
[), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,]
[&&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope]
[&&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope]
[., isGetProp, (, ), &&, !, scope, ., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope]
[&&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope]
[&&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope]
[., isGlobal, (, ), &&, isQnameRootedInGlobalScope, (, n, ), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;]
[), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,]
[), ), {, Scope, globalScope, =, scope, ., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName]
[;, if, (, !, globalScope, ., isDeclared, (, variableName, ,, false, ), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (]
[., getGlobalScope, (, ), ;, if, (, !, globalScope, ., isDeclared, (, variableName, ,, false, ), ), {, scopeToDeclareIn, =]
[), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, )]
[), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, )]
[., isDeclared, (, variableName, ,, false, ), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean]
[,, false, ), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, .]
[), ), {, scopeToDeclareIn, =, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (]
[=, scope, ., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar]
[;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =]
[., getGlobalScope, (, ), ;, }, }, boolean, isExtern, =, n, ., isFromExterns, (, ), ;, Var, newVar, =, null]
[;, Var, newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, .]
[., isFromExterns, (, ), ;, Var, newVar, =, null, ;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;]
[;, CompilerInput, input, =, compiler, ., getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false]
[;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (]
[., getInput, (, inputId, ), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar]
[), ;, if, (, scopeToDeclareIn, ., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar]
[), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,]
[., isDeclared, (, variableName, ,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar]
[,, false, ), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable]
[), ), {, Var, oldVar, =, scopeToDeclareIn, ., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName]
[;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type]
[., getVar, (, variableName, ), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,]
[), ;, newVar, =, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,]
[=, validator, ., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;]
[;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar]
[., expectUndeclaredVariable, (, sourceName, ,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else]
[,, input, ,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type]
[,, n, ,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null]
[,, parent, ,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {]
[,, oldVar, ,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (]
[,, variableName, ,, type, ), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,]
[,, type, ), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, )]
[), ;, }, else, {, if, (, type, !=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }]
[), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,]
[!=, null, ), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,]
[), {, setDeferredType, (, n, ,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,]
[;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;, if]
[,, type, ), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred]
[), ;, }, newVar, =, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;]
[=, scopeToDeclareIn, ., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof]
[;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =]
[., declare, (, variableName, ,, n, ,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, )]
[,, n, ,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =]
[,, type, ,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, .]
[,, input, ,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (]
[,, inferred, ), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;]
[), ;, if, (, type, instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue]
[), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (, initialValue]
[instanceof, EnumType, ), {, Node, initialValue, =, newVar, ., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&]
[;, boolean, isValidValue, =, initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, )]
[., getInitialValue, (, ), ;, boolean, isValidValue, =, initialValue, !=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue]
[;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER]
[&&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, )]
[!=, null, &&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !]
[&&, (, initialValue, ., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, )]
[;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER]
[), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, .]
[., isObjectLit, (, ), ||, initialValue, ., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, .]
[), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,]
[., isQualifiedName, (, ), ), ;, if, (, !, isValidValue, ), {, compiler, ., report, (, JSError, ., make, (]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }]
[;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null, &&]
[., report, (, JSError, ., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType]
[), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null]
[., make, (, sourceName, ,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType]
[,, n, ,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;]
[,, ENUM_INITIALIZER, ), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (]
[), ), ;, }, }, }, FunctionType, fnType, =, JSType, ., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=]
[;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, .]
[., toMaybeFunctionType, (, type, ), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {]
[), ;, if, (, fnType, !=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType]
[), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, .]
[&&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, .]
[!=, null, &&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||]
[&&, !, type, ., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, .]
[), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, .]
[), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, .]
[., isEmptyType, (, ), ), {, if, (, (, fnType, ., isConstructor, (, ), ||, fnType, ., isInterface, (, )]
[), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if]
[&&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType]
[), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,]
[||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {]
[., isConstructor, (, ), ||, fnType, ., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (]
[), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,]
[., isInterface, (, ), ), &&, variableName, ., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (]
[), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if]
[., equals, (, fnType, ., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn]
[), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }]
[., getReferenceName, (, ), ), ), {, finishConstructorDefinition, (, n, ,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar]
[;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (]
[,, variableName, ,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType]
[,, fnType, ,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =]
[,, scopeToDeclareIn, ,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, .]
[,, input, ,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (]
[,, newVar, ), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, )]
[), ;, }, }, if, (, shouldDeclareOnGlobalThis, ), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if]
[), {, ObjectType, globalThis, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty]
[;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, .]
[., getNativeObjectType, (, GLOBAL_THIS, ), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null]
[), ;, if, (, inferred, ), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative]
[), {, globalThis, ., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type]
[;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar]
[., defineInferredProperty, (, variableName, ,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, )]
[,, type, ==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {]
[,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }]
[?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (]
[==, null, ?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, .]
[?, getNativeType, (, JSTypeNative, ., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (]
[:, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;]
[), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, )]
[., NO_TYPE, ), :, type, ,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,]
[,, n, ), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }]
[), ;, }, else, {, globalThis, ., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (]
[;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, .]
[., defineDeclaredProperty, (, variableName, ,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (]
[,, type, ,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type]
[,, n, ), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null]
[), ;, }, }, if, (, isGlobalVar, &&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type]
[), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (]
[&&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (]
[&&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType]
[&&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor]
[&&, "Window", ., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, .]
[&&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor]
[., equals, (, variableName, ), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (]
[), &&, type, !=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType]
[&&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType]
[!=, null, &&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry]
[&&, type, ., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType]
[&&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (]
[., isFunctionType, (, ), &&, type, ., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS]
[), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (]
[., isConstructor, (, ), ), {, FunctionType, globalThisCtor, =, typeRegistry, ., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;]
[;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, )]
[., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, )]
[., getNativeObjectType, (, GLOBAL_THIS, ), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;]
[), ., getConstructor, (, ), ;, globalThisCtor, ., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (]
[;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (]
[., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (]
[., getInstanceType, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor]
[;, globalThisCtor, ., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (, ), ), ., getInstanceType, (, ), ), ;, }, }]
[., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (, ), ), ., getInstanceType, (, )]
[., getPrototype, (, ), ., clearCachedValues, (, ), ;, globalThisCtor, ., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (, ), )]
[;, }, }, private, void, finishConstructorDefinition, (, Node, n, ,, String, variableName, ,, FunctionType, fnType, ,, Scope, scopeToDeclareIn, ,, CompilerInput]
[., setPrototypeBasedOn, (, (, type, ., toMaybeFunctionType, (, ), ), ., getInstanceType, (, ), ), ;, }, }, private, void]
[), ;, }, }, private, void, finishConstructorDefinition, (, Node, n, ,, String, variableName, ,, FunctionType, fnType, ,, Scope, scopeToDeclareIn, ,]
[., getInstanceType, (, ), ), ;, }, }, private, void, finishConstructorDefinition, (, Node, n, ,, String, variableName, ,, FunctionType, fnType]
[), ., getInstanceType, (, ), ), ;, }, }, private, void, finishConstructorDefinition, (, Node, n, ,, String, variableName, ,, FunctionType]
[., toMaybeFunctionType, (, ), ), ., getInstanceType, (, ), ), ;, }, }, private, void, finishConstructorDefinition, (, Node, n, ,]
[;, Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName]
[., getSuperClassConstructor, (, ), ;, Property, prototypeSlot, =, fnType, ., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n]
[;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, .]
[., getSlot, (, "prototype", ), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;]
[), ;, prototypeSlot, ., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn]
[;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (]
[., setNode, (, n, ), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (]
[), ;, String, prototypeName, =, variableName, +, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if]
[;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope]
[+, ".prototype", ;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar]
[;, Var, prototypeVar, =, scopeToDeclareIn, ., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope]
[;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, )]
[., getVar, (, prototypeName, ), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn]
[), ;, if, (, prototypeVar, !=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar]
[), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, .]
[&&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (]
[!=, null, &&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, .]
[&&, prototypeVar, ., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (]
[), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, .]
[==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,]
[., scope, ==, scopeToDeclareIn, ), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,]
[), {, scopeToDeclareIn, ., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, .]
[;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==]
[., undeclare, (, prototypeVar, ), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, )]
[), ;, }, scopeToDeclareIn, ., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor]
[;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler]
[., declare, (, prototypeName, ,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor]
[,, n, ,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, )]
[,, prototypeSlot, ., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo]
[,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), )]
[., getType, (, ), ,, input, ,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType]
[,, superClassCtor, ==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;]
[), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {]
[||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, .]
[==, null, ||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (]
[||, superClassCtor, ., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, .]
[), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {]
[., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&]
[., getInstanceType, (, ), ., isEquivalentTo, (, getNativeType, (, OBJECT_TYPE, ), ), ), ;, if, (, newVar, ., getInitialValue, (]
[), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), )]
[), ), ), ;, if, (, newVar, ., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, )]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?]
[&&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n]
[==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName]
[., getInitialValue, (, ), ==, null, &&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError]
[&&, !, n, ., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?]
[), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?]
[., isFromExterns, (, ), ), {, compiler, ., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, .]
[;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;, return]
[., report, (, JSError, ., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER]
[), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, ), ;]
[., make, (, sourceName, ,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), )]
[,, n, ,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private]
[,, fnType, ., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope]
[,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (]
[?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope]
[., isConstructor, (, ), ?, CTOR_INITIALIZER, :, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node]
[:, IFACE_INITIALIZER, ,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =]
[,, variableName, ), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (]
[), ), ;, }, }, private, boolean, isQnameRootedInGlobalScope, (, Node, n, ), {, Scope, scope, =, getQnameRootScope, (, n, )]
[;, return, scope, !=, null, &&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, )]
[), ;, return, scope, !=, null, &&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n]
[;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;]
[&&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil]
[!=, null, &&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root]
[&&, scope, ., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil]
[;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ;]
[., isGlobal, (, ), ;, }, private, Scope, getQnameRootScope, (, Node, n, ), {, Node, root, =, NodeUtil, ., getRootOfQualifiedName]
[;, if, (, root, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (, root, ., getString]
[., getRootOfQualifiedName, (, n, ), ;, if, (, root, ., isName, (, ), ), {, Var, var, =, scope, .]
[), ;, if, (, root, ., isName, (, ), ), {, Var, var, =, scope, ., getVar, (, root, .]
[), {, Var, var, =, scope, ., getVar, (, root, ., getString, (, ), ), ;, if, (, var, !=]
[., isName, (, ), ), {, Var, var, =, scope, ., getVar, (, root, ., getString, (, ), ), ;]
[;, if, (, var, !=, null, ), {, return, var, ., getScope, (, ), ;, }, }, return, null, ;]
[., getVar, (, root, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, return, var, .]
[), ;, if, (, var, !=, null, ), {, return, var, ., getScope, (, ), ;, }, }, return, null]
[., getString, (, ), ), ;, if, (, var, !=, null, ), {, return, var, ., getScope, (, ), ;]
[), {, return, var, ., getScope, (, ), ;, }, }, return, null, ;, }, private, JSType, getDeclaredType, (, String]
[!=, null, ), {, return, var, ., getScope, (, ), ;, }, }, return, null, ;, }, private, JSType, getDeclaredType]
[), {, return, var, ., getScope, (, ), ;, }, }, return, null, ;, }, private, JSType, getDeclaredType, (, String]
[;, }, }, return, null, ;, }, private, JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,]
[., getScope, (, ), ;, }, }, return, null, ;, }, private, JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info]
[;, }, private, JSType, getDeclaredType, (, String, sourceName, ,, JSDocInfo, info, ,, Node, lValue, ,, @, Nullable, Node, rValue, )]
[), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&]
[&&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else]
[!=, null, &&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;]
[&&, info, ., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else]
[), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&]
[., hasType, (, ), ), {, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, else, if, (]
[;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType]
[,, lValue, ,, info, ), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&]
[,, info, ), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (]
[), ;, }, else, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, .]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if, (]
[&&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, ), ), {]
[&&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,]
[!=, null, &&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, )]
[&&, rValue, ., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,]
[&&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, ), ), {]
[., isFunction, (, ), &&, shouldUseFunctionLiteralType, (, JSType, ., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if, (]
[,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=]
[., toMaybeFunctionType, (, rValue, ., getJSType, (, ), ), ,, info, ,, lValue, ), ), {, return, rValue, ., getJSType]
[), ,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info]
[., getJSType, (, ), ), ,, info, ,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }]
[,, lValue, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, )]
[), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if]
[;, }, else, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if]
[., getJSType, (, ), ;, }, else, if, (, info, !=, null, ), {, if, (, info, ., hasEnumParameterType, (]
[), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit]
[!=, null, ), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue]
[), {, if, (, info, ., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit]
[), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (]
[., hasEnumParameterType, (, ), ), {, if, (, rValue, !=, null, &&, rValue, ., isObjectLit, (, ), ), {, return]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName]
[&&, rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes]
[!=, null, &&, rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {]
[&&, rValue, ., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName]
[., isObjectLit, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue]
[;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;]
[., getJSType, (, ), ;, }, else, {, return, createEnumTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info]
[;, }, }, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return]
[,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor]
[,, info, ,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface]
[., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor, (, )]
[,, lValue, ), ;, }, }, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, )]
[), ;, }, }, else, if, (, info, ., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {]
[), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else]
[||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info]
[., isConstructor, (, ), ||, info, ., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName]
[), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else]
[., isInterface, (, ), ), {, return, createFunctionTypeFromNodes, (, rValue, ,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue]
[;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (]
[,, lValue, ., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else, {, if, (, info, ., isConstant]
[,, info, ,, lValue, ), ;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType]
[., getQualifiedName, (, ), ,, info, ,, lValue, ), ;, }, else, {, if, (, info, ., isConstant, (, )]
[,, lValue, ), ;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null]
[), ;, }, else, {, if, (, info, ., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if]
[), {, JSType, knownType, =, null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo]
[., isConstant, (, ), ), {, JSType, knownType, =, null, ;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo]
[;, if, (, rValue, !=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo]
[), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType]
[!=, null, ), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo]
[), {, JSDocInfo, rValueInfo, =, rValue, ., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType]
[;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, )]
[., getJSDocInfo, (, ), ;, if, (, rValueInfo, !=, null, &&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[&&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry]
[!=, null, &&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope]
[&&, rValueInfo, ., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry]
[), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (]
[., hasType, (, ), ), {, return, rValueInfo, ., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, ), .]
[., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&]
[., getType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (]
[,, typeRegistry, ), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType]
[), ;, }, else, if, (, rValue, ., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, )]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {]
[&&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;]
[!=, null, &&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (]
[., getJSType, (, ), !=, null, &&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[&&, !, rValue, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {]
[), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {]
[., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr]
[., getJSType, (, ), ., isUnknownType, (, ), ), {, return, rValue, ., getJSType, (, ), ;, }, else, if]
[;, }, else, if, (, rValue, ., isOr, (, ), ), {, Node, firstClause, =, rValue, ., getFirstChild, (, )]
[., getJSType, (, ), ;, }, else, if, (, rValue, ., isOr, (, ), ), {, Node, firstClause, =, rValue]
[), {, Node, firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;]
[., isOr, (, ), ), {, Node, firstClause, =, rValue, ., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, .]
[;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue]
[., getFirstChild, (, ), ;, Node, secondClause, =, firstClause, ., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName]
[;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&, firstClause, ., getString, (]
[., getNext, (, ), ;, boolean, namesMatch, =, firstClause, ., isName, (, ), &&, lValue, ., isName, (, ), &&]
[;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), .]
[&&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&]
[&&, lValue, ., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, )]
[., isName, (, ), &&, lValue, ., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue]
[&&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&]
[., isName, (, ), &&, firstClause, ., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;]
[;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), .]
[., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=]
[., getString, (, ), ., equals, (, lValue, ., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, .]
[), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, )]
[., getString, (, ), ), ;, if, (, namesMatch, &&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause]
[), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,]
[&&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;]
[&&, secondClause, ., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), )]
[&&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;]
[!=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (]
[., getJSType, (, ), !=, null, &&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return]
[&&, !, secondClause, ., getJSType, (, ), ., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;]
[), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,]
[), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,]
[., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;, }, }, }, }, }, }, return]
[., getJSType, (, ), ., isUnknownType, (, ), ), {, return, secondClause, ., getJSType, (, ), ;, }, }, }]
[;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, ), ;, }, private, FunctionType]
[., getJSType, (, ), ;, }, }, }, }, }, }, return, getDeclaredTypeInAnnotation, (, sourceName, ,, lValue, ,, info, )]
[;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==, null, ?, null]
[,, lValue, ,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =]
[,, info, ), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==]
[), ;, }, private, FunctionType, getFunctionType, (, @, Nullable, Var, v, ), {, JSType, t, =, v, ==, null, ?]
[;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType]
[?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, .]
[==, null, ?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :]
[?, null, :, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, .]
[:, v, ., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (]
[;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType]
[., getType, (, ), ;, ObjectType, o, =, t, ==, null, ?, null, :, t, ., dereference, (, ), ;]
[;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String]
[?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void]
[==, null, ?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }]
[?, null, :, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void]
[:, t, ., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (]
[;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String]
[., dereference, (, ), ;, return, JSType, ., toMaybeFunctionType, (, o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n]
[;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, codingConvention, .]
[., toMaybeFunctionType, (, o, ), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >]
[), ;, }, private, void, checkForCallingConventionDefiningCalls, (, Node, n, ,, Map, <, String, ,, String, >, delegateCallingConventions, ), {, codingConvention]
[;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =, codingConvention]
[., checkForCallingConventionDefiningCalls, (, n, ,, delegateCallingConventions, ), ;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, delegateCallingConventions, ), ;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship]
[), ;, }, private, void, checkForClassDefiningCalls, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, SubclassRelationship, relationship, =]
[;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName]
[., getClassesDefinedByCall, (, n, ), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, .]
[), ;, if, (, relationship, !=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, .]
[), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =]
[!=, null, ), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType]
[), {, FunctionType, superCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =]
[;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=]
[), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor]
[., getVar, (, relationship, ., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, .]
[), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;, if, (]
[., superclassName, ), ), ;, FunctionType, subCtor, =, getFunctionType, (, scope, ., getVar, (, relationship, ., subclassName, ), ), ;]
[;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor]
[), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, .]
[., getVar, (, relationship, ., subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, )]
[), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor]
[., subclassName, ), ), ;, if, (, superCtor, !=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null]
[), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;]
[&&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =]
[&&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, )]
[&&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass]
[!=, null, &&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {]
[&&, superCtor, ., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass]
[&&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, )]
[., isConstructor, (, ), &&, subCtor, !=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor]
[&&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =]
[!=, null, &&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType]
[&&, subCtor, ., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =]
[), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;]
[., isConstructor, (, ), ), {, ObjectType, superClass, =, superCtor, ., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, .]
[;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =]
[., getInstanceType, (, ), ;, ObjectType, subClass, =, subCtor, ., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (]
[;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship]
[., getInstanceType, (, ), ;, superCtor, =, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, )]
[=, superClass, ., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type]
[;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !]
[., getConstructor, (, ), ;, subCtor, =, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType]
[=, subClass, ., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, .]
[;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass]
[., getConstructor, (, ), ;, if, (, relationship, ., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (]
[), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=]
[&&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass]
[&&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (]
[==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {]
[., type, ==, SubclassType, ., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, )]
[&&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (]
[., INHERITS, &&, !, superClass, ., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, .]
[&&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass]
[&&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass]
[., isEmptyType, (, ), &&, !, subClass, ., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n]
[), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=]
[), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=]
[., isEmptyType, (, ), ), {, validator, ., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }]
[;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor]
[., expectSuperType, (, t, ,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor]
[,, n, ,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {]
[,, superClass, ,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, .]
[,, subClass, ), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (]
[), ;, }, if, (, superCtor, !=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,]
[), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName]
[&&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }]
[!=, null, &&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, )]
[&&, subCtor, !=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }]
[), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName]
[!=, null, ), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }]
[), {, codingConvention, ., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName]
[;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, )]
[., applySubclassRelationship, (, superCtor, ,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, .]
[,, subCtor, ,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, )]
[,, relationship, ., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if]
[), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null]
[., type, ), ;, }, }, }, String, singletonGetterClassName, =, codingConvention, ., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName]
[;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName]
[., getSingletonGetterClassName, (, n, ), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (]
[), ;, if, (, singletonGetterClassName, !=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType]
[!=, null, ), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if]
[), {, ObjectType, objectType, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType]
[;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType]
[., cast, (, typeRegistry, ., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType]
[), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (]
[., getType, (, singletonGetterClassName, ), ), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor]
[), ), ;, if, (, objectType, !=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if]
[), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType]
[!=, null, ), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {]
[), {, FunctionType, functionType, =, objectType, ., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType]
[;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, .]
[., getConstructor, (, ), ;, if, (, functionType, !=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType]
[), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,]
[!=, null, ), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,]
[), {, FunctionType, getterType, =, typeRegistry, ., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,]
[;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, .]
[., createFunctionType, (, objectType, ), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }]
[), ;, codingConvention, ., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention]
[;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=, null, )]
[., applySingletonGetter, (, functionType, ,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (]
[,, getterType, ,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if]
[,, objectType, ), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship]
[), ;, }, }, }, DelegateRelationship, delegateRelationship, =, codingConvention, ., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=, null]
[;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast]
[., getDelegateRelationship, (, n, ), ;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast]
[), ;, if, (, delegateRelationship, !=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, .]
[), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (]
[!=, null, ), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;]
[), {, applyDelegateRelationship, (, delegateRelationship, ), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (]
[;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if]
[), ;, }, ObjectLiteralCast, objectLiteralCast, =, codingConvention, ., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {]
[;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =]
[., getObjectLiteralCast, (, n, ), ;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null]
[), ;, if, (, objectLiteralCast, !=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type]
[), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, .]
[!=, null, ), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (]
[), {, if, (, objectLiteralCast, ., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, .]
[), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if]
[==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), )]
[., diagnosticType, ==, null, ), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName]
[), {, ObjectType, type, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if]
[;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, .]
[., cast, (, typeRegistry, ., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&, type]
[), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast]
[., getType, (, objectLiteralCast, ., typeName, ), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, )]
[), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (]
[., typeName, ), ), ;, if, (, type, !=, null, &&, type, ., getConstructor, (, ), !=, null, ), {]
[), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, .]
[&&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }]
[!=, null, &&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, )]
[&&, type, ., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }]
[), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, .]
[!=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (]
[., getConstructor, (, ), !=, null, ), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {]
[), {, setDeferredType, (, objectLiteralCast, ., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, .]
[;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[,, type, ), ;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, )]
[., objectNode, ,, type, ), ;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName]
[), ;, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n]
[;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n]
[., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }]
[), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[., make, (, t, ., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler]
[,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t]
[., getSourceName, (, ), ,, n, ,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (, JSError]
[,, CONSTRUCTOR_EXPECTED, ), ), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName]
[), ), ;, }, }, else, {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, )]
[;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (, typeRegistry]
[., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, objectLiteralCast, ., diagnosticType, ), )]
[), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast, (]
[., make, (, t, ., getSourceName, (, ), ,, n, ,, objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }]
[,, n, ,, objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {]
[., getSourceName, (, ), ,, n, ,, objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (]
[,, objectLiteralCast, ., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject]
[), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType, ., cast]
[., diagnosticType, ), ), ;, }, }, }, private, void, applyDelegateRelationship, (, DelegateRelationship, delegateRelationship, ), {, ObjectType, delegatorObject, =, ObjectType]
[;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (]
[), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType]
[., getType, (, delegateRelationship, ., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;]
[., delegator, ), ), ;, ObjectType, delegateBaseObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, )]
[;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;]
[., cast, (, typeRegistry, ., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (]
[), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), )]
[., getType, (, delegateRelationship, ., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (]
[), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), )]
[., delegateBase, ), ), ;, ObjectType, delegateSuperObject, =, ObjectType, ., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (]
[;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject]
[., cast, (, typeRegistry, ., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null]
[), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =]
[., getType, (, codingConvention, ., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null]
[), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor]
[., getDelegateSuperclassName, (, ), ), ), ;, if, (, delegatorObject, !=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null]
[), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;]
[&&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, .]
[&&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType]
[!=, null, &&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, )]
[&&, delegateBaseObject, !=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType]
[&&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, .]
[!=, null, &&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =]
[&&, delegateSuperObject, !=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, .]
[), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;]
[!=, null, ), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (]
[), {, FunctionType, delegatorCtor, =, delegatorObject, ., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;]
[;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if]
[., getConstructor, (, ), ;, FunctionType, delegateBaseCtor, =, delegateBaseObject, ., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor]
[;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&]
[., getConstructor, (, ), ;, FunctionType, delegateSuperCtor, =, delegateSuperObject, ., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&]
[;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new]
[., getConstructor, (, ), ;, if, (, delegatorCtor, !=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {]
[), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), )]
[&&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType]
[&&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder]
[!=, null, &&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, )]
[&&, delegateBaseCtor, !=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder]
[&&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType]
[!=, null, &&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams]
[&&, delegateSuperCtor, !=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType]
[), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), )]
[!=, null, ), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE]
[), {, FunctionParamBuilder, functionParamBuilder, =, new, FunctionParamBuilder, (, typeRegistry, ), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), )]
[;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, .]
[), ;, functionParamBuilder, ., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry]
[;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, )]
[., addRequiredParams, (, getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (]
[), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (]
[), ), ;, FunctionType, findDelegate, =, typeRegistry, ., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build]
[;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,]
[., createFunctionType, (, typeRegistry, ., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =]
[,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, )]
[., createDefaultObjectUnion, (, delegateBaseObject, ), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (]
[), ,, functionParamBuilder, ., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (]
[), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null]
[., build, (, ), ), ;, FunctionType, delegateProxy, =, typeRegistry, ., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX]
[;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,]
[., createConstructorType, (, delegateBaseObject, ., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;]
[,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship]
[+, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention]
[., getReferenceName, (, ), +, DELEGATE_PROXY_SUFFIX, ,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (]
[,, null, ,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship]
[,, null, ,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject]
[,, null, ,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject]
[,, null, ), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject]
[), ;, delegateProxy, ., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy]
[;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (]
[., setPrototypeBasedOn, (, delegateBaseObject, ), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, )]
[), ;, codingConvention, ., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add]
[;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal, t]
[., applyDelegateRelationship, (, delegateSuperObject, ,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (, delegateProxy, .]
[,, delegateBaseObject, ,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), )]
[,, delegatorObject, ,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }]
[,, delegateProxy, ,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }, }, }]
[,, findDelegate, ), ;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }, }, }, void, maybeDeclareQualifiedName]
[), ;, delegateProxyPrototypes, ., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal]
[;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,, Node]
[., add, (, delegateProxy, ., getPrototype, (, ), ), ;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo]
[), ;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,, Node, parent, ,]
[., getPrototype, (, ), ), ;, }, }, }, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n]
[;, String, ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String]
[., getFirstChild, (, ), ;, String, ownerName, =, ownerNode, ., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName]
[;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString]
[., getQualifiedName, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild]
[;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=]
[., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, Preconditions, .]
[;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t]
[., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType]
[., getLastChild, (, ), ., getString, (, ), ;, Preconditions, ., checkArgument, (, qName, !=, null, &&, ownerName, !=, null]
[;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if]
[., checkArgument, (, qName, !=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName]
[), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;]
[&&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n]
[!=, null, &&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info]
[&&, ownerName, !=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n]
[), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;]
[!=, null, ), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue]
[), ;, JSType, valueType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;]
[;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;]
[,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType]
[., getSourceName, (, ), ,, info, ,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=]
[,, n, ,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue]
[,, rhsValue, ), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType]
[), ;, if, (, valueType, ==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, )]
[), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), )]
[&&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals]
[==, null, &&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype"]
[&&, rhsValue, !=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals]
[), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), )]
[!=, null, ), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName]
[), {, valueType, =, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), )]
[=, rhsValue, ., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar]
[;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (, qName]
[., getJSType, (, ), ;, }, if, (, "prototype", ., equals, (, propName, ), ), {, Var, qVar, =, scope]
[), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType]
[., equals, (, propName, ), ), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar]
[), ), {, Var, qVar, =, scope, ., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {]
[;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, )]
[., getVar, (, qName, ), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (]
[), ;, if, (, qVar, !=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (]
[), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=]
[!=, null, ), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (]
[), {, ObjectType, qVarType, =, ObjectType, ., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=]
[;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, .]
[., cast, (, qVar, ., getType, (, ), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&]
[), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry]
[., getType, (, ), ), ;, if, (, qVarType, !=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (]
[), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }]
[&&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, .]
[&&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (]
[!=, null, &&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, .]
[&&, rhsValue, !=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (]
[&&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, .]
[!=, null, &&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,]
[&&, rhsValue, ., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, .]
[), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }]
[., isObjectLit, (, ), ), {, typeRegistry, ., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (]
[;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar, .]
[., resetImplicitPrototype, (, rhsValue, ., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (]
[,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {]
[., getJSType, (, ), ,, qVarType, ., getImplicitPrototype, (, ), ), ;, }, else, if, (, !, qVar, ., isTypeInferred]
[), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar]
[., getImplicitPrototype, (, ), ), ;, }, else, if, (, !, qVar, ., isTypeInferred, (, ), ), {, return, ;]
[), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (]
[), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (]
[., isTypeInferred, (, ), ), {, return, ;, }, if, (, qVar, ., getScope, (, ), ==, scope, ), {]
[), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, ), {, if]
[==, scope, ), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, )]
[., getScope, (, ), ==, scope, ), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (]
[), {, scope, ., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, ), {, if]
[;, }, }, }, if, (, valueType, ==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {]
[., undeclare, (, qVar, ), ;, }, }, }, if, (, valueType, ==, null, ), {, if, (, parent, .]
[), ;, }, }, }, if, (, valueType, ==, null, ), {, if, (, parent, ., isExprResult, (, ), )]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[==, null, ), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (]
[), {, if, (, parent, ., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,]
[), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&, t]
[., isExprResult, (, ), ), {, stubDeclarations, ., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, )]
[;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,, valueType, )]
[., add, (, new, StubDeclaration, (, n, ,, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (]
[), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,, valueType]
[,, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName]
[,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,]
[&&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean]
[!=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;]
[., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), )]
[&&, t, ., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean]
[,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,]
[., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,]
[., getInput, (, ), ., isExtern, (, ), ,, ownerName, ), ), ;, }, return, ;, }, boolean, inferred, =]
[), ), ;, }, return, ;, }, boolean, inferred, =, isQualifiedNameInferred, (, qName, ,, n, ,, info, ,, rhsValue, ,]
[;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null]
[,, n, ,, info, ,, rhsValue, ,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot]
[,, info, ,, rhsValue, ,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName]
[,, rhsValue, ,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;]
[,, valueType, ), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (]
[), ;, if, (, !, inferred, ), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[), {, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =]
[;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&, t]
[), ;, if, (, ownerType, !=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&]
[), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern]
[!=, null, ), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, )]
[), {, boolean, isExtern, =, t, ., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern]
[;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&]
[&&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName]
[!=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty]
[., getInput, (, ), !=, null, &&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (]
[&&, t, ., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName]
[;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&]
[., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (]
[., getInput, (, ), ., isExtern, (, ), ;, if, (, (, !, ownerType, ., hasOwnProperty, (, propName, ), ||]
[), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent]
[&&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), )]
[), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, )]
[||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), )]
[||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), )]
[., hasOwnProperty, (, propName, ), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType]
[), ||, ownerType, ., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, )]
[), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, )]
[., isPropertyTypeInferred, (, propName, ), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !]
[), ), &&, (, (, isExtern, &&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (]
[), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent]
[), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,]
[||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, )]
[), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n]
[&&, !, ownerType, ., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, .]
[), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n]
[), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n]
[., isNativeObjectType, (, ), ), ||, !, ownerType, ., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName]
[), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,]
[), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,]
[., isInstanceType, (, ), ), ), {, ownerType, ., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }]
[;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=]
[., defineDeclaredProperty, (, propName, ,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,]
[,, valueType, ,, n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }]
[,, n, ), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if]
[), ;, }, }, defineSlot, (, n, ,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue]
[;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType]
[,, parent, ,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (]
[,, valueType, ,, inferred, ), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), )]
[,, inferred, ), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType]
[), ;, }, else, if, (, rhsValue, !=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =]
[), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=, null]
[&&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), )]
[!=, null, &&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName]
[&&, rhsValue, ., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), )]
[), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=, null]
[., isTrue, (, ), ), {, FunctionType, ownerType, =, JSType, ., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if]
[;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =]
[., toMaybeFunctionType, (, getObjectSlot, (, ownerName, ), ), ;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType]
[), ;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName]
[), ), ;, if, (, ownerType, !=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String]
[), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;]
[!=, null, ), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (]
[), {, JSType, ownerTypeOfThis, =, ownerType, ., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;]
[;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry]
[., getTypeOfThis, (, ), ;, String, delegateName, =, codingConvention, ., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null]
[;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType]
[., getDelegateSuperclassName, (, ), ;, JSType, delegateType, =, delegateName, ==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, )]
[;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent]
[?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (]
[==, null, ?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, .]
[?, null, :, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (]
[:, typeRegistry, ., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, )]
[;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent]
[., getType, (, delegateName, ), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {]
[), ;, if, (, delegateType, !=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,]
[), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, ), ;, }, }, }, }]
[&&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,]
[!=, null, &&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE]
[&&, ownerTypeOfThis, ., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,]
[), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, ), ;, }, }, }, }]
[., isSubtype, (, delegateType, ), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, )]
[), ), {, defineSlot, (, n, ,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, ), ;, }, }, }]
[;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo, info, ,, Node, rhsValue]
[,, parent, ,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, ), ;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String]
[,, getNativeType, (, BOOLEAN_TYPE, ), ,, true, ), ;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String, qName, ,]
[,, true, ), ;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo, info]
[), ,, true, ), ;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo]
[), ;, }, }, }, }, private, boolean, isQualifiedNameInferred, (, String, qName, ,, Node, n, ,, JSDocInfo, info, ,, Node]
[), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =]
[==, null, ), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {]
[), {, return, true, ;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =]
[;, }, boolean, inferred, =, true, ;, if, (, info, !=, null, ), {, inferred, =, !, (, info, .]
[;, if, (, info, !=, null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, .]
[), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info]
[!=, null, ), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||]
[), {, inferred, =, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info]
[=, !, (, info, ., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (]
[;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info]
[;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info]
[), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (]
[||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, .]
[||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||]
[||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType]
[., hasType, (, ), ||, info, ., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=]
[||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||]
[., hasEnumParameterType, (, ), ||, (, info, ., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType]
[||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, .]
[), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[&&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), )]
[., isConstant, (, ), &&, valueType, !=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[!=, null, &&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }]
[&&, !, valueType, ., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (]
[), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue]
[), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue]
[., isUnknownType, (, ), ), ||, FunctionTypeBuilder, ., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue]
[), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (]
[., isFunctionTypeDeclaration, (, info, ), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (]
[), ), ;, }, if, (, inferred, &&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if]
[), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared]
[&&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else]
[&&, rhsValue, !=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return]
[&&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else]
[!=, null, &&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;]
[&&, rhsValue, ., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else]
[), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared]
[., isFunction, (, ), ), {, if, (, info, !=, null, ), {, return, false, ;, }, else, if, (]
[), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, ), &&, n]
[!=, null, ), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, )]
[), {, return, false, ;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, ), &&, n]
[;, }, else, if, (, !, scope, ., isDeclared, (, qName, ,, false, ), &&, n, ., isUnscopedQualifiedName, (, )]
[), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (, current, ., isScript, (, )]
[&&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !]
[&&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !]
[., isDeclared, (, qName, ,, false, ), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =]
[,, false, ), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (]
[), &&, n, ., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;]
[), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (, current, ., isScript, (, )]
[., isUnscopedQualifiedName, (, ), ), {, for, (, Node, current, =, n, ., getParent, (, ), ;, !, (, current]
[;, !, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), ), ;, current, =, current, .]
[., getParent, (, ), ;, !, (, current, ., isScript, (, ), ||, current, ., isFunction, (, ), ), ;]
[;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {]
[;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {]
[), ;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), )]
[||, current, ., isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil]
[., isScript, (, ), ||, current, ., isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), )]
[), ;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), )]
[., isFunction, (, ), ), ;, current, =, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure]
[=, current, ., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true]
[), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true, ;, }, }, AstFunctionContents, contents, =]
[., getParent, (, ), ), {, if, (, NodeUtil, ., isControlStructure, (, current, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if]
[., isControlStructure, (, current, ), ), {, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode]
[), ), {, return, true, ;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;]
[;, }, }, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, ==, null]
[;, if, (, contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {]
[), ;, if, (, contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), )]
[., getRootNode, (, ), ), ;, if, (, contents, ==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains]
[), {, return, false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {]
[||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return, false, ;, }, }, }]
[==, null, ||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return, false, ;, }]
[||, !, contents, ., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return, false, ;, }, }, }]
[), {, return, false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {]
[), {, return, false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {]
[., contains, (, qName, ), ), {, return, false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot]
[., getEscapedQualifiedNames, (, ), ., contains, (, qName, ), ), {, return, false, ;, }, }, }, return, inferred, ;]
[), ), {, return, false, ;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, )]
[;, }, }, }, return, inferred, ;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope]
[;, }, private, ObjectType, getObjectSlot, (, String, slotName, ), {, Var, ownerVar, =, scope, ., getVar, (, slotName, ), ;]
[;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, .]
[., getVar, (, slotName, ), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (]
[), ;, if, (, ownerVar, !=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType]
[), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?]
[!=, null, ), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==]
[), {, JSType, ownerVarType, =, ownerVar, ., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?]
[;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }]
[., getType, (, ), ;, return, ObjectType, ., cast, (, ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (]
[;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node]
[., cast, (, ownerVarType, ==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;]
[), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {]
[?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {]
[==, null, ?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (]
[?, null, :, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {]
[:, ownerVarType, ., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (]
[), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {]
[., restrictByNotNullOrUndefined, (, ), ), ;, }, return, null, ;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub]
[;, }, void, resolveStubDeclarations, (, ), {, for, (, StubDeclaration, stub, :, stubDeclarations, ), {, Node, n, =, stub, .]
[), {, Node, n, =, stub, ., node, ;, Node, parent, =, n, ., getParent, (, ), ;, String, qName]
[;, Node, parent, =, n, ., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String]
[., node, ;, Node, parent, =, n, ., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, )]
[;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString]
[., getParent, (, ), ;, String, qName, =, n, ., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild]
[;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =, stub, ., ownerName]
[., getQualifiedName, (, ), ;, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, String, ownerName]
[;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (, scope, ., isDeclared]
[., getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if]
[., getLastChild, (, ), ., getString, (, ), ;, String, ownerName, =, stub, ., ownerName, ;, boolean, isExtern, =, stub]
[;, boolean, isExtern, =, stub, ., isExtern, ;, if, (, scope, ., isDeclared, (, qName, ,, false, ), ), {]
[., ownerName, ;, boolean, isExtern, =, stub, ., isExtern, ;, if, (, scope, ., isDeclared, (, qName, ,, false, )]
[;, if, (, scope, ., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot]
[., isExtern, ;, if, (, scope, ., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType]
[), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,, unknownType]
[., isDeclared, (, qName, ,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;]
[,, false, ), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,]
[), ), {, continue, ;, }, ObjectType, ownerType, =, getObjectSlot, (, ownerName, ), ;, defineSlot, (, n, ,, parent, ,]
[;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern]
[), ;, defineSlot, (, n, ,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (]
[;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, .]
[,, parent, ,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType]
[,, unknownType, ,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, )]
[,, true, ), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), )]
[), ;, if, (, ownerType, !=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType]
[), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (]
[&&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,]
[!=, null, &&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,]
[&&, (, isExtern, ||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,]
[), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (]
[), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType]
[||, ownerType, ., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;]
[), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType]
[., isFunctionPrototypeType, (, ), ), ), {, ownerType, ., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else]
[;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :, ownerType, ), ;, }]
[., defineInferredProperty, (, propName, ,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType]
[,, unknownType, ,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType]
[,, n, ), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :, ownerType]
[), ;, }, else, {, typeRegistry, ., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :, ownerType, ), ;]
[;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType, thisType]
[., registerPropertyOnType, (, propName, ,, ownerType, ==, null, ?, unknownType, :, ownerType, ), ;, }, }, }, private, final, class]
[,, ownerType, ==, null, ?, unknownType, :, ownerType, ), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {]
[), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType]
[?, unknownType, :, ownerType, ), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType]
[==, null, ?, unknownType, :, ownerType, ), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final]
[?, unknownType, :, ownerType, ), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType]
[:, ownerType, ), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties]
[), ;, }, }, }, private, final, class, CollectProperties, extends, AbstractShallowStatementCallback, {, private, final, JSType, thisType, ;, CollectProperties, (, JSType]
[=, thisType, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., thisType, =, thisType, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {]
[., isExprResult, (, ), ), {, Node, child, =, n, ., getFirstChild, (, ), ;, switch, (, child, ., getType]
[;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child]
[., getFirstChild, (, ), ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember]
[), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,, child]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, )]
[:, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;]
[., ASSIGN, :, maybeCollectMember, (, t, ,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, )]
[;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child, ,, child, ,, null, ), ;, break]
[,, child, ., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token]
[,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t]
[., getFirstChild, (, ), ,, child, ,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP]
[,, child, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child]
[), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child, ,, child, ,, null, ), ;]
[., getLastChild, (, ), ), ;, break, ;, case, Token, ., GETPROP, :, maybeCollectMember, (, t, ,, child, ,, child]
[:, maybeCollectMember, (, t, ,, child, ,, child, ,, null, ), ;, break, ;, }, }, }, private, void, maybeCollectMember]
[., GETPROP, :, maybeCollectMember, (, t, ,, child, ,, child, ,, null, ), ;, break, ;, }, }, }, private]
[;, break, ;, }, }, }, private, void, maybeCollectMember, (, NodeTraversal, t, ,, Node, member, ,, Node, nodeWithJsDocInfo, ,, @]
[,, child, ,, child, ,, null, ), ;, break, ;, }, }, }, private, void, maybeCollectMember, (, NodeTraversal, t, ,]
[,, child, ,, null, ), ;, break, ;, }, }, }, private, void, maybeCollectMember, (, NodeTraversal, t, ,, Node, member]
[,, null, ), ;, break, ;, }, }, }, private, void, maybeCollectMember, (, NodeTraversal, t, ,, Node, member, ,, Node]
[), ;, break, ;, }, }, }, private, void, maybeCollectMember, (, NodeTraversal, t, ,, Node, member, ,, Node, nodeWithJsDocInfo, ,]
[;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !, member, ., getFirstChild, (, )]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ||, !, member, ., isGetProp, (, ), ||, !, member]
[), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType]
[||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (]
[||, !, member, ., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[==, null, ||, !, member, ., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, )]
[||, !, member, ., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (]
[||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (]
[., isGetProp, (, ), ||, !, member, ., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }]
[), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType]
[), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType]
[., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType, (, thisType, ), ;]
[., getFirstChild, (, ), ., isThis, (, ), ), {, return, ;, }, member, ., getFirstChild, (, ), ., setJSType]
[;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,, value, ), ;, Node]
[., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member]
[., getFirstChild, (, ), ., setJSType, (, thisType, ), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, )]
[), ;, JSType, jsType, =, getDeclaredType, (, t, ., getSourceName, (, ), ,, info, ,, member, ,, value, ), ;]
[;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (, name, ., isName]
[,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType]
[., getSourceName, (, ), ,, info, ,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, )]
[,, member, ,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null]
[,, value, ), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (]
[), ;, Node, name, =, member, ., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (, name, .]
[;, if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), )]
[., getLastChild, (, ), ;, if, (, jsType, !=, null, &&, (, name, ., isName, (, ), ||, name, .]
[), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, )]
[&&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, .]
[&&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, )]
[!=, null, &&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType]
[&&, (, name, ., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, )]
[&&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, .]
[), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name]
[||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType]
[., isName, (, ), ||, name, ., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, )]
[), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name]
[., isString, (, ), ), &&, thisType, ., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, )]
[), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, )]
[!=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,]
[., toObjectType, (, ), !=, null, ), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (]
[), {, thisType, ., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, )]
[;, }, }, }, }, private, static, final, class, StubDeclaration, {, private, final, Node, node, ;, private, final, boolean, isExtern]
[., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, ), ;, }, }, }, }, private, static]
[., toObjectType, (, ), ., defineDeclaredProperty, (, name, ., getString, (, ), ,, jsType, ,, member, ), ;, }, }]
[,, jsType, ,, member, ), ;, }, }, }, }, private, static, final, class, StubDeclaration, {, private, final, Node, node]
[., getString, (, ), ,, jsType, ,, member, ), ;, }, }, }, }, private, static, final, class, StubDeclaration, {]
[,, member, ), ;, }, }, }, }, private, static, final, class, StubDeclaration, {, private, final, Node, node, ;, private]
[), ;, }, }, }, }, private, static, final, class, StubDeclaration, {, private, final, Node, node, ;, private, final, boolean]
[=, node, ;, this, ., isExtern, =, isExtern, ;, this, ., ownerName, =, ownerName, ;, }, }, private, final, class]
[., node, =, node, ;, this, ., isExtern, =, isExtern, ;, this, ., ownerName, =, ownerName, ;, }, }, private]
[;, this, ., isExtern, =, isExtern, ;, this, ., ownerName, =, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends]
[=, isExtern, ;, this, ., ownerName, =, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder]
[., isExtern, =, isExtern, ;, this, ., ownerName, =, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {]
[;, this, ., ownerName, =, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder, (, Scope]
[=, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder, (, Scope, scope, ), {, super]
[., ownerName, =, ownerName, ;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder, (, Scope, scope, )]
[;, }, }, private, final, class, GlobalScopeBuilder, extends, AbstractScopeBuilder, {, private, GlobalScopeBuilder, (, Scope, scope, ), {, super, (, scope]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, super]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild]
[., visit, (, t, ,, n, ,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case]
[,, n, ,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :]
[,, parent, ), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, if, (]
[), ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, if, (, n, .]
[), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,]
[., getType, (, ), ), {, case, Token, ., VAR, :, if, (, n, ., hasOneChild, (, ), ), {]
[:, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,]
[., VAR, :, if, (, n, ., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (]
[), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,, n, ., getJSDocInfo, (, ), ), ;, }]
[., hasOneChild, (, ), ), {, checkForTypedef, (, t, ,, n, ., getFirstChild, (, ), ,, n, ., getJSDocInfo, (]
[;, }, break, ;, }, }, @, Override, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n, ,]
[,, n, ., getFirstChild, (, ), ,, n, ., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, @]
[,, n, ., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, @, Override, void, maybeDeclareQualifiedName, (, NodeTraversal, t]
[., getFirstChild, (, ), ,, n, ., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, @, Override, void]
[), ;, }, break, ;, }, }, @, Override, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo, info, ,, Node, n]
[., getJSDocInfo, (, ), ), ;, }, break, ;, }, }, @, Override, void, maybeDeclareQualifiedName, (, NodeTraversal, t, ,, JSDocInfo]
[;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, ), ;, }, private, void, checkForTypedef]
[,, n, ,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, )]
[,, info, ), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, ), ;, }]
[), ;, super, ., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, ), ;, }, private, void]
[;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info, ==]
[., maybeDeclareQualifiedName, (, t, ,, info, ,, n, ,, parent, ,, rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal]
[,, info, ,, n, ,, parent, ,, rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate]
[,, n, ,, parent, ,, rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo]
[,, parent, ,, rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, )]
[,, rhsValue, ), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if]
[), ;, }, private, void, checkForTypedef, (, NodeTraversal, t, ,, Node, candidate, ,, JSDocInfo, info, ), {, if, (, info]
[), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, )]
[||, !, info, ., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, )]
[==, null, ||, !, info, ., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName]
[||, !, info, ., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, )]
[), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, )]
[), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (, typedef, ==, null, )]
[., hasTypedefType, (, ), ), {, return, ;, }, String, typedef, =, candidate, ., getQualifiedName, (, ), ;, if, (]
[;, if, (, typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;]
[., getQualifiedName, (, ), ;, if, (, typedef, ==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef]
[), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType]
[==, null, ), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info]
[), {, return, ;, }, typeRegistry, ., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType]
[;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType]
[., declareType, (, typedef, ,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope]
[,, unknownType, ), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;]
[), ;, JSType, realType, =, info, ., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (]
[;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (]
[., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError]
[., getTypedefType, (, ), ., evaluate, (, scope, ,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler]
[,, typeRegistry, ), ;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, t]
[), ;, if, (, realType, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName]
[), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,]
[==, null, ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,]
[), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,]
[;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {]
[., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), )]
[), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), )]
[., make, (, t, ., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, .]
[,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if]
[., getSourceName, (, ), ,, candidate, ,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,]
[,, MALFORMED_TYPEDEF, ,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate]
[,, typedef, ), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp]
[), ), ;, }, typeRegistry, ., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, )]
[;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,]
[., overwriteDeclaredType, (, typedef, ,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate]
[,, realType, ), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent]
[), ;, if, (, candidate, ., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, )]
[), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,, getNativeType, (, NO_TYPE, ), ,, false, ), ;]
[., isGetProp, (, ), ), {, defineSlot, (, candidate, ,, candidate, ., getParent, (, ), ,, getNativeType, (, NO_TYPE, )]
[;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, ), {, super, (]
[,, candidate, ., getParent, (, ), ,, getNativeType, (, NO_TYPE, ), ,, false, ), ;, }, }, }, private, final]
[,, getNativeType, (, NO_TYPE, ), ,, false, ), ;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private]
[., getParent, (, ), ,, getNativeType, (, NO_TYPE, ), ,, false, ), ;, }, }, }, private, final, class, LocalScopeBuilder]
[,, false, ), ;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, )]
[), ,, false, ), ;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope]
[), ;, }, }, }, private, final, class, LocalScopeBuilder, extends, AbstractScopeBuilder, {, private, LocalScopeBuilder, (, Scope, scope, ), {, super]
[), ;, }, void, build, (, ), {, NodeTraversal, ., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,]
[;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=, null, ), {]
[., traverse, (, compiler, ,, scope, ., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope]
[,, scope, ., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, )]
[,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=]
[., getRootNode, (, ), ,, this, ), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;]
[), ;, AstFunctionContents, contents, =, getFunctionAnalysisResults, (, scope, ., getRootNode, (, ), ), ;, if, (, contents, !=, null, )]
[;, if, (, contents, !=, null, ), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {]
[), ;, if, (, contents, !=, null, ), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), )]
[., getRootNode, (, ), ), ;, if, (, contents, !=, null, ), {, for, (, String, varName, :, contents, .]
[), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar]
[!=, null, ), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope]
[), {, for, (, String, varName, :, contents, ., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar]
[), {, Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (, v, ., getScope, (]
[., getEscapedVarNames, (, ), ), {, Var, v, =, scope, ., getVar, (, varName, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, v, ., markEscaped, (, ), ;]
[., getVar, (, varName, ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, v]
[), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, v, ., markEscaped, (, )]
[;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :, contents, .]
[., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, v, ., markEscaped, (, ), ;, }, for]
[), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :, contents]
[==, scope, ), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry]
[., getScope, (, ), ==, scope, ), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry]
[), ;, v, ., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :, contents]
[;, }, for, (, Multiset, ., Entry, <, String, >, entry, :, contents, ., getAssignedNameCounts, (, ), ., entrySet, (]
[., markEscaped, (, ), ;, }, for, (, Multiset, ., Entry, <, String, >, entry, :, contents, ., getAssignedNameCounts, (]
[), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (]
[., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (, entry, ., getElement, (, ), ), ;]
[., getAssignedNameCounts, (, ), ., entrySet, (, ), ), {, Var, v, =, scope, ., getVar, (, entry, ., getElement]
[;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (]
[., getVar, (, entry, ., getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==]
[), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount]
[., getElement, (, ), ), ;, Preconditions, ., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if]
[;, if, (, entry, ., getCount, (, ), ==, 1, ), {, v, ., markAssignedExactlyOnce, (, ), ;, }, }]
[., checkState, (, v, ., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (, ), ==]
[), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {, v, ., markAssignedExactlyOnce, (, ), ;, }]
[==, scope, ), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {, v, ., markAssignedExactlyOnce, (, )]
[., getScope, (, ), ==, scope, ), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {, v]
[), ;, if, (, entry, ., getCount, (, ), ==, 1, ), {, v, ., markAssignedExactlyOnce, (, ), ;, }]
[), {, v, ., markAssignedExactlyOnce, (, ), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t]
[==, 1, ), {, v, ., markAssignedExactlyOnce, (, ), ;, }, }, }, }, @, Override, public, void, visit, (]
[., getCount, (, ), ==, 1, ), {, v, ., markAssignedExactlyOnce, (, ), ;, }, }, }, }, @, Override]
[), {, v, ., markAssignedExactlyOnce, (, ), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[., markAssignedExactlyOnce, (, ), ;, }, }, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {]
[==, scope, ., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope]
[), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {]
[., getRootNode, (, ), ), return, ;, if, (, n, ., isParamList, (, ), &&, parent, ==, scope, ., getRootNode]
[), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,, n, ,, parent, )]
[&&, parent, ==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, .]
[., isParamList, (, ), &&, parent, ==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return]
[), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,, n, ,, parent, )]
[==, scope, ., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (]
[), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,, n, ,, parent, )]
[., getRootNode, (, ), ), {, handleFunctionInputs, (, parent, ), ;, return, ;, }, super, ., visit, (, t, ,]
[;, return, ;, }, super, ., visit, (, t, ,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs, (]
[), ;, return, ;, }, super, ., visit, (, t, ,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs]
[;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;, String]
[., visit, (, t, ,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node]
[,, n, ,, parent, ), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, .]
[,, parent, ), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (]
[), ;, }, private, void, handleFunctionInputs, (, Node, fnNode, ), {, Node, fnNameNode, =, fnNode, ., getFirstChild, (, ), ;]
[;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), ), {]
[., getFirstChild, (, ), ;, String, fnName, =, fnNameNode, ., getString, (, ), ;, if, (, !, fnName, ., isEmpty]
[;, if, (, !, fnName, ., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (]
[., getString, (, ), ;, if, (, !, fnName, ., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =]
[), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||]
[), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||]
[., isEmpty, (, ), ), {, Scope, ., Var, fnVar, =, scope, ., getVar, (, fnName, ), ;, if, (]
[;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (]
[., getVar, (, fnName, ), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null]
[), ;, if, (, fnVar, ==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue]
[), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }, declareArguments]
[||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {]
[==, null, ||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, )]
[||, (, fnVar, ., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {]
[), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }, declareArguments]
[), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }]
[&&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType]
[!=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode]
[., getNameNode, (, ), !=, null, &&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode]
[&&, fnVar, ., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType]
[), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }]
[!=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;]
[., getInitialValue, (, ), !=, fnNode, ), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, )]
[), ), {, defineSlot, (, fnNameNode, ,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }]
[;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =]
[,, fnNode, ,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }, declareArguments, (, fnNode, ), ;, }]
[,, fnNode, ., getJSType, (, ), ,, false, ), ;, }, }, declareArguments, (, fnNode, ), ;, }, private, void]
[,, false, ), ;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {]
[., getJSType, (, ), ,, false, ), ;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (]
[), ;, }, }, declareArguments, (, fnNode, ), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters]
[;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =, functionNode, ., getFirstChild, (, ), ., getNext]
[), ;, }, private, void, declareArguments, (, Node, functionNode, ), {, Node, astParameters, =, functionNode, ., getFirstChild, (, ), .]
[;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, .]
[., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, iifeArgumentNode, =, null, ;, if, (, NodeUtil, ., isCallOrNewTarget, (]
[;, if, (, NodeUtil, ., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }]
[), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;]
[., isCallOrNewTarget, (, functionNode, ), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters]
[), ), {, iifeArgumentNode, =, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, )]
[=, functionNode, ., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =]
[;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, .]
[., getNext, (, ), ;, }, Node, body, =, astParameters, ., getNext, (, ), ;, FunctionType, functionType, =, JSType, .]
[;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null]
[., getNext, (, ), ;, FunctionType, functionType, =, JSType, ., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if]
[;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters]
[., toMaybeFunctionType, (, functionNode, ., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =]
[), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (]
[., getJSType, (, ), ), ;, if, (, functionType, !=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (]
[), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter]
[!=, null, ), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {]
[), {, Node, jsDocParameters, =, functionType, ., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter]
[;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node]
[., getParametersNode, (, ), ;, if, (, jsDocParameters, !=, null, ), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, )]
[), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (]
[!=, null, ), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, .]
[), {, Node, jsDocParameter, =, jsDocParameters, ., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (]
[;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==, null, ?]
[., getFirstChild, (, ), ;, for, (, Node, astParameter, :, astParameters, ., children, (, ), ), {, JSType, paramType, =]
[), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =]
[., children, (, ), ), {, JSType, paramType, =, jsDocParameter, ==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, )]
[;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, )]
[?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;]
[==, null, ?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==]
[?, unknownType, :, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;]
[:, jsDocParameter, ., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (]
[;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, )]
[., getJSType, (, ), ;, boolean, inferred, =, paramType, ==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=]
[;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var]
[||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName]
[==, null, ||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode]
[||, paramType, ==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName]
[;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var]
[==, unknownType, ;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, )]
[;, if, (, iifeArgumentNode, !=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var]
[), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, .]
[&&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||]
[!=, null, &&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==]
[&&, inferred, ), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||]
[), {, String, argumentName, =, iifeArgumentNode, ., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, .]
[;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, .]
[., getQualifiedName, (, ), ;, Var, argumentVar, =, argumentName, ==, null, ||, scope, ., getParent, (, ), ==, null, ?]
[;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType]
[?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&]
[||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName]
[==, null, ||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar]
[||, scope, ., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName]
[?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&]
[==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=]
[., getParent, (, ), ==, null, ?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;]
[?, null, :, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&]
[:, scope, ., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar]
[;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType]
[., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {]
[., getParent, (, ), ., getVar, (, argumentName, ), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred]
[), ;, if, (, argumentVar, !=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, .]
[), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType]
[&&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if]
[!=, null, &&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }]
[&&, !, argumentVar, ., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if]
[), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType]
[), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType]
[., isTypeInferred, (, ), ), {, paramType, =, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==]
[=, argumentVar, ., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;]
[;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode]
[., getType, (, ), ;, }, }, if, (, paramType, ==, null, ), {, paramType, =, unknownType, ;, }, defineSlot]
[), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (]
[==, null, ), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;]
[), {, paramType, =, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (]
[=, unknownType, ;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null]
[;, }, defineSlot, (, astParameter, ,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {]
[;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode]
[,, functionNode, ,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext]
[,, paramType, ,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, )]
[,, inferred, ), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }]
[), ;, if, (, jsDocParameter, !=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (]
[), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[!=, null, ), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {]
[), {, jsDocParameter, =, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =]
[=, jsDocParameter, ., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext]
[;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }]
[., getNext, (, ), ;, }, if, (, iifeArgumentNode, !=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, )]
[), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, }, private, static, class, FirstOrderFunctionAnalyzer]
[!=, null, ), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, }, private, static]
[), {, iifeArgumentNode, =, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, }, private, static, class, FirstOrderFunctionAnalyzer]
[=, iifeArgumentNode, ., getNext, (, ), ;, }, }, }, }, }, }, private, static, class, FirstOrderFunctionAnalyzer, extends, AbstractScopedCallback, implements]
[;, }, }, }, }, }, }, private, static, class, FirstOrderFunctionAnalyzer, extends, AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler]
[., getNext, (, ), ;, }, }, }, }, }, }, private, static, class, FirstOrderFunctionAnalyzer, extends, AbstractScopedCallback, implements, CompilerPass, {]
[=, compiler, ;, this, ., data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs]
[., data, =, outParam, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, externs, ==, null]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (]
[==, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, .]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (]
[;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root, ), ,, this]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList]
[,, root, ,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs]
[,, this, ), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root]
[), ;, }, else, {, NodeTraversal, ., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root, ), ,]
[;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (]
[., traverseRoots, (, compiler, ,, ImmutableList, ., of, (, externs, ,, root, ), ,, this, ), ;, }, }, @]
[,, ImmutableList, ., of, (, externs, ,, root, ), ,, this, ), ;, }, }, @, Override, public, void, enterScope]
[,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t]
[., of, (, externs, ,, root, ), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal]
[,, root, ), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if]
[), ,, this, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !]
[), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope]
[), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (, n, ,, new, AstFunctionContents, (]
[), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (, n, ,, new, AstFunctionContents, (]
[., inGlobalScope, (, ), ), {, Node, n, =, t, ., getScopeRoot, (, ), ;, data, ., put, (, n]
[;, data, ., put, (, n, ,, new, AstFunctionContents, (, n, ), ), ;, }, }, @, Override, public, void]
[., getScopeRoot, (, ), ;, data, ., put, (, n, ,, new, AstFunctionContents, (, n, ), ), ;, }, }]
[;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[., put, (, n, ,, new, AstFunctionContents, (, n, ), ), ;, }, }, @, Override, public, void, visit, (]
[,, new, AstFunctionContents, (, n, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null]
[., inGlobalScope, (, ), ), {, return, ;, }, if, (, n, ., isReturn, (, ), &&, n, ., getFirstChild]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[&&, n, ., getFirstChild, (, ), !=, null, ), {, data, ., get, (, t, ., getScopeRoot, (, ), )]
[., isReturn, (, ), &&, n, ., getFirstChild, (, ), !=, null, ), {, data, ., get, (, t, .]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[!=, null, ), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }]
[., getFirstChild, (, ), !=, null, ), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn]
[), {, data, ., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (]
[;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (, n, .]
[., recordNonEmptyReturn, (, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;, }]
[., get, (, t, ., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (, t, ., getScopeDepth]
[), ., recordNonEmptyReturn, (, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1, ), {, return, ;]
[., getScopeRoot, (, ), ), ., recordNonEmptyReturn, (, ), ;, }, if, (, t, ., getScopeDepth, (, ), <=, 1]
[), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&]
[<=, 1, ), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n]
[., getScopeDepth, (, ), <=, 1, ), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil]
[), {, return, ;, }, if, (, n, ., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;]
[&&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope]
[&&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =]
[., isName, (, ), &&, NodeUtil, ., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), )]
[&&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope]
[., isLValue, (, n, ), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, .]
[), &&, !, NodeUtil, ., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;]
[., isBleedingFunctionName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =, t]
[), ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, )]
[;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;]
[., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar]
[;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope]
[., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null]
[;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope]
[., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {]
[!=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, )]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {]
[;, if, (, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[., getScope, (, ), ;, if, (, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, .]
[), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if]
[., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name]
[;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope]
[., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {]
[., get, (, ownerScope, ., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=]
[), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), )]
[., getRootNode, (, ), ), ., recordAssignedName, (, name, ), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, .]
[), ;, }, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (]
[), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }]
[&&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName]
[!=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[&&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName]
[), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }]
[., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name]
[;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil]
[., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n, .]
[., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if]
[), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n]
[., getRootNode, (, ), ), ., recordEscapedVarName, (, name, ), ;, }, }, }, else, if, (, n, ., isGetProp]
[), ;, }, }, }, else, if, (, n, ., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&]
[), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =, t]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString]
[&&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =, NodeUtil, .]
[., isGetProp, (, ), &&, n, ., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString]
[., isUnscopedQualifiedName, (, ), &&, NodeUtil, ., isLValue, (, n, ), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (]
[), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =, t]
[., isLValue, (, n, ), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, )]
[), ), {, String, name, =, NodeUtil, ., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =]
[;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;]
[., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, ., getVar]
[., getRootOfQualifiedName, (, n, ), ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var]
[), ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Var, var, =, scope, .]
[;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope]
[., getScope, (, ), ;, Var, var, =, scope, ., getVar, (, name, ), ;, if, (, var, !=, null]
[;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope]
[., getVar, (, name, ), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (]
[), ;, if, (, var, !=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal]
[!=, null, ), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope]
[), {, Scope, ownerScope, =, var, ., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal]
[;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, .]
[., getScope, (, ), ;, if, (, scope, !=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, .]
[), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, )]
[&&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName]
[!=, ownerScope, &&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), )]
[&&, ownerScope, ., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName]
[), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, )]
[., isLocal, (, ), ), {, data, ., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n]
[;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n, ==]
[., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @]
[., get, (, ownerScope, ., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, ), ), ;, }]
[), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (]
[., getRootNode, (, ), ), ., recordEscapedQualifiedName, (, n, ., getQualifiedName, (, ), ), ;, }, }, }, }, }]
[), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, ), {, if, (, n]
[., getQualifiedName, (, ), ), ;, }, }, }, }, }, private, AstFunctionContents, getFunctionAnalysisResults, (, @, Nullable, Node, n, )]
[), {, return, null, ;, }, return, functionAnalysisResults, ., get, (, n, ), ;, }, }]
[==, null, ), {, return, null, ;, }, return, functionAnalysisResults, ., get, (, n, ), ;, }, }]
[), {, return, null, ;, }, return, functionAnalysisResults, ., get, (, n, ), ;, }, }]
[;, }, return, functionAnalysisResults, ., get, (, n, ), ;, }, }]
[;, }, }]
[., get, (, n, ), ;, }, }]
[), ;, }, }]
