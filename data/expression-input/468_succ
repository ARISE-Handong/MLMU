[;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[., warning, (, "JSC_USE_OF_WITH", ,, "The use of the 'with' structure should be avoided.", ), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[,, "The use of the 'with' structure should be avoided.", ), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public]
[), ;, ControlStructureCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, check, (, root]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, check]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, check, (, root, ), ;]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, check, (, scriptRoot, ), ;]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, check, (, scriptRoot, )]
[;, }, private, void, check, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {, case]
[), ;, }, private, void, check, (, Node, node, ), {, switch, (, node, ., getType, (, ), ), {]
[), {, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info]
[., getType, (, ), ), {, case, Token, ., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;]
[:, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&, info, ., getSuppressions]
[., WITH, :, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&, info]
[;, boolean, allowWith, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if]
[., getJSDocInfo, (, ), ;, boolean, allowWith, =, info, !=, null, &&, info, ., getSuppressions, (, ), ., contains, (]
[;, if, (, !, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (]
[&&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (]
[!=, null, &&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {]
[&&, info, ., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (]
[;, if, (, !, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (]
[., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }]
[., getSuppressions, (, ), ., contains, (, "with", ), ;, if, (, !, allowWith, ), {, report, (, node, ,]
[), ;, if, (, !, allowWith, ), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for]
[), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, .]
[), {, report, (, node, ,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, .]
[;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild, !=, null, ;]
[,, USE_OF_WITH, ), ;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild]
[), ;, }, break, ;, }, for, (, Node, bChild, =, node, ., getFirstChild, (, ), ;, bChild, !=, null]
[;, bChild, !=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, )]
[., getFirstChild, (, ), ;, bChild, !=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;]
[;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, ), ;, bChild, =, next]
[!=, null, ;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, ), ;, bChild]
[;, ), {, Node, next, =, bChild, ., getNext, (, ), ;, check, (, bChild, ), ;, bChild, =, next]
[;, check, (, bChild, ), ;, bChild, =, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType]
[., getNext, (, ), ;, check, (, bChild, ), ;, bChild, =, next, ;, }, }, private, void, report, (]
[;, bChild, =, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, .]
[), ;, bChild, =, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler]
[=, next, ;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (]
[;, }, }, private, void, report, (, Node, n, ,, DiagnosticType, error, ), {, compiler, ., report, (, JSError, .]
[;, }, }]
[., report, (, JSError, ., make, (, n, ., getSourceFileName, (, ), ,, n, ,, error, ), ), ;, }]
[), ;, }, }]
[., make, (, n, ., getSourceFileName, (, ), ,, n, ,, error, ), ), ;, }, }]
[,, n, ,, error, ), ), ;, }, }]
[., getSourceFileName, (, ), ,, n, ,, error, ), ), ;, }, }]
[,, error, ), ), ;, }, }]
[), ), ;, }, }]
