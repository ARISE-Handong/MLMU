[{, private, double, cursor, ;, private, List, ticks, ;, private, double, max, ;, public, AxisState, (, ), {, this, (]
[max, ;, public, AxisState, (, ), {, this, (, 0.0, ), ;, }, public, AxisState, (, double, cursor, ), {]
[max, ;, public, AxisState, (, ), {, this, (, 0.0, ), ;, }, public, AxisState, (, double, cursor, ), {]
[(, ), {, this, (, 0.0, ), ;, }, public, AxisState, (, double, cursor, ), {, this, ., cursor, =]
[{, this, (, 0.0, ), ;, }, public, AxisState, (, double, cursor, ), {, this, ., cursor, =, cursor, ;]
[{, this, (, 0.0, ), ;, }, public, AxisState, (, double, cursor, ), {, this, ., cursor, =, cursor, ;]
[), ;, }, public, AxisState, (, double, cursor, ), {, this, ., cursor, =, cursor, ;, this, ., ticks, =]
[., ticks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, double, getCursor, (, ), {, return]
[., ticks, =, new, java, ., util, ., ArrayList, (, ), ;, }, public, double, getCursor, (, ), {, return]
[public, double, getCursor, (, ), {, return, this, ., cursor, ;, }, public, void, setCursor, (, double, cursor, ), {]
[public, double, getCursor, (, ), {, return, this, ., cursor, ;, }, public, void, setCursor, (, double, cursor, ), {]
[), {, return, this, ., cursor, ;, }, public, void, setCursor, (, double, cursor, ), {, this, ., cursor, =]
[this, ., cursor, =, cursor, ;, }, public, void, moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (]
[this, ., cursor, =, cursor, ;, }, public, void, moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (]
[cursor, =, cursor, ;, }, public, void, moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (, edge, ==]
[cursor, =, cursor, ;, }, public, void, moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (, edge, ==]
[public, void, moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[moveCursor, (, double, units, ,, RectangleEdge, edge, ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, cursorUp, (]
[), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, cursorUp, (, units, ), ;, }, else, if, (]
[), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, cursorUp, (, units, ), ;, }, else, if, (]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, cursorUp, (, units, ), ;, }, else, if, (, edge, ==]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, cursorUp, (, units, ), ;, }, else, if, (, edge, ==]
[., TOP, ), {, cursorUp, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[), {, cursorUp, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, cursorDown, (]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, cursorDown, (, units, ), ;, }, else, if, (]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, cursorDown, (, units, ), ;, }, else, if, (]
[if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, cursorDown, (, units, ), ;, }, else, if, (, edge, ==]
[if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, cursorDown, (, units, ), ;, }, else, if, (, edge, ==]
[., BOTTOM, ), {, cursorDown, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[), {, cursorDown, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, cursorLeft, (]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, cursorLeft, (, units, ), ;, }, else, if, (]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, cursorLeft, (, units, ), ;, }, else, if, (]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, cursorLeft, (, units, ), ;, }, else, if, (, edge, ==]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, cursorLeft, (, units, ), ;, }, else, if, (, edge, ==]
[., LEFT, ), {, cursorLeft, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[), {, cursorLeft, (, units, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, cursorRight, (]
[RectangleEdge, ., RIGHT, ), {, cursorRight, (, units, ), ;, }, }, public, void, cursorUp, (, double, units, ), {]
[RectangleEdge, ., RIGHT, ), {, cursorRight, (, units, ), ;, }, }, public, void, cursorUp, (, double, units, ), {]
[{, cursorRight, (, units, ), ;, }, }, public, void, cursorUp, (, double, units, ), {, this, ., cursor, =]
[{, cursorRight, (, units, ), ;, }, }, public, void, cursorUp, (, double, units, ), {, this, ., cursor, =]
[{, cursorRight, (, units, ), ;, }, }, public, void, cursorUp, (, double, units, ), {, this, ., cursor, =]
[), ;, }, }, public, void, cursorUp, (, double, units, ), {, this, ., cursor, =, this, ., cursor, -]
[{, this, ., cursor, =, this, ., cursor, -, units, ;, }, public, void, cursorDown, (, double, units, ), {]
[{, this, ., cursor, =, this, ., cursor, -, units, ;, }, public, void, cursorDown, (, double, units, ), {]
[=, this, ., cursor, -, units, ;, }, public, void, cursorDown, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, -, units, ;, }, public, void, cursorDown, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, -, units, ;, }, public, void, cursorDown, (, double, units, ), {, this, ., cursor, =]
[-, units, ;, }, public, void, cursorDown, (, double, units, ), {, this, ., cursor, =, this, ., cursor, +]
[{, this, ., cursor, =, this, ., cursor, +, units, ;, }, public, void, cursorLeft, (, double, units, ), {]
[{, this, ., cursor, =, this, ., cursor, +, units, ;, }, public, void, cursorLeft, (, double, units, ), {]
[=, this, ., cursor, +, units, ;, }, public, void, cursorLeft, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, +, units, ;, }, public, void, cursorLeft, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, +, units, ;, }, public, void, cursorLeft, (, double, units, ), {, this, ., cursor, =]
[+, units, ;, }, public, void, cursorLeft, (, double, units, ), {, this, ., cursor, =, this, ., cursor, -]
[{, this, ., cursor, =, this, ., cursor, -, units, ;, }, public, void, cursorRight, (, double, units, ), {]
[{, this, ., cursor, =, this, ., cursor, -, units, ;, }, public, void, cursorRight, (, double, units, ), {]
[=, this, ., cursor, -, units, ;, }, public, void, cursorRight, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, -, units, ;, }, public, void, cursorRight, (, double, units, ), {, this, ., cursor, =]
[=, this, ., cursor, -, units, ;, }, public, void, cursorRight, (, double, units, ), {, this, ., cursor, =]
[-, units, ;, }, public, void, cursorRight, (, double, units, ), {, this, ., cursor, =, this, ., cursor, +]
[), {, this, ., cursor, =, this, ., cursor, +, units, ;, }, public, List, getTicks, (, ), {, return]
[), {, this, ., cursor, =, this, ., cursor, +, units, ;, }, public, List, getTicks, (, ), {, return]
[public, List, getTicks, (, ), {, return, this, ., ticks, ;, }, public, void, setTicks, (, List, ticks, ), {]
[public, List, getTicks, (, ), {, return, this, ., ticks, ;, }, public, void, setTicks, (, List, ticks, ), {]
[), {, return, this, ., ticks, ;, }, public, void, setTicks, (, List, ticks, ), {, this, ., ticks, =]
[setTicks, (, List, ticks, ), {, this, ., ticks, =, ticks, ;, }, public, double, getMax, (, ), {, return]
[setTicks, (, List, ticks, ), {, this, ., ticks, =, ticks, ;, }, public, double, getMax, (, ), {, return]
[public, double, getMax, (, ), {, return, this, ., max, ;, }, public, void, setMax, (, double, max, ), {]
[public, double, getMax, (, ), {, return, this, ., max, ;, }, public, void, setMax, (, double, max, ), {]
[), {, return, this, ., max, ;, }, public, void, setMax, (, double, max, ), {, this, ., max, =]
