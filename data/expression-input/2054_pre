[., MathArrays, ;, public, class, Vector3D, implements, Serializable, ,, Vector, <, Euclidean3D, >, {, public, static, final, Vector3D, ZERO, =]
[public, class, Vector3D, implements, Serializable, ,, Vector, <, Euclidean3D, >, {, public, static, final, Vector3D, ZERO, =, new, Vector3D, (]
[Vector3D, implements, Serializable, ,, Vector, <, Euclidean3D, >, {, public, static, final, Vector3D, ZERO, =, new, Vector3D, (, 0, ,]
[Serializable, ,, Vector, <, Euclidean3D, >, {, public, static, final, Vector3D, ZERO, =, new, Vector3D, (, 0, ,, 0, ,]
[final, Vector3D, ZERO, =, new, Vector3D, (, 0, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =]
[=, new, Vector3D, (, 0, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (]
[Vector3D, (, 0, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,]
[0, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,]
[final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =]
[=, new, Vector3D, (, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (]
[new, Vector3D, (, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -]
[(, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,]
[,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,]
[Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =]
[new, Vector3D, (, -, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (]
[(, -, 1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,]
[1, ,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,]
[final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =]
[=, new, Vector3D, (, 0, ,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (]
[Vector3D, (, 0, ,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,]
[(, 0, ,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -]
[,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,]
[Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =]
[new, Vector3D, (, 0, ,, -, 1, ,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (]
[(, 0, ,, -, 1, ,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,]
[,, -, 1, ,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,]
[final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =]
[=, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (]
[Vector3D, (, 0, ,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,]
[0, ,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,]
[,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -]
[Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =]
[new, Vector3D, (, 0, ,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (]
[new, Vector3D, (, 0, ,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (]
[,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,]
[,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,]
[1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, ., NaN, ,]
[1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, ., NaN, ,]
[(, Double, ., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =]
[NaN, ,, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (]
[NaN, ,, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,]
[NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,]
[NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[(, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,]
[POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,]
[POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,]
[(, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =]
[y, ;, private, final, double, z, ;, public, Vector3D, (, double, x, ,, double, y, ,, double, z, ), {]
[y, ;, private, final, double, z, ;, public, Vector3D, (, double, x, ,, double, y, ,, double, z, ), {]
[double, z, ;, public, Vector3D, (, double, x, ,, double, y, ,, double, z, ), {, this, ., x, =]
[;, public, Vector3D, (, double, x, ,, double, y, ,, double, z, ), {, this, ., x, =, x, ;]
[;, public, Vector3D, (, double, x, ,, double, y, ,, double, z, ), {, this, ., x, =, x, ;]
[double, x, ,, double, y, ,, double, z, ), {, this, ., x, =, x, ;, this, ., y, =]
[,, double, y, ,, double, z, ), {, this, ., x, =, x, ;, this, ., y, =, y, ;]
[,, double, y, ,, double, z, ), {, this, ., x, =, x, ;, this, ., y, =, y, ;]
[double, z, ), {, this, ., x, =, x, ;, this, ., y, =, y, ;, this, ., z, =]
[this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[[, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[(, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }]
[(, v, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =, v, []
[new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;]
[new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;]
[., length, ,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[., length, ,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, []
[;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;]
[;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;]
[x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =]
[x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =]
[v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =, v, []
[=, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =]
[=, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =]
[], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (]
[public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;]
[public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;]
[alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;, this, ., x, =]
[alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;, this, ., x, =]
[alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;, this, ., x, =]
[), {, double, cosDelta, =, FastMath, ., cos, (, delta, ), ;, this, ., x, =, FastMath, ., cos, (]
[cosDelta, =, FastMath, ., cos, (, delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *]
[FastMath, ., cos, (, delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;]
[FastMath, ., cos, (, delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;]
[delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =]
[delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =]
[delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =]
[., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (]
[FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *]
[cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;]
[cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;]
[*, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =]
[*, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =]
[., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, ., sin, (]
[z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {]
[z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {]
[sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =]
[sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =]
[delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *]
[delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *]
[public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;]
[public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;]
[a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =]
[a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =]
[Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *]
[Vector3D, u, ), {, this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *]
[this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;]
[this, ., x, =, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;]
[a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =]
[a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =]
[u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a, *]
[u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a, *]
[., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {]
[., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {]
[public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, ., x, =]
[public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, ., x, =]
[a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (]
[Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[a2, ,, Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,]
[Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[Vector3D, u2, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;]
[., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;]
[., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =]
[., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =]
[,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;]
[., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;]
[., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =]
[., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =]
[,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[(, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {]
[(, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {]
[Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {, this, ., x, =]
[Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {, this, ., x, =]
[a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (]
[Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[a3, ,, Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,]
[Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[Vector3D, u3, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,]
[x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,]
[x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,]
[(, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;]
[(, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;]
[., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =]
[., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =]
[,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,]
[y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,]
[y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,]
[(, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;]
[(, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;]
[., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =]
[., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =]
[,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,]
[z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,]
[z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,]
[,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {]
[,, double, a2, ,, Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {]
[Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {, this, ., x, =]
[Vector3D, u2, ,, double, a3, ,, Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {, this, ., x, =]
[a3, ,, Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (]
[Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[Vector3D, u3, ,, double, a4, ,, Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,]
[a4, ,, Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,]
[Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[Vector3D, u4, ), {, this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,]
[this, ., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,]
[x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,]
[x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,]
[linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,]
[a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,]
[a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,]
[,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;]
[,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;]
[., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =]
[., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =]
[,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,]
[y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,]
[y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,]
[linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,]
[a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,]
[a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,]
[,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;]
[,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;]
[., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =]
[., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =]
[,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,]
[z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,]
[z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,]
[linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,]
[a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,]
[a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,]
[,, u3, ., z, ,, a4, ,, u4, ., z, ), ;, }, public, double, getX, (, ), {, return]
[), ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return]
[x, ;, }, public, double, getY, (, ), {, return, y, ;, }, public, double, getZ, (, ), {, return]
[}, public, double, getZ, (, ), {, return, z, ;, }, public, double, [, ], toArray, (, ), {, return]
[(, ), {, return, z, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ]]
[), {, return, z, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {]
[return, z, ;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {, x, ,]
[;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {, x, ,, y, ,]
[new, double, [, ], {, x, ,, y, ,, z, }, ;, }, public, Space, getSpace, (, ), {, return]
[new, double, [, ], {, x, ,, y, ,, z, }, ;, }, public, Space, getSpace, (, ), {, return]
[Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;, }, public, Vector3D, getZero, (, ), {, return]
[), ;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[), ;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return]
[Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (]
[), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +]
[), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +]
[;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (]
[double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (, y, ), +]
[double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (, y, ), +]
[{, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (, y, ), +, FastMath, ., abs, (]
[abs, (, y, ), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return]
[abs, (, y, ), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *]
[(, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +]
[(, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *]
[}, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y, +]
[}, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y, +]
[double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y, +, z, *]
[*, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return]
[*, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return]
[*, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return]
[*, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return]
[+, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *]
[*, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[*, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[+, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[*, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +]
[*, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +, z, *]
[x, *, x, +, y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return]
[x, *, x, +, y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return]
[y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (]
[y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (]
[z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (]
[z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (]
[}, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs, (]
[getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,]
[return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (]
[(, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ,]
[(, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ,]
[(, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ,, FastMath, ., abs, (]
[y, ), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return]
[y, ), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return]
[FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (]
[abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (, y, ,]
[), {, return, FastMath, ., atan2, (, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return]
[), {, return, FastMath, ., atan2, (, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return]
[., atan2, (, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (]
[., atan2, (, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (]
[(, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (, z, /]
[), ), ;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[}, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +]
[Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,]
[Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +]
[Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +]
[Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,]
[Vector3D, ), v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,]
[v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,, z, +]
[v, ;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,, z, +]
[z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return]
[}, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (]
[Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,]
[(, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,]
[factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,, factor, ,]
[Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,, factor, ,, (, Vector3D, )]
[v, ), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[}, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -]
[Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,]
[Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -]
[Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -]
[Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,]
[Vector3D, ), v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,]
[v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,, z, -]
[v, ;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,, z, -]
[), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return]
[public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (]
[subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,]
[final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,]
[double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,, -]
[,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,, -, factor, ,]
[<, Euclidean3D, >, v, ), {, return, new, Vector3D, (, 1, ,, this, ,, -, factor, ,, (, Vector3D, )]
[factor, ,, (, Vector3D, ), v, ), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =]
[), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[}, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==]
[(, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (]
[s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /]
[return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =]
[return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =]
[(, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *]
[}, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (]
[}, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (]
[Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (, threshold, ==]
[throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (, threshold, ==, 0, ), {, throw]
[double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (]
[double, threshold, =, 0.6, *, getNorm, (, ), ;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (]
[;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (]
[;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (]
[;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (]
[{, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, ), <=]
[., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =]
[., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =]
[), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /]
[), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /]
[(, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[(, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[(, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *]
[(, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +]
[(, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +]
[), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *]
[{, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;, return]
[=, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (]
[/, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,]
[/, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,]
[., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *]
[(, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,]
[(, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,]
[y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -]
[y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *]
[return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if, (]
[return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if, (]
[return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if, (]
[0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (]
[*, z, ,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=]
[y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =]
[y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =]
[;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /]
[;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /]
[(, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[(, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[(, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *]
[(, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +]
[(, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +]
[), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *]
[{, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return]
[=, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (]
[=, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (]
[1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -]
[FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *]
[sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,]
[x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,]
[x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,]
[x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *]
[return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =]
[return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =]
[Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /]
[Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /]
[*, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[*, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[*, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *]
[,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +]
[,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +]
[*, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *]
[}, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;, return]
[=, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (]
[=, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (]
[/, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,]
[sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -]
[x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *]
[x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,]
[), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =]
[), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =]
[), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =]
[angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =, v1, ., getNorm, (, ), *]
[angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =, v1, ., getNorm, (, ), *]
[throws, MathArithmeticException, {, double, normProduct, =, v1, ., getNorm, (, ), *, v2, ., getNorm, (, ), ;, if, (]
[throws, MathArithmeticException, {, double, normProduct, =, v1, ., getNorm, (, ), *, v2, ., getNorm, (, ), ;, if, (]
[{, double, normProduct, =, v1, ., getNorm, (, ), *, v2, ., getNorm, (, ), ;, if, (, normProduct, ==]
[v1, ., getNorm, (, ), *, v2, ., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw]
[(, ), *, v2, ., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (]
[(, ), *, v2, ., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (]
[if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =]
[if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =]
[0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (]
[(, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =]
[(, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =]
[., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *]
[}, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (]
[}, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (]
[double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (]
[double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (]
[=, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <]
[v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -]
[(, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||]
[v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (]
[v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (]
[;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >]
[;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =]
[(, (, dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (]
[dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,]
[||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (]
[||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (]
[dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=]
[), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return]
[), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return]
[=, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (]
[=, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (]
[=, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (]
[), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /]
[>=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[>=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[>=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -]
[return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -]
[(, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (]
[(, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (]
[(, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (]
[/, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /]
[return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[-, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (]
[-, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (]
[., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (, dot, /]
[;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return]
[FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (]
[., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -]
[(, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,]
[dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -]
[normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y, ,]
[), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y, ,, -]
[-, x, ,, -, y, ,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return]
[-, y, ,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (]
[-, y, ,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (]
[,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *]
[z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,]
[z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,]
[;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a, *]
[public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a, *, y, ,]
[public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a, *, y, ,]
[scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a, *, y, ,, a, *]
[*, x, ,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return]
[*, x, ,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return]
[*, x, ,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return]
[*, x, ,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return]
[*, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (]
[a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||]
[a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||]
[;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ||]
[boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ||]
[{, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ||, Double, ., isNaN, (]
[isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return]
[(, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !]
[Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&]
[., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (]
[public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||]
[public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||]
[), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (]
[!, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||]
[!, isNaN, (, ), &&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||]
[&&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (]
[., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[(, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =]
[), {, return, true, ;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, )]
[;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (]
[;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (]
[{, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[{, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[other, ;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[(, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==]
[(, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==]
[), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==]
[return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==]
[), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&]
[;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (]
[;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (]
[return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==]
[return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==]
[), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return]
[rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return]
[public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (]
[int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (]
[(, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (, 164, *]
[(, ), {, if, (, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (, 164, *]
[(, isNaN, (, ), ), {, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (]
[), ), {, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +]
[), ), {, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +]
[{, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *]
[{, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *]
[}, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (]
[*, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +]
[*, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +]
[MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (]
[), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[}, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return]
[dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return]
[<, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (]
[>, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (, x, ,]
[>, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (, x, ,]
[final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,]
[v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,]
[v3, =, (, Vector3D, ), v, ;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,]
[), v, ;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,]
[;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,]
[;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,]
[z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[}, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,]
[{, final, Vector3D, v3, =, (, Vector3D, ), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,]
[=, (, Vector3D, ), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,]
[(, Vector3D, ), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -]
[), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,]
[), v, ;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,]
[Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,]
[Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,]
[linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (]
[y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,]
[y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,]
[z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,]
[,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -]
[z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,]
[z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,]
[), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,]
[), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,]
[linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (]
[z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,]
[z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,]
[x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,]
[,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -]
[x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,]
[x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,]
[x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[(, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[(, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, dx, +]
[final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, dx, +, dy, +]
[dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (]
[-, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *]
[=, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +]
[=, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +]
[., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *]
[*, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (]
[Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (]
[(, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[=, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (]
[(, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max, (]
[final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max, (]
[FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (]
[abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,]
[., z, -, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,]
[,, dz, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =]
[v, ), {, final, Vector3D, v3, =, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[=, (, Vector3D, ), v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =]
[v, ;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =]
[x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return]
[=, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +]
[-, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +]
[double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +, dz, *]
[dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., dotProduct, (]
[(, v2, ), ;, }, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, ), {, return]
[(, v2, ), ;, }, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, ), {, return]
[}, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, ), {, return, v1, ., crossProduct, (]
[., crossProduct, (, v2, ), ;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[., crossProduct, (, v2, ), ;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance1, (]
[., distance1, (, v2, ), ;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[., distance1, (, v2, ), ;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance, (]
[., distance, (, v2, ), ;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[., distance, (, v2, ), ;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceInf, (]
[., distanceInf, (, v2, ), ;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[., distanceInf, (, v2, ), ;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceSq, (]
[), {, return, v1, ., distanceSq, (, v2, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), {, return, v1, ., distanceSq, (, v2, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), {, return, v1, ., distanceSq, (, v2, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector3DFormat, ., getInstance, (, ), ., format, (]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector3DFormat, (]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector3DFormat, (, format, ), ., format, (]
