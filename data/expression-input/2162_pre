[commons, ., math3, ., random, ., Well19937c, ;, public, class, GammaDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, GammaDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[;, private, final, double, solverAbsoluteAccuracy, ;, public, GammaDistribution, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, this, (]
[final, double, solverAbsoluteAccuracy, ;, public, GammaDistribution, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, this, (, shape, ,]
[solverAbsoluteAccuracy, ;, public, GammaDistribution, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, this, (, shape, ,, scale, ,]
[), ;, }, public, GammaDistribution, (, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, shape, ,]
[double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, shape, ,, scale, ,]
[public, GammaDistribution, (, RandomGenerator, rng, ,, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[,, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[,, double, shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[shape, ,, double, scale, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,]
[(, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (]
[(, shape, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw]
[(, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[(, LocalizedFormats, ., SHAPE, ,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, shape, ), ;, }, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,]
[}, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }]
[}, if, (, scale, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;]
[NotStrictlyPositiveException, (, LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =]
[LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;]
[LocalizedFormats, ., SCALE, ,, scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;]
[scale, ), ;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =]
[;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;]
[;, }, this, ., shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;]
[shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =]
[shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =]
[shape, =, shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =]
[shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +]
[shape, ;, this, ., scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +]
[scale, =, scale, ;, this, ., solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +]
[solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =]
[solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =]
[solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =]
[this, ., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /]
[., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (]
[., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (]
[., shiftedShape, =, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (]
[=, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *]
[=, shape, +, Gamma, ., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *]
[., LANCZOS_G, +, 0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *]
[0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;]
[0.5, ;, final, double, aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;]
[aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =]
[aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =]
[aux, =, FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =]
[FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *]
[FastMath, ., E, /, (, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *]
[(, 2.0, *, FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (]
[FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /]
[FastMath, ., PI, *, shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /]
[shiftedShape, ), ;, this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (]
[this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;]
[this, ., densityPrefactor2, =, shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;]
[shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =]
[shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =]
[shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =]
[shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =]
[shape, *, FastMath, ., sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =]
[sqrt, (, aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /]
[aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *]
[aux, ), /, Gamma, ., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *]
[., lanczos, (, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (]
[(, shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,]
[shape, ), ;, this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -]
[this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *]
[this, ., densityPrefactor1, =, this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *]
[this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (]
[this, ., densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (]
[densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +]
[densityPrefactor2, /, scale, *, FastMath, ., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +]
[., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;]
[., pow, (, shiftedShape, ,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;]
[,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =]
[,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =]
[,, -, shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =]
[shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +]
[shape, ), *, FastMath, ., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +]
[., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -]
[., exp, (, shape, +, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -]
[+, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (]
[+, Gamma, ., LANCZOS_G, ), ;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (]
[;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;]
[;, this, ., minY, =, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;]
[=, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =]
[=, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =]
[=, shape, +, Gamma, ., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =]
[., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (]
[., LANCZOS_G, -, FastMath, ., log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (]
[log, (, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /]
[(, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (]
[(, Double, ., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (]
[., MAX_VALUE, ), ;, this, ., maxLogY, =, FastMath, ., log, (, Double, ., MAX_VALUE, ), /, (, shape, -]
[., MAX_VALUE, ), /, (, shape, -, 1.0, ), ;, }, @, Deprecated, public, double, getAlpha, (, ), {, return]
[}, @, Deprecated, public, double, getAlpha, (, ), {, return, shape, ;, }, public, double, getShape, (, ), {, return]
[}, public, double, getShape, (, ), {, return, shape, ;, }, @, Deprecated, public, double, getBeta, (, ), {, return]
[}, @, Deprecated, public, double, getBeta, (, ), {, return, scale, ;, }, public, double, getScale, (, ), {, return]
[public, double, getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {, if, (]
[public, double, getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {, if, (]
[getScale, (, ), {, return, scale, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[return, scale, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, 0, ), {, return]
[(, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, final, double, y, =]
[(, double, x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, final, double, y, =]
[x, ), {, if, (, x, <, 0, ), {, return, 0, ;, }, final, double, y, =, x, /]
[(, x, <, 0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (]
[(, x, <, 0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (]
[x, <, 0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (]
[x, <, 0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (]
[0, ), {, return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=]
[return, 0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||]
[0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (]
[0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (]
[0, ;, }, final, double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (]
[double, y, =, x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (, FastMath, ., log, (]
[x, /, scale, ;, if, (, (, y, <=, minY, ), ||, (, FastMath, ., log, (, y, ), >=]
[<=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =]
[<=, minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =]
[minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (]
[minY, ), ||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (]
[||, (, FastMath, ., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y, -]
[., log, (, y, ), >=, maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /]
[maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =]
[maxLogY, ), ), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =]
[), {, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *]
[{, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (]
[{, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (]
[{, final, double, aux1, =, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (]
[=, (, y, -, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (]
[-, shiftedShape, ), /, shiftedShape, ;, final, double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -]
[double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =]
[double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =]
[double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =]
[double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =]
[double, aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =]
[aux2, =, shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -]
[shape, *, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *]
[*, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (]
[*, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (]
[*, (, FastMath, ., log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (]
[log1p, (, aux1, ), -, aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +]
[), -, aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /]
[aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +]
[aux1, ), ;, final, double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +]
[double, aux3, =, -, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +]
[-, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return]
[-, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return]
[-, y, *, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return]
[*, (, Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /]
[Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *]
[Gamma, ., LANCZOS_G, +, 0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *]
[0.5, ), /, shiftedShape, +, Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (]
[Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return]
[Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return]
[Gamma, ., LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return]
[LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *]
[LANCZOS_G, +, aux2, ;, return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *]
[return, densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (]
[densityPrefactor2, /, x, *, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -]
[*, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *]
[*, FastMath, ., exp, (, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *]
[(, aux3, ), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (]
[), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,]
[), ;, }, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,]
[}, return, densityPrefactor1, *, FastMath, ., exp, (, -, y, ), *, FastMath, ., pow, (, y, ,, shape, -]
[,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[,, shape, -, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (]
[-, 1, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {]
[public, double, cumulativeProbability, (, double, x, ), {, double, ret, ;, if, (, x, <=, 0, ), {, ret, =]
[x, ), {, double, ret, ;, if, (, x, <=, 0, ), {, ret, =, 0, ;, }, else, {]
[{, double, ret, ;, if, (, x, <=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =]
[if, (, x, <=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (]
[x, <=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,]
[x, <=, 0, ), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,]
[0, ), {, ret, =, 0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /]
[0, ;, }, else, {, ret, =, Gamma, ., regularizedGammaP, (, shape, ,, x, /, scale, ), ;, }, return]
[,, x, /, scale, ), ;, }, return, ret, ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return, shape, *]
[}, public, double, getNumericalMean, (, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {, return]
[}, public, double, getNumericalMean, (, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {, return]
[double, getNumericalMean, (, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {, return, shape, *]
[(, ), {, return, shape, *, scale, ;, }, public, double, getNumericalVariance, (, ), {, return, shape, *, scale, *]
[double, getNumericalVariance, (, ), {, return, shape, *, scale, *, scale, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[scale, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[scale, ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, if, (]
[public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, if, (]
[isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, if, (, shape, <]
[true, ;, }, @, Override, public, double, sample, (, ), {, if, (, shape, <, 1, ), {, while, (]
[sample, (, ), {, if, (, shape, <, 1, ), {, while, (, true, ), {, final, double, u, =]
[sample, (, ), {, if, (, shape, <, 1, ), {, while, (, true, ), {, final, double, u, =]
[{, while, (, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =]
[{, while, (, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =]
[(, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =, 1, +]
[(, true, ), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =, 1, +]
[), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /]
[), {, final, double, u, =, random, ., nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /]
[nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =]
[nextDouble, (, ), ;, final, double, bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =]
[), ;, final, double, bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *]
[bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *, u, ;, if, (]
[bGS, =, 1, +, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *, u, ;, if, (]
[1, +, shape, /, FastMath, ., E, ;, final, double, p, =, bGS, *, u, ;, if, (, p, <=]
[;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =]
[;, final, double, p, =, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =]
[=, bGS, *, u, ;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (]
[*, u, ;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,]
[*, u, ;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,]
[;, if, (, p, <=, 1, ), {, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /]
[{, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /, shape, ), ;, final, double, u2, =]
[{, final, double, x, =, FastMath, ., pow, (, p, ,, 1, /, shape, ), ;, final, double, u2, =]
[(, p, ,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (]
[(, p, ,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (]
[,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >]
[,, 1, /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (]
[;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., exp, (, -]
[;, if, (, u2, >, FastMath, ., exp, (, -, x, ), ), {, continue, ;, }, else, {, return]
[;, if, (, u2, >, FastMath, ., exp, (, -, x, ), ), {, continue, ;, }, else, {, return]
[(, u2, >, FastMath, ., exp, (, -, x, ), ), {, continue, ;, }, else, {, return, scale, *]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =]
[{, continue, ;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =, -]
[;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *]
[;, }, else, {, return, scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *]
[return, scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (]
[return, scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (]
[scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (]
[scale, *, x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (]
[x, ;, }, }, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (, bGS, -]
[}, else, {, final, double, x, =, -, 1, *, FastMath, ., log, (, (, bGS, -, p, ), /]
[-, 1, *, FastMath, ., log, (, (, bGS, -, p, ), /, shape, ), ;, final, double, u2, =]
[-, 1, *, FastMath, ., log, (, (, bGS, -, p, ), /, shape, ), ;, final, double, u2, =]
[bGS, -, p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (]
[bGS, -, p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (]
[p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >]
[p, ), /, shape, ), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >]
[), ;, final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (]
[final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x, ,]
[final, double, u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x, ,]
[u2, =, random, ., nextDouble, (, ), ;, if, (, u2, >, FastMath, ., pow, (, x, ,, shape, -]
[u2, >, FastMath, ., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }, else, {, return]
[u2, >, FastMath, ., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }, else, {, return]
[FastMath, ., pow, (, x, ,, shape, -, 1, ), ), {, continue, ;, }, else, {, return, scale, *]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d, =]
[), {, continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d, =]
[continue, ;, }, else, {, return, scale, *, x, ;, }, }, }, }, final, double, d, =, shape, -]
[scale, *, x, ;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =]
[scale, *, x, ;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =]
[x, ;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /]
[;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (]
[;, }, }, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (]
[}, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (, 3, *]
[}, }, }, final, double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (, 3, *]
[double, d, =, shape, -, 0.333333333333333333, ;, final, double, c, =, 1, /, (, 3, *, FastMath, ., sqrt, (]
[;, final, double, c, =, 1, /, (, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (]
[(, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (, true, ), {, final, double, x, =]
[(, 3, *, FastMath, ., sqrt, (, d, ), ), ;, while, (, true, ), {, final, double, x, =]
[;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =]
[;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =]
[;, while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =]
[while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (]
[while, (, true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (]
[true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +]
[true, ), {, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +]
[{, final, double, x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *]
[x, =, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *]
[=, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (]
[=, random, ., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (]
[., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +]
[., nextGaussian, (, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +]
[(, ), ;, final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +, c, *]
[final, double, v, =, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *]
[double, v, =, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *, (]
[double, v, =, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *, (]
[=, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *, (, 1, +]
[=, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *, (, 1, +]
[1, +, c, *, x, ), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *]
[), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (]
[), *, (, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (]
[(, 1, +, c, *, x, ), *, (, 1, +, c, *, x, ), ;, if, (, v, <=]
[+, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =]
[+, c, *, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =]
[*, x, ), ;, if, (, v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *]
[v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final, double, u, =]
[v, <=, 0, ), {, continue, ;, }, final, double, x2, =, x, *, x, ;, final, double, u, =]
[final, double, x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (]
[final, double, x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (]
[x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <]
[x2, =, x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <]
[x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -]
[x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -]
[x, *, x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -]
[x, ;, final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *]
[final, double, u, =, random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *]
[random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return]
[random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return]
[random, ., nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return]
[nextDouble, (, ), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *]
[), ;, if, (, u, <, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *]
[<, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (]
[<, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (]
[<, 1, -, 0.0331, *, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (]
[*, x2, *, x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (]
[x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <]
[x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <]
[x2, ), {, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <]
[{, return, scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *]
[scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +]
[scale, *, d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +]
[d, *, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *]
[*, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (]
[*, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (]
[*, v, ;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (]
[;, }, if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -]
[if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -, v, +]
[if, (, FastMath, ., log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -, v, +]
[log, (, u, ), <, 0.5, *, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (]
[*, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return]
[*, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return]
[*, x2, +, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return]
[+, d, *, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *]
[*, (, 1, -, v, +, FastMath, ., log, (, v, ), ), ), {, return, scale, *, d, *]
