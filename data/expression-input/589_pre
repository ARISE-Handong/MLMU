[RealMatrix, cachedQ, ;, private, RealMatrix, cachedQt, ;, private, RealMatrix, cachedT, ;, public, TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (]
[cachedQ, ;, private, RealMatrix, cachedQt, ;, private, RealMatrix, cachedT, ;, public, TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (, !]
[cachedQ, ;, private, RealMatrix, cachedQt, ;, private, RealMatrix, cachedT, ;, public, TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (, !]
[cachedT, ;, public, TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw]
[TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[TriDiagonalTransformer, (, RealMatrix, matrix, ), {, if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[if, (, !, matrix, ., isSquare, (, ), ), {, throw, new, NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =]
[NonSquareMatrixException, (, matrix, ., getRowDimension, (, ), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =]
[), ,, matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =]
[matrix, ., getColumnDimension, (, ), ), ;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =]
[;, }, final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;]
[final, int, m, =, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =]
[=, matrix, ., getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, []
[getRowDimension, (, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;]
[), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =]
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, []
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, []
[., getData, (, ), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, [, m, -]
[), ;, main, =, new, double, [, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;]
[main, =, new, double, [, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =]
[new, double, [, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;]
[[, m, ], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =]
[], ;, secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;]
[secondary, =, new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =]
[new, double, [, m, -, 1, ], ;, cachedQ, =, null, ;, cachedQt, =, null, ;, cachedT, =, null, ;]
[=, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (]
[=, null, ;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (]
[;, cachedT, =, null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==]
[null, ;, transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {]
[transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =]
[transform, (, ), ;, }, public, RealMatrix, getQ, (, ), {, if, (, cachedQ, ==, null, ), {, cachedQ, =]
[{, if, (, cachedQ, ==, null, ), {, cachedQ, =, getQT, (, ), ., transpose, (, ), ;, }, return]
[(, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (]
[(, ), ., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (]
[., transpose, (, ), ;, }, return, cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==]
[cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==, null, ), {, final, int, m, =]
[cachedQ, ;, }, public, RealMatrix, getQT, (, ), {, if, (, cachedQt, ==, null, ), {, final, int, m, =]
[cachedQt, ==, null, ), {, final, int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =]
[), {, final, int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =, new, double, []
[int, m, =, householderVectors, ., length, ;, double, [, ], [, ], qta, =, new, double, [, m, ], []
[[, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =]
[[, ], [, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =]
[[, ], qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -]
[qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;]
[qta, =, new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;]
[new, double, [, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=]
[[, m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, 1, ;]
[m, ], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, 1, ;, --]
[k, =, m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =]
[k, =, m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =]
[m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, []
[m, -, 1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, []
[1, ;, k, >=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -]
[>=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;]
[>=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;]
[>=, 1, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], []
[double, [, ], hK, =, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =]
[=, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (]
[=, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (]
[=, householderVectors, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (]
[[, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[1, ], ;, qta, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=]
[[, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =]
[[, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =]
[], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (]
[;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, []
[;, if, (, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, []
[(, hK, [, k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -]
[k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *]
[k, ], !=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *]
[!=, 0.0, ), {, final, double, inv, =, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, []
[=, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =]
[=, 1.0, /, (, secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =]
[/, (, secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /]
[/, (, secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /]
[secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, []
[secondary, [, k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, []
[k, -, 1, ], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -]
[], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;]
[], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;]
[], *, hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;]
[hK, [, k, ], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, []
[], ), ;, double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], []
[double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =]
[double, beta, =, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =]
[=, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +]
[=, 1.0, /, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +]
[/, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *]
[/, secondary, [, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *]
[[, k, -, 1, ], ;, qta, [, k, ], [, k, ], =, 1, +, beta, *, hK, []
[k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =]
[k, ], [, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =]
[[, k, ], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +]
[], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[], =, 1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[1, +, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <]
[beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[*, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], []
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =]
[1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *]
[1, ;, i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *]
[i, <, m, ;, ++, i, ), {, qta, [, k, ], [, i, ], =, beta, *, hK, []
[[, k, ], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =]
[[, k, ], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =]
[], [, i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +]
[i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;]
[i, ], =, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;]
[=, beta, *, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <]
[*, hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;]
[hK, [, i, ], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++]
[], ;, }, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {]
[}, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, beta, =]
[+, 1, ;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =]
[+, 1, ;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =]
[;, j, <, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +]
[<, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[<, m, ;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[;, ++, j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[j, ), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[), {, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[=, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=]
[(, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=, qta, []
[=, k, +, 1, ;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], []
[1, ;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *]
[1, ;, i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *]
[i, <, m, ;, ++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK, []
[++, i, ), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }]
[), {, beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=]
[beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;]
[beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;]
[beta, +=, qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;]
[qta, [, j, ], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, []
[], [, i, ], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], []
[], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =]
[], *, hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =]
[hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *]
[hK, [, i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *]
[i, ], ;, }, beta, *=, inv, ;, qta, [, j, ], [, k, ], =, beta, *, hK, []
[qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =]
[qta, [, j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =]
[j, ], [, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +]
[[, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[[, k, ], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[], =, beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <]
[beta, *, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[*, hK, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, []
[int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], []
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=]
[1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *]
[1, ;, i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *]
[i, <, m, ;, ++, i, ), {, qta, [, j, ], [, i, ], +=, beta, *, hK, []
[{, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }]
[{, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }]
[{, qta, [, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }]
[[, j, ], [, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, []
[[, i, ], +=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], []
[+=, beta, *, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =]
[*, hK, [, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;]
[[, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =]
[[, i, ], ;, }, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =]
[}, }, }, }, qta, [, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (]
[[, 0, ], [, 0, ], =, 1, ;, cachedQt, =, MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return]
[MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (]
[MatrixUtils, ., createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (]
[createRealMatrix, (, qta, ), ;, }, return, cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==]
[cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==, null, ), {, final, int, m, =]
[cachedQt, ;, }, public, RealMatrix, getT, (, ), {, if, (, cachedT, ==, null, ), {, final, int, m, =]
[cachedT, ==, null, ), {, final, int, m, =, main, ., length, ;, double, [, ], [, ], ta, =]
[), {, final, int, m, =, main, ., length, ;, double, [, ], [, ], ta, =, new, double, []
[int, m, =, main, ., length, ;, double, [, ], [, ], ta, =, new, double, [, m, ], []
[[, ], [, ], ta, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =]
[[, ], ta, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[[, ], ta, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[ta, =, new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[double, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, []
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, [, i, ], []
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, [, i, ], [, i, ], =]
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, ta, [, i, ], [, i, ], =]
[0, ;, i, <, m, ;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, []
[;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[;, ++, i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[i, ), {, ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >]
[ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {]
[ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {]
[ta, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {]
[i, ], [, i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, []
[i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], []
[i, ], =, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], []
[=, main, [, i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -]
[i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =]
[i, ], ;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =]
[;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary, []
[;, if, (, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary, []
[(, i, >, 0, ), {, ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -]
[ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (]
[ta, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (]
[i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <]
[i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <]
[i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <]
[-, 1, ], =, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -]
[=, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {]
[=, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {]
[=, secondary, [, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {]
[[, i, -, 1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, []
[1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], []
[1, ], ;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], []
[;, }, if, (, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +]
[(, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +, 1, ], =]
[(, i, <, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +, 1, ], =]
[<, main, ., length, -, 1, ), {, ta, [, i, ], [, i, +, 1, ], =, secondary, []
[1, ), {, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }]
[{, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =]
[{, ta, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =]
[], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (]
[], =, secondary, [, i, ], ;, }, }, cachedT, =, MatrixUtils, ., createRealMatrix, (, ta, ), ;, }, return]
[createRealMatrix, (, ta, ), ;, }, return, cachedT, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return]
[[, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double, [, ], getMainDiagonalRef, (, ), {, return]
[}, double, [, ], getMainDiagonalRef, (, ), {, return, main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return]
[[, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, private, void, transform, (, ), {, final, int, m, =]
[[, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, private, void, transform, (, ), {, final, int, m, =]
[private, void, transform, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, double, [, ], z, =]
[(, ), {, final, int, m, =, householderVectors, ., length, ;, final, double, [, ], z, =, new, double, []
[., length, ;, final, double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =]
[;, final, double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;]
[;, final, double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;]
[double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;, k, <]
[double, [, ], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;, k, <]
[], z, =, new, double, [, m, ], ;, for, (, int, k, =, 0, ;, k, <, m, -]
[=, new, double, [, m, ], ;, for, (, int, k, =, 0, ;, k, <, m, -, 1, ;]
[=, new, double, [, m, ], ;, for, (, int, k, =, 0, ;, k, <, m, -, 1, ;]
[k, =, 0, ;, k, <, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =]
[k, =, 0, ;, k, <, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =]
[0, ;, k, <, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, []
[<, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[<, m, -, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[-, 1, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, []
[k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ], =]
[k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ], =]
[), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, main, [, k, ], =, hK, []
[hK, =, householderVectors, [, k, ], ;, main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =]
[main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =]
[main, [, k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =]
[k, ], =, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +]
[=, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[=, hK, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;]
[[, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, m, ;]
[;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, m, ;, ++]
[(, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, c, =]
[(, int, j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, c, =]
[j, =, k, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, []
[+, 1, ;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;]
[;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, j, <, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[<, m, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (]
[=, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, []
[=, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, []
[[, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >]
[c, *, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?]
[*, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[*, c, ;, }, final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[final, double, a, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[=, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[=, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :]
[k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, []
[-, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (]
[(, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[(, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, []
[(, xNormSqr, ), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, []
[), ;, secondary, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +]
[[, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=]
[if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =]
[if, (, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =]
[(, a, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -]
[!=, 0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /]
[0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (]
[0.0, ), {, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (]
[{, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *]
[{, hK, [, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *]
[[, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, []
[[, k, +, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, []
[+, 1, ], -=, a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +]
[a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;]
[a, ;, final, double, beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;]
[beta, =, -, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (]
[-, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,]
[-, 1, /, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,]
[/, (, a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +]
[a, *, hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,]
[hK, [, k, +, 1, ], ), ;, Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,]
[Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =]
[Arrays, ., fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =]
[fill, (, z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +]
[z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;]
[z, ,, k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;]
[k, +, 1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <]
[1, ,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[,, m, ,, 0, ), ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =]
[i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, []
[], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =]
[], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =]
[], hI, =, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =]
[=, householderVectors, [, i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =, hI, []
[i, ], ;, final, double, hKI, =, hK, [, i, ], ;, double, zI, =, hI, [, i, ], *]
[hK, [, i, ], ;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =]
[hK, [, i, ], ;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =]
[i, ], ;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +]
[;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;]
[;, double, zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;]
[zI, =, hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <]
[hI, [, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;]
[[, i, ], *, hKI, ;, for, (, int, j, =, i, +, 1, ;, j, <, m, ;, ++]
[(, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =]
[(, int, j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =]
[j, =, i, +, 1, ;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, []
[+, 1, ;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;]
[;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=]
[;, j, <, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=]
[<, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *]
[<, m, ;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *]
[;, ++, j, ), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, []
[), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;]
[), {, final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;]
[final, double, hIJ, =, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, []
[=, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=]
[=, hI, [, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=]
[[, j, ], ;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *]
[;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }]
[;, zI, +=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }]
[+=, hIJ, *, hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, []
[hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =]
[hK, [, j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =]
[j, ], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *]
[], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (]
[], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (]
[], ;, z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (]
[z, [, j, ], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z, []
[], +=, hIJ, *, hKI, ;, }, z, [, i, ], =, beta, *, (, z, [, i, ], +]
[z, [, i, ], =, beta, *, (, z, [, i, ], +, zI, ), ;, }, double, gamma, =]
[(, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =]
[(, z, [, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =]
[[, i, ], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +]
[], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[], +, zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;]
[zI, ), ;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[;, }, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[}, double, gamma, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[=, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=]
[(, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=, z, []
[=, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *]
[=, k, +, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *]
[+, 1, ;, i, <, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, []
[<, m, ;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }]
[;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=]
[;, ++, i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=]
[i, ), {, gamma, +=, z, [, i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /]
[i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =]
[i, ], *, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =]
[*, hK, [, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +]
[[, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;]
[[, i, ], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;]
[], ;, }, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[}, gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[gamma, *=, beta, /, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[/, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[/, 2, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, []
[int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=]
[int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=]
[=, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *]
[=, k, +, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *]
[+, 1, ;, i, <, m, ;, ++, i, ), {, z, [, i, ], -=, gamma, *, hK, []
[), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =]
[), {, z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =]
[z, [, i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +]
[i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;]
[i, ], -=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;]
[-=, gamma, *, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <]
[*, hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[hK, [, i, ], ;, }, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =]
[k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, []
[++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;]
[final, double, [, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;, j, <]
[[, ], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;]
[], hI, =, householderVectors, [, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++]
[householderVectors, [, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {]
[householderVectors, [, i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, []
[for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=]
[for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=]
[for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=]
[for, (, int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=]
[int, j, =, i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, []
[i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *]
[i, ;, j, <, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *]
[j, <, m, ;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, []
[;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +]
[;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +]
[;, ++, j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +]
[j, ), {, hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, []
[hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *]
[hI, [, j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *]
[j, ], -=, hK, [, i, ], *, z, [, j, ], +, z, [, i, ], *, hK, []
[*, z, [, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }]
[*, z, [, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }]
[[, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, []
[[, j, ], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, []
[], +, z, [, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -]
[[, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =]
[[, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =]
[[, i, ], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =]
[], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, []
[], *, hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, []
[hK, [, j, ], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -]
[], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], []
[], ;, }, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], []
[}, }, }, }, main, [, m, -, 1, ], =, householderVectors, [, m, -, 1, ], [, m, -]
