[ArrayList, <, double, [, ], >, points, ;, private, final, double, sigma, ;, public, StraightLineProblem, (, double, error, ), {]
[double, [, ], >, points, ;, private, final, double, sigma, ;, public, StraightLineProblem, (, double, error, ), {, points, =]
[;, public, StraightLineProblem, (, double, error, ), {, points, =, new, ArrayList, <, double, [, ], >, (, ), ;]
[StraightLineProblem, (, double, error, ), {, points, =, new, ArrayList, <, double, [, ], >, (, ), ;, sigma, =]
[>, (, ), ;, sigma, =, error, ;, }, public, void, addPoint, (, double, px, ,, double, py, ), {]
[>, (, ), ;, sigma, =, error, ;, }, public, void, addPoint, (, double, px, ,, double, py, ), {]
[sigma, =, error, ;, }, public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add, (]
[}, public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add, (, new, double, [, ]]
[public, void, addPoint, (, double, px, ,, double, py, ), {, points, ., add, (, new, double, [, ], {]
[addPoint, (, double, px, ,, double, py, ), {, points, ., add, (, new, double, [, ], {, px, ,]
[,, py, }, ), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =]
[), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double, []
[), ;, }, public, double, [, ], x, (, ), {, final, double, [, ], v, =, new, double, []
[double, [, ], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =]
[], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =, p, []
[=, points, ., get, (, i, ), ;, v, [, i, ], =, p, [, 0, ], ;, }, return]
[;, }, return, v, ;, }, public, double, [, ], y, (, ), {, final, double, [, ], v, =]
[v, ;, }, public, double, [, ], y, (, ), {, final, double, [, ], v, =, new, double, []
[v, ;, }, public, double, [, ], y, (, ), {, final, double, [, ], v, =, new, double, []
[double, [, ], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =]
[], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], v, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, []
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =]
[final, double, [, ], p, =, points, ., get, (, i, ), ;, v, [, i, ], =, p, []
[=, points, ., get, (, i, ), ;, v, [, i, ], =, p, [, 1, ], ;, }, return]
[=, p, [, 1, ], ;, }, return, v, ;, }, public, double, [, ], target, (, ), {, return]
[), {, return, y, (, ), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =]
[), {, return, y, (, ), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =]
[return, y, (, ), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =, 1, /]
[y, (, ), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =, 1, /, (]
[y, (, ), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =, 1, /, (]
[), ;, }, public, double, [, ], weight, (, ), {, final, double, weight, =, 1, /, (, sigma, *]
[), {, final, double, weight, =, 1, /, (, sigma, *, sigma, ), ;, final, double, [, ], w, =]
[double, weight, =, 1, /, (, sigma, *, sigma, ), ;, final, double, [, ], w, =, new, double, []
[double, weight, =, 1, /, (, sigma, *, sigma, ), ;, final, double, [, ], w, =, new, double, []
[double, [, ], w, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =]
[], w, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], w, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, w, []
[=, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, w, [, i, ], =]
[<, points, ., size, (, ), ;, i, ++, ), {, w, [, i, ], =, weight, ;, }, return]
[return, w, ;, }, public, double, [, ], value, (, double, [, ], params, ), {, final, Model, line, =]
[}, public, double, [, ], value, (, double, [, ], params, ), {, final, Model, line, =, new, Model, (]
[[, ], value, (, double, [, ], params, ), {, final, Model, line, =, new, Model, (, new, DerivativeStructure, (]
[value, (, double, [, ], params, ), {, final, Model, line, =, new, Model, (, new, DerivativeStructure, (, 0, ,]
[double, [, ], params, ), {, final, Model, line, =, new, Model, (, new, DerivativeStructure, (, 0, ,, 0, ,]
[double, [, ], params, ), {, final, Model, line, =, new, Model, (, new, DerivativeStructure, (, 0, ,, 0, ,]
[], params, ), {, final, Model, line, =, new, Model, (, new, DerivativeStructure, (, 0, ,, 0, ,, params, []
[final, Model, line, =, new, Model, (, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 0, ], ), ,]
[=, new, Model, (, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (]
[Model, (, new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,]
[new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,]
[new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,]
[(, 0, ,, 0, ,, params, [, 0, ], ), ,, new, DerivativeStructure, (, 0, ,, 0, ,, params, []
[new, DerivativeStructure, (, 0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ], model, =]
[0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ], model, =, new, double, []
[0, ,, 0, ,, params, [, 1, ], ), ), ;, final, double, [, ], model, =, new, double, []
[double, [, ], model, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =]
[], model, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], model, =, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =]
[points, ., size, (, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[(, ), ;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;]
[;, i, ++, ), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, []
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, [, i, ], =]
[), {, final, double, [, ], p, =, points, ., get, (, i, ), ;, model, [, i, ], =]
[[, ], p, =, points, ., get, (, i, ), ;, model, [, i, ], =, line, ., value, (]
[[, ], p, =, points, ., get, (, i, ), ;, model, [, i, ], =, line, ., value, (]
[p, =, points, ., get, (, i, ), ;, model, [, i, ], =, line, ., value, (, p, []
[i, ), ;, model, [, i, ], =, line, ., value, (, p, [, 0, ], ), ;, }, return]
[return, model, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =]
[}, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (]
[}, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (]
[DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (, params, []
[value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (, params, [, 0, ], ,]
[value, (, DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (, params, [, 0, ], ,]
[DerivativeStructure, [, ], params, ), {, final, Model, line, =, new, Model, (, params, [, 0, ], ,, params, []
[new, Model, (, params, [, 0, ], ,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =]
[params, [, 0, ], ,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, []
[params, [, 0, ], ,, params, [, 1, ], ), ;, final, DerivativeStructure, [, ], model, =, new, DerivativeStructure, []
[DerivativeStructure, [, ], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int, i, =]
[], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[], model, =, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, DerivativeStructure, [, points, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, points, ., size, (, ), ;]
[i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =]
[i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =]
[i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =]
[i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =]
[i, =, 0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =]
[0, ;, i, <, points, ., size, (, ), ;, i, ++, ), {, final, DerivativeStructure, p0, =, params, []
[{, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (, ), ., add, (]
[{, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (, ), ., add, (]
[{, final, DerivativeStructure, p0, =, params, [, 0, ], ., getField, (, ), ., getZero, (, ), ., add, (]
[=, params, [, 0, ], ., getField, (, ), ., getZero, (, ), ., add, (, points, ., get, (]
[0, ], ., getField, (, ), ., getZero, (, ), ., add, (, points, ., get, (, i, ), []
[(, ), ., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;]
[(, ), ., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;]
[., getZero, (, ), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;, model, []
[), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;, model, [, i, ], =]
[), ., add, (, points, ., get, (, i, ), [, 0, ], ), ;, model, [, i, ], =]
[points, ., get, (, i, ), [, 0, ], ), ;, model, [, i, ], =, line, ., value, (]
[), [, 0, ], ), ;, model, [, i, ], =, line, ., value, (, p0, ), ;, }, return]
[p0, ), ;, }, return, model, ;, }, public, double, [, ], solve, (, ), {, final, SimpleRegression, regress, =]
[}, return, model, ;, }, public, double, [, ], solve, (, ), {, final, SimpleRegression, regress, =, new, SimpleRegression, (]
[(, ), {, final, SimpleRegression, regress, =, new, SimpleRegression, (, true, ), ;, for, (, double, [, ], d, :]
[final, SimpleRegression, regress, =, new, SimpleRegression, (, true, ), ;, for, (, double, [, ], d, :, points, ), {]
[final, SimpleRegression, regress, =, new, SimpleRegression, (, true, ), ;, for, (, double, [, ], d, :, points, ), {]
[new, SimpleRegression, (, true, ), ;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (]
[new, SimpleRegression, (, true, ), ;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (]
[(, true, ), ;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (, d, []
[;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (, d, [, 0, ], ,]
[;, for, (, double, [, ], d, :, points, ), {, regress, ., addData, (, d, [, 0, ], ,]
[(, double, [, ], d, :, points, ), {, regress, ., addData, (, d, [, 0, ], ,, d, []
[addData, (, d, [, 0, ], ,, d, [, 1, ], ), ;, }, final, double, [, ], result, =]
[(, d, [, 0, ], ,, d, [, 1, ], ), ;, }, final, double, [, ], result, =, {]
[(, d, [, 0, ], ,, d, [, 1, ], ), ;, }, final, double, [, ], result, =, {]
[d, [, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,]
[d, [, 1, ], ), ;, }, final, double, [, ], result, =, {, regress, ., getSlope, (, ), ,]
[double, [, ], result, =, {, regress, ., getSlope, (, ), ,, regress, ., getIntercept, (, ), }, ;, return]
[UnivariateDifferentiableFunction, {, final, DerivativeStructure, a, ;, final, DerivativeStructure, b, ;, public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {]
[UnivariateDifferentiableFunction, {, final, DerivativeStructure, a, ;, final, DerivativeStructure, b, ;, public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {]
[a, ;, final, DerivativeStructure, b, ;, public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {, this, ., a, =]
[final, DerivativeStructure, b, ;, public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {, this, ., a, =, a, ;]
[final, DerivativeStructure, b, ;, public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {, this, ., a, =, a, ;]
[public, Model, (, DerivativeStructure, a, ,, DerivativeStructure, b, ), {, this, ., a, =, a, ;, this, ., b, =]
[a, =, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return]
[a, =, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return]
[a, =, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return]
[a, =, a, ;, this, ., b, =, b, ;, }, public, double, value, (, double, x, ), {, return]
[b, =, b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, ), *]
[b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, ), *, x, +]
[b, ;, }, public, double, value, (, double, x, ), {, return, a, ., getValue, (, ), *, x, +]
[), *, x, +, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return]
[), *, x, +, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return]
[), *, x, +, b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return]
[b, ., getValue, (, ), ;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply, (]
[;, }, public, DerivativeStructure, value, (, DerivativeStructure, x, ), {, return, x, ., multiply, (, a, ), ., add, (]
