[;, @, Deprecated, public, class, BOBYQAOptimizer, extends, BaseAbstractMultivariateSimpleBoundsOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, public, static, final, int, MINIMUM_PROBLEM_DIMENSION, =]
[<, MultivariateFunction, >, implements, MultivariateOptimizer, {, public, static, final, int, MINIMUM_PROBLEM_DIMENSION, =, 2, ;, public, static, final, double, DEFAULT_INITIAL_RADIUS, =]
[final, int, MINIMUM_PROBLEM_DIMENSION, =, 2, ;, public, static, final, double, DEFAULT_INITIAL_RADIUS, =, 10.0, ;, public, static, final, double, DEFAULT_STOPPING_RADIUS, =]
[final, double, DEFAULT_INITIAL_RADIUS, =, 10.0, ;, public, static, final, double, DEFAULT_STOPPING_RADIUS, =, 1E-8, ;, private, static, final, double, ZERO, =]
[final, double, DEFAULT_STOPPING_RADIUS, =, 1E-8, ;, private, static, final, double, ZERO, =, 0d, ;, private, static, final, double, ONE, =]
[final, double, ZERO, =, 0d, ;, private, static, final, double, ONE, =, 1d, ;, private, static, final, double, TWO, =]
[final, double, ONE, =, 1d, ;, private, static, final, double, TWO, =, 2d, ;, private, static, final, double, TEN, =]
[final, double, TWO, =, 2d, ;, private, static, final, double, TEN, =, 10d, ;, private, static, final, double, SIXTEEN, =]
[final, double, TEN, =, 10d, ;, private, static, final, double, SIXTEEN, =, 16d, ;, private, static, final, double, TWO_HUNDRED_FIFTY, =]
[final, double, SIXTEEN, =, 16d, ;, private, static, final, double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final, double, MINUS_ONE, =]
[double, SIXTEEN, =, 16d, ;, private, static, final, double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final, double, MINUS_ONE, =, -]
[double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final, double, MINUS_ONE, =, -, ONE, ;, private, static, final, double, HALF, =]
[double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final, double, MINUS_ONE, =, -, ONE, ;, private, static, final, double, HALF, =]
[=, 250d, ;, private, static, final, double, MINUS_ONE, =, -, ONE, ;, private, static, final, double, HALF, =, ONE, /]
[=, -, ONE, ;, private, static, final, double, HALF, =, ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =]
[=, -, ONE, ;, private, static, final, double, HALF, =, ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =]
[ONE, ;, private, static, final, double, HALF, =, ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /]
[ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =]
[ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =]
[2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /]
[ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =]
[ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =]
[4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /]
[ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =]
[ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =]
[8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /]
[ArrayRealVector, trialStepPoint, ;, private, ArrayRealVector, lagrangeValuesAtNewPoint, ;, private, ArrayRealVector, modelSecondDerivativesValues, ;, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ), {, this, (]
[;, private, ArrayRealVector, lagrangeValuesAtNewPoint, ;, private, ArrayRealVector, modelSecondDerivativesValues, ;, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ), {, this, (, numberOfInterpolationPoints, ,]
[ArrayRealVector, lagrangeValuesAtNewPoint, ;, private, ArrayRealVector, modelSecondDerivativesValues, ;, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ), {, this, (, numberOfInterpolationPoints, ,, DEFAULT_INITIAL_RADIUS, ,]
[,, DEFAULT_STOPPING_RADIUS, ), ;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (]
[;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;]
[;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;]
[(, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =]
[numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;]
[numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;]
[,, double, stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =]
[stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;]
[stoppingTrustRegionRadius, ), {, super, (, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;]
[(, null, ), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =]
[., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double, [, ], lowerBound, =]
[doOptimize, (, ), {, final, double, [, ], lowerBound, =, getLowerBound, (, ), ;, final, double, [, ], upperBound, =]
[final, double, [, ], lowerBound, =, getLowerBound, (, ), ;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;]
[[, ], lowerBound, =, getLowerBound, (, ), ;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (]
[lowerBound, =, getLowerBound, (, ), ;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,]
[(, ), ;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;]
[;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =]
[final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (]
[final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (]
[upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==]
[upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==]
[;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;]
[(, lowerBound, ,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =]
[upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (]
[==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =]
[., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (]
[), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,]
[new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return]
[getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (]
[getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (]
[double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,]
[double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,]
[=, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?]
[(, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?, value, :]
[lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?, value, :, -]
[-, value, ), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[{, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =]
[(, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;]
[(, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, []
[=, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;]
[=, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;]
[<, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (]
[;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,]
[;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,]
[;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,]
[++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, []
[final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -]
[final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -]
[boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (]
[;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;]
[;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;]
[(, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (]
[,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,]
[,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,]
[,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,]
[[, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, []
[-, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -]
[-, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -]
[(, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (]
[., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (]
[., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (]
[., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (]
[,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (]
[j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=]
[], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -]
[(, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (]
[(, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (]
[(, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (]
[;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (]
[lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=]
[(, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {]
[(, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {]
[-, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (]
[), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, []
[getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;]
[getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;]
[>=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (]
[), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;]
[., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;]
[,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (]
[[, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,]
[., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {]
[., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {]
[,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (]
[), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, []
[(, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +]
[boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;]
[boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;]
[else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (]
[currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,]
[., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -]
[j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[+, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, []
[;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -]
[;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -]
[(, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (]
[-, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;]
[-, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;]
[final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (]
[deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,]
[deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,]
[j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (]
[-, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,]
[., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (]
[., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (]
[., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (]
[,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (]
[max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=]
[), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (]
[), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (]
[), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (]
[}, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (]
[(, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=]
[getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {]
[getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {]
[<=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (]
[), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, []
[getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;]
[getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;]
[<=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (]
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[{, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -]
[setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;]
[setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;]
[upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (]
[j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,]
[setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {]
[setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {]
[-, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (]
[), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, []
[(, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -]
[else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =]
[currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, []
[(, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -]
[(, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -]
[[, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (]
[final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =]
[double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -]
[=, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;]
[=, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;]
[], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (]
[currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,]
[currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,]
[j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (]
[;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,]
[=, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;]
[=, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;]
[lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (]
[setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,]
[(, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return]
[,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (]
[), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,]
[,, upperBound, ), ;, }, private, double, bobyqb, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[), {, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =]
[n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +]
[), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +, 1, ;, final, int, nptm, =]
[), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +, 1, ;, final, int, nptm, =]
[final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt, -]
[final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =]
[final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =]
[final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =]
[np, =, n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =, n, *]
[n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =, n, *, np, /]
[nptm, =, npt, -, np, ;, final, int, nh, =, n, *, np, /, 2, ;, final, ArrayRealVector, work1, =]
[-, np, ;, final, int, nh, =, n, *, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (]
[n, *, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =]
[/, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =]
[n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (]
[=, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =]
[=, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =]
[final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =]
[final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =]
[npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =]
[npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =]
[., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =]
[., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =]
[alpha, =, Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;]
[Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =]
[NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;]
[double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (]
[=, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,]
[crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =]
[=, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =]
[;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[(, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (]
[i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,]
[trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =]
[trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =]
[i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[(, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=]
[(, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=]
[,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *]
[double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =]
[double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =]
[., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (]
[+=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =]
[}, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;, int, ntrits, =]
[., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;, int, ntrits, =, 0, ;, int, itest, =]
[;, final, int, kbase, =, 0, ;, int, ntrits, =, 0, ;, int, itest, =, 0, ;, int, knew, =]
[0, ;, int, ntrits, =, 0, ;, int, itest, =, 0, ;, int, knew, =, 0, ;, int, nfsav, =]
[int, itest, =, 0, ;, int, knew, =, 0, ;, int, nfsav, =, getEvaluations, (, ), ;, double, rho, =]
[int, knew, =, 0, ;, int, nfsav, =, getEvaluations, (, ), ;, double, rho, =, initialTrustRegionRadius, ;, double, delta, =]
[int, nfsav, =, getEvaluations, (, ), ;, double, rho, =, initialTrustRegionRadius, ;, double, delta, =, rho, ;, double, diffa, =]
[), ;, double, rho, =, initialTrustRegionRadius, ;, double, delta, =, rho, ;, double, diffa, =, ZERO, ;, double, diffb, =]
[initialTrustRegionRadius, ;, double, delta, =, rho, ;, double, diffa, =, ZERO, ;, double, diffb, =, ZERO, ;, double, diffc, =]
[rho, ;, double, diffa, =, ZERO, ;, double, diffb, =, ZERO, ;, double, diffc, =, ZERO, ;, double, f, =]
[ZERO, ;, double, diffb, =, ZERO, ;, double, diffc, =, ZERO, ;, double, f, =, ZERO, ;, double, beta, =]
[ZERO, ;, double, diffc, =, ZERO, ;, double, f, =, ZERO, ;, double, beta, =, ZERO, ;, double, adelt, =]
[ZERO, ;, double, f, =, ZERO, ;, double, beta, =, ZERO, ;, double, adelt, =, ZERO, ;, double, denom, =]
[ZERO, ;, double, beta, =, ZERO, ;, double, adelt, =, ZERO, ;, double, denom, =, ZERO, ;, double, ratio, =]
[ZERO, ;, double, adelt, =, ZERO, ;, double, denom, =, ZERO, ;, double, ratio, =, ZERO, ;, double, dnorm, =]
[ZERO, ;, double, denom, =, ZERO, ;, double, ratio, =, ZERO, ;, double, dnorm, =, ZERO, ;, double, scaden, =]
[ZERO, ;, double, ratio, =, ZERO, ;, double, dnorm, =, ZERO, ;, double, scaden, =, ZERO, ;, double, biglsq, =]
[ZERO, ;, double, dnorm, =, ZERO, ;, double, scaden, =, ZERO, ;, double, biglsq, =, ZERO, ;, double, distsq, =]
[ZERO, ;, double, scaden, =, ZERO, ;, double, biglsq, =, ZERO, ;, double, distsq, =, ZERO, ;, int, state, =]
[=, ZERO, ;, double, distsq, =, ZERO, ;, int, state, =, 20, ;, for, (, ;, ;, ), switch, (]
[distsq, =, ZERO, ;, int, state, =, 20, ;, for, (, ;, ;, ), switch, (, state, ), {, case]
[;, int, state, =, 20, ;, for, (, ;, ;, ), switch, (, state, ), {, case, 20, :, {]
[state, =, 20, ;, for, (, ;, ;, ), switch, (, state, ), {, case, 20, :, {, printState, (]
[(, ;, ;, ), switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;, if, (]
[(, ;, ;, ), switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;, if, (]
[;, ), switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;, if, (, trustRegionCenterInterpolationPointIndex, !=]
[{, case, 20, :, {, printState, (, 20, ), ;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =]
[20, ), ;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =]
[;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[(, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[!=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[!=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, for, (, int, i, =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=]
[;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;]
[;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;]
[++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (]
[gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }]
[modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (]
[getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[*, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;]
[getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (]
[getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >]
[;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =]
[++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;]
[++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;]
[}, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;, k, <]
[if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;]
[if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[{, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=]
[(, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (]
[getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =]
[j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[{, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case, 60, :, {]
[., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case, 60, :, {, printState, (]
[), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =]
[}, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (]
[{, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi, =]
[60, ), ;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, s, =]
[n, ), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hs, =]
[n, ), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hred, =]
[n, ), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (]
[(, n, ), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =]
[), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (]
[final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,]
[hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,]
[new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,]
[(, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,]
[), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,]
[double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;]
[], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =]
[], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =]
[=, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, []
[delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;]
[gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =]
[gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =]
[xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, []
[hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =]
[dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =]
[dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =]
[;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (]
[dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;]
[1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =]
[1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =]
[deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (]
[delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,]
[Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (]
[Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (]
[sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <]
[sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <]
[dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *]
[dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {]
[Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =]
[., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -]
[(, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;]
[,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =]
[,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =]
[), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *]
[if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;]
[dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =]
[dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =]
[HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *]
[{, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (]
[{, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (]
[1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=]
[1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=]
[deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +]
[*, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {]
[;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =]
[deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }]
[if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =]
[if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =]
[), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (]
[nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,]
[650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =]
[650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =]
[}, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =, Math, ., max, (]
[=, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,]
[diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =]
[diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =]
[diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =]
[;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *]
[double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *]
[., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (]
[., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (]
[., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (]
[(, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >]
[,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&]
[,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&]
[), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >]
[), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >]
[final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *]
[=, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {]
[*, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =]
[ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =]
[ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =]
[errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /]
[state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =]
[650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;]
[650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;]
[break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;, j, <]
[}, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[}, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[rho, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (]
[;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (]
[n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==]
[n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==]
[), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (]
[=, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {]
[;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =]
[;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =]
[., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (]
[lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (]
[lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (]
[lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (]
[j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (]
[{, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==]
[{, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==]
[., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (]
[), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {]
[}, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =]
[if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -]
[if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -]
[getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (]
[., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (]
[., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (]
[(, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <]
[=, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =]
[=, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =]
[getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (]
[getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (]
[(, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (]
[(, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (]
[), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +]
[), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +]
[}, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *]
[bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *, j, ), /]
[modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;, for, (, int, k, =]
[getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;]
[getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;]
[(, j, +, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <]
[+, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[+, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (]
[0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,]
[<, npt, ;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;]
[;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=]
[;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=]
[;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=]
[{, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (]
[d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *]
[=, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (]
[=, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (]
[., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *]
[,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }]
[), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=]
[), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=]
[), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=]
[curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *]
[modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *]
[k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (]
[k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (]
[*, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <]
[*, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {]
[), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =]
[curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }]
[rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =]
[<, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }]
[bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++]
[=, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits, ;, }, case]
[break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {]
[}, }, }, state, =, 680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (]
[680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (]
[680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (]
[break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq, <=]
[break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq, <=]
[}, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *]
[:, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =]
[:, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =]
[printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *]
[if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =]
[), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =]
[final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;]
[final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;]
[fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumpq, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumpq, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (]
[k, <, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =]
[k, <, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =]
[<, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -]
[;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *]
[modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =]
[getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;]
[getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;]
[k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <]
[;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[-, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[*, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[*, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[*, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (]
[{, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }]
[{, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }]
[., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (]
[(, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,]
[., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =]
[., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =]
[(, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -]
[(, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -]
[), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *]
[k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =]
[sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;]
[sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;]
[;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <]
[double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[-, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[-, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (]
[i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,]
[i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;]
[i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;]
[work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,]
[setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,]
[setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,]
[i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *]
[i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *]
[getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (]
[k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,]
[), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +]
[), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *]
[(, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (]
[(, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =]
[(, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =]
[,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +]
[., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =]
[(, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;]
[(, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;]
[), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=]
[;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[=, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[=, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (]
[(, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (]
[i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (]
[ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *]
[ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *]
[bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[(, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +]
[(, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +]
[(, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +]
[), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (]
[., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *]
[., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *]
[), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (]
[(, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =]
[), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;]
[), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;]
[work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <]
[getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[}, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double, sumz, =]
[m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =]
[;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =]
[++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;]
[++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;]
[{, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumz, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumz, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,]
[;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[+=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (]
[getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *]
[getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *]
[m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,]
[(, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;]
[,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=]
[,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=]
[(, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (]
[,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =]
[), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;]
[), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;]
[;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[+=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[+=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =]
[;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -]
[0, ;, j, <, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *]
[<, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *]
[<, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *]
[++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (]
[*, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =]
[-, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;]
[-, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;]
[*, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *]
[<, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (]
[;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,]
[{, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }]
[{, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }]
[., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (]
[(, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (, j, ,]
[k, ,, j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =]
[j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;]
[j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;]
[;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <]
[work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,]
[k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (]
[npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,]
[++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +]
[++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +]
[{, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *]
[{, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *]
[(, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, ., getEntry, (]
[,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[+, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[(, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, int, ip, =]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, int, ip, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, int, ip, =, i, +]
[i, <, n, ;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =]
[i, <, n, ;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =]
[i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1, ., getEntry, (]
[i, +, npt, ;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =]
[npt, ;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;]
[npt, ;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;]
[final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=]
[temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (]
[(, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,]
[j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (]
[i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[{, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *]
[{, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *]
[(, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *, work1, ., getEntry, (]
[,, j, ), +, temp, *, work1, ., getEntry, (, j, ), ), ;, }, }, }, int, ih, =]
[., getEntry, (, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =]
[(, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[(, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -]
[=, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *]
[;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *]
[;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *]
[;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (]
[j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =]
[-, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;]
[-, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;]
[*, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[(, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (]
[<, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +]
[<, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +]
[<, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +]
[++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (]
[work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *]
[work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *]
[j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (]
[work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,]
[j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;]
[j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;]
[., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (]
[(, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,]
[), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,]
[), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,]
[), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,]
[getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (]
[k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,]
[), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=]
[trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;]
[trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;]
[j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {]
[j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (]
[(, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[(, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[(, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[(, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (]
[<=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[<=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[<=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (]
[modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *]
[modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *]
[ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +]
[., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +]
[., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +]
[), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *]
[., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (]
[getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;]
[getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (]
[., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +]
[(, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,]
[), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,]
[), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,]
[getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (]
[getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (]
[j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +]
[), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,]
[setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;]
[setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;]
[getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =]
[npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;]
[npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;]
[j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (]
[<, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +]
[++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }]
[trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =]
[), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (]
[), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (]
[;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==]
[setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {]
[i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =]
[}, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break, ;, }]
[=, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break, ;, }, state, =]
[ntrits, ==, 0, ), {, state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case]
[), {, state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {]
[state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {, printState, (]
[230, ;, break, ;, }, case, 210, :, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =]
[break, ;, }, case, 210, :, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (]
[}, case, 210, :, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,]
[:, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;]
[printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =]
[printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =]
[210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, []
[final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ], ;]
[[, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =]
[[, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =]
[alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, []
[;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =]
[=, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;]
[=, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;]
[[, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[<, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[<, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230, :, {]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230, :, {, printState, (]
[i, ), ), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =]
[), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;]
[), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;]
[}, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;, k, <]
[case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =]
[<, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =]
[double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =]
[=, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[=, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;]
[suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=]
[suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=]
[suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=]
[getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (]
[k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=]
[sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=]
[sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=]
[getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (]
[k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *]
[getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }]
[;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }]
[., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (]
[(, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,]
[(, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,]
[,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *]
[j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (]
[j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (]
[j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (]
[*, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *]
[., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +]
[), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;]
[), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;]
[., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[(, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;]
[suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;]
[*, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (]
[+, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }]
[., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =]
[;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =]
[., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;]
[., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;]
[(, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <]
[,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double, sum, =]
[0, ;, m, <, nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =]
[m, <, nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[m, <, nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (]
[{, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }]
[+=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=]
[+=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=]
[., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *]
[*, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =]
[., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;]
[., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;]
[(, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <]
[), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[-=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[-=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *]
[{, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (]
[., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }]
[(, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =]
[k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =]
[}, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =]
[=, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;]
[=, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;]
[;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (]
[;, j, <, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;]
[<, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=]
[<, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=]
[;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *]
[final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *, d1, ;, double, sum, =]
[(, j, ), ;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =]
[), ;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[), ;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *]
[<, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (]
[;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,]
[{, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }]
[+=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=]
[+=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=]
[., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *]
[., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *]
[), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (]
[,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =]
[,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =]
[), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +]
[trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =]
[getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;]
[getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;]
[j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[+, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[+, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[+, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,]
[;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *]
[;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *]
[;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (]
[{, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }]
[{, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }]
[., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (]
[(, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,]
[i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;]
[*, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=]
[*, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=]
[., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *]
[., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *]
[), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (]
[lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;]
[setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=]
[setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=]
[setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=]
[sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (]
[bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *]
[bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *]
[trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[+=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *]
[., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +]
[., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +]
[(, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *]
[j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (]
[j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (]
[j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (]
[j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +]
[., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +]
[(, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +]
[(, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +]
[), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *]
[beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +]
[dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -]
[dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;]
[dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;]
[(, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[+, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,]
[+, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,]
[+, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,]
[+, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +]
[bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (]
[bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (]
[lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =]
[), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;]
[if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =]
[if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =]
[if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =]
[ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *]
[0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +]
[0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +]
[{, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (]
[., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <]
[(, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&]
[(, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&]
[), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >]
[alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =]
[beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;]
[beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;]
[if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <]
[denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (]
[n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;]
[n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;]
[), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (]
[newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,]
[newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,]
[newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,]
[i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }]
[i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =]
[newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;]
[getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;, state, =]
[;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =]
[;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =]
[cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *]
[ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;]
[state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =]
[230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;]
[break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =]
[}, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;]
[else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =]
[*, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[=, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, k, ==]
[<, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =]
[if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =]
[k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;]
[k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;]
[trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <]
[{, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[{, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (]
[0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,]
[<, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *]
[zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =]
[zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =]
[k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *]
[}, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +]
[}, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +]
[double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d2, *]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d2, *, d2, ;]
[., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d2, *, d2, ;, distsq, =]
[double, den, =, beta, *, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =]
[=, beta, *, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;]
[=, beta, *, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;]
[*, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[+, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[+, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (]
[0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,]
[<, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[<, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=]
[d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=]
[interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =]
[trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /]
[;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =]
[;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =]
[*, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (]
[;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *]
[double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >]
[Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {]
[max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =]
[max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =]
[ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *]
[d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;]
[d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =]
[;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;]
[(, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =]
[{, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =]
[{, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =]
[*, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;]
[k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =]
[k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =]
[den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (]
[}, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,]
[}, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,]
[double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *]
[d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (]
[d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (]
[lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (, d5, *]
[=, Math, ., max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case]
[max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case, 360, :, {]
[biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case, 360, :, {, printState, (]
[), ), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =]
[;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;]
[;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;]
[}, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;, i, <]
[case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, []
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (]
[final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +]
[final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +]
[lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (]
[d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =]
[d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =]
[getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (]
[i, ), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,]
[i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =]
[i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;]
[d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;]
[max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (]
[d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,]
[d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,]
[;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (]
[double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==]
[(, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (]
[), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[(, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[(, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, []
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[{, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (]
[setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==]
[setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==]
[lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (]
[), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[(, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[(, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, []
[getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }]
[i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (]
[[, i, ], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (]
[i, ], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !]
[), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, )]
[}, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =]
[}, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -]
[(, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (]
[(, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (]
[., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==]
[toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -]
[), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {]
[if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =]
[!, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;]
[), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =]
[==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =]
[==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =]
[{, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (]
[=, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =]
[}, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;, int, ih, =]
[getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =]
[trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (]
[=, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *]
[=, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *]
[<, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (]
[+=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =]
[., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;]
[., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;]
[(, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=]
[), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =]
[), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =]
[), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (]
[0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *]
[0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *]
[j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (]
[{, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (]
[{, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (]
[temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==]
[., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {]
[(, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=]
[*, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }]
[., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=]
[., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=]
[., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=]
[), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (]
[(, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;]
[==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;]
[+=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =]
[., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;]
[., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;]
[(, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <]
[), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[}, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =]
[}, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (]
[;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =]
[;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =]
[++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *]
[{, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;]
[double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=]
[double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=]
[double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=]
[=, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *]
[=, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *]
[(, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (]
[;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *]
[d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =]
[d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =]
[d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =]
[vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -]
[HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -]
[modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;]
[getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =]
[k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;]
[*, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =]
[;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;]
[final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =]
[final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =]
[f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (]
[;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (]
[;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (]
[=, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >]
[diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {]
[diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =]
[(, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (]
[(, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (]
[), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >]
[>, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (]
[>, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (]
[), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=]
[getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw]
[;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (]
[;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (]
[ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,]
[{, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }]
[(, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =]
[(, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =]
[vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (]
[vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (]
[ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -]
[throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /]
[TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =]
[TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =]
[vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *]
[ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (]
[ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (]
[(, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=]
[fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {]
[/, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =]
[/, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =]
[double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (]
[=, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,]
[ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (]
[ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (]
[ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=]
[delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {]
[Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =]
[Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =]
[hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math, ., max, (]
[dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,]
[(, ratio, <=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {]
[<=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =]
[<=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =]
[delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (]
[Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,]
[Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,]
[max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *]
[;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (]
[;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (]
[else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=]
[else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=]
[delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *]
[., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {]
[(, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =]
[dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (]
[dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (]
[;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (, f, <]
[*, 1.5, ), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =]
[rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav, =]
[<, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =]
[<, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =]
[), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *]
[final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;]
[ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =]
[knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;]
[final, double, densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =]
[densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;]
[denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =]
[*, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[=, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, hdiag, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =]
[k, <, npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;]
[npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <]
[k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (]
[0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,]
[<, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *]
[zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =]
[zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =]
[k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =]
[d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *]
[}, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +]
[}, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +]
[double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d1, *]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d1, *, d1, ;]
[., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d1, *, d1, ;, distsq, =]
[double, den, =, beta, *, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =]
[=, beta, *, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;]
[=, beta, *, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;]
[*, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[+, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[+, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (]
[0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,]
[<, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[<, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (]
[final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j, ), ;]
[d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=]
[d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=]
[interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *]
[), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =]
[), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =]
[newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /]
[;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =]
[;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =]
[*, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (]
[;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *]
[double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >]
[Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {]
[max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =]
[max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =]
[ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *]
[d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;]
[d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =]
[;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;]
[(, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =]
[{, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =]
[{, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =]
[*, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =]
[denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =]
[den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *]
[;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (]
[;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (]
[final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (, d4, *]
[=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;]
[., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =]
[., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =]
[), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =, Math, ., max, (]
[final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,]
[(, d4, *, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (]
[(, d4, *, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (]
[*, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=]
[*, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=]
[), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *]
[=, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {]
[., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =]
[(, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;]
[,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =]
[if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }]
[scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (]
[HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,]
[biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,]
[knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;]
[ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =]
[}, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =]
[}, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =]
[(, beta, ,, denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (]
[denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;]
[denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;]
[;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (]
[=, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,]
[., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =]
[(, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;]
[(, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;]
[), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <]
[modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =, pqold, *]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =, pqold, *]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (]
[i, <, n, ;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,]
[final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =]
[temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;]
[temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;]
[pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=]
[interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (]
[(, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[(, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[(, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (]
[<=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[<=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *]
[;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *]
[{, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (]
[., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,]
[,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;]
[,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;]
[interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =]
[getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;]
[getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;]
[knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <]
[j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[}, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =]
[}, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =]
[(, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *]
[(, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *]
[0, ;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (]
[m, <, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,]
[final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =]
[temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;]
[temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;]
[diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <]
[zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (]
[<, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +]
[<, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *]
[{, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (]
[., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,]
[., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }]
[., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }]
[), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (]
[temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,]
[m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =]
[), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;]
[), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;]
[}, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <]
[fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,]
[i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (]
[i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;]
[i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;]
[interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (]
[setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,]
[setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,]
[i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (]
[newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,]
[setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =]
[i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;]
[i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;]
[bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <]
[getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =]
[k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;]
[npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <]
[k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {]
[=, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=]
[=, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=]
[=, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=]
[(, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (]
[m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,]
[;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *]
[;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *]
[;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (]
[++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,]
[getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb, =]
[zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =]
[getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;]
[getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =]
[(, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *]
[., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =]
[(, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;]
[(, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;]
[), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <]
[}, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (]
[<, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *]
[{, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (]
[., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[+, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[(, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *]
[{, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (]
[gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (]
[gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (]
[getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <]
[), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {]
[diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =]
[work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;]
[getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =]
[i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;]
[), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =]
[fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =]
[{, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[{, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[=, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,]
[0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (]
[), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =]
[), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =]
[setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (]
[,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=]
[., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=]
[(, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *]
[d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =]
[trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;]
[trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;]
[getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=]
[j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[*, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[*, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +]
[j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (]
[gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }]
[modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (]
[getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[*, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), ), ;]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), ), ;]
[), *, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =]
[trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;]
[trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;]
[getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <]
[j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[}, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[{, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=]
[(, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (]
[getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =]
[j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[{, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (]
[i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (]
[+, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, ntrits, >]
[,, i, ), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =]
[), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;]
[), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;]
[;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <]
[}, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;]
[}, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;]
[ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[{, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -]
[++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (]
[., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;]
[., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;]
[,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (]
[., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,]
[(, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =]
[), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;]
[), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;]
[;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, double, sum, =]
[0, ;, j, <, nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =]
[j, <, nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[j, <, nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =]
[k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;]
[k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;]
[j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[(, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[}, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (]
[<, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +]
[<, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +]
[;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *]
[;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *]
[{, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (]
[., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[+, sum, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =]
[*, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;]
[*, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;]
[., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;, k, <]
[(, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[}, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[{, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }]
[{, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (]
[(, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,]
[(, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (]
[getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;]
[getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;]
[;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (]
[work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,]
[work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,]
[setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum, *]
[setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum, *]
[work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (]
[work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq, =]
[,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =]
[k, ), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =]
[), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[}, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, sum, =]
[0, ;, i, <, n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =]
[i, <, n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[i, <, n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[=, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *]
[;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (]
[getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,]
[,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (]
[+, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (]
[+, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (]
[+, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (]
[(, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (]
[i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =]
[(, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (]
[), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,]
[), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,]
[getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=]
[final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=]
[d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *]
[ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =]
[ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =]
[getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (]
[i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,]
[;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=]
[*, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *]
[=, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (]
[=, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (]
[=, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (]
[(, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (]
[sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[+=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =]
[(, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (]
[), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,]
[), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,]
[getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=]
[final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=]
[d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *]
[ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =]
[ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =]
[getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (]
[i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,]
[;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=]
[*, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *]
[max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =]
[max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =]
[sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (]
[gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;]
[d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=]
[d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=]
[d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *]
[}, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;]
[{, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=]
[{, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=]
[double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *]
[gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }]
[gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }]
[i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (]
[i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (]
[;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +]
[+=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,]
[;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }]
[gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++]
[sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (]
[sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (]
[}, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <]
[}, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <]
[., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *]
[npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {]
[i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =]
[}, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (]
[}, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (]
[itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=]
[gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =]
[=, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =]
[=, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =]
[if, (, itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (]
[itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,]
[), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;]
[), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;]
[for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;, i, <]
[int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;, i, <, max, ;]
[int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;, i, <, max, ;]
[=, Math, ., max, (, npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (]
[=, Math, ., max, (, npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (]
[., max, (, npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (, i, <]
[npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {]
[npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {]
[;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[<, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[<, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[{, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +]
[{, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (]
[{, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (]
[., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <]
[i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {]
[i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {]
[getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (]
[npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,]
[npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,]
[), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (]
[npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (]
[npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (]
[{, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <]
[setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {]
[setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {]
[work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (]
[getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,]
[), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }]
[}, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =]
[{, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (]
[{, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (]
[., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==]
[i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {]
[ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =]
[;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (]
[;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (]
[}, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=]
[}, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=]
[if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +]
[if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +]
[ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *]
[), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {]
[state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =]
[f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =]
[f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =]
[fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *]
[{, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =]
[{, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =]
[=, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *]
[;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;]
[;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =]
[;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =]
[d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (]
[d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (]
[TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *]
[delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,]
[delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,]
[final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *]
[*, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case]
[distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {]
[Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (]
[(, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;]
[*, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =]
[d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -]
[}, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =]
[650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;]
[650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;]
[{, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k, <]
[(, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (]
[0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,]
[<, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[<, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=]
[d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=]
[interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >]
[., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {]
[(, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =]
[), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;]
[sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =]
[}, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (]
[}, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (]
[(, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=]
[=, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =]
[=, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =]
[=, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (]
[if, (, knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (]
[if, (, knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (]
[knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==]
[>=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -]
[{, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {]
[double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =]
[double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =]
[., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (]
[., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (]
[(, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *]
[), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,]
[), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,]
[if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *]
[1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (]
[1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (]
[{, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=]
[{, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=]
[=, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *]
[min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {]
[ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =]
[HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }]
[dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =]
[<=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =]
[<=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =]
[), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (]
[), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (]
[delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *]
[rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,]
[}, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;]
[=, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =]
[=, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =]
[double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (]
[=, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,]
[min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;]
[ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =]
[ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =]
[dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *]
[delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;]
[;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =]
[d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (]
[d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (]
[rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==]
[), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -]
[=, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {]
[*, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =]
[break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;, }, if, (]
[break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;, }, if, (]
[}, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;, }, if, (, ratio, >]
[ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {]
[-, 1, ), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =]
[;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (]
[;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (]
[;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (]
[if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (]
[ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,]
[), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >]
[=, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >, rho, ), {]
[;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >, rho, ), {, state, =]
[., max, (, delta, ,, dnorm, ), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case]
[delta, ,, dnorm, ), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {]
[dnorm, ), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (]
[{, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (]
[{, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (]
[=, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >]
[break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {]
[}, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =]
[}, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =]
[case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *]
[:, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;]
[printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =]
[printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =]
[680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /]
[(, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (]
[(, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (]
[>, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=]
[{, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {]
[=, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =]
[=, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (]
[=, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (]
[/, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=]
[if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {]
[ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =]
[ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =]
[ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =]
[{, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (]
[stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, ), *]
[(, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {]
[<=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=]
[{, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }]
[=, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =]
[=, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =]
[(, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (]
[), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,]
[;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;]
[else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =]
[rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;]
[ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =]
[=, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;]
[., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =]
[;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (]
[;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (]
[=, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==]
[0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -]
[=, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {]
[(, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =]
[break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 360, ;, break, ;, }, }, case]
[if, (, ntrits, ==, -, 1, ), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {]
[ntrits, ==, -, 1, ), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (]
[{, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (]
[{, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (]
[{, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (]
[;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (, fAtInterpolationPoints, ., getEntry, (]
[}, }, case, 720, :, {, printState, (, 720, ), ;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=]
[720, ), ;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =]
[;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;]
[;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;]
[(, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;, i, <]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, []
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (]
[final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +]
[final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +]
[lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (]
[d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =]
[d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =]
[getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (]
[i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,]
[i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =]
[i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;]
[d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;]
[max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (]
[d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,]
[d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,]
[;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (]
[double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[(, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (]
[), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[(, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, []
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[(, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (]
[{, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (]
[setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (]
[), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[(, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, []
[getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }]
[i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =]
[i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =]
[currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (]
[,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return]
[}, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw]
[=, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (]
[=, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (]
[(, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,]
[,, "bobyqb", ), ;, }, }, }, private, double, [, ], altmov, (, int, knew, ,, double, adelt, ), {]
[double, [, ], altmov, (, int, knew, ,, double, adelt, ), {, printMethod, (, ), ;, final, int, n, =]
[double, [, ], altmov, (, int, knew, ,, double, adelt, ), {, printMethod, (, ), ;, final, int, n, =]
[), {, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =]
[=, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (]
[final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hcol, =]
[=, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work1, =]
[n, ), ;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (]
[new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =]
[npt, ), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (]
[ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =]
[n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;]
[n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;]
[;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <]
[ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =]
[{, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =]
[{, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =]
[{, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =]
[., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -]
[(, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -]
[,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;]
[,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;]
[), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;, j, <]
[}, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;, j, <, max, ;]
[}, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;, j, <, max, ;]
[max, =, npt, -, n, -, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =]
[max, =, npt, -, n, -, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =]
[n, -, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (]
[1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,]
[), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =]
[final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;]
[final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;]
[tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <]
[zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,]
[0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (]
[<, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +]
[<, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *]
[{, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry, (]
[., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry, (, k, ,]
[), +, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =]
[), +, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =]
[zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (]
[), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =]
[), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =]
[;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF, *]
[hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =]
[getEntry, (, knew, ), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;]
[getEntry, (, knew, ), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;]
[knew, ), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <]
[;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (]
[i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,]
[setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =]
[i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;]
[i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;]
[bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <]
[getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[{, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=]
[(, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (]
[getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =]
[j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;]
[;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (]
[<, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *]
[{, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry, (]
[., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,]
[i, ), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =]
[interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =]
[interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =]
[), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =]
[double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0, ;, int, ibdsav, =]
[double, step, =, Double, ., NaN, ;, int, ksav, =, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =]
[int, ksav, =, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =]
[=, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;]
[=, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;]
[;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, k, ==]
[<, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =]
[), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =]
[), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =]
[continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[}, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=]
[tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=]
[tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=]
[getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;]
[trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=]
[trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=]
[getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *]
[+=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =]
[+=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =]
[., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /]
[., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /]
[), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (]
[tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =]
[*, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -]
[subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;, int, ilbd, =]
[., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =]
[double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =]
[double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =]
[subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =, Math, ., min, (]
[int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =, Math, ., min, (, ONE, ,]
[0, ;, final, double, sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =]
[final, double, sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;]
[final, double, sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;]
[sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;, i, <]
[Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (]
[tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (]
[interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *]
[trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <]
[trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <]
[trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <]
[i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (]
[if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -]
[if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -]
[ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -]
[getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;]
[(, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =]
[(, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =]
[lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -]
[getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -]
[trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (]
[trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (]
[trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (]
[getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *]
[i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >]
[i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >]
[i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >]
[tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (]
[=, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -]
[=, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -]
[1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (]
[i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -]
[i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -]
[subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;]
[upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =]
[upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =]
[getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +]
[getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (]
[getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (]
[i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <]
[), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (]
[), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (]
[), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (]
[iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *]
[i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >]
[i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >]
[i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >]
[}, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (]
[if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -]
[if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -]
[ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (]
[getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -]
[getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;]
[(, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =]
[(, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (]
[., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *]
[(, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <]
[(, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <]
[(, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <]
[/, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (]
[ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -]
[ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -]
[1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (]
[., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (]
[i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -]
[i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -]
[subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;]
[lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =]
[lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -, i, -]
[., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }]
[(, i, ), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =]
[tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =]
[-, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =]
[-, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =]
[}, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (]
[}, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (]
[step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==]
[ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =]
[ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =]
[double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -]
[=, Double, ., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;]
[., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =]
[., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =]
[;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *]
[if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (]
[if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (]
[k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -]
[k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -]
[knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *]
[dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =]
[dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =]
[ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *]
[;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (]
[;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (]
[=, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -]
[=, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -]
[*, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *]
[*, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (]
[*, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (]
[*, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (]
[final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs, (]
[=, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs, (, d1, ), >]
[=, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs, (, d1, ), >]
[dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (]
[diff, ), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {]
[;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[(, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;]
[., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =]
[(, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, d1, ;]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =]
[), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =]
[), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =]
[{, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *]
[=, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =]
[=, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =]
[;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -]
[;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -]
[=, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *]
[d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =]
[d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =]
[HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -]
[HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -]
[dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *]
[d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (]
[d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (]
[d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (]
[d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *]
[diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <]
[=, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =]
[=, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =]
[=, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =]
[-, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *]
[*, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /]
[(, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (]
[(, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (]
[(, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (]
[<, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (]
[{, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (, d5, ), >]
[{, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (, d5, ), >]
[=, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (]
[/, diff, ;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {]
[;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[(, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /]
[., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;]
[(, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;]
[Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =]
[{, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {]
[=, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =]
[=, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =]
[/, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *]
[diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (]
[diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (]
[vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -]
[;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =]
[;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =]
[}, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *]
[}, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (]
[}, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (]
[{, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -]
[(, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (]
[(, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (]
[(, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (]
[), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (]
[double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp, ), >]
[double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp, ), >]
[*, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (]
[subd, ), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {]
[;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[(, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;]
[., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =]
[(, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =]
[(, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (]
[(, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (]
[(, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (]
[), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >]
[{, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&]
[{, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&]
[{, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&]
[;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (]
[tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <]
[=, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {]
[;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =]
[if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;]
[subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =]
[HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;]
[Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =]
[(, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }]
[), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=]
[HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =]
[HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =]
[HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =]
[vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *]
[=, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (]
[=, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (]
[;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -]
[0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *]
[;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =]
[;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =]
[;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =]
[final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *]
[tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *]
[=, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (]
[=, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (]
[=, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (]
[*, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *]
[ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +]
[ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +]
[ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +]
[step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *]
[*, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *]
[predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (]
[predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (]
[vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >]
[*, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {]
[vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =]
[vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;]
[ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =]
[tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;]
[tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =]
[;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;]
[(, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =]
[;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =]
[=, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;]
[=, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;]
[;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[=, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *]
[n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (]
[n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (]
[n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (]
[), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (]
[final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,]
[=, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -]
[=, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -]
[(, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[(, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[(, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (]
[getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (]
[), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (]
[max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,]
[,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (]
[,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <]
[upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {]
[upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {]
[i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (]
[i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (]
[), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -]
[tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -]
[), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,]
[), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,]
[if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (]
[if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (]
[(, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -]
[<, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -]
[(, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (]
[(, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (]
[ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >]
[,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {]
[,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {]
[(, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (]
[(, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (]
[ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -]
[1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,]
[1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,]
[}, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (]
[}, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (]
[(, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -]
[(, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =]
[(, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =]
[-, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +]
[getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =]
[), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =]
[), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =]
[=, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =, Double, ., NaN, ;, double, csave, =]
[;, int, iflag, =, 0, ;, double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;, while, (]
[double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;, while, (, true, ), {, double, wfixsq, =]
[NaN, ;, double, csave, =, ZERO, ;, while, (, true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =]
[while, (, true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =]
[true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;]
[true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;]
[{, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (]
[;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;]
[;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (]
[++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,]
[glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (]
[getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (]
[getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (]
[;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (]
[setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (]
[if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,]
[., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||]
[(, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||]
[(, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (]
[(, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (]
[(, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (]
[lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (]
[(, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[(, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (]
[ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,]
[., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <]
[trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {]
[trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {]
[i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (]
[-, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,]
[getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;]
[i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=]
[i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=]
[,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *]
[{, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (]
[{, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (]
[., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==]
[,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return]
[ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ]]
[+=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {]
[*, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {, alpha, ,]
[==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =]
[==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =]
[==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =]
[), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *]
[return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *, adelt, -]
[], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (]
[], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (]
[alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >]
[}, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {]
[}, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =]
[}, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =]
[=, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (]
[=, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (]
[*, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /]
[wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;]
[if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =]
[step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =]
[Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;]
[Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;]
[sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, work1, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==]
[i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =]
[i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =]
[i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =]
[if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[(, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *]
[(, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *]
[bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (]
[tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (]
[tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (]
[trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=]
[trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=]
[i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (]
[*, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {]
[*, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {]
[(, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (]
[), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[(, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *]
[double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (]
[double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (]
[=, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=]
[=, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=]
[(, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (]
[wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {]
[wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {]
[d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (]
[}, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[}, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[}, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[(, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *]
[work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =]
[work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =]
[i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (]
[wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;]
[d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=]
[d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=]
[d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=, d1, *]
[glag, ., getEntry, (, i, ), ;, ggfree, +=, d1, *, d1, ;, }, }, }, }, double, gw, =]
[ggfree, +=, d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =]
[d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;]
[d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;]
[d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[}, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (]
[<, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (]
[<, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (]
[<, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (]
[++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (]
[final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (, i, ), ==]
[=, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {]
[=, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {]
[(, i, ), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (]
[), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,]
[), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,]
[;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,, -]
[(, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *]
[==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =]
[==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =]
[work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (]
[work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (]
[i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (]
[step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,]
[step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,]
[step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,]
[;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (]
[min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (]
[getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;]
[getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;]
[,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (]
[., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,]
[), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (]
[), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (]
[(, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (]
[getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==]
[), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {]
[), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {]
[), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (]
[}, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[}, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (]
[alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >]
[(, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {]
[(, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {]
[., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (]
[(, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[(, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {]
[ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (]
[(, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,]
[(, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }]
[}, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=]
[}, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=]
[{, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *]
[{, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *]
[(, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (]
[i, ), ), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =]
[glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =]
[work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;]
[work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;]
[getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =]
[0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =]
[k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;]
[npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (]
[{, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=]
[(, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (]
[j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *]
[*, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *]
[j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (]
[j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (]
[;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==]
[+=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {]
[., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =]
[getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -]
[tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (]
[tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (]
[tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (]
[tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >]
[;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -]
[if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&]
[if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&]
[iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <]
[iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <]
[==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -]
[), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *]
[{, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (]
[{, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (]
[=, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +]
[=, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +]
[}, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt, (]
[<, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =]
[<, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =]
[-, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -]
[*, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -, gw, /]
[(, TWO, ), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =]
[), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;]
[), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;]
[), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <]
[final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *]
[<, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *]
[++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (]
[final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;]
[final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;]
[trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (]
[getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,]
[getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,]
[+, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[+, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (]
[i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (]
[max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =]
[(, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *]
[., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *]
[(, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;]
[), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =]
[), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =]
[tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1, *]
[=, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =]
[=, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =]
[*, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +]
[*, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +]
[*, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *]
[;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;]
[=, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =]
[=, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =]
[*, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *]
[{, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;, }, if, (]
[{, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;, }, if, (]
[double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==]
[;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =]
[=, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;]
[=, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;]
[*, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <]
[;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, -]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, -]
[;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;]
[{, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (]
[., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,]
[., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,]
[,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (]
[(, i, ), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }]
[), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =]
[;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;]
[., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;, iflag, =]
[), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (]
[), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (]
[}, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (, csave, >]
[;, }, else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =]
[else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =, 0, ;]
[else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =, 0, ;]
[break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =, 0, ;, i, <]
[}, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[csave, >, cauchy, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[csave, >, cauchy, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (]
[;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }]
[++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =]
[., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return]
[,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ]]
[work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {]
[getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {, alpha, ,]
[,, cauchy, }, ;, }, private, void, prelim, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[(, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, final, int, n, =]
[), {, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =]
[final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =]
[final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =]
[npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *]
[ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =]
[ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =]
[bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /]
[final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =]
[final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =]
[rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =, n, +]
[double, recip, =, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int, j, =]
[=, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;]
[=, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;]
[/, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[=, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (, j, ,]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (, j, ,]
[0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (]
[{, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =]
[., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;]
[., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;]
[(, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <]
[,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[(, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,]
[k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,]
[++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =]
[{, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[{, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;]
[(, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {, bMatrix, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, ndim, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,]
[), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =]
[setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =]
[setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =]
[setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =]
[i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *]
[j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /]
[ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;]
[ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;]
[;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <]
[}, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <, max, ;]
[}, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <, max, ;]
[i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <, max, ;, i, ++, ), {]
[i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <, max, ;, i, ++, ), {]
[max, =, n, *, np, /, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (]
[n, *, np, /, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,]
[;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;]
[{, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <]
[., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[}, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,]
[npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =]
[), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =]
[), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =]
[modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -]
[setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;]
[setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;]
[k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <]
[ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;]
[ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;]
[(, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;, j, ++, ), {]
[(, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;, j, ++, ), {]
[0, ,, max, =, npt, -, np, ;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (]
[max, =, npt, -, np, ;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,]
[npt, -, np, ;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,]
[j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt, =]
[., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =]
[j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg, =]
[j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg, =]
[0, ;, int, jpt, =, 0, ;, double, fbeg, =, Double, ., NaN, ;, do, {, final, int, nfm, =]
[fbeg, =, Double, ., NaN, ;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =]
[fbeg, =, Double, ., NaN, ;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =]
[Double, ., NaN, ;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -]
[final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =]
[final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =]
[nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =, nfm, -]
[final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =]
[final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =]
[nfx, =, nfm, -, n, ;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =, nfx, -]
[;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =]
[nfm, -, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =]
[final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (]
[final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (]
[nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=]
[nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=]
[nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *]
[stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (]
[stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (]
[stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (]
[0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=]
[double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&]
[double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&]
[=, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=]
[if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {]
[nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =]
[n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (]
[n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (]
[n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (]
[(, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (]
[1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==]
[<=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {]
[), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =]
[{, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -]
[initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }]
[initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }]
[upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (]
[getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,]
[nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,]
[=, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (]
[=, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (]
[stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >]
[interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {]
[setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =]
[setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =]
[nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (]
[stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,]
[}, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;]
[if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =]
[(, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -]
[), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (]
[), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (]
[), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (]
[interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (]
[(, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==]
[nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {]
[;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =]
[;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =]
[initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (]
[initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (]
[if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *]
[lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,]
[lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,]
[nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (]
[=, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (]
[=, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (]
[=, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (]
[(, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (]
[initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==]
[., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {]
[(, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =]
[(, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =]
[;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (]
[;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (]
[}, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (, -]
[(, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *]
[., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,]
[., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,]
[), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (]
[stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }]
[stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }]
[max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (]
[-, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,]
[*, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,]
[}, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =]
[}, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =]
[interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (]
[interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (]
[setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -]
[,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /]
[,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;]
[), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =]
[), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =]
[), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =]
[}, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm, -]
[}, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm, -]
[else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *]
[final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -]
[tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;]
[(, nfm, -, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =]
[(, nfm, -, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =]
[-, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +]
[n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (]
[n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (]
[jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >]
[-, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =]
[;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;]
[=, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =]
[=, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =]
[+, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -]
[;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;]
[(, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =]
[int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =]
[int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =]
[=, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -]
[-, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =]
[-, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =]
[;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -]
[=, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;]
[=, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;]
[final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (]
[iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,]
[ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,]
[ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,]
[final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (]
[jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,]
[1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;]
[1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;]
[setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (]
[nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,]
[iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,]
[iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,]
[getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (]
[ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,]
[nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =]
[jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;]
[jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;]
[interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,]
[0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (]
[0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (]
[n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (]
[n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (]
[j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, []
[{, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,]
[{, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,]
[{, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,]
[(, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (]
[Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +]
[Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +]
[Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (]
[max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,]
[j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,]
[j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,]
[,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, []
[+, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (]
[+, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (]
[+, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (]
[(, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (]
[,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,]
[), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (]
[;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {]
[;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {]
[., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (]
[(, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,]
[(, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,]
[,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, []
[(, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (]
[(, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (]
[(, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (]
[{, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (]
[., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,]
[j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (]
[}, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {]
[}, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {]
[., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (]
[(, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,]
[(, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,]
[,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, upperBound, []
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =]
[currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (]
[currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (]
[;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =]
[;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =]
[}, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =, isMinimize, ?]
[double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =, isMinimize, ?, objectiveValue, :]
[objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =, isMinimize, ?, objectiveValue, :, -]
[toArray, (, ), ), ;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =]
[;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;]
[;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;]
[=, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (]
[?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,]
[;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (]
[;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (]
[int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==]
[getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {]
[), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =]
[fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;]
[setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =]
[;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (]
[;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (]
[(, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <]
[(, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <]
[), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (]
[f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {]
[trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =]
[else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (]
[else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (]
[(, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=]
[(, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=]
[(, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=]
[<, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (]
[trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=]
[nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&]
[nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&]
[}, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=]
[}, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=]
[(, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +]
[2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {]
[2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {]
[1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[{, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,]
[{, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,]
[if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (]
[if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (]
[numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -]
[&&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /]
[1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (]
[1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (]
[{, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt, <]
[{, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt, <]
[., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +]
[-, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =]
[-, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =]
[), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /]
[stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;]
[stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;]
[(, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (]
[<, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,]
[+, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,]
[n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -]
[final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;]
[final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;]
[ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (]
[stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,]
[bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,]
[(, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;]
[(, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;]
[,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (]
[,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (]
[oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +]
[;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,]
[., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,]
[., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,]
[setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -]
[nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *]
[., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (]
[., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (]
[(, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=]
[(, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=]
[+, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *]
[;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *, (]
[;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *, (]
[}, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *, (, nfx, +]
[(, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /]
[>=, n, +, 2, ), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -]
[final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =]
[final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =]
[int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (]
[int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (]
[=, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (, f, -]
[(, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /]
[2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =]
[2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =]
[1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -]
[final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;]
[final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;]
[(, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (]
[-, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[-, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[-, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *]
[/, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (]
[/, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (]
[;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -]
[;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -]
[=, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (]
[;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /]
[setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;]
[setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;]
[TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (]
[(, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,]
[(, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,]
[tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (]
[tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (]
[tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (]
[tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (]
[getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (]
[), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *]
[/, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -]
[/, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -]
[), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *]
[., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /]
[(, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (]
[(, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (]
[(, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (]
[(, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (]
[., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *]
[(, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <]
[), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&]
[), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&]
[stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <]
[stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <]
[stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (]
[stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (]
[/, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -]
[if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {]
[if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {]
[stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (]
[ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,]
[ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,]
[fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (]
[fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (]
[getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -]
[n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;]
[n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;]
[fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (]
[fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (]
[setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -]
[nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,]
[(, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (]
[(, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (]
[-, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==]
[), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {]
[fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =]
[fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =]
[setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -]
[-, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }]
[-, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }]
[), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (]
[), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (]
[if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -]
[trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,]
[nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,]
[trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;]
[trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;]
[n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (]
[}, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,]
[., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,]
[-, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }]
[-, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }]
[,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (]
[), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,]
[interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -]
[setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (]
[setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (]
[nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +]
[,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /]
[stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (]
[stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (]
[;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *]
[setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;]
[setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;]
[nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (]
[-, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,]
[stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[+, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -]
[), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /]
[), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /]
[*, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (]
[*, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (]
[), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -]
[;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,]
[(, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;]
[(, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;]
[,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (]
[,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (]
[HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -]
[interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,]
[getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,]
[getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,]
[(, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -]
[(, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -]
[,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (]
[), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,]
[bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -]
[bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -]
[nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (]
[n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,]
[-, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;]
[-, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;]
[(, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (]
[,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,]
[), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (]
[,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /]
[nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (]
[nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (]
[), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *]
[setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;]
[setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;]
[nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (]
[Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,]
[sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[/, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (]
[*, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /]
[), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;]
[), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;]
[setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (]
[setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (]
[nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -]
[nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,]
[Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,]
[Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,]
[., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -]
[., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -]
[), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (]
[rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,]
[zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -]
[zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -]
[nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (]
[n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,]
[(, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {]
[(, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {]
[), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (]
[zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,]
[getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;]
[,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;]
[;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (]
[}, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,]
[{, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,]
[setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;]
[setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;]
[nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (]
[recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,]
[;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,]
[zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -]
[(, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;]
[(, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;]
[,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (]
[), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,]
[zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,]
[., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -]
[-, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =]
[-, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =]
[-, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =]
[-, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =]
[-, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =]
[), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *]
[;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (]
[;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (]
[., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -]
[jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /]
[nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +]
[-, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -]
[ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =]
[ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =]
[ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =]
[(, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (]
[-, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,]
[-, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,]
[), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -]
[+, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *]
[+, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *]
[;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (]
[double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,]
[double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,]
[=, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -]
[getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;]
[getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;]
[ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (]
[1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -]
[interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -]
[nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (]
[-, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -]
[-, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -]
[modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (]
[(, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +]
[(, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /]
[ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (]
[ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (]
[., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <]
[(, double, delta, ,, ArrayRealVector, gnew, ,, ArrayRealVector, xbdi, ,, ArrayRealVector, s, ,, ArrayRealVector, hs, ,, ArrayRealVector, hred, ), {]
[xbdi, ,, ArrayRealVector, s, ,, ArrayRealVector, hs, ,, ArrayRealVector, hred, ), {, printMethod, (, ), ;, final, int, n, =]
[xbdi, ,, ArrayRealVector, s, ,, ArrayRealVector, hs, ,, ArrayRealVector, hred, ), {, printMethod, (, ), ;, final, int, n, =]
[), {, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =]
[getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =]
[getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =]
[ds, ;, int, iu, ;, double, dhd, ,, dhs, ,, cth, ,, shs, ,, sth, ,, ssq, ,, beta, =]
[,, cth, ,, shs, ,, sth, ,, ssq, ,, beta, =, 0, ,, sdec, ,, blen, ;, int, iact, =]
[cth, ,, shs, ,, sth, ,, ssq, ,, beta, =, 0, ,, sdec, ,, blen, ;, int, iact, =, -]
[,, ssq, ,, beta, =, 0, ,, sdec, ,, blen, ;, int, iact, =, -, 1, ;, int, nact, =]
[0, ,, sdec, ,, blen, ;, int, iact, =, -, 1, ;, int, nact, =, 0, ;, double, angt, =]
[1, ;, int, nact, =, 0, ;, double, angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =]
[=, 0, ;, double, angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =, 0, ,, xsav, =]
[angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =, 0, ,, xsav, =, 0, ,, xsum, =]
[qred, ;, int, isav, ;, double, temp, =, 0, ,, xsav, =, 0, ,, xsum, =, 0, ,, angbd, =]
[;, double, temp, =, 0, ,, xsav, =, 0, ,, xsum, =, 0, ,, angbd, =, 0, ,, dredg, =]
[0, ,, xsav, =, 0, ,, xsum, =, 0, ,, angbd, =, 0, ,, dredg, =, 0, ,, sredg, =]
[0, ,, angbd, =, 0, ,, dredg, =, 0, ,, sredg, =, 0, ;, int, iterc, ;, double, resid, =]
[0, ,, dredg, =, 0, ,, sredg, =, 0, ;, int, iterc, ;, double, resid, =, 0, ,, delsq, =]
[0, ,, sredg, =, 0, ;, int, iterc, ;, double, resid, =, 0, ,, delsq, =, 0, ,, ggsav, =]
[0, ;, int, iterc, ;, double, resid, =, 0, ,, delsq, =, 0, ,, ggsav, =, 0, ,, tempa, =]
[;, double, resid, =, 0, ,, delsq, =, 0, ,, ggsav, =, 0, ,, tempa, =, 0, ,, tempb, =]
[0, ,, delsq, =, 0, ,, ggsav, =, 0, ,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =]
[0, ,, ggsav, =, 0, ,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =]
[0, ,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =]
[0, ,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =]
[0, ,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =]
[,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =]
[redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev, =]
[gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext, =]
[rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen, =]
[int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =]
[double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =]
[=, 0, ,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;]
[,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =]
[=, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =, 0, ;]
[,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =]
[0, ;, int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =]
[int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;]
[int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,]
[;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (]
[), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=]
[), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=]
[setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (]
[;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (]
[;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (]
[;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (]
[., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (]
[i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=]
[lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {]
[lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {]
[i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (]
[), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,]
[i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (]
[i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (]
[i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (]
[i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (]
[), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=]
[., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=]
[,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (]
[;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&]
[;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&]
[;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&]
[if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (]
[., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=]
[i, ), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {]
[i, ), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {]
[., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (]
[(, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,]
[getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (]
[getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (]
[getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (]
[<=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (]
[{, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=]
[setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {]
[(, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++]
[ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }]
[ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }]
[if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (]
[xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,]
[(, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;]
[(, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;]
[ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (]
[{, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,]
[{, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,]
[}, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }]
[ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =]
[ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =]
[;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;]
[(, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;, qred, =]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;]
[., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =]
[), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =]
[=, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (]
[=, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (, state, ), {, case]
[int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (, state, ), {, case, 20, :, {]
[=, 20, ;, for, (, ;, ;, ), {, switch, (, state, ), {, case, 20, :, {, printState, (]
[for, (, ;, ;, ), {, switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;]
[;, ;, ), {, switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;, beta, =]
[switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case]
[), {, case, 20, :, {, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {]
[case, 20, :, {, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (]
[{, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (, 30, ), ;]
[(, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =]
[;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =]
[case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[:, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {]
[i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry, (]
[), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry, (, i, ,]
[(, i, ), !=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (]
[(, i, ), !=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (]
[), !=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==]
[), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {]
[), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {]
[setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (]
[i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,]
[,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -]
[,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -]
[}, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (]
[), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {]
[), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {]
[setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (]
[i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,]
[i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,]
[i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,]
[-, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *]
[-, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *]
[(, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (]
[), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -]
[), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -]
[{, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -, gnew, ., getEntry, (]
[s, ., getEntry, (, i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =]
[s, ., getEntry, (, i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =]
[i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (]
[gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;]
[getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=]
[getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=]
[i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *]
[final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (]
[final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (]
[d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==]
[., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {]
[(, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =]
[*, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (]
[*, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (]
[;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==]
[(, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {]
[==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =]
[), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;]
[state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =]
[state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =]
[state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =]
[190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +]
[break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -]
[beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (]
[beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (]
[beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (]
[ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *]
[{, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=]
[{, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=]
[{, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=]
[=, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *]
[;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *]
[iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {]
[n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =]
[if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }]
[gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =]
[1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case]
[), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {]
[state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (]
[;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;]
[;, }, state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =]
[state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;]
[210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds, =]
[break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds, =, ZERO, ;]
[}, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =]
[50, ), ;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =]
[;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;]
[=, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==]
[i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =]
[i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =]
[if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (]
[., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;]
[(, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=]
[(, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=]
[), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *]
[ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;]
[{, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=]
[{, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=]
[{, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=]
[=, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (]
[getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *]
[getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *]
[;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (]
[d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;]
[d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=]
[d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=]
[d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=]
[s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (]
[(, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *]
[(, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *]
[trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (]
[shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (]
[shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (]
[s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=]
[(, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {]
[), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =]
[(, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }]
[), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =]
[), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =]
[if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (]
[if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (]
[if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (]
[resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *]
[ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +]
[ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +]
[{, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *]
[break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (]
[break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (]
[}, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <]
[Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {]
[sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =]
[sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =]
[(, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (]
[(, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (]
[*, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -]
[ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /]
[if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {]
[ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =]
[ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =]
[ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /]
[), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (]
[), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (]
[blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +]
[-, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }]
[), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =]
[}, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (]
[}, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (]
[{, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >]
[resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {]
[(, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =]
[(, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =]
[), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (]
[}, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,]
[}, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,]
[=, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /]
[(, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }]
[>, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =]
[ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -]
[min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =]
[blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;]
[blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;]
[gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, s, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=]
[i, <, n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {]
[n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =]
[n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =]
[n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =]
[), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (]
[(, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[(, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[(, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (]
[), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (]
[(, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >]
[+, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {]
[., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =]
[., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =]
[getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (]
[getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (]
[getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (]
[;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (]
[s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -]
[(, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /]
[(, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /]
[ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (]
[upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {]
[getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =]
[getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =]
[(, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (]
[(, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (]
[(, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (]
[xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (]
[s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -]
[(, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /]
[(, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /]
[}, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (]
[lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (]
[lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (]
[getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <]
[), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {]
[xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =]
[/, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;]
[., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =]
[;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }]
[if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =]
[stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (]
[stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (]
[{, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >]
[temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {]
[;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++]
[=, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;]
[;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =]
[;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =]
[}, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /]
[ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (]
[ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (]
[ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (]
[if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==]
[(, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -]
[>, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&]
[>, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&]
[), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >]
[iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {]
[temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =]
[temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =]
[stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (]
[if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,]
[1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (]
[1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (]
[temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==]
[), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {]
[crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =]
[min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }]
[crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =]
[temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;]
[;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =]
[{, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =]
[=, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[=, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[}, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *]
[{, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (]
[,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[(, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (]
[+, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =]
[i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =]
[if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (]
[., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;]
[(, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[(, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *]
[), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,]
[i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (]
[gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +]
[gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +]
[d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *]
[d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *]
[}, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s, ., getEntry, (]
[getEntry, (, i, ), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =]
[getEntry, (, i, ), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =]
[i, ), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *]
[), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (]
[), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (]
[stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -]
[stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -]
[stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -]
[s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *]
[getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *]
[), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;]
[;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =]
[;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =]
[d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (]
[stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,]
[ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;]
[HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=]
[), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (]
[), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (]
[sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=]
[., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {]
[max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++]
[d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;]
[d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;]
[;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[+=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,]
[(, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (]
[(, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (]
[(, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (]
[nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <]
[., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {]
[., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {]
[,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (]
[), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,]
[iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =]
[iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =]
[), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (]
[., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;]
[(, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=]
[(, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=]
[,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *]
[}, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (]
[}, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (]
[double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=]
[trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {]
[getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =]
[delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }]
[d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =]
[<=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (]
[<=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (]
[), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <]
[;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (]
[;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (]
[;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (, iterc, ==]
[=, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (, iterc, ==, itermax, ), {]
[;, break, ;, }, if, (, stplen, <, blen, ), {, if, (, iterc, ==, itermax, ), {, state, =]
[<, blen, ), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (]
[<, blen, ), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (]
[), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=]
[), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=]
[if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *]
[==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {]
[), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =]
[;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }]
[;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =]
[;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =]
[if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /]
[sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;]
[qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =]
[190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }, case]
[;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90, :, {]
[beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (]
[/, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;]
[;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =]
[;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;, }, case]
[}, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;, }, case, 100, :, {]
[case, 90, :, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (]
[(, 90, ), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (]
[(, 90, ), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (]
[), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=]
[), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=]
[crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n, -]
[;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n, -, 1, ), {]
[case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n, -, 1, ), {, state, =]
[(, 100, ), ;, if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }]
[), ;, if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =]
[if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;]
[nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =]
[n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;]
[1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =]
[break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =]
[}, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[}, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[=, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =]
[{, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (]
[xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;]
[getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=]
[getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=]
[i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *]
[==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;]
[), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=]
[), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=]
[), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=]
[=, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (]
[getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (]
[d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;]
[d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =]
[d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =]
[trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (]
[(, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;]
[), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *]
[getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;]
[getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;]
[;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (]
[=, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,]
[=, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,]
[(, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (]
[*, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {]
[*, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {]
[., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (]
[(, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,]
[getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }]
[i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =]
[), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;]
[}, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;, state, =]
[(, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case]
[ZERO, ), ;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {]
[;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (]
[itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;]
[=, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++]
[;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;]
[=, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =]
[=, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =]
[=, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =]
[;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *]
[;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -]
[;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -]
[case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *]
[printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (]
[printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (]
[120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=]
[120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=]
[120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=]
[;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *]
[iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *]
[=, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {]
[*, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =]
[dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }]
[if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp, =]
[if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp, =]
[qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (]
[=, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =]
[;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;]
[;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;]
[;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;, i, <]
[temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,]
[{, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (]
[{, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (]
[{, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *]
[(, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (]
[==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -]
[==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -]
[), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *]
[), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *]
[setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry, (]
[(, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /]
[(, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {]
[(, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {]
[dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry, (]
[gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,]
[), ), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }]
[/, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =]
[temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -]
[;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;]
[else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =]
[s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;]
[setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =]
[(, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =, -]
[}, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =]
[=, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;]
[=, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;]
[temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <]
[angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[-, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[(, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (]
[==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -]
[==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -]
[tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (]
[., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;]
[(, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =]
[(, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =]
[(, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =]
[(, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =]
[trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (]
[(, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -]
[(, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -]
[lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[(, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[(, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=]
[., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {]
[getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++]
[i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;]
[i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;]
[., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[(, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,]
[;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;]
[(, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =]
[;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (]
[;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (]
[., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=]
[i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {]
[,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++]
[), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;]
[), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;]
[100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,]
[else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, ONE, ), ;]
[(, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =]
[;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =]
[;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =]
[(, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (]
[state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =]
[state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =]
[break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (]
[double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;]
[=, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =]
[=, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =]
[=, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =]
[., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *]
[(, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +]
[(, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +]
[), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *]
[double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;]
[=, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =]
[=, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =]
[=, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =]
[(, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (]
[;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[*, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (]
[d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;]
[d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =]
[d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =]
[d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -]
[d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -]
[trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *]
[i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (]
[i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (]
[-, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >]
[getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[=, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (]
[d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -]
[d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -]
[if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (]
[temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *]
[Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >]
[(, temp, ), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {]
[), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =]
[), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =]
[s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /]
[getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;]
[i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =]
[;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;]
[(, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =]
[>, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }]
[), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =]
[), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =]
[), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =]
[tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (]
[;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -]
[;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -]
[;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[}, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =]
[}, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =]
[d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -]
[d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -]
[upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (]
[i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >]
[getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =]
[=, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (]
[d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +]
[d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +]
[if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (]
[), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (]
[temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *]
[Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >]
[(, temp, ), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {]
[), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =]
[), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =]
[s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /]
[getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;]
[i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =]
[;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;]
[(, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =]
[), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }]
[angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =]
[iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case]
[;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {]
[=, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (]
[}, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;]
[}, }, state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =]
[state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;]
[210, ;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs, =]
[break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs, =, ZERO, ;]
[}, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =]
[150, ), ;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =]
[;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;]
[=, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==]
[i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=]
[n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *]
[(, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *]
[(, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (]
[==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;]
[), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=]
[), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=]
[), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=]
[s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (]
[(, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *]
[(, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *]
[hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (]
[(, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;]
[), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=]
[), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=]
[), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=]
[trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (]
[(, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *]
[(, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *]
[hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (]
[), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }]
[dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =]
[trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;]
[getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =]
[(, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -]
[), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;]
[hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =]
[getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;]
[i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =]
[}, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, )]
[}, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (]
[}, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (]
[}, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (]
[=, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *]
[;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +]
[ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =]
[iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;]
[iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;]
[(, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <]
[), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;]
[), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;]
[17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {]
[3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =]
[3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =]
[3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =]
[;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *]
[(, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /]
[i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;]
[0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =]
[0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =]
[;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (]
[;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (]
[<, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +]
[i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /]
[++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (]
[++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (]
[{, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +]
[{, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +]
[=, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *]
[i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +]
[sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +]
[(, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *]
[/, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -]
[ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -]
[*, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =]
[temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (]
[+, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *]
[*, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -]
[dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *]
[dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *]
[rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (]
[rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (]
[sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >]
[angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {]
[dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =]
[sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;]
[HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =]
[sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;]
[temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =]
[>, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (]
[>, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (]
[), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==]
[), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==]
[redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +]
[;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {]
[=, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =]
[rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }]
[redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =]
[(, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (]
[(, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (]
[==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <]
[1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {]
[{, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state, =]
[=, rednew, ;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (]
[=, rednew, ;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (]
[;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <]
[(, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {]
[<, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =]
[<, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =]
[0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (]
[0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (]
[{, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -]
[190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /]
[;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (]
[;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (]
[;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (]
[;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (]
[;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +]
[if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -]
[isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -]
[), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;]
[temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =]
[temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =]
[temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =]
[(, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *]
[rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (]
[rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (]
[rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +]
[rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +]
[/, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *]
[+, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /]
[rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }]
[rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =]
[rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =]
[), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (]
[), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (]
[angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -]
[angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -]
[angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *]
[isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /]
[+, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (]
[+, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (]
[*, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +]
[*, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +]
[), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *]
[;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =]
[cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =]
[=, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (]
[=, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (]
[ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +]
[*, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /]
[angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (]
[angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (]
[/, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +]
[/, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +]
[ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *]
[*, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +]
[sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +]
[(, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (]
[angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *]
[/, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -]
[ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -]
[*, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =]
[temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (]
[+, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *]
[*, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -]
[angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -]
[dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *]
[dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *]
[sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (]
[sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (]
[sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=]
[angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {]
[dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =]
[*, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }]
[*, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =]
[), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;]
[if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =]
[state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =]
[190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[}, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[}, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (]
[n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (]
[i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -]
[{, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *]
[{, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *]
[(, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (]
[gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +]
[gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +]
[getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *]
[getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *]
[+, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (]
[*, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[*, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[*, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[(, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {]
[i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *]
[if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *]
[getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (]
[), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +]
[), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +]
[ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *]
[ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *]
[., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (]
[,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;]
[*, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=]
[*, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=]
[*, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=]
[(, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (]
[+, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[+, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (]
[dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =]
[dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =]
[getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (]
[), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;]
[gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *]
[), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,]
[gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,]
[getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *]
[getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *]
[;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (]
[d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +]
[d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +]
[d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *]
[d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *]
[., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (]
[cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }]
[hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=]
[i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (]
[i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (]
[i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=]
[*, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&]
[*, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&]
[., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==]
[i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {]
[), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++]
[;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;]
[;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;]
[sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,]
[>=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;]
[&&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =]
[nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (]
[nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (]
[xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >]
[xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >]
[setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *]
[,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {]
[), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {, state, =]
[;, }, if, (, sdec, >, qred, *, .01, ), {, state, =, 120, ;, break, ;, }, }, case]
[(, sdec, >, qred, *, .01, ), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {]
[>, qred, *, .01, ), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (]
[.01, ), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;]
[{, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq, =]
[}, }, case, 190, :, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =]
[case, 190, :, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[case, 190, :, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[:, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (]
[i, <, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (]
[;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[{, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (]
[min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,]
[min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,]
[min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (]
[getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;]
[getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;]
[+, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (]
[upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,]
[upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,]
[i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (]
[(, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (]
[(, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (]
[(, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (]
[., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (]
[min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {]
[., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {]
[), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,]
[xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (]
[MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (]
[MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (]
[i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==]
[., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {]
[., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {]
[), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (]
[;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,]
[;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,]
[xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }]
[), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }]
[{, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,]
[,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[(, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=]
[., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=]
[(, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *]
[;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return]
[=, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ]]
[trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {]
[getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq, ,]
[dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case]
[*, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {]
[;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {, printState, (]
[], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {, printState, (, 210, ), ;, int, ih, =]
[}, case, 210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =]
[210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[{, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[(, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[(, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, hs, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, hs, ., setEntry, (, j, ,]
[n, ;, j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =]
[j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;]
[j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;]
[), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=]
[hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,]
[++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (]
[if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +]
[if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +]
[j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (]
[hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }]
[(, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }]
[modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (]
[getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,]
[getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,]
[*, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (]
[getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *]
[i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), ), ;]
[getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), ), ;]
[ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =]
[ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =]
[ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =]
[., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (]
[), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (]
[RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =]
[=, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;]
[=, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;]
[., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <]
[(, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[(, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[(, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=]
[++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =]
[{, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;]
[{, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;]
[(, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <]
[., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (]
[<, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (]
[hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *]
[hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *]
[i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (]
[hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,]
[getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (]
[getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (]
[k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=]
[interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {]
[getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =]
[;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (]
[;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (]
[}, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (, iterc, >]
[(, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {]
[!=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =]
[}, if, (, iterc, >, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (, int, i, =]
[(, iterc, >, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;]
[(, iterc, >, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;]
[>, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <]
[), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hred, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hred, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hred, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (]
[;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }]
[++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }, state, =]
[hs, ., getEntry, (, i, ), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw]
[(, i, ), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (]
[(, i, ), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (]
[;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,]
[), ;, }, }, }, }, private, void, update, (, double, beta, ,, double, denom, ,, int, knew, ), {]
[update, (, double, beta, ,, double, denom, ,, int, knew, ), {, printMethod, (, ), ;, final, int, n, =]
[update, (, double, beta, ,, double, denom, ,, int, knew, ), {, printMethod, (, ), ;, final, int, n, =]
[), {, printMethod, (, ), ;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =]
[final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =]
[n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -]
[currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -]
[final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work, =]
[=, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (]
[=, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (]
[;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +]
[-, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =]
[work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =]
[new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;]
[new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;]
[(, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <]
[+, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[+, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =]
[int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;]
[int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {]
[++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =]
[++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =]
[(, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (]
[j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,]
[j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,]
[j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (]
[j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (]
[j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (]
[), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,]
[(, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), ), ), ;, }, }]
[,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), ), ), ;, }, }, ztest, *=]
[getEntry, (, k, ,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =]
[k, ,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;]
[k, ,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;]
[j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <]
[), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;]
[), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;]
[;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =]
[;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =]
[j, =, 1, ;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (]
[1, ;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,]
[;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (]
[;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (]
[;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (]
[{, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (, Math, ., abs, (]
[d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (, Math, ., abs, (, d1, ), >]
[,, j, ), ;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =]
[,, j, ), ;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =]
[if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (]
[Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,]
[ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =]
[ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =]
[double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (]
[=, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,]
[0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =]
[0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =]
[double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (]
[double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (]
[double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (]
[=, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *]
[., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +]
[., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +]
[(, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *]
[double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =]
[double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =]
[double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =]
[., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (]
[(, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,]
[d2, +, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /]
[;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =]
[;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =]
[;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =]
[=, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (]
[., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,]
[knew, ,, 0, ), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /]
[final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =]
[d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;]
[d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;]
[zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;, i, <]
[getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;, i, <, npt, ;]
[getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;, i, <, npt, ;]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =, d5, *]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =, d5, *]
[0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (]
[i, <, npt, ;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,]
[;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +]
[;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +]
[++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *]
[++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *]
[double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (]
[=, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,]
[zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;]
[zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;]
[i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (]
[0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,]
[+, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,]
[+, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,]
[+, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,]
[*, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *]
[*, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *]
[(, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (]
[,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,]
[;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -]
[;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -]
[., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *]
[., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *]
[,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (]
[,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,]
[., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;]
[., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;]
[,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (]
[), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,]
[d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,]
[(, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }]
[(, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }]
[), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (]
[;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,]
[., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,]
[;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =]
[}, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[}, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;]
[., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;]
[(, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,]
[0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (]
[i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,]
[;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *]
[;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *]
[{, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry, (]
[., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,]
[knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =]
[knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =]
[*, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (]
[0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =]
[0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =]
[}, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;]
[alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;]
[getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,]
[knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,]
[knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,]
[double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -]
[lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =]
[lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =]
[knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (]
[), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =]
[), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =]
[ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /]
[=, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =]
[=, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =]
[=, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =]
[(, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (]
[), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,]
[double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /]
[final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =]
[d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;]
[d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;]
[zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <]
[getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;]
[getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;]
[0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {]
[0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,]
[i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,]
[i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,]
[0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *]
[0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *]
[npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (]
[i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,]
[{, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -]
[{, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -]
[., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *]
[., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *]
[,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =]
[), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;]
[), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;]
[d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp, =]
[}, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp, =]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp, =, npt, +]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;]
[j, <, n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (]
[n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,]
[n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,]
[), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (]
[final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,]
[work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =]
[work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =]
[., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (]
[., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (]
[., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (]
[(, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *]
[(, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *]
[., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -]
[knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -]
[j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *]
[j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *]
[final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work, ., getEntry, (]
[(, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /]
[(, jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =]
[(, jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =]
[jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (]
[jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (]
[jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (]
[), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -]
[tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta, *]
[tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta, *]
[getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (]
[), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -]
[), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -]
[/, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *]
[/, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *]
[double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[-, beta, *, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /]
[jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =]
[-, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;]
[-, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=]
[., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;]
[., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;]
[), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {]
[), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (]
[(, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,]
[i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,]
[i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,]
[i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,]
[i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (]
[jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,]
[++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +]
[++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +]
[{, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *]
[{, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *]
[(, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +]
[j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +]
[bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *]
[bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *]
[i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (]
[., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=]
[i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {]
[i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {]
[*, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (]
[., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,]
[getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (]
[getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (]
[i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -]
[;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,]
[;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,]
[>=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (]
[), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (, i, ,]
[;, }, }, }, }, private, void, setup, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, ), ;, double, [, ], init, =]
[upperBound, ), {, printMethod, (, ), ;, double, [, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =]
[upperBound, ), {, printMethod, (, ), ;, double, [, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =]
[;, double, [, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =, init, ., length, ;, if, (]
[;, double, [, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =, init, ., length, ;, if, (]
[[, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =, init, ., length, ;, if, (, dimension, <]
[getStartPoint, (, ), ;, final, int, dimension, =, init, ., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw]
[;, final, int, dimension, =, init, ., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (]
[int, dimension, =, init, ., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (, dimension, ,]
[=, init, ., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,]
[), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =]
[{, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {]
[{, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {]
[new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +]
[(, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,]
[(, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,]
[(, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,]
[dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (]
[dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (]
[MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +]
[), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *]
[;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *, (]
[;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *, (]
[final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *, (, dimension, +]
[], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /]
[+, 2, ,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (]
[+, 2, ,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (]
[+, 2, ,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (]
[,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <]
[,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <]
[dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, []
[), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||]
[), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||]
[(, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >]
[(, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >]
[+, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, []
[}, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw]
[(, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (]
[(, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (]
[[, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,]
[], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,]
[], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,]
[numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, []
[[, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,]
[[, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,]
[], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, []
[OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }]
[LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =]
[,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, []
[], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =]
[], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =]
[nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *]
[;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =]
[;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =]
[;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =]
[requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;]
[requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;]
[2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <]
[initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[=, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[=, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, []
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =]
[int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, []
[0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -]
[0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -]
[i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, []
[;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;]
[++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =]
[++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =]
[[, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (]
[], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,]
[], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,]
[upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, []
[i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (]
[i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (]
[;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <]
[Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {]
[min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =]
[min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =]
[minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /]
[[, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }]
[], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =]
[}, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (]
[}, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (]
[(, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +]
[<, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,]
[{, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;]
[=, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =]
[3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (]
[}, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,]
[}, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,]
[}, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,]
[=, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -]
[Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -]
[+, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;]
[,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =]
[;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (]
[=, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,]
[(, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;]
[,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =]
[dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (]
[), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;]
[interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =]
[Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (]
[,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;]
[), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =]
[=, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (]
[(, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =]
[=, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (]
[(, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =]
[=, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (]
[(, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =]
[=, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (]
[(, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =]
[=, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (]
[(, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;]
[), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (]
[(, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =]
[=, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (]
[(, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (]
[(, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;]
[), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (]
[=, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (]
[ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +]
[), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;]
[trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =]
[ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (]
[ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (]
[ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (]
[dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *]
[), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (]
[), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (]
[lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +]
[ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /]
[1, ), /, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =]
[(, int, n, ), {, final, Throwable, t, =, new, Throwable, (, ), ;, final, StackTraceElement, [, ], elements, =]
[(, int, n, ), {, final, Throwable, t, =, new, Throwable, (, ), ;, final, StackTraceElement, [, ], elements, =]
[Throwable, (, ), ;, final, StackTraceElement, [, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =]
[Throwable, (, ), ;, final, StackTraceElement, [, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =]
[), ;, final, StackTraceElement, [, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, []
[[, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return]
[[, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return]
[[, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return]
[[, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return]
[[, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return]
[getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return, e, ., getMethodName, (, ), +]
[), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return, e, ., getMethodName, (, ), +, " (at line ", +]
[), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return, e, ., getMethodName, (, ), +, " (at line ", +]
[elements, [, n, ], ;, return, e, ., getMethodName, (, ), +, " (at line ", +, e, ., getLineNumber, (, ), +]
[static, void, printMethod, (, ), {, }, private, static, class, PathIsExploredException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =]
[static, class, PathIsExploredException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =]
[final, long, serialVersionUID, =, 745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (]
[final, long, serialVersionUID, =, 745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (]
[final, long, serialVersionUID, =, 745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (]
[serialVersionUID, =, 745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +]
[745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +, " ", +]
[745350979634801853L, ;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +, " ", +]
[final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +, " ", +, BOBYQAOptimizer, ., caller, (]
