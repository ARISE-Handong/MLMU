[;, private, static, final, long, EXPONENT_MASK, =, 0x7ff0000000000000L, ;, private, static, final, long, MANTISSA_MASK, =, 0x000fffffffffffffL, ;, private, static, final]
[;, private, static, final, long, MANTISSA_MASK, =, 0x000fffffffffffffL, ;, private, static, final, long, IMPLICIT_ONE, =, 0x0010000000000000L, ;, private, double, []
[;, private, static, final, long, IMPLICIT_ONE, =, 0x0010000000000000L, ;, private, double, [, ], components, ;, private, int, offset, ;, private]
[;, private, double, [, ], components, ;, private, int, offset, ;, private, int, lsb, ;, private, long, [, ], encoding]
[=, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;]
[., components, =, components, ., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, .]
[;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =]
[., clone, (, ), ;, int, msb, =, Integer, ., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =]
[;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for]
[., MIN_VALUE, ;, lsb, =, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false]
[=, Integer, ., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int]
[;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;]
[., MAX_VALUE, ;, posInf, =, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =]
[=, false, ;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[;, negInf, =, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <, components, .]
[=, false, ;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;]
[;, nan, =, false, ;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++, i]
[=, false, ;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, components, ., length, ;, ++, i, ), {, if, (]
[;, i, <, components, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (]
[<, components, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], )]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (]
[., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {]
[), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (, components, [, i]
[), {, if, (, Double, ., isInfinite, (, components, [, i, ], ), ), {, if, (, components, [, i]
[), {, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;, }, else, {, posInf]
[., isInfinite, (, components, [, i, ], ), ), {, if, (, components, [, i, ], <, 0, ), {]
[), ), {, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;, }, else, {]
[[, i, ], ), ), {, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;]
[], ), ), {, if, (, components, [, i, ], <, 0, ), {, negInf, =, true, ;, }, else]
[), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, .]
[<, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (]
[[, i, ], <, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }]
[], <, 0, ), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if]
[), {, negInf, =, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, .]
[=, true, ;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (, components]
[;, }, else, {, posInf, =, true, ;, }, }, else, if, (, Double, ., isNaN, (, components, [, i]
[=, true, ;, }, }, else, if, (, Double, ., isNaN, (, components, [, i, ], ), ), {, nan]
[;, }, }, else, if, (, Double, ., isNaN, (, components, [, i, ], ), ), {, nan, =, true]
[), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, [, i]
[., isNaN, (, components, [, i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b]
[), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, []
[[, i, ], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits]
[], ), ), {, nan, =, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components]
[=, true, ;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;]
[;, }, else, {, final, long, b, =, Double, ., doubleToLongBits, (, components, [, i, ], ), ;, final, long]
[;, final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, ), {, final, int, e]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (]
[), ;, final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, ), {, final, int]
[[, i, ], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, )]
[], ), ;, final, long, m, =, mantissa, (, b, ), ;, if, (, m, !=, 0, ), {, final]
[;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath]
[), ;, if, (, m, !=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =]
[), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,, e]
[!=, 0, ), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb]
[), {, final, int, e, =, exponent, (, b, ), ;, msb, =, FastMath, ., max, (, msb, ,, e]
[;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath]
[), ;, msb, =, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =]
[=, FastMath, ., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min]
[;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }]
[., max, (, msb, ,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb]
[,, e, +, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB]
[), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }]
[+, computeMSB, (, m, ), ), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m]
[), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }]
[), ), ;, lsb, =, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }]
[=, FastMath, ., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (]
[;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan]
[., min, (, lsb, ,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&]
[,, e, +, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf]
[), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;]
[+, computeLSB, (, m, ), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false]
[), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;]
[), ), ;, }, }, }, if, (, posInf, &&, negInf, ), {, posInf, =, false, ;, negInf, =, false]
[), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb]
[&&, negInf, ), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb]
[), {, posInf, =, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb]
[=, false, ;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode]
[;, negInf, =, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb]
[=, false, ;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16]
[;, nan, =, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16, ), ;]
[=, true, ;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else]
[;, }, if, (, lsb, <=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding]
[), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =, new, long, [, ], {, 0x0L]
[<=, msb, ), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =, new, long, [, ]]
[), {, encode, (, msb, +, 16, ), ;, }, else, {, encoding, =, new, long, [, ], {, 0x0L]
[;, }, else, {, encoding, =, new, long, [, ], {, 0x0L, }, ;, }, }, private, void, encode, (]
[), ;, }, else, {, encoding, =, new, long, [, ], {, 0x0L, }, ;, }, }, private, void, encode]
[+, 16, ), ;, }, else, {, encoding, =, new, long, [, ], {, 0x0L, }, ;, }, }, private]
[), ;, }, else, {, encoding, =, new, long, [, ], {, 0x0L, }, ;, }, }, private, void, encode]
[=, new, long, [, ], {, 0x0L, }, ;, }, }, private, void, encode, (, final, int, minOffset, ), {]
[;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=]
[;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset, -=]
[}, ;, }, }, private, void, encode, (, final, int, minOffset, ), {, offset, =, minOffset, +, 31, ;, offset]
[=, minOffset, +, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (]
[;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==]
[+, 31, ;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, .]
[;, offset, -=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==]
[-=, offset, %, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, )]
[;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, []
[%, 32, ;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (]
[;, if, (, (, encoding, !=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, []
[), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (]
[&&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +]
[&&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return]
[), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {]
[!=, null, ), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, )]
[), &&, (, encoding, ., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {]
[&&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +]
[), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset]
[==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits]
[., length, ==, 1, ), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final]
[), &&, (, encoding, [, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset]
[), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =, (]
[), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =]
[==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int]
[[, 0, ], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb]
[], ==, 0x0L, ), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final]
[), ), {, return, ;, }, final, int, neededBits, =, offset, +, 1, -, lsb, ;, final, int, neededLongs, =]
[;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, [, components, .]
[-, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, []
[+, 1, -, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new]
[-, lsb, ;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, []
[;, final, int, neededLongs, =, (, neededBits, +, 62, ), /, 63, ;, encoding, =, new, long, [, components, .]
[;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift]
[/, 63, ;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;]
[), /, 63, ;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0]
[+, 62, ), /, 63, ;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex]
[), /, 63, ;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0]
[;, encoding, =, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift]
[=, new, long, [, components, ., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift, =, 62]
[;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k]
[], ;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int]
[*, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for]
[., length, *, neededLongs, ], ;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L]
[], ;, int, eIndex, =, 0, ;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int]
[;, int, shift, =, 62, ;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <]
[;, long, word, =, 0x0L, ;, for, (, int, k, =, offset, ;, eIndex, <, encoding, ., length, ;, --]
[;, for, (, int, k, =, offset, ;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (]
[;, eIndex, <, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <]
[;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex]
[<, encoding, ., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, .]
[;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex]
[., length, ;, --, k, ), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;]
[), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if]
[), {, for, (, int, vIndex, =, 0, ;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if]
[;, vIndex, <, components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=]
[;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L]
[<, components, ., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, )]
[;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L]
[., length, ;, ++, vIndex, ), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word]
[), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;]
[), {, if, (, getBit, (, vIndex, ,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;]
[), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex]
[!=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding]
[,, k, ), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0]
[), !=, 0, ), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {]
[), {, word, |=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex]
[|=, 0x1L, <<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =]
[;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =]
[<<, shift, ;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;]
[;, }, if, (, shift, --, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =]
[), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }]
[==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;]
[--, ==, 0, ), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62]
[), {, encoding, [, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }]
[=, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final]
[[, eIndex, ++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public]
[], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (]
[++, ], =, word, ;, word, =, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public, int, compareTo]
[;, word, =, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot]
[=, 0x0L, ;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {]
[;, shift, =, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (]
[=, 62, ;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (, components, .]
[;, }, }, }, }, public, int, compareTo, (, final, OrderedTuple, ot, ), {, if, (, components, ., length, ==]
[), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot, ., nan, ), {]
[==, ot, ., components, ., length, ), {, if, (, nan, ), {, return, +, 1, ;, }, else, if]
[., length, ==, ot, ., components, ., length, ), {, if, (, nan, ), {, return, +, 1, ;, }]
[), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot, ., nan, ), {]
[., length, ), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot, ., nan]
[., components, ., length, ), {, if, (, nan, ), {, return, +, 1, ;, }, else, if, (, ot]
[), {, return, +, 1, ;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }]
[;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||]
[;, }, else, if, (, ot, ., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||]
[), {, return, -, 1, ;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1]
[., nan, ), {, return, -, 1, ;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return]
[;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (]
[;, }, else, if, (, negInf, ||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (]
[), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1]
[||, ot, ., posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, )]
[), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1]
[., posInf, ), {, return, -, 1, ;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return]
[;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if]
[;, }, else, if, (, posInf, ||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if]
[), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (]
[||, ot, ., negInf, ), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset]
[), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (]
[., negInf, ), {, return, +, 1, ;, }, else, {, if, (, offset, <, ot, ., offset, ), {]
[;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;]
[;, }, else, {, if, (, offset, <, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;]
[), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {]
[<, ot, ., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot]
[), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {]
[., offset, ), {, encode, (, ot, ., offset, ), ;, }, else, if, (, offset, >, ot, ., offset]
[;, }, else, if, (, offset, >, ot, ., offset, ), {, ot, ., encode, (, offset, ), ;, }]
[), ;, }, else, if, (, offset, >, ot, ., offset, ), {, ot, ., encode, (, offset, ), ;]
[., offset, ), ;, }, else, if, (, offset, >, ot, ., offset, ), {, ot, ., encode, (, offset]
[), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, .]
[>, ot, ., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, .]
[), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, .]
[., offset, ), {, ot, ., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (]
[;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,, ot, ., encoding, ., length, )]
[., encode, (, offset, ), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,, ot]
[), ;, }, final, int, limit, =, FastMath, ., min, (, encoding, ., length, ,, ot, ., encoding, ., length]
[;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding, []
[., min, (, encoding, ., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0]
[,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++]
[., length, ,, ot, ., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit]
[), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if, (, encoding]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, ), {, if]
[., encoding, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, limit, ;, ++, i, )]
[;, i, <, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, []
[;, ++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {]
[<, limit, ;, ++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ]]
[;, ++, i, ), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {]
[), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1]
[), {, if, (, encoding, [, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1]
[), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i]
[<, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i]
[[, i, ], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (]
[], <, ot, ., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, []
[), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i]
[[, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >, ot, .]
[., encoding, [, i, ], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >]
[], ), {, return, -, 1, ;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, []
[;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i, ], ), {, return, +]
[;, }, else, if, (, encoding, [, i, ], >, ot, ., encoding, [, i, ], ), {, return, +]
[), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, )]
[>, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length]
[[, i, ], >, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (]
[], >, ot, ., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, .]
[), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, )]
[[, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding]
[., encoding, [, i, ], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot]
[], ), {, return, +, 1, ;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length]
[;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;]
[;, }, }, if, (, encoding, ., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;]
[), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, )]
[<, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >]
[., length, <, ot, ., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, .]
[), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, )]
[., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >, ot, ., encoding, .]
[., encoding, ., length, ), {, return, -, 1, ;, }, else, if, (, encoding, ., length, >, ot, .]
[;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, ), {, return, +, 1, ;]
[;, }, else, if, (, encoding, ., length, >, ot, ., encoding, ., length, ), {, return, +, 1, ;]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -]
[>, ot, ., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }]
[., length, >, ot, ., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;]
[), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -]
[., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return, components, .]
[., encoding, ., length, ), {, return, +, 1, ;, }, else, {, return, 0, ;, }, }, }, return]
[;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -, ot, ., components, ., length]
[;, }, else, {, return, 0, ;, }, }, }, return, components, ., length, -, ot, ., components, ., length]
[;, }, }, }, return, components, ., length, -, ot, ., components, ., length, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, ), {]
[-, ot, ., components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if]
[., length, -, ot, ., components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, )]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, ), {]
[., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other]
[., components, ., length, ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this]
[), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, )]
[==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (]
[), {, return, true, ;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, )]
[;, }, else, if, (, other, instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, ), other, ), ==, 0]
[), {, return, compareTo, (, (, OrderedTuple, ), other, ), ==, 0, ;, }, else, {, return, false, ;, }]
[instanceof, OrderedTuple, ), {, return, compareTo, (, (, OrderedTuple, ), other, ), ==, 0, ;, }, else, {, return, false]
[;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, multiplier]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, final]
[), ==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[), ==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, multiplier]
[;, }, }, @, Override, public, int, hashCode, (, ), {, final, int, multiplier, =, 37, ;, final, int, trueHash]
[;, final, int, trueHash, =, 97, ;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (]
[;, final, int, falseHash, =, 71, ;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash]
[;, int, hash, =, Arrays, ., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash]
[;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash]
[., hashCode, (, components, ), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +]
[), ;, hash, =, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =]
[=, hash, *, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier]
[;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :]
[+, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?]
[*, multiplier, +, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (]
[+, offset, ;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?]
[;, hash, =, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :]
[=, hash, *, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, )]
[;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier]
[+, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash]
[*, multiplier, +, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash]
[+, lsb, ;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash]
[;, hash, =, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier]
[=, hash, *, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier]
[+, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :]
[*, multiplier, +, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?]
[+, (, posInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :]
[;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier]
[), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *]
[?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;]
[:, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =]
[), ;, hash, =, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *]
[=, hash, *, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (]
[;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public]
[+, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :]
[*, multiplier, +, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?]
[+, (, negInf, ?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :]
[;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public]
[), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }]
[?, trueHash, :, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;]
[:, falseHash, ), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash]
[), ;, hash, =, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }]
[=, hash, *, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, []
[;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone, (, ), ;]
[+, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, )]
[*, multiplier, +, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents]
[+, (, nan, ?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, )]
[;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone, (, ), ;]
[), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone, (, )]
[?, trueHash, :, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components]
[:, falseHash, ), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone]
[), ;, return, hash, ;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone, (, )]
[;, }, public, double, [, ], getComponents, (, ), {, return, components, ., clone, (, ), ;, }, private, static]
[;, }, private, static, long, sign, (, final, long, bits, ), {, return, bits, &, SIGN_MASK, ;, }, private, static]
[., clone, (, ), ;, }, private, static, long, sign, (, final, long, bits, ), {, return, bits, &, SIGN_MASK]
[;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (, bits]
[&, SIGN_MASK, ;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (]
[;, }, private, static, int, exponent, (, final, long, bits, ), {, return, (, (, int, ), (, (, bits]
[;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==]
[-, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK]
[), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &]
[), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &]
[), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits]
[>, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return]
[), >, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {]
[&, EXPONENT_MASK, ), >, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits]
[), >, >, 52, ), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {]
[), ), -, 1075, ;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits]
[;, }, private, static, long, mantissa, (, final, long, bits, ), {, return, (, (, bits, &, EXPONENT_MASK, ), ==]
[;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =]
[?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), )]
[), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, )]
[==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &]
[), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits]
[&, EXPONENT_MASK, ), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |]
[), ==, 0, ), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits]
[), ?, (, (, bits, &, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, )]
[:, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long, l]
[), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long]
[<<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (]
[), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB]
[&, MANTISSA_MASK, ), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static]
[), <<, 1, ), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB]
[), :, (, IMPLICIT_ONE, |, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long]
[;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =]
[), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask]
[|, (, bits, &, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long]
[), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask]
[), ), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long]
[&, MANTISSA_MASK, ), ), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l]
[), ), ;, }, private, static, int, computeMSB, (, final, long, l, ), {, long, ll, =, l, ;, long]
[;, long, mask, =, 0xffffffffL, ;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=]
[;, int, scale, =, 32, ;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[;, int, msb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, )]
[;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb]
[), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll]
[!=, 0, ), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll]
[), {, if, (, (, ll, &, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll]
[), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1]
[!=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >]
[), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale]
[&, mask, ), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale]
[), !=, ll, ), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale]
[), {, msb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >]
[=, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale]
[;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, msb, ;]
[>, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }]
[;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, msb, ;]
[=, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, msb, ;, }, private, static]
[;, mask, =, mask, >, >, scale, ;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long]
[>, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, msb, ;, }, private, static, int, computeLSB]
[;, mask, =, mask, >, >, scale, ;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long]
[=, mask, >, >, scale, ;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long, l, )]
[;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long, l, ), {, long, ll, =, l]
[>, >, scale, ;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long, l, ), {, long]
[;, }, return, msb, ;, }, private, static, int, computeLSB, (, final, long, l, ), {, long, ll, =, l]
[;, }, private, static, int, computeLSB, (, final, long, l, ), {, long, ll, =, l, ;, long, mask, =]
[;, long, mask, =, 0xffffffff00000000L, ;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=]
[;, int, scale, =, 32, ;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (]
[;, int, lsb, =, 0, ;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, )]
[;, while, (, scale, !=, 0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb]
[), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll]
[!=, 0, ), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll]
[), {, if, (, (, ll, &, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll]
[), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1]
[==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >]
[), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale]
[&, mask, ), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale]
[), ==, ll, ), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale]
[), {, lsb, |=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1]
[|=, scale, ;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =]
[;, ll, =, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >]
[=, ll, >, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale]
[;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;]
[>, >, scale, ;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }]
[;, }, scale, =, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;]
[=, scale, >, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;, }, private, int]
[;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i]
[>, >, 1, ;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;, }, private, int, getBit, (]
[;, mask, =, mask, >, >, scale, ;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i]
[=, mask, >, >, scale, ;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i, ,, final]
[;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i, ,, final, int, k, ), {, final]
[>, >, scale, ;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i, ,, final, int, k]
[;, }, return, lsb, ;, }, private, int, getBit, (, final, int, i, ,, final, int, k, ), {, final]
[;, }, private, int, getBit, (, final, int, i, ,, final, int, k, ), {, final, long, bits, =, Double]
[;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||, (, k]
[., doubleToLongBits, (, components, [, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (]
[), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||, (]
[[, i, ], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e]
[], ), ;, final, int, e, =, exponent, (, bits, ), ;, if, (, (, k, <, e, ), ||]
[;, if, (, (, k, <, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;, }]
[), ;, if, (, (, k, <, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;]
[), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, )]
[||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {]
[), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, )]
[<, e, ), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==]
[), ||, (, k, >, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, )]
[), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, )]
[), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits]
[>, offset, ), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign]
[), ), {, return, 0, ;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits]
[;, }, else, if, (, k, ==, offset, ), {, return, (, sign, (, bits, ), ==, 0L, ), ?]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (]
[==, offset, ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (]
[;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (, sign, (, bits, )]
[?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (]
[), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return]
[==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), )]
[), ==, 0L, ), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, )]
[), ?, 1, :, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return]
[:, 0, ;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (, sign, (]
[;, }, else, if, (, k, >, (, e, +, 52, ), ), {, return, (, sign, (, bits, )]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final]
[>, (, e, +, 52, ), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :]
[), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final]
[), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {]
[+, 52, ), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }]
[), ), {, return, (, sign, (, bits, ), ==, 0L, ), ?, 0, :, 1, ;, }, else, {]
[;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits]
[?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, )]
[), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L]
[==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, )]
[), ==, 0L, ), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits]
[), ?, 0, :, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L]
[:, 1, ;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa]
[;, }, else, {, final, long, m, =, (, sign, (, bits, ), ==, 0L, ), ?, mantissa, (, bits]
[;, return, (, int, ), (, (, m, >, >, (, k, -, e, ), ), &, 0x1L, ), ;]
[?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >]
[), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m]
[==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (]
[), ==, 0L, ), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, )]
[), ?, mantissa, (, bits, ), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m]
[:, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >, (, k, -, e]
[), :, -, mantissa, (, bits, ), ;, return, (, int, ), (, (, m, >, >, (, k, -]
[;, return, (, int, ), (, (, m, >, >, (, k, -, e, ), ), &, 0x1L, ), ;]
[;, return, (, int, ), (, (, m, >, >, (, k, -, e, ), ), &, 0x1L, ), ;]
[), ;, return, (, int, ), (, (, m, >, >, (, k, -, e, ), ), &, 0x1L, )]
[;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
[&, 0x1L, ), ;, }, }, }]
[), &, 0x1L, ), ;, }, }, }]
[>, >, (, k, -, e, ), ), &, 0x1L, ), ;, }, }, }]
[), &, 0x1L, ), ;, }, }, }]
[), ), &, 0x1L, ), ;, }, }, }]
[-, e, ), ), &, 0x1L, ), ;, }, }, }]
[), ), &, 0x1L, ), ;, }, }, }]
[), ;, }, }, }]
