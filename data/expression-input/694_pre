[;, import, java, ., util, ., Set, ;, public, class, Writer, {, public, JsonML, processAst, (, Node, root, ), {]
[;, import, java, ., util, ., Set, ;, public, class, Writer, {, public, JsonML, processAst, (, Node, root, ), {]
[util, ., Set, ;, public, class, Writer, {, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (]
[;, public, class, Writer, {, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;]
[;, public, class, Writer, {, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;]
[{, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (]
[{, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (]
[{, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (]
[{, public, JsonML, processAst, (, Node, root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (]
[root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==]
[root, ), {, Preconditions, ., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==]
[., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||]
[., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||]
[., checkNotNull, (, root, ), ;, Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||]
[Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==]
[Preconditions, ., checkArgument, (, root, ., getType, (, ), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==]
[), ==, Token, ., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =]
[., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (]
[., BLOCK, ||, root, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (]
[), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (]
[), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (]
[), ==, Token, ., SCRIPT, ), ;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (]
[;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==]
[;, JsonML, rootElement, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==]
[JsonML, (, TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {]
[TagType, ., BlockStmt, ), ;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (]
[BlockStmt, ), ;, if, (, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,]
[(, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return]
[(, root, ., getType, (, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return]
[(, ), ==, Token, ., SCRIPT, ), {, processNode, (, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (]
[(, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {, Node, child, =]
[(, root, ,, rootElement, ), ;, return, rootElement, ., getChild, (, 0, ), ;, }, else, {, Node, child, =]
[., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (]
[., getChild, (, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (]
[(, 0, ), ;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=]
[;, }, else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {]
[else, {, Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (]
[Node, child, =, root, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,]
[root, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, rootElement, ), ;]
[getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =]
[getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =]
[null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return]
[null, ), {, processNode, (, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return]
[(, child, ,, rootElement, ), ;, child, =, child, ., getNext, (, ), ;, }, return, rootElement, ., getChild, (]
[getChild, (, 0, ), ;, }, }, private, void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (]
[getChild, (, 0, ), ;, }, }, private, void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (]
[void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (, node, ., getType, (, ), ), {, case]
[void, processNode, (, Node, node, ,, JsonML, currentParent, ), {, switch, (, node, ., getType, (, ), ), {, case]
[node, ,, JsonML, currentParent, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., RETURN, :]
[JsonML, currentParent, ), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., RETURN, :, processReturn, (]
[), {, switch, (, node, ., getType, (, ), ), {, case, Token, ., RETURN, :, processReturn, (, node, ,]
[getType, (, ), ), {, case, Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case]
[getType, (, ), ), {, case, Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case]
[{, case, Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :]
[Token, ., RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (]
[RETURN, :, processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,]
[processReturn, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case]
[;, break, ;, case, Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case]
[Token, ., BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :]
[BITOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "|", ), ;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case]
[;, break, ;, case, Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case]
[Token, ., BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :]
[BITXOR, :, processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "^", ), ;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case]
[;, break, ;, case, Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case]
[Token, ., BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :]
[BITAND, :, processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "&", ), ;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case]
[;, break, ;, case, Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case]
[Token, ., EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :]
[EQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "==", ), ;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case]
[Token, ., NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :]
[NE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "!=", ), ;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case]
[;, break, ;, case, Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case]
[Token, ., LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :]
[LT, :, processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "<", ), ;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case]
[Token, ., LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :]
[LE, :, processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "<=", ), ;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case]
[;, break, ;, case, Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case]
[Token, ., GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :]
[GT, :, processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, ">", ), ;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case]
[Token, ., GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :]
[GE, :, processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, ">=", ), ;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case]
[;, break, ;, case, Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case]
[Token, ., LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :]
[LSH, :, processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "<<", ), ;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case]
[;, break, ;, case, Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case]
[Token, ., RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :]
[RSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, ">>", ), ;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case]
[;, break, ;, case, Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case]
[Token, ., URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :]
[URSH, :, processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, ">>>", ), ;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[Token, ., ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :]
[ADD, :, processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[;, break, ;, case, Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[Token, ., SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :]
[SUB, :, processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case]
[;, break, ;, case, Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case]
[Token, ., MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :]
[MUL, :, processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "*", ), ;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case]
[;, break, ;, case, Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case]
[Token, ., DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :]
[DIV, :, processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "/", ), ;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case]
[;, break, ;, case, Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case]
[Token, ., MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :]
[MOD, :, processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,]
[node, ,, currentParent, ,, "%", ), ;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case]
[;, break, ;, case, Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case]
[Token, ., NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :]
[NOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (]
[processUnaryExpr, (, node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,]
[node, ,, currentParent, ,, "!", ), ;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case]
[;, break, ;, case, Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case]
[Token, ., BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :]
[BITNOT, :, processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (]
[processUnaryExpr, (, node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,]
[node, ,, currentParent, ,, "~", ), ;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[;, break, ;, case, Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case]
[Token, ., POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :]
[POS, :, processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (]
[processUnaryExpr, (, node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,]
[node, ,, currentParent, ,, "+", ), ;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[;, break, ;, case, Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case]
[Token, ., NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :]
[NEG, :, processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (]
[processUnaryExpr, (, node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,]
[node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,]
[node, ,, currentParent, ,, "-", ), ;, break, ;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,]
[;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case]
[;, case, Token, ., NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case]
[NEW, :, processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :]
[processNew, (, node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (]
[node, ,, currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,]
[currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., NewExpr, ), ;, break, ;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,]
[;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case]
[;, case, Token, ., DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case]
[DELPROP, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :]
[processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (]
[node, ,, currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,]
[currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., DeleteExpr, ), ;, break, ;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,]
[;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case]
[;, case, Token, ., TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case]
[TYPEOF, :, processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :]
[processOneArgExpr, (, node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (]
[node, ,, currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,]
[currentParent, ,, TagType, ., TypeofExpr, ), ;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case]
[;, break, ;, case, Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case]
[Token, ., GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :]
[GETPROP, :, processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (]
[processMemberExpr, (, node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,]
[node, ,, currentParent, ,, ".", ), ;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case]
[;, break, ;, case, Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case]
[Token, ., GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :]
[GETELEM, :, processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (]
[processMemberExpr, (, node, ,, currentParent, ,, "[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,]
["[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case]
["[]", ), ;, break, ;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NAME, :]
[Token, ., CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (]
[CALL, :, processCall, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case]
[case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case]
[case, Token, ., NAME, :, processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case]
[processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case]
[processName, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case]
[), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case]
[), ;, break, ;, case, Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case]
[Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case]
[Token, ., NUMBER, :, case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case]
[case, Token, ., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :]
[., STRING, :, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (]
[:, case, Token, ., NULL, :, case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,]
[case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
[case, Token, ., FALSE, :, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
[:, case, Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :]
[Token, ., TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (]
[TRUE, :, processLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :]
[Token, ., THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (]
[THIS, :, processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,]
[processThis, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case]
[;, break, ;, case, Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case]
[Token, ., SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :]
[SHEQ, :, processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "===", ), ;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case]
[;, break, ;, case, Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case]
[Token, ., SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :]
[SHNE, :, processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,]
["!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case]
["!==", ), ;, break, ;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THROW, :]
[Token, ., REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (]
[REGEXP, :, processRegExp, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :]
[Token, ., THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (]
[THROW, :, processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,]
[processThrow, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case]
[;, break, ;, case, Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case]
[Token, ., IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :]
[IN, :, processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,]
[node, ,, currentParent, ,, "in", ), ;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case]
[;, break, ;, case, Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case]
[Token, ., INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :]
[INSTANCEOF, :, processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (]
[processBinaryExpr, (, node, ,, currentParent, ,, "instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,]
["instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
["instanceof", ), ;, break, ;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :]
[Token, ., ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (]
[ARRAYLIT, :, processArrayLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., TRY, :]
[Token, ., OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (]
[OBJECTLIT, :, processObjectLiteral, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :]
[Token, ., TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (]
[TRY, :, processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,]
[processTry, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case]
[;, break, ;, case, Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case]
[Token, ., COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :]
[COMMA, :, processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (]
[processBinaryExpr, (, node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, ",", ), ;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case]
[Token, ., ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :]
[ASSIGN, :, processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "=", ), ;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case]
[Token, ., ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :]
[ASSIGN_BITOR, :, processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "|=", ), ;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case]
[Token, ., ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :]
[ASSIGN_BITXOR, :, processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "^=", ), ;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case]
[Token, ., ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :]
[ASSIGN_BITAND, :, processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "&=", ), ;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case]
[Token, ., ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :]
[ASSIGN_LSH, :, processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "<<=", ), ;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case]
[Token, ., ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :]
[ASSIGN_RSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, ">>=", ), ;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case]
[Token, ., ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :]
[ASSIGN_URSH, :, processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, ">>>=", ), ;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case]
[Token, ., ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :]
[ASSIGN_ADD, :, processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "+=", ), ;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case]
[Token, ., ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :]
[ASSIGN_SUB, :, processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "-=", ), ;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case]
[Token, ., ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :]
[ASSIGN_MUL, :, processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "*=", ), ;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case]
[Token, ., ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :]
[ASSIGN_DIV, :, processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (]
[processAssignExpr, (, node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,]
[node, ,, currentParent, ,, "/=", ), ;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case]
[;, break, ;, case, Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case]
[Token, ., ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :]
[ASSIGN_MOD, :, processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (]
[processAssignExpr, (, node, ,, currentParent, ,, "%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,]
["%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case]
["%=", ), ;, break, ;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :]
[Token, ., HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (]
[HOOK, :, processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,]
[processHook, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case]
[;, break, ;, case, Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case]
[Token, ., OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :]
[OR, :, processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (]
[processLogicalExpr, (, node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,]
[node, ,, currentParent, ,, "||", ), ;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case]
[;, break, ;, case, Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case]
[Token, ., AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :]
[AND, :, processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (]
[processLogicalExpr, (, node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,]
[node, ,, currentParent, ,, "&&", ), ;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case]
[;, break, ;, case, Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case]
[Token, ., INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :]
[INC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (]
[processIncrDecrExpr, (, node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,]
[node, ,, currentParent, ,, "++", ), ;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case]
[;, break, ;, case, Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case]
[Token, ., DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :]
[DEC, :, processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (]
[processIncrDecrExpr, (, node, ,, currentParent, ,, "--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,]
["--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case]
["--", ), ;, break, ;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IF, :]
[Token, ., FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (]
[FUNCTION, :, processFunction, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :]
[Token, ., IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (]
[IF, :, processIf, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :]
[Token, ., SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (]
[SWITCH, :, processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,]
[processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,]
[processSwitch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,]
[;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case]
[;, case, Token, ., CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case]
[CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :]
[processCase, (, node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (]
[node, ,, currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,]
[currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., Case, ), ;, break, ;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,]
[;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case]
[;, case, Token, ., DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case]
[DEFAULT_CASE, :, processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :]
[processCase, (, node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (]
[node, ,, currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,]
[currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., DefaultCase, ), ;, break, ;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,]
[;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case]
[;, case, Token, ., WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case]
[WHILE, :, processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :]
[processLoop, (, node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (]
[node, ,, currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,]
[currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., WhileStmt, ), ;, break, ;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,]
[;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case]
[;, case, Token, ., DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case]
[DO, :, processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :]
[processLoop, (, node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (]
[node, ,, currentParent, ,, TagType, ., DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,]
[DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case]
[DoWhileStmt, ), ;, break, ;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :]
[Token, ., FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (]
[FOR, :, processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,]
[processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,]
[processForLoop, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,]
[;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case]
[;, case, Token, ., BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case]
[BREAK, :, processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :]
[processJmp, (, node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (]
[node, ,, currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,]
[currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,]
[currentParent, ,, TagType, ., BreakStmt, ), ;, break, ;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,]
[;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case]
[;, case, Token, ., CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case]
[CONTINUE, :, processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :]
[processJmp, (, node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (]
[node, ,, currentParent, ,, TagType, ., ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,]
[ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case]
[ContinueStmt, ), ;, break, ;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., WITH, :]
[Token, ., VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (]
[VAR, :, processVar, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :]
[Token, ., WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (]
[WITH, :, processWith, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :]
[Token, ., CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (]
[CATCH, :, processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,]
[processCatch, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,]
[;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case]
[;, break, ;, case, Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case]
[Token, ., VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :]
[VOID, :, processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (]
[processUnaryExpr, (, node, ,, currentParent, ,, "void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,]
["void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case]
["void", ), ;, break, ;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :]
[Token, ., EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (]
[EMPTY, :, processEmpty, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :]
[Token, ., BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (]
[BLOCK, :, processBlock, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[Token, ., LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (]
[LABEL, :, processLabel, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,]
[currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case]
[currentParent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case]
[;, case, Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :]
[Token, ., EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (]
[EXPR_RESULT, :, processExprResult, (, node, ,, currentParent, ), ;, break, ;, case, Token, ., SCRIPT, :, processScript, (, node, ,]
[), ;, break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {]
[break, ;, }, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (]
[}, }, private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,]
[private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[private, void, processAssignExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., AssignExpr, ,]
[AssignExpr, ,, op, ), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ArrayExpr, ), ;]
[processArrayLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ArrayExpr, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ArrayExpr, ), ;, currentParent, ., appendChild, (]
[JsonML, (, TagType, ., ArrayExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., ArrayExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., ArrayExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[=, node, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[(, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,]
[,, element, ), ;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {]
[), ;, }, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (]
[}, }, private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,]
[private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[private, void, processBinaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[Node, node, ,, JsonML, currentParent, ,, String, op, ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., BinaryExpr, ,]
[BinaryExpr, ,, op, ), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processBlock, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (]
[Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, currentParent, !=]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, currentParent, !=, null, ), {]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, currentParent, !=, null, ), {]
[=, new, JsonML, (, TagType, ., BlockStmt, ), ;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (]
[TagType, ., BlockStmt, ), ;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }]
[BlockStmt, ), ;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (]
[;, if, (, currentParent, !=, null, ), {, currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,]
[currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :]
[currentParent, ., appendChild, (, element, ), ;, }, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :]
[}, processDirectives, (, node, ,, element, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {]
[(, node, ,, element, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (]
[,, element, ), ;, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (, child, ,]
[;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node, >, it, =]
[;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node, >, it, =]
[;, }, }, private, void, processCall, (, Node, node, ,, JsonML, currentParent, ), {, Iterator, <, Node, >, it, =]
[{, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, Node, child, =]
[{, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, Node, child, =]
[), ., iterator, (, ), ;, Node, child, =, it, ., next, (, ), ;, JsonML, element, ;, switch, (]
[), ., iterator, (, ), ;, Node, child, =, it, ., next, (, ), ;, JsonML, element, ;, switch, (]
[=, it, ., next, (, ), ;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case]
[=, it, ., next, (, ), ;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case]
[), ;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[), ;, JsonML, element, ;, switch, (, child, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case]
[;, switch, (, child, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :]
[(, child, ., getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =]
[getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (]
[getType, (, ), ), {, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (]
[case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;]
[case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;]
[:, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (]
[:, case, Token, ., GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (]
[GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[GETELEM, :, element, =, new, JsonML, (, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[(, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==]
[(, TagType, ., InvokeExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==]
[), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?]
[element, ., setAttribute, (, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :]
[(, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;]
[(, TagAttr, ., OP, ,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;]
[,, child, ., getType, (, ), ==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (]
[==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =]
[==, Token, ., GETPROP, ?, ".", :, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =]
[:, "[]", ), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (]
[currentParent, ., appendChild, (, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,]
[(, element, ), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;]
[), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (]
[), ;, Node, grandchild, =, child, ., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (]
[., getFirstChild, (, ), ;, processNode, (, grandchild, ,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,]
[(, grandchild, ,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case]
[(, grandchild, ,, element, ), ;, processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case]
[processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :, if, (]
[processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :, if, (]
[processNode, (, grandchild, ., getNext, (, ), ,, element, ), ;, break, ;, case, Token, ., NAME, :, if, (]
[element, ), ;, break, ;, case, Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals, (]
[;, case, Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {]
[Token, ., NAME, :, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {, element, =]
[:, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {, element, =, new, JsonML, (]
[:, if, (, child, ., getString, (, ), ., equals, (, "eval", ), ), {, element, =, new, JsonML, (]
[., equals, (, "eval", ), ), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {]
[(, "eval", ), ), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =]
[), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (]
[), {, element, =, new, JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (]
[JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;]
[JsonML, (, TagType, ., EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;]
[EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (]
[EvalExpr, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (]
[else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,]
[else, {, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,]
[TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;]
[IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =]
[element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (]
[element, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (]
[TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,]
[child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }]
[child, ., getString, (, ), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }]
[), ), ;, element, =, new, JsonML, (, TagType, ., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (]
[(, TagType, ., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :]
[., CallExpr, ,, element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =]
[element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (]
[element, ), ;, }, currentParent, ., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (]
[., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;]
[., appendChild, (, element, ), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;]
[), ;, break, ;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (]
[;, default, :, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (, element, ), ;]
[:, element, =, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[=, new, JsonML, (, TagType, ., CallExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (]
[;, currentParent, ., appendChild, (, element, ), ;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (]
[;, processNode, (, child, ,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {]
[(, child, ,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[(, child, ,, element, ), ;, break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[break, ;, }, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,]
[;, }, }, private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[private, void, processCase, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (]
[{, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[{, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {]
[Node, child, =, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (]
[=, node, ., getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,]
[getFirstChild, (, ), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,, element, ), ;]
[), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,, element, ), ;, child, =]
[), ;, if, (, type, ==, TagType, ., Case, ), {, processNode, (, child, ,, element, ), ;, child, =]
[., Case, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }]
[., Case, ), {, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }]
[processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;]
[,, element, ), ;, child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;]
[child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (]
[child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (]
[child, =, child, ., getNext, (, ), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (]
[), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==]
[), ;, }, Preconditions, ., checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==]
[checkNotNull, (, child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;]
[child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =]
[child, ), ;, Preconditions, ., checkState, (, child, ., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =]
[., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (]
[., getType, (, ), ==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (]
[(, ), ==, Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=]
[Token, ., BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {]
[BLOCK, ), ;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (]
[;, child, =, child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,]
[child, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;]
[getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, child, =]
[getFirstChild, (, ), ;, while, (, child, !=, null, ), {, processNode, (, child, ,, element, ), ;, child, =]
[getNext, (, ), ;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, }, }, private, void, processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CatchClause, ), ;]
[processCatch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CatchClause, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CatchClause, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., CatchClause, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., CatchClause, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =]
[appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (]
[appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (]
[Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[Node, child, =, node, ., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (]
[., getFirstChild, (, ), ;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (]
[;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,]
[;, JsonML, patt, =, new, JsonML, (, TagType, ., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,]
[TagType, ., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;]
[TagType, ., IdPatt, ), ;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;]
[;, patt, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (]
[setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;]
[TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =]
[TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =]
[getString, (, ), ), ;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;]
[), ), ;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (]
[;, element, ., appendChild, (, patt, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[(, child, ,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (]
[(, child, ,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (]
[(, child, ,, element, ), ;, }, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (]
[}, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (, ), ==]
[}, private, void, processEmpty, (, Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (, ), ==]
[Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr, ), {]
[Node, node, ,, JsonML, currentParent, ), {, if, (, currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr, ), {]
[currentParent, ), {, if, (, currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr, ), {, currentParent, ., appendChild, (]
[if, (, currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (]
[if, (, currentParent, ., getType, (, ), ==, TagType, ., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (]
[., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {]
[., ArrayExpr, ), {, currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {]
[currentParent, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, ., appendChild, (]
[(, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (]
[(, new, JsonML, (, TagType, ., Empty, ), ), ;, }, else, {, currentParent, ., appendChild, (, new, JsonML, (]
[(, TagType, ., EmptyStmt, ), ), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {]
[., EmptyStmt, ), ), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (]
[., EmptyStmt, ), ), ;, }, }, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (]
[}, private, void, processExprResult, (, Node, node, ,, JsonML, currentParent, ), {, processNode, (, node, ., getFirstChild, (, ), ,]
[(, ), ,, currentParent, ), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (]
[(, ), ,, currentParent, ), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (]
[), ;, }, private, void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (]
[void, processForLoop, (, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node, ), ), {]
[(, Node, node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node, ), ), {, processLoop, (]
[node, ,, JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node, ), ), {, processLoop, (, node, ,]
[JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node, ), ), {, processLoop, (, node, ,, currentParent, ,]
[JsonML, currentParent, ), {, if, (, NodeUtil, ., isForIn, (, node, ), ), {, processLoop, (, node, ,, currentParent, ,]
[isForIn, (, node, ), ), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {]
[node, ), ), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (]
[), {, processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,]
[processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,, currentParent, ,]
[processLoop, (, node, ,, currentParent, ,, TagType, ., ForInStmt, ), ;, }, else, {, processLoop, (, node, ,, currentParent, ,]
[), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (]
[), ;, }, }, private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (]
[private, void, processFunction, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (, NodeUtil, ., isFunctionDeclaration, (]
[Node, node, ,, JsonML, currentParent, ), {, JsonML, element, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {]
[,, JsonML, currentParent, ), {, JsonML, element, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, element, =]
[), {, JsonML, element, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, element, =, new, JsonML, (]
[), {, JsonML, element, ;, if, (, NodeUtil, ., isFunctionDeclaration, (, node, ), ), {, element, =, new, JsonML, (]
[., isFunctionDeclaration, (, node, ), ), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {]
[(, node, ), ), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =]
[), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (]
[), {, element, =, new, JsonML, (, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (]
[(, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }]
[(, TagType, ., FunctionDecl, ), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }]
[), ;, }, else, {, element, =, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (]
[=, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[=, new, JsonML, (, TagType, ., FunctionExpr, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[}, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =]
[}, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =]
[Node, child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if, (]
[child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if, (, !]
[child, =, node, ., getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if, (, !]
[getFirstChild, (, ), ;, String, name, =, child, ., getString, (, ), ;, if, (, !, name, ., equals, (]
[child, ., getString, (, ), ;, if, (, !, name, ., equals, (, "", ), ), {, JsonML, nameElement, =]
[(, ), ;, if, (, !, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (]
[(, ), ;, if, (, !, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (]
[!, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[!, name, ., equals, (, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[(, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (]
[(, "", ), ), {, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (]
[{, JsonML, nameElement, =, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,]
[=, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;]
[=, new, JsonML, (, TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;]
[TagType, ., IdPatt, ), ;, nameElement, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (]
[., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {]
[., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {]
[., NAME, ,, name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (]
[name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (]
[name, ), ;, element, ., appendChild, (, nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (]
[nameElement, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[JsonML, (, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =]
[., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (]
[., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (]
[}, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;]
[}, child, =, child, ., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;]
[., getNext, (, ), ;, JsonML, params, =, new, JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (]
[JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., ParamDecl, ), ;, element, ., appendChild, (, params, ), ;, Iterator, <, Node, >, it, =]
[), ;, Iterator, <, Node, >, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (]
[children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, JsonML, param, =]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (]
[., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =]
[., hasNext, (, ), ), {, JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =]
[JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;]
[JsonML, param, =, new, JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;]
[JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (]
[JsonML, (, TagType, ., IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (]
[IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,]
[IdPatt, ), ;, Node, nameNode, =, it, ., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,]
[., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;]
[., next, (, ), ;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;]
[;, param, ., setAttribute, (, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (]
[(, TagAttr, ., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }]
[., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =]
[., NAME, ,, nameNode, ., getString, (, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =]
[(, ), ), ;, params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;]
[), ;, params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (]
[params, ., appendChild, (, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,]
[(, param, ), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;]
[), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =]
[), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =]
[), ;, }, child, =, child, ., getNext, (, ), ;, processDirectives, (, child, ,, element, ), ;, it, =]
[(, child, ,, element, ), ;, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (]
[(, child, ,, element, ), ;, it, =, child, ., children, (, ), ., iterator, (, ), ;, while, (]
[=, child, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[(, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,]
[,, element, ), ;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, }, }, private, void, processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ConditionalExpr, ), ;]
[processHook, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ConditionalExpr, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ConditionalExpr, ), ;, currentParent, ., appendChild, (]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., ConditionalExpr, ), ;, currentParent, ., appendChild, (, element, ), ;]
[JsonML, element, =, new, JsonML, (, TagType, ., ConditionalExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (]
[=, new, JsonML, (, TagType, ., ConditionalExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,]
[node, ,, element, ), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., IfStmt, ), ;]
[processIf, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., IfStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., IfStmt, ), ;, currentParent, ., appendChild, (]
[JsonML, (, TagType, ., IfStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., IfStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., IfStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[=, node, ., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[., children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (]
[(, ), ;, while, (, it, ., hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,]
[hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, int, childCount, =]
[hasNext, (, ), ), {, processNode, (, it, ., next, (, ), ,, element, ), ;, }, int, childCount, =]
[(, it, ., next, (, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;]
[(, it, ., next, (, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;]
[(, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (]
[(, ), ,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (]
[,, element, ), ;, }, int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=]
[int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (]
[int, childCount, =, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (]
[=, node, ., getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <]
[getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {]
[getChildCount, (, ), ;, Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {]
[Preconditions, ., checkState, (, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (]
[(, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (]
[(, childCount, >=, 2, ), ;, if, (, childCount, <, 3, ), {, element, ., appendChild, (, new, JsonML, (]
[;, }, }, private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[private, void, processIncrDecrExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CountExpr, ), ;]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CountExpr, ), ;]
[,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., CountExpr, ), ;, currentParent, ., appendChild, (]
[JsonML, element, =, new, JsonML, (, TagType, ., CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (]
[JsonML, element, =, new, JsonML, (, TagType, ., CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (]
[JsonML, (, TagType, ., CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (]
[CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {]
[CountExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {]
[., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (]
[., appendChild, (, element, ), ;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (]
[), ;, if, (, op, ., equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,]
[equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {]
[equals, (, "++", ), ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {]
[), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (]
[), {, element, ., setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (]
[setAttribute, (, TagAttr, ., OP, ,, "++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,]
["++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (]
["++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (]
["++", ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (]
[else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (]
[else, {, element, ., setAttribute, (, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (]
[(, TagAttr, ., OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==]
[OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {]
[OP, ,, "--", ), ;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {]
[;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (]
[;, }, if, (, node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (]
[node, ., getIntProp, (, Node, ., INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,]
[INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {]
[INCRDECR_PROP, ), ==, 1, ), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {]
[), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (]
[), {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (]
[setAttribute, (, TagAttr, ., IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,]
[IS_PREFIX, ,, false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }]
[false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (]
[false, ), ;, }, else, {, element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (]
[element, ., setAttribute, (, TagAttr, ., IS_PREFIX, ,, true, ), ;, }, processNode, (, node, ., getFirstChild, (, ), ,]
[), ;, }, private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[private, void, processJmp, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (]
[{, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[{, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=]
[(, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {]
[(, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {]
[Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute, (]
[Node, child, =, node, ., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute, (]
[., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,]
[., getFirstChild, (, ), ;, if, (, child, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., LABEL, ,]
[(, ), ), ;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, }, }, private, void, processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., LabelledStmt, ), ;]
[processLabel, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., LabelledStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., LabelledStmt, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., LabelledStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., LabelledStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., LabelledStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[., LabelledStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (]
[element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,]
[element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,]
[., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;]
[(, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, child, =]
[(, ), ;, element, ., setAttribute, (, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, child, =]
[(, TagAttr, ., LABEL, ,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;]
[., LABEL, ,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;, processNode, (]
[,, child, ., getString, (, ), ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[child, ,, element, ), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., LiteralExpr, ), ;, switch, (]
[Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., LiteralExpr, ), ;, switch, (]
[element, =, new, JsonML, (, TagType, ., LiteralExpr, ), ;, switch, (, node, ., getType, (, ), ), {, case]
[element, =, new, JsonML, (, TagType, ., LiteralExpr, ), ;, switch, (, node, ., getType, (, ), ), {, case]
[(, TagType, ., LiteralExpr, ), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :]
[(, TagType, ., LiteralExpr, ), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :]
[), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (]
[), ;, switch, (, node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (]
[node, ., getType, (, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,]
[(, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;]
[(, ), ), {, case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;]
[case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (]
[case, Token, ., NUMBER, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "number", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case]
[setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :]
[setAttribute, (, TagAttr, ., VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :]
[VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (]
[VALUE, ,, node, ., getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (]
[getDouble, (, ), ), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,]
[), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;]
[), ;, break, ;, case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;]
[case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (]
[case, Token, ., STRING, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "string", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case]
[setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :]
[setAttribute, (, TagAttr, ., VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :]
[VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (]
[VALUE, ,, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (]
[getString, (, ), ), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,]
[), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;]
[), ;, break, ;, case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;]
[case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (]
[case, Token, ., NULL, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case]
[., TYPE, ,, "null", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :]
[setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (]
[setAttribute, (, TagAttr, ., VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (]
[VALUE, ,, null, ), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,]
[), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[), ;, break, ;, case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (]
[case, Token, ., TRUE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case]
[., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :]
[), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :]
[setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (]
[setAttribute, (, TagAttr, ., VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (]
[VALUE, ,, true, ), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,]
[), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[), ;, break, ;, case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;]
[case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (]
[case, Token, ., FALSE, :, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (]
[:, element, ., setAttribute, (, TagAttr, ., TYPE, ,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[,, "boolean", ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw]
[;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[(, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }]
[(, TagAttr, ., VALUE, ,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }]
[,, false, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, currentParent, ., appendChild, (]
[element, ), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (]
[element, ), ;, }, private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (]
[private, void, processLogicalExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (, op, ., equals, (]
[Node, node, ,, JsonML, currentParent, ,, String, op, ), {, if, (, op, ., equals, (, "||", ), ), {]
[,, JsonML, currentParent, ,, String, op, ), {, if, (, op, ., equals, (, "||", ), ), {, processTwoArgExpr, (]
[currentParent, ,, String, op, ), {, if, (, op, ., equals, (, "||", ), ), {, processTwoArgExpr, (, node, ,]
[String, op, ), {, if, (, op, ., equals, (, "||", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[String, op, ), {, if, (, op, ., equals, (, "||", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[(, "||", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (]
[(, "||", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (]
[{, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (]
[,, currentParent, ,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {]
[,, TagType, ., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (]
[., LogicalOrExpr, ), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,]
[), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[), ;, }, else, if, (, op, ., endsWith, (, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[(, "&&", ), ), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw]
[), {, processTwoArgExpr, (, node, ,, currentParent, ,, TagType, ., LogicalAndExpr, ), ;, }, else, {, throw, new, IllegalArgumentException, (]
[;, }, }, private, void, processLoop, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[private, void, processLoop, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (]
[TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;]
[), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (]
[JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,]
[), ;, }, private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[private, void, processMemberExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., MemberExpr, ), ;]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., MemberExpr, ), ;]
[,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., MemberExpr, ), ;, element, ., setAttribute, (]
[,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., MemberExpr, ), ;, element, ., setAttribute, (]
[{, JsonML, element, =, new, JsonML, (, TagType, ., MemberExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[=, new, JsonML, (, TagType, ., MemberExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;]
[=, new, JsonML, (, TagType, ., MemberExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;]
[TagType, ., MemberExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (]
[., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,]
[(, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,]
[., getNext, (, ), ,, element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {]
[., getNext, (, ), ,, element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {]
[,, element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (]
[element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (, !]
[element, ), ;, }, private, void, processName, (, Node, node, ,, JsonML, currentParent, ), {, Preconditions, ., checkState, (, !]
[,, JsonML, currentParent, ), {, Preconditions, ., checkState, (, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =]
[), {, Preconditions, ., checkState, (, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (]
[), {, Preconditions, ., checkState, (, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (]
[(, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;]
[(, !, node, ., hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;]
[hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (]
[hasChildren, (, ), ), ;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (]
[;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,]
[;, JsonML, element, =, new, JsonML, (, TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,]
[TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;]
[TagType, ., IdExpr, ), ;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;]
[;, element, ., setAttribute, (, TagAttr, ., NAME, ,, node, ., getString, (, ), ), ;, currentParent, ., appendChild, (]
[), ;, }, private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[private, void, processNew, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (]
[TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;]
[), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (]
[JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processChildren, (, node, ,]
[node, ,, element, ), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ObjectExpr, ), ;]
[processObjectLiteral, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ObjectExpr, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ObjectExpr, ), ;, currentParent, ., appendChild, (]
[new, JsonML, (, TagType, ., ObjectExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, for, (, Node, key, :]
[new, JsonML, (, TagType, ., ObjectExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, for, (, Node, key, :]
[appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (, ), ), {, Node, value, =]
[appendChild, (, element, ), ;, for, (, Node, key, :, node, ., children, (, ), ), {, Node, value, =]
[), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (]
[), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (]
[getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (, key, ., getType, (, ), ), {, case]
[getFirstChild, (, ), ;, JsonML, item, ;, Object, name, ;, switch, (, key, ., getType, (, ), ), {, case]
[JsonML, item, ;, Object, name, ;, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :]
[;, Object, name, ;, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, item, =]
[;, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (]
[;, switch, (, key, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (]
[getType, (, ), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, ), ;]
[), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, ), ;, name, =]
[), ), {, case, Token, ., STRING_KEY, :, item, =, new, JsonML, (, TagType, ., DataProp, ), ;, name, =]
[=, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[=, new, JsonML, (, TagType, ., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[TagType, ., DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :]
[DataProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =]
[name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (]
[name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (]
[(, ), ;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;]
[;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =]
[;, break, ;, case, Token, ., GETTER_DEF, :, item, =, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =]
[=, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[=, new, JsonML, (, TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case]
[TagType, ., GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :]
[GetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =]
[name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (]
[name, =, key, ., getString, (, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (]
[(, ), ;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;]
[;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =]
[;, break, ;, case, Token, ., SETTER_DEF, :, item, =, new, JsonML, (, TagType, ., SetterProp, ), ;, name, =]
[JsonML, (, TagType, ., SetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, default, :, throw]
[., SetterProp, ), ;, name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }]
[name, =, key, ., getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }]
[getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (]
[getString, (, ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (]
[break, ;, default, :, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,]
[:, throw, new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;]
[new, IllegalArgumentException, (, "Illegal type of node.", ), ;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (]
[(, "Illegal type of node.", ), ;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,]
[;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;]
[;, }, item, ., setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;]
[setAttribute, (, TagAttr, ., NAME, ,, name, ), ;, processNode, (, value, ,, item, ), ;, element, ., appendChild, (]
[(, item, ), ;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, }, }, private, void, processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., RegExpExpr, ), ;]
[processRegExp, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., RegExpExpr, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., RegExpExpr, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., RegExpExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., RegExpExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., RegExpExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[., RegExpExpr, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (]
[element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,]
[element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,]
[), ;, element, ., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =]
[element, ., setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, "", ;]
[setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, "", ;, child, =]
[setAttribute, (, TagAttr, ., BODY, ,, child, ., getString, (, ), ), ;, String, flags, =, "", ;, child, =]
[getString, (, ), ), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (]
[getString, (, ), ), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (]
[), ), ;, String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=]
[String, flags, =, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {]
[=, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =]
[=, "", ;, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =]
[getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;, }]
[getNext, (, ), ;, if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;, }]
[if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (]
[if, (, child, !=, null, ), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (]
[null, ), {, flags, =, child, ., getString, (, ), ;, }, element, ., setAttribute, (, TagAttr, ., FLAGS, ,]
[FLAGS, ,, flags, ), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., SwitchStmt, ), ;]
[processSwitch, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., SwitchStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., SwitchStmt, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., SwitchStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., SwitchStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., SwitchStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,]
[child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =]
[child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =]
[), ;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;]
[), ;, processNode, (, child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;]
[processNode, (, child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=]
[child, ,, element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;]
[element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;, c, =]
[element, ), ;, for, (, Node, c, =, child, ., getNext, (, ), ;, c, !=, null, ;, c, =]
[=, child, ., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getNext, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, processNode, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, processNode, (, c, ,]
[processNode, (, c, ,, element, ), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {]
[processNode, (, c, ,, element, ), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {]
[element, ), ;, }, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild, (]
[}, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild, (, new, JsonML, (]
[}, }, private, void, processThis, (, Node, node, ,, JsonML, currentParent, ), {, currentParent, ., appendChild, (, new, JsonML, (]
[., ThisExpr, ), ), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;]
[processThrow, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;, currentParent, ., appendChild, (]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;, currentParent, ., appendChild, (, element, ), ;]
[JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[JsonML, element, =, new, JsonML, (, TagType, ., ThrowStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[TagType, ., ThrowStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,]
[), ,, element, ), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., TryStmt, ), ;]
[processTry, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., TryStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., TryStmt, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., TryStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., TryStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., TryStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,]
[(, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[(, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, if, (]
[(, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, if, (]
[element, ), ;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {]
[;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (]
[;, child, =, child, ., getNext, (, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (]
[(, ), ;, if, (, child, ., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (, ), ,]
[., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {]
[., hasChildren, (, ), ), {, processNode, (, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {]
[), {, processNode, (, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {, element, ., appendChild, (]
[(, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (]
[(, child, ., getFirstChild, (, ), ,, element, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (]
[element, ), ;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[;, }, else, {, element, ., appendChild, (, new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =]
[new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (]
[new, JsonML, (, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (]
[(, TagType, ., Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=]
[Empty, ), ), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {]
[), ;, }, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (]
[}, child, =, child, ., getNext, (, ), ;, if, (, child, !=, null, ), {, processNode, (, child, ,]
[,, element, ), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {]
[), ;, }, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (]
[}, }, private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (, node, ,]
[private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (, node, ,, currentParent, ,]
[processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, processTwoArgExpr, (, node, ,, currentParent, ,, type, ,]
[private, void, processTwoArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,, String, op, ), {, JsonML, element, =]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[currentParent, ,, TagType, type, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, if, (]
[currentParent, ,, TagType, type, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, if, (]
[TagType, type, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, if, (, op, !=]
[String, op, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, if, (, op, !=, null, ), {]
[String, op, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, if, (, op, !=, null, ), {]
[JsonML, element, =, new, JsonML, (, type, ), ;, if, (, op, !=, null, ), {, element, ., setAttribute, (]
[JsonML, element, =, new, JsonML, (, type, ), ;, if, (, op, !=, null, ), {, element, ., setAttribute, (]
[JsonML, (, type, ), ;, if, (, op, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,]
[;, if, (, op, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }]
[;, if, (, op, !=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }]
[!=, null, ), {, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (]
[{, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;]
[{, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;]
[(, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (]
[(, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (]
[(, TagAttr, ., OP, ,, op, ), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (]
[), ;, }, currentParent, ., appendChild, (, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==]
[(, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =]
[(, element, ), ;, Preconditions, ., checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =]
[checkState, (, node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[node, ., getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[getChildCount, (, ), ==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,]
[==, 2, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, processNode, (, child, ., getNext, (, ), ,]
[), ;, }, private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =]
[private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[private, void, processUnaryExpr, (, Node, node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., UnaryExpr, ), ;]
[node, ,, JsonML, currentParent, ,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., UnaryExpr, ), ;]
[,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (]
[,, String, op, ), {, JsonML, element, =, new, JsonML, (, TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (]
[{, JsonML, element, =, new, JsonML, (, TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,]
[=, new, JsonML, (, TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;]
[=, new, JsonML, (, TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;]
[TagType, ., UnaryExpr, ), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (]
[), ;, element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;]
[element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[element, ., setAttribute, (, TagAttr, ., OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[OP, ,, op, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,]
[), ,, element, ), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., VarDecl, ), ;]
[processVar, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., VarDecl, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., VarDecl, ), ;, currentParent, ., appendChild, (]
[JsonML, (, TagType, ., VarDecl, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., VarDecl, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[JsonML, (, TagType, ., VarDecl, ), ;, currentParent, ., appendChild, (, element, ), ;, Iterator, <, Node, >, it, =]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[), ;, Iterator, <, Node, >, it, =, node, ., children, (, ), ., iterator, (, ), ;, while, (]
[children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, child, =]
[children, (, ), ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, child, =]
[(, it, ., hasNext, (, ), ), {, Node, child, =, it, ., next, (, ), ;, JsonML, id, =]
[hasNext, (, ), ), {, Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML, (]
[hasNext, (, ), ), {, Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML, (]
[Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[Node, child, =, it, ., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;]
[., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (]
[., next, (, ), ;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (]
[;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,]
[;, JsonML, id, =, new, JsonML, (, TagType, ., IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,]
[IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if, (]
[IdPatt, ), ;, id, ., setAttribute, (, TagAttr, ., NAME, ,, child, ., getString, (, ), ), ;, if, (]
[,, child, ., getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =]
[getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (]
[getString, (, ), ), ;, if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (]
[if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;]
[if, (, child, ., hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;]
[hasChildren, (, ), ), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild, (]
[), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;]
[), {, JsonML, patt, =, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;]
[=, new, JsonML, (, TagType, ., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (]
[(, TagType, ., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;]
[., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (]
[., InitPatt, ), ;, element, ., appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (]
[appendChild, (, patt, ), ;, patt, ., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,]
[., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {]
[., appendChild, (, id, ), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {]
[), ;, processNode, (, child, ., getFirstChild, (, ), ,, patt, ), ;, }, else, {, element, ., appendChild, (]
[id, ), ;, }, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =]
[}, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[}, }, }, private, void, processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ReturnStmt, ), ;]
[processReturn, (, Node, currentNode, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ReturnStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., ReturnStmt, ), ;, currentParent, ., appendChild, (]
[JsonML, element, =, new, JsonML, (, TagType, ., ReturnStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (]
[JsonML, element, =, new, JsonML, (, TagType, ., ReturnStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (]
[., ReturnStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {]
[), ;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (]
[element, ), ;, if, (, currentNode, ., hasChildren, (, ), ), {, processNode, (, currentNode, ., getFirstChild, (, ), ,]
[,, element, ), ;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[;, }, }, private, void, processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., Program, ), ;]
[processScript, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., Program, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., Program, ), ;, currentParent, ., appendChild, (]
[), {, JsonML, element, =, new, JsonML, (, TagType, ., Program, ), ;, currentParent, ., appendChild, (, element, ), ;]
[JsonML, element, =, new, JsonML, (, TagType, ., Program, ), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (]
[=, new, JsonML, (, TagType, ., Program, ), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,]
[(, TagType, ., Program, ), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;]
[., Program, ), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (]
[), ;, currentParent, ., appendChild, (, element, ), ;, processDirectives, (, node, ,, element, ), ;, processChildren, (, node, ,]
[node, ,, element, ), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =]
[), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[), ;, }, private, void, processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (]
[processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., WithStmt, ), ;]
[processWith, (, Node, node, ,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., WithStmt, ), ;]
[,, JsonML, currentParent, ), {, JsonML, element, =, new, JsonML, (, TagType, ., WithStmt, ), ;, currentParent, ., appendChild, (]
[element, =, new, JsonML, (, TagType, ., WithStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[element, =, new, JsonML, (, TagType, ., WithStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =]
[., WithStmt, ), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;]
[), ;, currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (]
[currentParent, ., appendChild, (, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,]
[(, element, ), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[), ;, Node, child, =, node, ., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =]
[., getFirstChild, (, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;]
[(, ), ;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (]
[;, processNode, (, child, ,, element, ), ;, child, =, child, ., getNext, (, ), ;, processNode, (, child, ,]
[element, ), ;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child, :]
[element, ), ;, }, private, void, processChildren, (, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child, :]
[(, Node, node, ,, JsonML, currentParent, ), {, for, (, Node, child, :, node, ., children, (, ), ), {]
[node, ,, JsonML, currentParent, ), {, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (]
[JsonML, currentParent, ), {, for, (, Node, child, :, node, ., children, (, ), ), {, processNode, (, child, ,]
[;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives, =]
[;, }, }, private, void, processDirectives, (, Node, node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives, =]
[node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives, =, node, ., getDirectives, (, ), ;, if, (]
[node, ,, JsonML, currentParent, ), {, Set, <, String, >, directives, =, node, ., getDirectives, (, ), ;, if, (]
[JsonML, currentParent, ), {, Set, <, String, >, directives, =, node, ., getDirectives, (, ), ;, if, (, directives, ==]
[., getDirectives, (, ), ;, if, (, directives, ==, null, ), {, return, ;, }, for, (, String, directive, :]
[(, directives, ==, null, ), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =]
[null, ), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (]
[null, ), {, return, ;, }, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (]
[}, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;]
[}, for, (, String, directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;]
[directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (]
[directive, :, directives, ), {, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (]
[{, JsonML, element, =, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,]
[=, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;]
[=, new, JsonML, (, TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;]
[TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (]
[TagType, ., PrologueDecl, ), ;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (]
[;, element, ., setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,]
[setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;]
[setAttribute, (, TagAttr, ., DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;]
[DIRECTIVE, ,, directive, ), ;, element, ., setAttribute, (, TagAttr, ., VALUE, ,, directive, ), ;, currentParent, ., appendChild, (]
[;, }, }, private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =]
[private, void, processOneArgExpr, (, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[(, Node, node, ,, JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;]
[JsonML, currentParent, ,, TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (]
[TagType, type, ), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;]
[), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[), {, JsonML, element, =, new, JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (]
[JsonML, (, type, ), ;, currentParent, ., appendChild, (, element, ), ;, processNode, (, node, ., getFirstChild, (, ), ,]
