[;, private, abstract, static, class, MappedCodePrinter, extends, CodeConsumer, {, final, private, Deque, <, Mapping, >, mappings, ;, final, private, List]
[;, protected, final, int, lineLengthThreshold, ;, protected, int, lineLength, =, 0, ;, protected, int, lineIndex, =, 0, ;, MappedCodePrinter, (]
[), ;, protected, final, int, lineLengthThreshold, ;, protected, int, lineLength, =, 0, ;, protected, int, lineIndex, =, 0, ;, MappedCodePrinter]
[;, protected, int, lineIndex, =, 0, ;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, )]
[;, MappedCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, Preconditions, ., checkState, (, sourceMapDetailLevel]
[;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap]
[., checkState, (, sourceMapDetailLevel, !=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :]
[), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =]
[!=, null, ), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, .]
[), ;, this, ., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =]
[=, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel]
[., lineLengthThreshold, =, lineLengthThreshold, <=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this]
[;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new]
[?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this]
[<=, 0, ?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel]
[?, Integer, ., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this]
[:, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap]
[., MAX_VALUE, :, lineLengthThreshold, ;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings]
[;, this, ., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new]
[=, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >]
[., createSrcMap, =, createSrcMap, ;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <]
[;, this, ., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, )]
[=, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this]
[., sourceMapDetailLevel, =, sourceMapDetailLevel, ;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null]
[;, this, ., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings]
[=, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =, createSrcMap, ?, new]
[., mappings, =, createSrcMap, ?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =, createSrcMap]
[;, this, ., allMappings, =, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }, private, static]
[?, new, ArrayDeque, <, Mapping, >, (, ), :, null, ;, this, ., allMappings, =, createSrcMap, ?, new, ArrayList, <]
[:, null, ;, this, ., allMappings, =, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }]
[;, this, ., allMappings, =, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }, private, static]
[=, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }, private, static, class, Mapping, {, Node]
[., allMappings, =, createSrcMap, ?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }, private, static, class, Mapping]
[;, }, private, static, class, Mapping, {, Node, node, ;, FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void]
[?, new, ArrayList, <, Mapping, >, (, ), :, null, ;, }, private, static, class, Mapping, {, Node, node, ;]
[:, null, ;, }, private, static, class, Mapping, {, Node, node, ;, FilePosition, start, ;, FilePosition, end, ;, }, @]
[;, }, private, static, class, Mapping, {, Node, node, ;, FilePosition, start, ;, FilePosition, end, ;, }, @, Override, void]
[;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=]
[., checkState, (, sourceMapDetailLevel, !=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap]
[), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, )]
[!=, null, ), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName]
[), ;, Preconditions, ., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, )]
[;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0]
[., checkState, (, node, !=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&]
[), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >]
[!=, null, ), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (]
[), ;, if, (, createSrcMap, &&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >]
[), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[&&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex]
[&&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =]
[&&, node, ., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply]
[&&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =]
[!=, null, &&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int]
[., getSourceFileName, (, ), !=, null, &&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node]
[&&, node, ., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =]
[&&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex]
[>, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index]
[., getLineno, (, ), >, 0, &&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (]
[&&, sourceMapDetailLevel, ., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex]
[), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (]
[., apply, (, node, ), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, )]
[), ), {, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState]
[;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =]
[;, Preconditions, ., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, .]
[;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =, new]
[., checkState, (, line, >=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =]
[), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =]
[>=, 0, ), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, .]
[), ;, Mapping, mapping, =, new, Mapping, (, ), ;, mapping, ., node, =, node, ;, mapping, ., start, =]
[;, mapping, ., node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings]
[=, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping]
[., node, =, node, ;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push]
[;, mapping, ., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;]
[=, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;, allMappings, ., add, (]
[., start, =, new, FilePosition, (, line, ,, index, ), ;, mappings, ., push, (, mapping, ), ;, allMappings, .]
[;, mappings, ., push, (, mapping, ), ;, allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void]
[,, index, ), ;, mappings, ., push, (, mapping, ), ;, allMappings, ., add, (, mapping, ), ;, }, }]
[), ;, mappings, ., push, (, mapping, ), ;, allMappings, ., add, (, mapping, ), ;, }, }, @, Override]
[;, allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if]
[., push, (, mapping, ), ;, allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (]
[), ;, allMappings, ., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {]
[;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, ., isEmpty]
[., add, (, mapping, ), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap]
[), ;, }, }, @, Override, void, endSourceMapping, (, Node, node, ), {, if, (, createSrcMap, &&, !, mappings, .]
[), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index]
[&&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, )]
[&&, !, mappings, ., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping]
[&&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, )]
[&&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, )]
[., isEmpty, (, ), &&, mappings, ., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings]
[), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index]
[==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;]
[., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (]
[., peek, (, ), ., node, ==, node, ), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int]
[), {, Mapping, mapping, =, mappings, ., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index]
[;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line]
[., pop, (, ), ;, int, line, =, getCurrentLineIndex, (, ), ;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions]
[;, int, index, =, getCurrentCharIndex, (, ), ;, Preconditions, ., checkState, (, line, >=, 0, ), ;, mapping, ., end]
[;, Preconditions, ., checkState, (, line, >=, 0, ), ;, mapping, ., end, =, new, FilePosition, (, line, ,, index]
[;, mapping, ., end, =, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap, map]
[., checkState, (, line, >=, 0, ), ;, mapping, ., end, =, new, FilePosition, (, line, ,, index, ), ;]
[), ;, mapping, ., end, =, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap]
[>=, 0, ), ;, mapping, ., end, =, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap]
[), ;, mapping, ., end, =, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap]
[=, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (]
[., end, =, new, FilePosition, (, line, ,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap, map, ), {]
[;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping, :]
[,, index, ), ;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (]
[), ;, }, }, void, generateSourceMap, (, SourceMap, map, ), {, if, (, createSrcMap, ), {, for, (, Mapping, mapping]
[), {, for, (, Mapping, mapping, :, allMappings, ), {, map, ., addMapping, (, mapping, ., node, ,, mapping, .]
[), {, map, ., addMapping, (, mapping, ., node, ,, mapping, ., start, ,, mapping, ., end, ), ;, }]
[;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,, boolean, insertion, ), {, if, (, createSrcMap]
[., addMapping, (, mapping, ., node, ,, mapping, ., start, ,, mapping, ., end, ), ;, }, }, }, void]
[,, mapping, ., start, ,, mapping, ., end, ), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int]
[., node, ,, mapping, ., start, ,, mapping, ., end, ), ;, }, }, }, void, reportLineCut, (, int, lineIndex]
[,, mapping, ., end, ), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,, boolean, insertion]
[., start, ,, mapping, ., end, ), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,]
[), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,, boolean, insertion, ), {, if, (]
[., end, ), ;, }, }, }, void, reportLineCut, (, int, lineIndex, ,, int, charIndex, ,, boolean, insertion, ), {]
[), {, for, (, Mapping, mapping, :, allMappings, ), {, mapping, ., start, =, convertPosition, (, mapping, ., start, ,]
[), {, mapping, ., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if]
[=, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=]
[., start, =, convertPosition, (, mapping, ., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, .]
[;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,]
[,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end]
[., start, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping]
[,, charIndex, ,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition]
[,, insertion, ), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping]
[), ;, if, (, mapping, ., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end]
[), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, }]
[!=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, )]
[., end, !=, null, ), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,]
[), {, mapping, ., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, }]
[=, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, }, }, }, }, private, FilePosition]
[., end, =, convertPosition, (, mapping, ., end, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, }, }, }, }]
[;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,, int, characterPosition, ,, boolean, insertion]
[,, lineIndex, ,, charIndex, ,, insertion, ), ;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position, ,, int]
[., end, ,, lineIndex, ,, charIndex, ,, insertion, ), ;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position]
[,, charIndex, ,, insertion, ), ;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,]
[,, insertion, ), ;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,, int, characterPosition]
[), ;, }, }, }, }, private, FilePosition, convertPosition, (, FilePosition, position, ,, int, lineIndex, ,, int, characterPosition, ,, boolean]
[;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex]
[., getLine, (, ), ;, int, originalChar, =, position, ., getColumn, (, ), ;, if, (, insertion, ), {, if]
[;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition]
[., getColumn, (, ), ;, if, (, insertion, ), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, )]
[), {, if, (, originalLine, ==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1]
[), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position]
[&&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }]
[==, lineIndex, &&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, )]
[&&, originalChar, >=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }]
[), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position]
[>=, characterPosition, ), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {]
[), {, return, new, FilePosition, (, originalLine, +, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position]
[;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new]
[,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==]
[+, 1, ,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (]
[,, originalChar, -, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==]
[), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return]
[-, characterPosition, ), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, )]
[), ;, }, else, {, return, position, ;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return]
[;, }, }, else, {, if, (, originalLine, ==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,]
[), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine]
[==, lineIndex, ), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if]
[), {, return, new, FilePosition, (, originalLine, -, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine]
[;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else, {]
[,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line."]
[-, 1, ,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException]
[,, originalChar, +, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line."]
[), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else]
[+, characterPosition, ), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;]
[), ;, }, else, if, (, originalLine, >, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else]
[), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return, position, ;, }, }, }, public, String]
[>, lineIndex, ), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return, position, ;, }, }, }]
[), {, throw, new, IllegalStateException, (, "Cannot undo line cut on a previous line.", ), ;, }, else, {, return, position, ;, }, }, }, public, String]
[;, }, else, {, return, position, ;, }, }, }, public, String, getCode, (, ), {, return, code, ., toString]
[), ;, }, else, {, return, position, ;, }, }, }, public, String, getCode, (, ), {, return, code, .]
[;, }, }, }, public, String, getCode, (, ), {, return, code, ., toString, (, ), ;, }, @, Override]
[;, }, @, Override, char, getLastChar, (, ), {, return, (, code, ., length, (, ), >, 0, ), ?]
[., toString, (, ), ;, }, @, Override, char, getLastChar, (, ), {, return, (, code, ., length, (, )]
[;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex, (, ), {]
[?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :, '\0', ;, }, protected, final, int]
[), ?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :, '\0', ;, }, protected, final]
[>, 0, ), ?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :, '\0', ;, }]
[., length, (, ), >, 0, ), ?, code, ., charAt, (, code, ., length, (, ), -, 1, )]
[), ?, code, ., charAt, (, code, ., length, (, ), -, 1, ), :, '\0', ;, }, protected, final]
[:, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex, (]
[., charAt, (, code, ., length, (, ), -, 1, ), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (]
[), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex]
[-, 1, ), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final]
[., length, (, ), -, 1, ), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength]
[), :, '\0', ;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex]
[;, }, protected, final, int, getCurrentCharIndex, (, ), {, return, lineLength, ;, }, protected, final, int, getCurrentLineIndex, (, ), {]
[;, }, protected, final, int, getCurrentLineIndex, (, ), {, return, lineIndex, ;, }, }, static, class, PrettyCodePrinter, extends, MappedCodePrinter, {]
[;, }, }, static, class, PrettyCodePrinter, extends, MappedCodePrinter, {, static, final, String, INDENT, =, "  ", ;, private, int, indent, =]
[;, private, int, indent, =, 0, ;, private, PrettyCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSourceMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel]
[;, private, PrettyCodePrinter, (, int, lineLengthThreshold, ,, boolean, createSourceMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel, ), {, super, (, lineLengthThreshold, ,]
[,, createSourceMap, ,, sourceMapDetailLevel, ), ;, }, @, Override, void, append, (, String, str, ), {, if, (, lineLength, ==]
[,, sourceMapDetailLevel, ), ;, }, @, Override, void, append, (, String, str, ), {, if, (, lineLength, ==, 0, )]
[), ;, }, @, Override, void, append, (, String, str, ), {, if, (, lineLength, ==, 0, ), {, for]
[), {, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append]
[==, 0, ), {, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {, code]
[), {, for, (, int, i, =, 0, ;, i, <, indent, ;, i, ++, ), {, code, ., append]
[;, i, <, indent, ;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, .]
[;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;]
[<, indent, ;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (]
[;, i, ++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;]
[), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code]
[++, ), {, code, ., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }]
[;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength, +=]
[., append, (, INDENT, ), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (]
[), ;, lineLength, +=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength]
[+=, INDENT, ., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength, +=, str, .]
[;, }, }, code, ., append, (, str, ), ;, lineLength, +=, str, ., length, (, ), ;, }, @]
[., length, (, ), ;, }, }, code, ., append, (, str, ), ;, lineLength, +=, str, ., length, (]
[;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength]
[., append, (, str, ), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[+=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0]
[;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, code, ., append, (]
[., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {]
[), {, code, ., append, (, '\n', ), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override]
[>, 0, ), {, code, ., append, (, '\n', ), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }]
[), {, code, ., append, (, '\n', ), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override]
[;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, )]
[., append, (, '\n', ), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (]
[), ;, lineIndex, ++, ;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (]
[;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @]
[++, ;, lineLength, =, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }]
[=, 0, ;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @, Override, void]
[;, }, }, @, Override, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (]
[;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, startNewLine, (, ), ;]
[), {, startNewLine, (, ), ;, }, }, @, Override, void, endLine, (, ), {, startNewLine, (, ), ;, }]
[>, lineLengthThreshold, ), {, startNewLine, (, ), ;, }, }, @, Override, void, endLine, (, ), {, startNewLine, (, )]
[), {, startNewLine, (, ), ;, }, }, @, Override, void, endLine, (, ), {, startNewLine, (, ), ;, }]
[;, }, }, @, Override, void, endLine, (, ), {, startNewLine, (, ), ;, }, @, Override, void, appendBlockStart, (]
[;, }, @, Override, void, appendBlockStart, (, ), {, append, (, " {", ), ;, indent, ++, ;, }, @, Override]
[;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;, append]
[), ;, indent, ++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;]
[;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;, append, (, "}", )]
[++, ;, }, @, Override, void, appendBlockEnd, (, ), {, endLine, (, ), ;, indent, --, ;, append, (, "}"]
[;, indent, --, ;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {, add, (, ", "]
[;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {, add, (, ", ", ), ;, maybeLineBreak]
[--, ;, append, (, "}", ), ;, }, @, Override, void, listSeparator, (, ), {, add, (, ", ", ), ;]
[;, }, @, Override, void, listSeparator, (, ), {, add, (, ", ", ), ;, maybeLineBreak, (, ), ;, }, @]
[), ;, }, @, Override, void, listSeparator, (, ), {, add, (, ", ", ), ;, maybeLineBreak, (, ), ;, }]
[;, maybeLineBreak, (, ), ;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (, statementContext]
[), ;, maybeLineBreak, (, ), ;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (]
[;, }, @, Override, void, endFunction, (, boolean, statementContext, ), {, super, ., endFunction, (, statementContext, ), ;, if, (]
[;, if, (, statementContext, ), {, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {, super]
[., endFunction, (, statementContext, ), ;, if, (, statementContext, ), {, startNewLine, (, ), ;, }, }, @, Override, void]
[), ;, if, (, statementContext, ), {, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {]
[), {, startNewLine, (, ), ;, }, }, @, Override, void, beginCaseBody, (, ), {, super, ., beginCaseBody, (, )]
[;, }, }, @, Override, void, beginCaseBody, (, ), {, super, ., beginCaseBody, (, ), ;, indent, ++, ;, endLine]
[;, indent, ++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (]
[., beginCaseBody, (, ), ;, indent, ++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {]
[;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;, indent]
[++, ;, endLine, (, ), ;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;]
[;, }, @, Override, void, endCaseBody, (, ), {, super, ., endCaseBody, (, ), ;, indent, --, ;, endStatement, (]
[;, indent, --, ;, endStatement, (, ), ;, }, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, )]
[., endCaseBody, (, ), ;, indent, --, ;, endStatement, (, ), ;, }, @, Override, void, appendOp, (, String, op]
[;, endStatement, (, ), ;, }, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (]
[--, ;, endStatement, (, ), ;, }, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if]
[;, }, @, Override, void, appendOp, (, String, op, ,, boolean, binOp, ), {, if, (, binOp, ), {, if]
[), {, if, (, getLastChar, (, ), !=, ' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {]
[), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else]
[&&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op]
[!=, ' ', &&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append]
[&&, op, ., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op]
[), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else]
[!=, ',', ), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;]
[., charAt, (, 0, ), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op, ), ;]
[), !=, ',', ), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", )]
[), {, append, (, " ", ), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else]
[;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else, {, append, (, op, ), ;]
[), ;, }, append, (, op, ), ;, append, (, " ", ), ;, }, else, {, append, (, op, )]
[;, append, (, " ", ), ;, }, else, {, append, (, op, ), ;, }, }, @, Override, boolean, shouldPreserveExtraBlocks]
[), ;, append, (, " ", ), ;, }, else, {, append, (, op, ), ;, }, }, @, Override, boolean]
[;, }, else, {, append, (, op, ), ;, }, }, @, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true]
[), ;, }, else, {, append, (, op, ), ;, }, }, @, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return]
[;, }, }, @, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true, ;, }, private, Node, getTryForCatch, (, Node, n]
[), ;, }, }, @, Override, boolean, shouldPreserveExtraBlocks, (, ), {, return, true, ;, }, private, Node, getTryForCatch, (, Node]
[;, }, private, Node, getTryForCatch, (, Node, n, ), {, return, n, ., getParent, (, ), ., getParent, (, )]
[;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {, Preconditions, ., checkState, (, n, .]
[., getParent, (, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext, ), {, Preconditions, .]
[., getParent, (, ), ., getParent, (, ), ;, }, @, Override, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, isStatementContext]
[;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, int, type, =]
[., checkState, (, n, ., isBlock, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, if]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, ), {, int, type]
[., isBlock, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null]
[;, if, (, parent, !=, null, ), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, int, type, =, parent, ., getType, (, )]
[), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO]
[!=, null, ), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token]
[), {, int, type, =, parent, ., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO]
[;, switch, (, type, ), {, case, Token, ., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return]
[., getType, (, ), ;, switch, (, type, ), {, case, Token, ., DO, :, return, false, ;, case, Token]
[), {, case, Token, ., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token]
[:, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=]
[., DO, :, return, false, ;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return]
[;, case, Token, ., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild]
[:, return, false, ;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token]
[., FUNCTION, :, return, false, ;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;]
[;, case, Token, ., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :]
[:, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally]
[., TRY, :, return, n, !=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil]
[;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token]
[!=, parent, ., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (]
[;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token]
[., getFirstChild, (, ), ;, case, Token, ., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, )]
[:, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return, n]
[., CATCH, :, return, !, NodeUtil, ., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :]
[;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;]
[;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;]
[., hasFinally, (, getTryForCatch, (, parent, ), ), ;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild]
[), ;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return, true]
[), ), ;, case, Token, ., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return]
[:, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;, }, @, Override, void, endFile]
[., IF, :, return, n, ==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;, }, @, Override]
[;, }, }, return, true, ;, }, @, Override, void, endFile, (, ), {, maybeEndStatement, (, ), ;, }, }]
[==, parent, ., getLastChild, (, ), ;, }, }, return, true, ;, }, @, Override, void, endFile, (, ), {]
[;, }, }, return, true, ;, }, @, Override, void, endFile, (, ), {, maybeEndStatement, (, ), ;, }, }]
[., getLastChild, (, ), ;, }, }, return, true, ;, }, @, Override, void, endFile, (, ), {, maybeEndStatement, (]
[;, }, @, Override, void, endFile, (, ), {, maybeEndStatement, (, ), ;, }, }, static, class, CompactCodePrinter, extends, MappedCodePrinter]
[;, }, }, static, class, CompactCodePrinter, extends, MappedCodePrinter, {, private, final, boolean, lineBreak, ;, private, final, boolean, preferLineBreakAtEndOfFile, ;, private]
[;, private, int, preferredBreakPosition, =, 0, ;, private, int, prevCutPosition, =, 0, ;, private, int, prevLineStartPosition, =, 0, ;, private]
[;, private, int, prevCutPosition, =, 0, ;, private, int, prevLineStartPosition, =, 0, ;, private, CompactCodePrinter, (, boolean, lineBreak, ,, boolean]
[;, private, int, prevLineStartPosition, =, 0, ;, private, CompactCodePrinter, (, boolean, lineBreak, ,, boolean, preferLineBreakAtEndOfFile, ,, int, lineLengthThreshold, ,, boolean]
[;, private, CompactCodePrinter, (, boolean, lineBreak, ,, boolean, preferLineBreakAtEndOfFile, ,, int, lineLengthThreshold, ,, boolean, createSrcMap, ,, SourceMap, ., DetailLevel, sourceMapDetailLevel]
[,, createSrcMap, ,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @]
[,, sourceMapDetailLevel, ), ;, this, ., lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void]
[), ;, this, ., lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (]
[=, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code]
[., lineBreak, =, lineBreak, ;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, )]
[;, this, ., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code, ., append]
[=, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str, ), ;]
[., preferLineBreakAtEndOfFile, =, preferLineBreakAtEndOfFile, ;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str]
[;, }, @, Override, void, append, (, String, str, ), {, code, ., append, (, str, ), ;, lineLength, +=]
[;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength]
[., append, (, str, ), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (]
[), ;, lineLength, +=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (]
[+=, str, ., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0]
[;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {, prevCutPosition, =, code, .]
[., length, (, ), ;, }, @, Override, void, startNewLine, (, ), {, if, (, lineLength, >, 0, ), {]
[), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', )]
[>, 0, ), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (]
[), {, prevCutPosition, =, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', )]
[=, code, ., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =]
[;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition]
[., length, (, ), ;, prevLineStartPosition, =, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;]
[=, lineStartPosition, ;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code]
[;, code, ., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code, ., length]
[;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override]
[., append, (, '\n', ), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code, ., length, (, )]
[), ;, lineLength, =, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @]
[=, 0, ;, lineIndex, ++, ;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak]
[;, lineIndex, ++, ;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, )]
[;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (]
[++, ;, lineStartPosition, =, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if]
[=, code, ., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, )]
[;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if, (, sawFunction, ), {]
[., length, (, ), ;, }, }, @, Override, void, maybeLineBreak, (, ), {, if, (, lineBreak, ), {, if]
[), {, if, (, sawFunction, ), {, startNewLine, (, ), ;, sawFunction, =, false, ;, }, }, int, len, =]
[), {, startNewLine, (, ), ;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, )]
[;, sawFunction, =, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==]
[=, false, ;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -]
[;, }, }, int, len, =, code, ., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, )]
[;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1]
[., length, (, ), ;, if, (, preferredBreakPosition, ==, len, -, 1, ), {, char, ch, =, code, ., charAt]
[), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', )]
[==, len, -, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (]
[), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', )]
[-, 1, ), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==]
[), {, char, ch, =, code, ., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', )]
[;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @]
[., charAt, (, len, -, 1, ), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }]
[), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }]
[-, 1, ), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, )]
[), ;, if, (, ch, ==, ';', ), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }]
[), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {]
[==, ';', ), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (]
[), {, preferredBreakPosition, =, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {]
[=, len, ;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength]
[;, }, }, maybeCutLine, (, ), ;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold]
[;, }, @, Override, void, maybeCutLine, (, ), {, if, (, lineLength, >, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >]
[), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;]
[>, lineLengthThreshold, ), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =]
[), {, if, (, preferredBreakPosition, >, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;]
[), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;]
[&&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n']
[>, lineStartPosition, &&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position]
[&&, preferredBreakPosition, <, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n']
[), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;]
[<, lineStartPosition, +, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;]
[), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;]
[+, lineLength, ), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =]
[), {, int, position, =, preferredBreakPosition, ;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;]
[;, code, ., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -]
[;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength]
[., insert, (, position, ,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,]
[,, '\n', ), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex]
[), ;, prevCutPosition, =, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;]
[=, position, ;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (]
[;, reportLineCut, (, lineIndex, ,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -]
[;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else]
[,, position, -, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition]
[,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1]
[-, lineStartPosition, ,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position]
[,, true, ), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1]
[), ;, lineIndex, ++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }]
[;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (]
[++, ;, lineLength, -=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine]
[-=, (, position, -, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (, ), ;]
[;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void]
[), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override]
[-, lineStartPosition, ), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }]
[), ;, lineStartPosition, =, position, +, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override]
[=, position, +, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (]
[;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {, preferredBreakPosition, =]
[+, 1, ;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {]
[;, }, else, {, startNewLine, (, ), ;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {, preferredBreakPosition, =]
[;, }, }, }, @, Override, void, notePreferredLineBreak, (, ), {, preferredBreakPosition, =, code, ., length, (, ), ;, }]
[=, code, ., length, (, ), ;, }, @, Override, void, endFile, (, ), {, super, ., endFile, (, )]
[;, }, @, Override, void, endFile, (, ), {, super, ., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, )]
[., length, (, ), ;, }, @, Override, void, endFile, (, ), {, super, ., endFile, (, ), ;, if]
[;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {, append]
[., endFile, (, ), ;, if, (, !, preferLineBreakAtEndOfFile, ), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /]
[), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine]
[), {, return, ;, }, if, (, lineLength, >, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine]
[), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {]
[>, lineLengthThreshold, /, 2, ), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition]
[), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {]
[/, 2, ), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0]
[), {, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {]
[;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,]
[), ;, startNewLine, (, ), ;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition]
[;, }, else, if, (, prevCutPosition, >, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition]
[), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length]
[>, 0, ), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code]
[), {, code, ., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length]
[;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition]
[., setCharAt, (, prevCutPosition, ,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -]
[,, ' ', ), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (]
[), ;, lineStartPosition, =, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,]
[=, prevLineStartPosition, ;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1]
[;, lineLength, =, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false]
[=, code, ., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;]
[;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition]
[-, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0]
[., length, (, ), -, lineStartPosition, ;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --]
[;, reportLineCut, (, lineIndex, ,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition]
[;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (, )]
[,, prevCutPosition, +, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append]
[,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;]
[+, 1, ,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";"]
[,, false, ), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;]
[), ;, lineIndex, --, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (]
[;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (, ), ;, }, else]
[--, ;, prevCutPosition, =, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (, ), ;, }]
[=, 0, ;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, {, }]
[;, prevLineStartPosition, =, 0, ;, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, {, }, }, }]
[=, 0, ;, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, {, }, }, }, static, class]
[;, append, (, ";", ), ;, startNewLine, (, ), ;, }, else, {, }, }, }, static, class, Builder, {]
[;, startNewLine, (, ), ;, }, else, {, }, }, }, static, class, Builder, {, private, final, Node, root, ;]
[), ;, startNewLine, (, ), ;, }, else, {, }, }, }, static, class, Builder, {, private, final, Node, root]
[;, }, else, {, }, }, }, static, class, Builder, {, private, final, Node, root, ;, private, CompilerOptions, options, =]
[;, private, boolean, outputTypes, =, false, ;, private, SourceMap, sourceMap, =, null, ;, private, boolean, tagAsStrict, ;, Builder, (, Node]
[;, private, SourceMap, sourceMap, =, null, ;, private, boolean, tagAsStrict, ;, Builder, (, Node, node, ), {, root, =, node]
[;, private, boolean, tagAsStrict, ;, Builder, (, Node, node, ), {, root, =, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions]
[=, node, ;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {, this, ., options, =, (, CompilerOptions, )]
[;, }, Builder, setCompilerOptions, (, CompilerOptions, options, ), {, try, {, this, ., options, =, (, CompilerOptions, ), options, .]
[=, (, CompilerOptions, ), options, ., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, .]
[., options, =, (, CompilerOptions, ), options, ., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw]
[;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, return, this, ;]
[;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;, }, return, this, ;]
[., clone, (, ), ;, }, catch, (, CloneNotSupportedException, e, ), {, throw, Throwables, ., propagate, (, e, ), ;]
[;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;, return]
[., propagate, (, e, ), ;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, .]
[), ;, }, return, this, ;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;]
[;, }, Builder, setPrettyPrint, (, boolean, prettyPrint, ), {, options, ., prettyPrint, =, prettyPrint, ;, return, this, ;, }, Builder]
[=, prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;]
[., prettyPrint, =, prettyPrint, ;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =]
[;, return, this, ;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;, return, this]
[;, }, Builder, setLineBreak, (, boolean, lineBreak, ), {, options, ., lineBreak, =, lineBreak, ;, return, this, ;, }, Builder]
[=, lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;]
[., lineBreak, =, lineBreak, ;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =]
[;, return, this, ;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;, return, this]
[;, }, Builder, setOutputTypes, (, boolean, outputTypes, ), {, this, ., outputTypes, =, outputTypes, ;, return, this, ;, }, Builder]
[=, outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;]
[., outputTypes, =, outputTypes, ;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =]
[;, return, this, ;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;, return, this]
[;, }, Builder, setSourceMap, (, SourceMap, sourceMap, ), {, this, ., sourceMap, =, sourceMap, ;, return, this, ;, }, Builder]
[=, sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;]
[., sourceMap, =, sourceMap, ;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =]
[;, return, this, ;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;, return, this]
[;, }, Builder, setTagAsStrict, (, boolean, tagAsStrict, ), {, this, ., tagAsStrict, =, tagAsStrict, ;, return, this, ;, }, String]
[=, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (, root, ==, null, ), {, throw]
[., tagAsStrict, =, tagAsStrict, ;, return, this, ;, }, String, build, (, ), {, if, (, root, ==, null, )]
[;, return, this, ;, }, String, build, (, ), {, if, (, root, ==, null, ), {, throw, new, IllegalStateException]
[;, }, String, build, (, ), {, if, (, root, ==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", )]
[), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options]
[==, null, ), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED]
[), {, throw, new, IllegalStateException, (, "Cannot build without root node being specified", ), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options]
[;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format]
[), ;, }, Format, outputFormat, =, outputTypes, ?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :]
[;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {]
[?, Format, ., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (]
[:, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,]
[., TYPED, :, options, ., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,]
[;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {]
[?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,]
[., prettyPrint, ?, Format, ., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,]
[:, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }]
[., PRETTY, :, Format, ., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, )]
[;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {]
[., COMPACT, ;, return, toSource, (, root, ,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum]
[;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED, }, private, static, String, toSource, (, Node, root, ,]
[,, outputFormat, ,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED]
[,, options, ,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED, }, private]
[,, sourceMap, ,, tagAsStrict, ), ;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED, }, private, static, String]
[,, tagAsStrict, ), ;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED, }, private, static, String, toSource, (]
[), ;, }, }, enum, Format, {, COMPACT, ,, PRETTY, ,, TYPED, }, private, static, String, toSource, (, Node, root]
[;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new]
[., checkState, (, options, ., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter]
[), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?]
[!=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, .]
[., sourceMapDetailLevel, !=, null, ), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==]
[), ;, boolean, createSourceMap, =, (, sourceMap, !=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?]
[;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile]
[), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, .]
[!=, null, ), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,]
[), ;, MappedCodePrinter, mcp, =, outputFormat, ==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, .]
[;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator]
[?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, .]
[==, Format, ., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,]
[?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, .]
[., COMPACT, ?, new, CompactCodePrinter, (, options, ., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,]
[:, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==]
[,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options]
[., lineBreak, ,, options, ., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter]
[,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap]
[., preferLineBreakAtEndOfFile, ,, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold]
[,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel]
[., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options]
[,, options, ., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;]
[), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat]
[., sourceMapDetailLevel, ), :, new, PrettyCodePrinter, (, options, ., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg]
[;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator]
[,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (]
[., lineLengthThreshold, ,, createSourceMap, ,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new]
[,, options, ., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,]
[), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new]
[., sourceMapDetailLevel, ), ;, CodeGenerator, cg, =, outputFormat, ==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, )]
[;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;]
[?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict]
[==, Format, ., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, )]
[?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict]
[., TYPED, ?, new, TypedCodeGenerator, (, mcp, ,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if]
[:, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;]
[,, options, ), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict]
[), :, new, CodeGenerator, (, mcp, ,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, )]
[;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;]
[,, options, ), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (]
[), ;, if, (, tagAsStrict, ), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, )]
[), {, cg, ., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;, mcp, ., endFile, (]
[;, }, cg, ., add, (, root, ), ;, mcp, ., endFile, (, ), ;, String, code, =, mcp, .]
[., tagAsStrict, (, ), ;, }, cg, ., add, (, root, ), ;, mcp, ., endFile, (, ), ;, String]
[;, mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, )]
[., add, (, root, ), ;, mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, )]
[), ;, mcp, ., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap]
[;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {, mcp, ., generateSourceMap, (, sourceMap]
[., endFile, (, ), ;, String, code, =, mcp, ., getCode, (, ), ;, if, (, createSourceMap, ), {, mcp]
[;, if, (, createSourceMap, ), {, mcp, ., generateSourceMap, (, sourceMap, ), ;, }, return, code, ;, }, }]
[., getCode, (, ), ;, if, (, createSourceMap, ), {, mcp, ., generateSourceMap, (, sourceMap, ), ;, }, return, code]
[), {, mcp, ., generateSourceMap, (, sourceMap, ), ;, }, return, code, ;, }, }]
[;, }, return, code, ;, }, }]
[., generateSourceMap, (, sourceMap, ), ;, }, return, code, ;, }, }]
[), ;, }, return, code, ;, }, }]
[;, }, }]
