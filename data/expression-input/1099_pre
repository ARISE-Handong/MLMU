[., Set, ;, import, javax, ., annotation, ., Nullable, ;, class, ScopedAliases, implements, HotSwapCompilerPass, {, static, final, String, SCOPING_METHOD_NAME, =]
[private, final, AbstractCompiler, compiler, ;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, private, final, AliasTransformationHandler, transformationHandler, ;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =]
[private, final, AbstractCompiler, compiler, ;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, private, final, AliasTransformationHandler, transformationHandler, ;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =]
[;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, private, final, AliasTransformationHandler, transformationHandler, ;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =, DiagnosticType, ., error, (]
[final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, private, final, AliasTransformationHandler, transformationHandler, ;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,]
[;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =]
[;, static, final, DiagnosticType, GOOG_SCOPE_USED_IMPROPERLY, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =]
[GOOG_SCOPE_USED_IMPROPERLY, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,]
[error, (, "JSC_GOOG_SCOPE_USED_IMPROPERLY", ,, "The call to goog.scope must be alone in a single statement.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +]
[final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =]
[final, DiagnosticType, GOOG_SCOPE_HAS_BAD_PARAMETERS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (]
[error, (, "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS", ,, "The call to goog.scope must take only a single parameter.  It must", +, " be an anonymous function that itself takes no parameters.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,]
[;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =]
[;, static, final, DiagnosticType, GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =]
[GOOG_SCOPE_REFERENCES_THIS, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_REFERENCES_THIS", ,, "The body of a goog.scope function cannot reference 'this'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =]
[GOOG_SCOPE_USES_RETURN, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_RETURN", ,, "The body of a goog.scope function cannot use 'return'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =]
[;, static, final, DiagnosticType, GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =]
[GOOG_SCOPE_USES_THROW, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_USES_THROW", ,, "The body of a goog.scope function cannot use 'throw'.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,]
[;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =]
[;, static, final, DiagnosticType, GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =]
[GOOG_SCOPE_ALIAS_REDEFINED, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_ALIAS_REDEFINED", ,, "The alias {0} is assigned a value more than once.", ), ;, static, final, DiagnosticType, GOOG_SCOPE_NON_ALIAS_LOCAL, =, DiagnosticType, ., error, (, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,]
[(, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {]
[(, "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL", ,, "The local variable {0} is in a goog.scope and is not an alias.", ), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {]
[), ;, ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =]
[ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;]
[ScopedAliases, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;]
[,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =]
[Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;]
[Nullable, PreprocessorSymbolTable, preprocessorSymbolTable, ,, AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;]
[AliasTransformationHandler, transformationHandler, ), {, this, ., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., transformationHandler, =]
[this, ., transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[transformationHandler, =, transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, hotSwapScript, (]
[transformationHandler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, hotSwapScript, (, root, ,]
[null, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =]
[Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal, (, ), ;]
[Override, public, void, hotSwapScript, (, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal, (, ), ;]
[(, Node, root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (]
[root, ,, Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Node, originalRoot, ), {, Traversal, traversal, =, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[traversal, =, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, traversal, ), ;, if, (]
[=, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, traversal, ), ;, if, (, !]
[=, new, Traversal, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, traversal, ), ;, if, (, !]
[root, ,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :]
[root, ,, traversal, ), ;, if, (, !, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :]
[!, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (, ), ), {]
[!, traversal, ., hasErrors, (, ), ), {, for, (, AliasUsage, aliasUsage, :, traversal, ., getAliasUsages, (, ), ), {]
[:, traversal, ., getAliasUsages, (, ), ), {, aliasUsage, ., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :]
[:, traversal, ., getAliasUsages, (, ), ), {, aliasUsage, ., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :]
[., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (]
[., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (]
[., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (]
[., applyAlias, (, ), ;, }, for, (, Node, aliasDefinition, :, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (]
[:, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (, aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&]
[:, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (, aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&]
[:, traversal, ., getAliasDefinitionsInOrder, (, ), ), {, if, (, aliasDefinition, ., getParent, (, ), ., isVar, (, ), &&]
[., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {]
[., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {]
[., getParent, (, ), ., isVar, (, ), &&, aliasDefinition, ., getParent, (, ), ., hasOneChild, (, ), ), {]
[), ., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {]
[), ., hasOneChild, (, ), ), {, aliasDefinition, ., getParent, (, ), ., detachFromParent, (, ), ;, }, else, {]
[detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, ), ;, }, }, for, (, Node, scopeCall, :]
[detachFromParent, (, ), ;, }, else, {, aliasDefinition, ., detachFromParent, (, ), ;, }, }, for, (, Node, scopeCall, :]
[(, ), ;, }, }, for, (, Node, scopeCall, :, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =]
[(, ), ;, }, }, for, (, Node, scopeCall, :, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =]
[:, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =]
[:, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =]
[:, traversal, ., getScopeCalls, (, ), ), {, Node, expressionWithScopeCall, =, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =]
[=, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;]
[=, scopeCall, ., getParent, (, ), ;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;]
[;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;]
[;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;]
[;, Node, scopeClosureBlock, =, scopeCall, ., getLastChild, (, ), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;]
[), ., getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (]
[getLastChild, (, ), ;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,]
[;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;]
[;, scopeClosureBlock, ., detachFromParent, (, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;]
[(, ), ;, expressionWithScopeCall, ., getParent, (, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[(, ), ., replaceChild, (, expressionWithScopeCall, ,, scopeClosureBlock, ), ;, NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (]
[NodeUtil, ., tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >]
[tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||]
[tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||]
[tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||]
[tryMergeBlock, (, scopeClosureBlock, ), ;, }, if, (, traversal, ., getAliasUsages, (, ), ., size, (, ), >, 0, ||]
[getAliasUsages, (, ), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >]
[), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||]
[), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||]
[), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||]
[), ., size, (, ), >, 0, ||, traversal, ., getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||]
[getAliasDefinitionsInOrder, (, ), ., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >]
[., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {]
[., size, (, ), >, 0, ||, traversal, ., getScopeCalls, (, ), ., size, (, ), >, 0, ), {]
[{, private, final, Node, aliasReference, ;, private, final, Node, aliasDefinition, ;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {]
[{, private, final, Node, aliasReference, ;, private, final, Node, aliasDefinition, ;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {]
[aliasReference, ;, private, final, Node, aliasDefinition, ;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {, this, ., aliasReference, =]
[private, final, Node, aliasDefinition, ;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {, this, ., aliasReference, =, aliasReference, ;]
[private, final, Node, aliasDefinition, ;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {, this, ., aliasReference, =, aliasReference, ;]
[;, AliasedNode, (, Node, aliasReference, ,, Node, aliasDefinition, ), {, this, ., aliasReference, =, aliasReference, ;, this, ., aliasDefinition, =]
[., aliasReference, =, aliasReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {]
[., aliasReference, =, aliasReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {]
[., aliasReference, =, aliasReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {]
[=, aliasDefinition, ;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), ., replaceChild, (]
[;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), ., replaceChild, (, aliasReference, ,]
[;, }, @, Override, public, void, applyAlias, (, ), {, aliasReference, ., getParent, (, ), ., replaceChild, (, aliasReference, ,]
[Node, aliasDefinition, ;, private, final, String, aliasName, ;, AliasedTypeNode, (, Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {]
[Node, aliasDefinition, ;, private, final, String, aliasName, ;, AliasedTypeNode, (, Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {]
[final, String, aliasName, ;, AliasedTypeNode, (, Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =]
[aliasName, ;, AliasedTypeNode, (, Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =, typeReference, ;]
[aliasName, ;, AliasedTypeNode, (, Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =, typeReference, ;]
[Node, typeReference, ,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =, typeReference, ;, this, ., aliasDefinition, =]
[,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =, typeReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;]
[,, Node, aliasDefinition, ,, String, aliasName, ), {, this, ., typeReference, =, typeReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;]
[String, aliasName, ), {, this, ., typeReference, =, typeReference, ;, this, ., aliasDefinition, =, aliasDefinition, ;, this, ., aliasName, =]
[aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =]
[aliasDefinition, ;, this, ., aliasName, =, aliasName, ;, }, @, Override, public, void, applyAlias, (, ), {, String, typeName, =]
[@, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, ), ;, String, aliasExpanded, =]
[@, Override, public, void, applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, ), ;, String, aliasExpanded, =]
[applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, ), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (]
[applyAlias, (, ), {, String, typeName, =, typeReference, ., getString, (, ), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (]
[typeReference, ., getString, (, ), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;]
[typeReference, ., getString, (, ), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;]
[), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (]
[), ;, String, aliasExpanded, =, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (]
[=, Preconditions, ., checkNotNull, (, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (]
[(, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;]
[(, aliasDefinition, ., getQualifiedName, (, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;]
[(, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (]
[(, ), ), ;, Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (]
[Preconditions, ., checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (]
[checkState, (, typeName, ., startsWith, (, aliasName, ), ), ;, typeReference, ., setString, (, typeName, ., replaceFirst, (, aliasName, ,]
[), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node, >, aliasDefinitionsInOrder, =]
[), ;, }, }, private, class, Traversal, implements, NodeTraversal, ., ScopedCallback, {, private, final, List, <, Node, >, aliasDefinitionsInOrder, =]
[List, <, Node, >, aliasDefinitionsInOrder, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, scopeCalls, =]
[List, <, Node, >, aliasDefinitionsInOrder, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, Node, >, scopeCalls, =]
[List, <, Node, >, scopeCalls, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, AliasUsage, >, aliasUsages, =]
[List, <, Node, >, scopeCalls, =, Lists, ., newArrayList, (, ), ;, private, final, List, <, AliasUsage, >, aliasUsages, =]
[AliasUsage, >, aliasUsages, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, Var, >, aliases, =]
[AliasUsage, >, aliasUsages, =, Lists, ., newArrayList, (, ), ;, private, final, Map, <, String, ,, Var, >, aliases, =]
[String, ,, Var, >, aliases, =, Maps, ., newHashMap, (, ), ;, private, final, Set, <, String, >, forbiddenLocals, =]
[String, ,, Var, >, aliases, =, Maps, ., newHashMap, (, ), ;, private, final, Set, <, String, >, forbiddenLocals, =]
[), ;, private, final, Set, <, String, >, forbiddenLocals, =, Sets, ., newHashSet, (, ), ;, private, boolean, hasNamespaceShadows, =]
[String, >, forbiddenLocals, =, Sets, ., newHashSet, (, ), ;, private, boolean, hasNamespaceShadows, =, false, ;, private, boolean, hasErrors, =]
[newHashSet, (, ), ;, private, boolean, hasNamespaceShadows, =, false, ;, private, boolean, hasErrors, =, false, ;, private, AliasTransformation, transformation, =]
[boolean, hasErrors, =, false, ;, private, AliasTransformation, transformation, =, null, ;, Collection, <, Node, >, getAliasDefinitionsInOrder, (, ), {, return]
[Node, >, getAliasDefinitionsInOrder, (, ), {, return, aliasDefinitionsInOrder, ;, }, private, List, <, AliasUsage, >, getAliasUsages, (, ), {, return]
[<, AliasUsage, >, getAliasUsages, (, ), {, return, aliasUsages, ;, }, List, <, Node, >, getScopeCalls, (, ), {, return]
[;, }, List, <, Node, >, getScopeCalls, (, ), {, return, scopeCalls, ;, }, boolean, hasErrors, (, ), {, return]
[;, }, boolean, hasErrors, (, ), {, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return]
[;, }, boolean, hasErrors, (, ), {, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return]
[;, }, boolean, hasErrors, (, ), {, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return]
[{, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&]
[{, return, hasErrors, ;, }, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&]
[}, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals, (]
[}, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals, (]
[}, private, boolean, isCallToScopeMethod, (, Node, n, ), {, return, n, ., isCall, (, ), &&, SCOPING_METHOD_NAME, ., equals, (]
[., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[., getQualifiedName, (, ), ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, n, =]
[(, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (]
[(, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (]
[(, NodeTraversal, t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (]
[t, ), {, Node, n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (, n, !=]
[{, Node, n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (, n, !=, null, &&]
[n, =, t, ., getCurrentNode, (, ), ., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (]
[getCurrentNode, (, ), ., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {]
[), ., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =]
[), ., getParent, (, ), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =]
[), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (]
[), ;, if, (, n, !=, null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (]
[null, &&, isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,]
[isCallToScopeMethod, (, n, ), ), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (]
[), {, transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;]
[transformation, =, transformationHandler, ., logAliasTransformation, (, n, ., getSourceFileName, (, ), ,, getSourceRegion, (, n, ), ), ;, findAliases, (]
[;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[;, findAliases, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[}, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., getScopeDepth, (, ), >]
[Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., getScopeDepth, (, ), >, 2, ), {]
[void, exitScope, (, NodeTraversal, t, ), {, if, (, t, ., getScopeDepth, (, ), >, 2, ), {, findNamespaceShadows, (]
[{, if, (, t, ., getScopeDepth, (, ), >, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (]
[{, if, (, t, ., getScopeDepth, (, ), >, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (]
[{, if, (, t, ., getScopeDepth, (, ), >, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (]
[(, ), >, 2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==]
[2, ), {, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {]
[{, findNamespaceShadows, (, t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (]
[t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;]
[t, ), ;, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;]
[t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;]
[t, ., getScopeDepth, (, ), ==, 2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;]
[2, ), {, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;]
[{, renameNamespaceShadows, (, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =]
[(, t, ), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;]
[), ;, aliases, ., clear, (, ), ;, forbiddenLocals, ., clear, (, ), ;, transformation, =, null, ;, hasNamespaceShadows, =]
[}, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), &&]
[shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), &&]
[parent, ), {, if, (, n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (]
[parent, ), {, if, (, n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (]
[parent, ), {, if, (, n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (]
[{, if, (, n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==]
[(, n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||]
[n, ., isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !]
[isFunction, (, ), &&, t, ., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (]
[., inGlobalScope, (, ), ), {, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return]
[{, if, (, parent, ==, null, ||, !, isCallToScopeMethod, (, parent, ), ), {, return, false, ;, }, }, return]
[}, }, return, true, ;, }, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n, ), {, Node, testNode, =]
[}, private, SourcePosition, <, AliasTransformation, >, getSourceRegion, (, Node, n, ), {, Node, testNode, =, n, ;, Node, next, =]
[>, getSourceRegion, (, Node, n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;]
[>, getSourceRegion, (, Node, n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;]
[>, getSourceRegion, (, Node, n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;]
[(, Node, n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;, next, !=]
[n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;, next, !=, null, ||]
[n, ), {, Node, testNode, =, n, ;, Node, next, =, null, ;, for, (, ;, next, !=, null, ||]
[Node, next, =, null, ;, for, (, ;, next, !=, null, ||, testNode, ., isScript, (, ), ;, ), {]
[=, null, ;, for, (, ;, next, !=, null, ||, testNode, ., isScript, (, ), ;, ), {, next, =]
[=, null, ;, for, (, ;, next, !=, null, ||, testNode, ., isScript, (, ), ;, ), {, next, =]
[next, !=, null, ||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;]
[null, ||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =]
[null, ||, testNode, ., isScript, (, ), ;, ), {, next, =, testNode, ., getNext, (, ), ;, testNode, =]
[next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =]
[next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =]
[next, =, testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =]
[testNode, ., getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==]
[getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?]
[getNext, (, ), ;, testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?]
[testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :]
[testNode, =, testNode, ., getParent, (, ), ;, }, int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :]
[int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =]
[int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =]
[int, endLine, =, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =]
[=, next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==]
[==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?]
[==, null, ?, Integer, ., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?]
[., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :]
[., MAX_VALUE, :, next, ., getLineno, (, ), ;, int, endChar, =, next, ==, null, ?, Integer, ., MAX_VALUE, :]
[next, ==, null, ?, Integer, ., MAX_VALUE, :, next, ., getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =]
[getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;]
[getCharno, (, ), ;, SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;]
[SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation, (]
[SourcePosition, <, AliasTransformation, >, pos, =, new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation, (]
[new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,]
[new, SourcePosition, <, AliasTransformation, >, (, ), {, }, ;, pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,]
[), {, }, ;, pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,]
[}, ;, pos, ., setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,]
[setPositionInformation, (, n, ., getLineno, (, ), ,, n, ., getCharno, (, ), ,, endLine, ,, endChar, ), ;, return]
[;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {]
[;, }, private, void, report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {]
[report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {, compiler, ., report, (]
[report, (, NodeTraversal, t, ,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {, compiler, ., report, (]
[,, Node, n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {, compiler, ., report, (, t, ., makeError, (]
[n, ,, DiagnosticType, error, ,, String, ..., arguments, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[DiagnosticType, error, ,, String, ..., arguments, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, error, ,]
[..., arguments, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, error, ,, arguments, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, error, ,, arguments, ), ), ;, hasErrors, =]
[arguments, ), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =]
[arguments, ), ), ;, hasErrors, =, true, ;, }, private, void, findAliases, (, NodeTraversal, t, ), {, Scope, scope, =]
[findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Var, v, :]
[findAliases, (, NodeTraversal, t, ), {, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Var, v, :]
[., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, Node, n, =]
[., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, Node, n, =]
[:, scope, ., getVarIterable, (, ), ), {, Node, n, =, v, ., getNode, (, ), ;, int, type, =]
[:, scope, ., getVarIterable, (, ), ), {, Node, n, =, v, ., getNode, (, ), ;, int, type, =]
[n, =, v, ., getNode, (, ), ;, int, type, =, n, ., getType, (, ), ;, Node, parent, =]
[n, =, v, ., getNode, (, ), ;, int, type, =, n, ., getType, (, ), ;, Node, parent, =]
[int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[int, type, =, n, ., getType, (, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[(, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&]
[(, ), ;, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&]
[n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&]
[n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&]
[n, ., getParent, (, ), ;, if, (, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), &&]
[n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =]
[n, ., hasChildren, (, ), &&, n, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, String, name, =]
[(, ), ., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =]
[(, ), ., isQualifiedName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =]
[(, ), ), {, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (]
[{, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;]
[{, String, name, =, n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;]
[n, ., getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;, aliases, ., put, (]
[getString, (, ), ;, Var, aliasVar, =, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name, ,]
[=, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =]
[=, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =]
[=, scope, ., getVar, (, name, ), ;, aliases, ., put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =]
[put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;]
[put, (, name, ,, aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;]
[aliasVar, ), ;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (]
[;, String, qualifiedName, =, aliasVar, ., getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,]
[getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =]
[getInitialValue, (, ), ., getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =]
[getQualifiedName, (, ), ;, transformation, ., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (]
[., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (]
[., addAlias, (, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (]
[(, name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=]
[name, ,, qualifiedName, ), ;, int, rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -]
[rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =]
[rootIndex, =, qualifiedName, ., indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =]
[indexOf, (, ".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (]
[".", ), ;, if, (, rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,]
[rootIndex, !=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (]
[!=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !]
[!=, -, 1, ), {, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !]
[{, String, qNameRoot, =, qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (]
[qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {]
[qualifiedName, ., substring, (, 0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {]
[0, ,, rootIndex, ), ;, if, (, !, aliases, ., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (]
[., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (]
[., containsKey, (, qNameRoot, ), ), {, forbiddenLocals, ., add, (, qNameRoot, ), ;, }, }, }, else, if, (]
[qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (]
[qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (]
[qNameRoot, ), ;, }, }, }, else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (]
[else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (, parent, ., getType, (, ), ==]
[else, if, (, v, ., isBleedingFunction, (, ), ), {, }, else, if, (, parent, ., getType, (, ), ==]
[), {, }, else, if, (, parent, ., getType, (, ), ==, Token, ., LP, ), {, }, else, {]
[}, else, if, (, parent, ., getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (]
[if, (, parent, ., getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (, t, ,]
[parent, ., getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (, t, ,, n, ,]
[getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,]
[getType, (, ), ==, Token, ., LP, ), {, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_NON_ALIAS_LOCAL, ,]
[n, ., getString, (, ), ), ;, }, }, }, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (]
[}, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, return, ;, }, Scope, scope, =]
[}, private, void, findNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, return, ;, }, Scope, scope, =]
[hasNamespaceShadows, ), {, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Var, v, :]
[hasNamespaceShadows, ), {, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, for, (, Var, v, :]
[t, ., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (]
[t, ., getScope, (, ), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (]
[), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (, forbiddenLocals, ., contains, (]
[), ;, for, (, Var, v, :, scope, ., getVarIterable, (, ), ), {, if, (, forbiddenLocals, ., contains, (]
[., getVarIterable, (, ), ), {, if, (, forbiddenLocals, ., contains, (, v, ., getName, (, ), ), ), {]
[(, ), ), {, if, (, forbiddenLocals, ., contains, (, v, ., getName, (, ), ), ), {, hasNamespaceShadows, =]
[{, hasNamespaceShadows, =, true, ;, return, ;, }, }, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {, if, (]
[}, }, private, void, renameNamespaceShadows, (, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, MakeDeclaredNamesUnique, ., Renamer, renamer, =]
[(, NodeTraversal, t, ), {, if, (, hasNamespaceShadows, ), {, MakeDeclaredNamesUnique, ., Renamer, renamer, =, new, MakeDeclaredNamesUnique, ., WhitelistedRenamer, (]
[hasNamespaceShadows, ), {, MakeDeclaredNamesUnique, ., Renamer, renamer, =, new, MakeDeclaredNamesUnique, ., WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,]
[new, MakeDeclaredNamesUnique, ., WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,, forbiddenLocals, ), ;, for, (, String, s, :]
[WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,, forbiddenLocals, ), ;, for, (, String, s, :, forbiddenLocals, ), {]
[WhitelistedRenamer, (, new, MakeDeclaredNamesUnique, ., ContextualRenamer, (, ), ,, forbiddenLocals, ), ;, for, (, String, s, :, forbiddenLocals, ), {]
[., ContextualRenamer, (, ), ,, forbiddenLocals, ), ;, for, (, String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (]
[;, for, (, String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =]
[String, s, :, forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (]
[forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;]
[forbiddenLocals, ), {, renamer, ., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;]
[., addDeclaredName, (, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (]
[(, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, s, ), ;, }, MakeDeclaredNamesUnique, uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[uniquifier, =, new, MakeDeclaredNamesUnique, (, renamer, ), ;, NodeTraversal, ., traverse, (, compiler, ,, t, ., getScopeRoot, (, ), ,]
[), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), ;, }, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, }, private, void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable, !=]
[void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable, !=, null, ), {]
[void, validateScopeCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable, !=, null, ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (]
[(, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (]
[preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !]
[preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !]
[addReference, (, n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {]
[n, ., getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (]
[getFirstChild, (, ), ), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (, t, ,]
[), ), ;, }, if, (, !, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,]
[!, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (]
[!, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (]
[!, parent, ., isExprResult, (, ), ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (]
[), {, report, (, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=]
[(, t, ,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {]
[,, n, ,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (]
[,, GOOG_SCOPE_USED_IMPROPERLY, ), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (, t, ,]
[), ;, }, if, (, n, ., getChildCount, (, ), !=, 2, ), {, report, (, t, ,, n, ,]
[), !=, 2, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =]
[), !=, 2, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =]
[{, report, (, t, ,, n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (]
[n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[n, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[{, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||]
[{, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||]
[{, Node, anonymousFnNode, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||]
[n, ., getChildAtIndex, (, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (]
[(, 1, ), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=]
[), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||]
[), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||]
[), ;, if, (, !, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||]
[!, anonymousFnNode, ., isFunction, (, ), ||, NodeUtil, ., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (]
[., getFunctionName, (, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {]
[(, anonymousFnNode, ), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (]
[), !=, null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,]
[null, ||, NodeUtil, ., getFunctionParameters, (, anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,]
[anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {]
[anonymousFnNode, ), ., hasChildren, (, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {]
[(, ), ), {, report, (, t, ,, anonymousFnNode, ,, GOOG_SCOPE_HAS_BAD_PARAMETERS, ), ;, }, else, {, scopeCalls, ., add, (]
[}, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (, n, ), ), {]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (, n, ), ), {, validateScopeCall, (]
[,, Node, n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (, n, ), ), {, validateScopeCall, (, t, ,]
[n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (, n, ), ), {, validateScopeCall, (, t, ,, n, ,]
[n, ,, Node, parent, ), {, if, (, isCallToScopeMethod, (, n, ), ), {, validateScopeCall, (, t, ,, n, ,]
[n, ), ), {, validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (]
[n, ), ), {, validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (]
[n, ), ), {, validateScopeCall, (, t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (]
[t, ,, n, ,, n, ., getParent, (, ), ), ;, }, if, (, t, ., getScopeDepth, (, ), <]
[), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {, return, ;, }, int, type, =]
[), ;, }, if, (, t, ., getScopeDepth, (, ), <, 2, ), {, return, ;, }, int, type, =]
[), <, 2, ), {, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =]
[{, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if, (]
[{, return, ;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if, (]
[;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if, (, type, ==]
[;, }, int, type, =, n, ., getType, (, ), ;, Var, aliasVar, =, null, ;, if, (, type, ==]
[(, ), ;, Var, aliasVar, =, null, ;, if, (, type, ==, Token, ., NAME, ), {, String, name, =]
[(, ), ;, Var, aliasVar, =, null, ;, if, (, type, ==, Token, ., NAME, ), {, String, name, =]
[(, type, ==, Token, ., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =]
[(, type, ==, Token, ., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =]
[(, type, ==, Token, ., NAME, ), {, String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =]
[String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (]
[String, name, =, n, ., getString, (, ), ;, Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (]
[Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, lexicalVar, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&]
[(, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==]
[(, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==]
[(, n, ., getString, (, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (]
[(, ), ), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {]
[), ;, if, (, lexicalVar, !=, null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =]
[null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (]
[null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (]
[null, &&, lexicalVar, ==, aliases, ., get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (]
[get, (, name, ), ), {, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==]
[{, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (]
[{, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (]
[{, aliasVar, =, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (]
[=, lexicalVar, ;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=]
[;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=, null, &&]
[;, }, }, if, (, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=, null, &&]
[(, t, ., getScopeDepth, (, ), ==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (]
[==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (]
[==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (]
[==, 2, ), {, if, (, aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (]
[aliasVar, !=, null, &&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {]
[&&, NodeUtil, ., isLValue, (, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {]
[(, n, ), ), {, if, (, aliasVar, ., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (]
[., getNode, (, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {]
[(, ), ==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (]
[==, n, ), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,]
[), {, aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,]
[aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,]
[aliasDefinitionsInOrder, ., add, (, n, ), ;, return, ;, }, else, {, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,]
[{, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (]
[{, report, (, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (]
[(, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==]
[(, t, ,, n, ,, GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==]
[GOOG_SCOPE_ALIAS_REDEFINED, ,, n, ., getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {]
[n, ., getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (]
[getString, (, ), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (, t, ,]
[), ), ;, }, }, if, (, type, ==, Token, ., RETURN, ), {, report, (, t, ,, n, ,]
[type, ==, Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (]
[type, ==, Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (]
[Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==]
[Token, ., RETURN, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==]
[report, (, t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {]
[t, ,, n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (]
[n, ,, GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t, ,]
[GOOG_SCOPE_USES_RETURN, ), ;, }, else, if, (, type, ==, Token, ., THIS, ), {, report, (, t, ,, n, ,]
[type, ==, Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (]
[type, ==, Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (]
[Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==]
[Token, ., THIS, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==]
[report, (, t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {]
[t, ,, n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (]
[n, ,, GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t, ,]
[GOOG_SCOPE_REFERENCES_THIS, ), ;, }, else, if, (, type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,]
[type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (]
[type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (]
[type, ==, Token, ., THROW, ), {, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (]
[{, report, (, t, ,, n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=]
[n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (]
[n, ,, GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (]
[GOOG_SCOPE_USES_THROW, ), ;, }, }, if, (, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=]
[(, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =]
[(, t, ., getScopeDepth, (, ), >=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =]
[>=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;]
[>=, 2, ), {, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;]
[if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (]
[!=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,]
[(, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =]
[(, ), ;, aliasUsages, ., add, (, new, AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =]
[AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[AliasedNode, (, n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (]
[n, ,, aliasedNode, ), ), ;, }, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=]
[info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, for, (, Node, node, :]
[info, =, n, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, for, (, Node, node, :]
[;, if, (, info, !=, null, ), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {]
[(, info, !=, null, ), {, for, (, Node, node, :, info, ., getTypeNodes, (, ), ), {, fixTypeNode, (]
[{, fixTypeNode, (, node, ), ;, }, }, }, }, private, void, fixTypeNode, (, Node, typeNode, ), {, if, (]
[{, fixTypeNode, (, node, ), ;, }, }, }, }, private, void, fixTypeNode, (, Node, typeNode, ), {, if, (]
[private, void, fixTypeNode, (, Node, typeNode, ), {, if, (, typeNode, ., isString, (, ), ), {, String, name, =]
[private, void, fixTypeNode, (, Node, typeNode, ), {, if, (, typeNode, ., isString, (, ), ), {, String, name, =]
[(, typeNode, ., isString, (, ), ), {, String, name, =, typeNode, ., getString, (, ), ;, int, endIndex, =]
[(, typeNode, ., isString, (, ), ), {, String, name, =, typeNode, ., getString, (, ), ;, int, endIndex, =]
[(, ), ), {, String, name, =, typeNode, ., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (]
[name, =, typeNode, ., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (]
[name, =, typeNode, ., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (]
[typeNode, ., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==]
[., getString, (, ), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -]
[), ;, int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -, 1, ), {]
[int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -, 1, ), {, endIndex, =]
[int, endIndex, =, name, ., indexOf, (, '.', ), ;, if, (, endIndex, ==, -, 1, ), {, endIndex, =]
[if, (, endIndex, ==, -, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =]
[if, (, endIndex, ==, -, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =]
[-, 1, ), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (]
[), {, endIndex, =, name, ., length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,]
[length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =]
[length, (, ), ;, }, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =]
[}, String, baseName, =, name, ., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (]
[., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (]
[., substring, (, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (]
[(, 0, ,, endIndex, ), ;, Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=]
[Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =]
[Var, aliasVar, =, aliases, ., get, (, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =]
[(, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;]
[(, baseName, ), ;, if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;]
[if, (, aliasVar, !=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (]
[!=, null, ), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (]
[), {, Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,]
[Node, aliasedNode, =, aliasVar, ., getInitialValue, (, ), ;, aliasUsages, ., add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,]
[add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child, =]
[add, (, new, AliasedTypeNode, (, typeNode, ,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child, =]
[,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;]
[,, aliasedNode, ,, baseName, ), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;]
[,, baseName, ), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=]
[), ), ;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;]
[;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[;, }, }, for, (, Node, child, =, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, typeNode, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, fixTypeNode, (]
