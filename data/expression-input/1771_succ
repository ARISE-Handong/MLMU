[;, public, AbstractRandomGenerator, (, ), {, super, (, ), ;, }, public, void, clear, (, ), {, cachedNormalDeviate, =, Double]
[., NaN, ;, public, AbstractRandomGenerator, (, ), {, super, (, ), ;, }, public, void, clear, (, ), {, cachedNormalDeviate]
[=, Double, ., NaN, ;, }, public, void, setSeed, (, int, seed, ), {, setSeed, (, (, long, ), seed]
[;, }, public, void, setSeed, (, int, seed, ), {, setSeed, (, (, long, ), seed, ), ;, }, public]
[., NaN, ;, }, public, void, setSeed, (, int, seed, ), {, setSeed, (, (, long, ), seed, ), ;]
[;, }, public, void, setSeed, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long, combined]
[), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long]
[), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long]
[;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +]
[;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +, s, ;, }, setSeed, (]
[), {, combined, =, combined, *, prime, +, s, ;, }, setSeed, (, combined, ), ;, }, public, abstract, void]
[=, combined, *, prime, +, s, ;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long]
[;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public, void, nextBytes]
[+, s, ;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public]
[*, prime, +, s, ;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long, seed, )]
[+, s, ;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public]
[;, }, setSeed, (, combined, ), ;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public, void, nextBytes]
[;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public, void, nextBytes, (, byte, [, ], bytes, )]
[), ;, }, public, abstract, void, setSeed, (, long, seed, ), ;, public, void, nextBytes, (, byte, [, ], bytes]
[;, while, (, bytesOut, <, bytes, ., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int]
[), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;]
[<, bytes, ., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;]
[), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;]
[., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, 3, ;, i, ++, ), {, if, (, i, >]
[;, i, <, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >]
[;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }]
[<, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8]
[;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }]
[), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut]
[++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, []
[), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt]
[>, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte]
[), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt]
[=, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (]
[;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length]
[>, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==]
[;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length]
[=, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length, ), {, return, ;, }, }, }]
[[, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length, ), {, return]
[], =, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length, ), {, return, ;, }, }]
[++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==, bytes, ., length, ), {, return, ;, }]
[;, if, (, bytesOut, ==, bytes, ., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (]
[;, if, (, bytesOut, ==, bytes, ., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (]
[), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (]
[==, bytes, ., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (]
[), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (]
[., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, )]
[;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new]
[*, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0]
[), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=]
[-, 1d, ), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[*, nextDouble, (, ), -, 1d, ), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n]
[-, 1d, ), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=]
[), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new]
[., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {]
[), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (, nextDouble]
[), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, )]
[;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <, n]
[), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <]
[;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return]
[;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return]
[), ;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {]
[*, n, ), ;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (]
[), ;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {]
[;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -]
[?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (]
[<, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, )]
[?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (]
[:, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *]
[;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -]
[-, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (]
[;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -]
[;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat, (]
[;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat, (]
[), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat]
[*, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;]
[), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5]
[-, 1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, )]
[*, nextDouble, (, ), -, 1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {]
[-, 1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, )]
[), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5]
[), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat]
[., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public]
[;, }, public, float, nextFloat, (, ), {, return, (, float, ), nextDouble, (, ), ;, }, public, abstract, double]
[<=, 0.5, ;, }, public, float, nextFloat, (, ), {, return, (, float, ), nextDouble, (, ), ;, }, public]
[;, }, public, float, nextFloat, (, ), {, return, (, float, ), nextDouble, (, ), ;, }, public, abstract, double]
[;, }, public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (, !, Double, .]
[;, }, public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (, !, Double, .]
[), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1, =]
[), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1, =]
[., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev]
[), ), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1]
[;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0]
[=, Double, ., NaN, ;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double]
[;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;]
[., NaN, ;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =]
[;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s]
[;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =]
[;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, )]
[;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =]
[), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -]
[>=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (]
[), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -]
[=, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s]
[;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2]
[-, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2]
[*, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1]
[-, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2]
[;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2]
[=, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }]
[;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s]
[-, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, )]
[*, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (]
[-, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, )]
[;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s]
[=, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath]
[;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, .]
[+, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -]
[*, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt]
[+, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -]
[;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, .]
[*, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *]
[;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, .]
[), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, )]
[!=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /]
[), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, )]
[=, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate]
[;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2]
[), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[/, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[*, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1]
[*, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1]
[/, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s]
[), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *, s, ;, }, }]
[=, v2, *, s, ;, return, v1, *, s, ;, }, }]
[;, return, v1, *, s, ;, }, }]
[*, s, ;, return, v1, *, s, ;, }, }]
[;, return, v1, *, s, ;, }, }]
[;, }, }]
[*, s, ;, }, }]
[;, }, }]
