[,, Serializable, {, private, double, [, ], coefficients, ;, public, PolynomialFunction2D, (, double, [, ], coefficients, ), {, if, (]
[,, Serializable, {, private, double, [, ], coefficients, ;, public, PolynomialFunction2D, (, double, [, ], coefficients, ), {, if, (]
[{, private, double, [, ], coefficients, ;, public, PolynomialFunction2D, (, double, [, ], coefficients, ), {, if, (, coefficients, ==]
[], coefficients, ;, public, PolynomialFunction2D, (, double, [, ], coefficients, ), {, if, (, coefficients, ==, null, ), {, throw]
[public, PolynomialFunction2D, (, double, [, ], coefficients, ), {, if, (, coefficients, ==, null, ), {, throw, new, IllegalArgumentException, (]
[[, ], coefficients, ), {, if, (, coefficients, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'coefficients' argument", ), ;, }]
[[, ], coefficients, ), {, if, (, coefficients, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'coefficients' argument", ), ;, }]
[{, if, (, coefficients, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'coefficients' argument", ), ;, }, this, ., coefficients, =]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'coefficients' argument", ), ;, }, this, ., coefficients, =, (, double, [, ], )]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'coefficients' argument", ), ;, }, this, ., coefficients, =, (, double, [, ], )]
[double, [, ], ), coefficients, ., clone, (, ), ;, }, public, double, [, ], getCoefficients, (, ), {, return]
[., clone, (, ), ;, }, public, double, [, ], getCoefficients, (, ), {, return, (, double, [, ], )]
[., clone, (, ), ;, }, public, double, [, ], getCoefficients, (, ), {, return, (, double, [, ], )]
[., clone, (, ), ;, }, public, double, [, ], getCoefficients, (, ), {, return, (, double, [, ], )]
[double, [, ], ), this, ., coefficients, ., clone, (, ), ;, }, public, int, getOrder, (, ), {, return]
[double, [, ], ), this, ., coefficients, ., clone, (, ), ;, }, public, int, getOrder, (, ), {, return]
[double, [, ], ), this, ., coefficients, ., clone, (, ), ;, }, public, int, getOrder, (, ), {, return]
[double, [, ], ), this, ., coefficients, ., clone, (, ), ;, }, public, int, getOrder, (, ), {, return]
[coefficients, ., clone, (, ), ;, }, public, int, getOrder, (, ), {, return, this, ., coefficients, ., length, -]
[this, ., coefficients, ., length, -, 1, ;, }, public, double, getValue, (, double, x, ), {, double, y, =]
[;, }, public, double, getValue, (, double, x, ), {, double, y, =, 0, ;, for, (, int, i, =]
[public, double, getValue, (, double, x, ), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;]
[public, double, getValue, (, double, x, ), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;]
[getValue, (, double, x, ), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[getValue, (, double, x, ), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;]
[), {, double, y, =, 0, ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=]
[;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=]
[;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=]
[(, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=, coefficients, []
[=, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=, coefficients, [, i, ], *]
[=, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, y, +=, coefficients, [, i, ], *]
[<, coefficients, ., length, ;, i, ++, ), {, y, +=, coefficients, [, i, ], *, Math, ., pow, (]
[., length, ;, i, ++, ), {, y, +=, coefficients, [, i, ], *, Math, ., pow, (, x, ,]
[), {, y, +=, coefficients, [, i, ], *, Math, ., pow, (, x, ,, i, ), ;, }, return]
[x, ,, i, ), ;, }, return, y, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[,, i, ), ;, }, return, y, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !]
[i, ), ;, }, return, y, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (]
[i, ), ;, }, return, y, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (]
[}, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, PolynomialFunction2D, ), ), {, return]
[obj, ), {, if, (, !, (, obj, instanceof, PolynomialFunction2D, ), ), {, return, false, ;, }, PolynomialFunction2D, that, =]
[if, (, !, (, obj, instanceof, PolynomialFunction2D, ), ), {, return, false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, )]
[(, obj, instanceof, PolynomialFunction2D, ), ), {, return, false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return]
[(, obj, instanceof, PolynomialFunction2D, ), ), {, return, false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return]
[), ), {, return, false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return, Arrays, ., equals, (]
[), ), {, return, false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return, Arrays, ., equals, (]
[false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return, Arrays, ., equals, (, this, ., coefficients, ,]
[false, ;, }, PolynomialFunction2D, that, =, (, PolynomialFunction2D, ), obj, ;, return, Arrays, ., equals, (, this, ., coefficients, ,]
[., equals, (, this, ., coefficients, ,, that, ., coefficients, ), ;, }, public, int, hashCode, (, ), {, return]
[., equals, (, this, ., coefficients, ,, that, ., coefficients, ), ;, }, public, int, hashCode, (, ), {, return]
[., coefficients, ,, that, ., coefficients, ), ;, }, public, int, hashCode, (, ), {, return, HashUtilities, ., hashCodeForDoubleArray, (]
[., coefficients, ,, that, ., coefficients, ), ;, }, public, int, hashCode, (, ), {, return, HashUtilities, ., hashCodeForDoubleArray, (]
