[chart, ., util, ., Size2D, ;, public, class, CenterArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., Size2D, ;, public, class, CenterArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[), {, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[LengthConstraintType, w, =, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[=, constraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[=, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[(, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[(, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[(, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =]
[,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, )]
[,, RectangleConstraint, constraint, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, )]
[{, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (]
[getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =]
[getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =]
[Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (]
[=, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,]
[=, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,]
[0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =]
[0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =]
[(, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =]
[NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (]
[NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (]
[), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (]
[), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (]
[double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -]
[double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -]
[getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /]
[), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,]
[Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,, 0.0, ,]
[Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,, 0.0, ,]
[Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,]
[Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,]
[width, -, s, ., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;]
[width, -, s, ., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;]
[width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (]
[,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return]
[s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (]
[s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (]
[., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (]
[., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (]
[,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -]
[,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -]
[;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /]
[., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /, 2.0, ,]
[., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /, 2.0, ,]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[}, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (]
[Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return]
[(, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[(, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (]
[., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return]
[(, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (]
[., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[(, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (]
[}, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (, container, ,]
[Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (, container, ,, g2, ,]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[}, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (]
[Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[{, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return]
[c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,]
[toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[}, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (]
[Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[=, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[(, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[(, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[}, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (]
[Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[Size2D, s1, =, arrangeNN, (, container, ,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (]
[g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[(, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (]
[{, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return]
[c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (]
[constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,]
[toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =]
[(, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =]
[,, Graphics2D, g2, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, )]
[,, Graphics2D, g2, ), {, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, )]
[{, List, blocks, =, container, ., getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (]
[getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =]
[getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =]
[Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (]
[=, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,]
[=, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,]
[., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (]
[b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,]
[NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,]
[new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return]
[Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (]
[Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (]
[0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width, ,]
[0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width, ,]
[., height, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (]
[}, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (, container, ,]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[(, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return]
[{, return, true, ;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return, false, ;, }, return]
