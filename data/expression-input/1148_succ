[,, 1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo]
[), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;, this]
[=, lo, ;, this, ., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {]
[., lo, =, lo, ;, this, ., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws]
[;, this, ., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value]
[=, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (, x, ,, lo]
[., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (, x]
[;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (, x, ,, lo, ,, hi]
[;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (]
[,, lo, ,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, )]
[), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative]
[;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, )]
[., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double]
[), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x]
[;, return, Logit, ., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;, }]
[), ;, return, Logit, ., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;]
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;, }, public, double, []
[,, param, [, 0, ], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double]
[,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param]
[[, 0, ], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,]
[], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ...]
[), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[[, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws]
[], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,]
[;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return]
[), ;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;]
[;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo]
[[, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1]
[], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (]
[;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /, (, hi, -]
[[, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /]
[], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /, (, hi]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param, )]
[/, (, lo, -, x, ), ,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters]
[,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param, )]
[), ,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param]
[-, x, ), ,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, []
[), ,, 1, /, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param]
[}, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param]
[/, (, hi, -, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException]
[}, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param]
[), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[-, x, ), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new]
[;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static, double, value]
[!=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static]
[., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static, double, value]
[;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException]
[,, 2, ), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi]
[., length, ,, 2, ), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,]
[), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (]
[||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath]
[<, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }]
[||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (]
[>, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (]
[;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;]
[,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (, hi]
[,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x]
[), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), )]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue]
[., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, }, public, DerivativeStructure, value]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, .]
[/, (, hi, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {]
[), /, (, hi, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException]
[-, lo, ), /, (, hi, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[), /, (, hi, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, .]
[), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t]
[-, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x]
[), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t]
[;, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,]
[., getValue, (, ), ;, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new]
[||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, []
[<, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }]
[||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, []
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new]
[>, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new]
[;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, f]
[,, lo, ,, hi, ), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, )]
[,, hi, ), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1]
[), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;]
[;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x]
[], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -]
[+, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (]
[., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -]
[], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -]
[=, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (]
[[, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), )]
[], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if]
[;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >]
[., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (, Double, .]
[), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length]
[/, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), )]
[), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], )]
[-, lo, ), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0]
[), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], )]
[), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length]
[), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, .]
[-, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (]
[), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, .]
[), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;]
[., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {, f]
[), ), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY]
[[, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[], ), ), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =, Double, .]
[), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i]
[>, 1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2]
[., length, >, 1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i]
[), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i]
[=, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++]
[[, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, .]
[], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;]
[;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f]
[., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, )]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, f, [, i, -]
[;, ++, i, ), {, f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, f, [, i, -, 2, ]]
[;, ++, i, ), {, f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else]
[., length, ;, ++, i, ), {, f, [, i, ], =, f, [, i, -, 2, ], ;, }]
[), {, f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double]
[), {, f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double]
[=, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x]
[[, i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0]
[], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (]
[;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL, =]
[[, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo]
[], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL]
[-, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo, ), ;]
[], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL]
[;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double, xH]
[/, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi]
[;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double, xH]
[), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double]
[-, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, )]
[), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double]
[;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double, xH, =, invH, ;, for, (]
[;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++]
[/, (, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i]
[;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++]
[), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[-, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, .]
[), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;]
[;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=]
[;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL]
[., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i]
[), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=]
[), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=]
[=, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }]
[[, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH]
[], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }]
[;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose]
[+, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t]
[;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose]
[*=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (, f]
[;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }]
[*, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }]
[;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*=, i, *, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*, invH, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }]
[., compose, (, f, ), ;, }, }]
[), ;, }, }]
