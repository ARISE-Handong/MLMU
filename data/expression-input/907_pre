[javascript, ., rhino, ., Node, ;, public, class, JqueryCodingConvention, extends, CodingConventions, ., Proxy, {, private, static, final, long, serialVersionUID, =]
[extends, CodingConventions, ., Proxy, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, JqueryCodingConvention, (, ), {, this, (]
[extends, CodingConventions, ., Proxy, {, private, static, final, long, serialVersionUID, =, 1L, ;, public, JqueryCodingConvention, (, ), {, this, (]
[{, this, (, CodingConventions, ., getDefault, (, ), ), ;, }, public, JqueryCodingConvention, (, CodingConvention, wrapped, ), {, super, (]
[(, CodingConvention, wrapped, ), {, super, (, wrapped, ), ;, }, @, Override, public, String, getGlobalObject, (, ), {, return]
[Override, public, String, getGlobalObject, (, ), {, return, "window", ;, }, private, final, static, Set, <, String, >, propertyTestFunctions, =]
[Override, public, String, getGlobalObject, (, ), {, return, "window", ;, }, private, final, static, Set, <, String, >, propertyTestFunctions, =]
[(, ), {, return, "window", ;, }, private, final, static, Set, <, String, >, propertyTestFunctions, =, ImmutableSet, ., of, (]
[{, return, "window", ;, }, private, final, static, Set, <, String, >, propertyTestFunctions, =, ImmutableSet, ., of, (, "jQuery.isPlainObject", ,]
["window", ;, }, private, final, static, Set, <, String, >, propertyTestFunctions, =, ImmutableSet, ., of, (, "jQuery.isPlainObject", ,, "jQuery.isFunction", ,]
[}, private, final, static, Set, <, String, >, propertyTestFunctions, =, ImmutableSet, ., of, (, "jQuery.isPlainObject", ,, "jQuery.isFunction", ,, "jQuery.isNumeric", ,]
[(, "jQuery.isPlainObject", ,, "jQuery.isFunction", ,, "jQuery.isNumeric", ,, "jQuery.isEmptyObject", ), ;, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {]
[(, "jQuery.isPlainObject", ,, "jQuery.isFunction", ,, "jQuery.isNumeric", ,, "jQuery.isEmptyObject", ), ;, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {]
[,, "jQuery.isNumeric", ,, "jQuery.isEmptyObject", ), ;, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, Preconditions, ., checkArgument, (]
[,, "jQuery.isNumeric", ,, "jQuery.isEmptyObject", ), ;, @, Override, public, boolean, isPropertyTestFunction, (, Node, call, ), {, Preconditions, ., checkArgument, (]
[public, boolean, isPropertyTestFunction, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, return]
[public, boolean, isPropertyTestFunction, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, return]
[Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, return, propertyTestFunctions, ., contains, (]
[Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, return, propertyTestFunctions, ., contains, (]
[Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, return, propertyTestFunctions, ., contains, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;, }, private, final, static, Set, <, String, >, prototypeAliases, =]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), ;, }, private, final, static, Set, <, String, >, prototypeAliases, =]
[., getQualifiedName, (, ), ), ;, }, private, final, static, Set, <, String, >, prototypeAliases, =, ImmutableSet, ., of, (]
[(, ), ), ;, }, private, final, static, Set, <, String, >, prototypeAliases, =, ImmutableSet, ., of, (, "jQuery.fn", ,]
[=, ImmutableSet, ., of, (, "jQuery.fn", ,, "jQuerySub.fn", ), ;, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {]
[=, ImmutableSet, ., of, (, "jQuery.fn", ,, "jQuerySub.fn", ), ;, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {]
[(, "jQuery.fn", ,, "jQuerySub.fn", ), ;, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {, Preconditions, ., checkArgument, (]
[(, "jQuery.fn", ,, "jQuerySub.fn", ), ;, @, Override, public, boolean, isPrototypeAlias, (, Node, getProp, ), {, Preconditions, ., checkArgument, (]
[public, boolean, isPrototypeAlias, (, Node, getProp, ), {, Preconditions, ., checkArgument, (, getProp, ., isGetProp, (, ), ), ;, return]
[public, boolean, isPrototypeAlias, (, Node, getProp, ), {, Preconditions, ., checkArgument, (, getProp, ., isGetProp, (, ), ), ;, return]
[Node, getProp, ), {, Preconditions, ., checkArgument, (, getProp, ., isGetProp, (, ), ), ;, return, prototypeAliases, ., contains, (]
[Node, getProp, ), {, Preconditions, ., checkArgument, (, getProp, ., isGetProp, (, ), ), ;, return, prototypeAliases, ., contains, (]
