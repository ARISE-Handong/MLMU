[;, private, final, Map, <, JSModule, ,, List, <, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {]
[;, private, final, Map, <, JSModule, ,, List, <, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {]
[<, JSModule, ,, List, <, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[,, List, <, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[<, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, functions, =]
[<, Node, >, >, functions, ;, MoveFunctionDeclarations, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, functions, =]
[Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[Maps, ., newHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[compiler, ,, root, ,, this, ), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :]
[compiler, ,, root, ,, this, ), ;, for, (, Entry, <, JSModule, ,, List, <, Node, >, >, entry, :]
[<, JSModule, ,, List, <, Node, >, >, entry, :, functions, ., entrySet, (, ), ), {, JSModule, module, =]
[<, JSModule, ,, List, <, Node, >, >, entry, :, functions, ., entrySet, (, ), ), {, JSModule, module, =]
[:, functions, ., entrySet, (, ), ), {, JSModule, module, =, entry, ., getKey, (, ), ;, Node, addingRoot, =]
[:, functions, ., entrySet, (, ), ), {, JSModule, module, =, entry, ., getKey, (, ), ;, Node, addingRoot, =]
[(, ), ), {, JSModule, module, =, entry, ., getKey, (, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (]
[., getKey, (, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :]
[., getKey, (, ), ;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :]
[;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :, Lists, ., reverse, (]
[;, Node, addingRoot, =, compiler, ., getNodeForCodeInsertion, (, module, ), ;, for, (, Node, n, :, Lists, ., reverse, (]
[module, ), ;, for, (, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, ), ), ), {]
[module, ), ;, for, (, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, ), ), ), {]
[(, Node, n, :, Lists, ., reverse, (, entry, ., getValue, (, ), ), ), {, addingRoot, ., addChildToFront, (]
[}, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =]
[}, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =]
[boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return]
[t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return]
[t, ,, Node, n, ,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return]
[Node, n, ,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return, gramps, ==]
[,, Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return, gramps, ==, null, ||]
[Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return, gramps, ==, null, ||, !]
[Node, parent, ), {, Node, gramps, =, n, ., getAncestor, (, 2, ), ;, return, gramps, ==, null, ||, !]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, parent, ==, null, ||, !]
[{, if, (, parent, ==, null, ||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (]
[{, if, (, parent, ==, null, ||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (]
[==, null, ||, !, parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (]
[parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[parent, ., isScript, (, ), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {]
[), ), {, return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (]
[return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n, ), ;]
[return, ;, }, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, parent, ., removeChild, (, n, ), ;]
[n, ), ), {, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =]
[n, ), ), {, parent, ., removeChild, (, n, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =]
[., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =]
[., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =]
[;, JSModule, module, =, t, ., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (]
[., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (]
[., getModule, (, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (]
[(, ), ;, List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (, moduleFunctions, ==]
[List, <, Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {]
[Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =]
[Node, >, moduleFunctions, =, functions, ., get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =]
[get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;]
[get, (, module, ), ;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;]
[;, if, (, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (]
[(, moduleFunctions, ==, null, ), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,]
[), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }]
[), {, moduleFunctions, =, Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }]
[Lists, ., newArrayList, (, ), ;, functions, ., put, (, module, ,, moduleFunctions, ), ;, }, moduleFunctions, ., add, (]
