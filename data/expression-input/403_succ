[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ,, final, Map, <, TypeVariable, <]
[,, toType, ,, null, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ,]
[,, null, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ,, final, Map]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Type, toType, ,, final, Map, <, TypeVariable]
[), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, ), ;, }, if, (, toType]
[||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, )]
[==, null, ||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,, (, Class, <, ?]
[||, toType, instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, )]
[), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, ), ;, }, if, (, toType]
[instanceof, Class, <, ?, >, ), {, return, isAssignable, (, type, ,, (, Class, <, ?, >, ), toType, )]
[;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns]
[,, (, Class, <, ?, >, ), toType, ), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable]
[), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,]
[), ;, }, if, (, toType, instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,]
[), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof]
[instanceof, ParameterizedType, ), {, return, isAssignable, (, type, ,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns]
[,, (, ParameterizedType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, )]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, )]
[), ;, }, if, (, toType, instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,]
[), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof]
[instanceof, GenericArrayType, ), {, return, isAssignable, (, type, ,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns]
[,, (, GenericArrayType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, )]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, )]
[), ;, }, if, (, toType, instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,]
[), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof]
[instanceof, WildcardType, ), {, return, isAssignable, (, type, ,, (, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (]
[;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,, (, TypeVariable, <]
[,, (, WildcardType, ), toType, ,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,]
[,, typeVarAssigns, ), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,]
[), ;, }, if, (, toType, instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,, (, TypeVariable]
[), {, return, isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw]
[instanceof, TypeVariable, <, ?, >, ), {, return, isAssignable, (, type, ,, (, TypeVariable, <, ?, >, ), toType, ,]
[;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, toType, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type]
[,, (, TypeVariable, <, ?, >, ), toType, ,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, toType]
[,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, toType, ), ;, }, private, static, boolean, isAssignable, (]
[,, typeVarAssigns, ), ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, toType, ), ;, }, private, static, boolean, isAssignable, (]
[), ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, toType, ), ;, }, private, static, boolean, isAssignable, (, final, Type]
[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {, if]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {]
[+, toType, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, Class, <, ?, >, toClass, ), {]
[), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null]
[==, null, ), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass]
[), {, return, toClass, ==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null]
[;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (, type]
[||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }]
[==, null, ||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false]
[||, !, toClass, ., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }]
[;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (, type]
[;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (, type]
[., isPrimitive, (, ), ;, }, if, (, toClass, ==, null, ), {, return, false, ;, }, if, (, toClass]
[), {, return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true, ;, }]
[==, null, ), {, return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true]
[), {, return, false, ;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true, ;, }]
[;, }, if, (, toClass, ., equals, (, type, ), ), {, return, true, ;, }, if, (, type, instanceof]
[), {, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable]
[., equals, (, type, ), ), {, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, )]
[), ), {, return, true, ;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return, ClassUtils, .]
[;, }, if, (, type, instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable, (, (, Class, <]
[), {, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,, toClass, ), ;, }, if]
[instanceof, Class, <, ?, >, ), {, return, ClassUtils, ., isAssignable, (, (, Class, <, ?, >, ), type, ,]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,]
[., isAssignable, (, (, Class, <, ?, >, ), type, ,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType]
[,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, )]
[,, toClass, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, )]
[), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, )]
[), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,, toClass, ), ;, }, if, (, type]
[instanceof, ParameterizedType, ), {, return, isAssignable, (, getRawType, (, (, ParameterizedType, ), type, ), ,, toClass, ), ;, }, if]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, (, (]
[,, toClass, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound]
[), ,, toClass, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type]
[), ,, toClass, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type]
[), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, (]
[), {, for, (, final, Type, bound, :, (, (, TypeVariable, <, ?, >, ), type, ), ., getBounds, (]
[instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, (, (, TypeVariable, <, ?, >, )]
[), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;, }, }, return, false, ;]
[., getBounds, (, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;, }]
[), ., getBounds, (, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;]
[), ., getBounds, (, ), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, true, ;]
[), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass]
[,, toClass, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, )]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return]
[;, }, }, return, false, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass]
[), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (]
[instanceof, GenericArrayType, ), {, return, toClass, ., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&]
[;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type]
[||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,]
[., equals, (, Object, ., class, ), ||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, )]
[), ||, toClass, ., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type]
[&&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), )]
[., isArray, (, ), &&, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, .]
[;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type]
[,, toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }]
[., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {]
[), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, )]
[), ., getGenericComponentType, (, ), ,, toClass, ., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, )]
[), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[., getComponentType, (, ), ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new]
[), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, boolean, isAssignable]
[instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static]
[;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type]
[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable, <]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable]
[+, type, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, ParameterizedType, toParameterizedType, ,, final, Map]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, ParameterizedType, toParameterizedType, ,, final, Map, <, TypeVariable]
[), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (, toParameterizedType]
[==, null, ), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if]
[), {, return, true, ;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (, toParameterizedType]
[;, }, if, (, toParameterizedType, ==, null, ), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (, type]
[), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (, type, ), ), {, return, true, ;, }]
[==, null, ), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (, type, ), ), {, return, true]
[), {, return, false, ;, }, if, (, toParameterizedType, ., equals, (, type, ), ), {, return, true, ;, }]
[;, }, if, (, toParameterizedType, ., equals, (, type, ), ), {, return, true, ;, }, final, Class, <, ?]
[), {, return, true, ;, }, final, Class, <, ?, >, toClass, =, getRawType, (, toParameterizedType, ), ;, final, Map]
[., equals, (, type, ), ), {, return, true, ;, }, final, Class, <, ?, >, toClass, =, getRawType, (]
[), ), {, return, true, ;, }, final, Class, <, ?, >, toClass, =, getRawType, (, toParameterizedType, ), ;, final]
[;, }, final, Class, <, ?, >, toClass, =, getRawType, (, toParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?]
[;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,, null]
[), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, fromTypeVarAssigns, =, getTypeArguments, (, type, ,, toClass, ,]
[;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), )]
[,, toClass, ,, null, ), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns]
[,, null, ), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty]
[), ;, if, (, fromTypeVarAssigns, ==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, )]
[), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), ), {, return, true, ;, }, final]
[==, null, ), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), ), {, return, true, ;]
[), {, return, false, ;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), ), {, return, true, ;, }, final]
[;, }, if, (, fromTypeVarAssigns, ., isEmpty, (, ), ), {, return, true, ;, }, final, Map, <, TypeVariable, <]
[), {, return, true, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =, getTypeArguments, (]
[., isEmpty, (, ), ), {, return, true, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >]
[;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, toTypeVarAssigns, =, getTypeArguments, (, toParameterizedType, ,, toClass, ,]
[;, for, (, final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {, final, Type, toTypeArg]
[,, toClass, ,, typeVarAssigns, ), ;, for, (, final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, )]
[,, typeVarAssigns, ), ;, for, (, final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {]
[), ;, for, (, final, TypeVariable, <, ?, >, var, :, toTypeVarAssigns, ., keySet, (, ), ), {, final, Type]
[), {, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var]
[., keySet, (, ), ), {, final, Type, toTypeArg, =, unrollVariableAssignments, (, var, ,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg]
[;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg]
[,, toTypeVarAssigns, ), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null]
[), ;, final, Type, fromTypeArg, =, unrollVariableAssignments, (, var, ,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !]
[;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType]
[,, fromTypeVarAssigns, ), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (]
[), ;, if, (, fromTypeArg, !=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?, >]
[&&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false]
[&&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg]
[!=, null, &&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg]
[&&, !, toTypeArg, ., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg]
[&&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false]
[&&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false]
[., equals, (, fromTypeArg, ), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, )]
[), &&, !, (, toTypeArg, instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?, >]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?, >]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?]
[&&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false, ;, }, }, return, true, ;]
[instanceof, WildcardType, &&, isAssignable, (, fromTypeArg, ,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?]
[,, toTypeArg, ,, typeVarAssigns, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, Type]
[,, typeVarAssigns, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <]
[;, }, }, return, true, ;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?, >, var, ,, final, Map]
[;, }, private, static, Type, unrollVariableAssignments, (, TypeVariable, <, ?, >, var, ,, final, Map, <, TypeVariable, <, ?, >]
[=, typeVarAssigns, ., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, .]
[;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, ), ), {, var]
[., get, (, var, ), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (]
[), ;, if, (, result, instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, ), ), {]
[), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (]
[&&, !, result, ., equals, (, var, ), ), {, var, =, (, TypeVariable, <, ?, >, ), result, ;]
[instanceof, TypeVariable, <, ?, >, &&, !, result, ., equals, (, var, ), ), {, var, =, (, TypeVariable, <]
[), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (]
[), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (]
[., equals, (, var, ), ), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }]
[), ), {, var, =, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while]
[=, (, TypeVariable, <, ?, >, ), result, ;, continue, ;, }, break, ;, }, while, (, true, ), ;]
[;, continue, ;, }, break, ;, }, while, (, true, ), ;, return, result, ;, }, private, static, boolean, isAssignable]
[;, continue, ;, }, break, ;, }, while, (, true, ), ;, return, result, ;, }, private, static, boolean, isAssignable]
[), ;, return, result, ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, GenericArrayType, toGenericArrayType, ,, final]
[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, GenericArrayType, toGenericArrayType, ,, final, Map, <, TypeVariable, <]
[), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (, toGenericArrayType]
[==, null, ), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if]
[), {, return, true, ;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (, toGenericArrayType]
[;, }, if, (, toGenericArrayType, ==, null, ), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (, type]
[), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true, ;, }]
[==, null, ), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true]
[), {, return, false, ;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true, ;, }]
[;, }, if, (, toGenericArrayType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, toComponentType, =]
[), {, return, true, ;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, ), ;, if, (, type, instanceof]
[., equals, (, type, ), ), {, return, true, ;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, )]
[), ), {, return, true, ;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, ), ;, if, (, type]
[;, }, final, Type, toComponentType, =, toGenericArrayType, ., getGenericComponentType, (, ), ;, if, (, type, instanceof, Class, <, ?, >]
[;, if, (, type, instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, cls, =, (, Class]
[., getGenericComponentType, (, ), ;, if, (, type, instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >]
[), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, ), type, ;, return, cls, .]
[instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, cls, =, (, Class, <, ?, >, )]
[;, return, cls, ., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[;, return, cls, ., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType]
[&&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType]
[., isArray, (, ), &&, isAssignable, (, cls, ., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType]
[,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType]
[., getComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable]
[,, typeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type]
[), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), .]
[), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, )]
[instanceof, GenericArrayType, ), {, return, isAssignable, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toComponentType, ,]
[;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, )]
[,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :]
[., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (]
[), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for]
[), ., getGenericComponentType, (, ), ,, toComponentType, ,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for]
[,, typeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (]
[), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType]
[), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable]
[instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if]
[), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;]
[), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false]
[), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, )]
[,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, TypeVariable, <]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >]
[;, }, }, return, false, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (]
[), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {]
[instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >]
[), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;]
[), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false]
[), ), {, if, (, isAssignable, (, bound, ,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false]
[,, toGenericArrayType, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, )]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[;, }, }, return, false, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type]
[), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, boolean, isAssignable]
[instanceof, ParameterizedType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static]
[;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type]
[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, WildcardType, toWildcardType, ,, final, Map, <, TypeVariable, <]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, WildcardType, toWildcardType, ,, final, Map, <, TypeVariable]
[+, type, ), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, WildcardType, toWildcardType, ,, final, Map]
[), ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, WildcardType, toWildcardType, ,, final, Map, <, TypeVariable]
[), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (, toWildcardType]
[==, null, ), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if]
[), {, return, true, ;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (, toWildcardType]
[;, }, if, (, toWildcardType, ==, null, ), {, return, false, ;, }, if, (, toWildcardType, ., equals, (, type]
[), {, return, false, ;, }, if, (, toWildcardType, ., equals, (, type, ), ), {, return, true, ;, }]
[==, null, ), {, return, false, ;, }, if, (, toWildcardType, ., equals, (, type, ), ), {, return, true]
[), {, return, false, ;, }, if, (, toWildcardType, ., equals, (, type, ), ), {, return, true, ;, }]
[;, }, if, (, toWildcardType, ., equals, (, type, ), ), {, return, true, ;, }, final, Type, [, ]]
[), {, return, true, ;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, []
[., equals, (, type, ), ), {, return, true, ;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType]
[), ), {, return, true, ;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type]
[;, }, final, Type, [, ], toUpperBounds, =, getImplicitUpperBounds, (, toWildcardType, ), ;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds]
[;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (, type, instanceof, WildcardType, ), {, final]
[), ;, final, Type, [, ], toLowerBounds, =, getImplicitLowerBounds, (, toWildcardType, ), ;, if, (, type, instanceof, WildcardType, ), {]
[;, if, (, type, instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type, []
[), ;, if, (, type, instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type]
[), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (, wildcardType]
[instanceof, WildcardType, ), {, final, WildcardType, wildcardType, =, (, WildcardType, ), type, ;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds]
[;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (, wildcardType, ), ;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (]
[;, final, Type, [, ], upperBounds, =, getImplicitUpperBounds, (, wildcardType, ), ;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (]
[;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, ), {]
[), ;, final, Type, [, ], lowerBounds, =, getImplicitLowerBounds, (, wildcardType, ), ;, for, (, Type, toBound, :, toUpperBounds, )]
[;, for, (, Type, toBound, :, toUpperBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (]
[), ;, for, (, Type, toBound, :, toUpperBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for]
[), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {]
[=, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !]
[;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,, toBound, ,, typeVarAssigns]
[,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,]
[), ;, for, (, final, Type, bound, :, upperBounds, ), {, if, (, !, isAssignable, (, bound, ,, toBound, ,]
[), {, if, (, !, isAssignable, (, bound, ,, toBound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (]
[), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (]
[,, toBound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, )]
[,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound]
[), ), {, return, false, ;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables]
[;, }, }, }, for, (, Type, toBound, :, toLowerBounds, ), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, )]
[), {, toBound, =, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {]
[=, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !]
[;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,, bound, ,, typeVarAssigns]
[,, typeVarAssigns, ), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,]
[), ;, for, (, final, Type, bound, :, lowerBounds, ), {, if, (, !, isAssignable, (, toBound, ,, bound, ,]
[), {, if, (, !, isAssignable, (, toBound, ,, bound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, )]
[), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, )]
[,, bound, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final]
[,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds]
[;, }, }, }, return, true, ;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !]
[;, }, for, (, final, Type, toBound, :, toUpperBounds, ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (]
[), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {]
[), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable]
[), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable]
[,, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final]
[,, typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if]
[,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds]
[), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {]
[), ), {, return, false, ;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !]
[;, }, }, for, (, final, Type, toBound, :, toLowerBounds, ), {, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound]
[), {, if, (, !, isAssignable, (, substituteTypeVariables, (, toBound, ,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, ), ), {]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,]
[,, type, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean, isAssignable]
[,, typeVarAssigns, ), ,, type, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[), ,, type, ,, typeVarAssigns, ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean]
[,, typeVarAssigns, ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean, isAssignable, (, final]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, static, boolean, isAssignable, (, final, Type, type]
[;, }, }, return, true, ;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, TypeVariable, <, ?]
[;, }, private, static, boolean, isAssignable, (, final, Type, type, ,, final, TypeVariable, <, ?, >, toTypeVariable, ,, final, Map]
[), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (, toTypeVariable]
[==, null, ), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if]
[), {, return, true, ;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (, toTypeVariable]
[;, }, if, (, toTypeVariable, ==, null, ), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (, type]
[), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true, ;, }]
[==, null, ), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true]
[), {, return, false, ;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true, ;, }]
[;, }, if, (, toTypeVariable, ., equals, (, type, ), ), {, return, true, ;, }, if, (, type, instanceof]
[), {, return, true, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, final, Type, [, ]]
[., equals, (, type, ), ), {, return, true, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, )]
[), ), {, return, true, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, final, Type, []
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, final, Type, [, ], bounds, =, getImplicitBounds, (]
[), {, final, Type, [, ], bounds, =, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ;, for]
[instanceof, TypeVariable, <, ?, >, ), {, final, Type, [, ], bounds, =, getImplicitBounds, (, (, TypeVariable, <, ?, >]
[;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, )]
[), ;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns]
[), ;, for, (, final, Type, bound, :, bounds, ), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns]
[), {, if, (, isAssignable, (, bound, ,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }]
[), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType]
[,, toTypeVariable, ,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?]
[,, typeVarAssigns, ), ), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||]
[), ), {, return, true, ;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof]
[;, }, }, }, if, (, type, instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType]
[), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, Type, substituteTypeVariables]
[||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }]
[||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new]
[instanceof, Class, <, ?, >, ||, type, instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return]
[||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +]
[instanceof, ParameterizedType, ||, type, instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (]
[||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }]
[instanceof, GenericArrayType, ||, type, instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
[), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, Type, substituteTypeVariables]
[instanceof, WildcardType, ), {, return, false, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static]
[;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, Type, substituteTypeVariables, (, final, Type, type]
[;, }, private, static, Type, substituteTypeVariables, (, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,, Type]
[), ;, }, private, static, Type, substituteTypeVariables, (, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,]
[+, type, ), ;, }, private, static, Type, substituteTypeVariables, (, final, Type, type, ,, final, Map, <, TypeVariable, <, ?]
[), ;, }, private, static, Type, substituteTypeVariables, (, final, Type, type, ,, final, Map, <, TypeVariable, <, ?, >, ,]
[), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {]
[&&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType]
[instanceof, TypeVariable, <, ?, >, &&, typeVarAssigns, !=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type]
[), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {]
[!=, null, ), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null]
[), {, final, Type, replacementType, =, typeVarAssigns, ., get, (, type, ), ;, if, (, replacementType, ==, null, ), {]
[;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return, replacementType]
[., get, (, type, ), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type]
[), ;, if, (, replacementType, ==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return]
[), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return, replacementType, ;, }, return, type, ;, }]
[==, null, ), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return, replacementType, ;, }, return, type]
[), {, throw, new, IllegalArgumentException, (, "missing assignment type for type variable ", +, type, ), ;, }, return, replacementType, ;, }, return, type, ;, }]
[;, }, return, replacementType, ;, }, return, type, ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type]
[), ;, }, return, replacementType, ;, }, return, type, ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,]
[+, type, ), ;, }, return, replacementType, ;, }, return, type, ;, }, public, static, Map, <, TypeVariable, <, ?]
[), ;, }, return, replacementType, ;, }, return, type, ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,]
[;, }, return, type, ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final]
[;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, type, ), {]
[;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type, type, ,, final]
[,, getRawType, (, type, ), ,, null, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type]
[,, null, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type]
[), ,, null, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final]
[), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type, type, ,]
[;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type, type, ,, final]
[,, toClass, ,, null, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (]
[,, null, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type]
[), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, Type, type, ,]
[), {, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if]
[instanceof, Class, <, ?, >, ), {, return, getTypeArguments, (, (, Class, <, ?, >, ), type, ,, toClass, ,]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, )]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, )]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,]
[), ;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,]
[), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof]
[instanceof, ParameterizedType, ), {, return, getTypeArguments, (, (, ParameterizedType, ), type, ,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type]
[), ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), .]
[), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (]
[instanceof, GenericArrayType, ), {, return, getTypeArguments, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ,, toClass, .]
[;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, )]
[,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if]
[., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns]
[), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,]
[), ., getGenericComponentType, (, ), ,, toClass, ., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (]
[?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {]
[., isArray, (, ), ?, toClass, ., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type]
[:, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :]
[., getComponentType, (, ), :, toClass, ,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (]
[,, subtypeVarAssigns, ), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (]
[), ;, }, if, (, type, instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType]
[), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if, (, isAssignable]
[instanceof, WildcardType, ), {, for, (, final, Type, bound, :, getImplicitUpperBounds, (, (, WildcardType, ), type, ), ), {, if]
[), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if, (]
[,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;]
[), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if]
[;, }, }, return, null, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >]
[,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {]
[), ;, }, }, return, null, ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (]
[), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >, ), type, ), ), {]
[instanceof, TypeVariable, <, ?, >, ), {, for, (, final, Type, bound, :, getImplicitBounds, (, (, TypeVariable, <, ?, >]
[), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[), ), {, if, (, isAssignable, (, bound, ,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,]
[), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new]
[,, toClass, ), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;]
[), ), {, return, getTypeArguments, (, bound, ,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw]
[;, }, }, return, null, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, Map]
[,, toClass, ,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, )]
[,, subtypeVarAssigns, ), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }]
[), ;, }, }, return, null, ;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static]
[;, }, throw, new, IllegalStateException, (, "found an unhandled type: ", +, type, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >]
[;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, parameterizedType, ,, final]
[), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, parameterizedType, ,]
[+, type, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType]
[), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, final, ParameterizedType, parameterizedType, ,]
[;, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, final, Type, ownerType, =]
[), ;, if, (, !, isAssignable, (, cls, ,, toClass, ), ), {, return, null, ;, }, final, Type, ownerType]
[), {, return, null, ;, }, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable, <]
[), {, return, null, ;, }, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable, <]
[,, toClass, ), ), {, return, null, ;, }, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, Map]
[), ), {, return, null, ;, }, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable]
[;, }, final, Type, ownerType, =, parameterizedType, ., getOwnerType, (, ), ;, Map, <, TypeVariable, <, ?, >, ,, Type]
[;, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ;, if, (, ownerType, instanceof, ParameterizedType, ), {, final]
[., getOwnerType, (, ), ;, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ;, if, (, ownerType, instanceof]
[), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType]
[instanceof, ParameterizedType, ), {, final, ParameterizedType, parameterizedOwnerType, =, (, ParameterizedType, ), ownerType, ;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType]
[;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =]
[;, typeVarAssigns, =, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =]
[=, getTypeArguments, (, parameterizedOwnerType, ,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==]
[;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >]
[,, getRawType, (, parameterizedOwnerType, ), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap]
[,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >]
[), ,, subtypeVarAssigns, ), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?]
[), ;, }, else, {, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type]
[=, subtypeVarAssigns, ==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap]
[;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, []
[?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?]
[==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable]
[?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?]
[:, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, }, final, Type, [, ]]
[;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, []
[), ;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >]
[;, final, TypeVariable, <, ?, >, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;, for, (, int, i]
[., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeParams, =, cls, ., getTypeParameters, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type]
[., getTypeParameters, (, ), ;, for, (, int, i, =, 0, ;, i, <, typeParams, ., length, ;, i, ++]
[;, i, <, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;]
[;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, []
[<, typeParams, ., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, .]
[;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, []
[., length, ;, i, ++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (]
[), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,]
[++, ), {, final, Type, typeArg, =, typeArgs, [, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ]]
[;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get]
[[, i, ], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?]
[], ;, typeVarAssigns, ., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, .]
[;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType]
[., put, (, typeParams, [, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg]
[,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if]
[[, i, ], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, )]
[], ,, typeVarAssigns, ., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }]
[), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (]
[?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, )]
[., containsKey, (, typeArg, ), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass]
[), ?, typeVarAssigns, ., get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls]
[:, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return]
[., get, (, typeArg, ), :, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, ), ), {]
[), :, typeArg, ), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }]
[), ;, }, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (]
[), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, )]
[., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, )]
[), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns]
[;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, ), ;, }, private, static]
[;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, Class, <, ?, >, cls]
[,, toClass, ,, typeVarAssigns, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (]
[,, toClass, ), ,, toClass, ,, typeVarAssigns, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type]
[), ,, toClass, ,, typeVarAssigns, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments]
[,, typeVarAssigns, ), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, Class, <]
[), ;, }, private, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, getTypeArguments, (, Class, <, ?, >]
[), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (, toClass, ., isPrimitive]
[), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (, toClass, ., isPrimitive]
[,, toClass, ), ), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (]
[), ), {, return, null, ;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (, toClass, .]
[;, }, if, (, cls, ., isPrimitive, (, ), ), {, if, (, toClass, ., isPrimitive, (, ), ), {]
[), {, if, (, toClass, ., isPrimitive, (, ), ), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,]
[., isPrimitive, (, ), ), {, if, (, toClass, ., isPrimitive, (, ), ), {, return, new, HashMap, <, TypeVariable]
[), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;, }, cls, =, ClassUtils]
[., isPrimitive, (, ), ), {, return, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), ;]
[;, }, cls, =, ClassUtils, ., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,]
[=, ClassUtils, ., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns]
[;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new, HashMap]
[., primitiveToWrapper, (, cls, ), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, subtypeVarAssigns]
[), ;, }, final, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, subtypeVarAssigns, ==, null, ?, new]
[;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (]
[?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?]
[==, null, ?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable]
[?, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, ), :, new, HashMap, <, TypeVariable, <, ?]
[:, new, HashMap, <, TypeVariable, <, ?, >, ,, Type, >, (, subtypeVarAssigns, ), ;, if, (, toClass, ., equals]
[;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (]
[), ;, if, (, toClass, ., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType]
[), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, )]
[., equals, (, cls, ), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, )]
[), ), {, return, typeVarAssigns, ;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns]
[;, }, return, getTypeArguments, (, getClosestParentType, (, cls, ,, toClass, ), ,, toClass, ,, typeVarAssigns, ), ;, }, public, static]
[;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, determineTypeArguments, (, final, Class, <, ?, >]
[,, toClass, ,, typeVarAssigns, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, determineTypeArguments, (]
[,, toClass, ), ,, toClass, ,, typeVarAssigns, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type]
[), ,, toClass, ,, typeVarAssigns, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, determineTypeArguments]
[,, typeVarAssigns, ), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, determineTypeArguments, (, final, Class]
[), ;, }, public, static, Map, <, TypeVariable, <, ?, >, ,, Type, >, determineTypeArguments, (, final, Class, <, ?]
[;, if, (, !, isAssignable, (, cls, ,, superClass, ), ), {, return, null, ;, }, if, (, cls, .]
[), ;, if, (, !, isAssignable, (, cls, ,, superClass, ), ), {, return, null, ;, }, if, (, cls]
[), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType]
[), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType]
[,, superClass, ), ), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return]
[), ), {, return, null, ;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (]
[;, }, if, (, cls, ., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType, ,, superClass, ,, null]
[), {, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls]
[., equals, (, superClass, ), ), {, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type]
[), ), {, return, getTypeArguments, (, superType, ,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (]
[;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (, midType, instanceof, Class, <, ?]
[,, superClass, ,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (]
[,, null, ), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (, midType, instanceof]
[), ;, }, final, Type, midType, =, getClosestParentType, (, cls, ,, superClass, ), ;, if, (, midType, instanceof, Class, <]
[;, if, (, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <, ?, >, )]
[,, superClass, ), ;, if, (, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <]
[), ;, if, (, midType, instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <, ?, >]
[), {, return, determineTypeArguments, (, (, Class, <, ?, >, ), midType, ,, superType, ), ;, }, final, ParameterizedType, midParameterizedType]
[instanceof, Class, <, ?, >, ), {, return, determineTypeArguments, (, (, Class, <, ?, >, ), midType, ,, superType, )]
[;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass, =, getRawType, (]
[,, superType, ), ;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass]
[,, superType, ), ;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass]
[), ;, }, final, ParameterizedType, midParameterizedType, =, (, ParameterizedType, ), midType, ;, final, Class, <, ?, >, midClass, =, getRawType]
[;, final, Class, <, ?, >, midClass, =, getRawType, (, midParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >]
[;, final, Class, <, ?, >, midClass, =, getRawType, (, midParameterizedType, ), ;, final, Map, <, TypeVariable, <, ?, >]
[;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, ), ;]
[), ;, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, determineTypeArguments, (, midClass, ,, superType, )]
[;, mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,, typeVarAssigns, ), ;, return, typeVarAssigns, ;, }, private, static, <, T, >, void]
[,, superType, ), ;, mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,, typeVarAssigns, ), ;, return, typeVarAssigns, ;, }, private, static, <]
[), ;, mapTypeVariablesToArguments, (, cls, ,, midParameterizedType, ,, typeVarAssigns, ), ;, return, typeVarAssigns, ;, }, private, static, <, T, >]
[;, return, typeVarAssigns, ;, }, private, static, <, T, >, void, mapTypeVariablesToArguments, (, final, Class, <, T, >, cls, ,]
[,, midParameterizedType, ,, typeVarAssigns, ), ;, return, typeVarAssigns, ;, }, private, static, <, T, >, void, mapTypeVariablesToArguments, (, final, Class]
[,, typeVarAssigns, ), ;, return, typeVarAssigns, ;, }, private, static, <, T, >, void, mapTypeVariablesToArguments, (, final, Class, <, T]
[), ;, return, typeVarAssigns, ;, }, private, static, <, T, >, void, mapTypeVariablesToArguments, (, final, Class, <, T, >, cls]
[;, }, private, static, <, T, >, void, mapTypeVariablesToArguments, (, final, Class, <, T, >, cls, ,, final, ParameterizedType, parameterizedType]
[;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;]
[., getOwnerType, (, ), ;, if, (, ownerType, instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType]
[), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs]
[instanceof, ParameterizedType, ), {, mapTypeVariablesToArguments, (, cls, ,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;, }, final, Type, []
[;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, []
[,, (, ParameterizedType, ), ownerType, ,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (]
[,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <]
[,, typeVarAssigns, ), ;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <]
[), ;, }, final, Type, [, ], typeArgs, =, parameterizedType, ., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >]
[;, final, TypeVariable, <, ?, >, [, ], typeVars, =, getRawType, (, parameterizedType, ), ., getTypeParameters, (, ), ;, final]
[., getActualTypeArguments, (, ), ;, final, TypeVariable, <, ?, >, [, ], typeVars, =, getRawType, (, parameterizedType, ), ., getTypeParameters]
[;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =, Arrays, ., asList, (, cls, .]
[., getTypeParameters, (, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =, Arrays, .]
[), ., getTypeParameters, (, ), ;, final, List, <, TypeVariable, <, Class, <, T, >, >, >, typeVarList, =, Arrays]
[;, for, (, int, i, =, 0, ;, i, <, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable]
[., asList, (, cls, ., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, typeArgs]
[), ;, for, (, int, i, =, 0, ;, i, <, typeArgs, ., length, ;, i, ++, ), {, final]
[., getTypeParameters, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, typeArgs, ., length, ;, i]
[;, i, <, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, []
[;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg]
[<, typeArgs, ., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ]]
[;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg]
[., length, ;, i, ++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final]
[), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs, []
[++, ), {, final, TypeVariable, <, ?, >, typeVar, =, typeVars, [, i, ], ;, final, Type, typeArg, =, typeArgs]
[;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns]
[[, i, ], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg]
[], ;, final, Type, typeArg, =, typeArgs, [, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&]
[;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, .]
[[, i, ], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), )]
[], ;, if, (, typeVarList, ., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns]
[), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (, typeVar, )]
[&&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg]
[., contains, (, typeArg, ), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable]
[), &&, typeVarAssigns, ., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, )]
[), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (, typeVar, )]
[., containsKey, (, typeVar, ), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns]
[), ), {, typeVarAssigns, ., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (, typeVar]
[;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <, ?, >, cls, ,, final, Class, <, ?]
[., put, (, (, TypeVariable, <, ?, >, ), typeArg, ,, typeVarAssigns, ., get, (, typeVar, ), ), ;, }]
[,, typeVarAssigns, ., get, (, typeVar, ), ), ;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <]
[,, typeVarAssigns, ., get, (, typeVar, ), ), ;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <]
[), ;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <, ?, >, cls, ,, final, Class, <]
[., get, (, typeVar, ), ), ;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <, ?, >]
[), ), ;, }, }, }, private, static, Type, getClosestParentType, (, final, Class, <, ?, >, cls, ,, final, Class]
[), {, final, Type, [, ], interfaceTypes, =, cls, ., getGenericInterfaces, (, ), ;, Type, genericInterface, =, null, ;, for]
[., isInterface, (, ), ), {, final, Type, [, ], interfaceTypes, =, cls, ., getGenericInterfaces, (, ), ;, Type, genericInterface]
[;, Type, genericInterface, =, null, ;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass]
[., getGenericInterfaces, (, ), ;, Type, genericInterface, =, null, ;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class]
[;, for, (, final, Type, midType, :, interfaceTypes, ), {, Class, <, ?, >, midClass, =, null, ;, if, (]
[), {, Class, <, ?, >, midClass, =, null, ;, if, (, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType]
[;, if, (, midType, instanceof, ParameterizedType, ), {, midClass, =, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else]
[), {, midClass, =, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (, midType, instanceof, Class, <]
[instanceof, ParameterizedType, ), {, midClass, =, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (, midType, instanceof]
[=, getRawType, (, (, ParameterizedType, ), midType, ), ;, }, else, if, (, midType, instanceof, Class, <, ?, >, )]
[;, }, else, if, (, midType, instanceof, Class, <, ?, >, ), {, midClass, =, (, Class, <, ?, >]
[), ;, }, else, if, (, midType, instanceof, Class, <, ?, >, ), {, midClass, =, (, Class, <, ?]
[), ;, }, else, if, (, midType, instanceof, Class, <, ?, >, ), {, midClass, =, (, Class, <, ?]
[), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic"]
[instanceof, Class, <, ?, >, ), {, midClass, =, (, Class, <, ?, >, ), midType, ;, }, else, {]
[=, (, Class, <, ?, >, ), midType, ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (]
[;, }, else, {, throw, new, IllegalStateException, (, "Unexpected generic", +, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (]
[;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, )]
[), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass]
[+, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type]
[+, " interface type found: ", +, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,]
[+, midType, ), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type]
[), ;, }, if, (, isAssignable, (, midClass, ,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass]
[), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }]
[&&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (]
[,, superClass, ), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }]
[), &&, isAssignable, (, genericInterface, ,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if]
[), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }]
[,, (, Type, ), midClass, ), ), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, )]
[), ), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }]
[), ), {, genericInterface, =, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }]
[=, midType, ;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }, return, cls, .]
[;, }, }, if, (, genericInterface, !=, null, ), {, return, genericInterface, ;, }, }, return, cls, ., getGenericSuperclass, (]
[), {, return, genericInterface, ;, }, }, return, cls, ., getGenericSuperclass, (, ), ;, }, public, static, boolean, isInstance, (]
[!=, null, ), {, return, genericInterface, ;, }, }, return, cls, ., getGenericSuperclass, (, ), ;, }, public, static, boolean]
[), {, return, genericInterface, ;, }, }, return, cls, ., getGenericSuperclass, (, ), ;, }, public, static, boolean, isInstance, (]
[;, }, }, return, cls, ., getGenericSuperclass, (, ), ;, }, public, static, boolean, isInstance, (, final, Object, value, ,]
[;, }, public, static, boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {, if, (, type, ==]
[., getGenericSuperclass, (, ), ;, }, public, static, boolean, isInstance, (, final, Object, value, ,, final, Type, type, ), {]
[), {, return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, )]
[==, null, ), {, return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?]
[), {, return, false, ;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, )]
[;, }, return, value, ==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (]
[;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (, bounds, .]
[?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type]
[==, null, ?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >]
[?, !, (, type, instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type]
[:, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }, public, static, Type, [, ]]
[||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value, .]
[||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value, .]
[), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (, ), :, isAssignable, (, value]
[instanceof, Class, <, ?, >, ), ||, !, (, (, Class, <, ?, >, ), type, ), ., isPrimitive, (]
[:, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }, public, static, Type, [, ]]
[:, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }, public, static, Type, [, ]]
[., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }, public]
[), ., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }]
[), ., isPrimitive, (, ), :, isAssignable, (, value, ., getClass, (, ), ,, type, ,, null, ), ;, }]
[;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (, bounds, .]
[,, type, ,, null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, )]
[., getClass, (, ), ,, type, ,, null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type]
[,, null, ), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if]
[), ;, }, public, static, Type, [, ], normalizeUpperBounds, (, final, Type, [, ], bounds, ), {, if, (, bounds]
[), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >, (, bounds]
[<, 2, ), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >]
[., length, <, 2, ), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <]
[), {, return, bounds, ;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >, (, bounds]
[;, }, final, Set, <, Type, >, types, =, new, HashSet, <, Type, >, (, bounds, ., length, ), ;]
[;, for, (, final, Type, type1, :, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2]
[), ;, for, (, final, Type, type1, :, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (, final, Type]
[., length, ), ;, for, (, final, Type, type1, :, bounds, ), {, boolean, subtypeFound, =, false, ;, for, (]
[), {, boolean, subtypeFound, =, false, ;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=]
[;, for, (, final, Type, type2, :, bounds, ), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,]
[), {, if, (, type1, !=, type2, &&, isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =]
[), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (]
[&&, isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if]
[!=, type2, &&, isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }]
[&&, isAssignable, (, type2, ,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if]
[), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (]
[,, type1, ,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, )]
[,, null, ), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types]
[), ), {, subtypeFound, =, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add]
[=, true, ;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (, type1, ), ;]
[;, break, ;, }, }, if, (, !, subtypeFound, ), {, types, ., add, (, type1, ), ;, }, }]
[), {, types, ., add, (, type1, ), ;, }, }, return, types, ., toArray, (, new, Type, [, types]
[), {, types, ., add, (, type1, ), ;, }, }, return, types, ., toArray, (, new, Type, [, types]
[;, }, }, return, types, ., toArray, (, new, Type, [, types, ., size, (, ), ], ), ;, }]
[., add, (, type1, ), ;, }, }, return, types, ., toArray, (, new, Type, [, types, ., size, (]
[), ;, }, }, return, types, ., toArray, (, new, Type, [, types, ., size, (, ), ], ), ;]
[;, }, public, static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >, typeVariable, ), {, final, Type, []
[., toArray, (, new, Type, [, types, ., size, (, ), ], ), ;, }, public, static, Type, [, ]]
[), ;, }, public, static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >, typeVariable, ), {, final, Type]
[], ), ;, }, public, static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >, typeVariable, ), {, final]
[., size, (, ), ], ), ;, }, public, static, Type, [, ], getImplicitBounds, (, final, TypeVariable, <, ?, >]
[;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (]
[., getBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class]
[;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type]
[==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public]
[., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;]
[?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type]
[:, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final]
[:, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final]
[}, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {]
[;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[), ;, }, public, static, Type, [, ], getImplicitUpperBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds]
[;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (]
[., getUpperBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, Object, ., class]
[;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type]
[==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public]
[., length, ==, 0, ?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;]
[?, new, Type, [, ], {, Object, ., class, }, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type]
[:, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final]
[:, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final]
[}, :, normalizeUpperBounds, (, bounds, ), ;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {]
[;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds, =]
[), ;, }, public, static, Type, [, ], getImplicitLowerBounds, (, final, WildcardType, wildcardType, ), {, final, Type, [, ], bounds]
[;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, null, }, :, bounds, ;, }, public]
[., getLowerBounds, (, ), ;, return, bounds, ., length, ==, 0, ?, new, Type, [, ], {, null, }, :]
[;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {]
[?, new, Type, [, ], {, null, }, :, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <]
[==, 0, ?, new, Type, [, ], {, null, }, :, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final]
[., length, ==, 0, ?, new, Type, [, ], {, null, }, :, bounds, ;, }, public, static, boolean, typesSatisfyVariables]
[?, new, Type, [, ], {, null, }, :, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <]
[:, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns]
[:, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns]
[}, :, bounds, ;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <, TypeVariable, <, ?, >, ,, Type, >]
[;, }, public, static, boolean, typesSatisfyVariables, (, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, ), {]
[), {, final, TypeVariable, <, ?, >, typeVar, =, entry, ., getKey, (, ), ;, final, Type, type, =, entry]
[., entrySet, (, ), ), {, final, TypeVariable, <, ?, >, typeVar, =, entry, ., getKey, (, ), ;, final]
[;, final, Type, type, =, entry, ., getValue, (, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar]
[., getKey, (, ), ;, final, Type, type, =, entry, ., getValue, (, ), ;, for, (, final, Type, bound]
[;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !, isAssignable, (, type, ,]
[., getValue, (, ), ;, for, (, final, Type, bound, :, getImplicitBounds, (, typeVar, ), ), {, if, (, !]
[), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {]
[), ), {, if, (, !, isAssignable, (, type, ,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), )]
[), {, return, false, ;, }, }, }, return, true, ;, }, private, static, Class, <, ?, >, getRawType, (]
[), {, return, false, ;, }, }, }, return, true, ;, }, private, static, Class, <, ?, >, getRawType, (]
[,, substituteTypeVariables, (, bound, ,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true]
[,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, private, static, Class, <, ?]
[,, typeVarAssigns, ), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, private, static]
[), ,, typeVarAssigns, ), ), {, return, false, ;, }, }, }, return, true, ;, }, private, static, Class, <]
[), ), {, return, false, ;, }, }, }, return, true, ;, }, private, static, Class, <, ?, >, getRawType]
[;, }, }, }, return, true, ;, }, private, static, Class, <, ?, >, getRawType, (, final, ParameterizedType, parameterizedType, )]
[;, }, private, static, Class, <, ?, >, getRawType, (, final, ParameterizedType, parameterizedType, ), {, final, Type, rawType, =, parameterizedType]
[;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +]
[., getRawType, (, ), ;, if, (, !, (, rawType, instanceof, Class, <, ?, >, ), ), {, throw, new]
[), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return, (, Class, <, ?, >, ), rawType]
[), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return, (, Class, <, ?, >, ), rawType]
[), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return, (, Class, <, ?, >, )]
[instanceof, Class, <, ?, >, ), ), {, throw, new, IllegalStateException, (, "Wait... What!? Type of rawType: ", +, rawType, ), ;, }, return, (]
[;, }, return, (, Class, <, ?, >, ), rawType, ;, }, public, static, Class, <, ?, >, getRawType, (]
[), ;, }, return, (, Class, <, ?, >, ), rawType, ;, }, public, static, Class, <, ?, >, getRawType]
[+, rawType, ), ;, }, return, (, Class, <, ?, >, ), rawType, ;, }, public, static, Class, <, ?]
[), ;, }, return, (, Class, <, ?, >, ), rawType, ;, }, public, static, Class, <, ?, >, getRawType]
[;, }, public, static, Class, <, ?, >, getRawType, (, final, Type, type, ,, final, Type, assigningType, ), {, if]
[;, }, public, static, Class, <, ?, >, getRawType, (, final, Type, type, ,, final, Type, assigningType, ), {, if]
[), {, return, (, Class, <, ?, >, ), type, ;, }, if, (, type, instanceof, ParameterizedType, ), {, return]
[instanceof, Class, <, ?, >, ), {, return, (, Class, <, ?, >, ), type, ;, }, if, (, type]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if]
[;, }, if, (, type, instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if]
[), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >]
[instanceof, ParameterizedType, ), {, return, getRawType, (, (, ParameterizedType, ), type, ), ;, }, if, (, type, instanceof, TypeVariable, <]
[;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==, null, ), {, return]
[), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==, null, ), {]
[), ;, }, if, (, type, instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==, null, ), {]
[), {, if, (, assigningType, ==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =, (, (, TypeVariable]
[instanceof, TypeVariable, <, ?, >, ), {, if, (, assigningType, ==, null, ), {, return, null, ;, }, final, Object]
[), {, return, null, ;, }, final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), .]
[==, null, ), {, return, null, ;, }, final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type]
[), {, return, null, ;, }, final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), .]
[;, }, final, Object, genericDeclaration, =, (, (, TypeVariable, <, ?, >, ), type, ), ., getGenericDeclaration, (, ), ;]
[;, if, (, !, (, genericDeclaration, instanceof, Class, <, ?, >, ), ), {, return, null, ;, }, final, Map]
[., getGenericDeclaration, (, ), ;, if, (, !, (, genericDeclaration, instanceof, Class, <, ?, >, ), ), {, return, null]
[), ., getGenericDeclaration, (, ), ;, if, (, !, (, genericDeclaration, instanceof, Class, <, ?, >, ), ), {, return]
[), ., getGenericDeclaration, (, ), ;, if, (, !, (, genericDeclaration, instanceof, Class, <, ?, >, ), ), {, return]
[), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (]
[), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (]
[), ), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments]
[instanceof, Class, <, ?, >, ), ), {, return, null, ;, }, final, Map, <, TypeVariable, <, ?, >, ,]
[;, }, final, Map, <, TypeVariable, <, ?, >, ,, Type, >, typeVarAssigns, =, getTypeArguments, (, assigningType, ,, (, Class]
[;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (]
[,, (, Class, <, ?, >, ), genericDeclaration, ), ;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;]
[), ;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get]
[), ;, if, (, typeVarAssigns, ==, null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get]
[), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument]
[==, null, ), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if]
[), {, return, null, ;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument]
[;, }, final, Type, typeArgument, =, typeVarAssigns, ., get, (, type, ), ;, if, (, typeArgument, ==, null, ), {]
[;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;]
[., get, (, type, ), ;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (]
[), ;, if, (, typeArgument, ==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, )]
[), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType]
[==, null, ), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (, type]
[), {, return, null, ;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType]
[;, }, return, getRawType, (, typeArgument, ,, assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (, (]
[,, assigningType, ), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType]
[), ;, }, if, (, type, instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (]
[), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (]
[instanceof, GenericArrayType, ), {, final, Class, <, ?, >, rawComponentType, =, getRawType, (, (, (, GenericArrayType, ), type, ), .]
[;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (, type, instanceof]
[,, assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if]
[., getGenericComponentType, (, ), ,, assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (]
[), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass]
[), ., getGenericComponentType, (, ), ,, assigningType, ), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass]
[), ;, return, Array, ., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (, type]
[;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException, (, "unknown type: ", +, type]
[., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException]
[., newInstance, (, rawComponentType, ,, 0, ), ., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {]
[,, 0, ), ., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }]
[), ., getClass, (, ), ;, }, if, (, type, instanceof, WildcardType, ), {, return, null, ;, }, throw, new]
[), {, return, null, ;, }, throw, new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static, boolean, isArrayType]
[instanceof, WildcardType, ), {, return, null, ;, }, throw, new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static]
[;, }, throw, new, IllegalArgumentException, (, "unknown type: ", +, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type]
[;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof, Class]
[), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof]
[+, type, ), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||]
[), ;, }, public, static, boolean, isArrayType, (, final, Type, type, ), {, return, type, instanceof, GenericArrayType, ||, type, instanceof]
[;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type, instanceof, Class, <, ?, >]
[||, type, instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, ), type, ), ., isArray, (]
[instanceof, GenericArrayType, ||, type, instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, ), type, ), .]
[;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type, instanceof, Class, <, ?, >]
[&&, (, (, Class, <, ?, >, ), type, ), ., isArray, (, ), ;, }, public, static, Type, getArrayComponentType]
[instanceof, Class, <, ?, >, &&, (, (, Class, <, ?, >, ), type, ), ., isArray, (, ), ;]
[;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type, instanceof, Class, <, ?, >]
[., isArray, (, ), ;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type, instanceof]
[), ., isArray, (, ), ;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type]
[), ., isArray, (, ), ;, }, public, static, Type, getArrayComponentType, (, final, Type, type, ), {, if, (, type]
[), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, ), type, ;, return, clazz, .]
[instanceof, Class, <, ?, >, ), {, final, Class, <, ?, >, clazz, =, (, Class, <, ?, >, )]
[;, return, clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type]
[;, return, clazz, ., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (]
[., isArray, (, ), ?, clazz, ., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, )]
[:, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType]
[., getComponentType, (, ), :, null, ;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, )]
[;, }, if, (, type, instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, )]
[), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ;, }, return, null, ;, }, }]
[instanceof, GenericArrayType, ), {, return, (, (, GenericArrayType, ), type, ), ., getGenericComponentType, (, ), ;, }, return, null, ;]
[;, }, return, null, ;, }, }]
[., getGenericComponentType, (, ), ;, }, return, null, ;, }, }]
[), ., getGenericComponentType, (, ), ;, }, return, null, ;, }, }]
[), ., getGenericComponentType, (, ), ;, }, return, null, ;, }, }]
[;, }, }]
