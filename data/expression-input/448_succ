[;, private, boolean, resolved, =, false, ;, private, JSType, resolveResult, =, null, ;, private, final, ImmutableList, <, String, >, templateKeys]
[;, private, JSType, resolveResult, =, null, ;, private, final, ImmutableList, <, String, >, templateKeys, ;, private, final, ImmutableList, <, JSType]
[;, private, final, ImmutableList, <, String, >, templateKeys, ;, private, final, ImmutableList, <, JSType, >, templatizedTypes, ;, private, boolean, inTemplatedCheckVisit]
[;, private, static, final, CanCastToVisitor, CAN_CAST_TO_VISITOR, =, new, CanCastToVisitor, (, ), ;, public, static, final, String, UNKNOWN_NAME, =, "Unknown class name", ;]
[;, public, static, final, String, UNKNOWN_NAME, =, "Unknown class name", ;, public, static, final, String, NOT_A_CLASS, =, "Not declared as a constructor", ;, public, static, final]
[;, public, static, final, String, NOT_A_CLASS, =, "Not declared as a constructor", ;, public, static, final, String, NOT_A_TYPE, =, "Not declared as a type name", ;, public, static, final]
[;, public, static, final, String, NOT_A_TYPE, =, "Not declared as a type name", ;, public, static, final, String, EMPTY_TYPE_COMPONENT, =, "Named type with empty name component", ;, static, final, Comparator]
[;, public, static, final, String, EMPTY_TYPE_COMPONENT, =, "Named type with empty name component", ;, static, final, Comparator, <, JSType, >, ALPHA, =, new, Comparator, <]
[;, static, final, Comparator, <, JSType, >, ALPHA, =, new, Comparator, <, JSType, >, (, ), {, @, Override, public]
[;, public, static, final, int, ENUMDECL, =, 1, ;, public, static, final, int, NOT_ENUMDECL, =, 0, ;, final, JSTypeRegistry, registry]
[;, }, }, ;, public, static, final, int, ENUMDECL, =, 1, ;, public, static, final, int, NOT_ENUMDECL, =, 0, ;]
[., compareTo, (, t2, ., toString, (, ), ), ;, }, }, ;, public, static, final, int, ENUMDECL, =, 1]
[., toString, (, ), ., compareTo, (, t2, ., toString, (, ), ), ;, }, }, ;, public, static, final]
[), ;, }, }, ;, public, static, final, int, ENUMDECL, =, 1, ;, public, static, final, int, NOT_ENUMDECL, =, 0]
[., toString, (, ), ), ;, }, }, ;, public, static, final, int, ENUMDECL, =, 1, ;, public, static, final]
[;, public, static, final, int, NOT_ENUMDECL, =, 0, ;, final, JSTypeRegistry, registry, ;, JSType, (, JSTypeRegistry, registry, ), {, this]
[;, final, JSTypeRegistry, registry, ;, JSType, (, JSTypeRegistry, registry, ), {, this, (, registry, ,, null, ,, null, ), ;]
[,, null, ,, null, ), ;, }, JSType, (, JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <]
[,, null, ), ;, }, JSType, (, JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <, JSType, >]
[), ;, }, JSType, (, JSTypeRegistry, registry, ,, ImmutableList, <, String, >, templateKeys, ,, ImmutableList, <, JSType, >, templatizedTypes, )]
[=, registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength]
[., registry, =, registry, ;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;]
[;, int, keysLength, =, templateKeys, ==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes]
[;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >]
[?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, .]
[==, null, ?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :]
[?, 0, :, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, .]
[:, templateKeys, ., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (]
[;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >]
[., size, (, ), ;, int, typesLength, =, templatizedTypes, ==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;]
[;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength]
[?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (]
[==, null, ?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new]
[?, 0, :, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (]
[:, templatizedTypes, ., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", )]
[;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength]
[., size, (, ), ;, if, (, typesLength, >, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }]
[), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, .]
[>, keysLength, ), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <, keysLength, ), {]
[), {, throw, new, IllegalArgumentException, (, "Cannot have more templatized types than template keys", ), ;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, .]
[;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, .]
[), ;, }, else, if, (, typesLength, <, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList]
[), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >]
[<, keysLength, ), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (]
[), {, ImmutableList, ., Builder, <, JSType, >, builder, =, ImmutableList, ., builder, (, ), ;, if, (, typesLength, >]
[;, if, (, typesLength, >, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i]
[., builder, (, ), ;, if, (, typesLength, >, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }]
[), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength]
[>, 0, ), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i]
[), {, builder, ., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength]
[;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder]
[., addAll, (, templatizedTypes, ), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, keysLength, -, typesLength, ;, i, ++, ), {]
[;, i, <, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative]
[;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }]
[<, keysLength, -, typesLength, ;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE]
[;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }]
[-, typesLength, ;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), )]
[;, i, ++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }]
[), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder]
[++, ), {, builder, ., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =]
[;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==]
[., add, (, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (]
[), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else]
[), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&]
[., UNKNOWN_TYPE, ), ), ;, }, templatizedTypes, =, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==]
[=, builder, ., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {]
[;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (]
[., build, (, ), ;, }, else, if, (, keysLength, ==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =]
[), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this]
[&&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (]
[==, 0, &&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, .]
[&&, typesLength, ==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (]
[), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this]
[==, 0, ), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;]
[), {, templateKeys, =, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this]
[=, ImmutableList, ., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =]
[;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =]
[., of, (, ), ;, templatizedTypes, =, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;]
[=, ImmutableList, ., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;]
[;, }, this, ., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId]
[., of, (, ), ;, }, this, ., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType]
[=, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, .]
[., templateKeys, =, templateKeys, ;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return]
[;, this, ., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (]
[=, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (, typeId, ), ;, }]
[., templatizedTypes, =, templatizedTypes, ;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (, typeId, )]
[;, }, JSType, getNativeType, (, JSTypeNative, typeId, ), {, return, registry, ., getNativeType, (, typeId, ), ;, }, public, JSDocInfo]
[;, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, public, String, getDisplayName, (, ), {, return, null]
[., getNativeType, (, typeId, ), ;, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, public, String, getDisplayName]
[), ;, }, public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, public, String, getDisplayName, (, ), {, return]
[;, }, public, String, getDisplayName, (, ), {, return, null, ;, }, public, boolean, hasDisplayName, (, ), {, String, displayName]
[;, }, public, boolean, hasDisplayName, (, ), {, String, displayName, =, getDisplayName, (, ), ;, return, displayName, !=, null, &&]
[;, return, displayName, !=, null, &&, !, displayName, ., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname]
[;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;, }, public, boolean, isNoType, (, ), {]
[&&, !, displayName, ., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;]
[!=, null, &&, !, displayName, ., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname, ), {, return]
[&&, !, displayName, ., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;]
[;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;, }, public, boolean, isNoType, (, ), {]
[;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;, }, public, boolean, isNoType, (, ), {]
[., isEmpty, (, ), ;, }, public, boolean, hasProperty, (, String, pname, ), {, return, false, ;, }, public, boolean]
[;, }, public, boolean, isNoType, (, ), {, return, false, ;, }, public, boolean, isNoResolvedType, (, ), {, return, false]
[;, }, public, boolean, isNoResolvedType, (, ), {, return, false, ;, }, public, boolean, isNoObjectType, (, ), {, return, false]
[;, }, public, boolean, isNoObjectType, (, ), {, return, false, ;, }, public, final, boolean, isEmptyType, (, ), {, return]
[;, }, public, final, boolean, isEmptyType, (, ), {, return, isNoType, (, ), ||, isNoObjectType, (, ), ||, isNoResolvedType, (]
[;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, ), {, return, false]
[||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, )]
[||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public]
[||, isNoObjectType, (, ), ||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this]
[||, isNoResolvedType, (, ), ||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public]
[||, (, registry, ., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, )]
[;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, ), {, return, false]
[), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, ), {, return]
[==, this, ), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, )]
[., getNativeFunctionType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false]
[), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (]
[., LEAST_FUNCTION_TYPE, ), ==, this, ), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean]
[), ;, }, public, boolean, isNumberObjectType, (, ), {, return, false, ;, }, public, boolean, isNumberValueType, (, ), {, return]
[;, }, public, boolean, isNumberValueType, (, ), {, return, false, ;, }, public, boolean, isFunctionPrototypeType, (, ), {, return, false]
[;, }, public, boolean, isFunctionPrototypeType, (, ), {, return, false, ;, }, public, boolean, isStringObjectType, (, ), {, return, false]
[;, }, public, boolean, isStringObjectType, (, ), {, return, false, ;, }, boolean, isTheObjectType, (, ), {, return, false, ;]
[;, }, boolean, isTheObjectType, (, ), {, return, false, ;, }, public, boolean, isStringValueType, (, ), {, return, false, ;]
[;, }, public, boolean, isStringValueType, (, ), {, return, false, ;, }, public, final, boolean, isString, (, ), {, return]
[;, }, public, final, boolean, isString, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;]
[;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NUMBER_VALUE_OR_OBJECT_TYPE, ), ), ;]
[), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NUMBER_VALUE_OR_OBJECT_TYPE, ), )]
[), ), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NUMBER_VALUE_OR_OBJECT_TYPE, )]
[., STRING_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, final, boolean, isNumber, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, .]
[;, }, public, boolean, isArrayType, (, ), {, return, false, ;, }, public, boolean, isBooleanObjectType, (, ), {, return, false]
[), ;, }, public, boolean, isArrayType, (, ), {, return, false, ;, }, public, boolean, isBooleanObjectType, (, ), {, return]
[), ), ;, }, public, boolean, isArrayType, (, ), {, return, false, ;, }, public, boolean, isBooleanObjectType, (, ), {]
[., NUMBER_VALUE_OR_OBJECT_TYPE, ), ), ;, }, public, boolean, isArrayType, (, ), {, return, false, ;, }, public, boolean, isBooleanObjectType, (]
[;, }, public, boolean, isBooleanObjectType, (, ), {, return, false, ;, }, public, boolean, isBooleanValueType, (, ), {, return, false]
[;, }, public, boolean, isBooleanValueType, (, ), {, return, false, ;, }, public, boolean, isRegexpType, (, ), {, return, false]
[;, }, public, boolean, isRegexpType, (, ), {, return, false, ;, }, public, boolean, isDateType, (, ), {, return, false]
[;, }, public, boolean, isDateType, (, ), {, return, false, ;, }, public, boolean, isNullType, (, ), {, return, false]
[;, }, public, boolean, isNullType, (, ), {, return, false, ;, }, public, boolean, isVoidType, (, ), {, return, false]
[;, }, public, boolean, isVoidType, (, ), {, return, false, ;, }, public, boolean, isAllType, (, ), {, return, false]
[;, }, public, boolean, isAllType, (, ), {, return, false, ;, }, public, boolean, isUnknownType, (, ), {, return, false]
[;, }, public, boolean, isUnknownType, (, ), {, return, false, ;, }, public, boolean, isCheckedUnknownType, (, ), {, return, false]
[;, }, public, boolean, isCheckedUnknownType, (, ), {, return, false, ;, }, public, final, boolean, isUnionType, (, ), {, return]
[;, }, public, final, boolean, isUnionType, (, ), {, return, toMaybeUnionType, (, ), !=, null, ;, }, public, boolean, isStruct]
[;, }, public, boolean, isStruct, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (]
[!=, null, ;, }, public, boolean, isStruct, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =]
[;, }, public, boolean, isStruct, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isStruct, (]
[;, if, (, iproto, !=, null, &&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor]
[., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isStruct, (, ), ), {, return, true]
[), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null]
[&&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, )]
[!=, null, &&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor]
[&&, iproto, ., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, )]
[), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null]
[., isStruct, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if]
[;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info]
[;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, )]
[), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesStructs, (]
[==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, .]
[), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesStructs, (]
[;, return, info, !=, null, &&, info, ., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesStructs, (, ), ;, }, else, {, return]
[;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return, false, ;, }, public, boolean, isDict]
[&&, info, ., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return]
[!=, null, &&, info, ., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }]
[&&, info, ., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return]
[;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return, false, ;, }, public, boolean, isDict]
[., makesStructs, (, ), ;, }, else, {, return, ctor, ., makesStructs, (, ), ;, }, }, return, false, ;]
[;, }, }, return, false, ;, }, public, boolean, isDict, (, ), {, if, (, isObject, (, ), ), {]
[., makesStructs, (, ), ;, }, }, return, false, ;, }, public, boolean, isDict, (, ), {, if, (, isObject]
[;, }, public, boolean, isDict, (, ), {, if, (, isObject, (, ), ), {, ObjectType, objType, =, toObjectType, (]
[), {, ObjectType, objType, =, toObjectType, (, ), ;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (]
[;, ObjectType, iproto, =, objType, ., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isDict, (]
[;, if, (, iproto, !=, null, &&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor]
[., getImplicitPrototype, (, ), ;, if, (, iproto, !=, null, &&, iproto, ., isDict, (, ), ), {, return, true]
[), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null]
[&&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, )]
[!=, null, &&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor]
[&&, iproto, ., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, )]
[), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null]
[., isDict, (, ), ), {, return, true, ;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if]
[;, }, FunctionType, ctor, =, objType, ., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info]
[;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=]
[., getConstructor, (, ), ;, if, (, ctor, ==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, )]
[), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesDicts, (]
[==, null, ), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, .]
[), {, JSDocInfo, info, =, objType, ., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesDicts, (]
[;, return, info, !=, null, &&, info, ., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., makesDicts, (, ), ;, }, else, {, return]
[;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return, false, ;, }, public, UnionType, toMaybeUnionType]
[&&, info, ., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return]
[!=, null, &&, info, ., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }]
[&&, info, ., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return]
[;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return, false, ;, }, public, UnionType, toMaybeUnionType]
[., makesDicts, (, ), ;, }, else, {, return, ctor, ., makesDicts, (, ), ;, }, }, return, false, ;]
[;, }, }, return, false, ;, }, public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean]
[., makesDicts, (, ), ;, }, }, return, false, ;, }, public, UnionType, toMaybeUnionType, (, ), {, return, null, ;]
[;, }, public, UnionType, toMaybeUnionType, (, ), {, return, null, ;, }, public, final, boolean, isGlobalThisType, (, ), {, return]
[;, }, public, final, boolean, isGlobalThisType, (, ), {, return, this, ==, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, )]
[;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=, null, ;, }, public, FunctionType, toMaybeFunctionType]
[==, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType]
[;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=, null, ;, }, public, FunctionType, toMaybeFunctionType]
[., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, )]
[), ;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=, null, ;, }, public, FunctionType]
[., GLOBAL_THIS, ), ;, }, public, final, boolean, isFunctionType, (, ), {, return, toMaybeFunctionType, (, ), !=, null, ;, }]
[;, }, public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, )]
[!=, null, ;, }, public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType]
[;, }, public, FunctionType, toMaybeFunctionType, (, ), {, return, null, ;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, )]
[;, }, public, static, FunctionType, toMaybeFunctionType, (, JSType, type, ), {, return, type, ==, null, ?, null, :, type, .]
[;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=, null, ;, }, public, EnumElementType, toMaybeEnumElementType]
[?, null, :, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (]
[==, null, ?, null, :, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return]
[?, null, :, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (]
[:, type, ., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=]
[;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=, null, ;, }, public, EnumElementType, toMaybeEnumElementType]
[., toMaybeFunctionType, (, ), ;, }, public, final, boolean, isEnumElementType, (, ), {, return, toMaybeEnumElementType, (, ), !=, null, ;]
[;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {, return, toMaybeEnumType]
[!=, null, ;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {]
[;, }, public, EnumElementType, toMaybeEnumElementType, (, ), {, return, null, ;, }, public, boolean, isEnumType, (, ), {, return, toMaybeEnumType]
[;, }, public, boolean, isEnumType, (, ), {, return, toMaybeEnumType, (, ), !=, null, ;, }, public, EnumType, toMaybeEnumType, (]
[;, }, public, EnumType, toMaybeEnumType, (, ), {, return, null, ;, }, boolean, isNamedType, (, ), {, return, false, ;]
[!=, null, ;, }, public, EnumType, toMaybeEnumType, (, ), {, return, null, ;, }, boolean, isNamedType, (, ), {, return]
[;, }, public, EnumType, toMaybeEnumType, (, ), {, return, null, ;, }, boolean, isNamedType, (, ), {, return, false, ;]
[;, }, boolean, isNamedType, (, ), {, return, false, ;, }, public, boolean, isRecordType, (, ), {, return, toMaybeRecordType, (]
[;, }, public, boolean, isRecordType, (, ), {, return, toMaybeRecordType, (, ), !=, null, ;, }, RecordType, toMaybeRecordType, (, )]
[;, }, RecordType, toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {, return, toMaybeParameterizedType]
[!=, null, ;, }, RecordType, toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {]
[;, }, RecordType, toMaybeRecordType, (, ), {, return, null, ;, }, public, final, boolean, isParameterizedType, (, ), {, return, toMaybeParameterizedType]
[;, }, public, final, boolean, isParameterizedType, (, ), {, return, toMaybeParameterizedType, (, ), !=, null, ;, }, public, ParameterizedType, toMaybeParameterizedType]
[;, }, public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, )]
[!=, null, ;, }, public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType]
[;, }, public, ParameterizedType, toMaybeParameterizedType, (, ), {, return, null, ;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, )]
[;, }, public, static, ParameterizedType, toMaybeParameterizedType, (, JSType, type, ), {, return, type, ==, null, ?, null, :, type, .]
[;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=, null, ;, }, public, TemplateType, toMaybeTemplateType]
[?, null, :, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (]
[==, null, ?, null, :, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return]
[?, null, :, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (]
[:, type, ., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=]
[;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=, null, ;, }, public, TemplateType, toMaybeTemplateType]
[., toMaybeParameterizedType, (, ), ;, }, public, final, boolean, isTemplateType, (, ), {, return, toMaybeTemplateType, (, ), !=, null, ;]
[;, }, public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, )]
[!=, null, ;, }, public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType]
[;, }, public, TemplateType, toMaybeTemplateType, (, ), {, return, null, ;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, )]
[;, }, public, static, TemplateType, toMaybeTemplateType, (, JSType, type, ), {, return, type, ==, null, ?, null, :, type, .]
[;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =]
[?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this]
[==, null, ?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (]
[?, null, :, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this]
[:, type, ., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit]
[;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =]
[., toMaybeTemplateType, (, ), ;, }, public, boolean, hasAnyTemplateTypes, (, ), {, if, (, !, this, ., inTemplatedCheckVisit, ), {]
[), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false]
[), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false]
[., inTemplatedCheckVisit, ), {, this, ., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit]
[=, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false, ;, return, result, ;, }]
[., inTemplatedCheckVisit, =, true, ;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false, ;, return, result]
[;, boolean, result, =, hasAnyTemplateTypesInternal, (, ), ;, this, ., inTemplatedCheckVisit, =, false, ;, return, result, ;, }, else, {]
[;, this, ., inTemplatedCheckVisit, =, false, ;, return, result, ;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal]
[=, false, ;, return, result, ;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if]
[., inTemplatedCheckVisit, =, false, ;, return, result, ;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal, (, )]
[;, return, result, ;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if, (, isTemplatized]
[;, }, else, {, return, false, ;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if, (, isTemplatized, (, ), )]
[;, }, }, boolean, hasAnyTemplateTypesInternal, (, ), {, if, (, isTemplatized, (, ), ), {, for, (, JSType, templatizedType, :]
[), {, for, (, JSType, templatizedType, :, templatizedTypes, ), {, if, (, templatizedType, ., hasAnyTemplateTypes, (, ), ), {, return]
[), {, if, (, templatizedType, ., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, }, return, false, ;]
[), {, return, true, ;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (, ), {, return, !]
[., hasAnyTemplateTypes, (, ), ), {, return, true, ;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (]
[;, }, }, }, return, false, ;, }, public, boolean, isTemplatized, (, ), {, return, !, templateKeys, ., isEmpty, (]
[;, }, public, boolean, isTemplatized, (, ), {, return, !, templateKeys, ., isEmpty, (, ), ;, }, public, ImmutableList, <]
[;, }, public, ImmutableList, <, String, >, getTemplateKeys, (, ), {, return, templateKeys, ;, }, public, ImmutableList, <, JSType, >]
[;, }, public, ImmutableList, <, String, >, getTemplateKeys, (, ), {, return, templateKeys, ;, }, public, ImmutableList, <, JSType, >]
[., isEmpty, (, ), ;, }, public, ImmutableList, <, String, >, getTemplateKeys, (, ), {, return, templateKeys, ;, }, public]
[;, }, public, ImmutableList, <, JSType, >, getTemplatizedTypes, (, ), {, return, templatizedTypes, ;, }, public, boolean, hasTemplatizedType, (, String]
[;, }, public, boolean, hasTemplatizedType, (, String, key, ), {, return, templateKeys, ., contains, (, key, ), ;, }, public]
[;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (, key, ), ;]
[., contains, (, key, ), ;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, .]
[), ;, }, public, JSType, getTemplatizedType, (, String, key, ), {, int, index, =, templateKeys, ., indexOf, (, key, )]
[;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[., indexOf, (, key, ), ;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, .]
[), ;, if, (, index, <, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (, index, )]
[<, 0, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (, index, )]
[;, }, return, templatizedTypes, ., get, (, index, ), ;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (, index, ), ;, }, static, boolean]
[), ;, }, return, templatizedTypes, ., get, (, index, ), ;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType]
[., UNKNOWN_TYPE, ), ;, }, return, templatizedTypes, ., get, (, index, ), ;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1]
[;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2, ,, EquivalenceMethod, eqMethod, ), {, ImmutableList, <, JSType, >]
[., get, (, index, ), ;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2, ,, EquivalenceMethod, eqMethod, )]
[), ;, }, static, boolean, hasEquivalentTemplateTypes, (, JSType, type1, ,, JSType, type2, ,, EquivalenceMethod, eqMethod, ), {, ImmutableList, <, JSType]
[;, ImmutableList, <, JSType, >, templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (]
[., getTemplatizedTypes, (, ), ;, ImmutableList, <, JSType, >, templatizedTypes2, =, type2, ., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =]
[;, int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if]
[., getTemplatizedTypes, (, ), ;, int, nTemplatizedTypes1, =, templatizedTypes1, ., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size]
[;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;]
[., size, (, ), ;, int, nTemplatizedTypes2, =, templatizedTypes2, ., size, (, ), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, )]
[;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[., size, (, ), ;, if, (, nTemplatizedTypes1, !=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, )]
[!=, nTemplatizedTypes2, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, )]
[;, }, for, (, int, i, =, 0, ;, i, <, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =]
[;, i, <, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType]
[;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, .]
[<, nTemplatizedTypes1, ;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =]
[;, i, ++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, .]
[), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i]
[++, ), {, JSType, templatizedType1, =, templatizedTypes1, ., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (]
[;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod]
[., get, (, i, ), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, .]
[), ;, JSType, templatizedType2, =, templatizedTypes2, ., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,]
[;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return, false, ;, }, }, return, true]
[., get, (, i, ), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return, false]
[), ;, if, (, templatizedType1, ., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, isObject, (, ), {, return, false, ;]
[., checkEquivalenceHelper, (, templatizedType2, ,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean]
[,, eqMethod, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, isObject, (, ), {]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, isObject, (, ), {, return, false]
[;, }, }, return, true, ;, }, public, boolean, isObject, (, ), {, return, false, ;, }, public, boolean, isConstructor]
[;, }, public, boolean, isObject, (, ), {, return, false, ;, }, public, boolean, isConstructor, (, ), {, return, false]
[;, }, public, boolean, isConstructor, (, ), {, return, false, ;, }, public, boolean, isNominalType, (, ), {, return, false]
[;, }, public, boolean, isNominalType, (, ), {, return, false, ;, }, public, final, boolean, isNominalConstructor, (, ), {, if]
[;, }, public, final, boolean, isNominalConstructor, (, ), {, if, (, isConstructor, (, ), ||, isInterface, (, ), ), {]
[), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return, false, ;, }]
[||, isInterface, (, ), ), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {]
[), {, FunctionType, fn, =, toMaybeFunctionType, (, ), ;, if, (, fn, ==, null, ), {, return, false, ;, }]
[;, if, (, fn, ==, null, ), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=]
[), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return, true, ;]
[==, null, ), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return]
[), {, return, false, ;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return, true, ;]
[;, }, if, (, fn, ., getSource, (, ), !=, null, ), {, return, true, ;, }, return, fn, .]
[), {, return, true, ;, }, return, fn, ., isNativeObjectType, (, ), ;, }, return, false, ;, }, public, boolean]
[!=, null, ), {, return, true, ;, }, return, fn, ., isNativeObjectType, (, ), ;, }, return, false, ;, }]
[., getSource, (, ), !=, null, ), {, return, true, ;, }, return, fn, ., isNativeObjectType, (, ), ;, }]
[), {, return, true, ;, }, return, fn, ., isNativeObjectType, (, ), ;, }, return, false, ;, }, public, boolean]
[;, }, return, fn, ., isNativeObjectType, (, ), ;, }, return, false, ;, }, public, boolean, isInstanceType, (, ), {]
[;, }, return, false, ;, }, public, boolean, isInstanceType, (, ), {, return, false, ;, }, public, boolean, isInterface, (]
[., isNativeObjectType, (, ), ;, }, return, false, ;, }, public, boolean, isInstanceType, (, ), {, return, false, ;, }]
[;, }, public, boolean, isInstanceType, (, ), {, return, false, ;, }, public, boolean, isInterface, (, ), {, return, false]
[;, }, public, boolean, isInterface, (, ), {, return, false, ;, }, public, boolean, isOrdinaryFunction, (, ), {, return, false]
[;, }, public, boolean, isOrdinaryFunction, (, ), {, return, false, ;, }, public, final, boolean, isEquivalentTo, (, JSType, that, )]
[;, }, public, final, boolean, isEquivalentTo, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., IDENTITY, )]
[;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., INVARIANT, )]
[,, EquivalenceMethod, ., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that]
[), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., INVARIANT]
[., IDENTITY, ), ;, }, public, final, boolean, isInvariant, (, JSType, that, ), {, return, checkEquivalenceHelper, (, that, ,, EquivalenceMethod]
[;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (, that, ,, EquivalenceMethod, ., DATA_FLOW]
[,, EquivalenceMethod, ., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (]
[), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (, that, ,, EquivalenceMethod, .]
[., INVARIANT, ), ;, }, public, final, boolean, differsFrom, (, JSType, that, ), {, return, !, checkEquivalenceHelper, (, that, ,]
[;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that, ), {, return]
[;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that, ), {, return]
[,, EquivalenceMethod, ., DATA_FLOW, ), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this]
[), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that, ), {]
[., DATA_FLOW, ), ;, }, boolean, checkEquivalenceHelper, (, JSType, that, ,, EquivalenceMethod, eqMethod, ), {, if, (, this, ==, that]
[), {, return, true, ;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (]
[==, that, ), {, return, true, ;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, .]
[), {, return, true, ;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (]
[;, }, boolean, thisUnknown, =, isUnknownType, (, ), ;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (]
[;, boolean, thatUnknown, =, that, ., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod]
[;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;]
[., isUnknownType, (, ), ;, if, (, thisUnknown, ||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, )]
[), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==]
[||, thatUnknown, ), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (]
[), {, if, (, eqMethod, ==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==]
[), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown]
[==, EquivalenceMethod, ., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {]
[), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown]
[., INVARIANT, ), {, return, true, ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown]
[;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if]
[), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^]
[==, EquivalenceMethod, ., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (]
[), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^]
[., DATA_FLOW, ), {, return, thisUnknown, &&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (]
[;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), )]
[&&, thatUnknown, ;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^, that, ., isNominalType, (]
[;, }, else, if, (, thisUnknown, &&, thatUnknown, &&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), )]
[), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {]
[&&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if]
[&&, thatUnknown, &&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }]
[&&, (, isNominalType, (, ), ^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if]
[), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {]
[), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), )]
[^, that, ., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&]
[), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), )]
[., isNominalType, (, ), ), ), {, return, false, ;, }, }, if, (, isUnionType, (, ), &&, that, .]
[;, }, }, if, (, isUnionType, (, ), &&, that, ., isUnionType, (, ), ), {, return, toMaybeUnionType, (, )]
[), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if]
[&&, that, ., isUnionType, (, ), ), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, )]
[), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if]
[., isUnionType, (, ), ), {, return, toMaybeUnionType, (, ), ., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod]
[;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), .]
[., checkUnionEquivalenceHelper, (, that, ., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&, that]
[,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType]
[., toMaybeUnionType, (, ), ,, eqMethod, ), ;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, )]
[), ;, }, if, (, isFunctionType, (, ), &&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, )]
[), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if]
[&&, that, ., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, )]
[), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if]
[., isFunctionType, (, ), ), {, return, toMaybeFunctionType, (, ), ., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod]
[;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), .]
[., checkFunctionEquivalenceHelper, (, that, ., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&, that]
[,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType]
[., toMaybeFunctionType, (, ), ,, eqMethod, ), ;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, )]
[), ;, }, if, (, isRecordType, (, ), &&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, )]
[), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType]
[&&, that, ., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, )]
[), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType]
[., isRecordType, (, ), ), {, return, toMaybeRecordType, (, ), ., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,, eqMethod]
[;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (]
[., checkRecordEquivalenceHelper, (, that, ., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;]
[,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, )]
[., toMaybeRecordType, (, ), ,, eqMethod, ), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that]
[), ;, }, ParameterizedType, thisParamType, =, toMaybeParameterizedType, (, ), ;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if]
[;, ParameterizedType, thatParamType, =, that, ., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, )]
[;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType]
[., toMaybeParameterizedType, (, ), ;, if, (, thisParamType, !=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null]
[!=, null, ||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType]
[||, thatParamType, !=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[!=, null, ), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {]
[), {, boolean, paramsMatch, =, false, ;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =]
[;, if, (, thisParamType, !=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), .]
[), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, )]
[&&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (]
[!=, null, &&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, .]
[&&, thatParamType, !=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (]
[), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, )]
[!=, null, ), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,]
[), {, paramsMatch, =, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, )]
[=, thisParamType, ., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else]
[;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch]
[., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, .]
[., getParameterType, (, ), ., checkEquivalenceHelper, (, thatParamType, ., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (]
[,, eqMethod, ), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }]
[., getParameterType, (, ), ,, eqMethod, ), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch]
[), ;, }, else, if, (, eqMethod, ==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {]
[), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null]
[==, EquivalenceMethod, ., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType]
[), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null]
[., IDENTITY, ), {, paramsMatch, =, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType]
[=, false, ;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :]
[;, }, else, {, paramsMatch, =, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, .]
[=, true, ;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType]
[;, }, JSType, thisRootType, =, thisParamType, ==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =]
[;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType]
[?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, .]
[==, null, ?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :]
[?, this, :, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, .]
[:, thisParamType, ., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (]
[;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType]
[., getReferencedTypeInternal, (, ), ;, JSType, thatRootType, =, thatParamType, ==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;]
[;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&]
[?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, )]
[==, null, ?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,]
[?, that, :, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, )]
[:, thatParamType, ., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }]
[;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&]
[., getReferencedTypeInternal, (, ), ;, return, paramsMatch, &&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (]
[;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), .]
[&&, thisRootType, ., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType]
[;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), .]
[., checkEquivalenceHelper, (, thatRootType, ,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, )]
[,, eqMethod, ), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return, toObjectType]
[), ;, }, if, (, isNominalType, (, ), &&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, )]
[), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (, that, ., toObjectType, (, ), ., getReferenceName]
[&&, that, ., isNominalType, (, ), ), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (, that]
[), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (, that, ., toObjectType, (, ), ., getReferenceName]
[., isNominalType, (, ), ), {, return, toObjectType, (, ), ., getReferenceName, (, ), ., equals, (, that, ., toObjectType]
[;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, )]
[., equals, (, that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType]
[., getReferenceName, (, ), ., equals, (, that, ., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if]
[), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (]
[., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this]
[., toObjectType, (, ), ., getReferenceName, (, ), ), ;, }, if, (, this, instanceof, ProxyObjectType, ), {, return, (]
[), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, )]
[instanceof, ProxyObjectType, ), {, return, (, (, ProxyObjectType, ), this, ), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,]
[;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal]
[., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (]
[., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {]
[), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, )]
[), ., getReferencedTypeInternal, (, ), ., checkEquivalenceHelper, (, that, ,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, )]
[,, eqMethod, ), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that]
[), ;, }, if, (, that, instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), .]
[), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }]
[instanceof, ProxyObjectType, ), {, return, checkEquivalenceHelper, (, (, (, ProxyObjectType, ), that, ), ., getReferencedTypeInternal, (, ), ,, eqMethod, )]
[;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {]
[,, eqMethod, ), ;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType]
[., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (]
[), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent]
[), ., getReferencedTypeInternal, (, ), ,, eqMethod, ), ;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent]
[), ;, }, return, this, ==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, )]
[;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||]
[==, that, ;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==]
[;, }, public, static, boolean, isEquivalent, (, JSType, typeA, ,, JSType, typeB, ), {, return, (, typeA, ==, null, ||]
[;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?, isEquivalentTo]
[?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object]
[), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (]
[||, typeB, ==, null, ), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override]
[==, null, ||, typeB, ==, null, ), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }]
[||, typeB, ==, null, ), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override]
[), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (]
[==, null, ), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean]
[), ?, typeA, ==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (]
[:, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return]
[==, typeB, :, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, )]
[:, typeA, ., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return]
[;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?, isEquivalentTo]
[., isEquivalentTo, (, typeB, ), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType]
[), ;, }, @, Override, public, boolean, equals, (, Object, jsType, ), {, return, (, jsType, instanceof, JSType, ), ?]
[;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, ), ;, }, public]
[?, isEquivalentTo, (, (, JSType, ), jsType, ), :, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[), ?, isEquivalentTo, (, (, JSType, ), jsType, ), :, false, ;, }, @, Override, public, int, hashCode, (, )]
[instanceof, JSType, ), ?, isEquivalentTo, (, (, JSType, ), jsType, ), :, false, ;, }, @, Override, public, int, hashCode]
[:, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, ), ;]
[), :, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, )]
[), :, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, )]
[;, }, @, Override, public, int, hashCode, (, ), {, return, System, ., identityHashCode, (, this, ), ;, }, public]
[;, }, public, final, boolean, matchesInt32Context, (, ), {, return, matchesNumberContext, (, ), ;, }, public, final, boolean, matchesUint32Context, (]
[., identityHashCode, (, this, ), ;, }, public, final, boolean, matchesInt32Context, (, ), {, return, matchesNumberContext, (, ), ;, }]
[), ;, }, public, final, boolean, matchesInt32Context, (, ), {, return, matchesNumberContext, (, ), ;, }, public, final, boolean, matchesUint32Context]
[;, }, public, final, boolean, matchesUint32Context, (, ), {, return, matchesNumberContext, (, ), ;, }, public, boolean, matchesNumberContext, (, )]
[;, }, public, boolean, matchesNumberContext, (, ), {, return, false, ;, }, public, boolean, matchesStringContext, (, ), {, return, false]
[;, }, public, boolean, matchesStringContext, (, ), {, return, false, ;, }, public, boolean, matchesObjectContext, (, ), {, return, false]
[;, }, public, boolean, matchesObjectContext, (, ), {, return, false, ;, }, public, JSType, findPropertyType, (, String, propertyName, ), {]
[;, }, public, JSType, findPropertyType, (, String, propertyName, ), {, ObjectType, autoboxObjType, =, ObjectType, ., cast, (, autoboxesTo, (, )]
[;, if, (, autoboxObjType, !=, null, ), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null, ;]
[., cast, (, autoboxesTo, (, ), ), ;, if, (, autoboxObjType, !=, null, ), {, return, autoboxObjType, ., findPropertyType, (]
[), ;, if, (, autoboxObjType, !=, null, ), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null]
[), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null, ;, }, public, boolean, canBeCalled, (, )]
[!=, null, ), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null, ;, }, public, boolean, canBeCalled]
[), {, return, autoboxObjType, ., findPropertyType, (, propertyName, ), ;, }, return, null, ;, }, public, boolean, canBeCalled, (, )]
[;, }, return, null, ;, }, public, boolean, canBeCalled, (, ), {, return, false, ;, }, public, boolean, canCastTo, (]
[., findPropertyType, (, propertyName, ), ;, }, return, null, ;, }, public, boolean, canBeCalled, (, ), {, return, false, ;]
[), ;, }, return, null, ;, }, public, boolean, canBeCalled, (, ), {, return, false, ;, }, public, boolean, canCastTo]
[;, }, public, boolean, canBeCalled, (, ), {, return, false, ;, }, public, boolean, canCastTo, (, JSType, that, ), {]
[;, }, public, boolean, canCastTo, (, JSType, that, ), {, return, this, ., visit, (, CAN_CAST_TO_VISITOR, ,, that, ), ;]
[;, }, public, JSType, autoboxesTo, (, ), {, return, null, ;, }, public, JSType, unboxesTo, (, ), {, return, null]
[., visit, (, CAN_CAST_TO_VISITOR, ,, that, ), ;, }, public, JSType, autoboxesTo, (, ), {, return, null, ;, }, public]
[,, that, ), ;, }, public, JSType, autoboxesTo, (, ), {, return, null, ;, }, public, JSType, unboxesTo, (, )]
[), ;, }, public, JSType, autoboxesTo, (, ), {, return, null, ;, }, public, JSType, unboxesTo, (, ), {, return]
[;, }, public, JSType, unboxesTo, (, ), {, return, null, ;, }, public, ObjectType, toObjectType, (, ), {, return, this]
[;, }, public, ObjectType, toObjectType, (, ), {, return, this, instanceof, ObjectType, ?, (, ObjectType, ), this, :, null, ;]
[;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, .]
[?, (, ObjectType, ), this, :, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (]
[instanceof, ObjectType, ?, (, ObjectType, ), this, :, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =]
[:, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =]
[:, null, ;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =]
[;, }, public, JSType, autobox, (, ), {, JSType, restricted, =, restrictByNotNullOrUndefined, (, ), ;, JSType, autobox, =, restricted, .]
[;, JSType, autobox, =, restricted, ., autoboxesTo, (, ), ;, return, autobox, ==, null, ?, restricted, :, autobox, ;, }]
[;, return, autobox, ==, null, ?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return, autobox]
[., autoboxesTo, (, ), ;, return, autobox, ==, null, ?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (]
[;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), ., toObjectType, (, ), ;, }, public]
[?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), ., toObjectType, (]
[==, null, ?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), .]
[?, restricted, :, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), ., toObjectType, (]
[:, autobox, ;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), ., toObjectType, (, ), ;]
[;, }, public, final, ObjectType, dereference, (, ), {, return, autobox, (, ), ., toObjectType, (, ), ;, }, public]
[;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return, testForEquality, (, that, ), ., equals, (, UNKNOWN]
[., toObjectType, (, ), ;, }, public, final, boolean, canTestForEqualityWith, (, JSType, that, ), {, return, testForEquality, (, that, )]
[;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (, this, ,, that, ), ;, }, TernaryValue]
[., equals, (, UNKNOWN, ), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (, this, ,]
[), ., equals, (, UNKNOWN, ), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (, this]
[), ;, }, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, testForEqualityHelper, (, this, ,, that, ), ;, }]
[;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, ), ||]
[,, that, ), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType]
[), ;, }, TernaryValue, testForEqualityHelper, (, JSType, aType, ,, JSType, bType, ), {, if, (, bType, ., isAllType, (, )]
[), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, .]
[||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, )]
[||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty]
[||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {]
[||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType]
[||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType]
[., isAllType, (, ), ||, bType, ., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType]
[||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType]
[., isUnknownType, (, ), ||, bType, ., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType]
[||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {]
[., isNoResolvedType, (, ), ||, aType, ., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType]
[||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty]
[., isAllType, (, ), ||, aType, ., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN]
[||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, )]
[., isUnknownType, (, ), ||, aType, ., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType]
[), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, .]
[., isNoResolvedType, (, ), ), {, return, UNKNOWN, ;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean]
[;, }, boolean, aIsEmpty, =, aType, ., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;]
[;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty]
[., isEmptyType, (, ), ;, boolean, bIsEmpty, =, bType, ., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, )]
[;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;]
[., isEmptyType, (, ), ;, if, (, aIsEmpty, ||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return]
[), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;]
[||, bIsEmpty, ), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return]
[), {, if, (, aIsEmpty, &&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;]
[), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType]
[&&, bIsEmpty, ), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType]
[), {, return, TernaryValue, ., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType]
[;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType, (, ), ||, bType, ., isFunctionType]
[., TRUE, ;, }, else, {, return, UNKNOWN, ;, }, }, if, (, aType, ., isFunctionType, (, ), ||, bType]
[;, }, }, if, (, aType, ., isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType]
[), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, .]
[||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType]
[., isFunctionType, (, ), ||, bType, ., isFunctionType, (, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, )]
[), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, .]
[., isFunctionType, (, ), ), {, JSType, otherType, =, aType, ., isFunctionType, (, ), ?, bType, :, aType, ;, JSType]
[;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (, meet, .]
[?, bType, :, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;]
[., isFunctionType, (, ), ?, bType, :, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, .]
[:, aType, ;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (]
[;, JSType, meet, =, otherType, ., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (, meet, .]
[;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE]
[., getGreatestSubtype, (, getNativeType, (, JSTypeNative, ., OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||, meet]
[), ;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, .]
[), ), ;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue]
[., OBJECT_TYPE, ), ), ;, if, (, meet, ., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {]
[), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType]
[||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN]
[., isNoType, (, ), ||, meet, ., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE, ;, }, else, {]
[), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType]
[., isNoObjectType, (, ), ), {, return, TernaryValue, ., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }]
[;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||, bType]
[., FALSE, ;, }, else, {, return, TernaryValue, ., UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, )]
[;, }, }, if, (, bType, ., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {, return, bType]
[., UNKNOWN, ;, }, }, if, (, bType, ., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {]
[), {, return, bType, ., testForEquality, (, aType, ), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (]
[||, bType, ., isUnionType, (, ), ), {, return, bType, ., testForEquality, (, aType, ), ;, }, return, null, ;]
[., isEnumElementType, (, ), ||, bType, ., isUnionType, (, ), ), {, return, bType, ., testForEquality, (, aType, ), ;]
[), {, return, bType, ., testForEquality, (, aType, ), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (]
[., isUnionType, (, ), ), {, return, bType, ., testForEquality, (, aType, ), ;, }, return, null, ;, }, public]
[;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, )]
[., testForEquality, (, aType, ), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {]
[), ;, }, return, null, ;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (]
[;, }, public, final, boolean, canTestForShallowEqualityWith, (, JSType, that, ), {, if, (, isEmptyType, (, ), ||, that, ., isEmptyType]
[), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype]
[||, that, ., isEmptyType, (, ), ), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, )]
[), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype]
[., isEmptyType, (, ), ), {, return, isSubtype, (, that, ), ||, that, ., isSubtype, (, this, ), ;, }]
[;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==]
[||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf]
[), ||, that, ., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !]
[;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==]
[., isSubtype, (, this, ), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType]
[), ;, }, JSType, inf, =, getGreatestSubtype, (, that, ), ;, return, !, inf, ., isEmptyType, (, ), ||, inf]
[;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;]
[), ;, return, !, inf, ., isEmptyType, (, ), ||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, )]
[;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ;, }]
[||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return]
[||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return]
[., isEmptyType, (, ), ||, inf, ==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable]
[;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ;, }]
[==, registry, ., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (]
[;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ;, }]
[., getNativeType, (, JSTypeNative, ., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (]
[), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, ), ), ;]
[., LEAST_FUNCTION_TYPE, ), ;, }, public, boolean, isNullable, (, ), {, return, isSubtype, (, getNativeType, (, JSTypeNative, ., NULL_TYPE, )]
[;, }, public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {]
[), ;, }, public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (, JSType, that, )]
[), ), ;, }, public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (, JSType, that]
[., NULL_TYPE, ), ), ;, }, public, JSType, collapseUnion, (, ), {, return, this, ;, }, public, JSType, getLeastSupertype, (]
[;, }, public, JSType, getLeastSupertype, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, return]
[), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return, getLeastSupertype, (, this, ,]
[., isUnionType, (, ), ), {, return, that, ., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return]
[;, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType]
[., getLeastSupertype, (, this, ), ;, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, static, JSType, getLeastSupertype, (]
[., toMaybeUnionType, (, ), ., getLeastSupertype, (, this, ), ;, }, return, getLeastSupertype, (, this, ,, that, ), ;, }]
[), ;, }, return, getLeastSupertype, (, this, ,, that, ), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType]
[;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo, (]
[,, that, ), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType]
[), ;, }, static, JSType, getLeastSupertype, (, JSType, thisType, ,, JSType, thatType, ), {, boolean, areEquivalent, =, thisType, ., isEquivalentTo]
[;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType, ,, thatType, ), ), ;]
[., isEquivalentTo, (, thatType, ), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType]
[), ;, return, areEquivalent, ?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType, ,, thatType, ), )]
[;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,, that, ), ;, }, static]
[?, thisType, :, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType]
[:, filterNoResolvedType, (, thisType, ., registry, ., createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (]
[;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,, that, ), ;, }, static]
[), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,, that, ), ;, }]
[., createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype]
[., registry, ., createUnionType, (, thisType, ,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {]
[,, thatType, ), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,, that]
[), ), ;, }, public, JSType, getGreatestSubtype, (, JSType, that, ), {, return, getGreatestSubtype, (, this, ,, that, ), ;]
[;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (, )]
[,, that, ), ;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thisType, .]
[), ;, }, static, JSType, getGreatestSubtype, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thisType, ., isFunctionType, (]
[), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;]
[&&, thatType, ., isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType]
[., isFunctionType, (, ), &&, thatType, ., isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper]
[), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;]
[., isFunctionType, (, ), ), {, return, thisType, ., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, )]
[;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (]
[., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (, thisType, ., isEquivalentTo, (]
[., toMaybeFunctionType, (, ), ., supAndInfHelper, (, thatType, ., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (]
[,, false, ), ;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }]
[., toMaybeFunctionType, (, ), ,, false, ), ;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {]
[), ;, }, else, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if]
[), {, return, thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, )]
[., isEquivalentTo, (, thatType, ), ), {, return, thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||]
[), ), {, return, thisType, ;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (]
[;, }, else, if, (, thisType, ., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType]
[), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, .]
[., isUnknownType, (, ), ||, thatType, ., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?]
[), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[., isUnknownType, (, ), ), {, return, thisType, ., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (]
[;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet]
[?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (]
[., isEquivalentTo, (, thatType, ), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if]
[), ?, thisType, :, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType]
[:, thisType, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), )]
[;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return]
[), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (, ), .]
[., UNKNOWN_TYPE, ), ;, }, else, if, (, thisType, ., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (]
[), {, return, thisType, ., toMaybeUnionType, (, ), ., meet, (, thatType, ), ;, }, else, if, (, thatType, .]
[., isUnionType, (, ), ), {, return, thisType, ., toMaybeUnionType, (, ), ., meet, (, thatType, ), ;, }, else]
[;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return, thatType, ., toMaybeUnionType, (, ), ., meet]
[., meet, (, thatType, ), ;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return, thatType, .]
[., toMaybeUnionType, (, ), ., meet, (, thatType, ), ;, }, else, if, (, thatType, ., isUnionType, (, ), )]
[), ;, }, else, if, (, thatType, ., isUnionType, (, ), ), {, return, thatType, ., toMaybeUnionType, (, ), .]
[), {, return, thatType, ., toMaybeUnionType, (, ), ., meet, (, thisType, ), ;, }, else, if, (, thisType, .]
[., isUnionType, (, ), ), {, return, thatType, ., toMaybeUnionType, (, ), ., meet, (, thisType, ), ;, }, else]
[;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper]
[., meet, (, thisType, ), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, .]
[., toMaybeUnionType, (, ), ., meet, (, thisType, ), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), )]
[), ;, }, else, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), .]
[), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, .]
[., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else]
[;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper]
[., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return, thatType, .]
[., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), )]
[), ;, }, else, if, (, thatType, ., isParameterizedType, (, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), .]
[), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, .]
[., isParameterizedType, (, ), ), {, return, thatType, ., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else]
[;, }, else, if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;, }]
[., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType]
[., toMaybeParameterizedType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, else, if, (, thisType, ., isSubtype, (, thatType, )]
[), ;, }, else, if, (, thisType, ., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;]
[), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), ), {]
[., isSubtype, (, thatType, ), ), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype]
[), ), {, return, filterNoResolvedType, (, thisType, ), ;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), )]
[;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (, thatType, ), ;, }]
[), ;, }, else, if, (, thatType, ., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (, thatType, ), ;]
[), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return]
[., isSubtype, (, thisType, ), ), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType]
[), ), {, return, filterNoResolvedType, (, thatType, ), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {]
[;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper]
[), ;, }, else, if, (, thisType, ., isRecordType, (, ), ), {, return, thisType, ., toMaybeRecordType, (, ), .]
[), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, .]
[., isRecordType, (, ), ), {, return, thisType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else]
[;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper]
[., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return, thatType, .]
[., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thatType, ), ;, }, else, if, (, thatType, ., isRecordType, (, ), )]
[), ;, }, else, if, (, thatType, ., isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), .]
[), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType]
[., isRecordType, (, ), ), {, return, thatType, ., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if]
[;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), .]
[., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thisType]
[., toMaybeRecordType, (, ), ., getGreatestSubtypeHelper, (, thisType, ), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {]
[), ;, }, if, (, thisType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, )]
[), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (, inf, !=]
[., isEnumElementType, (, ), ), {, JSType, inf, =, thisType, ., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;]
[;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (]
[., meet, (, thatType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, else, if]
[., toMaybeEnumElementType, (, ), ., meet, (, thatType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;]
[), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType]
[), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[!=, null, ), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType]
[), {, return, inf, ;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =]
[;, }, }, else, if, (, thatType, ., isEnumElementType, (, ), ), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (]
[), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (, inf, !=]
[., isEnumElementType, (, ), ), {, JSType, inf, =, thatType, ., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;]
[;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, )]
[., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (]
[., toMaybeEnumElementType, (, ), ., meet, (, thisType, ), ;, if, (, inf, !=, null, ), {, return, inf, ;]
[), ;, if, (, inf, !=, null, ), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (]
[), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, )]
[!=, null, ), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject]
[), {, return, inf, ;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, )]
[;, }, }, if, (, thisType, ., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return, thisType]
[), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (, JSTypeNative, .]
[&&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return]
[., isObject, (, ), &&, thatType, ., isObject, (, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE]
[), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (, JSTypeNative, .]
[., isObject, (, ), ), {, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, .]
[;, }, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, )]
[., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }]
[), ;, }, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type]
[., NO_OBJECT_TYPE, ), ;, }, return, thisType, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (]
[;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {, return]
[., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type]
[), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, ), ), {]
[., NO_TYPE, ), ;, }, static, JSType, filterNoResolvedType, (, JSType, type, ), {, if, (, type, ., isNoResolvedType, (, )]
[), {, return, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (, type, ., isUnionType, (]
[., isNoResolvedType, (, ), ), {, return, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (]
[;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType, unionType, =, type, ., toMaybeUnionType, (, )]
[., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType]
[), ;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType, unionType, =, type, ., toMaybeUnionType, (]
[., NO_RESOLVED_TYPE, ), ;, }, else, if, (, type, ., isUnionType, (, ), ), {, UnionType, unionType, =, type, .]
[), {, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt]
[., isUnionType, (, ), ), {, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =, false, ;]
[;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (]
[., toMaybeUnionType, (, ), ;, boolean, needsFiltering, =, false, ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, )]
[;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, alt, ., isNoResolvedType, (, )]
[), {, if, (, alt, ., isNoResolvedType, (, ), ), {, needsFiltering, =, true, ;, break, ;, }, }, if]
[., getAlternates, (, ), ), {, if, (, alt, ., isNoResolvedType, (, ), ), {, needsFiltering, =, true, ;, break]
[), {, needsFiltering, =, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder]
[., isNoResolvedType, (, ), ), {, needsFiltering, =, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder]
[=, true, ;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, .]
[;, break, ;, }, }, if, (, needsFiltering, ), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, )]
[), {, UnionTypeBuilder, builder, =, new, UnionTypeBuilder, (, type, ., registry, ), ;, builder, ., addAlternate, (, type, ., getNativeType]
[;, builder, ., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :]
[), ;, builder, ., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt]
[., registry, ), ;, builder, ., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (]
[;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType, (]
[., addAlternate, (, type, ., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, .]
[), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType]
[., getNativeType, (, JSTypeNative, ., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), )]
[), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !, alt, .]
[., NO_RESOLVED_TYPE, ), ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, if, (, !]
[), {, if, (, !, alt, ., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (, alt, ), ;, }]
[., getAlternates, (, ), ), {, if, (, !, alt, ., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (]
[), {, builder, ., addAlternate, (, alt, ), ;, }, }, return, builder, ., build, (, ), ;, }, }]
[), {, builder, ., addAlternate, (, alt, ), ;, }, }, return, builder, ., build, (, ), ;, }, }]
[., isNoResolvedType, (, ), ), {, builder, ., addAlternate, (, alt, ), ;, }, }, return, builder, ., build, (]
[;, }, }, return, builder, ., build, (, ), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (]
[., addAlternate, (, alt, ), ;, }, }, return, builder, ., build, (, ), ;, }, }, return, type, ;]
[), ;, }, }, return, builder, ., build, (, ), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome]
[;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&, this]
[., build, (, ), ;, }, }, return, type, ;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if]
[;, }, public, JSType, getRestrictedTypeGivenToBooleanOutcome, (, boolean, outcome, ), {, if, (, outcome, &&, this, ==, getNativeType, (, JSTypeNative, .]
[), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (]
[&&, this, ==, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }]
[), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (]
[==, getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals]
[), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (]
[), ), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if]
[., UNKNOWN_TYPE, ), ), {, return, getNativeType, (, JSTypeNative, ., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, )]
[;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (, literals, ., contains, (, outcome, ), ), {, return]
[), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (, literals, ., contains, (, outcome, ), ), {]
[., CHECKED_UNKNOWN_TYPE, ), ;, }, BooleanLiteralSet, literals, =, getPossibleToBooleanOutcomes, (, ), ;, if, (, literals, ., contains, (, outcome, )]
[;, if, (, literals, ., contains, (, outcome, ), ), {, return, this, ;, }, else, {, return, getNativeType, (]
[), {, return, this, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, public, abstract]
[., contains, (, outcome, ), ), {, return, this, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, )]
[), ), {, return, this, ;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, public]
[;, }, else, {, return, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, )]
[;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), ;, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if, (]
[), ;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), ;, public, TypePair, getTypesUnderEquality, (, JSType, that, ), {, if]
[., NO_TYPE, ), ;, }, }, public, abstract, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), ;, public, TypePair, getTypesUnderEquality, (, JSType, that, )]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (]
[., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;]
[;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that]
[., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }]
[., toMaybeUnionType, (, ), ., getTypesUnderEquality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, .]
[), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (]
[;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (, null, ,, null]
[,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new]
[., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :]
[), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (, null, ,]
[., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, FALSE, :, return, new, TypePair, (]
[), {, case, FALSE, :, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN, :]
[), ), {, case, FALSE, :, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN]
[:, return, new, TypePair, (, null, ,, null, ), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (]
[;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException]
[,, null, ), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }]
[), ;, case, TRUE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new]
[:, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;]
[:, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair]
[;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (, that]
[,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (]
[;, }, public, TypePair, getTypesUnderInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (]
[., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;]
[;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that]
[., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }]
[., toMaybeUnionType, (, ), ., getTypesUnderInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, .]
[), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (]
[;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, .]
[,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType]
[., typeB, ,, p, ., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :]
[), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative]
[., typeA, ), ;, }, switch, (, testForEquality, (, that, ), ), {, case, TRUE, :, JSType, noType, =, getNativeType]
[), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (, noType]
[), ), {, case, TRUE, :, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (]
[:, JSType, noType, =, getNativeType, (, JSTypeNative, ., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,, noType, ), ;]
[;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (]
[), ;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair]
[., NO_TYPE, ), ;, return, new, TypePair, (, noType, ,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return]
[;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException]
[,, noType, ), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }]
[), ;, case, FALSE, :, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new]
[:, case, UNKNOWN, :, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;]
[:, return, new, TypePair, (, this, ,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair]
[;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =]
[,, that, ), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {]
[), ;, }, throw, new, IllegalStateException, (, ), ;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType]
[;, }, public, TypePair, getTypesUnderShallowEquality, (, JSType, that, ), {, JSType, commonType, =, getGreatestSubtype, (, that, ), ;, return, new]
[;, return, new, TypePair, (, commonType, ,, commonType, ), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if]
[), ;, return, new, TypePair, (, commonType, ,, commonType, ), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {]
[;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {, TypePair]
[,, commonType, ), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, )]
[), ;, }, public, TypePair, getTypesUnderShallowInequality, (, JSType, that, ), {, if, (, that, ., isUnionType, (, ), ), {]
[), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (]
[., isUnionType, (, ), ), {, TypePair, p, =, that, ., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;]
[;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, )]
[., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }]
[., toMaybeUnionType, (, ), ., getTypesUnderShallowInequality, (, this, ), ;, return, new, TypePair, (, p, ., typeB, ,, p, .]
[), ;, return, new, TypePair, (, p, ., typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (]
[;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&, that, .]
[,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType]
[., typeB, ,, p, ., typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, )]
[), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&, that]
[., typeA, ), ;, }, if, (, isNullType, (, ), &&, that, ., isNullType, (, ), ||, isVoidType, (, )]
[), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new, TypePair, (, this, ,]
[||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,, null, )]
[&&, that, ., isNullType, (, ), ||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new]
[||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,, null, )]
[., isNullType, (, ), ||, isVoidType, (, ), &&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (]
[), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new, TypePair, (, this, ,]
[&&, that, ., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {]
[), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new, TypePair, (, this, ,]
[., isVoidType, (, ), ), {, return, new, TypePair, (, null, ,, null, ), ;, }, else, {, return, new]
[;, }, else, {, return, new, TypePair, (, this, ,, that, ), ;, }, }, public, JSType, restrictByNotNullOrUndefined, (, )]
[,, null, ), ;, }, else, {, return, new, TypePair, (, this, ,, that, ), ;, }, }, public, JSType]
[), ;, }, else, {, return, new, TypePair, (, this, ,, that, ), ;, }, }, public, JSType, restrictByNotNullOrUndefined, (]
[;, }, }, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, this, ;, }, public, boolean, isSubtype, (, JSType, that, )]
[,, that, ), ;, }, }, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, this, ;, }, public, boolean, isSubtype, (]
[), ;, }, }, public, JSType, restrictByNotNullOrUndefined, (, ), {, return, this, ;, }, public, boolean, isSubtype, (, JSType, that]
[;, }, public, boolean, isSubtype, (, JSType, that, ), {, return, isSubtypeHelper, (, this, ,, that, ), ;, }, static]
[;, }, static, boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thatType, ., isUnknownType, (, )]
[,, that, ), ;, }, static, boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thatType, .]
[), ;, }, static, boolean, isSubtypeHelper, (, JSType, thisType, ,, JSType, thatType, ), {, if, (, thatType, ., isUnknownType, (]
[), {, return, true, ;, }, if, (, thatType, ., isAllType, (, ), ), {, return, true, ;, }, if]
[., isUnknownType, (, ), ), {, return, true, ;, }, if, (, thatType, ., isAllType, (, ), ), {, return]
[;, }, if, (, thatType, ., isAllType, (, ), ), {, return, true, ;, }, if, (, thisType, ., isEquivalentTo]
[), {, return, true, ;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, true, ;, }]
[., isAllType, (, ), ), {, return, true, ;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {]
[;, }, if, (, thisType, ., isEquivalentTo, (, thatType, ), ), {, return, true, ;, }, if, (, thatType, .]
[), {, return, true, ;, }, if, (, thatType, ., isUnionType, (, ), ), {, UnionType, union, =, thatType, .]
[., isEquivalentTo, (, thatType, ), ), {, return, true, ;, }, if, (, thatType, ., isUnionType, (, ), ), {]
[), ), {, return, true, ;, }, if, (, thatType, ., isUnionType, (, ), ), {, UnionType, union, =, thatType]
[;, }, if, (, thatType, ., isUnionType, (, ), ), {, UnionType, union, =, thatType, ., toMaybeUnionType, (, ), ;]
[), {, UnionType, union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :, union, ., alternates, )]
[., isUnionType, (, ), ), {, UnionType, union, =, thatType, ., toMaybeUnionType, (, ), ;, for, (, JSType, element, :]
[;, for, (, JSType, element, :, union, ., alternates, ), {, if, (, thisType, ., isSubtype, (, element, ), )]
[., toMaybeUnionType, (, ), ;, for, (, JSType, element, :, union, ., alternates, ), {, if, (, thisType, ., isSubtype]
[), {, if, (, thisType, ., isSubtype, (, element, ), ), {, return, true, ;, }, }, return, false, ;]
[., alternates, ), {, if, (, thisType, ., isSubtype, (, element, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), ), {]
[., isSubtype, (, element, ), ), {, return, true, ;, }, }, return, false, ;, }, if, (, thisType, .]
[), ), {, return, true, ;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), )]
[;, }, }, return, false, ;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType]
[;, }, if, (, thisType, ., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (]
[), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType]
[., isParameterizedType, (, ), ), {, return, thisType, ., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if]
[;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, ), thatType, )]
[., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (]
[., toMaybeParameterizedType, (, ), ., isParameterizeSubtypeOf, (, thatType, ), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType]
[), ;, }, if, (, thatType, instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, ), thatType]
[), {, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, ), thatType, ), ., getReferencedTypeInternal, (, ), ), ;, }]
[instanceof, ProxyObjectType, ), {, return, thisType, ., isSubtype, (, (, (, ProxyObjectType, ), thatType, ), ., getReferencedTypeInternal, (, ), )]
[;, }, return, false, ;, }, public, abstract, <, T, >, T, visit, (, Visitor, <, T, >, visitor, )]
[., isSubtype, (, (, (, ProxyObjectType, ), thatType, ), ., getReferencedTypeInternal, (, ), ), ;, }, return, false, ;, }]
[), ;, }, return, false, ;, }, public, abstract, <, T, >, T, visit, (, Visitor, <, T, >, visitor]
[., getReferencedTypeInternal, (, ), ), ;, }, return, false, ;, }, public, abstract, <, T, >, T, visit, (, Visitor]
[), ., getReferencedTypeInternal, (, ), ), ;, }, return, false, ;, }, public, abstract, <, T, >, T, visit, (]
[), ., getReferencedTypeInternal, (, ), ), ;, }, return, false, ;, }, public, abstract, <, T, >, T, visit, (]
[;, }, public, abstract, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), ;, abstract, <, T]
[;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;]
[., getResolveMode, (, ), ;, registry, ., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t]
[;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return, result]
[., setResolveMode, (, ResolveMode, ., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, .]
[), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return]
[., IMMEDIATE, ), ;, JSType, result, =, resolve, (, t, ,, scope, ), ;, registry, ., setResolveMode, (, oldResolveMode, )]
[;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return, result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,]
[,, scope, ), ;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return, result, ;, }, public, final, JSType, resolve, (]
[), ;, registry, ., setResolveMode, (, oldResolveMode, ), ;, return, result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t]
[;, return, result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {]
[., setResolveMode, (, oldResolveMode, ), ;, return, result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <]
[), ;, return, result, ;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, )]
[;, }, public, final, JSType, resolve, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, if, (, resolved]
[), {, if, (, resolveResult, ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true]
[==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved]
[), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true]
[;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal]
[), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;]
[., UNKNOWN_TYPE, ), ;, }, return, resolveResult, ;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope]
[;, }, resolved, =, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult]
[=, true, ;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return]
[;, resolveResult, =, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;]
[=, resolveInternal, (, t, ,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;, }, abstract]
[;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope]
[,, scope, ), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter]
[), ;, resolveResult, ., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,]
[;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), ;, void]
[., setResolvedTypeInternal, (, resolveResult, ), ;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType]
[), ;, return, resolveResult, ;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), ;]
[;, }, abstract, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), ;, void, setResolvedTypeInternal, (, JSType]
[=, type, ;, resolved, =, true, ;, }, public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public]
[;, resolved, =, true, ;, }, public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void]
[=, true, ;, }, public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void, clearResolved, (]
[;, }, public, final, boolean, isResolved, (, ), {, return, resolved, ;, }, public, final, void, clearResolved, (, ), {]
[;, }, public, final, void, clearResolved, (, ), {, resolved, =, false, ;, resolveResult, =, null, ;, }, static, final]
[=, false, ;, resolveResult, =, null, ;, }, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope]
[;, resolveResult, =, null, ;, }, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType]
[=, null, ;, }, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope]
[;, }, static, final, JSType, safeResolve, (, JSType, type, ,, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {]
[;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return, validator, ., apply, (, this, )]
[?, null, :, type, ., resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType]
[==, null, ?, null, :, type, ., resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate]
[?, null, :, type, ., resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType]
[:, type, ., resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator]
[;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return, validator, ., apply, (, this, )]
[., resolve, (, t, ,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {]
[,, scope, ), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return, validator, ., apply]
[), ;, }, public, boolean, setValidator, (, Predicate, <, JSType, >, validator, ), {, return, validator, ., apply, (, this]
[;, }, public, static, class, TypePair, {, public, final, JSType, typeA, ;, public, final, JSType, typeB, ;, public, TypePair, (]
[., apply, (, this, ), ;, }, public, static, class, TypePair, {, public, final, JSType, typeA, ;, public, final, JSType]
[), ;, }, public, static, class, TypePair, {, public, final, JSType, typeA, ;, public, final, JSType, typeB, ;, public, TypePair]
[=, typeA, ;, this, ., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return]
[., typeA, =, typeA, ;, this, ., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, )]
[;, this, ., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return, toStringHelper, (]
[=, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return, toStringHelper, (, false, ), ;, }]
[., typeB, =, typeB, ;, }, }, @, Override, public, String, toString, (, ), {, return, toStringHelper, (, false, )]
[;, }, }, @, Override, public, String, toString, (, ), {, return, toStringHelper, (, false, ), ;, }, public, String]
[;, }, public, String, toDebugHashCodeString, (, ), {, return, "{", +, hashCode, (, ), +, "}", ;, }, public, final]
[), ;, }, public, String, toDebugHashCodeString, (, ), {, return, "{", +, hashCode, (, ), +, "}", ;, }, public]
[;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (, true, ), ;, }, abstract, String, toStringHelper, (]
[+, "}", ;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (, true, ), ;, }, abstract, String]
[+, hashCode, (, ), +, "}", ;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (, true, )]
[+, "}", ;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (, true, ), ;, }, abstract, String]
[;, }, public, final, String, toAnnotationString, (, ), {, return, toStringHelper, (, true, ), ;, }, abstract, String, toStringHelper, (]
[;, }, abstract, String, toStringHelper, (, boolean, forAnnotations, ), ;, public, void, matchConstraint, (, JSType, constraint, ), {, }, }]
[), ;, }, abstract, String, toStringHelper, (, boolean, forAnnotations, ), ;, public, void, matchConstraint, (, JSType, constraint, ), {, }]
