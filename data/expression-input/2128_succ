[;, public, IllegalInstantException, (, String, message, ), {, super, (, message, ), ;, }, public, IllegalInstantException, (, long, instantLocal, ,]
[), ;, }, public, IllegalInstantException, (, long, instantLocal, ,, String, zoneId, ), {, super, (, createMessage, (, instantLocal, ,, zoneId]
[), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =, DateTimeFormat, .]
[,, zoneId, ), ), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime]
[), ), ;, }, private, static, String, createMessage, (, long, instantLocal, ,, String, zoneId, ), {, String, localDateTime, =, DateTimeFormat]
[;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): "]
[., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +]
[., forPattern, (, "yyyy-MM-dd'T'HH:mm:ss.SSS", ), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId]
[), ., print, (, new, Instant, (, instantLocal, ), ), ;, String, zone, =, (, zoneId, !=, null, ?, " ("]
[), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return]
[), ), ;, String, zone, =, (, zoneId, !=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;]
[;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (]
[), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if]
[?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static]
[!=, null, ?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }]
[?, " (", +, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static]
[:, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, )]
[+, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable]
[+, zoneId, +, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant]
[+, ")", :, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable]
[:, "", ), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, )]
[), ;, return, "Illegal instant due to time zone offset transition (daylight savings time 'gap'): ", +, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if]
[;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true]
[+, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {]
[+, localDateTime, +, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException]
[+, zone, ;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {]
[;, }, public, static, boolean, isIllegalInstant, (, Throwable, ex, ), {, if, (, ex, instanceof, IllegalInstantException, ), {, return, true]
[), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (]
[instanceof, IllegalInstantException, ), {, return, true, ;, }, while, (, ex, ., getCause, (, ), !=, null, &&, ex, .]
[;, }, while, (, ex, ., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=, ex, )]
[), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return, false, ;, }, }]
[&&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;]
[!=, null, &&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, )]
[., getCause, (, ), !=, null, &&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex]
[&&, ex, ., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;]
[), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return, false, ;, }, }]
[!=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return, false, ;, }, }]
[., getCause, (, ), !=, ex, ), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return]
[), {, return, isIllegalInstant, (, ex, ., getCause, (, ), ), ;, }, return, false, ;, }, }]
[;, }, return, false, ;, }, }]
[), ;, }, return, false, ;, }, }]
[., getCause, (, ), ), ;, }, return, false, ;, }, }]
[;, }, }]
