[;, private, final, AbstractCompiler, compiler, ;, private, final, IdGenerator, idGenerator, ;, private, final, AnalyzePrototypeProperties, analyzer, ;, private, final, JSModuleGraph, moduleGraph]
[., error, (, "JSC_INTERNAL_ERROR_MODULE_DEPEND", ,, "null deepest common module", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, IdGenerator, idGenerator, ;, private, final]
[,, "null deepest common module", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, IdGenerator, idGenerator, ;, private, final, AnalyzePrototypeProperties, analyzer, ;, private]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, IdGenerator, idGenerator, ;, private, final, AnalyzePrototypeProperties, analyzer, ;, private, final, JSModuleGraph]
[;, static, final, String, UNSTUB_METHOD_NAME, =, "JSCompiler_unstubMethod", ;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply("]
[;, static, final, String, STUB_DECLARATIONS, =, "var JSCompiler_stubMap = [];", +, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +]
[;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this]
[+, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler]
[+, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler]
[+, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this]
[+, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, )]
[+, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean]
[+, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator]
[+, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,]
[+, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler]
[+, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion]
[+, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}"]
[+, "function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {", +, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;"]
[+, "  return function() {", +, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}"]
[+, "    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(", +, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion]
[+, "        this, arguments);", +, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler]
[+, "  };", +, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,]
[+, "}", +, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator]
[+, "function JSCompiler_unstubMethod(", +, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean]
[+, "    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {", +, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, )]
[+, "  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = ", +, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this]
[+, "      JSCompiler_unstubMethod_body;", +, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler]
[+, "}", ;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler]
[;, CrossModuleMethodMotion, (, AbstractCompiler, compiler, ,, IdGenerator, idGenerator, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this]
[=, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this]
[., compiler, =, compiler, ;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, )]
[;, this, ., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer]
[=, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (]
[., idGenerator, =, idGenerator, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new]
[;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,]
[=, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,]
[., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,]
[;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,, false, ), ;, }, @, Override]
[., getModuleGraph, (, ), ;, this, ., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,, false, )]
[=, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,, false, ), ;, }, @, Override, public, void, process, (]
[., analyzer, =, new, AnalyzePrototypeProperties, (, compiler, ,, moduleGraph, ,, canModifyExterns, ,, false, ), ;, }, @, Override, public, void]
[;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=, null]
[,, moduleGraph, ,, canModifyExterns, ,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root]
[,, canModifyExterns, ,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {]
[,, false, ), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (]
[), ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, if, (, moduleGraph, !=]
[), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;]
[&&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods]
[!=, null, &&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, )]
[&&, moduleGraph, ., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods]
[), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;]
[>, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, )]
[., getModuleCount, (, ), >, 1, ), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer]
[), {, analyzer, ., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;]
[;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >]
[., process, (, externRoot, ,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, }, private]
[,, root, ), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, }, private, void, moveMethods, (, Collection]
[), ;, moveMethods, (, analyzer, ., getAllNameInfo, (, ), ), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo]
[;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, hasStubDeclaration, =, idGenerator, ., hasGeneratedAnyIds]
[), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean, hasStubDeclaration, =, idGenerator, .]
[., getAllNameInfo, (, ), ), ;, }, }, private, void, moveMethods, (, Collection, <, NameInfo, >, allNameInfo, ), {, boolean]
[;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, continue]
[., hasGeneratedAnyIds, (, ), ;, for, (, NameInfo, nameInfo, :, allNameInfo, ), {, if, (, !, nameInfo, ., isReferenced, (]
[), {, if, (, !, nameInfo, ., isReferenced, (, ), ), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables]
[), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =]
[), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =]
[., isReferenced, (, ), ), {, continue, ;, }, if, (, nameInfo, ., readsClosureVariables, (, ), ), {, continue, ;]
[), {, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, )]
[., readsClosureVariables, (, ), ), {, continue, ;, }, JSModule, deepestCommonModuleRef, =, nameInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[;, if, (, deepestCommonModuleRef, ==, null, ), {, compiler, ., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;]
[., getDeepestCommonModuleRef, (, ), ;, if, (, deepestCommonModuleRef, ==, null, ), {, compiler, ., report, (, JSError, ., make, (]
[), {, compiler, ., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol]
[==, null, ), {, compiler, ., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator]
[), {, compiler, ., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol]
[;, continue, ;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (, ), ., descendingIterator, (, ), ;]
[., report, (, JSError, ., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =]
[), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (, ), ., descendingIterator, (, )]
[., make, (, NULL_COMMON_MODULE_ERROR, ), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (]
[), ), ;, continue, ;, }, Iterator, <, Symbol, >, declarations, =, nameInfo, ., getDeclarations, (, ), ., descendingIterator, (]
[;, while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if]
[., descendingIterator, (, ), ;, while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next]
[., getDeclarations, (, ), ., descendingIterator, (, ), ;, while, (, declarations, ., hasNext, (, ), ), {, Symbol, symbol]
[), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (, !, (, symbol, instanceof, Property, ), )]
[., hasNext, (, ), ), {, Symbol, symbol, =, declarations, ., next, (, ), ;, if, (, !, (, symbol]
[;, if, (, !, (, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, )]
[., next, (, ), ;, if, (, !, (, symbol, instanceof, Property, ), ), {, continue, ;, }, Property, prop]
[), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, )]
[), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (, )]
[), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, ., getRootVar, (]
[instanceof, Property, ), ), {, continue, ;, }, Property, prop, =, (, Property, ), symbol, ;, if, (, prop, .]
[;, if, (, prop, ., getRootVar, (, ), ==, null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (]
[;, if, (, prop, ., getRootVar, (, ), ==, null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (]
[), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (]
[||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop]
[==, null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value]
[., getRootVar, (, ), ==, null, ||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue]
[||, !, prop, ., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop]
[), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (]
[), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (]
[., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop, ., getValue, (, ), ;, if, (]
[., getRootVar, (, ), ., isGlobal, (, ), ), {, continue, ;, }, Node, value, =, prop, ., getValue, (]
[;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (]
[., getValue, (, ), ;, if, (, moduleGraph, ., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&]
[), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent, ., isGetterDef, (, ), ||, valueParent]
[&&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent]
[., dependsOn, (, deepestCommonModuleRef, ,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (, ), ), {, Node]
[,, prop, ., getModule, (, ), ), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, .]
[), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (]
[., getModule, (, ), ), &&, value, ., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (]
[), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent, ., isGetterDef, (, ), ||, valueParent]
[., isFunction, (, ), ), {, Node, valueParent, =, value, ., getParent, (, ), ;, if, (, valueParent, ., isGetterDef]
[;, if, (, valueParent, ., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, ), ), {, continue, ;, }, Node]
[., getParent, (, ), ;, if, (, valueParent, ., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, ), ), {]
[), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId]
[||, valueParent, ., isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;]
[., isGetterDef, (, ), ||, valueParent, ., isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =, prop, .]
[), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId]
[., isSetterDef, (, ), ), {, continue, ;, }, Node, proto, =, prop, ., getPrototype, (, ), ;, int, stubId]
[;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call, (, IR, ., name]
[., getPrototype, (, ), ;, int, stubId, =, idGenerator, ., newId, (, ), ;, Node, stubCall, =, IR, ., call]
[;, Node, stubCall, =, IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId]
[., newId, (, ), ;, Node, stubCall, =, IR, ., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR]
[;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, )]
[., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild]
[., call, (, IR, ., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (]
[,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, .]
[., name, (, STUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall]
[), ,, IR, ., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node]
[), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, .]
[., number, (, stubId, ), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[), ), ., copyInformationFromForTree, (, value, ), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent]
[), ;, stubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall]
[;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node]
[,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (]
[., FREE_CALL, ,, true, ), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, .]
[), ;, valueParent, ., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, )]
[;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR, .]
[., replaceChild, (, value, ,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall]
[,, stubCall, ), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call]
[), ;, Node, unstubParent, =, compiler, ., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR]
[;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId]
[., getNodeForCodeInsertion, (, deepestCommonModuleRef, ), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,]
[), ;, Node, unstubCall, =, IR, ., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (]
[;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (]
[., call, (, IR, ., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;]
[,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true]
[., name, (, UNSTUB_METHOD_NAME, ), ,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (]
[), ,, IR, ., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR]
[., number, (, stubId, ), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[), ,, value, ), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (]
[), ;, unstubCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult]
[;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, .]
[,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (]
[., FREE_CALL, ,, true, ), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, .]
[), ;, unstubParent, ., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, .]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, )]
[., addChildToFront, (, IR, ., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, )]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (]
[., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration]
[., exprResult, (, IR, ., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string]
[), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !]
[., assign, (, IR, ., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name]
[,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., getprop, (, proto, ., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall]
[,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), )]
[., cloneTree, (, ), ,, IR, ., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree]
[), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., string, (, nameInfo, ., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler]
[), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[., name, ), ), ,, unstubCall, ), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, )]
[), ), ., copyInformationFromForTree, (, value, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds]
[;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler]
[., reportCodeChange, (, ), ;, }, }, }, if, (, !, hasStubDeclaration, &&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {]
[), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront]
[&&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, .]
[&&, idGenerator, ., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, .]
[), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront]
[., hasGeneratedAnyIds, (, ), ), {, Node, declarations, =, compiler, ., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (]
[;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (, declarations, ., removeChildren, (, ), ), ;, }, }, static]
[., parseSyntheticCode, (, STUB_DECLARATIONS, ), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (, declarations, ., removeChildren, (, )]
[), ;, compiler, ., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (, declarations, ., removeChildren, (, ), ), ;, }, }]
[;, }, }, static, class, IdGenerator, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 0L, ;, private, int, currentId]
[., addChildrenToFront, (, declarations, ., removeChildren, (, ), ), ;, }, }, static, class, IdGenerator, implements, Serializable, {, private, static]
[., getNodeForCodeInsertion, (, null, ), ., addChildrenToFront, (, declarations, ., removeChildren, (, ), ), ;, }, }, static, class, IdGenerator]
[), ., addChildrenToFront, (, declarations, ., removeChildren, (, ), ), ;, }, }, static, class, IdGenerator, implements, Serializable, {, private]
[), ;, }, }, static, class, IdGenerator, implements, Serializable, {, private, static, final, long, serialVersionUID, =, 0L, ;, private, int]
[., removeChildren, (, ), ), ;, }, }, static, class, IdGenerator, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, private, int, currentId, =, 0, ;, boolean, hasGeneratedAnyIds, (, ), {, return, currentId, !=, 0, ;, }, int, newId]
[;, boolean, hasGeneratedAnyIds, (, ), {, return, currentId, !=, 0, ;, }, int, newId, (, ), {, return, currentId, ++]
[;, }, int, newId, (, ), {, return, currentId, ++, ;, }, }, }]
[!=, 0, ;, }, int, newId, (, ), {, return, currentId, ++, ;, }, }, }]
[;, }, int, newId, (, ), {, return, currentId, ++, ;, }, }, }]
[;, }, }, }]
[++, ;, }, }, }]
