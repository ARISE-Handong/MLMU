[;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =]
[., error, (, "JSC_NULL_ARGUMENT_ERROR", ,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument"]
[,, "method \"{0}\" called without an argument", ), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final]
[), ;, static, final, DiagnosticType, EXPECTED_OBJECTLIT_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR]
[;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =]
[., error, (, "JSC_EXPECTED_OBJECTLIT_ERROR", ,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument"]
[,, "method \"{0}\" expected an object literal argument", ), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final]
[), ;, static, final, DiagnosticType, EXPECTED_STRING_ERROR, =, DiagnosticType, ., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR]
[;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =]
[., error, (, "JSC_EXPECTED_STRING_ERROR", ,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument"]
[,, "method \"{0}\" expected an object string argument", ), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_ARGUMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR]
[;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =]
[., error, (, "JSC_INVALID_ARGUMENT_ERROR", ,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}"]
[,, "method \"{0}\" called with invalid argument", ), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_STYLE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR]
[;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =]
[., error, (, "JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", ,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument"]
[,, "Invalid CSS name map style {0}", ), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final]
[), ;, static, final, DiagnosticType, TOO_MANY_ARGUMENTS_ERROR, =, DiagnosticType, ., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR]
[;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =]
[., error, (, "JSC_TOO_MANY_ARGUMENTS_ERROR", ,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice"]
[,, "method \"{0}\" called with more than one argument", ), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final]
[), ;, static, final, DiagnosticType, DUPLICATE_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR]
[;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =]
[., error, (, "JSC_DUPLICATE_NAMESPACE_ERROR", ,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function"]
[,, "namespace \"{0}\" cannot be provided twice", ), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final]
[), ;, static, final, DiagnosticType, FUNCTION_NAMESPACE_ERROR, =, DiagnosticType, ., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR]
[;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =]
[., error, (, "JSC_FUNCTION_NAMESPACE_ERROR", ,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided"]
[,, "\"{0}\" cannot be both provided and declared as a function", ), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final]
[), ;, static, final, DiagnosticType, MISSING_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR]
[;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =]
[., error, (, "JSC_MISSING_PROVIDE_ERROR", ,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet"]
[,, "required \"{0}\" namespace never provided", ), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final]
[), ;, static, final, DiagnosticType, LATE_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR]
[;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =]
[., error, (, "JSC_LATE_PROVIDE_ERROR", ,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name"]
[,, "required \"{0}\" namespace not provided yet", ), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_PROVIDE_ERROR, =, DiagnosticType, ., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR]
[;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_INVALID_PROVIDE_ERROR", ,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} "]
[,, "\"{0}\" is not a valid JS property name", ), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;]
[), ;, static, final, DiagnosticType, XMODULE_REQUIRE_ERROR, =, DiagnosticType, ., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final]
[;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =]
[., warning, (, "JSC_XMODULE_REQUIRE_ERROR", ,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR"]
[,, "namespace \"{0}\" provided in module {1} ", +, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;]
[), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP]
[+, "but required in module {2}", ), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final]
[), ;, static, final, DiagnosticType, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, =, DiagnosticType, ., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP]
[;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =]
[., error, (, "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", ,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}"]
[,, "goog.setCssNameMapping only takes an object literal with string values", ), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, INVALID_CSS_RENAMING_MAP, =, DiagnosticType, ., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR]
[;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", ), ;, static, final, String, GOOG, =]
[., warning, (, "INVALID_CSS_RENAMING_MAP", ,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}"]
[,, "Invalid entries in css renaming map: {0}", ), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, BASE_CLASS_ERROR, =, DiagnosticType, ., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", ), ;, static, final, String, GOOG]
[;, static, final, String, GOOG, =, "goog", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final]
[., error, (, "JSC_BASE_CLASS_ERROR", ,, "incorrect use of goog.base: {0}", ), ;, static, final, String, GOOG, =, "goog", ;, private, final, AbstractCompiler, compiler, ;]
[,, "incorrect use of goog.base: {0}", ), ;, static, final, String, GOOG, =, "goog", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph]
[), ;, static, final, String, GOOG, =, "goog", ;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private]
[;, private, final, AbstractCompiler, compiler, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final, Map, <, String, ,, ProvidedName, >, providedNames]
[;, private, final, List, <, UnrecognizedRequire, >, unrecognizedRequires, =, Lists, ., newArrayList, (, ), ;, private, final, Set, <, String]
[., newTreeMap, (, ), ;, private, final, List, <, UnrecognizedRequire, >, unrecognizedRequires, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, private, final, CheckLevel, requiresLevel, ;]
[., newArrayList, (, ), ;, private, final, Set, <, String, >, exportedVariables, =, Sets, ., newHashSet, (, ), ;, private]
[;, private, final, CheckLevel, requiresLevel, ;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,, @, Nullable, PreprocessorSymbolTable, preprocessorSymbolTable]
[., newHashSet, (, ), ;, private, final, CheckLevel, requiresLevel, ;, private, final, PreprocessorSymbolTable, preprocessorSymbolTable, ;, ProcessClosurePrimitives, (, AbstractCompiler, compiler, ,]
[=, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this]
[., compiler, =, compiler, ;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, )]
[;, this, ., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel]
[=, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames]
[., preprocessorSymbolTable, =, preprocessorSymbolTable, ;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel]
[;, this, ., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put]
[=, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new]
[., moduleGraph, =, compiler, ., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG]
[;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,]
[., getModuleGraph, (, ), ;, this, ., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (]
[=, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, )]
[., requiresLevel, =, requiresLevel, ;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,]
[;, providedNames, ., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, ), ), ;]
[;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }, @, Override, public, void, process, (]
[., put, (, GOOG, ,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, ), ), ;, }, Set]
[,, new, ProvidedName, (, GOOG, ,, null, ,, null, ,, false, ), ), ;, }, Set, <, String, >, getExportedVariableNames]
[), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }, @, Override, public, void, process]
[,, null, ,, null, ,, false, ), ), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables]
[,, null, ,, false, ), ), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }]
[,, false, ), ), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }, @, Override]
[), ), ;, }, Set, <, String, >, getExportedVariableNames, (, ), {, return, exportedVariables, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn, ., replace, (, ), ;, }]
[., traverse, (, root, ), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn, .]
[,, this, ), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), )]
[), ., traverse, (, root, ), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn]
[), ;, for, (, ProvidedName, pn, :, providedNames, ., values, (, ), ), {, pn, ., replace, (, ), ;]
[), {, pn, ., replace, (, ), ;, }, if, (, requiresLevel, ., isOn, (, ), ), {, for, (]
[., values, (, ), ), {, pn, ., replace, (, ), ;, }, if, (, requiresLevel, ., isOn, (, )]
[;, }, if, (, requiresLevel, ., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType]
[., replace, (, ), ;, }, if, (, requiresLevel, ., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :]
[), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (]
[., isOn, (, ), ), {, for, (, UnrecognizedRequire, r, :, unrecognizedRequires, ), {, DiagnosticType, error, ;, ProvidedName, expectedName, =]
[), {, DiagnosticType, error, ;, ProvidedName, expectedName, =, providedNames, ., get, (, r, ., namespace, ), ;, if, (, expectedName]
[;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else]
[., get, (, r, ., namespace, ), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, )]
[), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }]
[., namespace, ), ;, if, (, expectedName, !=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR]
[), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, .]
[&&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }]
[!=, null, &&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR]
[&&, expectedName, ., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }]
[), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, .]
[!=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (]
[., firstNode, !=, null, ), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, .]
[), {, error, =, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, .]
[=, LATE_PROVIDE_ERROR, ;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r]
[;, }, else, {, error, =, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName]
[=, MISSING_PROVIDE_ERROR, ;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,]
[;, }, compiler, ., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,]
[;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, this, ., compiler]
[., report, (, JSError, ., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r]
[), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, this, .]
[., make, (, r, ., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, ), )]
[,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, ), ), ;, }, }, }, @, Override]
[., inputName, ,, r, ., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, ), ), ;, }, }, }]
[,, requiresLevel, ,, error, ,, r, ., namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (]
[., requireNode, ,, requiresLevel, ,, error, ,, r, ., namespace, ), ), ;, }, }, }, @, Override, public, void]
[,, error, ,, r, ., namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot]
[,, r, ., namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node]
[), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, this]
[., namespace, ), ), ;, }, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, )]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[., process, (, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[., compiler, ., process, (, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch]
[), {, case, Token, ., CALL, :, boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =, n]
[., getType, (, ), ), {, case, Token, ., CALL, :, boolean, isExpr, =, parent, ., isExprResult, (, ), ;]
[:, boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, if]
[., CALL, :, boolean, isExpr, =, parent, ., isExprResult, (, ), ;, Node, left, =, n, ., getFirstChild, (, )]
[;, Node, left, =, n, ., getFirstChild, (, ), ;, if, (, left, ., isGetProp, (, ), ), {, Node]
[., isExprResult, (, ), ;, Node, left, =, n, ., getFirstChild, (, ), ;, if, (, left, ., isGetProp, (]
[;, if, (, left, ., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if]
[., getFirstChild, (, ), ;, if, (, left, ., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild]
[), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, GOOG]
[., isGetProp, (, ), ), {, Node, name, =, left, ., getFirstChild, (, ), ;, if, (, name, ., isName]
[;, if, (, name, ., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), ), )]
[., getFirstChild, (, ), ;, if, (, name, ., isName, (, ), &&, GOOG, ., equals, (, name, ., getString]
[), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals]
[&&, GOOG, ., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =, name, ., getNext, (]
[., isName, (, ), &&, GOOG, ., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =]
[), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals]
[., equals, (, name, ., getString, (, ), ), ), {, String, methodName, =, name, ., getNext, (, ), .]
[), ), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;, if, (, "base", .]
[., getString, (, ), ), ), {, String, methodName, =, name, ., getNext, (, ), ., getString, (, ), ;]
[;, if, (, "base", ., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,, n, ), ;, }, else]
[., getString, (, ), ;, if, (, "base", ., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,, n]
[., getNext, (, ), ., getString, (, ), ;, if, (, "base", ., equals, (, methodName, ), ), {, processBaseClassCall]
[), {, processBaseClassCall, (, t, ,, n, ), ;, }, else, if, (, !, isExpr, ), {, break, ;, }]
[., equals, (, methodName, ), ), {, processBaseClassCall, (, t, ,, n, ), ;, }, else, if, (, !, isExpr]
[), ), {, processBaseClassCall, (, t, ,, n, ), ;, }, else, if, (, !, isExpr, ), {, break, ;]
[;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (, "require", ., equals, (, methodName]
[,, n, ), ;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (, "require", .]
[), ;, }, else, if, (, !, isExpr, ), {, break, ;, }, else, if, (, "require", ., equals, (]
[), {, break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {, processRequireCall, (, t, ,]
[), {, break, ;, }, else, if, (, "require", ., equals, (, methodName, ), ), {, processRequireCall, (, t, ,]
[), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName]
[., equals, (, methodName, ), ), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[), ), {, processRequireCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (]
[;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,, parent]
[,, n, ,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (]
[,, parent, ), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (, t, ,]
[), ;, }, else, if, (, "provide", ., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,]
[), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName]
[., equals, (, methodName, ), ), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (]
[), ), {, processProvideCall, (, t, ,, n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (]
[;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =, left, ., getNext, (]
[,, n, ,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg]
[,, parent, ), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =, left]
[), ;, }, else, if, (, "exportSymbol", ., equals, (, methodName, ), ), {, Node, arg, =, left, ., getNext]
[), {, Node, arg, =, left, ., getNext, (, ), ;, if, (, arg, ., isString, (, ), ), {]
[., equals, (, methodName, ), ), {, Node, arg, =, left, ., getNext, (, ), ;, if, (, arg, .]
[), ), {, Node, arg, =, left, ., getNext, (, ), ;, if, (, arg, ., isString, (, ), )]
[;, if, (, arg, ., isString, (, ), ), {, int, dot, =, arg, ., getString, (, ), ., indexOf]
[., getNext, (, ), ;, if, (, arg, ., isString, (, ), ), {, int, dot, =, arg, ., getString]
[), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==]
[., isString, (, ), ), {, int, dot, =, arg, ., getString, (, ), ., indexOf, (, '.', ), ;]
[;, if, (, dot, ==, -, 1, ), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;]
[., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {, exportedVariables, ., add, (, arg, .]
[., getString, (, ), ., indexOf, (, '.', ), ;, if, (, dot, ==, -, 1, ), {, exportedVariables, .]
[), ;, if, (, dot, ==, -, 1, ), {, exportedVariables, ., add, (, arg, ., getString, (, ), )]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[==, -, 1, ), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[), {, exportedVariables, ., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (]
[;, }, else, {, exportedVariables, ., add, (, arg, ., getString, (, ), ., substring, (, 0, ,, dot, )]
[., add, (, arg, ., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (, arg, ., getString]
[), ;, }, else, {, exportedVariables, ., add, (, arg, ., getString, (, ), ., substring, (, 0, ,, dot]
[., getString, (, ), ), ;, }, else, {, exportedVariables, ., add, (, arg, ., getString, (, ), ., substring]
[;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention, convention, =, compiler, .]
[., add, (, arg, ., getString, (, ), ., substring, (, 0, ,, dot, ), ), ;, }, }, }]
[), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention, convention, =, compiler]
[., substring, (, 0, ,, dot, ), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName]
[., getString, (, ), ., substring, (, 0, ,, dot, ), ), ;, }, }, }, else, if, (, "addDependency"]
[,, dot, ), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention]
[), ), ;, }, }, }, else, if, (, "addDependency", ., equals, (, methodName, ), ), {, CodingConvention, convention, =]
[), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall]
[., equals, (, methodName, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >]
[), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, .]
[;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, )]
[., getCodingConvention, (, ), ;, List, <, String, >, typeDecls, =, convention, ., identifyTypeDeclarationCall, (, n, ), ;, if, (]
[;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (]
[., identifyTypeDeclarationCall, (, n, ), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, )]
[), ;, if, (, typeDecls, !=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry]
[), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, )]
[!=, null, ), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (]
[), {, for, (, String, typeDecl, :, typeDecls, ), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, )]
[), {, compiler, ., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n]
[;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ), ;, compiler, ., reportCodeChange]
[., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, )]
[., getTypeRegistry, (, ), ., forwardDeclareType, (, typeDecl, ), ;, }, }, parent, ., replaceChild, (, n, ,, IR, .]
[), ;, }, }, parent, ., replaceChild, (, n, ,, IR, ., number, (, 0, ), ), ;, compiler, .]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping]
[., replaceChild, (, n, ,, IR, ., number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[,, IR, ., number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping"]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {]
[., number, (, 0, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), )]
[;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping, (, t, ,, n, ,, parent]
[., reportCodeChange, (, ), ;, }, else, if, (, "setCssNameMapping", ., equals, (, methodName, ), ), {, processSetCssNameMapping, (, t]
[), {, processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN]
[., equals, (, methodName, ), ), {, processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break]
[), ), {, processSetCssNameMapping, (, t, ,, n, ,, parent, ), ;, }, }, }, break, ;, case, Token, .]
[;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,]
[,, n, ,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME]
[,, parent, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition]
[), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t]
[:, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, .]
[., ASSIGN, :, case, Token, ., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[:, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t]
[., NAME, :, handleCandidateProvideDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition]
[;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent]
[,, parent, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;]
[), ;, break, ;, case, Token, ., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;]
[:, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t]
[., EXPR_RESULT, :, handleTypedefDefinition, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if]
[;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, )]
[,, parent, ), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !]
[), ;, break, ;, case, Token, ., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, .]
[:, if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name]
[., FUNCTION, :, if, (, t, ., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, .]
[&&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString]
[., inGlobalScope, (, ), &&, !, NodeUtil, ., isFunctionExpression, (, n, ), ), {, String, name, =, n, ., getFirstChild]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, .]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, .]
[., isFunctionExpression, (, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;]
[), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames]
[;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, compiler, .]
[., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null]
[., getFirstChild, (, ), ., getString, (, ), ;, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if]
[;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,]
[., get, (, name, ), ;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError]
[), ;, if, (, pn, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }]
[!=, null, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }]
[;, }, }, break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName, (]
[., report, (, t, ., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case]
[), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName]
[., makeError, (, n, ,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :]
[,, FUNCTION_NAMESPACE_ERROR, ,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (, n, .]
[,, name, ), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (]
[), ), ;, }, }, break, ;, case, Token, ., GETPROP, :, if, (, n, ., getFirstChild, (, ), .]
[:, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&]
[., GETPROP, :, if, (, n, ., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", ), ;, }, break, ;, }, }, private, void, processRequireCall, (]
[&&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly."]
[&&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {]
[&&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n]
[., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base"]
[., getFirstChild, (, ), ., isName, (, ), &&, !, parent, ., isCall, (, ), &&, !, parent, ., isAssign]
[&&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {]
[&&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {]
[., isCall, (, ), &&, !, parent, ., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (]
[&&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly."]
[&&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly."]
[., isAssign, (, ), &&, "goog.base", ., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", ), ;, }, break, ;, }, }, private, void, processRequireCall, (]
[., equals, (, n, ., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", ), ;]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", ), ;, }, break, ;, }, }, private, void, processRequireCall]
[., getQualifiedName, (, ), ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "May only be called directly.", ), ;, }, break, ;, }]
[;, }, break, ;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[,, n, ,, "May only be called directly.", ), ;, }, break, ;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n]
[,, "May only be called directly.", ), ;, }, break, ;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, }, break, ;, }, }, private, void, processRequireCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyArgument, (, t, ,, left, ,, arg, )]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyArgument, (, t, ,]
[;, if, (, verifyArgument, (, t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (]
[., getNext, (, ), ;, if, (, verifyArgument, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, )]
[,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames]
[,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get]
[), ), {, String, ns, =, arg, ., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns]
[;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==, null, ||, !, provided, .]
[., getString, (, ), ;, ProvidedName, provided, =, providedNames, ., get, (, ns, ), ;, if, (, provided, ==, null]
[;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new]
[., get, (, ns, ), ;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {]
[), ;, if, (, provided, ==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (]
[), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), )]
[||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,]
[==, null, ||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,]
[||, !, provided, ., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,]
[), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), )]
[), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), )]
[., isExplicitlyProvided, (, ), ), {, unrecognizedRequires, ., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName]
[;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module]
[., add, (, new, UnrecognizedRequire, (, n, ,, ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else]
[), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule]
[,, ns, ,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule]
[,, t, ., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions]
[), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;]
[., getSourceName, (, ), ), ), ;, }, else, {, JSModule, providedModule, =, provided, ., explicitModule, ;, Preconditions, ., checkNotNull]
[;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph]
[., explicitModule, ;, Preconditions, ., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if]
[;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&]
[., checkNotNull, (, providedModule, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null]
[), ;, JSModule, module, =, t, ., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule]
[;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, )]
[., getModule, (, ), ;, if, (, moduleGraph, !=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (]
[&&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (]
[!=, null, &&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, .]
[&&, module, !=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (]
[!=, providedModule, &&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, .]
[&&, !, moduleGraph, ., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (]
[., dependsOn, (, module, ,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR]
[,, providedModule, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule]
[), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName]
[;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||, requiresLevel]
[., report, (, t, ., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module]
[), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||]
[., makeError, (, n, ,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, )]
[,, XMODULE_REQUIRE_ERROR, ,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }]
[,, ns, ,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable]
[,, providedModule, ., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left]
[,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, )]
[., getName, (, ), ,, module, ., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;]
[), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null]
[., getName, (, ), ), ), ;, }, }, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if]
[;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {]
[;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;]
[), ;, if, (, provided, !=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, )]
[), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processProvideCall]
[||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[!=, null, ||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (]
[||, requiresLevel, ., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processProvideCall]
[., isOn, (, ), ), {, parent, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processProvideCall, (, NodeTraversal, t, ,, Node, n, ,]
[., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processProvideCall, (, NodeTraversal, t]
[;, }, }, }, private, void, processProvideCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left]
[., reportCodeChange, (, ), ;, }, }, }, private, void, processProvideCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyProvide, (, t, ,, left, ,, arg, )]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifyProvide, (, t, ,]
[;, if, (, verifyProvide, (, t, ,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (]
[., getNext, (, ), ;, if, (, verifyProvide, (, t, ,, left, ,, arg, ), ), {, String, ns, =]
[), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, )]
[,, left, ,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, )]
[,, arg, ), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable]
[), ), {, String, ns, =, arg, ., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg]
[;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), )]
[., getString, (, ), ;, maybeAddToSymbolTable, (, left, ), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey]
[;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames]
[), ;, maybeAddStringNodeToSymbolTable, (, arg, ), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =]
[;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, )]
[), ;, if, (, providedNames, ., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns]
[), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, )]
[., containsKey, (, ns, ), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !]
[), ), {, ProvidedName, previouslyProvided, =, providedNames, ., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (]
[;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule]
[., get, (, ns, ), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (]
[), ;, if, (, !, previouslyProvided, ., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,, t, .]
[), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {]
[), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {]
[., isExplicitlyProvided, (, ), ), {, previouslyProvided, ., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, )]
[;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;]
[., addProvide, (, parent, ,, t, ., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report]
[,, t, ., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError]
[,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns]
[., getModule, (, ), ,, true, ), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n]
[), ;, }, else, {, compiler, ., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), )]
[;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;, providedNames, .]
[., report, (, t, ., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes]
[), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;, providedNames]
[., makeError, (, n, ,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent]
[,, DUPLICATE_NAMESPACE_ERROR, ,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule]
[,, ns, ), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, )]
[), ), ;, }, }, else, {, registerAnyProvidedPrefixes, (, ns, ,, parent, ,, t, ., getModule, (, ), ), ;]
[;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,]
[,, parent, ,, t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns]
[,, t, ., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent]
[), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, )]
[., getModule, (, ), ), ;, providedNames, ., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t]
[;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo, info]
[., put, (, ns, ,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,, true, )]
[,, new, ProvidedName, (, ns, ,, parent, ,, t, ., getModule, (, ), ,, true, ), ), ;, }, }]
[), ;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, JSDocInfo]
[,, parent, ,, t, ., getModule, (, ), ,, true, ), ), ;, }, }, }, private, void, handleTypedefDefinition, (]
[,, t, ., getModule, (, ), ,, true, ), ), ;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t]
[,, true, ), ), ;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., getModule, (, ), ,, true, ), ), ;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node]
[), ), ;, }, }, }, private, void, handleTypedefDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, if, (, t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {]
[., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType]
[., getFirstChild, (, ), ., getJSDocInfo, (, ), ;, if, (, t, ., inGlobalScope, (, ), &&, info, !=, null]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=, null]
[&&, info, ., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[&&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, )]
[., inGlobalScope, (, ), &&, info, !=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =, n]
[&&, info, ., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[!=, null, &&, info, ., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName]
[&&, info, ., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=, null]
[., hasTypedefType, (, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if]
[;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (]
[., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, ProvidedName, pn, =, providedNames]
[), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn]
[!=, null, ), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, )]
[), {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn]
[;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, n, ,, t, ., getModule, (, ), )]
[., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, n, ,, t]
[), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, n, ,, t, ., getModule, (, )]
[), {, pn, ., addDefinition, (, n, ,, t, ., getModule, (, ), ), ;, }, }, }, }, private]
[!=, null, ), {, pn, ., addDefinition, (, n, ,, t, ., getModule, (, ), ), ;, }, }, }]
[), {, pn, ., addDefinition, (, n, ,, t, ., getModule, (, ), ), ;, }, }, }, }, private]
[;, }, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[., addDefinition, (, n, ,, t, ., getModule, (, ), ), ;, }, }, }, }, private, void, handleCandidateProvideDefinition, (]
[,, t, ., getModule, (, ), ), ;, }, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node]
[), ;, }, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., getModule, (, ), ), ;, }, }, }, }, private, void, handleCandidateProvideDefinition, (, NodeTraversal, t, ,, Node, n, ,]
[), {, String, name, =, null, ;, if, (, n, ., isName, (, ), &&, parent, ., isVar, (, )]
[., inGlobalScope, (, ), ), {, String, name, =, null, ;, if, (, n, ., isName, (, ), &&, parent]
[;, if, (, n, ., isName, (, ), &&, parent, ., isVar, (, ), ), {, name, =, n, .]
[), {, name, =, n, ., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&]
[&&, parent, ., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;, }, else, if, (]
[., isName, (, ), &&, parent, ., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;]
[), {, name, =, n, ., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&]
[., isVar, (, ), ), {, name, =, n, ., getString, (, ), ;, }, else, if, (, n, .]
[=, n, ., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult]
[;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {, name, =]
[., getString, (, ), ;, }, else, if, (, n, ., isAssign, (, ), &&, parent, ., isExprResult, (, )]
[), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null]
[&&, parent, ., isExprResult, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;]
[., isAssign, (, ), &&, parent, ., isExprResult, (, ), ), {, name, =, n, ., getFirstChild, (, ), .]
[), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null]
[., isExprResult, (, ), ), {, name, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if]
[=, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if]
[;, }, if, (, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), )]
[., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (, parent, ., getBooleanProp, (, Node]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, if, (, name, !=, null, ), {, if, (, parent]
[), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,]
[!=, null, ), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,]
[), {, if, (, parent, ., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,]
[), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get]
[., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else]
[), ), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, .]
[., IS_NAMESPACE, ), ), {, processProvideFromPreviousPass, (, t, ,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =]
[;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null, )]
[,, name, ,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if]
[,, parent, ), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn]
[), ;, }, else, {, ProvidedName, pn, =, providedNames, ., get, (, name, ), ;, if, (, pn, !=, null]
[;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, parent, ,, t, ., getModule, (, ), )]
[., get, (, name, ), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, parent, ,, t]
[), ;, if, (, pn, !=, null, ), {, pn, ., addDefinition, (, parent, ,, t, ., getModule, (, )]
[), {, pn, ., addDefinition, (, parent, ,, t, ., getModule, (, ), ), ;, }, }, }, }, }]
[!=, null, ), {, pn, ., addDefinition, (, parent, ,, t, ., getModule, (, ), ), ;, }, }, }]
[), {, pn, ., addDefinition, (, parent, ,, t, ., getModule, (, ), ), ;, }, }, }, }, }]
[;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, callee, =]
[., addDefinition, (, parent, ,, t, ., getModule, (, ), ), ;, }, }, }, }, }, private, void, processBaseClassCall]
[,, t, ., getModule, (, ), ), ;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,]
[), ;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, callee]
[., getModule, (, ), ), ;, }, }, }, }, }, private, void, processBaseClassCall, (, NodeTraversal, t, ,, Node, n]
[;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis]
[., getFirstChild, (, ), ;, Node, thisArg, =, callee, ., getNext, (, ), ;, if, (, thisArg, ==, null, ||]
[;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n]
[., getNext, (, ), ;, if, (, thisArg, ==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t]
[||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;]
[==, null, ||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;]
[||, !, thisArg, ., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t]
[., isThis, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode]
[;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse]
[,, n, ,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode]
[,, "First argument must be 'this'.", ), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null]
[), ;, return, ;, }, Node, enclosingFnNameNode, =, getEnclosingDeclNameNode, (, t, ), ;, if, (, enclosingFnNameNode, ==, null, ), {]
[;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }]
[), ;, if, (, enclosingFnNameNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName]
[==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName]
[;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype."]
[,, n, ,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (]
[,, "Could not find enclosing method.", ), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, .]
[), ;, return, ;, }, String, enclosingQname, =, enclosingFnNameNode, ., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (]
[;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent]
[., getQualifiedName, (, ), ;, if, (, enclosingQname, ., indexOf, (, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent]
[), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, )]
[==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, .]
[., indexOf, (, ".prototype.", ), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node]
[), ==, -, 1, ), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent]
[), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, )]
[), {, Node, enclosingParent, =, enclosingFnNameNode, ., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, )]
[;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent, ), .]
[., getParent, (, ), ;, Node, maybeInheritsExpr, =, (, enclosingParent, ., isAssign, (, ), ?, enclosingParent, ., getParent, (, )]
[;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, .]
[., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (]
[), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult]
[?, enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if]
[., isAssign, (, ), ?, enclosingParent, ., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode]
[:, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr]
[., getParent, (, ), :, enclosingParent, ), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr]
[), ., getNext, (, ), ;, Node, baseClassNode, =, null, ;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult]
[;, if, (, maybeInheritsExpr, !=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall]
[), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild]
[&&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, )]
[&&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode]
[!=, null, &&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {]
[&&, maybeInheritsExpr, ., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode]
[&&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, )]
[., isExprResult, (, ), &&, maybeInheritsExpr, ., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr]
[), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild]
[., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals]
[., getFirstChild, (, ), ., isCall, (, ), ), {, Node, callNode, =, maybeInheritsExpr, ., getFirstChild, (, ), ;, if]
[;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, callNode, .]
[., getFirstChild, (, ), ;, if, (, "goog.inherits", ., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse]
[&&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;]
[., equals, (, callNode, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), .]
[), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, )]
[., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), &&, callNode, ., getLastChild, (, ), ., isQualifiedName, (, ), )]
[), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse]
[., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==]
[., getLastChild, (, ), ., isQualifiedName, (, ), ), {, baseClassNode, =, callNode, ., getLastChild, (, ), ;, }, }]
[=, callNode, ., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,]
[;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return]
[., getLastChild, (, ), ;, }, }, if, (, baseClassNode, ==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,]
[==, null, ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,]
[;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[,, n, ,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler]
[,, "Could not find goog.inherits for base class", ), ;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention]
[), ;, return, ;, }, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if]
[., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call"]
[,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, )]
[,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;]
[., getCodingConvention, (, ), ,, String, ., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,]
[,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg]
[., format, (, "%s.call", ,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;, compiler, .]
[,, baseClassNode, ., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;]
[), ,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =]
[., getQualifiedName, (, ), ), ,, callee, ,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else]
[,, "goog.base", ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, )]
[;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !]
[., reportCodeChange, (, ), ;, }, else, {, Node, methodNameNode, =, thisArg, ., getNext, (, ), ;, if, (, methodNameNode]
[;, if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n]
[., getNext, (, ), ;, if, (, methodNameNode, ==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString]
[||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;]
[==, null, ||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;]
[||, !, methodNameNode, ., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString]
[., isString, (, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName]
[;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;]
[,, n, ,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending]
[,, "Second argument must name a method.", ), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype."]
[), ;, return, ;, }, String, methodName, =, methodNameNode, ., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName]
[;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending]
[., getString, (, ), ;, String, ending, =, ".prototype.", +, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname]
[;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,]
[+, methodName, ;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (]
[;, if, (, enclosingQname, ==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode]
[||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, )]
[==, null, ||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +]
[||, !, enclosingQname, ., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, )]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode]
[), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode]
[., endsWith, (, ending, ), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;]
[), ), {, reportBadBaseClassUse, (, t, ,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =]
[;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild]
[,, n, ,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), .]
[,, "Enclosing method does not match ", +, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (]
[), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, .]
[+, methodName, ), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;]
[), ;, return, ;, }, Node, className, =, enclosingFnNameNode, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, .]
[;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format]
[., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, )]
[., getFirstChild, (, ), ., getFirstChild, (, ), ;, n, ., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler]
[;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (]
[., replaceChild, (, callee, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call"]
[,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName]
[), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, )]
[,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", )]
[., getCodingConvention, (, ), ,, String, ., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,]
[,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., format, (, "%s.superClass_.%s.call", ,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;]
[,, className, ., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (]
[,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange]
[., getQualifiedName, (, ), ,, methodName, ), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, )]
[), ,, callee, ,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, )]
[,, "goog.base", ), ), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[), ), ;, n, ., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =]
[., removeChild, (, methodNameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot]
[;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =, t, ., getScopeRoot, (, ), ;]
[., reportCodeChange, (, ), ;, }, }, private, Node, getEnclosingDeclNameNode, (, NodeTraversal, t, ), {, Node, scopeRoot, =, t, .]
[;, if, (, NodeUtil, ., isFunctionDeclaration, (, scopeRoot, ), ), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else]
[., getScopeRoot, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, scopeRoot, ), ), {, return, scopeRoot, ., getFirstChild, (]
[), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, )]
[., isFunctionDeclaration, (, scopeRoot, ), ), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =]
[), ), {, return, scopeRoot, ., getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (]
[;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent, !=, null, ), {]
[., getFirstChild, (, ), ;, }, else, {, Node, parent, =, scopeRoot, ., getParent, (, ), ;, if, (, parent]
[;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (]
[., getParent, (, ), ;, if, (, parent, !=, null, ), {, if, (, parent, ., isAssign, (, ), ||]
[), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, .]
[!=, null, ), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&]
[), {, if, (, parent, ., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, .]
[), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName, (, ), ), {]
[||, parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {]
[., isAssign, (, ), ||, parent, ., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName]
[), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName, (, ), ), {]
[&&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }]
[==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, )]
[., getLastChild, (, ), ==, scopeRoot, &&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent]
[&&, parent, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }]
[), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName, (, ), ), {]
[., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName]
[., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, return, parent, ., getFirstChild, (, ), ;, }, else, if]
[;, }, else, if, (, parent, ., isName, (, ), ), {, return, parent, ;, }, }, }, return, null]
[., getFirstChild, (, ), ;, }, else, if, (, parent, ., isName, (, ), ), {, return, parent, ;, }]
[), {, return, parent, ;, }, }, }, return, null, ;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node]
[., isName, (, ), ), {, return, parent, ;, }, }, }, return, null, ;, }, private, void, reportBadBaseClassUse, (]
[;, }, }, }, return, null, ;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage]
[;, }, private, void, reportBadBaseClassUse, (, NodeTraversal, t, ,, Node, n, ,, String, extraMessage, ), {, compiler, ., report, (]
[;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (, !, providedNames]
[., report, (, t, ., makeError, (, n, ,, BASE_CLASS_ERROR, ,, extraMessage, ), ), ;, }, private, void, processProvideFromPreviousPass, (]
[), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (, !]
[., makeError, (, n, ,, BASE_CLASS_ERROR, ,, extraMessage, ), ), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String]
[,, BASE_CLASS_ERROR, ,, extraMessage, ), ), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent]
[,, extraMessage, ), ), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {]
[), ), ;, }, private, void, processProvideFromPreviousPass, (, NodeTraversal, t, ,, String, name, ,, Node, parent, ), {, if, (]
[), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;]
[), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;]
[., containsKey, (, name, ), ), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, .]
[), ), {, Node, expr, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, )]
[;, expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, )]
[), ;, expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent]
[., EXPR_RESULT, ), ;, expr, ., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr]
[;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., copyInformationFromForTree, (, parent, ), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler]
[), ;, parent, ., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, )]
[;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,]
[., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule]
[., getParent, (, ), ., addChildBefore, (, expr, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes]
[), ;, compiler, ., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name]
[;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName]
[., reportCodeChange, (, ), ;, JSModule, module, =, t, ., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,]
[;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,]
[., getModule, (, ), ;, registerAnyProvidedPrefixes, (, name, ,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (]
[;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (]
[,, expr, ,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, )]
[,, module, ), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames]
[), ;, ProvidedName, provided, =, new, ProvidedName, (, name, ,, expr, ,, module, ,, true, ), ;, providedNames, ., put]
[;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }]
[,, expr, ,, module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition]
[,, module, ,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent]
[,, true, ), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module]
[), ;, providedNames, ., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;]
[;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), )]
[., put, (, name, ,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {]
[,, provided, ), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (]
[), ;, provided, ., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, )]
[;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, ), ., removeChild, (]
[., addDefinition, (, parent, ,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent]
[,, module, ), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, )]
[), ;, }, else, {, if, (, isNamespacePlaceholder, (, parent, ), ), {, parent, ., getParent, (, ), ., removeChild]
[), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ), {, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n, ,]
[., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processSetCssNameMapping, (, NodeTraversal]
[., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n]
[;, }, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, left]
[., reportCodeChange, (, ), ;, }, }, }, private, void, processSetCssNameMapping, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifySetCssNameMapping, (, t, ,, left, ,, arg, )]
[., getFirstChild, (, ), ;, Node, arg, =, left, ., getNext, (, ), ;, if, (, verifySetCssNameMapping, (, t, ,]
[;, if, (, verifySetCssNameMapping, (, t, ,, left, ,, arg, ), ), {, final, Map, <, String, ,, String, >]
[., getNext, (, ), ;, if, (, verifySetCssNameMapping, (, t, ,, left, ,, arg, ), ), {, final, Map, <]
[), {, final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (, Node]
[,, left, ,, arg, ), ), {, final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (]
[,, arg, ), ), {, final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (, ), ;]
[), ), {, final, Map, <, String, ,, String, >, cssNames, =, Maps, ., newHashMap, (, ), ;, for, (]
[;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., newHashMap, (, ), ;, for, (, Node, key, =, arg, ., getFirstChild, (, ), ;, key, !=, null, ;]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value]
[;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, )]
[;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if]
[=, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||]
[., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, if, (, !, key, .]
[;, if, (, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, )]
[., getFirstChild, (, ), ;, if, (, !, key, ., isStringKey, (, ), ||, value, ==, null, ||, !, value]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames]
[||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR]
[||, value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError]
[||, value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError]
[., isStringKey, (, ), ||, value, ==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report]
[||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR]
[==, null, ||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n]
[||, !, value, ., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames]
[., isString, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;]
[;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,, value, ., getString, (, ), )]
[., report, (, t, ., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (]
[), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,, value, ., getString, (, )]
[., makeError, (, n, ,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (]
[,, NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR, ), ), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,, value, .]
[), ), ;, return, ;, }, cssNames, ., put, (, key, ., getString, (, ), ,, value, ., getString, (]
[;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr, =]
[., put, (, key, ., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =]
[,, value, ., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (]
[., getString, (, ), ,, value, ., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (]
[), ;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr]
[., getString, (, ), ), ;, }, String, styleStr, =, "BY_PART", ;, if, (, arg, ., getNext, (, ), !=]
[;, if, (, arg, ., getNext, (, ), !=, null, ), {, styleStr, =, arg, ., getNext, (, ), .]
[), {, styleStr, =, arg, ., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style]
[!=, null, ), {, styleStr, =, arg, ., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, .]
[., getNext, (, ), !=, null, ), {, styleStr, =, arg, ., getNext, (, ), ., getString, (, ), ;]
[), {, styleStr, =, arg, ., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style]
[=, arg, ., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {]
[;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =, CssRenamingMap, ., Style, ., valueOf, (, styleStr, )]
[., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =, CssRenamingMap, ., Style, .]
[., getNext, (, ), ., getString, (, ), ;, }, final, CssRenamingMap, ., Style, style, ;, try, {, style, =]
[=, CssRenamingMap, ., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report]
[;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,]
[., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError]
[., Style, ., valueOf, (, styleStr, ), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t]
[), ;, }, catch, (, IllegalArgumentException, e, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR]
[;, return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String, >, errors]
[., report, (, t, ., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (]
[), ;, return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String, >]
[., makeError, (, n, ,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (, style, ==, CssRenamingMap, .]
[,, INVALID_STYLE_ERROR, ,, styleStr, ), ), ;, return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, )]
[,, styleStr, ), ), ;, return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List]
[), ), ;, return, ;, }, if, (, style, ==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String]
[), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, String, key, :, cssNames]
[==, CssRenamingMap, ., Style, ., BY_PART, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;]
[), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, String, key, :, cssNames]
[., BY_PART, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, String, key]
[., Style, ., BY_PART, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (]
[;, for, (, String, key, :, cssNames, ., keySet, (, ), ), {, if, (, key, ., contains, (, "-"]
[., newArrayList, (, ), ;, for, (, String, key, :, cssNames, ., keySet, (, ), ), {, if, (, key]
[), {, if, (, key, ., contains, (, "-", ), ), {, errors, ., add, (, key, ), ;, }]
[., keySet, (, ), ), {, if, (, key, ., contains, (, "-", ), ), {, errors, ., add, (]
[), {, errors, ., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0]
[., contains, (, "-", ), ), {, errors, ., add, (, key, ), ;, }, }, if, (, errors, .]
[), ), {, errors, ., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=]
[;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t, .]
[., add, (, key, ), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler]
[), ;, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[!=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[;, }, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String, >, errors]
[., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }]
[), ;, }, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String, >]
[., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (]
[,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (, style, ==, CssRenamingMap, .]
[,, errors, ., toString, (, ), ), ), ;, }, }, else, if, (, style, ==, CssRenamingMap, ., Style, .]
[), ), ;, }, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String]
[., toString, (, ), ), ), ;, }, }, else, if, (, style, ==, CssRenamingMap, ., Style, ., BY_WHOLE, )]
[), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, Map, ., Entry, <]
[==, CssRenamingMap, ., Style, ., BY_WHOLE, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;]
[), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, Map, ., Entry, <]
[., BY_WHOLE, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (, Map, .]
[., Style, ., BY_WHOLE, ), {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, for, (]
[;, for, (, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet, (, ), ), {]
[., newArrayList, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, b, :, cssNames, ., entrySet]
[), {, if, (, b, ., getKey, (, ), ., length, (, ), >, 10, ), continue, ;, for, (]
[., entrySet, (, ), ), {, if, (, b, ., getKey, (, ), ., length, (, ), >, 10, )]
[), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a, :, cssNames, ., entrySet, (, )]
[>, 10, ), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a, :, cssNames, ., entrySet]
[., length, (, ), >, 10, ), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a]
[., getKey, (, ), ., length, (, ), >, 10, ), continue, ;, for, (, Map, ., Entry, <, String]
[), continue, ;, for, (, Map, ., Entry, <, String, ,, String, >, a, :, cssNames, ., entrySet, (, )]
[), {, String, combined, =, cssNames, ., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey]
[., entrySet, (, ), ), {, String, combined, =, cssNames, ., get, (, a, ., getKey, (, ), +, "-"]
[;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +]
[., get, (, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (]
[), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-"]
[+, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a]
[+, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals]
[., getKey, (, ), +, "-", +, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&]
[+, b, ., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a]
[), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-"]
[., getKey, (, ), ), ;, if, (, combined, !=, null, &&, !, combined, ., equals, (, a, ., getValue]
[), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (]
[&&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), )]
[!=, null, &&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (]
[&&, !, combined, ., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), )]
[), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (]
[), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (]
[., equals, (, a, ., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors]
[), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey]
[+, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, )]
[+, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey]
[., getValue, (, ), +, "-", +, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map("]
[+, b, ., getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, )]
[), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey]
[., getValue, (, ), ), ), {, errors, ., add, (, "map(", +, a, ., getKey, (, ), +, "-"]
[;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (, t]
[., add, (, "map(", +, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map("]
[), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[+, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, .]
[+, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, )]
[+, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size]
[+, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }]
[+, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;]
[+, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey]
[+, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b]
[+, a, ., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey]
[+, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b]
[., getKey, (, ), +, "-", +, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, )]
[+, b, ., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey]
[+, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;]
[., getKey, (, ), +, ") != map(", +, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, )]
[+, a, ., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }]
[+, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size]
[., getKey, (, ), +, ")-map(", +, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if]
[+, b, ., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, )]
[+, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, .]
[., getKey, (, ), +, ")", ), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0]
[), ;, }, }, }, if, (, errors, ., size, (, ), !=, 0, ), {, compiler, ., report, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[!=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (]
[., size, (, ), !=, 0, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), )]
[;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value, )]
[., report, (, t, ., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }]
[), ;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String, value]
[., makeError, (, n, ,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, CssRenamingMap, cssRenamingMap, =]
[,, INVALID_CSS_RENAMING_MAP, ,, errors, ., toString, (, ), ), ), ;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, )]
[,, errors, ., toString, (, ), ), ), ;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @]
[), ), ;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public, String, get, (, String]
[., toString, (, ), ), ), ;, }, }, CssRenamingMap, cssRenamingMap, =, new, CssRenamingMap, (, ), {, @, Override, public]
[;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler]
[), {, return, cssNames, ., get, (, value, ), ;, }, else, {, return, value, ;, }, }, @, Override]
[., containsKey, (, value, ), ), {, return, cssNames, ., get, (, value, ), ;, }, else, {, return, value]
[), ), {, return, cssNames, ., get, (, value, ), ;, }, else, {, return, value, ;, }, }, @]
[;, }, else, {, return, value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return]
[., get, (, value, ), ;, }, else, {, return, value, ;, }, }, @, Override, public, CssRenamingMap, ., Style]
[), ;, }, else, {, return, value, ;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {]
[;, }, }, @, Override, public, CssRenamingMap, ., Style, getStyle, (, ), {, return, style, ;, }, }, ;, compiler]
[;, }, }, ;, compiler, ., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (, parent]
[;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., setCssRenamingMap, (, cssRenamingMap, ), ;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange]
[), ;, parent, ., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node]
[., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t]
[., getParent, (, ), ., removeChild, (, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,]
[;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, if, (, !]
[., reportCodeChange, (, ), ;, }, }, private, boolean, verifyProvide, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, )]
[), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\."]
[), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\."]
[,, methodName, ,, arg, ), ), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (]
[,, arg, ), ), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (, ), .]
[), ), {, return, false, ;, }, for, (, String, part, :, arg, ., getString, (, ), ., split, (]
[;, }, for, (, String, part, :, arg, ., getString, (, ), ., split, (, "\\.", ), ), {, if]
[), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, ., makeError]
[., split, (, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, .]
[., getString, (, ), ., split, (, "\\.", ), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, )]
[), ), {, if, (, !, NodeUtil, ., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, .]
[), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false]
[), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false]
[., isValidPropertyName, (, part, ), ), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part]
[), ), {, compiler, ., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return]
[;, return, false, ;, }, }, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,]
[., report, (, t, ., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false, ;, }, }]
[), ;, return, false, ;, }, }, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName]
[., makeError, (, arg, ,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false, ;, }, }, return, true, ;, }]
[,, INVALID_PROVIDE_ERROR, ,, part, ), ), ;, return, false, ;, }, }, return, true, ;, }, private, boolean, verifyArgument, (]
[,, part, ), ), ;, return, false, ;, }, }, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t]
[), ), ;, return, false, ;, }, }, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node]
[;, }, }, return, true, ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, )]
[;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ), {, return, verifyArgument, (, t]
[;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {, DiagnosticType]
[,, methodName, ,, arg, ,, Token, ., STRING, ), ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName]
[,, arg, ,, Token, ., STRING, ), ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node]
[,, Token, ., STRING, ), ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,]
[), ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType, ), {]
[., STRING, ), ;, }, private, boolean, verifyArgument, (, NodeTraversal, t, ,, Node, methodName, ,, Node, arg, ,, int, desiredType]
[;, if, (, arg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (]
[), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic]
[==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, )]
[), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic]
[=, NULL_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;]
[;, }, else, if, (, arg, ., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else]
[), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic]
[!=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, )]
[., getType, (, ), !=, desiredType, ), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (]
[), {, diagnostic, =, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic]
[=, INVALID_ARGUMENT_ERROR, ;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;]
[;, }, else, if, (, arg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if]
[), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, .]
[!=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (]
[., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {]
[), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, .]
[=, TOO_MANY_ARGUMENTS_ERROR, ;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName]
[;, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic]
[), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[!=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (]
[), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[;, return, false, ;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node]
[., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return]
[), ;, return, false, ;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,]
[., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return]
[,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private]
[,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping]
[), ), ;, return, false, ;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName]
[., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal]
[;, }, return, true, ;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {]
[;, }, private, boolean, verifySetCssNameMapping, (, NodeTraversal, t, ,, Node, methodName, ,, Node, firstArg, ), {, DiagnosticType, diagnostic, =, null]
[;, if, (, firstArg, ==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit]
[), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =]
[==, null, ), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {]
[), {, diagnostic, =, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =]
[=, NULL_ARGUMENT_ERROR, ;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }]
[;, }, else, if, (, !, firstArg, ., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if]
[), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node]
[), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node]
[., isObjectLit, (, ), ), {, diagnostic, =, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=]
[=, EXPECTED_OBJECTLIT_ERROR, ;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg]
[;, }, else, if, (, firstArg, ., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg, ., getNext]
[), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !, secondArg, ., isString, (, ), )]
[!=, null, ), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !, secondArg, ., isString, (]
[., getNext, (, ), !=, null, ), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !]
[), {, Node, secondArg, =, firstArg, ., getNext, (, ), ;, if, (, !, secondArg, ., isString, (, ), )]
[;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg]
[., getNext, (, ), ;, if, (, !, secondArg, ., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }]
[), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic]
[), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic]
[., isString, (, ), ), {, diagnostic, =, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=]
[=, EXPECTED_STRING_ERROR, ;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;]
[;, }, else, if, (, secondArg, ., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }]
[), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t]
[!=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report]
[., getNext, (, ), !=, null, ), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, )]
[), {, diagnostic, =, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t]
[=, TOO_MANY_ARGUMENTS_ERROR, ;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (]
[;, }, }, if, (, diagnostic, !=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,]
[), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[!=, null, ), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (]
[), {, compiler, ., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), )]
[;, return, false, ;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule]
[., report, (, t, ., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return]
[), ;, return, false, ;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,]
[., makeError, (, methodName, ,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return]
[,, diagnostic, ,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private]
[,, methodName, ., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes]
[), ), ;, return, false, ;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node]
[., getQualifiedName, (, ), ), ), ;, return, false, ;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes, (, String]
[;, }, return, true, ;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule, module, ), {]
[;, }, private, void, registerAnyProvidedPrefixes, (, String, ns, ,, Node, node, ,, JSModule, module, ), {, int, pos, =, ns]
[;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, )]
[., indexOf, (, '.', ), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring]
[), ;, while, (, pos, !=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos]
[), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (]
[!=, -, 1, ), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns]
[), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (]
[), {, String, prefixNs, =, ns, ., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (]
[;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (]
[., substring, (, 0, ,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, )]
[,, pos, ), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames]
[), ;, pos, =, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey]
[=, ns, ., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, )]
[;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (]
[., indexOf, (, '.', ,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {]
[,, pos, +, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (]
[), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide]
[+, 1, ), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, )]
[), ;, if, (, providedNames, ., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide]
[), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else]
[., containsKey, (, prefixNs, ), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,]
[), ), {, providedNames, ., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }]
[;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,, false]
[., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new]
[., get, (, prefixNs, ), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {, providedNames, .]
[), ., addProvide, (, node, ,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,]
[,, module, ,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,]
[,, false, ), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,]
[), ;, }, else, {, providedNames, ., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,]
[;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace, ;, private, final, Node, firstNode, ;, private, final]
[., put, (, prefixNs, ,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,, false, ), ), ;, }, }]
[,, new, ProvidedName, (, prefixNs, ,, node, ,, module, ,, false, ), ), ;, }, }, }, private, class, ProvidedName]
[), ;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace, ;, private, final, Node, firstNode, ;, private]
[,, node, ,, module, ,, false, ), ), ;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace]
[,, module, ,, false, ), ), ;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace, ;, private]
[,, false, ), ), ;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace, ;, private, final, Node]
[), ), ;, }, }, }, private, class, ProvidedName, {, private, final, String, namespace, ;, private, final, Node, firstNode, ;]
[;, private, JSModule, explicitModule, =, null, ;, private, Node, candidateDefinition, =, null, ;, private, JSModule, minimumModule, =, null, ;, private]
[;, private, Node, candidateDefinition, =, null, ;, private, JSModule, minimumModule, =, null, ;, private, Node, replacementNode, =, null, ;, ProvidedName]
[;, private, JSModule, minimumModule, =, null, ;, private, Node, replacementNode, =, null, ;, ProvidedName, (, String, namespace, ,, Node, node]
[;, private, Node, replacementNode, =, null, ;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit]
[;, ProvidedName, (, String, namespace, ,, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, Preconditions, ., checkArgument, (]
[;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide]
[., checkArgument, (, node, ==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;]
[), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;]
[||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;]
[==, null, ||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =]
[||, node, ., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;]
[), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;]
[., isExprResult, (, ), ), ;, this, ., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, .]
[=, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module]
[., namespace, =, namespace, ;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node]
[;, this, ., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module, ,, explicit]
[=, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module, ,, explicit, ), ;, }, void]
[., firstNode, =, node, ;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module, ,, explicit, ), ;]
[;, this, ., firstModule, =, module, ;, addProvide, (, node, ,, module, ,, explicit, ), ;, }, void, addProvide, (]
[=, module, ;, addProvide, (, node, ,, module, ,, explicit, ), ;, }, void, addProvide, (, Node, node, ,, JSModule]
[., firstModule, =, module, ;, addProvide, (, node, ,, module, ,, explicit, ), ;, }, void, addProvide, (, Node, node]
[;, addProvide, (, node, ,, module, ,, explicit, ), ;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,]
[;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, ), {]
[,, module, ,, explicit, ), ;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {]
[,, explicit, ), ;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (]
[), ;, }, void, addProvide, (, Node, node, ,, JSModule, module, ,, boolean, explicit, ), {, if, (, explicit, )]
[), {, Preconditions, ., checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, )]
[;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module, ;]
[., checkState, (, explicitNode, ==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode]
[), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module]
[==, null, ), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule]
[), ;, Preconditions, ., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module]
[;, explicitNode, =, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, )]
[., checkArgument, (, node, ., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module, ;, }, updateMinimumModule]
[), ;, explicitNode, =, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (]
[., isExprResult, (, ), ), ;, explicitNode, =, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;]
[=, node, ;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return]
[;, explicitModule, =, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=]
[=, module, ;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;]
[;, }, updateMinimumModule, (, module, ), ;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;, }, void]
[;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule]
[), ;, }, boolean, isExplicitlyProvided, (, ), {, return, explicitNode, !=, null, ;, }, void, addDefinition, (, Node, node, ,]
[;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (]
[!=, null, ;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (, node, .]
[;, }, void, addDefinition, (, Node, node, ,, JSModule, module, ), {, Preconditions, ., checkArgument, (, node, ., isExprResult, (]
[;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node]
[., checkArgument, (, node, ., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, )]
[), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !]
[||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (]
[||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=]
[., isExprResult, (, ), ||, node, ., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, .]
[||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (]
[., isFunction, (, ), ||, node, ., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, )]
[), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !]
[., isVar, (, ), ), ;, Preconditions, ., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==]
[;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node]
[., checkArgument, (, explicitNode, !=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult]
[), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =]
[!=, node, ), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {]
[), ;, if, (, (, candidateDefinition, ==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =]
[), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, )]
[||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }, }]
[), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }]
[==, null, ), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, )]
[), ||, !, node, ., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }]
[), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, )]
[), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, )]
[., isExprResult, (, ), ), {, candidateDefinition, =, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule]
[=, node, ;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (]
[;, updateMinimumModule, (, module, ), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==]
[;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule, =]
[), ;, }, }, private, void, updateMinimumModule, (, JSModule, newModule, ), {, if, (, minimumModule, ==, null, ), {, minimumModule]
[), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive]
[==, null, ), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph]
[), {, minimumModule, =, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive]
[=, newModule, ;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,]
[;, }, else, if, (, moduleGraph, !=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, )]
[), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (]
[!=, null, ), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, .]
[), {, minimumModule, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (]
[=, moduleGraph, ., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule]
[;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (]
[., getDeepestCommonDependencyInclusive, (, minimumModule, ,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph"]
[,, newModule, ), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }]
[), ;, }, else, {, Preconditions, ., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace]
[;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;, return]
[., checkState, (, newModule, ==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode]
[,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =]
[==, minimumModule, ,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {]
[,, "Missing module graph", ), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =]
[), ;, }, }, void, replace, (, ), {, if, (, firstNode, ==, null, ), {, replacementNode, =, candidateDefinition, ;]
[), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {]
[==, null, ), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null]
[), {, replacementNode, =, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {]
[=, candidateDefinition, ;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent]
[;, return, ;, }, if, (, candidateDefinition, !=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, )]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[&&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =]
[!=, null, &&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[&&, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[!=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;]
[), {, explicitNode, ., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (]
[;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !]
[., detachFromParent, (, ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult]
[;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), .]
[., reportCodeChange, (, ), ;, replacementNode, =, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, .]
[=, candidateDefinition, ;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (]
[;, if, (, candidateDefinition, ., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), )]
[), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (]
[&&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE]
[., isExprResult, (, ), &&, !, candidateDefinition, ., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp]
[), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (]
[), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (]
[., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =]
[., getFirstChild, (, ), ., isQualifiedName, (, ), ), {, candidateDefinition, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, )]
[;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;, if]
[., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node]
[,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (]
[., IS_NAMESPACE, ,, true, ), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, .]
[), ;, Node, assignNode, =, candidateDefinition, ., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;]
[;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), ), {, Node]
[., getFirstChild, (, ), ;, Node, nameNode, =, assignNode, ., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (]
[;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode]
[., getFirstChild, (, ), ;, if, (, nameNode, ., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext]
[), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, .]
[., isName, (, ), ), {, Node, valueNode, =, nameNode, ., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode]
[;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode]
[., getNext, (, ), ;, assignNode, ., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode]
[;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, .]
[., removeChild, (, nameNode, ), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;]
[), ;, assignNode, ., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR]
[;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, .]
[., removeChild, (, valueNode, ), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (]
[), ;, nameNode, ., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode]
[;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, .]
[., addChildToFront, (, valueNode, ), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (]
[), ;, Node, varNode, =, IR, ., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition]
[;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, )]
[., var, (, nameNode, ), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild]
[), ;, varNode, ., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode]
[;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, .]
[., copyInformationFrom, (, candidateDefinition, ), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode]
[), ;, candidateDefinition, ., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode]
[;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =]
[., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler]
[., getParent, (, ), ., replaceChild, (, candidateDefinition, ,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (]
[,, varNode, ), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, )]
[), ;, nameNode, ., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode]
[;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (]
[., setJSDocInfo, (, assignNode, ., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode]
[., getJSDocInfo, (, ), ), ;, compiler, ., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else]
[;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==]
[., reportCodeChange, (, ), ;, replacementNode, =, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;]
[=, varNode, ;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, )]
[;, }, }, }, else, {, replacementNode, =, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {, firstNode]
[=, createDeclarationNode, (, ), ;, if, (, firstModule, ==, minimumModule, ), {, firstNode, ., getParent, (, ), ., addChildBefore, (]
[;, if, (, firstModule, ==, minimumModule, ), {, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, )]
[), {, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot]
[==, minimumModule, ), {, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {]
[), {, firstNode, ., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot]
[;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1]
[., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', )]
[., getParent, (, ), ., addChildBefore, (, replacementNode, ,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, .]
[,, firstNode, ), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot]
[), ;, }, else, {, int, indexOfDot, =, namespace, ., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -]
[;, if, (, indexOfDot, ==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, )]
[., lastIndexOf, (, '.', ), ;, if, (, indexOfDot, ==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, )]
[), ;, if, (, indexOfDot, ==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode]
[), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =]
[==, -, 1, ), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {]
[), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =]
[), {, compiler, ., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =]
[;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), )]
[., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (]
[., getNodeForCodeInsertion, (, minimumModule, ), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get]
[), ., addChildToBack, (, replacementNode, ), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring]
[), ;, }, else, {, ProvidedName, parentName, =, providedNames, ., get, (, namespace, ., substring, (, 0, ,, indexOfDot, )]
[;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode]
[., get, (, namespace, ., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;]
[), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, .]
[., substring, (, 0, ,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (]
[,, indexOfDot, ), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, )]
[), ), ;, Preconditions, ., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName]
[;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (]
[., checkNotNull, (, parentName, ), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent]
[), ;, Preconditions, ., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter]
[;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }]
[., checkNotNull, (, parentName, ., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,]
[), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }]
[., replacementNode, ), ;, parentName, ., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, )]
[;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange]
[., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode]
[., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=]
[., replacementNode, ., getParent, (, ), ., addChildAfter, (, replacementNode, ,, parentName, ., replacementNode, ), ;, }, }, if, (]
[,, parentName, ., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, )]
[), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }, compiler, .]
[., replacementNode, ), ;, }, }, if, (, explicitNode, !=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }]
[), {, explicitNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode]
[!=, null, ), {, explicitNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private]
[), {, explicitNode, ., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, .]
[., detachFromParent, (, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {]
[;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (, '.', ), ==, -, 1]
[., reportCodeChange, (, ), ;, }, }, private, Node, createDeclarationNode, (, ), {, if, (, namespace, ., indexOf, (, '.']
[), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode]
[==, -, 1, ), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }]
[., indexOf, (, '.', ), ==, -, 1, ), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode]
[), ==, -, 1, ), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }]
[), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode]
[), {, return, makeVarDeclNode, (, ), ;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode]
[;, }, else, {, return, makeAssignmentExprNode, (, ), ;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =]
[;, }, }, private, Node, makeVarDeclNode, (, ), {, Node, name, =, IR, ., name, (, namespace, ), ;, name]
[;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;]
[., name, (, namespace, ), ;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, .]
[), ;, name, ., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, )]
[;, Node, decl, =, IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true]
[., addChildToFront, (, createNamespaceLiteral, (, ), ), ;, Node, decl, =, IR, ., var, (, name, ), ;, decl, .]
[), ;, Node, decl, =, IR, ., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,]
[;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), .]
[., var, (, name, ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, compiler]
[), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, )]
[;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node]
[., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (]
[,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, .]
[., IS_NAMESPACE, ,, true, ), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {]
[), ;, if, (, compiler, ., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (]
[), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, )]
[., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if]
[., getCodingConvention, (, ), ., isConstant, (, namespace, ), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[), ), {, name, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null]
[;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {, name, .]
[,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), )]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (]
[), ;, }, if, (, candidateDefinition, ==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }]
[), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, )]
[==, null, ), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (]
[), {, name, ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, )]
[;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;]
[., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo]
[), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl]
[;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR]
[., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node]
[), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =]
[), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit]
[;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;]
[), ;, return, decl, ;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, )]
[;, }, private, Node, createNamespaceLiteral, (, ), {, Node, objlit, =, IR, ., objectlit, (, ), ;, objlit, ., setJSType]
[;, objlit, ., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;]
[., objectlit, (, ), ;, objlit, ., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), )]
[;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, .]
[., setJSType, (, compiler, ., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;, }, private]
[), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR]
[., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =]
[., getTypeRegistry, (, ), ., createAnonymousObjectType, (, null, ), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, )]
[), ), ;, return, objlit, ;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (]
[;, }, private, Node, makeAssignmentExprNode, (, ), {, Node, decl, =, IR, ., exprResult, (, IR, ., assign, (, NodeUtil]
[;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {, decl]
[., exprResult, (, IR, ., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode]
[), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {]
[., assign, (, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,]
[,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), )]
[,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, .]
[., getCodingConvention, (, ), ,, namespace, ,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, .]
[,, firstNode, ,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,]
[,, namespace, ), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, )]
[), ,, createNamespaceLiteral, (, ), ), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if]
[), ), ;, decl, ., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, )]
[;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), )]
[., putBooleanProp, (, Node, ., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild]
[,, true, ), ;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc]
[., IS_NAMESPACE, ,, true, ), ;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo]
[), ;, if, (, candidateDefinition, ==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, )]
[), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (]
[==, null, ), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, .]
[), {, decl, ., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (]
[;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;]
[., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo]
[., getFirstChild, (, ), ., setJSDocInfo, (, createConstantJsDoc, (, ), ), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl]
[), ;, }, Preconditions, ., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl]
[;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new]
[., checkState, (, isNamespacePlaceholder, (, decl, ), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, JSDocInfo]
[), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =]
[), ), ;, setSourceInfo, (, decl, ), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder]
[;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;]
[), ;, return, decl, ;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, )]
[;, }, private, JSDocInfo, createConstantJsDoc, (, ), {, JSDocInfoBuilder, builder, =, new, JSDocInfoBuilder, (, false, ), ;, builder, ., recordConstancy]
[;, builder, ., recordConstancy, (, ), ;, return, builder, ., build, (, null, ), ;, }, private, void, setSourceInfo, (]
[), ;, builder, ., recordConstancy, (, ), ;, return, builder, ., build, (, null, ), ;, }, private, void, setSourceInfo]
[;, return, builder, ., build, (, null, ), ;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode]
[., recordConstancy, (, ), ;, return, builder, ., build, (, null, ), ;, }, private, void, setSourceInfo, (, Node, newNode]
[;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset, =]
[., build, (, null, ), ;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =, getProvideStringNode, (]
[), ;, }, private, void, setSourceInfo, (, Node, newNode, ), {, Node, provideStringNode, =, getProvideStringNode, (, ), ;, int, offset]
[;, int, offset, =, getSourceInfoOffset, (, provideStringNode, ), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;]
[;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if]
[), ;, Node, sourceInfoNode, =, provideStringNode, ==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;]
[;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode]
[?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode]
[==, null, ?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, )]
[?, firstNode, :, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode]
[:, provideStringNode, ;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree]
[;, newNode, ., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode]
[;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, )]
[., copyInformationFromForTree, (, sourceInfoNode, ), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition]
[), ;, if, (, offset, !=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset]
[), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset]
[!=, 0, ), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, ), ;, }, }, private]
[), {, newNode, ., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset]
[;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return, 0]
[., setSourceEncodedPositionForTree, (, sourceInfoNode, ., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode]
[), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return]
[+, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, )]
[., getSourcePosition, (, ), +, offset, ), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (]
[), ;, }, }, private, int, getSourceInfoOffset, (, Node, provideStringNode, ), {, if, (, provideStringNode, ==, null, ), {, return]
[), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot]
[==, null, ), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return, 2]
[), {, return, 0, ;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot]
[;, }, int, indexOfLastDot, =, namespace, ., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node]
[;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, )]
[., lastIndexOf, (, '.', ), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (]
[), ;, return, 2, +, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (]
[;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, .]
[+, indexOfLastDot, ;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&]
[;, }, private, Node, getProvideStringNode, (, ), {, return, (, firstNode, ., getFirstChild, (, ), !=, null, &&, NodeUtil, .]
[;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node]
[?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (]
[), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder]
[&&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null]
[!=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, )]
[., getFirstChild, (, ), !=, null, &&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, )]
[&&, NodeUtil, ., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null]
[), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder]
[., isExprCall, (, firstNode, ), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }]
[), ), ?, firstNode, ., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }, }, private, static, boolean]
[:, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp]
[., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (]
[., getFirstChild, (, ), ., getLastChild, (, ), :, null, ;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n]
[;, }, }, private, static, boolean, isNamespacePlaceholder, (, Node, n, ), {, if, (, !, n, ., getBooleanProp, (, Node]
[), {, return, false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), ), {]
[), {, return, false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), ), {]
[., getBooleanProp, (, Node, ., IS_NAMESPACE, ), ), {, return, false, ;, }, Node, value, =, null, ;, if, (]
[), ), {, return, false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), )]
[., IS_NAMESPACE, ), ), {, return, false, ;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (]
[;, }, Node, value, =, null, ;, if, (, n, ., isExprResult, (, ), ), {, Node, assign, =, n]
[;, if, (, n, ., isExprResult, (, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, value]
[), {, Node, assign, =, n, ., getFirstChild, (, ), ;, value, =, assign, ., getLastChild, (, ), ;, }]
[., isExprResult, (, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, value, =, assign, ., getLastChild]
[;, value, =, assign, ., getLastChild, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {]
[., getFirstChild, (, ), ;, value, =, assign, ., getLastChild, (, ), ;, }, else, if, (, n, ., isVar]
[=, assign, ., getLastChild, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, Node, name]
[;, }, else, if, (, n, ., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, )]
[., getLastChild, (, ), ;, }, else, if, (, n, ., isVar, (, ), ), {, Node, name, =, n]
[), {, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }]
[., isVar, (, ), ), {, Node, name, =, n, ., getFirstChild, (, ), ;, value, =, name, ., getFirstChild]
[;, value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, )]
[., getFirstChild, (, ), ;, value, =, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value]
[=, name, ., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&, !]
[;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&, !, value, ., hasChildren, (, ), ;]
[., getFirstChild, (, ), ;, }, return, value, !=, null, &&, value, ., isObjectLit, (, ), &&, !, value, .]
[;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, ), {, return, ;, }]
[&&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable]
[&&, value, ., isObjectLit, (, ), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node]
[!=, null, &&, value, ., isObjectLit, (, ), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable]
[&&, value, ., isObjectLit, (, ), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node]
[&&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable]
[., isObjectLit, (, ), &&, !, value, ., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, )]
[;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, ), {, return, ;, }]
[;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, ), {, return, ;, }]
[., hasChildren, (, ), ;, }, private, void, maybeAddStringNodeToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, ==, null, )]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode]
[==, null, ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode]
[;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, n, ,, name, )]
[., getString, (, ), ;, Node, syntheticRef, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,]
[;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (]
[., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, name, ,, n, ,, name, ), ;, final, int, FOR_QUOTE, =]
[,, name, ,, n, ,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;]
[., getCodingConvention, (, ), ,, name, ,, n, ,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int]
[,, n, ,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current]
[,, name, ), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null]
[), ;, final, int, FOR_QUOTE, =, 1, ;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for]
[;, final, int, FOR_DOT, =, 1, ;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;, current, .]
[;, Node, current, =, null, ;, for, (, current, =, syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =]
[;, for, (, current, =, syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, )]
[=, syntheticRef, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen]
[;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =, current]
[;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length]
[., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, int, fullLen, =, current, ., getQualifiedName]
[=, current, ., getFirstChild, (, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, )]
[), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =, current, .]
[., getFirstChild, (, ), ), {, int, fullLen, =, current, ., getQualifiedName, (, ), ., length, (, ), ;, int]
[;, int, namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;, current, .]
[., length, (, ), ;, int, namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (]
[., getQualifiedName, (, ), ., length, (, ), ;, int, namespaceLen, =, current, ., getFirstChild, (, ), ., getQualifiedName, (]
[;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, )]
[., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, .]
[., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ., length, (, ), ;, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition]
[;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (]
[., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current]
[), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition]
[+, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n]
[., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, )]
[), ;, current, ., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition]
[;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT]
[., setLength, (, fullLen, ), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +]
[), ;, current, ., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +]
[;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length]
[., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (]
[., getLastChild, (, ), ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;]
[), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), .]
[+, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (]
[+, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), .]
[+, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (]
[., getSourcePosition, (, ), +, namespaceLen, +, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (]
[+, FOR_QUOTE, +, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), .]
[+, FOR_DOT, ), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (]
[), ;, current, ., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), .]
[;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, current]
[., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }, current]
[., getLastChild, (, ), ., setLength, (, current, ., getLastChild, (, ), ., getString, (, ), ., length, (, )]
[), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (]
[., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;]
[., getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n, ., getSourcePosition, (, )]
[., getLastChild, (, ), ., getString, (, ), ., length, (, ), ), ;, }, current, ., setSourceEncodedPosition, (, n]
[;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, )]
[., setSourceEncodedPosition, (, n, ., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, current, ., getString, (]
[), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef]
[+, FOR_QUOTE, ), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable]
[., getSourcePosition, (, ), +, FOR_QUOTE, ), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (]
[), ;, current, ., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef]
[;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null]
[., setLength, (, current, ., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }]
[), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=]
[., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {]
[., getString, (, ), ., length, (, ), ), ;, maybeAddToSymbolTable, (, syntheticRef, ), ;, }, private, void, maybeAddToSymbolTable, (]
[;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, ., addReference]
[), ;, }, private, void, maybeAddToSymbolTable, (, Node, n, ), {, if, (, preprocessorSymbolTable, !=, null, ), {, preprocessorSymbolTable, .]
[), {, preprocessorSymbolTable, ., addReference, (, n, ), ;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode, ;, final]
[!=, null, ), {, preprocessorSymbolTable, ., addReference, (, n, ), ;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode]
[), {, preprocessorSymbolTable, ., addReference, (, n, ), ;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode, ;, final]
[;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode, ;, final, String, namespace, ;, final, String, inputName, ;, UnrecognizedRequire]
[., addReference, (, n, ), ;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode, ;, final, String, namespace, ;]
[), ;, }, }, private, class, UnrecognizedRequire, {, final, Node, requireNode, ;, final, String, namespace, ;, final, String, inputName, ;]
[=, requireNode, ;, this, ., namespace, =, namespace, ;, this, ., inputName, =, inputName, ;, }, }, }]
[., requireNode, =, requireNode, ;, this, ., namespace, =, namespace, ;, this, ., inputName, =, inputName, ;, }, }, }]
[;, this, ., namespace, =, namespace, ;, this, ., inputName, =, inputName, ;, }, }, }]
[=, namespace, ;, this, ., inputName, =, inputName, ;, }, }, }]
[., namespace, =, namespace, ;, this, ., inputName, =, inputName, ;, }, }, }]
[;, this, ., inputName, =, inputName, ;, }, }, }]
[=, inputName, ;, }, }, }]
[., inputName, =, inputName, ;, }, }, }]
[;, }, }, }]
