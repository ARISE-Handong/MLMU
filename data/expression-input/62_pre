[util, ., MathUtils, ;, public, class, Mean, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, ,, WeightedEvaluation, {, private, static, final, long, serialVersionUID, =]
[., MathUtils, ;, public, class, Mean, extends, AbstractStorelessUnivariateStatistic, implements, Serializable, ,, WeightedEvaluation, {, private, static, final, long, serialVersionUID, =, -]
[final, long, serialVersionUID, =, -, 1296043746617791564L, ;, protected, FirstMoment, moment, ;, protected, boolean, incMoment, ;, public, Mean, (, ), {]
[serialVersionUID, =, -, 1296043746617791564L, ;, protected, FirstMoment, moment, ;, protected, boolean, incMoment, ;, public, Mean, (, ), {, incMoment, =]
[-, 1296043746617791564L, ;, protected, FirstMoment, moment, ;, protected, boolean, incMoment, ;, public, Mean, (, ), {, incMoment, =, true, ;]
[;, protected, FirstMoment, moment, ;, protected, boolean, incMoment, ;, public, Mean, (, ), {, incMoment, =, true, ;, moment, =]
[incMoment, =, true, ;, moment, =, new, FirstMoment, (, ), ;, }, public, Mean, (, final, FirstMoment, m1, ), {]
[incMoment, =, true, ;, moment, =, new, FirstMoment, (, ), ;, }, public, Mean, (, final, FirstMoment, m1, ), {]
[moment, =, new, FirstMoment, (, ), ;, }, public, Mean, (, final, FirstMoment, m1, ), {, this, ., moment, =]
[new, FirstMoment, (, ), ;, }, public, Mean, (, final, FirstMoment, m1, ), {, this, ., moment, =, m1, ;]
[(, ), ;, }, public, Mean, (, final, FirstMoment, m1, ), {, this, ., moment, =, m1, ;, incMoment, =]
[this, ., moment, =, m1, ;, incMoment, =, false, ;, }, public, Mean, (, Mean, original, ), throws, NullArgumentException, {]
[moment, =, m1, ;, incMoment, =, false, ;, }, public, Mean, (, Mean, original, ), throws, NullArgumentException, {, copy, (]
[m1, ;, incMoment, =, false, ;, }, public, Mean, (, Mean, original, ), throws, NullArgumentException, {, copy, (, original, ,]
[(, original, ,, this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (]
[this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {]
[this, ), ;, }, @, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {]
[@, Override, public, void, increment, (, final, double, d, ), {, if, (, incMoment, ), {, moment, ., increment, (]
[{, moment, ., increment, (, d, ), ;, }, }, @, Override, public, void, clear, (, ), {, if, (]
[increment, (, d, ), ;, }, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {]
[increment, (, d, ), ;, }, }, @, Override, public, void, clear, (, ), {, if, (, incMoment, ), {]
[incMoment, ), {, moment, ., clear, (, ), ;, }, }, @, Override, public, double, getResult, (, ), {, return]
[incMoment, ), {, moment, ., clear, (, ), ;, }, }, @, Override, public, double, getResult, (, ), {, return]
[Override, public, double, getResult, (, ), {, return, moment, ., m1, ;, }, public, long, getN, (, ), {, return]
[Override, public, double, getResult, (, ), {, return, moment, ., m1, ;, }, public, long, getN, (, ), {, return]
[(, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (]
[double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (]
[], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,]
[,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,, begin, ,]
[length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,, begin, ,, length, ), ), {, Sum, sum, =]
[(, values, ,, begin, ,, length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sampleSize, =]
[length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =]
[length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =]
[length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =]
[Sum, sum, =, new, Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =, sum, ., evaluate, (]
[=, new, Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =, sum, ., evaluate, (, values, ,]
[Sum, (, ), ;, double, sampleSize, =, length, ;, double, xbar, =, sum, ., evaluate, (, values, ,, begin, ,]
[;, double, sampleSize, =, length, ;, double, xbar, =, sum, ., evaluate, (, values, ,, begin, ,, length, ), /]
[;, double, xbar, =, sum, ., evaluate, (, values, ,, begin, ,, length, ), /, sampleSize, ;, double, correction, =]
[(, values, ,, begin, ,, length, ), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =]
[,, begin, ,, length, ), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;]
[,, begin, ,, length, ), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;]
[,, length, ), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[,, length, ), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[), /, sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[sampleSize, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, values, []
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, values, [, i, ], -]
[<, begin, +, length, ;, i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return]
[<, begin, +, length, ;, i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return]
[+, length, ;, i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return, xbar, +]
[length, ;, i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return, xbar, +, (]
[length, ;, i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return, xbar, +, (]
[i, ++, ), {, correction, +=, values, [, i, ], -, xbar, ;, }, return, xbar, +, (, correction, /]
[+=, values, [, i, ], -, xbar, ;, }, return, xbar, +, (, correction, /, sampleSize, ), ;, }, return]
[+=, values, [, i, ], -, xbar, ;, }, return, xbar, +, (, correction, /, sampleSize, ), ;, }, return]
[,, final, double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (]
[double, [, ], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (]
[], weights, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,]
[,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,, weights, ,]
[int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, if, (, test, (, values, ,, weights, ,, begin, ,]
[throws, MathIllegalArgumentException, {, if, (, test, (, values, ,, weights, ,, begin, ,, length, ), ), {, Sum, sum, =]
[,, weights, ,, begin, ,, length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sumw, =]
[,, weights, ,, begin, ,, length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sumw, =]
[,, length, ), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sumw, =, sum, ., evaluate, (]
[), ), {, Sum, sum, =, new, Sum, (, ), ;, double, sumw, =, sum, ., evaluate, (, weights, ,]
[{, Sum, sum, =, new, Sum, (, ), ;, double, sumw, =, sum, ., evaluate, (, weights, ,, begin, ,]
[(, ), ;, double, sumw, =, sum, ., evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =]
[(, ), ;, double, sumw, =, sum, ., evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =]
[(, ), ;, double, sumw, =, sum, ., evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =]
[sumw, =, sum, ., evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =, sum, ., evaluate, (]
[sum, ., evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =, sum, ., evaluate, (, values, ,]
[evaluate, (, weights, ,, begin, ,, length, ), ;, double, xbarw, =, sum, ., evaluate, (, values, ,, weights, ,]
[weights, ,, begin, ,, length, ), ;, double, xbarw, =, sum, ., evaluate, (, values, ,, weights, ,, begin, ,]
[,, length, ), ;, double, xbarw, =, sum, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), /]
[xbarw, =, sum, ., evaluate, (, values, ,, weights, ,, begin, ,, length, ), /, sumw, ;, double, correction, =]
[,, weights, ,, begin, ,, length, ), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =]
[,, begin, ,, length, ), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;]
[,, begin, ,, length, ), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;]
[,, length, ), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[,, length, ), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <]
[), /, sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[sumw, ;, double, correction, =, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[=, 0, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, []
[=, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *]
[begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *, (]
[begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *, (]
[begin, ;, i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *, (]
[i, <, begin, +, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *, (, values, []
[+, length, ;, i, ++, ), {, correction, +=, weights, [, i, ], *, (, values, [, i, ], -]
[), {, correction, +=, weights, [, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return]
[), {, correction, +=, weights, [, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return]
[correction, +=, weights, [, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +]
[+=, weights, [, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +, (]
[+=, weights, [, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +, (]
[[, i, ], *, (, values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +, (, correction, /]
[values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +, (, correction, /, sumw, ), ;, }, return]
[values, [, i, ], -, xbarw, ), ;, }, return, xbarw, +, (, correction, /, sumw, ), ;, }, return]
[public, double, evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return]
[evaluate, (, final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[final, double, [, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,]
[[, ], values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[values, ,, final, double, [, ], weights, ), throws, MathIllegalArgumentException, {, return, evaluate, (, values, ,, weights, ,, 0, ,]
[,, 0, ,, values, ., length, ), ;, }, @, Override, public, Mean, copy, (, ), {, Mean, result, =]
[length, ), ;, }, @, Override, public, Mean, copy, (, ), {, Mean, result, =, new, Mean, (, ), ;]
[;, }, @, Override, public, Mean, copy, (, ), {, Mean, result, =, new, Mean, (, ), ;, copy, (]
[@, Override, public, Mean, copy, (, ), {, Mean, result, =, new, Mean, (, ), ;, copy, (, this, ,]
[copy, (, ), {, Mean, result, =, new, Mean, (, ), ;, copy, (, this, ,, result, ), ;, return]
[), ;, return, result, ;, }, public, static, void, copy, (, Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {]
[), ;, return, result, ;, }, public, static, void, copy, (, Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {]
[;, }, public, static, void, copy, (, Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[static, void, copy, (, Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[static, void, copy, (, Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;]
[Mean, source, ,, Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (]
[Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[Mean, dest, ), throws, NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[NullArgumentException, {, MathUtils, ., checkNotNull, (, source, ), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[), ;, MathUtils, ., checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =]
[checkNotNull, (, dest, ), ;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =, source, ., incMoment, ;]
[;, dest, ., setData, (, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =, source, ., incMoment, ;]
[(, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =, source, ., incMoment, ;, dest, ., moment, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =, source, ., incMoment, ;, dest, ., moment, =]
[(, source, ., getDataRef, (, ), ), ;, dest, ., incMoment, =, source, ., incMoment, ;, dest, ., moment, =]
