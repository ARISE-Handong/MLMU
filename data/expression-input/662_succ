[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node, >, varNodes, =, Sets, .]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[,, root, ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node]
[,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node, >, varNodes]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Set, <, Node, >, varNodes, =, Sets]
[;, Iterator, <, Var, >, scopeVarIter, =, t, ., getScope, (, ), ., getVars, (, ), ;, while, (, scopeVarIter]
[., newLinkedHashSet, (, ), ;, Iterator, <, Var, >, scopeVarIter, =, t, ., getScope, (, ), ., getVars, (, )]
[;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode, =, scopeVarIter, ., next, (, ), ., getParentNode]
[., getVars, (, ), ;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode, =, scopeVarIter, ., next]
[., getScope, (, ), ., getVars, (, ), ;, while, (, scopeVarIter, ., hasNext, (, ), ), {, Node, parentNode]
[), {, Node, parentNode, =, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if, (, parentNode, ., isVar]
[., hasNext, (, ), ), {, Node, parentNode, =, scopeVarIter, ., next, (, ), ., getParentNode, (, ), ;, if]
[;, if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if]
[., getParentNode, (, ), ;, if, (, parentNode, ., isVar, (, ), ), {, varNodes, ., add, (, parentNode, )]
[., next, (, ), ., getParentNode, (, ), ;, if, (, parentNode, ., isVar, (, ), ), {, varNodes, .]
[), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (, varNodes, ., size, (, ), <=, 1]
[., isVar, (, ), ), {, varNodes, ., add, (, parentNode, ), ;, }, }, if, (, varNodes, ., size]
[;, }, }, if, (, varNodes, ., size, (, ), <=, 1, ), {, return, ;, }, Iterator, <, Node]
[., add, (, parentNode, ), ;, }, }, if, (, varNodes, ., size, (, ), <=, 1, ), {, return]
[), ;, }, }, if, (, varNodes, ., size, (, ), <=, 1, ), {, return, ;, }, Iterator, <]
[), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =]
[<=, 1, ), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node]
[., size, (, ), <=, 1, ), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator]
[), {, return, ;, }, Iterator, <, Node, >, varNodeIter, =, varNodes, ., iterator, (, ), ;, Node, firstVarNode, =]
[;, Node, firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node]
[., iterator, (, ), ;, Node, firstVarNode, =, varNodeIter, ., next, (, ), ;, while, (, varNodeIter, ., hasNext, (]
[;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next, (, ), ;, applyGroupingToVar]
[., next, (, ), ;, while, (, varNodeIter, ., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next]
[), {, Node, varNode, =, varNodeIter, ., next, (, ), ;, applyGroupingToVar, (, firstVarNode, ,, varNode, ), ;, }, }]
[., hasNext, (, ), ), {, Node, varNode, =, varNodeIter, ., next, (, ), ;, applyGroupingToVar, (, firstVarNode, ,, varNode]
[;, applyGroupingToVar, (, firstVarNode, ,, varNode, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[., next, (, ), ;, applyGroupingToVar, (, firstVarNode, ,, varNode, ), ;, }, }, @, Override, public, void, exitScope, (]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, boolean, shouldTraverse, (]
[,, varNode, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public]
[), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, boolean, shouldTraverse]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, private]
[;, Node, initializedName, =, null, ;, while, (, child, !=, null, ), {, if, (, child, ., hasChildren, (, )]
[., getFirstChild, (, ), ;, Node, initializedName, =, null, ;, while, (, child, !=, null, ), {, if, (, child]
[;, while, (, child, !=, null, ), {, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName]
[), {, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;]
[!=, null, ), {, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {]
[), {, if, (, child, ., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;]
[), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =, child, ;, }, child, =, child]
[., hasChildren, (, ), ), {, if, (, initializedName, !=, null, ), {, return, ;, }, initializedName, =, child, ;]
[), {, return, ;, }, initializedName, =, child, ;, }, child, =, child, ., getNext, (, ), ;, }, Node]
[!=, null, ), {, return, ;, }, initializedName, =, child, ;, }, child, =, child, ., getNext, (, ), ;]
[), {, return, ;, }, initializedName, =, child, ;, }, child, =, child, ., getNext, (, ), ;, }, Node]
[=, child, ;, }, child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (]
[;, }, child, =, child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;]
[=, child, ., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName]
[;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=, null, ), {, if, (]
[., getNext, (, ), ;, }, Node, groupVarParent, =, groupVar, ., getParent, (, ), ;, if, (, initializedName, !=, null]
[;, if, (, initializedName, !=, null, ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;]
[., getParent, (, ), ;, if, (, initializedName, !=, null, ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, )]
[), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, .]
[!=, null, ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =]
[), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, .]
[), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName, ,]
[., isForIn, (, groupVarParent, ), ), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;, groupVar]
[), ), {, return, ;, }, Node, clone, =, initializedName, ., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName]
[;, groupVar, ., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node]
[., cloneNode, (, ), ;, groupVar, ., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild]
[;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal]
[., replaceChild, (, initializedName, ,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =]
[,, clone, ), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (]
[), ;, Node, initializedVal, =, initializedName, ., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,]
[;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, )]
[., removeFirstChild, (, ), ;, Node, assignmentNode, =, IR, ., assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent]
[;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }]
[., assign, (, initializedName, ,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild]
[,, initializedVal, ), ;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode]
[), ;, if, (, groupVarParent, ., isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;]
[), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr]
[., isFor, (, ), ), {, groupVarParent, ., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode]
[;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,]
[., replaceChild, (, groupVar, ,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, )]
[,, assignmentNode, ), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild]
[), ;, }, else, {, Node, exprNode, =, NodeUtil, ., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar]
[;, groupVarParent, ., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (]
[., newExpr, (, assignmentNode, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if]
[), ;, groupVarParent, ., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor]
[;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (]
[., replaceChild, (, groupVar, ,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), )]
[,, exprNode, ), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil]
[), ;, }, }, else, {, if, (, groupVarParent, ., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn]
[), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, )]
[., isFor, (, ), ), {, if, (, NodeUtil, ., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =, groupVar]
[), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar]
[., isForIn, (, groupVarParent, ), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[), ), {, Node, nameNodeClone, =, groupVar, ., getFirstChild, (, ), ., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (]
[;, groupVarParent, ., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (]
[., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =]
[., getFirstChild, (, ), ., cloneNode, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else]
[;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode]
[., replaceChild, (, groupVar, ,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;]
[,, nameNodeClone, ), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (]
[), ;, }, else, {, Node, emptyNode, =, IR, ., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,]
[;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, )]
[., empty, (, ), ;, groupVarParent, ., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {, groupVarParent, .]
[;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, ., removeChildren]
[., replaceChild, (, groupVar, ,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }]
[,, emptyNode, ), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =]
[), ;, }, }, else, {, groupVarParent, ., removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, .]
[;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (, children, ), ;, compiler]
[., removeChild, (, groupVar, ), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack]
[), ;, }, }, Node, children, =, groupVar, ., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (, children, ), ;]
[;, firstVar, ., addChildrenToBack, (, children, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., removeChildren, (, ), ;, firstVar, ., addChildrenToBack, (, children, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, compiler, ., reportCodeChange, (, ), ;, }, }]
[., addChildrenToBack, (, children, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }]
[;, }, }]
[., reportCodeChange, (, ), ;, }, }]
