[private, static, final, long, serialVersionUID, =, -, 5961050944769862059L, ;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology]
[), private, static, final, long, serialVersionUID, =, -, 5961050944769862059L, ;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,]
[;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,, DateTimeFieldType]
[;, private, final, BasicChronology, iChronology, ;, GJYearOfEraDateTimeField, (, DateTimeField, yearField, ,, BasicChronology, chronology, ), {, super, (, yearField, ,, DateTimeFieldType]
[,, DateTimeFieldType, ., yearOfEra, (, ), ), ;, iChronology, =, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, )]
[), ;, iChronology, =, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return, iChronology, ., eras, (]
[., yearOfEra, (, ), ), ;, iChronology, =, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return]
[=, chronology, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return, iChronology, ., eras, (, ), ;, }]
[;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, return, iChronology, ., eras, (, ), ;, }, public, int]
[;, }, public, int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, ), ., get, (, instant]
[., eras, (, ), ;, }, public, int, get, (, long, instant, ), {, int, year, =, getWrappedField, (, )]
[;, if, (, year, <=, 0, ), {, year, =, 1, -, year, ;, }, return, year, ;, }, public]
[., get, (, instant, ), ;, if, (, year, <=, 0, ), {, year, =, 1, -, year, ;, }]
[), ;, if, (, year, <=, 0, ), {, year, =, 1, -, year, ;, }, return, year, ;, }]
[), {, year, =, 1, -, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,]
[<=, 0, ), {, year, =, 1, -, year, ;, }, return, year, ;, }, public, long, add, (, long]
[), {, year, =, 1, -, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,]
[=, 1, -, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, )]
[;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (]
[-, year, ;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return]
[;, }, return, year, ;, }, public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (]
[;, }, public, long, add, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., add, (]
[;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add, (]
[., add, (, instant, ,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {]
[,, years, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, )]
[), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, getWrappedField, (, ), ., add]
[;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField, (]
[., add, (, instant, ,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {]
[,, years, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, )]
[), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, return, getWrappedField, (, ), ., addWrapField]
[;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int]
[., addWrapField, (, instant, ,, years, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex]
[,, years, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ]]
[), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[., addWrapField, (, instant, ,, fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,]
[,, fieldIndex, ,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, values, ,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField]
[,, years, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, )]
[), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, )]
[), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong]
[;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {]
[,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }]
[., verifyValueBounds, (, this, ,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (]
[,, year, ,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0]
[,, 1, ,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {]
[,, getMaximumValue, (, ), ), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =]
[), ;, if, (, iChronology, ., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;]
[), {, year, =, 1, -, year, ;, }, return, super, ., set, (, instant, ,, year, ), ;, }]
[<=, 0, ), {, year, =, 1, -, year, ;, }, return, super, ., set, (, instant, ,, year, )]
[., getYear, (, instant, ), <=, 0, ), {, year, =, 1, -, year, ;, }, return, super, ., set]
[), <=, 0, ), {, year, =, 1, -, year, ;, }, return, super, ., set, (, instant, ,, year]
[), {, year, =, 1, -, year, ;, }, return, super, ., set, (, instant, ,, year, ), ;, }]
[=, 1, -, year, ;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue]
[;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[-, year, ;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, )]
[;, }, return, super, ., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return]
[;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return, getWrappedField]
[., set, (, instant, ,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public]
[,, year, ), ;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMaximumValue, (, )]
[), ;, }, public, int, getMinimumValue, (, ), {, return, 1, ;, }, public, int, getMaximumValue, (, ), {, return]
[;, }, public, int, getMaximumValue, (, ), {, return, getWrappedField, (, ), ., getMaximumValue, (, ), ;, }, public, long]
[;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor, (, instant, ), ;]
[., getMaximumValue, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, getWrappedField, (, ), ., roundFloor]
[;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (, instant, ), ;]
[., roundFloor, (, instant, ), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, roundCeiling, (, long, instant, ), {, return, getWrappedField, (, ), ., roundCeiling, (, instant, )]
[;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (, instant, ), ;]
[., roundCeiling, (, instant, ), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), .]
[), ;, }, public, long, remainder, (, long, instant, ), {, return, getWrappedField, (, ), ., remainder, (, instant, )]
[;, }, private, Object, readResolve, (, ), {, return, iChronology, ., yearOfEra, (, ), ;, }, }]
[., remainder, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., yearOfEra, (, ), ;]
[), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., yearOfEra, (, ), ;, }, }]
[;, }, }]
[., yearOfEra, (, ), ;, }, }]
