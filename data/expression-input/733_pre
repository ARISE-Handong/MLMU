[public, abstract, class, AbstractLeastSquaresOptimizer, extends, BaseAbstractMultivariateVectorOptimizer, <, DifferentiableMultivariateVectorFunction, >, implements, DifferentiableMultivariateVectorOptimizer, {, @, Deprecated, private, static, final, double, DEFAULT_SINGULARITY_THRESHOLD, =]
[@, Deprecated, protected, AbstractLeastSquaresOptimizer, (, ), {, }, protected, AbstractLeastSquaresOptimizer, (, ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, super, (]
[ConvergenceChecker, <, PointVectorValuePair, >, checker, ), {, super, (, checker, ), ;, }, public, int, getJacobianEvaluations, (, ), {, return]
[getJacobianEvaluations, (, ), {, return, jacobianEvaluations, ;, }, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =]
[), {, return, jacobianEvaluations, ;, }, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (]
[jacobianEvaluations, ;, }, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;]
[}, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian, =]
[}, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian, =]
[}, @, Deprecated, protected, void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian, =]
[void, updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian, =, weightedJacobian, ., scalarMultiply, (]
[updateJacobian, (, ), {, final, RealMatrix, weightedJacobian, =, computeWeightedJacobian, (, point, ), ;, weightedResidualJacobian, =, weightedJacobian, ., scalarMultiply, (, -]
[(, -, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {]
[-, 1, ), ., getData, (, ), ;, }, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++]
[}, protected, RealMatrix, computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint, =]
[computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, []
[computeWeightedJacobian, (, double, [, ], params, ), {, ++, jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, []
[jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, [, params, ., length, ], ;, final, int, nC, =]
[jacobianEvaluations, ;, final, DerivativeStructure, [, ], dsPoint, =, new, DerivativeStructure, [, params, ., length, ], ;, final, int, nC, =]
[DerivativeStructure, [, params, ., length, ], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =]
[params, ., length, ], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;]
[params, ., length, ], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;]
[length, ], ;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;]
[final, int, nC, =, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++]
[=, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {]
[=, params, ., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {]
[., length, ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, []
[for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ], =]
[i, =, 0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (]
[0, ;, i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,]
[i, <, nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,]
[nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,]
[nC, ;, ++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,]
[++, i, ), {, dsPoint, [, i, ], =, new, DerivativeStructure, (, nC, ,, 1, ,, i, ,, params, []
[(, nC, ,, 1, ,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =]
[(, nC, ,, 1, ,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =]
[,, i, ,, params, [, i, ], ), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (]
[), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final, int, nR, =]
[), ;, }, final, DerivativeStructure, [, ], dsValue, =, jF, ., value, (, dsPoint, ), ;, final, int, nR, =]
[=, jF, ., value, (, dsPoint, ), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (]
[=, jF, ., value, (, dsPoint, ), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (]
[=, jF, ., value, (, dsPoint, ), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (]
[(, dsPoint, ), ;, final, int, nR, =, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=]
[final, int, nR, =, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=, nR, ), {, throw]
[=, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=, nR, ), {, throw, new, DimensionMismatchException, (]
[=, getTarget, (, ), ., length, ;, if, (, dsValue, ., length, !=, nR, ), {, throw, new, DimensionMismatchException, (]
[., length, ;, if, (, dsValue, ., length, !=, nR, ), {, throw, new, DimensionMismatchException, (, dsValue, ., length, ,]
[throw, new, DimensionMismatchException, (, dsValue, ., length, ,, nR, ), ;, }, final, double, [, ], [, ], jacobianData, =]
[(, dsValue, ., length, ,, nR, ), ;, }, final, double, [, ], [, ], jacobianData, =, new, double, []
[length, ,, nR, ), ;, }, final, double, [, ], [, ], jacobianData, =, new, double, [, nR, ], []
[[, ], [, ], jacobianData, =, new, double, [, nR, ], [, nC, ], ;, for, (, int, i, =]
[[, ], jacobianData, =, new, double, [, nR, ], [, nC, ], ;, for, (, int, i, =, 0, ;]
[[, ], jacobianData, =, new, double, [, nR, ], [, nC, ], ;, for, (, int, i, =, 0, ;]
[jacobianData, =, new, double, [, nR, ], [, nC, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, nR, ], [, nC, ], ;, for, (, int, i, =, 0, ;, i, <, nR, ;]
[double, [, nR, ], [, nC, ], ;, for, (, int, i, =, 0, ;, i, <, nR, ;, ++]
[for, (, int, i, =, 0, ;, i, <, nR, ;, ++, i, ), {, int, [, ], orders, =]
[i, =, 0, ;, i, <, nR, ;, ++, i, ), {, int, [, ], orders, =, new, int, []
[++, i, ), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =]
[), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;]
[), {, int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;]
[int, [, ], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;, j, <]
[], orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;, j, <, nC, ;]
[orders, =, new, int, [, nC, ], ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++]
[int, [, nC, ], ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {]
[int, [, nC, ], ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {]
[nC, ], ;, for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, []
[for, (, int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =]
[int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[int, j, =, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;]
[=, 0, ;, j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, []
[j, <, nC, ;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], []
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =]
[;, ++, j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =]
[j, ), {, orders, [, j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, []
[j, ], =, 1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (]
[1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;]
[1, ;, jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;]
[jacobianData, [, i, ], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, []
[], [, j, ], =, dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =]
[dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return]
[dsValue, [, i, ], ., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return]
[., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (]
[., getPartialDerivative, (, orders, ), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (]
[), ;, orders, [, j, ], =, 0, ;, }, }, return, weightMatrixSqrt, ., multiply, (, MatrixUtils, ., createRealMatrix, (]
[., multiply, (, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {]
[(, MatrixUtils, ., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =]
[., createRealMatrix, (, jacobianData, ), ), ;, }, @, Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (]
[Deprecated, protected, void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =]
[void, updateResidualsAndCost, (, ), {, objective, =, computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =, computeResiduals, (]
[), {, objective, =, computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;]
[objective, =, computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;, cost, =]
[computeObjectiveValue, (, point, ), ;, final, double, [, ], res, =, computeResiduals, (, objective, ), ;, cost, =, computeCost, (]
[[, ], res, =, computeResiduals, (, objective, ), ;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =]
[=, computeResiduals, (, objective, ), ;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (]
[objective, ), ;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;]
[;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =]
[;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =]
[;, cost, =, computeCost, (, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =]
[(, res, ), ;, final, ArrayRealVector, residuals, =, new, ArrayRealVector, (, res, ), ;, weightedResiduals, =, weightMatrixSqrt, ., operate, (]
[., toArray, (, ), ;, }, protected, double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =]
[), ;, }, protected, double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (]
[double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return]
[double, computeCost, (, double, [, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return]
[[, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return, FastMath, ., sqrt, (]
[[, ], residuals, ), {, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return, FastMath, ., sqrt, (]
[{, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return, FastMath, ., sqrt, (, r, ., dotProduct, (]
[{, final, ArrayRealVector, r, =, new, ArrayRealVector, (, residuals, ), ;, return, FastMath, ., sqrt, (, r, ., dotProduct, (]
[ArrayRealVector, (, residuals, ), ;, return, FastMath, ., sqrt, (, r, ., dotProduct, (, getWeight, (, ), ., operate, (]
[(, getWeight, (, ), ., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, ), {, return]
[(, getWeight, (, ), ., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, ), {, return]
[., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (]
[., operate, (, r, ), ), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (]
[), ), ), ;, }, public, double, getRMS, (, ), {, return, FastMath, ., sqrt, (, getChiSquare, (, ), /]
[return, FastMath, ., sqrt, (, getChiSquare, (, ), /, rows, ), ;, }, public, double, getChiSquare, (, ), {, return]
[return, FastMath, ., sqrt, (, getChiSquare, (, ), /, rows, ), ;, }, public, double, getChiSquare, (, ), {, return]
[., sqrt, (, getChiSquare, (, ), /, rows, ), ;, }, public, double, getChiSquare, (, ), {, return, cost, *]
[}, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, ), {, return]
[}, public, double, getChiSquare, (, ), {, return, cost, *, cost, ;, }, public, RealMatrix, getWeightSquareRoot, (, ), {, return]
[getWeightSquareRoot, (, ), {, return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void, setCost, (, double, cost, ), {]
[getWeightSquareRoot, (, ), {, return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void, setCost, (, double, cost, ), {]
[return, weightMatrixSqrt, ., copy, (, ), ;, }, protected, void, setCost, (, double, cost, ), {, this, ., cost, =]
[this, ., cost, =, cost, ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, ), {, return]
[cost, =, cost, ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, ), {, return, getCovariances, (]
[(, DEFAULT_SINGULARITY_THRESHOLD, ), ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, double, threshold, ), {, return]
[), ;, }, @, Deprecated, public, double, [, ], [, ], getCovariances, (, double, threshold, ), {, return, computeCovariances, (]
[}, @, Deprecated, public, double, [, ], [, ], getCovariances, (, double, threshold, ), {, return, computeCovariances, (, point, ,]
[double, [, ], [, ], computeCovariances, (, double, [, ], params, ,, double, threshold, ), {, final, RealMatrix, j, =]
[], [, ], computeCovariances, (, double, [, ], params, ,, double, threshold, ), {, final, RealMatrix, j, =, computeWeightedJacobian, (]
[], params, ,, double, threshold, ), {, final, RealMatrix, j, =, computeWeightedJacobian, (, params, ), ;, final, RealMatrix, jTj, =]
[], params, ,, double, threshold, ), {, final, RealMatrix, j, =, computeWeightedJacobian, (, params, ), ;, final, RealMatrix, jTj, =]
[], params, ,, double, threshold, ), {, final, RealMatrix, j, =, computeWeightedJacobian, (, params, ), ;, final, RealMatrix, jTj, =]
[RealMatrix, j, =, computeWeightedJacobian, (, params, ), ;, final, RealMatrix, jTj, =, j, ., transpose, (, ), ., multiply, (]
[;, final, RealMatrix, jTj, =, j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =]
[;, final, RealMatrix, jTj, =, j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =]
[jTj, =, j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (]
[j, ., transpose, (, ), ., multiply, (, j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,]
[j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (, ), ;, return]
[j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (, ), ;, return]
[j, ), ;, final, DecompositionSolver, solver, =, new, QRDecomposition, (, jTj, ,, threshold, ), ., getSolver, (, ), ;, return]
[(, ), ., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (]
[(, ), ., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (]
[., getData, (, ), ;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=]
[;, }, @, Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=, cols, ), {, throw]
[Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=, cols, ), {, throw, new, NumberIsTooSmallException, (]
[Deprecated, public, double, [, ], guessParametersErrors, (, ), {, if, (, rows, <=, cols, ), {, throw, new, NumberIsTooSmallException, (]
[], guessParametersErrors, (, ), {, if, (, rows, <=, cols, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,]
[(, ), {, if, (, rows, <=, cols, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,]
[{, if, (, rows, <=, cols, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,]
[new, NumberIsTooSmallException, (, LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }, double, [, ], errors, =]
[LocalizedFormats, ., NO_DEGREES_OF_FREEDOM, ,, rows, ,, cols, ,, false, ), ;, }, double, [, ], errors, =, new, double, []
[,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =]
[,, false, ), ;, }, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =]
[}, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (]
[}, double, [, ], errors, =, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (]
[errors, =, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /]
[=, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /, (]
[=, new, double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /, (]
[double, [, cols, ], ;, final, double, c, =, FastMath, ., sqrt, (, getChiSquare, (, ), /, (, rows, -]
[sqrt, (, getChiSquare, (, ), /, (, rows, -, cols, ), ), ;, double, [, ], [, ], covar, =]
[getChiSquare, (, ), /, (, rows, -, cols, ), ), ;, double, [, ], [, ], covar, =, computeCovariances, (]
[), /, (, rows, -, cols, ), ), ;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,]
[;, double, [, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =]
[[, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;]
[[, ], [, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;]
[[, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;, i, <]
[[, ], covar, =, computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;, i, <]
[computeCovariances, (, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;]
[(, point, ,, 1e-14, ), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++]
[1e-14, ), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {]
[1e-14, ), ;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors, []
[int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =]
[int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =]
[int, i, =, 0, ;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =]
[;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (]
[;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (]
[;, i, <, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (]
[<, errors, ., length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, []
[length, ;, ++, i, ), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], []
[), {, errors, [, i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *]
[i, ], =, FastMath, ., sqrt, (, covar, [, i, ], [, i, ], ), *, c, ;, }, return]
[}, public, double, [, ], computeSigma, (, double, [, ], params, ,, double, covarianceSingularityThreshold, ), {, final, int, nC, =]
[}, public, double, [, ], computeSigma, (, double, [, ], params, ,, double, covarianceSingularityThreshold, ), {, final, int, nC, =]
[params, ,, double, covarianceSingularityThreshold, ), {, final, int, nC, =, params, ., length, ;, final, double, [, ], sig, =]
[covarianceSingularityThreshold, ), {, final, int, nC, =, params, ., length, ;, final, double, [, ], sig, =, new, double, []
[final, double, [, ], sig, =, new, double, [, nC, ], ;, final, double, [, ], [, ], cov, =]
[[, ], sig, =, new, double, [, nC, ], ;, final, double, [, ], [, ], cov, =, computeCovariances, (]
[sig, =, new, double, [, nC, ], ;, final, double, [, ], [, ], cov, =, computeCovariances, (, params, ,]
[final, double, [, ], [, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =]
[[, ], [, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;]
[[, ], [, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;]
[[, ], cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <]
[cov, =, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;]
[=, computeCovariances, (, params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++]
[params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {]
[params, ,, covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {]
[covarianceSingularityThreshold, ), ;, for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig, []
[for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =]
[=, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (]
[=, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (]
[=, 0, ;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (]
[;, i, <, nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, []
[nC, ;, ++, i, ), {, sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], []
[sig, [, i, ], =, FastMath, ., sqrt, (, cov, [, i, ], [, i, ], ), ;, }, return]
[final, double, [, ], target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return]
[[, ], target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (]
[target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,]
[target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,]
[[, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (]
[,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,]
[[, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (]
[), {, return, optimizeInternal, (, maxEval, ,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,]
[optimizeInternal, (, maxEval, ,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,, new, Weight, (]
[,, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,]
[toMultivariateDifferentiableVectorFunction, (, f, ), ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (]
[final, double, [, ], target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return]
[[, ], target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (]
[target, ,, final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,]
[final, double, [, ], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,]
[], weights, ,, final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, new, Target, (]
[final, double, [, ], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, new, Target, (, target, ), ,]
[], startPoint, ), {, return, optimizeInternal, (, maxEval, ,, f, ,, new, Target, (, target, ), ,, new, Weight, (]
[{, return, optimizeInternal, (, maxEval, ,, f, ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,]
[(, maxEval, ,, f, ,, new, Target, (, target, ), ,, new, Weight, (, weights, ), ,, new, InitialGuess, (]
[@, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return]
[@, Deprecated, protected, PointVectorValuePair, optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return]
[optimizeInternal, (, final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return, super, ., optimizeInternal, (]
[final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return, super, ., optimizeInternal, (, maxEval, ,]
[final, int, maxEval, ,, final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return, super, ., optimizeInternal, (, maxEval, ,]
[final, MultivariateDifferentiableVectorFunction, f, ,, OptimizationData, ..., optData, ), {, return, super, ., optimizeInternal, (, maxEval, ,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (]
[,, OptimizationData, ..., optData, ), {, return, super, ., optimizeInternal, (, maxEval, ,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (, f, ), ,]
[,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (, f, ), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {]
[,, FunctionUtils, ., toDifferentiableMultivariateVectorFunction, (, f, ), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {]
[), ,, optData, ), ;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;]
[optData, ), ;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =]
[;, }, @, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0, ;]
[@, Override, protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =]
[protected, void, setUp, (, ), {, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (]
[{, super, ., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;]
[., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =]
[., setUp, (, ), ;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =]
[;, jacobianEvaluations, =, 0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (]
[0, ;, weightMatrixSqrt, =, squareRoot, (, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, )]
[(, getWeight, (, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;]
[(, ), ), ;, jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =]
[jF, =, FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;]
[FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =]
[FunctionUtils, ., toMultivariateDifferentiableVectorFunction, (, (, DifferentiableMultivariateVectorFunction, ), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =]
[), getObjectiveFunction, (, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;]
[(, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =]
[(, ), ), ;, point, =, getStartPoint, (, ), ;, rows, =, getTarget, (, ), ., length, ;, cols, =]
[;, }, protected, double, [, ], computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ], target, =]
[computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ], target, =, getTarget, (, ), ;, if, (]
[computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ], target, =, getTarget, (, ), ;, if, (]
[computeResiduals, (, double, [, ], objectiveValue, ), {, final, double, [, ], target, =, getTarget, (, ), ;, if, (]
[], objectiveValue, ), {, final, double, [, ], target, =, getTarget, (, ), ;, if, (, objectiveValue, ., length, !=]
[], objectiveValue, ), {, final, double, [, ], target, =, getTarget, (, ), ;, if, (, objectiveValue, ., length, !=]
[[, ], target, =, getTarget, (, ), ;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw]
[=, getTarget, (, ), ;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (]
[=, getTarget, (, ), ;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (]
[;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,]
[;, if, (, objectiveValue, ., length, !=, target, ., length, ), {, throw, new, DimensionMismatchException, (, target, ., length, ,]
[throw, new, DimensionMismatchException, (, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ], residuals, =]
[(, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ], residuals, =, new, double, []
[(, target, ., length, ,, objectiveValue, ., length, ), ;, }, final, double, [, ], residuals, =, new, double, []
[}, final, double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i, =]
[double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;]
[], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], residuals, =, new, double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;]
[double, [, target, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, []
[int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =]
[int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =]
[int, i, =, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =]
[=, 0, ;, i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, []
[i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -]
[i, <, target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -]
[target, ., length, ;, i, ++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, []
[++, ), {, residuals, [, i, ], =, target, [, i, ], -, objectiveValue, [, i, ], ;, }, return]
[objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (]
[objectiveValue, [, i, ], ;, }, return, residuals, ;, }, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (]
[}, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix, ), {, final, int, dim, =]
[}, private, RealMatrix, squareRoot, (, RealMatrix, m, ), {, if, (, m, instanceof, DiagonalMatrix, ), {, final, int, dim, =]
[(, m, instanceof, DiagonalMatrix, ), {, final, int, dim, =, m, ., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =]
[DiagonalMatrix, ), {, final, int, dim, =, m, ., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (]
[., getRowDimension, (, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =]
[(, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;]
[(, ), ;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;]
[;, final, RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <]
[RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[RealMatrix, sqrtM, =, new, DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[DiagonalMatrix, (, dim, ), ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,]
[i, =, 0, ;, i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,]
[i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (]
[i, <, dim, ;, i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (]
[i, ++, ), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (]
[), {, sqrtM, ., setEntry, (, i, ,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,]
[,, i, ,, FastMath, ., sqrt, (, m, ., getEntry, (, i, ,, i, ), ), ), ;, }, return]
[getEntry, (, i, ,, i, ), ), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =]
[,, i, ), ), ), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (]
[), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;, return]
[), ;, }, return, sqrtM, ;, }, else, {, final, EigenDecomposition, dec, =, new, EigenDecomposition, (, m, ), ;, return]
