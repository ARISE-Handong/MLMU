[math3, ., util, ., Precision, ;, public, class, SimpleRegression, implements, Serializable, ,, UpdatingMultipleLinearRegression, {, private, static, final, long, serialVersionUID, =]
[., util, ., Precision, ;, public, class, SimpleRegression, implements, Serializable, ,, UpdatingMultipleLinearRegression, {, private, static, final, long, serialVersionUID, =, -]
[class, SimpleRegression, implements, Serializable, ,, UpdatingMultipleLinearRegression, {, private, static, final, long, serialVersionUID, =, -, 3004689053607543335L, ;, private, double, sumX, =]
[{, private, static, final, long, serialVersionUID, =, -, 3004689053607543335L, ;, private, double, sumX, =, 0d, ;, private, double, sumXX, =]
[=, -, 3004689053607543335L, ;, private, double, sumX, =, 0d, ;, private, double, sumXX, =, 0d, ;, private, double, sumY, =]
[sumX, =, 0d, ;, private, double, sumXX, =, 0d, ;, private, double, sumY, =, 0d, ;, private, double, sumYY, =]
[sumXX, =, 0d, ;, private, double, sumY, =, 0d, ;, private, double, sumYY, =, 0d, ;, private, double, sumXY, =]
[sumY, =, 0d, ;, private, double, sumYY, =, 0d, ;, private, double, sumXY, =, 0d, ;, private, long, n, =]
[sumYY, =, 0d, ;, private, double, sumXY, =, 0d, ;, private, long, n, =, 0, ;, private, double, xbar, =]
[sumXY, =, 0d, ;, private, long, n, =, 0, ;, private, double, xbar, =, 0, ;, private, double, ybar, =]
[0, ;, private, double, ybar, =, 0, ;, private, final, boolean, hasIntercept, ;, public, SimpleRegression, (, ), {, this, (]
[(, ), {, this, (, true, ), ;, }, public, SimpleRegression, (, boolean, includeIntercept, ), {, super, (, ), ;]
[{, this, (, true, ), ;, }, public, SimpleRegression, (, boolean, includeIntercept, ), {, super, (, ), ;, hasIntercept, =]
[hasIntercept, =, includeIntercept, ;, }, public, void, addData, (, final, double, x, ,, final, double, y, ), {, if, (]
[hasIntercept, =, includeIntercept, ;, }, public, void, addData, (, final, double, x, ,, final, double, y, ), {, if, (]
[includeIntercept, ;, }, public, void, addData, (, final, double, x, ,, final, double, y, ), {, if, (, n, ==]
[public, void, addData, (, final, double, x, ,, final, double, y, ), {, if, (, n, ==, 0, ), {]
[addData, (, final, double, x, ,, final, double, y, ), {, if, (, n, ==, 0, ), {, xbar, =]
[final, double, x, ,, final, double, y, ), {, if, (, n, ==, 0, ), {, xbar, =, x, ;]
[x, ,, final, double, y, ), {, if, (, n, ==, 0, ), {, xbar, =, x, ;, ybar, =]
[if, (, n, ==, 0, ), {, xbar, =, x, ;, ybar, =, y, ;, }, else, {, if, (]
[xbar, =, x, ;, ybar, =, y, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =]
[xbar, =, x, ;, ybar, =, y, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =]
[x, ;, ybar, =, y, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +]
[}, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =]
[}, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =]
[{, if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =, n, /]
[if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =, n, /, (]
[if, (, hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =, n, /, (]
[hasIntercept, ), {, final, double, fact1, =, 1.0, +, n, ;, final, double, fact2, =, n, /, (, 1.0, +]
[1.0, +, n, ;, final, double, fact2, =, n, /, (, 1.0, +, n, ), ;, final, double, dx, =]
[1.0, +, n, ;, final, double, fact2, =, n, /, (, 1.0, +, n, ), ;, final, double, dx, =]
[n, ;, final, double, fact2, =, n, /, (, 1.0, +, n, ), ;, final, double, dx, =, x, -]
[n, /, (, 1.0, +, n, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =]
[n, /, (, 1.0, +, n, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =]
[(, 1.0, +, n, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -]
[+, n, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=]
[final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *]
[dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *]
[x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=]
[final, double, dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *]
[dy, =, y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *]
[y, -, ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;]
[ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=]
[ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=]
[ybar, ;, sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=]
[sumXX, +=, dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *]
[dx, *, dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *]
[dx, *, fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;]
[fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=]
[fact2, ;, sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=]
[sumYY, +=, dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=, dx, /]
[dy, *, dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=, dx, /, fact1, ;]
[dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=, dx, /, fact1, ;, ybar, +=]
[dy, *, fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=, dx, /, fact1, ;, ybar, +=]
[fact2, ;, sumXY, +=, dx, *, dy, *, fact2, ;, xbar, +=, dx, /, fact1, ;, ybar, +=, dy, /]
[dy, *, fact2, ;, xbar, +=, dx, /, fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (]
[*, fact2, ;, xbar, +=, dx, /, fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (, !]
[xbar, +=, dx, /, fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {]
[dx, /, fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=]
[dx, /, fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=]
[fact1, ;, ybar, +=, dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *]
[ybar, +=, dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;]
[dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=]
[dy, /, fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=]
[fact1, ;, }, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=, y, *]
[}, }, if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=, y, *, y, ;]
[if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=]
[if, (, !, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=]
[!, hasIntercept, ), {, sumXX, +=, x, *, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=, x, *]
[{, sumXX, +=, x, *, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=, x, *, y, ;, }]
[+=, x, *, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=, x, *, y, ;, }, sumX, +=]
[*, x, ;, sumYY, +=, y, *, y, ;, sumXY, +=, x, *, y, ;, }, sumX, +=, x, ;]
[;, sumYY, +=, y, *, y, ;, sumXY, +=, x, *, y, ;, }, sumX, +=, x, ;, sumY, +=]
[+=, y, *, y, ;, sumXY, +=, x, *, y, ;, }, sumX, +=, x, ;, sumY, +=, y, ;]
[+=, y, *, y, ;, sumXY, +=, x, *, y, ;, }, sumX, +=, x, ;, sumY, +=, y, ;]
[x, ;, sumY, +=, y, ;, n, ++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (]
[x, ;, sumY, +=, y, ;, n, ++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (]
[sumY, +=, y, ;, n, ++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (, n, ==]
[;, n, ++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {]
[++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {, xbar, =]
[++, ;, }, public, void, append, (, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {, xbar, =]
[void, append, (, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;]
[(, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;, ybar, =]
[(, SimpleRegression, reg, ), {, if, (, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;, ybar, =]
[{, if, (, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;]
[(, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =]
[(, n, ==, 0, ), {, xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =]
[), {, xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;]
[xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;, sumYY, =]
[xbar, =, reg, ., xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;, sumYY, =]
[xbar, ;, ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;, sumYY, =, reg, ., sumYY, ;]
[ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;, sumYY, =, reg, ., sumYY, ;, sumXY, =]
[ybar, =, reg, ., ybar, ;, sumXX, =, reg, ., sumXX, ;, sumYY, =, reg, ., sumYY, ;, sumXY, =]
[., sumXX, ;, sumYY, =, reg, ., sumYY, ;, sumXY, =, reg, ., sumXY, ;, }, else, {, if, (]
[sumYY, ;, sumXY, =, reg, ., sumXY, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =]
[sumYY, ;, sumXY, =, reg, ., sumXY, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =]
[sumYY, ;, sumXY, =, reg, ., sumXY, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =]
[reg, ., sumXY, ;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /]
[;, }, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /, (, double, )]
[}, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /, (, double, ), (]
[}, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /, (, double, ), (]
[}, else, {, if, (, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /, (, double, ), (]
[(, hasIntercept, ), {, final, double, fact1, =, reg, ., n, /, (, double, ), (, reg, ., n, +]
[=, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =]
[=, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =]
[=, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =]
[., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =, n, *]
[., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =, n, *]
[double, ), (, reg, ., n, +, n, ), ;, final, double, fact2, =, n, *, reg, ., n, /]
[reg, ., n, +, n, ), ;, final, double, fact2, =, n, *, reg, ., n, /, (, double, )]
[., n, +, n, ), ;, final, double, fact2, =, n, *, reg, ., n, /, (, double, ), (]
[., n, +, n, ), ;, final, double, fact2, =, n, *, reg, ., n, /, (, double, ), (]
[., n, +, n, ), ;, final, double, fact2, =, n, *, reg, ., n, /, (, double, ), (]
[), ;, final, double, fact2, =, n, *, reg, ., n, /, (, double, ), (, reg, ., n, +]
[*, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, dx, =]
[*, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, dx, =]
[*, reg, ., n, /, (, double, ), (, reg, ., n, +, n, ), ;, final, double, dx, =]
[/, (, double, ), (, reg, ., n, +, n, ), ;, final, double, dx, =, reg, ., xbar, -]
[., n, +, n, ), ;, final, double, dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =]
[., n, +, n, ), ;, final, double, dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =]
[., n, +, n, ), ;, final, double, dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =]
[), ;, final, double, dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -]
[final, double, dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;]
[dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=]
[dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=]
[dx, =, reg, ., xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=]
[xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +]
[xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +]
[xbar, -, xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +]
[xbar, ;, final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *]
[final, double, dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *]
[dy, =, reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;]
[reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=]
[reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=]
[reg, ., ybar, -, ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=]
[ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +]
[ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +]
[ybar, ;, sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +]
[sumXX, +=, reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *]
[reg, ., sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *]
[sumXX, +, dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;]
[dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=]
[dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=]
[dx, *, dx, *, fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=]
[fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +]
[fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +]
[fact2, ;, sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +]
[sumYY, +=, reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *]
[reg, ., sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *]
[sumYY, +, dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;]
[dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=]
[dy, *, dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=]
[dy, *, fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=, dx, *]
[fact2, ;, sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=, dx, *, fact1, ;]
[sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=]
[sumXY, +=, reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=]
[reg, ., sumXY, +, dx, *, dy, *, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=, dy, *]
[*, dy, *, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {]
[*, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {, sumXX, +=]
[*, fact2, ;, xbar, +=, dx, *, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {, sumXX, +=]
[+=, dx, *, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;]
[*, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;, sumYY, +=]
[*, fact1, ;, ybar, +=, dy, *, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;, sumYY, +=]
[+=, dy, *, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;]
[*, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;, sumXY, +=]
[*, fact1, ;, }, else, {, sumXX, +=, reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;, sumXY, +=]
[sumXX, +=, reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }]
[reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=]
[reg, ., sumXX, ;, sumYY, +=, reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=]
[sumYY, +=, reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;]
[reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;, sumY, +=]
[reg, ., sumYY, ;, sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;, sumY, +=]
[sumXY, +=, reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;, sumY, +=, reg, ., sumY, ;]
[reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;, sumY, +=, reg, ., sumY, ;, n, +=]
[reg, ., sumXY, ;, }, }, sumX, +=, reg, ., sumX, ;, sumY, +=, reg, ., sumY, ;, n, +=]
[reg, ., n, ;, }, public, void, removeData, (, final, double, x, ,, final, double, y, ), {, if, (]
[reg, ., n, ;, }, public, void, removeData, (, final, double, x, ,, final, double, y, ), {, if, (]
[n, ;, }, public, void, removeData, (, final, double, x, ,, final, double, y, ), {, if, (, n, >]
[removeData, (, final, double, x, ,, final, double, y, ), {, if, (, n, >, 0, ), {, if, (]
[double, y, ), {, if, (, n, >, 0, ), {, if, (, hasIntercept, ), {, final, double, fact1, =]
[double, y, ), {, if, (, n, >, 0, ), {, if, (, hasIntercept, ), {, final, double, fact1, =]
[), {, if, (, n, >, 0, ), {, if, (, hasIntercept, ), {, final, double, fact1, =, n, -]
[0, ), {, if, (, hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =]
[0, ), {, if, (, hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =]
[{, if, (, hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =, n, /]
[if, (, hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =, n, /, (]
[if, (, hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =, n, /, (]
[hasIntercept, ), {, final, double, fact1, =, n, -, 1.0, ;, final, double, fact2, =, n, /, (, n, -]
[n, -, 1.0, ;, final, double, fact2, =, n, /, (, n, -, 1.0, ), ;, final, double, dx, =]
[n, -, 1.0, ;, final, double, fact2, =, n, /, (, n, -, 1.0, ), ;, final, double, dx, =]
[1.0, ;, final, double, fact2, =, n, /, (, n, -, 1.0, ), ;, final, double, dx, =, x, -]
[n, /, (, n, -, 1.0, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =]
[n, /, (, n, -, 1.0, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =]
[(, n, -, 1.0, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -]
[-, 1.0, ), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=]
[), ;, final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=]
[final, double, dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *]
[dx, =, x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *]
[x, -, xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=]
[xbar, ;, final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=]
[final, double, dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *]
[dy, =, y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *]
[y, -, ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;]
[ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=]
[ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=]
[ybar, ;, sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=]
[sumXX, -=, dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *]
[dx, *, dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *]
[dx, *, fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;]
[fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=]
[fact2, ;, sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=]
[sumYY, -=, dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=, dx, /]
[dy, *, dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=, dx, /, fact1, ;]
[dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=, dx, /, fact1, ;, ybar, -=]
[dy, *, fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=, dx, /, fact1, ;, ybar, -=]
[fact2, ;, sumXY, -=, dx, *, dy, *, fact2, ;, xbar, -=, dx, /, fact1, ;, ybar, -=, dy, /]
[;, xbar, -=, dx, /, fact1, ;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =]
[;, xbar, -=, dx, /, fact1, ;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =]
[-=, dx, /, fact1, ;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =, n, -]
[/, fact1, ;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =, n, -, 1.0, ;]
[;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=]
[;, ybar, -=, dy, /, fact1, ;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=]
[-=, dy, /, fact1, ;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *]
[/, fact1, ;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;]
[;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=]
[;, }, else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=]
[else, {, final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *]
[final, double, fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;]
[fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=]
[fact1, =, n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=]
[n, -, 1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *]
[1.0, ;, sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;]
[sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=]
[sumXX, -=, x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=]
[x, *, x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=, x, /]
[x, ;, sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=, x, /, fact1, ;]
[sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=]
[sumYY, -=, y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=]
[y, *, y, ;, sumXY, -=, x, *, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=, y, /]
[;, sumXY, -=, x, *, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }]
[-=, x, *, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }, sumX, -=]
[*, y, ;, xbar, -=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }, sumX, -=, x, ;]
[;, xbar, -=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }, sumX, -=, x, ;, sumY, -=]
[-=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }, sumX, -=, x, ;, sumY, -=, y, ;]
[-=, x, /, fact1, ;, ybar, -=, y, /, fact1, ;, }, sumX, -=, x, ;, sumY, -=, y, ;]
[public, void, addData, (, final, double, [, ], [, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =]
[addData, (, final, double, [, ], [, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;]
[addData, (, final, double, [, ], [, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;]
[final, double, [, ], [, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;, i, <]
[final, double, [, ], [, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;, i, <]
[[, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[[, ], data, ), throws, ModelSpecificationException, {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, []
[;, i, <, data, ., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, <]
[., length, ;, i, ++, ), {, if, (, data, [, i, ], ., length, <, 2, ), {, throw]
[i, ++, ), {, if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (]
[i, ++, ), {, if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[if, (, data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[data, [, i, ], ., length, <, 2, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, []
[length, <, 2, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,]
[{, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }]
[new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }, addData, (]
[new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }, addData, (]
[new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }, addData, (]
[(, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }, addData, (, data, []
[INVALID_REGRESSION_OBSERVATION, ,, data, [, i, ], ., length, ,, 2, ), ;, }, addData, (, data, [, i, ], []
[[, i, ], ., length, ,, 2, ), ;, }, addData, (, data, [, i, ], [, 0, ], ,]
[[, i, ], ., length, ,, 2, ), ;, }, addData, (, data, [, i, ], [, 0, ], ,]
[[, i, ], ., length, ,, 2, ), ;, }, addData, (, data, [, i, ], [, 0, ], ,]
[], ., length, ,, 2, ), ;, }, addData, (, data, [, i, ], [, 0, ], ,, data, []
[,, 2, ), ;, }, addData, (, data, [, i, ], [, 0, ], ,, data, [, i, ], []
[}, public, void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (]
[}, public, void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (]
[}, public, void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (]
[void, addObservation, (, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (, x, ==]
[(, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (, x, ==, null, ||]
[(, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (, x, ==, null, ||]
[(, final, double, [, ], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (, x, ==, null, ||]
[], x, ,, final, double, y, ), throws, ModelSpecificationException, {, if, (, x, ==, null, ||, x, ., length, ==]
[double, y, ), throws, ModelSpecificationException, {, if, (, x, ==, null, ||, x, ., length, ==, 0, ), {, throw]
[throws, ModelSpecificationException, {, if, (, x, ==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (]
[throws, ModelSpecificationException, {, if, (, x, ==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (]
[(, x, ==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[(, x, ==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[(, x, ==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,]
[==, null, ||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=]
[||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?]
[||, x, ., length, ==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?]
[==, 0, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :]
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :, 0, ,]
[ModelSpecificationException, (, LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :, 0, ,, 1, ), ;, }]
[LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :, 0, ,, 1, ), ;, }, addData, (]
[LocalizedFormats, ., INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :, 0, ,, 1, ), ;, }, addData, (]
[INVALID_REGRESSION_OBSERVATION, ,, x, !=, null, ?, x, ., length, :, 0, ,, 1, ), ;, }, addData, (, x, []
[!=, null, ?, x, ., length, :, 0, ,, 1, ), ;, }, addData, (, x, [, 0, ], ,]
[(, final, double, [, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (]
[(, final, double, [, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (]
[(, final, double, [, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (]
[final, double, [, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (]
[final, double, [, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (]
[[, ], [, ], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==]
[], x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||]
[x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (]
[x, ,, final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (]
[final, double, [, ], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (, y, ==]
[], y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||]
[y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||, (]
[y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||, (]
[y, ), throws, ModelSpecificationException, {, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||, (]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||, (, x, ., length, !=]
[{, if, (, (, x, ==, null, ), ||, (, y, ==, null, ), ||, (, x, ., length, !=]
[), ||, (, y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw]
[y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (]
[y, ==, null, ), ||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (]
[||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,]
[||, (, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,]
[(, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (]
[(, x, ., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (]
[., length, !=, y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==]
[y, ., length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?]
[length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :]
[length, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :]
[throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,]
[throw, new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,]
[new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (]
[new, ModelSpecificationException, (, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (]
[(, LocalizedFormats, ., DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==]
[DIMENSIONS_MISMATCH_SIMPLE, ,, (, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?]
[(, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :]
[(, x, ==, null, ), ?, 0, :, x, ., length, ,, (, y, ==, null, ), ?, 0, :]
[., length, ,, (, y, ==, null, ), ?, 0, :, y, ., length, ), ;, }, boolean, obsOk, =]
[), ?, 0, :, y, ., length, ), ;, }, boolean, obsOk, =, true, ;, for, (, int, i, =]
[0, :, y, ., length, ), ;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;]
[0, :, y, ., length, ), ;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;]
[y, ., length, ), ;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[y, ., length, ), ;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[;, }, boolean, obsOk, =, true, ;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, []
[=, 0, ;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==, null, ||]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==, null, ||]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==, null, ||]
[;, i, <, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==, null, ||]
[<, x, ., length, ;, i, ++, ), {, if, (, x, [, i, ], ==, null, ||, x, []
[i, ++, ), {, if, (, x, [, i, ], ==, null, ||, x, [, i, ], ., length, ==]
[{, if, (, x, [, i, ], ==, null, ||, x, [, i, ], ., length, ==, 0, ), {]
[(, x, [, i, ], ==, null, ||, x, [, i, ], ., length, ==, 0, ), {, obsOk, =]
[null, ||, x, [, i, ], ., length, ==, 0, ), {, obsOk, =, false, ;, }, }, if, (]
[||, x, [, i, ], ., length, ==, 0, ), {, obsOk, =, false, ;, }, }, if, (, !]
[], ., length, ==, 0, ), {, obsOk, =, false, ;, }, }, if, (, !, obsOk, ), {, throw]
[==, 0, ), {, obsOk, =, false, ;, }, }, if, (, !, obsOk, ), {, throw, new, ModelSpecificationException, (]
[==, 0, ), {, obsOk, =, false, ;, }, }, if, (, !, obsOk, ), {, throw, new, ModelSpecificationException, (]
[obsOk, =, false, ;, }, }, if, (, !, obsOk, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,]
[false, ;, }, }, if, (, !, obsOk, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,]
[{, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,, 1, ), ;, }, for, (, int, i, =]
[new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[new, ModelSpecificationException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;]
[(, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, LocalizedFormats, ., NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS, ,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[,, 0, ,, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addData, (]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addData, (]
[}, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addData, (]
[(, int, i, =, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addData, (, x, []
[=, 0, ;, i, <, x, ., length, ;, i, ++, ), {, addData, (, x, [, i, ], []
[i, <, x, ., length, ;, i, ++, ), {, addData, (, x, [, i, ], [, 0, ], ,]
[i, <, x, ., length, ;, i, ++, ), {, addData, (, x, [, i, ], [, 0, ], ,]
[x, ., length, ;, i, ++, ), {, addData, (, x, [, i, ], [, 0, ], ,, y, []
[;, }, }, public, void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =]
[}, public, void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =, 0, ;]
[}, public, void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =, 0, ;]
[}, public, void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =, 0, ;]
[void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =, 0, ;, i, <]
[void, removeData, (, double, [, ], [, ], data, ), {, for, (, int, i, =, 0, ;, i, <]
[[, ], [, ], data, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, &&]
[[, ], [, ], data, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, &&]
[[, ], data, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, &&, n, >]
[data, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;]
[data, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;]
[(, int, i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;, i, ++, ), {]
[i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;, i, ++, ), {, removeData, (]
[i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;, i, ++, ), {, removeData, (]
[i, =, 0, ;, i, <, data, ., length, &&, n, >, 0, ;, i, ++, ), {, removeData, (]
[0, ;, i, <, data, ., length, &&, n, >, 0, ;, i, ++, ), {, removeData, (, data, []
[<, data, ., length, &&, n, >, 0, ;, i, ++, ), {, removeData, (, data, [, i, ], []
[length, &&, n, >, 0, ;, i, ++, ), {, removeData, (, data, [, i, ], [, 0, ], ,]
[length, &&, n, >, 0, ;, i, ++, ), {, removeData, (, data, [, i, ], [, 0, ], ,]
[length, &&, n, >, 0, ;, i, ++, ), {, removeData, (, data, [, i, ], [, 0, ], ,]
[n, >, 0, ;, i, ++, ), {, removeData, (, data, [, i, ], [, 0, ], ,, data, []
[;, i, ++, ), {, removeData, (, data, [, i, ], [, 0, ], ,, data, [, i, ], []
[0, ], ,, data, [, i, ], [, 1, ], ), ;, }, }, public, void, clear, (, ), {]
[,, data, [, i, ], [, 1, ], ), ;, }, }, public, void, clear, (, ), {, sumX, =]
[[, i, ], [, 1, ], ), ;, }, }, public, void, clear, (, ), {, sumX, =, 0d, ;]
[], [, 1, ], ), ;, }, }, public, void, clear, (, ), {, sumX, =, 0d, ;, sumXX, =]
[1, ], ), ;, }, }, public, void, clear, (, ), {, sumX, =, 0d, ;, sumXX, =, 0d, ;]
[), ;, }, }, public, void, clear, (, ), {, sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =]
[}, }, public, void, clear, (, ), {, sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;]
[public, void, clear, (, ), {, sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;, sumYY, =]
[clear, (, ), {, sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;, sumYY, =, 0d, ;]
[), {, sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;, sumYY, =, 0d, ;, sumXY, =]
[sumX, =, 0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;, sumYY, =, 0d, ;, sumXY, =, 0d, ;]
[0d, ;, sumXX, =, 0d, ;, sumY, =, 0d, ;, sumYY, =, 0d, ;, sumXY, =, 0d, ;, n, =]
[sumYY, =, 0d, ;, sumXY, =, 0d, ;, n, =, 0, ;, }, public, long, getN, (, ), {, return]
[(, ), {, return, n, ;, }, public, double, predict, (, final, double, x, ), {, final, double, b1, =]
[}, public, double, predict, (, final, double, x, ), {, final, double, b1, =, getSlope, (, ), ;, if, (]
[(, final, double, x, ), {, final, double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return]
[(, final, double, x, ), {, final, double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return]
[double, x, ), {, final, double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (]
[{, final, double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +]
[{, final, double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +]
[double, b1, =, getSlope, (, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +, b1, *]
[(, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +, b1, *, x, ;, }, return]
[(, ), ;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +, b1, *, x, ;, }, return]
[;, if, (, hasIntercept, ), {, return, getIntercept, (, b1, ), +, b1, *, x, ;, }, return, b1, *]
[), +, b1, *, x, ;, }, return, b1, *, x, ;, }, public, double, getIntercept, (, ), {, return]
[), +, b1, *, x, ;, }, return, b1, *, x, ;, }, public, double, getIntercept, (, ), {, return]
[b1, *, x, ;, }, return, b1, *, x, ;, }, public, double, getIntercept, (, ), {, return, hasIntercept, ?]
[x, ;, }, return, b1, *, x, ;, }, public, double, getIntercept, (, ), {, return, hasIntercept, ?, getIntercept, (]
[*, x, ;, }, public, double, getIntercept, (, ), {, return, hasIntercept, ?, getIntercept, (, getSlope, (, ), ), :]
[return, hasIntercept, ?, getIntercept, (, getSlope, (, ), ), :, 0.0, ;, }, public, boolean, hasIntercept, (, ), {, return]
[;, }, public, boolean, hasIntercept, (, ), {, return, hasIntercept, ;, }, public, double, getSlope, (, ), {, if, (]
[;, }, public, boolean, hasIntercept, (, ), {, return, hasIntercept, ;, }, public, double, getSlope, (, ), {, if, (]
[public, boolean, hasIntercept, (, ), {, return, hasIntercept, ;, }, public, double, getSlope, (, ), {, if, (, n, <]
[), {, return, hasIntercept, ;, }, public, double, getSlope, (, ), {, if, (, n, <, 2, ), {, return]
[), {, return, hasIntercept, ;, }, public, double, getSlope, (, ), {, if, (, n, <, 2, ), {, return]
[double, getSlope, (, ), {, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (]
[double, getSlope, (, ), {, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (]
[double, getSlope, (, ), {, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (]
[{, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (, FastMath, ., abs, (]
[n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <]
[n, <, 2, ), {, return, Double, ., NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <]
[2, ), {, return, Double, ., NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <, 10, *]
[2, ), {, return, Double, ., NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <, 10, *]
[NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <, 10, *, Double, ., MIN_VALUE, ), {, return]
[NaN, ;, }, if, (, FastMath, ., abs, (, sumXX, ), <, 10, *, Double, ., MIN_VALUE, ), {, return]
[., abs, (, sumXX, ), <, 10, *, Double, ., MIN_VALUE, ), {, return, Double, ., NaN, ;, }, return]
[., abs, (, sumXX, ), <, 10, *, Double, ., MIN_VALUE, ), {, return, Double, ., NaN, ;, }, return]
[(, sumXX, ), <, 10, *, Double, ., MIN_VALUE, ), {, return, Double, ., NaN, ;, }, return, sumXY, /]
[{, return, Double, ., NaN, ;, }, return, sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return]
[{, return, Double, ., NaN, ;, }, return, sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return]
[NaN, ;, }, return, sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (]
[}, return, sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,]
[}, return, sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,]
[sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,, sumYY, -]
[sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,, sumYY, -]
[sumXY, /, sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,, sumYY, -]
[sumXX, ;, }, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,, sumYY, -, sumXY, *]
[}, public, double, getSumSquaredErrors, (, ), {, return, FastMath, ., max, (, 0d, ,, sumYY, -, sumXY, *, sumXY, /]
[0d, ,, sumYY, -, sumXY, *, sumXY, /, sumXX, ), ;, }, public, double, getTotalSumSquares, (, ), {, if, (]
[0d, ,, sumYY, -, sumXY, *, sumXY, /, sumXX, ), ;, }, public, double, getTotalSumSquares, (, ), {, if, (]
[sumYY, -, sumXY, *, sumXY, /, sumXX, ), ;, }, public, double, getTotalSumSquares, (, ), {, if, (, n, <]
[sumXY, /, sumXX, ), ;, }, public, double, getTotalSumSquares, (, ), {, if, (, n, <, 2, ), {, return]
[sumXY, /, sumXX, ), ;, }, public, double, getTotalSumSquares, (, ), {, if, (, n, <, 2, ), {, return]
[public, double, getTotalSumSquares, (, ), {, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, return]
[), {, return, Double, ., NaN, ;, }, return, sumYY, ;, }, public, double, getXSumSquares, (, ), {, if, (]
[), {, return, Double, ., NaN, ;, }, return, sumYY, ;, }, public, double, getXSumSquares, (, ), {, if, (]
[return, Double, ., NaN, ;, }, return, sumYY, ;, }, public, double, getXSumSquares, (, ), {, if, (, n, <]
[;, }, return, sumYY, ;, }, public, double, getXSumSquares, (, ), {, if, (, n, <, 2, ), {, return]
[;, }, return, sumYY, ;, }, public, double, getXSumSquares, (, ), {, if, (, n, <, 2, ), {, return]
[public, double, getXSumSquares, (, ), {, if, (, n, <, 2, ), {, return, Double, ., NaN, ;, }, return]
[2, ), {, return, Double, ., NaN, ;, }, return, sumXX, ;, }, public, double, getSumOfCrossProducts, (, ), {, return]
[sumXX, ;, }, public, double, getSumOfCrossProducts, (, ), {, return, sumXY, ;, }, public, double, getRegressionSumSquares, (, ), {, return]
[}, public, double, getSumOfCrossProducts, (, ), {, return, sumXY, ;, }, public, double, getRegressionSumSquares, (, ), {, return, getRegressionSumSquares, (]
[(, ), {, return, getRegressionSumSquares, (, getSlope, (, ), ), ;, }, public, double, getMeanSquareError, (, ), {, if, (]
[(, ), {, return, getRegressionSumSquares, (, getSlope, (, ), ), ;, }, public, double, getMeanSquareError, (, ), {, if, (]
[{, return, getRegressionSumSquares, (, getSlope, (, ), ), ;, }, public, double, getMeanSquareError, (, ), {, if, (, n, <]
[getSlope, (, ), ), ;, }, public, double, getMeanSquareError, (, ), {, if, (, n, <, 3, ), {, return]
[getSlope, (, ), ), ;, }, public, double, getMeanSquareError, (, ), {, if, (, n, <, 3, ), {, return]
[public, double, getMeanSquareError, (, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, return]
[public, double, getMeanSquareError, (, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, return]
[getMeanSquareError, (, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?]
[(, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (]
[(, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (]
[(, n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /]
[n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (]
[n, <, 3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (]
[3, ), {, return, Double, ., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -]
[Double, ., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :]
[., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (]
[., NaN, ;, }, return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (]
[return, hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (, getSumSquaredErrors, (, ), /]
[hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (, getSumSquaredErrors, (, ), /, (]
[hasIntercept, ?, (, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (, getSumSquaredErrors, (, ), /, (]
[(, getSumSquaredErrors, (, ), /, (, n, -, 2, ), ), :, (, getSumSquaredErrors, (, ), /, (, n, -]
[(, ), /, (, n, -, 1, ), ), ;, }, public, double, getR, (, ), {, double, b1, =]
[), ), ;, }, public, double, getR, (, ), {, double, b1, =, getSlope, (, ), ;, double, result, =]
[), ), ;, }, public, double, getR, (, ), {, double, b1, =, getSlope, (, ), ;, double, result, =]
[public, double, getR, (, ), {, double, b1, =, getSlope, (, ), ;, double, result, =, FastMath, ., sqrt, (]
[b1, =, getSlope, (, ), ;, double, result, =, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (]
[b1, =, getSlope, (, ), ;, double, result, =, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (]
[getSlope, (, ), ;, double, result, =, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (, b1, <]
[;, double, result, =, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (, b1, <, 0, ), {]
[result, =, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (, b1, <, 0, ), {, result, =]
[=, FastMath, ., sqrt, (, getRSquare, (, ), ), ;, if, (, b1, <, 0, ), {, result, =, -]
[(, getRSquare, (, ), ), ;, if, (, b1, <, 0, ), {, result, =, -, result, ;, }, return]
[{, result, =, -, result, ;, }, return, result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =]
[;, }, return, result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return]
[;, }, return, result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return]
[}, return, result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return, (]
[}, return, result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return, (]
[result, ;, }, public, double, getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return, (, ssto, -]
[getRSquare, (, ), {, double, ssto, =, getTotalSumSquares, (, ), ;, return, (, ssto, -, getSumSquaredErrors, (, ), ), /]
[return, (, ssto, -, getSumSquaredErrors, (, ), ), /, ssto, ;, }, public, double, getInterceptStdErr, (, ), {, if, (]
[(, ssto, -, getSumSquaredErrors, (, ), ), /, ssto, ;, }, public, double, getInterceptStdErr, (, ), {, if, (, !]
[(, ), ), /, ssto, ;, }, public, double, getInterceptStdErr, (, ), {, if, (, !, hasIntercept, ), {, return]
[(, ), ), /, ssto, ;, }, public, double, getInterceptStdErr, (, ), {, if, (, !, hasIntercept, ), {, return]
[}, public, double, getInterceptStdErr, (, ), {, if, (, !, hasIntercept, ), {, return, Double, ., NaN, ;, }, return]
[}, public, double, getInterceptStdErr, (, ), {, if, (, !, hasIntercept, ), {, return, Double, ., NaN, ;, }, return]
[(, ), {, if, (, !, hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (]
[(, ), {, if, (, !, hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (]
[(, !, hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *]
[!, hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (]
[!, hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (]
[hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (]
[hasIntercept, ), {, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (]
[{, return, Double, ., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /]
[., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +]
[., NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +]
[NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +, (]
[NaN, ;, }, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +, (]
[}, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +, (, xbar, *]
[., sqrt, (, getMeanSquareError, (, ), *, (, (, 1d, /, n, ), +, (, xbar, *, xbar, ), /]
[), +, (, xbar, *, xbar, ), /, sumXX, ), ), ;, }, public, double, getSlopeStdErr, (, ), {, return]
[), +, (, xbar, *, xbar, ), /, sumXX, ), ), ;, }, public, double, getSlopeStdErr, (, ), {, return]
[*, xbar, ), /, sumXX, ), ), ;, }, public, double, getSlopeStdErr, (, ), {, return, FastMath, ., sqrt, (]
[*, xbar, ), /, sumXX, ), ), ;, }, public, double, getSlopeStdErr, (, ), {, return, FastMath, ., sqrt, (]
[sumXX, ), ), ;, }, public, double, getSlopeStdErr, (, ), {, return, FastMath, ., sqrt, (, getMeanSquareError, (, ), /]
[., sqrt, (, getMeanSquareError, (, ), /, sumXX, ), ;, }, public, double, getSlopeConfidenceInterval, (, ), throws, OutOfRangeException, {, return]
[(, getMeanSquareError, (, ), /, sumXX, ), ;, }, public, double, getSlopeConfidenceInterval, (, ), throws, OutOfRangeException, {, return, getSlopeConfidenceInterval, (]
[return, getSlopeConfidenceInterval, (, 0.05d, ), ;, }, public, double, getSlopeConfidenceInterval, (, final, double, alpha, ), throws, OutOfRangeException, {, if, (]
[return, getSlopeConfidenceInterval, (, 0.05d, ), ;, }, public, double, getSlopeConfidenceInterval, (, final, double, alpha, ), throws, OutOfRangeException, {, if, (]
[(, 0.05d, ), ;, }, public, double, getSlopeConfidenceInterval, (, final, double, alpha, ), throws, OutOfRangeException, {, if, (, n, <]
[}, public, double, getSlopeConfidenceInterval, (, final, double, alpha, ), throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return]
[}, public, double, getSlopeConfidenceInterval, (, final, double, alpha, ), throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return]
[alpha, ), throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (]
[alpha, ), throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (]
[alpha, ), throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (]
[throws, OutOfRangeException, {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (, alpha, >=]
[{, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||]
[{, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||]
[(, n, <, 3, ), {, return, Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||, alpha, <=]
[), {, return, Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||, alpha, <=, 0, ), {, throw]
[Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||, alpha, <=, 0, ), {, throw, new, OutOfRangeException, (]
[Double, ., NaN, ;, }, if, (, alpha, >=, 1, ||, alpha, <=, 0, ), {, throw, new, OutOfRangeException, (]
[}, if, (, alpha, >=, 1, ||, alpha, <=, 0, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,]
[(, alpha, >=, 1, ||, alpha, <=, 0, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,]
[>=, 1, ||, alpha, <=, 0, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,]
[{, throw, new, OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =]
[OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (]
[OutOfRangeException, (, LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (]
[LocalizedFormats, ., SIGNIFICANCE_LEVEL, ,, alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -]
[alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return]
[alpha, ,, 0, ,, 1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return]
[1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *]
[1, ), ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *]
[TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *, distribution, ., inverseCumulativeProbability, (]
[TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *, distribution, ., inverseCumulativeProbability, (]
[=, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *, distribution, ., inverseCumulativeProbability, (, 1d, -]
[=, new, TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *, distribution, ., inverseCumulativeProbability, (, 1d, -]
[TDistribution, (, n, -, 2, ), ;, return, getSlopeStdErr, (, ), *, distribution, ., inverseCumulativeProbability, (, 1d, -, alpha, /]
[distribution, ., inverseCumulativeProbability, (, 1d, -, alpha, /, 2d, ), ;, }, public, double, getSignificance, (, ), {, if, (]
[distribution, ., inverseCumulativeProbability, (, 1d, -, alpha, /, 2d, ), ;, }, public, double, getSignificance, (, ), {, if, (]
[inverseCumulativeProbability, (, 1d, -, alpha, /, 2d, ), ;, }, public, double, getSignificance, (, ), {, if, (, n, <]
[alpha, /, 2d, ), ;, }, public, double, getSignificance, (, ), {, if, (, n, <, 3, ), {, return]
[alpha, /, 2d, ), ;, }, public, double, getSignificance, (, ), {, if, (, n, <, 3, ), {, return]
[getSignificance, (, ), {, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =]
[{, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (]
[{, if, (, n, <, 3, ), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (]
[(, n, <, 3, ), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -]
[), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return]
[), {, return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return]
[return, Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *]
[Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (]
[Double, ., NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (]
[NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (, 1.0, -]
[NaN, ;, }, TDistribution, distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (, 1.0, -]
[distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (, 1.0, -, distribution, ., cumulativeProbability, (]
[distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (, 1.0, -, distribution, ., cumulativeProbability, (]
[distribution, =, new, TDistribution, (, n, -, 2, ), ;, return, 2d, *, (, 1.0, -, distribution, ., cumulativeProbability, (]
[(, n, -, 2, ), ;, return, 2d, *, (, 1.0, -, distribution, ., cumulativeProbability, (, FastMath, ., abs, (]
[;, return, 2d, *, (, 1.0, -, distribution, ., cumulativeProbability, (, FastMath, ., abs, (, getSlope, (, ), ), /]
[), /, getSlopeStdErr, (, ), ), ), ;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (]
[), ), ), ;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return]
[), ), ), ;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return]
[), ), ;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (]
[), ), ;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (]
[;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (, sumY, -]
[;, }, private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (, sumY, -]
[private, double, getIntercept, (, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (, sumY, -, slope, *]
[(, final, double, slope, ), {, if, (, hasIntercept, ), {, return, (, sumY, -, slope, *, sumX, ), /]
[), {, if, (, hasIntercept, ), {, return, (, sumY, -, slope, *, sumX, ), /, n, ;, }, return]
[sumX, ), /, n, ;, }, return, 0.0, ;, }, private, double, getRegressionSumSquares, (, final, double, slope, ), {, return]
[sumX, ), /, n, ;, }, return, 0.0, ;, }, private, double, getRegressionSumSquares, (, final, double, slope, ), {, return]
[sumX, ), /, n, ;, }, return, 0.0, ;, }, private, double, getRegressionSumSquares, (, final, double, slope, ), {, return]
[/, n, ;, }, return, 0.0, ;, }, private, double, getRegressionSumSquares, (, final, double, slope, ), {, return, slope, *]
[;, }, return, 0.0, ;, }, private, double, getRegressionSumSquares, (, final, double, slope, ), {, return, slope, *, slope, *]
[return, slope, *, slope, *, sumXX, ;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, ,, NoDataException, {, if, (]
[sumXX, ;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (]
[sumXX, ;, }, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (]
[}, public, RegressionResults, regress, (, ), throws, ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (, n, <]
[(, ), throws, ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (, n, <, 3, ), {, throw]
[ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (, n, <, 3, ), {, throw, new, NoDataException, (]
[ModelSpecificationException, ,, NoDataException, {, if, (, hasIntercept, ), {, if, (, n, <, 3, ), {, throw, new, NoDataException, (]
[{, if, (, n, <, 3, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (]
[{, if, (, n, <, 3, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (]
[{, if, (, n, <, 3, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (]
[<, 3, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, FastMath, ., abs, (]
[{, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, FastMath, ., abs, (, sumXX, ), >]
[{, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, FastMath, ., abs, (, sumXX, ), >]
[if, (, FastMath, ., abs, (, sumXX, ), >, Precision, ., SAFE_MIN, ), {, final, double, [, ], params, =]
[abs, (, sumXX, ), >, Precision, ., SAFE_MIN, ), {, final, double, [, ], params, =, new, double, [, ]]
[(, sumXX, ), >, Precision, ., SAFE_MIN, ), {, final, double, [, ], params, =, new, double, [, ], {]
[Precision, ., SAFE_MIN, ), {, final, double, [, ], params, =, new, double, [, ], {, getIntercept, (, ), ,]
[params, =, new, double, [, ], {, getIntercept, (, ), ,, getSlope, (, ), }, ;, final, double, mse, =]
[(, ), ,, getSlope, (, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =]
[(, ), ,, getSlope, (, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =]
[,, getSlope, (, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =, sumYY, +]
[,, getSlope, (, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =, sumYY, +]
[,, getSlope, (, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =, sumYY, +]
[(, ), }, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =, sumYY, +, sumY, *]
[}, ;, final, double, mse, =, getMeanSquareError, (, ), ;, final, double, _syy, =, sumYY, +, sumY, *, sumY, /]
[), ;, final, double, _syy, =, sumYY, +, sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =]
[_syy, =, sumYY, +, sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ]]
[=, sumYY, +, sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {]
[=, sumYY, +, sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {]
[+, sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *]
[sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (]
[sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (]
[sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (]
[sumY, *, sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (]
[sumY, /, n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (, xbar, *]
[n, ;, final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (, xbar, *, xbar, /]
[final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +]
[final, double, [, ], vcv, =, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +]
[[, ], vcv, =, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /]
[=, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,]
[=, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,]
[=, new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,]
[new, double, [, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -]
[[, ], {, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -, xbar, *]
[{, mse, *, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -, xbar, *, mse, /]
[*, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -, xbar, *, mse, /, sumXX, ,]
[*, (, xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -, xbar, *, mse, /, sumXX, ,]
[xbar, *, xbar, /, sumXX, +, 1.0, /, n, ), ,, -, xbar, *, mse, /, sumXX, ,, mse, /]
[sumXX, +, 1.0, /, n, ), ,, -, xbar, *, mse, /, sumXX, ,, mse, /, sumXX, }, ;, return]
[/, n, ), ,, -, xbar, *, mse, /, sumXX, ,, mse, /, sumXX, }, ;, return, new, RegressionResults, (]
[), ,, -, xbar, *, mse, /, sumXX, ,, mse, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,]
[/, sumXX, ,, mse, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[sumXX, ,, mse, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[/, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 2, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 2, ,, sumY, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 2, ,, sumY, ,, _syy, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 2, ,, sumY, ,, _syy, ,, getSumSquaredErrors, (, ), ,]
[{, vcv, }, ,, true, ,, n, ,, 2, ,, sumY, ,, _syy, ,, getSumSquaredErrors, (, ), ,, true, ,]
[_syy, ,, getSumSquaredErrors, (, ), ,, true, ,, false, ), ;, }, else, {, final, double, [, ], params, =]
[), ,, true, ,, false, ), ;, }, else, {, final, double, [, ], params, =, new, double, [, ]]
[,, true, ,, false, ), ;, }, else, {, final, double, [, ], params, =, new, double, [, ], {]
[,, true, ,, false, ), ;, }, else, {, final, double, [, ], params, =, new, double, [, ], {]
[,, false, ), ;, }, else, {, final, double, [, ], params, =, new, double, [, ], {, sumY, /]
[), ;, }, else, {, final, double, [, ], params, =, new, double, [, ], {, sumY, /, n, ,]
[), ;, }, else, {, final, double, [, ], params, =, new, double, [, ], {, sumY, /, n, ,]
[new, double, [, ], {, sumY, /, n, ,, Double, ., NaN, }, ;, final, double, [, ], vcv, =]
[{, sumY, /, n, ,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ]]
[sumY, /, n, ,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {]
[sumY, /, n, ,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {]
[n, ,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /]
[,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /, (]
[,, Double, ., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /, (]
[., NaN, }, ;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /, (, n, -]
[;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /, (, n, -, 1.0, ), ,]
[;, final, double, [, ], vcv, =, new, double, [, ], {, ybar, /, (, n, -, 1.0, ), ,]
[], vcv, =, new, double, [, ], {, ybar, /, (, n, -, 1.0, ), ,, Double, ., NaN, ,]
[], vcv, =, new, double, [, ], {, ybar, /, (, n, -, 1.0, ), ,, Double, ., NaN, ,]
[], {, ybar, /, (, n, -, 1.0, ), ,, Double, ., NaN, ,, Double, ., NaN, }, ;, return]
[/, (, n, -, 1.0, ), ,, Double, ., NaN, ,, Double, ., NaN, }, ;, return, new, RegressionResults, (]
[n, -, 1.0, ), ,, Double, ., NaN, ,, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,]
[., NaN, ,, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[NaN, ,, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,]
[{, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,, true, ,]
[,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,, true, ,, false, ), ;, }, }, else, {, if, (]
[,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,, true, ,, false, ), ;, }, }, else, {, if, (]
[,, sumYY, ,, getSumSquaredErrors, (, ), ,, true, ,, false, ), ;, }, }, else, {, if, (, n, <]
[(, ), ,, true, ,, false, ), ;, }, }, else, {, if, (, n, <, 2, ), {, throw]
[true, ,, false, ), ;, }, }, else, {, if, (, n, <, 2, ), {, throw, new, NoDataException, (]
[true, ,, false, ), ;, }, }, else, {, if, (, n, <, 2, ), {, throw, new, NoDataException, (]
[{, if, (, n, <, 2, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (]
[if, (, n, <, 2, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, !]
[if, (, n, <, 2, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, !]
[2, ), {, throw, new, NoDataException, (, LocalizedFormats, ., NOT_ENOUGH_DATA_REGRESSION, ), ;, }, if, (, !, Double, ., isNaN, (]
[), ;, }, if, (, !, Double, ., isNaN, (, sumXX, ), ), {, final, double, [, ], vcv, =]
[(, !, Double, ., isNaN, (, sumXX, ), ), {, final, double, [, ], vcv, =, new, double, [, ]]
[!, Double, ., isNaN, (, sumXX, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[!, Double, ., isNaN, (, sumXX, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[(, sumXX, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {, getMeanSquareError, (, ), /]
[vcv, =, new, double, [, ], {, getMeanSquareError, (, ), /, sumXX, }, ;, final, double, [, ], params, =]
[[, ], {, getMeanSquareError, (, ), /, sumXX, }, ;, final, double, [, ], params, =, new, double, [, ]]
[], {, getMeanSquareError, (, ), /, sumXX, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[], {, getMeanSquareError, (, ), /, sumXX, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[getMeanSquareError, (, ), /, sumXX, }, ;, final, double, [, ], params, =, new, double, [, ], {, sumXY, /]
[sumXX, }, ;, final, double, [, ], params, =, new, double, [, ], {, sumXY, /, sumXX, }, ;, return]
[final, double, [, ], params, =, new, double, [, ], {, sumXY, /, sumXX, }, ;, return, new, RegressionResults, (]
[[, ], params, =, new, double, [, ], {, sumXY, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,]
[[, ], {, sumXY, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[], {, sumXY, /, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[/, sumXX, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,]
[{, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, sumYY, ,, getSumSquaredErrors, (, ), ,, false, ,]
[sumYY, ,, getSumSquaredErrors, (, ), ,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =]
[), ,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ]]
[,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ], {]
[,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ], {]
[[, ], vcv, =, new, double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =]
[new, double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ]]
[double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return]
[final, double, [, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (]
[[, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,]
[[, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[}, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ,, false, ,]
[false, ), ;, }, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (]
[false, ), ;, }, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (]
[false, ), ;, }, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (]
[;, }, }, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==]
[}, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||]
[}, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||]
[}, }, public, RegressionResults, regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||]
[regress, (, int, [, ], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||, variablesToInclude, ., length, ==]
[], variablesToInclude, ), throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||, variablesToInclude, ., length, ==, 0, ), {, throw]
[throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (]
[throws, MathIllegalArgumentException, {, if, (, variablesToInclude, ==, null, ||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (]
[||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (]
[||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (]
[||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (]
[||, variablesToInclude, ., length, ==, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (]
[==, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (]
[{, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (]
[(, LocalizedFormats, ., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (, variablesToInclude, ., length, >]
[., ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (, variablesToInclude, ., length, >, 1, &&]
[ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED, ), ;, }, if, (, variablesToInclude, ., length, >, 2, ||, (, variablesToInclude, ., length, >, 1, &&, !]
[(, variablesToInclude, ., length, >, 2, ||, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw]
[length, >, 2, ||, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (]
[length, >, 2, ||, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (]
[(, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,]
[(, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,]
[variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (]
[variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (]
[variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (]
[variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (]
[1, &&, !, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (, variablesToInclude, ., length, >]
[!, hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (, variablesToInclude, ., length, >, 1, &&]
[hasIntercept, ), ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (, variablesToInclude, ., length, >, 1, &&, !]
[{, throw, new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ?]
[new, ModelSpecificationException, (, LocalizedFormats, ., ARRAY_SIZE_EXCEEDS_MAX_VARIABLES, ,, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ?, 1, :]
[,, (, variablesToInclude, ., length, >, 1, &&, !, hasIntercept, ), ?, 1, :, 2, ), ;, }, if, (]
[>, 1, &&, !, hasIntercept, ), ?, 1, :, 2, ), ;, }, if, (, hasIntercept, ), {, if, (]
[>, 1, &&, !, hasIntercept, ), ?, 1, :, 2, ), ;, }, if, (, hasIntercept, ), {, if, (]
[>, 1, &&, !, hasIntercept, ), ?, 1, :, 2, ), ;, }, if, (, hasIntercept, ), {, if, (]
[hasIntercept, ), ?, 1, :, 2, ), ;, }, if, (, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==]
[2, ), ;, }, if, (, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==, 2, ), {, if, (]
[2, ), ;, }, if, (, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==, 2, ), {, if, (]
[2, ), ;, }, if, (, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==, 2, ), {, if, (]
[;, }, if, (, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==, 2, ), {, if, (, variablesToInclude, []
[(, hasIntercept, ), {, if, (, variablesToInclude, ., length, ==, 2, ), {, if, (, variablesToInclude, [, 0, ], ==]
[if, (, variablesToInclude, ., length, ==, 2, ), {, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, throw]
[., length, ==, 2, ), {, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, throw, new, ModelSpecificationException, (]
[., length, ==, 2, ), {, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, throw, new, ModelSpecificationException, (]
[[, 0, ], ==, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (]
[[, 0, ], ==, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (]
[[, 0, ], ==, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (]
[], ==, 1, ), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (, variablesToInclude, []
[), {, throw, new, ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (, variablesToInclude, [, 0, ], !=]
[ModelSpecificationException, (, LocalizedFormats, ., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw]
[., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[., NOT_INCREASING_SEQUENCE, ), ;, }, else, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[), ;, }, else, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, []
[else, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,]
[(, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,]
[0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, if, (]
[0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, if, (]
[0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, if, (]
[{, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, if, (, variablesToInclude, []
[OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, if, (, variablesToInclude, [, 1, ], !=]
[0, ], ,, 0, ,, 1, ), ;, }, if, (, variablesToInclude, [, 1, ], !=, 1, ), {, throw]
[0, ,, 1, ), ;, }, if, (, variablesToInclude, [, 1, ], !=, 1, ), {, throw, new, OutOfRangeException, (]
[0, ,, 1, ), ;, }, if, (, variablesToInclude, [, 1, ], !=, 1, ), {, throw, new, OutOfRangeException, (]
[1, ), ;, }, if, (, variablesToInclude, [, 1, ], !=, 1, ), {, throw, new, OutOfRangeException, (, variablesToInclude, []
[}, if, (, variablesToInclude, [, 1, ], !=, 1, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,]
[(, variablesToInclude, [, 1, ], !=, 1, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,]
[!=, 1, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, return]
[[, 0, ], ,, 0, ,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (]
[[, 0, ], ,, 0, ,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (]
[[, 0, ], ,, 0, ,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (]
[[, 0, ], ,, 0, ,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (]
[], ,, 0, ,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, []
[,, 1, ), ;, }, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=]
[), ;, }, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&]
[), ;, }, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&]
[), ;, }, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&]
[}, return, regress, (, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&, variablesToInclude, []
[(, ), ;, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&, variablesToInclude, [, 0, ], !=]
[else, {, if, (, variablesToInclude, [, 0, ], !=, 1, &&, variablesToInclude, [, 0, ], !=, 0, ), {, throw]
[(, variablesToInclude, [, 0, ], !=, 1, &&, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[(, variablesToInclude, [, 0, ], !=, 1, &&, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[[, 0, ], !=, 1, &&, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, []
[!=, 1, &&, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,]
[&&, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,]
[{, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, final, double, _mean, =]
[{, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, final, double, _mean, =]
[{, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, final, double, _mean, =]
[new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, final, double, _mean, =, sumY, *]
[(, variablesToInclude, [, 0, ], ,, 0, ,, 1, ), ;, }, final, double, _mean, =, sumY, *, sumY, /]
[0, ,, 1, ), ;, }, final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =]
[0, ,, 1, ), ;, }, final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =]
[1, ), ;, }, final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =, sumYY, +]
[final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =, sumYY, +, _mean, ;, if, (]
[final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =, sumYY, +, _mean, ;, if, (]
[final, double, _mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =, sumYY, +, _mean, ;, if, (]
[_mean, =, sumY, *, sumY, /, n, ;, final, double, _syy, =, sumYY, +, _mean, ;, if, (, variablesToInclude, []
[*, sumY, /, n, ;, final, double, _syy, =, sumYY, +, _mean, ;, if, (, variablesToInclude, [, 0, ], ==]
[sumYY, +, _mean, ;, if, (, variablesToInclude, [, 0, ], ==, 0, ), {, final, double, [, ], vcv, =]
[if, (, variablesToInclude, [, 0, ], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ]]
[(, variablesToInclude, [, 0, ], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[(, variablesToInclude, [, 0, ], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[[, 0, ], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /]
[0, ], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (]
[], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (]
[], ==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (]
[==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (, (]
[==, 0, ), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (, (]
[), {, final, double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (, (, n, -]
[double, [, ], vcv, =, new, double, [, ], {, sumYY, /, (, (, (, n, -, 1, ), *]
[/, (, (, (, n, -, 1, ), *, n, ), ), }, ;, final, double, [, ], params, =]
[n, -, 1, ), *, n, ), ), }, ;, final, double, [, ], params, =, new, double, [, ]]
[-, 1, ), *, n, ), ), }, ;, final, double, [, ], params, =, new, double, [, ], {]
[n, ), ), }, ;, final, double, [, ], params, =, new, double, [, ], {, ybar, }, ;, return]
[}, ;, final, double, [, ], params, =, new, double, [, ], {, ybar, }, ;, return, new, RegressionResults, (]
[final, double, [, ], params, =, new, double, [, ], {, ybar, }, ;, return, new, RegressionResults, (, params, ,]
[new, double, [, ], {, ybar, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[double, [, ], {, ybar, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[{, ybar, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, +]
[[, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, +, _mean, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, +, _mean, ,, sumYY, ,]
[{, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, +, _mean, ,, sumYY, ,, true, ,]
[,, 1, ,, sumY, ,, _syy, +, _mean, ,, sumYY, ,, true, ,, false, ), ;, }, else, if, (]
[,, 1, ,, sumY, ,, _syy, +, _mean, ,, sumYY, ,, true, ,, false, ), ;, }, else, if, (]
[,, 1, ,, sumY, ,, _syy, +, _mean, ,, sumYY, ,, true, ,, false, ), ;, }, else, if, (]
[,, sumY, ,, _syy, +, _mean, ,, sumYY, ,, true, ,, false, ), ;, }, else, if, (, variablesToInclude, []
[_syy, +, _mean, ,, sumYY, ,, true, ,, false, ), ;, }, else, if, (, variablesToInclude, [, 0, ], ==]
[,, false, ), ;, }, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =]
[,, false, ), ;, }, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =]
[), ;, }, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =, sumXX, +]
[), ;, }, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =, sumXX, +]
[), ;, }, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =, sumXX, +]
[}, else, if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =, sumXX, +, sumX, *]
[if, (, variablesToInclude, [, 0, ], ==, 1, ), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /]
[==, 1, ), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =]
[==, 1, ), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =]
[), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =, sumXY, +]
[), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =, sumXY, +]
[), {, final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =, sumXY, +]
[final, double, _sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =, sumXY, +, sumX, *]
[_sxx, =, sumXX, +, sumX, *, sumX, /, n, ;, final, double, _sxy, =, sumXY, +, sumX, *, sumY, /]
[sumX, /, n, ;, final, double, _sxy, =, sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =]
[sumX, /, n, ;, final, double, _sxy, =, sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =]
[final, double, _sxy, =, sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (]
[_sxy, =, sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,]
[_sxy, =, sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,]
[sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,, _syy, -]
[sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,, _syy, -]
[sumXY, +, sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,, _syy, -]
[sumX, *, sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,, _syy, -, _sxy, *]
[sumY, /, n, ;, final, double, _sse, =, FastMath, ., max, (, 0d, ,, _syy, -, _sxy, *, _sxy, /]
[=, FastMath, ., max, (, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =]
[=, FastMath, ., max, (, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =]
[., max, (, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =, _sse, /]
[max, (, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =, _sse, /, (]
[(, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =, _sse, /, (, (]
[(, 0d, ,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =, _sse, /, (, (]
[,, _syy, -, _sxy, *, _sxy, /, _sxx, ), ;, final, double, _mse, =, _sse, /, (, (, n, -]
[/, _sxx, ), ;, final, double, _mse, =, _sse, /, (, (, n, -, 1, ), ), ;, if, (]
[_sxx, ), ;, final, double, _mse, =, _sse, /, (, (, n, -, 1, ), ), ;, if, (, !]
[_sxx, ), ;, final, double, _mse, =, _sse, /, (, (, n, -, 1, ), ), ;, if, (, !]
[double, _mse, =, _sse, /, (, (, n, -, 1, ), ), ;, if, (, !, Double, ., isNaN, (]
[), ), ;, if, (, !, Double, ., isNaN, (, _sxx, ), ), {, final, double, [, ], vcv, =]
[(, !, Double, ., isNaN, (, _sxx, ), ), {, final, double, [, ], vcv, =, new, double, [, ]]
[!, Double, ., isNaN, (, _sxx, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[!, Double, ., isNaN, (, _sxx, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {]
[., isNaN, (, _sxx, ), ), {, final, double, [, ], vcv, =, new, double, [, ], {, _mse, /]
[[, ], vcv, =, new, double, [, ], {, _mse, /, _sxx, }, ;, final, double, [, ], params, =]
[new, double, [, ], {, _mse, /, _sxx, }, ;, final, double, [, ], params, =, new, double, [, ]]
[double, [, ], {, _mse, /, _sxx, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[double, [, ], {, _mse, /, _sxx, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[], {, _mse, /, _sxx, }, ;, final, double, [, ], params, =, new, double, [, ], {, _sxy, /]
[_sxx, }, ;, final, double, [, ], params, =, new, double, [, ], {, _sxy, /, _sxx, }, ;, return]
[final, double, [, ], params, =, new, double, [, ], {, _sxy, /, _sxx, }, ;, return, new, RegressionResults, (]
[[, ], params, =, new, double, [, ], {, _sxy, /, _sxx, }, ;, return, new, RegressionResults, (, params, ,]
[[, ], {, _sxy, /, _sxx, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[], {, _sxy, /, _sxx, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[/, _sxx, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, ,]
[[, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, ,, _sse, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, sumY, ,, _syy, ,, _sse, ,, false, ,]
[sumY, ,, _syy, ,, _sse, ,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =]
[_sse, ,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ]]
[,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ], {]
[,, false, ,, false, ), ;, }, else, {, final, double, [, ], vcv, =, new, double, [, ], {]
[[, ], vcv, =, new, double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =]
[new, double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ]]
[double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[double, [, ], {, Double, ., NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {]
[NaN, }, ;, final, double, [, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return]
[final, double, [, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (]
[[, ], params, =, new, double, [, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,]
[[, ], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ]]
[], {, Double, ., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {]
[., NaN, }, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,]
[}, ;, return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,]
[return, new, RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[RegressionResults, (, params, ,, new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,]
[new, double, [, ], [, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[[, ], {, vcv, }, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[}, ,, true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ,]
[true, ,, n, ,, 1, ,, Double, ., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ,, false, ,]
[., NaN, ,, Double, ., NaN, ,, false, ,, false, ), ;, }, }, }, }, else, {, if, (]
[., NaN, ,, Double, ., NaN, ,, false, ,, false, ), ;, }, }, }, }, else, {, if, (]
[., NaN, ,, Double, ., NaN, ,, false, ,, false, ), ;, }, }, }, }, else, {, if, (]
[,, Double, ., NaN, ,, false, ,, false, ), ;, }, }, }, }, else, {, if, (, variablesToInclude, []
[NaN, ,, false, ,, false, ), ;, }, }, }, }, else, {, if, (, variablesToInclude, [, 0, ], !=]
[false, ), ;, }, }, }, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw]
[}, }, }, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[}, }, }, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (]
[}, }, else, {, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, []
[{, if, (, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,]
[(, variablesToInclude, [, 0, ], !=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,]
[!=, 0, ), {, throw, new, OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 0, ), ;, }, return]
[OutOfRangeException, (, variablesToInclude, [, 0, ], ,, 0, ,, 0, ), ;, }, return, regress, (, ), ;, }, return]
