[private, static, final, long, serialVersionUID, =, 8318475124230605365L, ;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeDurationField, ;]
[), private, static, final, long, serialVersionUID, =, 8318475124230605365L, ;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeDurationField]
[;, final, int, iDivisor, ;, final, DurationField, iDurationField, ;, final, DurationField, iRangeDurationField, ;, private, final, int, iMin, ;, private, final]
[,, field, ., getRangeDurationField, (, ), ,, type, ,, divisor, ), ;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField]
[,, type, ,, divisor, ), ;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int]
[., getRangeDurationField, (, ), ,, type, ,, divisor, ), ;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,]
[,, divisor, ), ;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, )]
[), ;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super]
[,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if]
[<, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, )]
[), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if]
[;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField, =]
[), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField]
[;, if, (, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (]
[., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField]
[), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (]
[==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, .]
[), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (]
[=, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor]
[;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;]
[=, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;]
[;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int]
[,, type, ., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int]
[,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (]
[., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =]
[), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;]
[=, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (]
[;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=]
[=, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, )]
[;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i]
[;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, )]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j]
[>=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j]
[:, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (]
[/, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, .]
[:, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (]
[;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[-, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0]
[/, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[+, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[-, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, )]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {]
[?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[>=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[:, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max]
[/, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax]
[:, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max]
[;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {]
[), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, )]
[-, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType]
[/, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField]
[), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField]
[+, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField]
[), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField]
[-, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType]
[), ;, iMin, =, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, )]
[=, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (]
[;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (, remainderField, ,]
[=, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (, remainderField, ,, null, ,]
[;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (, remainderField, ,, null, ,, type, )]
[,, null, ,, type, ), ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {]
[,, type, ), ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {, super, (]
[), ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {, super, (, remainderField, .]
[,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField]
[., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField]
[), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField]
[=, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (]
[;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i]
[., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;]
[=, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field]
[;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, )]
[., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue]
[=, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int]
[;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =]
[;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i]
[;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, )]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j]
[>=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j]
[:, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (]
[/, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, .]
[:, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (]
[;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[-, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0]
[/, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[+, 1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[-, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, )]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (]
[?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[>=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[:, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max]
[/, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax]
[:, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max]
[;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (]
[), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if]
[-, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, )]
[/, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField]
[), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField]
[+, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override]
[), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField]
[-, 1, ), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, )]
[), ;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if]
[=, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=]
[;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, )]
[=, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, ), {, return]
[;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, ), {, return, iRangeDurationField, ;]
[), {, return, iRangeDurationField, ;, }, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant]
[!=, null, ), {, return, iRangeDurationField, ;, }, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (]
[), {, return, iRangeDurationField, ;, }, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant]
[;, }, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant, ), {, int, value]
[;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant]
[., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, )]
[;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value]
[., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else]
[), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (]
[), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, )]
[>=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /]
[), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, )]
[;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }, }, public]
[/, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }]
[;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -, 1, ;, }, }, public]
[;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add]
[-, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, )]
[), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (]
[/, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return]
[), /, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {]
[+, 1, ), /, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount]
[), /, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {]
[), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (]
[;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add]
[;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add, (]
[., add, (, instant, ,, amount, *, iDivisor, ), ;, }, public, long, add, (, long, instant, ,, long, amount]
[,, amount, *, iDivisor, ), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField]
[), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add]
[*, iDivisor, ), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, )]
[), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add]
[;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, .]
[., add, (, instant, ,, amount, *, iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount]
[,, amount, *, iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set]
[), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils]
[*, iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant]
[), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,, iMax, ), ), ;, }, public]
[), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference]
[., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference]
[,, amount, ,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, )]
[), ,, amount, ,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant]
[,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (]
[), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), .]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[/, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), .]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant]
[,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField]
[), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, )]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[/, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value]
[,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, .]
[), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value]
[;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, )]
[., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, )]
[,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant]
[,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), )]
[,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (]
[;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +, remainder, ), ;, }, public, DurationField]
[), ;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +, remainder, ), ;, }, public]
[., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +]
[), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +, remainder, ), ;, }]
[;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, ), {, return, iMin]
[., set, (, instant, ,, value, *, iDivisor, +, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[,, value, *, iDivisor, +, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public]
[), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, ), {, return]
[+, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, )]
[*, iDivisor, +, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue]
[+, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, )]
[), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, ), {, return]
[;, }, public, int, getMinimumValue, (, ), {, return, iMin, ;, }, public, int, getMaximumValue, (, ), {, return, iMax]
[;, }, public, int, getMaximumValue, (, ), {, return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {]
[;, }, public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, .]
[;, return, field, ., roundFloor, (, field, ., set, (, instant, ,, get, (, instant, ), *, iDivisor, ), )]
[;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (, getWrappedField, (, )]
[., roundFloor, (, field, ., set, (, instant, ,, get, (, instant, ), *, iDivisor, ), ), ;, }, public]
[), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (, getWrappedField, (]
[., set, (, instant, ,, get, (, instant, ), *, iDivisor, ), ), ;, }, public, long, remainder, (, long]
[,, get, (, instant, ), *, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (, getWrappedField]
[*, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get]
[), *, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,]
[), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (, getWrappedField]
[;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {]
[,, get, (, getWrappedField, (, ), ., remainder, (, instant, ), ), ), ;, }, public, int, getDivisor, (, )]
[), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value, )]
[), ), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value]
[., remainder, (, instant, ), ), ), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private]
[), ), ), ;, }, public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int]
[;, }, private, int, getRemainder, (, int, value, ), {, if, (, value, >=, 0, ), {, return, value, %]
[), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value]
[;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %, iDivisor, )]
[%, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %]
[;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %, iDivisor, )]
[;, }, }, }]
[+, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, }]
[), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, }]
[-, 1, ), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, }]
[), +, (, (, value, +, 1, ), %, iDivisor, ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
[%, iDivisor, ), ;, }, }, }]
[), %, iDivisor, ), ;, }, }, }]
[+, 1, ), %, iDivisor, ), ;, }, }, }]
[), %, iDivisor, ), ;, }, }, }]
[), ;, }, }, }]
