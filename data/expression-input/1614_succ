[;, private, static, final, String, MSG_FALLBACK_FUNCTION_NAME, =, "goog.getMsgWithFallback", ;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_DESCRIPTION, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_MSG_HAS_NO_DESCRIPTION", ,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. "]
[,, "Message {0} has no description. Add @desc JsDoc tag.", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;]
[), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_TEXT, =, DiagnosticType, ., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final]
[;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =]
[., warning, (, "JSC_MSG_HAS_NO_TEXT", ,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED"]
[,, "Message value of {0} is just an empty string. ", +, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;]
[), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE]
[+, "Empty messages are forbidden.", ), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final]
[), ;, static, final, DiagnosticType, MESSAGE_TREE_MALFORMED, =, DiagnosticType, ., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE]
[;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =]
[., error, (, "JSC_MSG_TREE_MALFORMED", ,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value"]
[,, "Message parse tree malformed. {0}", ), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final]
[), ;, static, final, DiagnosticType, MESSAGE_HAS_NO_VALUE, =, DiagnosticType, ., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY]
[;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_MSG_HAS_NO_VALUE", ,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, "]
[,, "message node {0} has no value", ), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;]
[), ;, static, final, DiagnosticType, MESSAGE_DUPLICATE_KEY, =, DiagnosticType, ., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final]
[;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType]
[., error, (, "JSC_MSG_KEY_DUPLICATED", ,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE"]
[,, "duplicate message variable name found for {0}, ", +, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable"]
[), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final]
[+, "initial definition {1}:{2}", ), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;]
[), ;, static, final, DiagnosticType, MESSAGE_NODE_IS_ORPHANED, =, DiagnosticType, ., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final]
[;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType]
[., warning, (, "JSC_MSG_ORPHANED_NODE", ,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX"]
[,, MSG_FUNCTION_NAME, +, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME]
[), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final]
[+, "() function could be used only with MSG_* property or variable", ), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;]
[), ;, static, final, DiagnosticType, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final]
[;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,]
[., error, (, "JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX", ,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX"]
[,, "message not initialized using ", +, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format]
[), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)"]
[+, MSG_FUNCTION_NAME, ), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. "]
[), ;, static, final, DiagnosticType, BAD_FALLBACK_SYNTAX, =, DiagnosticType, ., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)"]
[;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String, PH_JS_PREFIX]
[., error, (, "JSC_MSG_BAD_FALLBACK_SYNTAX", ,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType]
[,, String, ., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, .]
[), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String]
[., format, (, "Bad syntax. ", +, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (]
[,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private]
[+, "Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)", ,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", )]
[,, MSG_FALLBACK_FUNCTION_NAME, ), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private]
[), ), ;, static, final, DiagnosticType, FALLBACK_ARG_ERROR, =, DiagnosticType, ., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final]
[;, private, static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final, String]
[., error, (, "JSC_MSG_FALLBACK_ARG_ERROR", ,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String]
[,, "Could not find message entry for fallback argument {0}", ), ;, private, static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String, PH_JS_SUFFIX, =, "}", ;]
[), ;, private, static, final, String, PH_JS_PREFIX, =, "{$", ;, private, static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final]
[;, private, static, final, String, PH_JS_SUFFIX, =, "}", ;, static, final, String, MSG_PREFIX, =, "MSG_", ;, private, static, final, Pattern]
[;, static, final, String, MSG_PREFIX, =, "MSG_", ;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (, "MSG_UNNAMED_\\d+", )]
[;, private, static, final, Pattern, MSG_UNNAMED_PATTERN, =, Pattern, ., compile, (, "MSG_UNNAMED_\\d+", ), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =]
[;, private, static, final, Pattern, CAMELCASE_PATTERN, =, Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static, final, String, HIDDEN_DESC_PREFIX, =, "@hidden"]
[., compile, (, "MSG_UNNAMED_\\d+", ), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =, Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static]
[), ;, private, static, final, Pattern, CAMELCASE_PATTERN, =, Pattern, ., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static, final, String, HIDDEN_DESC_PREFIX, =]
[;, static, final, String, HIDDEN_DESC_PREFIX, =, "@hidden", ;, private, static, final, String, DESC_SUFFIX, =, "_HELP", ;, private, final, boolean, needToCheckDuplications]
[., compile, (, "[a-z][a-zA-Z\\d]*[_\\d]*", ), ;, static, final, String, HIDDEN_DESC_PREFIX, =, "@hidden", ;, private, static, final, String, DESC_SUFFIX, =, "_HELP"]
[), ;, static, final, String, HIDDEN_DESC_PREFIX, =, "@hidden", ;, private, static, final, String, DESC_SUFFIX, =, "_HELP", ;, private, final, boolean]
[;, private, static, final, String, DESC_SUFFIX, =, "_HELP", ;, private, final, boolean, needToCheckDuplications, ;, private, final, JsMessage, ., Style, style]
[;, private, final, boolean, needToCheckDuplications, ;, private, final, JsMessage, ., Style, style, ;, private, final, JsMessage, ., IdGenerator, idGenerator, ;]
[;, private, final, Map, <, Var, ,, JsMessage, >, unnamedMessages, =, Maps, ., newHashMap, (, ), ;, private, final, Map]
[., newHashMap, (, ), ;, private, final, Map, <, Var, ,, JsMessage, >, unnamedMessages, =, Maps, ., newHashMap, (, )]
[;, private, final, Map, <, Node, ,, String, >, googMsgNodes, =, Maps, ., newHashMap, (, ), ;, private, final, CheckLevel]
[., newHashMap, (, ), ;, private, final, Map, <, Node, ,, String, >, googMsgNodes, =, Maps, ., newHashMap, (, )]
[;, private, final, CheckLevel, checkLevel, ;, JsMessageVisitor, (, AbstractCompiler, compiler, ,, boolean, needToCheckDuplications, ,, JsMessage, ., Style, style, ,, JsMessage]
[., newHashMap, (, ), ;, private, final, CheckLevel, checkLevel, ;, JsMessageVisitor, (, AbstractCompiler, compiler, ,, boolean, needToCheckDuplications, ,, JsMessage, .]
[=, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator]
[., compiler, =, compiler, ;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator]
[;, this, ., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel]
[=, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==]
[., needToCheckDuplications, =, needToCheckDuplications, ;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (]
[;, this, ., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, .]
[=, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, )]
[., style, =, style, ;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, .]
[;, this, ., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel]
[=, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel]
[., idGenerator, =, idGenerator, ;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR]
[;, checkLevel, =, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING]
[=, (, style, ==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,]
[==, JsMessage, ., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public]
[), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node]
[., Style, ., CLOSURE, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process]
[:, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[., ERROR, :, CheckLevel, ., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[., WARNING, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), ), {]
[., traverse, (, compiler, ,, root, ,, this, ), ;, for, (, Map, ., Entry, <, Node, ,, String, >]
[,, root, ,, this, ), ;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, .]
[,, this, ), ;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (]
[), ;, for, (, Map, ., Entry, <, Node, ,, String, >, msgNode, :, googMsgNodes, ., entrySet, (, ), )]
[), {, compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (]
[., entrySet, (, ), ), {, compiler, ., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,]
[;, }, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {, String]
[., report, (, JSError, ., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel]
[), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, ), {]
[., make, (, msgNode, ., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), )]
[,, msgNode, ., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), ), ;, }, }, @, Override, public, void, visit]
[., getValue, (, ), ,, msgNode, ., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), ), ;, }, }, @]
[,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node]
[., getKey, (, ), ,, checkLevel, ,, MESSAGE_NODE_IS_ORPHANED, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal]
[,, MESSAGE_NODE_IS_ORPHANED, ), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node]
[), ), ;, }, }, @, Override, public, void, visit, (, NodeTraversal, traversal, ,, Node, node, ,, Node, parent, )]
[), {, case, Token, ., NAME, :, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, (, parent, !=, null, ), &&, (]
[:, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =]
[., NAME, :, if, (, (, parent, !=, null, ), &&, (, parent, ., isVar, (, ), ), ), {]
[), {, messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }]
[&&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;, isVar, =]
[), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;, isVar]
[!=, null, ), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, )]
[), &&, (, parent, ., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;, isVar]
[), {, messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }]
[), ), {, messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;]
[., isVar, (, ), ), ), {, messageKey, =, node, ., getString, (, ), ;, isVar, =, true, ;, }]
[=, node, ., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =, node]
[;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent]
[., getString, (, ), ;, isVar, =, true, ;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild]
[=, true, ;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node]
[;, }, else, {, return, ;, }, msgNode, =, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break]
[=, node, ., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =]
[;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node]
[., getFirstChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;]
[=, node, ;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild]
[;, break, ;, case, Token, ., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, )]
[:, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp]
[., ASSIGN, :, isVar, =, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !, getProp]
[=, false, ;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, )]
[;, Node, getProp, =, node, ., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {]
[;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild]
[., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, Node, propNode]
[), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (]
[), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (]
[., isGetProp, (, ), ), {, return, ;, }, Node, propNode, =, getProp, ., getLastChild, (, ), ;, messageKey, =]
[;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node]
[., getLastChild, (, ), ;, messageKey, =, propNode, ., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, )]
[=, propNode, ., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break]
[;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :]
[., getString, (, ), ;, msgNode, =, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case]
[=, node, ., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName]
[;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =, node, ., getFirstChild, (, )]
[., getLastChild, (, ), ;, msgNodeParent, =, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =, node]
[=, node, ;, break, ;, case, Token, ., CALL, :, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName]
[;, break, ;, case, Token, ., CALL, :, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[:, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (]
[., CALL, :, String, fnName, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, .]
[;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName]
[., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes, ., put, (, node]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, MSG_FUNCTION_NAME, ., equals, (, fnName, ), ), {, googMsgNodes]
[), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME]
[., equals, (, fnName, ), ), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;]
[), ), {, googMsgNodes, ., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (]
[;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;]
[., put, (, node, ,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (]
[,, traversal, ., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {]
[), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (, traversal, ,, node, )]
[., getSourceName, (, ), ), ;, }, else, if, (, MSG_FALLBACK_FUNCTION_NAME, ., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (]
[), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =]
[., equals, (, fnName, ), ), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return]
[), ), {, visitFallbackFunctionCall, (, traversal, ,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage]
[;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall, (]
[,, node, ), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode]
[), ;, }, return, ;, default, :, return, ;, }, boolean, isNewStyleMessage, =, msgNode, !=, null, &&, msgNode, ., isCall]
[;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null]
[&&, msgNode, ., isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;]
[!=, null, &&, msgNode, ., isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {]
[&&, msgNode, ., isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;]
[;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null]
[., isCall, (, ), ;, if, (, !, isMessageName, (, messageKey, ,, isNewStyleMessage, ), ), {, return, ;, }, if]
[), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError, (]
[), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError, (]
[,, isNewStyleMessage, ), ), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal]
[), ), {, return, ;, }, if, (, msgNode, ==, null, ), {, compiler, ., report, (, traversal, ., makeError]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;]
[==, null, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;]
[;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (]
[., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (]
[), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if]
[., makeError, (, node, ,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes]
[,, MESSAGE_HAS_NO_VALUE, ,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode]
[,, messageKey, ), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;]
[), ), ;, return, ;, }, if, (, isNewStyleMessage, ), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else]
[), {, googMsgNodes, ., remove, (, msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY]
[;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, .]
[., remove, (, msgNode, ), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler]
[), ;, }, else, if, (, style, !=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean]
[!=, JsMessage, ., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean]
[., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;]
[., Style, ., LEGACY, ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, )]
[;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :]
[., report, (, traversal, ., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName]
[), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null]
[., makeError, (, node, ,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;]
[,, checkLevel, ,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new]
[,, MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX, ), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (]
[), ), ;, }, boolean, isUnnamedMsg, =, isUnnamedMessageName, (, messageKey, ), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?]
[;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;, builder, ., setSourceName, (, traversal, .]
[), ;, Builder, builder, =, new, Builder, (, isUnnamedMsg, ?, null, :, messageKey, ), ;, builder, ., setSourceName, (, traversal]
[;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable]
[), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {]
[?, null, :, messageKey, ), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if]
[:, messageKey, ), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar]
[), ;, builder, ., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {]
[;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent, (]
[., setSourceName, (, traversal, ., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder]
[), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent]
[., getSourceName, (, ), ), ;, try, {, if, (, isVar, ), {, extractMessageFromVariable, (, builder, ,, node, ,, parent]
[), {, extractMessageFromVariable, (, builder, ,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {]
[;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, ), ,, node, ), ;, }, }, catch]
[,, node, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node]
[,, parent, ,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild]
[,, parent, ., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, )]
[), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, ), ,, node, ), ;, }, }]
[., getParent, (, ), ), ;, }, else, {, extractMessageFromProperty, (, builder, ,, node, ., getFirstChild, (, ), ,, node]
[;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (, ex, ., getNode]
[,, node, ., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, .]
[,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (]
[., getFirstChild, (, ), ,, node, ), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (]
[), ;, }, }, catch, (, MalformedException, ex, ), {, compiler, ., report, (, traversal, ., makeError, (, ex, .]
[;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg]
[., report, (, traversal, ., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, )]
[), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !]
[., makeError, (, ex, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return]
[,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build]
[., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage]
[,, ex, ., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator]
[), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&]
[., getMessage, (, ), ), ), ;, return, ;, }, JsMessage, extractedMessage, =, builder, ., build, (, idGenerator, ), ;]
[;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,]
[., build, (, idGenerator, ), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), )]
[), ;, if, (, needToCheckDuplications, &&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey]
[), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,]
[&&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal]
[&&, !, isUnnamedMsg, &&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }]
[&&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal]
[&&, !, extractedMessage, ., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal]
[), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,]
[), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,]
[., isExternal, (, ), ), {, checkIfMessageDuplicated, (, messageKey, ,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,]
[;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty]
[,, msgNode, ), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (]
[), ;, }, trackMessage, (, traversal, ,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, .]
[;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[,, extractedMessage, ,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler]
[,, messageKey, ,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report]
[,, msgNode, ,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal]
[,, isUnnamedMsg, ), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError]
[), ;, if, (, extractedMessage, ., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String]
[., isEmpty, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, )]
[;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||]
[., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage]
[), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null]
[., makeError, (, node, ,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, )]
[,, MESSAGE_HAS_NO_TEXT, ,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage]
[,, messageKey, ), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (]
[), ), ;, }, String, desc, =, extractedMessage, ., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==]
[;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), )]
[., getDesc, (, ), ;, if, (, isNewStyleMessage, &&, (, desc, ==, null, ||, desc, ., trim, (, ), .]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition]
[&&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION]
[&&, (, desc, ==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, .]
[&&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION]
[), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {]
[==, null, ||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, )]
[||, desc, ., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {]
[), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,]
[., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, ., report, (, traversal, .]
[., trim, (, ), ., isEmpty, (, ), ), &&, !, extractedMessage, ., isExternal, (, ), ), {, compiler, .]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition]
[), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition]
[., isExternal, (, ), ), {, compiler, ., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, )]
[;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage, ,, msgDefinition]
[., report, (, traversal, ., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new]
[), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage, ,]
[., makeError, (, node, ,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,]
[,, MESSAGE_HAS_NO_DESCRIPTION, ,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, )]
[,, messageKey, ), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage]
[), ), ;, }, JsMessageDefinition, msgDefinition, =, new, JsMessageDefinition, (, node, ,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage]
[;, processJsMessage, (, extractedMessage, ,, msgDefinition, ), ;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,, String]
[,, msgNode, ,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage, ,, msgDefinition, ), ;, }, private, void, trackMessage, (, NodeTraversal, t]
[,, msgNodeParent, ), ;, processJsMessage, (, extractedMessage, ,, msgDefinition, ), ;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage]
[), ;, processJsMessage, (, extractedMessage, ,, msgDefinition, ), ;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,]
[;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,, String, msgName, ,, Node, msgNode, ,, boolean, isUnnamedMessage]
[,, msgDefinition, ), ;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,, String, msgName, ,, Node, msgNode]
[), ;, }, private, void, trackMessage, (, NodeTraversal, t, ,, JsMessage, message, ,, String, msgName, ,, Node, msgNode, ,, boolean]
[), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (, msgName, ,, location]
[), {, MessageLocation, location, =, new, MessageLocation, (, message, ,, msgNode, ), ;, messageNames, ., put, (, msgName, ,, location]
[;, messageNames, ., put, (, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), )]
[,, msgNode, ), ;, messageNames, ., put, (, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName]
[), ;, messageNames, ., put, (, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, )]
[;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =, t, ., getScope, (, )]
[., put, (, msgName, ,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var]
[,, location, ), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =, t, .]
[), ;, }, else, if, (, msgNode, ., isName, (, ), ), {, Var, var, =, t, ., getScope, (]
[), {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=]
[., isName, (, ), ), {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;]
[;, if, (, var, !=, null, ), {, unnamedMessages, ., put, (, var, ,, message, ), ;, }, }, }]
[., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, unnamedMessages, ., put, (, var, ,, message]
[., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, unnamedMessages, ., put]
[), ;, if, (, var, !=, null, ), {, unnamedMessages, ., put, (, var, ,, message, ), ;, }, }]
[), {, unnamedMessages, ., put, (, var, ,, message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t]
[!=, null, ), {, unnamedMessages, ., put, (, var, ,, message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (]
[), {, unnamedMessages, ., put, (, var, ,, message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t]
[;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName, (]
[., put, (, var, ,, message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName]
[,, message, ), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage]
[), ;, }, }, }, private, JsMessage, getTrackedMessage, (, NodeTraversal, t, ,, String, msgName, ), {, boolean, isUnnamedMessage, =, isUnnamedMessageName]
[;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==]
[), ;, if, (, !, isUnnamedMessage, ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location]
[), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==, null, ?, null, :, location]
[), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, return, location, ==, null, ?, null, :, location]
[;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =, t, .]
[., get, (, msgName, ), ;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {]
[), ;, return, location, ==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =, t]
[;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[?, null, :, location, ., message, ;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar]
[==, null, ?, null, :, location, ., message, ;, }, else, {, Var, var, =, t, ., getScope, (, )]
[?, null, :, location, ., message, ;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar]
[:, location, ., message, ;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName]
[;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;, if, (]
[., message, ;, }, else, {, Var, var, =, t, ., getScope, (, ), ., getVar, (, msgName, ), ;]
[;, if, (, var, !=, null, ), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return, null]
[., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, return, unnamedMessages, ., get, (, var, )]
[., getScope, (, ), ., getVar, (, msgName, ), ;, if, (, var, !=, null, ), {, return, unnamedMessages, .]
[), ;, if, (, var, !=, null, ), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return]
[), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (]
[!=, null, ), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return, null, ;, }, private, void]
[), {, return, unnamedMessages, ., get, (, var, ), ;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (]
[;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if, (]
[., get, (, var, ), ;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node]
[), ;, }, }, return, null, ;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if]
[;, }, private, void, checkIfMessageDuplicated, (, String, msgName, ,, Node, msgNode, ), {, if, (, messageNames, ., containsKey, (, msgName]
[), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (]
[., containsKey, (, msgName, ), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report]
[), ), {, MessageLocation, location, =, messageNames, ., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make]
[;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName]
[., get, (, msgName, ), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,]
[), ;, compiler, ., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, .]
[;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @, Nullable, Node, grandParentNode]
[., report, (, JSError, ., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, )]
[), ;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @, Nullable, Node]
[., make, (, msgNode, ,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString]
[,, MESSAGE_DUPLICATE_KEY, ,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode]
[,, msgName, ,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno]
[,, location, ., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, )]
[,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), ), ), ), ;, }, }, private, void]
[., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), ), ), ), ;]
[., messageNode, ., getSourceFileName, (, ), ,, Integer, ., toString, (, location, ., messageNode, ., getLineno, (, ), ), )]
[), ), ;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @, Nullable]
[., toString, (, location, ., messageNode, ., getLineno, (, ), ), ), ), ;, }, }, private, void, extractMessageFromVariable, (]
[), ), ), ;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node, nameNode, ,, Node, parentNode, ,, @]
[., getLineno, (, ), ), ), ), ;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node, nameNode, ,]
[., messageNode, ., getLineno, (, ), ), ), ), ;, }, }, private, void, extractMessageFromVariable, (, Builder, builder, ,, Node]
[;, switch, (, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :]
[., getFirstChild, (, ), ;, switch, (, valueNode, ., getType, (, ), ), {, case, Token, ., STRING, :, case]
[), {, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, )]
[., getType, (, ), ), {, case, Token, ., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,]
[:, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode]
[., STRING, :, case, Token, ., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart]
[:, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;]
[., ADD, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, )]
[;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (]
[,, parentNode, ,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token]
[,, grandParentNode, ), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION]
[), ;, builder, ., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar]
[;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder]
[., appendStringPart, (, extractStringFromStringExprNode, (, valueNode, ), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,]
[), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (]
[), ), ;, break, ;, case, Token, ., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode]
[:, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case]
[., FUNCTION, :, maybeInitMetaDataFromJsDocOrHelpVar, (, builder, ,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break]
[;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode]
[,, parentNode, ,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :]
[,, grandParentNode, ), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (]
[), ;, extractFromFunctionNode, (, builder, ,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,]
[;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode]
[,, valueNode, ), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (]
[), ;, break, ;, case, Token, ., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,]
[:, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw]
[., CALL, :, maybeInitMetaDataFromJsDoc, (, builder, ,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default]
[;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder, .]
[,, parentNode, ), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message "]
[), ;, extractFromCallNode, (, builder, ,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder]
[;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder, ., getKey, (, ), ,, valueNode, ), ;]
[,, valueNode, ), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder, ., getKey, (, ), ,]
[), ;, break, ;, default, :, throw, new, MalformedException, (, "Cannot parse value of message ", +, builder, ., getKey, (, ), ,, valueNode, )]
[;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {, Node]
[,, valueNode, ), ;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws]
[+, builder, ., getKey, (, ), ,, valueNode, ), ;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node]
[,, valueNode, ), ;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws]
[., getKey, (, ), ,, valueNode, ), ;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,]
[), ;, }, }, private, void, extractMessageFromProperty, (, Builder, builder, ,, Node, getPropNode, ,, Node, assignNode, ), throws, MalformedException, {]
[;, maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, ), ;, extractFromCallNode, (, builder, ,, callNode, ), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (]
[., getNext, (, ), ;, maybeInitMetaDataFromJsDoc, (, builder, ,, assignNode, ), ;, extractFromCallNode, (, builder, ,, callNode, ), ;, }]
[;, extractFromCallNode, (, builder, ,, callNode, ), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @]
[,, assignNode, ), ;, extractFromCallNode, (, builder, ,, callNode, ), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node]
[), ;, extractFromCallNode, (, builder, ,, callNode, ), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,]
[;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, ), throws, MalformedException, {]
[,, callNode, ), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, )]
[), ;, }, private, void, maybeInitMetaDataFromJsDocOrHelpVar, (, Builder, builder, ,, Node, varNode, ,, @, Nullable, Node, parentOfVarNode, ), throws, MalformedException]
[), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore]
[,, varNode, ), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,]
[), ), {, return, ;, }, if, (, (, parentOfVarNode, !=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, .]
[), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, ), ), ;, }, private, boolean, maybeInitMetaDataFromHelpVar]
[&&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder]
[), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (]
[!=, null, ), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }]
[), &&, maybeInitMetaDataFromHelpVar, (, builder, ,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (]
[), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, ), ), ;, }, private, boolean, maybeInitMetaDataFromHelpVar]
[,, parentOfVarNode, ., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext]
[), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, ), ), ;, }, private, boolean]
[., getChildBefore, (, varNode, ), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, )]
[), ), ), {, return, ;, }, maybeInitMetaDataFromHelpVar, (, builder, ,, varNode, ., getNext, (, ), ), ;, }, private]
[;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (, (]
[,, varNode, ., getNext, (, ), ), ;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling]
[), ;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws, MalformedException, {, if, (]
[., getNext, (, ), ), ;, }, private, boolean, maybeInitMetaDataFromHelpVar, (, Builder, builder, ,, @, Nullable, Node, sibling, ), throws]
[), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;]
[&&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String]
[), &&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;]
[!=, null, ), &&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (]
[), &&, (, sibling, ., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;]
[), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;]
[), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, )]
[., isVar, (, ), ), ), {, Node, nameNode, =, sibling, ., getFirstChild, (, ), ;, String, name, =, nameNode]
[;, String, name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (, builder, ., getKey, (]
[., getFirstChild, (, ), ;, String, name, =, nameNode, ., getString, (, ), ;, if, (, name, ., equals, (]
[;, if, (, name, ., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =]
[., getString, (, ), ;, if, (, name, ., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, ), )]
[), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if]
[., equals, (, builder, ., getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (]
[), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;]
[+, DESC_SUFFIX, ), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode]
[., getKey, (, ), +, DESC_SUFFIX, ), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc]
[), ), {, Node, valueNode, =, nameNode, ., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;]
[;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder]
[., getFirstChild, (, ), ;, String, desc, =, extractStringFromStringExprNode, (, valueNode, ), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX]
[;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX]
[), ;, if, (, desc, ., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (, desc, ., substring, (]
[), {, builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, )]
[., startsWith, (, HIDDEN_DESC_PREFIX, ), ), {, builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, )]
[), ), {, builder, ., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (]
[;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return]
[., setDesc, (, desc, ., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), ), ;, builder]
[), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }]
[., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (]
[., substring, (, HIDDEN_DESC_PREFIX, ., length, (, ), ), ., trim, (, ), ), ;, builder, ., setIsHidden, (, true]
[), ., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc]
[., length, (, ), ), ., trim, (, ), ), ;, builder, ., setIsHidden, (, true, ), ;, }, else]
[;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return, true, ;, }, }, return, false, ;]
[., setIsHidden, (, true, ), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return, true, ;]
[), ;, }, else, {, builder, ., setDesc, (, desc, ), ;, }, return, true, ;, }, }, return, false]
[;, }, return, true, ;, }, }, return, false, ;, }, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node]
[., setDesc, (, desc, ), ;, }, return, true, ;, }, }, return, false, ;, }, private, boolean, maybeInitMetaDataFromJsDoc, (]
[), ;, }, return, true, ;, }, }, return, false, ;, }, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node]
[;, }, }, return, false, ;, }, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node, ), {, boolean, messageHasDesc]
[;, }, private, boolean, maybeInitMetaDataFromJsDoc, (, Builder, builder, ,, Node, node, ), {, boolean, messageHasDesc, =, false, ;, JSDocInfo, info]
[;, JSDocInfo, info, =, node, ., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, String, desc, =]
[;, if, (, info, !=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc]
[., getJSDocInfo, (, ), ;, if, (, info, !=, null, ), {, String, desc, =, info, ., getDescription, (, )]
[), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, .]
[!=, null, ), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {]
[), {, String, desc, =, info, ., getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, .]
[;, if, (, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }]
[., getDescription, (, ), ;, if, (, desc, !=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc]
[), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (]
[!=, null, ), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, .]
[), {, builder, ., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (]
[;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true]
[., setDesc, (, desc, ), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {]
[), ;, messageHasDesc, =, true, ;, }, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (]
[=, true, ;, }, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;]
[;, }, if, (, info, ., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if]
[), {, builder, ., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, )]
[., isHidden, (, ), ), {, builder, ., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (]
[;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {, builder, ., setMeaning, (, info, ., getMeaning]
[., setIsHidden, (, true, ), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {, builder, .]
[), ;, }, if, (, info, ., getMeaning, (, ), !=, null, ), {, builder, ., setMeaning, (, info, .]
[), {, builder, ., setMeaning, (, info, ., getMeaning, (, ), ), ;, }, }, return, messageHasDesc, ;, }, private]
[!=, null, ), {, builder, ., setMeaning, (, info, ., getMeaning, (, ), ), ;, }, }, return, messageHasDesc, ;]
[., getMeaning, (, ), !=, null, ), {, builder, ., setMeaning, (, info, ., getMeaning, (, ), ), ;, }]
[), {, builder, ., setMeaning, (, info, ., getMeaning, (, ), ), ;, }, }, return, messageHasDesc, ;, }, private]
[;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (]
[., setMeaning, (, info, ., getMeaning, (, ), ), ;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode]
[), ;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch]
[., getMeaning, (, ), ), ;, }, }, return, messageHasDesc, ;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, )]
[;, }, private, static, String, extractStringFromStringExprNode, (, Node, node, ), throws, MalformedException, {, switch, (, node, ., getType, (, )]
[), {, case, Token, ., STRING, :, return, node, ., getString, (, ), ;, case, Token, ., ADD, :, StringBuilder]
[., getType, (, ), ), {, case, Token, ., STRING, :, return, node, ., getString, (, ), ;, case, Token]
[:, return, node, ., getString, (, ), ;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, )]
[., STRING, :, return, node, ., getString, (, ), ;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder]
[;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :, node]
[., getString, (, ), ;, case, Token, ., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (]
[:, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :, node, ., children, (, ), )]
[., ADD, :, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, Node, child, :, node, ., children, (]
[;, for, (, Node, child, :, node, ., children, (, ), ), {, sb, ., append, (, extractStringFromStringExprNode, (, child]
[), {, sb, ., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;]
[., children, (, ), ), {, sb, ., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, .]
[;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (, node]
[., append, (, extractStringFromStringExprNode, (, child, ), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw]
[), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (]
[), ), ;, }, return, sb, ., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName]
[;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, ), ;, }, }, private]
[., toString, (, ), ;, default, :, throw, new, MalformedException, (, "STRING or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, )]
[;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set, <, String, >]
[,, node, ), ;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set]
[+, getReadableTokenName, (, node, ), ,, node, ), ;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node]
[,, node, ), ;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set]
[), ,, node, ), ;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[), ;, }, }, private, void, extractFromFunctionNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, Set, <, String]
[;, for, (, Node, fnChild, :, node, ., children, (, ), ), {, switch, (, fnChild, ., getType, (, )]
[., newHashSet, (, ), ;, for, (, Node, fnChild, :, node, ., children, (, ), ), {, switch, (, fnChild]
[), {, switch, (, fnChild, ., getType, (, ), ), {, case, Token, ., NAME, :, break, ;, case, Token]
[., children, (, ), ), {, switch, (, fnChild, ., getType, (, ), ), {, case, Token, ., NAME, :]
[), {, case, Token, ., NAME, :, break, ;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild]
[., getType, (, ), ), {, case, Token, ., NAME, :, break, ;, case, Token, ., PARAM_LIST, :, for, (]
[:, break, ;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild, ., children, (, ), ), {]
[., NAME, :, break, ;, case, Token, ., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild, ., children, (, )]
[:, for, (, Node, argumentNode, :, fnChild, ., children, (, ), ), {, if, (, argumentNode, ., isName, (, )]
[., PARAM_LIST, :, for, (, Node, argumentNode, :, fnChild, ., children, (, ), ), {, if, (, argumentNode, ., isName]
[), {, if, (, argumentNode, ., isName, (, ), ), {, String, phName, =, argumentNode, ., getString, (, ), ;]
[., children, (, ), ), {, if, (, argumentNode, ., isName, (, ), ), {, String, phName, =, argumentNode, .]
[), {, String, phName, =, argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), )]
[., isName, (, ), ), {, String, phName, =, argumentNode, ., getString, (, ), ;, if, (, phNames, ., contains]
[;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode]
[., getString, (, ), ;, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: "]
[), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else, {, phNames, ., add, (]
[., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else]
[), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, argumentNode, ), ;, }, else, {, phNames, ., add]
[;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case, Token, ., BLOCK]
[,, argumentNode, ), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case]
[+, phName, ,, argumentNode, ), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break]
[,, argumentNode, ), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case]
[), ;, }, else, {, phNames, ., add, (, phName, ), ;, }, }, }, break, ;, case, Token, .]
[;, }, }, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;]
[., add, (, phName, ), ;, }, }, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild]
[), ;, }, }, }, break, ;, case, Token, ., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, )]
[:, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {]
[., BLOCK, :, Node, returnNode, =, fnChild, ., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, )]
[;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode]
[., getFirstChild, (, ), ;, if, (, !, returnNode, ., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: "]
[), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;, }, for, (, Node]
[), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;, }, for, (, Node]
[., isReturn, (, ), ), {, throw, new, MalformedException, (, "RETURN node expected; found: ", +, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;]
[;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, )]
[,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder]
[+, getReadableTokenName, (, returnNode, ), ,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, )]
[,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder]
[), ,, returnNode, ), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (]
[), ;, }, for, (, Node, child, :, returnNode, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child]
[), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, )]
[., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, for, (, String, phName, :, builder]
[;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains]
[,, child, ), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !]
[), ;, }, for, (, String, phName, :, builder, ., getPlaceholders, (, ), ), {, if, (, !, phNames, .]
[), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName]
[., getPlaceholders, (, ), ), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw]
[., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }]
[), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, returnNode, ), ;, }, }, break, ;, default, :]
[;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, ), ,, fnChild, )]
[,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, )]
[+, phName, ,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (]
[,, returnNode, ), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, )]
[), ;, }, }, break, ;, default, :, throw, new, MalformedException, (, "NAME, LP, or BLOCK node expected; found: ", +, getReadableTokenName, (, node, ), ,, fnChild]
[;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (, node]
[,, fnChild, ), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[+, getReadableTokenName, (, node, ), ,, fnChild, ), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node]
[,, fnChild, ), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[), ,, fnChild, ), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException]
[), ;, }, }, }, private, void, extractFromReturnDescendant, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, switch, (]
[), {, case, Token, ., STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;]
[., getType, (, ), ), {, case, Token, ., STRING, :, builder, ., appendStringPart, (, node, ., getString, (, )]
[:, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, builder]
[., STRING, :, builder, ., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME]
[;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break]
[., appendStringPart, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference]
[), ;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;]
[., getString, (, ), ), ;, break, ;, case, Token, ., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString]
[:, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., ADD, :, for]
[., NAME, :, builder, ., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., ADD]
[;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :, node, ., children, (, ), ), {]
[., appendPlaceholderReference, (, node, ., getString, (, ), ), ;, break, ;, case, Token, ., ADD, :, for, (, Node]
[), ;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :, node, ., children, (, ), )]
[., getString, (, ), ), ;, break, ;, case, Token, ., ADD, :, for, (, Node, child, :, node, .]
[:, for, (, Node, child, :, node, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;]
[., ADD, :, for, (, Node, child, :, node, ., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child]
[), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +]
[., children, (, ), ), {, extractFromReturnDescendant, (, builder, ,, child, ), ;, }, break, ;, default, :, throw, new]
[;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, ), ;]
[,, child, ), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,]
[), ;, }, break, ;, default, :, throw, new, MalformedException, (, "STRING, NAME, or ADD node expected; found: ", +, getReadableTokenName, (, node, ), ,, node, )]
[;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (, !, node]
[,, node, ), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if]
[+, getReadableTokenName, (, node, ), ,, node, ), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node]
[,, node, ), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if]
[), ,, node, ), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[), ;, }, }, private, void, extractFromCallNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, if, (, !]
[), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node]
[), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node]
[., isCall, (, ), ), {, throw, new, MalformedException, (, "Message must be initialized using ", +, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }]
[;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, .]
[,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals]
[+, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME]
[+, MSG_FUNCTION_NAME, +, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (]
[+, " function.", ,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME]
[,, node, ), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals]
[), ;, }, Node, fnNameNode, =, node, ., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode]
[;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (]
[., getFirstChild, (, ), ;, if, (, !, MSG_FUNCTION_NAME, ., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {]
[), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode]
[), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode]
[., equals, (, fnNameNode, ., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME]
[), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node]
[., getQualifiedName, (, ), ), ), {, throw, new, MalformedException, (, "Message initialized using unrecognized function. ", +, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode]
[;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw, new]
[,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, )]
[+, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==]
[+, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (]
[+, "Please use ", +, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;]
[+, MSG_FUNCTION_NAME, +, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (]
[+, "() instead.", ,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==]
[,, fnNameNode, ), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, )]
[), ;, }, Node, stringLiteralNode, =, fnNameNode, ., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw]
[;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (]
[., getNext, (, ), ;, if, (, stringLiteralNode, ==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, )]
[), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node]
[==, null, ), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, )]
[), {, throw, new, MalformedException, (, "Message string literal expected", ,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node]
[;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <]
[,, stringLiteralNode, ), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, )]
[), ;, }, parseMessageTextNode, (, builder, ,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set]
[;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (]
[,, stringLiteralNode, ), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets]
[), ;, Node, objLitNode, =, stringLiteralNode, ., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet]
[;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode, !=, null, ), {]
[., getNext, (, ), ;, Set, <, String, >, phNames, =, Sets, ., newHashSet, (, ), ;, if, (, objLitNode]
[;, if, (, objLitNode, !=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new]
[., newHashSet, (, ), ;, if, (, objLitNode, !=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, )]
[), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, )]
[!=, null, ), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,]
[), {, if, (, !, objLitNode, ., isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, )]
[), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild]
[), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild]
[., isObjectLit, (, ), ), {, throw, new, MalformedException, (, "OBJLIT node expected", ,, objLitNode, ), ;, }, for, (, Node, aNode]
[;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =, aNode]
[,, objLitNode, ), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;]
[), ;, }, for, (, Node, aNode, =, objLitNode, ., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =]
[;, aNode, !=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey]
[., getFirstChild, (, ), ;, aNode, !=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (]
[;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {]
[!=, null, ;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, )]
[;, aNode, =, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {]
[=, aNode, ., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw, new]
[), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, )]
[., getNext, (, ), ), {, if, (, !, aNode, ., isStringKey, (, ), ), {, throw, new, MalformedException, (]
[), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, )]
[), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, )]
[., isStringKey, (, ), ), {, throw, new, MalformedException, (, "STRING_KEY node expected as OBJLIT key", ,, aNode, ), ;, }, String, phName, =, aNode]
[;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {]
[,, aNode, ), ;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName]
[), ;, }, String, phName, =, aNode, ., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), )]
[;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, )]
[., getString, (, ), ;, if, (, !, isLowerCamelCaseWithNumericSuffixes, (, phName, ), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +]
[), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (]
[), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (]
[), ), {, throw, new, MalformedException, (, "Placeholder name not in lowerCamelCase: ", +, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains]
[;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,]
[,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: "]
[+, phName, ,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException]
[,, aNode, ), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: "]
[), ;, }, if, (, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName]
[), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }, phNames, ., add, (, phName, )]
[., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }, phNames]
[), ), {, throw, new, MalformedException, (, "Duplicate placeholder name: ", +, phName, ,, aNode, ), ;, }, phNames, ., add, (, phName]
[;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =, builder, ., getPlaceholders]
[,, aNode, ), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =]
[+, phName, ,, aNode, ), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >]
[,, aNode, ), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =]
[), ;, }, phNames, ., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =, builder, .]
[;, }, }, Set, <, String, >, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName, :]
[., add, (, phName, ), ;, }, }, Set, <, String, >, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;]
[), ;, }, }, Set, <, String, >, usedPlaceholders, =, builder, ., getPlaceholders, (, ), ;, for, (, String, phName]
[;, for, (, String, phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (, phName, ), ), {]
[., getPlaceholders, (, ), ;, for, (, String, phName, :, usedPlaceholders, ), {, if, (, !, phNames, ., contains, (]
[), {, if, (, !, phNames, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :]
[), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :]
[., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }]
[), ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName]
[;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName, )]
[,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains]
[+, phName, ,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders]
[,, objLitNode, ), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains]
[), ;, }, }, for, (, String, phName, :, phNames, ), {, if, (, !, usedPlaceholders, ., contains, (, phName]
[), {, if, (, !, usedPlaceholders, ., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName]
[), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName, ,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode, (]
[), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName, ,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode, (]
[., contains, (, phName, ), ), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName, ,, objLitNode, ), ;, }, }]
[), ), {, throw, new, MalformedException, (, "Unused message placeholder: ", +, phName, ,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode]
[;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, String, value, =]
[,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[+, phName, ,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws]
[,, objLitNode, ), ;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {]
[), ;, }, }, }, private, void, parseMessageTextNode, (, Builder, builder, ,, Node, node, ), throws, MalformedException, {, String, value]
[;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <]
[), ;, while, (, true, ), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin]
[), {, int, phBegin, =, value, ., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <, 0, ), {, builder]
[;, if, (, phBegin, <, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {]
[., indexOf, (, PH_JS_PREFIX, ), ;, if, (, phBegin, <, 0, ), {, builder, ., appendStringPart, (, value, ), ;]
[), ;, if, (, phBegin, <, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else]
[), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, )]
[<, 0, ), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >]
[), {, builder, ., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, )]
[;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (, value, ., substring]
[., appendStringPart, (, value, ), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, .]
[), ;, return, ;, }, else, {, if, (, phBegin, >, 0, ), {, builder, ., appendStringPart, (, value, .]
[), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =]
[>, 0, ), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int]
[), {, builder, ., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =]
[;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, )]
[., appendStringPart, (, value, ., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf]
[), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0]
[., substring, (, 0, ,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin]
[,, phBegin, ), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (]
[), ), ;, }, int, phEnd, =, value, ., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <]
[;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,]
[., indexOf, (, PH_JS_SUFFIX, ,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: "]
[,, phBegin, ), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey]
[), ;, if, (, phEnd, <, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, )]
[), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName]
[<, 0, ), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }]
[), {, throw, new, MalformedException, (, "Placeholder incorrectly formatted in: ", +, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName]
[;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;]
[,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,]
[+, builder, ., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +]
[,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,]
[., getKey, (, ), ,, node, ), ;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, .]
[), ;, }, String, phName, =, value, ., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, )]
[;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if]
[., substring, (, phBegin, +, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, )]
[,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (]
[+, PH_JS_PREFIX, ., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =]
[,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (]
[., length, (, ), ,, phEnd, ), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +]
[), ;, builder, ., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;]
[;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length, (]
[., appendPlaceholderReference, (, phName, ), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos]
[), ;, int, nextPos, =, phEnd, +, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length]
[;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =, value, ., substring, (, nextPos, )]
[+, PH_JS_SUFFIX, ., length, (, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =]
[;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =, value, ., substring, (, nextPos, )]
[., length, (, ), ;, if, (, nextPos, <, value, ., length, (, ), ), {, value, =, value, .]
[), {, value, =, value, ., substring, (, nextPos, ), ;, }, else, {, return, ;, }, }, }, }]
[<, value, ., length, (, ), ), {, value, =, value, ., substring, (, nextPos, ), ;, }, else, {]
[), {, value, =, value, ., substring, (, nextPos, ), ;, }, else, {, return, ;, }, }, }, }]
[., length, (, ), ), {, value, =, value, ., substring, (, nextPos, ), ;, }, else, {, return, ;]
[=, value, ., substring, (, nextPos, ), ;, }, else, {, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall]
[;, }, else, {, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call, )]
[., substring, (, nextPos, ), ;, }, else, {, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal]
[), ;, }, else, {, return, ;, }, }, }, }, private, void, visitFallbackFunctionCall, (, NodeTraversal, t, ,, Node, call]
[), {, compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node]
[||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, .]
[||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, )]
[!=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (]
[., getChildCount, (, ), !=, 3, ||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !]
[||, !, call, ., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, )]
[||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, .]
[||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, .]
[., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, .]
[., getChildAtIndex, (, 1, ), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (]
[), ., isName, (, ), ||, !, call, ., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler]
[), {, compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node]
[), {, compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node]
[., isName, (, ), ), {, compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;]
[., getChildAtIndex, (, 2, ), ., isName, (, ), ), {, compiler, ., report, (, t, ., makeError, (, call]
[), ., isName, (, ), ), {, compiler, ., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), )]
[;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t]
[., report, (, t, ., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =, call]
[), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (]
[., makeError, (, call, ,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1]
[,, BAD_FALLBACK_SYNTAX, ), ), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage]
[), ), ;, return, ;, }, Node, firstArg, =, call, ., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage]
[;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null]
[., getChildAtIndex, (, 1, ), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;]
[), ;, JsMessage, firstMessage, =, getTrackedMessage, (, t, ,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==]
[;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,]
[,, firstArg, ., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t]
[), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR]
[., getString, (, ), ), ;, if, (, firstMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), )]
[==, null, ), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (]
[), {, compiler, ., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), )]
[;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,]
[., report, (, t, ., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), ), ;, return]
[), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t]
[., makeError, (, firstArg, ,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), ), ;, return, ;, }, Node, secondArg]
[,, FALLBACK_ARG_ERROR, ,, firstArg, ., getString, (, ), ), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext]
[,, firstArg, ., getString, (, ), ), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, )]
[), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (]
[., getString, (, ), ), ), ;, return, ;, }, Node, secondArg, =, firstArg, ., getNext, (, ), ;, JsMessage]
[;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;]
[., getNext, (, ), ;, JsMessage, secondMessage, =, getTrackedMessage, (, t, ,, call, ., getChildAtIndex, (, 2, ), ., getString]
[;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,]
[,, call, ., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {]
[), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR]
[., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, ., makeError]
[., getChildAtIndex, (, 2, ), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, .]
[), ., getString, (, ), ), ;, if, (, secondMessage, ==, null, ), {, compiler, ., report, (, t, .]
[), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), )]
[==, null, ), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (]
[), {, compiler, ., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), )]
[;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, ), ;, }, abstract, void, processJsMessage, (, JsMessage, message]
[., report, (, t, ., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return]
[), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, ), ;, }, abstract, void, processJsMessage, (, JsMessage]
[., makeError, (, secondArg, ,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (]
[,, FALLBACK_ARG_ERROR, ,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,]
[,, secondArg, ., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, )]
[), ), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, ), ;, }, abstract, void, processJsMessage, (]
[., getString, (, ), ), ), ;, return, ;, }, processMessageFallback, (, call, ,, firstMessage, ,, secondMessage, ), ;, }]
[;, }, abstract, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), ;, void, processMessageFallback, (, Node, callNode, ,, JsMessage]
[,, firstMessage, ,, secondMessage, ), ;, }, abstract, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), ;, void, processMessageFallback]
[,, secondMessage, ), ;, }, abstract, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), ;, void, processMessageFallback, (, Node]
[), ;, }, abstract, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), ;, void, processMessageFallback, (, Node, callNode, ,]
[;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), ., matches]
[&&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), )]
[., startsWith, (, MSG_PREFIX, ), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, .]
[), &&, (, style, ==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, )]
[;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), ., matches]
[), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), .]
[||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {]
[||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier]
[==, JsMessage, ., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private]
[||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier]
[., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (]
[., Style, ., CLOSURE, ||, isNewStyleMessage, ||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean]
[||, !, identifier, ., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {]
[), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), .]
[), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, ), .]
[., endsWith, (, DESC_SUFFIX, ), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, .]
[), ), ;, }, private, static, boolean, isUnnamedMessageName, (, String, identifier, ), {, return, MSG_UNNAMED_PATTERN, ., matcher, (, identifier, )]
[;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return, CAMELCASE_PATTERN, ., matcher, (, input, ), ., matches, (]
[., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return, CAMELCASE_PATTERN, ., matcher, (, input]
[., matcher, (, identifier, ), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return]
[), ., matches, (, ), ;, }, static, boolean, isLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, return, CAMELCASE_PATTERN, ., matcher, (]
[;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return, Token, ., name, (, node, ., getType, (]
[., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return, Token, ., name, (]
[., matcher, (, input, ), ., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {]
[), ., matches, (, ), ;, }, private, static, String, getReadableTokenName, (, Node, node, ), {, return, Token, ., name]
[;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, ., length, (, ), ;, while]
[., name, (, node, ., getType, (, ), ), ;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int]
[), ;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, ., length, (, ), ;]
[., getType, (, ), ), ;, }, static, String, toLowerCamelCaseWithNumericSuffixes, (, String, input, ), {, int, suffixStart, =, input, .]
[;, while, (, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (]
[., length, (, ), ;, while, (, suffixStart, >, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =]
[), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch]
[>, 0, ), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, )]
[), {, char, ch, =, '\0', ;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch]
[;, int, numberStart, =, suffixStart, ;, while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (, numberStart]
[;, while, (, numberStart, >, 0, ), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if]
[), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch]
[>, 0, ), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit]
[), {, ch, =, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch]
[=, input, ., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch, ), ), {]
[;, if, (, Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }]
[., charAt, (, numberStart, -, 1, ), ;, if, (, Character, ., isDigit, (, ch, ), ), {, numberStart, --]
[), ;, if, (, Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;]
[-, 1, ), ;, if, (, Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {]
[), ;, if, (, Character, ., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;]
[), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&]
[., isDigit, (, ch, ), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (]
[), ), {, numberStart, --, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, )]
[;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <, suffixStart]
[--, ;, }, else, {, break, ;, }, }, if, (, (, numberStart, >, 0, ), &&, (, numberStart, <]
[), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input]
[&&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }]
[&&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;]
[), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1]
[>, 0, ), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart]
[), &&, (, numberStart, <, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1]
[&&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }]
[), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;]
[<, suffixStart, ), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {]
[), &&, (, ch, ==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;]
[), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input]
[), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==]
[==, '_', ), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (]
[), ), {, suffixStart, =, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==]
[=, numberStart, -, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (]
[;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return]
[-, 1, ;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), )]
[;, }, else, {, break, ;, }, }, if, (, suffixStart, ==, input, ., length, (, ), ), {, return]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[==, input, ., length, (, ), ), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input]
[), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return]
[., length, (, ), ), {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;]
[;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0]
[., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (]
[., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, .]
[,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, .]
[., LOWER_CAMEL, ,, input, ), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,]
[), ;, }, else, {, return, CaseFormat, ., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (]
[;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (]
[+, input, ., substring, (, suffixStart, ), ;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int]
[., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring]
[., UPPER_UNDERSCORE, ., to, (, CaseFormat, ., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input]
[,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring, (, suffixStart, ), ;, }, }]
[., LOWER_CAMEL, ,, input, ., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring, (, suffixStart, ), ;]
[), +, input, ., substring, (, suffixStart, ), ;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,]
[., substring, (, 0, ,, suffixStart, ), ), +, input, ., substring, (, suffixStart, ), ;, }, }, protected, void]
[,, suffixStart, ), ), +, input, ., substring, (, suffixStart, ), ;, }, }, protected, void, checkNode, (, @, Nullable]
[), ), +, input, ., substring, (, suffixStart, ), ;, }, }, protected, void, checkNode, (, @, Nullable, Node, node]
[;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if, (]
[., substring, (, suffixStart, ), ;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, )]
[), ;, }, }, protected, void, checkNode, (, @, Nullable, Node, node, ,, int, type, ), throws, MalformedException, {, if]
[), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (, node, .]
[==, null, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (]
[), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: null", ,, node, ), ;, }, if, (, node, .]
[;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[+, "; found: null", ,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new]
[+, type, +, "; found: null", ,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {]
[+, "; found: null", ,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new]
[,, node, ), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (]
[), ;, }, if, (, node, ., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +]
[), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, ), ,, node, )]
[!=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, ), ,]
[., getType, (, ), !=, type, ), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, .]
[), {, throw, new, MalformedException, (, "Expected node type ", +, type, +, "; found: ", +, node, ., getType, (, ), ,, node, )]
[;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, final, Node]
[,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;]
[+, node, ., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static]
[+, "; found: ", +, node, ., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {]
[+, type, +, "; found: ", +, node, ., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends]
[+, "; found: ", +, node, ., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {]
[+, node, ., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static]
[,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;]
[., getType, (, ), ,, node, ), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long]
[), ;, }, }, static, class, MalformedException, extends, Exception, {, private, static, final, long, serialVersionUID, =, 1L, ;, private, final]
[;, private, final, Node, node, ;, MalformedException, (, String, message, ,, Node, node, ), {, super, (, message, ), ;]
[), ;, this, ., node, =, node, ;, }, Node, getNode, (, ), {, return, node, ;, }, }, private]
[=, node, ;, }, Node, getNode, (, ), {, return, node, ;, }, }, private, static, class, MessageLocation, {, private]
[., node, =, node, ;, }, Node, getNode, (, ), {, return, node, ;, }, }, private, static, class, MessageLocation]
[;, }, Node, getNode, (, ), {, return, node, ;, }, }, private, static, class, MessageLocation, {, private, final, JsMessage]
[;, }, }, private, static, class, MessageLocation, {, private, final, JsMessage, message, ;, private, final, Node, messageNode, ;, private, MessageLocation]
[=, message, ;, this, ., messageNode, =, messageNode, ;, }, }, }]
[., message, =, message, ;, this, ., messageNode, =, messageNode, ;, }, }, }]
[;, this, ., messageNode, =, messageNode, ;, }, }, }]
[=, messageNode, ;, }, }, }]
[., messageNode, =, messageNode, ;, }, }, }]
[;, }, }, }]
