[;, private, static, final, boolean, CONSERVATIVE, =, false, ;, private, final, ArrayList, <, Name, >, currentFunctionStack, =, new, ArrayList, <]
[., create, (, ), ;, private, static, final, boolean, CONSERVATIVE, =, false, ;, private, final, ArrayList, <, Name, >, currentFunctionStack]
[;, private, final, ArrayList, <, Name, >, currentFunctionStack, =, new, ArrayList, <, Name, >, (, ), ;, NameReferenceGraphConstruction, (, AbstractCompiler]
[;, NameReferenceGraphConstruction, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (]
[=, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return]
[., compiler, =, compiler, ;, this, ., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, )]
[;, this, ., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return, this, .]
[=, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return, this, ., graph, ;, }, @]
[., graph, =, new, NameReferenceGraph, (, compiler, ), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return, this, ., graph, ;]
[;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return, this, ., graph, ;, }, @, Override, public, void, process, (, Node]
[), ;, }, NameReferenceGraph, getNameReferenceGraph, (, ), {, return, this, ., graph, ;, }, @, Override, public, void, process, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =, compiler, .]
[., graph, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ScopeCreator, scopeCreator, =]
[;, if, (, scopeCreator, ==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;]
[., getTypedScopeCreator, (, ), ;, if, (, scopeCreator, ==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (]
[), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal]
[==, null, ), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =]
[), {, scopeCreator, =, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal]
[=, new, MemoizedScopeCreator, (, new, TypedScopeCreator, (, compiler, ), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,]
[;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal]
[), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, ), ;]
[), ), ;, }, NodeTraversal, externsTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, true, ), ,, scopeCreator, )]
[;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope]
[,, new, Traversal, (, true, ), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal]
[,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator, )]
[), ,, scopeCreator, ), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator]
[), ;, NodeTraversal, codeTraversal, =, new, NodeTraversal, (, compiler, ,, new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope]
[;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope]
[,, new, Traversal, (, false, ), ,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if]
[,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {]
[), ,, scopeCreator, ), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, )]
[), ;, Scope, topScope, =, compiler, ., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, .]
[;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope]
[., getTopScope, (, ), ;, if, (, topScope, !=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, )]
[), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;]
[!=, null, ), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope]
[), {, externsTraversal, ., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;]
[;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;]
[., traverseWithScope, (, externs, ,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {]
[,, topScope, ), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (]
[), ;, codeTraversal, ., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, )]
[;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, ., traverse, (, root, ), ;, }, connectUnknowns]
[., traverseWithScope, (, root, ,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, .]
[,, topScope, ), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, ., traverse, (, root, )]
[), ;, }, else, {, externsTraversal, ., traverse, (, externs, ), ;, codeTraversal, ., traverse, (, root, ), ;, }]
[;, codeTraversal, ., traverse, (, root, ), ;, }, connectUnknowns, (, ), ;, }, private, class, Traversal, implements, ScopedCallback, {]
[., traverse, (, externs, ), ;, codeTraversal, ., traverse, (, root, ), ;, }, connectUnknowns, (, ), ;, }, private]
[), ;, codeTraversal, ., traverse, (, root, ), ;, }, connectUnknowns, (, ), ;, }, private, class, Traversal, implements, ScopedCallback]
[;, }, connectUnknowns, (, ), ;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (]
[., traverse, (, root, ), ;, }, connectUnknowns, (, ), ;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean]
[), ;, }, connectUnknowns, (, ), ;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal]
[;, }, private, class, Traversal, implements, ScopedCallback, {, final, boolean, isExtern, ;, private, Traversal, (, boolean, isExtern, ), {, this]
[=, isExtern, ;, pushContainingFunction, (, graph, ., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[., isExtern, =, isExtern, ;, pushContainingFunction, (, graph, ., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal]
[;, pushContainingFunction, (, graph, ., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =, t, ., getScopeRoot, (, )]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =, t, ., getScopeRoot, (]
[., MAIN, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Node, root, =, t, .]
[;, Node, parent, =, root, ., getParent, (, ), ;, if, (, !, t, ., inGlobalScope, (, ), ), {]
[., getScopeRoot, (, ), ;, Node, parent, =, root, ., getParent, (, ), ;, if, (, !, t, ., inGlobalScope]
[;, if, (, !, t, ., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, )]
[., getParent, (, ), ;, if, (, !, t, ., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, .]
[), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {, pushContainingFunction]
[), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {, pushContainingFunction]
[., inGlobalScope, (, ), ), {, String, name, =, NodeUtil, ., getFunctionName, (, root, ), ;, if, (, name, ==]
[;, if, (, name, ==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type]
[., getFunctionName, (, root, ), ;, if, (, name, ==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;]
[), ;, if, (, name, ==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType]
[), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;]
[==, null, ), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root]
[), {, pushContainingFunction, (, graph, ., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;]
[;, return, ;, }, JSType, type, =, getType, (, root, ), ;, Node, gParent, =, parent, ., getParent, (, )]
[), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;, Node, gParent, =, parent, ., getParent, (]
[., UNKNOWN, ), ;, return, ;, }, JSType, type, =, getType, (, root, ), ;, Node, gParent, =, parent, .]
[;, Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if]
[), ;, Node, gParent, =, parent, ., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;]
[;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, NodeUtil, .]
[., getParent, (, ), ;, Node, ggParent, =, gParent, ., getParent, (, ), ;, if, (, parent, ., isAssign, (]
[;, if, (, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), )]
[., getParent, (, ), ;, if, (, parent, ., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild]
[), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,]
[&&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent]
[., isAssign, (, ), &&, NodeUtil, ., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition]
[), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,]
[., isPrototypeProperty, (, parent, ., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild]
[), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent]
[., getFirstChild, (, ), ), ), {, pushContainingFunction, (, recordPrototypePropDefinition, (, t, ,, parent, ., getFirstChild, (, ), ,, type]
[;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,, gParent, ,]
[), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,, gParent]
[,, parent, ., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {]
[,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,]
[., getFirstChild, (, ), ,, type, ,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (]
[,, parent, ,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,]
[,, gParent, ,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,]
[,, ggParent, ), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,]
[), ), ;, }, else, {, pushContainingFunction, (, recordStaticNameDefinition, (, t, ,, name, ,, type, ,, root, ,, parent, ,]
[;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope]
[), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t, .]
[,, name, ,, type, ,, root, ,, parent, ,, gParent, ,, root, ., getLastChild, (, ), ), ), ;, }]
[,, type, ,, root, ,, parent, ,, gParent, ,, root, ., getLastChild, (, ), ), ), ;, }, }, }]
[,, root, ,, parent, ,, gParent, ,, root, ., getLastChild, (, ), ), ), ;, }, }, }, @, Override]
[,, parent, ,, gParent, ,, root, ., getLastChild, (, ), ), ), ;, }, }, }, @, Override, public, void]
[,, gParent, ,, root, ., getLastChild, (, ), ), ), ;, }, }, }, @, Override, public, void, exitScope, (]
[,, root, ., getLastChild, (, ), ), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t]
[), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, !, t]
[., getLastChild, (, ), ), ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[), {, popContainingFunction, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[), {, popContainingFunction, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[., inGlobalScope, (, ), ), {, popContainingFunction, (, ), ;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[;, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[;, }, @, SuppressWarnings, (, "fallthrough", ), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, .]
[), @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n]
[), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, if, (, parent, ., isGetProp, (, ), )]
[., getType, (, ), ), {, case, Token, ., NAME, :, case, Token, ., GETPROP, :, if, (, parent, .]
[:, case, Token, ., GETPROP, :, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }, else, if]
[., NAME, :, case, Token, ., GETPROP, :, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }]
[:, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }, else, if, (, parent, ., isFunction, (]
[., GETPROP, :, if, (, parent, ., isGetProp, (, ), ), {, return, ;, }, else, if, (, parent, .]
[), {, return, ;, }, else, if, (, parent, ., isFunction, (, ), ), {, return, ;, }, else, if]
[., isGetProp, (, ), ), {, return, ;, }, else, if, (, parent, ., isFunction, (, ), ), {, return]
[), {, return, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return, ;, }, if, (]
[., isFunction, (, ), ), {, return, ;, }, else, if, (, parent, ., isAssign, (, ), ), {, return]
[), {, return, ;, }, if, (, isLocalNameReference, (, t, ,, n, ), ), {, return, ;, }, if, (]
[., isAssign, (, ), ), {, return, ;, }, if, (, isLocalNameReference, (, t, ,, n, ), ), {, return]
[), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent]
[,, n, ), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,]
[), ), {, return, ;, }, if, (, isPrototypeNameReference, (, n, ), ), {, recordPrototypePropUse, (, t, ,, n, ,]
[), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,, t]
[), ), {, recordPrototypePropUse, (, t, ,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,]
[;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (, t]
[,, n, ,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), )]
[,, parent, ), ;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {]
[), ;, }, else, if, (, isStaticNameReference, (, n, ,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (]
[), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,]
[,, t, ., getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else]
[), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n]
[., getScope, (, ), ), ), {, recordStaticNameUse, (, t, ,, n, ,, parent, ), ;, }, else, {, recordUnknownUse]
[;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case, Token, ., ASSIGN]
[,, n, ,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break]
[,, parent, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case]
[), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, break, ;, case, Token, .]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs]
[,, n, ,, parent, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild]
[,, parent, ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, )]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, n, ., getLastChild, (, ), ;, if]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, Node, rhs, =, n, ., getLastChild, (, )]
[;, Node, rhs, =, n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return]
[., getFirstChild, (, ), ;, Node, rhs, =, n, ., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (]
[;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (, lhs, ., isName, (, )]
[., getLastChild, (, ), ;, if, (, rhs, ., isFunction, (, ), ), {, return, ;, }, if, (, lhs]
[), {, return, ;, }, if, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp, (, ), ||, rhs]
[., isFunction, (, ), ), {, return, ;, }, if, (, lhs, ., isName, (, ), ||, lhs, ., isGetProp]
[), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs]
[||, rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name]
[||, lhs, ., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (]
[., isName, (, ), ||, lhs, ., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (]
[||, rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name]
[., isGetProp, (, ), ||, rhs, ., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, )]
[), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs]
[., isGetProp, (, ), ), {, if, (, NodeUtil, ., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition]
[), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,]
[., isPrototypeProperty, (, lhs, ), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, )]
[), ), {, Name, name, =, recordPrototypePropDefinition, (, t, ,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent]
[;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case]
[,, lhs, ,, getType, (, rhs, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name]
[,, getType, (, rhs, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased]
[,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }]
[), ,, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;]
[,, parent, ,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign]
[,, parent, ., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs]
[), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;]
[., getParent, (, ), ), ;, name, ., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs]
[;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case, Token, ., VAR, :, Node, varName, =]
[., setAliased, (, true, ), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case, Token, .]
[), ;, }, }, maybeAliasNamesOnAssign, (, lhs, ,, rhs, ), ;, break, ;, case, Token, ., VAR, :, Node, varName]
[;, break, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =]
[,, rhs, ), ;, break, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue]
[:, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if]
[., VAR, :, Node, varName, =, n, ., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, )]
[;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, ), {, return, ;, }]
[., getFirstChild, (, ), ;, Node, assignedValue, =, varName, ., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, )]
[;, if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;]
[., getFirstChild, (, ), ;, if, (, assignedValue, ==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue]
[), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case, Token, ., CALL, :, Node]
[==, null, ), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case, Token, ., CALL]
[), {, return, ;, }, maybeAliasNamesOnAssign, (, varName, ,, assignedValue, ), ;, break, ;, case, Token, ., CALL, :, Node]
[;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (]
[,, assignedValue, ), ;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;]
[), ;, break, ;, case, Token, ., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (]
[:, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (, param, =, param, ., getNext, (, )]
[., CALL, :, Node, param, =, n, ., getFirstChild, (, ), ;, while, (, (, param, =, param, ., getNext]
[;, while, (, (, param, =, param, ., getNext, (, ), ), !=, null, ), {, if, (, param, .]
[., getFirstChild, (, ), ;, while, (, (, param, =, param, ., getNext, (, ), ), !=, null, ), {]
[), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (, param]
[!=, null, ), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias]
[=, param, ., getNext, (, ), ), !=, null, ), {, if, (, param, ., isName, (, ), ||, param]
[), !=, null, ), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {]
[., getNext, (, ), ), !=, null, ), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp]
[), {, if, (, param, ., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (, param]
[), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean]
[||, param, ., isGetProp, (, ), ), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport, (, n, ), ;]
[., isName, (, ), ||, param, ., isGetProp, (, ), ), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport]
[), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean]
[., isGetProp, (, ), ), {, safeAlias, (, param, ), ;, }, }, maybeRecordExport, (, n, ), ;, break, ;]
[;, }, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {]
[), ;, }, }, maybeRecordExport, (, n, ), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, )]
[;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n, ,]
[), ;, break, ;, }, }, private, boolean, containsName, (, Node, n, ), {, return, NodeUtil, ., containsType, (, n]
[;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, ), ||, n, .]
[||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, )]
[||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,, Token, .]
[., containsType, (, n, ,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, )]
[,, Token, ., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType]
[), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,, Token]
[., NAME, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n]
[||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, )]
[., containsType, (, n, ,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, )]
[,, Token, ., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void]
[), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n]
[., GETELEM, ), ||, NodeUtil, ., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (]
[;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, ), ||, n, .]
[., containsType, (, n, ,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if]
[,, Token, ., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName]
[), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, ), ||, n]
[., GETPROP, ), ;, }, private, void, safeAlias, (, Node, n, ), {, if, (, n, ., isName, (, )]
[), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, defineAndAlias, (]
[||, n, ., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name]
[., isName, (, ), ||, n, ., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, )]
[), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, defineAndAlias, (]
[., isGetProp, (, ), ), {, String, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, !=, null]
[;, if, (, name, !=, null, ), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n]
[., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, defineAndAlias, (, name, ), ;, return, ;, }]
[), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {]
[!=, null, ), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, )]
[), {, defineAndAlias, (, name, ), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {]
[;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {, defineAndAlias, (, n, ., getLastChild, (]
[), ;, return, ;, }, }, if, (, n, ., isGetProp, (, ), ), {, defineAndAlias, (, n, ., getLastChild]
[), {, defineAndAlias, (, n, ., getLastChild, (, ), ., getString, (, ), ), ;, }, else, if, (, n]
[., isGetProp, (, ), ), {, defineAndAlias, (, n, ., getLastChild, (, ), ., getString, (, ), ), ;, }]
[;, }, else, if, (, n, ., isAssign, (, ), ), {, safeAlias, (, n, ., getFirstChild, (, ), )]
[), ;, }, else, if, (, n, ., isAssign, (, ), ), {, safeAlias, (, n, ., getFirstChild, (, )]
[., getString, (, ), ), ;, }, else, if, (, n, ., isAssign, (, ), ), {, safeAlias, (, n]
[., getLastChild, (, ), ., getString, (, ), ), ;, }, else, if, (, n, ., isAssign, (, ), )]
[), {, safeAlias, (, n, ., getFirstChild, (, ), ), ;, }, else, if, (, n, ., hasChildren, (, )]
[., isAssign, (, ), ), {, safeAlias, (, n, ., getFirstChild, (, ), ), ;, }, else, if, (, n]
[;, }, else, if, (, n, ., hasChildren, (, ), ), {, Node, cur, =, n, ., getFirstChild, (, )]
[), ;, }, else, if, (, n, ., hasChildren, (, ), ), {, Node, cur, =, n, ., getFirstChild, (]
[., getFirstChild, (, ), ), ;, }, else, if, (, n, ., hasChildren, (, ), ), {, Node, cur, =]
[), {, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while]
[., hasChildren, (, ), ), {, Node, cur, =, n, ., getFirstChild, (, ), ;, do, {, safeAlias, (, cur]
[;, do, {, safeAlias, (, cur, ), ;, }, while, (, (, cur, =, cur, ., getNext, (, ), )]
[., getFirstChild, (, ), ;, do, {, safeAlias, (, cur, ), ;, }, while, (, (, cur, =, cur, .]
[;, }, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), ;, }, else, {]
[), ;, }, while, (, (, cur, =, cur, ., getNext, (, ), ), !=, null, ), ;, }, else]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[!=, null, ), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {]
[=, cur, ., getNext, (, ), ), !=, null, ), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (]
[), !=, null, ), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, )]
[., getNext, (, ), ), !=, null, ), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs]
[), ;, }, else, {, }, }, private, void, maybeAliasNamesOnAssign, (, Node, lhs, ,, Node, rhs, ), {, if, (]
[), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name]
[&&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }]
[&&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, )]
[&&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), )]
[), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, )]
[||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&]
[., isName, (, ), ||, lhs, ., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, .]
[), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, )]
[., isGetProp, (, ), ), &&, containsName, (, rhs, ), &&, !, rhs, ., isFunction, (, ), &&, !, rhs]
[&&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, )]
[), &&, !, rhs, ., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs]
[&&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }]
[&&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }]
[., isFunction, (, ), &&, !, rhs, ., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (]
[), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name]
[), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name]
[., isNew, (, ), ), {, safeAlias, (, lhs, ), ;, safeAlias, (, rhs, ), ;, }, }, private, void]
[;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (]
[), ;, safeAlias, (, rhs, ), ;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists]
[;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), .]
[), ;, }, }, private, void, defineAndAlias, (, String, name, ), {, graph, ., defineNameIfNotExists, (, name, ,, isExtern, )]
[;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), )]
[., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (, call]
[., defineNameIfNotExists, (, name, ,, isExtern, ), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call]
[,, isExtern, ), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, .]
[), ., setAliased, (, true, ), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (]
[), ;, }, private, void, maybeRecordExport, (, Node, call, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, )]
[;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {]
[., checkArgument, (, call, ., isCall, (, ), ), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if]
[), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), )]
[., isCall, (, ), ), ;, Node, getProp, =, call, ., getFirstChild, (, ), ;, if, (, !, getProp, .]
[;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName]
[., getFirstChild, (, ), ;, if, (, !, getProp, ., isGetProp, (, ), ), {, return, ;, }, String, propQName]
[), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==, null, )]
[), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (, propQName, ==, null, )]
[., isGetProp, (, ), ), {, return, ;, }, String, propQName, =, getProp, ., getQualifiedName, (, ), ;, if, (]
[;, if, (, propQName, ==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||]
[., getQualifiedName, (, ), ;, if, (, propQName, ==, null, ), {, return, ;, }, if, (, propQName, ., endsWith]
[), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", )]
[==, null, ), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (]
[), {, return, ;, }, if, (, propQName, ., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", )]
[), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply]
[||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName]
[., endsWith, (, ".call", ), ||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (, getProp, .]
[), ||, propQName, ., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), .]
[), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply]
[., endsWith, (, ".apply", ), ), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, )]
[), ), {, graph, ., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), .]
[;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {, return, ;, }, Node, symbol, =, getProp]
[., markExposedToCallOrApply, (, ), ;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {, return, ;, }]
[., defineNameIfNotExists, (, getProp, ., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;]
[,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {]
[., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !, "goog.exportSymbol", ., equals, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ,, isExtern, ), ., markExposedToCallOrApply, (, ), ;, }, if, (, !]
[), ., markExposedToCallOrApply, (, ), ;, }, if, (, !, "goog.exportSymbol", ., equals, (, propQName, ), ), {, return, ;]
[), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (, !, symbol, ., isString]
[), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (, !, symbol, ., isString]
[., equals, (, propQName, ), ), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if]
[), ), {, return, ;, }, Node, symbol, =, getProp, ., getNext, (, ), ;, if, (, !, symbol, .]
[;, if, (, !, symbol, ., isString, (, ), ), {, return, ;, }, Node, obj, =, symbol, ., getNext]
[., getNext, (, ), ;, if, (, !, symbol, ., isString, (, ), ), {, return, ;, }, Node, obj]
[), {, return, ;, }, Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName]
[), {, return, ;, }, Node, obj, =, symbol, ., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName]
[., isString, (, ), ), {, return, ;, }, Node, obj, =, symbol, ., getNext, (, ), ;, String, qName]
[;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||, obj, ., getNext, (]
[., getNext, (, ), ;, String, qName, =, obj, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||]
[;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph]
[., getQualifiedName, (, ), ;, if, (, qName, ==, null, ||, obj, ., getNext, (, ), !=, null, ), {]
[), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false, ), ., markExported, (, ), ;, }, private]
[||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false]
[==, null, ||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName]
[||, obj, ., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false]
[), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false, ), ., markExported, (, ), ;, }, private]
[!=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false, ), ., markExported, (, ), ;]
[., getNext, (, ), !=, null, ), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false, ), .]
[), {, return, ;, }, graph, ., defineNameIfNotExists, (, qName, ,, false, ), ., markExported, (, ), ;, }, private]
[;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n, ., isName, (, )]
[., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {, if, (, n]
[., defineNameIfNotExists, (, qName, ,, false, ), ., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,]
[,, false, ), ., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {]
[), ., markExported, (, ), ;, }, private, boolean, isLocalNameReference, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[), {, Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;]
[., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString]
[;, return, v, !=, null, &&, v, ., isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference]
[., getVar, (, n, ., getString, (, ), ), ;, return, v, !=, null, &&, v, ., isLocal, (, )]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, return, v, !=, null, &&, v]
[), ;, return, v, !=, null, &&, v, ., isLocal, (, ), ;, }, return, false, ;, }, private, boolean]
[., getString, (, ), ), ;, return, v, !=, null, &&, v, ., isLocal, (, ), ;, }, return, false]
[;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument]
[&&, v, ., isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope]
[!=, null, &&, v, ., isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n]
[&&, v, ., isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope]
[;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument]
[., isLocal, (, ), ;, }, return, false, ;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, )]
[;, }, private, boolean, isStaticNameReference, (, Node, n, ,, Scope, scope, ), {, Preconditions, ., checkArgument, (, n, ., isName]
[;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName]
[., checkArgument, (, n, ., isName, (, ), ||, n, ., isGetProp, (, ), ), ;, if, (, n, .]
[), ;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String, qName, =, n, .]
[||, n, ., isGetProp, (, ), ), ;, if, (, n, ., isName, (, ), ), {, return, true, ;]
[., isName, (, ), ||, n, ., isGetProp, (, ), ), ;, if, (, n, ., isName, (, ), )]
[), ;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String, qName, =, n, .]
[., isGetProp, (, ), ), ;, if, (, n, ., isName, (, ), ), {, return, true, ;, }, String]
[), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==, null]
[., isName, (, ), ), {, return, true, ;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if]
[;, }, String, qName, =, n, ., getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return, false]
[;, if, (, qName, ==, null, ), {, return, false, ;, }, return, scope, ., isDeclared, (, qName, ,, true]
[., getQualifiedName, (, ), ;, if, (, qName, ==, null, ), {, return, false, ;, }, return, scope, ., isDeclared]
[), {, return, false, ;, }, return, scope, ., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference]
[==, null, ), {, return, false, ;, }, return, scope, ., isDeclared, (, qName, ,, true, ), ;, }, private]
[), {, return, false, ;, }, return, scope, ., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference]
[;, }, return, scope, ., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, )]
[;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !, n, ., isGetProp, (, ), ), {]
[., isDeclared, (, qName, ,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !]
[,, true, ), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !, n, ., isGetProp, (]
[), ;, }, private, boolean, isPrototypeNameReference, (, Node, n, ), {, if, (, !, n, ., isGetProp, (, ), )]
[), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (]
[., isGetProp, (, ), ), {, return, false, ;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, )]
[;, }, JSType, type, =, getType, (, n, ., getFirstChild, (, ), ), ;, if, (, type, ., isUnknownType, (]
[;, if, (, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }]
[), ;, if, (, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;]
[., getFirstChild, (, ), ), ;, if, (, type, ., isUnknownType, (, ), ||, type, ., isUnionType, (, ), )]
[), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||, type, ., autoboxesTo, (, ), !=]
[||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||]
[., isUnknownType, (, ), ||, type, ., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, .]
[), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||, type, ., autoboxesTo, (, ), !=]
[., isUnionType, (, ), ), {, return, false, ;, }, return, (, type, ., isInstanceType, (, ), ||, type, .]
[;, }, return, (, type, ., isInstanceType, (, ), ||, type, ., autoboxesTo, (, ), !=, null, ), ;, }]
[;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType, type, ,, Node, n, ,, Node, parent]
[), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType, type, ,, Node, n, ,, Node]
[||, type, ., autoboxesTo, (, ), !=, null, ), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name]
[., isInstanceType, (, ), ||, type, ., autoboxesTo, (, ), !=, null, ), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal]
[), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType, type, ,, Node, n, ,, Node]
[!=, null, ), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType, type, ,, Node, n]
[., autoboxesTo, (, ), !=, null, ), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType]
[), ;, }, private, Name, recordStaticNameDefinition, (, NodeTraversal, t, ,, String, name, ,, JSType, type, ,, Node, n, ,, Node]
[), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType]
[!=, graph, ., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name]
[), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType]
[., MAIN, ), {, }, if, (, type, ., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type]
[), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent, ,, parent, ., getParent]
[., isConstructor, (, ), ), {, return, recordClassConstructorOrInterface, (, name, ,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent]
[;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType, (]
[,, type, ., toMaybeFunctionType, (, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;]
[,, n, ,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =]
[., toMaybeFunctionType, (, ), ,, n, ,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else]
[,, parent, ,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, .]
[,, parent, ., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (]
[,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol]
[., getParent, (, ), ,, rValue, ), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,]
[), ;, }, else, {, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType]
[;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration]
[., defineNameIfNotExists, (, name, ,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign]
[,, isExtern, ), ;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {]
[), ;, symbol, ., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, .]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[., setType, (, type, ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n]
[), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else]
[), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }]
[., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (]
[;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, return, symbol, ;, }, }, private, Name, recordPrototypePropDefinition]
[., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, return, symbol, ;]
[), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, return, symbol, ;, }, }, private, Name]
[;, }, return, symbol, ;, }, }, private, Name, recordPrototypePropDefinition, (, NodeTraversal, t, ,, Node, qName, ,, JSType, type, ,]
[., addFunctionDeclaration, (, n, ), ;, }, return, symbol, ;, }, }, private, Name, recordPrototypePropDefinition, (, NodeTraversal, t, ,, Node]
[), ;, }, return, symbol, ;, }, }, private, Name, recordPrototypePropDefinition, (, NodeTraversal, t, ,, Node, qName, ,, JSType, type]
[;, }, }, private, Name, recordPrototypePropDefinition, (, NodeTraversal, t, ,, Node, qName, ,, JSType, type, ,, @, Nullable, Node, assign]
[;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, ., isConstructor]
[), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, .]
[., getPrototypeClassName, (, qName, ), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor]
[), ), ;, FunctionType, classType, =, null, ;, String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor]
[;, String, className, =, null, ;, if, (, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {, classType]
[;, if, (, constructor, !=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (]
[), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else]
[&&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, .]
[!=, null, &&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =]
[&&, constructor, ., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, .]
[), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else]
[., isConstructor, (, ), ), {, classType, =, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (]
[=, constructor, ., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =]
[;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), .]
[., toMaybeFunctionType, (, ), ;, className, =, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, .]
[=, classType, ., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (]
[;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className]
[., getReferenceName, (, ), ;, }, else, {, classType, =, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, .]
[=, compiler, ., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (]
[;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType]
[., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, )]
[., getTypeRegistry, (, ), ., getNativeFunctionType, (, JSTypeNative, ., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, )]
[), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,]
[., U2U_CONSTRUCTOR_TYPE, ), ;, className, =, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (]
[=, NodeUtil, ., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null]
[;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =]
[., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null, )]
[., getPrototypeClassName, (, qName, ), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null]
[), ., getQualifiedName, (, ), ;, }, recordClassConstructorOrInterface, (, className, ,, classType, ,, null, ,, null, ,, null, ,, null]
[;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, .]
[,, classType, ,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil]
[,, null, ,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName]
[,, null, ,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName]
[,, null, ,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;]
[,, null, ), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp]
[), ;, String, qNameStr, =, className, +, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph]
[;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node."]
[+, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;]
[+, ".prototype.", +, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern]
[+, NodeUtil, ., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;]
[;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node."]
[., getPrototypePropertyName, (, qName, ), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, .]
[), ;, Name, prototypeProp, =, graph, ., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,]
[;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp]
[., defineNameIfNotExists, (, qNameStr, ,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if]
[,, isExtern, ), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null]
[), ;, Preconditions, ., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {]
[;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (]
[., checkNotNull, (, prototypeProp, ,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration]
[,, "%s should be in the name graph as a node.", ,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;]
[,, qNameStr, ), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp]
[), ;, if, (, assign, !=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType]
[), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (, type, ), ;, return, prototypeProp, ;]
[!=, null, ), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (, type, ), ;, return]
[), {, prototypeProp, ., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (, type, ), ;, return, prototypeProp, ;]
[;, }, prototypeProp, ., setType, (, type, ), ;, return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,]
[., addAssignmentDeclaration, (, assign, ), ;, }, prototypeProp, ., setType, (, type, ), ;, return, prototypeProp, ;, }, private, Reference]
[), ;, }, prototypeProp, ., setType, (, type, ), ;, return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t]
[;, return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[., setType, (, type, ), ;, return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, return, prototypeProp, ;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, private, Reference, recordStaticNameUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isExtern, )]
[), {, return, null, ;, }, else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name]
[;, }, else, {, Reference, reference, =, new, Reference, (, n, ,, parent, ), ;, Name, name, =, graph, .]
[;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType]
[,, parent, ), ;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;]
[), ;, Name, name, =, graph, ., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, .]
[;, name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference]
[., defineNameIfNotExists, (, n, ., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (, getType, (, n, )]
[,, isExtern, ), ;, name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (]
[., getQualifiedName, (, ), ,, isExtern, ), ;, name, ., setType, (, getType, (, n, ), ), ;, graph, .]
[), ;, name, ., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,]
[;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name, ), ;, return, reference, ;, }, }, private]
[., setType, (, getType, (, n, ), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name]
[), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name, ), ;, return, reference, ;, }, }]
[), ), ;, graph, ., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name, ), ;, return, reference, ;, }]
[;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., connect, (, getNamedContainingFunction, (, ), ,, reference, ,, name, ), ;, return, reference, ;, }, }, private, void, recordPrototypePropUse]
[,, reference, ,, name, ), ;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n]
[,, name, ), ;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, return, reference, ;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[;, }, }, private, void, recordPrototypePropUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Preconditions, ., checkArgument]
[;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType]
[., checkArgument, (, n, ., isGetProp, (, ), ), ;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType]
[), ;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType]
[., isGetProp, (, ), ), ;, Node, instance, =, n, ., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (]
[;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =]
[., getFirstChild, (, ), ;, JSType, instanceType, =, getType, (, instance, ), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (]
[;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;]
[), ;, JSType, boxedType, =, instanceType, ., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType]
[;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;]
[., autoboxesTo, (, ), ;, instanceType, =, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, .]
[=, boxedType, !=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, .]
[;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if]
[?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=]
[!=, null, ?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (]
[?, boxedType, :, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=]
[:, instanceType, ;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, )]
[;, ObjectType, objType, =, instanceType, ., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if]
[;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =, new]
[., toObjectType, (, ), ;, Preconditions, ., checkState, (, objType, !=, null, ), ;, if, (, !, isExtern, ), {]
[;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor]
[., checkState, (, objType, !=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (]
[), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType]
[!=, null, ), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, )]
[), ;, if, (, !, isExtern, ), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType]
[), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (]
[), {, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (]
[;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName, =]
[,, parent, ), ;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {]
[), ;, FunctionType, constructor, =, objType, ., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName]
[;, if, (, constructor, !=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, )]
[., getConstructor, (, ), ;, if, (, constructor, !=, null, ), {, String, propName, =, n, ., getLastChild, (, )]
[), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !, constructor, .]
[!=, null, ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !, constructor, .]
[;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,]
[., getString, (, ), ;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, !, constructor, ., getPrototype, (, ), ., hasOwnProperty, (]
[), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, )]
[), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, )]
[., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor]
[., getPrototype, (, ), ., hasOwnProperty, (, propName, ), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;]
[), ), {, recordSuperClassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref]
[;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,]
[,, propName, ,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse]
[,, ref, ), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t]
[), ;, }, recordSubclassPrototypePropUse, (, constructor, ,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,, n]
[;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, }, }, private, void, recordSuperClassPrototypePropUse, (]
[,, propName, ,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, }]
[,, ref, ), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, }, }, private]
[), ;, }, else, {, recordUnknownUse, (, t, ,, n, ,, parent, ), ;, }, }, }, private, void, recordSuperClassPrototypePropUse]
[;, }, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType, superClass]
[,, n, ,, parent, ), ;, }, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference]
[,, parent, ), ;, }, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, )]
[), ;, }, }, }, private, void, recordSuperClassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, FunctionType]
[;, while, (, superClass, !=, null, ), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, )]
[., getSuperClassConstructor, (, ), ;, while, (, superClass, !=, null, ), {, if, (, superClass, ., getPrototype, (, ), .]
[), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (]
[!=, null, ), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, .]
[), {, if, (, superClass, ., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (]
[), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (]
[., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists]
[., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref]
[), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName]
[;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;, }, }, }, private, void, recordSubclassPrototypePropUse]
[., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype."]
[,, ref, ,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), )]
[,, graph, ., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return]
[), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;, }, }, }, private, void]
[., defineNameIfNotExists, (, superClass, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }]
[,, false, ), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;, }, }]
[+, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;]
[+, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (]
[., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =]
[+, prop, ,, false, ), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;]
[,, false, ), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;, }, }]
[), ), ;, return, ;, }, else, {, superClass, =, superClass, ., getSuperClassConstructor, (, ), ;, }, }, }, private]
[=, superClass, ., getSuperClassConstructor, (, ), ;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,]
[;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref, ), {, if, (]
[., getSuperClassConstructor, (, ), ;, }, }, }, private, void, recordSubclassPrototypePropUse, (, FunctionType, classType, ,, String, prop, ,, Reference, ref]
[), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (]
[., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists]
[., getPrototype, (, ), ., hasOwnProperty, (, prop, ), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref]
[), ), {, graph, ., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName]
[;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :, classType, .]
[., connect, (, getNamedContainingFunction, (, ), ,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype."]
[,, ref, ,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), )]
[,, graph, ., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }]
[), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :, classType]
[., defineNameIfNotExists, (, classType, ., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (]
[,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType]
[+, prop, ,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for]
[+, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, )]
[., getReferenceName, (, ), +, ".prototype.", +, prop, ,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (]
[+, prop, ,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for]
[,, false, ), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType]
[), ), ;, }, if, (, classType, ., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :]
[), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,, prop, ,]
[!=, null, ), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,]
[., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {]
[), {, for, (, FunctionType, subclass, :, classType, ., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,, prop, ,]
[), {, recordSubclassPrototypePropUse, (, subclass, ,, prop, ,, ref, ), ;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t]
[., getSubTypes, (, ), ), {, recordSubclassPrototypePropUse, (, subclass, ,, prop, ,, ref, ), ;, }, }, }, private, void]
[;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, prop, ,, ref, ), ;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, ref, ), ;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, }, }, private, void, recordUnknownUse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, return, ;, }, else, {, Preconditions, ., checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref]
[;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse]
[., checkArgument, (, n, ., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,, parent, )]
[), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown, (, true, ), ;]
[., isGetProp, (, ), ), ;, Reference, ref, =, new, Reference, (, n, ,, parent, ), ;, ref, ., setUnknown]
[;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (]
[,, parent, ), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, )]
[), ;, ref, ., setUnknown, (, true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString]
[;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction, (]
[., setUnknown, (, true, ), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,]
[), ;, unknownNameUse, ., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction]
[;, }, }, private, Name, recordClassConstructorOrInterface, (, String, name, ,, FunctionType, type, ,, @, Nullable, Node, n, ,, @, Nullable]
[., put, (, n, ., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction, (, ), ,]
[,, new, NameUse, (, getNamedContainingFunction, (, ), ,, ref, ), ), ;, }, }, private, Name, recordClassConstructorOrInterface, (, String, name]
[., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction, (, ), ,, ref, ), ), ;, }, }, private, Name]
[., getLastChild, (, ), ., getString, (, ), ,, new, NameUse, (, getNamedContainingFunction, (, ), ,, ref, ), ), ;]
[), ;, }, }, private, Name, recordClassConstructorOrInterface, (, String, name, ,, FunctionType, type, ,, @, Nullable, Node, n, ,, @]
[,, ref, ), ), ;, }, }, private, Name, recordClassConstructorOrInterface, (, String, name, ,, FunctionType, type, ,, @, Nullable, Node]
[), ), ;, }, }, private, Name, recordClassConstructorOrInterface, (, String, name, ,, FunctionType, type, ,, @, Nullable, Node, n, ,]
[;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {]
[., checkArgument, (, type, ., isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =, graph]
[), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, )]
[||, type, ., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;]
[., isConstructor, (, ), ||, type, ., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name]
[), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, )]
[., isInterface, (, ), ), ;, Name, symbol, =, graph, ., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (]
[;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (]
[., defineNameIfNotExists, (, name, ,, isExtern, ), ;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType]
[,, isExtern, ), ;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), )]
[), ;, if, (, rhs, !=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if]
[), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), )]
[!=, null, ), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (]
[), {, symbol, ., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), )]
[;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {]
[., setType, (, getType, (, rhs, ), ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, .]
[), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else]
[), ), ;, if, (, n, ., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }]
[), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }]
[., isAssign, (, ), ), {, symbol, ., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (]
[;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype, =, type, ., getPrototype, (]
[., addAssignmentDeclaration, (, n, ), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype]
[), ;, }, else, {, symbol, ., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype, =, type, ., getPrototype]
[;, }, }, ObjectType, prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames]
[., addFunctionDeclaration, (, n, ), ;, }, }, ObjectType, prototype, =, type, ., getPrototype, (, ), ;, for, (, String]
[), ;, }, }, ObjectType, prototype, =, type, ., getPrototype, (, ), ;, for, (, String, prop, :, prototype, .]
[;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype."]
[., getPrototype, (, ), ;, for, (, String, prop, :, prototype, ., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists]
[), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype.", +, prop, ,, isExtern, ), ;, }, return, symbol, ;, }]
[., getOwnPropertyNames, (, ), ), {, graph, ., defineNameIfNotExists, (, name, +, ".prototype.", +, prop, ,, isExtern, ), ;, }]
[;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <, Name, ,, Reference]
[., defineNameIfNotExists, (, name, +, ".prototype.", +, prop, ,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void]
[,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <]
[+, prop, ,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (]
[+, ".prototype.", +, prop, ,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {]
[+, prop, ,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (]
[,, isExtern, ), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <]
[), ;, }, return, symbol, ;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <, Name, ,]
[;, }, }, private, void, connectUnknowns, (, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :, graph]
[), {, Name, name, =, node, ., getValue, (, ), ;, String, propName, =, name, ., getPropertyName, (, ), ;]
[., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, String, propName, =, name, .]
[;, String, propName, =, name, ., getPropertyName, (, ), ;, if, (, propName, ==, null, ), {, continue, ;, }]
[., getValue, (, ), ;, String, propName, =, name, ., getPropertyName, (, ), ;, if, (, propName, ==, null, )]
[;, if, (, propName, ==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get]
[., getPropertyName, (, ), ;, if, (, propName, ==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses]
[), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;, if, (]
[==, null, ), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;]
[), {, continue, ;, }, Collection, <, NameUse, >, uses, =, unknownNameUse, ., get, (, propName, ), ;, if, (]
[;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (]
[., get, (, propName, ), ;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, )]
[), ;, if, (, uses, !=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect]
[), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,, use, .]
[!=, null, ), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,]
[), {, for, (, NameUse, use, :, uses, ), {, graph, ., connect, (, use, ., name, ,, use, .]
[), {, graph, ., connect, (, use, ., name, ,, use, ., reference, ,, name, ), ;, }, }, }]
[;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type, =, n, ., getJSType, (]
[., connect, (, use, ., name, ,, use, ., reference, ,, name, ), ;, }, }, }, }, private, JSType]
[,, use, ., reference, ,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {]
[., name, ,, use, ., reference, ,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n]
[,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type, =, n]
[., reference, ,, name, ), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type]
[), ;, }, }, }, }, private, JSType, getType, (, Node, n, ), {, JSType, type, =, n, ., getJSType]
[;, if, (, type, ==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;]
[., getJSType, (, ), ;, if, (, type, ==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException]
[), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return, compiler, .]
[==, null, ), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return]
[), {, if, (, CONSERVATIVE, ), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return, compiler, .]
[), {, throw, new, RuntimeException, (, "Type system failed us :(", ), ;, }, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType]
[;, }, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, }]
[), ;, }, else, {, return, compiler, ., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }]
[;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void]
[., getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, )]
[), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {]
[., UNKNOWN_TYPE, ), ;, }, }, return, type, ., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode]
[;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack, ., add, (, functionNode, ), ;, }, private, void]
[., restrictByNotNullOrUndefined, (, ), ;, }, private, void, pushContainingFunction, (, Name, functionNode, ), {, currentFunctionStack, ., add, (, functionNode, )]
[;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (, currentFunctionStack, ., size, (, ), -, 1, )]
[., add, (, functionNode, ), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (, currentFunctionStack, ., size]
[), ;, }, private, void, popContainingFunction, (, ), {, currentFunctionStack, ., remove, (, currentFunctionStack, ., size, (, ), -, 1]
[;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos, =]
[., remove, (, currentFunctionStack, ., size, (, ), -, 1, ), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name]
[), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos]
[-, 1, ), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for]
[., size, (, ), -, 1, ), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;]
[), ;, }, private, Name, getNamedContainingFunction, (, ), {, Name, containingFn, =, null, ;, int, pos, ;, for, (, pos]
[;, int, pos, ;, for, (, pos, =, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;]
[=, currentFunctionStack, ., size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {]
[;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos]
[-, 1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get]
[., size, (, ), -, 1, ;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf]
[;, pos, >=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos]
[;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (]
[>=, 0, ;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;]
[;, pos, =, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (]
[=, pos, -, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=]
[), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, )]
[-, 1, ), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=, graph, .]
[), {, Name, cf, =, currentFunctionStack, ., get, (, pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, )]
[;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, .]
[., get, (, pos, ), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break]
[), ;, if, (, cf, !=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions]
[), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return, containingFn, ;]
[!=, graph, ., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, )]
[), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return, containingFn, ;]
[., UNKNOWN, ), {, containingFn, =, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return]
[=, cf, ;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return, containingFn, ;, }, private, static]
[;, break, ;, }, }, Preconditions, ., checkNotNull, (, containingFn, ), ;, return, containingFn, ;, }, private, static, class, NameUse]
[;, return, containingFn, ;, }, private, static, class, NameUse, {, private, final, Name, name, ;, private, final, Reference, reference, ;]
[., checkNotNull, (, containingFn, ), ;, return, containingFn, ;, }, private, static, class, NameUse, {, private, final, Name, name, ;]
[), ;, return, containingFn, ;, }, private, static, class, NameUse, {, private, final, Name, name, ;, private, final, Reference, reference]
[;, }, private, static, class, NameUse, {, private, final, Name, name, ;, private, final, Reference, reference, ;, private, NameUse, (]
[=, name, ;, this, ., reference, =, reference, ;, }, }, }]
[., name, =, name, ;, this, ., reference, =, reference, ;, }, }, }]
[;, this, ., reference, =, reference, ;, }, }, }]
[=, reference, ;, }, }, }]
[., reference, =, reference, ;, }, }, }]
[;, }, }, }]
