[SourceExcerptProvider, ., SourceExcerpt, ;, public, class, LightweightMessageFormatter, extends, AbstractMessageFormatter, {, private, SourceExcerpt, excerpt, ;, private, static, final, ExcerptFormatter, excerptFormatter, =]
[excerpt, ;, private, static, final, ExcerptFormatter, excerptFormatter, =, new, LineNumberingFormatter, (, ), ;, private, LightweightMessageFormatter, (, ), {, super, (]
[static, final, ExcerptFormatter, excerptFormatter, =, new, LineNumberingFormatter, (, ), ;, private, LightweightMessageFormatter, (, ), {, super, (, null, ), ;]
[static, final, ExcerptFormatter, excerptFormatter, =, new, LineNumberingFormatter, (, ), ;, private, LightweightMessageFormatter, (, ), {, super, (, null, ), ;]
[=, new, LineNumberingFormatter, (, ), ;, private, LightweightMessageFormatter, (, ), {, super, (, null, ), ;, this, ., excerpt, =]
[(, null, ), ;, this, ., excerpt, =, LINE, ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (]
[), ;, this, ., excerpt, =, LINE, ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ), {, this, (, source, ,]
[this, (, source, ,, LINE, ), ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (]
[,, LINE, ), ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;]
[,, LINE, ), ;, }, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;]
[}, public, LightweightMessageFormatter, (, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;, Preconditions, ., checkNotNull, (]
[(, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;, Preconditions, ., checkNotNull, (, source, ), ;]
[(, SourceExcerptProvider, source, ,, SourceExcerpt, excerpt, ), {, super, (, source, ), ;, Preconditions, ., checkNotNull, (, source, ), ;]
[SourceExcerpt, excerpt, ), {, super, (, source, ), ;, Preconditions, ., checkNotNull, (, source, ), ;, this, ., excerpt, =]
[., checkNotNull, (, source, ), ;, this, ., excerpt, =, excerpt, ;, }, static, LightweightMessageFormatter, withoutSource, (, ), {, return]
[), {, return, new, LightweightMessageFormatter, (, ), ;, }, @, Override, public, String, formatError, (, JSError, error, ), {, return]
[return, new, LightweightMessageFormatter, (, ), ;, }, @, Override, public, String, formatError, (, JSError, error, ), {, return, format, (]
[LightweightMessageFormatter, (, ), ;, }, @, Override, public, String, formatError, (, JSError, error, ), {, return, format, (, error, ,]
[return, format, (, error, ,, false, ), ;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return]
[(, error, ,, false, ), ;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return, format, (]
[,, false, ), ;, }, @, Override, public, String, formatWarning, (, JSError, warning, ), {, return, format, (, warning, ,]
[warning, ,, true, ), ;, }, private, String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =]
[String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =]
[String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =]
[String, format, (, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =]
[(, JSError, error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =, source, ==]
[error, ,, boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?]
[boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?, null, :]
[boolean, warning, ), {, SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?, null, :]
[SourceExcerptProvider, source, =, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (]
[=, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (, source, ,]
[=, getSource, (, ), ;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (, source, ,]
[;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,]
[;, String, sourceExcerpt, =, source, ==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,]
[source, ==, null, ?, null, :, excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,]
[excerpt, ., get, (, source, ,, error, ., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =]
[., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (]
[., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (]
[., sourceName, ,, error, ., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (]
[., lineNumber, ,, excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=]
[excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {]
[excerptFormatter, ), ;, StringBuilder, b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {]
[b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {, b, ., append, (]
[b, =, new, StringBuilder, (, ), ;, if, (, error, ., sourceName, !=, null, ), {, b, ., append, (]
[if, (, error, ., sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (]
[if, (, error, ., sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (]
[if, (, error, ., sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (]
[sourceName, !=, null, ), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >]
[), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {]
[), {, b, ., append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {]
[append, (, error, ., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (]
[., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;]
[., sourceName, ), ;, if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;]
[if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;, b, ., append, (]
[if, (, error, ., lineNumber, >, 0, ), {, b, ., append, (, ':', ), ;, b, ., append, (]
[0, ), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }]
[0, ), {, b, ., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }]
[., append, (, ':', ), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (]
[), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }]
[), ;, b, ., append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }]
[append, (, error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (]
[error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (]
[error, ., lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (]
[lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?]
[lineNumber, ), ;, }, b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?]
[b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :]
[b, ., append, (, ": ", ), ;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :]
[;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;]
[;, }, b, ., append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;]
[append, (, getLevelName, (, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (]
[(, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;]
[(, warning, ?, CheckLevel, ., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;]
[., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (]
[., WARNING, :, CheckLevel, ., ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (]
[ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;]
[ERROR, ), ), ;, b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;]
[b, ., append, (, " - ", ), ;, b, ., append, (, error, ., description, ), ;, b, ., append, (]
[), ;, b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (]
[), ;, b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (]
[b, ., append, (, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=]
[(, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {]
[(, error, ., description, ), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {]
[), ;, b, ., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (]
[., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;]
[., append, (, '\n', ), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;]
[), ;, if, (, sourceExcerpt, !=, null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (]
[null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno, =]
[null, ), {, b, ., append, (, sourceExcerpt, ), ;, b, ., append, (, '\n', ), ;, int, charno, =]
[), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (]
[), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (]
[), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (]
[), ;, b, ., append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (]
[append, (, '\n', ), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (]
[), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&]
[), ;, int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&]
[int, charno, =, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=]
[=, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&]
[=, error, ., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&]
[., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=]
[., getCharno, (, ), ;, if, (, excerpt, ., equals, (, LINE, ), &&, 0, <=, charno, &&, charno, <=]
[), &&, 0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =]
[0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;]
[0, <=, charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;]
[charno, &&, charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <]
[charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno, ;]
[charno, <=, sourceExcerpt, ., length, (, ), ), {, for, (, int, i, =, 0, ;, i, <, charno, ;]
[), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =]
[), {, for, (, int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =]
[int, i, =, 0, ;, i, <, charno, ;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (]
[i, <, charno, ;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (]
[i, <, charno, ;, i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (]
[i, ++, ), {, char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (]
[char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {]
[char, c, =, sourceExcerpt, ., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {]
[., charAt, (, i, ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (]
[if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }, else, {]
[if, (, Character, ., isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }, else, {]
[isWhitespace, (, c, ), ), {, b, ., append, (, c, ), ;, }, else, {, b, ., append, (]
[{, b, ., append, (, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;, }, }]
[{, b, ., append, (, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;, }, }]
[(, c, ), ;, }, else, {, b, ., append, (, ' ', ), ;, }, }, b, ., append, (]
[{, b, ., append, (, ' ', ), ;, }, }, b, ., append, (, "^\n", ), ;, }, }, return]
[{, b, ., append, (, ' ', ), ;, }, }, b, ., append, (, "^\n", ), ;, }, }, return]
[static, class, LineNumberingFormatter, implements, ExcerptFormatter, {, @, Override, public, String, formatLine, (, String, line, ,, int, lineNumber, ), {, return]
[int, lineNumber, ), {, return, line, ;, }, @, Override, public, String, formatRegion, (, Region, region, ), {, if, (]
[int, lineNumber, ), {, return, line, ;, }, @, Override, public, String, formatRegion, (, Region, region, ), {, if, (]
[), {, return, line, ;, }, @, Override, public, String, formatRegion, (, Region, region, ), {, if, (, region, ==]
[;, }, @, Override, public, String, formatRegion, (, Region, region, ), {, if, (, region, ==, null, ), {, return]
[formatRegion, (, Region, region, ), {, if, (, region, ==, null, ), {, return, null, ;, }, String, code, =]
[formatRegion, (, Region, region, ), {, if, (, region, ==, null, ), {, return, null, ;, }, String, code, =]
[region, ==, null, ), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (]
[region, ==, null, ), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (]
[region, ==, null, ), {, return, null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (]
[null, ;, }, String, code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code, ., length, (, ), ==]
[code, =, region, ., getSourceExcerpt, (, ), ;, if, (, code, ., length, (, ), ==, 0, ), {, return]
[), ;, if, (, code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =]
[), ;, if, (, code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =]
[), ;, if, (, code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =]
[code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (]
[code, ., length, (, ), ==, 0, ), {, return, null, ;, }, int, numberLength, =, Integer, ., toString, (]
[numberLength, =, Integer, ., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =]
[., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (]
[., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (]
[., toString, (, region, ., getEndingLineNumber, (, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (]
[(, ), ), ., length, (, ), ;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (, ), *]
[), ;, StringBuilder, builder, =, new, StringBuilder, (, code, ., length, (, ), *, 2, ), ;, int, start, =]
[new, StringBuilder, (, code, ., length, (, ), *, 2, ), ;, int, start, =, 0, ;, int, end, =]
[new, StringBuilder, (, code, ., length, (, ), *, 2, ), ;, int, start, =, 0, ;, int, end, =]
[., length, (, ), *, 2, ), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (]
[(, ), *, 2, ), ;, int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,]
[int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =]
[int, start, =, 0, ;, int, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =]
[code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (]
[code, ., indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (]
[indexOf, (, '\n', ,, start, ), ;, int, lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=]
[lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line, ;, if, (]
[lineNumber, =, region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line, ;, if, (]
[region, ., getBeginningLineNumber, (, ), ;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <]
[(, ), ;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {]
[;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {, line, =]
[;, while, (, start, >=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {, line, =]
[>=, 0, ), {, String, line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (]
[line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (, start, ), ;, if, (]
[line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (, start, ), ;, if, (]
[line, ;, if, (, end, <, 0, ), {, line, =, code, ., substring, (, start, ), ;, if, (]
[0, ), {, line, =, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==]
[=, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0, ), {, return]
[=, code, ., substring, (, start, ), ;, if, (, line, ., length, (, ), ==, 0, ), {, return]
[(, start, ), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (]
[), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,]
[), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,]
[), ;, if, (, line, ., length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,]
[length, (, ), ==, 0, ), {, return, builder, ., substring, (, 0, ,, builder, ., length, (, ), -]
[return, builder, ., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {]
[., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {, line, =]
[., substring, (, 0, ,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {, line, =]
[,, builder, ., length, (, ), -, 1, ), ;, }, }, else, {, line, =, code, ., substring, (]
[., length, (, ), -, 1, ), ;, }, }, else, {, line, =, code, ., substring, (, start, ,]
[-, 1, ), ;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }]
[-, 1, ), ;, }, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }]
[}, }, else, {, line, =, code, ., substring, (, start, ,, end, ), ;, }, builder, ., append, (]
[code, ., substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =]
[code, ., substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =]
[substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -]
[substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -]
[substring, (, start, ,, end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -]
[end, ), ;, }, builder, ., append, (, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (]
[(, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;]
[(, "  ", ), ;, int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;]
[int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (]
[int, spaces, =, numberLength, -, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (]
[-, Integer, ., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (]
[., toString, (, lineNumber, ), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,]
[), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;]
[), ., length, (, ), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;]
[), ;, builder, ., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (]
[., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;]
[., append, (, Strings, ., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;]
[., repeat, (, " ", ,, spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (]
[spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (]
[spaces, ), ), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (]
[), ;, builder, ., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <]
[., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {]
[., append, (, lineNumber, ), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {]
[), ;, builder, ., append, (, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (]
[., append, (, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;]
[(, "| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =]
["| ", ), ;, if, (, end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =, -]
[end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {]
[end, <, 0, ), {, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {]
[{, builder, ., append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append, (]
[append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;]
[append, (, line, ), ;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;]
[;, start, =, -, 1, ;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (]
[-, 1, ;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;]
[;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =]
[;, }, else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =]
[else, {, builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =, end, +]
[builder, ., append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;]
[append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =]
[append, (, line, ), ;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =]
[;, builder, ., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (]
[., append, (, '\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,]
['\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;]
['\n', ), ;, start, =, end, +, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;]
[+, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return]
[+, 1, ;, end, =, code, ., indexOf, (, '\n', ,, start, ), ;, lineNumber, ++, ;, }, }, return]
