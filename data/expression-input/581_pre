[., IOException, ;, import, java, ., io, ., Writer, ;, public, class, FormatUtils, {, private, static, final, double, LOG_10, =]
[., IOException, ;, import, java, ., io, ., Writer, ;, public, class, FormatUtils, {, private, static, final, double, LOG_10, =]
[java, ., io, ., Writer, ;, public, class, FormatUtils, {, private, static, final, double, LOG_10, =, Math, ., log, (]
[), {, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size, ), {, if, (]
[), {, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size, ), {, if, (]
[}, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size, ), {, if, (, value, <]
[void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size, ), {, if, (, value, <, 0, ), {]
[void, appendPaddedInteger, (, StringBuffer, buf, ,, int, value, ,, int, size, ), {, if, (, value, <, 0, ), {]
[buf, ,, int, value, ,, int, size, ), {, if, (, value, <, 0, ), {, buf, ., append, (]
[int, size, ), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[int, size, ), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[{, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -]
[if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {]
[value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, buf, ., append, (]
[{, for, (, ;, size, >, 10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[{, for, (, ;, size, >, 10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[size, >, 10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[size, >, 10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[10, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -, (, long, )]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, "", +, -, (, long, )]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[(, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <]
[), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;]
[), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;]
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[}, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {]
[}, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {]
[value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (]
[{, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[{, for, (, ;, size, >, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[size, >, 1, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, )]
[size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (]
[size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (]
[), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, (, char, ), (, value, +]
[;, }, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[;, }, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (, value, <]
[), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;]
[), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;]
[value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >]
['0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;]
['0', ), ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;]
[}, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {]
[}, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {]
[value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {, buf, ., append, (]
[;, size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =]
[;, size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =]
[size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (]
[size, >, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (]
[>, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (]
[>, 2, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (]
[;, size, --, ), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +]
[), {, buf, ., append, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *]
[append, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >]
['0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
['0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (]
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, )]
[(, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (]
[(, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (]
[+, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +]
[13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;]
[13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;]
[27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (]
[., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, )]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[(, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -]
[char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (]
[char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (]
[(, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<]
['0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<]
[append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (]
[), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (]
[(, d, <<, 1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <]
[1, ), +, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {]
[+, '0', ), ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (]
[else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (]
[int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <]
[if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {]
[value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =]
[digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {]
[3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =]
[3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =]
[else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, )]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (]
[digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;]
[), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >]
[Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;]
[Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;]
[value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {]
[value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {]
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (]
[}, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[}, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Integer, ., toString, (]
[}, }, public, static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,, int, size, ), {, int, intValue, =]
[static, void, appendPaddedInteger, (, StringBuffer, buf, ,, long, value, ,, int, size, ), {, int, intValue, =, (, int, )]
[StringBuffer, buf, ,, long, value, ,, int, size, ), {, int, intValue, =, (, int, ), value, ;, if, (]
[StringBuffer, buf, ,, long, value, ,, int, size, ), {, int, intValue, =, (, int, ), value, ;, if, (]
[,, long, value, ,, int, size, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==]
[,, int, size, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {]
[size, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, appendPaddedInteger, (]
[{, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,]
[intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,]
[if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (]
[if, (, intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (]
[intValue, ==, value, ), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=]
[), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[), {, appendPaddedInteger, (, buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (]
[buf, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (]
[size, ), ;, }, else, if, (, size, <=, 19, ), {, buf, ., append, (, Long, ., toString, (]
[19, ), {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (]
[19, ), {, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (]
[{, buf, ., append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <]
[append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {]
[append, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {]
[toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (]
[;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[;, }, else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[else, {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[{, buf, ., append, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -]
[if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >]
[Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;]
[Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {]
[value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, buf, ., append, (]
[{, for, (, ;, size, >, 19, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[{, for, (, ;, size, >, 19, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[size, >, 19, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =]
[append, (, '0', ), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =]
[), ;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, )]
[;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[;, }, buf, ., append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[append, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (]
[), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;]
[int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >]
[(, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;]
[(, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;]
[(, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {]
[(, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {]
[LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }]
[size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[size, >, digits, ;, size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (]
[size, --, ), {, buf, ., append, (, '0', ), ;, }, buf, ., append, (, Long, ., toString, (]
[}, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {, if, (]
[}, public, static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {, if, (]
[static, void, writePaddedInteger, (, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {, if, (, value, <]
[(, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {, if, (, value, <, 0, ), {]
[(, Writer, out, ,, int, value, ,, int, size, ), throws, IOException, {, if, (, value, <, 0, ), {]
[int, value, ,, int, size, ), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (]
[), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[{, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -]
[if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {]
[value, ;, }, else, {, for, (, ;, size, >, 10, ;, size, --, ), {, out, ., write, (]
[{, for, (, ;, size, >, 10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[{, for, (, ;, size, >, 10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[size, >, 10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, >, 10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[10, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -, (, long, )]
[), {, out, ., write, (, '0', ), ;, }, out, ., write, (, "", +, -, (, long, )]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[(, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <]
[), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;]
[), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;]
[., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;]
[}, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {]
[}, }, if, (, value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {]
[value, <, 10, ), {, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (]
[{, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[{, for, (, ;, size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, >, 1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[1, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, value, +]
[., write, (, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (]
[., write, (, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (]
[(, '0', ), ;, }, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;]
[(, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >]
[+, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;]
[+, '0', ), ;, }, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;]
[}, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {]
[}, else, if, (, value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {]
[value, <, 100, ), {, for, (, ;, size, >, 2, ;, size, --, ), {, out, ., write, (]
[;, size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =]
[;, size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =]
[size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (]
[size, >, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (]
[>, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (]
[>, 2, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (]
[;, size, --, ), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +]
[), {, out, ., write, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *]
[write, (, '0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >]
['0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
['0', ), ;, }, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (]
[=, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +]
[value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;]
[value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<]
[., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -]
[write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (]
[write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (]
[d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (]
[3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (]
[-, (, d, <<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <]
[<<, 1, ), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {]
[), +, '0', ), ;, }, else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =]
[else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (]
[else, {, int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (]
[int, digits, ;, if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <]
[if, (, value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {]
[value, <, 1000, ), {, digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =]
[digits, =, 3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {]
[3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =]
[3, ;, }, else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =]
[else, if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, )]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[if, (, value, <, 10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (]
[10000, ), {, digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (]
[digits, =, 4, ;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, }, else, {, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;]
[(, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;]
[), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >]
[Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;]
[Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;]
[value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {]
[value, ), /, LOG_10, ), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {]
[), +, 1, ;, }, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (]
[}, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[}, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Integer, ., toString, (]
[public, static, void, writePaddedInteger, (, Writer, out, ,, long, value, ,, int, size, ), throws, IOException, {, int, intValue, =]
[writePaddedInteger, (, Writer, out, ,, long, value, ,, int, size, ), throws, IOException, {, int, intValue, =, (, int, )]
[,, long, value, ,, int, size, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (]
[,, long, value, ,, int, size, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (]
[value, ,, int, size, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==]
[size, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {]
[throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, writePaddedInteger, (]
[{, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,]
[intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,]
[if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (]
[if, (, intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (]
[intValue, ==, value, ), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=]
[), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[), {, writePaddedInteger, (, out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {]
[out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (]
[out, ,, intValue, ,, size, ), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (]
[size, ), ;, }, else, if, (, size, <=, 19, ), {, out, ., write, (, Long, ., toString, (]
[19, ), {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (]
[19, ), {, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (]
[{, out, ., write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <]
[write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {]
[write, (, Long, ., toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {]
[toString, (, value, ), ), ;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (]
[;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[;, }, else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[else, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =]
[{, out, ., write, (, '-', ), ;, if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -]
[if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[if, (, value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;]
[value, !=, Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >]
[Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;]
[Long, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {]
[{, value, =, -, value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {]
[value, ;, }, else, {, for, (, ;, size, >, 19, ;, size, --, ), {, out, ., write, (]
[{, for, (, ;, size, >, 19, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[{, for, (, ;, size, >, 19, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[size, >, 19, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =]
[write, (, '0', ), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =]
[), ;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, )]
[;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[;, }, out, ., write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (]
[write, (, "9223372036854775808", ), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (]
[), ;, return, ;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /]
[;, }, }, int, digits, =, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;]
[=, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;]
[int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >]
[(, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;]
[(, Math, ., log, (, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;]
[(, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {]
[(, value, ), /, LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {]
[LOG_10, ), +, 1, ;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[;, for, (, ;, size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }]
[size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, >, digits, ;, size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (]
[size, --, ), {, out, ., write, (, '0', ), ;, }, out, ., write, (, Long, ., toString, (]
[value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (]
[value, ), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (]
[), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <]
[}, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <, 0, ), {]
[}, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <, 0, ), {]
[appendUnpaddedInteger, (, StringBuffer, buf, ,, int, value, ), {, if, (, value, <, 0, ), {, buf, ., append, (]
[int, value, ), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[int, value, ), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (]
[), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[), {, if, (, value, <, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[{, buf, ., append, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -]
['-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {]
['-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {]
[(, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (]
[(, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -]
[), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (, long, )]
[), {, value, =, -, value, ;, }, else, {, buf, ., append, (, "", +, -, (, long, )]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[., append, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[(, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <]
[-, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {]
[-, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {]
[Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (]
[), ;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, )]
[;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, ), (]
[;, return, ;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, ), (]
[;, }, }, if, (, value, <, 10, ), {, buf, ., append, (, (, char, ), (, value, +]
[), {, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[), {, buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (]
[buf, ., append, (, (, char, ), (, value, +, '0', ), ), ;, }, else, if, (, value, <]
[), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =]
[), (, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =]
[(, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (]
[(, value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (]
[value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (]
[value, +, '0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (]
['0', ), ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +]
[;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *]
[(, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (]
[(, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, )]
[(, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (]
[(, value, +, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (]
[+, 1, ), *, 13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +]
[13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;]
[13421772, ), >, >, 27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;]
[27, ;, buf, ., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (]
[., append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, )]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[append, (, (, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (]
[(, char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -]
[char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (]
[char, ), (, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (]
[(, d, +, '0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<]
['0', ), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[), ), ;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (]
[;, buf, ., append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<]
[append, (, (, char, ), (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {]
[-, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {]
[3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (]
[3, ), -, (, d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (]
[d, <<, 1, ), +, '0', ), ), ;, }, else, {, buf, ., append, (, Integer, ., toString, (]
[), ), ;, }, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =]
[}, }, public, static, void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (, int, )]
[void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (, int, ), value, ;, if, (]
[void, appendUnpaddedInteger, (, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (, int, ), value, ;, if, (]
[(, StringBuffer, buf, ,, long, value, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==]
[,, long, value, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {]
[value, ), {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (]
[{, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,]
[), value, ;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {]
[), value, ;, if, (, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {]
[(, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (]
[(, intValue, ==, value, ), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (]
[), {, appendUnpaddedInteger, (, buf, ,, intValue, ), ;, }, else, {, buf, ., append, (, Long, ., toString, (]
[), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (]
[), ;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (]
[}, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (, value, <]
[static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (, value, <, 0, ), {]
[static, void, writeUnpaddedInteger, (, Writer, out, ,, int, value, ), throws, IOException, {, if, (, value, <, 0, ), {]
[Writer, out, ,, int, value, ), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (]
[), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[), throws, IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (]
[IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[IOException, {, if, (, value, <, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=]
[<, 0, ), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {]
[), {, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =]
[{, out, ., write, (, '-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -]
['-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {]
['-', ), ;, if, (, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {]
[(, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (]
[(, value, !=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (]
[!=, Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +]
[Integer, ., MIN_VALUE, ), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -]
[), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -, (, long, )]
[), {, value, =, -, value, ;, }, else, {, out, ., write, (, "", +, -, (, long, )]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[., write, (, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (]
[(, "", +, -, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <]
[-, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {]
[-, (, long, ), Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {]
[Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (]
[Integer, ., MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (]
[MIN_VALUE, ), ;, return, ;, }, }, if, (, value, <, 10, ), {, out, ., write, (, value, +]
[if, (, value, <, 10, ), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (]
[if, (, value, <, 10, ), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (]
[value, <, 10, ), {, out, ., write, (, value, +, '0', ), ;, }, else, if, (, value, <]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =]
[., write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =]
[write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (]
[write, (, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (]
[(, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (]
[(, value, +, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (]
[+, '0', ), ;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +]
[;, }, else, if, (, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *]
[(, value, <, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[<, 100, ), {, int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (]
[int, d, =, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (]
[=, (, (, value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +]
[value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;]
[value, +, 1, ), *, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[*, 13421772, ), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (]
[), >, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[>, >, 27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (]
[27, ;, out, ., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<]
[., write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -]
[write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (]
[write, (, d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (]
[d, +, '0', ), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<]
[), ;, out, ., write, (, value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {]
[value, -, (, d, <<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (]
[<<, 3, ), -, (, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (]
[(, d, <<, 1, ), +, '0', ), ;, }, else, {, out, ., write, (, Integer, ., toString, (]
[;, }, }, public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue, =]
[public, static, void, writeUnpaddedInteger, (, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue, =, (, int, )]
[(, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (]
[(, Writer, out, ,, long, value, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (]
[out, ,, long, value, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==]
[value, ), throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {]
[throws, IOException, {, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (]
[{, int, intValue, =, (, int, ), value, ;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,]
[), value, ;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {]
[), value, ;, if, (, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {]
[(, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (]
[(, intValue, ==, value, ), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (]
[), {, writeUnpaddedInteger, (, out, ,, intValue, ), ;, }, else, {, out, ., write, (, Long, ., toString, (]
[., toString, (, value, ), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (]
[., toString, (, value, ), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (]
[(, value, ), ), ;, }, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <]
[}, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {, if, (]
[}, }, public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {, if, (]
[public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {, if, (, value, !=]
[public, static, int, calculateDigitCount, (, long, value, ), {, if, (, value, <, 0, ), {, if, (, value, !=]
[value, ), {, if, (, value, <, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return]
[value, ), {, if, (, value, <, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return]
[{, if, (, value, <, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (]
[if, (, value, <, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -]
[<, 0, ), {, if, (, value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +]
[value, !=, Long, ., MIN_VALUE, ), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return]
[), {, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return]
[{, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (]
[{, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (]
[{, return, calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (]
[calculateDigitCount, (, -, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <]
[-, value, ), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?]
[), +, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :]
[+, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (]
[+, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (]
[+, 1, ;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (]
[;, }, else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <]
[else, {, return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?]
[return, 20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :]
[20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (]
[20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (]
[20, ;, }, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (]
[}, }, return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <]
[return, (, value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?]
[value, <, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :]
[<, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (]
[<, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (]
[<, 10, ?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (]
[?, 1, :, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <]
[:, (, value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?]
[value, <, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :]
[<, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (]
[<, 100, ?, 2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (]
[2, :, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, )]
[:, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (]
[:, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (]
[:, (, value, <, 1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (]
[1000, ?, 3, :, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (]
[:, (, value, <, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /]
[<, 10000, ?, 4, :, (, (, int, ), (, Math, ., log, (, value, ), /, LOG_10, ), +]
[), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =]
[), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =]
[), ), ), ), ;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =]
[;, }, static, int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (]
[int, parseTwoDigits, (, String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -]
[String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return]
[String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return]
[String, text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return]
[text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (]
[text, ,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (]
[,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (]
[,, int, position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (]
[position, ), {, int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (, value, <<]
[int, value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (, value, <<, 3, ), +]
[value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (]
[value, =, text, ., charAt, (, position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (]
[text, ., charAt, (, position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<]
[position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +]
[position, ), -, '0', ;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +]
[;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (]
[;, return, (, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (]
[(, (, value, <<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +]
[<<, 3, ), +, (, value, <<, 1, ), ), +, text, ., charAt, (, position, +, 1, ), -]
[-, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =]
[-, '0', ;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =]
[;, }, static, String, createErrorMessage, (, final, String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +]
[String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (]
[String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (]
[String, text, ,, final, int, errorPos, ), {, int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (]
[), {, int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=]
[), {, int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=]
[int, sampleLen, =, errorPos, +, 32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +]
[errorPos, +, 32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {]
[32, ;, String, sampleText, ;, if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =]
[if, (, text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {]
[text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =]
[text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =]
[text, ., length, (, ), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =]
[), <=, sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (]
[sampleLen, +, 3, ), {, sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,]
[sampleText, =, text, ;, }, else, {, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (]
[{, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (]
[{, sampleText, =, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (]
[=, text, ., substring, (, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=]
[(, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return]
[(, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return]
[(, 0, ,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return]
[,, sampleLen, ), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +]
[), ., concat, (, "...", ), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +]
[), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (]
[), ;, }, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (]
[}, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=]
[}, if, (, errorPos, <=, 0, ), {, return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=]
[return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return]
[return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return]
[return, "Invalid format: \"", +, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return]
[+, sampleText, +, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +]
[+, '"', ;, }, if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +]
[if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return]
[if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return]
[if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return]
[if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return]
[if, (, errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return]
[errorPos, >=, text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +]
[text, ., length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +]
[length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +]
[length, (, ), ), {, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +]
[{, return, "Invalid format: \"", +, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (]
[+, sampleText, +, "\" is too short", ;, }, return, "Invalid format: \"", +, sampleText, +, "\" is malformed at \"", +, sampleText, ., substring, (, errorPos, ), +]
