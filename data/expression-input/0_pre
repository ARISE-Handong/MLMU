[rhino, ., Node, ;, class, PeepholeSimplifyRegExp, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[rhino, ., Node, ;, class, PeepholeSimplifyRegExp, extends, AbstractPeepholeOptimization, {, @, Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (]
[Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isRegExp, (, ), ), {, String, pattern, =]
[Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isRegExp, (, ), ), {, String, pattern, =]
[Override, Node, optimizeSubtree, (, Node, subtree, ), {, if, (, subtree, ., isRegExp, (, ), ), {, String, pattern, =]
[(, ), ), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[=, subtree, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, subtree, ., getChildCount, (, ), ==, 2, ?]
[flags, =, subtree, ., getChildCount, (, ), ==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (, ), :]
[==, 2, ?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {]
[?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =]
[?, subtree, ., getLastChild, (, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =]
[(, ), ., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (]
[., getString, (, ), :, "", ;, RegExpTree, regexTree, ;, try, {, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,]
[{, regexTree, =, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return]
[RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }]
[parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =]
[parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =]
[flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify, (]
[IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify, (, flags, ), ;, String, literal, =]
[IllegalArgumentException, ex, ), {, return, subtree, ;, }, regexTree, =, regexTree, ., simplify, (, flags, ), ;, String, literal, =]
[=, regexTree, ., simplify, (, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =]
[=, regexTree, ., simplify, (, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =]
[(, flags, ), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (]
[), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,]
[), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,]
[), ;, String, literal, =, regexTree, ., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,]
[., toString, (, ), ;, String, newPattern, =, literal, ., substring, (, 1, ,, literal, ., length, (, ), -]
[newPattern, =, literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =]
[=, literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (]
[=, literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (]
[=, literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (]
[literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (]
[literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (]
[literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (]
[literal, ., substring, (, 1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (]
[1, ,, literal, ., length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (]
[., length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&]
[length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (]
[length, (, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (]
[(, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !]
[(, ), -, 1, ), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !]
[), ;, String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (]
[String, newFlags, =, (, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,]
[(, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||]
[(, (, flags, ., contains, (, "g", ), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||]
[), &&, (, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?]
[(, !, RegExpTree, ., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :]
[., matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +]
[matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (]
[matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (]
[matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (]
[matchesWholeInput, (, regexTree, ,, flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (]
[flags, ), ||, regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (]
[regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&]
[regexTree, ., hasCapturingGroup, (, ), ), ?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&]
[?, "g", :, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?]
[:, "", ), +, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :]
[+, (, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +]
[(, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (]
[(, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (]
[(, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (]
[(, flags, ., contains, (, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (]
[(, "i", ), &&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (]
[&&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&]
[&&, regexTree, ., isCaseSensitive, (, ), ?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&]
[?, "i", :, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?]
[:, "", ), +, (, flags, ., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :]
[., contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (]
[contains, (, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !]
[(, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (]
[(, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (]
[(, "m", ), &&, regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (]
[regexTree, ., containsAnchor, (, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (]
[(, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&]
[(, ), ?, "m", :, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&]
[:, "", ), ), ;, if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (]
[if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), ), ), {]
[if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), ), ), {]
[if, (, !, (, newPattern, ., equals, (, pattern, ), &&, newFlags, ., equals, (, flags, ), ), ), {]
[pattern, ), &&, newFlags, ., equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (]
[equals, (, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (]
[(, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !]
[(, flags, ), ), ), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !]
[), {, subtree, ., getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (]
[getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (, newFlags, ), ), {]
[getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (, newFlags, ), ), {]
[getFirstChild, (, ), ., setString, (, newPattern, ), ;, if, (, !, "", ., equals, (, newFlags, ), ), {]
[;, if, (, !, "", ., equals, (, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (]
[(, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (]
[(, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (]
[(, newFlags, ), ), {, subtree, ., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (]
[., getLastChild, (, ), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==]
[), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {]
[), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {]
[), ., setString, (, newFlags, ), ;, }, else, if, (, subtree, ., getChildCount, (, ), ==, 2, ), {]
[subtree, ., getChildCount, (, ), ==, 2, ), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }]
[), {, subtree, ., getLastChild, (, ), ., detachFromParent, (, ), ;, }, reportCodeChange, (, ), ;, }, }, return]
