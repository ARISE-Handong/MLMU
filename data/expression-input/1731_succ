[;, private, RandomGenerator, rand, =, null, ;, private, RandomGenerator, secRand, =, null, ;, public, RandomDataGenerator, (, ), {, }, public]
[;, private, RandomGenerator, rand, =, null, ;, private, RandomGenerator, secRand, =, null, ;, public, RandomDataGenerator, (, ), {, }, public]
[;, private, RandomGenerator, secRand, =, null, ;, public, RandomDataGenerator, (, ), {, }, public, RandomDataGenerator, (, RandomGenerator, rand, ), {]
[;, public, RandomDataGenerator, (, ), {, }, public, RandomDataGenerator, (, RandomGenerator, rand, ), {, this, ., rand, =, rand, ;]
[=, rand, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, )]
[., rand, =, rand, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=]
[;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, )]
[;, }, RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ]]
[,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;]
[., LENGTH, ,, len, ), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (]
[), ;, }, RandomGenerator, ran, =, getRandomGenerator, (, ), ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, []
[;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, byte, [, ], randomBytes, =, new, byte, [, (, len, /]
[;, byte, [, ], randomBytes, =, new, byte, [, (, len, /, 2, ), +, 1, ], ;, ran, .]
[;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length]
[], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, .]
[+, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <]
[), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i]
[/, 2, ), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0]
[), +, 1, ], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i]
[], ;, ran, ., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, .]
[;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c]
[., nextBytes, (, randomBytes, ), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer]
[;, i, <, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, []
[;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex]
[<, randomBytes, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ]]
[;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex]
[., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;]
[), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer, .]
[++, ), {, Integer, c, =, Integer, ., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer]
[;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex]
[., valueOf, (, randomBytes, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[[, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, )]
[], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if]
[;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer]
[., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[+, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex]
[., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, .]
[==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return]
[., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex]
[), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, .]
[=, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, )]
[;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0]
[+, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring]
[;, }, outBuffer, ., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0]
[;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public, int, nextInt]
[., append, (, hex, ), ;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len, )]
[), ;, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public, int]
[;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution]
[., substring, (, 0, ,, len, ), ;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper]
[., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public, int, nextInt, (, final, int, lower]
[,, len, ), ;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {]
[), ;, }, public, int, nextInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new]
[;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower]
[., sample, (, ), ;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException]
[,, lower, ,, upper, ), ., sample, (, ), ;, }, public, long, nextLong, (, final, long, lower, ,, final]
[,, upper, ), ., sample, (, ), ;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper]
[), ., sample, (, ), ;, }, public, long, nextLong, (, final, long, lower, ,, final, long, upper, ), throws]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long]
[;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0, )]
[,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1]
[., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, )]
[,, upper, ,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if]
[,, false, ), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max]
[), ;, }, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0]
[;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, )]
[+, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (]
[), +, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while]
[-, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, )]
[), +, 1, ;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while]
[;, if, (, max, <=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, )]
[), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, ), {, final, long, r, =, rng]
[<=, 0, ), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, ), {, final, long, r]
[), {, final, RandomGenerator, rng, =, getRandomGenerator, (, ), ;, while, (, true, ), {, final, long, r, =, rng]
[;, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=]
[), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if]
[., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE]
[>=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[<=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, getRandomGenerator, (, )]
[), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {]
[<, Integer, ., MAX_VALUE, ), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, )]
[), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {]
[., MAX_VALUE, ), {, return, lower, +, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }]
[;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, ), ,, max, ), ;, }, }, private, static]
[+, getRandomGenerator, (, ), ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong]
[;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, ), ,, max, ), ;, }, }, private, static]
[., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, )]
[), ;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, ), ,, max, ), ;, }, }, private]
[), ;, }, else, {, return, lower, +, nextLong, (, getRandomGenerator, (, ), ,, max, ), ;, }, }, private]
[;, }, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {, if]
[+, nextLong, (, getRandomGenerator, (, ), ,, max, ), ;, }, }, private, static, long, nextLong, (, final, RandomGenerator, rng]
[;, }, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {, if]
[,, max, ), ;, }, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws]
[), ;, }, }, private, static, long, nextLong, (, final, RandomGenerator, rng, ,, final, long, n, ), throws, IllegalArgumentException, {]
[), {, final, byte, [, ], byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long, val, ;]
[>, 0, ), {, final, byte, [, ], byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long]
[), {, final, byte, [, ], byteArray, =, new, byte, [, 8, ], ;, long, bits, ;, long, val, ;]
[;, long, bits, ;, long, val, ;, do, {, rng, ., nextBytes, (, byteArray, ), ;, bits, =, 0, ;]
[], ;, long, bits, ;, long, val, ;, do, {, rng, ., nextBytes, (, byteArray, ), ;, bits, =, 0]
[;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8]
[., nextBytes, (, byteArray, ), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits]
[), ;, bits, =, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<]
[=, 0, ;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |]
[;, for, (, final, byte, b, :, byteArray, ), {, bits, =, (, bits, <<, 8, ), |, (, (]
[), {, bits, =, (, bits, <<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, )]
[=, (, bits, <<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits]
[;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val]
[|, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val]
[), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;]
[<<, 8, ), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &]
[), |, (, (, (, long, ), b, ), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;]
[;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val]
[), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -]
[&, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (]
[), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while]
[), &, 0xffL, ), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while]
[), ;, }, bits, =, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -]
[=, bits, &, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[&, 0x7fffffffffffffffL, ;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1]
[;, val, =, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <]
[=, bits, %, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, )]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[%, n, ;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return]
[;, }, while, (, bits, -, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[-, val, +, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (]
[+, (, n, -, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, )]
[<, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString]
[-, 1, ), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public]
[), <, 0, ), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString]
[), ;, return, val, ;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len]
[;, }, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {]
[;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {, throw]
[), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, if, (, len, <=, 0, ), {]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (]
[;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {, alg, =, MessageDigest]
[,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {]
[., LENGTH, ,, len, ), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;]
[), ;, }, final, RandomGenerator, secRan, =, getSecRan, (, ), ;, MessageDigest, alg, =, null, ;, try, {, alg, =]
[;, MessageDigest, alg, =, null, ;, try, {, alg, =, MessageDigest, ., getInstance, (, "SHA-1", ), ;, }, catch, (]
[;, try, {, alg, =, MessageDigest, ., getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw]
[=, MessageDigest, ., getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex]
[;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset, (]
[., getInstance, (, "SHA-1", ), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex, ), ;]
[), ;, }, catch, (, NoSuchAlgorithmException, ex, ), {, throw, new, MathInternalError, (, ex, ), ;, }, alg, ., reset]
[;, }, alg, ., reset, (, ), ;, int, numIter, =, (, len, /, 40, ), +, 1, ;, StringBuilder]
[), ;, }, alg, ., reset, (, ), ;, int, numIter, =, (, len, /, 40, ), +, 1, ;]
[;, int, numIter, =, (, len, /, 40, ), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;]
[., reset, (, ), ;, int, numIter, =, (, len, /, 40, ), +, 1, ;, StringBuilder, outBuffer, =, new]
[;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <, numIter, +]
[+, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <]
[), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter]
[/, 40, ), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1]
[), +, 1, ;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter]
[;, StringBuilder, outBuffer, =, new, StringBuilder, (, ), ;, for, (, int, iter, =, 1, ;, iter, <, numIter, +]
[;, for, (, int, iter, =, 1, ;, iter, <, numIter, +, 1, ;, iter, ++, ), {, byte, []
[;, iter, <, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40]
[;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (]
[<, numIter, +, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;]
[;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (]
[+, 1, ;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, .]
[;, iter, ++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (]
[), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (, randomBytes, ), ;]
[++, ), {, byte, [, ], randomBytes, =, new, byte, [, 40, ], ;, secRan, ., nextBytes, (, randomBytes, )]
[;, secRan, ., nextBytes, (, randomBytes, ), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =]
[], ;, secRan, ., nextBytes, (, randomBytes, ), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash]
[;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for]
[., nextBytes, (, randomBytes, ), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =, alg, .]
[), ;, alg, ., update, (, randomBytes, ), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;]
[;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;, i]
[., update, (, randomBytes, ), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int]
[), ;, byte, [, ], hash, =, alg, ., digest, (, ), ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c]
[., digest, (, ), ;, for, (, int, i, =, 0, ;, i, <, hash, ., length, ;, i, ++]
[;, i, <, hash, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, []
[;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex]
[<, hash, ., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ]]
[;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex]
[., length, ;, i, ++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;]
[), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer, .]
[++, ), {, Integer, c, =, Integer, ., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer]
[;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex]
[., valueOf, (, hash, [, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (]
[), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (]
[[, i, ], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, )]
[], ), ;, String, hex, =, Integer, ., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if]
[;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer]
[., toHexString, (, c, ., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[+, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex]
[., intValue, (, ), +, 128, ), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex]
[), ;, if, (, hex, ., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }]
[), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer]
[==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }]
[., length, (, ), ==, 1, ), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex]
[), {, hex, =, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer]
[=, "0", +, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (]
[;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (]
[+, hex, ;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), .]
[;, }, outBuffer, ., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (]
[;, }, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public, int]
[., append, (, hex, ), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len]
[), ;, }, }, return, outBuffer, ., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public]
[;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new, UniformIntegerDistribution]
[., substring, (, 0, ,, len, ), ;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper]
[., toString, (, ), ., substring, (, 0, ,, len, ), ;, }, public, int, nextSecureInt, (, final, int, lower]
[,, len, ), ;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {]
[), ;, }, public, int, nextSecureInt, (, final, int, lower, ,, final, int, upper, ), throws, NumberIsTooLargeException, {, return, new]
[;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException, {, if, (, lower]
[., sample, (, ), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws, NumberIsTooLargeException]
[,, lower, ,, upper, ), ., sample, (, ), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final]
[,, upper, ), ., sample, (, ), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper]
[), ., sample, (, ), ;, }, public, long, nextSecureLong, (, final, long, lower, ,, final, long, upper, ), throws]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator]
[;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, ), +]
[,, lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max]
[., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final]
[,, upper, ,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (]
[,, false, ), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -]
[), ;, }, final, RandomGenerator, rng, =, getSecRan, (, ), ;, final, long, max, =, (, upper, -, lower, )]
[;, final, long, max, =, (, upper, -, lower, ), +, 1, ;, if, (, max, <=, 0, ), {]
[;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong]
[+, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =, rng]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =]
[-, lower, ), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long]
[), +, 1, ;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =]
[;, if, (, max, <=, 0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong]
[), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r]
[<=, 0, ), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if]
[), {, while, (, true, ), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r]
[), {, final, long, r, =, rng, ., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=]
[;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if]
[., nextLong, (, ), ;, if, (, r, >=, lower, &&, r, <=, upper, ), {, return, r, ;, }]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE]
[>=, lower, &&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer]
[&&, r, <=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[<=, upper, ), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {]
[), {, return, r, ;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower]
[;, }, }, }, else, if, (, max, <, Integer, ., MAX_VALUE, ), {, return, lower, +, rng, ., nextInt]
[), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower]
[<, Integer, ., MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }]
[), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower]
[., MAX_VALUE, ), {, return, lower, +, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {]
[;, }, else, {, return, lower, +, nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson, (]
[+, rng, ., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (, rng]
[;, }, else, {, return, lower, +, nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson, (]
[., nextInt, (, (, int, ), max, ), ;, }, else, {, return, lower, +, nextLong, (, rng, ,, max]
[), ;, }, else, {, return, lower, +, nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson]
[), ;, }, else, {, return, lower, +, nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson]
[;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, )]
[+, nextLong, (, rng, ,, max, ), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {]
[;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (, )]
[,, max, ), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (]
[), ;, }, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, PoissonDistribution, (, getRandomGenerator, (]
[;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if, (, sigma, <=, 0]
[., sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, if]
[,, mean, ,, PoissonDistribution, ., DEFAULT_EPSILON, ,, PoissonDistribution, ., DEFAULT_MAX_ITERATIONS, ), ., sample, (, ), ;, }, public, double, nextGaussian]
[,, PoissonDistribution, ., DEFAULT_EPSILON, ,, PoissonDistribution, ., DEFAULT_MAX_ITERATIONS, ), ., sample, (, ), ;, }, public, double, nextGaussian, (, double]
[,, PoissonDistribution, ., DEFAULT_MAX_ITERATIONS, ), ., sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma]
[., DEFAULT_EPSILON, ,, PoissonDistribution, ., DEFAULT_MAX_ITERATIONS, ), ., sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,]
[), ., sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {]
[., DEFAULT_MAX_ITERATIONS, ), ., sample, (, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *, getRandomGenerator, (, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *, getRandomGenerator]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *, getRandomGenerator, (, )]
[;, }, return, sigma, *, getRandomGenerator, (, ), ., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential, (]
[,, sigma, ), ;, }, return, sigma, *, getRandomGenerator, (, ), ., nextGaussian, (, ), +, mu, ;, }, public]
[., STANDARD_DEVIATION, ,, sigma, ), ;, }, return, sigma, *, getRandomGenerator, (, ), ., nextGaussian, (, ), +, mu, ;]
[), ;, }, return, sigma, *, getRandomGenerator, (, ), ., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential]
[;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (, ), ,]
[+, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (]
[*, getRandomGenerator, (, ), ., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws]
[+, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (]
[., nextGaussian, (, ), +, mu, ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new]
[;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, new, ExponentialDistribution, (, getRandomGenerator, (, ), ,]
[;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, GammaDistribution, (, getRandomGenerator]
[., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[,, mean, ,, ExponentialDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,]
[,, ExponentialDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale]
[), ., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws]
[;, }, public, int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,]
[., sample, (, ), ;, }, public, int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws]
[,, shape, ,, scale, ,, GammaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextHypergeometric, (, int]
[,, scale, ,, GammaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextHypergeometric, (, int, populationSize, ,]
[,, GammaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses]
[), ., sample, (, ), ;, }, public, int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, )]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int]
[;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, new, PascalDistribution]
[., sample, (, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException]
[,, populationSize, ,, numberOfSuccesses, ,, sampleSize, ), ., sample, (, ), ;, }, public, int, nextPascal, (, int, r, ,]
[,, numberOfSuccesses, ,, sampleSize, ), ., sample, (, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p]
[,, sampleSize, ), ., sample, (, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws]
[), ., sample, (, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,]
[;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (, getRandomGenerator, (, ), ,]
[., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution, (]
[,, r, ,, p, ), ., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException]
[,, p, ), ., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return]
[), ., sample, (, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, new, TDistribution]
[;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, new, WeibullDistribution, (, getRandomGenerator]
[., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[,, df, ,, TDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,]
[,, TDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale]
[), ., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws]
[;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, new, ZipfDistribution, (, getRandomGenerator]
[., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return]
[,, shape, ,, scale, ,, WeibullDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextZipf, (, int]
[,, scale, ,, WeibullDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,]
[,, WeibullDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent]
[), ., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws]
[;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution, (, getRandomGenerator, (, )]
[., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new, BetaDistribution]
[,, numberOfElements, ,, exponent, ), ., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta]
[,, exponent, ), ., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {]
[), ., sample, (, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, new]
[;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new, BinomialDistribution, (, getRandomGenerator, (, )]
[., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new, BinomialDistribution]
[,, alpha, ,, beta, ,, BetaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int]
[,, beta, ,, BetaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,]
[,, BetaDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess]
[), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, new]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {]
[;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new, CauchyDistribution, (, getRandomGenerator, (, )]
[., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new, CauchyDistribution]
[,, numberOfTrials, ,, probabilityOfSuccess, ), ., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale]
[,, probabilityOfSuccess, ), ., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {]
[), ., sample, (, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, new]
[;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator, (, ), ,, df, ,]
[., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator, (]
[,, median, ,, scale, ,, CauchyDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double]
[,, scale, ,, CauchyDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, )]
[,, CauchyDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return]
[), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution, (, getRandomGenerator]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, new, ChiSquaredDistribution]
[;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, new, FDistribution, (, getRandomGenerator]
[., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return]
[,, df, ,, ChiSquaredDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,]
[,, ChiSquaredDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf]
[), ., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws]
[;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[., sample, (, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException]
[,, numeratorDf, ,, denominatorDf, ,, FDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextUniform, (, double]
[,, denominatorDf, ,, FDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextUniform, (, double, lower, ,]
[,, FDistribution, ., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper]
[), ., sample, (, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,]
[., DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ., sample, (, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws]
[;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,]
[,, upper, ,, false, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, )]
[,, false, ), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException]
[), ;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (]
[;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,]
[,, lower, ,, upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw]
[., LOWER_BOUND_NOT_BELOW_UPPER_BOUND, ,, lower, ,, upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), )]
[,, upper, ,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException]
[,, false, ), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats]
[), ;, }, if, (, Double, ., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (]
[., isInfinite, (, lower, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if]
[), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite]
[;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,]
[,, lower, ), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats]
[., INFINITE_BOUND, ,, lower, ), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException]
[), ;, }, if, (, Double, ., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND]
[), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (]
[., isInfinite, (, upper, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if]
[), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN]
[;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (, upper, ), ), {, throw]
[,, upper, ), ;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (, upper, )]
[., INFINITE_BOUND, ,, upper, ), ;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (]
[), ;, }, if, (, Double, ., isNaN, (, lower, ), ||, Double, ., isNaN, (, upper, ), ), {]
[), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =]
[||, Double, ., isNaN, (, upper, ), ), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =]
[., isNaN, (, lower, ), ||, Double, ., isNaN, (, upper, ), ), {, throw, new, NotANumberException, (, ), ;]
[), ||, Double, ., isNaN, (, upper, ), ), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator]
[), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =]
[., isNaN, (, upper, ), ), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (]
[), ), {, throw, new, NotANumberException, (, ), ;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u]
[;, }, final, RandomGenerator, generator, =, getRandomGenerator, (, ), ;, double, u, =, generator, ., nextDouble, (, ), ;, while]
[;, double, u, =, generator, ., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {]
[;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }]
[., nextDouble, (, ), ;, while, (, !, lowerInclusive, &&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble]
[), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u]
[&&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +]
[&&, u, <=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +]
[), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u]
[<=, 0.0, ), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0]
[), {, u, =, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u]
[=, generator, ., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u, ), *, lower]
[;, }, return, u, *, upper, +, (, 1.0, -, u, ), *, lower, ;, }, public, int, [, ]]
[., nextDouble, (, ), ;, }, return, u, *, upper, +, (, 1.0, -, u, ), *, lower, ;, }]
[;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if]
[+, (, 1.0, -, u, ), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int]
[*, upper, +, (, 1.0, -, u, ), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n]
[+, (, 1.0, -, u, ), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int]
[;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if]
[*, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException]
[), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,]
[-, u, ), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws]
[), *, lower, ;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,]
[;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NumberIsTooLargeException, ,, NotStrictlyPositiveException, {, if]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (]
[>, n, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (]
[;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;]
[,, k, ,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[., PERMUTATION_EXCEEDS_N, ,, k, ,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new]
[,, n, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,]
[), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural]
[;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (]
[,, k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index]
[., PERMUTATION_SIZE, ,, k, ), ;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle]
[), ;, }, int, [, ], index, =, getNatural, (, n, ), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator]
[;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (, index, ,, k]
[), ;, MathArrays, ., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (, index, ,]
[;, return, MathArrays, ., copyOf, (, index, ,, k, ), ;, }, public, Object, [, ], nextSample, (, Collection, <]
[., shuffle, (, index, ,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (, index, ,, k, ), ;]
[,, getRandomGenerator, (, ), ), ;, return, MathArrays, ., copyOf, (, index, ,, k, ), ;, }, public, Object, []
[), ;, return, MathArrays, ., copyOf, (, index, ,, k, ), ;, }, public, Object, [, ], nextSample, (, Collection]
[;, }, public, Object, [, ], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NumberIsTooLargeException, ,]
[., copyOf, (, index, ,, k, ), ;, }, public, Object, [, ], nextSample, (, Collection, <, ?, >, c]
[,, k, ), ;, }, public, Object, [, ], nextSample, (, Collection, <, ?, >, c, ,, int, k, )]
[), ;, }, public, Object, [, ], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NumberIsTooLargeException]
[;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,]
[., size, (, ), ;, if, (, k, >, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (]
[>, len, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (]
[;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;]
[,, k, ,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[., SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE, ,, k, ,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new]
[,, len, ,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[,, true, ), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,]
[), ;, }, if, (, k, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects, =, c]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects, =, c]
[;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index, =, nextPermutation, (]
[,, k, ), ;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index]
[., NUMBER_OF_SAMPLES, ,, k, ), ;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, []
[), ;, }, Object, [, ], objects, =, c, ., toArray, (, ), ;, int, [, ], index, =, nextPermutation]
[;, int, [, ], index, =, nextPermutation, (, len, ,, k, ), ;, Object, [, ], result, =, new, Object]
[., toArray, (, ), ;, int, [, ], index, =, nextPermutation, (, len, ,, k, ), ;, Object, [, ]]
[;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;, i]
[,, k, ), ;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =]
[), ;, Object, [, ], result, =, new, Object, [, k, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, k, ;, i, ++, ), {, result, [, i]
[;, i, <, k, ;, i, ++, ), {, result, [, i, ], =, objects, [, index, [, i, ]]
[;, i, ++, ), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;, }, return]
[<, k, ;, i, ++, ), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;]
[;, i, ++, ), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;, }, return]
[), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;, }, return, result, ;, }]
[++, ), {, result, [, i, ], =, objects, [, index, [, i, ], ], ;, }, return, result, ;]
[=, objects, [, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed]
[[, i, ], =, objects, [, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed]
[], =, objects, [, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long]
[;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (, ), ., setSeed, (]
[[, index, [, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {]
[], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (, ), ., setSeed]
[[, i, ], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (]
[], ], ;, }, return, result, ;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (, ), .]
[;, }, public, void, reSeed, (, long, seed, ), {, getRandomGenerator, (, ), ., setSeed, (, seed, ), ;, }]
[;, }, public, void, reSeedSecure, (, ), {, getSecRan, (, ), ., setSeed, (, System, ., currentTimeMillis, (, ), )]
[., setSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {, getSecRan, (, ), ., setSeed, (, System]
[), ;, }, public, void, reSeedSecure, (, ), {, getSecRan, (, ), ., setSeed, (, System, ., currentTimeMillis, (, )]
[;, }, public, void, reSeedSecure, (, long, seed, ), {, getSecRan, (, ), ., setSeed, (, seed, ), ;, }]
[., setSeed, (, System, ., currentTimeMillis, (, ), ), ;, }, public, void, reSeedSecure, (, long, seed, ), {, getSecRan]
[), ;, }, public, void, reSeedSecure, (, long, seed, ), {, getSecRan, (, ), ., setSeed, (, seed, ), ;]
[., currentTimeMillis, (, ), ), ;, }, public, void, reSeedSecure, (, long, seed, ), {, getSecRan, (, ), ., setSeed]
[;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System, ., currentTimeMillis, (, ), +]
[., setSeed, (, seed, ), ;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System]
[), ;, }, public, void, reSeed, (, ), {, getRandomGenerator, (, ), ., setSeed, (, System, ., currentTimeMillis, (, )]
[;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =, RandomGeneratorFactory]
[., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, public, void]
[), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =]
[+, System, ., identityHashCode, (, this, ), ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, )]
[., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm]
[), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand, =]
[., identityHashCode, (, this, ), ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException]
[), ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, secRand]
[=, RandomGeneratorFactory, ., createRandomGenerator, (, SecureRandom, ., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (]
[;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {, initRan, (, ), ;, }]
[., createRandomGenerator, (, SecureRandom, ., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {]
[), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {, initRan, (, ), ;]
[., getInstance, (, algorithm, ,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==]
[,, provider, ), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {, initRan]
[), ), ;, }, public, RandomGenerator, getRandomGenerator, (, ), {, if, (, rand, ==, null, ), {, initRan, (, )]
[), {, initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new]
[==, null, ), {, initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand]
[), {, initRan, (, ), ;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new]
[;, }, return, rand, ;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (, System, ., currentTimeMillis]
[;, }, private, void, initRan, (, ), {, rand, =, new, Well19937c, (, System, ., currentTimeMillis, (, ), +, System]
[=, new, Well19937c, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, private]
[;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator]
[), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, .]
[+, System, ., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==]
[., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {]
[), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory, .]
[., identityHashCode, (, this, ), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, )]
[), ), ;, }, private, RandomGenerator, getSecRan, (, ), {, if, (, secRand, ==, null, ), {, secRand, =, RandomGeneratorFactory]
[), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, .]
[==, null, ), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (]
[), {, secRand, =, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, .]
[=, RandomGeneratorFactory, ., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, )]
[;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }]
[., createRandomGenerator, (, new, SecureRandom, (, ), ), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +, System]
[), ;, secRand, ., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;]
[;, }, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ], natural]
[., setSeed, (, System, ., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, return, secRand]
[), ;, }, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ]]
[+, System, ., identityHashCode, (, this, ), ), ;, }, return, secRand, ;, }, private, int, [, ], getNatural, (]
[., currentTimeMillis, (, ), +, System, ., identityHashCode, (, this, ), ), ;, }, return, secRand, ;, }, private, int]
[), ;, }, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ]]
[., identityHashCode, (, this, ), ), ;, }, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n]
[), ), ;, }, return, secRand, ;, }, private, int, [, ], getNatural, (, int, n, ), {, int, []
[;, }, private, int, [, ], getNatural, (, int, n, ), {, int, [, ], natural, =, new, int, []
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, natural, [, i]
[;, i, <, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, natural, ;]
[;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, natural, ;, }, }]
[<, n, ;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, natural, ;, }, }]
[;, i, ++, ), {, natural, [, i, ], =, i, ;, }, return, natural, ;, }, }]
[), {, natural, [, i, ], =, i, ;, }, return, natural, ;, }, }]
[++, ), {, natural, [, i, ], =, i, ;, }, return, natural, ;, }, }]
[=, i, ;, }, return, natural, ;, }, }]
[[, i, ], =, i, ;, }, return, natural, ;, }, }]
[], =, i, ;, }, return, natural, ;, }, }]
[;, }, return, natural, ;, }, }]
[;, }, }]
