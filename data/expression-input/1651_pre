[;, final, class, RenameVars, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, ArrayList, <, Node, >, globalNameNodes, =]
[Node, >, globalNameNodes, =, new, ArrayList, <, Node, >, (, ), ;, private, final, ArrayList, <, Node, >, localNameNodes, =]
[), ;, private, final, Map, <, Node, ,, String, >, pseudoNameMap, ;, private, final, Set, <, String, >, externNames, =]
[), ;, private, final, Set, <, String, >, reservedNames, ;, private, final, Map, <, String, ,, String, >, renameMap, =]
[,, String, >, (, ), ;, private, final, VariableMap, prevUsedRenameMap, ;, private, final, String, prefix, ;, private, int, assignmentCount, =]
[String, prefix, ;, private, int, assignmentCount, =, 0, ;, private, StringBuilder, assignmentLog, ;, private, Set, <, Var, >, localBleedingFunctions, =]
[String, prefix, ;, private, int, assignmentCount, =, 0, ;, private, StringBuilder, assignmentLog, ;, private, Set, <, Var, >, localBleedingFunctions, =]
[<, Var, >, localBleedingFunctions, =, Sets, ., newHashSet, (, ), ;, private, ArrayListMultimap, <, Scope, ,, Var, >, localBleedingFunctionsPerScope, =]
[<, Var, >, localBleedingFunctions, =, Sets, ., newHashSet, (, ), ;, private, ArrayListMultimap, <, Scope, ,, Var, >, localBleedingFunctionsPerScope, =]
[final, String, oldName, ;, final, int, orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (, String, name, ), {]
[final, String, oldName, ;, final, int, orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (, String, name, ), {]
[final, int, orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (, String, name, ), {, this, ., oldName, =]
[orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (, String, name, ), {, this, ., oldName, =, name, ;]
[orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (, String, name, ), {, this, ., oldName, =, name, ;]
[;, int, count, ;, Assignment, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =]
[count, ;, Assignment, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;]
[count, ;, Assignment, (, String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;]
[String, name, ), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =]
[), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;]
[), {, this, ., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;]
[oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =]
[oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =]
[., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {]
[., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {]
[;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (]
[;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (]
[;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (]
[=, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==]
[;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==, null, ), ;]
[;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==, null, ), ;]
[(, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==, null, ), ;, this, ., newName, =]
[), ;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =]
[preserveFunctionExpressionNames, ;, private, final, boolean, shouldShadow, ;, private, final, char, [, ], reservedCharacters, ;, public, static, final, String, LOCAL_VAR_PREFIX, =]
[,, VariableMap, prevUsedRenameMap, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, Set, <, String, >, reservedNames, ), {]
[,, VariableMap, prevUsedRenameMap, ,, @, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, Set, <, String, >, reservedNames, ), {]
[@, Nullable, char, [, ], reservedCharacters, ,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =]
[char, [, ], reservedCharacters, ,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;]
[char, [, ], reservedCharacters, ,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;]
[,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =]
[,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =]
[,, @, Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =]
[Nullable, Set, <, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==]
[<, String, >, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?]
[>, reservedNames, ), {, this, ., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :]
[), {, this, ., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;]
[compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =]
[compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;]
[compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;]
[prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =]
[null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (]
[:, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {]
[:, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {]
[., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =]
[., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =]
[preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {]
[preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {]
[generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =]
[this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }]
[this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }]
[Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =]
[newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;]
[newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;]
[}, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =]
[{, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;]
[{, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;]
[=, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =]
[this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (]
[this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (]
[prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {]
[=, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =]
[=, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =]
[if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {]
[if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {]
[null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =]
[null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =]
[., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets, ., newHashSet, (]
[}, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean, isExternsPass_, ;, ProcessVars, (, boolean, isExterns, ), {]
[class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean, isExternsPass_, ;, ProcessVars, (, boolean, isExterns, ), {, isExternsPass_, =]
[isExterns, ), {, isExternsPass_, =, isExterns, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[isExterns, ), {, isExternsPass_, =, isExterns, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), return, ;, Iterator, <, Var, >, it, =]
[NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), return, ;, Iterator, <, Var, >, it, =]
[NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), return, ;, Iterator, <, Var, >, it, =]
[return, ;, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;, while, (]
[return, ;, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;, while, (]
[getScope, (, ), ., getVars, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Var, current, =]
[getScope, (, ), ., getVars, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Var, current, =]
[while, (, it, ., hasNext, (, ), ), {, Var, current, =, it, ., next, (, ), ;, if, (]
[while, (, it, ., hasNext, (, ), ), {, Var, current, =, it, ., next, (, ), ;, if, (]
[), {, Var, current, =, it, ., next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {]
[), {, Var, current, =, it, ., next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {]
[=, it, ., next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (]
[next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;]
[next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;]
[if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (]
[if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (]
[if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (]
[., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent, (, ), ,]
[{, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[Node, parent, ), {, if, (, !, n, ., isName, (, ), ), {, return, ;, }, String, name, =]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, name, ., length, (, ), ==]
[;, if, (, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[;, if, (, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[;, if, (, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[}, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =]
[}, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =]
[}, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (]
[Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (]
[Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (, var, !=]
[t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (, var, !=, null, ), &&]
[t, ., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (, var, !=, null, ), &&]
[getVar, (, name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&]
[(, name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (]
[(, name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (]
[name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !]
[name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !]
[name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !]
[name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !]
[var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||]
[., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !]
[., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !]
[scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (]
[scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (]
[., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !]
[(, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&]
[isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {]
[isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {]
[!, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (]
[if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (]
[if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (]
[if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (]
[!, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&]
[!, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&]
[&&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&]
[add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (]
[add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (]
[if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {]
[if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {]
[var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (]
[var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (]
[., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !]
[(, ), ), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (]
[), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,]
[(, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (]
[}, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (, local, ), {, String, newName, =]
[}, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (, local, ), {, String, newName, =]
[}, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (, local, ), {, String, newName, =]
[name, ,, local, ), ), {, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (]
[{, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (]
[if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !]
[if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !]
[{, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (, name, ), ), {]
[MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (, name, ), ), {]
[getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (, name, ), ), {, n, ., setString, (]
[equals, (, name, ), ), {, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (]
[{, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (]
[n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !]
[(, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local, ), {]
[(, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local, ), {]
[}, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local, ), {, externNames, ., add, (]
[{, if, (, !, local, ), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (]
[{, if, (, !, local, ), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (]
[(, !, local, ), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=]
[), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {]
[externNames, ., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {, recordPseudoName, (]
[;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (]
[(, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =]
[(, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =]
[!=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +]
[), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (]
[(, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;]
[), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (]
[if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;]
[if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;]
[{, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (]
[=, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;]
[=, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;]
[(, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (]
[), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (]
[), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (]
[localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=]
[(, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {]
[), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (]
[., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;]
[., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;]
[), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;, globalNameNodes, ., add, (]
[;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =]
[;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =]
[(, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (]
[}, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (, name, ), ;, if, (]
[}, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (, name, ), ;, if, (]
[incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (, name, ), ;, if, (, s, ==]
[name, ), {, Assignment, s, =, assignments, ., get, (, name, ), ;, if, (, s, ==, null, ), {]
[{, Assignment, s, =, assignments, ., get, (, name, ), ;, if, (, s, ==, null, ), {, s, =]
[=, assignments, ., get, (, name, ), ;, if, (, s, ==, null, ), {, s, =, new, Assignment, (]
[get, (, name, ), ;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;]
[get, (, name, ), ;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;]
[;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (]
[(, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,]
[), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }]
[), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }]
[), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }]
[s, ), ;, }, s, ., count, ++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =]
[Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (]
[Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (]
[Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (]
[{, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=]
[{, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=]
[(, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return]
[(, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return]
[(, Assignment, a1, ,, Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return]
[Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return, a2, ., count, -]
[Assignment, a2, ), {, if, (, a1, ., count, !=, a2, ., count, ), {, return, a2, ., count, -]
[a1, ., count, !=, a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return]
[a1, ., count, !=, a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return]
[a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (]
[count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,]
[., compare, (, a1, ,, a2, ), ;, }, }, ;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =]
[<, Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return]
[<, Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return]
[<, Assignment, >, (, ), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return]
[), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return, a1, ., orderOfOccurrence, -]
[), {, @, Override, public, int, compare, (, Assignment, a1, ,, Assignment, a2, ), {, return, a1, ., orderOfOccurrence, -]
[a2, ., orderOfOccurrence, ;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[orderOfOccurrence, ;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, ), ;]
[process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (]
[Node, externs, ,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[), {, assignmentLog, =, new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (]
[new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;]
[new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (]
[., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (]
[(, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;]
[(, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (]
[new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =]
[;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (]
[addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;]
[addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;]
[;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (]
[;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (]
[<, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (]
[(, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {]
[(, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {]
[;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (]
[., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,]
[(, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,]
[., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,]
[;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (]
[(, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,]
[(, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (]
[(, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (]
[,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=]
[varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {]
[process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }]
[externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (]
[if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =]
[reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :]
[(, varsByFrequency, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =]
[), ;, boolean, changed, =, false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (]
[false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (]
[false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (]
[for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName, !=]
[n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName, !=, null, ), {]
[n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName, !=, null, ), {]
[{, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (]
[=, getNewGlobalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;]
[(, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =]
[!=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, }, int, count, =]
[(, newName, ), ;, changed, =, true, ;, }, }, int, count, =, 0, ;, for, (, Node, n, :]
[true, ;, }, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =]
[}, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (]
[0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (]
[0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (]
[for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName, !=]
[n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName, !=, null, ), {]
[n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName, !=, null, ), {]
[{, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (]
[=, getNewLocalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;]
[(, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =]
[;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }]
[;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }]
[), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (]
[., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (, changed, ), {]
[., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (, changed, ), {]
[=, true, ;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[=, true, ;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (]
[count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (]
[;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +]
[(, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;]
[), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;, assignmentLog, =]
[+, assignmentLog, ), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =]
[+, assignmentLog, ), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =]
[private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, ., getString, (, ), ;, Assignment, a, =]
[private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, ., getString, (, ), ;, Assignment, a, =]
[Node, n, ), {, String, oldName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (]
[oldName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (]
[getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=]
[), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&]
[;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !]
[;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !]
[;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !]
[get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (]
[(, a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (]
[(, a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (]
[., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=]
[&&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[&&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, else, {, return]
[;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =]
[;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =]
[private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =, n, ., getString, (, ), ;, Assignment, a, =]
[private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =, n, ., getString, (, ), ;, Assignment, a, =]
[Node, n, ), {, String, oldTempName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (]
[oldTempName, =, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (]
[=, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !]
[=, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !]
[=, n, ., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !]
[;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (]
[get, (, oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (]
[get, (, oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (]
[oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=]
[(, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[(, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[!=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, return]
[;, }, return, a, ., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {]
[;, }, return, a, ., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {]
[., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (]
[;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,]
[;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,]
[;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,]
[return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,, '$', +]
[return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,, '$', +]
[recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,, '$', +, n, ., getString, (, ), +]
[., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :]
[., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :]
[void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (, ), ), {, String, prevNewName, =]
[void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (, ), ), {, String, prevNewName, =]
[{, for, (, Assignment, a, :, assignments, ., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (]
[{, for, (, Assignment, a, :, assignments, ., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (]
[., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (]
[., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (]
[., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (]
[(, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==]
[), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==, null, ||]
[), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==, null, ||]
[=, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (]
[;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (]
[;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (]
[;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (]
[;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (]
[||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (]
[contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||]
[(, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (]
[(, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (]
[prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !]
[prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !]
[continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (]
[continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&]
[startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (]
[(, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {]
[(, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {]
[contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (]
[., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;]
[), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (]
[prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,]
[prevNewName, ), ;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =]
[}, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (]
[}, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (, reservedNames, ,]
[void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (, reservedNames, ,, prefix, ,]
[>, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =]
[>, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =]
[>, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =]
[=, new, NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?]
[NameGenerator, (, reservedNames, ,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :]
[,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (]
[,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,]
[), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,]
[), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, List, <, Assignment, >, pendingAssignments, =]
[List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;, List, <, String, >, generatedNamesForAssignments, =]
[;, List, <, String, >, generatedNamesForAssignments, =, new, ArrayList, <, String, >, (, ), ;, for, (, Assignment, a, :]
[generatedNamesForAssignments, =, new, ArrayList, <, String, >, (, ), ;, for, (, Assignment, a, :, varsToRename, ), {, if, (]
[generatedNamesForAssignments, =, new, ArrayList, <, String, >, (, ), ;, for, (, Assignment, a, :, varsToRename, ), {, if, (]
[generatedNamesForAssignments, =, new, ArrayList, <, String, >, (, ), ;, for, (, Assignment, a, :, varsToRename, ), {, if, (]
[<, String, >, (, ), ;, for, (, Assignment, a, :, varsToRename, ), {, if, (, a, ., newName, !=]
[Assignment, a, :, varsToRename, ), {, if, (, a, ., newName, !=, null, ), {, continue, ;, }, if, (]
[Assignment, a, :, varsToRename, ), {, if, (, a, ., newName, !=, null, ), {, continue, ;, }, if, (]
[), {, if, (, a, ., newName, !=, null, ), {, continue, ;, }, if, (, externNames, ., contains, (]
[), {, if, (, a, ., newName, !=, null, ), {, continue, ;, }, if, (, externNames, ., contains, (]
[if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (]
[if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (]
[if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (]
[a, ., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (]
[), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {]
[continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =]
[continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =]
[if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;]
[a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (]
[oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,]
[), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {]
[newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =]
[newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =]
[), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;]
[), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;]
[a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (]
[), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;]
[), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;]
[{, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (]
[., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }]
[., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }]
[;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (]
[;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =]
[;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =]
[add, (, newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =]
[newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =, 0, ;]
[;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, numPendingAssignments, ;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =]
[0, ;, i, <, numPendingAssignments, ;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (]
[), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len, =]
[), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len, =]
[), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len, =]
[Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len, =, generatedNamesForAssignments, ., get, (]
[;, int, len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =]
[len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;]
[len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;]
[len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;]
[generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <]
[get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&]
[get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&]
[get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&]
[get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&]
[., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (]
[int, j, =, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==]
[=, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;]
[=, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;]
[<, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {]
[<, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {]
[., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (]
[., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (]
[), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (]
[), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a, :]
[., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {]
[(, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (]
[., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,]
[., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,]
[), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (]
[for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i, ), ), ;]
[(, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i, ), ), ;, ++]
[), ), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {]
[), ), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {]
[i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (]
[}, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName, ), ;]
[}, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName, ), ;]
[finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (]
[finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (]
[,, String, newName, ), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,]
[), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;]
[), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;]
[), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;]
[), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;]
[), {, a, ., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;]
[setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (]
[setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (]
[put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (]
[,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (]
[., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, ), ., append, (]
[" => ", ), ., append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return]
[append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (]
[append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (]
[., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf, (]
[., copyOf, (, renameMap, ), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return]
[copyOf, (, renameMap, ), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !]
[copyOf, (, renameMap, ), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !]
[copyOf, (, renameMap, ), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !]
[boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !, compiler, ., getCodingConvention, (, ), ., isExported, (]
[(, String, name, ,, boolean, isLocal, ), {, return, !, compiler, ., getCodingConvention, (, ), ., isExported, (, name, ,]
[., isExported, (, name, ,, isLocal, ), ;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =]
[., isExported, (, name, ,, isLocal, ), ;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =]
[;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s, =]
[;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s, =]
[;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s, =]
[int, num, =, v, ., index, ;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (]
[int, num, =, v, ., index, ;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (]
[=, v, ., index, ;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (, s, ==]
[;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (, s, ==, null, ), {, throw]
[=, v, ., scope, ., getParent, (, ), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =]
[), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =]
[), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =]
[), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =]
[null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=]
[{, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&]
[{, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&]
[(, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (]
[boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (]
[boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (]
[boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (]
[(, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=]
[localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (]
[(, v, ), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {]
[), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=]
[), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=]
[), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=]
[), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=]
[s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (]
[!=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (]
[{, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +]
[(, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +, 1, ;]
[), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =]
[., get, (, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {]
[(, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=]
[(, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=]
[(, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=]
[indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (]
[=, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }]
[;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }, num, +=]
[;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }, num, +=]
[localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;]
[get, (, s, ), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;, s, =]
[get, (, s, ), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;, s, =]
[;, }, num, +=, s, ., getVarCount, (, ), ;, s, =, s, ., getParent, (, ), ;, }, return]
