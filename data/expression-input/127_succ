[;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, ), {]
[., error, (, "JSC_UNREACHABLE_CODE", ,, "unreachable code", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (]
[,, "unreachable code", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, CheckLevel, level, ;, CheckUnreachableCode, (, AbstractCompiler, compiler, ,, CheckLevel, level, )]
[=, compiler, ;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {]
[., compiler, =, compiler, ;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[;, this, ., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (]
[=, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (, t, ., getControlFlowGraph, (]
[., level, =, level, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (, t, .]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, initScope, (, t, ., getControlFlowGraph, (, ), )]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, GraphNode, <]
[), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, GraphNode]
[., getControlFlowGraph, (, ), ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (]
[., getNode, (, n, ), ;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, .]
[., getControlFlowGraph, (, ), ., getNode, (, n, ), ;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (]
[), ;, if, (, gNode, !=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if]
[), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&]
[&&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=]
[!=, null, &&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (]
[&&, gNode, ., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=]
[), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&]
[!=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, .]
[., getAnnotation, (, ), !=, GraphReachability, ., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1]
[), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&]
[., REACHABLE, ), {, if, (, n, ., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability]
[&&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level]
[&&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (]
[!=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler]
[., getLineno, (, ), !=, -, 1, &&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (]
[&&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (]
[&&, !, n, ., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (]
[&&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level]
[&&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level]
[., isEmpty, (, ), &&, !, n, ., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability]
[., isBreak, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, )]
[;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), ., recompute, (]
[., report, (, t, ., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,]
[), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), ., recompute]
[., makeError, (, n, ,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >]
[,, level, ,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph]
[,, UNREACHABLE_CODE, ), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, )]
[), ), ;, new, GraphReachability, <, Node, ,, ControlFlowGraph, ., Branch, >, (, t, ., getControlFlowGraph, (, ), ), .]
[;, return, false, ;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, )]
[., recompute, (, n, ), ;, return, false, ;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph]
[), ., recompute, (, n, ), ;, return, false, ;, }, }, return, true, ;, }, private, void, initScope, (]
[., getControlFlowGraph, (, ), ), ., recompute, (, n, ), ;, return, false, ;, }, }, return, true, ;, }]
[), ;, return, false, ;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph]
[;, }, }, return, true, ;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {, new, GraphReachability]
[;, }, private, void, initScope, (, ControlFlowGraph, <, Node, >, controlFlowGraph, ), {, new, GraphReachability, <, Node, ,, ControlFlowGraph, .]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, visit, (, NodeTraversal]
[., compute, (, controlFlowGraph, ., getEntry, (, ), ., getValue, (, ), ), ;, }, @, Override, public, void, exitScope]
[,, new, ReachablePredicate, (, ), ), ., compute, (, controlFlowGraph, ., getEntry, (, ), ., getValue, (, ), ), ;]
[), ., compute, (, controlFlowGraph, ., getEntry, (, ), ., getValue, (, ), ), ;, }, @, Override, public, void]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, visit, (]
[., getValue, (, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override]
[., getEntry, (, ), ., getValue, (, ), ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[;, if, (, !, branch, ., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =, input, .]
[., edge, ;, if, (, !, branch, ., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =]
[), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (]
[., isConditional, (, ), ), {, return, true, ;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =]
[;, }, Node, predecessor, =, input, ., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if]
[;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {, TernaryValue, val]
[., sourceNode, ;, Node, condition, =, NodeUtil, ., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {]
[;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (]
[., getConditionExpression, (, predecessor, ), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (]
[), ;, if, (, condition, !=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if]
[), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, )]
[!=, null, ), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, .]
[), {, TernaryValue, val, =, NodeUtil, ., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, )]
[;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, branch]
[., getImpureBooleanValue, (, condition, ), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (]
[), ;, if, (, val, !=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (]
[), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }]
[!=, TernaryValue, ., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE]
[), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }]
[., UNKNOWN, ), {, return, val, ., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;]
[;, }, }, return, true, ;, }, }, }]
[==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, return, true, ;, }, }, }]
[., toBoolean, (, true, ), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, return, true, ;, }]
[), ==, (, branch, ==, Branch, ., ON_TRUE, ), ;, }, }, return, true, ;, }, }, }]
[;, }, }, return, true, ;, }, }, }]
[), ;, }, }, return, true, ;, }, }, }]
[==, Branch, ., ON_TRUE, ), ;, }, }, return, true, ;, }, }, }]
[), ;, }, }, return, true, ;, }, }, }]
[., ON_TRUE, ), ;, }, }, return, true, ;, }, }, }]
[;, }, }, }]
