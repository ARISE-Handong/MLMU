[), ;, }, public, double, [, ], fit, (, double, [, ], initialGuess, ), {, final, Gaussian, ., Parametric, f]
[;, return, fit, (, f, ,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, final, double]
[;, try, {, v, =, super, ., value, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, )]
[., POSITIVE_INFINITY, ;, try, {, v, =, super, ., value, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException]
[=, super, ., value, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v]
[;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, @, Override, public, double, [, ], gradient]
[., value, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }]
[,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, @, Override, public, double]
[), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, @, Override, public, double, [, ]]
[;, }, @, Override, public, double, [, ], gradient, (, double, x, ,, double, ..., p, ), {, double, []
[;, try, {, v, =, super, ., gradient, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, )]
[,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (, x, ,]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (]
[,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (, x, ,, p, ), ;, }]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (, x, ,, p, )]
[}, ;, try, {, v, =, super, ., gradient, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e]
[., POSITIVE_INFINITY, }, ;, try, {, v, =, super, ., gradient, (, x, ,, p, ), ;, }, catch, (]
[=, super, ., gradient, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v]
[;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, }, ;, return, fit, (, f, ,]
[., gradient, (, x, ,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }]
[,, p, ), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, }, ;, return, fit]
[), ;, }, catch, (, NotStrictlyPositiveException, e, ), {, }, return, v, ;, }, }, ;, return, fit, (, f]
[;, }, }, ;, return, fit, (, f, ,, initialGuess, ), ;, }, public, double, [, ], fit, (, )]
[;, }, public, double, [, ], fit, (, ), {, final, double, [, ], guess, =, (, new, ParameterGuesser, (]
[,, initialGuess, ), ;, }, public, double, [, ], fit, (, ), {, final, double, [, ], guess, =, (]
[), ;, }, public, double, [, ], fit, (, ), {, final, double, [, ], guess, =, (, new, ParameterGuesser]
[;, return, fit, (, guess, ), ;, }, public, static, class, ParameterGuesser, {, private, final, double, norm, ;, private, final]
[., guess, (, ), ;, return, fit, (, guess, ), ;, }, public, static, class, ParameterGuesser, {, private, final, double]
[), ., guess, (, ), ;, return, fit, (, guess, ), ;, }, public, static, class, ParameterGuesser, {, private, final]
[), ), ., guess, (, ), ;, return, fit, (, guess, ), ;, }, public, static, class, ParameterGuesser, {, private]
[;, }, public, static, class, ParameterGuesser, {, private, final, double, norm, ;, private, final, double, mean, ;, private, final, double]
[), ;, }, public, static, class, ParameterGuesser, {, private, final, double, norm, ;, private, final, double, mean, ;, private, final]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, observations, ., length, <, 3, )]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, observations, ., length, <]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, observations, ., length, <, 3, )]
[;, }, if, (, observations, ., length, <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,, 3]
[), ;, }, if, (, observations, ., length, <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,]
[., INPUT_ARRAY, ), ;, }, if, (, observations, ., length, <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, .]
[), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,, 3, ,, true, ), ;, }, final, WeightedObservedPoint, [, ]]
[<, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,, 3, ,, true, ), ;, }, final, WeightedObservedPoint]
[., length, <, 3, ), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,, 3, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, observations, ., length, ,, 3, ,, true, ), ;, }, final, WeightedObservedPoint, [, ]]
[;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =, basicGuess]
[,, 3, ,, true, ), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double]
[., length, ,, 3, ,, true, ), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;]
[,, true, ), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double, [, ]]
[), ;, }, final, WeightedObservedPoint, [, ], sorted, =, sortObservations, (, observations, ), ;, final, double, [, ], params, =]
[;, final, double, [, ], params, =, basicGuess, (, sorted, ), ;, norm, =, params, [, 0, ], ;, mean]
[), ;, final, double, [, ], params, =, basicGuess, (, sorted, ), ;, norm, =, params, [, 0, ], ;]
[;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =, params, [, 2]
[), ;, norm, =, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =, params, []
[=, params, [, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =, params, [, 2, ], ;]
[;, mean, =, params, [, 1, ], ;, sigma, =, params, [, 2, ], ;, }, public, double, [, ]]
[[, 0, ], ;, mean, =, params, [, 1, ], ;, sigma, =, params, [, 2, ], ;, }, public]
[], ;, mean, =, params, [, 1, ], ;, sigma, =, params, [, 2, ], ;, }, public, double, []
[=, params, [, 1, ], ;, sigma, =, params, [, 2, ], ;, }, public, double, [, ], guess, (]
[;, sigma, =, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double]
[[, 1, ], ;, sigma, =, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {]
[], ;, sigma, =, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new]
[=, params, [, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ]]
[;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, norm, ,, mean, ,]
[[, 2, ], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, norm]
[], ;, }, public, double, [, ], guess, (, ), {, return, new, double, [, ], {, norm, ,, mean]
[;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =]
[;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations, =]
[,, mean, ,, sigma, }, ;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final]
[,, sigma, }, ;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, []
[}, ;, }, private, WeightedObservedPoint, [, ], sortObservations, (, WeightedObservedPoint, [, ], unsorted, ), {, final, WeightedObservedPoint, [, ], observations]
[;, final, Comparator, <, WeightedObservedPoint, >, cmp, =, new, Comparator, <, WeightedObservedPoint, >, (, ), {, public, int, compare, (]
[., clone, (, ), ;, final, Comparator, <, WeightedObservedPoint, >, cmp, =, new, Comparator, <, WeightedObservedPoint, >, (, ), {]
[;, Arrays, ., sort, (, observations, ,, cmp, ), ;, return, observations, ;, }, private, double, [, ], basicGuess, (]
[), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (]
[&&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1]
[==, null, &&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return]
[&&, p2, ==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1]
[), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (]
[==, null, ), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }]
[), {, return, 0, ;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (]
[;, }, if, (, p1, ==, null, ), {, return, -, 1, ;, }, if, (, p2, ==, null, )]
[), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (]
[==, null, ), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }]
[), {, return, -, 1, ;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (]
[;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (, p1, ., getX, (, )]
[;, }, if, (, p2, ==, null, ), {, return, 1, ;, }, if, (, p1, ., getX, (, )]
[), {, return, 1, ;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (, ), )]
[==, null, ), {, return, 1, ;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (]
[), {, return, 1, ;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (, ), )]
[;, }, if, (, p1, ., getX, (, ), <, p2, ., getX, (, ), ), {, return, -, 1]
[), {, return, -, 1, ;, }, if, (, p1, ., getX, (, ), >, p2, ., getX, (, )]
[<, p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getX, (, )]
[., getX, (, ), <, p2, ., getX, (, ), ), {, return, -, 1, ;, }, if, (, p1]
[), {, return, -, 1, ;, }, if, (, p1, ., getX, (, ), >, p2, ., getX, (, )]
[., getX, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getX, (, ), >, p2]
[;, }, if, (, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;]
[;, }, if, (, p1, ., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;]
[), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <, p2, ., getY, (, ), )]
[>, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <]
[., getX, (, ), >, p2, ., getX, (, ), ), {, return, 1, ;, }, if, (, p1, .]
[), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <, p2, ., getY, (, ), )]
[., getX, (, ), ), {, return, 1, ;, }, if, (, p1, ., getY, (, ), <, p2, .]
[;, }, if, (, p1, ., getY, (, ), <, p2, ., getY, (, ), ), {, return, -, 1]
[), {, return, -, 1, ;, }, if, (, p1, ., getY, (, ), >, p2, ., getY, (, )]
[<, p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getY, (, )]
[., getY, (, ), <, p2, ., getY, (, ), ), {, return, -, 1, ;, }, if, (, p1]
[), {, return, -, 1, ;, }, if, (, p1, ., getY, (, ), >, p2, ., getY, (, )]
[., getY, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getY, (, ), >, p2]
[;, }, if, (, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;]
[;, }, if, (, p1, ., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;]
[), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), )]
[>, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <]
[., getY, (, ), >, p2, ., getY, (, ), ), {, return, 1, ;, }, if, (, p1, .]
[), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), )]
[., getY, (, ), ), {, return, 1, ;, }, if, (, p1, ., getWeight, (, ), <, p2, .]
[;, }, if, (, p1, ., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -, 1]
[), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, )]
[<, p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, )]
[., getWeight, (, ), <, p2, ., getWeight, (, ), ), {, return, -, 1, ;, }, if, (, p1]
[), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, )]
[., getWeight, (, ), ), {, return, -, 1, ;, }, if, (, p1, ., getWeight, (, ), >, p2]
[;, }, if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;]
[;, }, if, (, p1, ., getWeight, (, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;]
[), {, return, 1, ;, }, return, 0, ;, }, }, ;, Arrays, ., sort, (, observations, ,, cmp, )]
[>, p2, ., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;, Arrays, .]
[., getWeight, (, ), >, p2, ., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }]
[), {, return, 1, ;, }, return, 0, ;, }, }, ;, Arrays, ., sort, (, observations, ,, cmp, )]
[., getWeight, (, ), ), {, return, 1, ;, }, return, 0, ;, }, }, ;, Arrays, ., sort, (]
[;, }, return, 0, ;, }, }, ;, Arrays, ., sort, (, observations, ,, cmp, ), ;, return, observations, ;]
[;, }, }, ;, Arrays, ., sort, (, observations, ,, cmp, ), ;, return, observations, ;, }, private, double, []
[;, return, observations, ;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx]
[., sort, (, observations, ,, cmp, ), ;, return, observations, ;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, []
[,, cmp, ), ;, return, observations, ;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {]
[), ;, return, observations, ;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {, final, int]
[;, }, private, double, [, ], basicGuess, (, WeightedObservedPoint, [, ], points, ), {, final, int, maxYIdx, =, findMaxY, (]
[;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =, points, []
[), ;, final, double, n, =, points, [, maxYIdx, ], ., getY, (, ), ;, final, double, m, =, points]
[;, final, double, m, =, points, [, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final]
[., getY, (, ), ;, final, double, m, =, points, [, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox]
[[, maxYIdx, ], ., getY, (, ), ;, final, double, m, =, points, [, maxYIdx, ], ., getX, (, )]
[], ., getY, (, ), ;, final, double, m, =, points, [, maxYIdx, ], ., getX, (, ), ;, double]
[;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (, m, -, n, ), /, 2]
[., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (, m, -]
[[, maxYIdx, ], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (]
[], ., getX, (, ), ;, double, fwhmApprox, ;, try, {, final, double, halfY, =, n, +, (, (, m]
[;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2]
[+, (, (, m, -, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx]
[;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2]
[), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double]
[/, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;]
[), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, )]
[-, n, ), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,]
[), /, 2, ), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, )]
[), ;, final, double, fwhmX1, =, interpolateXAtY, (, points, ,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double]
[;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -]
[,, maxYIdx, ,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1]
[,, -, 1, ,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY]
[,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox]
[,, halfY, ), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox]
[), ;, final, double, fwhmX2, =, interpolateXAtY, (, points, ,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2]
[;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, .]
[,, maxYIdx, ,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, )]
[,, 1, ,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox]
[,, halfY, ), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points]
[), ;, fwhmApprox, =, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points]
[=, fwhmX2, -, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -]
[;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX]
[-, fwhmX1, ;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ]]
[;, }, catch, (, OutOfRangeException, e, ), {, fwhmApprox, =, points, [, points, ., length, -, 1, ], ., getX]
[=, points, [, points, ., length, -, 1, ], ., getX, (, ), -, points, [, 0, ], ., getX]
[;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2, *, FastMath, ., log]
[-, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *]
[., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox]
[[, points, ., length, -, 1, ], ., getX, (, ), -, points, [, 0, ], ., getX, (, )]
[], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =]
[-, 1, ], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double]
[., length, -, 1, ], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }]
[], ., getX, (, ), -, points, [, 0, ], ., getX, (, ), ;, }, final, double, s, =]
[;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2, *, FastMath, ., log]
[., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (, 2]
[[, 0, ], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, .]
[], ., getX, (, ), ;, }, final, double, s, =, fwhmApprox, /, (, 2, *, FastMath, ., sqrt, (]
[;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY, (, WeightedObservedPoint]
[/, (, 2, *, FastMath, ., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return]
[;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY, (, WeightedObservedPoint]
[), ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY, (]
[*, FastMath, ., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, []
[), ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY, (]
[., sqrt, (, 2, *, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ], {]
[), ), ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY]
[*, FastMath, ., log, (, 2, ), ), ), ;, return, new, double, [, ], {, n, ,, m, ,]
[), ), ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int, findMaxY]
[., log, (, 2, ), ), ), ;, return, new, double, [, ], {, n, ,, m, ,, s, }]
[), ), ), ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, int]
[;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int]
[;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (, int]
[,, m, ,, s, }, ;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =]
[,, s, }, ;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;]
[}, ;, }, private, int, findMaxY, (, WeightedObservedPoint, [, ], points, ), {, int, maxYIdx, =, 0, ;, for, (]
[;, for, (, int, i, =, 1, ;, i, <, points, ., length, ;, i, ++, ), {, if, (]
[;, i, <, points, ., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (]
[;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >, points, [, maxYIdx, ]]
[<, points, ., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >]
[;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >, points, [, maxYIdx, ]]
[., length, ;, i, ++, ), {, if, (, points, [, i, ], ., getY, (, ), >, points, []
[), {, if, (, points, [, i, ], ., getY, (, ), >, points, [, maxYIdx, ], ., getY, (]
[++, ), {, if, (, points, [, i, ], ., getY, (, ), >, points, [, maxYIdx, ], ., getY]
[), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY, (, WeightedObservedPoint, [, ], points]
[>, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;]
[., getY, (, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =, i, ;, }]
[[, i, ], ., getY, (, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =]
[], ., getY, (, ), >, points, [, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =, i, ;]
[), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY, (, WeightedObservedPoint, [, ], points]
[., getY, (, ), ), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY, (]
[[, maxYIdx, ], ., getY, (, ), ), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;, }, private]
[], ., getY, (, ), ), {, maxYIdx, =, i, ;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY]
[=, i, ;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx]
[;, }, }, return, maxYIdx, ;, }, private, double, interpolateXAtY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int]
[;, }, private, double, interpolateXAtY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double, y, )]
[), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx]
[==, 0, ), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points]
[), {, throw, new, ZeroException, (, ), ;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx]
[;, }, final, WeightedObservedPoint, [, ], twoPoints, =, getInterpolationPointsForY, (, points, ,, startIdx, ,, idxStep, ,, y, ), ;, final]
[;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if]
[,, startIdx, ,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2]
[,, idxStep, ,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints]
[,, y, ), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1]
[), ;, final, WeightedObservedPoint, p1, =, twoPoints, [, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;]
[;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, ), ==, y, )]
[[, 0, ], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, )]
[], ;, final, WeightedObservedPoint, p2, =, twoPoints, [, 1, ], ;, if, (, p1, ., getY, (, ), ==, y]
[;, if, (, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;, }]
[[, 1, ], ;, if, (, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (]
[], ;, if, (, p1, ., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;]
[), {, return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==, y, )]
[==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==]
[., getY, (, ), ==, y, ), {, return, p1, ., getX, (, ), ;, }, if, (, p2, .]
[), {, return, p1, ., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==, y, )]
[;, }, if, (, p2, ., getY, (, ), ==, y, ), {, return, p2, ., getX, (, ), ;]
[., getX, (, ), ;, }, if, (, p2, ., getY, (, ), ==, y, ), {, return, p2, .]
[), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (]
[==, y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (]
[., getY, (, ), ==, y, ), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX]
[), {, return, p2, ., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (]
[;, }, return, p1, ., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), )]
[., getX, (, ), ;, }, return, p1, ., getX, (, ), +, (, (, (, y, -, p1, .]
[;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double]
[+, (, (, (, y, -, p1, ., getY, (, ), ), *, (, p2, ., getX, (, ), -]
[., getX, (, ), +, (, (, (, y, -, p1, ., getY, (, ), ), *, (, p2, .]
[;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,, double]
[), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,]
[/, (, p2, ., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private, WeightedObservedPoint, []
[), /, (, p2, ., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private, WeightedObservedPoint]
[*, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, ., getY]
[), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, .]
[-, p1, ., getY, (, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, )]
[), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, .]
[., getY, (, ), ), *, (, p2, ., getX, (, ), -, p1, ., getX, (, ), ), )]
[), /, (, p2, ., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private, WeightedObservedPoint]
[), ), /, (, p2, ., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private]
[-, p1, ., getX, (, ), ), ), /, (, p2, ., getY, (, ), -, p1, ., getY, (]
[., getX, (, ), -, p1, ., getX, (, ), ), ), /, (, p2, ., getY, (, ), -]
[), ), /, (, p2, ., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private]
[., getX, (, ), ), ), /, (, p2, ., getY, (, ), -, p1, ., getY, (, ), )]
[), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep, ,]
[), ), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep]
[-, p1, ., getY, (, ), ), ), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points]
[., getY, (, ), -, p1, ., getY, (, ), ), ), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (]
[), ), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int, startIdx, ,, int, idxStep]
[., getY, (, ), ), ), ;, }, private, WeightedObservedPoint, [, ], getInterpolationPointsForY, (, WeightedObservedPoint, [, ], points, ,, int]
[), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?]
[==, 0, ), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <]
[), {, throw, new, ZeroException, (, ), ;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?]
[;, }, for, (, int, i, =, startIdx, ;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i]
[;, idxStep, <, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i]
[;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points]
[?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {]
[<, 0, ?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep]
[?, i, +, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {]
[:, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, []
[>=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =]
[+, idxStep, >=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint]
[>=, 0, :, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =]
[:, i, +, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, []
[;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points]
[<, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final]
[+, idxStep, <, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ]]
[<, points, ., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final]
[;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points]
[., length, ;, i, +=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2]
[+=, idxStep, ), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i]
[), {, final, WeightedObservedPoint, p1, =, points, [, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep]
[;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,, p1, .]
[[, i, ], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y]
[], ;, final, WeightedObservedPoint, p2, =, points, [, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,, p1]
[;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), ), )]
[[, i, +, idxStep, ], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, .]
[], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), )]
[+, idxStep, ], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (]
[], ;, if, (, isBetween, (, y, ,, p1, ., getY, (, ), ,, p2, ., getY, (, ), )]
[), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;]
[,, p1, ., getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (, idxStep, <, 0]
[,, p2, ., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, []
[., getY, (, ), ,, p2, ., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {]
[), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }]
[., getY, (, ), ), ), {, if, (, idxStep, <, 0, ), {, return, new, WeightedObservedPoint, [, ], {]
[), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, []
[<, 0, ), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new]
[), {, return, new, WeightedObservedPoint, [, ], {, p2, ,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, []
[;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw, new]
[;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw, new]
[,, p1, }, ;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }]
[}, ;, }, else, {, return, new, WeightedObservedPoint, [, ], {, p1, ,, p2, }, ;, }, }, }, throw]
[;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }]
[;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }]
[,, p2, }, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY]
[}, ;, }, }, }, throw, new, OutOfRangeException, (, y, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;]
[;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value, >=]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1]
[,, Double, ., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, )]
[., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double]
[), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return, (, value]
[., POSITIVE_INFINITY, ), ;, }, private, boolean, isBetween, (, double, value, ,, double, boundary1, ,, double, boundary2, ), {, return]
[;, }, }, }]
[||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[&&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[>=, boundary1, &&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }]
[&&, value, <=, boundary2, ), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[<=, boundary2, ), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[), ||, (, value, >=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
[&&, value, <=, boundary1, ), ;, }, }, }]
[>=, boundary2, &&, value, <=, boundary1, ), ;, }, }, }]
[&&, value, <=, boundary1, ), ;, }, }, }]
[), ;, }, }, }]
[<=, boundary1, ), ;, }, }, }]
[), ;, }, }, }]
