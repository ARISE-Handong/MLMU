[class, ShapeUtilities, {, private, ShapeUtilities, (, ), {, }, public, static, Shape, clone, (, Shape, shape, ), {, if, (]
[class, ShapeUtilities, {, private, ShapeUtilities, (, ), {, }, public, static, Shape, clone, (, Shape, shape, ), {, if, (]
[}, public, static, Shape, clone, (, Shape, shape, ), {, if, (, shape, instanceof, Cloneable, ), {, try, {, return]
[Shape, clone, (, Shape, shape, ), {, if, (, shape, instanceof, Cloneable, ), {, try, {, return, (, Shape, )]
[Shape, clone, (, Shape, shape, ), {, if, (, shape, instanceof, Cloneable, ), {, try, {, return, (, Shape, )]
[shape, ), {, if, (, shape, instanceof, Cloneable, ), {, try, {, return, (, Shape, ), ObjectUtilities, ., clone, (]
[), ObjectUtilities, ., clone, (, shape, ), ;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =]
[clone, (, shape, ), ;, }, catch, (, CloneNotSupportedException, cnse, ), {, }, }, Shape, result, =, null, ;, return]
[null, ;, return, result, ;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (]
[null, ;, return, result, ;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (]
[null, ;, return, result, ;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (]
[;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (, s1, instanceof, Line2D, &&]
[;, }, public, static, boolean, equal, (, Shape, s1, ,, Shape, s2, ), {, if, (, s1, instanceof, Line2D, &&]
[(, Shape, s1, ,, Shape, s2, ), {, if, (, s1, instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return]
[s1, ,, Shape, s2, ), {, if, (, s1, instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return, equal, (]
[s2, ), {, if, (, s1, instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return, equal, (, (, Line2D, )]
[{, if, (, s1, instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return, equal, (, (, Line2D, ), s1, ,]
[s1, instanceof, Line2D, &&, s2, instanceof, Line2D, ), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, )]
[), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (]
[(, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&]
[(, (, Line2D, ), s1, ,, (, Line2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&]
[(, Line2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return]
[), s2, ), ;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (]
[;, }, else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, )]
[else, if, (, s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, ), s1, ,]
[s1, instanceof, Ellipse2D, &&, s2, instanceof, Ellipse2D, ), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, )]
[), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (]
[(, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&]
[(, (, Ellipse2D, ), s1, ,, (, Ellipse2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&]
[(, Ellipse2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return]
[), s2, ), ;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (]
[;, }, else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, )]
[else, if, (, s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, ), s1, ,]
[s1, instanceof, Arc2D, &&, s2, instanceof, Arc2D, ), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, )]
[), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (]
[(, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&]
[(, (, Arc2D, ), s1, ,, (, Arc2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&]
[(, Arc2D, ), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return]
[), s2, ), ;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (]
[;, }, else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, )]
[else, if, (, s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, ), s1, ,]
[s1, instanceof, Polygon, &&, s2, instanceof, Polygon, ), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, )]
[), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (]
[), {, return, equal, (, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (]
[(, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&]
[(, (, Polygon, ), s1, ,, (, Polygon, ), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&]
[(, Polygon, ), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return]
[), s2, ), ;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (]
[;, }, else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, )]
[else, if, (, s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, ), s1, ,]
[s1, instanceof, GeneralPath, &&, s2, instanceof, GeneralPath, ), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, )]
[), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return]
[), {, return, equal, (, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return]
[(, (, GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return, ObjectUtilities, ., equal, (]
[GeneralPath, ), s1, ,, (, GeneralPath, ), s2, ), ;, }, else, {, return, ObjectUtilities, ., equal, (, s1, ,]
[,, s2, ), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (]
[,, s2, ), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (]
[), ;, }, }, public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==]
[public, static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==, null, ), {, return]
[static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==, null, ), {, return, (]
[static, boolean, equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==, null, ), {, return, (]
[equal, (, Line2D, l1, ,, Line2D, l2, ), {, if, (, l1, ==, null, ), {, return, (, l2, ==]
[l2, ), {, if, (, l1, ==, null, ), {, return, (, l2, ==, null, ), ;, }, if, (]
[l2, ), {, if, (, l1, ==, null, ), {, return, (, l2, ==, null, ), ;, }, if, (]
[{, if, (, l1, ==, null, ), {, return, (, l2, ==, null, ), ;, }, if, (, l2, ==]
[==, null, ), {, return, (, l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return]
[(, l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (]
[l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !]
[l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !]
[l2, ==, null, ), ;, }, if, (, l2, ==, null, ), {, return, false, ;, }, if, (, !]
[l2, ==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1, (, ), ., equals, (]
[l2, ==, null, ), {, return, false, ;, }, if, (, !, l1, ., getP1, (, ), ., equals, (]
[if, (, !, l1, ., getP1, (, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return]
[getP1, (, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if, (]
[(, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if, (, !]
[(, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if, (, !]
[(, ), ., equals, (, l2, ., getP1, (, ), ), ), {, return, false, ;, }, if, (, !]
[(, ), ), ), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), ., equals, (]
[(, ), ), ), {, return, false, ;, }, if, (, !, l1, ., getP2, (, ), ., equals, (]
[if, (, !, l1, ., getP2, (, ), ., equals, (, l2, ., getP2, (, ), ), ), {, return]
[., getP2, (, ), ., equals, (, l2, ., getP2, (, ), ), ), {, return, false, ;, }, return]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (]
[return, true, ;, }, public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==]
[public, static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==, null, ), {, return]
[static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==, null, ), {, return, (]
[static, boolean, equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==, null, ), {, return, (]
[equal, (, Ellipse2D, e1, ,, Ellipse2D, e2, ), {, if, (, e1, ==, null, ), {, return, (, e2, ==]
[e2, ), {, if, (, e1, ==, null, ), {, return, (, e2, ==, null, ), ;, }, if, (]
[e2, ), {, if, (, e1, ==, null, ), {, return, (, e2, ==, null, ), ;, }, if, (]
[{, if, (, e1, ==, null, ), {, return, (, e2, ==, null, ), ;, }, if, (, e2, ==]
[==, null, ), {, return, (, e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return]
[(, e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (]
[e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !]
[e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !]
[e2, ==, null, ), ;, }, if, (, e2, ==, null, ), {, return, false, ;, }, if, (, !]
[e2, ==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (]
[e2, ==, null, ), {, return, false, ;, }, if, (, !, e1, ., getFrame, (, ), ., equals, (]
[if, (, !, e1, ., getFrame, (, ), ., equals, (, e2, ., getFrame, (, ), ), ), {, return]
[., getFrame, (, ), ., equals, (, e2, ., getFrame, (, ), ), ), {, return, false, ;, }, return]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (]
[return, true, ;, }, public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==]
[public, static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==, null, ), {, return]
[static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==, null, ), {, return, (]
[static, boolean, equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==, null, ), {, return, (]
[equal, (, Arc2D, a1, ,, Arc2D, a2, ), {, if, (, a1, ==, null, ), {, return, (, a2, ==]
[a2, ), {, if, (, a1, ==, null, ), {, return, (, a2, ==, null, ), ;, }, if, (]
[a2, ), {, if, (, a1, ==, null, ), {, return, (, a2, ==, null, ), ;, }, if, (]
[{, if, (, a1, ==, null, ), {, return, (, a2, ==, null, ), ;, }, if, (, a2, ==]
[==, null, ), {, return, (, a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return]
[(, a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (]
[a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !]
[a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !]
[a2, ==, null, ), ;, }, if, (, a2, ==, null, ), {, return, false, ;, }, if, (, !]
[a2, ==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (]
[a2, ==, null, ), {, return, false, ;, }, if, (, !, a1, ., getFrame, (, ), ., equals, (]
[if, (, !, a1, ., getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), ), {, return]
[getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (]
[getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (]
[getFrame, (, ), ., equals, (, a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (]
[a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=]
[a2, ., getFrame, (, ), ), ), {, return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=]
[return, false, ;, }, if, (, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return]
[(, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (]
[(, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (]
[(, a1, ., getAngleStart, (, ), !=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (]
[!=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=]
[!=, a2, ., getAngleStart, (, ), ), {, return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=]
[return, false, ;, }, if, (, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return]
[(, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (]
[(, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (]
[(, a1, ., getAngleExtent, (, ), !=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (]
[!=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=]
[!=, a2, ., getAngleExtent, (, ), ), {, return, false, ;, }, if, (, a1, ., getArcType, (, ), !=]
[return, false, ;, }, if, (, a1, ., getArcType, (, ), !=, a2, ., getArcType, (, ), ), {, return]
[if, (, a1, ., getArcType, (, ), !=, a2, ., getArcType, (, ), ), {, return, false, ;, }, return]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (]
[return, true, ;, }, public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==]
[public, static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==, null, ), {, return]
[static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[static, boolean, equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[equal, (, Polygon, p1, ,, Polygon, p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[{, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==]
[==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=]
[), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=]
[==, null, ), {, return, false, ;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return]
[false, ;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (]
[;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !]
[p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[p1, ., npoints, !=, p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,]
[p2, ., npoints, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,]
[;, }, if, (, !, Arrays, ., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return]
[Arrays, ., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (]
[., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !]
[., equals, (, p1, ., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !]
[., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[., xpoints, ,, p2, ., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,]
[., xpoints, ), ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,]
[;, }, if, (, !, Arrays, ., equals, (, p1, ., ypoints, ,, p2, ., ypoints, ), ), {, return]
[!, Arrays, ., equals, (, p1, ., ypoints, ,, p2, ., ypoints, ), ), {, return, false, ;, }, return]
[;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (]
[;, }, return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (]
[return, true, ;, }, public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==]
[public, static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==, null, ), {, return]
[static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[static, boolean, equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==, null, ), {, return, (]
[equal, (, GeneralPath, p1, ,, GeneralPath, p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[p2, ), {, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (]
[{, if, (, p1, ==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==]
[==, null, ), {, return, (, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[(, p2, ==, null, ), ;, }, if, (, p2, ==, null, ), {, return, false, ;, }, if, (]
[}, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=]
[}, if, (, p2, ==, null, ), {, return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=]
[return, false, ;, }, if, (, p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), ), {, return]
[p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =]
[p1, ., getWindingRule, (, ), !=, p2, ., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =]
[), !=, p2, ., getWindingRule, (, ), ), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (]
[), ), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =]
[), ), {, return, false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =]
[false, ;, }, PathIterator, iterator1, =, p1, ., getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (]
[getPathIterator, (, null, ), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null, ), ;, double, [, ], d1, =]
[), ;, PathIterator, iterator2, =, p2, ., getPathIterator, (, null, ), ;, double, [, ], d1, =, new, double, []
[(, null, ), ;, double, [, ], d1, =, new, double, [, 6, ], ;, double, [, ], d2, =]
[;, double, [, ], d1, =, new, double, [, 6, ], ;, double, [, ], d2, =, new, double, []
[new, double, [, 6, ], ;, double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =]
[new, double, [, 6, ], ;, double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =]
[new, double, [, 6, ], ;, double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =]
[double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =, iterator1, ., isDone, (, ), &&]
[double, [, ], d2, =, new, double, [, 6, ], ;, boolean, done, =, iterator1, ., isDone, (, ), &&]
[6, ], ;, boolean, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (]
[], ;, boolean, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !]
[iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (]
[iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (]
[iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (]
[iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, ), !=]
[iterator2, ., isDone, (, ), ;, while, (, !, done, ), {, if, (, iterator1, ., isDone, (, ), !=]
[!, done, ), {, if, (, iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return]
[iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return, false, ;, }, int, seg1, =]
[iterator1, ., isDone, (, ), !=, iterator2, ., isDone, (, ), ), {, return, false, ;, }, int, seg1, =]
[), !=, iterator2, ., isDone, (, ), ), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (]
[), ), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =]
[), ), {, return, false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =]
[false, ;, }, int, seg1, =, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (]
[=, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (]
[=, iterator1, ., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (]
[., currentSegment, (, d1, ), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=]
[), ;, int, seg2, =, iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return]
[iterator2, ., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (]
[., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !]
[., currentSegment, (, d2, ), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !]
[), ;, if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (]
[if, (, seg1, !=, seg2, ), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,]
[), {, return, false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return]
[false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return, false, ;, }]
[false, ;, }, if, (, !, Arrays, ., equals, (, d1, ,, d2, ), ), {, return, false, ;, }]
[Arrays, ., equals, (, d1, ,, d2, ), ), {, return, false, ;, }, iterator1, ., next, (, ), ;]
[Arrays, ., equals, (, d1, ,, d2, ), ), {, return, false, ;, }, iterator1, ., next, (, ), ;]
[d2, ), ), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;]
[), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =]
[), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =]
[), {, return, false, ;, }, iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =]
[iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&]
[iterator1, ., next, (, ), ;, iterator2, ., next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&]
[next, (, ), ;, done, =, iterator1, ., isDone, (, ), &&, iterator2, ., isDone, (, ), ;, }, return]
[true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, ), {, if, (]
[true, ;, }, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, ), {, if, (]
[}, public, static, Shape, createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, ), {, if, (, shape, ==]
[createTranslatedShape, (, Shape, shape, ,, double, transX, ,, double, transY, ), {, if, (, shape, ==, null, ), {, throw]
[shape, ,, double, transX, ,, double, transY, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =]
[), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =]
[shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,]
[new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY, ), ;, return]
[new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY, ), ;, return]
[), ;, }, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, transX, ,, transY, ), ;, return, transform, ., createTransformedShape, (]
[public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, ), {, if, (]
[public, static, Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, ), {, if, (]
[Shape, createTranslatedShape, (, Shape, shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, ), {, if, (, shape, ==]
[shape, ,, RectangleAnchor, anchor, ,, double, locationX, ,, double, locationY, ), {, if, (, shape, ==, null, ), {, throw]
[anchor, ,, double, locationX, ,, double, locationY, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (]
[locationY, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (]
[locationY, ), {, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (]
[{, if, (, shape, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==, null, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'shape' argument.", ), ;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =]
[;, }, if, (, anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =]
[anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (]
[anchor, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (]
[new, IllegalArgumentException, (, "Null 'anchor' argument.", ), ;, }, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,]
[}, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =]
[}, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =]
[RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (]
[RectangleAnchor, ., coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (]
[coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -]
[coordinates, (, shape, ., getBounds2D, (, ), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -]
[), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,]
[), ,, anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,]
[anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -]
[anchor, ), ;, AffineTransform, transform, =, AffineTransform, ., getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -]
[getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return]
[getTranslateInstance, (, locationX, -, anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return]
[anchorPoint, ., getX, (, ), ,, locationY, -, anchorPoint, ., getY, (, ), ), ;, return, transform, ., createTransformedShape, (]
[public, static, Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x, ,, float, y, ), {, if, (]
[public, static, Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x, ,, float, y, ), {, if, (]
[Shape, rotateShape, (, Shape, base, ,, double, angle, ,, float, x, ,, float, y, ), {, if, (, base, ==]
[base, ,, double, angle, ,, float, x, ,, float, y, ), {, if, (, base, ==, null, ), {, return]
[x, ,, float, y, ), {, if, (, base, ==, null, ), {, return, null, ;, }, AffineTransform, rotate, =]
[x, ,, float, y, ), {, if, (, base, ==, null, ), {, return, null, ;, }, AffineTransform, rotate, =]
[), {, if, (, base, ==, null, ), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (]
[if, (, base, ==, null, ), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,]
[base, ==, null, ), {, return, null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,]
[null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =]
[null, ;, }, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =]
[rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =, rotate, ., createTransformedShape, (]
[getRotateInstance, (, angle, ,, x, ,, y, ), ;, Shape, result, =, rotate, ., createTransformedShape, (, base, ), ;, return]
[(, Graphics2D, g2, ,, Shape, shape, ,, double, angle, ,, float, x, ,, float, y, ), {, AffineTransform, saved, =]
[(, Graphics2D, g2, ,, Shape, shape, ,, double, angle, ,, float, x, ,, float, y, ), {, AffineTransform, saved, =]
[,, float, x, ,, float, y, ), {, AffineTransform, saved, =, g2, ., getTransform, (, ), ;, AffineTransform, rotate, =]
[,, float, x, ,, float, y, ), {, AffineTransform, saved, =, g2, ., getTransform, (, ), ;, AffineTransform, rotate, =]
[float, y, ), {, AffineTransform, saved, =, g2, ., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (]
[), {, AffineTransform, saved, =, g2, ., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,]
[AffineTransform, saved, =, g2, ., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,]
[g2, ., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;]
[g2, ., getTransform, (, ), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;]
[), ;, AffineTransform, rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (]
[rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;]
[rotate, =, AffineTransform, ., getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;]
[getRotateInstance, (, angle, ,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (]
[,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;]
[,, x, ,, y, ), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;]
[), ;, g2, ., transform, (, rotate, ), ;, g2, ., draw, (, shape, ), ;, g2, ., setTransform, (]
[., draw, (, shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =]
[shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, )]
[shape, ), ;, g2, ., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, )]
[., setTransform, (, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math, ., pow, (]
[(, saved, ), ;, }, private, static, final, float, SQRT2, =, (, float, ), Math, ., pow, (, 2.0, ,]
[2.0, ,, 0.5, ), ;, public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =]
[public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[public, static, Shape, createDiagonalCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[(, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[(, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -]
[,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -]
[t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,]
[t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,, -]
[GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +]
[new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;]
[new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;]
[;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[p0, ., moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -]
[moveTo, (, -, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +]
[-, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,]
[-, l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,]
[l, -, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -]
[t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -]
[l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;]
[l, +, t, ), ;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;]
[;, p0, ., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[., lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[lineTo, (, -, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -]
[-, l, +, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *]
[t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;]
[t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;]
[-, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[-, t, ), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -]
[p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,]
[p0, ., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,]
[., lineTo, (, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -]
[(, 0.0f, ,, -, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -]
[-, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;]
[-, t, *, SQRT2, ), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;]
[), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (]
[p0, ., lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +]
[lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,]
[lineTo, (, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,]
[(, l, -, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -]
[-, t, ,, -, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +]
[-, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;]
[-, l, -, t, ), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;]
[), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (]
[p0, ., lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *]
[lineTo, (, l, +, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,]
[+, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;]
[+, t, ,, -, l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;]
[l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (]
[l, +, t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (]
[t, ), ;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +]
[;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,]
[;, p0, ., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,]
[., lineTo, (, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -]
[t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;]
[t, *, SQRT2, ,, 0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;]
[0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[0.0f, ), ;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -]
[., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,]
[., lineTo, (, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,]
[(, l, +, t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +]
[t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;]
[t, ,, l, -, t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;]
[t, ), ;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[;, p0, ., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,]
[., lineTo, (, l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *]
[l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;]
[l, -, t, ,, l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;]
[l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[l, +, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (]
[+, t, ), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -]
[), ;, p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +]
[p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,]
[p0, ., lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,]
[lineTo, (, 0.0f, ,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +]
[,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;]
[,, t, *, SQRT2, ), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -]
[., lineTo, (, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -]
[(, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,]
[(, -, l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,]
[l, +, t, ,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -]
[,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;]
[,, l, +, t, ), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;]
[), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[), ;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (]
[;, p0, ., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -]
[., lineTo, (, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *]
[(, -, l, -, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,]
[-, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;]
[-, t, ,, l, -, t, ), ;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;]
[;, p0, ., lineTo, (, -, t, *, SQRT2, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return]
[;, return, p0, ;, }, public, static, Shape, createRegularCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =]
[public, static, Shape, createRegularCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[public, static, Shape, createRegularCross, (, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[(, float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[float, l, ,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -]
[,, float, t, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, ,]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, ,, t, ), ;]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, ,, t, ), ;]
[=, new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (]
[new, GeneralPath, (, ), ;, p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -]
[(, ), ;, p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,]
[p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;]
[p0, ., moveTo, (, -, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;]
[-, l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (]
[l, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -]
[t, ), ;, p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,]
[p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;]
[p0, ., lineTo, (, -, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;]
[-, t, ,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (]
[,, t, ), ;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,]
[;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;]
[;, p0, ., lineTo, (, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;]
[(, -, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (]
[t, ,, l, ), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,]
[), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;]
[), ;, p0, ., lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;]
[lineTo, (, t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (]
[t, ,, l, ), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,]
[), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;]
[), ;, p0, ., lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;]
[lineTo, (, t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (]
[t, ,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,]
[,, t, ), ;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -]
[;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;]
[;, p0, ., lineTo, (, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;]
[(, l, ,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (]
[,, t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,]
[t, ), ;, p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -]
[p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;]
[p0, ., lineTo, (, l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;]
[l, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (]
[-, t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,]
[t, ), ;, p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -]
[p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;]
[p0, ., lineTo, (, t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;]
[t, ,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (]
[,, -, t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -]
[t, ), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,]
[), ;, p0, ., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -]
[., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;]
[., lineTo, (, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;]
[,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (]
[-, l, ), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -]
[), ;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,]
[;, p0, ., lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -]
[lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;]
[lineTo, (, -, t, ,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;]
[,, -, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (]
[-, l, ), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -]
[), ;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,]
[;, p0, ., lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -]
[lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;]
[lineTo, (, -, t, ,, -, t, ), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;]
[), ;, p0, ., lineTo, (, -, l, ,, -, t, ), ;, p0, ., closePath, (, ), ;, return]
[closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =]
[p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[p0, ;, }, public, static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[static, Shape, createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[createDiamond, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,]
[(, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;]
[=, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (]
[GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;]
[(, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (]
[,, -, s, ), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,]
[), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;]
[), ;, p0, ., lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;]
[lineTo, (, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (]
[(, s, ,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -]
[,, 0.0f, ), ;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,]
[;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;]
[;, p0, ., lineTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;]
[s, ), ;, p0, ., lineTo, (, -, s, ,, 0.0f, ), ;, p0, ., closePath, (, ), ;, return]
[closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =]
[p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[p0, ;, }, public, static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[static, Shape, createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[createUpTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,]
[(, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;]
[), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;]
[=, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (]
[GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;]
[;, p0, ., moveTo, (, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;]
[(, 0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (]
[0.0f, ,, -, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -]
[-, s, ), ;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,]
[;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;]
[;, p0, ., lineTo, (, s, ,, s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;]
[s, ), ;, p0, ., lineTo, (, -, s, ,, s, ), ;, p0, ., closePath, (, ), ;, return]
[closePath, (, ), ;, return, p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =]
[p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[p0, ;, }, public, static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;]
[static, Shape, createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (]
[createDownTriangle, (, float, s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,]
[s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, s, ), ;]
[s, ), {, GeneralPath, p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, s, ), ;]
[p0, =, new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (]
[new, GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,]
[GeneralPath, (, ), ;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -]
[;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;]
[;, p0, ., moveTo, (, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;]
[(, 0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (]
[0.0f, ,, s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -]
[s, ), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,]
[), ;, p0, ., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -]
[., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;]
[., lineTo, (, s, ,, -, s, ), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;]
[), ;, p0, ., lineTo, (, -, s, ,, -, s, ), ;, p0, ., closePath, (, ), ;, return]
[;, return, p0, ;, }, public, static, Shape, createLineRegion, (, Line2D, line, ,, float, width, ), {, GeneralPath, result, =]
[createLineRegion, (, Line2D, line, ,, float, width, ), {, GeneralPath, result, =, new, GeneralPath, (, ), ;, float, x1, =]
[line, ,, float, width, ), {, GeneralPath, result, =, new, GeneralPath, (, ), ;, float, x1, =, (, float, )]
[line, ,, float, width, ), {, GeneralPath, result, =, new, GeneralPath, (, ), ;, float, x1, =, (, float, )]
[new, GeneralPath, (, ), ;, float, x1, =, (, float, ), line, ., getX1, (, ), ;, float, x2, =]
[), ;, float, x1, =, (, float, ), line, ., getX1, (, ), ;, float, x2, =, (, float, )]
[), ;, float, x1, =, (, float, ), line, ., getX1, (, ), ;, float, x2, =, (, float, )]
[., getX1, (, ), ;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =]
[), ;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =, (, float, )]
[), ;, float, x2, =, (, float, ), line, ., getX2, (, ), ;, float, y1, =, (, float, )]
[., getX2, (, ), ;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =]
[), ;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =, (, float, )]
[), ;, float, y1, =, (, float, ), line, ., getY1, (, ), ;, float, y2, =, (, float, )]
[line, ., getY1, (, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (]
[line, ., getY1, (, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (]
[., getY1, (, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (]
[., getY1, (, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (]
[(, ), ;, float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (, x2, -]
[float, y2, =, (, float, ), line, ., getY2, (, ), ;, if, (, (, x2, -, x1, ), !=]
[line, ., getY2, (, ), ;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =]
[line, ., getY2, (, ), ;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =]
[), ;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (]
[), ;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (]
[;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (]
[;, if, (, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (]
[(, (, x2, -, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -]
[-, x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /]
[x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (]
[x1, ), !=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (]
[!=, 0.0, ), {, double, theta, =, Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -]
[Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =]
[Math, ., atan, (, (, y2, -, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =]
[(, (, y2, -, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, )]
[(, (, y2, -, y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, )]
[y1, ), /, (, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (]
[(, x2, -, x1, ), ), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *]
[), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =]
[), ;, float, dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =]
[dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =, (, float, )]
[dx, =, (, float, ), Math, ., sin, (, theta, ), *, width, ;, float, dy, =, (, float, )]
[), Math, ., sin, (, theta, ), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (]
[sin, (, theta, ), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *]
[theta, ), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;]
[theta, ), *, width, ;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;]
[;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (]
[;, float, dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (]
[dy, =, (, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -]
[(, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,]
[(, float, ), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,]
[), Math, ., cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +]
[cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;]
[cos, (, theta, ), *, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;]
[*, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (]
[*, width, ;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (]
[;, result, ., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +]
[., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,]
[., moveTo, (, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,]
[(, x1, -, dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -]
[dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;]
[dx, ,, y1, +, dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;]
[dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (]
[dy, ), ;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (]
[;, result, ., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +]
[., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,]
[., lineTo, (, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,]
[(, x1, +, dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -]
[dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;]
[dx, ,, y1, -, dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;]
[dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (]
[dy, ), ;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (]
[;, result, ., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -]
[., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,]
[., lineTo, (, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,]
[(, x2, +, dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +]
[dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;]
[dx, ,, y2, -, dy, ), ;, result, ., lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;]
[lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {]
[lineTo, (, x2, -, dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {]
[dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (]
[dx, ,, y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (]
[y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -]
[y2, +, dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -]
[dy, ), ;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /]
[;, result, ., closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,]
[closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;]
[closePath, (, ), ;, }, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;]
[}, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (]
[}, else, {, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (]
[{, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +]
[{, result, ., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +]
[., moveTo, (, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /]
[(, x1, -, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,]
[width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;]
[width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;]
[y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (]
[y1, ), ;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (]
[;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +]
[;, result, ., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +]
[., lineTo, (, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /]
[(, x1, +, width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,]
[width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;]
[width, /, 2.0f, ,, y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;]
[y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (]
[y1, ), ;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (]
[;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -]
[;, result, ., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -]
[., lineTo, (, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /]
[(, x2, +, width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,]
[width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;]
[width, /, 2.0f, ,, y2, ), ;, result, ., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;]
[., lineTo, (, x2, -, width, /, 2.0f, ,, y2, ), ;, result, ., closePath, (, ), ;, }, return]
[}, return, result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {]
[result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {, x, =]
[result, ;, }, public, static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {, x, =]
[static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {, x, =, Math, ., max, (]
[static, Point2D, getPointInRectangle, (, double, x, ,, double, y, ,, Rectangle2D, area, ), {, x, =, Math, ., max, (]
[,, double, y, ,, Rectangle2D, area, ), {, x, =, Math, ., max, (, area, ., getMinX, (, ), ,]
[,, double, y, ,, Rectangle2D, area, ), {, x, =, Math, ., max, (, area, ., getMinX, (, ), ,]
[Rectangle2D, area, ), {, x, =, Math, ., max, (, area, ., getMinX, (, ), ,, Math, ., min, (]
[), {, x, =, Math, ., max, (, area, ., getMinX, (, ), ,, Math, ., min, (, x, ,]
[), {, x, =, Math, ., max, (, area, ., getMinX, (, ), ,, Math, ., min, (, x, ,]
[area, ., getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;]
[getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =]
[getMinX, (, ), ,, Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =]
[Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (]
[Math, ., min, (, x, ,, area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (]
[area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,]
[area, ., getMaxX, (, ), ), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,]
[), ), ), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (]
[), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,]
[), ;, y, =, Math, ., max, (, area, ., getMinY, (, ), ,, Math, ., min, (, y, ,]
[., getMinY, (, ), ,, Math, ., min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return]
[Math, ., min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double, (]
[min, (, y, ,, area, ., getMaxY, (, ), ), ), ;, return, new, Point2D, ., Double, (, x, ,]
[,, y, ), ;, }, public, static, boolean, contains, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[,, y, ), ;, }, public, static, boolean, contains, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[(, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX, (, ), ;, double, y0, =]
[(, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX, (, ), ;, double, y0, =]
[x0, =, rect1, ., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =]
[x0, =, rect1, ., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =]
[y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, y, =]
[y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, y, =]
[x, =, rect2, ., getX, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, w, =]
[x, =, rect2, ., getX, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, w, =]
[y, =, rect2, ., getY, (, ), ;, double, w, =, rect2, ., getWidth, (, ), ;, double, h, =]
[y, =, rect2, ., getY, (, ), ;, double, w, =, rect2, ., getWidth, (, ), ;, double, h, =]
[;, double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return]
[double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (]
[double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (]
[double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (]
[double, w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (]
[w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (]
[w, =, rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (]
[rect2, ., getWidth, (, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=]
[(, ), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&]
[), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (]
[), ;, double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (]
[double, h, =, rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=]
[rect2, ., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&]
[., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (]
[., getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (]
[getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (]
[getHeight, (, ), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (]
[), ;, return, (, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +]
[(, (, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=]
[(, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (]
[(, x, >=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (]
[>=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +]
[>=, x0, ), &&, (, y, >=, y0, ), &&, (, (, x, +, w, ), <=, (, x0, +]
[), &&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&]
[&&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (]
[&&, (, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (]
[(, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (]
[(, (, x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (]
[x, +, w, ), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +]
[), <=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=]
[<=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (]
[<=, (, x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (]
[x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (, y0, +]
[x0, +, rect1, ., getWidth, (, ), ), ), &&, (, (, y, +, h, ), <=, (, y0, +]
[), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[), ), ), ;, }, public, static, boolean, intersects, (, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =]
[(, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX, (, ), ;, double, y0, =]
[(, Rectangle2D, rect1, ,, Rectangle2D, rect2, ), {, double, x0, =, rect1, ., getX, (, ), ;, double, y0, =]
[x0, =, rect1, ., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =]
[x0, =, rect1, ., getX, (, ), ;, double, y0, =, rect1, ., getY, (, ), ;, double, x, =]
[y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, width, =]
[y0, =, rect1, ., getY, (, ), ;, double, x, =, rect2, ., getX, (, ), ;, double, width, =]
[x, =, rect2, ., getX, (, ), ;, double, width, =, rect2, ., getWidth, (, ), ;, double, y, =]
[x, =, rect2, ., getX, (, ), ;, double, width, =, rect2, ., getWidth, (, ), ;, double, y, =]
[width, =, rect2, ., getWidth, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, height, =]
[width, =, rect2, ., getWidth, (, ), ;, double, y, =, rect2, ., getY, (, ), ;, double, height, =]
[;, double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[double, y, =, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (]
[=, rect2, ., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +]
[., getY, (, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=]
[(, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&]
[(, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&]
[(, ), ;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&]
[;, double, height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +]
[height, =, rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=]
[rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&]
[rect2, ., getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&]
[getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=]
[getHeight, (, ), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=]
[), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +]
[), ;, return, (, x, +, width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +]
[width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&]
[width, >=, x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&]
[x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=]
[x0, &&, y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=]
[y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +]
[y, +, height, >=, y0, &&, x, <=, x0, +, rect1, ., getWidth, (, ), &&, y, <=, y0, +]
[), ), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[), ;, }, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (]
[}, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=]
[}, public, static, boolean, isPointInRect, (, double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=]
[double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=, rect, ., getMinX, (, ), &&]
[double, x, ,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=, rect, ., getMinX, (, ), &&]
[,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=]
[,, double, y, ,, Rectangle2D, rect, ), {, return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=]
[), {, return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&]
[), {, return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&]
[return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=]
[return, (, x, >=, rect, ., getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=]
[getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&]
[getMinX, (, ), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&]
[), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=]
[), &&, x, <=, rect, ., getMaxX, (, ), &&, y, >=, rect, ., getMinY, (, ), &&, y, <=]
[(, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =]
[(, ), ), ;, }, public, static, boolean, clipLine, (, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =]
[(, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, ., getX1, (, ), ;, double, y1, =]
[(, Line2D, line, ,, Rectangle2D, rect, ), {, double, x1, =, line, ., getX1, (, ), ;, double, y1, =]
[x1, =, line, ., getX1, (, ), ;, double, y1, =, line, ., getY1, (, ), ;, double, x2, =]
[x1, =, line, ., getX1, (, ), ;, double, y1, =, line, ., getY1, (, ), ;, double, x2, =]
[y1, =, line, ., getY1, (, ), ;, double, x2, =, line, ., getX2, (, ), ;, double, y2, =]
[y1, =, line, ., getY1, (, ), ;, double, x2, =, line, ., getX2, (, ), ;, double, y2, =]
[x2, =, line, ., getX2, (, ), ;, double, y2, =, line, ., getY2, (, ), ;, double, minX, =]
[x2, =, line, ., getX2, (, ), ;, double, y2, =, line, ., getY2, (, ), ;, double, minX, =]
[y2, =, line, ., getY2, (, ), ;, double, minX, =, rect, ., getMinX, (, ), ;, double, maxX, =]
[y2, =, line, ., getY2, (, ), ;, double, minX, =, rect, ., getMinX, (, ), ;, double, maxX, =]
[minX, =, rect, ., getMinX, (, ), ;, double, maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =]
[minX, =, rect, ., getMinX, (, ), ;, double, maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =]
[maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =, rect, ., getMinY, (, ), ;, double, maxY, =]
[maxX, =, rect, ., getMaxX, (, ), ;, double, minY, =, rect, ., getMinY, (, ), ;, double, maxY, =]
[minY, =, rect, ., getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =]
[minY, =, rect, ., getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =]
[getMinY, (, ), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (]
[), ;, double, maxY, =, rect, ., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (, x1, ,]
[., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =]
[., getMaxY, (, ), ;, int, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =]
[;, int, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (]
[f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,]
[(, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (]
[(, x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (]
[x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (]
[x1, ,, y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (]
[y1, ), ;, int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |]
[int, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=]
[outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (]
[outcode, (, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (]
[(, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (]
[(, x2, ,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (]
[,, y2, ), ;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &]
[;, while, (, (, f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &, f2, ), !=]
[f1, |, f2, ), !=, 0, ), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return]
[), {, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =]
[{, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =, (]
[{, if, (, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =, (]
[(, (, f1, &, f2, ), !=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -]
[!=, 0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =]
[0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (]
[0, ), {, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (]
[{, return, false, ;, }, double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2, -]
[double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2, -, y1, ), ;, if, (]
[double, dx, =, (, x2, -, x1, ), ;, double, dy, =, (, y2, -, y1, ), ;, if, (]
[=, (, x2, -, x1, ), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=]
[), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (]
[), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (]
[), ;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (]
[;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (]
[;, double, dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (]
[dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &]
[dy, =, (, y2, -, y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &]
[y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==]
[y1, ), ;, if, (, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==]
[(, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&]
[(, f1, !=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&]
[!=, 0, ), {, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=]
[{, if, (, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {]
[(, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =]
[(, (, f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =]
[f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[f1, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -]
[==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *]
[., OUT_LEFT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;]
[!=, 0.0, ), {, y1, =, y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =]
[y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (]
[y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (]
[y1, +, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (]
[+, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (]
[+, (, minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (]
[minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &]
[minX, -, x1, ), *, dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &]
[dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==]
[dy, /, dx, ;, x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==]
[x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&]
[x1, =, minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&]
[minX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=]
[else, if, (, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {]
[(, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =]
[(, (, f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =]
[f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[f1, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (]
[., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -]
[==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *]
[., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /]
[&&, dx, !=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;]
[!=, 0.0, ), {, y1, =, y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =]
[y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (]
[y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (]
[y1, +, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (]
[+, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (]
[+, (, maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (]
[maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &]
[maxX, -, x1, ), *, dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &]
[dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==]
[dy, /, dx, ;, x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==]
[x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&]
[x1, =, maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&]
[maxX, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=]
[else, if, (, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {]
[(, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =]
[(, (, f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =]
[f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[f1, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -]
[==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *]
[., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;]
[!=, 0.0, ), {, x1, =, x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =]
[x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (]
[x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (]
[x1, +, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (]
[+, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (]
[+, (, maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (]
[maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &]
[maxY, -, y1, ), *, dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &]
[dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==]
[dx, /, dy, ;, y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==]
[y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&]
[y1, =, maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&]
[maxY, ;, }, else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=]
[else, if, (, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {]
[(, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =]
[(, (, f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =]
[f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[f1, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (]
[., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -]
[==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *]
[., OUT_TOP, &&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /]
[&&, dy, !=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;]
[!=, 0.0, ), {, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =]
[{, x1, =, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }]
[=, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =]
[=, x1, +, (, minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =]
[minY, -, y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (]
[y1, ), *, dx, /, dy, ;, y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,]
[y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (]
[y1, =, minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (]
[minY, ;, }, f1, =, rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=]
[rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (]
[rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (]
[rect, ., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (]
[., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (]
[., outcode, (, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (]
[(, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &]
[(, x1, ,, y1, ), ;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &]
[;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==]
[;, }, else, if, (, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==]
[(, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&]
[(, f2, !=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&]
[!=, 0, ), {, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=]
[{, if, (, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {]
[(, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =]
[(, (, f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =]
[f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[f2, &, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[&, Rectangle2D, ., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[., OUT_LEFT, ), ==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -]
[==, Rectangle2D, ., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *]
[., OUT_LEFT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;]
[!=, 0.0, ), {, y2, =, y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =]
[y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (]
[y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (]
[y2, +, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (]
[+, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (]
[+, (, minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (]
[minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &]
[minX, -, x2, ), *, dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &]
[dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==]
[dy, /, dx, ;, x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==]
[x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&]
[x2, =, minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&]
[minX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=]
[else, if, (, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {]
[(, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =]
[(, (, f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =]
[f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[f2, &, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[&, Rectangle2D, ., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (]
[., OUT_RIGHT, ), ==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -]
[==, Rectangle2D, ., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *]
[., OUT_RIGHT, &&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /]
[&&, dx, !=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;]
[!=, 0.0, ), {, y2, =, y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =]
[y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (]
[y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (]
[y2, +, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (]
[+, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (]
[+, (, maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (]
[maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &]
[maxX, -, x2, ), *, dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &]
[dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==]
[dy, /, dx, ;, x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==]
[x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&]
[x2, =, maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&]
[maxX, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=]
[else, if, (, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {]
[(, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =]
[(, (, f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =]
[f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[f2, &, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[&, Rectangle2D, ., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[., OUT_BOTTOM, ), ==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -]
[==, Rectangle2D, ., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *]
[., OUT_BOTTOM, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;]
[!=, 0.0, ), {, x2, =, x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =]
[x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (]
[x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (]
[x2, +, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (]
[+, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (]
[+, (, maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (]
[maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &]
[maxY, -, y2, ), *, dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &]
[dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==]
[dx, /, dy, ;, y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==]
[y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&]
[y2, =, maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&]
[maxY, ;, }, else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=]
[else, if, (, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {]
[(, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =]
[(, (, f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =]
[f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[f2, &, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[&, Rectangle2D, ., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (]
[., OUT_TOP, ), ==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -]
[==, Rectangle2D, ., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *]
[., OUT_TOP, &&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /]
[&&, dy, !=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;]
[!=, 0.0, ), {, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =]
[{, x2, =, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }]
[=, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =]
[=, x2, +, (, minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =]
[minY, -, y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (]
[y2, ), *, dx, /, dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,]
[dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }]
[dy, ;, y2, =, minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }]
[minY, ;, }, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (]
[}, f2, =, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1, ,]
[=, rect, ., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,]
[., outcode, (, x2, ,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,]
[,, y2, ), ;, }, }, line, ., setLine, (, x1, ,, y1, ,, x2, ,, y2, ), ;, return]
