[., time, ., field, ., SkipDateTimeField, ;, public, final, class, JulianChronology, extends, BasicGJChronology, {, private, static, final, long, serialVersionUID, =]
[time, ., field, ., SkipDateTimeField, ;, public, final, class, JulianChronology, extends, BasicGJChronology, {, private, static, final, long, serialVersionUID, =, -]
[class, JulianChronology, extends, BasicGJChronology, {, private, static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =]
[BasicGJChronology, {, private, static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, )]
[{, private, static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (]
[{, private, static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (]
[static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (, 365.25, *]
[static, final, long, serialVersionUID, =, -, 8731039522547897247L, ;, private, static, final, long, MILLIS_PER_YEAR, =, (, long, ), (, 365.25, *]
[long, MILLIS_PER_YEAR, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =]
[(, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, )]
[long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (]
[long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (]
[long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (]
[(, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *]
[(, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *]
[., MILLIS_PER_DAY, ), ;, private, static, final, long, MILLIS_PER_MONTH, =, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /]
[=, (, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, ), ;, private, static, final, int, MIN_YEAR, =]
[(, long, ), (, 365.25, *, DateTimeConstants, ., MILLIS_PER_DAY, /, 12, ), ;, private, static, final, int, MIN_YEAR, =, -]
[MILLIS_PER_DAY, /, 12, ), ;, private, static, final, int, MIN_YEAR, =, -, 292269054, ;, private, static, final, int, MAX_YEAR, =]
[;, private, static, final, JulianChronology, INSTANCE_UTC, ;, private, static, final, Map, <, DateTimeZone, ,, JulianChronology, [, ], >, cCache, =]
[JulianChronology, [, ], >, cCache, =, new, HashMap, <, DateTimeZone, ,, JulianChronology, [, ], >, (, ), ;, static, {]
[], >, cCache, =, new, HashMap, <, DateTimeZone, ,, JulianChronology, [, ], >, (, ), ;, static, {, INSTANCE_UTC, =]
[cCache, =, new, HashMap, <, DateTimeZone, ,, JulianChronology, [, ], >, (, ), ;, static, {, INSTANCE_UTC, =, getInstance, (]
[cCache, =, new, HashMap, <, DateTimeZone, ,, JulianChronology, [, ], >, (, ), ;, static, {, INSTANCE_UTC, =, getInstance, (]
[INSTANCE_UTC, =, getInstance, (, DateTimeZone, ., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (]
[INSTANCE_UTC, =, getInstance, (, DateTimeZone, ., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (]
[getInstance, (, DateTimeZone, ., UTC, ), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=]
[), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {, if, (]
[), ;, }, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {, if, (]
[}, static, int, adjustYearForSet, (, int, year, ), {, if, (, year, <=, 0, ), {, if, (, year, ==]
[(, int, year, ), {, if, (, year, <=, 0, ), {, if, (, year, ==, 0, ), {, throw]
[), {, if, (, year, <=, 0, ), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (]
[), {, if, (, year, <=, 0, ), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (]
[0, ), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,]
[0, ), {, if, (, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,]
[(, year, ==, 0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (]
[0, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,]
[{, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null, ,]
[(, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null, ,, null, ), ;, }]
[(, DateTimeFieldType, ., year, (, ), ,, Integer, ., valueOf, (, year, ), ,, null, ,, null, ), ;, }]
[), ,, Integer, ., valueOf, (, year, ), ,, null, ,, null, ), ;, }, year, ++, ;, }, return]
[null, ), ;, }, year, ++, ;, }, return, year, ;, }, public, static, JulianChronology, getInstanceUTC, (, ), {, return]
[}, public, static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static, JulianChronology, getInstance, (, ), {, return]
[static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static, JulianChronology, getInstance, (, ), {, return, getInstance, (]
[static, JulianChronology, getInstanceUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, static, JulianChronology, getInstance, (, ), {, return, getInstance, (]
[return, INSTANCE_UTC, ;, }, public, static, JulianChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,]
[DateTimeZone, ., getDefault, (, ), ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return]
[getDefault, (, ), ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (]
[), ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,]
[zone, ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (]
[zone, ,, 4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (]
[4, ), ;, }, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==]
[}, public, static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==, null, ), {]
[static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==, null, ), {, zone, =]
[static, JulianChronology, getInstance, (, DateTimeZone, zone, ,, int, minDaysInFirstWeek, ), {, if, (, zone, ==, null, ), {, zone, =]
[(, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (]
[DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =]
[DateTimeZone, ., getDefault, (, ), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =]
[), ;, }, JulianChronology, chrono, ;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =, cCache, ., get, (]
[;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (]
[;, synchronized, (, cCache, ), {, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (]
[(, cCache, ), {, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==]
[{, JulianChronology, [, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, ), {]
[[, ], chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =]
[=, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, []
[get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;]
[get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;]
[;, if, (, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (]
[(, chronos, ==, null, ), {, chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,]
[chronos, =, new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {]
[new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =]
[new, JulianChronology, [, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =]
[[, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, []
[[, 7, ], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, []
[], ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -]
[}, try, {, chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw]
[chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (]
[chrono, =, chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (]
[chronos, [, minDaysInFirstWeek, -, 1, ], ;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +]
[;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (]
[;, }, catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (]
[catch, (, ArrayIndexOutOfBoundsException, e, ), {, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==]
[{, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (]
[{, throw, new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (]
[new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==]
[new, IllegalArgumentException, (, "Invalid min days in first week: ", +, minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==]
[minDaysInFirstWeek, ), ;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {]
[;, }, if, (, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =]
[(, chrono, ==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (]
[==, null, ), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,]
[), {, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,]
[DateTimeZone, ., UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {]
[UTC, ), {, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =]
[{, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (]
[{, chrono, =, new, JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (]
[JulianChronology, (, null, ,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,]
[,, null, ,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;]
[,, minDaysInFirstWeek, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =]
[;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (]
[;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (]
[chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (]
[getInstance, (, DateTimeZone, ., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,]
[., UTC, ,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,]
[,, minDaysInFirstWeek, ), ;, chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,]
[chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }]
[chrono, =, new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }]
[new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, []
[new, JulianChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, []
[(, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -]
[getInstance, (, chrono, ,, zone, ), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =]
[), ,, null, ,, minDaysInFirstWeek, ), ;, }, chronos, [, minDaysInFirstWeek, -, 1, ], =, chrono, ;, }, }, return]
[}, }, return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, ), {, super, (]
[return, chrono, ;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, ), {, super, (, base, ,]
[;, }, JulianChronology, (, Chronology, base, ,, Object, param, ,, int, minDaysInFirstWeek, ), {, super, (, base, ,, param, ,]
[{, super, (, base, ,, param, ,, minDaysInFirstWeek, ), ;, }, private, Object, readResolve, (, ), {, Chronology, base, =]
[minDaysInFirstWeek, ), ;, }, private, Object, readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =]
[private, Object, readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;]
[readResolve, (, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =]
[(, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (]
[(, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (]
[(, ), {, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (]
[{, Chronology, base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==]
[base, =, getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?]
[getBase, (, ), ;, int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :]
[int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return]
[int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return]
[int, minDays, =, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return]
[=, getMinimumDaysInFirstWeek, (, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==]
[(, ), ;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?]
[;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (]
[;, minDays, =, (, minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (]
[minDays, ==, 0, ?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,]
[?, 4, :, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :]
[:, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (]
[:, minDays, ), ;, return, base, ==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (]
[==, null, ?, getInstance, (, DateTimeZone, ., UTC, ,, minDays, ), :, getInstance, (, base, ., getZone, (, ), ,]
[:, getInstance, (, base, ., getZone, (, ), ,, minDays, ), ;, }, public, Chronology, withUTC, (, ), {, return]
[public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (]
[public, Chronology, withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (]
[withUTC, (, ), {, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==]
[{, return, INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {]
[INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =]
[INSTANCE_UTC, ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =]
[), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (]
[if, (, zone, ==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==]
[{, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return]
[., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return]
[(, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (]
[zone, ), ;, }, long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return]
[zone, ), ;, }, long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return]
[long, getDateMidnightMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super, ., getDateMidnightMillis, (]
[(, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super, ., getDateMidnightMillis, (, adjustYearForSet, (]
[,, int, monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super, ., getDateMidnightMillis, (, adjustYearForSet, (, year, ), ,]
[monthOfYear, ,, int, dayOfMonth, ), throws, IllegalArgumentException, {, return, super, ., getDateMidnightMillis, (, adjustYearForSet, (, year, ), ,, monthOfYear, ,]
[(, adjustYearForSet, (, year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return]
[(, adjustYearForSet, (, year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return]
[adjustYearForSet, (, year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (]
[adjustYearForSet, (, year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (]
[year, ), ,, monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &]
[monthOfYear, ,, dayOfMonth, ), ;, }, boolean, isLeapYear, (, int, year, ), {, return, (, year, &, 3, ), ==]
[return, (, year, &, 3, ), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =]
[return, (, year, &, 3, ), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =]
[year, &, 3, ), ==, 0, ;, }, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -]
[}, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (]
[}, long, calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (]
[calculateFirstDayOfYearMillis, (, int, year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=]
[year, ), {, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {]
[{, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =]
[{, int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =]
[int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (]
[int, relativeYear, =, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (]
[=, year, -, 1968, ;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +]
[;, int, leapYears, ;, if, (, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >]
[(, relativeYear, <=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {]
[<=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =]
[<=, 0, ), {, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =]
[{, leapYears, =, (, relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >]
[relativeYear, +, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (]
[+, 3, ), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !]
[), >, >, 2, ;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (]
[;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {]
[;, }, else, {, leapYears, =, relativeYear, >, >, 2, ;, if, (, !, isLeapYear, (, year, ), ), {]
[>, 2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =]
[>, 2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =]
[2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (]
[2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (]
[2, ;, if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (]
[if, (, !, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *]
[!, isLeapYear, (, year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +]
[year, ), ), {, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *]
[{, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, )]
[{, leapYears, ++, ;, }, }, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, )]
[}, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return]
[}, long, millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return]
[millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -]
[millis, =, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -]
[=, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (]
[=, (, relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (]
[relativeYear, *, 365L, +, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +]
[+, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *]
[+, leapYears, ), *, (, long, ), DateTimeConstants, ., MILLIS_PER_DAY, ;, return, millis, -, (, 366L, +, 352, ), *]
[return, millis, -, (, 366L, +, 352, ), *, DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return]
[DateTimeConstants, ., MILLIS_PER_DAY, ;, }, int, getMinYear, (, ), {, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return]
[{, return, MIN_YEAR, ;, }, int, getMaxYear, (, ), {, return, MAX_YEAR, ;, }, long, getAverageMillisPerYear, (, ), {, return]
[{, return, MAX_YEAR, ;, }, long, getAverageMillisPerYear, (, ), {, return, MILLIS_PER_YEAR, ;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return]
[{, return, MAX_YEAR, ;, }, long, getAverageMillisPerYear, (, ), {, return, MILLIS_PER_YEAR, ;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return]
[MAX_YEAR, ;, }, long, getAverageMillisPerYear, (, ), {, return, MILLIS_PER_YEAR, ;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return, MILLIS_PER_YEAR, /]
[MILLIS_PER_YEAR, ;, }, long, getAverageMillisPerYearDividedByTwo, (, ), {, return, MILLIS_PER_YEAR, /, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return]
[MILLIS_PER_YEAR, /, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return]
[MILLIS_PER_YEAR, /, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return]
[/, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (]
[/, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (]
[/, 2, ;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (]
[;, }, long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *]
[long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +]
[long, getAverageMillisPerMonth, (, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +]
[(, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +, 352L, *]
[(, ), {, return, MILLIS_PER_MONTH, ;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +, 352L, *]
[;, }, long, getApproxMillisAtEpochDividedByTwo, (, ), {, return, (, 1969L, *, MILLIS_PER_YEAR, +, 352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /]
[352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (]
[352L, *, DateTimeConstants, ., MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (]
[MILLIS_PER_DAY, ), /, 2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==]
[2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {]
[2, ;, }, protected, void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {]
[void, assemble, (, Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {, super, ., assemble, (]
[Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {, super, ., assemble, (, fields, ), ;]
[Fields, fields, ), {, if, (, getBase, (, ), ==, null, ), {, super, ., assemble, (, fields, ), ;]
[if, (, getBase, (, ), ==, null, ), {, super, ., assemble, (, fields, ), ;, fields, ., year, =]
[(, ), ==, null, ), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (]
[==, null, ), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,]
[==, null, ), {, super, ., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,]
[., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;]
[., assemble, (, fields, ), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;]
[), ;, fields, ., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =]
[., year, =, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (]
[=, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,]
[=, new, SkipDateTimeField, (, this, ,, fields, ., year, ), ;, fields, ., weekyear, =, new, SkipDateTimeField, (, this, ,]
