[public, class, SpyAnnotationEngine, implements, AnnotationEngine, {, public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return, null, ;]
[), public, class, SpyAnnotationEngine, implements, AnnotationEngine, {, public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return, null]
[}, ), public, class, SpyAnnotationEngine, implements, AnnotationEngine, {, public, Object, createMockFor, (, Annotation, annotation, ,, Field, field, ), {, return]
[;, }, @, SuppressWarnings, (, "deprecation", ), public, void, process, (, Class, <, ?, >, context, ,, Object, testInstance, )]
[public, void, process, (, Class, <, ?, >, context, ,, Object, testInstance, ), {, Field, [, ], fields, =, context]
[), public, void, process, (, Class, <, ?, >, context, ,, Object, testInstance, ), {, Field, [, ], fields, =]
[;, for, (, Field, field, :, fields, ), {, if, (, field, ., isAnnotationPresent, (, Spy, ., class, ), &&]
[., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, if, (, field, ., isAnnotationPresent, (, Spy]
[), {, if, (, field, ., isAnnotationPresent, (, Spy, ., class, ), &&, !, field, ., isAnnotationPresent, (, InjectMocks, .]
[), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, .]
[&&, !, field, ., isAnnotationPresent, (, InjectMocks, ., class, ), ), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,]
[., isAnnotationPresent, (, Spy, ., class, ), &&, !, field, ., isAnnotationPresent, (, InjectMocks, ., class, ), ), {, assertNoIncompatibleAnnotations]
[), &&, !, field, ., isAnnotationPresent, (, InjectMocks, ., class, ), ), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field]
[), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, .]
[), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, .]
[., isAnnotationPresent, (, InjectMocks, ., class, ), ), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class]
[), ), {, assertNoIncompatibleAnnotations, (, Spy, ., class, ,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations]
[;, field, ., setAccessible, (, true, ), ;, Object, instance, ;, try, {, instance, =, field, ., get, (, testInstance]
[,, field, ,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class]
[,, Mock, ., class, ,, org, ., mockito, ., MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, ), ;]
[,, org, ., mockito, ., MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, ), ;, field, ., setAccessible, (]
[,, Captor, ., class, ), ;, field, ., setAccessible, (, true, ), ;, Object, instance, ;, try, {, instance, =]
[), ;, field, ., setAccessible, (, true, ), ;, Object, instance, ;, try, {, instance, =, field, ., get, (]
[;, Object, instance, ;, try, {, instance, =, field, ., get, (, testInstance, ), ;, assertNotInterface, (, instance, ,, field]
[., setAccessible, (, true, ), ;, Object, instance, ;, try, {, instance, =, field, ., get, (, testInstance, ), ;]
[), ;, Object, instance, ;, try, {, instance, =, field, ., get, (, testInstance, ), ;, assertNotInterface, (, instance, ,]
[=, field, ., get, (, testInstance, ), ;, assertNotInterface, (, instance, ,, field, ., getType, (, ), ), ;, if]
[;, assertNotInterface, (, instance, ,, field, ., getType, (, ), ), ;, if, (, new, MockUtil, (, ), ., isMock]
[., get, (, testInstance, ), ;, assertNotInterface, (, instance, ,, field, ., getType, (, ), ), ;, if, (, new]
[), ;, assertNotInterface, (, instance, ,, field, ., getType, (, ), ), ;, if, (, new, MockUtil, (, ), .]
[;, if, (, new, MockUtil, (, ), ., isMock, (, instance, ), ), {, Mockito, ., reset, (, instance, )]
[,, field, ., getType, (, ), ), ;, if, (, new, MockUtil, (, ), ., isMock, (, instance, ), )]
[), ;, if, (, new, MockUtil, (, ), ., isMock, (, instance, ), ), {, Mockito, ., reset, (, instance]
[., getType, (, ), ), ;, if, (, new, MockUtil, (, ), ., isMock, (, instance, ), ), {, Mockito]
[), {, Mockito, ., reset, (, instance, ), ;, }, else, if, (, instance, !=, null, ), {, field, .]
[., isMock, (, instance, ), ), {, Mockito, ., reset, (, instance, ), ;, }, else, if, (, instance, !=]
[), ), {, Mockito, ., reset, (, instance, ), ;, }, else, if, (, instance, !=, null, ), {, field]
[;, }, else, if, (, instance, !=, null, ), {, field, ., set, (, testInstance, ,, Mockito, ., mock, (]
[., reset, (, instance, ), ;, }, else, if, (, instance, !=, null, ), {, field, ., set, (, testInstance]
[), ;, }, else, if, (, instance, !=, null, ), {, field, ., set, (, testInstance, ,, Mockito, ., mock]
[), {, field, ., set, (, testInstance, ,, Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (]
[!=, null, ), {, field, ., set, (, testInstance, ,, Mockito, ., mock, (, instance, ., getClass, (, ), ,]
[), {, field, ., set, (, testInstance, ,, Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (]
[;, }, else, {, field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), ), ;, }, }]
[., set, (, testInstance, ,, Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (, ), ., spiedInstance]
[,, Mockito, ., mock, (, instance, ., getClass, (, ), ,, withSettings, (, ), ., spiedInstance, (, instance, ), .]
[), ;, }, else, {, field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), ), ;, }]
[., mock, (, instance, ., getClass, (, ), ,, withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (]
[,, withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field]
[., getClass, (, ), ,, withSettings, (, ), ., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, )]
[), ), ;, }, else, {, field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), ), ;]
[., name, (, field, ., getName, (, ), ), ), ), ;, }, else, {, field, ., set, (, testInstance]
[., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ), ), ;, }]
[., spiedInstance, (, instance, ), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, )]
[), ., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ), ), ;]
[), ., name, (, field, ., getName, (, ), ), ), ), ;, }, else, {, field, ., set, (]
[., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ), ), ;, }, else, {, field, .]
[), ), ), ;, }, else, {, field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), )]
[., getName, (, ), ), ), ), ;, }, else, {, field, ., set, (, testInstance, ,, newSpyInstance, (, testInstance]
[;, }, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Unable to initialize @Spy annotated field '", +, field, ., getName, (, )]
[., set, (, testInstance, ,, newSpyInstance, (, testInstance, ,, field, ), ), ;, }, }, catch, (, Exception, e, )]
[,, newSpyInstance, (, testInstance, ,, field, ), ), ;, }, }, catch, (, Exception, e, ), {, throw, new, MockitoException]
[), ;, }, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Unable to initialize @Spy annotated field '", +, field, ., getName, (]
[,, field, ), ), ;, }, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Unable to initialize @Spy annotated field '", +, field]
[), ), ;, }, }, catch, (, Exception, e, ), {, throw, new, MockitoException, (, "Unable to initialize @Spy annotated field '", +, field, ., getName]
[;, }, }, }, }, private, static, void, assertNotInterface, (, Object, testInstance, ,, Class, <, ?, >, type, ), {]
[,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object, testInstance, ,, Class, <, ?, >]
[+, e, ., getMessage, (, ), ,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object]
[+, "'.\n", +, e, ., getMessage, (, ), ,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface]
[+, field, ., getName, (, ), +, "'.\n", +, e, ., getMessage, (, ), ,, e, ), ;, }, }]
[+, "'.\n", +, e, ., getMessage, (, ), ,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface]
[., getName, (, ), +, "'.\n", +, e, ., getMessage, (, ), ,, e, ), ;, }, }, }, }]
[+, e, ., getMessage, (, ), ,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object]
[,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object, testInstance, ,, Class, <, ?, >]
[., getMessage, (, ), ,, e, ), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object, testInstance, ,]
[), ;, }, }, }, }, private, static, void, assertNotInterface, (, Object, testInstance, ,, Class, <, ?, >, type, )]
[=, testInstance, !=, null, ?, testInstance, ., getClass, (, ), :, type, ;, if, (, type, ., isInterface, (, )]
[;, if, (, type, ., isInterface, (, ), ), {, throw, new, MockitoException, (, "Type '", +, type, ., getSimpleName, (]
[?, testInstance, ., getClass, (, ), :, type, ;, if, (, type, ., isInterface, (, ), ), {, throw, new]
[!=, null, ?, testInstance, ., getClass, (, ), :, type, ;, if, (, type, ., isInterface, (, ), ), {]
[?, testInstance, ., getClass, (, ), :, type, ;, if, (, type, ., isInterface, (, ), ), {, throw, new]
[:, type, ;, if, (, type, ., isInterface, (, ), ), {, throw, new, MockitoException, (, "Type '", +, type, .]
[., getClass, (, ), :, type, ;, if, (, type, ., isInterface, (, ), ), {, throw, new, MockitoException, (]
[;, if, (, type, ., isInterface, (, ), ), {, throw, new, MockitoException, (, "Type '", +, type, ., getSimpleName, (]
[), {, throw, new, MockitoException, (, "Type '", +, type, ., getSimpleName, (, ), +, "' is an interface and it cannot be spied on.", ), ;, }, }, private]
[., isInterface, (, ), ), {, throw, new, MockitoException, (, "Type '", +, type, ., getSimpleName, (, ), +, "' is an interface and it cannot be spied on.", )]
[;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field, ), throws, InstantiationException, ,, IllegalAccessException, ,, InvocationTargetException]
[), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field, ), throws, InstantiationException, ,, IllegalAccessException, ,]
[+, "' is an interface and it cannot be spied on.", ), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field, ), throws, InstantiationException, ,]
[+, type, ., getSimpleName, (, ), +, "' is an interface and it cannot be spied on.", ), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,]
[+, "' is an interface and it cannot be spied on.", ), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field, ), throws, InstantiationException, ,]
[., getSimpleName, (, ), +, "' is an interface and it cannot be spied on.", ), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field]
[), ;, }, }, private, static, Object, newSpyInstance, (, Object, testInstance, ,, Field, field, ), throws, InstantiationException, ,, IllegalAccessException, ,]
[;, Class, <, ?, >, type, =, field, ., getType, (, ), ;, if, (, type, ., isInterface, (, )]
[., name, (, field, ., getName, (, ), ), ;, Class, <, ?, >, type, =, field, ., getType, (]
[., defaultAnswer, (, Mockito, ., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ;, Class, <, ?]
[), ., name, (, field, ., getName, (, ), ), ;, Class, <, ?, >, type, =, field, ., getType]
[., CALLS_REAL_METHODS, ), ., name, (, field, ., getName, (, ), ), ;, Class, <, ?, >, type, =, field]
[), ;, Class, <, ?, >, type, =, field, ., getType, (, ), ;, if, (, type, ., isInterface, (]
[., getName, (, ), ), ;, Class, <, ?, >, type, =, field, ., getType, (, ), ;, if, (]
[;, if, (, type, ., isInterface, (, ), ), {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor]
[., getType, (, ), ;, if, (, type, ., isInterface, (, ), ), {, return, Mockito, ., mock, (, type]
[), {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;, }, if, (, !]
[., isInterface, (, ), ), {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;]
[;, }, if, (, !, Modifier, ., isStatic, (, type, ., getModifiers, (, ), ), ), {, Class, <, ?]
[., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;, }, if, (, !, Modifier, ., isStatic, (]
[,, settings, ., useConstructor, (, ), ), ;, }, if, (, !, Modifier, ., isStatic, (, type, ., getModifiers, (]
[), ;, }, if, (, !, Modifier, ., isStatic, (, type, ., getModifiers, (, ), ), ), {, Class, <]
[., useConstructor, (, ), ), ;, }, if, (, !, Modifier, ., isStatic, (, type, ., getModifiers, (, ), )]
[), {, Class, <, ?, >, enclosing, =, type, ., getEnclosingClass, (, ), ;, if, (, enclosing, !=, null, )]
[), {, Class, <, ?, >, enclosing, =, type, ., getEnclosingClass, (, ), ;, if, (, enclosing, !=, null, )]
[., isStatic, (, type, ., getModifiers, (, ), ), ), {, Class, <, ?, >, enclosing, =, type, ., getEnclosingClass]
[), ), {, Class, <, ?, >, enclosing, =, type, ., getEnclosingClass, (, ), ;, if, (, enclosing, !=, null]
[., getModifiers, (, ), ), ), {, Class, <, ?, >, enclosing, =, type, ., getEnclosingClass, (, ), ;, if]
[;, if, (, enclosing, !=, null, ), {, if, (, !, enclosing, ., isInstance, (, testInstance, ), ), {, throw]
[., getEnclosingClass, (, ), ;, if, (, enclosing, !=, null, ), {, if, (, !, enclosing, ., isInstance, (, testInstance]
[), {, if, (, !, enclosing, ., isInstance, (, testInstance, ), ), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '"]
[!=, null, ), {, if, (, !, enclosing, ., isInstance, (, testInstance, ), ), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. "]
[), {, if, (, !, enclosing, ., isInstance, (, testInstance, ), ), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '"]
[), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +]
[), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +]
[., isInstance, (, testInstance, ), ), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, )]
[), ), {, throw, new, MockitoException, (, "@Spy annotation can only initialize inner classes declared in the test. ", +, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '"]
[;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, ), )]
[), ;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, )]
[+, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (]
[+, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,, settings, .]
[+, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,]
[+, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (]
[+, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;]
[+, "Inner class: '", +, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'."]
[+, type, ., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;]
[+, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (]
[., getSimpleName, (, ), +, "', ", +, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return]
[+, "outer class: '", +, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,]
[+, enclosing, ., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,, settings, .]
[+, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (]
[., getSimpleName, (, ), +, "'.", ), ;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (]
[), ;, }, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, )]
[;, }, }, Constructor, <, ?, >, constructor, ;, try, {, constructor, =, type, ., getDeclaredConstructor, (, ), ;, }]
[., mock, (, type, ,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, ), ), ;, }, }, Constructor]
[,, settings, ., useConstructor, (, ), ., outerInstance, (, testInstance, ), ), ;, }, }, Constructor, <, ?, >, constructor]
[), ;, }, }, Constructor, <, ?, >, constructor, ;, try, {, constructor, =, type, ., getDeclaredConstructor, (, ), ;]
[., outerInstance, (, testInstance, ), ), ;, }, }, Constructor, <, ?, >, constructor, ;, try, {, constructor, =, type]
[., useConstructor, (, ), ., outerInstance, (, testInstance, ), ), ;, }, }, Constructor, <, ?, >, constructor, ;, try]
[), ), ;, }, }, Constructor, <, ?, >, constructor, ;, try, {, constructor, =, type, ., getDeclaredConstructor, (, )]
[=, type, ., getDeclaredConstructor, (, ), ;, }, catch, (, NoSuchMethodException, e, ), {, throw, new, MockitoException, (, "Please ensure that the type '", +]
[;, }, catch, (, NoSuchMethodException, e, ), {, throw, new, MockitoException, (, "Please ensure that the type '", +, type, ., getSimpleName, (, ), +]
[., getDeclaredConstructor, (, ), ;, }, catch, (, NoSuchMethodException, e, ), {, throw, new, MockitoException, (, "Please ensure that the type '", +, type, .]
[;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor, ., setAccessible, (]
[), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor, ., setAccessible]
[+, "' has 0-arg constructor.", ), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor]
[+, type, ., getSimpleName, (, ), +, "' has 0-arg constructor.", ), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers]
[+, "' has 0-arg constructor.", ), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor]
[., getSimpleName, (, ), +, "' has 0-arg constructor.", ), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, )]
[), ;, }, if, (, Modifier, ., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor, ., setAccessible]
[), {, constructor, ., setAccessible, (, true, ), ;, return, Mockito, ., mock, (, type, ,, settings, ., spiedInstance, (]
[., isPrivate, (, constructor, ., getModifiers, (, ), ), ), {, constructor, ., setAccessible, (, true, ), ;, return, Mockito]
[), ), {, constructor, ., setAccessible, (, true, ), ;, return, Mockito, ., mock, (, type, ,, settings, ., spiedInstance]
[., getModifiers, (, ), ), ), {, constructor, ., setAccessible, (, true, ), ;, return, Mockito, ., mock, (, type]
[;, return, Mockito, ., mock, (, type, ,, settings, ., spiedInstance, (, constructor, ., newInstance, (, ), ), ), ;]
[., setAccessible, (, true, ), ;, return, Mockito, ., mock, (, type, ,, settings, ., spiedInstance, (, constructor, ., newInstance]
[), ;, return, Mockito, ., mock, (, type, ,, settings, ., spiedInstance, (, constructor, ., newInstance, (, ), ), )]
[;, }, else, {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;, }, }]
[., mock, (, type, ,, settings, ., spiedInstance, (, constructor, ., newInstance, (, ), ), ), ;, }, else, {]
[,, settings, ., spiedInstance, (, constructor, ., newInstance, (, ), ), ), ;, }, else, {, return, Mockito, ., mock]
[), ;, }, else, {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;, }]
[., spiedInstance, (, constructor, ., newInstance, (, ), ), ), ;, }, else, {, return, Mockito, ., mock, (, type]
[), ), ;, }, else, {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;]
[., newInstance, (, ), ), ), ;, }, else, {, return, Mockito, ., mock, (, type, ,, settings, ., useConstructor]
[;, }, }, void, assertNoIncompatibleAnnotations, (, Class, annotation, ,, Field, field, ,, Class, ..., undesiredAnnotations, ), {, for, (, Class]
[., mock, (, type, ,, settings, ., useConstructor, (, ), ), ;, }, }, void, assertNoIncompatibleAnnotations, (, Class, annotation, ,]
[,, settings, ., useConstructor, (, ), ), ;, }, }, void, assertNoIncompatibleAnnotations, (, Class, annotation, ,, Field, field, ,, Class]
[), ;, }, }, void, assertNoIncompatibleAnnotations, (, Class, annotation, ,, Field, field, ,, Class, ..., undesiredAnnotations, ), {, for, (]
[., useConstructor, (, ), ), ;, }, }, void, assertNoIncompatibleAnnotations, (, Class, annotation, ,, Field, field, ,, Class, ..., undesiredAnnotations]
[), {, if, (, field, ., isAnnotationPresent, (, u, ), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation]
[), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, annotation, ., getClass, (, )]
[., isAnnotationPresent, (, u, ), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,]
[), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, annotation, ., getClass, (]
[;, }, }, }, }]
[., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, annotation, ., getClass, (, ), ., getSimpleName, (, ), ), ;]
[,, annotation, ., getClass, (, ), ., getSimpleName, (, ), ), ;, }, }, }, }]
[., getSimpleName, (, ), ,, annotation, ., getClass, (, ), ., getSimpleName, (, ), ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., getSimpleName, (, ), ), ;, }, }, }, }]
[., getClass, (, ), ., getSimpleName, (, ), ), ;, }, }, }, }]
