[java, ., util, ., Collections, ;, import, java, ., util, ., LinkedList, ;, import, java, ., util, ., List, ;]
[., Collections, ;, import, java, ., util, ., LinkedList, ;, import, java, ., util, ., List, ;, @, SuppressWarnings, (]
[T, >, extends, ArgumentMatcher, <, T, >, implements, CapturesArguments, ,, VarargMatcher, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[{, private, static, final, long, serialVersionUID, =, 4057053345838026645L, ;, private, final, LinkedList, <, List, <, T, >, >, arguments, =]
[new, LinkedList, <, List, <, T, >, >, (, ), ;, public, boolean, matches, (, Object, argument, ), {, return]
[public, boolean, matches, (, Object, argument, ), {, return, true, ;, }, public, void, describeTo, (, Description, description, ), {]
[public, boolean, matches, (, Object, argument, ), {, return, true, ;, }, public, void, describeTo, (, Description, description, ), {]
[Object, argument, ), {, return, true, ;, }, public, void, describeTo, (, Description, description, ), {, description, ., appendText, (]
[{, description, ., appendText, (, "<Capturing variable argument>", ), ;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (]
[{, description, ., appendText, (, "<Capturing variable argument>", ), ;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (]
[;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (, arguments, ., isEmpty, (, ), ), {]
[;, }, public, List, <, T, >, getLastVarargs, (, ), {, if, (, arguments, ., isEmpty, (, ), ), {]
[{, if, (, arguments, ., isEmpty, (, ), ), {, new, Reporter, (, ), ., noArgumentValueWasCaptured, (, ), ;, return]
[(, ), ), {, new, Reporter, (, ), ., noArgumentValueWasCaptured, (, ), ;, return, null, ;, }, else, {, return]
[(, ), ), {, new, Reporter, (, ), ., noArgumentValueWasCaptured, (, ), ;, return, null, ;, }, else, {, return]
[., getLast, (, ), ;, }, }, public, List, <, List, <, T, >, >, getAllVarargs, (, ), {, return]
[), {, return, arguments, ;, }, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =]
[return, arguments, ;, }, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (]
[}, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (, varArgArray, ), ;]
[}, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (, varArgArray, ), ;]
[}, public, void, captureFrom, (, Object, varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (, varArgArray, ), ;]
[varArgArray, ), {, List, <, T, >, vararg, =, unpackAsList, (, varArgArray, ), ;, this, ., arguments, ., add, (]
[., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (]
[., add, (, vararg, ), ;, }, private, List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (]
[List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (, varArgArray, instanceof, Object, [, ], ), {, return]
[List, <, T, >, unpackAsList, (, Object, varArgArray, ), {, if, (, varArgArray, instanceof, Object, [, ], ), {, return]
[unpackAsList, (, Object, varArgArray, ), {, if, (, varArgArray, instanceof, Object, [, ], ), {, return, Arrays, ., asList, (]
[{, if, (, varArgArray, instanceof, Object, [, ], ), {, return, Arrays, ., asList, (, (, T, [, ], )]
[], ), {, return, Arrays, ., asList, (, (, T, [, ], ), varArgArray, ), ;, }, else, if, (]
[], ), {, return, Arrays, ., asList, (, (, T, [, ], ), varArgArray, ), ;, }, else, if, (]
[], ), {, return, Arrays, ., asList, (, (, T, [, ], ), varArgArray, ), ;, }, else, if, (]
[}, else, if, (, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray, =]
[(, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray, =, new, Object, []
[(, varArgArray, ., getClass, (, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray, =, new, Object, []
[(, ), ., isArray, (, ), ), {, Object, [, ], primitiveArray, =, new, Object, [, Array, ., getLength, (]
[[, ], primitiveArray, =, new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (, int, i, =]
[primitiveArray, =, new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;]
[primitiveArray, =, new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;]
[new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[new, Object, [, Array, ., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;]
[., getLength, (, varArgArray, ), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;]
[), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {]
[), ], ;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, []
[int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =]
[int, i, =, 0, ;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =]
[;, i, <, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (]
[<, primitiveArray, ., length, ;, i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,]
[i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return]
[i, ++, ), {, primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return]
[primitiveArray, [, i, ], =, Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (]
[Array, ., get, (, varArgArray, ,, i, ), ;, }, return, Arrays, ., asList, (, (, T, [, ], )]
[), ;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return]
[), ;, }, return, Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return]
[Arrays, ., asList, (, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return, Collections, ., singletonList, (]
[(, (, T, [, ], ), primitiveArray, ), ;, }, else, {, return, Collections, ., singletonList, (, (, T, )]
