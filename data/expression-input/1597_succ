[;, public, CenterArrangement, (, ), {, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public]
[;, public, CenterArrangement, (, ), {, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public]
[;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if]
[., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, .]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, )]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, )]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", )]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", )]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (]
[;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2]
[,, g2, ,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", ), ;, }, protected, Size2D, arrangeFN, (]
[,, constraint, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container]
[), ;, }, }, throw, new, IllegalArgumentException, (, "Unknown LengthConstraintType.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D]
[;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange]
[., getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s]
[;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint, .]
[;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint, .]
[., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint]
[;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D]
[,, RectangleConstraint, ., NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D]
[), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (]
[., NONE, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double]
[;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, ), /, 2.0, ,, 0.0]
[., getWidth, (, ), ;, Rectangle2D, bounds, =, new, Rectangle2D, ., Double, (, (, width, -, s, ., width, )]
[;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /]
[,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return]
[/, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, )]
[), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds]
[-, s, ., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b]
[), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds]
[., width, ), /, 2.0, ,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds]
[,, 0.0, ,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return]
[,, s, ., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D]
[,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -]
[., width, ,, s, ., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (]
[), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, )]
[., height, ), ;, b, ., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, .]
[;, return, new, Size2D, (, (, width, -, s, ., width, ), /, 2.0, ,, s, ., height, ), ;]
[., setBounds, (, bounds, ), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /, 2.0, ,]
[), ;, return, new, Size2D, (, (, width, -, s, ., width, ), /, 2.0, ,, s, ., height, )]
[;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN]
[,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[/, 2.0, ,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[), /, 2.0, ,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,]
[-, s, ., width, ), /, 2.0, ,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container]
[), /, 2.0, ,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,]
[., width, ), /, 2.0, ,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D]
[,, s, ., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[., height, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s, ;]
[,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, )]
[,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {]
[), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s]
[), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, )]
[., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint]
[), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (]
[., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,]
[., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container]
[., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, )]
[., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer]
[., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected]
[;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN]
[;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN]
[,, g2, ,, constraint, ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[,, constraint, ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;]
[,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1]
[), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint]
[), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2]
[), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container]
[., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D]
[., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;]
[,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, )]
[,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s]
[), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint]
[), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container]
[., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, )]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer]
[., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;]
[,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1]
[), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint]
[), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2]
[), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container]
[., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D]
[., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;]
[;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =, container, ., getBlocks]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =]
[), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, List, blocks, =, container, .]
[;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s, =, b, ., arrange]
[., getBlocks, (, ), ;, Block, b, =, (, Block, ), blocks, ., get, (, 0, ), ;, Size2D, s]
[;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new]
[;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new]
[., get, (, 0, ), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, Size2D, s, =, b, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (]
[;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s, .]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0]
[,, RectangleConstraint, ., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s]
[), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s]
[., NONE, ), ;, b, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width]
[;, return, new, Size2D, (, s, ., width, ,, s, ., height, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer]
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, s, ., width, ,, s, ., height, )]
[), ;, return, new, Size2D, (, s, ., width, ,, s, ., height, ), ;, }, protected, Size2D, arrangeNF, (]
[,, 0.0, ,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width]
[,, s, ., width, ,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width, ,, s]
[,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width, ,, s, ., height, ), ;]
[., width, ,, s, ., height, ), ), ;, return, new, Size2D, (, s, ., width, ,, s, ., height]
[), ), ;, return, new, Size2D, (, s, ., width, ,, s, ., height, ), ;, }, protected, Size2D, arrangeNF]
[., height, ), ), ;, return, new, Size2D, (, s, ., width, ,, s, ., height, ), ;, }, protected]
[;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (, container]
[,, s, ., height, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[., width, ,, s, ., height, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (]
[., height, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[,, g2, ), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, CenterArrangement, ), ), {, return, false, ;, }, return, true, ;, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[), ), {, return, false, ;, }, return, true, ;, }, }]
[instanceof, CenterArrangement, ), ), {, return, false, ;, }, return, true, ;, }, }]
[;, }, return, true, ;, }, }]
[;, }, }]
