[OpenIntToDoubleHashMap, ., Iterator, ;, @, Deprecated, public, class, OpenMapRealVector, extends, SparseRealVector, implements, Serializable, {, public, static, final, double, DEFAULT_ZERO_TOLERANCE, =]
[OpenMapRealVector, extends, SparseRealVector, implements, Serializable, {, public, static, final, double, DEFAULT_ZERO_TOLERANCE, =, 1.0e-12, ;, private, static, final, long, serialVersionUID, =]
[OpenIntToDoubleHashMap, entries, ;, private, final, int, virtualSize, ;, private, final, double, epsilon, ;, public, OpenMapRealVector, (, ), {, this, (]
[;, private, final, int, virtualSize, ;, private, final, double, epsilon, ;, public, OpenMapRealVector, (, ), {, this, (, 0, ,]
[(, ), {, this, (, 0, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ), {, this, (]
[{, this, (, 0, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ), {, this, (, dimension, ,]
[), {, this, (, dimension, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {]
[this, (, dimension, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =]
[dimension, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;]
[DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =]
[}, public, OpenMapRealVector, (, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[(, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[(, int, dimension, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =]
[0.0, ), ;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {]
[;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =]
[;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =]
[;, this, ., epsilon, =, epsilon, ;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =]
[;, }, protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +]
[protected, OpenMapRealVector, (, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +, resize, ;]
[(, OpenMapRealVector, v, ,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =]
[,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[,, int, resize, ), {, virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[virtualSize, =, v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;]
[v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =]
[v, ., getDimension, (, ), +, resize, ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., entries, ), ;, epsilon, =]
[;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (]
[=, v, ., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (, dimension, ,]
[., epsilon, ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ), {, this, (, dimension, ,, expectedSize, ,]
[,, expectedSize, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {]
[,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =]
[), ;, }, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;]
[}, public, OpenMapRealVector, (, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =]
[(, int, dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[dimension, ,, int, expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,]
[expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;]
[expectedSize, ,, double, epsilon, ), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;]
[), {, virtualSize, =, dimension, ;, entries, =, new, OpenIntToDoubleHashMap, (, expectedSize, ,, 0.0, ), ;, this, ., epsilon, =]
[), ;, this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (]
[this, ., epsilon, =, epsilon, ;, }, public, OpenMapRealVector, (, double, [, ], values, ), {, this, (, values, ,]
[this, (, values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {]
[values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =]
[values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =]
[;, }, public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;]
[public, OpenMapRealVector, (, double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =]
[double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =]
[int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =, values, []
[key, <, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (]
[<, values, ., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !]
[., length, ;, key, ++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (]
[++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {]
[++, ), {, double, value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {]
[value, =, values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (]
[values, [, key, ], ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,]
[(, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {, this, (]
[,, value, ), ;, }, }, }, public, OpenMapRealVector, (, Double, [, ], values, ), {, this, (, values, ,]
[this, (, values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {]
[values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =]
[values, ,, DEFAULT_ZERO_TOLERANCE, ), ;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =]
[;, }, public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;]
[public, OpenMapRealVector, (, Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =]
[Double, [, ], values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (]
[values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[values, ,, double, epsilon, ), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[), {, virtualSize, =, values, ., length, ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[;, this, ., epsilon, =, epsilon, ;, for, (, int, key, =, 0, ;, key, <, values, ., length, ;]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =]
[for, (, int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =]
[int, key, =, 0, ;, key, <, values, ., length, ;, key, ++, ), {, double, value, =, values, []
[length, ;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (]
[;, key, ++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !]
[++, ), {, double, value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (]
[value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[value, =, values, [, key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[key, ], ., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (]
[., doubleValue, (, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,]
[{, entries, ., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {]
[., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =]
[., put, (, key, ,, value, ), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =]
[), ;, }, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;]
[}, }, }, public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =]
[public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (]
[public, OpenMapRealVector, (, OpenMapRealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (]
[virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;]
[v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon, =]
[v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, v, ., getEntries, (, ), ), ;, epsilon, =]
[., getEntries, (, ), ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {]
[(, ), ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =]
[(, ), ), ;, epsilon, =, v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =]
[v, ., epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;]
[epsilon, ;, }, public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =]
[public, OpenMapRealVector, (, RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (]
[RealVector, v, ), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;]
[), {, virtualSize, =, v, ., getDimension, (, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =]
[(, ), ;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;]
[;, entries, =, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;]
[=, new, OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;]
[OpenIntToDoubleHashMap, (, 0.0, ), ;, epsilon, =, DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;]
[DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {, double, value, =]
[DEFAULT_ZERO_TOLERANCE, ;, for, (, int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {, double, value, =]
[int, key, =, 0, ;, key, <, virtualSize, ;, key, ++, ), {, double, value, =, v, ., getEntry, (]
[key, <, virtualSize, ;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (]
[<, virtualSize, ;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !]
[;, key, ++, ), {, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (]
[{, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[{, double, value, =, v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[v, ., getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (]
[getEntry, (, key, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, key, ,]
[{, entries, ., put, (, key, ,, value, ), ;, }, }, }, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return]
[}, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return]
[}, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return]
[}, private, OpenIntToDoubleHashMap, getEntries, (, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return]
[(, ), {, return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return, FastMath, ., abs, (]
[return, entries, ;, }, protected, boolean, isDefaultValue, (, double, value, ), {, return, FastMath, ., abs, (, value, ), <]
[abs, (, value, ), <, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {]
[value, ), <, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[value, ), <, epsilon, ;, }, @, Override, public, RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[RealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (]
[v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, )]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[OpenMapRealVector, ), {, return, add, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., add, (]
[return, super, ., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., add, (, v, ), ;, }, }, public, OpenMapRealVector, add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =]
[add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =]
[add, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =]
[DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =, entries, ., size, (, ), >]
[DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =, entries, ., size, (, ), >]
[DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, boolean, copyThis, =, entries, ., size, (, ), >]
[boolean, copyThis, =, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =]
[boolean, copyThis, =, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =]
[=, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?]
[=, entries, ., size, (, ), >, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?]
[>, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :]
[>, v, ., entries, ., size, (, ), ;, OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :]
[OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =]
[OpenMapRealVector, res, =, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =]
[=, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?]
[=, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?]
[=, copyThis, ?, this, ., copy, (, ), :, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?]
[:, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :]
[:, v, ., copy, (, ), ;, Iterator, iter, =, copyThis, ?, v, ., entries, ., iterator, (, ), :]
[=, copyThis, ?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =]
[=, copyThis, ?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =]
[?, v, ., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?]
[., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :]
[., entries, ., iterator, (, ), :, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :]
[:, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (]
[:, entries, ., iterator, (, ), ;, OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (]
[OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (, iter, ., hasNext, (, ), ), {]
[OpenIntToDoubleHashMap, randomAccess, =, copyThis, ?, entries, :, v, ., entries, ;, while, (, iter, ., hasNext, (, ), ), {]
[entries, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[entries, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (]
[;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {]
[;, int, key, =, iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {]
[iter, ., key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (]
[key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[if, (, randomAccess, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, randomAccess, ., get, (, key, ), +]
[(, key, ,, randomAccess, ., get, (, key, ), +, iter, ., value, (, ), ), ;, }, else, {]
[(, key, ,, randomAccess, ., get, (, key, ), +, iter, ., value, (, ), ), ;, }, else, {]
[., get, (, key, ), +, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (]
[(, key, ), +, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[(, key, ), +, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[;, }, else, {, res, ., setEntry, (, key, ,, iter, ., value, (, ), ), ;, }, }, return]
[), ), ;, }, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =]
[}, }, return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,]
[return, res, ;, }, public, OpenMapRealVector, append, (, OpenMapRealVector, v, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,]
[), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, Iterator, iter, =]
[), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, Iterator, iter, =]
[), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, Iterator, iter, =]
[v, ., getDimension, (, ), ), ;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (]
[v, ., getDimension, (, ), ), ;, Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (]
[Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[Iterator, iter, =, v, ., entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), +, virtualSize, ,]
[., setEntry, (, iter, ., key, (, ), +, virtualSize, ,, iter, ., value, (, ), ), ;, }, return]
[), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (]
[), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (]
[;, }, @, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[@, Override, public, OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v, instanceof, OpenMapRealVector, ), {, return, append, (]
[OpenMapRealVector, append, (, RealVector, v, ), {, if, (, v, instanceof, OpenMapRealVector, ), {, return, append, (, (, OpenMapRealVector, )]
[instanceof, OpenMapRealVector, ), {, return, append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =]
[{, return, append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,]
[append, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, final, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,]
[OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =]
[=, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[=, new, OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[OpenMapRealVector, (, this, ,, v, ., getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;]
[getDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {]
[i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (]
[i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (]
[0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +]
[i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,]
[i, <, v, ., getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,]
[getDimension, (, ), ;, i, ++, ), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (]
[), {, res, ., setEntry, (, i, +, virtualSize, ,, v, ., getEntry, (, i, ), ), ;, }, return]
[;, }, return, res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =]
[res, ;, }, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[}, }, @, Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,]
[Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, 1, ), ;]
[Override, public, OpenMapRealVector, append, (, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, 1, ), ;]
[(, double, d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, 1, ), ;, res, ., setEntry, (]
[d, ), {, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ,, 1, ), ;, res, ., setEntry, (, virtualSize, ,]
[res, =, new, OpenMapRealVector, (, this, ,, 1, ), ;, res, ., setEntry, (, virtualSize, ,, d, ), ;, return]
[setEntry, (, virtualSize, ,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return]
[,, d, ), ;, return, res, ;, }, @, Override, public, OpenMapRealVector, copy, (, ), {, return, new, OpenMapRealVector, (]
[new, OpenMapRealVector, (, this, ), ;, }, @, Deprecated, public, double, dotProduct, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, return]
[(, this, ), ;, }, @, Deprecated, public, double, dotProduct, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, return, dotProduct, (]
[;, }, @, Deprecated, public, double, dotProduct, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, return, dotProduct, (, (, RealVector, )]
[(, (, RealVector, ), v, ), ;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {]
[RealVector, ), v, ), ;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[RealVector, ), v, ), ;, }, @, Override, public, OpenMapRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =]
[v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, final, int, n, =]
[=, new, OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =]
[OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[OpenMapRealVector, (, this, ), ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[this, ), ;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,]
[0, ;, i, <, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (]
[<, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /]
[<, n, ;, i, ++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /]
[++, ), {, res, ., setEntry, (, i, ,, this, ., getEntry, (, i, ), /, v, ., getEntry, (]
[(, i, ,, this, ., getEntry, (, i, ), /, v, ., getEntry, (, i, ), ), ;, }, return]
[), ), ;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {]
[;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[;, }, return, res, ;, }, @, Override, public, OpenMapRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =]
[v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[(, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =]
[(, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =]
[OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[OpenMapRealVector, res, =, new, OpenMapRealVector, (, this, ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,]
[advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *]
[advance, (, ), ;, res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *]
[res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *, v, ., getEntry, (]
[res, ., setEntry, (, iter, ., key, (, ), ,, iter, ., value, (, ), *, v, ., getEntry, (]
[., value, (, ), *, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (]
[., value, (, ), *, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (]
[., value, (, ), *, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (]
[., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (, v, ., isNaN, (, ), ||]
[., getEntry, (, iter, ., key, (, ), ), ), ;, }, if, (, v, ., isNaN, (, ), ||]
[}, if, (, v, ., isNaN, (, ), ||, v, ., isInfinite, (, ), ), {, final, int, n, =]
[v, ., isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =]
[isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[isInfinite, (, ), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[), ), {, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[{, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[{, final, int, n, =, getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, y, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, y, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, y, =, v, ., getEntry, (]
[<, n, ;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (]
[<, n, ;, i, ++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (]
[++, ), {, final, double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (]
[double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {]
[double, y, =, v, ., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {]
[., getEntry, (, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (]
[(, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (, i, ,]
[(, i, ), ;, if, (, Double, ., isNaN, (, y, ), ), {, res, ., setEntry, (, i, ,]
[(, y, ), ), {, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (]
[(, y, ), ), {, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (]
[{, res, ., setEntry, (, i, ,, Double, ., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (]
[., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =]
[., NaN, ), ;, }, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =]
[}, else, if, (, Double, ., isInfinite, (, y, ), ), {, final, double, x, =, this, ., getEntry, (]
[(, Double, ., isInfinite, (, y, ), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;]
[(, Double, ., isInfinite, (, y, ), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;]
[(, y, ), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (]
[), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,]
[), ), {, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,]
[{, final, double, x, =, this, ., getEntry, (, i, ), ;, res, ., setEntry, (, i, ,, x, *]
[getEntry, (, i, ), ;, res, ., setEntry, (, i, ,, x, *, y, ), ;, }, }, }, return]
[res, ;, }, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {]
[}, @, Override, public, OpenMapRealVector, getSubVector, (, int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex, (]
[getSubVector, (, int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (]
[getSubVector, (, int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (]
[int, index, ,, int, n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, n, <]
[n, ), throws, NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, n, <, 0, ), {, throw]
[NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[NotPositiveException, ,, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[checkIndex, (, index, ), ;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,]
[;, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (]
[(, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +, n, -]
[LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =]
[,, n, ), ;, }, checkIndex, (, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (]
[(, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =]
[(, index, +, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =]
[+, n, -, 1, ), ;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +]
[;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;, Iterator, iter, =]
[;, OpenMapRealVector, res, =, new, OpenMapRealVector, (, n, ), ;, int, end, =, index, +, n, ;, Iterator, iter, =]
[), ;, int, end, =, index, +, n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), ;, int, end, =, index, +, n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[n, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[{, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&]
[(, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <]
[int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {]
[int, key, =, iter, ., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[., key, (, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (]
[(, ), ;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[;, if, (, key, >=, index, &&, key, <, end, ), {, res, ., setEntry, (, key, -, index, ,]
[), {, res, ., setEntry, (, key, -, index, ,, iter, ., value, (, ), ), ;, }, }, return]
[value, (, ), ), ;, }, }, return, res, ;, }, @, Override, public, int, getDimension, (, ), {, return]
[public, int, getDimension, (, ), {, return, virtualSize, ;, }, public, double, getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[getDimension, (, ), {, return, virtualSize, ;, }, public, double, getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[getDimension, (, ), {, return, virtualSize, ;, }, public, double, getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, Iterator, iter, =]
[getDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, Iterator, iter, =]
[(, v, ., getDimension, (, ), ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =]
[(, ), ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (]
[(, ), ), ;, Iterator, iter, =, entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (]
[entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (, iter, ., hasNext, (, ), ), {]
[entries, ., iterator, (, ), ;, double, res, =, 0, ;, while, (, iter, ., hasNext, (, ), ), {]
[0, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[0, ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;]
[iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =]
[iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =]
[iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =]
[int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =, iter, ., value, (, ), -]
[int, key, =, iter, ., key, (, ), ;, double, delta, ;, delta, =, iter, ., value, (, ), -]
[., key, (, ), ;, double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (]
[), ;, double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;]
[double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=]
[double, delta, ;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=]
[;, delta, =, iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *]
[iter, ., value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }]
[value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter, =]
[value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter, =]
[value, (, ), -, v, ., getEntry, (, key, ), ;, res, +=, delta, *, delta, ;, }, iter, =]
[+=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[+=, delta, *, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (]
[., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, final, double, value, =]
[., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, final, double, value, =]
[(, !, entries, ., containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (, ), ;]
[entries, ., containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (, ), ;, res, +=]
[entries, ., containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (, ), ;, res, +=]
[containsKey, (, key, ), ), {, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *]
[{, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }, }, return]
[{, final, double, value, =, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }, }, return]
[=, iter, ., value, (, ), ;, res, +=, value, *, value, ;, }, }, return, FastMath, ., sqrt, (]
[FastMath, ., sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[sqrt, (, res, ), ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (]
[v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, )]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[OpenMapRealVector, ), {, return, getDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getDistance, (]
[., getDistance, (, v, ), ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {]
[(, v, ), ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (]
[}, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return]
[}, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return]
[public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, return, entries, ., get, (]
[;, return, entries, ., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[entries, ., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[entries, ., get, (, index, ), ;, }, public, double, getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[getL1Distance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =]
[(, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[(, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[{, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -]
[{, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -]
[(, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (]
[(, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (]
[abs, (, iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;]
[iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=]
[(, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, max, +=, delta, ;, }, iter, =]
[;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[;, max, +=, delta, ;, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (]
[iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =]
[iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =]
[), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =, FastMath, ., abs, (]
[), ;, if, (, !, entries, ., containsKey, (, key, ), ), {, double, delta, =, FastMath, ., abs, (]
[containsKey, (, key, ), ), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;]
[key, ), ), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=]
[key, ), ), {, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=]
[double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), ), ;, max, +=, FastMath, ., abs, (]
[(, iter, ., value, (, ), ), ;, max, +=, FastMath, ., abs, (, delta, ), ;, }, }, return]
[), ;, }, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[}, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[}, }, return, max, ;, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (]
[v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, )]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[OpenMapRealVector, ), {, return, getL1Distance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getL1Distance, (]
[return, super, ., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[., getL1Distance, (, v, ), ;, }, }, private, double, getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[getLInfDistance, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, double, max, =, 0, ;, Iterator, iter, =]
[(, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[(, ), ), ;, double, max, =, 0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[0, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (]
[{, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -]
[{, iter, ., advance, (, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -]
[(, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (]
[(, ), ;, double, delta, =, FastMath, ., abs, (, iter, ., value, (, ), -, v, ., getEntry, (]
[iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (]
[iter, ., value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (]
[value, (, ), -, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta, >]
[-, v, ., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta, >, max, ), {]
[., getEntry, (, iter, ., key, (, ), ), ), ;, if, (, delta, >, max, ), {, max, =]
[., key, (, ), ), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }]
[(, ), ), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =]
[(, ), ), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =]
[(, ), ), ), ;, if, (, delta, >, max, ), {, max, =, delta, ;, }, }, iter, =]
[max, =, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[max, =, delta, ;, }, }, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !]
[advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&]
[;, int, key, =, iter, ., key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&]
[key, (, ), ;, if, (, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, ), >]
[;, if, (, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, ), >, max, ), {]
[(, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, ), >, max, ), {, max, =]
[(, !, entries, ., containsKey, (, key, ), &&, iter, ., value, (, ), >, max, ), {, max, =]
[iter, ., value, (, ), >, max, ), {, max, =, iter, ., value, (, ), ;, }, }, return]
[), ;, }, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {]
[}, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[}, }, return, max, ;, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (]
[v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, )]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[OpenMapRealVector, ), {, return, getLInfDistance, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., getLInfDistance, (]
[super, ., getLInfDistance, (, v, ), ;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =]
[), ;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =]
[), ;, }, }, @, Override, public, boolean, isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =]
[isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[isInfinite, (, ), {, boolean, infiniteFound, =, false, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[false, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[false, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, final, double, value, =]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, final, double, value, =]
[), {, iter, ., advance, (, ), ;, final, double, value, =, iter, ., value, (, ), ;, if, (]
[), {, iter, ., advance, (, ), ;, final, double, value, =, iter, ., value, (, ), ;, if, (]
[advance, (, ), ;, final, double, value, =, iter, ., value, (, ), ;, if, (, Double, ., isNaN, (]
[double, value, =, iter, ., value, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, return]
[value, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, return, false, ;, }, if, (]
[value, (, ), ;, if, (, Double, ., isNaN, (, value, ), ), {, return, false, ;, }, if, (]
[if, (, Double, ., isNaN, (, value, ), ), {, return, false, ;, }, if, (, Double, ., isInfinite, (]
[isNaN, (, value, ), ), {, return, false, ;, }, if, (, Double, ., isInfinite, (, value, ), ), {]
[value, ), ), {, return, false, ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, infiniteFound, =]
[false, ;, }, if, (, Double, ., isInfinite, (, value, ), ), {, infiniteFound, =, true, ;, }, }, return]
[=, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =]
[=, true, ;, }, }, return, infiniteFound, ;, }, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =]
[}, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[}, @, Override, public, boolean, isNaN, (, ), {, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[), {, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), {, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (, Double, ., isNaN, (]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, if, (, Double, ., isNaN, (]
[., advance, (, ), ;, if, (, Double, ., isNaN, (, iter, ., value, (, ), ), ), {, return]
[if, (, Double, ., isNaN, (, iter, ., value, (, ), ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, ), {, return]
[return, true, ;, }, }, return, false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, ), {, return]
[false, ;, }, @, Override, public, OpenMapRealVector, mapAdd, (, double, d, ), {, return, copy, (, ), ., mapAddToSelf, (]
[(, d, ), ;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =]
[), ;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[), ;, }, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[Override, public, OpenMapRealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[(, double, d, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (]
[=, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +]
[virtualSize, ;, i, ++, ), {, setEntry, (, i, ,, getEntry, (, i, ), +, d, ), ;, }, return]
[}, return, this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {]
[this, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, checkIndex, (]
[public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (]
[void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, !]
[(, int, index, ,, double, value, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, !, isDefaultValue, (]
[double, value, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[double, value, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, !, isDefaultValue, (, value, ), ), {]
[OutOfRangeException, {, checkIndex, (, index, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (]
[checkIndex, (, index, ), ;, if, (, !, isDefaultValue, (, value, ), ), {, entries, ., put, (, index, ,]
[!, isDefaultValue, (, value, ), ), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (]
[!, isDefaultValue, (, value, ), ), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (]
[), ), {, entries, ., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (]
[., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {]
[., put, (, index, ,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {]
[,, value, ), ;, }, else, if, (, entries, ., containsKey, (, index, ), ), {, entries, ., remove, (]
[index, ), ;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {]
[;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (]
[@, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;]
[public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (]
[setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[v, ), throws, OutOfRangeException, {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -]
[), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =]
[checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;]
[checkIndex, (, index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;]
[index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[index, +, v, ., getDimension, (, ), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;]
[), -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (]
[(, int, i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (]
[i, =, 0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +]
[0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,]
[0, ;, i, <, v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,]
[v, ., getDimension, (, ), ;, i, ++, ), {, setEntry, (, i, +, index, ,, v, ., getEntry, (]
[), ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =]
[;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;]
[;, }, }, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;, i, <]
[Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[Override, public, void, set, (, double, value, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;]
[(, double, value, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {]
[value, ), {, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (]
[{, for, (, int, i, =, 0, ;, i, <, virtualSize, ;, i, ++, ), {, setEntry, (, i, ,]
[{, setEntry, (, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {]
[(, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[(, i, ,, value, ), ;, }, }, public, OpenMapRealVector, subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[subtract, (, OpenMapRealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, OpenMapRealVector, res, =, copy, (, ), ;, Iterator, iter, =]
[=, copy, (, ), ;, Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, copy, (, ), ;, Iterator, iter, =, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, v, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, int, key, =]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (]
[., advance, (, ), ;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[;, int, key, =, iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {]
[iter, ., key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[key, (, ), ;, if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,]
[if, (, entries, ., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), -]
[., containsKey, (, key, ), ), {, res, ., setEntry, (, key, ,, entries, ., get, (, key, ), -]
[(, key, ,, entries, ., get, (, key, ), -, iter, ., value, (, ), ), ;, }, else, {]
[(, key, ,, entries, ., get, (, key, ), -, iter, ., value, (, ), ), ;, }, else, {]
[., get, (, key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (]
[(, key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,]
[key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, -]
[key, ), -, iter, ., value, (, ), ), ;, }, else, {, res, ., setEntry, (, key, ,, -]
[}, else, {, res, ., setEntry, (, key, ,, -, iter, ., value, (, ), ), ;, }, }, return]
[), ;, }, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {]
[}, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[}, }, return, res, ;, }, @, Override, public, RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[RealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (]
[throws, DimensionMismatchException, {, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return]
[{, checkVectorDimensions, (, v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (]
[v, ., getDimension, (, ), ), ;, if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, )]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[if, (, v, instanceof, OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return]
[OpenMapRealVector, ), {, return, subtract, (, (, OpenMapRealVector, ), v, ), ;, }, else, {, return, super, ., subtract, (]
[subtract, (, v, ), ;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =]
[;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =, copy, (, ), ;]
[;, }, }, @, Override, public, OpenMapRealVector, unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =, copy, (, ), ;]
[unitVector, (, ), throws, MathArithmeticException, {, OpenMapRealVector, res, =, copy, (, ), ;, res, ., unitize, (, ), ;, return]
[(, ), ;, return, res, ;, }, @, Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double, norm, =]
[}, @, Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double, norm, =, getNorm, (, ), ;, if, (]
[Override, public, void, unitize, (, ), throws, MathArithmeticException, {, double, norm, =, getNorm, (, ), ;, if, (, isDefaultValue, (]
[), throws, MathArithmeticException, {, double, norm, =, getNorm, (, ), ;, if, (, isDefaultValue, (, norm, ), ), {, throw]
[{, double, norm, =, getNorm, (, ), ;, if, (, isDefaultValue, (, norm, ), ), {, throw, new, MathArithmeticException, (]
[{, double, norm, =, getNorm, (, ), ;, if, (, isDefaultValue, (, norm, ), ), {, throw, new, MathArithmeticException, (]
[(, isDefaultValue, (, norm, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =]
[(, isDefaultValue, (, norm, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[(, ), ), {, iter, ., advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,]
[advance, (, ), ;, entries, ., put, (, iter, ., key, (, ), ,, iter, ., value, (, ), /]
[norm, ), ;, }, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res, =]
[}, }, @, Override, public, double, [, ], toArray, (, ), {, double, [, ], res, =, new, double, []
[[, ], toArray, (, ), {, double, [, ], res, =, new, double, [, virtualSize, ], ;, Iterator, iter, =]
[[, ], toArray, (, ), {, double, [, ], res, =, new, double, [, virtualSize, ], ;, Iterator, iter, =]
[], res, =, new, double, [, virtualSize, ], ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[], res, =, new, double, [, virtualSize, ], ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[], ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[], ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, []
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, []
[hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =]
[hasNext, (, ), ), {, iter, ., advance, (, ), ;, res, [, iter, ., key, (, ), ], =]
[(, ), ;, res, [, iter, ., key, (, ), ], =, iter, ., value, (, ), ;, }, return]
[(, ), ;, }, return, res, ;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =]
[res, ;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, long, temp, ;]
[hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, long, temp, ;, temp, =]
[hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, long, temp, ;, temp, =]
[final, int, prime, =, 31, ;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (]
[=, 31, ;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;]
[;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =]
[;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =]
[;, int, result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =]
[result, =, 1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *]
[1, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +]
[temp, ;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, )]
[;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (]
[;, temp, =, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (]
[=, Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^]
[Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (]
[Double, ., doubleToLongBits, (, epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (]
[epsilon, ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[=, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =, prime, *]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, result, =, prime, *, result, +]
[(, temp, >, >, >, 32, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =]
[(, temp, >, >, >, 32, ), ), ;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =]
[;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, result, =, prime, *, result, +, virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[virtualSize, ;, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =]
[(, ), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (]
[(, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (]
[{, iter, ., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;]
[., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =]
[., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =]
[., advance, (, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =]
[(, ), ;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *]
[;, temp, =, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +]
[Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, )]
[., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (]
[., doubleToLongBits, (, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (]
[(, iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^]
[iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (]
[iter, ., value, (, ), ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (]
[(, ), ), ;, result, =, prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[prime, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, 32, ), ), ;, }, return]
[), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ), ;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, }, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[this, ==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =]
[if, (, !, (, obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, )]
[obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (]
[obj, instanceof, OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (]
[OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=]
[OpenMapRealVector, ), ), {, return, false, ;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=]
[;, }, OpenMapRealVector, other, =, (, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return]
[(, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (]
[(, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (]
[(, OpenMapRealVector, ), obj, ;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (]
[;, if, (, virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (]
[virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=]
[virtualSize, !=, other, ., virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=]
[virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (]
[virtualSize, ), {, return, false, ;, }, if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (]
[if, (, Double, ., doubleToLongBits, (, epsilon, ), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return]
[epsilon, ), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =]
[epsilon, ), !=, Double, ., doubleToLongBits, (, other, ., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =]
[., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[., epsilon, ), ), {, return, false, ;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[;, }, Iterator, iter, =, entries, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, other, ., getEntry, (]
[iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =, other, ., getEntry, (]
[advance, (, ), ;, double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (]
[advance, (, ), ;, double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (]
[advance, (, ), ;, double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (]
[double, test, =, other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (]
[other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=]
[other, ., getEntry, (, iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=]
[iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (]
[iter, ., key, (, ), ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (]
[Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return]
[test, ), !=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }]
[!=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[!=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[!=, Double, ., doubleToLongBits, (, iter, ., value, (, ), ), ), {, return, false, ;, }, }, iter, =]
[{, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[{, return, false, ;, }, }, iter, =, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[=, other, ., getEntries, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =]
[), ;, while, (, iter, ., hasNext, (, ), ), {, iter, ., advance, (, ), ;, double, test, =]
[), ), {, iter, ., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (]
[), ), {, iter, ., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (]
[., advance, (, ), ;, double, test, =, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (]
[), ;, double, test, =, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=]
[), ;, double, test, =, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=]
[=, iter, ., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (]
[., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (]
[., value, (, ), ;, if, (, Double, ., doubleToLongBits, (, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (]
[(, test, ), !=, Double, ., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return]
[., doubleToLongBits, (, getEntry, (, iter, ., key, (, ), ), ), ), {, return, false, ;, }, }, return]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return]
[{, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double, )]
[{, return, false, ;, }, }, return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double, )]
[return, true, ;, }, public, double, getSparsity, (, ), {, return, (, double, ), entries, ., size, (, ), /]
[}, public, double, getSparsity, (, ), {, return, (, double, ), entries, ., size, (, ), /, (, double, )]
[(, ), ;, }, @, Override, public, java, ., util, ., Iterator, <, Entry, >, sparseIterator, (, ), {, return]
[;, }, protected, class, OpenMapEntry, extends, Entry, {, private, final, Iterator, iter, ;, protected, OpenMapEntry, (, Iterator, iter, ), {]
[;, }, protected, class, OpenMapEntry, extends, Entry, {, private, final, Iterator, iter, ;, protected, OpenMapEntry, (, Iterator, iter, ), {]
[OpenMapEntry, extends, Entry, {, private, final, Iterator, iter, ;, protected, OpenMapEntry, (, Iterator, iter, ), {, this, ., iter, =]
[Iterator, iter, ), {, this, ., iter, =, iter, ;, }, @, Override, public, double, getValue, (, ), {, return]
[Iterator, iter, ), {, this, ., iter, =, iter, ;, }, @, Override, public, double, getValue, (, ), {, return]
[), {, return, iter, ., value, (, ), ;, }, @, Override, public, void, setValue, (, double, value, ), {]
[), {, return, iter, ., value, (, ), ;, }, @, Override, public, void, setValue, (, double, value, ), {]
[., value, (, ), ;, }, @, Override, public, void, setValue, (, double, value, ), {, entries, ., put, (]
[., value, (, ), ;, }, @, Override, public, void, setValue, (, double, value, ), {, entries, ., put, (]
[@, Override, public, void, setValue, (, double, value, ), {, entries, ., put, (, iter, ., key, (, ), ,]
[(, iter, ., key, (, ), ,, value, ), ;, }, @, Override, public, int, getIndex, (, ), {, return]
[(, iter, ., key, (, ), ,, value, ), ;, }, @, Override, public, int, getIndex, (, ), {, return]
[Iterator, <, Entry, >, {, private, final, Iterator, iter, ;, private, final, Entry, current, ;, protected, OpenMapSparseIterator, (, ), {]
[Entry, >, {, private, final, Iterator, iter, ;, private, final, Entry, current, ;, protected, OpenMapSparseIterator, (, ), {, iter, =]
[Entry, >, {, private, final, Iterator, iter, ;, private, final, Entry, current, ;, protected, OpenMapSparseIterator, (, ), {, iter, =]
[iter, ;, private, final, Entry, current, ;, protected, OpenMapSparseIterator, (, ), {, iter, =, entries, ., iterator, (, ), ;]
[private, final, Entry, current, ;, protected, OpenMapSparseIterator, (, ), {, iter, =, entries, ., iterator, (, ), ;, current, =]
[current, ;, protected, OpenMapSparseIterator, (, ), {, iter, =, entries, ., iterator, (, ), ;, current, =, new, OpenMapEntry, (]
[iterator, (, ), ;, current, =, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (, ), {, return]
[iterator, (, ), ;, current, =, new, OpenMapEntry, (, iter, ), ;, }, public, boolean, hasNext, (, ), {, return]
[public, boolean, hasNext, (, ), {, return, iter, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[public, boolean, hasNext, (, ), {, return, iter, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {]
[iter, ., hasNext, (, ), ;, }, public, Entry, next, (, ), {, iter, ., advance, (, ), ;, return]
[(, ), {, iter, ., advance, (, ), ;, return, current, ;, }, public, void, remove, (, ), {, throw]
[iter, ., advance, (, ), ;, return, current, ;, }, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (]
