[;, private, final, RealMatrix, scale, ;, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {]
[;, private, final, RealMatrix, scale, ;, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {]
[scale, ;, public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {, this, ., function, =]
[public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {, this, ., function, =, function, ;]
[public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {, this, ., function, =, function, ;]
[MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {, this, ., function, =, function, ;, this, ., observations, =]
[MultivariateVectorFunction, function, ,, final, double, [, ], observations, ), {, this, ., function, =, function, ;, this, ., observations, =]
[], observations, ), {, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[], observations, ), {, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =]
[function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;]
[function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;]
[this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =]
[(, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, double, [, ], weights, ), {, if, (]
[(, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, double, [, ], weights, ), {, if, (]
[(, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, double, [, ], weights, ), {, if, (]
[,, final, double, [, ], observations, ,, final, double, [, ], weights, ), {, if, (, observations, ., length, !=]
[,, final, double, [, ], observations, ,, final, double, [, ], weights, ), {, if, (, observations, ., length, !=]
[,, final, double, [, ], weights, ), {, if, (, observations, ., length, !=, weights, ., length, ), {, throw]
[[, ], weights, ), {, if, (, observations, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (]
[[, ], weights, ), {, if, (, observations, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, observations, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,]
[{, if, (, observations, ., length, !=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,]
[!=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }]
[!=, weights, ., length, ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }]
[), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =]
[throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =, function, ;]
[throw, new, DimensionMismatchException, (, observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =, function, ;]
[observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =]
[observations, ., length, ,, weights, ., length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =]
[length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[length, ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =]
[this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =]
[this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;]
[this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;]
[observations, ., clone, (, ), ;, this, ., weights, =, weights, ., clone, (, ), ;, this, ., scale, =]
[public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {, if, (]
[public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {, if, (]
[public, LeastSquaresConverter, (, final, MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {, if, (]
[MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {, if, (, observations, ., length, !=]
[MultivariateVectorFunction, function, ,, final, double, [, ], observations, ,, final, RealMatrix, scale, ), {, if, (, observations, ., length, !=]
[,, final, RealMatrix, scale, ), {, if, (, observations, ., length, !=, scale, ., getColumnDimension, (, ), ), {, throw]
[scale, ), {, if, (, observations, ., length, !=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[scale, ), {, if, (, observations, ., length, !=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[(, observations, ., length, !=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,]
[(, observations, ., length, !=, scale, ., getColumnDimension, (, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,]
[(, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }]
[(, ), ), {, throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }]
[throw, new, DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =]
[DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;]
[DimensionMismatchException, (, observations, ., length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;]
[length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;, this, ., observations, =]
[length, ,, scale, ., getColumnDimension, (, ), ), ;, }, this, ., function, =, function, ;, this, ., observations, =]
[), ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[), ), ;, }, this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;]
[this, ., function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =]
[function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;]
[function, =, function, ;, this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;]
[this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =]
[this, ., observations, =, observations, ., clone, (, ), ;, this, ., weights, =, null, ;, this, ., scale, =]
[), ;, }, public, double, value, (, final, double, [, ], point, ), {, final, double, [, ], residuals, =]
[), ;, }, public, double, value, (, final, double, [, ], point, ), {, final, double, [, ], residuals, =]
[double, value, (, final, double, [, ], point, ), {, final, double, [, ], residuals, =, function, ., value, (]
[[, ], point, ), {, final, double, [, ], residuals, =, function, ., value, (, point, ), ;, if, (]
[[, ], point, ), {, final, double, [, ], residuals, =, function, ., value, (, point, ), ;, if, (]
[[, ], point, ), {, final, double, [, ], residuals, =, function, ., value, (, point, ), ;, if, (]
[{, final, double, [, ], residuals, =, function, ., value, (, point, ), ;, if, (, residuals, ., length, !=]
[{, final, double, [, ], residuals, =, function, ., value, (, point, ), ;, if, (, residuals, ., length, !=]
[=, function, ., value, (, point, ), ;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw]
[value, (, point, ), ;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (]
[value, (, point, ), ;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (]
[;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,]
[;, if, (, residuals, ., length, !=, observations, ., length, ), {, throw, new, DimensionMismatchException, (, residuals, ., length, ,]
[{, throw, new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i, =]
[new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[new, DimensionMismatchException, (, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[(, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, residuals, ., length, ,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;]
[observations, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, residuals, []
[int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, residuals, [, i, ], -=]
[int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, residuals, [, i, ], -=]
[=, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, residuals, [, i, ], -=, observations, []
[length, ;, ++, i, ), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =]
[), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (]
[), {, residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (]
[residuals, [, i, ], -=, observations, [, i, ], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=]
[], ;, }, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =]
[}, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;]
[}, double, sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;]
[sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[sumSquares, =, 0, ;, if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, weights, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;]
[(, weights, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, final, double, ri, =]
[(, int, i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, final, double, ri, =]
[i, =, 0, ;, i, <, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, []
[;, i, <, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;]
[<, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=]
[<, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=]
[<, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=]
[<, residuals, ., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=]
[., length, ;, ++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, []
[++, i, ), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ], *]
[), {, final, double, ri, =, residuals, [, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *]
[[, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (]
[[, i, ], ;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (]
[], ;, sumSquares, +=, weights, [, i, ], *, ri, *, ri, ;, }, }, else, if, (, scale, !=]
[ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :]
[ri, *, ri, ;, }, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :]
[}, }, else, if, (, scale, !=, null, ), {, for, (, final, double, yi, :, scale, ., operate, (]
[(, scale, !=, null, ), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {]
[!=, null, ), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=]
[!=, null, ), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=]
[), {, for, (, final, double, yi, :, scale, ., operate, (, residuals, ), ), {, sumSquares, +=, yi, *]
[residuals, ), ), {, sumSquares, +=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :]
[{, sumSquares, +=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {]
[+=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=]
[+=, yi, *, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=]
[*, yi, ;, }, }, else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=, ri, *]
[else, {, for, (, final, double, ri, :, residuals, ), {, sumSquares, +=, ri, *, ri, ;, }, }, return]
