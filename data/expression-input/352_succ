[;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,, "", ,, "; ", ,]
[., getInstance, (, ), ;, public, static, final, RealMatrixFormat, OCTAVE_FORMAT, =, new, RealMatrixFormat, (, "[", ,, "]", ,, "", ,]
[;, private, MatrixUtils, (, ), {, super, (, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows, ,]
[,, "]", ,, "", ,, "", ,, "; ", ,, ", ", ), ;, private, MatrixUtils, (, ), {, super, (, )]
[,, "", ,, "", ,, "; ", ,, ", ", ), ;, private, MatrixUtils, (, ), {, super, (, ), ;, }]
[,, "", ,, "; ", ,, ", ", ), ;, private, MatrixUtils, (, ), {, super, (, ), ;, }, public, static]
[,, "; ", ,, ", ", ), ;, private, MatrixUtils, (, ), {, super, (, ), ;, }, public, static, RealMatrix, createRealMatrix]
[,, ", ", ), ;, private, MatrixUtils, (, ), {, super, (, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final]
[), ;, private, MatrixUtils, (, ), {, super, (, ), ;, }, public, static, RealMatrix, createRealMatrix, (, final, int, rows]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, final, Field]
[?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public, static]
[), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public]
[<=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;]
[*, columns, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns]
[<=, 4096, ), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;]
[), ?, new, Array2DRowRealMatrix, (, rows, ,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public]
[:, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >]
[,, columns, ), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public, static, <, T, extends, FieldElement, <]
[), :, new, BlockRealMatrix, (, rows, ,, columns, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, final, Field]
[,, columns, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix]
[), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, final]
[;, }, public, static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException]
[?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (]
[), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >]
[<=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <]
[*, columns, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new]
[<=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <]
[), ?, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >]
[:, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), ;, }, public, static, RealMatrix, createRealMatrix, (]
[,, rows, ,, columns, ), :, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), ;, }]
[,, columns, ), :, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), ;, }, public, static]
[), :, new, BlockFieldMatrix, <, T, >, (, field, ,, rows, ,, columns, ), ;, }, public, static, RealMatrix, createRealMatrix]
[;, }, public, static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException]
[,, rows, ,, columns, ), ;, }, public, static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws]
[,, columns, ), ;, }, public, static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,]
[), ;, }, public, static, RealMatrix, createRealMatrix, (, double, [, ], [, ], data, ), throws, NullArgumentException, ,, DimensionMismatchException, ,]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, .]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, []
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, T, []
[?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <, T, extends, FieldElement]
[), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <, T, extends]
[<=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <]
[*, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (]
[., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new]
[<=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <]
[., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public]
[[, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, )]
[], ., length, <=, 4096, ), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }]
[), ?, new, Array2DRowRealMatrix, (, data, ), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <, T, extends]
[:, new, BlockRealMatrix, (, data, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <]
[), :, new, BlockRealMatrix, (, data, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, T, []
[), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldMatrix, (, T]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, .]
[==, null, ||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (]
[||, data, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *]
[], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, []
[), {, throw, new, NullArgumentException, (, ), ;, }, return, (, data, ., length, *, data, [, 0, ], .]
[;, }, return, (, data, ., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix]
[;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension]
[?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data, ), ;, }]
[), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data, ), ;]
[<=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data]
[*, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :]
[., length, *, data, [, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data]
[<=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data]
[., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >]
[[, 0, ], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix]
[], ., length, <=, 4096, ), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T]
[), ?, new, Array2DRowFieldMatrix, <, T, >, (, data, ), :, new, BlockFieldMatrix, <, T, >, (, data, ), ;]
[:, new, BlockFieldMatrix, <, T, >, (, data, ), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {]
[), :, new, BlockFieldMatrix, <, T, >, (, data, ), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, )]
[;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,, dimension]
[), ;, }, public, static, RealMatrix, createRealIdentityMatrix, (, int, dimension, ), {, final, RealMatrix, m, =, createRealMatrix, (, dimension, ,]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry, (]
[,, dimension, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m]
[), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry]
[;, i, <, dimension, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return, m, ;]
[<, dimension, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return, m, ;, }, public, static]
[), {, m, ., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return, m, ;, }, public, static]
[;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >]
[., setEntry, (, i, ,, i, ,, 1.0, ), ;, }, return, m, ;, }, public, static, <, T, extends]
[,, i, ,, 1.0, ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >]
[,, 1.0, ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix]
[), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldIdentityMatrix, (, final, Field]
[;, final, T, one, =, field, ., getOne, (, ), ;, final, T, [, ], [, ], d, =, MathArrays]
[., getZero, (, ), ;, final, T, one, =, field, ., getOne, (, ), ;, final, T, [, ], []
[;, final, T, [, ], [, ], d, =, MathArrays, ., buildArray, (, field, ,, dimension, ,, dimension, ), ;]
[., getOne, (, ), ;, final, T, [, ], [, ], d, =, MathArrays, ., buildArray, (, field, ,, dimension]
[;, for, (, int, row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final, T, [, ]]
[., buildArray, (, field, ,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <, dimension]
[,, dimension, ,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <, dimension, ;, row, ++, )]
[,, dimension, ), ;, for, (, int, row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final]
[), ;, for, (, int, row, =, 0, ;, row, <, dimension, ;, row, ++, ), {, final, T, []
[;, row, <, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;]
[;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (]
[<, dimension, ;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, .]
[;, row, ++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (]
[), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,, zero]
[++, ), {, final, T, [, ], dRow, =, d, [, row, ], ;, Arrays, ., fill, (, dRow, ,]
[;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return, new]
[[, row, ], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;]
[], ;, Arrays, ., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return]
[;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,]
[., fill, (, dRow, ,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <]
[,, zero, ), ;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field]
[), ;, dRow, [, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d]
[=, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,, false, ), ;, }, public]
[[, row, ], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,, false, )]
[], =, one, ;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,, false, ), ;, }]
[;, }, return, new, Array2DRowFieldMatrix, <, T, >, (, field, ,, d, ,, false, ), ;, }, public, static, RealMatrix]
[;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix, (]
[,, d, ,, false, ), ;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final]
[,, false, ), ;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m]
[), ;, }, public, static, RealMatrix, createRealDiagonalMatrix, (, final, double, [, ], diagonal, ), {, final, RealMatrix, m, =, createRealMatrix]
[;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, .]
[,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++]
[., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length]
[), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, )]
[;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }]
[<, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }]
[., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], )]
[), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >]
[., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static]
[,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement]
[,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T]
[), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T]
[[, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >]
[], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createFieldDiagonalMatrix, (, final, T]
[;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m, .]
[,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal]
[., getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0]
[[, 0, ], ., getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int]
[], ., getField, (, ), ,, diagonal, ., length, ,, diagonal, ., length, ), ;, for, (, int, i, =]
[,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++]
[., length, ,, diagonal, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length]
[), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, ), {, m]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, diagonal, ., length, ;, ++, i, )]
[;, i, <, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }]
[<, diagonal, ., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }]
[., length, ;, ++, i, ), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], )]
[), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException]
[., setEntry, (, i, ,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static]
[,, i, ,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double]
[,, diagonal, [, i, ], ), ;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double, [, ]]
[), ;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,]
[[, i, ], ), ;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, )]
[], ), ;, }, return, m, ;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException]
[;, }, public, static, RealVector, createRealVector, (, double, [, ], data, ), throws, NoDataException, ,, NullArgumentException, {, if, (, data]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, ArrayRealVector, (, data, ,, true, ), ;, }, public]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, return, new, ArrayRealVector, (, data, ,, true, ), ;]
[), {, throw, new, NullArgumentException, (, ), ;, }, return, new, ArrayRealVector, (, data, ,, true, ), ;, }, public]
[;, }, return, new, ArrayRealVector, (, data, ,, true, ), ;, }, public, static, <, T, extends, FieldElement, <, T]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldVector, <, T, >, createFieldVector, (, final, T]
[,, true, ), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldVector, <, T, >, createFieldVector]
[), ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldVector, <, T, >, createFieldVector, (, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, data, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, data, ., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, data]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >]
[., length, ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, data]
[;, }, return, new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, ), ,, data, ,]
[), ;, }, return, new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, ), ,, data]
[., VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT, ), ;, }, return, new, ArrayFieldVector, <, T, >, (, data, [, 0, ], ., getField, (, )]
[;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, rowData]
[,, data, ,, true, ), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,]
[., getField, (, ), ,, data, ,, true, ), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData]
[[, 0, ], ., getField, (, ), ,, data, ,, true, ), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double]
[], ., getField, (, ), ,, data, ,, true, ), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ]]
[,, true, ), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {]
[), ;, }, public, static, RealMatrix, createRowRealMatrix, (, double, [, ], rowData, ), throws, NoDataException, ,, NullArgumentException, {, if, (]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m]
[;, }, final, int, nCols, =, rowData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, )]
[;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, final, RealMatrix, m, =, createRealMatrix, (, 1, ,, nCols, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m]
[), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry]
[;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i]
[;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }]
[<, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], )]
[;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }]
[), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >]
[., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static]
[,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement]
[,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T]
[), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T]
[[, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >]
[], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createRowFieldMatrix, (, final, T]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (, nCols]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nCols, =, rowData, ., length, ;, if, (, nCols]
[;, }, final, int, nCols, =, rowData, ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix]
[;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, [, 0, ], ., getField, (, ), ,]
[), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, [, 0, ], ., getField, (, )]
[., AT_LEAST_ONE_COLUMN, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, rowData, [, 0, ], ., getField]
[;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (]
[,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, )]
[., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols]
[[, 0, ], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[], ., getField, (, ), ,, 1, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m]
[), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry]
[;, i, <, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i]
[;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }]
[<, nCols, ;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], )]
[;, ++, i, ), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }]
[), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException]
[., setEntry, (, 0, ,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static]
[,, i, ,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double]
[,, rowData, [, i, ], ), ;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ]]
[), ;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,]
[[, i, ], ), ;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, )]
[], ), ;, }, return, m, ;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException]
[;, }, public, static, RealMatrix, createColumnRealMatrix, (, double, [, ], columnData, ), throws, NoDataException, ,, NullArgumentException, {, if, (, columnData]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m]
[;, }, final, int, nRows, =, columnData, ., length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, )]
[;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, final, RealMatrix, m, =, createRealMatrix, (, nRows, ,, 1, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (]
[,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry]
[;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }]
[<, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], )]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }]
[), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >]
[., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;, }, public, static]
[,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement]
[,, columnData, [, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T]
[), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T]
[[, i, ], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >]
[], ), ;, }, return, m, ;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <]
[;, }, public, static, <, T, extends, FieldElement, <, T, >, >, FieldMatrix, <, T, >, createColumnFieldMatrix, (, final, T]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (, nRows]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, nRows, =, columnData, ., length, ;, if, (, nRows]
[;, }, final, int, nRows, =, columnData, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException]
[;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix]
[., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix]
[;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, [, 0, ], ., getField, (, ), ,]
[), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, [, 0, ], ., getField, (, )]
[., AT_LEAST_ONE_ROW, ), ;, }, final, FieldMatrix, <, T, >, m, =, createFieldMatrix, (, columnData, [, 0, ], ., getField]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (]
[,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, )]
[., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows]
[[, 0, ], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[], ., getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m]
[), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry]
[;, i, <, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }]
[<, nRows, ;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], )]
[;, ++, i, ), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }]
[), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;]
[), {, m, ., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;]
[;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean, raiseException, )]
[., setEntry, (, i, ,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;, }, private, static]
[,, 0, ,, columnData, [, i, ], ), ;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix]
[,, columnData, [, i, ], ), ;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,]
[), ;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean, raiseException]
[[, i, ], ), ;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance]
[], ), ;, }, return, m, ;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean]
[;, }, private, static, boolean, isSymmetricInternal, (, RealMatrix, matrix, ,, double, relativeTolerance, ,, boolean, raiseException, ), {, final, int, rows]
[;, if, (, rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException]
[., getRowDimension, (, ), ;, if, (, rows, !=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, )]
[), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension, (, ), ), ;]
[!=, matrix, ., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix]
[), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension, (, ), ), ;]
[., getColumnDimension, (, ), ), {, if, (, raiseException, ), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension]
[), {, throw, new, NonSquareMatrixException, (, rows, ,, matrix, ., getColumnDimension, (, ), ), ;, }, else, {, return, false]
[;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;, i, <, rows, ;]
[,, matrix, ., getColumnDimension, (, ), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i]
[), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0, ;, i, <, rows]
[., getColumnDimension, (, ), ), ;, }, else, {, return, false, ;, }, }, for, (, int, i, =, 0]
[;, }, }, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (]
[;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <]
[;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++]
[<, rows, ;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;]
[;, i, ++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++]
[), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, final]
[++, ), {, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {]
[;, j, <, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j]
[+, 1, ;, j, <, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i]
[;, j, <, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j]
[;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double]
[<, rows, ;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;]
[;, j, ++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double]
[), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =, matrix]
[++, ), {, final, double, mij, =, matrix, ., getEntry, (, i, ,, j, ), ;, final, double, mji, =]
[;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (]
[., getEntry, (, i, ,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, )]
[,, j, ), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath]
[), ;, final, double, mji, =, matrix, ., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs]
[;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (]
[., getEntry, (, j, ,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath]
[,, i, ), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath]
[), ;, if, (, FastMath, ., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs]
[), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else]
[>, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *]
[., abs, (, mij, -, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath]
[), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), )]
[-, mji, ), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji]
[), >, FastMath, ., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), )]
[), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else]
[*, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;]
[., max, (, FastMath, ., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, )]
[,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException]
[., abs, (, mij, ), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException]
[), ,, FastMath, ., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new]
[), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, )]
[., abs, (, mji, ), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i]
[), ), *, relativeTolerance, ), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance]
[), {, if, (, raiseException, ), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else]
[), {, throw, new, NonSymmetricMatrixException, (, i, ,, j, ,, relativeTolerance, ), ;, }, else, {, return, false, ;, }]
[;, }, else, {, return, false, ;, }, }, }, }, return, true, ;, }, public, static, void, checkSymmetric, (]
[,, j, ,, relativeTolerance, ), ;, }, else, {, return, false, ;, }, }, }, }, return, true, ;, }]
[,, relativeTolerance, ), ;, }, else, {, return, false, ;, }, }, }, }, return, true, ;, }, public, static]
[), ;, }, else, {, return, false, ;, }, }, }, }, return, true, ;, }, public, static, void, checkSymmetric]
[;, }, }, }, }, return, true, ;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, )]
[;, }, public, static, void, checkSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, isSymmetricInternal, (, matrix, ,, eps, ,]
[;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (, matrix, ,, eps]
[,, eps, ,, true, ), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return]
[,, true, ), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (]
[), ;, }, public, static, boolean, isSymmetric, (, RealMatrix, matrix, ,, double, eps, ), {, return, isSymmetricInternal, (, matrix, ,]
[;, }, public, static, void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,, final, int, column, ), throws]
[,, eps, ,, false, ), ;, }, public, static, void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,]
[,, false, ), ;, }, public, static, void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,, final, int]
[), ;, }, public, static, void, checkMatrixIndex, (, final, AnyMatrix, m, ,, final, int, row, ,, final, int, column, )]
[;, checkColumnIndex, (, m, ,, column, ), ;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int]
[,, row, ), ;, checkColumnIndex, (, m, ,, column, ), ;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m]
[), ;, checkColumnIndex, (, m, ,, column, ), ;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final]
[;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if, (]
[,, column, ), ;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException]
[), ;, }, public, static, void, checkRowIndex, (, final, AnyMatrix, m, ,, final, int, row, ), throws, OutOfRangeException, {, if]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -]
[||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,]
[<, 0, ||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,]
[||, row, >=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -]
[>=, m, ., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -]
[., getRowDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., ROW_INDEX, ,, row, ,, 0, ,, m, .]
[;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {, if]
[,, row, ,, 0, ,, m, ., getRowDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkColumnIndex]
[., ROW_INDEX, ,, row, ,, 0, ,, m, ., getRowDimension, (, ), -, 1, ), ;, }, }, public, static]
[,, 0, ,, m, ., getRowDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkColumnIndex, (, final]
[,, m, ., getRowDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m]
[), ;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {]
[-, 1, ), ;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws]
[., getRowDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final]
[), ;, }, }, public, static, void, checkColumnIndex, (, final, AnyMatrix, m, ,, final, int, column, ), throws, OutOfRangeException, {]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -]
[||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,]
[<, 0, ||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,]
[||, column, >=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -]
[>=, m, ., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -]
[., getColumnDimension, (, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., COLUMN_INDEX, ,, column, ,, 0, ,, m, .]
[;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, startRow, ,, final, int, endRow, ,]
[,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkSubMatrixIndex]
[., COLUMN_INDEX, ,, column, ,, 0, ,, m, ., getColumnDimension, (, ), -, 1, ), ;, }, }, public, static]
[,, 0, ,, m, ., getColumnDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final]
[,, m, ., getColumnDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m]
[), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, startRow, ,, final, int, endRow]
[-, 1, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, startRow, ,, final]
[., getColumnDimension, (, ), -, 1, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final]
[), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, startRow, ,, final, int, endRow]
[;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats]
[,, startRow, ), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new]
[), ;, checkRowIndex, (, m, ,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (]
[;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,]
[,, endRow, ), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow]
[), ;, if, (, endRow, <, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (]
[<, startRow, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (]
[;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <]
[,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,]
[., INITIAL_ROW_AFTER_FINAL_ROW, ,, endRow, ,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (]
[,, startRow, ,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, )]
[,, false, ), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if]
[), ;, }, checkColumnIndex, (, m, ,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn]
[;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats]
[,, startColumn, ), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new]
[), ;, checkColumnIndex, (, m, ,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (]
[;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,]
[,, endColumn, ), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn]
[), ;, if, (, endColumn, <, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, false, ), ;, }, }, public]
[<, startColumn, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, false, ), ;, }, }, public]
[;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, [, ], selectedRows, ,, final, int]
[,, endColumn, ,, startColumn, ,, false, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final]
[., INITIAL_COLUMN_AFTER_FINAL_COLUMN, ,, endColumn, ,, startColumn, ,, false, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m]
[,, startColumn, ,, false, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, []
[,, false, ), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, [, ], selectedRows]
[), ;, }, }, public, static, void, checkSubMatrixIndex, (, final, AnyMatrix, m, ,, final, int, [, ], selectedRows, ,, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (]
[;, }, if, (, selectedColumns, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, selectedRows, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, )]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==]
[., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, .]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, )]
[;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;]
[), ;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, )]
[., EMPTY_SELECTED_ROW_INDEX_ARRAY, ), ;, }, if, (, selectedColumns, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, .]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, )]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :]
[., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int]
[), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, )]
[;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (, m, ,, row, ), ;, }, for]
[), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (, m, ,, row, ), ;, }]
[., EMPTY_SELECTED_COLUMN_INDEX_ARRAY, ), ;, }, for, (, final, int, row, :, selectedRows, ), {, checkRowIndex, (, m, ,, row, )]
[), {, checkRowIndex, (, m, ,, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex]
[;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, m, ,, column, ), ;, }, }]
[,, row, ), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, m, ,, column, )]
[), ;, }, for, (, final, int, column, :, selectedColumns, ), {, checkColumnIndex, (, m, ,, column, ), ;, }]
[), {, checkColumnIndex, (, m, ,, column, ), ;, }, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,]
[;, }, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if]
[,, column, ), ;, }, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws]
[), ;, }, }, public, static, void, checkAdditionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {]
[), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, .]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException]
[!=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, )]
[., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right]
[), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException]
[., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), )]
[), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, .]
[), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right]
[!=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left]
[., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension]
[), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right]
[., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension]
[;, }, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {, if]
[,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;]
[., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension]
[,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkSubtractionCompatible]
[., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }]
[,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final]
[., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkSubtractionCompatible, (, final]
[), ;, }, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, MatrixDimensionMismatchException, {]
[., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkSubtractionCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right]
[), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, .]
[||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (]
[), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException]
[!=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, )]
[., getRowDimension, (, ), !=, right, ., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right]
[), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException]
[., getRowDimension, (, ), ), ||, (, left, ., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), )]
[), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, .]
[), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right]
[!=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left]
[., getColumnDimension, (, ), !=, right, ., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension]
[), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right]
[., getColumnDimension, (, ), ), ), {, throw, new, MatrixDimensionMismatchException, (, left, ., getRowDimension, (, ), ,, left, ., getColumnDimension]
[;, }, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {, if]
[,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;]
[., getRowDimension, (, ), ,, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension]
[,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkMultiplicationCompatible]
[., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }]
[,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final]
[., getRowDimension, (, ), ,, right, ., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkMultiplicationCompatible, (, final]
[), ;, }, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right, ), throws, DimensionMismatchException, {]
[., getColumnDimension, (, ), ), ;, }, }, public, static, void, checkMultiplicationCompatible, (, final, AnyMatrix, left, ,, final, AnyMatrix, right]
[), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ), ;, }]
[!=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,, right, .]
[., getColumnDimension, (, ), !=, right, ., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (]
[), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ), ;, }]
[., getRowDimension, (, ), ), {, throw, new, DimensionMismatchException, (, left, ., getColumnDimension, (, ), ,, right, ., getRowDimension, (]
[;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter, =]
[,, right, ., getRowDimension, (, ), ), ;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >]
[., getColumnDimension, (, ), ,, right, ., getRowDimension, (, ), ), ;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final]
[), ;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, ), {, final, FractionMatrixConverter, converter]
[., getRowDimension, (, ), ), ;, }, }, public, static, Array2DRowRealMatrix, fractionMatrixToRealMatrix, (, final, FieldMatrix, <, Fraction, >, m, )]
[;, m, ., walkInOptimizedOrder, (, converter, ), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, FractionMatrixConverter]
[;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, FractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {, private]
[., walkInOptimizedOrder, (, converter, ), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, FractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor]
[), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, FractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {]
[;, }, private, static, class, FractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {, private, double, [, ], [, ], data, ;]
[., getConvertedMatrix, (, ), ;, }, private, static, class, FractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, Fraction, >, {, private, double, [, ]]
[), ;, }, @, Override, public, void, start, (, int, rows, ,, int, columns, ,, int, startRow, ,, int, endRow]
[., ZERO, ), ;, }, @, Override, public, void, start, (, int, rows, ,, int, columns, ,, int, startRow, ,]
[=, new, double, [, rows, ], [, columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,]
[;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data, []
[], [, columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value]
[], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, Fraction, value, ), {, data]
[=, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false]
[[, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (]
[[, row, ], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return]
[], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix]
[], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,]
[;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, }, }, public, static]
[., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false, ), ;]
[;, }, }, public, static, Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter, =]
[,, false, ), ;, }, }, public, static, Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final]
[), ;, }, }, public, static, Array2DRowRealMatrix, bigFractionMatrixToRealMatrix, (, final, FieldMatrix, <, BigFraction, >, m, ), {, final, BigFractionMatrixConverter, converter]
[;, m, ., walkInOptimizedOrder, (, converter, ), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, BigFractionMatrixConverter]
[;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, BigFractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {, private]
[., walkInOptimizedOrder, (, converter, ), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, BigFractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor]
[), ;, return, converter, ., getConvertedMatrix, (, ), ;, }, private, static, class, BigFractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {]
[;, }, private, static, class, BigFractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {, private, double, [, ], [, ], data, ;]
[., getConvertedMatrix, (, ), ;, }, private, static, class, BigFractionMatrixConverter, extends, DefaultFieldMatrixPreservingVisitor, <, BigFraction, >, {, private, double, [, ]]
[), ;, }, @, Override, public, void, start, (, int, rows, ,, int, columns, ,, int, startRow, ,, int, endRow]
[., ZERO, ), ;, }, @, Override, public, void, start, (, int, rows, ,, int, columns, ,, int, startRow, ,]
[=, new, double, [, rows, ], [, columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,]
[;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data, []
[], [, columns, ], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value]
[], ;, }, @, Override, public, void, visit, (, int, row, ,, int, column, ,, BigFraction, value, ), {, data]
[=, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false]
[[, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (]
[[, row, ], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return]
[], [, column, ], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix]
[], =, value, ., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,]
[;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, }, }, public, static]
[., doubleValue, (, ), ;, }, Array2DRowRealMatrix, getConvertedMatrix, (, ), {, return, new, Array2DRowRealMatrix, (, data, ,, false, ), ;]
[;, }, }, public, static, void, serializeRealVector, (, final, RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final]
[,, false, ), ;, }, }, public, static, void, serializeRealVector, (, final, RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws]
[), ;, }, }, public, static, void, serializeRealVector, (, final, RealVector, vector, ,, final, ObjectOutputStream, oos, ), throws, IOException, {]
[;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[., getDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble, (]
[., writeInt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble]
[;, i, <, n, ;, ++, i, ), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), )]
[;, ++, i, ), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }, }, public]
[<, n, ;, ++, i, ), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }]
[;, ++, i, ), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }, }, public]
[), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }, }, public, static, void, deserializeRealVector]
[), {, oos, ., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }, }, public, static, void, deserializeRealVector]
[;, }, }, public, static, void, deserializeRealVector, (, final, Object, instance, ,, final, String, fieldName, ,, final, ObjectInputStream, ois, )]
[., writeDouble, (, vector, ., getEntry, (, i, ), ), ;, }, }, public, static, void, deserializeRealVector, (, final, Object]
[), ;, }, }, public, static, void, deserializeRealVector, (, final, Object, instance, ,, final, String, fieldName, ,, final, ObjectInputStream, ois]
[., getEntry, (, i, ), ), ;, }, }, public, static, void, deserializeRealVector, (, final, Object, instance, ,, final, String]
[), ), ;, }, }, public, static, void, deserializeRealVector, (, final, Object, instance, ,, final, String, fieldName, ,, final, ObjectInputStream]
[;, final, double, [, ], data, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[., readInt, (, ), ;, final, double, [, ], data, =, new, double, [, n, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, data, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, data, [, i]
[;, i, <, n, ;, ++, i, ), {, data, [, i, ], =, ois, ., readDouble, (, ), ;]
[;, ++, i, ), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector]
[<, n, ;, ++, i, ), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final]
[;, ++, i, ), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector]
[), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector]
[), {, data, [, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector]
[=, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,, false, ), ;]
[[, i, ], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,]
[], =, ois, ., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,, false, )]
[;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,, false, ), ;, final, java, ., lang, ., reflect]
[., readDouble, (, ), ;, }, final, RealVector, vector, =, new, ArrayRealVector, (, data, ,, false, ), ;, final, java]
[;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName]
[,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), .]
[), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (]
[;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, vector, ), ;, }, catch, (]
[., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, vector]
[., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set]
[), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, vector, ), ;, }, catch]
[;, f, ., set, (, instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =]
[., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe]
[), ;, f, ., set, (, instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe]
[;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[., set, (, instance, ,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException]
[,, vector, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe]
[), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause]
[;, ioe, ., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe]
[;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe]
[., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[;, ioe, ., initCause, (, iae, ), ;, throw, ioe, ;, }, }, public, static, void, serializeRealMatrix, (, final, RealMatrix]
[;, throw, ioe, ;, }, }, public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,, final, ObjectOutputStream, oos, ), throws]
[., initCause, (, iae, ), ;, throw, ioe, ;, }, }, public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,]
[), ;, throw, ioe, ;, }, }, public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,, final, ObjectOutputStream, oos, )]
[;, }, }, public, static, void, serializeRealMatrix, (, final, RealMatrix, matrix, ,, final, ObjectOutputStream, oos, ), throws, IOException, {, final]
[;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, oos, .]
[., getRowDimension, (, ), ;, final, int, m, =, matrix, ., getColumnDimension, (, ), ;, oos, ., writeInt, (, n]
[;, oos, ., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =]
[., getColumnDimension, (, ), ;, oos, ., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for]
[;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[., writeInt, (, n, ), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;]
[), ;, oos, ., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int, j]
[., writeInt, (, m, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, for, (, int]
[;, i, <, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[<, n, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble]
[), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble]
[;, j, <, m, ;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j]
[;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), ), ;, }]
[<, m, ;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), )]
[;, ++, j, ), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), ), ;, }]
[), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, public]
[), {, oos, ., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, public]
[;, }, }, }, public, static, void, deserializeRealMatrix, (, final, Object, instance, ,, final, String, fieldName, ,, final, ObjectInputStream, ois]
[., writeDouble, (, matrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, public, static, void, deserializeRealMatrix]
[), ;, }, }, }, public, static, void, deserializeRealMatrix, (, final, Object, instance, ,, final, String, fieldName, ,, final, ObjectInputStream]
[., getEntry, (, i, ,, j, ), ), ;, }, }, }, public, static, void, deserializeRealMatrix, (, final, Object, instance]
[,, j, ), ), ;, }, }, }, public, static, void, deserializeRealMatrix, (, final, Object, instance, ,, final, String, fieldName]
[), ), ;, }, }, }, public, static, void, deserializeRealMatrix, (, final, Object, instance, ,, final, String, fieldName, ,, final]
[;, final, int, m, =, ois, ., readInt, (, ), ;, final, double, [, ], [, ], data, =, new]
[., readInt, (, ), ;, final, int, m, =, ois, ., readInt, (, ), ;, final, double, [, ], []
[;, final, double, [, ], [, ], data, =, new, double, [, n, ], [, m, ], ;, for, (]
[., readInt, (, ), ;, final, double, [, ], [, ], data, =, new, double, [, n, ], [, m]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, [, ]]
[], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, double, []
[;, i, <, n, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[<, n, ;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (]
[;, ++, i, ), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dataI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI, [, j, ]]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI]
[], ;, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, dataI, [, j]
[;, j, <, m, ;, ++, j, ), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;]
[;, ++, j, ), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix]
[<, m, ;, ++, j, ), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }]
[;, ++, j, ), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix]
[), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new]
[), {, dataI, [, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new]
[=, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, )]
[[, j, ], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data]
[], =, ois, ., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data, ,, false]
[;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, final, java, ., lang, .]
[., readDouble, (, ), ;, }, }, final, RealMatrix, matrix, =, new, Array2DRowRealMatrix, (, data, ,, false, ), ;, final]
[;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (, fieldName]
[,, false, ), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), .]
[), ;, final, java, ., lang, ., reflect, ., Field, f, =, instance, ., getClass, (, ), ., getDeclaredField, (]
[;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, matrix, ), ;, }, catch, (]
[., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, matrix]
[., getClass, (, ), ., getDeclaredField, (, fieldName, ), ;, f, ., setAccessible, (, true, ), ;, f, ., set]
[), ;, f, ., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, matrix, ), ;, }, catch]
[;, f, ., set, (, instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =]
[., setAccessible, (, true, ), ;, f, ., set, (, instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe]
[), ;, f, ., set, (, instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe]
[;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[., set, (, instance, ,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException]
[,, matrix, ), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe]
[), ;, }, catch, (, NoSuchFieldException, nsfe, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause]
[;, ioe, ., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe]
[;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe]
[., initCause, (, nsfe, ), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new]
[), ;, throw, ioe, ;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;]
[;, }, catch, (, IllegalAccessException, iae, ), {, IOException, ioe, =, new, IOException, (, ), ;, ioe, ., initCause, (]
[;, ioe, ., initCause, (, iae, ), ;, throw, ioe, ;, }, }, public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm]
[;, throw, ioe, ;, }, }, public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,]
[., initCause, (, iae, ), ;, throw, ioe, ;, }, }, public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector]
[), ;, throw, ioe, ;, }, }, public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException]
[;, }, }, public, static, void, solveLowerTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,, NonSquareMatrixException]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension]
[), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException]
[==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw]
[), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[!=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0]
[., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==]
[), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm]
[;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException]
[,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm]
[?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension]
[), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, .]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, .]
[:, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, )]
[,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm]
[., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;]
[), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new]
[?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[:, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension]
[), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new]
[., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, )]
[), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }]
[!=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, .]
[., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (]
[), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }]
[., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (]
[;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (]
[., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (]
[), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i]
[., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, double, diag, =, rm]
[., getRowDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {]
[;, i, <, rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, )]
[;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath]
[<, rows, ;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if]
[;, i, ++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath]
[), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (]
[++, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs]
[;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN]
[,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i]
[<, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b]
[., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i]
[., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry]
[;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,]
[), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i]
[., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry]
[;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j]
[/, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1]
[., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int]
[), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +]
[;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j]
[;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b, .]
[., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows]
[,, bi, ), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, )]
[), ;, for, (, int, j, =, i, +, 1, ;, j, <, rows, ;, j, ++, ), {, b]
[;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j]
[+, 1, ;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry]
[;, j, <, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j]
[;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[<, rows, ;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -]
[;, j, ++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry]
[++, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, .]
[;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException, ,]
[., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,]
[,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;]
[), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[-, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, void, solveUpperTriangularSystem]
[., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }]
[), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, void]
[), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[*, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix]
[), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,, MathArithmeticException]
[., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,]
[,, i, ), ), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws]
[), ), ;, }, }, }, public, static, void, solveUpperTriangularSystem, (, RealMatrix, rm, ,, RealVector, b, ), throws, DimensionMismatchException, ,]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), )]
[), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[==, null, ), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension]
[), ||, (, b, ==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, )]
[||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (]
[), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException]
[==, null, ), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw]
[), ||, (, rm, ., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException]
[), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,]
[), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[!=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0]
[., getRowDimension, (, ), !=, b, ., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==]
[), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm, ., getRowDimension, (, )]
[., getDimension, (, ), ), ), {, throw, new, DimensionMismatchException, (, (, rm, ==, null, ), ?, 0, :, rm]
[;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException]
[,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm]
[?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension]
[), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, .]
[==, null, ), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :]
[), ?, 0, :, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, .]
[:, rm, ., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, )]
[,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm]
[., getRowDimension, (, ), ,, (, b, ==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;]
[), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new]
[?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[==, null, ), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (]
[), ?, 0, :, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=]
[:, b, ., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension]
[), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new]
[., getDimension, (, ), ), ;, }, if, (, rm, ., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, )]
[), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }]
[!=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, .]
[., getColumnDimension, (, ), !=, rm, ., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (]
[), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }]
[., getRowDimension, (, ), ), {, throw, new, NonSquareMatrixException, (, rm, ., getRowDimension, (, ), ,, rm, ., getColumnDimension, (]
[;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;]
[,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (]
[., getRowDimension, (, ), ,, rm, ., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (]
[), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1]
[., getColumnDimension, (, ), ), ;, }, int, rows, =, rm, ., getRowDimension, (, ), ;, for, (, int, i]
[;, for, (, int, i, =, rows, -, 1, ;, i, >, -, 1, ;, i, --, ), {, double]
[., getRowDimension, (, ), ;, for, (, int, i, =, rows, -, 1, ;, i, >, -, 1, ;, i]
[;, i, >, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i]
[-, 1, ;, i, >, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i]
[;, i, >, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i]
[;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath]
[>, -, 1, ;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;]
[;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath]
[;, i, --, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath]
[), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (]
[--, ), {, double, diag, =, rm, ., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs]
[;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[., getEntry, (, i, ,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN]
[,, i, ), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new]
[), ;, if, (, FastMath, ., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i]
[<, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b]
[., abs, (, diag, ), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;]
[), <, Precision, ., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i]
[., SAFE_MIN, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry]
[;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,]
[), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i]
[., ZERO_DENOMINATOR, ), ;, }, double, bi, =, b, ., getEntry, (, i, ), /, diag, ;, b, ., setEntry]
[;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j]
[/, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1]
[., getEntry, (, i, ), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int]
[), /, diag, ;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -]
[;, b, ., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j]
[;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {, b]
[., setEntry, (, i, ,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >, -]
[,, bi, ), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --]
[), ;, for, (, int, j, =, i, -, 1, ;, j, >, -, 1, ;, j, --, ), {]
[;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (]
[-, 1, ;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, .]
[;, j, >, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (]
[;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[>, -, 1, ;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, )]
[;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[;, j, --, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *]
[), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry]
[--, ), {, b, ., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, .]
[;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n, =]
[., setEntry, (, j, ,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,]
[,, b, ., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;]
[), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n]
[-, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, RealMatrix, blockInverse]
[., getEntry, (, j, ), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }]
[), -, bi, *, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, RealMatrix]
[), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n]
[*, rm, ., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix]
[), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int, n]
[., getEntry, (, j, ,, i, ), ), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,]
[,, i, ), ), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {]
[), ), ;, }, }, }, public, static, RealMatrix, blockInverse, (, RealMatrix, m, ,, int, splitIndex, ), {, final, int]
[;, if, (, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (]
[., getRowDimension, (, ), ;, if, (, m, ., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (]
[), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }]
[!=, n, ), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), )]
[., getColumnDimension, (, ), !=, n, ), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, .]
[), {, throw, new, NonSquareMatrixException, (, m, ., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }]
[;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,]
[,, m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a]
[., getRowDimension, (, ), ,, m, ., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1]
[), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0]
[., getColumnDimension, (, ), ), ;, }, final, int, splitIndex1, =, splitIndex, +, 1, ;, final, RealMatrix, a, =, m]
[;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix]
[+, 1, ;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;]
[;, final, RealMatrix, a, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix]
[;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;]
[., getSubMatrix, (, 0, ,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (]
[,, splitIndex, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,]
[,, splitIndex, ), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -]
[), ;, final, RealMatrix, b, =, m, ., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, )]
[;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, ), ;]
[., getSubMatrix, (, 0, ,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, .]
[,, splitIndex, ,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,]
[,, splitIndex1, ,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -]
[,, n, -, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,]
[), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, )]
[-, 1, ), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,]
[), ;, final, RealMatrix, c, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, )]
[;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -, 1]
[., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, .]
[,, n, -, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,]
[-, 1, ,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -]
[,, 0, ,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,]
[,, splitIndex, ), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,]
[), ;, final, RealMatrix, d, =, m, ., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -]
[;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, )]
[., getSubMatrix, (, splitIndex1, ,, n, -, 1, ,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =]
[,, n, -, 1, ,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a]
[,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver]
[-, 1, ,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;]
[,, splitIndex1, ,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver]
[,, n, -, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =]
[), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (]
[-, 1, ), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, .]
[), ;, final, SingularValueDecomposition, aDec, =, new, SingularValueDecomposition, (, a, ), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (]
[;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (, !, aSolver, ., isNonSingular, (, ), )]
[), ;, final, DecompositionSolver, aSolver, =, aDec, ., getSolver, (, ), ;, if, (, !, aSolver, ., isNonSingular, (, )]
[;, if, (, !, aSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix]
[., getSolver, (, ), ;, if, (, !, aSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, )]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse, (, ), ;, final]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse, (, ), ;, final]
[., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse]
[;, }, final, RealMatrix, aInv, =, aSolver, ., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (, d]
[;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, )]
[., getInverse, (, ), ;, final, SingularValueDecomposition, dDec, =, new, SingularValueDecomposition, (, d, ), ;, final, DecompositionSolver, dSolver, =, dDec]
[;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (, !, dSolver, ., isNonSingular, (, ), )]
[), ;, final, DecompositionSolver, dSolver, =, dDec, ., getSolver, (, ), ;, if, (, !, dSolver, ., isNonSingular, (, )]
[;, if, (, !, dSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix]
[., getSolver, (, ), ;, if, (, !, dSolver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, )]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final]
[., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse]
[;, }, final, RealMatrix, dInv, =, dSolver, ., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (]
[;, final, RealMatrix, tmp1, =, a, ., subtract, (, b, ., multiply, (, dInv, ), ., multiply, (, c, )]
[., getInverse, (, ), ;, final, RealMatrix, tmp1, =, a, ., subtract, (, b, ., multiply, (, dInv, ), .]
[;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, )]
[., subtract, (, b, ., multiply, (, dInv, ), ., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =]
[), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (]
[., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver]
[., multiply, (, dInv, ), ., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1]
[), ., multiply, (, c, ), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver]
[), ), ;, final, SingularValueDecomposition, tmp1Dec, =, new, SingularValueDecomposition, (, tmp1, ), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver]
[;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (, !, tmp1Solver, ., isNonSingular, (, ), )]
[), ;, final, DecompositionSolver, tmp1Solver, =, tmp1Dec, ., getSolver, (, ), ;, if, (, !, tmp1Solver, ., isNonSingular, (, )]
[;, if, (, !, tmp1Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix]
[., getSolver, (, ), ;, if, (, !, tmp1Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, )]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final]
[., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse]
[;, }, final, RealMatrix, result00, =, tmp1Solver, ., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (]
[;, final, RealMatrix, tmp2, =, d, ., subtract, (, c, ., multiply, (, aInv, ), ., multiply, (, b, )]
[., getInverse, (, ), ;, final, RealMatrix, tmp2, =, d, ., subtract, (, c, ., multiply, (, aInv, ), .]
[;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, )]
[., subtract, (, c, ., multiply, (, aInv, ), ., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =]
[), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (]
[., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver]
[., multiply, (, aInv, ), ., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2]
[), ., multiply, (, b, ), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver]
[), ), ;, final, SingularValueDecomposition, tmp2Dec, =, new, SingularValueDecomposition, (, tmp2, ), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver]
[;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (, !, tmp2Solver, ., isNonSingular, (, ), )]
[), ;, final, DecompositionSolver, tmp2Solver, =, tmp2Dec, ., getSolver, (, ), ;, if, (, !, tmp2Solver, ., isNonSingular, (, )]
[;, if, (, !, tmp2Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix]
[., getSolver, (, ), ;, if, (, !, tmp2Solver, ., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, )]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final]
[), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final]
[., isNonSingular, (, ), ), {, throw, new, SingularMatrixException, (, ), ;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse]
[;, }, final, RealMatrix, result11, =, tmp2Solver, ., getInverse, (, ), ;, final, RealMatrix, result01, =, aInv, ., multiply, (]
[;, final, RealMatrix, result01, =, aInv, ., multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -]
[., getInverse, (, ), ;, final, RealMatrix, result01, =, aInv, ., multiply, (, b, ), ., multiply, (, result11, )]
[;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (, -]
[., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (]
[., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply, (]
[., multiply, (, b, ), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10]
[), ., multiply, (, result11, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply]
[), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply]
[), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (]
[), ;, final, RealMatrix, result10, =, dInv, ., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (]
[;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData]
[., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result]
[., multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n]
[., multiply, (, c, ), ., multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result]
[), ., multiply, (, result00, ), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (]
[), ., scalarMultiply, (, -, 1, ), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;]
[), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (, result00, .]
[), ;, final, RealMatrix, result, =, new, Array2DRowRealMatrix, (, n, ,, n, ), ;, result, ., setSubMatrix, (, result00, .]
[;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (]
[,, n, ), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result]
[), ;, result, ., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix]
[;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (]
[., setSubMatrix, (, result00, ., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, .]
[,, 0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, )]
[., getData, (, ), ,, 0, ,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,]
[,, 0, ), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result]
[), ;, result, ., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix]
[;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (]
[., setSubMatrix, (, result01, ., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, .]
[,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, )]
[., getData, (, ), ,, 0, ,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,]
[,, splitIndex1, ), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result]
[), ;, result, ., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix]
[;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return, result, ;, }]
[., setSubMatrix, (, result10, ., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (, result11, .]
[,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, )]
[., getData, (, ), ,, splitIndex1, ,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,]
[,, 0, ), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return]
[), ;, result, ., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return, result, ;]
[;, return, result, ;, }, }]
[., setSubMatrix, (, result11, ., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return, result, ;, }, }]
[,, splitIndex1, ,, splitIndex1, ), ;, return, result, ;, }, }]
[., getData, (, ), ,, splitIndex1, ,, splitIndex1, ), ;, return, result, ;, }, }]
[,, splitIndex1, ), ;, return, result, ;, }, }]
[), ;, return, result, ;, }, }]
[;, }, }]
