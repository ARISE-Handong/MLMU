[;, private, final, Multimap, <, Var, ,, Node, >, varToNameUsage, =, HashMultimap, ., create, (, ), ;, private, final, AbstractCompiler]
[., create, (, ), ;, private, final, Multimap, <, Var, ,, Node, >, varToNameUsage, =, HashMultimap, ., create, (, )]
[;, private, final, AbstractCompiler, compiler, ;, private, final, SortedSet, <, Assignment, >, varsByFrequency, ;, private, final, Map, <, String, ,]
[., create, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, SortedSet, <, Assignment, >, varsByFrequency, ;, private, final]
[=, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap]
[., compiler, =, compiler, ;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap]
[;, this, ., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this]
[=, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps]
[., assignments, =, assignments, ;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap]
[;, this, ., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap]
[=, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }]
[., varsByFrequency, =, varsByFrequency, ;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, )]
[;, this, ., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override]
[=, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (]
[., oldPseudoNameMap, =, pseudoNameMap, ;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void]
[;, this, ., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[=, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., deltaPseudoNameMap, =, Maps, ., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[., newLinkedHashMap, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null]
[., traverse, (, compiler, ,, root, ,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root]
[,, root, ,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (]
[,, new, GatherReferenceInfo, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), )]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=]
[;, if, (, oldPseudoNameMap, !=, null, ), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class, GatherReferenceInfo]
[., traverse, (, compiler, ,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {]
[,, root, ,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {, oldPseudoNameMap, ., putAll, (]
[,, new, DoShadowVariables, (, ), ), ;, if, (, oldPseudoNameMap, !=, null, ), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, )]
[), ;, if, (, oldPseudoNameMap, !=, null, ), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class]
[), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @, Override, public]
[!=, null, ), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @]
[), {, oldPseudoNameMap, ., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @, Override, public]
[;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[., putAll, (, deltaPseudoNameMap, ), ;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, }, private, class, GatherReferenceInfo, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =]
[), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =]
[., isReferenceName, (, n, ), ), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return]
[), ), {, return, ;, }, if, (, t, ., inGlobalScope, (, ), ), {, return, ;, }, Var, var]
[), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (]
[., inGlobalScope, (, ), ), {, return, ;, }, Var, var, =, t, ., getScope, (, ), ., getVar, (]
[;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, ., getScope, (, ), ., isGlobal]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, ), {, return, ;, }]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, ==, null, )]
[), ;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, ., getScope, (, ), .]
[., getString, (, ), ), ;, if, (, var, ==, null, ), {, return, ;, }, if, (, var, .]
[), {, return, ;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {, return, ;]
[==, null, ), {, return, ;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {]
[), {, return, ;, }, if, (, var, ., getScope, (, ), ., isGlobal, (, ), ), {, return, ;]
[), {, return, ;, }, if, (, var, ., getScope, (, ), !=, t, ., getScope, (, ), ), {]
[., isGlobal, (, ), ), {, return, ;, }, if, (, var, ., getScope, (, ), !=, t, ., getScope]
[., getScope, (, ), ., isGlobal, (, ), ), {, return, ;, }, if, (, var, ., getScope, (, )]
[), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=, var, ., getScope, (, )]
[!=, t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s]
[., getScope, (, ), !=, t, ., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope]
[), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=, var, ., getScope, (, )]
[., getScope, (, ), ), {, for, (, Scope, s, =, t, ., getScope, (, ), ;, s, !=, var]
[;, s, !=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =, s, ., getParent]
[., getScope, (, ), ;, s, !=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;, s]
[;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,]
[&&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[!=, var, ., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, )]
[&&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[., getScope, (, ), &&, s, ., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {]
[;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,]
[., isLocal, (, ), ;, s, =, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, .]
[=, s, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, .]
[), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if]
[., getParent, (, ), ), {, scopeUpRefMap, ., put, (, s, ., getRootNode, (, ), ,, var, ., name, )]
[;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, .]
[., put, (, s, ., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (, var, .]
[,, var, ., name, ), ;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (]
[., getRootNode, (, ), ,, var, ., name, ), ;, }, }, if, (, var, ., getScope, (, ), ==]
[), ;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap]
[., name, ), ;, }, }, if, (, var, ., getScope, (, ), ==, t, ., getScope, (, ), )]
[), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, .]
[==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, .]
[., getScope, (, ), ==, t, ., getScope, (, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (]
[), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, .]
[., getScope, (, ), ), {, scopeUpRefMap, ., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, )]
[;, }, varToNameUsage, ., put, (, var, ,, n, ), ;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback]
[., put, (, t, ., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, ., put, (, var]
[,, var, ., name, ), ;, }, varToNameUsage, ., put, (, var, ,, n, ), ;, }, }, private, class]
[., getScopeRoot, (, ), ,, var, ., name, ), ;, }, varToNameUsage, ., put, (, var, ,, n, ), ;]
[), ;, }, varToNameUsage, ., put, (, var, ,, n, ), ;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements]
[., name, ), ;, }, varToNameUsage, ., put, (, var, ,, n, ), ;, }, }, private, class, DoShadowVariables, extends]
[;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[., put, (, var, ,, n, ), ;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override]
[,, n, ), ;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override, public, void, enterScope, (]
[), ;, }, }, private, class, DoShadowVariables, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t]
[;, if, (, !, s, ., isLocal, (, ), ), {, return, ;, }, if, (, s, ., getParent, (]
[., getScope, (, ), ;, if, (, !, s, ., isLocal, (, ), ), {, return, ;, }, if, (]
[), {, return, ;, }, if, (, s, ., getParent, (, ), ., isGlobal, (, ), ), {, return, ;]
[), {, return, ;, }, if, (, s, ., getParent, (, ), ., isGlobal, (, ), ), {, return, ;]
[., isLocal, (, ), ), {, return, ;, }, if, (, s, ., getParent, (, ), ., isGlobal, (, )]
[), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =, s, ., getVars, (, ), ;, vars]
[., isGlobal, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars, =, s, ., getVars]
[., getParent, (, ), ., isGlobal, (, ), ), {, return, ;, }, for, (, Iterator, <, Var, >, vars]
[;, vars, ., hasNext, (, ), ;, ), {, Var, var, =, vars, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, vars, ., hasNext, (, ), ;, ), {, Var, var, =, vars, ., next, (]
[;, ), {, Var, var, =, vars, ., next, (, ), ;, if, (, var, ., isBleedingFunction, (, ), )]
[., hasNext, (, ), ;, ), {, Var, var, =, vars, ., next, (, ), ;, if, (, var, .]
[;, if, (, var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, )]
[., next, (, ), ;, if, (, var, ., isBleedingFunction, (, ), ), {, continue, ;, }, if, (, compiler]
[), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ,, s]
[., isBleedingFunction, (, ), ), {, continue, ;, }, if, (, compiler, ., getCodingConvention, (, ), ., isExported, (, var]
[), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;, if, (, bestShadow, ==, null]
[., isExported, (, var, ., name, ,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow]
[., getCodingConvention, (, ), ., isExported, (, var, ., name, ,, s, ., isLocal, (, ), ), ), {, continue]
[,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var]
[., name, ,, s, ., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s]
[), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;, if, (, bestShadow, ==]
[., isLocal, (, ), ), ), {, continue, ;, }, Assignment, bestShadow, =, findBestShadow, (, s, ,, var, ), ;]
[;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, .]
[,, var, ), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get]
[), ;, if, (, bestShadow, ==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var]
[), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if]
[==, null, ), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), )]
[), {, continue, ;, }, Assignment, localAssignment, =, assignments, ., get, (, var, ., getName, (, ), ), ;, if]
[;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow]
[., get, (, var, ., getName, (, ), ), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, )]
[), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,]
[., getName, (, ), ), ;, if, (, bestShadow, ., count, <, localAssignment, ., count, ), {, continue, ;, }]
[), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, )]
[<, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (]
[., count, <, localAssignment, ., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;]
[), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, )]
[., count, ), {, continue, ;, }, doShadow, (, localAssignment, ,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=]
[;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (, bestShadow]
[,, bestShadow, ,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (]
[,, var, ), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, .]
[), ;, if, (, oldPseudoNameMap, !=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (]
[), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (, bestShadow, ., oldName, ), ., nameNode, )]
[!=, null, ), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (, bestShadow, ., oldName, ), .]
[), {, String, targetPseudoName, =, oldPseudoNameMap, ., get, (, s, ., getVar, (, bestShadow, ., oldName, ), ., nameNode, )]
[;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, ., put, (, use, ,]
[., get, (, s, ., getVar, (, bestShadow, ., oldName, ), ., nameNode, ), ;, for, (, Node, use, :]
[), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, ., put, (, use]
[., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, ., put]
[., getVar, (, bestShadow, ., oldName, ), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (]
[), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {, deltaPseudoNameMap, .]
[., oldName, ), ., nameNode, ), ;, for, (, Node, use, :, varToNameUsage, ., get, (, var, ), ), {]
[), {, deltaPseudoNameMap, ., put, (, use, ,, targetPseudoName, ), ;, }, }, }, }, @, Override, public, void, exitScope]
[., get, (, var, ), ), {, deltaPseudoNameMap, ., put, (, use, ,, targetPseudoName, ), ;, }, }, }, }]
[), ), {, deltaPseudoNameMap, ., put, (, use, ,, targetPseudoName, ), ;, }, }, }, }, @, Override, public, void]
[;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void]
[., put, (, use, ,, targetPseudoName, ), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t]
[,, targetPseudoName, ), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @]
[), ;, }, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public]
[), {, if, (, assignment, ., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap]
[), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (, ), ), ., contains, (, assignment, .]
[., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (]
[., oldName, ., startsWith, (, RenameVars, ., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, .]
[), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (, ), ), ., contains, (, assignment]
[., LOCAL_VAR_PREFIX, ), ), {, if, (, !, scopeUpRefMap, ., get, (, curScope, ., getRootNode, (, ), ), ., contains]
[), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return, assignment, ;, }]
[), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return, assignment, ;, }]
[., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true]
[., get, (, curScope, ., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (]
[), ., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,]
[., getRootNode, (, ), ), ., contains, (, assignment, ., oldName, ), ), {, if, (, curScope, ., isDeclared, (]
[), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return, assignment, ;]
[., oldName, ), ), {, if, (, curScope, ., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return]
[), {, return, assignment, ;, }, }, }, }, return, null, ;, }, private, void, doShadow, (, Assignment, original, ,]
[., isDeclared, (, assignment, ., oldName, ,, true, ), ), {, return, assignment, ;, }, }, }, }, return, null]
[,, true, ), ), {, return, assignment, ;, }, }, }, }, return, null, ;, }, private, void, doShadow, (]
[., oldName, ,, true, ), ), {, return, assignment, ;, }, }, }, }, return, null, ;, }, private, void]
[), ), {, return, assignment, ;, }, }, }, }, return, null, ;, }, private, void, doShadow, (, Assignment, original]
[;, }, }, }, }, return, null, ;, }, private, void, doShadow, (, Assignment, original, ,, Assignment, toShadow, ,, Var]
[;, }, private, void, doShadow, (, Assignment, original, ,, Assignment, toShadow, ,, Var, var, ), {, Scope, s, =, var]
[;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, ., remove, (, original, )]
[., getScope, (, ), ;, Collection, <, Node, >, references, =, varToNameUsage, ., get, (, var, ), ;, varsByFrequency, .]
[;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references]
[., get, (, var, ), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;]
[), ;, varsByFrequency, ., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=]
[;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow, .]
[., remove, (, original, ), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size]
[), ;, varsByFrequency, ., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow]
[;, original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, )]
[., remove, (, toShadow, ), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=]
[), ;, original, ., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (]
[-=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add]
[., count, -=, references, ., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency]
[;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, .]
[., size, (, ), ;, toShadow, ., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original]
[+=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, )]
[., count, +=, references, ., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (]
[;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, .]
[., size, (, ), ;, varsByFrequency, ., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var]
[;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;]
[., add, (, original, ), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (]
[), ;, varsByFrequency, ., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, )]
[;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, ), {]
[., add, (, toShadow, ), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (]
[), ;, Var, shadowed, =, s, ., getVar, (, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, )]
[;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope]
[., getVar, (, toShadow, ., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =]
[), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, .]
[., oldName, ), ;, if, (, shadowed, !=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=]
[), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent]
[!=, null, ), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope]
[), {, for, (, Scope, curScope, =, s, ;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent]
[;, curScope, !=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (]
[;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,]
[!=, shadowed, ., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, .]
[;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,]
[., scope, ;, curScope, =, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (]
[=, curScope, ., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,, toShadow, .]
[), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for]
[., getParent, (, ), ), {, scopeUpRefMap, ., put, (, curScope, ., getRootNode, (, ), ,, toShadow, ., oldName, )]
[;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (, toShadow, ., oldName, ), ;]
[., put, (, curScope, ., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n]
[,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (]
[., getRootNode, (, ), ,, toShadow, ., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {]
[), ;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (, toShadow, ., oldName, )]
[., oldName, ), ;, }, }, for, (, Node, n, :, references, ), {, n, ., setString, (, toShadow, .]
[), {, n, ., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=]
[;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {, cur, =, cur]
[., setString, (, toShadow, ., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode]
[), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {, cur, =]
[., oldName, ), ;, Node, cur, =, n, ;, while, (, cur, !=, s, ., getRootNode, (, ), ), {]
[;, while, (, cur, !=, s, ., getRootNode, (, ), ), {, cur, =, cur, ., getParent, (, ), ;]
[), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap]
[!=, s, ., getRootNode, (, ), ), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, .]
[), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap]
[., getRootNode, (, ), ), {, cur, =, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (]
[=, cur, ., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (]
[;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (, cur, ,, toShadow, ., oldName, )]
[., getParent, (, ), ;, if, (, cur, ., isFunction, (, ), ), {, scopeUpRefMap, ., put, (, cur, ,]
[), {, scopeUpRefMap, ., put, (, cur, ,, toShadow, ., oldName, ), ;, }, }, }, }, }, }]
[., isFunction, (, ), ), {, scopeUpRefMap, ., put, (, cur, ,, toShadow, ., oldName, ), ;, }, }, }]
[;, }, }, }, }, }, }]
[., put, (, cur, ,, toShadow, ., oldName, ), ;, }, }, }, }, }, }]
[,, toShadow, ., oldName, ), ;, }, }, }, }, }, }]
[), ;, }, }, }, }, }, }]
[., oldName, ), ;, }, }, }, }, }, }]
