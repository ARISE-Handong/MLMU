[UnivariateMultiStartOptimizer, (, final, BaseUnivariateOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (]
[UnivariateMultiStartOptimizer, (, final, BaseUnivariateOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (]
[UnivariateMultiStartOptimizer, (, final, BaseUnivariateOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (]
[final, BaseUnivariateOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (, optimizer, ==]
[<, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (, optimizer, ==, null, ||]
[<, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (, optimizer, ==, null, ||]
[>, optimizer, ,, final, int, starts, ,, final, RandomGenerator, generator, ), {, if, (, optimizer, ==, null, ||, generator, ==]
[int, starts, ,, final, RandomGenerator, generator, ), {, if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw]
[if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <]
[generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[}, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, ConvergenceChecker, <, UnivariatePointValuePair, >, getConvergenceChecker, (, ), {, return]
[>, getConvergenceChecker, (, ), {, return, optimizer, ., getConvergenceChecker, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return]
[), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (, ), {, return]
[public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (]
[public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (]
[getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (, optima, ==]
[return, totalEvaluations, ;, }, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw]
[}, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (]
[}, public, UnivariatePointValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (]
[), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return]
[), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return]
[maxEval, ,, final, FUNC, f, ,, final, GoalType, goal, ,, final, double, min, ,, final, double, max, ), {, return]
[final, FUNC, f, ,, final, GoalType, goal, ,, final, double, min, ,, final, double, max, ), {, return, optimize, (]
[f, ,, final, GoalType, goal, ,, final, double, min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,]
[final, GoalType, goal, ,, final, double, min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,]
[goal, ,, final, double, min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,]
[final, double, min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,]
[min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,]
[min, ,, final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,]
[final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +]
[final, double, max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +]
[max, ), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *]
[), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (]
[), {, return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (]
[return, optimize, (, maxEval, ,, f, ,, goal, ,, min, ,, max, ,, min, +, 0.5, *, (, max, -]
[final, GoalType, goal, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, RuntimeException, lastException, =]
[goal, ,, final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, RuntimeException, lastException, =, null, ;]
[final, double, min, ,, final, double, max, ,, final, double, startValue, ), {, RuntimeException, lastException, =, null, ;, optima, =]
[,, final, double, max, ,, final, double, startValue, ), {, RuntimeException, lastException, =, null, ;, optima, =, new, UnivariatePointValuePair, []
[max, ,, final, double, startValue, ), {, RuntimeException, lastException, =, null, ;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;]
[final, double, startValue, ), {, RuntimeException, lastException, =, null, ;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =]
[=, null, ;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =]
[;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[;, optima, =, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[UnivariatePointValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;]
[[, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++]
[(, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =]
[(, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =]
[int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =, (]
[int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =, (]
[=, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==]
[i, <, starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?]
[starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :]
[starts, ;, ++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :]
[++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +]
[++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +]
[++, i, ), {, try, {, final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +]
[final, double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *]
[double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (]
[double, s, =, (, i, ==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (]
[=, (, i, ==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -]
[==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;]
[==, 0, ), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;]
[), ?, startValue, :, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, []
[:, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =]
[:, min, +, generator, ., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =]
[., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (]
[., nextDouble, (, ), *, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (]
[(, ), *, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -]
[*, (, max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,]
[max, -, min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,]
[min, ), ;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,]
[;, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,]
[[, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,]
[totalEvaluations, ,, f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {]
[f, ,, goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =]
[goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;]
[goal, ,, min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;]
[min, ,, max, ,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, []
[,, s, ), ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =]
[;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }]
[catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=]
[catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=]
[=, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }]
[;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (]
[=, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (]
[=, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (]
[=, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, []
[+=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==]
[(, ), ;, }, sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw]
[sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return]
[sortPairs, (, goal, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return]
[goal, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, []
[throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {]
[throw, lastException, ;, }, return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {]
[return, optima, [, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, ., sort, (]
[[, 0, ], ;, }, private, void, sortPairs, (, final, GoalType, goal, ), {, Arrays, ., sort, (, optima, ,]
[UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (]
[UnivariatePointValuePair, >, (, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (]
[(, ), {, public, int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==]
[int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[int, compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[compare, (, final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[final, UnivariatePointValuePair, o1, ,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==]
[,, final, UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?]
[UnivariatePointValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==]
[(, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return]
[o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -]
[1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =]
[1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, final, double, v1, =]
[{, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =]
[{, return, -, 1, ;, }, final, double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =]
[double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return]
[double, v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return]
[v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (]
[v1, =, o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (]
[o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==]
[o1, ., getValue, (, ), ;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==]
[;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?]
[;, final, double, v2, =, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?]
[=, o2, ., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (]
[., getValue, (, ), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,]
[), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :]
[), ;, return, (, goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :]
[goal, ==, GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (]
[GoalType, ., MINIMIZE, ), ?, Double, ., compare, (, v1, ,, v2, ), :, Double, ., compare, (, v2, ,]
