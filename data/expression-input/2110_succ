[,, 0d, ), ;, }, public, RRQRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, super, (, matrix, ,, threshold]
[), ;, }, public, RRQRDecomposition, (, RealMatrix, matrix, ,, double, threshold, ), {, super, (, matrix, ,, threshold, ), ;]
[,, threshold, ), ;, }, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {, p]
[), ;, }, @, Override, protected, void, decompose, (, double, [, ], [, ], qrt, ), {, p, =, new]
[=, new, int, [, qrt, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, p, .]
[;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {, p, []
[], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, ), {, p]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, p, ., length, ;, i, ++, )]
[;, i, <, p, ., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }, super]
[;, i, ++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose, (, qrt, ), ;]
[<, p, ., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose]
[;, i, ++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose, (, qrt, ), ;]
[., length, ;, i, ++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose, (, qrt]
[), {, p, [, i, ], =, i, ;, }, super, ., decompose, (, qrt, ), ;, }, @, Override]
[++, ), {, p, [, i, ], =, i, ;, }, super, ., decompose, (, qrt, ), ;, }, @]
[=, i, ;, }, super, ., decompose, (, qrt, ), ;, }, @, Override, protected, void, performHouseholderReflection, (, int, minor]
[[, i, ], =, i, ;, }, super, ., decompose, (, qrt, ), ;, }, @, Override, protected, void, performHouseholderReflection]
[], =, i, ;, }, super, ., decompose, (, qrt, ), ;, }, @, Override, protected, void, performHouseholderReflection, (, int]
[;, }, super, ., decompose, (, qrt, ), ;, }, @, Override, protected, void, performHouseholderReflection, (, int, minor, ,, double]
[;, }, @, Override, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], qrt, ), {, double]
[., decompose, (, qrt, ), ;, }, @, Override, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], []
[), ;, }, @, Override, protected, void, performHouseholderReflection, (, int, minor, ,, double, [, ], [, ], qrt, ), {]
[;, int, l2NormSquaredMaxIndex, =, minor, ;, for, (, int, i, =, minor, ;, i, <, qrt, ., length, ;, i]
[;, for, (, int, i, =, minor, ;, i, <, qrt, ., length, ;, i, ++, ), {, double, l2NormSquared]
[;, i, <, qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j]
[;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt]
[<, qrt, ., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0]
[;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt]
[., length, ;, i, ++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j]
[), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt, [, i, ]]
[++, ), {, double, l2NormSquared, =, 0, ;, for, (, int, j, =, 0, ;, j, <, qrt, [, i]
[;, for, (, int, j, =, 0, ;, j, <, qrt, [, i, ], ., length, ;, j, ++, )]
[;, j, <, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ]]
[;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], []
[<, qrt, [, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j]
[;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], []
[., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i]
[[, i, ], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *]
[], ., length, ;, j, ++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, []
[), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;]
[++, ), {, l2NormSquared, +=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], [, j, ]]
[+=, qrt, [, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (]
[;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if]
[*, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared]
[[, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {]
[[, i, ], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >]
[], [, j, ], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, )]
[], *, qrt, [, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =]
[;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if]
[[, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;]
[[, i, ], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex]
[], [, j, ], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i]
[], ;, }, if, (, l2NormSquared, >, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }]
[), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double]
[>, l2NormSquaredMax, ), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, )]
[), {, l2NormSquaredMax, =, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double]
[=, l2NormSquared, ;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1]
[;, l2NormSquaredMaxIndex, =, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt]
[=, i, ;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor]
[;, }, }, if, (, l2NormSquaredMaxIndex, !=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;]
[), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex]
[!=, minor, ), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt]
[), {, double, [, ], tmp1, =, qrt, [, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex]
[;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2]
[[, minor, ], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1]
[], ;, qrt, [, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int]
[=, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ]]
[[, minor, ], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p]
[], =, qrt, [, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor]
[;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ]]
[[, l2NormSquaredMaxIndex, ], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p]
[], ;, qrt, [, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor]
[=, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ]]
[[, l2NormSquaredMaxIndex, ], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p]
[], =, tmp1, ;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex]
[;, int, tmp2, =, p, [, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p]
[;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super]
[[, minor, ], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2]
[], ;, p, [, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }]
[=, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,]
[[, minor, ], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection]
[], =, p, [, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor]
[;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public]
[[, l2NormSquaredMaxIndex, ], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, )]
[], ;, p, [, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }]
[=, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {]
[[, l2NormSquaredMaxIndex, ], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP]
[], =, tmp2, ;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, )]
[;, }, super, ., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (]
[;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =, p, .]
[., performHouseholderReflection, (, minor, ,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null]
[,, qrt, ), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n]
[), ;, }, public, RealMatrix, getP, (, ), {, if, (, cachedP, ==, null, ), {, int, n, =, p]
[), {, int, n, =, p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;]
[==, null, ), {, int, n, =, p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n]
[), {, int, n, =, p, ., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;]
[;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i]
[., length, ;, cachedP, =, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0]
[=, MatrixUtils, ., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (]
[., createRealMatrix, (, n, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[,, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,]
[;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }]
[<, n, ;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, )]
[;, i, ++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }]
[), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }, }, return, cachedP]
[++, ), {, cachedP, ., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }, }, return]
[;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =, getR]
[., setEntry, (, p, [, i, ], ,, i, ,, 1, ), ;, }, }, return, cachedP, ;, }, public]
[,, i, ,, 1, ), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold, )]
[[, i, ], ,, i, ,, 1, ), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final]
[], ,, i, ,, 1, ), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold]
[,, 1, ), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix]
[), ;, }, }, return, cachedP, ;, }, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =]
[;, }, public, int, getRank, (, final, double, dropThreshold, ), {, RealMatrix, r, =, getR, (, ), ;, int, rows]
[;, int, rows, =, r, ., getRowDimension, (, ), ;, int, columns, =, r, ., getColumnDimension, (, ), ;, int]
[;, int, columns, =, r, ., getColumnDimension, (, ), ;, int, rank, =, 1, ;, double, lastNorm, =, r, .]
[., getRowDimension, (, ), ;, int, columns, =, r, ., getColumnDimension, (, ), ;, int, rank, =, 1, ;, double]
[;, int, rank, =, 1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;]
[., getColumnDimension, (, ), ;, int, rank, =, 1, ;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double]
[;, double, lastNorm, =, r, ., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <, FastMath]
[;, double, rNorm, =, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {]
[., getFrobeniusNorm, (, ), ;, double, rNorm, =, lastNorm, ;, while, (, rank, <, FastMath, ., min, (, rows, ,]
[;, while, (, rank, <, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, .]
[), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1]
[<, FastMath, ., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,]
[), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1]
[., min, (, rows, ,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -]
[,, columns, ), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,]
[), ), {, double, thisNorm, =, r, ., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,, columns, -]
[;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;]
[., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold]
[., getSubMatrix, (, rank, ,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;]
[,, rows, -, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==]
[,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm]
[-, 1, ,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||]
[,, rank, ,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm]
[,, columns, -, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm]
[), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <]
[-, 1, ), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *]
[), ., getFrobeniusNorm, (, ), ;, if, (, thisNorm, ==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <]
[), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @, Override, public]
[||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank]
[==, 0, ||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm]
[||, (, thisNorm, /, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank]
[), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @, Override, public]
[<, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @]
[*, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;]
[), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank]
[/, lastNorm, ), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }]
[), *, rNorm, <, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank]
[<, dropThreshold, ), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @]
[), {, break, ;, }, lastNorm, =, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @, Override, public]
[=, thisNorm, ;, rank, ++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return]
[;, rank, ++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver]
[;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, super, .]
[++, ;, }, return, rank, ;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, super]
[;, }, @, Override, public, DecompositionSolver, getSolver, (, ), {, return, new, Solver, (, super, ., getSolver, (, ), ,]
[;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, DecompositionSolver, upper, ;, private, RealMatrix, p, ;, private, Solver]
[,, this, ., getP, (, ), ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, DecompositionSolver, upper]
[., getSolver, (, ), ,, this, ., getP, (, ), ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {]
[), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, DecompositionSolver, upper, ;, private, RealMatrix, p, ;, private]
[., getP, (, ), ), ;, }, private, static, class, Solver, implements, DecompositionSolver, {, private, final, DecompositionSolver, upper, ;, private]
[=, upper, ;, this, ., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return, upper, ., isNonSingular]
[., upper, =, upper, ;, this, ., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return, upper]
[;, this, ., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return, upper, ., isNonSingular, (, )]
[=, p, ;, }, public, boolean, isNonSingular, (, ), {, return, upper, ., isNonSingular, (, ), ;, }, public, RealVector]
[., p, =, p, ;, }, public, boolean, isNonSingular, (, ), {, return, upper, ., isNonSingular, (, ), ;, }]
[;, }, public, boolean, isNonSingular, (, ), {, return, upper, ., isNonSingular, (, ), ;, }, public, RealVector, solve, (]
[;, }, public, RealVector, solve, (, RealVector, b, ), {, return, p, ., operate, (, upper, ., solve, (, b]
[., isNonSingular, (, ), ;, }, public, RealVector, solve, (, RealVector, b, ), {, return, p, ., operate, (, upper]
[;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (, upper, ., solve, (, b]
[., operate, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {]
[), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (, upper, ., solve, (]
[., solve, (, b, ), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply]
[), ), ;, }, public, RealMatrix, solve, (, RealMatrix, b, ), {, return, p, ., multiply, (, upper, ., solve]
[;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, p, ., getRowDimension, (, )]
[., multiply, (, upper, ., solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve]
[), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, p, ., getRowDimension, (]
[., solve, (, b, ), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix]
[), ), ;, }, public, RealMatrix, getInverse, (, ), {, return, solve, (, MatrixUtils, ., createRealIdentityMatrix, (, p, ., getRowDimension]
[;, }, }, }]
[), ;, }, }, }]
[., createRealIdentityMatrix, (, p, ., getRowDimension, (, ), ), ), ;, }, }, }]
[), ), ;, }, }, }]
[., getRowDimension, (, ), ), ), ;, }, }, }]
