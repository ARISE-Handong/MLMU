[;, import, java, ., util, ., concurrent, ., TimeUnit, ;, public, class, TimedSemaphore, {, public, static, final, int, NO_LIMIT, =]
[TimeUnit, ;, public, class, TimedSemaphore, {, public, static, final, int, NO_LIMIT, =, 0, ;, private, static, final, int, THREAD_POOL_SIZE, =]
[shutdown, ;, public, TimedSemaphore, (, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, this, (]
[public, TimedSemaphore, (, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, this, (, null, ,]
[(, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, this, (, null, ,, timePeriod, ,]
[long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, this, (, null, ,, timePeriod, ,, timeUnit, ,]
[(, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, if, (]
[(, final, ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, if, (]
[ScheduledExecutorService, service, ,, final, long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, if, (, timePeriod, <=]
[long, timePeriod, ,, final, TimeUnit, timeUnit, ,, final, int, limit, ), {, if, (, timePeriod, <=, 0, ), {, throw]
[final, TimeUnit, timeUnit, ,, final, int, limit, ), {, if, (, timePeriod, <=, 0, ), {, throw, new, IllegalArgumentException, (]
[final, int, limit, ), {, if, (, timePeriod, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }]
[limit, ), {, if, (, timePeriod, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =]
[{, if, (, timePeriod, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;]
[(, timePeriod, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =]
[), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (]
[), {, throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (]
[throw, new, IllegalArgumentException, (, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=]
[(, "Time period must be greater 0!", ), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {]
[), ;, }, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =]
[}, period, =, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service, ;]
[=, timePeriod, ;, unit, =, timeUnit, ;, if, (, service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =]
[service, !=, null, ), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =]
[), {, executorService, =, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (]
[=, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;]
[=, service, ;, ownExecutor, =, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;]
[=, false, ;, }, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (]
[}, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;]
[}, else, {, final, ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;]
[ScheduledThreadPoolExecutor, s, =, new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (]
[new, ScheduledThreadPoolExecutor, (, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;]
[(, THREAD_POOL_SIZE, ), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =]
[), ;, s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;]
[s, ., setContinueExistingPeriodicTasksAfterShutdownPolicy, (, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =]
[(, false, ), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }]
[), ;, s, ., setExecuteExistingDelayedTasksAfterShutdownPolicy, (, false, ), ;, executorService, =, s, ;, ownExecutor, =, true, ;, }, setLimit, (]
[ownExecutor, =, true, ;, }, setLimit, (, limit, ), ;, }, public, final, synchronized, int, getLimit, (, ), {, return]
[int, getLimit, (, ), {, return, limit, ;, }, public, final, synchronized, void, setLimit, (, final, int, limit, ), {]
[int, getLimit, (, ), {, return, limit, ;, }, public, final, synchronized, void, setLimit, (, final, int, limit, ), {]
[{, return, limit, ;, }, public, final, synchronized, void, setLimit, (, final, int, limit, ), {, this, ., limit, =]
[int, limit, ), {, this, ., limit, =, limit, ;, }, public, synchronized, void, shutdown, (, ), {, if, (]
[limit, ), {, this, ., limit, =, limit, ;, }, public, synchronized, void, shutdown, (, ), {, if, (, !]
[limit, =, limit, ;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if, (]
[;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if, (, ownExecutor, ), {]
[;, }, public, synchronized, void, shutdown, (, ), {, if, (, !, shutdown, ), {, if, (, ownExecutor, ), {]
[!, shutdown, ), {, if, (, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (]
[!, shutdown, ), {, if, (, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (]
[), {, if, (, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=]
[(, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {]
[(, ownExecutor, ), {, getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {]
[getExecutorService, (, ), ., shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {, task, ., cancel, (]
[shutdownNow, (, ), ;, }, if, (, task, !=, null, ), {, task, ., cancel, (, false, ), ;, }]
[), ;, }, if, (, task, !=, null, ), {, task, ., cancel, (, false, ), ;, }, shutdown, =]
[cancel, (, false, ), ;, }, shutdown, =, true, ;, }, }, public, synchronized, boolean, isShutdown, (, ), {, return]
[boolean, isShutdown, (, ), {, return, shutdown, ;, }, public, synchronized, void, acquire, (, ), throws, InterruptedException, {, if, (]
[shutdown, ;, }, public, synchronized, void, acquire, (, ), throws, InterruptedException, {, if, (, isShutdown, (, ), ), {, throw]
[public, synchronized, void, acquire, (, ), throws, InterruptedException, {, if, (, isShutdown, (, ), ), {, throw, new, IllegalStateException, (]
[throws, InterruptedException, {, if, (, isShutdown, (, ), ), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (]
[throws, InterruptedException, {, if, (, isShutdown, (, ), ), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (]
[{, if, (, isShutdown, (, ), ), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (, task, ==]
[isShutdown, (, ), ), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (, task, ==, null, ), {]
[), ), {, throw, new, IllegalStateException, (, "TimedSemaphore is shut down!", ), ;, }, if, (, task, ==, null, ), {, task, =]
[), ;, }, if, (, task, ==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =]
[(, task, ==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {]
[==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =]
[==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =]
[==, null, ), {, task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =]
[task, =, startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=]
[startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||]
[startTimer, (, ), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||]
[), ;, }, boolean, canPass, =, false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <]
[false, ;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (]
[;, do, {, canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (, !]
[canPass, =, getLimit, (, ), <=, NO_LIMIT, ||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {]
[||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {]
[||, acquireCount, <, getLimit, (, ), ;, if, (, !, canPass, ), {, wait, (, ), ;, }, else, {]
[if, (, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while, (]
[(, !, canPass, ), {, wait, (, ), ;, }, else, {, acquireCount, ++, ;, }, }, while, (, !]
[acquireCount, ++, ;, }, }, while, (, !, canPass, ), ;, }, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return]
[}, public, synchronized, int, getLastAcquiresPerPeriod, (, ), {, return, lastCallsPerPeriod, ;, }, public, synchronized, int, getAcquireCount, (, ), {, return]
[}, public, synchronized, int, getAcquireCount, (, ), {, return, acquireCount, ;, }, public, synchronized, int, getAvailablePermits, (, ), {, return]
[}, public, synchronized, int, getAcquireCount, (, ), {, return, acquireCount, ;, }, public, synchronized, int, getAvailablePermits, (, ), {, return]
[getAcquireCount, (, ), {, return, acquireCount, ;, }, public, synchronized, int, getAvailablePermits, (, ), {, return, getLimit, (, ), -]
[), {, return, getLimit, (, ), -, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return]
[), {, return, getLimit, (, ), -, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return]
[), {, return, getLimit, (, ), -, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return]
[return, getLimit, (, ), -, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==]
[(, ), -, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?]
[-, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :]
[-, getAcquireCount, (, ), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :]
[), ;, }, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :, (, double, )]
[}, public, synchronized, double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :, (, double, ), totalAcquireCount, /]
[double, getAverageCallsPerPeriod, (, ), {, return, periodCount, ==, 0, ?, 0, :, (, double, ), totalAcquireCount, /, (, double, )]
[0, :, (, double, ), totalAcquireCount, /, (, double, ), periodCount, ;, }, public, long, getPeriod, (, ), {, return]
[periodCount, ;, }, public, long, getPeriod, (, ), {, return, period, ;, }, public, TimeUnit, getUnit, (, ), {, return]
[period, ;, }, public, TimeUnit, getUnit, (, ), {, return, unit, ;, }, protected, ScheduledExecutorService, getExecutorService, (, ), {, return]
[protected, ScheduledExecutorService, getExecutorService, (, ), {, return, executorService, ;, }, protected, ScheduledFuture, <, ?, >, startTimer, (, ), {, return]
[protected, ScheduledExecutorService, getExecutorService, (, ), {, return, executorService, ;, }, protected, ScheduledFuture, <, ?, >, startTimer, (, ), {, return]
[return, executorService, ;, }, protected, ScheduledFuture, <, ?, >, startTimer, (, ), {, return, getExecutorService, (, ), ., scheduleAtFixedRate, (]
[return, getExecutorService, (, ), ., scheduleAtFixedRate, (, new, Runnable, (, ), {, @, Override, public, void, run, (, ), {]
[new, Runnable, (, ), {, @, Override, public, void, run, (, ), {, endOfPeriod, (, ), ;, }, }, ,]
[{, @, Override, public, void, run, (, ), {, endOfPeriod, (, ), ;, }, }, ,, getPeriod, (, ), ,]
[void, run, (, ), {, endOfPeriod, (, ), ;, }, }, ,, getPeriod, (, ), ,, getPeriod, (, ), ,]
[getPeriod, (, ), ,, getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {]
[), ,, getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =]
[getPeriod, (, ), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;]
[), ,, getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=]
[getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;]
[getUnit, (, ), ), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;]
[), ;, }, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;]
[}, synchronized, void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;, acquireCount, =]
[void, endOfPeriod, (, ), {, lastCallsPerPeriod, =, acquireCount, ;, totalAcquireCount, +=, acquireCount, ;, periodCount, ++, ;, acquireCount, =, 0, ;]
