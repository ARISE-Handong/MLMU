[;, private, final, boolean, isChecked, ;, UnknownType, (, JSTypeRegistry, registry, ,, boolean, isChecked, ), {, super, (, registry, ), ;]
[), ;, this, ., isChecked, =, isChecked, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, return, true, ;]
[=, isChecked, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, return, true, ;, }, @, Override, public, boolean]
[., isChecked, =, isChecked, ;, }, @, Override, public, boolean, isUnknownType, (, ), {, return, true, ;, }, @, Override]
[;, }, @, Override, public, boolean, isUnknownType, (, ), {, return, true, ;, }, @, Override, public, boolean, isCheckedUnknownType, (]
[;, }, @, Override, public, boolean, isCheckedUnknownType, (, ), {, return, isChecked, ;, }, @, Override, public, boolean, canBeCalled, (]
[;, }, @, Override, public, boolean, canBeCalled, (, ), {, return, true, ;, }, @, Override, public, boolean, matchesNumberContext, (]
[;, }, @, Override, public, boolean, matchesNumberContext, (, ), {, return, true, ;, }, @, Override, public, boolean, matchesObjectContext, (]
[;, }, @, Override, public, boolean, matchesObjectContext, (, ), {, return, true, ;, }, @, Override, public, boolean, matchesStringContext, (]
[;, }, @, Override, public, boolean, matchesStringContext, (, ), {, return, true, ;, }, @, Override, public, TernaryValue, testForEquality, (]
[;, }, @, Override, public, TernaryValue, testForEquality, (, JSType, that, ), {, return, UNKNOWN, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, boolean, isNullable, (, ), {, return, true, ;, }, @, Override, public, boolean, isSubtype, (]
[;, }, @, Override, public, boolean, isSubtype, (, JSType, that, ), {, return, true, ;, }, @, Override, public, <]
[;, }, @, Override, public, <, T, >, T, visit, (, Visitor, <, T, >, visitor, ), {, return, visitor]
[;, }, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,, JSType, that, ), {]
[., caseUnknownType, (, ), ;, }, @, Override, <, T, >, T, visit, (, RelationshipVisitor, <, T, >, visitor, ,]
[;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return, getReferenceName, (, ), ;, }, @, Override, boolean]
[., caseUnknownType, (, this, ,, that, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return, getReferenceName]
[,, that, ), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return, getReferenceName, (, ), ;, }]
[), ;, }, @, Override, String, toStringHelper, (, boolean, forAnnotations, ), {, return, getReferenceName, (, ), ;, }, @, Override]
[;, }, @, Override, boolean, defineProperty, (, String, propertyName, ,, JSType, type, ,, boolean, inferred, ,, Node, propertyNode, ), {]
[;, }, @, Override, public, ObjectType, getImplicitPrototype, (, ), {, return, null, ;, }, @, Override, public, FunctionType, getConstructor, (]
[;, }, @, Override, public, FunctionType, getConstructor, (, ), {, return, null, ;, }, @, Override, public, String, getReferenceName, (]
[;, }, @, Override, public, String, getReferenceName, (, ), {, return, isChecked, ?, "??", :, "?", ;, }, @, Override]
[;, }, @, Override, public, String, getDisplayName, (, ), {, return, "Unknown", ;, }, @, Override, public, boolean, hasDisplayName, (]
[?, "??", :, "?", ;, }, @, Override, public, String, getDisplayName, (, ), {, return, "Unknown", ;, }, @, Override]
[:, "?", ;, }, @, Override, public, String, getDisplayName, (, ), {, return, "Unknown", ;, }, @, Override, public, boolean]
[;, }, @, Override, public, String, getDisplayName, (, ), {, return, "Unknown", ;, }, @, Override, public, boolean, hasDisplayName, (]
[;, }, @, Override, public, boolean, hasDisplayName, (, ), {, return, true, ;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (]
[;, }, @, Override, public, BooleanLiteralSet, getPossibleToBooleanOutcomes, (, ), {, return, BooleanLiteralSet, ., BOTH, ;, }, @, Override, JSType, resolveInternal]
[;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return, this, ;]
[., BOTH, ;, }, @, Override, JSType, resolveInternal, (, ErrorReporter, t, ,, StaticScope, <, JSType, >, scope, ), {, return]
[;, }, }]
