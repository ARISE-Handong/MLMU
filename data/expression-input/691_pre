[implements, ScopeCreator, ,, StaticSymbolTable, <, Var, ,, Var, >, {, private, final, Map, <, Node, ,, Scope, >, scopes, =]
[implements, ScopeCreator, ,, StaticSymbolTable, <, Var, ,, Var, >, {, private, final, Map, <, Node, ,, Scope, >, scopes, =]
[>, scopes, =, Maps, ., newHashMap, (, ), ;, private, final, ScopeCreator, delegate, ;, MemoizedScopeCreator, (, ScopeCreator, delegate, ), {]
[>, scopes, =, Maps, ., newHashMap, (, ), ;, private, final, ScopeCreator, delegate, ;, MemoizedScopeCreator, (, ScopeCreator, delegate, ), {]
[., newHashMap, (, ), ;, private, final, ScopeCreator, delegate, ;, MemoizedScopeCreator, (, ScopeCreator, delegate, ), {, this, ., delegate, =]
[., delegate, =, delegate, ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[., delegate, =, delegate, ;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return]
[;, }, @, Override, public, Iterable, <, Var, >, getReferences, (, Var, var, ), {, return, ImmutableList, ., of, (]
[return, ImmutableList, ., of, (, var, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return]
[return, ImmutableList, ., of, (, var, ), ;, }, @, Override, public, Scope, getScope, (, Var, var, ), {, return]
[scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, List, <, Var, >, vars, =]
[scope, ;, }, @, Override, public, Iterable, <, Var, >, getAllSymbols, (, ), {, List, <, Var, >, vars, =]
[(, ), {, List, <, Var, >, vars, =, Lists, ., newArrayList, (, ), ;, for, (, Scope, s, :]
[(, ), {, List, <, Var, >, vars, =, Lists, ., newArrayList, (, ), ;, for, (, Scope, s, :]
[vars, =, Lists, ., newArrayList, (, ), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {]
[vars, =, Lists, ., newArrayList, (, ), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {]
[newArrayList, (, ), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {, Iterables, ., addAll, (]
[), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {, Iterables, ., addAll, (, vars, ,]
[), ;, for, (, Scope, s, :, scopes, ., values, (, ), ), {, Iterables, ., addAll, (, vars, ,]
[values, (, ), ), {, Iterables, ., addAll, (, vars, ,, s, ., getAllSymbols, (, ), ), ;, }, return]
[return, vars, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, Scope, scope, =]
[return, vars, ;, }, @, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, Scope, scope, =]
[@, Override, public, Scope, createScope, (, Node, n, ,, Scope, parent, ), {, Scope, scope, =, scopes, ., get, (]
[(, Node, n, ,, Scope, parent, ), {, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (]
[(, Node, n, ,, Scope, parent, ), {, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (]
[n, ,, Scope, parent, ), {, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (, scope, ==]
[parent, ), {, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (, scope, ==, null, ), {]
[{, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (, scope, ==, null, ), {, scope, =]
[{, Scope, scope, =, scopes, ., get, (, n, ), ;, if, (, scope, ==, null, ), {, scope, =]
[scopes, ., get, (, n, ), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (]
[get, (, n, ), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,]
[), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;]
[), ;, if, (, scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;]
[scope, ==, null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (]
[null, ), {, scope, =, delegate, ., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,]
[., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {]
[., createScope, (, n, ,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {]
[,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (]
[,, parent, ), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (]
[), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==]
[), ;, scopes, ., put, (, n, ,, scope, ), ;, }, else, {, Preconditions, ., checkState, (, parent, ==]
[), ;, }, else, {, Preconditions, ., checkState, (, parent, ==, scope, ., getParent, (, ), ), ;, }, return]
[., getParent, (, ), ), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return]
[., getParent, (, ), ), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return]
[), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[), ;, }, return, scope, ;, }, Collection, <, Scope, >, getAllMemoizedScopes, (, ), {, return, Collections, ., unmodifiableCollection, (]
[Collections, ., unmodifiableCollection, (, scopes, ., values, (, ), ), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return]
[Collections, ., unmodifiableCollection, (, scopes, ., values, (, ), ), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return]
[scopes, ., values, (, ), ), ;, }, Scope, getScopeIfMemoized, (, Node, n, ), {, return, scopes, ., get, (]
[scopes, ., get, (, n, ), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :]
[scopes, ., get, (, n, ), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :]
[n, ), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (]
[n, ), ;, }, void, removeScopesForScript, (, String, scriptName, ), {, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (]
[{, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (, scopes, ., keySet, (, ), ), ), {, if, (]
[{, for, (, Node, scopeRoot, :, ImmutableSet, ., copyOf, (, scopes, ., keySet, (, ), ), ), {, if, (]
[scopeRoot, :, ImmutableSet, ., copyOf, (, scopes, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (]
[scopeRoot, :, ImmutableSet, ., copyOf, (, scopes, ., keySet, (, ), ), ), {, if, (, scriptName, ., equals, (]
[keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {]
[keySet, (, ), ), ), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {]
[), {, if, (, scriptName, ., equals, (, scopeRoot, ., getSourceFileName, (, ), ), ), {, scopes, ., remove, (]
