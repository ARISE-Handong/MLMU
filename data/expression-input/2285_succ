[;, private, static, final, int, DEFAULT_MAXIMAL_ORDER, =, 5, ;, private, static, final, int, MAXIMAL_AGING, =, 2, ;, private, static, final]
[;, private, static, final, int, MAXIMAL_AGING, =, 2, ;, private, static, final, double, REDUCTION_FACTOR, =, 1.0, /, 16.0, ;, private]
[;, private, static, final, double, REDUCTION_FACTOR, =, 1.0, /, 16.0, ;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;]
[;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;, public, BracketingNthOrderBrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ,, DEFAULT_MAXIMAL_ORDER]
[/, 16.0, ;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;, public, BracketingNthOrderBrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY]
[;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;, public, BracketingNthOrderBrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ,, DEFAULT_MAXIMAL_ORDER]
[,, DEFAULT_MAXIMAL_ORDER, ), ;, }, public, BracketingNthOrderBrentSolver, (, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super]
[), ;, }, public, BracketingNthOrderBrentSolver, (, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy]
[), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (]
[,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE]
[,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }]
[), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver]
[=, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final]
[., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy]
[;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[=, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, maximalOrder]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final]
[;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {]
[., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws]
[,, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true]
[), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (]
[,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE]
[,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }]
[), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver]
[=, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final]
[., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy]
[;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy]
[=, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final]
[;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, int, maximalOrder]
[., ANY_SIDE, ;, }, public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final]
[,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2]
[,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true]
[), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder]
[,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE]
[,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }]
[), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int]
[=, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder]
[., maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {]
[;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }]
[=, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, @, Override, protected, double]
[., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, @, Override]
[;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, @, Override, protected, double, doSolve, (, ), throws]
[., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return, maximalOrder, ;, }, @, Override, protected, double, doSolve, (]
[;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, [, ]]
[;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =]
[], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ]]
[+, 1, ], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, []
[], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ]]
[;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x]
[], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;]
[+, 1, ], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (]
[], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;]
[=, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax]
[[, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2]
[], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =]
[;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence]
[=, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ]]
[[, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x]
[], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0]
[;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1]
[=, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, [, 2]
[[, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,]
[], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, []
[;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y]
[;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (]
[,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x]
[[, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =]
[], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (]
[,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;]
[[, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1]
[], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], )]
[), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals]
[[, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (]
[], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, .]
[=, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,]
[[, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, []
[], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, [, 1, ]]
[;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x]
[), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return]
[[, 1, ], ), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, )]
[], ), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {]
[), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ]]
[., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;]
[,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue]
[[, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0]
[], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =]
[,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x]
[), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0]
[;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals]
[[, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (]
[], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, .]
[=, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,]
[[, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, []
[], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, [, 0, ]]
[;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return, x]
[), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return]
[[, 0, ], ), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, )]
[], ), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {]
[), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0]
[., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 0, ], ;]
[,, 0.0, ,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;]
[[, 0, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;]
[], ,, 0.0, ,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex]
[,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, []
[;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, [, 1, ], <]
[[, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, []
[], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, [, 1, ]]
[), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (]
[<, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =]
[*, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {]
[[, 0, ], *, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;]
[], *, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else]
[<, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =]
[[, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, []
[], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ]]
[), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (]
[=, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2]
[;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], )]
[=, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if]
[;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision]
[=, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,]
[[, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, []
[], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, [, 2, ]]
[;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x]
[), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return]
[[, 2, ], ), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, )]
[], ), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {]
[), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *, y, [, 2, ]]
[., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;]
[,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ]]
[[, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y]
[], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1]
[,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *, y]
[), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *, y, [, 2]
[;, }, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =, 3]
[[, 2, ], ;, }, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {]
[], ;, }, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =]
[), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0]
[<, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x]
[*, y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {]
[[, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;]
[], *, y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else]
[<, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x]
[[, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new]
[], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0]
[=, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x]
[;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2]
[=, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,]
[;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,, y, []
[;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =]
[,, x, [, 2, ], ,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }, final]
[[, 0, ], ,, x, [, 2, ], ,, y, [, 0, ], ,, y, [, 2, ], ), ;]
[], ,, x, [, 2, ], ,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }]
[,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =]
[[, 2, ], ,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }, final, double, []
[], ,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX]
[,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double, [, x, .]
[[, 0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double]
[], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double, [, x]
[), ;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA]
[[, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ]]
[], ), ;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double]
[;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ]]
[], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1]
[., length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex]
[;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA, )]
[[, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath]
[], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA]
[-, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs]
[], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA]
[;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =, x]
[[, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0]
[], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =]
[-, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double]
[], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =]
[;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex]
[., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double]
[), ;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, []
[;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =]
[;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int]
[[, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB]
[], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;]
[;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (, true, )]
[[, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int, agingB, =, 0, ;, while]
[], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (, true]
[;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy]
[., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =]
[), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +]
[;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, .]
[), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, .]
[;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,]
[+, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (]
[;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,]
[*, FastMath, ., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;]
[;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,]
[., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (]
[,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, )]
[., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -]
[), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol]
[), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA]
[., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (]
[), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case]
[||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed]
[), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (]
[<=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {]
[), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), )]
[-, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, )]
[), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), )]
[), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case]
[), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;]
[<, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?]
[., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case]
[,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA]
[), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB]
[), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;]
[), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;]
[:, return, absYA, <, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return]
[;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=]
[?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :]
[<, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case]
[?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :]
[:, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (]
[;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=]
[:, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?]
[;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB]
[:, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE]
[;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (]
[:, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0]
[;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError]
[?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default]
[), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;]
[<=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :]
[), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;]
[:, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default, :, throw]
[;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError]
[:, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, )]
[?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (]
[), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if]
[<, 0, ), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY]
[), ?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if]
[:, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=]
[;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, )]
[;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING]
[), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -]
[>=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p]
[), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -]
[;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1]
[-, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p]
[;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1]
[;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *]
[-, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *]
[), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB]
[<<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA]
[), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB]
[;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *]
[;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, )]
[+, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +]
[;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, )]
[=, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }]
[;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double]
[/, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =]
[), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p]
[-, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=]
[*, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (]
[-, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=]
[), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p]
[*, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final]
[*, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, )]
[*, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final]
[), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p]
[;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double]
[), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final]
[+, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING]
[), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final]
[), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double]
[>=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;]
[), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double]
[;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1]
[-, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, )]
[;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1]
[;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -]
[+, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *]
[;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -]
[;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, )]
[-, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +]
[), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA]
[<<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /]
[), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA]
[;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, )]
[=, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }]
[;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =]
[/, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start]
[), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int]
[-, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0]
[*, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY]
[-, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0]
[), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int]
[*, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX]
[*, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }]
[*, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX]
[), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int]
[;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =]
[), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end]
[+, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;]
[), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end]
[=, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System]
[;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy]
[;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,]
[;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (]
[,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,]
[,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,]
[,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,]
[,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, )]
[), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !]
[-, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if]
[), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !]
[=, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX]
[;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if]
[,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&]
[,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX]
[,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB]
[,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), )]
[), ;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {]
[), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --]
[), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --]
[), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {]
[&&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {]
[), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, )]
[>, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -]
[), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, )]
[), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {]
[), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else]
[<, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;]
[), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }]
[>=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, .]
[-, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =]
[>=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, .]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }]
[-, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;]
[), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }]
[;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, .]
[;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, .]
[;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (]
[;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (]
[=, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start]
[;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start, >, 1, ), )]
[., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start, >, 1]
[), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB]
[&&, (, end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {]
[., isNaN, (, nextX, ), &&, (, end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN]
[), &&, (, end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), )]
[), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB]
[), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (]
[>, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5]
[-, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA]
[>, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5]
[), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (]
[), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;]
[., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start]
[), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1]
[=, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex]
[;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, )]
[+, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }]
[;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, )]
[*, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double]
[;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, )]
[), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX]
[-, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue]
[), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX]
[=, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if]
[;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals]
[-, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision]
[;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals]
[=, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (, nextY]
[;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (, nextY, ,, 0.0]
[;, if, (, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if]
[), ;, if, (, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }]
[), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints]
[., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >]
[,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -]
[), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=]
[;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints]
[), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,]
[&&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (]
[), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy]
[>, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System]
[), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy]
[), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,]
[), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0]
[!=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x]
[-, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start]
[!=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x]
[), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0]
[=, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;]
[;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[-, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, .]
[;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;]
[., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,]
[,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, )]
[,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex]
[), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start]
[;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if]
[., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else]
[,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==]
[,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, .]
[,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, )]
[,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints]
[), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;]
[-=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, )]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2]
[;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (]
[--, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy]
[), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy]
[>=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,]
[), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy]
[/, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[+, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints]
[., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy]
[;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }]
[., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,]
[,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, )]
[,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --]
[), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;]
[;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,]
[., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System]
[,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x]
[,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex]
[,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x]
[,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex]
[), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1]
[;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex]
[;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex]
[;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +]
[., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, []
[,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX]
[,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System]
[,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy]
[,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y]
[,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex]
[), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex]
[-, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y]
[), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex]
[=, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex]
[[, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,]
[], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -]
[;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {]
[., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, []
[,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY]
[,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++]
[,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;]
[,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *]
[), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, )]
[-, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=]
[), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, )]
[=, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB]
[[, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =]
[], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;]
[;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY]
[;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++]
[<=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, )]
[*, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (]
[<=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, )]
[), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++]
[=, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB]
[;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0]
[=, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }]
[;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {]
[=, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =]
[;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA]
[., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;]
[), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;]
[;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, .]
[;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, .]
[=, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (]
[;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, )]
[=, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;]
[;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB]
[=, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex]
[;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;]
[=, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;, }, }]
[;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final, double]
[., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;, }, }, }, private]
[), ;, agingA, =, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final]
[=, 0, ;, ++, agingB, ;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final, double, targetY, ,]
[;, ++, agingB, ;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final, double, targetY, ,, final, double]
[;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final, double, targetY, ,, final, double, [, ], x]
[;, signChangeIndex, ++, ;, }, }, }, private, double, guessX, (, final, double, targetY, ,, final, double, [, ], x]
[;, }, }, }, private, double, guessX, (, final, double, targetY, ,, final, double, [, ], x, ,, final, double]
[++, ;, }, }, }, private, double, guessX, (, final, double, targetY, ,, final, double, [, ], x, ,, final]
[;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[<, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[-, 1, ;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1]
[), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1]
[;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, []
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[+, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j]
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, []
[;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -]
[-, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j]
[;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -]
[;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -]
[>, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, []
[;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -]
[), {, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], )]
[), {, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], )]
[=, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ]]
[[, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y]
[], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j]
[;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=, start]
[/, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double, x0, =]
[), /, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double, x0]
[-, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, [, j, -, delta]
[[, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, []
[], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, [, j, -]
[), /, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double, x0]
[[, j, -, 1, ], ), /, (, y, [, j, ], -, y, [, j, -, delta, ], )]
[], ), /, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double]
[-, 1, ], ), /, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }]
[], ), /, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double]
[;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=, start]
[), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=]
[-, y, [, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j]
[[, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for]
[], -, y, [, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int]
[), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=]
[[, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end]
[], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j]
[-, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1]
[], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY]
[-, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *]
[;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY]
[;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, [, j]
[>=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y]
[;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, [, j]
[), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, [, j, ], ), ;]
[), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, [, j, ], ), ;]
[=, x, [, j, ], +, x0, *, (, targetY, -, y, [, j, ], ), ;, }, return, x0]
[;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double]
[+, x0, *, (, targetY, -, y, [, j, ], ), ;, }, return, x0, ;, }, public, double, solve]
[[, j, ], +, x0, *, (, targetY, -, y, [, j, ], ), ;, }, return, x0, ;, }]
[], +, x0, *, (, targetY, -, y, [, j, ], ), ;, }, return, x0, ;, }, public, double]
[;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double]
[*, (, targetY, -, y, [, j, ], ), ;, }, return, x0, ;, }, public, double, solve, (, int]
[;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double]
[), ;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,]
[-, y, [, j, ], ), ;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction]
[), ;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,]
[[, j, ], ), ;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,]
[], ), ;, }, return, x0, ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min]
[;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double, max, ,, AllowedSolution, allowedSolution]
[=, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ), ;, }, public, double]
[., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ), ;, }]
[;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ), ;, }, public, double, solve, (]
[;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double, max, ,, double, startValue]
[., solve, (, maxEval, ,, f, ,, min, ,, max, ), ;, }, public, double, solve, (, int, maxEval, ,]
[,, f, ,, min, ,, max, ), ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double]
[,, min, ,, max, ), ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,]
[,, max, ), ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double, max]
[), ;, }, public, double, solve, (, int, maxEval, ,, UnivariateFunction, f, ,, double, min, ,, double, max, ,, double]
[=, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }]
[., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, )]
[;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }, }]
[;, }, }]
[., solve, (, maxEval, ,, f, ,, min, ,, max, ,, startValue, ), ;, }, }]
[,, f, ,, min, ,, max, ,, startValue, ), ;, }, }]
[,, min, ,, max, ,, startValue, ), ;, }, }]
[,, max, ,, startValue, ), ;, }, }]
[,, startValue, ), ;, }, }]
[), ;, }, }]
