[commons, ., math3, ., linear, ., RealMatrix, ;, public, class, KolmogorovSmirnovDistribution, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., math3, ., linear, ., RealMatrix, ;, public, class, KolmogorovSmirnovDistribution, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[serialVersionUID, =, -, 4670676796862967187L, ;, private, int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (]
[serialVersionUID, =, -, 4670676796862967187L, ;, private, int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (]
[-, 4670676796862967187L, ;, private, int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=]
[int, n, ;, public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw]
[public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[public, KolmogorovSmirnovDistribution, (, int, n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[n, ), throws, NotStrictlyPositiveException, {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,]
[{, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }]
[{, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NOT_POSITIVE_NUMBER_OF_SAMPLES, ,, n, ), ;, }, this, ., n, =]
[;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return]
[;, }, this, ., n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return]
[n, =, n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (]
[n, ;, }, public, double, cdf, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d, ,]
[., cdf, (, d, ,, false, ), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return]
[., cdf, (, d, ,, false, ), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return]
[,, false, ), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (]
[), ;, }, public, double, cdfExact, (, double, d, ), throws, MathArithmeticException, {, return, this, ., cdf, (, d, ,]
[), ;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =]
[), ;, }, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =]
[}, public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =, 1, /]
[public, double, cdf, (, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =, 1, /, (]
[(, double, d, ,, boolean, exact, ), throws, MathArithmeticException, {, final, double, ninv, =, 1, /, (, (, double, )]
[throws, MathArithmeticException, {, final, double, ninv, =, 1, /, (, (, double, ), n, ), ;, final, double, ninvhalf, =]
[throws, MathArithmeticException, {, final, double, ninv, =, 1, /, (, (, double, ), n, ), ;, final, double, ninvhalf, =]
[{, final, double, ninv, =, 1, /, (, (, double, ), n, ), ;, final, double, ninvhalf, =, 0.5, *]
[=, 1, /, (, (, double, ), n, ), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (]
[=, 1, /, (, (, double, ), n, ), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (]
[/, (, (, double, ), n, ), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=]
[), n, ), ;, final, double, ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return]
[ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (]
[ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (]
[ninvhalf, =, 0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (]
[0.5, *, ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <]
[ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&]
[ninv, ;, if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&]
[if, (, d, <=, ninvhalf, ), {, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d, <=]
[{, return, 0, ;, }, else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =]
[else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =]
[else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =]
[else, if, (, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =]
[(, ninvhalf, <, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *]
[<, d, &&, d, <=, ninv, ), {, double, res, =, 1, ;, double, f, =, 2, *, d, -]
[{, double, res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =]
[res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;]
[res, =, 1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;]
[1, ;, double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=]
[double, f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[f, =, 2, *, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++]
[*, d, -, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {]
[-, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=]
[-, ninv, ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=]
[;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=, i, *]
[i, =, 1, ;, i, <=, n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return]
[n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (]
[n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (]
[n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (]
[n, ;, ++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (]
[++, i, ), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -]
[), {, res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=]
[res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&]
[res, *=, i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&]
[i, *, f, ;, }, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <]
[}, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return]
[}, return, res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return]
[res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -]
[res, ;, }, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -]
[}, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *]
[}, else, if, (, 1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *]
[1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (]
[1, -, ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (]
[ninv, <=, d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -]
[d, &&, d, <, 1, ), {, return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,]
[return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (]
[return, 1, -, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (]
[-, 2, *, Math, ., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (, 1, <=]
[., pow, (, 1, -, d, ,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return]
[-, d, ,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return]
[-, d, ,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return]
[,, n, ), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?]
[), ;, }, else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (]
[else, if, (, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d, ), :]
[(, 1, <=, d, ), {, return, 1, ;, }, return, exact, ?, exactK, (, d, ), :, roundedK, (]
[roundedK, (, d, ), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =]
[), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, )]
[), ;, }, private, double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, )]
[double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (]
[double, exactK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (]
[(, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (, n, *]
[=, (, int, ), Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, H, =]
[=, (, int, ), Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, H, =]
[Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (]
[FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =]
[FieldMatrix, <, BigFraction, >, H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =]
[H, =, this, ., createH, (, d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (]
[d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =]
[d, ), ;, final, FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =]
[FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (]
[FieldMatrix, <, BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (]
[BigFraction, >, Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -]
[Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,]
[Hpower, =, H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,]
[H, ., power, (, n, ), ;, BigFraction, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -]
[pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;]
[getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=]
[k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[-, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++]
[k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {]
[1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =]
[1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =]
[1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =]
[(, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (]
[;, i, <=, n, ;, ++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (]
[++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return]
[++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return]
[++, i, ), {, pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return]
[pFrac, =, pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (]
[pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,]
[pFrac, ., multiply, (, i, ), ., divide, (, n, ), ;, }, return, pFrac, ., bigDecimalValue, (, 20, ,]
[., doubleValue, (, ), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =]
[), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, )]
[), ;, }, private, double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, )]
[double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (]
[double, roundedK, (, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (]
[(, double, d, ), throws, MathArithmeticException, {, final, int, k, =, (, int, ), Math, ., ceil, (, n, *]
[=, (, int, ), Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =]
[=, (, int, ), Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =]
[Math, ., ceil, (, n, *, d, ), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (]
[), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =]
[), ;, final, FieldMatrix, <, BigFraction, >, HBigFraction, =, this, ., createH, (, d, ), ;, final, int, m, =]
[., createH, (, d, ), ;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =]
[d, ), ;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (]
[;, final, int, m, =, HBigFraction, ., getRowDimension, (, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,]
[(, ), ;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =]
[;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;]
[;, final, RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;]
[RealMatrix, H, =, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[new, Array2DRowRealMatrix, (, m, ,, m, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {]
[{, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,]
[j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,]
[j, <, m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (]
[m, ;, ++, j, ), {, H, ., setEntry, (, i, ,, j, ,, HBigFraction, ., getEntry, (, i, ,]
[HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =]
[HBigFraction, ., getEntry, (, i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =]
[i, ,, j, ), ., doubleValue, (, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (]
[(, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =]
[(, ), ), ;, }, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =]
[}, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (]
[}, }, final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (]
[final, RealMatrix, Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -]
[Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,]
[Hpower, =, H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,]
[H, ., power, (, n, ), ;, double, pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -]
[pFrac, =, Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;]
[Hpower, ., getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;]
[getEntry, (, k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=]
[k, -, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[-, 1, ,, k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++]
[k, -, 1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {]
[1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=]
[1, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=]
[for, (, int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (, double, )]
[int, i, =, 1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (, double, ), i, /]
[1, ;, i, <=, n, ;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, )]
[n, ;, ++, i, ), {, pFrac, *=, (, double, ), i, /, (, double, ), n, ;, }, return]
[;, }, private, FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =]
[FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =, (, int, )]
[FieldMatrix, <, BigFraction, >, createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =, (, int, )]
[createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (]
[createH, (, double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (]
[double, d, ), throws, NumberIsTooLargeException, ,, FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (, n, *]
[FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (, n, *, d, ), ;, int, m, =]
[FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (, n, *, d, ), ;, int, m, =]
[FractionConversionException, {, int, k, =, (, int, ), Math, ., ceil, (, n, *, d, ), ;, int, m, =]
[int, k, =, (, int, ), Math, ., ceil, (, n, *, d, ), ;, int, m, =, 2, *]
[=, (, int, ), Math, ., ceil, (, n, *, d, ), ;, int, m, =, 2, *, k, -]
[., ceil, (, n, *, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =]
[., ceil, (, n, *, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =]
[(, n, *, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -]
[(, n, *, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -]
[*, d, ), ;, int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *]
[int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (]
[int, m, =, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (]
[=, 2, *, k, -, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=]
[-, 1, ;, double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw]
[double, hDouble, =, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (]
[=, k, -, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,]
[-, n, *, d, ;, if, (, hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,]
[hDouble, >=, 1, ), {, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =]
[{, throw, new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try, {]
[new, NumberIsTooLargeException, (, hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =]
[hDouble, ,, 1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (]
[1.0, ,, false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble, ,]
[false, ), ;, }, BigFraction, h, =, null, ;, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-20, ,]
[=, new, BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {]
[BigFraction, (, hDouble, ,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =]
[,, 1.0e-20, ,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (]
[,, 10000, ), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (, hDouble, ,]
[), ;, }, catch, (, FractionConversionException, e1, ), {, try, {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-10, ,]
[{, h, =, new, BigFraction, (, hDouble, ,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {]
[=, new, BigFraction, (, hDouble, ,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =]
[(, hDouble, ,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (]
[,, 1.0e-10, ,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,]
[,, 10000, ), ;, }, catch, (, FractionConversionException, e2, ), {, h, =, new, BigFraction, (, hDouble, ,, 1.0e-5, ,]
[new, BigFraction, (, hDouble, ,, 1.0e-5, ,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =]
[hDouble, ,, 1.0e-5, ,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, []
[,, 10000, ), ;, }, }, final, BigFraction, [, ], [, ], Hdata, =, new, BigFraction, [, m, ], []
[[, ], [, ], Hdata, =, new, BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =]
[[, ], Hdata, =, new, BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[[, ], Hdata, =, new, BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;]
[Hdata, =, new, BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[BigFraction, [, m, ], [, m, ], ;, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;]
[i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++]
[i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (]
[i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (]
[i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (]
[i, ), {, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (]
[{, for, (, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (, i, -]
[(, int, j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +]
[j, =, 0, ;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <]
[;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {]
[;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {]
[;, j, <, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {]
[<, m, ;, ++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, []
[++, j, ), {, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ], []
[{, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ], [, j, ], =]
[{, if, (, i, -, j, +, 1, <, 0, ), {, Hdata, [, i, ], [, j, ], =]
[1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {]
[1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {]
[1, <, 0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {]
[0, ), {, Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, []
[Hdata, [, i, ], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], []
[], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =]
[], [, j, ], =, BigFraction, ., ZERO, ;, }, else, {, Hdata, [, i, ], [, j, ], =]
[[, i, ], [, j, ], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =]
[[, j, ], =, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, []
[=, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;]
[=, BigFraction, ., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;]
[., ONE, ;, }, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;, hPowers, []
[}, }, }, final, BigFraction, [, ], hPowers, =, new, BigFraction, [, m, ], ;, hPowers, [, 0, ], =]
[hPowers, =, new, BigFraction, [, m, ], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =]
[new, BigFraction, [, m, ], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;]
[new, BigFraction, [, m, ], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;]
[[, m, ], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <]
[], ;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;]
[;, hPowers, [, 0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++]
[0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {]
[0, ], =, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {]
[=, h, ;, for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, []
[for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =]
[for, (, int, i, =, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =]
[=, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (]
[=, 1, ;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (]
[;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, []
[;, i, <, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, []
[<, m, ;, ++, i, ), {, hPowers, [, i, ], =, h, ., multiply, (, hPowers, [, i, -]
[], =, h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =]
[h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;]
[h, ., multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;]
[multiply, (, hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <]
[hPowers, [, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;]
[[, i, -, 1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[1, ], ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, []
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], []
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =]
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =]
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =]
[i, =, 0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =]
[0, ;, i, <, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, []
[<, m, ;, ++, i, ), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], []
[), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (]
[), {, Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (]
[Hdata, [, i, ], [, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, []
[[, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;]
[[, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;]
[[, 0, ], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;]
[], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, []
[], =, Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, []
[Hdata, [, i, ], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -]
[], [, 0, ], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], []
[], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =]
[], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =]
[], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =]
[], ., subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =]
[subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, []
[subtract, (, hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, []
[hPowers, [, i, ], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -]
[], ), ;, Hdata, [, m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], []
[m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (]
[m, -, 1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (]
[1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, []
[1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, []
[1, ], [, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, []
[[, i, ], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -]
[], =, Hdata, [, m, -, 1, ], [, i, ], ., subtract, (, hPowers, [, m, -, i, -]
[], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (]
[], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (]
[], [, i, ], ., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (]
[., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (]
[., subtract, (, hPowers, [, m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (]
[m, -, i, -, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==]
[-, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {]
[-, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {]
[-, 1, ], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {]
[], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, []
[], ), ;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, []
[;, }, if, (, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -]
[(, h, ., compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], []
[compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =]
[compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =]
[compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =]
[compareTo, (, BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =]
[BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, []
[BigFraction, ., ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, []
[ONE_HALF, ), ==, 1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -]
[1, ), {, Hdata, [, m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], []
[m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (]
[m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (]
[m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (]
[m, -, 1, ], [, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (]
[[, 0, ], =, Hdata, [, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (]
[[, m, -, 1, ], [, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (]
[[, 0, ], ., add, (, h, ., multiply, (, 2, ), ., subtract, (, 1, ), ., pow, (]
[2, ), ., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =]
[., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;]
[., subtract, (, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;]
[(, 1, ), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;, i, <]
[), ., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;]
[., pow, (, m, ), ), ;, }, for, (, int, i, =, 0, ;, i, <, m, ;, ++]
[for, (, int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[=, 0, ;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +]
[<, m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;]
[m, ;, ++, i, ), {, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++]
[{, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (]
[{, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (]
[{, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (]
[{, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (]
[(, int, j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (, i, -]
[j, =, 0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (, i, -, j, +]
[0, ;, j, <, i, +, 1, ;, ++, j, ), {, if, (, i, -, j, +, 1, >]
[++, j, ), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =]
[), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;]
[), {, if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;]
[if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=]
[if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=]
[if, (, i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=]
[i, -, j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -]
[j, +, 1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +]
[1, >, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;]
[>, 0, ), {, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++]
[{, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, ), {]
[{, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, ), {]
[{, for, (, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, ), {]
[(, int, g, =, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, []
[=, 2, ;, g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], []
[g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =]
[g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =]
[g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =]
[g, <=, i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =]
[i, -, j, +, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, []
[+, 1, ;, ++, g, ), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], []
[), {, Hdata, [, i, ], [, j, ], =, Hdata, [, i, ], [, j, ], ., divide, (]
[], =, Hdata, [, i, ], [, j, ], ., divide, (, g, ), ;, }, }, }, }, return]
[[, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[[, j, ], ., divide, (, g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (]
[g, ), ;, }, }, }, }, return, new, Array2DRowFieldMatrix, <, BigFraction, >, (, BigFractionField, ., getInstance, (, ), ,]
