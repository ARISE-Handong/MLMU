[;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,]
[., of, (, "deadAssignmentsElimination", ,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations"]
[,, "inlineFunctions", ,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final]
[,, "removeUnusedPrototypeProperties", ,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS]
[,, "removeUnreachableCode", ,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100]
[,, "removeUnusedVars", ,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static]
[,, "minimizeExitPoints", ,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String]
[,, "inlineVariables", ,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =]
[,, "collapseObjectLiterals", ,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;]
[,, "peepholeOptimizations", ), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State]
[), ;, static, final, int, MAX_LOOPS, =, 100, ;, static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[;, static, final, String, OPTIMIZE_LOOP_ERROR, =, "Fixed point loop exceeded the maximum number of iterations.", ;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger]
[;, enum, State, {, RUN_PASSES_NOT_RUN_IN_PREV_ITER, ,, RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, }, private, static, final, Logger, logger, =, Logger, ., getLogger, (, PhaseOptimizer, .]
[;, private, final, List, <, CompilerPass, >, passes, =, Lists, ., newArrayList, (, ), ;, private, final, AbstractCompiler, compiler, ;]
[., getLogger, (, PhaseOptimizer, ., class, ., getName, (, ), ), ;, private, final, List, <, CompilerPass, >, passes, =]
[), ;, private, final, List, <, CompilerPass, >, passes, =, Lists, ., newArrayList, (, ), ;, private, final, AbstractCompiler, compiler]
[., getName, (, ), ), ;, private, final, List, <, CompilerPass, >, passes, =, Lists, ., newArrayList, (, ), ;]
[;, private, final, AbstractCompiler, compiler, ;, private, final, PerformanceTracker, tracker, ;, private, final, CodeChangeHandler, ., RecentChange, recentChange, =, new, CodeChangeHandler]
[., newArrayList, (, ), ;, private, final, AbstractCompiler, compiler, ;, private, final, PerformanceTracker, tracker, ;, private, final, CodeChangeHandler, ., RecentChange]
[;, private, boolean, loopMutex, =, false, ;, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, private]
[;, private, Tracer, currentTracer, =, null, ;, private, String, currentPassName, =, null, ;, private, PassFactory, sanityCheck, =, null, ;, private]
[;, private, String, currentPassName, =, null, ;, private, PassFactory, sanityCheck, =, null, ;, private, double, progress, =, 0.0, ;, private]
[;, private, PassFactory, sanityCheck, =, null, ;, private, double, progress, =, 0.0, ;, private, double, progressStep, =, 0.0, ;, private]
[;, private, double, progress, =, 0.0, ;, private, double, progressStep, =, 0.0, ;, private, static, boolean, randomizeLoops, =, false, ;]
[;, private, double, progressStep, =, 0.0, ;, private, static, boolean, randomizeLoops, =, false, ;, private, static, List, <, List, <]
[;, private, static, boolean, randomizeLoops, =, false, ;, private, static, List, <, List, <, String, >, >, loopsRun, =, Lists]
[;, private, static, List, <, List, <, String, >, >, loopsRun, =, Lists, ., newArrayList, (, ), ;, private, final]
[;, private, final, ProgressRange, progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange, ), {, this, .]
[., newArrayList, (, ), ;, private, final, ProgressRange, progressRange, ;, PhaseOptimizer, (, AbstractCompiler, compiler, ,, PerformanceTracker, tracker, ,, ProgressRange, progressRange]
[=, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange]
[., compiler, =, compiler, ;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler]
[;, this, ., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;]
[=, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops]
[., tracker, =, tracker, ;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static]
[;, this, ., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, )]
[=, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =, true]
[., progressRange, =, progressRange, ;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops]
[;, compiler, ., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =, true, ;, }]
[;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =, true, ;, }, static, List, <, List, <, String, >]
[., addChangeHandler, (, recentChange, ), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =, true, ;, }, static, List]
[), ;, }, static, void, randomizeLoops, (, ), {, randomizeLoops, =, true, ;, }, static, List, <, List, <, String]
[=, true, ;, }, static, List, <, List, <, String, >, >, getLoopsRun, (, ), {, return, loopsRun, ;, }]
[;, }, static, List, <, List, <, String, >, >, getLoopsRun, (, ), {, return, loopsRun, ;, }, static, void]
[;, }, static, void, clearLoopsRun, (, ), {, loopsRun, ., clear, (, ), ;, }, void, consume, (, List, <]
[;, }, void, consume, (, List, <, PassFactory, >, factories, ), {, Loop, currentLoop, =, new, Loop, (, ), ;]
[., clear, (, ), ;, }, void, consume, (, List, <, PassFactory, >, factories, ), {, Loop, currentLoop, =, new]
[;, boolean, isCurrentLoopPopulated, =, false, ;, for, (, PassFactory, factory, :, factories, ), {, if, (, factory, ., isOneTimePass, (]
[;, for, (, PassFactory, factory, :, factories, ), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (]
[), {, if, (, factory, ., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (]
[), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, )]
[., isOneTimePass, (, ), ), {, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =]
[), {, passes, ., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;]
[;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else]
[., add, (, currentLoop, ), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (]
[), ;, currentLoop, =, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }]
[=, new, Loop, (, ), ;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop]
[;, isCurrentLoopPopulated, =, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, )]
[=, false, ;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated]
[;, }, addOneTimePass, (, factory, ), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true]
[;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated]
[), ;, }, else, {, currentLoop, ., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (]
[;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, }]
[., addLoopedPass, (, factory, ), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add]
[), ;, isCurrentLoopPopulated, =, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;]
[=, true, ;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, }, }, void]
[;, }, }, if, (, isCurrentLoopPopulated, ), {, passes, ., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (]
[), {, passes, ., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, .]
[;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, ., add, (, new, NamedPass, (, factory, ), )]
[., add, (, currentLoop, ), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, ., add, (, new]
[), ;, }, }, void, addOneTimePass, (, PassFactory, factory, ), {, passes, ., add, (, new, NamedPass, (, factory, )]
[;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;, passes, ., add, (, loop]
[., add, (, new, NamedPass, (, factory, ), ), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new]
[), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;, passes, ., add, (]
[), ), ;, }, Loop, addFixedPointLoop, (, ), {, Loop, loop, =, new, Loop, (, ), ;, passes, ., add]
[;, passes, ., add, (, loop, ), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this]
[;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this, ., sanityCheck, =, sanityCheck, ;, }, @]
[., add, (, loop, ), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this, ., sanityCheck]
[), ;, return, loop, ;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this, ., sanityCheck, =, sanityCheck, ;, }]
[;, }, void, setSanityCheck, (, PassFactory, sanityCheck, ), {, this, ., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void]
[=, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0]
[., sanityCheck, =, sanityCheck, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, progress, =, 0.0, ;, progressStep]
[=, 0.0, ;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue]
[;, progressStep, =, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange]
[=, 0.0, ;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue]
[;, if, (, progressRange, !=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /]
[), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;]
[!=, null, ), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (]
[), {, progressStep, =, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;]
[=, (, progressRange, ., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;, progress, =, progressRange]
[;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (]
[/, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes]
[), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :]
[-, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for]
[., maxValue, -, progressRange, ., initialValue, ), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;]
[), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :]
[., initialValue, ), /, passes, ., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass]
[;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (]
[., size, (, ), ;, progress, =, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {]
[=, progressRange, ., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,]
[;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,, root, ), ;, if]
[., initialValue, ;, }, for, (, CompilerPass, pass, :, passes, ), {, pass, ., process, (, externs, ,, root, )]
[), {, pass, ., process, (, externs, ,, root, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;]
[;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName, )]
[., process, (, externs, ,, root, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }]
[,, root, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }, private, void, startPass, (]
[), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, }, }, private, void, startPass, (, String, passName]
[), {, return, ;, }, }, }, private, void, startPass, (, String, passName, ), {, Preconditions, ., checkState, (, currentTracer]
[;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,]
[., checkState, (, currentTracer, ==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (]
[), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs]
[&&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void]
[==, null, &&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }]
[&&, currentPassName, ==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void]
[), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs]
[==, null, ), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (]
[), ;, currentPassName, =, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs]
[=, passName, ;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root]
[;, currentTracer, =, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {]
[=, newTracer, (, passName, ), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, .]
[;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=, null]
[), ;, }, private, void, endPass, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, currentTracer, !=]
[;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (, -]
[., checkState, (, currentTracer, !=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if]
[), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (]
[&&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {]
[!=, null, &&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null]
[&&, currentPassName, !=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {]
[), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (]
[!=, null, ), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, .]
[), ;, String, passToCheck, =, currentPassName, ;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (]
[;, try, {, if, (, progressRange, ==, null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;]
[), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler]
[==, null, ), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep]
[), {, compiler, ., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler]
[;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (]
[., setProgress, (, -, 1, ,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (]
[,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;]
[,, currentPassName, ), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;]
[), ;, }, else, {, progress, +=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer]
[+=, progressStep, ;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;]
[;, compiler, ., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =]
[;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs]
[., setProgress, (, progress, ,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;]
[,, currentPassName, ), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;]
[), ;, }, stopTracer, (, currentTracer, ,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (]
[;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception]
[,, currentPassName, ), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }]
[), ;, currentPassName, =, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (]
[=, null, ;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, )]
[;, currentTracer, =, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw]
[=, null, ;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException]
[;, maybeSanityCheck, (, externs, ,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for "]
[;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for ", +, passToCheck, ,, e, ), ;, }]
[,, root, ), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for ", +, passToCheck, ,, e]
[), ;, }, catch, (, Exception, e, ), {, throw, new, RuntimeException, (, "Sanity check failed for ", +, passToCheck, ,, e, ), ;]
[;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, ), {]
[,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=]
[+, passToCheck, ,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (]
[,, e, ), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=]
[), ;, }, }, void, maybeSanityCheck, (, Node, externs, ,, Node, root, ), {, if, (, sanityCheck, !=, null, )]
[), {, sanityCheck, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, }, private, boolean]
[!=, null, ), {, sanityCheck, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, }]
[), {, sanityCheck, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, }, private, boolean]
[;, }, }, private, boolean, hasHaltingErrors, (, ), {, return, compiler, ., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer]
[., process, (, externs, ,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return, compiler, ., hasHaltingErrors]
[., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, )]
[), ., process, (, externs, ,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return, compiler, .]
[,, root, ), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return, compiler, ., hasHaltingErrors, (, ), ;, }]
[), ;, }, }, private, boolean, hasHaltingErrors, (, ), {, return, compiler, ., hasHaltingErrors, (, ), ;, }, private, Tracer]
[;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (, recentChange, ., hasCodeChanged, (]
[., hasHaltingErrors, (, ), ;, }, private, Tracer, newTracer, (, String, passName, ), {, String, comment, =, passName, +, (]
[;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (]
[+, (, recentChange, ., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {]
[;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (]
[), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer]
[?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;]
[., hasCodeChanged, (, ), ?, " on recently changed AST", :, "", ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart]
[:, "", ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return]
[), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer]
[), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "JSCompiler", ,, comment, ), ;, }]
[!=, null, ), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "JSCompiler", ,, comment, )]
[), {, tracker, ., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "JSCompiler", ,, comment, ), ;, }]
[;, }, return, new, Tracer, (, "JSCompiler", ,, comment, ), ;, }, private, void, stopTracer, (, Tracer, t, ,, String]
[., recordPassStart, (, passName, ), ;, }, return, new, Tracer, (, "JSCompiler", ,, comment, ), ;, }, private, void, stopTracer]
[), ;, }, return, new, Tracer, (, "JSCompiler", ,, comment, ), ;, }, private, void, stopTracer, (, Tracer, t, ,]
[;, }, private, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop, (]
[,, comment, ), ;, }, private, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t]
[), ;, }, private, void, stopTracer, (, Tracer, t, ,, String, passName, ), {, long, result, =, t, ., stop]
[;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, class]
[., stop, (, ), ;, if, (, tracker, !=, null, ), {, tracker, ., recordPassStop, (, passName, ,, result, )]
[), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, class, NamedPass, implements, CompilerPass, {, final, String]
[!=, null, ), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, class, NamedPass, implements, CompilerPass, {]
[), {, tracker, ., recordPassStop, (, passName, ,, result, ), ;, }, }, class, NamedPass, implements, CompilerPass, {, final, String]
[;, }, }, class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (, PassFactory]
[., recordPassStop, (, passName, ,, result, ), ;, }, }, class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private]
[,, result, ), ;, }, }, class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private, final, PassFactory, factory, ;]
[), ;, }, }, class, NamedPass, implements, CompilerPass, {, final, String, name, ;, private, final, PassFactory, factory, ;, NamedPass, (]
[=, factory, ., getName, (, ), ;, this, ., factory, =, factory, ;, }, @, Override, public, void, process, (]
[., name, =, factory, ., getName, (, ), ;, this, ., factory, =, factory, ;, }, @, Override, public, void]
[;, this, ., factory, =, factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., getName, (, ), ;, this, ., factory, =, factory, ;, }, @, Override, public, void, process, (, Node, externs]
[=, factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine]
[., factory, =, factory, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, name]
[;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;]
[., fine, (, name, ), ;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (]
[), ;, startPass, (, name, ), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, )]
[;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, endPass, (, externs, ,, root]
[), ;, factory, ., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, endPass, (, externs, ,]
[;, endPass, (, externs, ,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass]
[., process, (, externs, ,, root, ), ;, endPass, (, externs, ,, root, ), ;, }, }, class, Loop, implements]
[., create, (, compiler, ), ., process, (, externs, ,, root, ), ;, endPass, (, externs, ,, root, ), ;]
[), ., process, (, externs, ,, root, ), ;, endPass, (, externs, ,, root, ), ;, }, }, class, Loop]
[,, root, ), ;, endPass, (, externs, ,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final]
[), ;, endPass, (, externs, ,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <]
[;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass, >, myPasses, =, Lists, ., newArrayList, (]
[,, root, ), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass, >, myPasses, =, Lists]
[), ;, }, }, class, Loop, implements, CompilerPass, {, private, final, List, <, NamedPass, >, myPasses, =, Lists, ., newArrayList]
[;, private, final, Set, <, String, >, myNames, =, Sets, ., newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory]
[., newArrayList, (, ), ;, private, final, Set, <, String, >, myNames, =, Sets, ., newHashSet, (, ), ;, void]
[;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, ), ;, Preconditions, ., checkArgument]
[., newHashSet, (, ), ;, void, addLoopedPass, (, PassFactory, factory, ), {, String, name, =, factory, ., getName, (, )]
[;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, .]
[., getName, (, ), ;, Preconditions, ., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name]
[;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (, factory, ), ), ;, }]
[., checkArgument, (, !, myNames, ., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (]
[,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (]
[,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (]
[., contains, (, name, ), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, .]
[), ,, "Already a pass with name '%s' in this loop", ,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass]
[,, name, ), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (, factory, )]
[), ;, myNames, ., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (, factory, ), ), ;]
[;, myPasses, ., add, (, new, NamedPass, (, factory, ), ), ;, }, private, List, <, String, >, getPassOrder, (]
[., add, (, name, ), ;, myPasses, ., add, (, new, NamedPass, (, factory, ), ), ;, }, private, List]
[), ;, myPasses, ., add, (, new, NamedPass, (, factory, ), ), ;, }, private, List, <, String, >, getPassOrder]
[;, }, private, List, <, String, >, getPassOrder, (, ), {, List, <, String, >, order, =, Lists, ., newArrayList]
[., add, (, new, NamedPass, (, factory, ), ), ;, }, private, List, <, String, >, getPassOrder, (, ), {]
[), ;, }, private, List, <, String, >, getPassOrder, (, ), {, List, <, String, >, order, =, Lists, .]
[), ), ;, }, private, List, <, String, >, getPassOrder, (, ), {, List, <, String, >, order, =, Lists]
[;, for, (, NamedPass, pass, :, myPasses, ), {, order, ., add, (, pass, ., name, ), ;, }, return]
[., newArrayList, (, ), ;, for, (, NamedPass, pass, :, myPasses, ), {, order, ., add, (, pass, ., name]
[), {, order, ., add, (, pass, ., name, ), ;, }, return, order, ;, }, @, Override, public, void]
[;, }, return, order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions]
[., add, (, pass, ., name, ), ;, }, return, order, ;, }, @, Override, public, void, process, (, Node]
[), ;, }, return, order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., name, ), ;, }, return, order, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, !]
[;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (, )]
[., checkState, (, !, loopMutex, ,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (]
[,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {]
[,, "Nested loops are forbidden", ), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {]
[), ;, loopMutex, =, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (]
[=, true, ;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (, ), ;, }]
[;, if, (, randomizeLoops, ), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (, ), ;, }, Set, <]
[), {, randomizePasses, (, ), ;, }, else, {, optimizePasses, (, ), ;, }, Set, <, NamedPass, >, madeChanges, =]
[;, }, else, {, optimizePasses, (, ), ;, }, Set, <, NamedPass, >, madeChanges, =, new, HashSet, <, NamedPass, >]
[;, }, Set, <, NamedPass, >, madeChanges, =, new, HashSet, <, NamedPass, >, (, ), ;, Set, <, NamedPass, >]
[;, Set, <, NamedPass, >, runInPrevIter, =, new, HashSet, <, NamedPass, >, (, ), ;, State, s, =, State, .]
[;, State, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (]
[;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (, count, ++]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, boolean, lastIterMadeChanges, ;, int, count, =, 0, ;, try, {, while, (, true, ), {, if, (]
[;, try, {, while, (, true, ), {, if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (]
[), {, if, (, count, ++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }]
[), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass]
[>, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (]
[++, >, MAX_LOOPS, ), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for]
[), {, compiler, ., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass]
[;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;]
[., throwInternalError, (, OPTIMIZE_LOOP_ERROR, ,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, )]
[,, null, ), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset]
[), ;, }, lastIterMadeChanges, =, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, )]
[=, false, ;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (]
[;, for, (, NamedPass, pass, :, myPasses, ), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==]
[), {, recentChange, ., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, .]
[;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (]
[., reset, (, ), ;, if, (, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass]
[), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if, (]
[||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process]
[), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, .]
[&&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains]
[==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER]
[&&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, &&, !, runInPrevIter, ., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges]
[), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, .]
[), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, .]
[., contains, (, pass, ), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, )]
[), ), ||, (, s, ==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass]
[), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if, (]
[), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if]
[&&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter]
[==, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,]
[&&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter]
[., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, &&, madeChanges, ., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, )]
[), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if]
[., contains, (, pass, ), ), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add]
[), ), ), {, pass, ., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;]
[;, runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if]
[., process, (, externs, ,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, )]
[,, root, ), ;, runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;]
[), ;, runInPrevIter, ., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else]
[;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), )]
[., add, (, pass, ), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (, recentChange]
[), ;, if, (, hasHaltingErrors, (, ), ), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, )]
[), {, return, ;, }, else, if, (, recentChange, ., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass]
[), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (]
[., hasCodeChanged, (, ), ), {, madeChanges, ., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {]
[;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {, runInPrevIter]
[., add, (, pass, ), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;]
[), ;, lastIterMadeChanges, =, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {]
[=, true, ;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove]
[;, }, else, {, madeChanges, ., remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass]
[;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (, s, ==, State, .]
[., remove, (, pass, ), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if]
[), ;, }, }, else, {, runInPrevIter, ., remove, (, pass, ), ;, }, }, if, (, s, ==, State]
[;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =, State]
[., remove, (, pass, ), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges]
[), ;, }, }, if, (, s, ==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =]
[), {, if, (, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }]
[==, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {]
[), {, if, (, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ), {, if, (, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;]
[), {, s, =, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges]
[=, State, ., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {, s]
[;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER]
[., RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER, ;, }, else, {, return, ;, }, }, else, if, (, !, lastIterMadeChanges, ), {, s, =, State]
[), {, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private]
[), {, s, =, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private]
[=, State, ., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (]
[;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (, ), {, Collections, .]
[., RUN_PASSES_NOT_RUN_IN_PREV_ITER, ;, }, }, }, finally, {, loopMutex, =, false, ;, }, }, private, void, randomizePasses, (, ), {]
[=, false, ;, }, }, private, void, randomizePasses, (, ), {, Collections, ., shuffle, (, myPasses, ), ;, }, private]
[;, }, }, private, void, randomizePasses, (, ), {, Collections, ., shuffle, (, myPasses, ), ;, }, private, void, optimizePasses]
[;, }, private, void, optimizePasses, (, ), {, List, <, NamedPass, >, optimalPasses, =, Lists, ., newArrayList, (, ), ;]
[., shuffle, (, myPasses, ), ;, }, private, void, optimizePasses, (, ), {, List, <, NamedPass, >, optimalPasses, =, Lists]
[), ;, }, private, void, optimizePasses, (, ), {, List, <, NamedPass, >, optimalPasses, =, Lists, ., newArrayList, (, )]
[;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (, pass]
[., newArrayList, (, ), ;, for, (, String, passName, :, OPTIMAL_ORDER, ), {, for, (, NamedPass, pass, :, myPasses, )]
[), {, for, (, NamedPass, pass, :, myPasses, ), {, if, (, pass, ., name, ., equals, (, passName, )]
[), {, if, (, pass, ., name, ., equals, (, passName, ), ), {, optimalPasses, ., add, (, pass, )]
[), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, )]
[., equals, (, passName, ), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses]
[., name, ., equals, (, passName, ), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }]
[), ), {, optimalPasses, ., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses]
[;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;, myPasses, ., addAll, (, optimalPasses, ), ;]
[., add, (, pass, ), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;, myPasses, .]
[), ;, break, ;, }, }, }, myPasses, ., removeAll, (, optimalPasses, ), ;, myPasses, ., addAll, (, optimalPasses, )]
[;, myPasses, ., addAll, (, optimalPasses, ), ;, }, }, static, class, ProgressRange, {, public, final, double, initialValue, ;, public]
[., removeAll, (, optimalPasses, ), ;, myPasses, ., addAll, (, optimalPasses, ), ;, }, }, static, class, ProgressRange, {, public]
[), ;, myPasses, ., addAll, (, optimalPasses, ), ;, }, }, static, class, ProgressRange, {, public, final, double, initialValue, ;]
[;, }, }, static, class, ProgressRange, {, public, final, double, initialValue, ;, public, final, double, maxValue, ;, public, ProgressRange, (]
[., addAll, (, optimalPasses, ), ;, }, }, static, class, ProgressRange, {, public, final, double, initialValue, ;, public, final, double]
[), ;, }, }, static, class, ProgressRange, {, public, final, double, initialValue, ;, public, final, double, maxValue, ;, public, ProgressRange]
[=, initialValue, ;, this, ., maxValue, =, maxValue, ;, }, }, }]
[., initialValue, =, initialValue, ;, this, ., maxValue, =, maxValue, ;, }, }, }]
[;, this, ., maxValue, =, maxValue, ;, }, }, }]
[=, maxValue, ;, }, }, }]
[., maxValue, =, maxValue, ;, }, }, }]
[;, }, }, }]
