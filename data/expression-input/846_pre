[,, LOCALS_ONLY, ,, ALL, }, private, final, Mode, mode, ;, private, final, boolean, inlineAllStrings, ;, private, final, IdentifyConstants, identifyConstants, =]
[IdentifyConstants, identifyConstants, =, new, IdentifyConstants, (, ), ;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {]
[IdentifyConstants, identifyConstants, =, new, IdentifyConstants, (, ), ;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {]
[IdentifyConstants, (, ), ;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =]
[), ;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;]
[), ;, InlineVariables, (, AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;, this, ., mode, =]
[,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;, this, ., mode, =, mode, ;]
[,, Mode, mode, ,, boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;, this, ., mode, =, mode, ;]
[boolean, inlineAllStrings, ), {, this, ., compiler, =, compiler, ;, this, ., mode, =, mode, ;, this, ., inlineAllStrings, =]
[=, inlineAllStrings, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,]
[), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), ), ;]
[), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), ), ;]
[=, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), ), ;, callback, ., process, (]
[ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ,, getFilterForMode, (, ), ), ;, callback, ., process, (, externs, ,]
[., process, (, externs, ,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (]
[,, root, ), ;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case]
[;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case, ALL, :, return]
[;, }, private, Predicate, <, Var, >, getFilterForMode, (, ), {, switch, (, mode, ), {, case, ALL, :, return]
[{, switch, (, mode, ), {, case, ALL, :, return, Predicates, ., <, Var, >, alwaysTrue, (, ), ;, case]
[mode, ), {, case, ALL, :, return, Predicates, ., <, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return]
[return, Predicates, ., <, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;, case]
[<, Var, >, alwaysTrue, (, ), ;, case, LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;, case, CONSTANTS_ONLY, :, return]
[LOCALS_ONLY, :, return, new, IdentifyLocals, (, ), ;, case, CONSTANTS_ONLY, :, return, new, IdentifyConstants, (, ), ;, default, :, throw]
[private, class, IdentifyConstants, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[private, class, IdentifyConstants, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[private, class, IdentifyLocals, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[private, class, IdentifyLocals, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[private, class, IdentifyLocals, implements, Predicate, <, Var, >, {, @, Override, public, boolean, apply, (, Var, var, ), {, return]
[{, private, final, Var, alias, ;, private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {]
[{, private, final, Var, alias, ;, private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {]
[alias, ;, private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {, this, ., alias, =]
[private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {, this, ., alias, =, alias, ;]
[private, final, ReferenceCollection, refInfo, ;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {, this, ., alias, =, alias, ;]
[;, AliasCandidate, (, Var, alias, ,, ReferenceCollection, refInfo, ), {, this, ., alias, =, alias, ;, this, ., refInfo, =]
[refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =]
[refInfo, =, refInfo, ;, }, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =]
[<, Var, >, staleVars, =, Sets, ., newHashSet, (, ), ;, final, Map, <, Node, ,, AliasCandidate, >, aliasCandidates, =]
[<, Var, >, staleVars, =, Sets, ., newHashSet, (, ), ;, final, Map, <, Node, ,, AliasCandidate, >, aliasCandidates, =]
[=, Maps, ., newHashMap, (, ), ;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {]
[., newHashMap, (, ), ;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (]
[(, ), ;, @, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (, t, ,]
[@, Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (, t, ,, referenceMap, ), ;]
[public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (, t, ,, referenceMap, ), ;, doInlinesForScope, (]
[afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, collectAliasCandidates, (, t, ,, referenceMap, ), ;, doInlinesForScope, (, t, ,]
[(, t, ,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (]
[(, t, ,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (]
[,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (, mode, !=]
[,, referenceMap, ), ;, }, private, void, collectAliasCandidates, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, if, (, mode, !=]
[referenceMap, ), {, if, (, mode, !=, Mode, ., CONSTANTS_ONLY, ), {, for, (, Iterator, <, Var, >, it, =]
[referenceMap, ), {, if, (, mode, !=, Mode, ., CONSTANTS_ONLY, ), {, for, (, Iterator, <, Var, >, it, =]
[referenceMap, ), {, if, (, mode, !=, Mode, ., CONSTANTS_ONLY, ), {, for, (, Iterator, <, Var, >, it, =]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =]
[it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =]
[), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=]
[next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&]
[next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&]
[next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&]
[next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&]
[., getReferences, (, v, ), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=]
[(, v, ), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&]
[(, v, ), ;, if, (, referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&]
[referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&]
[referenceInfo, !=, null, &&, referenceInfo, ., references, ., size, (, ), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&]
[), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =]
[), >=, 2, &&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[&&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (]
[Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (]
[Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (]
[=, referenceInfo, ., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, !=]
[., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&]
[., getInitializingReference, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&]
[=, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {]
[=, init, ., getAssignedValue, (, ), ;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {]
[(, ), ;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (]
[;, if, (, value, !=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,]
[value, !=, null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (]
[null, &&, value, ., isName, (, ), ), {, aliasCandidates, ., put, (, value, ,, new, AliasCandidate, (, v, ,]
[;, }, }, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments, =]
[}, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments, =, maybeEscapedOrModifiedArguments, (]
[}, }, }, }, private, void, doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments, =, maybeEscapedOrModifiedArguments, (]
[doInlinesForScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, boolean, maybeModifiedArguments, =, maybeEscapedOrModifiedArguments, (, t, ., getScope, (, ), ,]
[=, maybeEscapedOrModifiedArguments, (, t, ., getScope, (, ), ,, referenceMap, ), ;, for, (, Iterator, <, Var, >, it, =]
[=, maybeEscapedOrModifiedArguments, (, t, ., getScope, (, ), ,, referenceMap, ), ;, for, (, Iterator, <, Var, >, it, =]
[=, maybeEscapedOrModifiedArguments, (, t, ., getScope, (, ), ,, referenceMap, ), ;, for, (, Iterator, <, Var, >, it, =]
[), ;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[), ;, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =]
[it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =]
[), ;, ), {, Var, v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[v, =, it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[it, ., next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, ==]
[next, (, ), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, ==, null, ||]
[), ;, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (]
[), ;, if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (]
[if, (, referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (]
[referenceInfo, ==, null, ||, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,]
[), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =]
[), ), {, continue, ;, }, else, if, (, isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =]
[isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =]
[isInlineableDeclaredConstant, (, v, ,, referenceInfo, ), ), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =]
[), {, Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;]
[Reference, init, =, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (]
[=, referenceInfo, ., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,]
[., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,]
[., getInitializingReferenceForConstants, (, ), ;, Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,]
[Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[Node, value, =, init, ., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[., getAssignedValue, (, ), ;, inlineDeclaredConstant, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (]
[value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==]
[value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, mode, ==]
[(, v, ), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {]
[), ;, }, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (]
[}, else, if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,]
[if, (, mode, ==, Mode, ., CONSTANTS_ONLY, ), {, continue, ;, }, else, {, inlineNonConstants, (, v, ,, referenceInfo, ,]
[,, maybeModifiedArguments, ), ;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (]
[,, maybeModifiedArguments, ), ;, }, }, }, private, boolean, maybeEscapedOrModifiedArguments, (, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (]
[(, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (, scope, ., isLocal, (, ), ), {, Var, arguments, =]
[(, Scope, scope, ,, ReferenceMap, referenceMap, ), {, if, (, scope, ., isLocal, (, ), ), {, Var, arguments, =]
[(, scope, ., isLocal, (, ), ), {, Var, arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =]
[(, scope, ., isLocal, (, ), ), {, Var, arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =]
[(, ), ), {, Var, arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (]
[arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (]
[arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (]
[arguments, =, scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (]
[scope, ., getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=]
[getArgumentsVar, (, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&]
[(, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&, !]
[(, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&, !]
[(, ), ;, ReferenceCollection, refs, =, referenceMap, ., getReferences, (, arguments, ), ;, if, (, refs, !=, null, &&, !]
[(, refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :]
[(, refs, !=, null, &&, !, refs, ., references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :]
[references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =]
[references, ., isEmpty, (, ), ), {, for, (, Reference, ref, :, refs, ., references, ), {, Node, refNode, =]
[Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =]
[Reference, ref, :, refs, ., references, ), {, Node, refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =]
[Node, refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (]
[refNode, =, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !]
[=, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (]
[=, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (]
[=, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (]
[=, ref, ., getNode, (, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (]
[(, ), ;, Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (]
[Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&]
[Node, refParent, =, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&]
[=, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==]
[=, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==]
[=, ref, ., getParent, (, ), ;, if, (, !, (, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==]
[(, NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&]
[NodeUtil, ., isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !]
[isGet, (, refParent, ), &&, refNode, ==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (]
[==, ref, ., getParent, (, ), ., getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), ), {, return]
[getFirstChild, (, ), &&, !, isLValue, (, refParent, ), ), ), {, return, true, ;, }, }, }, }, return]
[;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =]
[;, }, }, }, }, return, false, ;, }, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =]
[;, }, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[}, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (]
[}, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (]
[}, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (]
[}, private, boolean, isLValue, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||]
[n, ., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||]
[., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (]
[., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (]
[., getParent, (, ), ;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (]
[;, return, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (]
[parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[parent, ., isDec, (, ), ||, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =]
[), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =]
[), ;, }, private, void, inlineNonConstants, (, Var, v, ,, ReferenceCollection, referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =]
[referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =, referenceInfo, ., references, ., size, (, ), ;, Reference, declaration, =]
[referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =, referenceInfo, ., references, ., size, (, ), ;, Reference, declaration, =]
[referenceInfo, ,, boolean, maybeModifiedArguments, ), {, int, refCount, =, referenceInfo, ., references, ., size, (, ), ;, Reference, declaration, =]
[int, refCount, =, referenceInfo, ., references, ., size, (, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (]
[., size, (, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =]
[., size, (, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =]
[., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =]
[., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =]
[references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (]
[references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (]
[get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==]
[), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?]
[Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :]
[., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (]
[., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (]
[., getInitializingReference, (, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (]
[(, ), ;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (, refCount, >]
[;, int, firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&]
[firstRefAfterInit, =, (, declaration, ==, init, ), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (]
[(, declaration, ==, init, ), ?, 2, :, 3, ;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,]
[;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (]
[;, if, (, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (]
[(, refCount, >, 1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=]
[1, &&, isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {]
[isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {, value, =]
[isImmutableAndWellDefinedVariable, (, v, ,, referenceInfo, ), ), {, Node, value, ;, if, (, init, !=, null, ), {, value, =]
[(, init, !=, null, ), {, value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =]
[(, init, !=, null, ), {, value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =]
[value, =, init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;]
[init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =]
[init, ., getAssignedValue, (, ), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =]
[), ;, }, else, {, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (]
[{, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }]
[{, Node, srcLocation, =, declaration, ., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }]
[declaration, ., getNode, (, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (]
[(, ), ;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;]
[;, value, =, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[=, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,]
[., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,]
[., newUndefinedNode, (, srcLocation, ), ;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,]
[;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[;, }, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (]
[value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==]
[;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =]
[;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =]
[;, staleVars, ., add, (, v, ), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =]
[), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (]
[), ;, }, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (]
[}, else, if, (, refCount, ==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -]
[==, firstRefAfterInit, ), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (]
[), {, Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (]
[Reference, reference, =, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,]
[=, referenceInfo, ., references, ., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,]
[., get, (, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {]
[(, firstRefAfterInit, -, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (]
[-, 1, ), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,]
[), ;, if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,]
[if, (, canInline, (, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,]
[(, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;]
[(, declaration, ,, init, ,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;]
[,, reference, ), ), {, inline, (, v, ,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (]
[,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (]
[,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (]
[,, declaration, ,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (]
[,, init, ,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=]
[,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&]
[,, reference, ), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&]
[), ;, staleVars, ., add, (, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==]
[(, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (]
[(, v, ), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (]
[), ;, }, }, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (]
[}, else, if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&]
[if, (, declaration, !=, init, &&, refCount, ==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (]
[==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =]
[==, 2, ), {, if, (, isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =]
[isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;]
[isValidDeclaration, (, declaration, ), &&, isValidInitialization, (, init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;]
[&&, isValidInitialization, (, init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (]
[init, ), ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;]
[), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,]
[=, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,]
[=, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,]
[), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;]
[checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (]
[v, ,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (]
[,, value, ,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !]
[,, referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&]
[referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !]
[referenceInfo, ., references, ), ;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !]
[;, staleVars, ., add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (]
[add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&]
[add, (, v, ), ;, }, }, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&]
[}, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&]
[}, if, (, !, maybeModifiedArguments, &&, !, staleVars, ., contains, (, v, ), &&, referenceInfo, ., isWellDefined, (, ), &&]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =]
[&&, referenceInfo, ., isWellDefined, (, ), &&, referenceInfo, ., isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =]
[isAssignedOnceInLifetime, (, ), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =]
[), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;]
[), ), {, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;]
[{, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i, <]
[{, List, <, Reference, >, refs, =, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i, <]
[=, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i, <, refs, ., size, (, ), ;]
[=, referenceInfo, ., references, ;, for, (, int, i, =, 1, ;, i, <, refs, ., size, (, ), ;]
[int, i, =, 1, ;, i, <, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =]
[int, i, =, 1, ;, i, <, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =]
[int, i, =, 1, ;, i, <, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =]
[;, i, <, refs, ., size, (, ), ;, i, ++, ), {, Node, nameNode, =, refs, ., get, (]
[i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if, (]
[i, ++, ), {, Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if, (]
[Node, nameNode, =, refs, ., get, (, i, ), ., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (]
[i, ), ., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =]
[i, ), ., getNode, (, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =]
[(, ), ;, if, (, aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (]
[aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (]
[aliasCandidates, ., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (]
[., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !]
[., containsKey, (, nameNode, ), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !]
[), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (]
[), ), {, AliasCandidate, candidate, =, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (]
[=, aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&]
[aliasCandidates, ., get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !]
[get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (]
[get, (, nameNode, ), ;, if, (, !, staleVars, ., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (]
[., contains, (, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;]
[(, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =]
[(, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =]
[(, candidate, ., alias, ), &&, !, isVarInlineForbidden, (, candidate, ., alias, ), ), {, Reference, aliasInit, ;, aliasInit, =]
[alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[alias, ), ), {, Reference, aliasInit, ;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =]
[;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;]
[;, aliasInit, =, candidate, ., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;]
[., refInfo, ., getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (]
[getInitializingReference, (, ), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;]
[), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[), ;, Node, value, =, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (]
[=, aliasInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,]
[., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,]
[checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;]
[checkNotNull, (, value, ), ;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;]
[;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (]
[;, inlineWellDefinedVariable, (, candidate, ., alias, ,, value, ,, candidate, ., refInfo, ., references, ), ;, staleVars, ., add, (]
[}, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (, Node, c, =]
[}, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (, Node, c, =]
[blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;]
[blacklistVarReferencesInTree, (, Node, root, ,, Scope, scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;]
[Node, root, ,, Scope, scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;, c, !=]
[,, Scope, scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;, c, !=, null, ;]
[scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[scope, ), {, for, (, Node, c, =, root, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[=, root, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (]
[(, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,]
[;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (]
[;, c, =, c, ., getNext, (, ), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (]
[), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {]
[), ), {, blacklistVarReferencesInTree, (, c, ,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {]
[(, c, ,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (]
[(, c, ,, scope, ), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (]
[), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (]
[), ;, }, if, (, root, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (]
[(, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[(, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[(, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[(, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[(, root, ., getString, (, ), ), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||]
[), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||]
[), ), ;, }, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isExtern, (, ), ||]
[(, Var, var, ), {, return, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (]
[(, Var, var, ), {, return, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (]
[return, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[return, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[return, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||]
[), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||]
[var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (]
[private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node, value, =]
[private, void, inline, (, Var, v, ,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node, value, =]
[,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node, value, =, init, ., getAssignedValue, (, ), ;]
[,, Reference, declaration, ,, Reference, init, ,, Reference, reference, ), {, Node, value, =, init, ., getAssignedValue, (, ), ;]
[Reference, init, ,, Reference, reference, ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[Reference, init, ,, Reference, reference, ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[,, Reference, reference, ), {, Node, value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=]
[value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =]
[value, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =]
[getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (]
[;, Preconditions, ., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;]
[., checkState, (, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (]
[(, value, !=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,]
[!=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,]
[!=, null, ), ;, boolean, isFunctionDeclaration, =, NodeUtil, ., isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,]
[isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (]
[isFunctionDeclaration, (, value, ), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (]
[value, ), ;, inlineValue, (, v, ,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=]
[,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =]
[,, reference, ,, value, ., detachFromParent, (, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =]
[(, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;]
[(, ), ), ;, if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;]
[if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (]
[if, (, declaration, !=, init, ), {, Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (]
[Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;]
[Node, expressRoot, =, init, ., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;]
[., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (]
[., getGrandparent, (, ), ;, Preconditions, ., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (]
[., checkState, (, expressRoot, ., isExprResult, (, ), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,]
[(, ), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (]
[), ), ;, NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !]
[NodeUtil, ., removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {]
[removeChild, (, expressRoot, ., getParent, (, ), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (]
[), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;, }, else, {]
[), ,, expressRoot, ), ;, }, if, (, !, isFunctionDeclaration, ), {, removeDeclaration, (, declaration, ), ;, }, else, {]
[private, void, inlineWellDefinedVariable, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {, Reference, decl, =]
[private, void, inlineWellDefinedVariable, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {, Reference, decl, =]
[Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {, Reference, decl, =, refSet, ., get, (]
[Reference, >, refSet, ), {, Reference, decl, =, refSet, ., get, (, 0, ), ;, for, (, int, i, =]
[refSet, ), {, Reference, decl, =, refSet, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[refSet, ), {, Reference, decl, =, refSet, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[{, Reference, decl, =, refSet, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[{, Reference, decl, =, refSet, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;]
[;, for, (, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {]
[(, int, i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (]
[i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,]
[i, =, 1, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,]
[i, <, refSet, ., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (]
[., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,]
[., size, (, ), ;, i, ++, ), {, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,]
[{, inlineValue, (, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), ), ;, }]
[(, v, ,, refSet, ., get, (, i, ), ,, value, ., cloneTree, (, ), ), ;, }, removeDeclaration, (]
[private, void, inlineDeclaredConstant, (, Var, v, ,, Node, value, ,, List, <, Reference, >, refSet, ), {, Reference, decl, =]
[Node, value, ,, List, <, Reference, >, refSet, ), {, Reference, decl, =, null, ;, for, (, Reference, r, :]
[Reference, >, refSet, ), {, Reference, decl, =, null, ;, for, (, Reference, r, :, refSet, ), {, if, (]
[Reference, >, refSet, ), {, Reference, decl, =, null, ;, for, (, Reference, r, :, refSet, ), {, if, (]
[Reference, >, refSet, ), {, Reference, decl, =, null, ;, for, (, Reference, r, :, refSet, ), {, if, (]
[decl, =, null, ;, for, (, Reference, r, :, refSet, ), {, if, (, r, ., getNode, (, ), ==]
[decl, =, null, ;, for, (, Reference, r, :, refSet, ), {, if, (, r, ., getNode, (, ), ==]
[r, :, refSet, ), {, if, (, r, ., getNode, (, ), ==, v, ., getNameNode, (, ), ), {]
[refSet, ), {, if, (, r, ., getNode, (, ), ==, v, ., getNameNode, (, ), ), {, decl, =]
[r, ., getNode, (, ), ==, v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {]
[getNode, (, ), ==, v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (]
[), ==, v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,]
[v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r, ,]
[v, ., getNameNode, (, ), ), {, decl, =, r, ;, }, else, {, inlineValue, (, v, ,, r, ,]
[r, ;, }, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, ), ), ;, }, }]
[}, else, {, inlineValue, (, v, ,, r, ,, value, ., cloneTree, (, ), ), ;, }, }, removeDeclaration, (]
[;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =]
[;, }, }, removeDeclaration, (, decl, ), ;, }, private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =]
[private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =, declaration, ., getParent, (, ), ;, Node, grandparent, =]
[private, void, removeDeclaration, (, Reference, declaration, ), {, Node, varNode, =, declaration, ., getParent, (, ), ;, Node, grandparent, =]
[), {, Node, varNode, =, declaration, ., getParent, (, ), ;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;]
[), {, Node, varNode, =, declaration, ., getParent, (, ), ;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;]
[=, declaration, ., getParent, (, ), ;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (]
[=, declaration, ., getParent, (, ), ;, Node, grandparent, =, declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (]
[=, declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (]
[declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !]
[declaration, ., getGrandparent, (, ), ;, varNode, ., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !]
[., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[., removeChild, (, declaration, ., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (]
[., getNode, (, ), ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (]
[(, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;]
[(, !, varNode, ., hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;]
[hasChildren, (, ), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (]
[), ), {, Preconditions, ., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,]
[., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }]
[., checkState, (, varNode, ., isVar, (, ), ), ;, NodeUtil, ., removeChild, (, grandparent, ,, varNode, ), ;, }]
[(, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (]
[(, ), ;, }, private, void, inlineValue, (, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (]
[(, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (, ref, ., isSimpleAssignmentToName, (, ), ), {]
[(, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (, ref, ., isSimpleAssignmentToName, (, ), ), {]
[(, Var, v, ,, Reference, ref, ,, Node, value, ), {, if, (, ref, ., isSimpleAssignmentToName, (, ), ), {]
[value, ), {, if, (, ref, ., isSimpleAssignmentToName, (, ), ), {, ref, ., getGrandparent, (, ), ., replaceChild, (]
[value, ), {, if, (, ref, ., isSimpleAssignmentToName, (, ), ), {, ref, ., getGrandparent, (, ), ., replaceChild, (]
[., isSimpleAssignmentToName, (, ), ), {, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }, else, {]
[ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }, else, {]
[ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, value, ), ;, }, else, {]
[ref, ., getParent, (, ), ,, value, ), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (]
[ref, ., getParent, (, ), ,, value, ), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (]
[value, ), ;, }, else, {, ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,]
[else, {, ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }]
[ref, ., getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (]
[getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,]
[getParent, (, ), ., replaceChild, (, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,]
[(, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;]
[(, ref, ., getNode, (, ), ,, value, ), ;, }, blacklistVarReferencesInTree, (, value, ,, v, ., scope, ), ;]
[compiler, ., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (]
[., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !]
[., reportCodeChange, (, ), ;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !]
[;, }, private, boolean, isInlineableDeclaredConstant, (, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !, identifyConstants, ., apply, (]
[(, Var, var, ,, ReferenceCollection, refInfo, ), {, if, (, !, identifyConstants, ., apply, (, var, ), ), {, return]
[refInfo, ), {, if, (, !, identifyConstants, ., apply, (, var, ), ), {, return, false, ;, }, if, (]
[), {, if, (, !, identifyConstants, ., apply, (, var, ), ), {, return, false, ;, }, if, (, !]
[), {, if, (, !, identifyConstants, ., apply, (, var, ), ), {, return, false, ;, }, if, (, !]
[(, var, ), ), {, return, false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return]
[false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =]
[false, ;, }, if, (, !, refInfo, ., isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =]
[isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (]
[isAssignedOnceInLifetime, (, ), ), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (]
[), ), {, return, false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==]
[false, ;, }, Reference, init, =, refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null, ), {, return]
[refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Node, value, =]
[refInfo, ., getInitializingReferenceForConstants, (, ), ;, if, (, init, ==, null, ), {, return, false, ;, }, Node, value, =]
[init, ==, null, ), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (]
[init, ==, null, ), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (]
[null, ), {, return, false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, ==]
[false, ;, }, Node, value, =, init, ., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return]
[=, init, ., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return, false, ;, }, if, (]
[init, ., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return, false, ;, }, if, (, !]
[init, ., getAssignedValue, (, ), ;, if, (, value, ==, null, ), {, return, false, ;, }, if, (, !]
[), ;, if, (, value, ==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (]
[==, null, ), {, return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return]
[return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return]
[return, false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return]
[false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !]
[false, ;, }, if, (, !, NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !]
[NodeUtil, ., isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||]
[isImmutableValue, (, value, ), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (]
[value, ), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,]
[value, ), ), {, return, false, ;, }, return, !, value, ., isString, (, ), ||, isStringWorthInlining, (, var, ,]
[references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (]
[references, ), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (]
[), ;, }, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !]
[}, private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !, inlineAllStrings, &&]
[private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !, inlineAllStrings, &&, !]
[private, boolean, isStringWorthInlining, (, Var, var, ,, List, <, Reference, >, refs, ), {, if, (, !, inlineAllStrings, &&, !]
[>, refs, ), {, if, (, !, inlineAllStrings, &&, !, var, ., isDefine, (, ), ), {, int, len, =]
[>, refs, ), {, if, (, !, inlineAllStrings, &&, !, var, ., isDefine, (, ), ), {, int, len, =]
[>, refs, ), {, if, (, !, inlineAllStrings, &&, !, var, ., isDefine, (, ), ), {, int, len, =]
[>, refs, ), {, if, (, !, inlineAllStrings, &&, !, var, ., isDefine, (, ), ), {, int, len, =]
[>, refs, ), {, if, (, !, inlineAllStrings, &&, !, var, ., isDefine, (, ), ), {, int, len, =]
[), ), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +]
[), ), {, int, len, =, var, ., getInitialValue, (, ), ., getString, (, ), ., length, (, ), +]
[(, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =]
[(, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =]
[(, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =]
[(, ), ., getString, (, ), ., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =]
[., length, (, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +]
[(, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +]
[(, ), +, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +]
[+, "''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *]
["''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (]
["''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (]
["''", ., length, (, ), ;, int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (]
[int, noInlineBytes, =, "var xx=;", ., length, (, ), +, len, +, 4, *, (, refs, ., size, (, ), -]
[(, ), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =]
[(, ), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =]
[), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (]
[), +, len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (]
[len, +, 4, *, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -]
[*, (, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *]
[(, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (]
[(, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (]
[(, refs, ., size, (, ), -, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (]
[-, 1, ), ;, int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -]
[int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;, return]
[int, inlineBytes, =, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;, return]
[=, (, len, -, 1, ), *, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=]
[1, ), *, (, refs, ., size, (, ), -, 1, ), ;, return, noInlineBytes, >=, inlineBytes, ;, }, return]
[return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (]
[return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (]
[return, true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (]
[true, ;, }, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !]
[}, private, boolean, canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration, (]
[canInline, (, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||]
[(, Reference, declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||, !]
[declaration, ,, Reference, initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (]
[initialization, ,, Reference, reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, ), ||]
[,, Reference, reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, ), ||, !]
[reference, ), {, if, (, !, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (]
[!, isValidDeclaration, (, declaration, ), ||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return]
[||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (]
[||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (]
[||, !, isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (]
[isValidInitialization, (, initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=]
[initialization, ), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&]
[), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !]
[), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !]
[), ||, !, isValidReference, (, reference, ), ), {, return, false, ;, }, if, (, declaration, !=, initialization, &&, !]
[}, if, (, declaration, !=, initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return]
[initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (]
[initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (]
[initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (]
[initialization, &&, !, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (]
[(, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=]
[(, ), ., isExprResult, (, ), ), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[), {, return, false, ;, }, if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||]
[if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=]
[if, (, declaration, ., getBasicBlock, (, ), !=, initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=]
[initialization, ., getBasicBlock, (, ), ||, declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return]
[declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =]
[declaration, ., getBasicBlock, (, ), !=, reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =]
[reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;]
[reference, ., getBasicBlock, (, ), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;]
[), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[), ), {, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[{, return, false, ;, }, Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=]
[Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (]
[Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (]
[Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (]
[Node, value, =, initialization, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (]
[(, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (, ), &&]
[(, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (, ), &&]
[(, ), ;, Preconditions, ., checkState, (, value, !=, null, ), ;, if, (, value, ., isGetProp, (, ), &&]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[), ;, if, (, value, ., isGetProp, (, ), &&, reference, ., getParent, (, ), ., isCall, (, ), &&]
[reference, ., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==]
[reference, ., getParent, (, ), ., isCall, (, ), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==]
[), &&, reference, ., getParent, (, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return]
[(, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false, ;, }, if, (]
[(, ), ., getFirstChild, (, ), ==, reference, ., getNode, (, ), ), {, return, false, ;, }, if, (]
[(, ), ), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =]
[(, ), ), {, return, false, ;, }, if, (, value, ., isFunction, (, ), ), {, Node, callNode, =]
[if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, ., getParent, (, ), ;, if, (]
[if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, ., getParent, (, ), ;, if, (]
[if, (, value, ., isFunction, (, ), ), {, Node, callNode, =, reference, ., getParent, (, ), ;, if, (]
[getParent, (, ), ;, if, (, reference, ., getParent, (, ), ., isCall, (, ), ), {, CodingConvention, convention, =]
[getParent, (, ), ;, if, (, reference, ., getParent, (, ), ., isCall, (, ), ), {, CodingConvention, convention, =]
[(, ), ., isCall, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =]
[(, ), ., isCall, (, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =]
[(, ), ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (]
[convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (]
[convention, =, compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (]
[compiler, ., getCodingConvention, (, ), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=]
[), ;, SubclassRelationship, relationship, =, convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return]
[convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (]
[convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (]
[convention, ., getClassesDefinedByCall, (, callNode, ), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (]
[callNode, ), ;, if, (, relationship, !=, null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (]
[if, (, relationship, !=, null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=]
[null, ), {, return, false, ;, }, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return]
[}, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }, return]
[}, if, (, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }, return]
[(, convention, ., getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (]
[getSingletonGetterClassName, (, callNode, ), !=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||]
[callNode, ), !=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (]
[!=, null, ), {, return, false, ;, }, }, }, return, canMoveAggressively, (, value, ), ||, canMoveModerately, (, initialization, ,]
[value, ), ||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return]
[value, ), ||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return]
[value, ), ||, canMoveModerately, (, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return]
[(, initialization, ,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (]
[,, reference, ), ;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,]
[;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ||]
[;, }, private, boolean, canMoveAggressively, (, Node, value, ), {, return, NodeUtil, ., isLiteralValue, (, value, ,, true, ), ||]
[}, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node, >, it, ;, if, (]
[}, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node, >, it, ;, if, (]
[}, private, boolean, canMoveModerately, (, Reference, initialization, ,, Reference, reference, ), {, Iterator, <, Node, >, it, ;, if, (]
[{, Iterator, <, Node, >, it, ;, if, (, initialization, ., getParent, (, ), ., isVar, (, ), ), {]
[<, Node, >, it, ;, if, (, initialization, ., getParent, (, ), ., isVar, (, ), ), {, it, =]
[<, Node, >, it, ;, if, (, initialization, ., getParent, (, ), ., isVar, (, ), ), {, it, =]
[<, Node, >, it, ;, if, (, initialization, ., getParent, (, ), ., isVar, (, ), ), {, it, =]
[(, initialization, ., getParent, (, ), ., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (]
[(, initialization, ., getParent, (, ), ., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (]
[., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,]
[., isVar, (, ), ), {, it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,]
[it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,]
[it, =, NodeIterators, ., LocalVarMotion, ., forVar, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,]
[(, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (]
[(, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (]
[(, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ), ;, }, else, if, (]
[getGrandparent, (, ), ), ;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {]
[getGrandparent, (, ), ), ;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {]
[;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[;, }, else, if, (, initialization, ., getParent, (, ), ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[isAssign, (, ), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;]
[), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =]
[), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =]
[), ), {, Preconditions, ., checkState, (, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =]
[(, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (]
[(, initialization, ., getGrandparent, (, ), ., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (]
[., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,]
[., isExprResult, (, ), ), ;, it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,]
[it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,]
[it, =, NodeIterators, ., LocalVarMotion, ., forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,]
[forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,]
[forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,]
[forAssign, (, initialization, ., getNode, (, ), ,, initialization, ., getParent, (, ), ,, initialization, ., getGrandparent, (, ), ,]
[., getGrandparent, (, ), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw]
[), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (]
[), ,, initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (]
[initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +]
[initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +]
[initialization, ., getGrandparent, (, ), ., getParent, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "Unexpected initialization parent ", +]
[new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =]
[new, IllegalStateException, (, "Unexpected initialization parent ", +, initialization, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =]
[(, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (]
[(, ), ., toStringTree, (, ), ), ;, }, Node, targetName, =, reference, ., getNode, (, ), ;, while, (]
[targetName, =, reference, ., getNode, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, curNode, =]
[targetName, =, reference, ., getNode, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Node, curNode, =]
[while, (, it, ., hasNext, (, ), ), {, Node, curNode, =, it, ., next, (, ), ;, if, (]
[while, (, it, ., hasNext, (, ), ), {, Node, curNode, =, it, ., next, (, ), ;, if, (]
[it, ., hasNext, (, ), ), {, Node, curNode, =, it, ., next, (, ), ;, if, (, curNode, ==]
[), ), {, Node, curNode, =, it, ., next, (, ), ;, if, (, curNode, ==, targetName, ), {, return]
[=, it, ., next, (, ), ;, if, (, curNode, ==, targetName, ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return]
[), {, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return]
[{, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (]
[{, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (]
[{, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (]
[{, return, true, ;, }, }, return, false, ;, }, private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (]
[private, boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent, (, ), ., isVar, (, ), &&]
[boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent, (, ), ., isVar, (, ), &&, !]
[boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent, (, ), ., isVar, (, ), &&, !]
[boolean, isValidDeclaration, (, Reference, declaration, ), {, return, (, declaration, ., getParent, (, ), ., isVar, (, ), &&, !]
[getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||]
[getParent, (, ), ., isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||]
[isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (]
[isVar, (, ), &&, !, declaration, ., getGrandparent, (, ), ., isFor, (, ), ), ||, NodeUtil, ., isFunctionDeclaration, (]
[isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (]
[isFunctionDeclaration, (, declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (]
[declaration, ., getParent, (, ), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==]
[), ), ;, }, private, boolean, isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return]
[isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return, false, ;, }, else, if, (]
[isValidInitialization, (, Reference, initialization, ), {, if, (, initialization, ==, null, ), {, return, false, ;, }, else, if, (]
[==, null, ), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (]
[==, null, ), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (]
[null, ), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !]
[null, ), {, return, false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !]
[false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (]
[false, ;, }, else, if, (, initialization, ., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (]
[., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&]
[., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&]
[., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&]
[., isDeclaration, (, ), ), {, if, (, !, NodeUtil, ., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&]
[., isFunctionDeclaration, (, initialization, ., getParent, (, ), ), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==]
[., getParent, (, ), ), &&, initialization, ., getNode, (, ), ., getFirstChild, (, ), ==, null, ), {, return]
[(, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =]
[(, ), ., getFirstChild, (, ), ==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =]
[==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;]
[==, null, ), {, return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;]
[return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[return, false, ;, }, }, else, {, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[{, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&]
[{, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&]
[{, Node, parent, =, initialization, ., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&]
[getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[(, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, ), ), ;, }, Node, n, =]
[(, ), &&, parent, ., getFirstChild, (, ), ==, initialization, ., getNode, (, ), ), ;, }, Node, n, =]
[==, initialization, ., getNode, (, ), ), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (]
[==, initialization, ., getNode, (, ), ), ;, }, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (]
[}, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), ), {, return]
[}, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), ), {, return]
[}, Node, n, =, initialization, ., getAssignedValue, (, ), ;, if, (, n, ., isFunction, (, ), ), {, return]
[), ;, if, (, n, ., isFunction, (, ), ), {, return, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (]
[., isFunction, (, ), ), {, return, compiler, ., getCodingConvention, (, ), ., isInlinableFunction, (, n, ), ;, }, return]
[., isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return]
[., isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return]
[isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !]
[isInlinableFunction, (, n, ), ;, }, return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !]
[return, true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration, (, ), &&]
[true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration, (, ), &&, !]
[true, ;, }, private, boolean, isValidReference, (, Reference, reference, ), {, return, !, reference, ., isDeclaration, (, ), &&, !]
[), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =]
[), ;, }, private, boolean, isImmutableAndWellDefinedVariable, (, Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =]
[Var, v, ,, ReferenceCollection, refInfo, ), {, List, <, Reference, >, refSet, =, refInfo, ., references, ;, int, startingReadRef, =]
[), {, List, <, Reference, >, refSet, =, refInfo, ., references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =]
[), {, List, <, Reference, >, refSet, =, refInfo, ., references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =]
[Reference, >, refSet, =, refInfo, ., references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (]
[., references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (]
[references, ;, int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (, !]
[int, startingReadRef, =, 1, ;, Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (, !, isValidDeclaration, (]
[Reference, refDecl, =, refSet, ., get, (, 0, ), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return]
[(, 0, ), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =]
[(, 0, ), ;, if, (, !, isValidDeclaration, (, refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =]
[(, refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (]
[refDecl, ), ), {, return, false, ;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !]
[;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =]
[;, }, boolean, isNeverAssigned, =, refInfo, ., isNeverAssigned, (, ), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =]
[(, ), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (]
[), ;, if, (, !, isNeverAssigned, ), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !]
[if, (, !, isNeverAssigned, ), {, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (]
[{, Reference, refInit, =, refInfo, ., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {, return]
[., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (]
[., getInitializingReference, (, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (]
[(, ), ;, if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=]
[if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {]
[if, (, !, isValidInitialization, (, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {]
[(, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (]
[(, refInit, ), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (]
[), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==]
[), ), {, return, false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==]
[false, ;, }, if, (, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (]
[(, refDecl, !=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;]
[!=, refInit, ), {, Preconditions, ., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =]
[., checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (]
[checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (, !]
[checkState, (, refInit, ==, refSet, ., get, (, 1, ), ), ;, startingReadRef, =, 2, ;, }, if, (, !]
[1, ), ), ;, startingReadRef, =, 2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return]
[2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =]
[2, ;, }, if, (, !, refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =]
[refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;]
[refInfo, ., isWellDefined, (, ), ), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;]
[), ), {, return, false, ;, }, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (]
[}, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =]
[}, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =]
[}, Node, value, =, refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =]
[refInit, ., getAssignedValue, (, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (]
[(, ), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&]
[), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (]
[), ;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (]
[;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !]
[;, Preconditions, ., checkNotNull, (, value, ), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !]
[), ;, boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||]
[boolean, isImmutableValueWorthInlining, =, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (]
[=, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,]
[=, NodeUtil, ., isImmutableValue, (, value, ), &&, (, !, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,]
[!, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =]
[!, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =]
[!, value, ., isString, (, ), ||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =]
[||, isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&]
[isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !]
[isStringWorthInlining, (, v, ,, refInfo, ., references, ), ), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !]
[), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (]
[), ;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (]
[;, boolean, isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !]
[isInlinableThisAlias, =, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&]
[=, value, ., isThis, (, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&, !]
[(, ), &&, !, refInfo, ., isEscaped, (, ), ;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return]
[;, if, (, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =]
[(, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;]
[(, !, isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;]
[isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <]
[isImmutableValueWorthInlining, &&, !, isInlinableThisAlias, ), {, return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <]
[return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (, ), ;]
[return, false, ;, }, }, for, (, int, i, =, startingReadRef, ;, i, <, refSet, ., size, (, ), ;]
[int, i, =, startingReadRef, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, Reference, ref, =]
[int, i, =, startingReadRef, ;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, Reference, ref, =]
[;, i, <, refSet, ., size, (, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (]
[size, (, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (]
[(, ), ;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !]
[;, i, ++, ), {, Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (]
[Reference, ref, =, refSet, ., get, (, i, ), ;, if, (, !, isValidReference, (, ref, ), ), {, return]
[get, (, i, ), ;, if, (, !, isValidReference, (, ref, ), ), {, return, false, ;, }, }, return]
